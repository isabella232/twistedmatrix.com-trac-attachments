Index: twisted/names/test/test_cache.py
===================================================================
--- twisted/names/test/test_cache.py	(revision 34488)
+++ twisted/names/test/test_cache.py	(working copy)
@@ -50,7 +50,7 @@
 
     def test_cachedResultExpires(self):
         """
-        Once the TTL has been exceeded, the result is removed from the cache
+        Once the TTL has been exceeded, the result is removed from the cache.
         """
         r = ([dns.RRHeader("example.com", dns.A, dns.IN, 60,
                            dns.Record_A("127.0.0.1", 60))],
@@ -58,26 +58,26 @@
                            dns.Record_A("127.0.0.1", 50))],
              [dns.RRHeader("example.com", dns.A, dns.IN, 40,
                            dns.Record_A("127.0.0.1", 40))])
-        
+
         clock = task.Clock()
-        
+
         c = cache.CacheResolver(reactor=clock)
         query = dns.Query(name="example.com", type=dns.A, cls=dns.IN)
         c.cacheResult(query, r)
-        
+
         clock.advance(40)
-        
+
         self.assertNotIn(query, c.cache)
-        
+
         return self.assertFailure(
             c.lookupAddress("example.com"), dns.DomainError)
 
-    
+
     def test_expiredTTLLookup(self):
         """
         When the cache is queried exactly as the cached entry should expire
         but before it has actually been cleared, the cache should not return
-        the expired entry
+        the expired entry.
         """
         r = ([dns.RRHeader("example.com", dns.A, dns.IN, 60,
                            dns.Record_A("127.0.0.1", 60))],
Index: twisted/names/test/test_dns.py
===================================================================
--- twisted/names/test/test_dns.py	(revision 34488)
+++ twisted/names/test/test_dns.py	(working copy)
@@ -1494,7 +1494,7 @@
     def test_negativeTTL(self):
         """
         L{dns.RRHeader} instances cannot be created with a negative ttl
-        so that DNS caches do not serve expired information
+        so that DNS caches do not serve expired information.
         """
         self.assertRaises(ValueError, dns.RRHeader, "example.com", dns.A,
             dns.IN, -1, dns.Record_A("127.0.0.1"))
Index: twisted/names/topfiles/5647.bugfix
===================================================================
--- twisted/names/topfiles/5647.bugfix	(revision 0)
+++ twisted/names/topfiles/5647.bugfix	(revision 0)
@@ -0,0 +1 @@
+twisted.names.cache.CacheResolveri will no longer serve results that have expired.
\ No newline at end of file
Index: twisted/names/cache.py
===================================================================
--- twisted/names/cache.py	(revision 34488)
+++ twisted/names/cache.py	(working copy)
@@ -68,15 +68,17 @@
             diff = now - when
 
             try:
-                return defer.succeed((
+                result = (
                     [dns.RRHeader(str(r.name), r.type, r.cls, r.ttl - diff,
                                   r.payload) for r in ans],
                     [dns.RRHeader(str(r.name), r.type, r.cls, r.ttl - diff,
                                   r.payload) for r in auth],
                     [dns.RRHeader(str(r.name), r.type, r.cls, r.ttl - diff,
-                                  r.payload) for r in add]))
+                                  r.payload) for r in add])
             except ValueError:
                 return defer.fail(failure.Failure(dns.DomainError(name)))
+            else:
+                return defer.succeed(result)
 
 
     def lookupAllRecords(self, name, timeout = None):
Index: twisted/names/dns.py
===================================================================
--- twisted/names/dns.py	(revision 34488)
+++ twisted/names/dns.py	(working copy)
@@ -482,10 +482,10 @@
         @type payload: An object implementing C{IEncodable}
         @param payload: A Query Type specific data object.
 
-        @raises ValueError: if the ttl is negative
+        @raises ValueError: if the ttl is negative.
         """
         assert (payload is None) or isinstance(payload, UnknownRecord) or (payload.TYPE == type)
-        
+
         if ttl < 0:
             raise ValueError("TTL cannot be negative")
 
