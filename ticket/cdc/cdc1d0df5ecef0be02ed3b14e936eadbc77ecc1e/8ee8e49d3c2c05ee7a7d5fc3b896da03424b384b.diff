Index: twisted/test/test_compat.py
===================================================================
--- twisted/test/test_compat.py	(revision 34488)
+++ twisted/test/test_compat.py	(working copy)
@@ -80,12 +80,13 @@
         self.assertEqual(lst1, lst2)
 
     def testIsinstance(self):
-        self.assert_(isinstance(u'hi', types.StringTypes))
-        self.assert_(isinstance(self, unittest.TestCase))
-        # I'm pretty sure it's impossible to implement this
-        # without replacing isinstance on 2.2 as well :(
-        # self.assert_(isinstance({}, dict))
+        """
+        The current object is an instance of
+        unittest.TestCase.
+        """
+        self.assertTrue(isinstance(self, unittest.TestCase))
 
+
     def testStrip(self):
         self.assertEqual(' x '.lstrip(' '), 'x ')
         self.assertEqual(' x x'.lstrip(' '), 'x x')
Index: twisted/test/test_defgen.py
===================================================================
--- twisted/test/test_defgen.py	(revision 34488)
+++ twisted/test/test_defgen.py	(working copy)
@@ -1,5 +1,10 @@
-from __future__ import generators, nested_scopes
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+Tests for L{twisted.internet.defer.deferredGenerator} and related APIs.
+"""
+
 import sys
 
 from twisted.internet import reactor
Index: twisted/test/test_process.py
===================================================================
--- twisted/test/test_process.py	(revision 34488)
+++ twisted/test/test_process.py	(working copy)
@@ -201,13 +201,14 @@
         if childFD == 1:
             self.stages.append(2)
             if self.data != "abcd":
-                raise RuntimeError
+                raise RuntimeError(
+                    "Data was %r instead of 'abcd'" % (self.data,))
             self.transport.write("1234")
         elif childFD == 2:
             self.stages.append(3)
             if self.err != "1234":
-                print 'err != 1234: ' + repr(self.err)
-                raise RuntimeError()
+                raise RuntimeError(
+                    "Err was %r instead of '1234'" % (self.err,))
             self.transport.write("abcd")
             self.stages.append(4)
         elif childFD == 0:
@@ -1162,7 +1163,7 @@
 
         # This script runs until we disconnect its transport.
         pythonExecutable = sys.executable
-        scriptPath = util.sibpath(__file__, "process_twisted.py")
+        scriptPath = util.sibpath(__file__, "process_echoer.py")
 
         class ErrorInProcessEnded(protocol.ProcessProtocol):
             """
Index: twisted/test/test_stdio.py
===================================================================
--- twisted/test/test_stdio.py	(revision 34488)
+++ twisted/test/test_stdio.py	(working copy)
@@ -364,37 +364,8 @@
                 ''.join(map(str, range(howMany))))
         onConnLost.addCallback(cbLost)
         return onConnLost
-    if reactor.__class__.__name__ == 'EPollReactor':
+
+    if platform.isWindows():
         test_normalFileStandardOut.skip = (
-            "epoll(7) does not support normal files.  See #4429.  "
-            "This should be a todo but technical limitations prevent "
-            "this.")
-    elif platform.isWindows():
-        test_normalFileStandardOut.skip = (
             "StandardIO does not accept stdout as an argument to Windows.  "
             "Testing redirection to a file is therefore harder.")
-
-
-    def test_normalFileStandardOutGoodEpollError(self):
-        """
-        Using StandardIO with epollreactor with stdout redirected to a
-        normal file fails with a comprehensible error (until it is
-        supported, when #4429 is resolved).  See also #2259 and #3442.
-        """
-        path = filepath.FilePath(self.mktemp())
-        normal = path.open('w')
-        fd = normal.fileno()
-        self.addCleanup(normal.close)
-        exc = self.assertRaises(
-            RuntimeError,
-            stdio.StandardIO, protocol.Protocol(), stdout=fd)
-        
-        self.assertEqual(
-            str(exc),
-            "This reactor does not support this type of file descriptor (fd "
-            "%d, mode %d) (for example, epollreactor does not support normal "
-            "files.  See #4429)." % (fd, os.fstat(fd).st_mode))
-    if reactor.__class__.__name__ != 'EPollReactor':
-        test_normalFileStandardOutGoodEpollError.skip = (
-            "Only epollreactor is expected to fail with stdout redirected "
-            "to a normal file.")
Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(revision 34488)
+++ twisted/test/test_amp.py	(working copy)
@@ -9,7 +9,8 @@
 import datetime
 import decimal
 
-from zope.interface.verify import verifyObject
+from zope.interface import implements
+from zope.interface.verify import verifyClass, verifyObject
 
 from twisted.python.util import setIDFunction
 from twisted.python import filepath
@@ -2946,6 +2947,145 @@
 
 
 
+class UNIXStringTransport(object):
+    """
+    An in-memory implementation of L{interfaces.IUNIXTransport} which collects
+    all data given to it for later inspection.
+
+    @ivar _queue: A C{list} of the data which has been given to this transport,
+        eg via C{write} or C{sendFileDescriptor}.  Elements are two-tuples of a
+        string (identifying the destination of the data) and the data itself.
+    """
+    implements(interfaces.IUNIXTransport)
+
+    def __init__(self, descriptorFuzz):
+        """
+        @param descriptorFuzz: An offset to apply to descriptors.
+        @type descriptorFuzz: C{int}
+        """
+        self._fuzz = descriptorFuzz
+        self._queue = []
+
+
+    def sendFileDescriptor(self, descriptor):
+        self._queue.append((
+                'fileDescriptorReceived', descriptor + self._fuzz))
+
+
+    def write(self, data):
+        self._queue.append(('dataReceived', data))
+
+
+    def writeSequence(self, seq):
+        for data in seq:
+            self.write(data)
+
+
+    def loseConnection(self):
+        self._queue.append(('connectionLost', Failure(ConnectionLost())))
+
+
+    def getHost(self):
+        return UNIXAddress('/tmp/some-path')
+
+
+    def getPeer(self):
+        return UNIXAddress('/tmp/another-path')
+
+# Minimal evidence that we got the signatures right
+verifyClass(interfaces.ITransport, UNIXStringTransport)
+verifyClass(interfaces.IUNIXTransport, UNIXStringTransport)
+
+
+class DescriptorTests(unittest.TestCase):
+    """
+    Tests for L{amp.Descriptor}, an argument type for passing a file descriptor
+    over an AMP connection over a UNIX domain socket.
+    """
+    def setUp(self):
+        self.fuzz = 3
+        self.transport = UNIXStringTransport(descriptorFuzz=self.fuzz)
+        self.protocol = amp.BinaryBoxProtocol(
+            amp.BoxDispatcher(amp.CommandLocator()))
+        self.protocol.makeConnection(self.transport)
+
+
+    def test_fromStringProto(self):
+        """
+        L{Descriptor.fromStringProto} constructs a file descriptor value by
+        extracting a previously received file descriptor corresponding to the
+        wire value of the argument from the L{_DescriptorExchanger} state of the
+        protocol passed to it.
+
+        This is a whitebox test which involves direct L{_DescriptorExchanger}
+        state inspection.
+        """
+        argument = amp.Descriptor()
+        self.protocol.fileDescriptorReceived(5)
+        self.protocol.fileDescriptorReceived(3)
+        self.protocol.fileDescriptorReceived(1)
+        self.assertEqual(
+            5, argument.fromStringProto("0", self.protocol))
+        self.assertEqual(
+            3, argument.fromStringProto("1", self.protocol))
+        self.assertEqual(
+            1, argument.fromStringProto("2", self.protocol))
+        self.assertEqual({}, self.protocol._descriptors)
+
+
+    def test_toStringProto(self):
+        """
+        To send a file descriptor, L{Descriptor.toStringProto} uses the
+        L{IUNIXTransport.sendFileDescriptor} implementation of the transport of
+        the protocol passed to it to copy the file descriptor.  Each subsequent
+        descriptor sent over a particular AMP connection is assigned the next
+        integer value, starting from 0.  The base ten string representation of
+        this value is the byte encoding of the argument.
+
+        This is a whitebox test which involves direct L{_DescriptorExchanger}
+        state inspection and mutation.
+        """
+        argument = amp.Descriptor()
+        self.assertEqual("0", argument.toStringProto(2, self.protocol))
+        self.assertEqual(
+            ("fileDescriptorReceived", 2 + self.fuzz), self.transport._queue.pop(0))
+        self.assertEqual("1", argument.toStringProto(4, self.protocol))
+        self.assertEqual(
+            ("fileDescriptorReceived", 4 + self.fuzz), self.transport._queue.pop(0))
+        self.assertEqual("2", argument.toStringProto(6, self.protocol))
+        self.assertEqual(
+            ("fileDescriptorReceived", 6 + self.fuzz), self.transport._queue.pop(0))
+        self.assertEqual({}, self.protocol._descriptors)
+
+
+    def test_roundTrip(self):
+        """
+        L{amp.Descriptor.fromBox} can interpret an L{amp.AmpBox} constructed by
+        L{amp.Descriptor.toBox} to reconstruct a file descriptor value.
+        """
+        name = "alpha"
+        strings = {}
+        descriptor = 17
+        sendObjects = {name: descriptor}
+
+        argument = amp.Descriptor()
+        argument.toBox(name, strings, sendObjects.copy(), self.protocol)
+
+        receiver = amp.BinaryBoxProtocol(
+            amp.BoxDispatcher(amp.CommandLocator()))
+        for event in self.transport._queue:
+            getattr(receiver, event[0])(*event[1:])
+
+        receiveObjects = {}
+        argument.fromBox(name, strings.copy(), receiveObjects, receiver)
+
+        # Make sure we got the descriptor.  Adjust by fuzz to be more convincing
+        # of having gone through L{IUNIXTransport.sendFileDescriptor}, not just
+        # converted to a string and then parsed back into an integer.
+        self.assertEqual(descriptor + self.fuzz, receiveObjects[name])
+
+
+
 class DateTimeTests(unittest.TestCase):
     """
     Tests for L{amp.DateTime}, L{amp._FixedOffsetTZInfo}, and L{amp.utc}.
Index: twisted/python/sendmsg.c
===================================================================
--- twisted/python/sendmsg.c	(revision 34488)
+++ twisted/python/sendmsg.c	(working copy)
@@ -51,7 +51,7 @@
     constants in the sendmsg(2) manual page.  By default no flags are set.\n\
 @type flags: C{int}\n\
 \n\
-@params ancillary: Extra data to send over the socket outside of the normal\n\
+@param ancillary: Extra data to send over the socket outside of the normal\n\
     datagram or stream mechanism.  By default no ancillary data is sent.\n\
 @type ancillary: C{list} of C{tuple} of C{int}, C{int}, and C{str}.\n\
 \n\
Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 34488)
+++ twisted/python/filepath.py	(working copy)
@@ -873,7 +873,7 @@
 
     def getInodeNumber(self):
         """
-        Retrieve the file serial number, also called inode number, which 
+        Retrieve the file serial number, also called inode number, which
         distinguishes this file from all other files on the same device.
 
         @raise: NotImplementedError if the platform is Windows, since the
@@ -1046,7 +1046,7 @@
         """
         Returns whether the underlying path is a block device.
 
-        @return: C{True} if it is a block device, C{False} otherwise 
+        @return: C{True} if it is a block device, C{False} otherwise
         @rtype: C{bool}
         @since: 11.1
         """
@@ -1063,7 +1063,7 @@
         """
         Returns whether the underlying path is a socket.
 
-        @return: C{True} if it is a socket, C{False} otherwise 
+        @return: C{True} if it is a socket, C{False} otherwise
         @rtype: C{bool}
         @since: 11.1
         """
@@ -1254,8 +1254,6 @@
         os.rename(sib.path, self.path)
 
 
-    # new in 2.2.0
-
     def __cmp__(self, other):
         if not isinstance(other, FilePath):
             return NotImplemented
Index: twisted/python/runtime.py
===================================================================
--- twisted/python/runtime.py	(revision 34488)
+++ twisted/python/runtime.py	(working copy)
@@ -10,13 +10,15 @@
 import imp
 
 
+
 def shortPythonVersion():
-    hv = sys.hexversion
-    major = (hv & 0xff000000L) >> 24
-    minor = (hv & 0x00ff0000L) >> 16
-    teeny = (hv & 0x0000ff00L) >> 8
-    return "%s.%s.%s" % (major,minor,teeny)
+    """
+    Returns the Python version as a dot-separated string.
+    """
+    return "%s.%s.%s" % sys.version_info[:3]
 
+
+
 knownPlatforms = {
     'nt': 'win32',
     'ce': 'win32',
@@ -25,11 +27,15 @@
     'org.python.modules.os': 'java',
     }
 
+
+
 _timeFunctions = {
     #'win32': time.clock,
     'win32': time.time,
     }
 
+
+
 class Platform:
     """Gives us information about the platform we're running on"""
 
@@ -69,8 +75,9 @@
         if self.getType() == 'win32':
             import _winreg
             try:
-                k=_winreg.OpenKeyEx(_winreg.HKEY_LOCAL_MACHINE,
-                                    r'Software\Microsoft\Windows NT\CurrentVersion')
+                k = _winreg.OpenKeyEx(
+                        _winreg.HKEY_LOCAL_MACHINE,
+                        r'Software\Microsoft\Windows NT\CurrentVersion')
                 _winreg.QueryValueEx(k, 'SystemRoot')
                 return 1
             except WindowsError:
Index: twisted/python/test/test_runtime.py
===================================================================
--- twisted/python/test/test_runtime.py	(revision 34488)
+++ twisted/python/test/test_runtime.py	(working copy)
@@ -7,11 +7,26 @@
 
 import sys
 
-from twisted.python.runtime import Platform
+from twisted.python.runtime import Platform, shortPythonVersion
 from twisted.trial.unittest import TestCase
 
 
 
+class PythonVersionTests(TestCase):
+    """
+    Tests the shortPythonVersion method.
+    """
+
+    def test_shortPythonVersion(self):
+        """
+        Verify if the Python version is returned correctly.
+        """
+        ver = shortPythonVersion().split('.')
+        for i in range(3):
+            self.assertEqual(int(ver[i]), sys.version_info[i])
+
+
+
 class PlatformTests(TestCase):
     """
     Tests for the default L{Platform} initializer.
Index: twisted/protocols/ident.py
===================================================================
--- twisted/protocols/ident.py	(revision 34488)
+++ twisted/protocols/ident.py	(working copy)
@@ -4,12 +4,8 @@
 
 """
 Ident protocol implementation.
-
-@author: Jean-Paul Calderone
 """
 
-from __future__ import generators
-
 import struct
 
 from twisted.internet import defer
Index: twisted/protocols/htb.py
===================================================================
--- twisted/protocols/htb.py	(revision 34488)
+++ twisted/protocols/htb.py	(working copy)
@@ -1,10 +1,10 @@
 # -*- test-case-name: twisted.test.test_htb -*-
-#
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
-"""Hierarchical Token Bucket traffic shaping.
+"""
+Hierarchical Token Bucket traffic shaping.
 
 Patterned after U{Martin Devera's Hierarchical Token Bucket traffic
 shaper for the Linux kernel<http://luxik.cdi.cz/~devik/qos/htb/>}.
@@ -13,10 +13,8 @@
   <http://luxik.cdi.cz/~devik/qos/htb/manual/userg.htm>}
 @seealso: U{Token Bucket Filter in Linux Advanced Routing & Traffic Control
     HOWTO<http://lartc.org/howto/lartc.qdisc.classless.html#AEN682>}
-@author: Kevin Turner
 """
 
-from __future__ import nested_scopes
 
 __version__ = '$Revision: 1.5 $'[11:-2]
 
Index: twisted/protocols/amp.py
===================================================================
--- twisted/protocols/amp.py	(revision 34488)
+++ twisted/protocols/amp.py	(working copy)
@@ -178,6 +178,7 @@
 from cStringIO import StringIO
 from struct import pack
 import decimal, datetime
+from itertools import count
 
 from zope.interface import Interface, implements
 
@@ -187,6 +188,7 @@
 from twisted.python.failure import Failure
 from twisted.python import log, filepath
 
+from twisted.internet.interfaces import IFileDescriptorReceiver
 from twisted.internet.main import CONNECTION_LOST
 from twisted.internet.error import PeerVerifyError, ConnectionLost
 from twisted.internet.error import ConnectionClosed
@@ -1473,6 +1475,74 @@
                     objects, self.subargs, Box(), proto
                     ).serialize() for objects in inObject])
 
+
+
+class Descriptor(Integer):
+    """
+    Encode and decode file descriptors for exchange over a UNIX domain socket.
+
+    This argument type requires an AMP connection set up over an
+    L{IUNIXTransport<twisted.internet.interfaces.IUNIXTransport>} provider (for
+    example, the kind of connection created by
+    L{IReactorUNIX.connectUNIX<twisted.internet.interfaces.IReactorUNIX.connectUNIX>}
+    and L{UNIXClientEndpoint<twisted.internet.endpoints.UNIXClientEndpoint>}).
+
+    There is no correspondence between the integer value of the file descriptor
+    on the sending and receiving sides, therefore an alternate approach is taken
+    to matching up received descriptors with particular L{Descriptor}
+    parameters.  The argument is encoded to an ordinal (unique per connection)
+    for inclusion in the AMP command or response box.  The descriptor itself is
+    sent using
+    L{IUNIXTransport.sendFileDescriptor<twisted.internet.interfaces.IUNIXTransport.sendFileDescriptor>}.
+    The receiver uses the order in which file descriptors are received and the
+    ordinal value to come up with the received copy of the descriptor.
+    """
+    def fromStringProto(self, inString, proto):
+        """
+        Take a unique identifier associated with a file descriptor which must
+        have been received by now and use it to look up that descriptor in a
+        dictionary where they are kept.
+
+        @param inString: The base representation (as a byte string) of an
+            ordinal indicating which file descriptor corresponds to this usage
+            of this argument.
+        @type inString: C{str}
+
+        @param proto: The protocol used to receive this descriptor.  This
+            protocol must be connected via a transport providing
+            L{IUNIXTransport<twisted.internet.interfaces.IUNIXTransport>}.
+        @type proto: L{BinaryBoxProtocol}
+
+        @return: The file descriptor represented by C{inString}.
+        @rtype: C{int}
+        """
+        return proto._getDescriptor(int(inString))
+
+
+    def toStringProto(self, inObject, proto):
+        """
+        Send C{inObject}, an integer file descriptor, over C{proto}'s connection
+        and return a unique identifier which will allow the receiver to
+        associate the file descriptor with this argument.
+
+        @param inObject: A file descriptor to duplicate over an AMP connection
+            as the value for this argument.
+        @type inObject: C{int}
+
+        @param proto: The protocol which will be used to send this descriptor.
+            This protocol must be connected via a transport providing
+            L{IUNIXTransport<twisted.internet.interfaces.IUNIXTransport>}.
+
+        @return: A byte string which can be used by the receiver to reconstruct
+            the file descriptor.
+        @type: C{str}
+        """
+        identifier = proto._sendFileDescriptor(inObject)
+        outString = Integer.toStringProto(self, identifier, proto)
+        return outString
+
+
+
 class Command:
     """
     Subclass me to specify an AMP Command.
@@ -1929,9 +1999,61 @@
 
 
 
-class BinaryBoxProtocol(StatefulStringProtocol, Int16StringReceiver):
+class _DescriptorExchanger(object):
     """
-    A protocol for receving L{Box}es - key/value pairs - via length-prefixed
+    L{_DescriptorExchanger} is a mixin for L{BinaryBoxProtocol} which adds
+    support for receiving file descriptors, a feature offered by
+    L{IUNIXTransport<twisted.internet.interfaces.IUNIXTransport>}.
+
+    @ivar _descriptors: Temporary storage for all file descriptors received.
+        Values in this dictionary are the file descriptors (as integers).  Keys
+        in this dictionary are ordinals giving the order in which each
+        descriptor was received.  The ordering information is used to allow
+        L{Descriptor} to determine which is the correct descriptor for any
+        particular usage of that argument type.
+    @type _descriptors: C{dict}
+
+    @ivar _sendingDescriptorCounter: A no-argument callable which returns the
+        ordinals, starting from 0.  This is used to construct values for
+        C{_sendFileDescriptor}.
+
+    @ivar _receivingDescriptorCounter: A no-argument callable which returns the
+        ordinals, starting from 0.  This is used to construct values for
+        C{fileDescriptorReceived}.
+    """
+    implements(IFileDescriptorReceiver)
+
+    def __init__(self):
+        self._descriptors = {}
+        self._getDescriptor = self._descriptors.pop
+        self._sendingDescriptorCounter = count().next
+        self._receivingDescriptorCounter = count().next
+
+
+    def _sendFileDescriptor(self, descriptor):
+        """
+        Assign and return the next ordinal to the given descriptor after sending
+        the descriptor over this protocol's transport.
+        """
+        self.transport.sendFileDescriptor(descriptor)
+        return self._sendingDescriptorCounter()
+
+
+    def fileDescriptorReceived(self, descriptor):
+        """
+        Collect received file descriptors to be claimed later by L{Descriptor}.
+
+        @param descriptor: The received file descriptor.
+        @type descriptor: C{int}
+        """
+        self._descriptors[self._receivingDescriptorCounter()] = descriptor
+
+
+
+class BinaryBoxProtocol(StatefulStringProtocol, Int16StringReceiver,
+                        _DescriptorExchanger):
+    """
+    A protocol for receiving L{AmpBox}es - key/value pairs - via length-prefixed
     strings.  A box is composed of:
 
         - any number of key-value pairs, described by:
@@ -1958,7 +2080,7 @@
         than allowed by the protocol was received.
 
     @ivar boxReceiver: an L{IBoxReceiver} provider, whose L{ampBoxReceived}
-    method will be invoked for each L{Box} that is received.
+    method will be invoked for each L{AmpBox} that is received.
     """
 
     implements(IBoxSender)
@@ -1977,6 +2099,7 @@
     innerProtocolClientFactory = None
 
     def __init__(self, boxReceiver):
+        _DescriptorExchanger.__init__(self)
         self.boxReceiver = boxReceiver
 
 
Index: twisted/scripts/trial.py
===================================================================
--- twisted/scripts/trial.py	(revision 34488)
+++ twisted/scripts/trial.py	(working copy)
@@ -8,7 +8,7 @@
 
 from twisted.internet import defer
 from twisted.application import app
-from twisted.python import usage, reflect, failure, versions, deprecate
+from twisted.python import usage, reflect, failure
 from twisted.python.filepath import FilePath
 from twisted import plugin
 from twisted.python.util import spewer
@@ -142,7 +142,6 @@
         )
 
     fallbackReporter = reporter.TreeReporter
-    extra = None
     tracer = None
 
     def __init__(self):
@@ -234,21 +233,6 @@
                 "tbformat must be 'plain', 'emacs', or 'cgitb'.")
 
 
-    def opt_extra(self, arg):
-        """
-        Add an extra argument.  (This is a hack necessary for interfacing with
-        emacs's `gud'.)  NOTE: This option is deprecated as of Twisted 11.0
-        """
-        warnings.warn(deprecate.getDeprecationWarningString(Options.opt_extra,
-                                                            versions.Version('Twisted', 11, 0, 0)),
-                      category=DeprecationWarning, stacklevel=2)
-
-        if self.extra is None:
-            self.extra = []
-        self.extra.append(arg)
-    opt_x = opt_extra
-
-
     def opt_recursionlimit(self, arg):
         """
         see sys.setrecursionlimit()
@@ -288,8 +272,6 @@
 
     def parseArgs(self, *args):
         self['tests'].update(args)
-        if self.extra is not None:
-            self['tests'].update(self.extra)
 
 
     def _loadReporterByName(self, name):
Index: twisted/scripts/tkunzip.py
===================================================================
--- twisted/scripts/tkunzip.py	(revision 34488)
+++ twisted/scripts/tkunzip.py	(working copy)
@@ -3,11 +3,9 @@
 # See LICENSE for details.
 
 """
-Post-install GUI to compile to pyc and unpack twisted doco
+Post-install GUI to compile to pyc and unpack twisted doco.
 """
 
-from __future__ import generators
-
 import sys
 import zipfile
 import py_compile
@@ -15,7 +13,7 @@
 # we're going to ignore failures to import tkinter and fall back
 # to using the console if the required dll is not found
 
-# Scary kludge to work around tk84.dll bug: 
+# Scary kludge to work around tk84.dll bug:
 # https://sourceforge.net/tracker/index.php?func=detail&aid=814654&group_id=5470&atid=105470
 # Without which(): you get a windows missing-dll popup message
 from twisted.python.procutils import which
@@ -71,7 +69,7 @@
 
     def pack(self, *args, **kwargs):
         self.frame.pack(*args, **kwargs)
-    
+
     def updateProgress(self, newValue, newMax=None):
         if newMax:
             self.max = newMax
@@ -91,7 +89,7 @@
               float(value) / self.max * self.width, self.height)
         else:
             self.canvas.coords(self.scale, 0,
-                               self.height - (float(value) / 
+                               self.height - (float(value) /
                                               self.max*self.height),
                                self.width, self.height)
         # Now update the colors
@@ -101,7 +99,7 @@
         if self.doLabel:
             if value:
                 if value >= 0:
-                    pvalue = int((float(value) / float(self.max)) * 
+                    pvalue = int((float(value) / float(self.max)) *
                                    100.0)
                 else:
                     pvalue = 0
@@ -133,7 +131,7 @@
     def setIterator(self, iterator):
         self.iterator=iterator
         return self
-    
+
     def updateBar(self, deferred):
         b=self.bar
         try:
@@ -156,14 +154,14 @@
         if self.stopping:
             deferred.callback(self.root)
             return
-        
+
         try:
             self.remaining=self.iterator.next()
         except StopIteration:
-            self.stopping=1            
+            self.stopping=1
         except:
             deferred.errback(failure.Failure())
-        
+
         if self.remaining%10==0:
             reactor.callLater(0, self.updateBar, deferred)
         if self.remaining%100==0:
@@ -218,7 +216,7 @@
 
     if opt['use-console']:
         # this should come before shell-exec to prevent infinite loop
-        return doItConsolicious(opt)              
+        return doItConsolicious(opt)
     if opt['shell-exec'] or not 'Tkinter' in sys.modules:
         from distutils import sysconfig
         from twisted.scripts import tkunzip
@@ -240,7 +238,7 @@
             if n % 1000 == 0:
                 print
         print 'Done unpacking.'
-        
+
     if opt['compiledir']:
         print 'Compiling to pyc...'
         import compileall
@@ -253,7 +251,7 @@
     root.title('One Moment.')
     root.protocol('WM_DELETE_WINDOW', reactor.stop)
     tksupport.install(root)
-    
+
     prog=ProgressBar(root, value=0, labelColor="black", width=200)
     prog.pack()
 
@@ -265,7 +263,7 @@
         return root
 
     d.addCallback(deiconify)
-    
+
     if opt['zipfile']:
         uz=Progressor('Unpacking documentation...')
         max=zipstream.countZipFileChunks(opt['zipfile'], 4096)
Index: twisted/internet/epollreactor.py
===================================================================
--- twisted/internet/epollreactor.py	(revision 34488)
+++ twisted/internet/epollreactor.py	(working copy)
@@ -32,30 +32,168 @@
     import select as _epoll
 
 
+
+class _ContinuousPolling(posixbase._PollLikeMixin,
+                         posixbase._DisconnectSelectableMixin):
+    """
+    Schedule reads and writes based on the passage of time, rather than
+    notification.
+
+    This is useful for supporting polling filesystem files, which C{epoll(7)}
+    does not support.
+
+    The implementation uses L{posixbase._PollLikeMixin}, which is a bit hacky,
+    but re-implementing and testing the relevant code yet again is
+    unappealing.
+
+    @ivar _reactor: The L{EPollReactor} that is using this instance.
+
+    @ivar _loop: A C{LoopingCall} that drives the polling, or C{None}.
+
+    @ivar _readers: A C{set} of C{FileDescriptor} objects that should be read
+        from.
+
+    @ivar _writers: A C{set} of C{FileDescriptor} objects that should be
+        written to.
+    """
+    implements(IReactorFDSet)
+
+    # Attributes for _PollLikeMixin
+    _POLL_DISCONNECTED = 1
+    _POLL_IN = 2
+    _POLL_OUT = 4
+
+
+    def __init__(self, reactor):
+        self._reactor = reactor
+        self._loop = None
+        self._readers = set()
+        self._writers = set()
+        self.isReading = self._readers.__contains__
+        self.isWriting = self._writers.__contains__
+
+
+    def _checkLoop(self):
+        """
+        Start or stop a C{LoopingCall} based on whether there are readers and
+        writers.
+        """
+        if self._readers or self._writers:
+            if self._loop is None:
+                from twisted.internet.task import LoopingCall, _EPSILON
+                self._loop = LoopingCall(self.iterate)
+                self._loop.clock = self._reactor
+                # LoopingCall seems unhappy with timeout of 0, so use very
+                # small number:
+                self._loop.start(_EPSILON, now=False)
+        elif self._loop:
+            self._loop.stop()
+            self._loop = None
+
+
+    def iterate(self):
+        """
+        Call C{doRead} and C{doWrite} on all readers and writers respectively.
+        """
+        for reader in list(self._readers):
+            self._doReadOrWrite(reader, reader, self._POLL_IN)
+        for reader in list(self._writers):
+            self._doReadOrWrite(reader, reader, self._POLL_OUT)
+
+
+    def addReader(self, reader):
+        """
+        Add a C{FileDescriptor} for notification of data available to read.
+        """
+        self._readers.add(reader)
+        self._checkLoop()
+
+
+    def addWriter(self, writer):
+        """
+        Add a C{FileDescriptor} for notification of data available to write.
+        """
+        self._writers.add(writer)
+        self._checkLoop()
+
+
+    def removeReader(self, reader):
+        """
+        Remove a C{FileDescriptor} from notification of data available to read.
+        """
+        try:
+            self._readers.remove(reader)
+        except KeyError:
+            return
+        self._checkLoop()
+
+
+    def removeWriter(self, writer):
+        """
+        Remove a C{FileDescriptor} from notification of data available to write.
+        """
+        try:
+            self._writers.remove(writer)
+        except KeyError:
+            return
+        self._checkLoop()
+
+
+    def removeAll(self):
+        """
+        Remove all readers and writers.
+        """
+        result = list(self._readers | self._writers)
+        # Don't reset to new value, since self.isWriting and .isReading refer
+        # to the existing instance:
+        self._readers.clear()
+        self._writers.clear()
+        return result
+
+
+    def getReaders(self):
+        """
+        Return a list of the readers.
+        """
+        return list(self._readers)
+
+
+    def getWriters(self):
+        """
+        Return a list of the writers.
+        """
+        return list(self._writers)
+
+
+
 class EPollReactor(posixbase.PosixReactorBase, posixbase._PollLikeMixin):
     """
-    A reactor that uses epoll(4).
+    A reactor that uses epoll(7).
 
-    @ivar _poller: A L{poll} which will be used to check for I/O
+    @ivar _poller: A C{epoll} which will be used to check for I/O
         readiness.
 
     @ivar _selectables: A dictionary mapping integer file descriptors to
-        instances of L{FileDescriptor} which have been registered with the
-        reactor.  All L{FileDescriptors} which are currently receiving read or
+        instances of C{FileDescriptor} which have been registered with the
+        reactor.  All C{FileDescriptors} which are currently receiving read or
         write readiness notifications will be present as values in this
         dictionary.
 
     @ivar _reads: A dictionary mapping integer file descriptors to arbitrary
         values (this is essentially a set).  Keys in this dictionary will be
         registered with C{_poller} for read readiness notifications which will
-        be dispatched to the corresponding L{FileDescriptor} instances in
+        be dispatched to the corresponding C{FileDescriptor} instances in
         C{_selectables}.
 
     @ivar _writes: A dictionary mapping integer file descriptors to arbitrary
         values (this is essentially a set).  Keys in this dictionary will be
         registered with C{_poller} for write readiness notifications which will
-        be dispatched to the corresponding L{FileDescriptor} instances in
+        be dispatched to the corresponding C{FileDescriptor} instances in
         C{_selectables}.
+
+    @ivar _continuousPolling: A L{_ContinuousPolling} instance, used to handle
+        file descriptors (e.g. filesytem files) that are not supported by
+        C{epoll(7)}.
     """
     implements(IReactorFDSet)
 
@@ -76,6 +214,7 @@
         self._reads = {}
         self._writes = {}
         self._selectables = {}
+        self._continuousPolling = _ContinuousPolling(self)
         posixbase.PosixReactorBase.__init__(self)
 
 
@@ -110,14 +249,34 @@
         """
         Add a FileDescriptor for notification of data available to read.
         """
-        self._add(reader, self._reads, self._writes, self._selectables, _epoll.EPOLLIN, _epoll.EPOLLOUT)
+        try:
+            self._add(reader, self._reads, self._writes, self._selectables,
+                      _epoll.EPOLLIN, _epoll.EPOLLOUT)
+        except IOError, e:
+            if e.errno == errno.EPERM:
+                # epoll(7) doesn't support certain file descriptors,
+                # e.g. filesystem files, so for those we just poll
+                # continuously:
+                self._continuousPolling.addReader(reader)
+            else:
+                raise
 
 
     def addWriter(self, writer):
         """
         Add a FileDescriptor for notification of data available to write.
         """
-        self._add(writer, self._writes, self._reads, self._selectables, _epoll.EPOLLOUT, _epoll.EPOLLIN)
+        try:
+            self._add(writer, self._writes, self._reads, self._selectables,
+                      _epoll.EPOLLOUT, _epoll.EPOLLIN)
+        except IOError, e:
+            if e.errno == errno.EPERM:
+                # epoll(7) doesn't support certain file descriptors,
+                # e.g. filesystem files, so for those we just poll
+                # continuously:
+                self._continuousPolling.addWriter(writer)
+            else:
+                raise
 
 
     def _remove(self, xer, primary, other, selectables, event, antievent):
@@ -150,30 +309,42 @@
         """
         Remove a Selectable for notification of data available to read.
         """
-        self._remove(reader, self._reads, self._writes, self._selectables, _epoll.EPOLLIN, _epoll.EPOLLOUT)
+        if self._continuousPolling.isReading(reader):
+            self._continuousPolling.removeReader(reader)
+            return
+        self._remove(reader, self._reads, self._writes, self._selectables,
+                     _epoll.EPOLLIN, _epoll.EPOLLOUT)
 
 
     def removeWriter(self, writer):
         """
         Remove a Selectable for notification of data available to write.
         """
-        self._remove(writer, self._writes, self._reads, self._selectables, _epoll.EPOLLOUT, _epoll.EPOLLIN)
+        if self._continuousPolling.isWriting(writer):
+            self._continuousPolling.removeWriter(writer)
+            return
+        self._remove(writer, self._writes, self._reads, self._selectables,
+                     _epoll.EPOLLOUT, _epoll.EPOLLIN)
 
+
     def removeAll(self):
         """
         Remove all selectables, and return a list of them.
         """
-        return self._removeAll(
-            [self._selectables[fd] for fd in self._reads],
-            [self._selectables[fd] for fd in self._writes])
+        return (self._removeAll(
+                [self._selectables[fd] for fd in self._reads],
+                [self._selectables[fd] for fd in self._writes]) +
+                self._continuousPolling.removeAll())
 
 
     def getReaders(self):
-        return [self._selectables[fd] for fd in self._reads]
+        return ([self._selectables[fd] for fd in self._reads] +
+                self._continuousPolling.getReaders())
 
 
     def getWriters(self):
-        return [self._selectables[fd] for fd in self._writes]
+        return ([self._selectables[fd] for fd in self._writes] +
+                self._continuousPolling.getWriters())
 
 
     def doPoll(self, timeout):
Index: twisted/internet/posixbase.py
===================================================================
--- twisted/internet/posixbase.py	(revision 34488)
+++ twisted/internet/posixbase.py	(working copy)
@@ -234,14 +234,11 @@
 
 
 
-class PosixReactorBase(_SignalReactorMixin, ReactorBase):
-    """
-    A basis for reactors that use file descriptors.
 
-    @ivar _childWaker: C{None} or a reference to the L{_SIGCHLDWaker}
-        which is used to properly notice child process termination.
+class _DisconnectSelectableMixin(object):
     """
-    implements(_IReactorArbitrary, IReactorTCP, IReactorUDP, IReactorMulticast)
+    Mixin providing the C{_disconnectSelectable} method.
+    """
 
     def _disconnectSelectable(self, selectable, why, isRead, faildict={
         error.ConnectionDone: failure.Failure(error.ConnectionDone()),
@@ -267,6 +264,17 @@
             selectable.connectionLost(failure.Failure(why))
 
 
+
+class PosixReactorBase(_SignalReactorMixin, _DisconnectSelectableMixin,
+                       ReactorBase):
+    """
+    A basis for reactors that use file descriptors.
+
+    @ivar _childWaker: C{None} or a reference to the L{_SIGCHLDWaker}
+        which is used to properly notice child process termination.
+    """
+    implements(_IReactorArbitrary, IReactorTCP, IReactorUDP, IReactorMulticast)
+
     # Callable that creates a waker, overrideable so that subclasses can
     # substitute their own implementation:
     _wakerFactory = _Waker
Index: twisted/internet/_oldtls.py
===================================================================
--- twisted/internet/_oldtls.py	(revision 34488)
+++ twisted/internet/_oldtls.py	(working copy)
@@ -10,13 +10,14 @@
 OpenSSL's non-blocking socket-based APIs (which this module probably does about
 99% correctly, but see #4455 for an example of a problem with it).
 
-Eventually, use of this module should emit a warning.  See #4974 and 5014.
+Support for older versions of pyOpenSSL is now deprecated and will be removed
+(see #5014).
 
 @see: L{twisted.internet._newtls}
 @since: 11.1
 """
 
-import os
+import os, warnings
 
 from twisted.python.runtime import platformType
 if platformType == 'win32':
@@ -28,7 +29,7 @@
     from errno import EWOULDBLOCK
     from errno import ENOBUFS
 
-from OpenSSL import SSL
+from OpenSSL import SSL, __version__ as _sslversion
 
 from zope.interface import implements
 
@@ -38,6 +39,11 @@
 from twisted.internet.main import CONNECTION_DONE, CONNECTION_LOST
 from twisted.internet._ssl import _TLSDelayed
 
+warnings.warn(
+    "Support for pyOpenSSL %s is deprecated.  "
+    "Upgrade to pyOpenSSL 0.10 or newer." % (_sslversion,),
+    category=DeprecationWarning,
+    stacklevel=100)
 
 class _TLSMixin:
     _socketShutdownMethod = 'sock_shutdown'
Index: twisted/internet/endpoints.py
===================================================================
--- twisted/internet/endpoints.py	(revision 34488)
+++ twisted/internet/endpoints.py	(working copy)
@@ -55,9 +55,10 @@
         self._connectedDeferred = connectedDeferred
         self._wrappedProtocol = wrappedProtocol
 
-        if interfaces.IHalfCloseableProtocol.providedBy(
-            self._wrappedProtocol):
-            directlyProvides(self, interfaces.IHalfCloseableProtocol)
+        for iface in [interfaces.IHalfCloseableProtocol,
+                      interfaces.IFileDescriptorReceiver]:
+            if iface.providedBy(self._wrappedProtocol):
+                directlyProvides(self, iface)
 
 
     def logPrefix(self):
@@ -85,6 +86,13 @@
         return self._wrappedProtocol.dataReceived(data)
 
 
+    def fileDescriptorReceived(self, descriptor):
+        """
+        Proxy C{fileDescriptorReceived} calls to our C{self._wrappedProtocol}
+        """
+        return self._wrappedProtocol.fileDescriptorReceived(descriptor)
+
+
     def connectionLost(self, reason):
         """
         Proxy C{connectionLost} calls to our C{self._wrappedProtocol}
Index: twisted/internet/abstract.py
===================================================================
--- twisted/internet/abstract.py	(revision 34488)
+++ twisted/internet/abstract.py	(working copy)
@@ -234,7 +234,7 @@
             l = self.writeSomeData(self.dataBuffer)
 
         # There is no writeSomeData implementation in Twisted which returns
-        # 0, but the documentation for writeSomeData used to claim negative
+        # < 0, but the documentation for writeSomeData used to claim negative
         # integers meant connection lost.  Keep supporting this here,
         # although it may be worth deprecating and removing at some point.
         if l < 0 or isinstance(l, Exception):
@@ -290,6 +290,34 @@
         # override in subclasses
         self.connectionLost(reason)
 
+
+    def _isSendBufferFull(self):
+        """
+        Determine whether the user-space send buffer for this transport is full
+        or not.
+
+        When the buffer contains more than C{self.bufferSize} bytes, it is
+        considered full.  This might be improved by considering the size of the
+        kernel send buffer and how much of it is free.
+
+        @return: C{True} if it is full, C{False} otherwise.
+        """
+        return len(self.dataBuffer) + self._tempDataLen > self.bufferSize
+
+
+    def _maybePauseProducer(self):
+        """
+        Possibly pause a producer, if there is one and the send buffer is full.
+        """
+        # If we are responsible for pausing our producer,
+        if self.producer is not None and self.streamingProducer:
+            # and our buffer is full,
+            if self._isSendBufferFull():
+                # pause it.
+                self.producerPaused = 1
+                self.producer.pauseProducing()
+
+
     def write(self, data):
         """Reliably write some data.
 
@@ -305,17 +333,13 @@
         if data:
             self._tempDataBuffer.append(data)
             self._tempDataLen += len(data)
-            # If we are responsible for pausing our producer,
-            if self.producer is not None and self.streamingProducer:
-                # and our buffer is full,
-                if len(self.dataBuffer) + self._tempDataLen > self.bufferSize:
-                    # pause it.
-                    self.producerPaused = 1
-                    self.producer.pauseProducing()
+            self._maybePauseProducer()
             self.startWriting()
 
+
     def writeSequence(self, iovec):
-        """Reliably write a sequence of data.
+        """
+        Reliably write a sequence of data.
 
         Currently, this is a convenience method roughly equivalent to::
 
@@ -337,15 +361,10 @@
         self._tempDataBuffer.extend(iovec)
         for i in iovec:
             self._tempDataLen += len(i)
-        # If we are responsible for pausing our producer,
-        if self.producer is not None and self.streamingProducer:
-            # and our buffer is full,
-            if len(self.dataBuffer) + self._tempDataLen > self.bufferSize:
-                # pause it.
-                self.producerPaused = 1
-                self.producer.pauseProducing()
+        self._maybePauseProducer()
         self.startWriting()
 
+
     def loseConnection(self, _connDone=failure.Failure(main.CONNECTION_DONE)):
         """Close the connection at the next available opportunity.
 
Index: twisted/internet/_glibbase.py
===================================================================
--- twisted/internet/_glibbase.py	(revision 34488)
+++ twisted/internet/_glibbase.py	(working copy)
@@ -11,11 +11,11 @@
 or glib2reactor or gtk2reactor for applications using legacy static bindings.
 """
 
-import signal, sys
+import sys
 
 from twisted.internet import base, posixbase, selectreactor
 from twisted.internet.interfaces import IReactorFDSet
-from twisted.python import log, runtime
+from twisted.python import log
 from twisted.python.compat import set
 from zope.interface import implements
 
@@ -48,31 +48,6 @@
 
 
 
-class GlibSignalMixin(object):
-
-    if runtime.platformType == 'posix':
-
-        def _handleSignals(self):
-            # Let the base class do its thing, but pygtk is probably
-            # going to stomp on us so go beyond that and set up some
-            # signal handling which pygtk won't mess with.  This would
-            # be better done by letting this reactor select a
-            # different implementation of installHandler for
-            # _SIGCHLDWaker to use.  Then, at least, we could fall
-            # back to our extension module.  See #4286.
-            from twisted.internet.process import (
-                reapAllProcesses as _reapAllProcesses)
-            base._SignalReactorMixin._handleSignals(self)
-            signal.signal(signal.SIGCHLD,
-                          lambda *a: self.callFromThread(_reapAllProcesses))
-            if getattr(signal, "siginterrupt", None) is not None:
-                signal.siginterrupt(signal.SIGCHLD, False)
-            # Like the base, reap processes now in case a process
-            # exited before the handlers above were installed.
-            _reapAllProcesses()
-
-
-
 class GlibWaker(posixbase._UnixWaker):
     """
     Run scheduled events after waking up.
@@ -84,8 +59,7 @@
 
 
 
-class GlibReactorBase(GlibSignalMixin,
-                      posixbase.PosixReactorBase, posixbase._PollLikeMixin):
+class GlibReactorBase(posixbase.PosixReactorBase, posixbase._PollLikeMixin):
     """
     Base class for GObject event loop reactors.
 
@@ -152,6 +126,16 @@
             self._run = self.loop.run
 
 
+    def _handleSignals(self):
+        # First, install SIGINT and friends:
+        base._SignalReactorMixin._handleSignals(self)
+        # Next, since certain versions of gtk will clobber our signal handler,
+        # set all signal handlers again after the event loop has started to
+        # ensure they're *really* set. We don't call this twice so we don't
+        # leak file descriptors created in the SIGCHLD initialization:
+        self.callLater(0, posixbase.PosixReactorBase._handleSignals, self)
+
+
     # The input_add function in pygtk1 checks for objects with a
     # 'fileno' method and, if present, uses the result of that method
     # as the input source. The pygtk2 input_add does not do this. The
@@ -348,7 +332,7 @@
 
 
 
-class PortableGlibReactorBase(GlibSignalMixin, selectreactor.SelectReactor):
+class PortableGlibReactorBase(selectreactor.SelectReactor):
     """
     Base class for GObject event loop reactors that works on Windows.
 
Index: twisted/internet/gireactor.py
===================================================================
--- twisted/internet/gireactor.py	(revision 34488)
+++ twisted/internet/gireactor.py	(working copy)
@@ -10,11 +10,16 @@
     from twisted.internet import gireactor
     gireactor.install()
 
-Then use twisted.internet APIs as usual.  The other methods here are not
-intended to be called directly.
+If you wish to use a GApplication, register it with the reactor::
+
+    from twisted.internet import reactor
+    reactor.registerGApplication(app)
+
+Then use twisted.internet APIs as usual.
 """
 
 import sys
+from twisted.internet.error import ReactorAlreadyRunning
 from twisted.internet import _glibbase
 from twisted.python import runtime
 
@@ -36,6 +41,9 @@
 class GIReactor(_glibbase.GlibReactorBase):
     """
     GObject-introspection event loop reactor.
+
+    @ivar _gapplication: A C{Gio.Application} instance that was registered
+        with C{registerGApplication}.
     """
     _POLL_DISCONNECTED = (GLib.IOCondition.HUP | GLib.IOCondition.ERR |
                           GLib.IOCondition.NVAL)
@@ -48,6 +56,10 @@
     INFLAGS = _POLL_IN | _POLL_DISCONNECTED
     OUTFLAGS = _POLL_OUT | _POLL_DISCONNECTED
 
+    # By default no Application is registered:
+    _gapplication = None
+
+
     def __init__(self, useGtk=False):
         _gtk = None
         if useGtk is True:
@@ -56,7 +68,35 @@
         _glibbase.GlibReactorBase.__init__(self, GLib, _gtk, useGtk=useGtk)
 
 
+    def registerGApplication(self, app):
+        """
+        Register a C{Gio.Application} or C{Gtk.Application}, whose main loop
+        will be used instead of the default one.
 
+        We will C{hold} the application so it doesn't exit on its own. In
+        versions of C{python-gi} 3.2 and later, we exit the event loop using
+        the C{app.quit} method which overrides any holds. Older versions are
+        not supported.
+        """
+        if self._gapplication is not None:
+            raise RuntimeError(
+                "Can't register more than one application instance.")
+        if self._started:
+            raise ReactorAlreadyRunning(
+                "Can't register application after reactor was started.")
+        if not hasattr(app, "quit"):
+            raise RuntimeError("Application registration is not supported in"
+                               " versions of PyGObject prior to 3.2.")
+        self._gapplication = app
+        def run():
+            app.hold()
+            app.run(None)
+        self._run = run
+
+        self._crash = app.quit
+
+
+
 class PortableGIReactor(_glibbase.PortableGlibReactorBase):
     """
     Portable GObject Introspection event loop reactor.
@@ -70,6 +110,15 @@
                                                    useGtk=useGtk)
 
 
+    def registerGApplication(self, app):
+        """
+        Register a C{Gio.Application} or C{Gtk.Application}, whose main loop
+        will be used instead of the default one.
+        """
+        raise NotImplementedError("GApplication is not currently supported on Windows.")
+
+
+
 def install(useGtk=False):
     """
     Configure the twisted mainloop to be run inside the glib mainloop.
Index: twisted/internet/unix.py
===================================================================
--- twisted/internet/unix.py	(revision 34488)
+++ twisted/internet/unix.py	(working copy)
@@ -12,8 +12,8 @@
 """
 
 # System imports
-import os, sys, stat, socket
-from errno import EINTR, EMSGSIZE, EAGAIN, EWOULDBLOCK, ECONNREFUSED
+import os, sys, stat, socket, struct
+from errno import EINTR, EMSGSIZE, EAGAIN, EWOULDBLOCK, ECONNREFUSED, ENOBUFS
 
 from zope.interface import implements, implementsOnly, implementedBy
 
@@ -21,20 +21,190 @@
     raise ImportError("UNIX sockets not supported on this platform")
 
 # Twisted imports
-from twisted.internet import base, tcp, udp, error, interfaces, protocol, address
+from twisted.internet import main, base, tcp, udp, error, interfaces, protocol, address
 from twisted.internet.error import CannotListenError
+from twisted.python.util import untilConcludes
 from twisted.python import lockfile, log, reflect, failure
 
+try:
+    from twisted.python import sendmsg
+except ImportError:
+    sendmsg = None
 
-class Server(tcp.Server):
+
+def _ancillaryDescriptor(fd):
+    """
+    Pack an integer into an ancillary data structure suitable for use with
+    L{sendmsg.send1msg}.
+    """
+    packed = struct.pack("i", fd)
+    return [(socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, packed)]
+
+
+
+class _SendmsgMixin(object):
+    """
+    Mixin for stream-oriented UNIX transports which uses sendmsg and recvmsg to
+    offer additional functionality, such as copying file descriptors into other
+    processes.
+
+    @ivar _writeSomeDataBase: The class which provides the basic implementation
+        of C{writeSomeData}.  Ultimately this should be a subclass of
+        L{twisted.internet.abstract.FileDescriptor}.  Subclasses which mix in
+        L{_SendmsgMixin} must define this.
+
+    @ivar _sendmsgQueue: A C{list} of C{int} holding file descriptors which are
+        currently buffered before being sent.
+
+    @ivar _fileDescriptorBufferSize: An C{int} giving the maximum number of file
+        descriptors to accept and queue for sending before pausing the
+        registered producer, if there is one.
+    """
+    implements(interfaces.IUNIXTransport)
+
+    _writeSomeDataBase = None
+    _fileDescriptorBufferSize = 64
+
+    def __init__(self):
+        self._sendmsgQueue = []
+
+
+    def _isSendBufferFull(self):
+        """
+        Determine whether the user-space send buffer for this transport is full
+        or not.
+
+        This extends the base determination by adding consideration of how many
+        file descriptors need to be sent using L{sendmsg.send1msg}.  When there
+        are more than C{self._fileDescriptorBufferSize}, the buffer is
+        considered full.
+
+        @return: C{True} if it is full, C{False} otherwise.
+        """
+        # There must be some bytes in the normal send buffer, checked by
+        # _writeSomeDataBase._isSendBufferFull, in order to send file
+        # descriptors from _sendmsgQueue.  That means that the buffer will
+        # eventually be considered full even without this additional logic.
+        # However, since we send only one byte per file descriptor, having lots
+        # of elements in _sendmsgQueue incurs more overhead and perhaps slows
+        # things down.  Anyway, try this for now, maybe rethink it later.
+        return (
+            len(self._sendmsgQueue) > self._fileDescriptorBufferSize
+            or self._writeSomeDataBase._isSendBufferFull(self))
+
+
+    def sendFileDescriptor(self, fileno):
+        """
+        Queue the given file descriptor to be sent and start trying to send it.
+        """
+        self._sendmsgQueue.append(fileno)
+        self._maybePauseProducer()
+        self.startWriting()
+
+
+    def writeSomeData(self, data):
+        """
+        Send as much of C{data} as possible.  Also send any pending file
+        descriptors.
+        """
+        # Make it a programming error to send more file descriptors than you
+        # send regular bytes.  Otherwise, due to the limitation mentioned below,
+        # we could end up with file descriptors left, but no bytes to send with
+        # them, therefore no way to send those file descriptors.
+        if len(self._sendmsgQueue) > len(data):
+            return error.FileDescriptorOverrun()
+
+        # If there are file descriptors to send, try sending them first, using a
+        # little bit of data from the stream-oriented write buffer too.  It is
+        # not possible to send a file descriptor without sending some regular
+        # data.
+        index = 0
+        try:
+            while index < len(self._sendmsgQueue):
+                fd = self._sendmsgQueue[index]
+                try:
+                    untilConcludes(
+                        sendmsg.send1msg, self.socket.fileno(), data[index], 0,
+                        _ancillaryDescriptor(fd))
+                except socket.error, se:
+                    if se.args[0] in (EWOULDBLOCK, ENOBUFS):
+                        return index
+                    else:
+                        return main.CONNECTION_LOST
+                else:
+                    index += 1
+        finally:
+            del self._sendmsgQueue[:index]
+
+        # Hand the remaining data to the base implementation.  Avoid slicing in
+        # favor of a buffer, in case that happens to be any faster.
+        limitedData = buffer(data, index)
+        result = self._writeSomeDataBase.writeSomeData(self, limitedData)
+        try:
+            return index + result
+        except TypeError:
+            return result
+
+
+    def doRead(self):
+        """
+        Calls L{IFileDescriptorReceiver.fileDescriptorReceived} and
+        L{IProtocol.dataReceived} with all available data.
+
+        This reads up to C{self.bufferSize} bytes of data from its socket, then
+        dispatches the data to protocol callbacks to be handled.  If the
+        connection is not lost through an error in the underlying recvmsg(),
+        this function will return the result of the dataReceived call.
+        """
+        try:
+            data, flags, ancillary = untilConcludes(
+                sendmsg.recv1msg, self.socket.fileno(), 0, self.bufferSize)
+        except socket.error, se:
+            if se.args[0] == EWOULDBLOCK:
+                return
+            else:
+                return main.CONNECTION_LOST
+
+        if ancillary:
+            fd = struct.unpack('i', ancillary[0][2])[0]
+            if interfaces.IFileDescriptorReceiver.providedBy(self.protocol):
+                self.protocol.fileDescriptorReceived(fd)
+            else:
+                log.msg(
+                    format=(
+                        "%(protocolName)s (on %(hostAddress)r) does not "
+                        "provide IFileDescriptorReceiver; closing file "
+                        "descriptor received (from %(peerAddress)r)."),
+                    hostAddress=self.getHost(), peerAddress=self.getPeer(),
+                    protocolName=self._getLogPrefix(self.protocol),
+                    )
+                os.close(fd)
+
+        return self._dataReceived(data)
+
+if sendmsg is None:
+    class _SendmsgMixin(object):
+        """
+        Behaviorless placeholder used when L{twisted.python.sendmsg} is not
+        available, preventing L{IUNIXTransport} from being supported.
+        """
+
+
+
+class Server(_SendmsgMixin, tcp.Server):
+
+    _writeSomeDataBase = tcp.Server
+
     def __init__(self, sock, protocol, client, server, sessionno, reactor):
+        _SendmsgMixin.__init__(self)
         tcp.Server.__init__(self, sock, protocol, (client, None), server, sessionno, reactor)
 
+
     def getHost(self):
         return address.UNIXAddress(self.socket.getsockname())
 
     def getPeer(self):
-        return address.UNIXAddress(self.hostname)
+        return address.UNIXAddress(self.hostname or None)
 
 
 
@@ -149,12 +319,15 @@
 
 
 
-class Client(tcp.BaseClient):
+class Client(_SendmsgMixin, tcp.BaseClient):
     """A client for Unix sockets."""
     addressFamily = socket.AF_UNIX
     socketType = socket.SOCK_STREAM
 
+    _writeSomeDataBase = tcp.BaseClient
+
     def __init__(self, filename, connector, reactor=None, checkPID = 0):
+        _SendmsgMixin.__init__(self)
         self.connector = connector
         self.realAddress = self.addr = filename
         if checkPID and not lockfile.isLocked(filename + ".lock"):
Index: twisted/internet/interfaces.py
===================================================================
--- twisted/internet/interfaces.py	(revision 34488)
+++ twisted/internet/interfaces.py	(working copy)
@@ -1474,6 +1474,26 @@
         """
 
 
+
+class IFileDescriptorReceiver(Interface):
+    """
+    Protocols may implement L{IFileDescriptorReceiver} to receive file
+    descriptors sent to them.  This is useful in conjunction with
+    L{IUNIXTransport}, which allows file descriptors to be sent between
+    processes on a single host.
+    """
+    def fileDescriptorReceived(descriptor):
+        """
+        Called when a file descriptor is received over the connection.
+
+        @param descriptor: The descriptor which was received.
+        @type descriptor: C{int}
+
+        @return: C{None}
+        """
+
+
+
 class IProtocolFactory(Interface):
     """
     Interface for protocol factories.
@@ -1632,6 +1652,34 @@
         """
 
 
+
+class IUNIXTransport(ITransport):
+    """
+    Transport for stream-oriented unix domain connections.
+    """
+    def sendFileDescriptor(descriptor):
+        """
+        Send a duplicate of this (file, socket, pipe, etc) descriptor to the
+        other end of this connection.
+
+        The send is non-blocking and will be queued if it cannot be performed
+        immediately.  The send will be processed in order with respect to other
+        C{sendFileDescriptor} calls on this transport, but not necessarily with
+        respect to C{write} calls on this transport.  The send can only be
+        processed if there are also bytes in the normal connection-oriented send
+        buffer (ie, you must call C{write} at least as many times as you call
+        C{sendFileDescriptor}).
+
+        @param descriptor: An C{int} giving a valid file descriptor in this
+            process.  Note that a I{file descriptor} may actually refer to a
+            socket, a pipe, or anything else POSIX tries to treat in the same
+            way as a file.
+
+        @return: C{None}
+        """
+
+
+
 class ITLSTransport(ITCPTransport):
     """
     A TCP transport that supports switching to TLS midstream.
Index: twisted/internet/default.py
===================================================================
--- twisted/internet/default.py	(revision 34488)
+++ twisted/internet/default.py	(working copy)
@@ -24,8 +24,7 @@
     @return: A zero-argument callable which will install the selected
         reactor.
     """
-    # Linux: Once <http://twistedmatrix.com/trac/ticket/4429> is fixed
-    # epoll should be the default.
+    # Linux: epoll(7) is the fault, since it scales well.
     #
     # OS X: poll(2) is not exposed by Python because it doesn't
     # support all file descriptors (in particular, lack of PTY support
@@ -34,15 +33,22 @@
     # <http://twistedmatrix.com/trac/ticket/1918>), and also has same
     # restriction as poll(2) as far PTY support goes.
     #
-    # Windows: IOCP should eventually be default, but still has a few
-    # remaining bugs,
-    # e.g. <http://twistedmatrix.com/trac/ticket/4667>.
+    # Windows: IOCP should eventually be default, but still has some serious
+    # bugs, e.g. <http://twistedmatrix.com/trac/ticket/4667>.
     #
-    # We therefore choose poll(2) on non-OS X POSIX platforms, and
-    # select(2) everywhere else.
-    if platform.getType() == 'posix' and not platform.isMacOSX():
-        from twisted.internet.pollreactor import install
-    else:
+    # We therefore choose epoll(7) on Linux, poll(2) on other non-OS X POSIX
+    # platforms, and select(2) everywhere else.
+    try:
+        if platform.isLinux():
+            try:
+                from twisted.internet.epollreactor import install
+            except ImportError:
+                from twisted.internet.pollreactor import install
+        elif platform.getType() == 'posix' and not platform.isMacOSX():
+            from twisted.internet.pollreactor import install
+        else:
+            from twisted.internet.selectreactor import install
+    except ImportError:
         from twisted.internet.selectreactor import install
     return install
 
Index: twisted/internet/address.py
===================================================================
--- twisted/internet/address.py	(revision 34488)
+++ twisted/internet/address.py	(working copy)
@@ -105,7 +105,7 @@
             check is done if the name attributes do not match.
             """
             res = super(UNIXAddress, self).__eq__(other)
-            if res == False:
+            if not res and self.name and other.name:
                 try:
                     return os.path.samefile(self.name, other.name)
                 except OSError:
@@ -118,6 +118,8 @@
 
 
     def __hash__(self):
+        if self.name is None:
+            return hash((self.__class__, None))
         try:
             s1 = os.stat(self.name)
             return hash((s1.st_ino, s1.st_dev))
Index: twisted/internet/tcp.py
===================================================================
--- twisted/internet/tcp.py	(revision 34488)
+++ twisted/internet/tcp.py	(working copy)
@@ -92,7 +92,7 @@
 from twisted.internet import base, address, fdesc
 from twisted.internet.task import deferLater
 from twisted.python import log, failure, reflect
-from twisted.python.util import unsignedID
+from twisted.python.util import unsignedID, untilConcludes
 from twisted.internet.error import CannotListenError
 from twisted.internet import abstract, main, interfaces, error
 
@@ -199,6 +199,11 @@
                 return
             else:
                 return main.CONNECTION_LOST
+
+        return self._dataReceived(data)
+
+
+    def _dataReceived(self, data):
         if not data:
             return main.CONNECTION_DONE
         rval = self.protocol.dataReceived(data)
@@ -222,14 +227,14 @@
         connection is lost, an exception is returned.  Otherwise, the number
         of bytes successfully written is returned.
         """
+        # Limit length of buffer to try to send, because some OSes are too
+        # stupid to do so themselves (ahem windows)
+        limitedData = buffer(data, 0, self.SEND_LIMIT)
+
         try:
-            # Limit length of buffer to try to send, because some OSes are too
-            # stupid to do so themselves (ahem windows)
-            return self.socket.send(buffer(data, 0, self.SEND_LIMIT))
+            return untilConcludes(self.socket.send, limitedData)
         except socket.error, se:
-            if se.args[0] == EINTR:
-                return self.writeSomeData(data)
-            elif se.args[0] in (EWOULDBLOCK, ENOBUFS):
+            if se.args[0] in (EWOULDBLOCK, ENOBUFS):
                 return 0
             else:
                 return main.CONNECTION_LOST
Index: twisted/internet/test/test_tls.py
===================================================================
--- twisted/internet/test/test_tls.py	(revision 34488)
+++ twisted/internet/test/test_tls.py	(working copy)
@@ -7,6 +7,8 @@
 
 __metaclass__ = type
 
+import sys, operator
+
 from zope.interface import implements
 
 from twisted.internet.test.reactormixins import ReactorBuilder, EndpointCreator
@@ -18,7 +20,7 @@
     SSL4ServerEndpoint, SSL4ClientEndpoint, TCP4ClientEndpoint)
 from twisted.internet.error import ConnectionClosed
 from twisted.internet.task import Cooperator
-from twisted.trial.unittest import SkipTest
+from twisted.trial.unittest import TestCase, SkipTest
 from twisted.python.runtime import platform
 
 from twisted.internet.test.test_core import ObjectModelIntegrationMixin
@@ -384,3 +386,47 @@
 
 globals().update(AbortSSLConnectionTest.makeTestCaseClasses())
 
+class OldTLSDeprecationTest(TestCase):
+    """
+    Tests for the deprecation of L{twisted.internet._oldtls}, the implementation
+    module for L{IReactorSSL} used when only an old version of pyOpenSSL is
+    available.
+    """
+    def test_warning(self):
+        """
+        The use of L{twisted.internet._oldtls} is deprecated, and emits a
+        L{DeprecationWarning}.
+        """
+        # Since _oldtls depends on OpenSSL, just skip this test if it isn't
+        # installed on the system.  Faking it would be error prone.
+        try:
+            import OpenSSL
+        except ImportError:
+            raise SkipTest("OpenSSL not available.")
+
+        # Change the apparent version of OpenSSL to one support for which is
+        # deprecated.  And have it change back again after the test.
+        self.patch(OpenSSL, '__version__', '0.5')
+
+        # If the module was already imported, the import statement below won't
+        # execute its top-level code.  Take it out of sys.modules so the import
+        # system re-evaluates it.  Arrange to put the original back afterwards.
+        # Also handle the case where it hasn't yet been imported.
+        try:
+            oldtls = sys.modules['twisted.internet._oldtls']
+        except KeyError:
+            self.addCleanup(sys.modules.pop, 'twisted.internet._oldtls')
+        else:
+            del sys.modules['twisted.internet._oldtls']
+            self.addCleanup(
+                operator.setitem, sys.modules, 'twisted.internet._oldtls',
+                oldtls)
+
+        # The actual test.
+        import twisted.internet._oldtls
+        warnings = self.flushWarnings()
+        self.assertEqual(warnings[0]['category'], DeprecationWarning)
+        self.assertEqual(
+            warnings[0]['message'],
+            "Support for pyOpenSSL 0.5 is deprecated.  "
+            "Upgrade to pyOpenSSL 0.10 or newer.")
Index: twisted/internet/test/test_endpoints.py
===================================================================
--- twisted/internet/test/test_endpoints.py	(revision 34488)
+++ twisted/internet/test/test_endpoints.py	(working copy)
@@ -12,11 +12,12 @@
 from zope.interface.verify import verifyObject
 
 from twisted.trial import unittest
-from twisted.internet import error, interfaces
+from twisted.internet import error, interfaces, defer
 from twisted.internet import endpoints
 from twisted.internet.address import IPv4Address, UNIXAddress
 from twisted.internet.protocol import ClientFactory, Protocol
-from twisted.test.proto_helpers import MemoryReactor, RaisingMemoryReactor
+from twisted.test.proto_helpers import (
+    MemoryReactor, RaisingMemoryReactor, StringTransport)
 from twisted.python.failure import Failure
 from twisted.python.systemd import ListenFDs
 from twisted.plugin import getPlugins
@@ -74,8 +75,14 @@
 
 class TestHalfCloseableProtocol(TestProtocol):
     """
-    A Protocol that implements L{IHalfCloseableProtocol} and records that
-    its C{readConnectionLost} and {writeConnectionLost} methods.
+    A Protocol that implements L{IHalfCloseableProtocol} and records whether its
+    C{readConnectionLost} and {writeConnectionLost} methods are called.
+
+    @ivar readLost: A C{bool} indicating whether C{readConnectionLost} has been
+        called.
+
+    @ivar writeLost: A C{bool} indicating whether C{writeConnectionLost} has
+        been called.
     """
     implements(interfaces.IHalfCloseableProtocol)
 
@@ -94,6 +101,26 @@
 
 
 
+class TestFileDescriptorReceiverProtocol(TestProtocol):
+    """
+    A Protocol that implements L{IFileDescriptorReceiver} and records how its
+    C{fileDescriptorReceived} method is called.
+
+    @ivar receivedDescriptors: A C{list} containing all of the file descriptors
+        passed to C{fileDescriptorReceived} calls made on this instance.
+    """
+    implements(interfaces.IFileDescriptorReceiver)
+
+    def connectionMade(self):
+        TestProtocol.connectionMade(self)
+        self.receivedDescriptors = []
+
+
+    def fileDescriptorReceived(self, descriptor):
+        self.receivedDescriptors.append(descriptor)
+
+
+
 class TestFactory(ClientFactory):
     """
     Simple factory to be used both when connecting and listening. It contains
@@ -252,10 +279,46 @@
         self.assertEqual(errors, [expectedFailure])
 
 
+    def test_wrappingProtocolFileDescriptorReceiver(self):
+        """
+        Our L{_WrappingProtocol} should be an L{IFileDescriptorReceiver} if the
+        wrapped protocol is.
+        """
+        connectedDeferred = None
+        applicationProtocol = TestFileDescriptorReceiverProtocol()
+        wrapper = endpoints._WrappingProtocol(
+            connectedDeferred, applicationProtocol)
+        self.assertTrue(interfaces.IFileDescriptorReceiver.providedBy(wrapper))
+        self.assertTrue(verifyObject(interfaces.IFileDescriptorReceiver, wrapper))
+
+
+    def test_wrappingProtocolNotFileDescriptorReceiver(self):
+        """
+        Our L{_WrappingProtocol} does not provide L{IHalfCloseableProtocol} if
+        the wrapped protocol doesn't.
+        """
+        tp = TestProtocol()
+        p = endpoints._WrappingProtocol(None, tp)
+        self.assertFalse(interfaces.IFileDescriptorReceiver.providedBy(p))
+
+
+    def test_wrappedProtocolFileDescriptorReceived(self):
+        """
+        L{_WrappingProtocol.fileDescriptorReceived} calls the wrapped protocol's
+        C{fileDescriptorReceived} method.
+        """
+        wrappedProtocol = TestFileDescriptorReceiverProtocol()
+        wrapper = endpoints._WrappingProtocol(
+            defer.Deferred(), wrappedProtocol)
+        wrapper.makeConnection(StringTransport())
+        wrapper.fileDescriptorReceived(42)
+        self.assertEqual(wrappedProtocol.receivedDescriptors, [42])
+
+
     def test_wrappingProtocolHalfCloseable(self):
         """
-        Our  L{_WrappingProtocol} should be an L{IHalfCloseableProtocol} if
-        the C{wrappedProtocol} is.
+        Our L{_WrappingProtocol} should be an L{IHalfCloseableProtocol} if the
+        C{wrappedProtocol} is.
         """
         cd = object()
         hcp = TestHalfCloseableProtocol()
Index: twisted/internet/test/test_default.py
===================================================================
--- twisted/internet/test/test_default.py	(revision 34488)
+++ twisted/internet/test/test_default.py	(working copy)
@@ -5,17 +5,12 @@
 Tests for L{twisted.internet.default}.
 """
 
-try:
-    from select import poll
-except ImportError:
-    pollSkip = "select.poll() unavailable on this platform"
-else:
-    pollSkip = None
-
+import select
 from twisted.trial.unittest import TestCase
 from twisted.python.runtime import Platform
 from twisted.internet.default import _getInstallFunction
 
+unix = Platform('posix', 'other')
 linux = Platform('posix', 'linux2')
 windows = Platform('nt', 'win32')
 osx = Platform('posix', 'darwin')
@@ -24,17 +19,44 @@
 class PollReactorTests(TestCase):
     """
     Tests for the cases of L{twisted.internet.default._getInstallFunction}
-    in which it picks the poll(2)-based reactor.
+    in which it picks the poll(2) or epoll(7)-based reactors.
     """
-    skip = pollSkip
 
+    def assertIsPoll(self, install):
+        """
+        Assert the given function will install the poll() reactor, or select()
+        if poll() is unavailable.
+        """
+        if hasattr(select, "poll"):
+            self.assertEqual(
+                install.__module__, 'twisted.internet.pollreactor')
+        else:
+            self.assertEqual(
+                install.__module__, 'twisted.internet.selectreactor')
+
+
+    def test_unix(self):
+        """
+        L{_getInstallFunction} chooses the poll reactor on arbitrary Unix
+        platforms, falling back to select(2) if it is unavailable.
+        """
+        install = _getInstallFunction(unix)
+        self.assertIsPoll(install)
+
+
     def test_linux(self):
         """
-        L{_getInstallFunction} chooses the poll reactor on Linux.
+        L{_getInstallFunction} chooses the epoll reactor on Linux, or poll if
+        epoll is unavailable.
         """
         install = _getInstallFunction(linux)
-        self.assertEqual(
-            install.__module__, 'twisted.internet.pollreactor')
+        try:
+            from twisted.internet import epollreactor
+        except ImportError:
+            self.assertIsPoll(install)
+        else:
+            self.assertEqual(
+                install.__module__, 'twisted.internet.epollreactor')
 
 
 
Index: twisted/internet/test/test_address.py
===================================================================
--- twisted/internet/test/test_address.py	(revision 34488)
+++ twisted/internet/test/test_address.py	(working copy)
@@ -89,7 +89,10 @@
         when a different name is passed in
         """
         self.assertFalse(self.buildAddress() == self.buildDifferentAddress())
+        self.assertFalse(self.buildDifferentAddress() == self.buildAddress())
+
         self.assertTrue(self.buildAddress() != self.buildDifferentAddress())
+        self.assertTrue(self.buildDifferentAddress() != self.buildAddress())
 
 
     def assertDeprecations(self, testMethod, message):
@@ -131,10 +134,12 @@
         If a value is passed for the C{_bwHack} parameter to L{IPv4Address},
         a deprecation warning is emitted.
         """
+        # Construct this for warning side-effects, disregard the actual object.
+        IPv4Address("TCP", "127.0.0.3", 0, _bwHack="TCP")
+
         message = (
             "twisted.internet.address.IPv4Address._bwHack is deprecated "
             "since Twisted 11.0")
-        address = IPv4Address("TCP", "127.0.0.3", 0, _bwHack="TCP")
         return self.assertDeprecations(self.test_bwHackDeprecation, message)
 
 
@@ -161,10 +166,12 @@
         If a value is passed for the C{_bwHack} parameter to L{IPv4Address},
         a deprecation warning is emitted.
         """
+        # Construct this for warning side-effects, disregard the actual object.
+        IPv4Address("UDP", "127.0.0.3", 0, _bwHack="UDP")
+
         message = (
             "twisted.internet.address.IPv4Address._bwHack is deprecated "
             "since Twisted 11.0")
-        address = IPv4Address("UDP", "127.0.0.3", 0, _bwHack="UDP")
         return self.assertDeprecations(self.test_bwHackDeprecation, message)
 
 
@@ -201,6 +208,8 @@
         os.symlink(os.path.abspath(self._socketAddress), linkName)
         self.assertTrue(
             UNIXAddress(self._socketAddress) == UNIXAddress(linkName))
+        self.assertTrue(
+            UNIXAddress(linkName) == UNIXAddress(self._socketAddress))
     test_comparisonOfLinkedFiles.skip = symlinkSkip
 
 
@@ -221,8 +230,63 @@
         If a value is passed for the C{_bwHack} parameter to L{UNIXAddress},
         a deprecation warning is emitted.
         """
+        # Construct this for warning side-effects, disregard the actual object.
+        UNIXAddress(self.mktemp(), _bwHack='UNIX')
+
         message = (
             "twisted.internet.address.UNIXAddress._bwHack is deprecated "
             "since Twisted 11.0")
-        address = UNIXAddress(self.mktemp(), _bwHack='UNIX')
         return self.assertDeprecations(self.test_bwHackDeprecation, message)
+
+
+
+class EmptyUNIXAddressTestCase(unittest.TestCase, AddressTestCaseMixin):
+    """
+    Tests for L{UNIXAddress} operations involving a C{None} address.
+    """
+    addressArgSpec = (("name", "%r"),)
+
+    def setUp(self):
+        self._socketAddress = self.mktemp()
+
+
+    def buildAddress(self):
+        """
+        Create an arbitrary new L{UNIXAddress} instance.  A new instance is
+        created for each call, but always for the same address.
+        """
+        return UNIXAddress(self._socketAddress)
+
+
+    def buildDifferentAddress(self):
+        """
+        Like L{buildAddress}, but with a fixed address of C{None}.
+        """
+        return UNIXAddress(None)
+
+
+    def test_comparisonOfLinkedFiles(self):
+        """
+        A UNIXAddress referring to a C{None} address does not compare equal to a
+        UNIXAddress referring to a symlink.
+        """
+        linkName = self.mktemp()
+        self.fd = open(self._socketAddress, 'w')
+        os.symlink(os.path.abspath(self._socketAddress), linkName)
+        self.assertTrue(
+            UNIXAddress(self._socketAddress) != UNIXAddress(None))
+        self.assertTrue(
+            UNIXAddress(None) != UNIXAddress(self._socketAddress))
+    test_comparisonOfLinkedFiles.skip = symlinkSkip
+
+
+    def test_emptyHash(self):
+        """
+        C{__hash__} can be used to get a hash of an address, even one referring
+        to C{None} rather than a real path.
+        """
+        addr = self.buildDifferentAddress()
+        d = {addr: True}
+        self.assertTrue(d[self.buildDifferentAddress()])
+
+
Index: twisted/internet/test/test_core.py
===================================================================
--- twisted/internet/test/test_core.py	(revision 34488)
+++ twisted/internet/test/test_core.py	(working copy)
@@ -134,15 +134,15 @@
         reactor.addSystemEventTrigger("before", "startup", beforeStartup)
         reactor.addSystemEventTrigger("after", "startup", afterStartup)
 
-        sawPhase = [None]
+        sawPhase = []
         def fakeSignal(signum, action):
-            sawPhase[0] = phase[0]
+            sawPhase.append(phase[0])
         self.patch(signal, 'signal', fakeSignal)
         reactor.callWhenRunning(reactor.stop)
         self.assertEqual(phase[0], None)
-        self.assertEqual(sawPhase[0], None)
+        self.assertEqual(sawPhase, [])
         self.runReactor(reactor)
-        self.assertEqual(sawPhase[0], "before")
+        self.assertIn("before", sawPhase)
         self.assertEqual(phase[0], "after")
 
 
Index: twisted/internet/test/test_process.py
===================================================================
--- twisted/internet/test/test_process.py	(revision 34488)
+++ twisted/internet/test/test_process.py	(working copy)
@@ -384,6 +384,33 @@
         self.runReactor(reactor)
 
 
+    def test_timeleyProcessExited(self):
+        """
+        If a spawned process exits, C{processExited} will be called in a
+        timely manner.
+        """
+        reactor = self.buildReactor()
+
+        class ExitingProtocol(ProcessProtocol):
+            exited = False
+
+            def processExited(protoSelf, reason):
+                protoSelf.exited = True
+                reactor.stop()
+                self.assertEqual(reason.value.exitCode, 0)
+
+        protocol = ExitingProtocol()
+        reactor.callWhenRunning(
+            reactor.spawnProcess, protocol, sys.executable,
+            [sys.executable, "-c", "raise SystemExit(0)"],
+            usePTY=self.usePTY)
+
+        # This will timeout if processExited isn't called:
+        self.runReactor(reactor, timeout=30)
+        self.assertEqual(protocol.exited, True)
+
+
+
 class ProcessTestsBuilder(ProcessTestsBuilderBase):
     """
     Builder defining tests relating to L{IReactorProcess} for child processes
Index: twisted/internet/test/test_unix.py
===================================================================
--- twisted/internet/test/test_unix.py	(revision 34488)
+++ twisted/internet/test/test_unix.py	(working copy)
@@ -6,30 +6,48 @@
 """
 
 from stat import S_IMODE
-from os import stat
+from os import stat, close
 from tempfile import mktemp
+from socket import AF_INET, SOCK_STREAM, socket
+from pprint import pformat
 
 try:
     from socket import AF_UNIX
 except ImportError:
     AF_UNIX = None
 
+from zope.interface import implements
 from zope.interface.verify import verifyObject
 
+from twisted.python.log import addObserver, removeObserver, err
+from twisted.python.failure import Failure
 from twisted.python.hashlib import md5
 from twisted.python.runtime import platform
-from twisted.internet.interfaces import IConnector
+from twisted.internet.interfaces import IConnector, IFileDescriptorReceiver
+from twisted.internet.error import ConnectionClosed, FileDescriptorOverrun
 from twisted.internet.address import UNIXAddress
 from twisted.internet.endpoints import UNIXServerEndpoint, UNIXClientEndpoint
+from twisted.internet.defer import Deferred, fail
+from twisted.internet.task import LoopingCall
 from twisted.internet import interfaces
 from twisted.internet.protocol import (
     ServerFactory, ClientFactory, DatagramProtocol)
 from twisted.internet.test.reactormixins import ReactorBuilder, EndpointCreator
 from twisted.internet.test.test_core import ObjectModelIntegrationMixin
 from twisted.internet.test.test_tcp import StreamTransportTestsMixin
+from twisted.internet.test.reactormixins import (
+    ConnectableProtocol, runProtocolsWithReactor)
 from twisted.internet.test.connectionmixins import ConnectionTestsMixin
 
+try:
+    from twisted.python import sendmsg
+except ImportError:
+    sendmsgSkip = (
+        "sendmsg extension unavailable, extended UNIX features disabled")
+else:
+    sendmsgSkip = None
 
+
 class UNIXFamilyMixin:
     """
     Test-helper defining mixin for things related to AF_UNIX sockets.
@@ -81,6 +99,111 @@
 
 
 
+class SendFileDescriptor(ConnectableProtocol):
+    """
+    L{SendFileDescriptorAndBytes} sends a file descriptor and optionally some
+    normal bytes and then closes its connection.
+
+    @ivar reason: The reason the connection was lost, after C{connectionLost}
+        is called.
+    """
+    reason = None
+
+    def __init__(self, fd, data):
+        """
+        @param fd: A C{int} giving a file descriptor to send over the
+            connection.
+
+        @param data: A C{str} giving data to send over the connection, or
+            C{None} if no data is to be sent.
+        """
+        self.fd = fd
+        self.data = data
+
+
+    def connectionMade(self):
+        """
+        Send C{self.fd} and, if it is not C{None}, C{self.data}.  Then close the
+        connection.
+        """
+        self.transport.sendFileDescriptor(self.fd)
+        if self.data:
+            self.transport.write(self.data)
+        self.transport.loseConnection()
+
+
+    def connectionLost(self, reason):
+        ConnectableProtocol.connectionLost(self, reason)
+        self.reason = reason
+
+
+
+class ReceiveFileDescriptor(ConnectableProtocol):
+    """
+    L{ReceiveFileDescriptor} provides an API for waiting for file descriptors to
+    be received.
+
+    @ivar reason: The reason the connection was lost, after C{connectionLost}
+        is called.
+
+    @ivar waiting: A L{Deferred} which fires with a file descriptor once one is
+        received, or with a failure if the connection is lost with no descriptor
+        arriving.
+    """
+    implements(IFileDescriptorReceiver)
+
+    reason = None
+    waiting = None
+
+    def waitForDescriptor(self):
+        """
+        Return a L{Deferred} which will fire with the next file descriptor
+        received, or with a failure if the connection is or has already been
+        lost.
+        """
+        if self.reason is None:
+            self.waiting = Deferred()
+            return self.waiting
+        else:
+            return fail(self.reason)
+
+
+    def fileDescriptorReceived(self, descriptor):
+        """
+        Fire the waiting Deferred, initialized by C{waitForDescriptor}, with the
+        file descriptor just received.
+        """
+        self.waiting.callback(descriptor)
+        self.waiting = None
+
+
+    def dataReceived(self, data):
+        """
+        Fail the waiting Deferred, if it has not already been fired by
+        C{fileDescriptorReceived}.  The bytes sent along with a file descriptor
+        are guaranteed to be delivered to the protocol's C{dataReceived} method
+        only after the file descriptor has been delivered to the protocol's
+        C{fileDescriptorReceived}.
+        """
+        if self.waiting is not None:
+            self.waiting.errback(Failure(Exception(
+                        "Received bytes (%r) before descriptor." % (data,))))
+            self.waiting = None
+
+
+    def connectionLost(self, reason):
+        """
+        Fail the waiting Deferred, initialized by C{waitForDescriptor}, if there
+        is one.
+        """
+        ConnectableProtocol.connectionLost(self, reason)
+        if self.waiting is not None:
+            self.waiting.errback(reason)
+            self.waiting = None
+        self.reason = reason
+
+
+
 class UNIXTestsBuilder(UNIXFamilyMixin, ReactorBuilder, ConnectionTestsMixin):
     """
     Builder defining tests relating to L{IReactorUNIX}.
@@ -135,7 +258,235 @@
             'Abstract namespace UNIX sockets only supported on Linux.')
 
 
+    def test_addresses(self):
+        """
+        A client's transport's C{getHost} and C{getPeer} return L{UNIXAddress}
+        instances which have the filesystem path of the host and peer ends of
+        the connection.
+        """
+        class SaveAddress(ConnectableProtocol):
+            def makeConnection(self, transport):
+                self.addresses = dict(
+                    host=transport.getHost(), peer=transport.getPeer())
+                transport.loseConnection()
 
+        server = SaveAddress()
+        client = SaveAddress()
+
+        runProtocolsWithReactor(self, server, client, self.endpoints)
+
+        self.assertEqual(server.addresses['host'], client.addresses['peer'])
+        self.assertEqual(server.addresses['peer'], client.addresses['host'])
+
+
+    def test_sendFileDescriptor(self):
+        """
+        L{IUNIXTransport.sendFileDescriptor} accepts an integer file descriptor
+        and sends a copy of it to the process reading from the connection.
+        """
+        from socket import fromfd
+
+        s = socket()
+        s.bind(('', 0))
+        server = SendFileDescriptor(s.fileno(), "junk")
+
+        client = ReceiveFileDescriptor()
+        d = client.waitForDescriptor()
+        def checkDescriptor(descriptor):
+            received = fromfd(descriptor, AF_INET, SOCK_STREAM)
+            # Thanks for the free dup, fromfd()
+            close(descriptor)
+
+            # If the sockets have the same local address, they're probably the
+            # same.
+            self.assertEqual(s.getsockname(), received.getsockname())
+
+            # But it would be cheating for them to be identified by the same
+            # file descriptor.  The point was to get a copy, as we might get if
+            # there were two processes involved here.
+            self.assertNotEqual(s.fileno(), received.fileno())
+        d.addCallback(checkDescriptor)
+        d.addErrback(err, "Sending file descriptor encountered a problem")
+        d.addBoth(lambda ignored: server.transport.loseConnection())
+
+        runProtocolsWithReactor(self, server, client, self.endpoints)
+    if sendmsgSkip is not None:
+        test_sendFileDescriptor.skip = sendmsgSkip
+
+
+    def test_sendFileDescriptorTriggersPauseProducing(self):
+        """
+        If a L{IUNIXTransport.sendFileDescriptor} call fills up the send buffer,
+        any registered producer is paused.
+        """
+        class DoesNotRead(ConnectableProtocol):
+            def connectionMade(self):
+                self.transport.pauseProducing()
+
+        class SendsManyFileDescriptors(ConnectableProtocol):
+            paused = False
+
+            def connectionMade(self):
+                self.socket = socket()
+                self.transport.registerProducer(self, True)
+                def sender():
+                    self.transport.sendFileDescriptor(self.socket.fileno())
+                    self.transport.write("x")
+                self.task = LoopingCall(sender)
+                self.task.clock = self.transport.reactor
+                self.task.start(0).addErrback(err, "Send loop failure")
+
+            def stopProducing(self):
+                self._disconnect()
+
+            def resumeProducing(self):
+                self._disconnect()
+
+            def pauseProducing(self):
+                self.paused = True
+                self.transport.unregisterProducer()
+                self._disconnect()
+
+            def _disconnect(self):
+                self.task.stop()
+                self.transport.abortConnection()
+                self.other.transport.abortConnection()
+
+        server = SendsManyFileDescriptors()
+        client = DoesNotRead()
+        server.other = client
+        runProtocolsWithReactor(self, server, client, self.endpoints)
+
+        self.assertTrue(
+            server.paused, "sendFileDescriptor producer was not paused")
+    if sendmsgSkip is not None:
+        test_sendFileDescriptorTriggersPauseProducing.skip = sendmsgSkip
+
+
+    def test_fileDescriptorOverrun(self):
+        """
+        If L{IUNIXTransport.sendFileDescriptor} is used to queue a greater
+        number of file descriptors than the number of bytes sent using
+        L{ITransport.write}, the connection is closed and the protocol connected
+        to the transport has its C{connectionLost} method called with a failure
+        wrapping L{FileDescriptorOverrun}.
+        """
+        cargo = socket()
+        server = SendFileDescriptor(cargo.fileno(), None)
+
+        client = ReceiveFileDescriptor()
+        d = self.assertFailure(
+            client.waitForDescriptor(), ConnectionClosed)
+        d.addErrback(
+            err, "Sending file descriptor encountered unexpected problem")
+        d.addBoth(lambda ignored: server.transport.loseConnection())
+
+        runProtocolsWithReactor(self, server, client, self.endpoints)
+
+        self.assertIsInstance(server.reason.value, FileDescriptorOverrun)
+    if sendmsgSkip is not None:
+        test_fileDescriptorOverrun.skip = sendmsgSkip
+
+
+    def test_avoidLeakingFileDescriptors(self):
+        """
+        If associated with a protocol which does not provide
+        L{IFileDescriptorReceiver}, file descriptors received by the
+        L{IUNIXTransport} implementation are closed and a warning is emitted.
+        """
+        # To verify this, establish a connection.  Send one end of the
+        # connection over the IUNIXTransport implementation.  After the copy
+        # should no longer exist, close the original.  If the opposite end of
+        # the connection decides the connection is closed, the copy does not
+        # exist.
+        from socket import socketpair
+        probeClient, probeServer = socketpair()
+
+        events = []
+        addObserver(events.append)
+        self.addCleanup(removeObserver, events.append)
+
+        class RecordEndpointAddresses(SendFileDescriptor):
+            def connectionMade(self):
+                self.hostAddress = self.transport.getHost()
+                self.peerAddress = self.transport.getPeer()
+                SendFileDescriptor.connectionMade(self)
+
+        server = RecordEndpointAddresses(probeClient.fileno(), "junk")
+        client = ConnectableProtocol()
+
+        runProtocolsWithReactor(self, server, client, self.endpoints)
+
+        # Get rid of the original reference to the socket.
+        probeClient.close()
+
+        # A non-blocking recv will return "" if the connection is closed, as
+        # desired.  If the connection has not been closed, because the duplicate
+        # file descriptor is still open, it will fail with EAGAIN instead.
+        probeServer.setblocking(False)
+        self.assertEqual("", probeServer.recv(1024))
+
+        # This is a surprising circumstance, so it should be logged.
+        format = (
+            "%(protocolName)s (on %(hostAddress)r) does not "
+            "provide IFileDescriptorReceiver; closing file "
+            "descriptor received (from %(peerAddress)r).")
+        clsName = "ConnectableProtocol"
+
+        # Reverse host and peer, since the log event is from the client
+        # perspective.
+        expectedEvent = dict(hostAddress=server.peerAddress,
+                             peerAddress=server.hostAddress,
+                             protocolName=clsName,
+                             format=format)
+
+        for logEvent in events:
+            for k, v in expectedEvent.iteritems():
+                if v != logEvent.get(k):
+                    break
+            else:
+                # No mismatches were found, stop looking at events
+                break
+        else:
+            # No fully matching events were found, fail the test.
+            self.fail(
+                "Expected event (%s) not found in logged events (%s)" % (
+                    expectedEvent, pformat(events,)))
+    if sendmsgSkip is not None:
+        test_avoidLeakingFileDescriptors.skip = sendmsgSkip
+
+
+    def test_descriptorDeliveredBeforeBytes(self):
+        """
+        L{IUNIXTransport.sendFileDescriptor} sends file descriptors before
+        L{ITransport.write} sends normal bytes.
+        """
+        class RecordEvents(ConnectableProtocol):
+            implements(IFileDescriptorReceiver)
+
+            def connectionMade(self):
+                ConnectableProtocol.connectionMade(self)
+                self.events = []
+
+            def fileDescriptorReceived(innerSelf, descriptor):
+                self.addCleanup(close, descriptor)
+                innerSelf.events.append(type(descriptor))
+
+            def dataReceived(self, data):
+                self.events.extend(data)
+
+        cargo = socket()
+        server = SendFileDescriptor(cargo.fileno(), "junk")
+        client = RecordEvents()
+
+        runProtocolsWithReactor(self, server, client, self.endpoints)
+
+        self.assertEqual([int, "j", "u", "n", "k"], client.events)
+    if sendmsgSkip is not None:
+        test_descriptorDeliveredBeforeBytes.skip = sendmsgSkip
+
+
+
 class UNIXDatagramTestsBuilder(UNIXFamilyMixin, ReactorBuilder):
     """
     Builder defining tests relating to L{IReactorUNIXDatagram}.
Index: twisted/internet/gtk3reactor.py
===================================================================
--- twisted/internet/gtk3reactor.py	(revision 34488)
+++ twisted/internet/gtk3reactor.py	(working copy)
@@ -11,6 +11,11 @@
     from twisted.internet import gtk3reactor
     gtk3reactor.install()
 
+If you wish to use a GApplication, register it with the reactor::
+
+    from twisted.internet import reactor
+    reactor.registerGApplication(app)
+
 Then use twisted.internet APIs as usual.
 """
 
Index: twisted/internet/error.py
===================================================================
--- twisted/internet/error.py	(revision 34488)
+++ twisted/internet/error.py	(working copy)
@@ -243,6 +243,19 @@
 
 
 
+class FileDescriptorOverrun(ConnectionLost):
+    """
+    A mis-use of L{IUNIXTransport.sendFileDescriptor} caused the connection to
+    be closed.
+
+    Each file descriptor sent using C{sendFileDescriptor} must be associated
+    with at least one byte sent using L{ITransport.write}.  If at any point
+    fewer bytes have been written than file descriptors have been sent, the
+    connection is closed with this exception.
+    """
+
+
+
 class ConnectionFdescWentAway(ConnectionLost):
     """Uh""" #TODO
 
Index: twisted/internet/reactor.py
===================================================================
--- twisted/internet/reactor.py	(revision 34488)
+++ twisted/internet/reactor.py	(working copy)
@@ -6,10 +6,10 @@
 applications using Twisted. The reactor provides APIs for networking,
 threading, dispatching events, and more.
 
-The default reactor is based on C{select(2)} and will be installed if this
-module is imported without another reactor being explicitly installed.
-Regardless of which reactor is installed, importing this module is the correct
-way to get a reference to it.
+The default reactor depends on the platform and will be installed if this
+module is imported without another reactor being explicitly installed
+beforehand. Regardless of which reactor is installed, importing this module is
+the correct way to get a reference to it.
 
 New application code should prefer to pass and accept the reactor as a
 parameter where it is needed, rather than relying on being able to import this
Index: twisted/internet/protocol.py
===================================================================
--- twisted/internet/protocol.py	(revision 34488)
+++ twisted/internet/protocol.py	(working copy)
@@ -623,7 +623,8 @@
 
     def processEnded(self, reason):
         """
-        This will be called when the subprocess is finished.
+        Called when the child process exits and all file descriptors
+        associated with it have been closed.
 
         @type reason: L{twisted.python.failure.Failure}
         """
Index: twisted/internet/_posixstdio.py
===================================================================
--- twisted/internet/_posixstdio.py	(revision 34488)
+++ twisted/internet/_posixstdio.py	(working copy)
@@ -11,7 +11,7 @@
 Maintainer: James Y Knight
 """
 
-import warnings, errno, os
+import warnings
 from zope.interface import implements
 
 from twisted.internet import process, error, interfaces
@@ -23,31 +23,20 @@
 
 
 class StandardIO(object):
-    implements(interfaces.ITransport, interfaces.IProducer, interfaces.IConsumer, interfaces.IHalfCloseableDescriptor)
+    implements(interfaces.ITransport, interfaces.IProducer,
+               interfaces.IConsumer, interfaces.IHalfCloseableDescriptor)
+
     _reader = None
     _writer = None
     disconnected = False
     disconnecting = False
 
-    def __init__(self, proto, stdin=0, stdout=1):
-        from twisted.internet import reactor
+    def __init__(self, proto, stdin=0, stdout=1, reactor=None):
+        if reactor is None:
+            from twisted.internet import reactor
         self.protocol = proto
 
         self._writer = process.ProcessWriter(reactor, self, 'write', stdout)
-        try:
-            self._writer.startReading()
-        except IOError, e:
-            if e.errno == errno.EPERM:
-                # epoll will reject certain file descriptors by raising
-                # EPERM.  Most commonly, this means stdout was redirected to
-                # a regular file.
-                raise RuntimeError(
-                    "This reactor does not support this type of file "
-                    "descriptor (fd %d, mode %d) (for example, epollreactor "
-                    "does not support normal files.  See #4429)." % (
-                        stdout, os.fstat(stdout).st_mode))
-            raise
-
         self._reader = process.ProcessReader(reactor, self, 'read', stdin)
         self._reader.startReading()
         self.protocol.makeConnection(self)
Index: twisted/internet/_threadedselect.py
===================================================================
--- twisted/internet/_threadedselect.py	(revision 34488)
+++ twisted/internet/_threadedselect.py	(working copy)
@@ -1,16 +1,10 @@
 # -*- test-case-name: twisted.test.test_internet -*-
-#
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from __future__ import generators
-
 """
 Threaded select reactor
 
-Maintainer: Bob Ippolito
-
-
 The threadedselectreactor is a specialized reactor for integrating with
 arbitrary foreign event loop, such as those you find in GUI toolkits.
 
Index: twisted/conch/test/test_transport.py
===================================================================
--- twisted/conch/test/test_transport.py	(revision 34488)
+++ twisted/conch/test/test_transport.py	(working copy)
@@ -39,13 +39,11 @@
 from twisted.python import randbytes
 from twisted.python.reflect import qual
 from twisted.python.hashlib import md5, sha1
-from twisted.conch.ssh import service, common
+from twisted.conch.ssh import address, service, common
 from twisted.test import proto_helpers
 
 from twisted.conch.error import ConchError
 
-
-
 class MockTransportBase(transport.SSHTransportBase):
     """
     A base class for the client and server protocols.  Stores the messages
@@ -76,7 +74,8 @@
         @type remoteVersion: C{str}
         """
         self.gotUnsupportedVersion = remoteVersion
-        return transport.SSHTransportBase._unsupportedVersionReceived(self, remoteVersion)
+        return transport.SSHTransportBase._unsupportedVersionReceived(
+            self, remoteVersion)
 
 
     def receiveError(self, reasonCode, description):
@@ -315,7 +314,6 @@
         return keys
 
 
-
 class TransportTestCase(unittest.TestCase):
     """
     Base class for transport test cases.
@@ -359,9 +357,10 @@
         proto._keySetup("foo", "bar")
         # SSHTransportBase can't handle MSG_NEWKEYS, or it would be the right
         # thing to deliver next.  _newKeys won't work either, because
-        # sendKexInit (probably) hasn't been called.  sendKexInit is responsible
-        # for setting up certain state _newKeys relies on.  So, just change the
-        # key exchange state to what it would be when key exchange is finished.
+        # sendKexInit (probably) hasn't been called.  sendKexInit is
+        # responsible for setting up certain state _newKeys relies on.  So,
+        # just change the key exchange state to what it would be when key
+        # exchange is finished.
         proto._keyExchangeState = proto._KEY_EXCHANGE_NONE
 
 
@@ -573,7 +572,7 @@
         proto.sendKexInit = lambda: None
         proto.makeConnection(self.transport)
         self.transport.clear()
-        proto.currentEncryptions = testCipher = MockCipher()
+        proto.currentEncryptions = MockCipher()
         proto.outgoingCompression = MockCompression()
         proto.incomingCompression = proto.outgoingCompression
         proto.sendPacket(ord('A'), 'BCDEFG')
@@ -674,8 +673,8 @@
 
         RFC 4253, section 7.1.
         """
-        # sendKexInit is called by connectionMade, which is called in setUp.  So
-        # we're in the state already.
+        # sendKexInit is called by connectionMade, which is called in setUp.
+        # So we're in the state already.
         disallowedMessageTypes = [
             transport.MSG_SERVICE_REQUEST,
             transport.MSG_KEXINIT,
@@ -684,8 +683,8 @@
         # Drop all the bytes sent by setUp, they're not relevant to this test.
         self.transport.clear()
 
-        # Get rid of the sendPacket monkey patch, we are testing the behavior of
-        # sendPacket.
+        # Get rid of the sendPacket monkey patch, we are testing the behavior
+        # of sendPacket.
         del self.proto.sendPacket
 
         for messageType in disallowedMessageTypes:
@@ -1153,8 +1152,26 @@
             proto2.supportedMACs = []
         self.connectModifiedProtocol(blankMACs)
 
+    def test_getPeer(self):
+        """
+        Test that the transport's L{getPeer} method returns an
+        L{SSHTransportAddress} with the L{IAddress} of the peer.
+        """
+        self.assertEqual(self.proto.getPeer(),
+                         address.SSHTransportAddress(
+                self.proto.transport.getPeer()))
 
+    def test_getHost(self):
+        """
+        Test that the transport's L{getHost} method returns an
+        L{SSHTransportAddress} with the L{IAddress} of the host.
+        """
+        self.assertEqual(self.proto.getHost(),
+                         address.SSHTransportAddress(
+                self.proto.transport.getHost()))
 
+
+
 class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         TransportTestCase):
     """
Index: twisted/conch/test/test_knownhosts.py
===================================================================
--- twisted/conch/test/test_knownhosts.py	(revision 34488)
+++ twisted/conch/test/test_knownhosts.py	(working copy)
@@ -156,7 +156,8 @@
         """
         self.assertEqual(self.entry.toString(), self.plaintextLine.rstrip("\n"))
         multiHostEntry = PlainEntry.fromString(self.hostIPLine)
-        self.assertEqual(multiHostEntry.toString(), self.hostIPLine.rstrip("\n"))
+        self.assertEqual(multiHostEntry.toString(),
+                         self.hostIPLine.rstrip("\n"))
 
 
 
@@ -243,7 +244,8 @@
 
     def test_toString(self):
         """
-        L{UnparsedEntry.toString} returns its input string, sans trailing newline.
+        L{UnparsedEntry.toString} returns its input string, sans trailing
+        newline.
         """
         self.assertEqual("    This is a bogus entry.  ", self.entry.toString())
 
@@ -255,7 +257,7 @@
     of errors depending on misformattings of certain strings.  These tests make
     sure those errors are caught.  Since many of the ways that this can go
     wrong are in the lower-level APIs being invoked by the parsing logic,
-    several of these are integration tests with the L{base64} and
+    several of these are integration tests with the C{base64} and
     L{twisted.conch.ssh.keys} modules.
     """
 
@@ -326,7 +328,8 @@
         # Host hash not valid base64.
         self.assertRaises(
             BinasciiError, HashedEntry.fromString,
-            ' '.join([HashedEntry.MAGIC + b2a_base64("stuff").strip() + "|x", b, c]))
+            ' '.join([HashedEntry.MAGIC + b2a_base64("stuff").strip() + "|x",
+            b, c]))
         # Neither salt nor hash valid base64.
         self.assertRaises(
             BinasciiError, HashedEntry.fromString,
@@ -381,29 +384,82 @@
         """
         Loading a L{KnownHostsFile} from a path with six entries in it will
         result in a L{KnownHostsFile} object with six L{IKnownHostEntry}
-        providers in it, each of the appropriate type.
+        providers in it.
         """
         hostsFile = self.loadSampleHostsFile()
         self.assertEqual(len(hostsFile._entries), 6)
+
+
+    def test_verifyHashedEntry(self):
+        """
+        Loading a L{KnownHostsFile} from a path containing a single valid
+        L{HashedEntry} entry will result in a L{KnownHostsFile} object
+        with one L{IKnownHostEntry} provider.
+        """
+        hostsFile = self.loadSampleHostsFile((sampleHashedLine))
         self.assertIsInstance(hostsFile._entries[0], HashedEntry)
         self.assertEqual(True, hostsFile._entries[0].matchesHost(
                 "www.twistedmatrix.com"))
-        self.assertIsInstance(hostsFile._entries[1], PlainEntry)
-        self.assertEqual(True, hostsFile._entries[1].matchesHost(
+
+
+    def test_verifyPlainEntry(self):
+        """
+        Loading a L{KnownHostsFile} from a path containing a single valid
+        L{PlainEntry} entry will result in a L{KnownHostsFile} object
+        with one L{IKnownHostEntry} provider.
+        """
+        hostsFile = self.loadSampleHostsFile((otherSamplePlaintextLine))
+        self.assertIsInstance(hostsFile._entries[0], PlainEntry)
+        self.assertEqual(True, hostsFile._entries[0].matchesHost(
                 "divmod.com"))
-        self.assertIsInstance(hostsFile._entries[2], UnparsedEntry)
-        self.assertEqual(hostsFile._entries[2].toString(), "")
-        self.assertIsInstance(hostsFile._entries[3], UnparsedEntry)
-        self.assertEqual(hostsFile._entries[3].toString(),
+
+
+    def test_verifyUnparsedEntry(self):
+        """
+        Loading a L{KnownHostsFile} from a path that only contains '\n' will
+        result in a L{KnownHostsFile} object containing a L{UnparsedEntry}
+        object.
+        """
+        hostsFile = self.loadSampleHostsFile(("\n"))
+        self.assertIsInstance(hostsFile._entries[0], UnparsedEntry)
+        self.assertEqual(hostsFile._entries[0].toString(), "")
+
+
+    def test_verifyUnparsedComment(self):
+        """
+        Loading a L{KnownHostsFile} from a path that contains a comment will
+        result in a L{KnownHostsFile} object containing a L{UnparsedEntry}
+        object.
+        """
+        hostsFile = self.loadSampleHostsFile(("# That was a blank line.\n"))
+        self.assertIsInstance(hostsFile._entries[0], UnparsedEntry)
+        self.assertEqual(hostsFile._entries[0].toString(),
                          "# That was a blank line.")
-        self.assertIsInstance(hostsFile._entries[4], UnparsedEntry)
-        self.assertEqual(hostsFile._entries[4].toString(),
+
+
+    def test_verifyUnparsableLine(self):
+        """
+        Loading a L{KnownHostsFile} from a path that contains an unparseable
+        line will be represented as an L{UnparsedEntry} instance.
+        """
+        hostsFile = self.loadSampleHostsFile(("This is just unparseable.\n"))
+        self.assertIsInstance(hostsFile._entries[0], UnparsedEntry)
+        self.assertEqual(hostsFile._entries[0].toString(),
                          "This is just unparseable.")
-        self.assertIsInstance(hostsFile._entries[5], UnparsedEntry)
-        self.assertEqual(hostsFile._entries[5].toString(),
-                         "|1|This also unparseable.")
 
 
+    def test_verifyUnparsableEncryptionMarker(self):
+        """
+        Loading a L{KnownHostsFile} from a path containing an unparseable line
+        that starts with an encryption marker will be represented as an
+        L{UnparsedEntry} instance.
+        """
+        hostsFile = self.loadSampleHostsFile(("|1|This is unparseable.\n"))
+        self.assertIsInstance(hostsFile._entries[0], UnparsedEntry)
+        self.assertEqual(hostsFile._entries[0].toString(),
+                         "|1|This is unparseable.")
+
+
     def test_loadNonExistent(self):
         """
         Loading a L{KnownHostsFile} from a path that does not exist should
@@ -439,7 +495,8 @@
         path = self.pathWithContent(sampleHashedLine +
                                     otherSamplePlaintextLine)
         knownHostsFile = KnownHostsFile.fromPath(path)
-        newEntry = knownHostsFile.addHostKey("some.example.com", Key.fromString(thirdSampleKey))
+        newEntry = knownHostsFile.addHostKey("some.example.com",
+            Key.fromString(thirdSampleKey))
         expectedContent = (
             sampleHashedLine +
             otherSamplePlaintextLine + HashedEntry.MAGIC +
@@ -478,7 +535,7 @@
         """
         L{KnownHostsFile.hasHostKey} raises L{HostKeyChanged} if the host key
         is present, but different from the expected one.  The resulting
-        exception should have an offendingEntry indicating the given entry.
+        exception should have an C{offendingEntry} indicating the given entry.
         """
         hostsFile = self.loadSampleHostsFile()
         exception = self.assertRaises(
@@ -867,7 +924,8 @@
         self.patch(default, "_open", self.patchedOpen)
         self.hostsOption = self.mktemp()
         knownHostsFile = KnownHostsFile(FilePath(self.hostsOption))
-        knownHostsFile.addHostKey("exists.example.com", Key.fromString(sampleKey))
+        knownHostsFile.addHostKey("exists.example.com",
+            Key.fromString(sampleKey))
         knownHostsFile.addHostKey("4.3.2.1", Key.fromString(sampleKey))
         knownHostsFile.save()
         self.fakeTransport = FakeObject()
Index: twisted/conch/scripts/tkconch.py
===================================================================
--- twisted/conch/scripts/tkconch.py	(revision 34488)
+++ twisted/conch/scripts/tkconch.py	(working copy)
@@ -2,14 +2,10 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-#
-# $Id: tkconch.py,v 1.6 2003/02/22 08:10:15 z3p Exp $
-
-""" Implementation module for the `tkconch` command.
 """
+Implementation module for the `tkconch` command.
+"""
 
-from __future__ import nested_scopes
-
 import Tkinter, tkFileDialog, tkFont, tkMessageBox, string
 from twisted.conch.ui import tkvt100
 from twisted.conch.ssh import transport, userauth, connection, common, keys
@@ -86,8 +82,8 @@
         self.grid_columnconfigure(2, weight=1, minsize=2)
 
         self.master.protocol("WM_DELETE_WINDOW", sys.exit)
-        
 
+
     def getIdentityFile(self):
         r = tkFileDialog.askopenfilename()
         if r:
@@ -160,7 +156,7 @@
             finished = 0
         if finished:
             self.master.quit()
-            self.master.destroy()        
+            self.master.destroy()
             if options['log']:
                 realout = sys.stdout
                 log.startLogging(sys.stderr)
@@ -337,7 +333,7 @@
     raise
 
 class SSHClientFactory(protocol.ClientFactory):
-    noisy = 1 
+    noisy = 1
 
     def stopFactory(self):
         reactor.stop()
@@ -379,15 +375,15 @@
                 host = options['host']
                 khHost = options['host']
             else:
-                host = '%s (%s)' % (options['host'], 
+                host = '%s (%s)' % (options['host'],
                                     self.transport.getPeer()[1])
-                khHost = '%s,%s' % (options['host'], 
+                khHost = '%s,%s' % (options['host'],
                                     self.transport.getPeer()[1])
             keyType = common.getNS(pubKey)[0]
             ques = """The authenticity of host '%s' can't be established.\r
-%s key fingerprint is %s.""" % (host, 
-                                {'ssh-dss':'DSA', 'ssh-rsa':'RSA'}[keyType], 
-                                fingerprint) 
+%s key fingerprint is %s.""" % (host,
+                                {'ssh-dss':'DSA', 'ssh-rsa':'RSA'}[keyType],
+                                fingerprint)
             ques+='\r\nAre you sure you want to continue connecting (yes/no)? '
             return deferredAskFrame(ques, 1).addCallback(self._cbVerifyHostKey, pubKey, khHost, keyType)
 
@@ -405,7 +401,7 @@
             known_hosts.close()
         except:
             log.deferr()
-            raise error.ConchError 
+            raise error.ConchError
 
     def connectionSecure(self):
         if options['user']:
@@ -420,7 +416,7 @@
     def getPassword(self, prompt = None):
         if not prompt:
             prompt = "%s@%s's password: " % (self.user, options['host'])
-        return deferredAskFrame(prompt,0) 
+        return deferredAskFrame(prompt,0)
 
     def getPublicKey(self):
         files = [x for x in options.identitys if x not in self.usedFiles]
@@ -429,15 +425,15 @@
         file = files[0]
         log.msg(file)
         self.usedFiles.append(file)
-        file = os.path.expanduser(file) 
+        file = os.path.expanduser(file)
         file += '.pub'
         if not os.path.exists(file):
             return
         try:
-            return keys.Key.fromFile(file).blob() 
+            return keys.Key.fromFile(file).blob()
         except:
             return self.getPublicKey() # try again
-    
+
     def getPrivateKey(self):
         file = os.path.expanduser(self.usedFiles[-1])
         if not os.path.exists(file):
@@ -467,7 +463,7 @@
         if options.localForwards:
             for localPort, hostport in options.localForwards:
                 reactor.listenTCP(localPort,
-                            forwarding.SSHListenForwardingFactory(self, 
+                            forwarding.SSHListenForwardingFactory(self,
                                 hostport,
                                 forwarding.SSHListenClientForwardingChannel))
         if options.remoteForwards:
@@ -482,7 +478,7 @@
 class SSHSession(channel.SSHChannel):
 
     name = 'session'
-    
+
     def channelOpen(self, foo):
         #global globalSession
         #globalSession = self
@@ -505,7 +501,7 @@
                 #winsz = fcntl.ioctl(fd, tty.TIOCGWINSZ, '12345678')
                 winSize = (25,80,0,0) #struct.unpack('4H', winsz)
                 ptyReqData = session.packRequest_pty_req(term, winSize, '')
-                self.conn.sendRequest(self, 'pty-req', ptyReqData)                
+                self.conn.sendRequest(self, 'pty-req', ptyReqData)
             self.conn.sendRequest(self, 'exec', \
                 common.NS(options['command']))
         else:
Index: twisted/conch/ssh/transport.py
===================================================================
--- twisted/conch/ssh/transport.py	(revision 34488)
+++ twisted/conch/ssh/transport.py	(working copy)
@@ -21,12 +21,14 @@
 
 # twisted imports
 from twisted.internet import protocol, defer
+
 from twisted.conch import error
 from twisted.python import log, randbytes
 from twisted.python.hashlib import md5, sha1
 
+
 # sibling imports
-from twisted.conch.ssh import keys
+from twisted.conch.ssh import address, keys
 from twisted.conch.ssh.common import NS, getNS, MP, getMP, _MPpow, ffs
 
 
@@ -64,8 +66,6 @@
         if 2 <= x <= (2 ** bits) - 2:
             return x
 
-
-
 class SSHTransportBase(protocol.Protocol):
     """
     Protocol supporting basic SSH functionality: sending/receiving packets
@@ -166,19 +166,19 @@
         the whole packet is available.
 
     @ivar _keyExchangeState: The current protocol state with respect to key
-        exchange.  This is either C{_KEY_EXCHANGE_NONE} if no key exchange is in
-        progress (and returns to this value after any key exchange completes),
-        C{_KEY_EXCHANGE_REQUESTED} if this side of the connection initiated a
-        key exchange, and C{_KEY_EXCHANGE_PROGRESSING} if the other side of the
-        connection initiated a key exchange.  C{_KEY_EXCHANGE_NONE} is the
-        initial value (however SSH connections begin with key exchange, so it
-        will quickly change to another state).
+        exchange.  This is either C{_KEY_EXCHANGE_NONE} if no key exchange is
+        in progress (and returns to this value after any key exchange
+        completqes), C{_KEY_EXCHANGE_REQUESTED} if this side of the connection
+        initiated a key exchange, and C{_KEY_EXCHANGE_PROGRESSING} if the other
+        side of the connection initiated a key exchange.  C{_KEY_EXCHANGE_NONE}
+        is the initial value (however SSH connections begin with key exchange,
+        so it will quickly change to another state).
 
     @ivar _blockedByKeyExchange: Whenever C{_keyExchangeState} is not
         C{_KEY_EXCHANGE_NONE}, this is a C{list} of pending messages which were
-        passed to L{sendPacket} but could not be sent because it is not legal to
-        send them while a key exchange is in progress.  When the key exchange
-        completes, another attempt is made to send these messages.
+        passed to L{sendPacket} but could not be sent because it is not legal
+        to send them while a key exchange is in progress.  When the key
+        exchange completes, another attempt is made to send these messages.
     """
 
 
@@ -282,8 +282,8 @@
 
     def _allowedKeyExchangeMessageType(self, messageType):
         """
-        Determine if the given message type may be sent while key exchange is in
-        progress.
+        Determine if the given message type may be sent while key exchange is
+        in progress.
 
         @param messageType: The type of message
         @type messageType: C{int}
@@ -305,9 +305,9 @@
 
     def sendPacket(self, messageType, payload):
         """
-        Sends a packet.  If it's been set up, compress the data, encrypt it, and
-        authenticate it before sending.  If key exchange is in progress and the
-        message is not part of key exchange, queue it to be sent later.
+        Sends a packet.  If it's been set up, compress the data, encrypt it,
+        and authenticate it before sending.  If key exchange is in progress and
+        the message is not part of key exchange, queue it to be sent later.
 
         @param messageType: The type of the packet; generally one of the
                             MSG_* values.
@@ -463,7 +463,29 @@
             log.msg(repr(payload))
             self.sendUnimplemented()
 
+    def getPeer(self):
+        """
+        Returns an L{SSHTransportAddress} corresponding to the other (peer)
+        side of this transport.
 
+        @return: L{SSHTransportAddress} for the peer
+        @rtype: L{SSHTransportAddress}
+        @since: 12.1
+        """
+        return address.SSHTransportAddress(self.transport.getPeer())
+
+    def getHost(self):
+        """
+        Returns an L{SSHTransportAddress} corresponding to the this side of
+        transport.
+
+        @return: L{SSHTransportAddress} for the peer
+        @rtype: L{SSHTransportAddress}
+        @since: 12.1
+        """
+        return address.SSHTransportAddress(self.transport.getHost())
+
+
     # Client-initiated rekeying looks like this:
     #
     #  C> MSG_KEXINIT
@@ -862,10 +884,10 @@
         Called to handle the beginning of a diffie-hellman-group1-sha1 key
         exchange.
 
-        Unlike other message types, this is not dispatched automatically.  It is
-        called from C{ssh_KEX_DH_GEX_REQUEST_OLD} because an extra check is
-        required to determine if this is really a KEXDH_INIT message or if it is
-        a KEX_DH_GEX_REQUEST_OLD message.
+        Unlike other message types, this is not dispatched automatically.  It
+        is called from C{ssh_KEX_DH_GEX_REQUEST_OLD} because an extra check is
+        required to determine if this is really a KEXDH_INIT message or if it
+        is a KEX_DH_GEX_REQUEST_OLD message.
 
         The KEXDH_INIT (for diffie-hellman-group1-sha1 exchanges) payload::
 
@@ -1085,11 +1107,12 @@
         """
         Called to handle a reply to a diffie-hellman-group1-sha1 key exchange
         message (KEXDH_INIT).
+        
+        Like the handler for I{KEXDH_INIT}, this message type has an
+        overlapping value.  This method is called from C{ssh_KEX_DH_GEX_GROUP}
+        if that method detects a diffie-hellman-group1-sha1 key exchange is in
+        progress.
 
-        Like the handler for I{KEXDH_INIT}, this message type has an overlapping
-        value.  This method is called from C{ssh_KEX_DH_GEX_GROUP} if that
-        method detects a diffie-hellman-group1-sha1 key exchange is in progress.
-
         Payload::
 
             string serverHostKey
Index: twisted/words/im/pbsupport.py
===================================================================
--- twisted/words/im/pbsupport.py	(revision 34488)
+++ twisted/words/im/pbsupport.py	(working copy)
@@ -2,10 +2,10 @@
 # See LICENSE for details.
 
 
-"""L{twisted.words} support for Instance Messenger."""
+"""
+L{twisted.words} support for Instance Messenger.
+"""
 
-from __future__ import nested_scopes
-
 from twisted.internet import defer
 from twisted.internet import error
 from twisted.python import log
Index: twisted/names/test/test_cache.py
===================================================================
--- twisted/names/test/test_cache.py	(revision 34488)
+++ twisted/names/test/test_cache.py	(working copy)
@@ -15,10 +15,40 @@
 
     def test_lookup(self):
         c = cache.CacheResolver({
-            dns.Query(name='example.com', type=dns.MX, cls=dns.IN): (time.time(), ([], [], []))})
-        return c.lookupMailExchange('example.com').addCallback(self.assertEqual, ([], [], []))
+            dns.Query(name='example.com', type=dns.MX, cls=dns.IN):
+                (time.time(), ([], [], []))})
+        return c.lookupMailExchange('example.com').addCallback(
+            self.assertEqual, ([], [], []))
 
 
+    def test_constructorExpires(self):
+        """
+        Cache entries passed into L{cache.CacheResolver.__init__} get
+        cancelled just like entries added with cacheResult
+        """
+
+        r = ([dns.RRHeader("example.com", dns.A, dns.IN, 60,
+                           dns.Record_A("127.0.0.1", 60))],
+             [dns.RRHeader("example.com", dns.A, dns.IN, 50,
+                           dns.Record_A("127.0.0.1", 50))],
+             [dns.RRHeader("example.com", dns.A, dns.IN, 40,
+                           dns.Record_A("127.0.0.1", 40))])
+
+        clock = task.Clock()
+        query = dns.Query(name="example.com", type=dns.A, cls=dns.IN)
+
+        c = cache.CacheResolver({ query : (clock.seconds(), r)}, reactor=clock)
+
+        # 40 seconds is enough to expire the entry because expiration is based
+        # on the minimum TTL.
+        clock.advance(40)
+
+        self.assertNotIn(query, c.cache)
+
+        return self.assertFailure(
+            c.lookupAddress("example.com"), dns.DomainError)
+
+
     def test_normalLookup(self):
         """
         When a cache lookup finds a cached entry from 1 second ago, it is
@@ -33,9 +63,8 @@
 
         clock = task.Clock()
 
-        c = cache.CacheResolver({
-                dns.Query(name="example.com", type=dns.A, cls=dns.IN) :
-                    (clock.seconds(), r)}, reactor=clock)
+        c = cache.CacheResolver(reactor=clock)
+        c.cacheResult(dns.Query(name="example.com", type=dns.A, cls=dns.IN), r)
 
         clock.advance(1)
 
@@ -50,7 +79,7 @@
 
     def test_cachedResultExpires(self):
         """
-        Once the TTL has been exceeded, the result is removed from the cache
+        Once the TTL has been exceeded, the result is removed from the cache.
         """
         r = ([dns.RRHeader("example.com", dns.A, dns.IN, 60,
                            dns.Record_A("127.0.0.1", 60))],
@@ -58,26 +87,26 @@
                            dns.Record_A("127.0.0.1", 50))],
              [dns.RRHeader("example.com", dns.A, dns.IN, 40,
                            dns.Record_A("127.0.0.1", 40))])
-        
+
         clock = task.Clock()
-        
+
         c = cache.CacheResolver(reactor=clock)
         query = dns.Query(name="example.com", type=dns.A, cls=dns.IN)
         c.cacheResult(query, r)
-        
+
         clock.advance(40)
-        
+
         self.assertNotIn(query, c.cache)
-        
+
         return self.assertFailure(
             c.lookupAddress("example.com"), dns.DomainError)
 
-    
+
     def test_expiredTTLLookup(self):
         """
         When the cache is queried exactly as the cached entry should expire
         but before it has actually been cleared, the cache should not return
-        the expired entry
+        the expired entry.
         """
         r = ([dns.RRHeader("example.com", dns.A, dns.IN, 60,
                            dns.Record_A("127.0.0.1", 60))],
Index: twisted/names/test/test_dns.py
===================================================================
--- twisted/names/test/test_dns.py	(revision 34488)
+++ twisted/names/test/test_dns.py	(working copy)
@@ -1494,7 +1494,7 @@
     def test_negativeTTL(self):
         """
         L{dns.RRHeader} instances cannot be created with a negative ttl
-        so that DNS caches do not serve expired information
+        so that DNS caches do not serve expired information.
         """
         self.assertRaises(ValueError, dns.RRHeader, "example.com", dns.A,
             dns.IN, -1, dns.Record_A("127.0.0.1"))
Index: twisted/names/topfiles/5647.bugfix
===================================================================
--- twisted/names/topfiles/5647.bugfix	(revision 0)
+++ twisted/names/topfiles/5647.bugfix	(revision 0)
@@ -0,0 +1 @@
+twisted.names.cache.CacheResolveri will no longer serve results that have expired.
\ No newline at end of file
Index: twisted/names/cache.py
===================================================================
--- twisted/names/cache.py	(revision 34488)
+++ twisted/names/cache.py	(working copy)
@@ -24,16 +24,18 @@
     def __init__(self, cache=None, verbose=0, reactor=None):
         common.ResolverBase.__init__(self)
 
-        if cache is None:
-            cache = {}
-        self.cache = cache
+        self.cache = {}
         self.verbose = verbose
         self.cancel = {}
         if reactor is None:
             from twisted.internet import reactor
         self._reactor = reactor
 
+        if cache:
+            for query, (seconds, payload) in cache.items():
+                self.cacheResult(query, payload, seconds)
 
+
     def __setstate__(self, state):
         self.__dict__ = state
 
@@ -68,34 +70,51 @@
             diff = now - when
 
             try:
-                return defer.succeed((
+                result = (
                     [dns.RRHeader(str(r.name), r.type, r.cls, r.ttl - diff,
                                   r.payload) for r in ans],
                     [dns.RRHeader(str(r.name), r.type, r.cls, r.ttl - diff,
                                   r.payload) for r in auth],
                     [dns.RRHeader(str(r.name), r.type, r.cls, r.ttl - diff,
-                                  r.payload) for r in add]))
+                                  r.payload) for r in add])
             except ValueError:
                 return defer.fail(failure.Failure(dns.DomainError(name)))
+            else:
+                return defer.succeed(result)
 
 
     def lookupAllRecords(self, name, timeout = None):
         return defer.fail(failure.Failure(dns.DomainError(name)))
 
 
-    def cacheResult(self, query, payload):
+    def cacheResult(self, query, payload, cacheTime=None):
+        """
+        Cache a DNS entry.
+
+        @param query: a L{dns.Query} instance.
+
+        @param payload: a 3-tuple of lists of L{dns.RRHeader} records, the
+            matching result of the query (answers, authority and additional).
+
+        @param cacheTime: The time (seconds since epoch) at which the entry is
+            considered to have been added to the cache. If C{None} is given,
+            the current time is used.
+        """
         if self.verbose > 1:
             log.msg('Adding %r to cache' % query)
 
-        self.cache[query] = (self._reactor.seconds(), payload)
+        self.cache[query] = (cacheTime or self._reactor.seconds(), payload)
 
         if self.cancel.has_key(query):
             self.cancel[query].cancel()
 
         s = list(payload[0]) + list(payload[1]) + list(payload[2])
-        m = s[0].ttl
-        for r in s:
-            m = min(m, r.ttl)
+        if s:
+            m = s[0].ttl
+            for r in s:
+                m = min(m, r.ttl)
+        else:
+            m = 0
 
         self.cancel[query] = self._reactor.callLater(m, self.clearEntry, query)
 
Index: twisted/names/dns.py
===================================================================
--- twisted/names/dns.py	(revision 34488)
+++ twisted/names/dns.py	(working copy)
@@ -482,10 +482,10 @@
         @type payload: An object implementing C{IEncodable}
         @param payload: A Query Type specific data object.
 
-        @raises ValueError: if the ttl is negative
+        @raises ValueError: if the ttl is negative.
         """
         assert (payload is None) or isinstance(payload, UnknownRecord) or (payload.TYPE == type)
-        
+
         if ttl < 0:
             raise ValueError("TTL cannot be negative")
 
Index: twisted/trial/test/test_script.py
===================================================================
--- twisted/trial/test/test_script.py	(revision 34488)
+++ twisted/trial/test/test_script.py	(working copy)
@@ -6,7 +6,7 @@
 
 from twisted.trial import unittest, runner
 from twisted.scripts import trial
-from twisted.python import util, deprecate, versions
+from twisted.python import util
 from twisted.python.compat import set
 from twisted.python.filepath import FilePath
 
@@ -16,7 +16,9 @@
 
 
 def sibpath(filename):
-    """For finding files in twisted/trial/test"""
+    """
+    For finding files in twisted/trial/test
+    """
     return util.sibpath(__file__, filename)
 
 
@@ -439,44 +441,3 @@
         self.assertEqual(
             options.coverdir(), FilePath(path).child("coverage"))
 
-
-class ExtraTests(unittest.TestCase):
-    """
-    Tests for the I{extra} option.
-    """
-
-    def setUp(self):
-        self.config = trial.Options()
-
-
-    def tearDown(self):
-        self.config = None
-
-
-    def assertDeprecationWarning(self, deprecatedCallable, warnings):
-        """
-        Check for a deprecation warning
-        """
-        self.assertEqual(len(warnings), 1)
-        self.assertEqual(warnings[0]['category'], DeprecationWarning)
-        self.assertEqual(warnings[0]['message'], 
-                          deprecate.getDeprecationWarningString(
-                              deprecatedCallable, versions.Version('Twisted', 11, 0, 0)))
-
-
-    def test_extraDeprecation(self):
-        """
-        Check that --extra  will emit a deprecation warning
-        """
-        self.config.opt_extra('some.sample.test')
-        self.assertDeprecationWarning(self.config.opt_extra,
-                                      self.flushWarnings([self.test_extraDeprecation]))
-
-    def test_xDeprecation(self):
-        """
-        Check that -x will emit a deprecation warning
-        """
-        self.config.opt_x('some.sample.text')
-        self.assertDeprecationWarning(self.config.opt_extra,
-                                      self.flushWarnings([self.test_xDeprecation]))
-
Index: twisted/trial/test/detests.py
===================================================================
--- twisted/trial/test/detests.py	(revision 34488)
+++ twisted/trial/test/detests.py	(working copy)
@@ -1,4 +1,10 @@
-from __future__ import generators
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for Deferred handling by L{twisted.trial.unittest.TestCase}.
+"""
+
 from twisted.trial import unittest
 from twisted.internet import defer, threads, reactor
 
@@ -18,7 +24,7 @@
 
 class DeferredSetUpFail(unittest.TestCase):
     testCalled = False
-    
+
     def setUp(self):
         return defer.fail(unittest.FailTest('i fail'))
 
@@ -29,7 +35,7 @@
 
 class DeferredSetUpCallbackFail(unittest.TestCase):
     testCalled = False
-    
+
     def setUp(self):
         d = defer.succeed('value')
         d.addCallback(self._cb_setUpCalled)
@@ -41,10 +47,10 @@
     def test_ok(self):
         DeferredSetUpCallbackFail.testCalled = True
 
-    
+
 class DeferredSetUpError(unittest.TestCase):
     testCalled = False
-    
+
     def setUp(self):
         return defer.fail(RuntimeError('deliberate error'))
 
@@ -54,7 +60,7 @@
 
 class DeferredSetUpNeverFire(unittest.TestCase):
     testCalled = False
-    
+
     def setUp(self):
         return defer.Deferred()
 
@@ -64,7 +70,7 @@
 
 class DeferredSetUpSkip(unittest.TestCase):
     testCalled = False
-    
+
     def setUp(self):
         d = defer.succeed('value')
         d.addCallback(self._cb1)
@@ -79,7 +85,7 @@
 
 class DeferredTests(unittest.TestCase):
     touched = False
-    
+
     def _cb_fail(self, reason):
         self.fail(reason)
 
@@ -134,7 +140,7 @@
 
 class TimeoutTests(unittest.TestCase):
     timedOut = None
-    
+
     def test_pass(self):
         d = defer.Deferred()
         reactor.callLater(0, d.callback, 'hoorj!')
@@ -159,7 +165,7 @@
         return defer.Deferred()
     test_expectedFailure.timeout = 0.1
     test_expectedFailure.todo = "i will get it right, eventually"
-    
+
     def test_skip(self):
         return defer.Deferred()
     test_skip.timeout = 0.1
Index: twisted/web/test/test_resource.py
===================================================================
--- twisted/web/test/test_resource.py	(revision 34488)
+++ twisted/web/test/test_resource.py	(working copy)
@@ -6,7 +6,6 @@
 """
 
 from twisted.trial.unittest import TestCase
-from twisted.web import error
 from twisted.web.http import NOT_FOUND, FORBIDDEN
 from twisted.web.resource import ErrorPage, NoResource, ForbiddenResource
 from twisted.web.test.test_web import DummyRequest
@@ -79,67 +78,3 @@
         page = self.forbiddenResource(detail)
         self._pageRenderingTest(page, FORBIDDEN, "Forbidden Resource", detail)
 
-
-
-class DeprecatedErrorPageTests(ErrorPageTests):
-    """
-    Tests for L{error.ErrorPage}, L{error.NoResource}, and
-    L{error.ForbiddenResource}.
-    """
-    def errorPage(self, *args):
-        return error.ErrorPage(*args)
-
-
-    def noResource(self, *args):
-        return error.NoResource(*args)
-
-
-    def forbiddenResource(self, *args):
-        return error.ForbiddenResource(*args)
-
-
-    def _assertWarning(self, name, offendingFunction):
-        warnings = self.flushWarnings([offendingFunction])
-        self.assertEqual(len(warnings), 1)
-        self.assertEqual(warnings[0]['category'], DeprecationWarning)
-        self.assertEqual(
-            warnings[0]['message'],
-            'twisted.web.error.%s is deprecated since Twisted 9.0.  '
-            'See twisted.web.resource.%s.' % (name, name))
-
-
-    def test_getChild(self):
-        """
-        Like L{ErrorPageTests.test_getChild}, but flush the deprecation warning
-        emitted by instantiating L{error.ErrorPage}.
-        """
-        ErrorPageTests.test_getChild(self)
-        self._assertWarning('ErrorPage', self.errorPage)
-
-
-    def test_errorPageRendering(self):
-        """
-        Like L{ErrorPageTests.test_errorPageRendering}, but flush the
-        deprecation warning emitted by instantiating L{error.ErrorPage}.
-        """
-        ErrorPageTests.test_errorPageRendering(self)
-        self._assertWarning('ErrorPage', self.errorPage)
-
-
-    def test_noResourceRendering(self):
-        """
-        Like L{ErrorPageTests.test_noResourceRendering}, but flush the
-        deprecation warning emitted by instantiating L{error.NoResource}.
-        """
-        ErrorPageTests.test_noResourceRendering(self)
-        self._assertWarning('NoResource', self.noResource)
-
-
-    def test_forbiddenResourceRendering(self):
-        """
-        Like L{ErrorPageTests.test_forbiddenResourceRendering}, but flush the
-        deprecation warning emitted by instantiating
-        L{error.ForbiddenResource}.
-        """
-        ErrorPageTests.test_forbiddenResourceRendering(self)
-        self._assertWarning('ForbiddenResource', self.forbiddenResource)
Index: twisted/web/test/test_static.py
===================================================================
--- twisted/web/test/test_static.py	(revision 34488)
+++ twisted/web/test/test_static.py	(working copy)
@@ -1484,22 +1484,3 @@
         self.assertEqual(static.formatFileSize(1234000000), "1G")
         self.assertEqual(static.formatFileSize(1234567890000), "1149G")
 
-
-
-class TestFileTransferDeprecated(TestCase):
-    """
-    L{static.FileTransfer} is deprecated.
-    """
-
-    def test_deprecation(self):
-        """
-        Instantiation of L{FileTransfer} produces a deprecation warning.
-        """
-        static.FileTransfer(StringIO.StringIO(), 0, DummyRequest([]))
-        warnings = self.flushWarnings([self.test_deprecation])
-        self.assertEqual(len(warnings), 1)
-        self.assertEqual(warnings[0]['category'], DeprecationWarning)
-        self.assertEqual(
-            warnings[0]['message'],
-            'FileTransfer is deprecated since Twisted 9.0. '
-            'Use a subclass of StaticProducer instead.')
Index: twisted/web/error.py
===================================================================
--- twisted/web/error.py	(revision 34488)
+++ twisted/web/error.py	(working copy)
@@ -6,7 +6,7 @@
 Exception definitions for L{twisted.web}.
 """
 
-import operator, warnings
+import operator
 
 from twisted.web import http
 
@@ -216,47 +216,6 @@
 
 
 
-from twisted.web import resource as _resource
-
-class ErrorPage(_resource.ErrorPage):
-    """
-    Deprecated alias for L{twisted.web.resource.ErrorPage}.
-    """
-    def __init__(self, *args, **kwargs):
-        warnings.warn(
-            "twisted.web.error.ErrorPage is deprecated since Twisted 9.0.  "
-            "See twisted.web.resource.ErrorPage.", DeprecationWarning,
-            stacklevel=2)
-        _resource.ErrorPage.__init__(self, *args, **kwargs)
-
-
-
-class NoResource(_resource.NoResource):
-    """
-    Deprecated alias for L{twisted.web.resource.NoResource}.
-    """
-    def __init__(self, *args, **kwargs):
-        warnings.warn(
-            "twisted.web.error.NoResource is deprecated since Twisted 9.0.  "
-            "See twisted.web.resource.NoResource.", DeprecationWarning,
-            stacklevel=2)
-        _resource.NoResource.__init__(self, *args, **kwargs)
-
-
-
-class ForbiddenResource(_resource.ForbiddenResource):
-    """
-    Deprecated alias for L{twisted.web.resource.ForbiddenResource}.
-    """
-    def __init__(self, *args, **kwargs):
-        warnings.warn(
-            "twisted.web.error.ForbiddenResource is deprecated since Twisted "
-            "9.0.  See twisted.web.resource.ForbiddenResource.",
-            DeprecationWarning, stacklevel=2)
-        _resource.ForbiddenResource.__init__(self, *args, **kwargs)
-
-
-
 class RenderError(Exception):
     """
     Base exception class for all errors which can occur during template
@@ -415,8 +374,8 @@
 
 
 __all__ = [
-    'Error', 'PageRedirect', 'InfiniteRedirection', 'ErrorPage', 'NoResource',
-    'ForbiddenResource', 'RenderError', 'MissingRenderMethod',
-    'MissingTemplateLoader', 'UnexposedMethodError', 'UnfilledSlot',
-    'UnsupportedType', 'FlattenerError', 'RedirectWithNoLocation'
+    'Error', 'PageRedirect', 'InfiniteRedirection', 'RenderError',
+    'MissingRenderMethod', 'MissingTemplateLoader', 'UnexposedMethodError',
+    'UnfilledSlot', 'UnsupportedType', 'FlattenerError',
+    'RedirectWithNoLocation'
 ]
Index: twisted/web/static.py
===================================================================
--- twisted/web/static.py	(revision 34488)
+++ twisted/web/static.py	(working copy)
@@ -22,7 +22,6 @@
 
 from twisted.python import components, filepath, log
 from twisted.internet import abstract, interfaces
-from twisted.spread import pb
 from twisted.persisted import styles
 from twisted.python.util import InsensitiveDict
 from twisted.python.runtime import platformType
@@ -831,57 +830,7 @@
             self.request = None
 
 
-class FileTransfer(pb.Viewable):
-    """
-    A class to represent the transfer of a file over the network.
-    """
-    request = None
 
-    def __init__(self, file, size, request):
-        warnings.warn(
-            "FileTransfer is deprecated since Twisted 9.0. "
-            "Use a subclass of StaticProducer instead.",
-            DeprecationWarning, stacklevel=2)
-        self.file = file
-        self.size = size
-        self.request = request
-        self.written = self.file.tell()
-        request.registerProducer(self, 0)
-
-    def resumeProducing(self):
-        if not self.request:
-            return
-        data = self.file.read(min(abstract.FileDescriptor.bufferSize, self.size - self.written))
-        if data:
-            self.written += len(data)
-            # this .write will spin the reactor, calling .doWrite and then
-            # .resumeProducing again, so be prepared for a re-entrant call
-            self.request.write(data)
-        if self.request and self.file.tell() == self.size:
-            self.request.unregisterProducer()
-            self.request.finish()
-            self.request = None
-
-    def pauseProducing(self):
-        pass
-
-    def stopProducing(self):
-        self.file.close()
-        self.request = None
-
-    # Remotely relay producer interface.
-
-    def view_resumeProducing(self, issuer):
-        self.resumeProducing()
-
-    def view_pauseProducing(self, issuer):
-        self.pauseProducing()
-
-    def view_stopProducing(self, issuer):
-        self.stopProducing()
-
-
-
 class ASISProcessor(resource.Resource):
     """
     Serve files exactly as responses without generating a status-line or any
Index: twisted/spread/ui/gtk2util.py
===================================================================
--- twisted/spread/ui/gtk2util.py	(revision 34488)
+++ twisted/spread/ui/gtk2util.py	(working copy)
@@ -1,10 +1,6 @@
-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
-from __future__ import nested_scopes
-
 import gtk
 
 from twisted import copyright
Index: doc/mail/tutorial/smtpclient/smtpclient-11.tac
===================================================================
--- doc/mail/tutorial/smtpclient/smtpclient-11.tac	(revision 34488)
+++ doc/mail/tutorial/smtpclient/smtpclient-11.tac	(working copy)
@@ -46,7 +46,7 @@
 
 def getMailExchange(host):
     def cbMX(mxRecord):
-        return str(mxRecord.exchange)
+        return str(mxRecord.name)
     return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)
 
 def cbMailExchange(exchange):
Index: doc/mail/tutorial/smtpclient/smtpclient.xhtml
===================================================================
--- doc/mail/tutorial/smtpclient/smtpclient.xhtml	(revision 34488)
+++ doc/mail/tutorial/smtpclient/smtpclient.xhtml	(working copy)
@@ -703,7 +703,7 @@
 <pre class="python">
 def getMailExchange(host):
     def cbMX(mxRecord):
-        return str(mxRecord.exchange)
+        return str(mxRecord.name)
     return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)
 </pre>
 
Index: doc/core/howto/choosing-reactor.xhtml
===================================================================
--- doc/core/howto/choosing-reactor.xhtml	(revision 34488)
+++ doc/core/howto/choosing-reactor.xhtml	(working copy)
@@ -16,8 +16,9 @@
     implementations are suited for different purposes and are
     designed to integrate better with particular platforms.</p>
 
-    <p>The <a href="#select">select()-based reactor</a> is Twisted's
-    cross-platform reactor.</p>
+    <p>The <a href="#epoll">epoll()-based reactor</a> is Twisted's default on
+    Linux. Other platforms use <a href="#poll">poll()</a>, or the most
+    cross-platform reactor, <a href="#select">select()</a>.</p>
 
     <p>Platform-specific reactor implementations exist for:</p>
 
@@ -40,6 +41,7 @@
 
     <ul>
       <li><a href="#gtk">GTK+ 2.0</a></li>
+      <li><a href="#gtk3">GTK+ 3.0 and GObject Introspection</a></li>
       <li><a href="#tkinter">Tkinter</a></li>
       <li><a href="#wxpython">wxPython</a></li>
       <li><a href="#win32_wfmo">Win32</a></li>
@@ -80,18 +82,11 @@
 
     <h3>Select()-based Reactor</h3><a name="select" />
 
-    <p>The <code>select</code> reactor is currently the default reactor on all
-    platforms. The following code will install it, if no other reactor has
-    been installed:</p>
+    <p>The <code>select</code> reactor is the default on platforms that don't
+    provide a better alternative that covers all use cases. If
+    the <code>select</code> reactor is desired, it may be installed via:</p>
 
 <pre class="python">
-from twisted.internet import reactor
-</pre>
-
-    <p>In the future, if another reactor becomes the default, but the
-    <code>select</code> reactor is desired, it may be installed via:</p>
-
-<pre class="python">
 from twisted.internet import selectreactor
 selectreactor.install()
 
@@ -200,6 +195,46 @@
 from twisted.internet import reactor
 </pre>
 
+    <h3>GTK+ 3.0 and GObject Introspection</h3><a name="gtk3" />
+
+    <p>Twisted integrates with <a href="http://gtk.org">GTK+ 3</a> and GObject
+    through <a href="http://live.gnome.org/PyGObject">PyGObject's</a>
+    introspection using the <code>gtk3reactor</code>
+    and <code>gireactor</code> reactors.</p>
+
+<pre class="python">
+from twisted.internet import gtk3reactor
+gtk3reactor.install()
+
+from twisted.internet import reactor
+</pre>
+
+<pre class="python">
+from twisted.internet import gireactor # for non-GUI apps
+gireactor.install()
+
+from twisted.internet import reactor
+</pre>
+
+    <p>GLib 3.0 introduces the concept of <code>GApplication</code>, a class
+    that handles application uniqueness in a cross-platform way and provides
+    its own main loop. Its counterpart <code>GtkApplication</code> also
+    handles application lifetime with respect to open windows. Twisted
+    supports registering these objects with the event loop, which should be
+    done before running the reactor:</p>
+
+<pre class="python">
+from twisted.internet import gtk3reactor
+gtk3reactor.install()
+
+from gi.repository import Gtk
+app = Gtk.Application(...)
+
+from twisted import reactor
+reactor.registerGApplication(app)
+reactor.run()
+</pre>
+
     <h3>wxPython</h3><a name="wxpython" />
 
     <p>Twisted currently supports two methods of integrating
Index: doc/core/examples/threadedselect/pygamedemo.py
===================================================================
--- doc/core/examples/threadedselect/pygamedemo.py	(revision 34488)
+++ doc/core/examples/threadedselect/pygamedemo.py	(working copy)
@@ -1,5 +1,11 @@
-from __future__ import generators
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+Demonstration of how L{twisted.internet._threadedselect} might be used (this is
+not an example showing the best way to integrate Twisted with pygame).
+"""
+
 # import Twisted and install
 from twisted.internet import _threadedselect
 _threadedselect.install()
@@ -71,7 +77,7 @@
             reactor.stop()
         elif event.type == KEYDOWN and event.key == K_ESCAPE:
             reactor.stop()
-                
+
     pygame.quit()
 
 if __name__ == '__main__':
Index: doc/core/examples/pbgtk2.py
===================================================================
--- doc/core/examples/pbgtk2.py	(revision 34488)
+++ doc/core/examples/pbgtk2.py	(working copy)
@@ -1,9 +1,6 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
-from __future__ import nested_scopes
-
 from twisted.internet import gtk2reactor
 gtk2reactor.install()
 
@@ -67,7 +64,7 @@
         reactor.connectTCP(host, port, client_factory)
         creds = UsernamePassword(userName, password)
         client_factory.login(creds).addCallbacks(self._cbGotPerspective, self._ebFailedLogin)
-        
+
         self.statusMsg("Contacting server...")
 
     def _cbGotPerspective(self, perspective):
@@ -80,7 +77,7 @@
             text = str(reason.value)
         else:
             text = str(reason)
-            
+
         self.statusMsg(text)
         msg = gtk.MessageDialog(self._loginDialog,
                                 gtk.DIALOG_DESTROY_WITH_PARENT,
Index: doc/core/examples/index.xhtml
===================================================================
--- doc/core/examples/index.xhtml	(revision 34488)
+++ doc/core/examples/index.xhtml	(working copy)
@@ -42,7 +42,7 @@
     <h2>Perspective Broker</h2>
     <ul>
         <li><a href="pbsimple.py">pbsimple.py</a> - simplest possible PB server</li>
-        <li><a href="pbsimpleclient.py">pbsimpleclient.py</a> - simplest possible PB 
+        <li><a href="pbsimpleclient.py">pbsimpleclient.py</a> - simplest possible PB
         client</li>
         <li><a href="pbbenchclient.py">pbbenchclient.py</a> - benchmarking client</li>
         <li><a href="pbbenchserver.py">pbbenchserver.py</a> - benchmarking server</li>
@@ -78,13 +78,20 @@
 
     <h2>Logging</h2>
     <ul>
-        <li><a href="twistd-logging.tac">twistd-logging.tac</a> - logging example using 
+        <li><a href="twistd-logging.tac">twistd-logging.tac</a> - logging example using
         ILogObserver</li>
-        <li><a href="testlogging.py">testlogging.py</a> - use twisted.python.log to log errors to 
-	standard out</li>
+        <li><a href="testlogging.py">testlogging.py</a> - use twisted.python.log to log errors to
+        standard out</li>
         <li><a href="rotatinglog.py">rotatinglog.py</a> - example of log file rotation</li>
     </ul>
 
+    <h2>POSIX Specific Tricks</h2>
+    <ul>
+      <li><a href="sendfd.py">sendfd.py</a>, <a href="recvfd.py">recvfd.py</a> - send and receive
+      file descriptors over UNIX domain sockets
+      </li>
+    </ul>
+
     <h2>Miscellaneous</h2>
     <ul>
         <li><a href="shaper.py">shaper.py</a> - example of rate-limiting your web server</li>
@@ -101,7 +108,7 @@
         <li><a href="stdin.py">stdin.py</a> - reading a line at a time from standard input
         without blocking the reactor</li>
         <li><a href="streaming.py">streaming.py</a> - example of a push producer/consumer system</li>
-        <li><a href="filewatch.py">filewatch.py</a> - write the content of a file to standard out 
+        <li><a href="filewatch.py">filewatch.py</a> - write the content of a file to standard out
         one line at a time</li>
         <li><a href="shoutcast.py">shoutcast.py</a> - example Shoutcast client</li>
         <li><a href="gpsfix.py">gpsfix.py</a> - example using the SerialPort transport and GPS
@@ -109,7 +116,6 @@
         <li><a href="wxacceptance.py">wxacceptance.py</a> - acceptance tests for wxreactor</li>
         <li><a href="postfix.py">postfix.py</a> - test application for PostfixTCPMapServer</li>
     </ul>
-    
+
 </body>
 </html>
-
Index: doc/core/examples/longex2.py
===================================================================
--- doc/core/examples/longex2.py	(revision 34488)
+++ doc/core/examples/longex2.py	(working copy)
@@ -1,5 +1,9 @@
-"""Example of doing arbitarily long calculations nicely in Twisted.
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+Example of doing arbitarily long calculations nicely in Twisted.
+
 This is also a simple demonstration of twisted.protocols.basic.LineReceiver.
 This example uses generators to do the calculation. It also tries to be
 a good example in division of responsibilities:
@@ -40,7 +44,7 @@
 result is 1. In that, this example departs from doc/examples/longex.py,
 which errors out when trying to do this.
 """
-from __future__ import generators
+
 from twisted.protocols import basic
 from twisted.internet import defer, protocol
 
Index: doc/web/examples/reverse-proxy.py
===================================================================
--- doc/web/examples/reverse-proxy.py	(revision 34488)
+++ doc/web/examples/reverse-proxy.py	(working copy)
@@ -1,12 +1,15 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# Run this example with:
-#    python reverse-proxy.py
-#
-# Then visit http://localhost:8080 in your web browser. The reverse
-# proxy will proxy your connection to www.yahoo.com.
+"""
+This example demonstrates how to run a reverse proxy.
 
+Run this example with:
+    $ python reverse-proxy.py
+
+Then visit http://localhost:8080/ in your web browser.
+"""
+
 from twisted.internet import reactor
 from twisted.web import proxy, server
 
Index: doc/web/examples/fortune.rpy.py
===================================================================
--- doc/web/examples/fortune.rpy.py	(revision 34488)
+++ doc/web/examples/fortune.rpy.py	(working copy)
@@ -1,3 +1,24 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example demostrates how to render the output of a system process to a
+twisted web server.
+
+In order to run this, you need to have fortune installed.  Fortune is a simple
+game that displays a random message from a database of quotations. You will need
+to change the path of the fortune program if it's not in the "/usr/game"
+directory.
+
+To test the script, rename the file to fortune.rpy, and move it to any
+directory, let's say /var/www/html/
+
+Now, start your Twisted web server:
+    $ twistd -n web --path /var/www/html/
+
+And visit http://127.0.0.1:8080/fortune.rpy with a web browser.
+"""
+
 from twisted.web.resource import Resource
 from twisted.web import server
 from twisted.internet import utils
@@ -4,10 +25,21 @@
 from twisted.python import util
 
 class FortuneResource(Resource):
+    """
+    This resource will only repond to HEAD & GET requests.
+    """
+    # Link your fortune program to /usr/games or change the path.
+    fortune = "/usr/games/fortune"
 
     def render_GET(self, request):
+        """
+        Get a fortune and serve it as the response to this request.
+
+        Use L{utils.getProcessOutput}, which spawns a process and returns a
+        Deferred which fires with its output.
+        """
         request.write("<pre>\n")
-        deferred = utils.getProcessOutput("/usr/games/fortune")
+        deferred = utils.getProcessOutput(self.fortune)
         deferred.addCallback(lambda s:
                              (request.write(s+"\n"), request.finish()))
         deferred.addErrback(lambda s:
Index: doc/web/examples/dlpage.py
===================================================================
--- doc/web/examples/dlpage.py	(revision 34488)
+++ doc/web/examples/dlpage.py	(working copy)
@@ -1,3 +1,15 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example demonstrates how to use downloadPage.
+
+Usage:
+    $ python dlpage.py <url>
+
+Don't forget the http:// when you type a URL!
+"""
+
 from twisted.internet import reactor
 from twisted.web.client import downloadPage
 from twisted.python.util import println
@@ -3,4 +15,6 @@
 import sys
 
+# The function downloads a page and saves it to a file, in this case, it saves
+# the page to "foo".
 downloadPage(sys.argv[1], "foo").addCallbacks(
    lambda value:reactor.stop(),
Index: doc/web/examples/webguard.py
===================================================================
--- doc/web/examples/webguard.py	(revision 34488)
+++ doc/web/examples/webguard.py	(working copy)
@@ -1,6 +1,16 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+This example shows how to make simple web authentication.
+
+To run the example:
+    $ python webguard.py
+
+When you visit http://127.0.0.1:8889/, the page will ask for an username &
+password. See the code in main() to get the correct username & password!
+"""
+
 import sys
 
 from zope.interface import implements
Index: doc/web/examples/simple.rtl
===================================================================
--- doc/web/examples/simple.rtl	(revision 34488)
+++ doc/web/examples/simple.rtl	(working copy)
@@ -1,7 +1,16 @@
-# For this to work:
-# Configure your web server with 
-# --process=.rtl=twisted.web.script.ResourceTemplate
-# And make sure quixote is installed on your Python path.
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example demostrates how to render a page using a third-party template
+system.
+
+Usage:
+    $ twistd -n web --process=.rtl=twisted.web.script.ResourceTemplate --path /path/to/examples/
+
+And make sure Quixote is installed.
+"""
+
 from twisted.web.resource import Resource
 
 
Index: doc/web/examples/soap.py
===================================================================
--- doc/web/examples/soap.py	(revision 34488)
+++ doc/web/examples/soap.py	(working copy)
@@ -1,19 +1,22 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# 
-"""Example of publishing SOAP methods.
+"""
+This is an example of a simple SOAP server.
 
-Sample usage::
+Usage:
+    $ python soap.py
 
+An example session (assuming the server is running):
+
    >>> import SOAPpy
    >>> p = SOAPpy.SOAPProxy('http://localhost:8080/')
    >>> p.add(a=1)
    1
    >>> p.add(a=1, b=3)
    4
-   >>> p.echo([1, 2])
-   [1, 2]
+   >>> p.echo("Hello World")
+   'Hello World'
 
 """
 
@@ -22,7 +25,9 @@
 
 
 class Example(soap.SOAPPublisher):
-    """Publish two methods, 'add' and 'echo'."""
+    """
+    It publishs two methods, 'add' and 'echo'.
+    """
 
     def soap_echo(self, x):
         return x
@@ -37,5 +42,3 @@
 
 reactor.listenTCP(8080, server.Site(Example()))
 reactor.run()
-
-                  
Index: doc/web/examples/advogato.py
===================================================================
--- doc/web/examples/advogato.py	(revision 34488)
+++ doc/web/examples/advogato.py	(working copy)
@@ -1,17 +1,18 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-#
+"""
+This example demonstrates how to logon to a remote server and post a diary.
 
-'''
-Usage: 
-advogato.py <name> <diary entry file>
-'''
+Usage:
+    $ python advogato.py <name> <diary entry file>
+"""
 
+import sys
+from getpass import getpass
+
 from twisted.web.xmlrpc import Proxy
 from twisted.internet import reactor
-from getpass import getpass
-import sys
 
 class AddDiary:
 
Index: doc/web/examples/xmlrpcclient.py
===================================================================
--- doc/web/examples/xmlrpcclient.py	(revision 34488)
+++ doc/web/examples/xmlrpcclient.py	(working copy)
@@ -1,3 +1,15 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example makes remote XML-RPC calls.
+
+Usage:
+    $ python xmlrpcclient.py
+
+The example will make an XML-RPC request to advogato.org and display the result.
+"""
+
 from twisted.web.xmlrpc import Proxy
 from twisted.internet import reactor
 
@@ -9,15 +21,11 @@
     print 'error', error
     reactor.stop()
 
+def capitalize(value):
+    print repr(value)
+    proxy.callRemote('test.capitalize', 'moshe zadka').addCallbacks(printValue, printError)
+
 proxy = Proxy('http://advogato.org/XMLRPC')
-proxy.callRemote('test.sumprod', 3, 5).addCallbacks(printValue, printError)
+# The callRemote method accepts a method name and an argument list.
+proxy.callRemote('test.sumprod', 2, 5).addCallbacks(capitalize, printError)
 reactor.run()
-proxy.callRemote('test.capitalize', 'moshe zadka').addCallbacks(printValue,
-                                                                printError)
-reactor.run()
-proxy = Proxy('http://time.xmlrpc.com/RPC2')
-proxy.callRemote('currentTime.getCurrentTime').addCallbacks(printValue, printError)
-reactor.run()
-proxy = Proxy('http://betty.userland.com/RPC2')
-proxy.callRemote('examples.getStateName', 41).addCallbacks(printValue, printError)
-reactor.run()
Index: doc/web/examples/logging-proxy.py
===================================================================
--- doc/web/examples/logging-proxy.py	(revision 34488)
+++ doc/web/examples/logging-proxy.py	(working copy)
@@ -1,21 +1,38 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# Run this example with:
-#    python logging-proxy.py
-#
-# Then configure your web browser to use localhost:8080 as a proxy,
-# and visit a URL. This proxy is proxying the connection to that URL's
-# host and will log the client IP and hostname.
+"""
+An example of a proxy which logs all requests processed through it.
 
+Usage:
+    $ python logging-proxy.py
+
+Then configure your web browser to use localhost:8080 as a proxy, and visit a
+URL (This is not a SOCKS proxy). When browsing in this configuration, this
+example will proxy connections from the browser to the server indicated by URLs
+which are visited.  The client IP and the request hostname will be logged for
+each request.
+
+HTTP is supported.  HTTPS is not supported.
+
+See also proxy.py for a simpler proxy example.
+"""
+
 from twisted.internet import reactor
 from twisted.web import proxy, http
 
 class LoggingProxyRequest(proxy.ProxyRequest):
     def process(self):
+        """
+        It's normal to see a blank HTTPS page. As the proxy only works
+        with the HTTP protocol.
+        """
         print "Request from %s for %s" % (
             self.getClientIP(), self.getAllHeaders()['host'])
-        proxy.ProxyRequest.process(self)
+        try:
+            proxy.ProxyRequest.process(self)
+        except KeyError:
+            print "HTTPS is not supported at the moment!"
 
 class LoggingProxy(proxy.Proxy):
     requestFactory = LoggingProxyRequest
Index: doc/web/examples/xmlrpc.py
===================================================================
--- doc/web/examples/xmlrpc.py	(revision 34488)
+++ doc/web/examples/xmlrpc.py	(working copy)
@@ -1,9 +1,14 @@
-"""Example of an XML-RPC server in Twisted.
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
-To run the server, just run this file ("python xmlrpc.py").
+"""
+An example of an XML-RPC server in Twisted.
 
-An example session (assuming the server is running)::
-    
+Usage:
+    $ python xmlrpc.py
+
+An example session (assuming the server is running):
+
     >>> import xmlrpclib
     >>> s = xmlrpclib.Server('http://localhost:7080/')
     >>> s.echo("lala")
@@ -21,37 +26,45 @@
 
 from twisted.web import xmlrpc
 from twisted.internet import defer
-
-# This module is standard in Python 2.2, otherwise get it from
-#   http://www.pythonware.com/products/xmlrpc/
 import xmlrpclib
 
 
 class Echoer(xmlrpc.XMLRPC):
-    """An example object to be published.
-    
+    """
+    An example object to be published.
+
     Has five methods accessable by XML-RPC, 'echo', 'hello', 'defer',
     'defer_fail' and 'fail.
     """
-    
+
     def xmlrpc_echo(self, *args):
-        """Return all passed args."""
+        """
+        Return all passed args.
+        """
         return args
-    
+
     def xmlrpc_hello(self):
-        """Return 'hello, world'."""
+        """
+        Return 'hello, world'.
+        """
         return 'hello, world!'
-    
+
     def xmlrpc_defer(self):
-        """Show how xmlrpc methods can return Deferred."""
+        """
+        Show how xmlrpc methods can return Deferred.
+        """
         return defer.succeed("hello")
-    
+
     def xmlrpc_defer_fail(self):
-        """Show how xmlrpc methods can return failed Deferred."""
+        """
+        Show how xmlrpc methods can return failed Deferred.
+        """
         return defer.fail(12)
 
     def xmlrpc_fail(self):
-        """Show how we can return a failure code."""
+        """
+        Show how we can return a failure code.
+        """
         return xmlrpclib.Fault(7, "Out of cheese.")
 
 
Index: doc/web/examples/silly-web.py
===================================================================
--- doc/web/examples/silly-web.py	(revision 34488)
+++ doc/web/examples/silly-web.py	(working copy)
@@ -1,8 +1,18 @@
-# This shows an example of a bare-bones distributed web
-# set up.
-# The "master" and "slave" parts will usually be in different files
-# -- they are here together only for brevity of illustration 
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+This shows an example of a bare-bones distributed web set up.  The "master" and
+"slave" parts will usually be in different files -- they are here together only
+for brevity of illustration.  In normal usage they would each run in a separate
+process.
+
+Usage:
+    $ python silly-web.py
+
+Then visit http://localhost:19988/.
+"""
+
 from twisted.internet import reactor, protocol
 from twisted.web import server, distrib, static
 from twisted.spread import pb
Index: doc/web/examples/rootscript.py
===================================================================
--- doc/web/examples/rootscript.py	(revision 34488)
+++ doc/web/examples/rootscript.py	(working copy)
@@ -1,9 +1,41 @@
-from twisted.web import vhost, static, script
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+This is a Twisted Web Server with Named-Based Virtual Host Support.
+
+Usage:
+    $ sudo twistd -ny rootscript.py
+
+Note: You need to edit your hosts file for this example
+to work. Need to add the following entry:
+
+    127.0.0.1   example.com
+
+Then visit http://example.com/ with a web browser and compare the results to
+visiting http://localhost/.
+"""
+
+from twisted.web import vhost, static, script, server
+from twisted.application import internet, service
+
 default = static.Data('text/html', '')
+# Setting up vhost resource.
 default.putChild('vhost', vhost.VHostMonsterResource())
 resource = vhost.NameVirtualHost()
 resource.default = default
-file = static.File('static')
-file.processors = {'.rpy': script.ResourceScript}
-resource.addHost('twistedmatrix.com', file)
+# Here we use /var/www/html/ as our root diretory for the web server, you can
+# change it to whatever directory you want.
+root = static.File("/var/www/html/")
+root.processors = {'.rpy': script.ResourceScript}
+# addHost binds domain name example.com to our root resource.
+resource.addHost("example.com", root)
+
+# Setup Twisted Application.
+site = server.Site(resource)
+application = service.Application('vhost')
+sc = service.IServiceCollection(application)
+# Only the processes owned by the root user can listen @ port 80, change the
+# port number here if you don't want to run it as root.
+i = internet.TCPServer(80, site)
+i.setServiceParent(sc)
Index: doc/web/examples/users.rpy.py
===================================================================
--- doc/web/examples/users.rpy.py	(revision 34488)
+++ doc/web/examples/users.rpy.py	(working copy)
@@ -1,18 +1,24 @@
-# With this, you can have an instant "community web site",
-# letting your shell users publish data in secure ways.
-#
-# Just put this script anywhere, and /path/to/this/script/<user>/
-# will publish a user's ~/public_html, and a .../<user>.twistd/
-# will attempt to contact a user's personal web server.
-#
-# For example, if you put this at the root of the web server
-# as "users.rpy", and configure --allow-ignore-ext, then
-# http://example.com/users/<name>/ and http://example.com/users/<name>.twistd
-# will work similarily to how they work on twistedmatrix.com
- 
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+An example showing how to use a distributed web server's user directory support.
+
+With this, you can have an instant "community web site",
+letting your shell users publish data in secure ways.
+
+Just put this script anywhere, and /path/to/this/script/<user>/ will publish a
+user's ~/public_html, and a .../<user>.twistd/ will attempt to contact a user's
+personal web server.
+
+For example, if you put this at /var/www/users.rpy and run a server like:
+    $ twistd -n web --allow-ignore-ext --path /var/www
+
+Then http://example.com/users/<name>/ and http://example.com/users/<name>.twistd
+will work similarily to how they work on twistedmatrix.com.
+"""
+
 from twisted.web import distrib
 
-resource = registry.getComponent(distrib.UserDirectory)
-if not resource:
-    resource = distrib.UserDirectory()
-    registry.setComponent(distrib.UserDirectory, resource)
+resource = distrib.UserDirectory()
+registry.setComponent(distrib.UserDirectory, resource)
Index: doc/web/examples/index.xhtml
===================================================================
--- doc/web/examples/index.xhtml	(revision 34488)
+++ doc/web/examples/index.xhtml	(working copy)
@@ -12,12 +12,12 @@
 
     <h2>twisted.web.client</h2>
     <ul>
-	<li><a href="getpage.py">getpage.py</a> - use
-	<code>twisted.web.client.getPage</code> to download a web 
-	page.</li>
-	<li><a href="dlpage.py">dlpage.py</a> - add callbacks to
-	<code>twisted.web.client.downloadPage</code> to display errors 
-	that occur when downloading a web page</li>
+        <li><a href="getpage.py">getpage.py</a> - use
+        <code>twisted.web.client.getPage</code> to download a web
+        page.</li>
+        <li><a href="dlpage.py">dlpage.py</a> - add callbacks to
+        <code>twisted.web.client.downloadPage</code> to display errors
+        that occur when downloading a web page</li>
     </ul>
 
     <h2>XML-RPC</h2>
@@ -26,75 +26,71 @@
         several methods, including echoing, faulting, returning
         deferreds and failed deferreds</li>
         <li><a href="xmlrpcclient.py">xmlrpcclient.py</a> - use
-        <code>twisted.web.xmlrpc.Proxy</code> to call remote XML-RPC 
-	methods</li>
+        <code>twisted.web.xmlrpc.Proxy</code> to call remote XML-RPC
+        methods</li>
         <li><a href="advogato.py">advogato.py</a> - use
-        <code>twisted.web.xmlrpc</code> to post a diary entry to 
-	advogato.org; requires an advogato account</li>
+        <code>twisted.web.xmlrpc</code> to post a diary entry to
+        advogato.org; requires an advogato account</li>
     </ul>
 
     <h2>Virtual hosts and proxies</h2>
     <ul>
-	<li><a href="proxy.py">proxy.py</a> -
-	use <code>twisted.web.proxy.Proxy</code> to make the simplest
-	proxy</li>
-	<li><a href="logging-proxy.py">logging-proxy.py</a> - example of
-	subclassing the core classes of <code>twisted.web.proxy</code>
-	to log requests through a proxy</li>
-	<li><a href="reverse-proxy.py">reverse-proxy.py</a> - use
-	<code>twisted.web.proxy.ReverseProxyResource</code> to make
-	any HTTP request to the proxy port get applied to a specified
-	website</li>
-	<li><a href="rootscript.py">rootscript.py</a> - example use of
-	<code>twisted.web.vhost.NameVirtualHost</code></li>
-	<li><a href="web.py">web.py</a> - an example of both using the
-	<code>processors</code> attribute to set how certain file types
-	are treated and using
-	<code>twisted.web.vhost.VHostMonsterResource</code> to reverse
-	proxy</li>
+        <li><a href="proxy.py">proxy.py</a> -
+        use <code>twisted.web.proxy.Proxy</code> to make the simplest
+        proxy</li>
+        <li><a href="logging-proxy.py">logging-proxy.py</a> - example of
+        subclassing the core classes of <code>twisted.web.proxy</code>
+        to log requests through a proxy</li>
+        <li><a href="reverse-proxy.py">reverse-proxy.py</a> - use
+        <code>twisted.web.proxy.ReverseProxyResource</code> to make
+        any HTTP request to the proxy port get applied to a specified
+        website</li>
+        <li><a href="rootscript.py">rootscript.py</a> - example use of
+        <code>twisted.web.vhost.NameVirtualHost</code></li>
+        <li><a href="web.py">web.py</a> - an example of both using the
+        <code>processors</code> attribute to set how certain file types
+        are treated and using
+        <code>twisted.web.vhost.VHostMonsterResource</code> to reverse
+        proxy</li>
     </ul>
 
     <h2>.rpys and ResourceTemplate</h2>
     <ul>
         <li><a href="hello.rpy.py">hello.rpy.py</a> - use
-        <code>twisted.web.static</code> to create a static resource to 
-	serve</li>
+        <code>twisted.web.static</code> to create a static resource to
+        serve</li>
         <li><a href="fortune.rpy.py">fortune.rpy.py</a> - create a
         resource that returns the output of a process run on the
         server</li>
-	<li><a href="lj.rpy.py">lj.rpy.py</a> - use
-	<code>twisted.web.microdom</code>, 
-	<code>twisted.web.domhelpers</code>, and chained callbacks to 
-	extract and display parts of a livejournal user's rss page</li>
-        <li><a href="vhost.rpy.py">vhost.rpy.py</a> - make a
-        <code>twisted.web.vhost.VHostMonsterResource</code> resource
-	</li>
+        <li><a href="lj.rpy.py">lj.rpy.py</a> - use
+        <code>twisted.web.microdom</code>,
+        <code>twisted.web.domhelpers</code>, and chained callbacks to
+        extract and display parts of a livejournal user's rss page</li>
         <li><a href="report.rpy.py">report.rpy.py</a> - display
         various properties of a resource, including path, host, and
         port</li>
         <li><a href="users.rpy.py">users.rpy.py</a> - use
-        <code>twisted.web.distrib</code> to publish user directories 
-	as for a "community web site"</li>
+        <code>twisted.web.distrib</code> to publish user directories
+        as for a "community web site"</li>
         <li><a href="simple.rtl">simple.rtl</a> - example use of
         <code>twisted.web.resource.ResourceTemplate</code></li>
     </ul>
 
     <h2>Miscellaneous</h2>
     <ul>
-	<li><a href="webguard.py">webguard.py</a> - pairing
-	<code>twisted.web</code> with <code>twisted.cred</code> to 
-	guard resources against unauthenticated users</li>
+        <li><a href="webguard.py">webguard.py</a> - pairing
+        <code>twisted.web</code> with <code>twisted.cred</code> to
+        guard resources against unauthenticated users</li>
         <li><a href="silly-web.py">silly-web.py</a> - bare-bones
         distributed web setup with a master and slave using
-        <code>twisted.web.distrib</code> and 
-	<code>twisted.spread.pb</code></li>
-        <li><a href="google.py">google.py</a> - use 
-	<code>twisted.web.google</code> to get the I'm Feeling Lucky 
-	page for a search term</li>
-	<li><a href="soap.py">soap.py</a> - use 
-	<code>twisted.web.soap</code> to publish SOAP methods</li>
+        <code>twisted.web.distrib</code> and
+        <code>twisted.spread.pb</code></li>
+        <li><a href="google.py">google.py</a> - use
+        <code>twisted.web.google</code> to get the I'm Feeling Lucky
+        page for a search term</li>
+        <li><a href="soap.py">soap.py</a> - use
+        <code>twisted.web.soap</code> to publish SOAP methods</li>
     </ul>
 
 </body>
 </html>
-
Index: doc/web/examples/google.py
===================================================================
--- doc/web/examples/google.py	(revision 34488)
+++ doc/web/examples/google.py	(working copy)
@@ -1,16 +1,19 @@
 # Copyright (c) Twisted Matrix Laboratories
 # See LICENSE for details.
 
-# Run this example with:
-#   python google.py <keyword(s)>.
+"""
+This program will print out the URL corresponding to the first webpage given by
+a Google search.
 
-# This program will print out the URL corresponding 
-# to the first webpage given by a Google search.
+Usage:
+    $ python google.py <keyword(s)>
+"""
 
+import sys
+
 from twisted.web.google import checkGoogle
 from twisted.python.util import println
-from twisted.internet import reactor 
-import sys
+from twisted.internet import reactor
 
 checkGoogle(sys.argv[1:]).addCallbacks(
  lambda l:(println(l),reactor.stop()),
Index: doc/web/examples/hello.rpy.py
===================================================================
--- doc/web/examples/hello.rpy.py	(revision 34488)
+++ doc/web/examples/hello.rpy.py	(working copy)
@@ -1,8 +1,18 @@
-# This is a resource file, which generates some useful
-# information
-# To use it, rename it to "hello.rpy" and put it in the path of
-# any normally-configured Twisted web server.
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+This is a resource file that renders a static web page.
+
+To test the script, rename the file to hello.rpy, and move it to any directory,
+let's say /var/www/html/.
+
+Now, start your Twisted web server:
+    $ twistd -n web --path /var/www/html/
+
+And visit http://127.0.0.1:8080/hello.rpy with a web browser.
+"""
+
 from twisted.web import static
 import time
 
Index: doc/web/examples/getpage.py
===================================================================
--- doc/web/examples/getpage.py	(revision 34488)
+++ doc/web/examples/getpage.py	(working copy)
@@ -1,15 +1,18 @@
 # Copyright (c) Twisted Matrix Laboratories
 # See LICENSE for details.
 
-# Run this example with:
-#    python getpage.py <URL>
+"""
+This program will retrieve and print the resource at the given URL.
 
-# This program will retrieve and print the resource at the given URL.
+Usage:
+    $ python getpage.py <URL>
+"""
 
+import sys
+
 from twisted.internet import reactor
 from twisted.web.client import getPage
 from twisted.python.util import println
-import sys
 
 getPage(sys.argv[1]).addCallbacks(
     callback=lambda value:(println(value),reactor.stop()),
Index: doc/web/examples/vhost.rpy.py
===================================================================
--- doc/web/examples/vhost.rpy.py	(revision 34488)
+++ doc/web/examples/vhost.rpy.py	(working copy)
@@ -1,4 +0,0 @@
-from twisted.web import vhost
-
-resource = vhost.VHostMonsterResource()
-
Index: doc/web/examples/web.py
===================================================================
--- doc/web/examples/web.py	(revision 34488)
+++ doc/web/examples/web.py	(working copy)
@@ -1,13 +1,19 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+This demonstrates a web server which can run behind a name-based virtual hosting
+reverse proxy.  It decodes modified URLs like:
 
-# This web server makes it possible to put it behind a reverse proxy
-# transparently. Just have the reverse proxy proxy to 
-# host:port/vhost/http/external-host:port/
-# and on redirects and other link calculation, the external-host:port will
-# be transmitted to the client.
+    host:port/vhost/http/external-host:port/
 
+and dispatches the request as if it had been received on the given protocol,
+external host, and port.
+
+Usage:
+    python web.py
+"""
+
 from twisted.internet import reactor
 from twisted.web import static, server, vhost, twcgi, script
 
Index: doc/web/examples/lj.rpy.py
===================================================================
--- doc/web/examples/lj.rpy.py	(revision 34488)
+++ doc/web/examples/lj.rpy.py	(working copy)
@@ -1,21 +1,34 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-#
-# Syndicate LiveJournal users
-# Demonstrates how to use chained callbacks
-from __future__ import nested_scopes
+"""
+The example gets RSS feeds from LiveJournal users.  It demonstrates how to use
+chained Deferred callbacks.
 
+To test the script, rename the file to lj.rpy, and move it to any directory,
+let's say /var/www/html/.
+
+Now, start your Twisted web server:
+    $ twistd -n web --path /var/www/html/
+
+And visit a URL like http://127.0.0.1:8080/lj.rpy?user=foo with a web browser,
+replacing "foo" with a valid LiveJournal username.
+"""
+
 from twisted.web import resource as resourcelib
 from twisted.web import client, microdom, domhelpers, server
 
-urlTemplate = 'http://www.livejournal.com/users/%s/rss'
+urlTemplate = 'http://%s.livejournal.com/data/rss'
 
 class LJSyndicatingResource(resourcelib.Resource):
 
     def render_GET(self, request):
+        """
+        Get an xml feed from LiveJournal and construct a new HTML page using the
+        'title' and 'link' parsed from the xml document.
+        """
         url = urlTemplate % request.args['user'][0]
-        client.getPage(url).addCallback(
+        client.getPage(url, timeout=30).addCallback(
         microdom.parseString).addCallback(
         lambda t: domhelpers.findNodesNamed(t, 'item')).addCallback(
         lambda itms: zip([domhelpers.findNodesNamed(x, 'title')[0]
Index: doc/web/examples/httpclient.py
===================================================================
--- doc/web/examples/httpclient.py	(revision 34488)
+++ doc/web/examples/httpclient.py	(working copy)
@@ -2,6 +2,15 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+This example demonstrates how to make a simple http client.
+
+Usage:
+    httpclient.py <url>
+
+Don't forget the http:// when you type the web address!
+"""
+
 import sys
 from pprint import pprint
 
@@ -20,6 +29,9 @@
         self.onConnLost = Deferred()
 
     def dataReceived(self, data):
+        """
+        Print out the html page received.
+        """
         print 'Got some:', data
 
     def connectionLost(self, reason):
@@ -31,11 +43,17 @@
 
 
 def main(reactor, url):
+    """
+    We create a custom UserAgent and send a GET request to a web server.
+    """
     userAgent = 'Twisted/%s (httpclient.py)' % (version.short(),)
     agent = Agent(reactor)
     d = agent.request(
         'GET', url, Headers({'user-agent': [userAgent]}))
     def cbResponse(response):
+        """
+        Prints out the response returned by the web server.
+        """
         pprint(vars(response))
         proto = WriteToStdout()
         if response.length is not UNKNOWN_LENGTH:
Index: doc/web/examples/proxy.py
===================================================================
--- doc/web/examples/proxy.py	(revision 34488)
+++ doc/web/examples/proxy.py	(working copy)
@@ -1,19 +1,26 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# Run this example with:
-#    python proxy.py
-#
-# Then configure your web browser to use localhost:8080 as a proxy and
-# visit a URL. This proxy is proxying the connection to that URL's
-# host.
+"""
+This example demonstrates a very simple HTTP proxy.
 
+Usage:
+    $ python proxy.py
+
+Then configure your web browser to use localhost:8080 as a proxy, and visit a
+URL (This is not a SOCKS proxy). When browsing in this configuration, this
+example will proxy connections from the browser to the server indicated by URLs
+which are visited.
+
+See also logging-proxy.py for a proxy with additional features.
+"""
+
 from twisted.web import proxy, http
 from twisted.internet import reactor
 
 class ProxyFactory(http.HTTPFactory):
     def buildProtocol(self, addr):
         return proxy.Proxy()
- 
+
 reactor.listenTCP(8080, ProxyFactory())
 reactor.run()
Index: doc/web/examples/report.rpy.py
===================================================================
--- doc/web/examples/report.rpy.py	(revision 34488)
+++ doc/web/examples/report.rpy.py	(working copy)
@@ -1,3 +1,18 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example demostrates how to get host information from a request object.
+
+To test the script, rename the file to report.rpy, and move it to any directory,
+let's say /var/www/html/.
+
+Now, start your Twist web server:
+   $ twistd -n web --path /var/www/html/
+
+Then visit http://127.0.0.1:8080/report.rpy in your web browser.
+"""
+
 from twisted.web.resource import Resource
 
 
@@ -5,7 +20,8 @@
 
     def render_GET(self, request):
         path = request.path
-        _, host, port = request.getHost()
+        host = request.getHost().host
+        port = request.getHost().port
         url = request.prePathURL()
         uri = request.uri
         secure = (request.isSecure() and "securely") or "insecurely"
