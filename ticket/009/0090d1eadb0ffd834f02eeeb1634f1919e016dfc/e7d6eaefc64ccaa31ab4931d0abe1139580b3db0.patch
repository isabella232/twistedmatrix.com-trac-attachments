diff --git twisted/topfiles/7877.misc twisted/topfiles/7877.misc
new file mode 100644
index 0000000..e69de29
diff --git twisted/trial/_dist/test/test_distreporter.py twisted/trial/_dist/test/test_distreporter.py
index 75847bc..51ae389 100644
--- twisted/trial/_dist/test/test_distreporter.py
+++ twisted/trial/_dist/test/test_distreporter.py
@@ -13,7 +13,7 @@ from twisted.trial.reporter import TreeReporter
 
 
 
-class DistReporterTestCase(TestCase):
+class DistReporterTests(TestCase):
     """
     Tests for L{DistReporter}.
     """
diff --git twisted/trial/_dist/test/test_disttrial.py twisted/trial/_dist/test/test_disttrial.py
index 29bb8b7..5c4b760 100644
--- twisted/trial/_dist/test/test_disttrial.py
+++ twisted/trial/_dist/test/test_disttrial.py
@@ -81,7 +81,7 @@ class EternalTerminationPredicateFactory(object):
 
 
 
-class DistTrialRunnerTestCase(TestCase):
+class DistTrialRunnerTests(TestCase):
     """
     Tests for L{DistTrialRunner}.
     """
diff --git twisted/trial/_dist/test/test_options.py twisted/trial/_dist/test/test_options.py
index 3adb25b..652976d 100644
--- twisted/trial/_dist/test/test_options.py
+++ twisted/trial/_dist/test/test_options.py
@@ -12,7 +12,7 @@ from twisted.trial._dist.options import WorkerOptions
 
 
 
-class WorkerOptionsTestCase(TestCase):
+class WorkerOptionsTests(TestCase):
     """
     Tests for L{WorkerOptions}.
     """
diff --git twisted/trial/_dist/test/test_worker.py twisted/trial/_dist/test/test_worker.py
index 0d3d687..a33c312 100644
--- twisted/trial/_dist/test/test_worker.py
+++ twisted/trial/_dist/test/test_worker.py
@@ -35,7 +35,7 @@ class FakeAMP(AMP):
 
 
 
-class WorkerProtocolTestCase(TestCase):
+class WorkerProtocolTests(TestCase):
     """
     Tests for L{WorkerProtocol}.
     """
@@ -81,7 +81,7 @@ class WorkerProtocolTestCase(TestCase):
 
 
 
-class LocalWorkerAMPTestCase(TestCase):
+class LocalWorkerAMPTests(TestCase):
     """
     Test case for distributed trial's manager-side local worker AMP protocol
     """
@@ -306,7 +306,7 @@ class FakeTransport(object):
 
 
 
-class LocalWorkerTestCase(TestCase):
+class LocalWorkerTests(TestCase):
     """
     Tests for L{LocalWorker} and L{LocalWorkerTransport}.
     """
diff --git twisted/trial/_dist/test/test_workerreporter.py twisted/trial/_dist/test/test_workerreporter.py
index 293c403..161fe11 100644
--- twisted/trial/_dist/test/test_workerreporter.py
+++ twisted/trial/_dist/test/test_workerreporter.py
@@ -23,7 +23,7 @@ class FakeAMProtocol(object):
 
 
 
-class WorkerReporterTestCase(TestCase):
+class WorkerReporterTests(TestCase):
     """
     Tests for L{WorkerReporter}.
     """
diff --git twisted/trial/_dist/test/test_workertrial.py twisted/trial/_dist/test/test_workertrial.py
index 953b68e..b0059eb 100644
--- twisted/trial/_dist/test/test_workertrial.py
+++ twisted/trial/_dist/test/test_workertrial.py
@@ -27,7 +27,7 @@ class FakeAMP(AMP):
 
 
 
-class WorkerLogObserverTestCase(TestCase):
+class WorkerLogObserverTests(TestCase):
     """
     Tests for L{WorkerLogObserver}.
     """
@@ -50,7 +50,7 @@ class WorkerLogObserverTestCase(TestCase):
 
 
 
-class MainTestCase(TestCase):
+class MainTests(TestCase):
     """
     Tests for L{main}.
     """
@@ -154,7 +154,7 @@ class MainTestCase(TestCase):
 
 
 
-class SetupPathTestCase(TestCase):
+class SetupPathTests(TestCase):
     """
     Tests for L{_setupPath} C{sys.path} manipulation.
     """
diff --git twisted/trial/test/erroneous.py twisted/trial/test/erroneous.py
index 5fc9c6e..c074884 100644
--- twisted/trial/test/erroneous.py
+++ twisted/trial/test/erroneous.py
@@ -139,7 +139,7 @@ class DelayedCall(unittest.TestCase):
         What happens if an error is raised in a DelayedCall and an error is
         also raised in the test?
 
-        L{test_reporter.TestErrorReporting.testHiddenException} checks that
+        L{test_reporter.ErrorReportingTests.testHiddenException} checks that
         both errors get reported.
 
         Note that this behaviour is deprecated. A B{real} test would return a
diff --git twisted/trial/test/test_assertions.py twisted/trial/test/test_assertions.py
index 047c122..9398179 100644
--- twisted/trial/test/test_assertions.py
+++ twisted/trial/test/test_assertions.py
@@ -259,7 +259,7 @@ class AssertTrueTests(unittest.SynchronousTestCase):
 
 
 
-class TestSynchronousAssertions(unittest.SynchronousTestCase):
+class SynchronousAssertionsTests(unittest.SynchronousTestCase):
     """
     Tests for L{SynchronousTestCase}'s assertion methods.  That is, failUnless*,
     failIf*, assert* (not covered by other more specific test classes).
@@ -951,7 +951,7 @@ class WarningAssertionTests(unittest.SynchronousTestCase):
 
 
 
-class TestResultOfAssertions(unittest.SynchronousTestCase):
+class ResultOfAssertionsTests(unittest.SynchronousTestCase):
     """
     Tests for L{SynchronousTestCase.successResultOf},
     L{SynchronousTestCase.failureResultOf}, and
@@ -1161,7 +1161,7 @@ class TestResultOfAssertions(unittest.SynchronousTestCase):
 
 
 
-class TestAssertionNames(unittest.SynchronousTestCase):
+class AssertionNamesTests(unittest.SynchronousTestCase):
     """
     Tests for consistency of naming within TestCase assertion methods
     """
@@ -1209,7 +1209,7 @@ class TestAssertionNames(unittest.SynchronousTestCase):
                 self.assertEqual(value, getattr(self, name[:-1]))
 
 
-class TestCallDeprecated(unittest.SynchronousTestCase):
+class CallDeprecatedTests(unittest.SynchronousTestCase):
     """
     Test use of the L{SynchronousTestCase.callDeprecated} method with version objects.
     """
@@ -1311,7 +1311,7 @@ class TestCallDeprecated(unittest.SynchronousTestCase):
 
 
 
-@deprecated(TestCallDeprecated.version)
+@deprecated(CallDeprecatedTests.version)
 def oldMethod(x):
     """
     Deprecated method for testing.
@@ -1319,7 +1319,7 @@ def oldMethod(x):
     return x
 
 
-@deprecated(TestCallDeprecated.version, replacement="newMethod")
+@deprecated(CallDeprecatedTests.version, replacement="newMethod")
 def oldMethodReplaced(x):
     """
     Another deprecated method, which has been deprecated in favor of the
diff --git twisted/trial/test/test_asyncassertions.py twisted/trial/test/test_asyncassertions.py
index e9af9c7..d1a48d7 100644
--- twisted/trial/test/test_asyncassertions.py
+++ twisted/trial/test/test_asyncassertions.py
@@ -14,7 +14,7 @@ from twisted.internet import defer
 from twisted.trial import unittest
 
 
-class TestAsynchronousAssertions(unittest.TestCase):
+class AsynchronousAssertionsTests(unittest.TestCase):
     """
     Tests for L{TestCase}'s asynchronous extensions to L{SynchronousTestCase}.
     That is, assertFailure.
diff --git twisted/trial/test/test_deferred.py twisted/trial/test/test_deferred.py
index dc1b04a..a570f33 100644
--- twisted/trial/test/test_deferred.py
+++ twisted/trial/test/test_deferred.py
@@ -15,7 +15,7 @@ from twisted.trial import util
 from twisted.trial.test import detests
 
 
-class TestSetUp(unittest.TestCase):
+class SetUpTests(unittest.TestCase):
     def _loadSuite(self, klass):
         loader = pyunit.TestLoader()
         r = reporter.TestResult()
@@ -70,7 +70,7 @@ class TestSetUp(unittest.TestCase):
         self.failIf(detests.DeferredSetUpSkip.testCalled)
 
 
-class TestNeverFire(unittest.TestCase):
+class NeverFireTests(unittest.TestCase):
     def setUp(self):
         self._oldTimeout = util.DEFAULT_TIMEOUT_DURATION
         util.DEFAULT_TIMEOUT_DURATION = 0.1
@@ -106,7 +106,7 @@ class TestTester(unittest.TestCase):
         return result
 
 
-class TestDeferred(TestTester):
+class DeferredTests(TestTester):
     def getTest(self, name):
         return detests.DeferredTests(name)
 
@@ -173,7 +173,7 @@ class TestDeferred(TestTester):
 
 
 
-class TestTimeout(TestTester):
+class TimeoutTests(TestTester):
     def getTest(self, name):
         return detests.TimeoutTests(name)
 
diff --git twisted/trial/test/test_doctest.py twisted/trial/test/test_doctest.py
index 2472a3c..7e824be 100644
--- twisted/trial/test/test_doctest.py
+++ twisted/trial/test/test_doctest.py
@@ -9,7 +9,7 @@ from twisted.trial import itrial, runner, unittest, reporter
 from twisted.trial.test import mockdoctest
 
 
-class TestRunners(unittest.SynchronousTestCase):
+class RunnersTests(unittest.SynchronousTestCase):
     """
     Tests for Twisted's doctest support.
     """
diff --git twisted/trial/test/test_keyboard.py twisted/trial/test/test_keyboard.py
index ac428d7..76c894f 100644
--- twisted/trial/test/test_keyboard.py
+++ twisted/trial/test/test_keyboard.py
@@ -18,7 +18,7 @@ class TrialTest(unittest.SynchronousTestCase):
         self.loader = runner.TestLoader()
 
 
-class TestInterruptInTest(TrialTest):
+class InterruptInTestTests(TrialTest):
     class InterruptedTest(unittest.TestCase):
         def test_02_raiseInterrupt(self):
             raise KeyboardInterrupt
@@ -27,12 +27,12 @@ class TestInterruptInTest(TrialTest):
             pass
 
         def test_03_doNothing(self):
-            TestInterruptInTest.test_03_doNothing_run = True
+            InterruptInTestTests.test_03_doNothing_run = True
 
     def setUp(self):
-        super(TestInterruptInTest, self).setUp()
-        self.suite = self.loader.loadClass(TestInterruptInTest.InterruptedTest)
-        TestInterruptInTest.test_03_doNothing_run = None
+        super(InterruptInTestTests, self).setUp()
+        self.suite = self.loader.loadClass(InterruptInTestTests.InterruptedTest)
+        InterruptInTestTests.test_03_doNothing_run = None
 
     def test_setUpOK(self):
         self.assertEqual(3, self.suite.countTestCases())
@@ -43,34 +43,34 @@ class TestInterruptInTest(TrialTest):
         runner.TrialSuite([self.suite]).run(self.reporter)
         self.failUnless(self.reporter.shouldStop)
         self.assertEqual(2, self.reporter.testsRun)
-        self.failIf(TestInterruptInTest.test_03_doNothing_run,
+        self.failIf(InterruptInTestTests.test_03_doNothing_run,
                     "test_03_doNothing ran.")
 
 
-class TestInterruptInSetUp(TrialTest):
+class InterruptInSetUpTests(TrialTest):
     testsRun = 0
 
     class InterruptedTest(unittest.TestCase):
         def setUp(self):
-            if TestInterruptInSetUp.testsRun > 0:
+            if InterruptInSetUpTests.testsRun > 0:
                 raise KeyboardInterrupt
 
         def test_01(self):
-            TestInterruptInSetUp.testsRun += 1
+            InterruptInSetUpTests.testsRun += 1
 
         def test_02(self):
-            TestInterruptInSetUp.testsRun += 1
-            TestInterruptInSetUp.test_02_run = True
+            InterruptInSetUpTests.testsRun += 1
+            InterruptInSetUpTests.test_02_run = True
 
     def setUp(self):
-        super(TestInterruptInSetUp, self).setUp()
+        super(InterruptInSetUpTests, self).setUp()
         self.suite = self.loader.loadClass(
-            TestInterruptInSetUp.InterruptedTest)
-        TestInterruptInSetUp.test_02_run = False
-        TestInterruptInSetUp.testsRun = 0
+            InterruptInSetUpTests.InterruptedTest)
+        InterruptInSetUpTests.test_02_run = False
+        InterruptInSetUpTests.testsRun = 0
 
     def test_setUpOK(self):
-        self.assertEqual(0, TestInterruptInSetUp.testsRun)
+        self.assertEqual(0, InterruptInSetUpTests.testsRun)
         self.assertEqual(2, self.suite.countTestCases())
         self.assertEqual(0, self.reporter.testsRun)
         self.failIf(self.reporter.shouldStop)
@@ -79,34 +79,34 @@ class TestInterruptInSetUp(TrialTest):
         runner.TrialSuite([self.suite]).run(self.reporter)
         self.failUnless(self.reporter.shouldStop)
         self.assertEqual(2, self.reporter.testsRun)
-        self.failIf(TestInterruptInSetUp.test_02_run,
+        self.failIf(InterruptInSetUpTests.test_02_run,
                     "test_02 ran")
 
 
-class TestInterruptInTearDown(TrialTest):
+class InterruptInTearDownTests(TrialTest):
     testsRun = 0
 
     class InterruptedTest(unittest.TestCase):
         def tearDown(self):
-            if TestInterruptInTearDown.testsRun > 0:
+            if InterruptInTearDownTests.testsRun > 0:
                 raise KeyboardInterrupt
 
         def test_01(self):
-            TestInterruptInTearDown.testsRun += 1
+            InterruptInTearDownTests.testsRun += 1
 
         def test_02(self):
-            TestInterruptInTearDown.testsRun += 1
-            TestInterruptInTearDown.test_02_run = True
+            InterruptInTearDownTests.testsRun += 1
+            InterruptInTearDownTests.test_02_run = True
 
     def setUp(self):
-        super(TestInterruptInTearDown, self).setUp()
+        super(InterruptInTearDownTests, self).setUp()
         self.suite = self.loader.loadClass(
-            TestInterruptInTearDown.InterruptedTest)
-        TestInterruptInTearDown.testsRun = 0
-        TestInterruptInTearDown.test_02_run = False
+            InterruptInTearDownTests.InterruptedTest)
+        InterruptInTearDownTests.testsRun = 0
+        InterruptInTearDownTests.test_02_run = False
 
     def test_setUpOK(self):
-        self.assertEqual(0, TestInterruptInTearDown.testsRun)
+        self.assertEqual(0, InterruptInTearDownTests.testsRun)
         self.assertEqual(2, self.suite.countTestCases())
         self.assertEqual(0, self.reporter.testsRun)
         self.failIf(self.reporter.shouldStop)
@@ -115,5 +115,5 @@ class TestInterruptInTearDown(TrialTest):
         runner.TrialSuite([self.suite]).run(self.reporter)
         self.assertEqual(1, self.reporter.testsRun)
         self.failUnless(self.reporter.shouldStop)
-        self.failIf(TestInterruptInTearDown.test_02_run,
+        self.failIf(InterruptInTearDownTests.test_02_run,
                     "test_02 ran")
diff --git twisted/trial/test/test_loader.py twisted/trial/test/test_loader.py
index 18ed5b3..7dc80ab 100644
--- twisted/trial/test/test_loader.py
+++ twisted/trial/test/test_loader.py
@@ -32,7 +32,7 @@ def testNames(tests):
 
 
 
-class FinderTest(packages.PackageTest):
+class FinderTests(packages.PackageTest):
     """
     Tests for L{runner.TestLoader.findByName}.
     """
@@ -80,7 +80,7 @@ class FinderTest(packages.PackageTest):
 
 
 
-class FileTest(packages.SysPathManglingTest):
+class FileTests(packages.SysPathManglingTest):
     """
     Tests for L{runner.filenameToModule}.
     """
@@ -219,7 +219,7 @@ class FileTest(packages.SysPathManglingTest):
 
 
 
-class LoaderTest(packages.SysPathManglingTest):
+class LoaderTests(packages.SysPathManglingTest):
     """
     Tests for L{trial.TestLoader}.
     """
@@ -554,17 +554,17 @@ class LoaderTest(packages.SysPathManglingTest):
 
 
 
-class ZipLoadingTest(LoaderTest):
+class ZipLoadingTests(LoaderTests):
     def setUp(self):
         from twisted.python.test.test_zippath import zipit
-        LoaderTest.setUp(self)
+        LoaderTests.setUp(self)
         zipit(self.parent, self.parent+'.zip')
         self.parent += '.zip'
         self.mangleSysPath(self.oldPath+[self.parent])
 
 
 
-class PackageOrderingTest(packages.SysPathManglingTest):
+class PackageOrderingTests(packages.SysPathManglingTest):
 
     def setUp(self):
         self.loader = runner.TestLoader()
diff --git twisted/trial/test/test_log.py twisted/trial/test/test_log.py
index 0b1f060..9f3bded 100644
--- twisted/trial/test/test_log.py
+++ twisted/trial/test/test_log.py
@@ -62,7 +62,7 @@ class Mask(object):
 
 
 
-class TestObserver(unittest.SynchronousTestCase):
+class ObserverTests(unittest.SynchronousTestCase):
     """
     Tests for L{_synctest._LogObserver}, a helper for the implementation of
     L{SynchronousTestCase.flushLoggedErrors}.
diff --git twisted/trial/test/test_output.py twisted/trial/test/test_output.py
index 2f52610..4714353 100644
--- twisted/trial/test/test_output.py
+++ twisted/trial/test/test_output.py
@@ -26,7 +26,7 @@ def runTrial(*args):
     return output.getvalue()
 
 
-class TestImportErrors(packages.SysPathManglingTest):
+class ImportErrorsTests(packages.SysPathManglingTest):
     """Actually run trial as if on the command line and check that the output
     is what we expect.
     """
@@ -44,14 +44,14 @@ class TestImportErrors(packages.SysPathManglingTest):
 
     def assertIn(self, container, containee, *args, **kwargs):
         # redefined to be useful in callbacks
-        super(TestImportErrors, self).assertIn(
+        super(ImportErrorsTests, self).assertIn(
             containee, container, *args, **kwargs)
         return container
 
 
     def assertNotIn(self, container, containee, *args, **kwargs):
         # redefined to be useful in callbacks
-        super(TestImportErrors, self).assertNotIn(
+        super(ImportErrorsTests, self).assertNotIn(
             containee, container, *args, **kwargs)
         return container
 
diff --git twisted/trial/test/test_plugins.py twisted/trial/test/test_plugins.py
index 518df5f..f2e54c9 100644
--- twisted/trial/test/test_plugins.py
+++ twisted/trial/test/test_plugins.py
@@ -12,7 +12,7 @@ from twisted.trial import unittest
 from twisted.trial.itrial import IReporter
 
 
-class TestPlugins(unittest.SynchronousTestCase):
+class PluginsTests(unittest.SynchronousTestCase):
     """
     Tests for Trial's reporter plugins.
     """
diff --git twisted/trial/test/test_pyunitcompat.py twisted/trial/test/test_pyunitcompat.py
index 7e4cb6e..18911b2 100644
--- twisted/trial/test/test_pyunitcompat.py
+++ twisted/trial/test/test_pyunitcompat.py
@@ -16,7 +16,7 @@ from twisted.trial.itrial import IReporter, ITestCase
 import unittest as pyunit
 
 
-class TestPyUnitTestCase(SynchronousTestCase):
+class PyUnitTestTests(SynchronousTestCase):
 
     class PyUnitTest(pyunit.TestCase):
 
@@ -38,11 +38,11 @@ class TestPyUnitTestCase(SynchronousTestCase):
 
 # Remove this when we port twisted.trial._synctest to Python 3:
 if _PY3:
-    del TestPyUnitTestCase
+    del PyUnitTestTests
 
 
 
-class TestPyUnitResult(SynchronousTestCase):
+class PyUnitResultTests(SynchronousTestCase):
     """
     Tests to show that PyUnitResultAdapter wraps TestResult objects from the
     standard library 'unittest' module in such a way as to make them usable and
diff --git twisted/trial/test/test_reporter.py twisted/trial/test/test_reporter.py
index 1e82a02..b42beec 100644
--- twisted/trial/test/test_reporter.py
+++ twisted/trial/test/test_reporter.py
@@ -67,7 +67,7 @@ class StringTest(unittest.SynchronousTestCase):
                                 % (exp,))
 
 
-class TestTestResult(unittest.SynchronousTestCase):
+class TestResultTests(unittest.SynchronousTestCase):
     def setUp(self):
         self.result = reporter.TestResult()
 
@@ -92,13 +92,13 @@ class TestTestResult(unittest.SynchronousTestCase):
         self.assertEqual(self.failureException, failure.type)
 
 
-class TestReporterRealtime(TestTestResult):
+class ReporterRealtimeTests(TestResultTests):
     def setUp(self):
         output = StringIO.StringIO()
         self.result = reporter.Reporter(output, realtime=True)
 
 
-class TestErrorReporting(StringTest):
+class ErrorReportingTests(StringTest):
     doubleSeparator = re.compile(r'^=+$')
 
     def setUp(self):
@@ -214,7 +214,7 @@ class TestErrorReporting(StringTest):
 
 
 
-class TestUncleanWarningWrapperErrorReporting(TestErrorReporting):
+class UncleanWarningWrapperErrorReportingTests(ErrorReportingTests):
     """
     Tests that the L{UncleanWarningsReporterWrapper} can sufficiently proxy
     IReporter failure and error reporting methods to a L{reporter.Reporter}.
@@ -227,7 +227,7 @@ class TestUncleanWarningWrapperErrorReporting(TestErrorReporting):
 
 
 
-class TracebackHandling(unittest.SynchronousTestCase):
+class TracebackHandlingTests(unittest.SynchronousTestCase):
 
     def getErrorFrames(self, test):
         """
@@ -298,7 +298,7 @@ class TracebackHandling(unittest.SynchronousTestCase):
                          [('test_exception', 'twisted/trial/test/erroneous')])
 
 
-class FormatFailures(StringTest):
+class FormatFailuresTests(StringTest):
     def setUp(self):
         try:
             raise RuntimeError('foo')
@@ -343,7 +343,7 @@ exceptions.TypeError: iterable argument required
         self.assertEqual(self.f.frames, frames)
 
 
-class PyunitTestNames(unittest.SynchronousTestCase):
+class PyunitNamesTests(unittest.SynchronousTestCase):
     def setUp(self):
         self.stream = StringIO.StringIO()
         self.test = sample.PyunitTest('test_foo')
@@ -414,7 +414,7 @@ class PyunitTestNames(unittest.SynchronousTestCase):
 
 
 
-class TestDirtyReactor(unittest.SynchronousTestCase):
+class DirtyReactorTests(unittest.SynchronousTestCase):
     """
     The trial script has an option to treat L{DirtyReactorAggregateError}s as
     warnings, as a migration tool for test authors. It causes a wrapper to be
@@ -426,7 +426,7 @@ class TestDirtyReactor(unittest.SynchronousTestCase):
         self.dirtyError = Failure(
             util.DirtyReactorAggregateError(['foo'], ['bar']))
         self.output = StringIO.StringIO()
-        self.test = TestDirtyReactor('test_errorByDefault')
+        self.test = DirtyReactorTests('test_errorByDefault')
 
 
     def test_errorByDefault(self):
@@ -485,7 +485,7 @@ class TestDirtyReactor(unittest.SynchronousTestCase):
 
 
 
-class TrialTestNames(unittest.SynchronousTestCase):
+class TrialNamesTests(unittest.SynchronousTestCase):
 
     def setUp(self):
         self.stream = StringIO.StringIO()
@@ -516,7 +516,7 @@ class TrialTestNames(unittest.SynchronousTestCase):
         self.assertEqual(output, "test_foo")
 
 
-class TestSkip(unittest.SynchronousTestCase):
+class SkipTests(unittest.SynchronousTestCase):
     """
     Tests for L{reporter.Reporter}'s handling of skips.
     """
@@ -591,13 +591,13 @@ class TestSkip(unittest.SynchronousTestCase):
         self.assertEqual(output, str(e))
 
 
-class UncleanWarningSkipTest(TestSkip):
+class UncleanWarningSkipTests(SkipTests):
     """
     Tests for skips on a L{reporter.Reporter} wrapped by an
     L{UncleanWarningsReporterWrapper}.
     """
     def setUp(self):
-        TestSkip.setUp(self)
+        SkipTests.setUp(self)
         self.result = UncleanWarningsReporterWrapper(self.result)
 
     def _getSkips(self, result):
@@ -609,7 +609,7 @@ class UncleanWarningSkipTest(TestSkip):
 
 
 
-class TodoTest(unittest.SynchronousTestCase):
+class TodoTests(unittest.SynchronousTestCase):
     """
     Tests for L{reporter.Reporter}'s handling of todos.
     """
@@ -718,13 +718,13 @@ class TodoTest(unittest.SynchronousTestCase):
 
 
 
-class UncleanWarningTodoTest(TodoTest):
+class UncleanWarningTodoTests(TodoTests):
     """
     Tests for L{UncleanWarningsReporterWrapper}'s handling of todos.
     """
 
     def setUp(self):
-        TodoTest.setUp(self)
+        TodoTests.setUp(self)
         self.result = UncleanWarningsReporterWrapper(self.result)
 
 
@@ -747,7 +747,7 @@ class UncleanWarningTodoTest(TodoTest):
 
 class MockColorizer:
     """
-    Used by TestTreeReporter to make sure that output is colored correctly.
+    Used by TreeReporterTests to make sure that output is colored correctly.
     """
 
     def __init__(self, stream):
@@ -759,7 +759,7 @@ class MockColorizer:
 
 
 
-class TestTreeReporter(unittest.SynchronousTestCase):
+class TreeReporterTests(unittest.SynchronousTestCase):
     def setUp(self):
         self.test = sample.FooTest('test_foo')
         self.stream = StringIO.StringIO()
@@ -875,7 +875,7 @@ class TestTreeReporter(unittest.SynchronousTestCase):
 
 
 
-class TestReporterInterface(unittest.SynchronousTestCase):
+class ReporterInterfaceTests(unittest.SynchronousTestCase):
     """
     Tests for the bare interface of a trial reporter.
 
@@ -950,13 +950,13 @@ class TestReporterInterface(unittest.SynchronousTestCase):
 
 
 
-class TestReporter(TestReporterInterface):
+class ReporterTests(ReporterInterfaceTests):
     """
     Tests for the base L{reporter.Reporter} class.
     """
 
     def setUp(self):
-        TestReporterInterface.setUp(self)
+        ReporterInterfaceTests.setUp(self)
         self._timer = 0
         self.result._getTime = self._getTime
 
@@ -1065,7 +1065,7 @@ class TestReporter(TestReporterInterface):
 
 
 
-class TestSafeStream(unittest.SynchronousTestCase):
+class SafeStreamTests(unittest.SynchronousTestCase):
     def test_safe(self):
         """
         Test that L{reporter.SafeStream} successfully write to its original
@@ -1079,7 +1079,7 @@ class TestSafeStream(unittest.SynchronousTestCase):
 
 
 
-class TestSubunitReporter(TestReporterInterface):
+class SubunitReporterTests(ReporterInterfaceTests):
     """
     Tests for the subunit reporter.
 
@@ -1093,7 +1093,7 @@ class TestSubunitReporter(TestReporterInterface):
         if reporter.TestProtocolClient is None:
             raise SkipTest(
                 "Subunit not installed, cannot test SubunitReporter")
-        TestReporterInterface.setUp(self)
+        ReporterInterfaceTests.setUp(self)
 
 
     def assertForwardsToSubunit(self, methodName, *args, **kwargs):
@@ -1290,7 +1290,7 @@ class TestSubunitReporter(TestReporterInterface):
 
 
 
-class TestSubunitReporterNotInstalled(unittest.SynchronousTestCase):
+class SubunitReporterNotInstalledTests(unittest.SynchronousTestCase):
     """
     Test behaviour when the subunit reporter is not installed.
     """
@@ -1307,7 +1307,7 @@ class TestSubunitReporterNotInstalled(unittest.SynchronousTestCase):
 
 
 
-class TestTimingReporter(TestReporter):
+class TimingReporterTests(ReporterTests):
     resultFactory = reporter.TimingTextReporter
 
 
@@ -1344,7 +1344,7 @@ class LoggingReporter(reporter.Reporter):
 
 
 
-class TestAdaptedReporter(unittest.SynchronousTestCase):
+class AdaptedReporterTests(unittest.SynchronousTestCase):
     """
     L{reporter._AdaptedReporter} is a reporter wrapper that wraps all of the
     tests it receives before passing them on to the original reporter.
diff --git twisted/trial/test/test_runner.py twisted/trial/test/test_runner.py
index d639652..c579382 100644
--- twisted/trial/test/test_runner.py
+++ twisted/trial/test/test_runner.py
@@ -155,7 +155,7 @@ class TrialRunnerTestsMixin:
 
 
 
-class TestTrialRunner(TrialRunnerTestsMixin, unittest.SynchronousTestCase):
+class TrialRunnerTests(TrialRunnerTestsMixin, unittest.SynchronousTestCase):
     """
     Tests for L{runner.TrialRunner} with the feature to turn unclean errors
     into warnings disabled.
@@ -163,7 +163,7 @@ class TestTrialRunner(TrialRunnerTestsMixin, unittest.SynchronousTestCase):
     def setUp(self):
         self.stream = StringIO.StringIO()
         self.runner = runner.TrialRunner(CapturingReporter, stream=self.stream)
-        self.test = TestTrialRunner('test_empty')
+        self.test = TrialRunnerTests('test_empty')
 
 
     def test_publisher(self):
@@ -176,8 +176,8 @@ class TestTrialRunner(TrialRunnerTestsMixin, unittest.SynchronousTestCase):
 
 
 
-class TrialRunnerWithUncleanWarningsReporter(TrialRunnerTestsMixin,
-                                             unittest.SynchronousTestCase):
+class TrialRunnerWithUncleanWarningsReporterTests(TrialRunnerTestsMixin,
+                                                  unittest.SynchronousTestCase):
     """
     Tests for the TrialRunner's interaction with an unclean-error suppressing
     reporter.
@@ -187,7 +187,7 @@ class TrialRunnerWithUncleanWarningsReporter(TrialRunnerTestsMixin,
         self.stream = StringIO.StringIO()
         self.runner = runner.TrialRunner(CapturingReporter, stream=self.stream,
                                          uncleanWarnings=True)
-        self.test = TestTrialRunner('test_empty')
+        self.test = TrialRunnerTests('test_empty')
 
 
 
@@ -240,7 +240,7 @@ class DryRunMixin(object):
 
 
 
-class SynchronousDryRunTest(DryRunMixin, unittest.SynchronousTestCase):
+class SynchronousDryRunTests(DryRunMixin, unittest.SynchronousTestCase):
     """
     Check that 'dry run' mode works well with trial's L{SynchronousTestCase}.
     """
@@ -253,7 +253,7 @@ class SynchronousDryRunTest(DryRunMixin, unittest.SynchronousTestCase):
 
 
 
-class DryRunTest(DryRunMixin, unittest.SynchronousTestCase):
+class DryRunTests(DryRunMixin, unittest.SynchronousTestCase):
     """
     Check that 'dry run' mode works well with Trial tests.
     """
@@ -266,7 +266,7 @@ class DryRunTest(DryRunMixin, unittest.SynchronousTestCase):
 
 
 
-class PyUnitDryRunTest(DryRunMixin, unittest.SynchronousTestCase):
+class PyUnitDryRunTests(DryRunMixin, unittest.SynchronousTestCase):
     """
     Check that 'dry run' mode works well with stdlib unittest tests.
     """
@@ -279,7 +279,7 @@ class PyUnitDryRunTest(DryRunMixin, unittest.SynchronousTestCase):
 
 
 
-class TestRunner(unittest.SynchronousTestCase):
+class RunnerTests(unittest.SynchronousTestCase):
     def setUp(self):
         self.config = trial.Options()
         # whitebox hack a reporter in, because plugins are CACHED and will
@@ -361,7 +361,7 @@ class TestRunner(unittest.SynchronousTestCase):
         """
         By default Trial sets the 'uncleanWarnings' option on the runner to
         False. This means that dirty reactor errors will be reported as
-        errors. See L{test_reporter.TestDirtyReactor}.
+        errors. See L{test_reporter.DirtyReactorTests}.
         """
         self.parseOptions([])
         runner = self.getRunner()
@@ -373,7 +373,7 @@ class TestRunner(unittest.SynchronousTestCase):
         """
         Specifying '--unclean-warnings' on the trial command line will cause
         reporters to be wrapped in a device which converts unclean errors to
-        warnings.  See L{test_reporter.TestDirtyReactor} for implications.
+        warnings.  See L{test_reporter.DirtyReactorTests} for implications.
         """
         self.parseOptions(['--unclean-warnings'])
         runner = self.getRunner()
@@ -553,7 +553,7 @@ class TestRunner(unittest.SynchronousTestCase):
         self.parseOptions([
             '--reporter', 'capturing',
             '--debugger',
-            'twisted.trial.test.test_runner.TestRunner.cdebugger',
+            'twisted.trial.test.test_runner.RunnerTests.cdebugger',
             '--debug',
             'twisted.trial.test.sample',
         ])
@@ -575,7 +575,7 @@ class TestRunner(unittest.SynchronousTestCase):
 
 
 
-class TestTrialSuite(unittest.SynchronousTestCase):
+class TrialSuiteTests(unittest.SynchronousTestCase):
 
     def test_imports(self):
         # FIXME, HTF do you test the reactor can be cleaned up ?!!!
@@ -583,7 +583,7 @@ class TestTrialSuite(unittest.SynchronousTestCase):
 
 
 
-class TestUntilFailure(unittest.SynchronousTestCase):
+class UntilFailureTests(unittest.SynchronousTestCase):
     class FailAfter(pyunit.TestCase):
         """
         A test case that fails when run 3 times in a row.
@@ -596,8 +596,8 @@ class TestUntilFailure(unittest.SynchronousTestCase):
 
 
     def setUp(self):
-        TestUntilFailure.FailAfter.count = []
-        self.test = TestUntilFailure.FailAfter('test_foo')
+        UntilFailureTests.FailAfter.count = []
+        self.test = UntilFailureTests.FailAfter('test_foo')
         self.stream = StringIO.StringIO()
         self.runner = runner.TrialRunner(reporter.Reporter, stream=self.stream)
 
@@ -658,14 +658,14 @@ class TestUntilFailure(unittest.SynchronousTestCase):
 
 
 
-class UncleanUntilFailureTests(TestUntilFailure):
+class UncleanUntilFailureTests(UntilFailureTests):
     """
     Test that the run-until-failure feature works correctly with the unclean
     error suppressor.
     """
 
     def setUp(self):
-        TestUntilFailure.setUp(self)
+        UntilFailureTests.setUp(self)
         self.runner = runner.TrialRunner(reporter.Reporter, stream=self.stream,
                                          uncleanWarnings=True)
 
@@ -691,7 +691,7 @@ class BreakingSuite(runner.TestSuite):
 
 
 
-class TestLoggedErrors(unittest.SynchronousTestCase):
+class LoggedErrorsTests(unittest.SynchronousTestCase):
     """
     It is possible for an error generated by a test to be logged I{outside} of
     any test. The log observers constructed by L{TestCase} won't catch these
@@ -725,7 +725,7 @@ class TestLoggedErrors(unittest.SynchronousTestCase):
 
 
 
-class TestTestHolder(unittest.SynchronousTestCase):
+class TestHolderTests(unittest.SynchronousTestCase):
 
     def setUp(self):
         self.description = "description"
@@ -843,7 +843,7 @@ class ErrorHolderTestsMixin(object):
 
 
 
-class FailureHoldingErrorHolderTests(ErrorHolderTestsMixin, TestTestHolder):
+class FailureHoldingErrorHolderTests(ErrorHolderTestsMixin, TestHolderTests):
     """
     Tests for L{runner.ErrorHolder} behaving similarly to L{runner.TestHolder}
     when constructed with a L{Failure} representing its error.
@@ -860,7 +860,7 @@ class FailureHoldingErrorHolderTests(ErrorHolderTestsMixin, TestTestHolder):
 
 
 
-class ExcInfoHoldingErrorHolderTests(ErrorHolderTestsMixin, TestTestHolder):
+class ExcInfoHoldingErrorHolderTests(ErrorHolderTestsMixin, TestHolderTests):
     """
     Tests for L{runner.ErrorHolder} behaving similarly to L{runner.TestHolder}
     when constructed with a C{exc_info}-style tuple representing its error.
@@ -878,7 +878,7 @@ class ExcInfoHoldingErrorHolderTests(ErrorHolderTestsMixin, TestTestHolder):
 
 
 
-class TestMalformedMethod(unittest.SynchronousTestCase):
+class MalformedMethodTests(unittest.SynchronousTestCase):
     """
     Test that trial manages when test methods don't have correct signatures.
     """
@@ -898,7 +898,7 @@ class TestMalformedMethod(unittest.SynchronousTestCase):
         """
         stream = StringIO.StringIO()
         trialRunner = runner.TrialRunner(reporter.Reporter, stream=stream)
-        test = TestMalformedMethod.ContainMalformed(method)
+        test = MalformedMethodTests.ContainMalformed(method)
         result = trialRunner.run(test)
         self.assertEqual(result.testsRun, 1)
         self.failIf(result.wasSuccessful())
@@ -924,7 +924,7 @@ class TestMalformedMethod(unittest.SynchronousTestCase):
 
 
 
-class DestructiveTestSuiteTestCase(unittest.SynchronousTestCase):
+class DestructiveTestSuiteTests(unittest.SynchronousTestCase):
     """
     Test for L{runner.DestructiveTestSuite}.
     """
@@ -987,7 +987,7 @@ class DestructiveTestSuiteTestCase(unittest.SynchronousTestCase):
 
 
 
-class TestRunnerDeprecation(unittest.SynchronousTestCase):
+class RunnerDeprecationTests(unittest.SynchronousTestCase):
 
     class FakeReporter(reporter.Reporter):
         """
@@ -1033,7 +1033,7 @@ class TestRunnerDeprecation(unittest.SynchronousTestCase):
 
 
 
-class DryRunVisitorDeprecation(unittest.TestCase):
+class DryRunVisitorDeprecationTests(unittest.TestCase):
     """
     Test for L{DryRunVisitor}
     """
diff --git twisted/trial/test/test_script.py twisted/trial/test/test_script.py
index 425ad8c..47db2f4 100644
--- twisted/trial/test/test_script.py
+++ twisted/trial/test/test_script.py
@@ -30,7 +30,7 @@ def sibpath(filename):
 
 
 
-class ForceGarbageCollection(unittest.SynchronousTestCase):
+class ForceGarbageCollectionTests(unittest.SynchronousTestCase):
     """
     Tests for the --force-gc option.
     """
@@ -90,7 +90,7 @@ class ForceGarbageCollection(unittest.SynchronousTestCase):
 
 
 
-class TestSuiteUsed(unittest.SynchronousTestCase):
+class SuiteUsedTests(unittest.SynchronousTestCase):
     """
     Check the category of tests suite used by the loader.
     """
@@ -121,7 +121,7 @@ class TestSuiteUsed(unittest.SynchronousTestCase):
 
 
 
-class TestModuleTest(unittest.SynchronousTestCase):
+class TestModuleTests(unittest.SynchronousTestCase):
     def setUp(self):
         self.config = trial.Options()
 
@@ -450,7 +450,7 @@ class CoverageTests(unittest.SynchronousTestCase):
 
 
 
-class OptionsTestCase(unittest.TestCase):
+class OptionsTests(unittest.TestCase):
     """
     Tests for L{trial.Options}.
     """
@@ -551,7 +551,7 @@ class OptionsTestCase(unittest.TestCase):
 
 
 
-class MakeRunnerTestCase(unittest.TestCase):
+class MakeRunnerTests(unittest.TestCase):
     """
     Tests for the L{_makeRunner} helper.
     """
@@ -609,7 +609,7 @@ class MakeRunnerTestCase(unittest.TestCase):
         self.assertTrue(runner._exitFirst)
 
 
-class TestRun(unittest.TestCase):
+class RunTests(unittest.TestCase):
     """
     Tests for the L{run} function.
     """
diff --git twisted/trial/test/test_suppression.py twisted/trial/test/test_suppression.py
index 6999b64..c35ba62 100644
--- twisted/trial/test/test_suppression.py
+++ twisted/trial/test/test_suppression.py
@@ -152,7 +152,7 @@ class SuppressionMixin(object):
 
 
 
-class SynchronousSuppressionTest(SuppressionMixin, unittest.SynchronousTestCase):
+class SynchronousSuppressionTests(SuppressionMixin, unittest.SynchronousTestCase):
     """
     @see: L{twisted.trial.test.test_tests}
     """
diff --git twisted/trial/test/test_tests.py twisted/trial/test/test_tests.py
index 706d633..c83a53c 100644
--- twisted/trial/test/test_tests.py
+++ twisted/trial/test/test_tests.py
@@ -587,7 +587,7 @@ class AsynchronousStrictTodoTests(StrictTodoMixin, unittest.TestCase):
 
 
 
-class TestReactorCleanup(unittest.SynchronousTestCase):
+class ReactorCleanupTests(unittest.SynchronousTestCase):
     """
     Tests for cleanup and reporting of reactor event sources left behind by test
     methods.
@@ -666,7 +666,7 @@ class FixtureMixin(object):
 
 
 
-class SynchronousFixtureTest(FixtureMixin, unittest.SynchronousTestCase):
+class SynchronousFixtureTests(FixtureMixin, unittest.SynchronousTestCase):
     """
     Tests for broken fixture helper methods in the synchronous case
 
@@ -679,7 +679,7 @@ class SynchronousFixtureTest(FixtureMixin, unittest.SynchronousTestCase):
 
 
 
-class AsynchronousFixtureTest(FixtureMixin, unittest.TestCase):
+class AsynchronousFixtureTests(FixtureMixin, unittest.TestCase):
     """
     Tests for broken fixture helper methods in the asynchronous case
 
@@ -692,7 +692,7 @@ class AsynchronousFixtureTest(FixtureMixin, unittest.TestCase):
 
 
 
-class AsynchronousSuppressionTest(SuppressionMixin, unittest.TestCase):
+class AsynchronousSuppressionTests(SuppressionMixin, unittest.TestCase):
     """
     Tests for the warning suppression features of
     L{twisted.trial.unittest.TestCase}
@@ -766,7 +766,7 @@ class GCMixin:
         gc.collect = self._oldCollect
 
 
-class TestGarbageCollectionDefault(GCMixin, unittest.SynchronousTestCase):
+class GarbageCollectionDefaultTests(GCMixin, unittest.SynchronousTestCase):
     """
     By default, tests should not force garbage collection.
     """
@@ -782,7 +782,7 @@ class TestGarbageCollectionDefault(GCMixin, unittest.SynchronousTestCase):
 
 
 
-class TestGarbageCollection(GCMixin, unittest.SynchronousTestCase):
+class GarbageCollectionTests(GCMixin, unittest.SynchronousTestCase):
     """
     Test that, when force GC, it works.
     """
@@ -790,7 +790,7 @@ class TestGarbageCollection(GCMixin, unittest.SynchronousTestCase):
         """
         test gc.collect is called before and after each test.
         """
-        test = TestGarbageCollection.BasicTest('test_foo')
+        test = GarbageCollectionTests.BasicTest('test_foo')
         test = _ForceGarbageCollectionDecorator(test)
         result = reporter.TestResult()
         test.run(result)
@@ -799,7 +799,7 @@ class TestGarbageCollection(GCMixin, unittest.SynchronousTestCase):
             ['collect', 'setUp', 'test', 'tearDown', 'collect'])
 
 
-class TestUnhandledDeferred(unittest.SynchronousTestCase):
+class UnhandledDeferredTests(unittest.SynchronousTestCase):
     """
     Test what happens when we have an unhandled deferred left around after
     a test.
diff --git twisted/trial/test/test_util.py twisted/trial/test/test_util.py
index 88f580b..ae346ff 100644
--- twisted/trial/test/test_util.py
+++ twisted/trial/test/test_util.py
@@ -28,7 +28,7 @@ from twisted.trial.test import suppression
 
 
 
-class TestMktemp(SynchronousTestCase):
+class MktempTests(SynchronousTestCase):
     """
     Tests for L{TestCase.mktemp}, a helper function for creating temporary file
     or directory names.
@@ -41,7 +41,7 @@ class TestMktemp(SynchronousTestCase):
         name = self.mktemp()
         dirs = os.path.dirname(name).split(os.sep)[:-1]
         self.assertEqual(
-            dirs, ['twisted.trial.test.test_util', 'TestMktemp', 'test_name'])
+            dirs, ['twisted.trial.test.test_util', 'MktempTests', 'test_name'])
 
 
     def test_unique(self):
@@ -71,7 +71,7 @@ class TestMktemp(SynchronousTestCase):
 
 
 
-class TestIntrospection(SynchronousTestCase):
+class IntrospectionTests(SynchronousTestCase):
     def test_containers(self):
         """
         When passed a test case, L{util.getPythonContainers} returns a list
@@ -96,7 +96,7 @@ class TestIntrospection(SynchronousTestCase):
 
 
 
-class TestRunSequentially(SynchronousTestCase):
+class RunSequentiallyTests(SynchronousTestCase):
     """
     Sometimes it is useful to be able to run an arbitrary list of callables,
     one after the other.
@@ -225,7 +225,7 @@ class TestRunSequentially(SynchronousTestCase):
 
 
 
-class DirtyReactorAggregateErrorTest(SynchronousTestCase):
+class DirtyReactorAggregateErrorTests(SynchronousTestCase):
     """
     Tests for the L{DirtyReactorAggregateError}.
     """
@@ -684,7 +684,7 @@ class AcquireAttributeTests(SynchronousTestCase):
 
 
 
-class TestListToPhrase(SynchronousTestCase):
+class ListToPhraseTests(SynchronousTestCase):
     """
     Input is transformed into a string representation of the list,
     with each item separated by delimiter (defaulting to a comma) and the final
diff --git twisted/trial/test/weird.py twisted/trial/test/weird.py
index d7350e9..45dd673 100644
--- twisted/trial/test/weird.py
+++ twisted/trial/test/weird.py
@@ -4,7 +4,7 @@ import unittest
 
 from twisted.internet import defer
 
-# Used in test_tests.TestUnhandledDeferred
+# Used in test_tests.UnhandledDeferredTests
 
 class TestBleeding(unittest.TestCase):
     """This test creates an unhandled Deferred and leaves it in a cycle.
