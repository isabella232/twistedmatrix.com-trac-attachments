Index: doc/core/howto/listings/trial/calculus/test/test_client_2.py
===================================================================
--- doc/core/howto/listings/trial/calculus/test/test_client_2.py	(revision 31492)
+++ doc/core/howto/listings/trial/calculus/test/test_client_2.py	(working copy)
@@ -8,7 +8,7 @@
 
 class ClientCalculationTestCase(unittest.TestCase):
     def setUp(self):
-        self.tr = proto_helpers.StringTransportWithDisconnection()
+        self.tr = proto_helpers.StringTransport()
         self.clock = task.Clock()
         self.proto = RemoteCalculationClient()
         self.tr.protocol = self.proto
Index: doc/core/howto/listings/trial/calculus/test/test_client_3.py
===================================================================
--- doc/core/howto/listings/trial/calculus/test/test_client_3.py	(revision 31492)
+++ doc/core/howto/listings/trial/calculus/test/test_client_3.py	(working copy)
@@ -8,7 +8,7 @@
 
 class ClientCalculationTestCase(unittest.TestCase):
     def setUp(self):
-        self.tr = proto_helpers.StringTransportWithDisconnection()
+        self.tr = proto_helpers.StringTransport()
         self.clock = task.Clock()
         self.proto = RemoteCalculationClient()
         self.tr.protocol = self.proto
@@ -49,15 +49,10 @@
 
 
     def test_timeoutConnectionLost(self):
-        called = []
-        def lost(arg):
-            called.append(True)
-        self.proto.connectionLost = lost
-        
         d = self.proto.add(9, 4)
         self.assertEquals(self.tr.value(), 'add 9 4\r\n')
         self.clock.advance(self.proto.timeOut)
 
         def check(ignore):
-            self.assertEquals(called, [True])
+            self.assertTrue(self.tr.disconnecting)
         return self.assertFailure(d, ClientTimeoutError).addCallback(check)
Index: doc/core/howto/listings/trial/calculus/remote_2.py
===================================================================
--- doc/core/howto/listings/trial/calculus/remote_2.py	(revision 31492)
+++ doc/core/howto/listings/trial/calculus/remote_2.py	(working copy)
@@ -26,7 +26,7 @@
         try:
             result = op(a, b)
         except TypeError:
-            log.err()
+            log.err("error")
             self.sendLine("error")
         else:
             self.sendLine(str(result))
Index: doc/core/howto/trial.xhtml
===================================================================
--- doc/core/howto/trial.xhtml	(revision 31492)
+++ doc/core/howto/trial.xhtml	(working copy)
@@ -447,6 +447,15 @@
 
 <a href="listings/trial/calculus/test/test_client_1.py" class="py-listing">test_client_1.py</a>
 
+<div class="note">
+  <p>
+    The above test makes use of the <code class="python">proto_helpers</code>
+    module, located in <code class="python">trial.test</code>. The
+    <code class="python">proto_helpers</code> module is the <strong>only</strong>
+    public module in <code class="python">trial.test</code> and for this reason
+    may be moved in a later version.
+  </p>
+</div>
 <p>It's really symmetric to the server test cases. The only tricky part is
 that we don't use a client factory. We're lazy, and it's not very useful in
 the client part, so we instantiate the protocol directly.</p>
@@ -468,7 +477,11 @@
 
 <h3>Testing scheduling</h3>
 
-<p>When testing code that involves the passage of time, waiting e.g. for a two hour timeout to occur in a test is not very realistic. Twisted provides a solution to this, the <code class="API" base="twisted.internet.task">Clock</code> class that allows one to simulate the passage of time.</p>
+<p>When testing code that involves the passage of time, waiting e.g. for a two
+hour timeout to occur in a test is not very realistic. Twisted provides a
+solution to this, the <code class="API"
+base="twisted.internet.task">Clock</code> class that allows one to simulate the
+passage of time.</p>
 
 <p>As an example we'll test the code for client request timeout: since our client
 uses TCP it can hang for a long time (firewall, connectivity problems, etc...).
@@ -536,7 +549,7 @@
     return creator.connectTCP('127.0.0.1', self.port.getHost().port).addCallback(cb)
 </pre>
 
-<p>This remove the need of a tearDown method, and you don't have to check for
+<p>This removes the need for a tearDown method, and you don't have to check for
 the value of self.client: you only call addCleanup when the client is
 created.</p>
 
@@ -549,9 +562,9 @@
 So we'll want a test like this:</p>
 
 <pre class="python">
-    def test_invalidParameters(self):
-        self.proto.dataReceived('add foo bar\r\n')
-        self.assertEquals(self.tr.value(), "error\r\n")
+def test_invalidParameters(self):
+    self.proto.dataReceived('add foo bar\r\n')
+    self.assertEquals(self.tr.value(), "error\r\n")
 </pre>
 
 <a href="listings/trial/calculus/remote_2.py" class="py-listing">remote_2.py</a>
