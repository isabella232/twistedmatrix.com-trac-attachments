diff --git twisted/internet/_sslverify.py twisted/internet/_sslverify.py
index da0c772..dddfdbf 100644
--- twisted/internet/_sslverify.py
+++ twisted/internet/_sslverify.py
@@ -639,10 +639,21 @@ class CertificateRequest(CertBase):
         return Class(req)
     load = classmethod(load)
 
+    def loadPEM(Class, data):
+        """
+        Load a certificate-request from a PEM-format data string.
+
+        @rtpe: C{Class}
+        """
+        return Class.load(data, crypto.FILETYPE_PEM)
+    loadPEM = classmethod(loadPEM)
+
 
     def dump(self, format=crypto.FILETYPE_ASN1):
         return crypto.dump_certificate_request(format, self.original)
 
+    def dumpPEM(self):
+        return self.dump(format=crypto.FILETYPE_PEM)
 
 
 class PrivateCertificate(Certificate):
@@ -841,16 +852,49 @@ class PublicKey:
 
 
 class KeyPair(PublicKey):
+    """
+    An x509 private/public keypair.
 
+    This wraps an OpenSSL.crypto.PKey object.
+    """
     def load(Class, data, format=crypto.FILETYPE_ASN1):
+        """
+        Load a key from an ASN.1- or PEM-format string.
+
+        @rtype: C{Class}
+        """
         return Class(crypto.load_privatekey(format, data))
     load = classmethod(load)
 
 
+    def loadPEM(Class, data):
+        """
+        Load a ckey from a PEM-format string.
+
+        @rtype: C{Class}
+        """
+        return Class.load(data, format=crypto.FILETYPE_PEM)
+    loadPEM = classmethod(loadPEM)
+
+
     def dump(self, format=crypto.FILETYPE_ASN1):
+        """
+        Dump this key to an ASN.1- or PEM- format string.
+
+        @rtype: C{str}
+        """
         return crypto.dump_privatekey(format, self.original)
 
 
+    def dumpPEM(self):
+        """
+        Dump this key to a PEM-format string.
+
+        @rtype: C{str}
+        """
+        return self.dump(format=crypto.FILETYPE_PEM)
+
+
     def __getstate__(self):
         return self.dump()
 
@@ -860,6 +904,9 @@ class KeyPair(PublicKey):
 
 
     def inspect(self):
+        """
+        Return a human-readable descriptive string for this key.
+        """
         t = self.original.type()
         if t == crypto.TYPE_RSA:
             ts = 'RSA'
@@ -872,6 +919,16 @@ class KeyPair(PublicKey):
 
 
     def generate(Class, kind=crypto.TYPE_RSA, size=1024):
+        """
+        Generate a new RSA or DSA key of a particular size.
+
+        @param kind: C{crypto.TYPE_RSA} or C{crypto.TYPE_DSA}
+
+        @param size: bits in the key
+        @type size: C{int}
+
+        @rtype: C{Class}
+        """
         pkey = crypto.PKey()
         pkey.generate_key(kind, size)
         return Class(pkey)
diff --git twisted/test/test_sslverify.py twisted/test/test_sslverify.py
index 0fed93d..24fa626 100644
--- twisted/test/test_sslverify.py
+++ twisted/test/test_sslverify.py
@@ -27,7 +27,8 @@ except ImportError:
 else:
     from OpenSSL import SSL
     from OpenSSL.crypto import PKey, X509
-    from OpenSSL.crypto import TYPE_RSA, FILETYPE_PEM
+    from OpenSSL.crypto import TYPE_RSA, TYPE_DSA
+    from OpenSSL.crypto import FILETYPE_PEM, FILETYPE_ASN1
     if getattr(SSL.Context, "set_tlsext_servername_callback", None) is None:
         skipSNI = "PyOpenSSL 0.13 or greater required for SNI support."
 
@@ -537,6 +538,36 @@ class ClientOptionsTests(unittest.SynchronousTestCase):
         self.assertEqual(str(error), expectedText)
 
 
+class CertificateRequestTests(unittest.TestCase):
+    """
+    Tests serialization of CertificateRequests
+    """
+    if skipSSL:
+        skip = skipSSL
+
+    def setUp(self):
+        self.keypair = sslverify.KeyPair.generate()
+        dn = sslverify.DistinguishedName(commonName=b'test')
+        self.request = sslverify.CertificateRequest.load(
+            self.keypair.certificateRequest(dn),
+        )
+
+    def test_load(self):
+        asnData = self.request.dump()
+
+        testReq = sslverify.CertificateRequest.load(asnData)
+        testData = testReq.dump()
+
+        self.assertEqual(asnData, testData)
+
+    def test_loadPEM(self):
+        pemData = self.request.dumpPEM()
+
+        testReq = sslverify.CertificateRequest.loadPEM(pemData)
+        testData = testReq.dumpPEM()
+
+        self.assertEqual(pemData, testData)
+
 
 class OpenSSLOptionsTests(unittest.TestCase):
     if skipSSL:
@@ -2586,6 +2617,44 @@ class KeyPairTests(unittest.TestCase):
         self.sKey = makeCertificate(
             O=b"Server Test Certificate",
             CN=b"server")[0]
+        self.keyPem = OpenSSL.crypto.dump_privatekey(FILETYPE_PEM, self.sKey)
+        self.keyAsn = OpenSSL.crypto.dump_privatekey(FILETYPE_ASN1, self.sKey)
+
+
+    def test_inspectRSA(self):
+        keyPair = sslverify.KeyPair.generate(kind=TYPE_RSA, size=42)
+        self.assertTrue(
+            keyPair.inspect().startswith(
+                "42-bit RSA Key Pair with Hash:"
+            )
+        )
+
+
+    def test_inspectDSA(self):
+        # it seems that DSA enforces a 512-bit minimum despite what
+        # the docs say (it should throw an exception if size "isn't
+        # appropriate")
+        keyPair = sslverify.KeyPair.generate(kind=TYPE_DSA, size=512)
+        self.assertTrue(
+            keyPair.inspect().startswith(
+                "512-bit DSA Key Pair with Hash:"
+            ),
+            str(keyPair.inspect())
+        )
+
+
+    def test_dumpLoadAsn(self):
+        testKey = sslverify.KeyPair.load(self.keyAsn)
+        testData = testKey.dump()
+
+        self.assertEqual(self.keyAsn, testData)
+
+
+    def test_dumpLoadPem(self):
+        testKey = sslverify.KeyPair.loadPEM(self.keyPem)
+        testData = testKey.dumpPEM()
+
+        self.assertEqual(self.keyPem, testData)
 
 
     def test_getstateDeprecation(self):
