diff --git a/twisted/enterprise/adbapi.py b/twisted/enterprise/adbapi.py
index 40b4df4..ac1ab89 100644
--- a/twisted/enterprise/adbapi.py
+++ b/twisted/enterprise/adbapi.py
@@ -219,7 +219,36 @@ class ConnectionPool:
             self.running = True
 
     def runWithConnection(self, func, *args, **kw):
-        return threads.deferToThreadpool(self.threadpool,
+        """Execute a function with a database connection and return the result.
+
+        The 'func' argument is a callable object which will be
+        executed in a thread with a pooled connection. It will be
+        passed as its first argument a L{Connection} object (whose
+        interface is mostly identical to that of a connection object
+        for your DB-API module of choice), and its results will be
+        returned as a Deferred. If running the method raises an
+        exception, the transaction will be rolled back. If the
+        method returns a value, the transaction will be committed.
+
+        NOTE that the function you pass is *not* run in the main
+        thread: you may have to worry about thread-safety in the
+        function you pass to this if it tries to use non-local
+        objects.
+
+        @param func: a callable object whose first argument is an
+            L{adbapi.Connection}.
+
+        @param *args: positional arguments to be passed to func
+
+        @param **kw: keyword arguments to be passed to func
+
+        @return: a Deferred which will fire the return value of
+            'func(Transaction(...), *args, **kw)', or a Failure.
+        """
+
+        from twisted.internet import reactor
+
+        return threads.deferToThreadpool(reactor, self.threadpool,
                                          self._runWithConnection,
                                          func, *args, **kw)
 
@@ -250,15 +279,21 @@ class ConnectionPool:
         function you pass to this if it tries to use non-local
         objects.
 
-        @param interaction: a callable object whose first argument is
-            L{adbapi.Transaction}. *args,**kw will be passed as
-            additional arguments.
+        @param interaction: a callable object whose first argument
+            is an L{adbapi.Transaction}.
+
+        @param *args: additional positional arguments to be passed
+            to interaction
+
+        @param **kw: keyword arguments to be passed to interaction
 
         @return: a Deferred which will fire the return value of
-            'interaction(Transaction(...))', or a Failure.
+            'interaction(Transaction(...), *args, **kw)', or a Failure.
         """
 
-        return threads.deferToThreadpool(self.threadpool,
+        from twisted.internet import reactor
+
+        return threads.deferToThreadpool(reactor, self.threadpool,
                                          self._runInteraction,
                                          interaction, *args, **kw)
 
diff --git a/twisted/internet/interfaces.py b/twisted/internet/interfaces.py
index 7c79f6a..dbf24f0 100644
--- a/twisted/internet/interfaces.py
+++ b/twisted/internet/interfaces.py
@@ -551,8 +551,14 @@ class IReactorThreads(Interface):
     def getThreadpool():
         """
         Return a C{twisted.python.threadpool.ThreadPool}.
-        """
 
+        This method returns the threadpool used by the other
+        C{IReactorThreads} methods. If the reactor has started, the
+        returned threadpool will be started. Otherwise, the threadpool
+        will be started automatically after the reactor starts.
+
+        Subsequent calls to getThreadpool will return the same pool.
+        """
 
     def callInThread(callable, *args, **kwargs):
         """Run the callable object in a separate thread.
diff --git a/twisted/internet/threads.py b/twisted/internet/threads.py
index c806917..d2d6ed8 100644
--- a/twisted/internet/threads.py
+++ b/twisted/internet/threads.py
@@ -15,7 +15,7 @@ from twisted.python import failure
 from twisted.internet import defer
 
 
-def deferToThreadpool(threadpool, f, *args, **kwargs):
+def deferToThreadpool(reactor, threadpool, f, *args, **kwargs):
     """
     Call the function f using a thread from the given threadpool
     and return the result as a Deferred.
@@ -24,6 +24,9 @@ def deferToThreadpool(threadpool, f, *args, **kwargs):
     own threadpool. To run a function in the reactor's threadpool, use
     C{deferToThread}.
 
+    @param reactor: The reactor in whose main thread the Deferred will
+    be invoked.
+
     @param threadpool: An object which supports the C{callInThreadWithCallback}
     method of C{twisted.python.threadpool.ThreadPool}.
 
@@ -38,7 +41,6 @@ def deferToThreadpool(threadpool, f, *args, **kwargs):
     d = defer.Deferred()
 
     def onResult(success, result):
-        from twisted.internet import reactor
         if success:
             reactor.callFromThread(d.callback, result)
         else:
@@ -62,7 +64,8 @@ def deferToThread(f, *args, **kwargs):
     an exception.
     """
     from twisted.internet import reactor
-    return deferToThreadpool(reactor.getThreadpool(), f, *args, **kwargs)
+    return deferToThreadpool(reactor, reactor.getThreadpool(),
+                             f, *args, **kwargs)
 
 
 def _runMultiple(tupleList):
diff --git a/twisted/test/test_internet.py b/twisted/test/test_internet.py
index b877669..9c12f08 100644
--- a/twisted/test/test_internet.py
+++ b/twisted/test/test_internet.py
@@ -17,7 +17,7 @@ if ssl and not ssl.supported:
     ssl = None
 
 from twisted.internet.defer import Deferred, maybeDeferred
-from twisted.python import util, runtime
+from twisted.python import util, runtime, threadpool
 
 import os
 import sys
@@ -977,6 +977,35 @@ class CallFromThreadTests(unittest.TestCase):
         return d
 
 
+class GetThreadpoolTests(unittest.TestCase):
+    """
+    Test C{IReactorThreads.getThreadpool}.
+    """
+
+    def test_getThreadpool(self):
+        """Ensure that getThreadpool returns a threadpool."""
+        test = []
+        reactor.callWhenRunning(test.append, 1)
+        self.assertFalse(test) # reactor not running
+
+        tp = reactor.getThreadpool()
+        self.assertTrue(isinstance(tp, threadpool.ThreadPool))
+        self.assertFalse(tp.started)
+
+        def test_started(res):
+            self.assertTrue(test)
+            self.assertTrue(tp.started)
+
+        d = defer.Deferred()
+        d.addCallback(test_started)
+        reactor.callWhenRunning(d.callback, None)
+
+    def test_getThreadpoolTwice(self):
+        """Ensure that getThreadpool always returns the same threadpool."""
+        tp = reactor.getThreadpool()
+        self.assertNotEqual(tp, None)
+        self.assertTrue(tp is reactor.getThreadpool())
+
 
 class DummyReactor(base.ReactorBase):
     """
diff --git a/twisted/test/test_threadpool.py b/twisted/test/test_threadpool.py
index dfa9ecd..3505030 100644
--- a/twisted/test/test_threadpool.py
+++ b/twisted/test/test_threadpool.py
@@ -63,40 +63,39 @@ class ThreadPoolTestCase(unittest.TestCase):
         freed, with the thread maintaining a reference to them as long as it
         exists.
         """
-        try:
-            tp = threadpool.ThreadPool(0, 1)
-            tp.start()
-
-            # Sanity check - no threads should have been started yet.
-            self.assertEqual(tp.threads, [])
-
-            # Here's our function
-            def worker(arg):
-                pass
-            # weakref needs an object subclass
-            class Dumb(object):
-                pass
-            # And here's the unique object
-            unique = Dumb()
-
-            workerRef = weakref.ref(worker)
-            uniqueRef = weakref.ref(unique)
-
-            # Put some work in
-            tp.callInThread(worker, unique)
-
-            # Add an event to wait completion
-            event = threading.Event()
-            tp.callInThread(event.set)
-            event.wait(self.getTimeout())
-
-            del worker
-            del unique
-            gc.collect()
-            self.assertEquals(uniqueRef(), None)
-            self.assertEquals(workerRef(), None)
-        finally:
-            tp.stop()
+
+        tp = threadpool.ThreadPool(0, 1)
+        tp.start()
+        self.addCleanup(tp.stop)
+
+        # Sanity check - no threads should have been started yet.
+        self.assertEqual(tp.threads, [])
+
+        # Here's our function
+        def worker(arg):
+            pass
+        # weakref needs an object subclass
+        class Dumb(object):
+            pass
+        # And here's the unique object
+        unique = Dumb()
+
+        workerRef = weakref.ref(worker)
+        uniqueRef = weakref.ref(unique)
+
+        # Put some work in
+        tp.callInThread(worker, unique)
+
+        # Add an event to wait completion
+        event = threading.Event()
+        tp.callInThread(event.set)
+        event.wait(self.getTimeout())
+
+        del worker
+        del unique
+        gc.collect()
+        self.assertEquals(uniqueRef(), None)
+        self.assertEquals(workerRef(), None)
 
 
     def test_threadCreationArgumentsCallInThreadWithCallback(self):
@@ -104,71 +103,70 @@ class ThreadPoolTestCase(unittest.TestCase):
         As C{test_threadCreationArguments} above, but for
         callInThreadWithCallback.
         """
-        try:
-            tp = threadpool.ThreadPool(0, 1)
-            tp.start()
-
-            # Sanity check - no threads should have been started yet.
-            self.assertEqual(tp.threads, [])
 
-            # this holds references obtained in onResult
-            refdict = {} # name -> ref value
+        tp = threadpool.ThreadPool(0, 1)
+        tp.start()
+        self.addCleanup(tp.stop)
 
-            onResultWait = threading.Event()
-            onResultDone = threading.Event()
+        # Sanity check - no threads should have been started yet.
+        self.assertEqual(tp.threads, [])
 
-            resultRef = []
+        # this holds references obtained in onResult
+        refdict = {} # name -> ref value
 
-            # result callback
-            def onResult(success, result):
-                onResultWait.wait(self.getTimeout())
-                refdict['workerRef'] = workerRef()
-                refdict['uniqueRef'] = uniqueRef()
-                onResultDone.set()
-                resultRef.append(weakref.ref(result))
+        onResultWait = threading.Event()
+        onResultDone = threading.Event()
 
-            # Here's our function
-            def worker(arg, test):
-                return Dumb()
+        resultRef = []
 
-            # weakref needs an object subclass
-            class Dumb(object):
-                pass
+        # result callback
+        def onResult(success, result):
+            onResultWait.wait(self.getTimeout())
+            refdict['workerRef'] = workerRef()
+            refdict['uniqueRef'] = uniqueRef()
+            onResultDone.set()
+            resultRef.append(weakref.ref(result))
+
+        # Here's our function
+        def worker(arg, test):
+            return Dumb()
+
+        # weakref needs an object subclass
+        class Dumb(object):
+            pass
 
-            # And here's the unique object
-            unique = Dumb()
+        # And here's the unique object
+        unique = Dumb()
 
-            onResultRef = weakref.ref(onResult)
-            workerRef = weakref.ref(worker)
-            uniqueRef = weakref.ref(unique)
+        onResultRef = weakref.ref(onResult)
+        workerRef = weakref.ref(worker)
+        uniqueRef = weakref.ref(unique)
 
-            # Put some work in
-            tp.callInThreadWithCallback(onResult, worker, unique, test=unique)
+        # Put some work in
+        tp.callInThreadWithCallback(onResult, worker, unique, test=unique)
 
-            del worker
-            del unique
-            gc.collect()
+        del worker
+        del unique
+        gc.collect()
 
-            # let onResult collect the refs
-            onResultWait.set()
-            # wait for onResult
-            onResultDone.wait(self.getTimeout())
+        # let onResult collect the refs
+        onResultWait.set()
+        # wait for onResult
+        onResultDone.wait(self.getTimeout())
 
-            self.assertEquals(uniqueRef(), None)
-            self.assertEquals(workerRef(), None)
+        self.assertEquals(uniqueRef(), None)
+        self.assertEquals(workerRef(), None)
 
-            # wait for completion. avoid using the threadpool
-            # again, otherwise the test for the result garbage
-            # collection will not be valid (the result will be
-            # overwritten by the new callback).
-            self._waitForPool(tp)
+        # wait for completion. avoid using the threadpool
+        # again, otherwise the test for the result garbage
+        # collection will not be valid (the result will be
+        # overwritten by the new callback).
+        self._waitForPool(tp)
 
-            del onResult
-            gc.collect()
-            self.assertEqual(onResultRef(), None)
-            self.assertEqual(resultRef[0](), None)
-        finally:
-            tp.stop()
+        del onResult
+        gc.collect()
+        self.assertEqual(onResultRef(), None)
+        self.assertEqual(resultRef[0](), None)
 
 
     def test_persistence(self):
@@ -226,20 +224,19 @@ class ThreadPoolTestCase(unittest.TestCase):
 
         tp = threadpool.ThreadPool()
         tp.start()
-        try:
-            waiting = threading.Lock()
-            waiting.acquire()
-            actor = Synchronization(N, waiting)
+        self.addCleanup(tp.stop)
 
-            for i in xrange(N):
-                method(tp, actor)
+        waiting = threading.Lock()
+        waiting.acquire()
+        actor = Synchronization(N, waiting)
 
-            self._waitForLock(waiting)
+        for i in xrange(N):
+            method(tp, actor)
 
-            self.failIf(actor.failures, "run() re-entered %d times" %
-                                        (actor.failures,))
-        finally:
-            tp.stop()
+        self._waitForLock(waiting)
+
+        self.failIf(actor.failures, "run() re-entered %d times" %
+                                    (actor.failures,))
 
 
     def test_dispatch(self):
@@ -402,13 +399,12 @@ class ThreadPoolTestCase(unittest.TestCase):
         tp = threadpool.ThreadPool(0, 1)
         tp.callInThreadWithCallback(onResult, func)
         tp.start()
+        self.addCleanup(tp.stop)
 
         event.wait(self.getTimeout())
         self.assertEqual(len(threadIds), 2)
         self.assertEqual(threadIds[0], threadIds[1])
 
-        tp.stop()
-
 
     def test_callbackContext(self):
         """
@@ -435,6 +431,7 @@ class ThreadPoolTestCase(unittest.TestCase):
         tp = threadpool.ThreadPool(0, 1)
         tp.callInThreadWithCallback(onResult, func)
         tp.start()
+        self.addCleanup(tp.stop)
 
         event.wait(self.getTimeout())
 
@@ -442,8 +439,6 @@ class ThreadPoolTestCase(unittest.TestCase):
         self.assertEqual(myctx, contexts[0])
         self.assertEqual(myctx, contexts[1])
 
-        tp.stop()
-
 
     def _waitForPool(self, threadpool):
         for i in xrange(1000000):
@@ -479,15 +474,15 @@ class ThreadPoolTestCase(unittest.TestCase):
         """
         tp = threadpool.ThreadPool()
         tp.start()
+        self.addCleanup(tp.stop)
+        
         def cb():
             return tp.dispatch(None, lambda: None)
-        try:
-            self.assertWarns(DeprecationWarning,
-                "dispatch() is deprecated since Twisted 8.0, "
-                "use callInThread() instead",
-                __file__, cb)
-        finally:
-            tp.stop()
+
+        self.assertWarns(DeprecationWarning,
+                         "dispatch() is deprecated since Twisted 8.0, "
+                         "use callInThread() instead",
+                         __file__, cb)
 
 
     def test_dispatchWithCallbackDeprecation(self):
@@ -496,19 +491,19 @@ class ThreadPoolTestCase(unittest.TestCase):
         """
         tp = threadpool.ThreadPool()
         tp.start()
+        self.addCleanup(tp.stop)
+
         def cb():
             return tp.dispatchWithCallback(
                 None,
                 lambda x: None,
                 lambda x: None,
                 lambda: None)
-        try:
-            self.assertWarns(DeprecationWarning,
-                "dispatchWithCallback() is deprecated since Twisted 8.0, "
-                "use twisted.internet.threads.deferToThread() instead.",
-                __file__, cb)
-        finally:
-            tp.stop()
+
+        self.assertWarns(DeprecationWarning,
+                     "dispatchWithCallback() is deprecated since Twisted 8.0, "
+                     "use twisted.internet.threads.deferToThread() instead.",
+                     __file__, cb)
 
 
 
diff --git a/twisted/test/test_threads.py b/twisted/test/test_threads.py
index 063cf0e..5400fdb 100644
--- a/twisted/test/test_threads.py
+++ b/twisted/test/test_threads.py
@@ -247,8 +247,9 @@ class DeferredResultTestCase(unittest.TestCase):
 
     def test_deferredFailure(self):
         """
-        Check that L{threads.deferToThread} return a failure object when the
-        called function raises an exception.
+        Check that L{threads.deferToThread} return a failure object
+        with an appropriate exception instance when the called
+        function raises an exception.
         """
         class NewError(Exception):
             pass
@@ -281,7 +282,7 @@ class DeferredResultTestCase(unittest.TestCase):
 
 class DeferToThreadpoolTestCase(unittest.TestCase):
     """
-    Test L{twisted.internet.threads..deferToThreadpool}.
+    Test L{twisted.internet.threads.deferToThreadpool}.
     """
 
     def setUp(self):
@@ -294,17 +295,29 @@ class DeferToThreadpoolTestCase(unittest.TestCase):
 
 
     def testDeferredResult(self):
-        d = threads.deferToThreadpool(self.tp, lambda x, y=5: x + y, 3, y=4)
+        """
+        L{threads.deferToThreadpool} executes the function passed, and
+        correctly handles the positional and keyword arguments given.
+        """
+        from twisted.internet import reactor
+        d = threads.deferToThreadpool(reactor, self.tp,
+                                      lambda x, y=5: x + y, 3, y=4)
         d.addCallback(self.assertEquals, 7)
         return d
 
 
     def testDeferredFailure(self):
+        """
+        Check that L{threads.deferToThreadpool} return a failure
+        object with an appropriate exception instance when the called
+        function raises an exception.
+        """
         class NewError(Exception):
             pass
         def raiseError():
             raise NewError
-        d = threads.deferToThreadpool(self.tp, raiseError)
+        from twisted.internet import reactor
+        d = threads.deferToThreadpool(reactor, self.tp, raiseError)
         return self.assertFailure(d, NewError)
 
 
