Index: twisted/test/test_paths.py
===================================================================
--- twisted/test/test_paths.py	(revision 27240)
+++ twisted/test/test_paths.py	(working copy)
@@ -274,6 +274,8 @@
             zf.write(fspath, arcpath)
     zf.close()
 
+
+
 class ZipFilePathTestCase(AbstractFilePathTestCase):
 
     def setUp(self):
@@ -284,6 +286,46 @@
         self.all = [x.replace(self.cmn, self.cmn+'.zip') for x in self.all]
 
 
+    def test_zipPathRepr(self):
+        """
+        Make sure that invoking ZipPath's repr prints the correct method name
+        and an absolute path to the zip file.
+        """
+        child = self.path.child("foo")
+        # Check for an absolute path
+        self.assertEquals(
+            repr(child),
+            "ZipPath('%s/%s')" % (os.path.abspath(self.cmn + '.zip'), 'foo'))
+
+        # Create a path to the file rooted in the current working directory
+        relativeCommon = self.cmn.replace(os.getcwd() + "/", "", 1) + ".zip"
+        relpath = ZipArchive(relativeCommon)
+        child = relpath.child("foo")
+
+        # Check using a path without the cwd prepended
+        self.assertEquals(
+            repr(child),
+            "ZipPath('%s/%s')" % (os.path.abspath(self.cmn + '.zip'), 'foo'))
+
+
+    def test_zipArchiveRepr(self):
+        """
+        Make sure that invoking ZipArchive's repr prints the correct method name
+        and an absolute path to the zip file.
+        """
+        # Check for an absolute path
+        self.assertEquals(repr(self.path),
+                          'ZipArchive(%r)' % os.path.abspath(self.cmn + '.zip'))
+
+        # Create a path to the file rooted in the current working directory
+        relativeCommon = self.cmn.replace(os.getcwd() + "/", "", 1) + ".zip"
+        relpath = ZipArchive(relativeCommon)
+        # Check using a path without the cwd prepended
+        self.assertEquals(repr(relpath),
+                          'ZipArchive(%r)' % os.path.abspath(self.cmn + '.zip'))
+
+
+
 class FilePathTestCase(AbstractFilePathTestCase):
 
     def test_chmod(self):
