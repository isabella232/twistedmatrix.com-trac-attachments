diff -u ./_iocp.c ..\..\..\twisted\internet\iocpreactor/_iocp.c
--- ./_iocp.c	2005-11-23 12:17:38.000000000 -0800
+++ ..\..\..\twisted\internet\iocpreactor/_iocp.c	2006-05-14 05:47:23.125000000 -0700
@@ -86,7 +86,13 @@
 
     self = (iocpcore *)type->tp_alloc(type, 0);
     if(self != NULL) {
+#ifdef SPEW
+        printf("calling CreateIoCompletionPort(%d, 0x%p, %d, %d)\n", INVALID_HANDLE_VALUE, NULL, 0, 1);
+#endif
         self->iocp = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 1);
+#ifdef SPEW
+        printf("    ciocp returned %p, err ignored\n", self->iocp );
+#endif
         if(!self->iocp) {
             Py_DECREF(self);
             return PyErr_SetFromWindowsErr(0);
@@ -214,9 +220,9 @@
     g_incarg++;
     ov->callback = object;
     ov->callback_arg = object_arg;
-    CreateIoCompletionPort(handle, self->iocp, 0, 1);
+    CreateIoCompletionPort(handle, self->iocp, 0, 1); // sloppy!
 #ifdef SPEW
-    printf("calling WriteFile(%p, 0x%p, %d, 0x%p, 0x%p)\n", handle, buf, buflen, &bytes, ov);
+    printf("calling WriteFile(%d, 0x%p, %d, 0x%p, 0x%p)\n", handle, buf, buflen, &bytes, ov);
 #endif
     Py_BEGIN_ALLOW_THREADS;
     res = WriteFile(handle, buf, buflen, &bytes, (OVERLAPPED *)ov);
@@ -275,9 +281,9 @@
     g_incarg++;
     ov->callback = object;
     ov->callback_arg = object_arg;
-    CreateIoCompletionPort(handle, self->iocp, 0, 1);
+    CreateIoCompletionPort(handle, self->iocp, 0, 1); // sloppy!
 #ifdef SPEW
-    printf("calling ReadFile(%p, 0x%p, %d, 0x%p, 0x%p)\n", handle, buf, buflen, &bytes, ov);
+    printf("calling ReadFile(%d, 0x%p, %d, 0x%p, 0x%p)\n", handle, buf, buflen, &bytes, ov);
 #endif
     Py_BEGIN_ALLOW_THREADS;
     res = ReadFile(handle, buf, buflen, &bytes, (OVERLAPPED *)ov);
@@ -303,6 +309,136 @@
     return Py_BuildValue("ll", err, bytes);
 }
 
+static PyObject *iocpcore_WSASend(iocpcore* self, PyObject *args) {
+    HANDLE handle;
+    char *buf;
+    int buflen, res;
+    DWORD err, bytes;
+    DWORD flags = 0;
+    PyObject *object, *object_arg;
+    MyOVERLAPPED *ov;
+    WSABUF wbuf;
+//    LARGE_INTEGER time, time_after;
+//    QueryPerformanceCounter(&time);
+    if(!PyArg_ParseTuple(args, "lt#OO", &handle, &buf, &buflen, &object, &object_arg)) {
+        return NULL;
+    }
+    if(buflen <= 0) {
+        PyErr_SetString(PyExc_ValueError, "Invalid length specified");
+        return NULL;
+    }
+    if(!PyCallable_Check(object)) {
+        PyErr_SetString(PyExc_TypeError, "Callback must be callable");
+        return NULL;
+    }
+    ov = PyMem_Malloc(sizeof(MyOVERLAPPED));
+    g_imallocs++;
+    if(!ov) {
+        PyErr_NoMemory();
+        return NULL;
+    }
+    memset(ov, 0, sizeof(MyOVERLAPPED));
+    Py_INCREF(object);
+    g_incobj++;
+    Py_INCREF(object_arg);
+    g_incarg++;
+    ov->callback = object;
+    ov->callback_arg = object_arg;
+    wbuf.buf = buf;
+    wbuf.len = buflen;
+    CreateIoCompletionPort(handle, self->iocp, 0, 1); // sloppy!
+#ifdef SPEW
+    printf("calling WSASend(%d, 0x%p, %d, 0x%p, %d, 0x%p, 0x%p)\n", handle, &wbuf, 1, &bytes, flags, (OVERLAPPED *)ov, NULL);
+#endif
+    Py_BEGIN_ALLOW_THREADS;
+    res = WSASend((SOCKET)handle, &wbuf, 1, &bytes, flags, (OVERLAPPED *)ov, NULL);
+    Py_END_ALLOW_THREADS;
+    err = WSAGetLastError();
+#ifdef SPEW
+    printf("    ws returned %d, err %ld\n", res, err);
+#endif
+    if(res == SOCKET_ERROR && err != WSA_IO_PENDING) {
+        Py_DECREF(object);
+        g_decobj++;
+        Py_DECREF(object_arg);
+        g_decarg++;
+        PyMem_Free(ov);
+        g_ifrees++;
+        return PyErr_SetFromWindowsErr(err);
+    }
+    if(!res) {
+        err = 0;
+    }
+//    QueryPerformanceCounter(&time_after);
+//    printf("ws total ticks is %ld", time_after.LowPart - time.LowPart);
+    return Py_BuildValue("ll", err, bytes);
+}
+
+static PyObject *iocpcore_WSARecv(iocpcore* self, PyObject *args) {
+    HANDLE handle;
+    char *buf;
+    int buflen, res;
+    DWORD err, bytes;
+    DWORD flags = 0;
+    PyObject *object, *object_arg;
+    MyOVERLAPPED *ov;
+    WSABUF wbuf;
+//    LARGE_INTEGER time, time_after;
+//    QueryPerformanceCounter(&time);
+    if(!PyArg_ParseTuple(args, "lw#OO", &handle, &buf, &buflen, &object, &object_arg)) {
+        return NULL;
+    }
+    if(buflen <= 0) {
+        PyErr_SetString(PyExc_ValueError, "Invalid length specified");
+        return NULL;
+    }
+    if(!PyCallable_Check(object)) {
+        PyErr_SetString(PyExc_TypeError, "Callback must be callable");
+        return NULL;
+    }
+    ov = PyMem_Malloc(sizeof(MyOVERLAPPED));
+    g_imallocs++;
+    if(!ov) {
+        PyErr_NoMemory();
+        return NULL;
+    }
+    memset(ov, 0, sizeof(MyOVERLAPPED));
+    Py_INCREF(object);
+    g_incobj++;
+    Py_INCREF(object_arg);
+    g_incarg++;
+    ov->callback = object;
+    ov->callback_arg = object_arg;
+    wbuf.buf = buf;
+    wbuf.len = buflen;
+    CreateIoCompletionPort(handle, self->iocp, 0, 1); // sloppy!
+#ifdef SPEW
+    printf("calling WSARecv(%d, 0x%p, %d, 0x%p, 0x%p, 0x%p, 0x%p)\n", handle, &wbuf, 1, &bytes, &flags, (OVERLAPPED *)ov, NULL);
+#endif
+    Py_BEGIN_ALLOW_THREADS;
+    res = WSARecv((SOCKET)handle, &wbuf, 1, &bytes, &flags, (OVERLAPPED *)ov, NULL);
+    Py_END_ALLOW_THREADS;
+    err = WSAGetLastError();
+#ifdef SPEW
+    printf("    wr returned %d, err %ld\n", res, err);
+#endif
+    if(res == SOCKET_ERROR && err != WSA_IO_PENDING) {
+        Py_DECREF(object);
+        g_decobj++;
+        Py_DECREF(object_arg);
+        g_decarg++;
+        PyMem_Free(ov);
+        g_ifrees++;
+        return PyErr_SetFromWindowsErr(err);
+    }
+    if(!res) {
+        err = 0;
+    }
+//    QueryPerformanceCounter(&time_after);
+//    printf("wr total ticks is %ld", time_after.LowPart - time.LowPart);
+    return Py_BuildValue("ll", err, bytes);
+}
+
 // yay, rape'n'paste of getsockaddrarg from socketmodule.c. "I couldn't understand what it does, so I removed it!"
 static int makesockaddr(int sock_family, PyObject *args, struct sockaddr **addr_ret, int *len_ret)
 {
@@ -385,18 +521,18 @@
     ov->callback_arg = object_arg;
     wbuf.len = buflen;
     wbuf.buf = buf;
-    CreateIoCompletionPort(handle, self->iocp, 0, 1);
+    CreateIoCompletionPort(handle, self->iocp, 0, 1); // sloppy!
 #ifdef SPEW
     printf("calling WSASendTo(%d, 0x%p, %d, 0x%p, %ld, 0x%p, %d, 0x%p, 0x%p)\n", handle, &wbuf, 1, &bytes, flags, addr, addrlen, ov, NULL);
 #endif
     Py_BEGIN_ALLOW_THREADS;
     res = WSASendTo((SOCKET)handle, &wbuf, 1, &bytes, flags, addr, addrlen, (OVERLAPPED *)ov, NULL);
     Py_END_ALLOW_THREADS;
-    err = GetLastError();
+    err = WSAGetLastError();
 #ifdef SPEW
     printf("    wst returned %d, err %ld\n", res, err);
 #endif
-    if(res == SOCKET_ERROR && err != ERROR_IO_PENDING) {
+    if(res == SOCKET_ERROR && err != WSA_IO_PENDING) {
         Py_DECREF(object);
         g_decobj++;
         Py_DECREF(object_arg);
@@ -455,18 +591,18 @@
     wbuf.len = buflen;
     wbuf.buf = buf;
     ab->size = ablen;
-    CreateIoCompletionPort(handle, self->iocp, 0, 1);
+    CreateIoCompletionPort(handle, self->iocp, 0, 1); // sloppy!
 #ifdef SPEW
     printf("calling WSARecvFrom(%d, 0x%p, %d, 0x%p, 0x%p, 0x%p, 0x%p, 0x%p, 0x%p)\n", handle, &wbuf, 1, &bytes, &flags, (struct sockaddr *)ab->buffer, &ab->size, ov, NULL);
 #endif
     Py_BEGIN_ALLOW_THREADS;
     res = WSARecvFrom((SOCKET)handle, &wbuf, 1, &bytes, &flags, (struct sockaddr *)ab->buffer, &ab->size, (OVERLAPPED *)ov, NULL);
     Py_END_ALLOW_THREADS;
-    err = GetLastError();
+    err = WSAGetLastError();
 #ifdef SPEW
     printf("    wrf returned %d, err %ld\n", res, err);
 #endif
-    if(res == SOCKET_ERROR && err != ERROR_IO_PENDING) {
+    if(res == SOCKET_ERROR && err != WSA_IO_PENDING) {
         Py_DECREF(object);
         g_decobj++;
         Py_DECREF(object_arg);
@@ -569,7 +705,7 @@
     g_incarg++;
     ov->callback = object;
     ov->callback_arg = object_arg;
-    CreateIoCompletionPort((HANDLE)handle, self->iocp, 0, 1);
+    CreateIoCompletionPort((HANDLE)handle, self->iocp, 0, 1); // sloppy!
 #ifdef SPEW
     printf("calling AcceptEx(%d, %d, 0x%p, %d, %d, %d, 0x%p, 0x%p)\n", handle, acc_sock, buf, 0, buflen/2, buflen/2, &bytes, ov);
 #endif
@@ -625,7 +761,7 @@
     g_incarg++;
     ov->callback = object;
     ov->callback_arg = object_arg;
-    CreateIoCompletionPort((HANDLE)handle, self->iocp, 0, 1);
+    CreateIoCompletionPort((HANDLE)handle, self->iocp, 0, 1); // sloppy!
 #ifdef SPEW
     printf("calling ConnectEx(%d, 0x%p, %d, 0x%p)\n", handle, addr, addrlen, ov);
 #endif
@@ -727,6 +863,10 @@
      "Issue an overlapped WriteFile operation"},
     {"issueReadFile", (PyCFunction)iocpcore_ReadFile, METH_VARARGS,
      "Issue an overlapped ReadFile operation"},
+    {"issueWSASend", (PyCFunction)iocpcore_WSASend, METH_VARARGS,
+     "Issue an overlapped WSASend operation"},
+    {"issueWSARecv", (PyCFunction)iocpcore_WSARecv, METH_VARARGS,
+     "Issue an overlapped WSARecv operation"},
     {"issueWSASendTo", (PyCFunction)iocpcore_WSASendTo, METH_VARARGS,
      "Issue an overlapped WSASendTo operation"},
     {"issueWSARecvFrom", (PyCFunction)iocpcore_WSARecvFrom, METH_VARARGS,
Files ./_iocp.pyd and ..\..\..\twisted\internet\iocpreactor/_iocp.pyd differ
diff -u ./abstract.py ..\..\..\twisted\internet\iocpreactor/abstract.py
--- ./abstract.py	2005-11-10 12:55:56.000000000 -0800
+++ ..\..\..\twisted\internet\iocpreactor/abstract.py	2006-05-14 05:41:11.765625000 -0700
@@ -9,7 +9,7 @@
 from twisted.persisted import styles
 from twisted.python import log, failure
 
-from ops import ReadFileOp, WriteFileOp
+from ops import WSARecvOp, WSASendOp
 from util import StateEventMachineType
 from zope.interface import implements
 
@@ -40,8 +40,8 @@
         self.offset = 0
         self.writeBufferedSize = 0
         self.producerBuffer = []
-        self.read_op = ReadFileOp(self)
-        self.write_op = WriteFileOp(self) # XXX: these two should be specified like before, with a class field
+        self.read_op = WSARecvOp(self)
+        self.write_op = WSASendOp(self) # XXX: these two should be specified like before, with a class field
 
     def addBufferCallback(self, handler, event):
         self.bufferEvents[event].add(handler)
Only in ..\..\..\twisted\internet\iocpreactor: bak
Only in .: foo
Only in .: iocp_wsa.diff
diff -u ./ops.py ..\..\..\twisted\internet\iocpreactor/ops.py
--- ./ops.py	2005-11-09 11:00:40.000000000 -0800
+++ ..\..\..\twisted\internet\iocpreactor/ops.py	2006-05-14 05:40:16.765625000 -0700
@@ -33,6 +33,28 @@
     def initiateOp(self):
         raise NotImplementedError
 
+class WSARecvOp(OverlappedOp):
+    def ovDone(self, ret, bytes, (handle, buffer)):
+        if ret or not bytes:
+            self.transport.readErr(ret, bytes)
+        else:
+            self.transport.readDone(bytes)
+
+    def initiateOp(self, handle, buffer):
+        self.reactor.issueWSARecv(handle, buffer, self.ovDone, (handle, buffer))
+
+class WSASendOp(OverlappedOp):
+    def ovDone(self, ret, bytes, (handle, buffer)):
+#        log.msg("WSASendOp.ovDone", time.time())
+        if ret or not bytes:
+            self.transport.writeErr(ret, bytes)
+        else:
+            self.transport.writeDone(bytes)
+
+    def initiateOp(self, handle, buffer):
+#        log.msg("WSASendOp.initiateOp", time.time())
+        self.reactor.issueWSASend(handle, buffer, self.ovDone, (handle, buffer))
+
 class ReadFileOp(OverlappedOp):
     def ovDone(self, ret, bytes, (handle, buffer)):
         if ret or not bytes:
