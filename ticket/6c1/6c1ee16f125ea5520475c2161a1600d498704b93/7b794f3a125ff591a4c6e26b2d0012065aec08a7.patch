Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 23189)
+++ twisted/python/filepath.py	(working copy)
@@ -16,7 +16,7 @@
 from os.path import basename, dirname
 from os.path import join as joinpath
 from os import sep as slash
-from os import listdir, utime, stat
+from os import listdir, utime, stat, lstat
 
 from stat import S_ISREG, S_ISDIR
 
@@ -279,16 +279,20 @@
     later.
 
     @type alwaysCreate: C{bool}
-    @ivar alwaysCreate: When opening this file, only succeed if the file does not
-    already exist.
+    @ivar alwaysCreate: When opening this file, only succeed if the file 
+    does not already exist.
+    @type statAsLink: C{bool}
+    @ivar statAsLink: When getting statistics on this file, if it is a link,
+    stat it as a link rather than as the target.
     """
 
     statinfo = None
     path = None
 
-    def __init__(self, path, alwaysCreate=False):
+    def __init__(self, path, alwaysCreate=False, statAsLink=False):
         self.path = abspath(path)
         self.alwaysCreate = alwaysCreate
+        self.statAsLink = statAsLink
 
     def __getstate__(self):
         d = self.__dict__.copy()
@@ -385,17 +389,33 @@
 
     # stat methods below
 
+    def asLink(self):
+        """
+        Returns a FilePath that refers to the same path as self, but will stat
+        as a link rather than as a file if it's a link.
+
+        Stat-ting the result will still work fine if self is not a link.
+
+        @return: a C{FilePath}
+        """
+        return self.clonePath(self.path, statAsLink=True)
+
     def restat(self, reraise=True):
         """
-        Re-calculate cached effects of 'stat'.  To refresh information on this path
-        after you know the filesystem may have changed, call this method.
+        Re-calculate cached effects of 'stat'.  To refresh information on 
+        this path after you know the filesystem may have changed, call 
+        this method.  By default, it stats everything as a file or directory,
+        unless C{asLink} is called first.
 
         @param reraise: a boolean.  If true, re-raise exceptions from
         L{os.stat}; otherwise, mark this path as not existing, and remove any
         cached stat information.
         """
         try:
-            self.statinfo = stat(self.path)
+            if self.statAsLink:
+                self.statinfo = lstat(self.path)
+            else:
+                self.statinfo = stat(self.path)
         except OSError:
             self.statinfo = 0
             if reraise:
Index: twisted/test/test_paths.py
===================================================================
--- twisted/test/test_paths.py	(revision 23189)
+++ twisted/test/test_paths.py	(working copy)
@@ -5,7 +5,7 @@
 Test cases covering L{twisted.python.filepath} and L{twisted.python.zippath}.
 """
 
-import os, time, pickle, errno, zipfile
+import os, time, pickle, errno, zipfile, stat
 
 from twisted.python.win32 import WindowsError, ERROR_DIRECTORY
 from twisted.python import filepath
@@ -336,6 +336,45 @@
         fp.preauthChild('foo/bar')
         self.assertRaises(filepath.InsecurePath, fp.child, '/foo')
 
+    def test_asLink(self):
+        """
+        Verify that asLink sets the statAsLink flag
+        """
+        link = self.path.child("link")
+        self.assertEquals(link.statAsLink, False)
+        link = link.asLink()
+        self.assertEquals(link.statAsLink, True)
+
+    def test_restatLinkAsLink(self):
+        """
+        Verify that restat stats a link as a link when the statAsLink flag
+        has been set.
+        """
+        link = self.path.child("link")
+        file = self.path.child("file1")
+        file.linkTo(link)
+        file.restat()
+        link.restat()
+        self.assertEquals(link.statinfo, file.statinfo)
+        link = link.asLink()
+        link.restat()
+        self.assertNotEquals(link.statinfo, file.statinfo)
+
+    if getattr(os, "symlink", None) is None:
+        test_restatLinkAsLink.skip = "Symlinks not supported"
+        
+    def test_restatFileAsLink(self):
+        """
+        Verify that restat stats a file correctly when the statAsLink flag
+        has been set.
+        """
+        file = self.path.child("file1")
+        file.restat()
+        oldStatInfo = file.statinfo
+        file = file.asLink()
+        file.restat()
+        self.assertEquals(file.statinfo, oldStatInfo)
+
     def testStatCache(self):
         p = self.path.child('stattest')
         p.touch()
