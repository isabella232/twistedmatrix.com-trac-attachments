Index: twisted/cred/test/test_cred.py
===================================================================
--- twisted/cred/test/test_cred.py	(revision 46382)
+++ twisted/cred/test/test_cred.py	(working copy)
@@ -216,7 +216,9 @@
 
         with LogCapture() as lc:
             self.failUnlessRaises(error.UnauthorizedLogin, self.db.getUser, '')
-            self.assertIn('Unable to load credentials db: IOError', lc.asText)
+            self.assertIn(
+                'Unable to load credentials db: IOError', lc.messages()[0]
+            )
 
 
 
Index: twisted/internet/test/test_protocol.py
===================================================================
--- twisted/internet/test/test_protocol.py	(revision 46382)
+++ twisted/internet/test/test_protocol.py	(working copy)
@@ -403,11 +403,14 @@
         f = Factory()
         with LogCapture() as lc:
             f.doStart()
-            self.assertIs(lc.asEvents[0]['factory'], f)
-            self.assertEqual(lc.asEvents[0]['log_level'], LogLevel.info)
+            events = lc.events
+            messages = lc.messages()
+            self.assertIs(events[0]['factory'], f)
+            self.assertEqual(events[0]['log_level'], LogLevel.info)
             self.assertIn(
                 'Starting factory <twisted.internet.protocol.Factory instance',
-                lc.asText)
+                messages[0]
+            )
 
 
     def test_doStopLoggingStatement(self):
@@ -423,12 +426,15 @@
 
         with LogCapture() as lc:
             f.doStop()
-            self.assertIs(lc.asEvents[0]['factory'], f)
-            self.assertEqual(lc.asEvents[0]['log_level'], LogLevel.info)
+            events = lc.events
+            messages = lc.messages()
+            self.assertIs(events[0]['factory'], f)
+            self.assertEqual(events[0]['log_level'], LogLevel.info)
             self.assertIn(
                 'Stopping factory '
                 '<twisted.internet.test.test_protocol.MyFactory instance',
-                lc.asText)
+                messages[0]
+            )
 
 
 
Index: twisted/test/proto_helpers.py
===================================================================
--- twisted/test/proto_helpers.py	(revision 46382)
+++ twisted/test/proto_helpers.py	(working copy)
@@ -18,7 +18,7 @@
 from twisted.python.compat import unicode
 from twisted.logger import (
     FilteringLogObserver, ILogFilterPredicate, LogLevel, PredicateResult,
-    globalLogPublisher, textFileLogObserver
+    globalLogPublisher, textFileLogObserver, formatEvent
 )
 from twisted.internet.interfaces import (
     ITransport, IConsumer, IPushProducer, IConnector, IReactorTCP, IReactorSSL,
@@ -705,6 +705,7 @@
     def __init__(self, namespace):
         self.namespace = namespace
 
+
     def __call__(self, event):
         namespace = event.get("log_namespace", None)
 
@@ -725,51 +726,52 @@
     with LogCapture() as lc:
         [... code that logs events ...]
 
-        self.assertIn('logline text', lc.asText)
-        self.assertNotIn('Unable to format event', lc.asText)
-        selc.assertEqual(lc.asEvents[0]['log_level'], Loglevel.debug)
+        events = lc.events
+        messages = lc.messages()
+        self.assertIn('logline text', messages[0])
+        self.assertNotIn('Unable to format event', messages[0])
+        selc.assertEqual(events['log_level'], Loglevel.debug)
 
     """
 
     def __init__(self, namespace=None):
-        self.events = []
-        self.eventsObserver = lambda e: self.events.append(e)
-        self.handle = StringIO()
-        self.textObserver = textFileLogObserver(self.handle)
+        self.namespace = namespace
+        self._events = []
 
+        self._observer = lambda e: self._events.append(e)
+
         if namespace is not None:
-            predicate = NamespaceFilterPredicate(namespace)
-            self.eventsObserver = FilteringLogObserver(
-                self.eventsObserver, [predicate])
-            self.textObserver = FilteringLogObserver(
-                self.textObserver, [predicate])
+            self._observer = FilteringLogObserver(
+                self._observer, [NamespaceFilterPredicate(namespace)]
+            )
 
+
     def __enter__(self):
-        globalLogPublisher.addObserver(self.eventsObserver)
-        globalLogPublisher.addObserver(self.textObserver)
+        globalLogPublisher.addObserver(self._observer)
         return self
 
+
     def __exit__(self, type_, value_, tb_):
-        globalLogPublisher.removeObserver(self.eventsObserver)
-        globalLogPublisher.removeObserver(self.textObserver)
+        globalLogPublisher.removeObserver(self._observer)
 
+
+
     @property
-    def asText(self):
+    def events(self):
         """
-        Get captured events as a string, the same a textFileLogObserver would
-        write to the output file
+        Get captured events as a list of event dicts.
 
-        @return: the full log textual output
-        @rtype: L{str}
+        @return: The list of captured events.
+        @rtype: L{list} of L{dict}
         """
-        return self.handle.getvalue()
+        return self._events[:]
 
-    @property
-    def asEvents(self):
+
+    def messages(self):
         """
-        Get captured events as a list of event dicts.
+        Get captured events as a list of rendered strings.
 
-        @return: the list of captured events
-        @rtype: L{list}
+        @return: A list of rendered events.
+        @rtype: L{list} of L{unicode}
         """
-        return self.events[:]
+        return [formatEvent(e) for e in self._events]
