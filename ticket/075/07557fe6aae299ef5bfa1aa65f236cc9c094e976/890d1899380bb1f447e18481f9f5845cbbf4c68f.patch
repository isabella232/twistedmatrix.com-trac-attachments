Index: twisted/internet/_win32serialport.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- twisted/internet/_win32serialport.py	(revision b5873ea830ff54e336efb957fcff3e853150b1fb)
+++ twisted/internet/_win32serialport.py	(revision )
@@ -21,7 +21,6 @@
 # sibling imports
 from twisted.internet.serialport import BaseSerialPort
 
-
 class SerialPort(BaseSerialPort, abstract.FileDescriptor):
     """A serial device, acting as a transport, that uses a win32 event."""
 
@@ -34,6 +33,15 @@
             deviceNameOrPortNumber, baudrate=baudrate, bytesize=bytesize,
             parity=parity, stopbits=stopbits, timeout=None,
             xonxoff=xonxoff, rtscts=rtscts)
+
+        # pyserial 3.0 (internal API changes)
+        if hasattr(self._serial, '_port_handle'):
+            self._serialHandle = self._serial._port_handle
+            
+        # pyserial <= 2.7
+        else:
+            self._serialHandle = self._serial.hComPort
+        
         self.flushInput()
         self.flushOutput()
         self.reactor = reactor
@@ -62,25 +70,25 @@
 
         This is a separate method to facilitate testing.
         """
-        flags, comstat = win32file.ClearCommError(self._serial.hComPort)
-        rc, self.read_buf = win32file.ReadFile(self._serial.hComPort,
+        flags, comstat = win32file.ClearCommError(self._serialHandle)
+        rc, self.read_buf = win32file.ReadFile(self._serialHandle,
                                                win32file.AllocateReadBuffer(1),
                                                self._overlappedRead)
 
 
     def serialReadEvent(self):
         #get that character we set up
-        n = win32file.GetOverlappedResult(self._serial.hComPort, self._overlappedRead, 0)
+        n = win32file.GetOverlappedResult(self._serialHandle, self._overlappedRead, 0)
         if n:
             first = str(self.read_buf[:n])
             #now we should get everything that is already in the buffer
-            flags, comstat = win32file.ClearCommError(self._serial.hComPort)
+            flags, comstat = win32file.ClearCommError(self._serialHandle)
             if comstat.cbInQue:
                 win32event.ResetEvent(self._overlappedRead.hEvent)
-                rc, buf = win32file.ReadFile(self._serial.hComPort,
+                rc, buf = win32file.ReadFile(self._serialHandle,
                                              win32file.AllocateReadBuffer(comstat.cbInQue),
                                              self._overlappedRead)
-                n = win32file.GetOverlappedResult(self._serial.hComPort, self._overlappedRead, 1)
+                n = win32file.GetOverlappedResult(self._serialHandle, self._overlappedRead, 1)
                 #handle all the received data:
                 self.protocol.dataReceived(first + str(buf[:n]))
             else:
@@ -89,7 +97,7 @@
 
         #set up next one
         win32event.ResetEvent(self._overlappedRead.hEvent)
-        rc, self.read_buf = win32file.ReadFile(self._serial.hComPort,
+        rc, self.read_buf = win32file.ReadFile(self._serialHandle,
                                                win32file.AllocateReadBuffer(1),
                                                self._overlappedRead)
 
@@ -100,7 +108,7 @@
                 self.outQueue.append(data)
             else:
                 self.writeInProgress = 1
-                win32file.WriteFile(self._serial.hComPort, data, self._overlappedWrite)
+                win32file.WriteFile(self._serialHandle, data, self._overlappedWrite)
 
 
     def serialWriteEvent(self):
@@ -110,7 +118,7 @@
             self.writeInProgress = 0
             return
         else:
-            win32file.WriteFile(self._serial.hComPort, dataToWrite, self._overlappedWrite)
+            win32file.WriteFile(self._serialHandle, dataToWrite, self._overlappedWrite)
 
 
     def connectionLost(self, reason):
