Index: twisted/internet/_win32serialport.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- twisted/internet/_win32serialport.py	(revision b5873ea830ff54e336efb957fcff3e853150b1fb)
+++ twisted/internet/_win32serialport.py	(revision )
@@ -21,7 +21,6 @@
 # sibling imports
 from twisted.internet.serialport import BaseSerialPort
 
-
 class SerialPort(BaseSerialPort, abstract.FileDescriptor):
     """A serial device, acting as a transport, that uses a win32 event."""
 
@@ -34,6 +33,15 @@
             deviceNameOrPortNumber, baudrate=baudrate, bytesize=bytesize,
             parity=parity, stopbits=stopbits, timeout=None,
             xonxoff=xonxoff, rtscts=rtscts)
+
+        # pyserial 3.0 (internal API changes)
+        if hasattr(self._serial, '_port_handle'):
+            self._serialHandle = self._serial._port_handle
+            
+        # pyserial <= 2.7
+        else:
+            self._serialHandle = self._serial.hComPort
+        
         self.flushInput()
         self.flushOutput()
         self.reactor = reactor
@@ -62,25 +70,25 @@
 
         This is a separate method to facilitate testing.
         """
-        flags, comstat = win32file.ClearCommError(self._serial.hComPort)
-        rc, self.read_buf = win32file.ReadFile(self._serial.hComPort,
+        flags, comstat = win32file.ClearCommError(self._serialHandle)
+        rc, self.read_buf = win32file.ReadFile(self._serialHandle,
                                                win32file.AllocateReadBuffer(1),
                                                self._overlappedRead)
 
 
     def serialReadEvent(self):
         #get that character we set up
-        n = win32file.GetOverlappedResult(self._serial.hComPort, self._overlappedRead, 0)
+        n = win32file.GetOverlappedResult(self._serialHandle, self._overlappedRead, 0)
         if n:
             first = str(self.read_buf[:n])
             #now we should get everything that is already in the buffer
-            flags, comstat = win32file.ClearCommError(self._serial.hComPort)
+            flags, comstat = win32file.ClearCommError(self._serialHandle)
             if comstat.cbInQue:
                 win32event.ResetEvent(self._overlappedRead.hEvent)
-                rc, buf = win32file.ReadFile(self._serial.hComPort,
+                rc, buf = win32file.ReadFile(self._serialHandle,
                                              win32file.AllocateReadBuffer(comstat.cbInQue),
                                              self._overlappedRead)
-                n = win32file.GetOverlappedResult(self._serial.hComPort, self._overlappedRead, 1)
+                n = win32file.GetOverlappedResult(self._serialHandle, self._overlappedRead, 1)
                 #handle all the received data:
                 self.protocol.dataReceived(first + str(buf[:n]))
             else:
@@ -89,7 +97,7 @@
 
         #set up next one
         win32event.ResetEvent(self._overlappedRead.hEvent)
-        rc, self.read_buf = win32file.ReadFile(self._serial.hComPort,
+        rc, self.read_buf = win32file.ReadFile(self._serialHandle,
                                                win32file.AllocateReadBuffer(1),
                                                self._overlappedRead)
 
@@ -100,7 +108,7 @@
                 self.outQueue.append(data)
             else:
                 self.writeInProgress = 1
-                win32file.WriteFile(self._serial.hComPort, data, self._overlappedWrite)
+                win32file.WriteFile(self._serialHandle, data, self._overlappedWrite)
 
 
     def serialWriteEvent(self):
@@ -110,7 +118,7 @@
             self.writeInProgress = 0
             return
         else:
-            win32file.WriteFile(self._serial.hComPort, dataToWrite, self._overlappedWrite)
+            win32file.WriteFile(self._serialHandle, dataToWrite, self._overlappedWrite)
 
 
     def connectionLost(self, reason):
Index: twisted/internet/test/test_win32serialport.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- twisted/internet/test/test_win32serialport.py	(revision )
+++ twisted/internet/test/test_win32serialport.py	(revision )
@@ -0,0 +1,136 @@
+"""
+Tests for L{twisted.internet.serialport}.
+"""
+
+from twisted.trial import unittest
+from twisted.internet.protocol import Protocol
+from twisted.python.runtime import platform
+
+try:
+    from twisted.internet import serialport
+    import serial
+
+except ImportError as e:
+    serialport = None
+    serial = None
+
+class FakeSerialBase(object):
+    def __init__(self, *args, **kwargs):
+        # Capture for unit test
+        self.captured_args = args
+        self.captured_kwargs = kwargs
+
+    def flushInput(self):
+        # Avoid calling the real method; it invokes Win32 system calls.
+        pass
+
+    def flushOutput(self):
+        # Avoid calling the real method; it invokes Win32 system calls.
+        pass
+
+class FakeSerial2x(FakeSerialBase):
+    """
+    Fake Serial class emulating pyserial 2.x behavior.
+    """
+    def __init__(self, *args, **kwargs):
+        super(FakeSerial2x, self).__init__(*args, **kwargs)
+        self.hComPort = 25
+
+class FakeSerial3x(FakeSerialBase):
+    """
+    Fake Serial class emulating pyserial 3.x behavior.
+    """
+    def __init__(self, *args, **kwargs):
+        super(FakeSerial3x, self).__init__(*args, **kwargs)
+        self._port_handle = 35
+
+class FakeReactor(object):
+    def addEvent(self, a, b, c):
+        # This is the only method called on the reactor by SerialPort in the
+        # real class.
+        pass
+
+if serialport is not None:
+    class TestableSerialPortBase(serialport.SerialPort):
+        """
+        Base testable version of Windows C{twisted.internet.serialport.SerialPort}.
+        """
+        # Fake this out; it calls into win32 library.
+        def _finishPortSetup(self):
+            pass
+
+    class TestableSerialPort2x(TestableSerialPortBase):
+        """
+        Testable version of Windows C{twisted.internet.serialport.SerialPort} that
+        uses a fake pyserial 2.x Serial class.
+        """
+        _serialFactory = FakeSerial2x
+
+    class TestableSerialPort3x(TestableSerialPortBase):
+        """
+        Testable version of Windows C{twisted.internet.serialport.SerialPort} that
+        uses a fake pyserial 3.x Serial class.
+        """
+        _serialFactory = FakeSerial3x
+
+
+class Win32SerialPortTests(unittest.TestCase):
+    """
+    Minimal testing for Twisted's Win32 serial port support.
+    """
+
+    if not platform.isWindows():
+        skip = "This test must run on Windows."
+
+    elif not serialport:
+        skip = "Windows serial port support is not available."
+
+    def setUp(self):
+        # Re-usable protocol and reactor
+        self.protocol = Protocol()
+        self.reactor = FakeReactor()
+
+    def test_serial_port_default_args(self):
+        """
+        Test correct positional and keyword arguments have been
+        passed to the C{serial.Serial} object.
+        """
+        port = TestableSerialPort2x(self.protocol, "COM3", self.reactor)
+        # Validate args
+        self.assertEqual(("COM3",), port._serial.captured_args)
+        # Validate kwargs
+        self.assertEqual(9600,                port._serial.captured_kwargs["baudrate"])
+        self.assertEqual(serial.EIGHTBITS,    port._serial.captured_kwargs["bytesize"])
+        self.assertEqual(serial.PARITY_NONE,  port._serial.captured_kwargs["parity"])
+        self.assertEqual(serial.STOPBITS_ONE, port._serial.captured_kwargs["stopbits"])
+        self.assertEqual(0,                   port._serial.captured_kwargs["xonxoff"])
+        self.assertEqual(0,                   port._serial.captured_kwargs["rtscts"])
+        self.assertEqual(None,                port._serial.captured_kwargs["timeout"])
+
+    def test_serial_port_initially_connected(self):
+        """
+        Test the port is connected at initialization time, and C{Protocol.makeConnection} has been
+        called on the desired protocol.
+        """
+        self.assertEqual(0,    self.protocol.connected)
+
+        port = TestableSerialPort2x(self.protocol, "COM3", self.reactor)
+        self.assertEqual(1, port.connected)
+        self.assertEqual(1, self.protocol.connected)
+        self.assertEqual(port, self.protocol.transport)
+
+    def test_serial_port_pyserial_2x_windows_handle(self):
+        """
+        Test correct attribute in the C{serial.Serial} instance has been captured
+        for the serial port's Windows HANDLE, for the pyserial 2.x library.
+        """
+        port = TestableSerialPort2x(self.protocol, "COM3", self.reactor)
+        self.assertEqual(25, port._serialHandle)
+
+    def test_serial_port_pyserial_3x_windows_handle(self):
+        """
+        Test correct attribute in the C{serial.Serial} instance has been captured
+        for the serial port's Windows HANDLE, for the pyserial 3.x library.
+        """
+        port = TestableSerialPort3x(self.protocol, "COM3", self.reactor)
+        self.assertEqual(35, port._serialHandle)
Index: twisted/topfiles/8159.bugfix
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- twisted/topfiles/8159.bugfix	(revision )
+++ twisted/topfiles/8159.bugfix	(revision )
@@ -0,0 +1,1 @@
+twisted.internet._win32serialport now supports pyserial 2.x and 3.x on Windows.
\ No newline at end of file
