Index: twisted/python/failure.py
===================================================================
--- twisted/python/failure.py	(revision 20264)
+++ twisted/python/failure.py	(working copy)
@@ -14,6 +14,7 @@
 import sys
 import linecache
 import inspect
+import weakref
 from cStringIO import StringIO
 
 from twisted.python import reflect
@@ -116,6 +117,19 @@
         self.co_filename = filename
 
 
+class ExcKey:
+    def __init__(self, type, value):
+        self.type = type
+        self.value = value
+    
+    def _essence(self):
+        return (self.type, self.value)
+    
+    def __hash__(self):
+        return hash(self._essence())
+    def __cmp__(self, other):
+        return cmp(type(self), type(other)) or cmp(self._essence(), other._essence())
+    
 class Failure:
     """A basic abstraction for an error that has occurred.
 
@@ -128,6 +142,7 @@
 
     pickled = 0
     stack = None
+    failure_of_exception = weakref.WeakKeyDictionary()
 
     def __init__(self, exc_value=None, exc_type=None, exc_tb=None):
         """Initialize me with an explanation of the error.
@@ -168,6 +183,14 @@
         if isinstance(self.value, Failure):
             self.__dict__ = self.value.__dict__
             return
+
+        # I don't think we can assume "self.value" to be a unique
+        # identifier of the exception, as in theory, self.type can
+        # provide non-redundant information beyond that in self.value
+        self.exc_key = ExcKey(self.type, self.value)
+        self.prev = self.failure_of_exception.get(self.exc_key, None)
+        self.failure_of_exception[self.exc_key] = self
+
         if tb is None:
             if exc_tb:
                 tb = exc_tb
@@ -412,10 +435,11 @@
             w("%s: %s\n" % (reflect.qual(self.type),
                             reflect.safe_str(self.value)))
         # chaining
-        if isinstance(self.value, Failure):
-            # TODO: indentation for chained failures?
-            file.write(" (chained Failure)\n")
-            self.value.printTraceback(file, elideFrameworkCode, detail)
+        for value in [self.value, self.prev]:
+            if isinstance(value, Failure):
+                # TODO: indentation for chained failures?
+                file.write(" (chained Failure)\n")
+                value.printTraceback(file, elideFrameworkCode, detail)
         if detail == 'verbose':
             w('*--- End of Failure #%d ---\n' % self.count)
 
