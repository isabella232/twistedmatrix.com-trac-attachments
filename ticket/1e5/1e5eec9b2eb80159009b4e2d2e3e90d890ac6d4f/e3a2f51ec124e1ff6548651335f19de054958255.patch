# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: esteve@fluidinfo.com-20090720181923-bjpis47kq4prtugw
# target_branch: ../trunk/
# testament_sha1: 671b6ccbb7d5a0465a6ebaafa0ea251fbd4b7b5e
# timestamp: 2009-07-20 20:26:54 +0200
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:27161
# 
# Begin patch
=== modified file 'twisted/web/_auth/wrapper.py'
--- twisted/web/_auth/wrapper.py	2009-03-30 12:52:59 +0000
+++ twisted/web/_auth/wrapper.py	2009-07-20 17:25:50 +0000
@@ -18,7 +18,7 @@
 from twisted.web.resource import IResource, ErrorPage
 from twisted.web import util
 from twisted.cred import error
-
+from twisted.cred.credentials import Anonymous
 
 class UnauthorizedResource(object):
     """
@@ -105,7 +105,7 @@
         """
         authheader = request.getHeader('authorization')
         if not authheader:
-            return UnauthorizedResource(self._credentialFactories)
+            return util.DeferredResource(self._login(Anonymous()))
 
         factory, respString = self._selectParseHeader(authheader)
         if factory is None:

=== modified file 'twisted/web/test/test_httpauth.py'
--- twisted/web/test/test_httpauth.py	2009-03-30 12:52:59 +0000
+++ twisted/web/test/test_httpauth.py	2009-07-20 18:19:23 +0000
@@ -14,7 +14,8 @@
 from twisted.internet.address import IPv4Address
 
 from twisted.cred import error, portal
-from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse
+from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse, \
+    ANONYMOUS, AllowAnonymousAccess
 from twisted.cred.credentials import IUsernamePassword
 
 from twisted.web.iweb import ICredentialFactory
@@ -350,7 +351,12 @@
         """
         request = self.makeRequest([self.childName])
         child = self.wrapper.getChildWithDefault(self.childName, request)
-        self.assertIsInstance(child, UnauthorizedResource)
+        d = request.notifyFinish()
+        def cbFinished(result):
+            self.assertEqual(request.responseCode, 401)
+        d.addCallback(cbFinished)
+        render(child, request)
+        return d
 
 
     def _invalidAuthorizationTest(self, response):
@@ -545,3 +551,27 @@
         render(child, request)
         self.assertEqual(request.responseCode, 500)
         self.assertEqual(len(self.flushLoggedErrors(UnexpectedException)), 1)
+
+    def test_anonymousAccess(self):
+        """
+        Anonymous requests are allowed if a L{Portal} has an anonymous checker
+        registered.
+        """
+        unprotectedContents = "contents of the unprotected child resource"
+
+        class UnprotectedResource(Resource):
+
+            def render_GET(self, request):
+                return unprotectedContents
+
+        self.avatars[ANONYMOUS] = UnprotectedResource()
+        self.portal.registerChecker(AllowAnonymousAccess())
+        self.credentialFactories.append(BasicCredentialFactory('example.com'))
+        request = self.makeRequest([self.childName])
+        child = getChildForRequest(self.wrapper, request)
+        d = request.notifyFinish()
+        def cbFinished(ignored):
+            self.assertEquals(request.written, [unprotectedContents])
+        d.addCallback(cbFinished)
+        render(child, request)
+        return d

# Begin bundle
IyBCYXphYXIgcmV2aXNpb24gYnVuZGxlIHY0CiMKQlpoOTFBWSZTWbbvAN0AA81fgERUU+f//3/n
3q6////6YAfvgAAAJUKAAAAAlFU2Jinpp6Kep4phHqGg0AZAPSNAAfqmgDhppghkNNMjJhANNAGE
0aZMACBocNNMEMhppkZMIBpoAwmjTJgAQNDhppghkNNMjJhANNAGE0aZMACBocNNMEMhppkZMIBp
oAwmjTJgAQNBJEBBNMgIYgNTU9NGpqeKep5Q8UNlHpPTU8RqOogk1n3u3J8k9NRMo+O+mY+zKPw1
zR3mRuLUoNVCwpF+miyE4MKAxbqhSMmggLycbeppGp7IlIxfYhCJgl2/uWYBoLBkMzMft8hfWJMb
c7/k7wYg/dOJKUJRw7Yzlz/66FdRv9mZ/jorM/5wrFq/KDyHtgFsxvnrOsv/b8TrZaM1Sow+Zy6/
ALyZGsybA0oPAJWwgH/ilw0Dn6de70ETEPpf19eLd1mMXhHowPIahBOfScxEOLCPoLAii8Wc2lBv
RyaZHJym6VkbriRG7hWDfKtfH1u3DOVJSGh2P6YFd86ND5ZPjInwSL0jWkuRIkkWn5C0FwxsOggi
iCjE9d8Srp28xnZJQIM1w12dmZqxi3Dhyhhuvd39Yjq46aCWk1pHYgg0kBJgDech/RIyNiDxmB5E
lfzDGCSvB8yJFCwkYIzMLAwtuEi6Ry07WjWB/ay6lzZzJIspgF6dMqlfESI6VOk4tigfzs4oG98h
RhYGgvMCBieGosM1sGzmSSZJaYK4wNZQUvYzNOBSwZBsPQbSLqJYQS9aETLJ6ySREvKlqRk81C2Y
pOaUiiRyGEUjW8RqxXOkVPSWozWG0ZBCpNyVjBYRdXmgcTE3MMsuaaR2CkUI6C0/dFwaCh9xZsqR
wM6DXoQ5xKVMi1BzxLjJBrKhmNBPQXheZHYg2cLJZaS3QkWEtrKc4YjvhA5UGcYpAsRkXmJoSoSH
NZVZ7AzFEk0UEjEtlQYtsLRXhJImkXlQcVljlrtsGgMK59G8iZzMPIvNBpSMS29JTJFEqHBI07cJ
SRFsDOX4jEDOaDOd6PBGRexkjSai5F4pSCSUrA1pFnaHWeoGGBdIwaxZfc5nWRUGIKoxHuYZk5vO
IdxxIERwmQHIGpHQ6A9n1ks/5t6X8R866mYZDKP6ZGjVOC628UK/GZpOdeMxNpwC6Qg+0l9jm+A0
stGlcv8s7yU/R03H2xDCjRkYakTxkY4yBqKg4QCKiX84eY7EKkNJjHQmFDEbJhMZhMBiPK1zIhHw
YCc1nm2mBnPQbQ5Uvfh/De5fQxeMeCOlz8TLCRugazyaXkS87QCQv0V78Bx6Dyhmy37aRJaUgfz7
omAyFRWSGmSJpHWGk1+I+qP8IaxI7jsHSMxvF6hz1iGRakMZDHZU2ngT9S8p1oqduoOJdbvxP6wz
Ec0xjkROIgmaHCIpETkmRTtdncV7IiQSHkMGmE+83G82JDm9IuR4FgnLTIRwHW3OOry0yV6R3xEA
JIN64UjIBU1wtoB8IFieLaJVlNhVoQZwuLrI7JHWkZGuUnmaBkjuxG7w0BnQHC5l5TEn/lsiqWg9
4rEh0VShlpgKIak4146HDeapiUBtZ4QMUj213RRRaRRUAZhZm/cZI1EygNrd2KJ2tPUY0UCYHBFl
oNctoeuh33gwhgifM/Q7wbzjDppq3hwcLEgYA/Vxai4x5xdnVakQO8h2HSeYciQGPibnSGQ5TrLg
/U8Dxn80B4xA4oHMTI70GCRPRcT+xzC2qp0DgzgVIMxc8f7spAwO0l7F6jOgguDUfEmIuQEJBbvB
z1N4C5BOEg6cx+SWFiAn3Ct5SRYTQYlGQHcLIXeAfmBgZcRqHHiLarEMMLndHIl2CgcGqJiVSIGO
dw9vQkUXrG4F9igQ6SBwQEeoEevSiAvGbzANhQw9wihxBpgxIsGYaE2NyIC+7IOcJqhSiTJ1IgkH
YMLQkapMzMMNwyIh8CpYMDIKsJMJwWkQOg7b82tzcCJLcyS85v9NhNpHSIqgu7eKXGT90kXC9zRR
zsWC0VOKJCNCY0rqOo6RWokFwFoH4FC1iJZufgBvV5eDGAvAW+ovIL2oPiRSWNzgDsyXkOUPwxgi
M2nznI3O3eYe5a7ATuLzDBF4H8e/aecocgwoGF2fJhZBFcOonuEohlQHGTA0BOE0iADcKu83h07I
EBpPF3IlOImJgxFRgSDu6LNi1Gz5tqaPZWw8R3IMSQagcL2AmwDEDAWSUmEwyZkIkI6R0BRJg8o6
9jFlG0jv7KOBsaQweBAmEpGyYMfAJRUR4HKLriAyMaAxA2+VMxngkEAvNyTplZVXg5CIb81Ur6jM
F6GySGIjMyLWFqW1EBZBiqMXkQ+h5mErhZIDoM00ihw54rUioMI0C/kypzIfEZkBpEwBVHKKSCpk
JrQJdsTlsIWJchiVHB05kOpiJGbaDnwQfjX/8XckU4UJC27wDdA=
