Index: /home/wolf/twisted-trunk/branches/twisted/words/protocols/irc.py
===================================================================
--- /home/wolf/twisted-trunk/branches/twisted/words/protocols/irc.py	(revision 24312)
+++ /home/wolf/twisted-trunk/branches/twisted/words/protocols/irc.py	(working copy)
@@ -530,6 +530,19 @@
     @ivar lineRate: Minimum delay between lines sent to the server.  If
         C{None}, no delay will be imposed.
     @type lineRate: Number of Seconds.
+
+    @ivar serverCapabilities: A dictionary with various informations about what
+    the server supports. If and when the server sends the ISUPPORT message (and
+    possibly others), the default values will be replaced and others will be
+    added.
+
+    @ivar usermodes: a C{dict} with the user modes (e.g. 'o', 'h', 'v') as keys
+    and the prefixes (e.g. '@', '%', '+') as values. If and when the server
+    sends the PREFIX parameter in the ISUPPORT message, the default values of
+    usermodes and userprefix will be replaced (by the L{parseISupport_PREFIX}
+    method).
+    @ivar userprefix: a C{dict} with the user prefixes as keys and the modes
+    as values.
     """
 
     motd = ""
@@ -1211,7 +1224,7 @@
             params[-1] ==  'are supported by this server'):
             self.irc_RPL_ISUPPORT(params[1:-1])
             # isupport is deprecated, if someone has overridden it I'll call it
-            # for backward compatibility and I'll raise a Warning
+            # anyway for backward compatibility but I'll raise a Warning
             if (not hasattr(self.isupport, 'im_func') or
                 self.isupport.im_func is not IRCClient.isupport.im_func):
                 self.isupport(params[1:-1])
@@ -1246,16 +1259,16 @@
 
     def irc_RPL_ISUPPORT(self, args):
         """
-        Parse the ISUPPORT message and save the data in the L{server_capab}
-        dict.
+        Parse the ISUPPORT message and save the data in the
+        L{serverCapabilities} dict.
 
         All the args with values will be saved as I{keys} and I{values} in the
         dict; C{True} will be used as default I{value} for the "flag" args (e.g.
         NOQUIT).
 
         Some arguments (PREFIX, CHANMODES, CHANLIMIT, MAXLIST, LANGUAGE and
-        possibly others) will require additional parsing, provided by the
-        _parseISupport* methods.
+        possibly others) may require additional parsing, provided by the
+        parseISupport_* methods.
         """
         isupport = {}
         for arg in args:
@@ -1266,10 +1279,10 @@
                 key, value = self._parseISupportArg(arg)
                 isupport[key] = value
                 # check if a parser for this arg exists and send it the value
-                parser = '_parseISupport' + key.capitalize()
+                parser = 'parseISupport_' + key.upper()
                 if hasattr(self, parser):
                     getattr(self, parser)(value)
-        self.server_capab.update(isupport)
+        self.serverCapabilities.update(isupport)
         self.serverSupports(isupport)
 
 
@@ -1288,16 +1301,13 @@
         return key, value
 
 
-    def _parseISupportPrefix(self, prefix):
+    def parseISupport_PREFIX(self, prefix):
         """
         Parse the PREFIX value of the ISUPPORT message and set the L{userprefix}
         and L{usermodes} attributes to the instance.
 
         The prefix is in the form '(xxx)yyy' where 'xxx' are the modes
         (e.g. 'ohv') and 'yyy' the prefixes (e.g. '@%+').
-
-        usermodes is a dict with the modes as keys and the prefixes as values.
-        userprefix is a dict with the prefixes as keys and the modes as values.
         """
         res = re.match('^\(([^)]*)\)(\S*)$', prefix)
         if not res:
@@ -1631,42 +1641,22 @@
         """
         log.msg(s + '\n')
 
+
     ### Protocool methods
 
-    #def __init__(self):
-
-        ##print self.isupport
-        #if (not hasattr(self.isupport, 'im_func') or
-            #self.isupport.im_func is not IRCClient.isupport.im_func):
-            #version = Version('Twisted.words.protocols.irc', 2, 5, 0)
-            #self.isupport = deprecated(version)(self.isupport)
-
     def connectionMade(self):
         """
-        Perform the login if L{performLogin} is C{True} and set some default
-        instance attribute:
-
-        @ivar server_cabap: A dictionary with various informations about what
-        the server supports. This value will be replaced by the data sent by
-        the server in the ISUPPORT (and possibly others) messages.
-
-        @ivar userprefix: a dict with the user modes (e.g. 'ohv') as keys and
-        the prefixes (e.g. '@%+') as values.
-        @ivar userprefix: a dict with the user prefixes as keys and the modes
-        as values.
-
-        userprefix and usermodes will be replaced if the server sends the
-        ISUPPORT message with the PREFIX paramater (see L{_parseISupportPrefix}
-        docstring).
+        Perform the login if L{performLogin} is C{True} and set the default
+        values for the instance attributes L{serverCapabilities}, L{userprefix}
+        and L{usermodes}.
         """
         self._queue = []
         if self.performLogin:
             self.register(self.nickname)
         # Default data used if the server doesn't send the ISUPPORT message
-        self.server_capab = {
+        self.serverCapabilities = {
             'PREFIX': '(ohv)@%+',
             'CHANTYPES': '#&'}
-
         self.userprefix = {'@': 'o', '%': 'h', '+': 'v'}
         self.usermodes = {'o': '@', 'h': '%', 'v': '+'}
 
Index: /home/wolf/twisted-trunk/branches/twisted/words/test/test_irc.py
===================================================================
--- /home/wolf/twisted-trunk/branches/twisted/words/test/test_irc.py	(revision 24312)
+++ /home/wolf/twisted-trunk/branches/twisted/words/test/test_irc.py	(working copy)
@@ -84,7 +84,6 @@
         'myInfo': ('servername', 'version', 'umodes', 'cmodes'),
         'luserClient': ('info',),
         'bounce': ('info',),
-        #'isupport': ('options',),
         'serverSupports': ('options',),
         'luserChannels': ('channels',),
         'luserOp': ('ops',),
@@ -176,9 +175,9 @@
         """
         for n,result in enumerate(results):
             method, data = result
-            self.assertEquals(method, 'modeChanged')
-            self.assertEquals(data['user'], 'Wolf!~wolf@yok.utu.fi')
-            self.assertEquals(data['channel'], '#chan')
+            self.assertEqual(method, 'modeChanged')
+            self.assertEqual(data['user'], 'Wolf!~wolf@yok.utu.fi')
+            self.assertEqual(data['channel'], '#chan')
             results[n] = tuple([data[key] for key in ('set', 'modes', 'args')])
         return results
 
@@ -188,7 +187,7 @@
         Compare the expected result with the one returned by the client.
         """
         result = self._parseModeChange(self.client.calls)
-        self.assertEquals(result, expected)
+        self.assertEqual(result, expected)
 
 
     def test_modeChangeWithASingleMode(self):
@@ -342,14 +341,15 @@
         calls = self.client.calls
         data = {}
         for method, args in calls:
-            self.assertEquals(method, 'serverSupports')
+            self.assertEqual(method, 'serverSupports')
             data.update(args['options'])
-        self.assertEquals(data, expected)
+        self.assertEqual(data, expected)
 
 
     def _checkPrefixAndServerCapab(self, expected, modes=None, prefixes=None):
         """
-        Check the instance variabile userprefix, usermodes and server_capab.
+        Check the instance variabile userprefix, usermodes and
+        serverCapabilities.
 
         If the server doesn't send the PREFIX and CHANTYPES values in the
         ISUPPORT message, the default values should be used.
@@ -362,7 +362,7 @@
             expected['PREFIX'] = '(ohv)@%+'
         if 'CHANTYPES' not in expected:
             expected['CHANTYPES'] = '#&'
-        self.assertEqual(self.client.server_capab, expected)
+        self.assertEqual(self.client.serverCapabilities, expected)
 
 
     def test_serverSupportsWithSingleMessage(self):
@@ -401,7 +401,7 @@
             'NOQUIT SAFELIST MODES=6 MAXCHANNELS=35 MAXBANS=100 NICKLEN=60 '
             'TOPICLEN=800 KICKLEN=800 CHANTYPES=# PREFIX=(ov)@+ '
             'NETWORK=UniLang SILENCE=10'))
-        self._sendISupport((
+        self._sendISupport(( 
             'WATCH=128 CASEMAPPING=ascii ELIST=cmntu CHARSET=utf-8,* '
             'CHANMODES=beI,k,jl,AcHiLmMnOpPQrRsStUZ'))
         expected = {
@@ -433,23 +433,11 @@
         isupport method and if the data are sent both to isupport and to
         serverSupports.
         """
-        #from twisted.python.deprecate import deprecated
-        #from twisted.python.versions import Version
-
-        #class ClientWithDeprecatedISupport(object, IRCClientWithoutLogin):
-        #class ClientWithDeprecatedISupport(NoticingClient):
-            #def isupport(self, data):
-                #print 'bar'
-                #self.calls.append(('isupport', data))
-
-        #oldclient = self.client
-        #file = StringIOWithoutClosing()
-        #transport = protocol.FileWrapper(file)
-        #self.client = ClientWithDeprecatedISupport()
-        #self.client.makeConnection(transport)
+        # create a fake isupport method and add it to the client
         def isupport(data):
             self.client.calls.append(('isupport', data))
         self.client.isupport = isupport
+        # at the end of the test the method will be deleted
         def _delISupportFromClient(client):
             del client.isupport
         self.addCleanup(_delISupportFromClient, self.client)
@@ -457,31 +445,13 @@
             'MODES=4 CHANLIMIT=#:20 NICKLEN=16 USERLEN=10 HOSTLEN=63 '
             'TOPICLEN=450 KICKLEN=450 CHANNELLEN=30 KEYLEN=23 CHANTYPES=# '
             'PREFIX=(ov)@+ CASEMAPPING=ascii CAPAB IRCD=dancer')
-        #self.assertWarns(
-            #DeprecationWarning,
-            #"'isupport' is deprecated, use 'serverSupports' instead.",
-            #irc.__file__,
-        #self.callDeprecated(
-            #Version('Twisted.words.protocols.irc', 2, 5, 0),
-            #self.client.isupport,
-            #options.split()
-        #)
-        #self._sendISupport(options)
-        #
-        #
-        #self.callDeprecated(
-            #Version('Twisted.words.protocols.irc', 2, 5, 0),
-            #self._sendISupport,
-            #options
-        #)
+        # both isupport and serverSupports will be called
         self.assertWarns(
             DeprecationWarning,
             "'isupport' is deprecated, use 'serverSupports' instead.",
             irc.__file__,
             self._sendISupport,
             options)
-        #print self.client.calls
-        isupportdata = self.client.calls.pop()
         expected = {
             'CAPAB': True,
             'CASEMAPPING': 'ascii',
@@ -497,18 +467,15 @@
             'PREFIX': '(ov)@+',
             'TOPICLEN': 450,
             'USERLEN': 10}
+        isupportdata = self.client.calls.pop()
+        # check the data received by serverSupports
         self._checkServerSupports(expected)
         self._checkPrefixAndServerCapab(
             expected, {'o': '@', 'v': '+'}, {'+': 'v', '@': 'o'})
-        self.assertEqual(isupportdata, ('isupport', options.split()))
-        #transport.loseConnection()
-        #self.client.connectionLost()
-        #del file
-        #del transport
-        #self.client = oldclient
+        # and by isupport
+        self.assertEqual(isupportdata, (('isupport', options.split())))
 
 
-
     def _serverTestImpl(self, code, msg, func, **kw):
         host = pop(kw, 'host', 'server.host')
         nick = pop(kw, 'nick', 'nickname')
@@ -522,7 +489,7 @@
                    msg + "\r\n")
 
         self.client.dataReceived(message)
-        self.assertEquals(
+        self.assertEqual(
             self.client.calls,
             [(func, kw)])
 
@@ -547,20 +514,6 @@
         self._serverTestImpl("251", msg, "luserClient",
                              info=msg)
 
-    #def testISupport(self):
-        #args = ("MODES=4 CHANLIMIT=#:20 NICKLEN=16 USERLEN=10 HOSTLEN=63 "
-                #"TOPICLEN=450 KICKLEN=450 CHANNELLEN=30 KEYLEN=23 CHANTYPES=# "
-                #"PREFIX=(ov)@+ CASEMAPPING=ascii CAPAB IRCD=dancer")
-        #msg = "are available on this server"
-        #self.assertWarns(
-            #DeprecationWarning,
-            #"'isupport' is deprecated, use 'serverSupports' instead.",
-            #'/home/wolf/twisted-trunk/twisted/words/protocols/irc.py',
-            #self._serverTestImpl,
-            #"005", msg, "isupport",
-            #args=args, options=args.split()
-        #)
-
     def testBounce(self):
         msg = "Try server some.host, port 321"
         self._serverTestImpl("005", msg, "bounce",
@@ -589,10 +542,10 @@
             ":host.name 372 nickname :- Welcome to host.name",
             ":host.name 376 nickname :End of /MOTD command."]
         for L in lines:
-            self.assertEquals(self.client.calls, [])
+            self.assertEqual(self.client.calls, [])
             self.client.dataReceived(L + '\r\n')
 
-        self.assertEquals(
+        self.assertEqual(
             self.client.calls,
             [("receivedMOTD", {"motd": ["host.name Message of the Day -", "Welcome to host.name"]})])
 
@@ -608,7 +561,7 @@
                    group + " :" +
                    msg + "\r\n")
         self.client.dataReceived(message)
-        self.assertEquals(
+        self.assertEqual(
             self.client.calls,
             [(func, kw)])
         self.client.calls = []
@@ -637,7 +590,7 @@
         self.p.makeConnection(self.t)
 
     def check(self, s):
-        self.assertEquals(self.f.getvalue(), s)
+        self.assertEqual(self.f.getvalue(), s)
 
     def testPrivmsg(self):
         self.p.privmsg("this-is-sender", "this-is-recip", "this is message")
@@ -694,7 +647,7 @@
 
     def testSingleLine(self):
         self.client.msg('foo', 'bar')
-        self.assertEquals(self.client.lines, ['PRIVMSG foo :bar'])
+        self.assertEqual(self.client.lines, ['PRIVMSG foo :bar'])
 
     def testDodgyMaxLength(self):
         self.assertRaises(ValueError, self.client.msg, 'foo', 'bar', 0)
@@ -703,7 +656,7 @@
     def testMultipleLine(self):
         maxLen = len('PRIVMSG foo :') + 3 + 2 # 2 for line endings
         self.client.msg('foo', 'barbazbo', maxLen)
-        self.assertEquals(self.client.lines, ['PRIVMSG foo :bar',
+        self.assertEqual(self.client.lines, ['PRIVMSG foo :bar',
                                               'PRIVMSG foo :baz',
                                               'PRIVMSG foo :bo'])
 
@@ -711,20 +664,20 @@
         msg = 'barbazbo'
         maxLen = len('PRIVMSG foo :%s' % (msg,)) + 2
         self.client.msg('foo', msg, maxLen)
-        self.assertEquals(self.client.lines, ['PRIVMSG foo :%s' % (msg,)])
+        self.assertEqual(self.client.lines, ['PRIVMSG foo :%s' % (msg,)])
         self.client.lines = []
         self.client.msg('foo', msg, maxLen-1)
-        self.assertEquals(2, len(self.client.lines))
+        self.assertEqual(2, len(self.client.lines))
         self.client.lines = []
         self.client.msg('foo', msg, maxLen+1)
-        self.assertEquals(1, len(self.client.lines))
+        self.assertEqual(1, len(self.client.lines))
 
     def testSplitSanity(self):
         # Whiteboxing
         self.assertRaises(ValueError, irc.split, 'foo', -1)
         self.assertRaises(ValueError, irc.split, 'foo', 0)
-        self.assertEquals([], irc.split('', 1))
-        self.assertEquals([], irc.split(''))
+        self.assertEqual([], irc.split('', 1))
+        self.assertEqual([], irc.split(''))
 
 
 class ClientTests(TestCase):
