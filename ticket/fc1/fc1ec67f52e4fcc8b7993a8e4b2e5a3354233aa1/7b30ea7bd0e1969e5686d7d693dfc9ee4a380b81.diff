Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 27138)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -144,10 +144,10 @@
         split into a key and an empty string.
         """
         res = irc.ServerSupportedFeatures._splitParamArgs(['A:1', 'B:2', 'C:', 'D'])
-        self.assertEquals(res, (('A', '1'),
+        self.assertEquals(res, [('A', '1'),
                                 ('B', '2'),
                                 ('C', ''),
-                                ('D', '')))
+                                ('D', '')])
 
 
     def test_splitParamArgsProcessor(self):
@@ -158,9 +158,9 @@
         """
         res = irc.ServerSupportedFeatures._splitParamArgs(['A:1', 'B:2', 'C'],
                                            irc._intOrDefault)
-        self.assertEquals(res, (('A', 1),
+        self.assertEquals(res, [('A', 1),
                                 ('B', 2),
-                                ('C', None)))
+                                ('C', None)])
 
 
     def test_parsePrefixParam(self):
@@ -172,7 +172,8 @@
         self.assertEquals(irc.ServerSupportedFeatures._parsePrefixParam(''), None)
         self.assertEquals(irc.ServerSupportedFeatures._parsePrefixParam('hello'), None)
         self.assertEquals(irc.ServerSupportedFeatures._parsePrefixParam('(ov)@+'),
-                          {'o': '@', 'v': '+'})
+                          {'o': ('@', 0),
+                           'v': ('+', 1)})
 
 
     def test_parse(self):
@@ -191,8 +192,8 @@
 
         self.assertEquals(supported.getFeature('MODES'), 4)
         self.assertEquals(supported.getFeature('CHANLIMIT'),
-                          (('#', 20),
-                           ('&', 10)))
+                          [('#', 20),
+                           ('&', 10)])
         self.assertEquals(supported.getFeature('INVEX'), 'I')
         self.assertEquals(supported.getFeature('EXCEPTS'), 'Z')
         self.assertEquals(supported.getFeature('UNKNOWN'), ('A', 'B', 'C'))
@@ -217,6 +218,21 @@
         return supported.getFeature(name)
 
 
+    def _testIntOrDefaultFeature(self, name, default=None):
+        """
+        Perform some common tests on a feature known to use L{_intOrDefault}.
+        """
+        self.assertEquals(
+            self._parseFeature(name, None),
+            default)
+        self.assertEquals(
+            self._parseFeature(name, 'notanint'),
+            default)
+        self.assertEquals(
+            self._parseFeature(name, '42'),
+            42)
+
+
     def test_support_CHANMODES(self):
         """
         The CHANMODES ISUPPORT parameter is parsed into a C{dict} giving the
@@ -233,7 +249,7 @@
         self.assertEquals(
             self._parseFeature('CHANMODES', ',A'),
             {'addressModes': '',
-             'param':  'A',
+             'param': 'A',
              'setParam': '',
              'noParam': ''})
 
@@ -257,17 +273,18 @@
 
     def test_support_MAXLIST(self):
         """
-        Parsing the MAXLIST support parameter results in a dictionary mapping
-        strings to integers.
+        The MAXLIST support parameter is parsed into a sequence of two-tuples
+        giving modes and their limits.
         """
         self.assertEquals(
             self._parseFeature('MAXLIST', 'b:25,eI:50'),
-            (('b', 25), ('eI', 50)))
+            [('b', 25), ('eI', 50)])
 
 
     def test_support_NETWORK(self):
         """
-        Parsing the NETWORK support parameter behaves correctly.
+        The NETWORK support parameter is parsed as the network name, as
+        specified by the server.
         """
         self.assertEquals(
             self._parseFeature('NETWORK', 'IRCNet'),
@@ -276,7 +293,8 @@
 
     def test_support_SAFELIST(self):
         """
-        Parsing the SAFELIST support parameter behaves correctly.
+        The SAFELIST support parameter is parsed into a boolean indicating
+        whether the safe "list" command is supported or not.
         """
         self.assertEquals(
             self._parseFeature('SAFELIST'),
@@ -285,7 +303,8 @@
 
     def test_support_STATUSMSG(self):
         """
-        Parsing the STATUSMSG support parameter behaves correctly.
+        The STATUSMSG support parameter is parsed into a string of channel
+        status that support the exclusive channel notice method.
         """
         self.assertEquals(
             self._parseFeature('STATUSMSG', '@+'),
@@ -294,8 +313,9 @@
 
     def test_support_TARGMAX(self):
         """
-        Parsing the TARGMAX support parameter results in a dictionary mapping
-        strings to integers.
+        The TARGMAX support parameter is parsed into a dictionary, mapping
+        strings to integers, of the maximum number of targets for a particular
+        command.
         """
         self.assertEquals(
             self._parseFeature('TARGMAX', 'PRIVMSG:4,NOTICE:3'),
@@ -303,7 +323,78 @@
              'NOTICE': 3})
 
 
+    def test_support_NICKLEN(self):
+        """
+        The NICKLEN support parameter is parsed into an integer value
+        indicating the maximum length of a nickname the client may use,
+        otherwise, if the parameter is missing or invalid, the default value
+        (as specified by RFC 1459) is used.
+        """
+        default = irc.ServerSupportedFeatures()._features['NICKLEN']
+        self._testIntOrDefaultFeature('NICKLEN', default)
 
+
+    def test_support_CHANNELLEN(self):
+        """
+        The CHANNELLEN support parameter is parsed into an integer value
+        indicating the maximum channel name length, otherwise, if the
+        parameter is missing or invalid, the default value (as specified by
+        RFC 1459) is used.
+        """
+        default = irc.ServerSupportedFeatures()._features['CHANNELLEN']
+        self._testIntOrDefaultFeature('CHANNELLEN', default)
+
+
+    def test_support_CHANTYPES(self):
+        """
+        The CHANTYPES support parameter is parsed into a tuple of
+        valid channel prefix characters.
+        """
+        self.assertEquals(
+            self._parseFeature('CHANTYPES', '#&%'),
+            ('#', '&', '%'))
+
+
+    def test_support_KICKLEN(self):
+        """
+        The KICKLEN support parameter is parsed into an integer value
+        indicating the maximum length of a kick message a client may use.
+        """
+        self._testIntOrDefaultFeature('KICKLEN')
+
+
+    def test_support_PREFIX(self):
+        """
+        The PREFIX support parameter is parsed into a dictionary mapping
+        modes to two-tuples of status symbol and priority.
+        """
+        self.assertEquals(
+            self._parseFeature('PREFIX', None),
+            None)
+        self.assertEquals(
+            self._parseFeature('PREFIX', 'hello'),
+            None)
+        self.assertEquals(
+            self._parseFeature('PREFIX', '(ohv)@%+'),
+            {'o': ('@', 0),
+             'h': ('%', 1),
+             'v': ('+', 2)})
+        self.assertEquals(
+            self._parseFeature('PREFIX', '(hov)@%+'),
+            {'o': ('%', 1),
+             'h': ('@', 0),
+             'v': ('+', 2)})
+
+
+    def test_support_TOPICLEN(self):
+        """
+        The TOPICLEN support parameter is parsed into an integer value
+        indicating the maximum length of a topic a client may set.
+        """
+        self._testIntOrDefaultFeature('TOPICLEN')
+
+
+
 class IRCClientWithoutLogin(irc.IRCClient):
     performLogin = 0
 
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 27138)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -574,7 +574,7 @@
         @param valueProcessor: Callable to process argument values, or C{None}
             to perform no processing
 
-        @rtype: C{tuple} of C{(str, object)}
+        @rtype: C{list} of C{(str, object)}
         @return: Sequence of C{(name, processedValue)}
         """
         if valueProcessor is None:
@@ -586,7 +586,7 @@
                     param += ':'
                 a, b = param.split(':', 1)
                 yield a, valueProcessor(b)
-        return tuple(_parse())
+        return list(_parse())
     _splitParamArgs = classmethod(_splitParamArgs)
 
 
@@ -636,12 +636,21 @@
     def _parsePrefixParam(cls, prefix):
         """
         Parse the ISUPPORT "PREFIX" parameter.
+
+        The order in which the parameter arguments appear is significant, the
+        earlier a mode appears the more privileges it gives.
+
+        @rtype: C{dict} mapping C{str} to C{(str, int)}
+        @return: A dictionary mapping a mode character to a two-tuple of
+            C({symbol, priority)}, the lower a priority (the lowest being
+            C{0}) the more privileges it gives
         """
         if not prefix:
             return None
         if prefix[0] != '(' and ')' not in prefix:
             return None
         modes, symbols = prefix.split(')', 1)
+        symbols = zip(symbols, xrange(len(symbols)))
         modes = modes[1:]
         return dict(zip(modes, symbols))
     _parsePrefixParam = classmethod(_parsePrefixParam)
@@ -761,7 +770,7 @@
         The presence of this parameter indicates that the server supports
         this functionality.
         """
-        return list(self._splitParamArgs(params))
+        return self._splitParamArgs(params)
 
 
     def isupport_INVEX(self, params):
