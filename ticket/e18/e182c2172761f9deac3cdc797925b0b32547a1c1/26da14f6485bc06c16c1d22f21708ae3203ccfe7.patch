Index: twisted/test/test_log.py
===================================================================
--- twisted/test/test_log.py	(revision 30993)
+++ twisted/test/test_log.py	(working copy)
@@ -557,3 +557,28 @@
         finally:
             log.PythonLoggingObserver.emit = oldEmit
 
+
+class DefaultObserverTestCase(unittest.TestCase):
+    """
+    Test the default observer.
+    """
+
+    def test_failureLogger(self):
+        """
+        The reason argument passed to log.err() appears in the report
+        generated by DefaultObserver.
+        """
+        from StringIO import StringIO
+        
+        obs = log.DefaultObserver()
+        obs.stderr = StringIO()
+        obs.start()
+
+        reason = "The reason."
+        log.err(Exception(), reason)
+        errors = self.flushLoggedErrors()
+
+        self.assertSubstring(reason, obs.stderr.getvalue())
+        self.assertEquals(len(errors), 1)
+
+        obs.stop()
Index: twisted/python/log.py
===================================================================
--- twisted/python/log.py	(revision 30993)
+++ twisted/python/log.py	(working copy)
@@ -634,16 +634,19 @@
     Will ignore all non-error messages and send error messages to sys.stderr.
     Will be removed when startLogging() is called for the first time.
     """
+    stderr = sys.stderr
 
     def _emit(self, eventDict):
         if eventDict["isError"]:
             if 'failure' in eventDict:
-                text = eventDict['failure'].getTraceback()
+                text = ((eventDict.get('why') or 'Unhandled Error')
+                        + '\n' + eventDict['failure'].getTraceback())
             else:
                 text = " ".join([str(m) for m in eventDict["message"]]) + "\n"
-            sys.stderr.write(text)
-            sys.stderr.flush()
 
+            self.stderr.write(text)
+            self.stderr.flush()
+
     def start(self):
         addObserver(self._emit)
 
