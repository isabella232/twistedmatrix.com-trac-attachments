Index: twisted/protocols/loopback.py
===================================================================
--- twisted/protocols/loopback.py	(révision 27479)
+++ twisted/protocols/loopback.py	(copie de travail)
@@ -62,6 +62,9 @@
     def __init__(self, q):
         self.q = q
 
+    def logPrefix(self):
+        return "loopback"
+
     def write(self, bytes):
         self.q.put(bytes)
 
Index: twisted/conch/test/test_ssh.py
===================================================================
--- twisted/conch/test/test_ssh.py	(révision 27479)
+++ twisted/conch/test/test_ssh.py	(copie de travail)
@@ -1,5 +1,5 @@
 # -*- test-case-name: twisted.conch.test.test_ssh -*-
-# Copyright (c) 2001-2007 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2009 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 import struct
@@ -23,27 +23,67 @@
 from twisted.internet.error import ProcessTerminated
 from twisted.python import failure, log
 from twisted.trial import unittest
+from twisted.protocols.loopback import loopbackAsync
 
-from test_recvline import LoopbackRelay
+from zope.interface import implements
 
 
 
 class ConchTestRealm:
+    """
+    Realm generating avatars for an authenticated users.
+    """
+    implements(portal.IRealm)
+
+    def __init__(self, avatar=None):
+        """
+        Initialize class with a avatar.
+        @param avatar: an instance of C{avatar.ConchUser}.
+        """
+        if avatar is None:
+            avatar = ConchTestAvatar()
+        self.avatar = avatar
+
 
     def requestAvatar(self, avatarID, mind, *interfaces):
+        """
+        Return a new avatar. If avatar implements a C{logout} method it'll be
+        invoked at the end of avatar's existence.
+        """
         unittest.assertEquals(avatarID, 'testuser')
-        a = ConchTestAvatar()
-        return interfaces[0], a, a.logout
+        logout = getattr(self.avatar, 'logout', lambda: None)
+        if not callable(logout):
+            logout = lambda: None
+        return interfaces[0], self.avatar, logout
+
+
+
+class ConchTestBaseAvatar(avatar.ConchUser):
+    """
+    Base class for creating avatars.
+    """
 
-class ConchTestAvatar(avatar.ConchUser):
-    loggedOut = False
 
     def __init__(self):
+        """
+        Add C{session.SSHSession} to avaliable channels.
+        """
         avatar.ConchUser.__init__(self)
+        self.channelLookup.update({'session': session.SSHSession})
+
+
+
+class ConchTestAvatar(ConchTestBaseAvatar):
+    loggedOut = False
+
+    def __init__(self):
+        ConchTestBaseAvatar.__init__(self)
         self.listeners = {}
-        self.channelLookup.update({'session': session.SSHSession,
-                        'direct-tcpip':forwarding.openConnectForwardingClient})
-        self.subsystemLookup.update({'crazy': CrazySubsystem})
+        self.channelLookup.update({'direct-tcpip':
+                                   forwarding.openConnectForwardingClient})
+        self.subsystemLookup.update({'crazy': CrazySubsystem,
+            'test_connectionLost': TestConnectionLostSubsystem})
+
 
     def global_foo(self, data):
         unittest.assertEquals(data, 'bar')
@@ -83,7 +127,10 @@
             log.msg('stopListening %s' % listener)
             listener.stopListening()
 
+
+
 class ConchSessionForTestAvatar:
+    implements(session.ISession)
 
     def __init__(self, avatar):
         unittest.assert_(isinstance(avatar, ConchTestAvatar))
@@ -130,10 +180,6 @@
             t.loseConnection()
         self.avatar.conn.transport.expectedLoseConnection = 1
 
-#    def closeReceived(self):
-#        #if self.proto:
-#        #   self.proto.transport.loseConnection()
-#        self.loseConnection()
 
     def eofReceived(self):
         self.eof = 1
@@ -149,8 +196,37 @@
         elif self.cmd == 'shell':
             unittest.assert_(self.eof)
 
+
+class ConchSessionTestLoseConnection:
+    """
+    Test if closing client's session is raising an exception.
+    """
+    implements(session.ISession)
+
+    def __init__(self, avatar):
+        """
+        Initialize class with a avatar.
+        """
+        self.avatar = avatar
+
+
+    def execCommand(self, proto, cmd):
+        """
+        Try to close client's side connection.
+        """
+        proto.loseConnection()
+
+
+    def closed(self):
+        pass
+
+
+
 from twisted.python import components
 components.registerAdapter(ConchSessionForTestAvatar, ConchTestAvatar, session.ISession)
+components.registerAdapter(ConchSessionTestLoseConnection, ConchTestBaseAvatar, session.ISession)
+
+
 
 class CrazySubsystem(protocol.Protocol):
 
@@ -162,6 +239,37 @@
         good ... good
         """
 
+
+
+class TestConnectionLostSubsystem(protocol.Protocol):
+    """
+    A SSH subsystem that disconnects at first received data. It also records
+    the number of times C{connectionLost} is called with the
+    C{connectionLostCount} of the session transport.
+    """
+
+    def __init__(self, *args, **kw):
+        """
+        Ignore arguments.
+        """
+
+
+    def connectionLost(self, reason):
+        """
+        Record call on the C{connectionLostCount} attribute on the session
+        transport.
+        """
+        self.transport.session.conn.transport.connectionLostCount += 1
+
+
+    def dataReceived(self, data):
+        """
+        Disconnect the tranport once some data is received.
+        """
+        self.transport.loseConnection()
+
+
+
 class FalseTransport:
 
     def __init__(self, p):
@@ -249,12 +373,17 @@
                 self.assertEquals(c(), struct.pack('!H', (i + 1) % (2 ** 16)))
 
 
+
     class ConchTestPublicKeyChecker(checkers.SSHPublicKeyDatabase):
+
         def checkKey(self, credentials):
             unittest.assertEquals(credentials.username, 'testuser', 'bad username')
-            unittest.assertEquals(credentials.blob, keys.getPublicKeyString(data=publicDSA_openssh))
+            unittest.assertEquals(credentials.blob,
+                                  keys.Key.fromString(publicDSA_openssh).blob())
             return 1
 
+
+
     class ConchTestPasswordChecker:
         credentialInterfaces = checkers.IUsernamePassword,
 
@@ -291,18 +424,21 @@
             self.proto = proto
             return proto
 
+
         def getPublicKeys(self):
             return {
-                'ssh-rsa':keys.getPublicKeyString(data=publicRSA_openssh),
-                'ssh-dss':keys.getPublicKeyString(data=publicDSA_openssh)
+                'ssh-rsa': keys.Key.fromString(publicRSA_openssh),
+                'ssh-dss': keys.Key.fromString(publicDSA_openssh)
             }
 
+
         def getPrivateKeys(self):
             return {
-                'ssh-rsa':keys.getPrivateKeyObject(data=privateRSA_openssh),
-                'ssh-dss':keys.getPrivateKeyObject(data=privateDSA_openssh)
+                'ssh-rsa': keys.Key.fromString(privateRSA_openssh),
+                'ssh-dss': keys.Key.fromString(privateDSA_openssh)
             }
 
+
         def getPrimes(self):
             return {
                 2048:[(transport.DH_GENERATOR, transport.DH_PRIME)]
@@ -314,7 +453,6 @@
     class ConchTestBase:
 
         done = 0
-        allowedToError = 0
 
         def connectionLost(self, reason):
             if self.done:
@@ -323,13 +461,16 @@
                 unittest.fail('unexpectedly lost connection %s\n%s' % (self, reason))
             self.done = 1
 
+
         def receiveError(self, reasonCode, desc):
             self.expectedLoseConnection = 1
-            if not self.allowedToError:
-                unittest.fail('got disconnect for %s: reason %s, desc: %s' %
-                               (self, reasonCode, desc))
+            if reasonCode != transport.DISCONNECT_CONNECTION_LOST:
+                raise RuntimeError(
+                    "Unexpected disconnection: reason %s, desc %s" % (
+                   (reasonCode, desc)))
             self.loseConnection()
 
+
         def receiveUnimplemented(self, seqID):
             unittest.fail('got unimplemented: seqid %s'  % seqID)
             self.expectedLoseConnection = 1
@@ -335,7 +476,10 @@
             self.expectedLoseConnection = 1
             self.loseConnection()
 
+
+
     class ConchTestServer(ConchTestBase, transport.SSHServerTransport):
+        connectionLostCount = 0
 
         def connectionLost(self, reason):
             ConchTestBase.connectionLost(self, reason)
@@ -341,8 +485,19 @@
             ConchTestBase.connectionLost(self, reason)
             transport.SSHServerTransport.connectionLost(self, reason)
 
+
+
     class ConchTestClient(ConchTestBase, transport.SSHClientTransport):
 
+        def __init__(self, auth):
+            """
+            @type auth: C{SSHUserAuthClient}
+            @param auth: an instance of SSHUserAuthClient used for a user
+                authentication.
+            """
+            self.auth = auth
+
+
         def connectionLost(self, reason):
             ConchTestBase.connectionLost(self, reason)
             transport.SSHClientTransport.connectionLost(self, reason)
@@ -347,14 +502,19 @@
             ConchTestBase.connectionLost(self, reason)
             transport.SSHClientTransport.connectionLost(self, reason)
 
+
         def verifyHostKey(self, key, fp):
-            unittest.assertEquals(key, keys.getPublicKeyString(data = publicRSA_openssh))
-            unittest.assertEquals(fp,'3d:13:5f:cb:c9:79:8a:93:06:27:65:bc:3d:0b:8f:af')
+            unittest.assertEquals(key,
+                    keys.Key.fromString(publicRSA_openssh).blob())
+            unittest.assertEquals(fp,
+                '3d:13:5f:cb:c9:79:8a:93:06:27:65:bc:3d:0b:8f:af')
             return defer.succeed(1)
 
+
         def connectionSecure(self):
-            self.requestService(ConchTestClientAuth('testuser',
-                ConchTestClientConnection()))
+            self.requestService(self.auth)
+
+
 
     class ConchTestClientAuth(userauth.SSHUserAuthClient):
 
@@ -371,28 +532,65 @@
             self.canSucceedPassword = 1
             return defer.succeed('testpass')
 
+
         def getPrivateKey(self):
             self.canSucceedPublicKey = 1
-            return defer.succeed(keys.getPrivateKeyObject(data=privateDSA_openssh))
+            return defer.succeed(keys.Key.fromString(privateDSA_openssh).keyObject)
+
 
         def getPublicKey(self):
-            return keys.getPublicKeyString(data=publicDSA_openssh)
+            return keys.Key.fromString(publicDSA_openssh).blob()
 
-    class ConchTestClientConnection(connection.SSHConnection):
 
+    class ConchTestClientBaseConnection(connection.SSHConnection):
+        """
+        Base class for opening channels.
+        """
         name = 'ssh-connection'
+
+        def __init__(self, testChannels=[]):
+            """
+            @type testChannels: C{list}
+            @param testChannels: list of double tuples: C{SSHChannel} class and
+                dictionary where keys and values are later used as named
+                instantiation arguments for this class. By default the C{conn}
+                argument passed to create the C{SSHChannel} instances is set to
+                C{self}.
+            """
+            connection.SSHConnection.__init__(self)
+            self.testChannels = testChannels
+
+
+        def serviceStarted(self):
+            """
+            Create and open every C{SSHChannel} passed at init.
+            """
+            for ch in self.testChannels:
+                chan, kwargs = ch
+                kwargs['conn'] = self
+                self.openChannel(chan(**kwargs))
+
+
+
+    class ConchTestClientConnection(ConchTestClientBaseConnection):
+
         results = 0
         totalResults = 8
 
         def serviceStarted(self):
-            self.openChannel(SSHTestFailExecChannel(conn = self))
-            self.openChannel(SSHTestFalseChannel(conn = self))
-            self.openChannel(SSHTestEchoChannel(localWindow=4, localMaxPacket=5, conn = self))
-            self.openChannel(SSHTestErrChannel(localWindow=4, localMaxPacket=5, conn = self))
-            self.openChannel(SSHTestMaxPacketChannel(localWindow=12, localMaxPacket=1, conn = self))
-            self.openChannel(SSHTestShellChannel(conn = self))
-            self.openChannel(SSHTestSubsystemChannel(conn = self))
-            self.openChannel(SSHUnknownChannel(conn = self))
+            self.testChannels = [
+                (SSHTestFailExecChannel, {}),
+                (SSHTestFalseChannel, {}),
+                (SSHTestEchoChannel, {'localWindow': 4, 'localMaxPacket': 5}),
+                (SSHTestErrChannel, {'localWindow': 4, 'localMaxPacket': 5}),
+                (SSHTestMaxPacketChannel,
+                    {'localWindow': 12, 'localMaxPacket': 1}),
+                (SSHTestShellChannel, {}),
+                (SSHTestSubsystemChannel, {}),
+                (SSHUnknownChannel, {})
+            ]
+            ConchTestClientBaseConnection.serviceStarted(self)
+
 
         def addResult(self):
             self.results += 1
@@ -400,6 +598,9 @@
             if self.results == self.totalResults:
                 self.transport.expectedLoseConnection = 1
                 self.serviceStopped()
+                self.transport.loseConnection()
+
+
 
     class SSHUnknownChannel(channel.SSHChannel):
 
@@ -410,9 +611,9 @@
             good .... good
             """
             log.msg('unknown open failed')
-            log.flushErrors()
             self.conn.addResult()
 
+
         def channelOpen(self, ignored):
             unittest.fail("opened unknown channel")
 
@@ -432,9 +637,9 @@
         def _cbRequestWorked(self, ignored):
             unittest.fail('fail exec succeeded')
 
+
         def _ebRequestWorked(self, ignored):
             log.msg('fail exec finished')
-            log.flushErrors()
             self.conn.addResult()
             self.loseConnection()
 
@@ -691,6 +950,50 @@
 
 
 
+    class SSHTestSubsystemConnectionLostChannel(channel.SSHChannel):
+        """
+        Open test_connectionLost subsystem and send something to the server.
+        """
+        name = 'session'
+
+        def channelOpen(self, data):
+            """
+            Open the test_connectionLost subsystem.
+            """
+            d = self.conn.sendRequest(self, 'subsystem',
+                common.NS('test_connectionLost'), wantReply=True)
+            d.addCallback(self._cbRequestWorked)
+
+
+        def _cbRequestWorked(self, ignored):
+            """
+            Write some data to trigger the disconnection on the server.
+            """
+            self.write('Hello server')
+
+
+        def closeReceived(self):
+            channel.SSHChannel.closeReceived(self)
+            self.conn.transport.loseConnection()
+
+
+    class SSHExecChannel(channel.SSHChannel):
+        """
+        Execute a comand on a server.
+        """
+        name = 'session'
+
+        def channelOpen(self, data):
+            self.conn.sendRequest(self, 'exec',
+                common.NS('some_command'), wantReply=False)
+
+
+        def closeReceived(self):
+            channel.SSHChannel.closeReceived(self)
+            self.conn.transport.loseConnection()
+
+
+
 class SSHProtocolTestCase(unittest.TestCase):
 
     if not Crypto:
@@ -699,10 +1002,17 @@
     if not pyasn1:
         skip = "can't run w/o PyASN1"
 
-    def testOurServerOurClient(self):
-        """test the Conch server against the Conch client
+
+    def _setUp(self, avatar=None, clientConnection=None):
         """
-        realm = ConchTestRealm()
+        Create Conch client and server protocols and loopback transports for
+        them.Should be run at the beggining of each test.
+
+        @paran: avatar: an instance of C{avatar.ConchUser}.
+        """
+        if clientConnection is None:
+            clientConnection = ConchTestClientConnection()
+        realm = ConchTestRealm(avatar)
         p = portal.Portal(realm)
         sshpc = ConchTestSSHChecker()
         sshpc.registerChecker(ConchTestPasswordChecker())
@@ -712,19 +1022,55 @@
         fac.portal = p
         fac.startFactory()
         self.server = fac.buildProtocol(None)
-        self.clientTransport = LoopbackRelay(self.server)
-        self.client = ConchTestClient()
-        self.serverTransport = LoopbackRelay(self.client)
-
-        self.server.makeConnection(self.serverTransport)
-        self.client.makeConnection(self.clientTransport)
-
-        while self.serverTransport.buffer or self.clientTransport.buffer:
-            log.callWithContext({'system': 'serverTransport'},
-                                self.serverTransport.clearBuffer)
-            log.callWithContext({'system': 'clientTransport'},
-                                self.clientTransport.clearBuffer)
-        self.failIf(self.server.done and self.client.done)
+        auth = ConchTestClientAuth('testuser', clientConnection)
+        self.client = ConchTestClient(auth)
+
+
+    def test_ourServerOurClient(self):
+        """
+        Test the Conch server against the Conch client.
+        """
+        self._setUp()
+        def check(ignore):
+            errors = self.flushLoggedErrors(error.ConchError)
+            self.assertEquals(len(errors), 2)
+
+            unknowChannelError = errors[0].value
+            self.assertEquals(unknowChannelError.value, "unknown channel")
+            self.assertEquals(unknowChannelError.data,
+                connection.OPEN_UNKNOWN_CHANNEL_TYPE)
+
+            badExecError = errors[1].value
+            self.assertEquals(badExecError.value, "bad exec")
+            self.assertIdentical(badExecError.data, None)
+        return loopbackAsync(self.server, self.client).addCallback(check)
+
+
+    def test_subsystemConnectionLost(self):
+        """
+        Test if subsystem's connectionLost is executed only once.
+        """
+        clientConnection = ConchTestClientBaseConnection(
+            [(SSHTestSubsystemConnectionLostChannel, {})])
+        self._setUp(clientConnection=clientConnection)
+
+        def check(ignore):
+            self.assertEquals(self.server.connectionLostCount, 1,
+                "subsystem's connectionLost method executed more than once or "
+                "not executed at all.")
+        return loopbackAsync(self.server, self.client).addCallback(check)
+
+
+    def test_sessionLoseConnection(self):
+        """
+        Test closing a client's session by a server.
+        """
+        clientConnection = ConchTestClientBaseConnection(
+            [(SSHExecChannel, {})])
+        self._setUp(avatar=ConchTestBaseAvatar(),
+                    clientConnection=clientConnection)
+        return loopbackAsync(self.server, self.client)
+
 
 
 class TestSSHFactory(unittest.TestCase):
Index: twisted/conch/test/test_session.py
===================================================================
--- twisted/conch/test/test_session.py	(révision 27479)
+++ twisted/conch/test/test_session.py	(copie de travail)
@@ -159,6 +159,8 @@
         Note that close has been received.
         """
         self.gotClosed = True
+        if getattr(self, "execTransport", None) is not None:
+            self.execTransport.loseConnection()
 
 
 
Index: twisted/conch/test/test_filetransfer.py
===================================================================
--- twisted/conch/test/test_filetransfer.py	(révision 27479)
+++ twisted/conch/test/test_filetransfer.py	(copie de travail)
@@ -1,5 +1,5 @@
 # -*- test-case-name: twisted.conch.test.test_filetransfer -*-
-# Copyright (c) 2001-2008 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2009 Twisted Matrix Laboratories.
 # See LICENSE file for details.
 
 
@@ -466,9 +466,26 @@
         return self.assertFailure(d, NotImplementedError)
 
 
+
 class FakeConn:
+    """
+    A dummy C{SSHConnection} object to be used by C{SSHChannel}.
+    """
+
+    def logPrefix(self):
+        """
+        Return a log prefix used when C{callWithContext} is called with this
+        connection.
+        """
+        return 'Fake Connection'
+
+
     def sendClose(self, channel):
-        pass
+        """
+        Close the attached channel.
+        """
+        channel.closed()
+
 
 
 class TestFileTransferClose(unittest.TestCase):
Index: twisted/conch/ssh/session.py
===================================================================
--- twisted/conch/ssh/session.py	(révision 27479)
+++ twisted/conch/ssh/session.py	(copie de travail)
@@ -124,13 +126,6 @@
         elif self.client:
             self.client.transport.loseConnection()
 
-    #def closeReceived(self):
-    #    self.loseConnection() # don't know what to do with this
-
-    def loseConnection(self):
-        if self.client:
-            self.client.transport.loseConnection()
-        channel.SSHChannel.loseConnection(self)
 
 class _ProtocolWrapper(protocol.ProcessProtocol):
     """
Index: twisted/conch/avatar.py
===================================================================
--- twisted/conch/avatar.py	(révision 27479)
+++ twisted/conch/avatar.py	(copie de travail)
@@ -15,7 +15,7 @@
     def lookupChannel(self, channelType, windowSize, maxPacket, data):
         klass = self.channelLookup.get(channelType, None)
         if not klass:
-            raise ConchError(OPEN_UNKNOWN_CHANNEL_TYPE, "unknown channel")
+            raise ConchError("unknown channel", OPEN_UNKNOWN_CHANNEL_TYPE)
         else:
             return klass(remoteWindow = windowSize, 
                          remoteMaxPacket = maxPacket, 
