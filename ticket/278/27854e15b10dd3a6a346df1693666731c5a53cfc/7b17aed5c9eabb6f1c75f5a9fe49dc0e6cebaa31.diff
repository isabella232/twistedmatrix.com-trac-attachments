Index: twisted/internet/test/test_base.py
===================================================================
--- twisted/internet/test/test_base.py	(revision 26783)
+++ twisted/internet/test/test_base.py	(working copy)
@@ -11,9 +11,10 @@
 from zope.interface import implements
 
 from twisted.python.threadpool import ThreadPool
+from twisted.python.util import unsignedID
 from twisted.internet.interfaces import IReactorTime, IReactorThreads
 from twisted.internet.error import DNSLookupError
-from twisted.internet.base import ThreadedResolver
+from twisted.internet.base import ThreadedResolver, DelayedCall
 from twisted.internet.task import Clock
 from twisted.trial.unittest import TestCase
 
@@ -34,8 +35,8 @@
         self.getThreadPool = lambda: self._threadpool
 
         self._threadCalls = Queue()
+        
 
-
     def callFromThread(self, f, *args, **kwargs):
         self._threadCalls.put((f, args, kwargs))
 
@@ -150,3 +151,29 @@
         # Eventually the socket.gethostbyname does finish - in this case, with
         # an exception.  Nobody cares, though.
         result.put(IOError("The I/O was errorful"))
+
+
+def doNothing():
+    """ 
+    Do nothing. This function exists so we can use it in a test.
+    """
+
+
+class DelayedCallTests(TestCase):
+    """
+    Tests for L{DelayedCall}.
+    """
+    
+    def test_strUsesUnsignedID(self):
+        """
+        The C{str} of a L{DelayedCall} instance uses L{unsignedID}.
+        """
+        dc = DelayedCall(12, doNothing, (3, ), {"A": 5}, None, None, lambda: 1.5)
+        self.assertEqual(dc._unsignedID(dc), unsignedID(dc))
+        def _unsignedID(o):
+            self.assertEqual(o, dc)
+            return 100
+        dc._unsignedID = _unsignedID
+        self.assertEqual(str(dc), 
+                         "<DelayedCall 100 [10.5s] called=0 cancelled=0 doNothing(3, A=5)>")
+        
\ No newline at end of file
Index: twisted/internet/base.py
===================================================================
--- twisted/internet/base.py	(revision 26783)
+++ twisted/internet/base.py	(working copy)
@@ -17,6 +17,7 @@
 import traceback
 
 from twisted.python.compat import set
+from twisted.python.util import unsignedID
 from twisted.internet.interfaces import IReactorCore, IReactorTime, IReactorThreads
 from twisted.internet.interfaces import IResolverSimple, IReactorPluggableResolver
 from twisted.internet.interfaces import IConnector, IDelayedCall
@@ -31,13 +32,15 @@
 from twisted.python import threadable
 
 
-class DelayedCall(styles.Ephemeral):
+class DelayedCall(styles.Ephemeral, object):
 
     implements(IDelayedCall)
     # enable .debug to record creator call stack, and it will be logged if
     # an exception occurs while the function is being run
     debug = False
     _str = None
+    
+    _unsignedID = staticmethod(unsignedID)
 
     def __init__(self, time, func, args, kw, cancel, reset,
                  seconds=runtimeSeconds):
@@ -168,7 +171,7 @@
 
         now = self.seconds()
         L = ["<DelayedCall %s [%ss] called=%s cancelled=%s" % (
-                id(self), self.time - now, self.called, self.cancelled)]
+                self._unsignedID(self), self.time - now, self.called, self.cancelled)]
         if func is not None:
             L.extend((" ", func, "("))
             if self.args:
