diff --git twisted/trial/_asynctest.py twisted/trial/_asynctest.py
index 8e0927a..8e197f4 100644
--- twisted/trial/_asynctest.py
+++ twisted/trial/_asynctest.py
@@ -20,6 +20,7 @@ from zope.interface import implementer
 # breaking reactor installation. See also #6047.
 from twisted.internet import defer, utils
 from twisted.python import failure
+from twisted.python.reflect import requireModule
 
 from twisted.trial import itrial, util
 from twisted.trial._synctest import (
@@ -403,3 +404,50 @@ class TestCase(SynchronousTestCase):
         finally:
             results = None
             running.pop()
+
+
+    @staticmethod
+    def getSkipWithoutModules(modules, message=None):
+        """
+        Try to import the modules returning a value which can be assigned to
+        L{TestCase.skip}.
+
+        @param modules: Module name as it would have been passed to C{import}.
+        @type name: C{str}.
+
+        @param message: C{str} message to be used for populating the
+            L{TestCase.skip} member.
+
+        @return: C{None} or C{str} to be used for populating the
+            L{TestCase.skip} member.
+        """
+        for module in modules:
+            if requireModule(module) is not None:
+                continue
+            if message is None:
+                message = '%s is not available.' % (module,)
+            return message
+
+        return None
+
+
+class skipWithoutModules(object):
+    """
+    Decorator for skipping test case or test method when required modules
+    are not present.
+    """
+
+    def __init__(self, modules, message=None):
+        """
+        @param modules: C{List} with module names as C{str}.
+
+        @param message: Message used for populating the L{TestCase.skip}
+            member.
+        """
+        self._modules = modules
+        self._message = message
+
+    def __call__(self, target):
+        target.skip = TestCase.getSkipWithoutModules(
+            self._modules, self._message)
+        return target
diff --git twisted/trial/test/test_testcase.py twisted/trial/test/test_testcase.py
index 1b1d630..28e49cc 100644
--- twisted/trial/test/test_testcase.py
+++ twisted/trial/test/test_testcase.py
@@ -8,6 +8,7 @@ L{twisted.trial.unittest.TestCase}.
 
 from __future__ import division, absolute_import
 
+from twisted.trial.unittest import skipWithoutModules
 from twisted.trial.unittest import SynchronousTestCase, TestCase
 
 
@@ -46,6 +47,86 @@ class TestCaseMixin(object):
         self.assertEqual(len(container), 2)
 
 
+    def test_getSkipWithoutModules_pass(self):
+        """
+        Execute the test when all modules are defined.
+        """
+        pass
+    test_getSkipWithoutModules_pass.skip = TestCase.getSkipWithoutModules(
+        ['twisted', 'sys'])
+
+
+    def test_getSkipWithoutModules_default_message(self):
+        """
+        Skip the test if one module could not be imported.
+        """
+        raise AssertionError('This test should have been skipped.')
+    test_getSkipWithoutModules_default_message.skip = (
+        TestCase.getSkipWithoutModules(
+            ['twisted', 'non.existent.module']))
+
+
+    def test_getSkipWithoutModules_custom_message(self):
+        """
+        Skip the test with a custom skip message.
+        """
+        raise AssertionError('This test should have been skipped.')
+    test_getSkipWithoutModules_custom_message.skip = (
+        TestCase.getSkipWithoutModules(
+            ['twisted', 'non.existent.module'],
+            message='Custom message for missing modules.',
+            )
+        )
+
+
+    @skipWithoutModules(['twisted', 'non.existent.module'])
+    def test_skipWithoutModules_decorator_skip(self):
+        """
+        Can be used as a method decorator.
+        """
+        raise AssertionError('This test should have been skipped.')
+
+
+
+    @skipWithoutModules(['twisted', 'sys'])
+    def test_skipWithoutModules_decorator_pass(self):
+        """
+        Execute the test when all modules are available.
+        """
+        pass
+
+
+
+@skipWithoutModules(['twisted', 'non.existent.module'])
+class SkipWithoutModulesDecoratorSkipTest(TestCase):
+    """
+    Supports decorating a class and will skip all tests from the test case.
+    """
+
+    def test_1_skip(self):
+        raise AssertionError('This test should have been skipped.')
+
+
+    def test_2_skip(self):
+        raise AssertionError('This test should have been skipped.')
+
+
+
+@skipWithoutModules(['twisted', 'sys'])
+class SkipWithoutModulesDecoratorPassTest(TestCase):
+    """
+    Supports decorating a class and will execute all tests from the test case
+    when modules are present.
+    """
+
+    def test_1_pass(self):
+        pass
+
+
+    def test_2_pass(self):
+        pass
+
+
 
 class SynchronousTestCaseTests(TestCaseMixin, SynchronousTestCase):
     class MyTestCase(SynchronousTestCase):
@@ -68,3 +149,4 @@ class AsynchronousTestCaseTests(TestCaseMixin, SynchronousTestCase):
         """
         def test_1(self):
             pass
+
diff --git twisted/trial/unittest.py twisted/trial/unittest.py
index 8f07556..59be17b 100644
--- twisted/trial/unittest.py
+++ twisted/trial/unittest.py
@@ -12,7 +12,7 @@ from __future__ import division, absolute_import
 from twisted.trial._synctest import (
     FailTest, SkipTest, SynchronousTestCase, PyUnitResultAdapter, Todo,
     makeTodo)
-from twisted.trial._asynctest import TestCase
+from twisted.trial._asynctest import skipWithoutModules, TestCase
 
 from twisted.python.compat import _PY3
 
diff --git twisted/words/test/test_domish.py twisted/words/test/test_domish.py
index eb6633e..11c368b 100644
--- twisted/words/test/test_domish.py
+++ twisted/words/test/test_domish.py
@@ -5,7 +5,6 @@
 Tests for L{twisted.words.xish.domish}, a DOM-like library for XMPP.
 """
 
-from twisted.python.reflect import requireModule
 from twisted.trial import unittest
 from twisted.words.xish import domish
 
@@ -250,6 +249,10 @@ class DomishStreamTestsMixin:
 
 
 
+@unittest.skipWithoutModules(
+    modules=['pyexpat'],
+    message='pyexpat is required for ExpatElementStream tests.',
+    )
 class DomishExpatStreamTestCase(DomishStreamTestsMixin, unittest.TestCase):
     """
     Tests for L{domish.ExpatElementStream}, the expat-based element stream
@@ -257,11 +260,6 @@ class DomishExpatStreamTestCase(DomishStreamTestsMixin, unittest.TestCase):
     """
     streamClass = domish.ExpatElementStream
 
-    if requireModule('pyexpat', default=None) is None:
-        skip = "pyexpat is required for ExpatElementStream tests."
-    else:
-        skip = None
-
 
 
 class DomishSuxStreamTestCase(DomishStreamTestsMixin, unittest.TestCase):
diff --git twisted/words/test/test_msn.py twisted/words/test/test_msn.py
index 92a90f5..c79c426 100644
--- twisted/words/test/test_msn.py
+++ twisted/words/test/test_msn.py
@@ -15,17 +15,13 @@ from twisted.test.proto_helpers import StringTransport, StringIOWithoutClosing
 from twisted.trial import unittest
 
 # t.w.p.msn requires an HTTP client
-try:
-    # So try to get one - do it directly instead of catching an ImportError
-    # from t.w.p.msn so that other problems which cause that module to fail
-    # to import don't cause the tests to be skipped.
-    requireModule('twisted.web.client')
-except ImportError:
-    # If there isn't one, we're going to skip all the tests.
-    msn = None
-else:
-    # Otherwise importing it should work, so do it.
+# So try to get one - do it directly instead of catching an ImportError
+# from t.w.p.msn so that other problems which cause that module to fail
+# to import don't cause the tests to be skipped.
+if requireModule('twisted.web.client'):
     from twisted.words.protocols import msn
+else:
+    msn = None
 
 
 
