diff --git twisted/mail/alias.py twisted/mail/alias.py
index b2746f8..8eccea6 100644
--- twisted/mail/alias.py
+++ twisted/mail/alias.py
@@ -24,7 +24,7 @@ from twisted.internet import protocol
 from twisted.internet import defer
 from twisted.python import failure
 from twisted.python import log
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 
 def handle(result, line, filename, lineNo):
@@ -110,10 +110,11 @@ class AliasBase:
         memo[str(self)] = None
         return self.createMessageReceiver()
 
-@implementer(IAlias)
 class AddressAlias(AliasBase):
     """The simplest alias, translating one email address into another."""
 
+    implements(IAlias)
+
     def __init__(self, alias, *args):
         AliasBase.__init__(self, *args)
         self.alias = smtp.Address(alias)
@@ -138,8 +139,8 @@ class AddressAlias(AliasBase):
             return aliasmap[self.alias.local].resolve(aliasmap, memo)
         return None
 
-@implementer(smtp.IMessage)
 class FileWrapper:
+    implements(smtp.IMessage)
 
     def __init__(self, filename):
         self.fp = tempfile.TemporaryFile()
@@ -169,9 +170,10 @@ class FileWrapper:
         return '<FileWrapper %s>' % (self.finalname,)
 
 
-@implementer(IAlias)
 class FileAlias(AliasBase):
 
+    implements(IAlias)
+
     def __init__(self, filename, *args):
         AliasBase.__init__(self, *args)
         self.filename = filename
@@ -191,7 +193,6 @@ class ProcessAliasTimeout(Exception):
 
 
 
-@implementer(smtp.IMessage)
 class MessageWrapper:
     """
     A message receiver which delivers content to a child process.
@@ -210,6 +211,7 @@ class MessageWrapper:
     @ivar reactor: An L{IReactorTime} provider which will be used to schedule
         timeouts.
     """
+    implements(smtp.IMessage)
 
     done = False
 
@@ -308,7 +310,6 @@ class ProcessAliasProtocol(protocol.ProcessProtocol):
 
 
 
-@implementer(IAlias)
 class ProcessAlias(AliasBase):
     """
     An alias which is handled by the execution of a particular program.
@@ -316,6 +317,7 @@ class ProcessAlias(AliasBase):
     @ivar reactor: An L{IReactorProcess} and L{IReactorTime} provider which
         will be used to create and timeout the alias child process.
     """
+    implements(IAlias)
 
     reactor = reactor
 
@@ -351,12 +353,13 @@ class ProcessAlias(AliasBase):
 
 
 
-@implementer(smtp.IMessage)
 class MultiWrapper:
     """
     Wrapper to deliver a single message to multiple recipients.
     """
 
+    implements(smtp.IMessage)
+
     def __init__(self, objs):
         self.objs = objs
 
@@ -378,7 +381,6 @@ class MultiWrapper:
 
 
 
-@implementer(IAlias)
 class AliasGroup(AliasBase):
     """
     An alias which points to more than one recipient.
@@ -387,6 +389,8 @@ class AliasGroup(AliasBase):
     @type processAliasFactory: C{class}
     """
 
+    implements(IAlias)
+
     processAliasFactory = ProcessAlias
 
     def __init__(self, items, *args):
diff --git twisted/mail/imap4.py twisted/mail/imap4.py
index e8ec532..3562578 100644
--- twisted/mail/imap4.py
+++ twisted/mail/imap4.py
@@ -34,7 +34,7 @@ try:
 except:
     import StringIO
 
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 from twisted.protocols import basic
 from twisted.protocols import policies
@@ -457,7 +457,6 @@ class IMailboxListener(Interface):
         C{None}.
         """
 
-@implementer(IMailboxListener)
 class IMAP4Server(basic.LineReceiver, policies.TimeoutMixin):
     """
     Protocol implementation for an IMAP4rev1 server.
@@ -468,6 +467,7 @@ class IMAP4Server(basic.LineReceiver, policies.TimeoutMixin):
         - Selected
         - Logout
     """
+    implements(IMailboxListener)
 
     # Identifier for this server software
     IDENT = 'Twisted IMAP4rev1 Ready'
@@ -2193,13 +2193,13 @@ class IllegalServerResponse(IMAP4Exception): pass
 
 TIMEOUT_ERROR = error.TimeoutError()
 
-@implementer(IMailboxListener)
 class IMAP4Client(basic.LineReceiver, policies.TimeoutMixin):
     """IMAP4 client protocol implementation
 
     @ivar state: A string representing the state the connection is currently
     in.
     """
+    implements(IMailboxListener)
 
     tags = None
     waiting = None
@@ -4389,8 +4389,8 @@ class IClientAuthentication(Interface):
 
 
 
-@implementer(IClientAuthentication)
 class CramMD5ClientAuthenticator:
+    implements(IClientAuthentication)
 
     def __init__(self, user):
         self.user = user
@@ -4404,8 +4404,8 @@ class CramMD5ClientAuthenticator:
 
 
 
-@implementer(IClientAuthentication)
 class LOGINAuthenticator:
+    implements(IClientAuthentication)
 
     def __init__(self, user):
         self.user = user
@@ -4423,8 +4423,8 @@ class LOGINAuthenticator:
         # Respond to something like "Password:"
         return secret
 
-@implementer(IClientAuthentication)
 class PLAINAuthenticator:
+    implements(IClientAuthentication)
 
     def __init__(self, user):
         self.user = user
@@ -4643,8 +4643,8 @@ class INamespacePresenter(Interface):
         """
 
 
-@implementer(IAccount, INamespacePresenter)
 class MemoryAccount(object):
+    implements(IAccount, INamespacePresenter)
 
     mailboxes = None
     subscriptions = None
diff --git twisted/mail/mail.py twisted/mail/mail.py
index 2ae886c..07789aa 100644
--- twisted/mail/mail.py
+++ twisted/mail/mail.py
@@ -20,7 +20,7 @@ from twisted.mail import protocols, smtp
 
 # System imports
 import os
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 
 class DomainWithDefaultDict:
@@ -178,13 +178,14 @@ class IAliasableDomain(IDomain):
         user does not exist in this domain.
         """
 
-@implementer(IDomain)
 class BounceDomain:
     """A domain in which no user exists.
 
     This can be used to block off certain domains.
     """
 
+    implements(IDomain)
+
     def exists(self, user):
         raise smtp.SMTPBadRcpt(user)
 
@@ -205,10 +206,11 @@ class BounceDomain:
         return []
 
 
-@implementer(smtp.IMessage)
 class FileMessage:
     """A file we can write an email too."""
 
+    implements(smtp.IMessage)
+
     def __init__(self, fp, name, finalName):
         self.fp = fp
         self.name = name
diff --git twisted/mail/maildir.py twisted/mail/maildir.py
index f33f2fa..7927b32 100644
--- twisted/mail/maildir.py
+++ twisted/mail/maildir.py
@@ -11,7 +11,7 @@ import os
 import stat
 import socket
 
-from zope.interface import implementer
+from zope.interface import implements
 
 try:
     import cStringIO as StringIO
@@ -170,8 +170,8 @@ class AbstractMaildirDomain:
     ## end of IDomain
     ##
 
-@implementer(interfaces.IConsumer)
 class _MaildirMailboxAppendMessageTask:
+    implements(interfaces.IConsumer)
 
     osopen = staticmethod(os.open)
     oswrite = staticmethod(os.write)
@@ -355,7 +355,6 @@ class MaildirMailbox(pop3.Mailbox):
         task.startUp()
         return result
 
-@implementer(pop3.IMailbox)
 class StringListMailbox:
     """
     L{StringListMailbox} is an in-memory mailbox.
@@ -366,6 +365,7 @@ class StringListMailbox:
     @ivar _delete: A C{set} of the indexes of messages which have been deleted
         since the last C{sync} call.
     """
+    implements(pop3.IMailbox)
 
     def __init__(self, msgs):
         self.msgs = msgs
@@ -425,11 +425,12 @@ class StringListMailbox:
 
 
 
-@implementer(portal.IRealm, mail.IAliasableDomain)
 class MaildirDirdbmDomain(AbstractMaildirDomain):
     """A Maildir Domain where membership is checked by a dirdbm file
     """
 
+    implements(portal.IRealm, mail.IAliasableDomain)
+
     portal = None
     _credcheckers = None
 
@@ -499,8 +500,8 @@ class MaildirDirdbmDomain(AbstractMaildirDomain):
             lambda: None
         )
 
-@implementer(checkers.ICredentialsChecker)
 class DirdbmDatabase:
+    implements(checkers.ICredentialsChecker)
 
     credentialInterfaces = (
         credentials.IUsernamePassword,
diff --git twisted/mail/pop3.py twisted/mail/pop3.py
index aa02a4f..3b65242 100644
--- twisted/mail/pop3.py
+++ twisted/mail/pop3.py
@@ -15,7 +15,7 @@ import base64
 import binascii
 import warnings
 
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 from twisted.mail import smtp
 from twisted.protocols import basic
@@ -33,8 +33,8 @@ import twisted.cred.credentials
 ##
 ## Authentication
 ##
-@implementer(cred.credentials.IUsernamePassword)
 class APOPCredentials:
+    implements(cred.credentials.IUsernamePassword)
 
     def __init__(self, magic, username, digest):
         self.magic = magic
@@ -247,7 +247,6 @@ def formatUIDListResponse(msgs, getUidl):
 
 
 
-@implementer(interfaces.IProducer)
 class POP3(basic.LineOnlyReceiver, policies.TimeoutMixin):
     """
     POP3 server protocol implementation.
@@ -265,6 +264,7 @@ class POP3(basic.LineOnlyReceiver, policies.TimeoutMixin):
     @ivar schedule: A one-argument callable which should behave like
     L{twisted.internet.task.coiterate}.
     """
+    implements(interfaces.IProducer)
 
     magic = None
     _userIs = None
@@ -940,8 +940,8 @@ class IMailbox(Interface):
 
 
 
-@implementer(IMailbox)
 class Mailbox:
+    implements(IMailbox)
 
     def listMessages(self, i=None):
         return []
diff --git twisted/mail/protocols.py twisted/mail/protocols.py
index b7a5a70..446592b 100644
--- twisted/mail/protocols.py
+++ twisted/mail/protocols.py
@@ -21,12 +21,13 @@ import twisted.cred.credentials
 
 from twisted.mail import relay
 
-from zope.interface import implementer
+from zope.interface import implements
 
 
-@implementer(smtp.IMessageDelivery)
 class DomainDeliveryBase:
     """A server that uses twisted.mail service's domains."""
+
+    implements(smtp.IMessageDelivery)
     
     service = None
     protocolName = None
diff --git twisted/mail/smtp.py twisted/mail/smtp.py
index f950a2e..3b8bd0a 100644
--- twisted/mail/smtp.py
+++ twisted/mail/smtp.py
@@ -10,7 +10,7 @@ import time, re, base64, types, socket, os, random, rfc822
 import binascii
 from email.base64MIME import encode as encode_base64
 
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 from twisted.copyright import longversion
 from twisted.protocols import basic
@@ -1750,8 +1750,8 @@ class LOGINCredentials(_lcredentials):
 
 
 
-@implementer(IClientAuthentication)
 class PLAINAuthenticator:
+    implements(IClientAuthentication)
 
     def __init__(self, user):
         self.user = user
diff --git twisted/mail/test/test_imap.py twisted/mail/test/test_imap.py
index 21f6905..79f1830 100644
--- twisted/mail/test/test_imap.py
+++ twisted/mail/test/test_imap.py
@@ -17,7 +17,7 @@ import locale
 import os
 import types
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.mail.imap4 import MessageSet
 from twisted.mail import imap4
@@ -885,8 +885,8 @@ class IMAP4HelperTestCase(unittest.TestCase):
                 self.assertEqual(L, expected,
                                   "len(%r) = %r != %r" % (input, L, expected))
 
-@implementer(imap4.IMailboxInfo, imap4.IMailbox, imap4.ICloseableMailbox)
 class SimpleMailbox:
+    implements(imap4.IMailboxInfo, imap4.IMailbox, imap4.ICloseableMailbox)
 
     flags = ('\\Flag1', 'Flag2', '\\AnotherSysFlag', 'LastFlag')
     messages = []
@@ -3268,8 +3268,8 @@ class FakeyServer(imap4.IMAP4Server):
     def sendServerGreeting(self):
         pass
 
-@implementer(imap4.IMessage)
 class FakeyMessage(util.FancyStrMixin):
+    implements(imap4.IMessage)
 
     showAttributes = ('headers', 'flags', 'date', 'body', 'uid')
 
@@ -4211,8 +4211,8 @@ class DefaultSearchTestCase(IMAP4HelperMixin, unittest.TestCase):
 
 
 
-@implementer(imap4.ISearchableMailbox)
 class FetchSearchStoreTestCase(unittest.TestCase, IMAP4HelperMixin):
+    implements(imap4.ISearchableMailbox)
 
     def setUp(self):
         self.expected = self.result = None
@@ -4331,8 +4331,8 @@ class FakeMailbox:
         self.args.append((body, flags, date))
         return defer.succeed(None)
 
-@implementer(imap4.IMessageFile)
 class FeaturefulMessage:
+    implements(imap4.IMessageFile)
 
     def getFlags(self):
         return 'flags'
@@ -4343,8 +4343,8 @@ class FeaturefulMessage:
     def open(self):
         return StringIO("open")
 
-@implementer(imap4.IMessageCopier)
 class MessageCopierMailbox:
+    implements(imap4.IMessageCopier)
 
     def __init__(self):
         self.msgs = []
diff --git twisted/mail/test/test_mail.py twisted/mail/test/test_mail.py
index 2e34829..6d2bddd 100644
--- twisted/mail/test/test_mail.py
+++ twisted/mail/test/test_mail.py
@@ -14,7 +14,7 @@ import rfc822
 import tempfile
 import signal
 
-from zope.interface import Interface, implementer
+from zope.interface import Interface, implements
 
 from twisted.trial import unittest
 from twisted.mail import smtp
@@ -625,11 +625,11 @@ class MaildirDirdbmDomainTestCase(unittest.TestCase):
         self.assertEqual(database.requestAvatarId(creds), 'user')
 
 
-@implementer(mail.mail.IAliasableDomain)
 class StubAliasableDomain(object):
     """
     Minimal testable implementation of IAliasableDomain.
     """
+    implements(mail.mail.IAliasableDomain)
 
     def exists(self, user):
         """
diff --git twisted/mail/test/test_pop3.py twisted/mail/test/test_pop3.py
index d7a4367..4379a1e 100644
--- twisted/mail/test/test_pop3.py
+++ twisted/mail/test/test_pop3.py
@@ -10,7 +10,7 @@ import hmac
 import base64
 import itertools
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet import defer
 
@@ -416,8 +416,8 @@ class AnotherPOP3TestCase(unittest.TestCase):
         dummy.connectionLost(failure.Failure(Exception("Test harness disconnect")))
 
 
-@implementer(pop3.IServerFactory)
 class TestServerFactory:
+    implements(pop3.IServerFactory)
 
     def cap_IMPLEMENTATION(self):
         return "Test Implementation String"
diff --git twisted/mail/test/test_smtp.py twisted/mail/test/test_smtp.py
index 4368c48..058bb8e 100644
--- twisted/mail/test/test_smtp.py
+++ twisted/mail/test/test_smtp.py
@@ -5,7 +5,7 @@
 Test cases for twisted.mail.smtp module.
 """
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.python.util import LineLog
 from twisted.trial import unittest, util
@@ -47,13 +47,13 @@ def spameater(*spam, **eggs):
 
 
 
-@implementer(smtp.IMessage)
 class BrokenMessage(object):
     """
     L{BrokenMessage} is an L{IMessage} which raises an unexpected exception
     from its C{eomReceived} method.  This is useful for creating a server which
     can be used to test client retry behavior.
     """
+    implements(smtp.IMessage)
 
     def __init__(self, user):
         pass
@@ -531,8 +531,8 @@ class AnotherSMTPTestCase(AnotherTestCase, unittest.TestCase):
 
 
 
-@implementer(cred.checkers.ICredentialsChecker)
 class DummyChecker:
+    implements(cred.checkers.ICredentialsChecker)
 
     users = {
         'testuser': 'testpassword'
@@ -553,12 +553,12 @@ class DummyChecker:
 
 
 
-@implementer(smtp.IMessageDelivery)
 class SimpleDelivery(object):
     """
     L{SimpleDelivery} is a message delivery factory with no interesting
     behavior.
     """
+    implements(smtp.IMessageDelivery)
 
     def __init__(self, messageFactory):
         self._messageFactory = messageFactory
@@ -983,12 +983,12 @@ class SMTPSenderFactoryRetryTestCase(unittest.TestCase):
 
 
 
-@implementer(IRealm)
 class SingletonRealm(object):
     """
     Trivial realm implementation which is constructed with an interface and an
     avatar and returns that avatar when asked for that interface.
     """
+    implements(IRealm)
 
     def __init__(self, interface, avatar):
         self.interface = interface
@@ -1152,11 +1152,11 @@ class SMTPServerTestCase(unittest.TestCase):
         L{smtp.SMTP} instance's portal is responded to with the correct error
         code.
         """
-        @implementer(ICredentialsChecker)
         class DisallowAnonymousAccess(object):
             """
             Checker for L{IAnonymous} which rejects authentication attempts.
             """
+            implements(ICredentialsChecker)
 
             credentialInterfaces = (IAnonymous,)
 
