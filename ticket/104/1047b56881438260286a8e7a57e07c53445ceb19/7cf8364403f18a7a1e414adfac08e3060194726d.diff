Index: twisted/mail/relaymanager.py
===================================================================
--- twisted/mail/relaymanager.py	(revision 13546)
+++ twisted/mail/relaymanager.py	(working copy)
@@ -386,7 +386,7 @@
             factory = self.factory(msgs, self, *self.fArgs, **self.fKwArgs)
             self.managed[factory] = map(os.path.basename, msgs)
             self.mxcalc.getMX(domain
-            ).addCallback(lambda mx: str(mx.exchange),
+            ).addCallback(lambda mx: str(mx.name),
             ).addCallback(self._cbExchange, self.PORT, factory
             ).addErrback(self._ebExchange, factory, domain
             )
@@ -459,7 +459,7 @@
             raise IOError("No MX found for %r" % (domain,))
         answers = util.dsu(answers, lambda e: e.preference)
         for answer in answers:
-            host = str(answer.exchange)
+            host = str(answer.name)
             if host not in self.badMXs:
                 return answer
             t = time.time() - self.badMXs[host]
@@ -476,6 +476,6 @@
             # Alright, I admit, this is a bit icky.
             from twisted.names import dns
             return self.resolver.getHostByName(domain
-                ).addCallback(lambda h: dns.Record_MX(exchange=h)
+                ).addCallback(lambda h: dns.Record_MX(name=h)
                 )
         return failure
Index: twisted/mail/test/test_mail.py
===================================================================
--- twisted/mail/test/test_mail.py	(revision 13546)
+++ twisted/mail/test/test_mail.py	(working copy)
@@ -753,12 +753,14 @@
     self.resolver = client.Resolver(servers=[('127.0.0.1', portNumber)])
 
 def tearDownDNS(self):
-    self.port.stopListening()
-    self.udpPort.stopListening()
+    dl = []
+    dl.append(defer.maybeDeferred(self.port.stopListening))
+    dl.append(defer.maybeDeferred(self.udpPort.stopListening))
     try:
         self.resolver._parseCall.cancel()
     except:
         pass
+    return defer.DeferredList(dl)
 
 class MXTestCase(unittest.TestCase):
     def setUp(self):
@@ -774,7 +776,7 @@
 
     def _cbSimpleSuccess(self, mx):
         self.assertEquals(mx.preference, 0)
-        self.assertEquals(str(mx.exchange), 'the.email.test.domain')
+        self.assertEquals(str(mx.name), 'the.email.test.domain')
 
     def testSimpleFailure(self):
         self.mx.fallbackToDomain = False
@@ -792,33 +794,33 @@
             )
     
     def _cbManyRecordsSuccessfulLookup(self, mx):
-        self.failUnless(str(mx.exchange).split('.', 1)[0] in ('mx1', 'mx2', 'mx3'))
-        self.mx.markBad(str(mx.exchange))
+        self.failUnless(str(mx.name).split('.', 1)[0] in ('mx1', 'mx2', 'mx3'))
+        self.mx.markBad(str(mx.name))
         return self.mx.getMX('test.domain'
             ).addCallback(self._cbManyRecordsDifferentResult, mx
             )
     
     def _cbManyRecordsDifferentResult(self, nextMX, mx):
-        self.assertNotEqual(str(mx.exchange), str(nextMX.exchange))
-        self.mx.markBad(str(nextMX.exchange))
+        self.assertNotEqual(str(mx.name), str(nextMX.name))
+        self.mx.markBad(str(nextMX.name))
 
         return self.mx.getMX('test.domain'
             ).addCallback(self._cbManyRecordsLastResult, mx, nextMX
             )
     
     def _cbManyRecordsLastResult(self, lastMX, mx, nextMX):
-        self.assertNotEqual(str(mx.exchange), str(lastMX.exchange))
-        self.assertNotEqual(str(nextMX.exchange), str(lastMX.exchange))
+        self.assertNotEqual(str(mx.name), str(lastMX.name))
+        self.assertNotEqual(str(nextMX.name), str(lastMX.name))
 
-        self.mx.markBad(str(lastMX.exchange))
-        self.mx.markGood(str(nextMX.exchange))
+        self.mx.markBad(str(lastMX.name))
+        self.mx.markGood(str(nextMX.name))
         
         return self.mx.getMX('test.domain'
             ).addCallback(self._cbManyRecordsRepeatSpecificResult, nextMX
             )
     
     def _cbManyRecordsRepeatSpecificResult(self, againMX, nextMX):
-        self.assertEqual(str(againMX.exchange), str(nextMX.exchange))
+        self.assertEqual(str(againMX.name), str(nextMX.name))
 
 class LiveFireExercise(unittest.TestCase):
     if interfaces.IReactorUDP(reactor, default=None) is None:
