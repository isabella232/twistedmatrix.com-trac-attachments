Index: twisted/web/test/test_webclient.py
===================================================================
--- twisted/web/test/test_webclient.py	(revision 24566)
+++ twisted/web/test/test_webclient.py	(working copy)
@@ -10,7 +10,7 @@
 from urlparse import urlparse
 
 from twisted.trial import unittest
-from twisted.web import server, static, client, error, util, resource
+from twisted.web import server, static, client, error, util, resource, http
 from twisted.internet import reactor, defer, interfaces
 from twisted.python.filepath import FilePath
 from twisted.protocols.policies import WrappingFactory
@@ -100,7 +100,15 @@
         return util.Redirect.render(self, request)
 
 
+class BrokenRedirect(resource.Resource):
+    def __init__(self, path, *a, **kw):
+        resource.Resource.__init__(self, *a, **kw)
+        self.path = path
+    def render(self, request):
+        request.setResponseCode(http.FOUND)
+        request.setHeader("location", self.path)
 
+
 class ParseUrlTestCase(unittest.TestCase):
     """
     Test URL parsing facility and defaults values.
@@ -149,6 +157,9 @@
         FilePath(name).child("file").setContent("0123456789")
         r = static.File(name)
         r.putChild("redirect", util.Redirect("/file"))
+        r.putChild("rel_redirect_startslash", BrokenRedirect("/redirect_target"))
+        r.putChild("rel_redirect_nostartslash", BrokenRedirect("redirect_target"))
+        r.putChild("rel_target", static.Data("success", "text/plain"))
         self.infiniteRedirectResource = CountingRedirect("/infiniteRedirect")
         r.putChild("infiniteRedirect", self.infiniteRedirectResource)
         r.putChild("wait", ForeverTakingResource())
@@ -343,7 +354,22 @@
     def _cbCheckLocation(self, exc):
         self.assertEquals(exc.location, "/file")
 
+    def testRelativeRedirect(self):
+        deferreds = []
+        deferreds.append(
+            client.getPage(self.getURL("rel_redirect_no_startslash")).addCallback(
+            self._cbRelativeRedirectNoStartingSlash))
+        deferreds.append(
+            client.getPage(self.getURL("rel_redirect_startslash")).addCallback(
+            self._cbRelativeRedirectStartingSlash))
+        return defer.DeferredList(deferreds)
 
+    def _cbRelativeRedirectNoStartingSlash(self, pageData):
+        self.assertEquals(pageData, "success")
+
+    def _cbRelativeRedirectStartingSlash(self, pageData):
+        self.assertEquals(pageData, "success")
+
     def test_infiniteRedirection(self):
         """
         When more than C{redirectLimit} HTTP redirects are encountered, the
