Index: twisted/test/test_usage.py
===================================================================
--- twisted/test/test_usage.py	(revision 38447)
+++ twisted/test/test_usage.py	(working copy)
@@ -359,6 +359,7 @@
 
         self.nice = WellBehaved()
 
+
     def test_noGoBoom(self):
         """
         __str__ shouldn't go boom.
@@ -368,6 +369,7 @@
         except Exception, e:
             self.fail(e)
 
+
     def test_whitespaceStripFlagsAndParameters(self):
         """
         Extra whitespace in flag and parameters docs is stripped.
@@ -378,17 +380,37 @@
         self.failUnless(len(lines) > 0)
         self.failUnless(lines[0].find("flagallicious") >= 0)
 
-    def test_longdescNotWrapped(self):
+
+    def test_whitespaceStripLongdesc(self):
         """
-        L{usage.Options.getUsage} does not wrap lines in C{longdesc}.
+        Extra whitespace at the beginning and end of C{longdesc} is stripped.
         """
-        self.nice.longdesc = ("\nA test documentation string.\n"
-                    "This line has more than 80 characters-"
-                    "PADDINGXXPADDINGXXPADDINGXXPADDINGXXPADDINGXXPADDING\n")
-        self.nice.getUsage(width=80)
-        self.assertTrue(len(self.nice.longdesc.splitlines()[2]) > 80)
+        self.nice.longdesc = "\n\nA test documentation string.\n\n"
+        expected = "\nA test documentation string.\n"
+        self.assertEqual(self.nice._getLongdesc(), expected)
 
 
+    def test_getLongdescFromAttribute(self):
+        """
+        L{usage.Options._getLongdesc} reads C{longdesc} from a class
+        attribute.
+        """
+        self.nice.longdesc = "\nA test documentation string.\n"
+        self.assertEqual(self.nice.longdesc, self.nice._getLongdesc())
+
+
+    def test_getLongdescFromMainDoc(self):
+        """
+        L{usage.Options._getLongdesc} reads longdesc from 
+        C{__main__.__doc__}.
+        """
+        longdesc = "\nA test documentation string.\n"
+        import __main__
+        self.patch(__main__, '__doc__', longdesc)
+        self.assertEqual(longdesc, self.nice._getLongdesc())
+
+
+
 class PortCoerceTestCase(unittest.TestCase):
     """
     Test the behavior of L{usage.portCoerce}.
Index: twisted/python/usage.py
===================================================================
--- twisted/python/usage.py	(revision 38447)
+++ twisted/python/usage.py	(working copy)
@@ -472,7 +472,26 @@
 
         return synopsis
 
+
     def getUsage(self, width=None):
+        """
+        Returns a string which describes the usage details of the program.
+
+        It includes descriptions of the following in this order, if they exist:
+            1. Options and parameters
+            2. The program itself
+            3. Subcommands
+
+        The list of options and subcommands is automatically wrapped to the
+        given width or to the width of the current terminal if none is 
+        given. The description of the program itself is not wrapped.
+
+        @param width: The width of the terminal, used to wrap the list of
+                      options and subcommands. It will be autodetected if
+                      not specified.
+        @type  width: number
+        """
+
         # If subOptions exists by now, then there was probably an error while
         # parsing its options.
         if hasattr(self, 'subOptions'):
@@ -524,31 +543,43 @@
                  'dispatch': self._dispatch.get(opt, None)
                  })
 
-        if not (getattr(self, "longdesc", None) is None):
+        if optDicts:
+            chunks = docMakeChunks(optDicts, width)
+            s = "Options:\n%s" % (''.join(chunks))
+        else:
+            s = "Options: None\n"
+
+        return s + self._getLongdesc() + commands
+
+
+    def _getLongdesc(self):
+        """
+        Returns a description of the program, looking first in C{self.longdesc}
+        and then in C{__main__.__doc__}. If found, the description is formatted
+        to contain exactly one leading and trailing linebreak.
+        """
+
+        longdesc = ''
+
+        if getattr(self, "longdesc", None):
             longdesc = self.longdesc
         else:
             import __main__
             if getattr(__main__, '__doc__', None):
                 longdesc = __main__.__doc__
-            else:
-                longdesc = ''
 
         if longdesc:
             longdesc = '\n' + longdesc.strip() + '\n'
 
-        if optDicts:
-            chunks = docMakeChunks(optDicts, width)
-            s = "Options:\n%s" % (''.join(chunks))
-        else:
-            s = "Options: None\n"
+        return longdesc
 
-        return s + longdesc + commands
 
     #def __repr__(self):
     #    XXX: It'd be cool if we could return a succinct representation
     #        of which flags and options are set here.
 
 
+
 _ZSH = 'zsh'
 _BASH = 'bash'
 
Index: twisted/scripts/trial.py
===================================================================
--- twisted/scripts/trial.py	(revision 38447)
+++ twisted/scripts/trial.py	(working copy)
@@ -101,8 +101,9 @@
     synopsis = """%s [options] [[file|package|module|TestCase|testmethod]...]
     """ % (os.path.basename(sys.argv[0]),)
 
-    longdesc = ("trial loads and executes a suite of unit tests, obtained "
-                "from modules, packages and files listed on the command line.")
+    longdesc = """\
+trial loads and executes a suite of unit tests, obtained from modules,
+packages and files listed on the command line."""
 
     optFlags = [["help", "h"],
                 ["no-recurse", "N", "Don't recurse into packages"],
Index: twisted/conch/scripts/conch.py
===================================================================
--- twisted/conch/scripts/conch.py	(revision 38447)
+++ twisted/conch/scripts/conch.py	(working copy)
@@ -21,8 +21,9 @@
 
     synopsis = """Usage:   conch [options] host [command]
 """
-    longdesc = ("conch is a SSHv2 client that allows logging into a remote "
-                "machine and executing commands.")
+    longdesc = """\
+conch is a SSHv2 client that allows logging into a remote machine and 
+executing commands."""
 
     optParameters = [['escape', 'e', '~'],
                       ['localforward', 'L', None, 'listen-port:host:port   Forward local port to remote address'],
Index: twisted/conch/scripts/cftp.py
===================================================================
--- twisted/conch/scripts/cftp.py	(revision 38447)
+++ twisted/conch/scripts/cftp.py	(working copy)
@@ -22,8 +22,9 @@
          cftp [options] [user@]host[:dir[/]]
          cftp [options] [user@]host[:file [localfile]]
 """
-    longdesc = ("cftp is a client for logging into a remote machine and "
-                "executing commands to send and receive file information")
+    longdesc = """\
+cftp is a client for logging into a remote machine and executing commands to
+send and receive file information."""
 
     optParameters = [
                     ['buffersize', 'B', 32768, 'Size of the buffer to use for sending/receiving.'],
Index: twisted/conch/tap.py
===================================================================
--- twisted/conch/tap.py	(revision 38447)
+++ twisted/conch/tap.py	(working copy)
@@ -21,10 +21,11 @@
 
 class Options(usage.Options, strcred.AuthOptionMixin):
     synopsis = "[-i <interface>] [-p <port>] [-d <dir>] "
-    longdesc = ("Makes a Conch SSH server.  If no authentication methods are "
-        "specified, the default authentication methods are UNIX passwords, "
-        "SSH public keys, and PAM if it is available.  If --auth options are "
-        "passed, only the measures specified will be used.")
+    longdesc = """\
+Makes a Conch SSH server.  If no authentication methods are specified, the
+default authentication methods are UNIX passwords, SSH public keys, and PAM
+if it is available.  If --auth options are passed, only the measures specified
+will be used."""
     optParameters = [
         ["interface", "i", "", "local interface to which we listen"],
         ["port", "p", "tcp:22", "Port on which to listen"],
Index: twisted/application/app.py
===================================================================
--- twisted/application/app.py	(revision 38447)
+++ twisted/application/app.py	(working copy)
@@ -539,8 +539,9 @@
 
 class ServerOptions(usage.Options, ReactorSelectionMixin):
 
-    longdesc = ("twistd reads a twisted.application.service.Application out "
-                "of a file and runs it.")
+    longdesc = """\
+twistd reads a twisted.application.service.Application out of a file and
+runs it."""
 
     optFlags = [['savestats', None,
                  "save the Stats object rather than the text output of "
