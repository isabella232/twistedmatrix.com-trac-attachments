Index: twisted/test/test_usage.py
===================================================================
--- twisted/test/test_usage.py	(revision 38174)
+++ twisted/test/test_usage.py	(working copy)
@@ -24,6 +24,9 @@
                  """],
                 ['flout', 'o'],
                 ]
+    longdesc = ("\nA test documentation string.\n"
+                "    This is an indented line longer than 80 characters: "
+                "PADDING PADDING PADDING PADDING PADDING PADDING\n")
 
     def opt_myflag(self):
         self.opts['myflag'] = "PONY!"
@@ -378,15 +381,22 @@
         self.failUnless(len(lines) > 0)
         self.failUnless(lines[0].find("flagallicious") >= 0)
 
-    def test_longdescNotWrapped(self):
+    def test_getUsageWrapped(self):
         """
-        L{usage.Options.getUsage} does not wrap lines in C{longdesc}.
+        L{usage.Options.getUsage} wraps lines to the specified width.
+        """        
+        usage = self.nice.getUsage(width=80)
+        for line in usage.splitlines():
+            self.assertTrue(len(line) <= 80)
+
+    def test_getUsageIndentation(self):
         """
-        self.nice.longdesc = ("\nA test documentation string.\n"
-                    "This line has more than 80 characters-"
-                    "PADDINGXXPADDINGXXPADDINGXXPADDINGXXPADDINGXXPADDING\n")
-        self.nice.getUsage(width=80)
-        self.assertTrue(len(self.nice.longdesc.splitlines()[2]) > 80)
+        L{usage.Options.getUsage} maintains consistent indentation when
+        wrapping lines in longdesc.
+        """
+        usage = self.nice.getUsage(width=80)
+        self.assertEqual(usage.splitlines()[-2][:4], "    ")
+        self.assertEqual(usage.splitlines()[-1][:4], "    ")
 
 
 class PortCoerceTestCase(unittest.TestCase):
Index: twisted/test/test_text.py
===================================================================
--- twisted/test/test_text.py	(revision 38174)
+++ twisted/test/test_text.py	(working copy)
@@ -73,13 +73,24 @@
                       "%d < %s" % (len(failures), len(self.output),
                                    self.lineWidth, failures))
 
+
+    def test_singleNewline(self):
+        """
+        Lines separated by one \n are considered part of the same paragraph.
+        """
+        sampleText = "foo\nbar\ndaz"
+        result = text.wordWrap(sampleText, self.lineWidth)
+        self.assertEqual(result, ["foo bar daz"])
+
+
     def test_doubleNewline(self):
         """
-        Allow paragraphs delimited by two \ns.
+        Allow paragraphs delimited by two \ns, but don't add a random trailing
+        line at the end.
         """
         sampleText = "et\n\nphone\nhome."
         result = text.wordWrap(sampleText, self.lineWidth)
-        self.assertEqual(result, ["et", "", "phone home.", ""]) 
+        self.assertEqual(result, ["et", "", "phone home."]) 
 
 
 
Index: twisted/python/usage.py
===================================================================
--- twisted/python/usage.py	(revision 38174)
+++ twisted/python/usage.py	(working copy)
@@ -16,6 +16,7 @@
 import os
 import sys
 import getopt
+import textwrap
 from os import path
 
 # Sibling Imports
@@ -534,7 +535,13 @@
                 longdesc = ''
 
         if longdesc:
-            longdesc = '\n' + longdesc.strip() + '\n'
+            wrappedLongdesc = '\n'
+            for line in longdesc.strip().splitlines():
+                indent = line[:len(line) - len(line.lstrip())]
+                wrappedLongdesc += '\n'.join(
+                                        textwrap.wrap(line, width,
+                                                      subsequent_indent=indent)
+                                        ) + '\n'
 
         if optDicts:
             chunks = docMakeChunks(optDicts, width)
@@ -542,7 +549,7 @@
         else:
             s = "Options: None\n"
 
-        return s + longdesc + commands
+        return s + wrappedLongdesc + commands
 
     #def __repr__(self):
     #    XXX: It'd be cool if we could return a succinct representation
Index: twisted/python/text.py
===================================================================
--- twisted/python/text.py	(revision 38174)
+++ twisted/python/text.py	(working copy)
@@ -7,7 +7,10 @@
 Miscellany of text-munging functions.
 """
 
+# System imports
+import textwrap
 
+
 def stringyString(object, indentation=''):
     """
     Expansive string formatting for sequence types.
@@ -127,9 +130,29 @@
     return outLines
 
 
-wordWrap = greedyWrap
+def pythonWrap(text, width=80):
+    """
+    Given a string and a column width, return a list of lines each with length
+    at most width.
+    \n\n is the paragraph delimiter, and forces a line break.
 
+    L{textwrap.wrap} from the standard library is used to do the wrapping.
+    """
 
+    outLines = []
+
+    for paragraph in text.split('\n\n'):
+        outLines.extend(textwrap.wrap(paragraph, width) + [''])
+
+    # remove the final blank line from outLines
+    outLines.pop()
+
+    return outLines
+
+
+wordWrap = pythonWrap
+
+
 def removeLeadingBlanks(lines):
     ret = []
     for line in lines:
