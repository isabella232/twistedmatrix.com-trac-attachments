Index: python/filepath.py
===================================================================
--- python/filepath.py	(revision 23101)
+++ python/filepath.py	(working copy)
@@ -386,6 +386,26 @@
             if reraise:
                 raise
 
+    def chmod(self, mode):
+        """
+        Changes the permissions on self, if possible.  Propagates errors from
+        os.chmod up.
+        
+        @param mode: int representing the new permissions desired.  (same as
+        the command line chmod)
+        """
+        os.chmod(self.path, mode)
+
+    def chown(self, uid, gid):
+        """
+        Changes the ownership of self, if possible.  Propagates errors from
+        os.chown up.
+
+        @param uid: the uid of the new owner
+        @param gid: the gid of the old owner
+        """
+        os.chown(self.path, uid, gid)
+
     def getsize(self):
         st = self.statinfo
         if not st:
Index: test/test_paths.py
===================================================================
--- test/test_paths.py	(revision 23101)
+++ test/test_paths.py	(working copy)
@@ -255,8 +255,48 @@
         self.all = [x.replace(self.cmn, self.cmn+'.zip') for x in self.all]
 
 
+class Verification:
+    """
+    Class to mock some function and see if it was called
+    """
+    def __init__(self, replaceObject, replaceFuncName):
+        self.wasICalled = False
+        self.replace = (replaceObject, replaceFuncName,
+                        getattr(replaceObject, replaceFuncName))
+        setattr(self.replace[0], self.replace[1], self.callMe)
+        
+    def callMe(self, *args, **kwargs):
+        """
+        Function with which to mock another function
+        """
+        self.wasICalled = True
+        self.args = args
+        self.kwargs = kwargs
+        setattr(*self.replace)
+
+
 class FilePathTestCase(AbstractFilePathTestCase):
 
+    def test_chmod(self):
+        """
+        Since FilePath.chmod simply passes arguments to os.chmod, simply need
+        to make sure that os.chmod is called.
+        """
+        v = Verification(os, "chmod")
+        self.path.child("sub1").chmod(0770)
+        self.assertTrue(v.wasICalled)
+        self.assertEquals(v.args, (self.path.child("sub1").path, 0770))
+        
+    def test_chown(self):
+        """
+        Since FilePath.chown simply passes arguments to os.chown, simply need
+        to make sure that os.chown is called.
+        """
+        v = Verification(os, "chown")
+        self.path.child("sub1").chown(1000, 1000)
+        self.assertTrue(v.wasICalled)
+        self.assertEquals(v.args, (self.path.child("sub1").path, 1000, 1000))
+
     def test_getAndSet(self):
         content = 'newcontent'
         self.path.child('new').setContent(content)
