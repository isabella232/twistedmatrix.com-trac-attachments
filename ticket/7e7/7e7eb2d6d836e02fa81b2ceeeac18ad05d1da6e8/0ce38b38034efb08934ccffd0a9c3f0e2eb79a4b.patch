Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 27319)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -1198,14 +1198,25 @@
         """
         Called when we try to register or change to a nickname that is already
         taken.
-
-        If we are in the process of registering, call self.setNick()
-        again with a hopefully sufficiently modified argument.
         """
-        self._attemptedNick = self._attemptedNick + '_'
+        self._attemptedNick = self.alterCollidedNick(self._attemptedNick)
         self.setNick(self._attemptedNick)
 
 
+    def alterCollidedNick(self, nickname):
+        """
+        Generate an altered version of a nickname that caused a collision in an
+        effort to create an unused related name for subsequent registration.
+
+        @param nickname: The nickname a user is attempting to register.
+        @type nickname: C{str}
+
+        @returns: A string that is in some way different from the nickname.
+        @rtype: C{str}
+        """
+        return nickname + '_'
+
+
     def irc_ERR_ERRONEUSNICKNAME(self, prefix, params):
         """
         Called when we try to register or change to an illegal nickname.
Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 27319)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -754,6 +754,20 @@
         self.assertEquals(lastLine, 'NICK %s' % (username + '__',))
 
 
+    def test_overrideAlterCollidedNick(self):
+        """
+        L{IRCClient.alterCollidedNick} determines how a nickname is altered upon
+        collision while a user is trying to change to that nickname.
+        """
+        nick = 'foo'
+        self.protocol.alterCollidedNick = lambda nick: nick + '***'
+        self.protocol.register(nick)
+        self.protocol.irc_ERR_NICKNAMEINUSE('prefix', ['param'])
+        lastLine = self.getLastLine(self.transport)
+        self.assertEquals(
+            lastLine, 'NICK %s' % (nick + '***',))
+
+
     def test_nickChange(self):
         """
         When a NICK command is sent after signon, C{IRCClient.nickname} is set
Index: doc/words/examples/ircLogBot.py
===================================================================
--- doc/words/examples/ircLogBot.py	(revision 27319)
+++ doc/words/examples/ircLogBot.py	(working copy)
@@ -109,6 +109,17 @@
         self.logger.log("%s is now known as %s" % (old_nick, new_nick))
 
 
+    # For fun, override the method that determines how a nickname is changed on
+    # collisions. The default method appends an underscore.
+    def alterCollidedNick(self, nickname):
+        """
+        Generate an altered version of a nickname that caused a collision in an
+        effort to create an unused related name for subsequent registration.
+        """
+        return nickname + '^'
+
+
+
 class LogBotFactory(protocol.ClientFactory):
     """A factory for LogBots.
 
