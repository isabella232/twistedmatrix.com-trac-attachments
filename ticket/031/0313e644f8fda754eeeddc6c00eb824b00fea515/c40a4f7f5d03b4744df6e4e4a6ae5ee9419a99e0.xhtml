<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>The Evolution of Finger: moving to a component based architecture</title>
  </head>
<body>

<h1>The Evolution of Finger: moving to a component based architecture</h1>

<h2>Introduction</h2>

<p> This is the fourth part of the Twisted tutorial <a
href="index.xhtml">Twisted from Scratch, or The Evolution of Finger</a>.</p>

<p>In this section of the tutorial, we'll move our code to a component
architecture so that adding new features is trivial.</p>

<h2>Write Maintainable Code</h2>


<p>In the last version, the service class was three times longer than
any other class, and was hard to understand. This was because it turned
out to have multiple responsibilities. It had to know how to access
user information, by rereading the file every half minute,
but also how to display itself in a myriad of protocols. Here, we
used the component-based architecture that Twisted provides to achieve
a separation of concerns. All the service is responsible for, now,
is supporting getUser/getUsers. It declares its support via a call to
zope.interface.implements. Then, adapters are used to make this service
look like an appropriate class for various things: for supplying
a finger factory to TCPServer, for supplying a resource to site's
constructor, and to provide an IRC client factory for TCPClient.
All the adapters use are the methods in FingerService they are
declared to use: getUser/getUsers. We could, of course,
skip the interfaces and let the configuration code use
things like FingerFactoryFromService(f) directly. However, using
interfaces provides the same flexibility inheritance gives: future
subclasses can override the adapters.</p>

<h2>Interfaces and Adapters</h2>

<p>Zope is described as "an open source application server for building content 
management systems, intranets, portals, and custom applications," but for our 
purposes we're only going to be interested one particular part of Zope: 
zope.interfaces.</p>

<p>The new version of the code below uses several interfaces: 
<code>IFingerService</code>, <code>IFingerSetterService</code>, <code>IFingerFactory</code>, 
and <code>IIRCClientFactory</code>.  You'll 
notice that each interface is defined with a line like
<pre class="python">
class IFoobar(Interface):
</pre>
followed by a number of function definitions, each of which contains only a 
docstring.  (Obviously, each of these interfaces also has a name that starts 
with a capital "I", as per the standard interface-naming convention.)</p>

<p>The purpose of writing the code in this manner is to make it easier to 
maintain and change in the future.  For instance, the 
<code>FingerService</code> class defined later in the code contains the line
<pre class="python">
implements(IFingerService)
</pre>
This line indicates to whoever is reading the code that 
<code>FingerService</code> implements <code>IFingerService</code> and should 
therefore contain functions named <code>getUser</code> and 
<code>getUsers</code>, as defined in <code>IFingerService</code>.</p>

<p><code base="API" class="twisted">twisted.python</code> further extends this concept with 
<i>components</i>.  Consider the following line:
<pre class="python">
components.registerAdapter(FingerFactoryFromService,
                           IFingerService,
                           IFingerFactory)
</pre>
This line indicates that <code>FingerFactoryFromService</code> is an 
<code>IFingerService</code> adapter for the <code>IFingerFactory</code> class.  
Consider what happens when the <code>IFingerFactory</code> is instantiated 
with something that implements <code>IFingerService</code>, as at the end of 
the code:
<pre class="python">
f = FingerService('/etc/users')
internet.TCPServer(79, IFingerFactory(f)
                   ).setServiceParent(serviceCollection)
</pre>
If <code>IFingerFactory</code> was instantiated here with an object that 
actually implemented <code>IFingerFactory</code>, we would get that object. 
Instead, since we're instantiating with a <code>FingerService</code>, the code 
recognizes that we previously registered <code>FingerFactoryFromService</code> 
as an <i>adapter</i> for <code>IFingerService</code> with the 
<code base="API" class="twisted.python.components">registerAdapter</code> command used above.  Thus, 
the appropriately-named <code>FingerFactoryFromService</code> <i>adapter</i> is 
returned instead.  (Note that <code>FingerFactoryFromService</code> implements 
<code>IFingerFactory</code>.)</p>

<p>Next, take a look at the <code>FingerFactoryFromService</code> definition. When 
one of these objects is constructed as an adapter, the "adaptee" (in this case, 
<code>FingerService</code>) is actually used as one of the arguments.  That is 
why the line
<pre class="python">
self.service = service
</pre>
is used in <code>__init__</code>, in order to give the new 
<code>FingerFactoryFromService</code> object a <code>service</code> attribute 
that corresponds to the service it was constructed with.  As per the 
<code>IFingerFactory</code> interface that <code>FingerFactoryFromService</code> 
implements, this definition also specifies the object's <code>getUser</code> 
function; the <code>buildProtocol</code> function is inherited from the 
<code base="API" class="twisted.internet.protocol">ServerFactory</code> parent 
(or, to be precise, <code base="API" class="twisted.internet.protocol">Factory</code>).</p>

<p>Several other adapters are <i>registered</i> in this manner:
<ul>
<li><code>IFingerSetterFactory</code> adapts <code>IFingerService</code> 
with <code>FingerSetterFactoryFromService</code>.</li>
<li><code>IIRCClientFactory</code> adapts
<code>IFingerService</code> with <code>IRCClientFactoryFromService</code>.</li>
<li><code>resource.IResource</code> adapts 
<code>IFingerService</code> with <code>UserStatusTree</code>.</li></ul></p>

<p>Read on for why this is actually useful.</p>

<a href="listings/finger/finger19.tac" class="py-listing">finger19.tac</a>

<h2>Advantages of Latest Version</h2>

<p>Despite the extra complexity, using adapters and interfaces has provided 
several advantages here:
<ul>
<li>Readabiliy &mdash; each class is short</li>
<li>Maintainability &mdash; each class knows only about interfaces</li>
<li>Dependencies between code parts are minimized</li>
</ul>

<p>And perhaps most significantly, the code is easy to extend.  You might have 
noticed that we didn't set up the <code>FingerSetterFactoryFromService</code> 
on port 1079 in the above code; in fact, we didn't even define a 
<code>setUser</code> function in <code>FingerService</code>.  Let's fix this 
now:</p>
<a href="listings/finger/finger19a_changes.py" class="py-listing">finger19a_changes.py</a>
<p>Because this new <code>MemoryFingerService</code> implements 
<code>IFingerSetterService</code>, when we construct 
<code>IFingerSetterFactory</code> with the <code>MemoryFingerService</code> named 
<code>f</code>, a <code>FingerSetterFactoryFromService</code> is constructed 
with <code>f</code> as an argument, because that's the adapter we registered 
before.  Since <code>MemoryFingerService</code> also implements 
<code>IFingerService</code> and provides <code>getUser</code> and 
<code>getUsers</code>, we can use it as a complete replacement for the old 
<code>FingerService</code> we used above.</p>

<p>Here, then, is the full code with the new <code>MemoryFingerService</code> 
integrated:
<a class="py-listing" href="listings/finger/finger19a.tac">finger19a.tac</a>
</p>

<h2>Aspect-Oriented Programming</h2>

<p>At last, an example of aspect-oriented programming that isn't about logging
or timing. This code is actually useful! Watch how aspect-oriented programming
helps you write less code and have fewer dependencies!
</p>

</p>
</body>
</html>
