Index: twisted/trial/unittest.py
===================================================================
--- twisted/trial/unittest.py	(revision 22086)
+++ twisted/trial/unittest.py	(working copy)
@@ -109,7 +109,8 @@
     """
 
     def fail(self, msg=None):
-        """absolutely fails the test, do not pass go, do not collect $200
+        """
+        Absolutely fail the test.  Do not pass go, do not collect $200.
 
         @param msg: the message that will be displayed as the reason for the
         failure
@@ -117,7 +118,8 @@
         raise self.failureException(msg)
 
     def failIf(self, condition, msg=None):
-        """fails the test if C{condition} evaluates to False
+        """
+        Fail the test if C{condition} evaluates to True.
 
         @param condition: any object that defines __nonzero__
         """
@@ -127,7 +129,8 @@
     assertNot = assertFalse = failUnlessFalse = failIf
 
     def failUnless(self, condition, msg=None):
-        """fails the test if C{condition} evaluates to True
+        """
+        Fail the test if C{condition} evaluates to False.
 
         @param condition: any object that defines __nonzero__
         """
@@ -137,16 +140,18 @@
     assert_ = assertTrue = failUnlessTrue = failUnless
 
     def failUnlessRaises(self, exception, f, *args, **kwargs):
-        """fails the test unless calling the function C{f} with the given C{args}
-        and C{kwargs} raises C{exception}. The failure will report the
-        traceback and call stack of the unexpected exception.
+        """
+        Fail the test unless calling the function C{f} with the given
+        C{args} and C{kwargs} raises C{exception}. The failure will report
+        the traceback and call stack of the unexpected exception.
 
         @param exception: exception type that is to be expected
         @param f: the function to call
 
         @return: The raised exception instance, if it is of the given type.
-        @raise self.failureException: Raised if the function call does not raise an exception
-        or if it raises an exception of a different type.
+        @raise self.failureException: Raised if the function call does
+            not raise an exception or if it raises an exception of a
+            different type.
         """
         try:
             result = f(*args, **kwargs)
@@ -181,8 +186,10 @@
     assertEqual = assertEquals = failUnlessEquals = failUnlessEqual
 
     def failUnlessIdentical(self, first, second, msg=None):
-        """fail the test if C{first} is not C{second}. This is an
-        obect-identity-equality test, not an object equality (i.e. C{__eq__}) test
+        """
+        Fail the test if C{first} is not C{second}.  This is an
+        obect-identity-equality test, not an object equality
+        (i.e. C{__eq__}) test.
 
         @param msg: if msg is None, then the failure message will be
         '%r is not %r' % (first, second)
@@ -193,8 +200,10 @@
     assertIdentical = failUnlessIdentical
 
     def failIfIdentical(self, first, second, msg=None):
-        """fail the test if C{first} is C{second}. This is an
-        obect-identity-equality test, not an object equality (i.e. C{__eq__}) test
+        """
+        Fail the test if C{first} is C{second}.  This is an
+        obect-identity-equality test, not an object equality
+        (i.e. C{__eq__}) test.
 
         @param msg: if msg is None, then the failure message will be
         '%r is %r' % (first, second)
@@ -205,7 +214,8 @@
     assertNotIdentical = failIfIdentical
 
     def failIfEqual(self, first, second, msg=None):
-        """fail the test if C{first} == C{second}
+        """
+        Fail the test if C{first} == C{second}.
 
         @param msg: if msg is None, then the failure message will be
         '%r == %r' % (first, second)
@@ -216,7 +226,8 @@
     assertNotEqual = assertNotEquals = failIfEquals = failIfEqual
 
     def failUnlessIn(self, containee, container, msg=None):
-        """fail the test if C{containee} is not found in C{container}
+        """
+        Fail the test if C{containee} is not found in C{container}.
 
         @param containee: the value that should be in C{container}
         @param container: a sequence type, or in the case of a mapping type,
@@ -231,7 +242,8 @@
     assertIn = failUnlessIn
 
     def failIfIn(self, containee, container, msg=None):
-        """fail the test if C{containee} is found in C{container}
+        """
+        Fail the test if C{containee} is found in C{container}.
 
         @param containee: the value that should not be in C{container}
         @param container: a sequence type, or in the case of a mapping type,
@@ -246,7 +258,8 @@
     assertNotIn = failIfIn
 
     def failIfAlmostEqual(self, first, second, places=7, msg=None):
-        """Fail if the two objects are equal as determined by their
+        """
+        Fail if the two objects are equal as determined by their
         difference rounded to the given number of decimal places
         (default 7) and comparing to zero.
 
@@ -264,7 +277,8 @@
     failIfAlmostEquals = failIfAlmostEqual
 
     def failUnlessAlmostEqual(self, first, second, places=7, msg=None):
-        """Fail if the two objects are unequal as determined by their
+        """
+        Fail if the two objects are unequal as determined by their
         difference rounded to the given number of decimal places
         (default 7) and comparing to zero.
 
@@ -282,7 +296,8 @@
     failUnlessAlmostEquals = failUnlessAlmostEqual
 
     def failUnlessApproximates(self, first, second, tolerance, msg=None):
-        """asserts that C{first} - C{second} > C{tolerance}
+        """
+        Fail if C{first} - C{second} > C{tolerance}
 
         @param msg: if msg is None, then the failure message will be
                     '%r ~== %r' % (first, second)
@@ -293,10 +308,11 @@
     assertApproximates = failUnlessApproximates
 
     def failUnlessFailure(self, deferred, *expectedFailures):
-        """Assert that C{deferred} will errback with one of
-        C{expectedFailures}.  Returns the original Deferred with callbacks
-        added. You will need to return this Deferred from your test case.
         """
+        Fail if C{deferred} does not errback with one of C{expectedFailures}.
+        Returns the original Deferred with callbacks added. You will need
+        to return this Deferred from your test case.
+        """
         def _cb(ignore):
             raise self.failureException(
                 "did not catch an error, instead got %r" % (ignore,))
@@ -312,10 +328,16 @@
     assertFailure = failUnlessFailure
 
     def failUnlessSubstring(self, substring, astring, msg=None):
+        """
+        Fail if C{substring} does not exist within C{astring}.
+        """
         return self.failUnlessIn(substring, astring, msg)
     assertSubstring = failUnlessSubstring
 
     def failIfSubstring(self, substring, astring, msg=None):
+        """
+        Fail if C{astring} contains C{substring}.
+        """
         return self.failIfIn(substring, astring, msg)
     assertNotSubstring = failIfSubstring
 
@@ -368,8 +390,8 @@
 
     def failUnlessIsInstance(self, instance, classOrTuple):
         """
-        Assert that the given instance is of the given class or of one of the
-        given classes.
+        Fail if C{instance} is not an instance of the given class or of
+        one of the given classes.
 
         @param instance: the object to test the type (first argument of the
             C{isinstance} call).
@@ -380,13 +402,12 @@
         """
         if not isinstance(instance, classOrTuple):
             self.fail("%r is not an instance of %s" % (instance, classOrTuple))
-
     assertIsInstance = failUnlessIsInstance
 
     def failIfIsInstance(self, instance, classOrTuple):
         """
-        Assert that the given instance is not of the given class or of one of
-        the given classes.
+        Fail if C{instance} is not an instance of the given class or of
+        one of the given classes.
 
         @param instance: the object to test the type (first argument of the
             C{isinstance} call).
@@ -397,7 +418,6 @@
         """
         if isinstance(instance, classOrTuple):
             self.fail("%r is not an instance of %s" % (instance, classOrTuple))
-
     assertNotIsInstance = failIfIsInstance
 
 
