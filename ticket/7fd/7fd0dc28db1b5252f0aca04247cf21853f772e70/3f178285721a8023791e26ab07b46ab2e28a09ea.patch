Index: doc/core/examples/wxdemo.py
===================================================================
--- doc/core/examples/wxdemo.py	(revision 16650)
+++ doc/core/examples/wxdemo.py	(working copy)
@@ -2,7 +2,7 @@
 # See LICENSE for details.
 
 import sys, random
-from wxPython.wx import *
+import wx
 
 from twisted.python import log
 from twisted.internet import wxreactor
@@ -42,25 +42,25 @@
 ID_EXIT  = 101
 ID_DIALOG = 102
 
-class MyFrame(wxFrame):
+class MyFrame(wx.Frame):
     def __init__(self, parent, ID, title):
-        wxFrame.__init__(self, parent, ID, title, wxDefaultPosition, wxSize(300, 200))
-        menu = wxMenu()
+        wx.Frame.__init__(self, parent, ID, title, wx.DefaultPosition, wx.Size(300, 200))
+        menu = wx.Menu()
         menu.Append(ID_DIALOG, "D&ialog", "Show dialog")
         menu.Append(ID_EXIT, "E&xit", "Terminate the program")
-        menuBar = wxMenuBar()
+        menuBar = wx.MenuBar()
         menuBar.Append(menu, "&File")
         self.SetMenuBar(menuBar)
-        EVT_MENU(self, ID_EXIT,  self.DoExit)
-        EVT_MENU(self, ID_DIALOG,  self.DoDialog)
+        wx.EVT_MENU(self, ID_EXIT,  self.DoExit)
+        wx.EVT_MENU(self, ID_DIALOG,  self.DoDialog)
         # you really ought to do this instead of reactor.stop() in
         # DoExit, but for the sake of testing we'll let closing the
         # window shutdown wx without reactor.stop(), to make sure that
         # still does the right thing.
-        #EVT_CLOSE(self, lambda evt: reactor.stop())
+        #wx.EVT_CLOSE(self, lambda evt: reactor.stop())
     
     def DoDialog(self, event):
-        dl = wxMessageDialog(self, "Check terminal to see if messages are still being "
+        dl = wx.MessageDialog(self, "Check terminal to see if messages are still being "
                              "printed by Twisted.")
         dl.ShowModal()
         dl.Destroy()
@@ -69,13 +69,13 @@
         reactor.stop()
 
 
-class MyApp(wxApp):
+class MyApp(wx.App):
 
     def OnInit(self):
-        frame = MyFrame(NULL, -1, "Hello, world")
-        frame.Show(true)
+        frame = MyFrame(None, -1, "Hello, world")
+        frame.Show(True)
         self.SetTopWindow(frame)
-        return true
+        return True
 
 
 def demo():
