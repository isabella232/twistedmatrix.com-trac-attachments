=== modified file 'doc/core/howto/logging.xhtml'
--- doc/core/howto/logging.xhtml	2011-07-31 01:05:44 +0000
+++ doc/core/howto/logging.xhtml	2011-09-30 19:58:56 +0000
@@ -167,15 +167,23 @@
     arguments to <code>log.msg</code> and <code>log.err</code>.  The standard
     log observers will ignore dictionary items they don't use.</p>
 
-    <p>Important notes:</p>
-
-    <ul>
-      <li>Never block in a log observer, as it may run in main Twisted thread.
-      This means you can't use socket or syslog standard library logging backends.</li>
-
-      <li>The observer needs to be thread safe if you anticipate using threads
-      in your program.</li>
-    </ul>
+    <h3>Implementation caveats<a name='observercaveats'/></h3>
+
+    <p>Firstly, never block in a log observer, as it may run in main Twisted
+    thread. This means you can't use socket or syslog standard library logging
+    backends.</p>
+
+    <p>Further, <code>log.msg</code> and
+    <code class="API" base="twisted.python">log.err</code> are safe to call
+    from a thread. This is because many Twisted applications, even if not
+    written explicitly to use them, end up using multiple threads. For example,
+    <code base="twisted.internet.interfaces" class="API">IReactorTCP.connectTCP</code>()
+    may perform a DNS query in a thread. As another example,
+    <code base="twisted.enterprise" class="API">adbapi</code> performs database
+    queries in threads. As a consequence, all log observers should be thread
+    safe.</p>
+
+    <p>See also <a href="threading.html">Using Threads in Twisted</a></p>
 
     <h2>Customizing <code>twistd</code> logging</h2>
     <p>

=== modified file 'twisted/python/log.py'
--- twisted/python/log.py	2011-08-14 00:01:36 +0000
+++ twisted/python/log.py	2011-09-30 19:59:31 +0000
@@ -4,6 +4,8 @@
 
 """
 Logging and metrics infrastructure.
+
+@see: U{http://twistedmatrix.com/documents/current/core/howto/logging.html}
 """
 
 from __future__ import division
@@ -36,6 +38,12 @@
 
     Given that most log observers are actually bound methods, it's okay to not
     explicitly declare provision of this interface.
+
+    @note: Log observers are expected to be thread-safe. Many twisted
+    programs indirectly use threads. For example, C{reactor.connectTCP} may
+    perform a DNS lookup in a thread.
+
+    @see: U{http://twistedmatrix.com/documents/current/core/howto/logging.html#observercaveats}
     """
     def __call__(eventDict):
         """
@@ -192,6 +200,8 @@
         C{_stuff} and should describe the context in which the failure
         occurred.
     @type _why: C{str}
+
+    @note: This function is safe to call from a thread.
     """
     if _stuff is None:
         _stuff = failure.Failure()
@@ -274,6 +284,8 @@
 
         These forms work (sometimes) by accident and will be disabled
         entirely in the future.
+
+        @note: This function is safe to call from a thread.
         """
         actualEventDict = (context.get(ILogContext) or {}).copy()
         actualEventDict.update(kw)
@@ -315,6 +327,8 @@
             the C{failure} and should describe the context in which the failure
             occurred.
         @type why: C{str}
+
+        @note: This function is safe to call from a thread.
         """
         self.msg(failure=failure, why=why, isError=1)
 

