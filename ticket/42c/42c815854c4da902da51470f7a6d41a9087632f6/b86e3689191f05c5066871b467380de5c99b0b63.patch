=== modified file 'doc/core/howto/logging.xhtml'
--- doc/core/howto/logging.xhtml	2011-07-31 01:05:44 +0000
+++ doc/core/howto/logging.xhtml	2011-09-30 17:51:04 +0000
@@ -173,8 +173,12 @@
       <li>Never block in a log observer, as it may run in main Twisted thread.
       This means you can't use socket or syslog standard library logging backends.</li>
 
-      <li>The observer needs to be thread safe if you anticipate using threads
-      in your program.</li>
+      <li>The observer should be thread safe. Even if you do not anticipate
+      using threads in your program, it may do so indirectly. For example,
+      <code base="twisted.internet.interfaces" class="API">IReactorTCP.connectTCP</code>()
+      may perform a DNS query in a thread. As another example,
+      <code base="twisted.enterprise" class="API">adbapi</code> performs database queries
+      in threads.</li>
     </ul>
 
     <h2>Customizing <code>twistd</code> logging</h2>

=== modified file 'twisted/python/log.py'
--- twisted/python/log.py	2011-08-14 00:01:36 +0000
+++ twisted/python/log.py	2011-09-30 17:53:02 +0000
@@ -4,6 +4,10 @@
 
 """
 Logging and metrics infrastructure.
+
+@note: Log observers are expected to be thread-safe. Many twisted programs
+indirectly use threads. For example, C{reactor.connectTCP} may perform a DNS
+lookup in a thread.
 """
 
 from __future__ import division
@@ -36,6 +40,10 @@
 
     Given that most log observers are actually bound methods, it's okay to not
     explicitly declare provision of this interface.
+
+    @note: Log observers are expected to be thread-safe. Many twisted
+    programs indirectly use threads. For example, C{reactor.connectTCP} may
+    perform a DNS lookup in a thread.
     """
     def __call__(eventDict):
         """
@@ -192,6 +200,10 @@
         C{_stuff} and should describe the context in which the failure
         occurred.
     @type _why: C{str}
+
+    @note: Log observers are expected to be thread-safe. Many twisted
+    programs indirectly use threads. For example, C{reactor.connectTCP} may
+    perform a DNS lookup in a thread.
     """
     if _stuff is None:
         _stuff = failure.Failure()
@@ -274,6 +286,10 @@
 
         These forms work (sometimes) by accident and will be disabled
         entirely in the future.
+
+        @note: Log observers are expected to be thread-safe. Many twisted
+        programs indirectly use threads. For example, C{reactor.connectTCP} may
+        perform a DNS lookup in a thread.
         """
         actualEventDict = (context.get(ILogContext) or {}).copy()
         actualEventDict.update(kw)
@@ -315,6 +331,10 @@
             the C{failure} and should describe the context in which the failure
             occurred.
         @type why: C{str}
+
+        @note: Log observers are expected to be thread-safe. Many twisted
+        programs indirectly use threads. For example, C{reactor.connectTCP} may
+        perform a DNS lookup in a thread.
         """
         self.msg(failure=failure, why=why, isError=1)
 

