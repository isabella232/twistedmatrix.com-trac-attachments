Index: twisted/protocols/test/test_basic.py
===================================================================
--- twisted/protocols/test/test_basic.py	(revision 38152)
+++ twisted/protocols/test/test_basic.py	(working copy)
@@ -218,7 +218,7 @@
 
     rawpauseOutput1 = [b'twiddle1', b'twiddle2', b'len 5', b'rawpause', b'']
     rawpauseOutput2 = [b'twiddle1', b'twiddle2', b'len 5', b'rawpause',
-                        b'12345', b'twiddle3']
+                       b'12345', b'twiddle3']
 
 
     def test_rawPausing(self):
@@ -264,8 +264,8 @@
         t = proto_helpers.StringIOWithoutClosing()
         a.makeConnection(protocol.FileWrapper(t))
         a.dataReceived(b'produce\nhello world\nunproduce\ngoodbye\n')
-        self.assertEqual(a.received,
-                          [b'produce', b'hello world', b'unproduce', b'goodbye'])
+        self.assertEqual(
+            a.received, [b'produce', b'hello world', b'unproduce', b'goodbye'])
 
 
     def test_clearLineBuffer(self):
@@ -630,7 +630,7 @@
         """
         tooLong = self.netstringReceiver.MAX_LENGTH + 1
         self.netstringReceiver.dataReceived(b"".join(
-                (bytes(tooLong), b":", b"a" * tooLong)))
+            (bytes(tooLong), b":", b"a" * tooLong)))
         self.assertTrue(self.transport.disconnecting)
 
 
@@ -728,7 +728,7 @@
         r = self.getProtocol()
         r.sendString(b"b" * 16)
         self.assertEqual(r.transport.value(),
-            struct.pack(r.structFormat, 16) + b"b" * 16)
+                         struct.pack(r.structFormat, 16) + b"b" * 16)
 
 
     def test_lengthLimitExceeded(self):
@@ -882,7 +882,8 @@
 
 
 
-class Int32TestCase(unittest.SynchronousTestCase, IntNTestCaseMixin, RecvdAttributeMixin):
+class Int32TestCase(unittest.SynchronousTestCase, IntNTestCaseMixin,
+                    RecvdAttributeMixin):
     """
     Test case for int32-prefixed protocol
     """
@@ -912,7 +913,8 @@
 
 
 
-class Int16TestCase(unittest.SynchronousTestCase, IntNTestCaseMixin, RecvdAttributeMixin):
+class Int16TestCase(unittest.SynchronousTestCase, IntNTestCaseMixin,
+                    RecvdAttributeMixin):
     """
     Test case for int16-prefixed protocol
     """
@@ -970,7 +972,8 @@
 
 
 
-class Int8TestCase(unittest.SynchronousTestCase, IntNTestCaseMixin, RecvdAttributeMixin):
+class Int8TestCase(unittest.SynchronousTestCase, IntNTestCaseMixin,
+                   RecvdAttributeMixin):
     """
     Test case for int8-prefixed protocol
     """
@@ -1002,8 +1005,10 @@
 
 
 class OnlyProducerTransport(object):
-    # Transport which isn't really a transport, just looks like one to
-    # someone not looking very hard.
+    """
+    Transport which isn't really a transport, just looks like one to
+    someone not looking very hard.
+    """
 
     paused = False
     disconnecting = False
@@ -1026,7 +1031,9 @@
 
 
 class ConsumingProtocol(basic.LineReceiver):
-    # Protocol that really, really doesn't want any more bytes.
+    """
+    Protocol that really, really doesn't want any more bytes.
+    """
 
     def lineReceived(self, line):
         self.transport.write(line)
@@ -1035,52 +1042,61 @@
 
 
 class ProducerTestCase(unittest.SynchronousTestCase):
+    """
+    Pause and resume a producer.
+    """
 
     def testPauseResume(self):
+        """
+        The producer should be paused when data is received and not paused when
+        resumed.
+        """
         p = ConsumingProtocol()
         t = OnlyProducerTransport()
         p.makeConnection(t)
 
         p.dataReceived(b'hello, ')
-        self.failIf(t.data)
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertEqual(t.data, [])
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
 
         p.dataReceived(b'world\r\n')
 
         self.assertEqual(t.data, [b'hello, world'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
 
         p.dataReceived(b'hello\r\nworld\r\n')
 
         self.assertEqual(t.data, [b'hello, world', b'hello'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
         p.dataReceived(b'goodbye\r\n')
 
         self.assertEqual(t.data, [b'hello, world', b'hello', b'world'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
-        self.assertEqual(t.data, [b'hello, world', b'hello', b'world', b'goodbye'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertEqual(
+            t.data, [b'hello, world', b'hello', b'world', b'goodbye'])
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
-        self.assertEqual(t.data, [b'hello, world', b'hello', b'world', b'goodbye'])
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertEqual(
+            t.data, [b'hello, world', b'hello', b'world', b'goodbye'])
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
 
 
 
Index: twisted/topfiles/6042.misc
===================================================================
