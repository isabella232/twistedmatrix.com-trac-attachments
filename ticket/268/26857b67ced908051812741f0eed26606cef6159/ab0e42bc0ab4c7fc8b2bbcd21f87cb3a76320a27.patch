diff --git a/twisted/python/test/test_deprecate.py b/twisted/python/test/test_deprecate.py
index 322284b..ad48114 100644
--- a/twisted/python/test/test_deprecate.py
+++ b/twisted/python/test/test_deprecate.py
@@ -723,6 +723,32 @@ class ClassWithDeprecatedProperty(object):
 
 
 
+class OldStyleClassWithDeprecatedProperty:
+    """
+    Old-style class with a single deprecated property.
+    """
+
+    _someProtectedValue = None
+
+    @deprecatedProperty(Version('Twisted', 1, 2, 3))
+    def someProperty(self):
+        """
+        Getter docstring.
+
+        @return: The property.
+        """
+        return self._someProtectedValue
+
+
+    @someProperty.setter
+    def someProperty(self, value):
+        """
+        Setter docstring.
+        """
+        self._someProtectedValue = value
+
+
+
 class DeprecatedDecoratorTests(SynchronousTestCase):
     """
     Tests for deprecated decorators.
@@ -745,59 +771,96 @@ class DeprecatedDecoratorTests(SynchronousTestCase):
             )
 
 
-    def test_propertyGetter(self):
+    def assertPropertyGetter(self, klass):
         """
         When L{deprecatedProperty} is used on a C{property}, accesses raise a
         L{DeprecationWarning} and getter docstring is updated to inform the
         version in which it was deprecated. C{deprecatedVersion} attribute is
         also set to inform the deprecation version.
         """
-        obj = ClassWithDeprecatedProperty()
-
+        obj = klass()
         obj.someProperty
 
         self.assertDocstring(
-            ClassWithDeprecatedProperty.someProperty,
+            klass.someProperty,
             [
                 'Getter docstring.',
                 '@return: The property.',
                 'Deprecated in Twisted 1.2.3.',
                 ],
             )
-        ClassWithDeprecatedProperty.someProperty.deprecatedVersion = Version(
+        klass.someProperty.deprecatedVersion = Version(
             'Twisted', 1, 2, 3)
 
         message = (
-            'twisted.python.test.test_deprecate.ClassWithDeprecatedProperty.'
+            'twisted.python.test.test_deprecate.%s.'
             'someProperty was deprecated in Twisted 1.2.3'
-            )
-        warnings = self.flushWarnings([self.test_propertyGetter])
+            ) % klass.__name__
+        warnings = self.flushWarnings([self.assertPropertyGetter])
         self.assertEqual(1, len(warnings))
         self.assertEqual(DeprecationWarning, warnings[0]['category'])
         self.assertEqual(message, warnings[0]['message'])
 
 
-    def test_propertySetter(self):
+    def assertPropertySetter(self, klass):
         """
         When L{deprecatedProperty} is used on a C{property}, setter accesses
         raise a L{DeprecationWarning}.
         """
         newValue = object()
-        obj = ClassWithDeprecatedProperty()
+        obj = klass()
 
         obj.someProperty = newValue
 
         self.assertIs(newValue, obj._someProtectedValue)
         message = (
-            'twisted.python.test.test_deprecate.ClassWithDeprecatedProperty.'
+            'twisted.python.test.test_deprecate.%s.'
             'someProperty was deprecated in Twisted 1.2.3'
-        )
-        warnings = self.flushWarnings([self.test_propertySetter])
+        ) % klass.__name__
+        warnings = self.flushWarnings([self.assertPropertySetter])
         self.assertEqual(1, len(warnings))
         self.assertEqual(DeprecationWarning, warnings[0]['category'])
         self.assertEqual(message, warnings[0]['message'])
 
 
+    def test_newStylePropertyGetter(self):
+        """
+        When L{deprecatedProperty} is used on a C{property} of a new-style
+        class, accesses raise a L{DeprecationWarning} and getter docstring is
+        updated to inform the version in which it was deprecated.
+        C{deprecatedVersion} attribute is also set to inform the deprecation
+        version.
+        """
+        self.assertPropertyGetter(ClassWithDeprecatedProperty)
+
+
+    def test_newStylePropertySetter(self):
+        """
+        When L{deprecatedProperty} is used on a C{property} of a new-style
+        class, setter accesses raise a L{DeprecationWarning}.
+        """
+        self.assertPropertySetter(ClassWithDeprecatedProperty)
+
+
+    def test_oldStylePropertyGetter(self):
+        """
+        When L{deprecatedProperty} is used on a C{property} of an old-style
+        class, accesses raise a L{DeprecationWarning} and getter docstring is
+        updated to inform the version in which it was deprecated.
+        C{deprecatedVersion} attribute is also set to inform the deprecation
+        version.
+        """
+        self.assertPropertyGetter(OldStyleClassWithDeprecatedProperty)
+
+
+    def test_oldStylePropertySetter(self):
+        """
+        When L{deprecatedProperty} is used on a C{property} of an old-style
+        class, setter accesses raise a L{DeprecationWarning}.
+        """
+        self.assertPropertySetter(OldStyleClassWithDeprecatedProperty)
+
+
     def test_class(self):
         """
         When L{deprecated} is used on a class, instantiations raise a
