Index: twisted/internet/_glibbase.py
===================================================================
--- twisted/internet/_glibbase.py	(revision 33585)
+++ twisted/internet/_glibbase.py	(working copy)
@@ -12,6 +12,7 @@
 """
 
 import signal
+from functools import partial
 
 from twisted.internet import base, posixbase, selectreactor
 from twisted.internet.interfaces import IReactorFDSet
@@ -314,7 +315,14 @@
         self._reschedule()
 
 
+    def registerGApplication(self, app):
+        """
+        Support arbitrary G(tk)Application.run main loops, instead of the default one.
+        """
+        self._run = partial(app.run, None)
 
+
+
 class PortableGlibReactorBase(GlibSignalMixin, selectreactor.SelectReactor):
     """
     Base class for GObject event loop reactors that works on Windows.
Index: twisted/internet/test/test_gtk3reactor.py
===================================================================
--- twisted/internet/test/test_gtk3reactor.py	(revision 0)
+++ twisted/internet/test/test_gtk3reactor.py	(revision 0)
@@ -0,0 +1,60 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests to ensure all attributes of L{twisted.internet.gtkreactor} are
+deprecated.
+"""
+
+from functools import partial
+
+from twisted.trial.unittest import TestCase
+
+from gi.repository import Gtk, Gio
+
+
+class GtkApplicationRegistration(TestCase):
+    """
+    Tests to ensure GtkApplication and GApplication are supported by L{twisted.internet.gtk3reactor}
+    """
+
+    def test_gApplicationActivate(self):
+        from twisted.internet import gireactor
+        reactor = gireactor.GIReactor(useGtk=False)
+
+        app = Gio.Application(
+            application_id='com.twistedmatrix.trial.gireactor',
+            flags=Gio.ApplicationFlags.FLAGS_NONE)
+
+        @partial(app.connect, 'activate')
+        def on_activate(widget):
+            reactor.stop()
+
+        @partial(reactor.callLater, 0)
+        def later():
+            reactor.stop()
+            self.fail("GApplication activate signal didn't fire")
+
+        reactor.registerGApplication(app)
+        reactor.run()
+
+
+    def test_gtkApplicationActivate(self):
+        from twisted.internet import gtk3reactor
+        reactor = gtk3reactor.Gtk3Reactor()
+
+        app = Gtk.Application(
+            application_id='com.twistedmatrix.trial.gtk3reactor',
+            flags=Gio.ApplicationFlags.FLAGS_NONE)
+
+        @partial(app.connect, 'activate')
+        def on_activate(widget):
+            reactor.stop()
+
+        @partial(reactor.callLater, 0)
+        def later():
+            reactor.stop()
+            self.fail("GtkApplication activate signal didn't fire")
+
+        reactor.registerGApplication(app)
+        reactor.run()
Index: twisted/internet/gtk3reactor.py
===================================================================
--- twisted/internet/gtk3reactor.py	(revision 33585)
+++ twisted/internet/gtk3reactor.py	(working copy)
@@ -11,6 +11,10 @@
     from twisted.internet import gtk3reactor
     gtk3reactor.install()
 
+If you wish to use a GtkApplication,register it with the reactor::
+    from twisted.internet import reactor
+    reactor.registerGtkApplication(app)
+
 Then use twisted.internet APIs as usual.
 """
 
Index: doc/core/howto/choosing-reactor.xhtml
===================================================================
--- doc/core/howto/choosing-reactor.xhtml	(revision 33585)
+++ doc/core/howto/choosing-reactor.xhtml	(working copy)
@@ -40,6 +40,7 @@
 
     <ul>
       <li><a href="#gtk">GTK+ 2.0</a></li>
+	  <li><a href="#gtk3">GTK+ 3.0</a></li>
       <li><a href="#tkinter">Tkinter</a></li>
       <li><a href="#wxpython">wxPython</a></li>
       <li><a href="#win32_wfmo">Win32</a></li>
@@ -200,6 +201,24 @@
 from twisted.internet import reactor
 </pre>
 
+    <h3>GTK+ 3.0</h3><a name="gtk3" />
+
+	<p>Twisted integrates with <a href="http://gtk.org">GTK+ 3</a> through <a href="http://live.gnome.org/PyGObject">PyGObject's</a> introspection using the <code>gtk3reactor</code>. This reactor functions similarly to the gtk2reactor</p>
+
+	<p>GLib 3.0 introduces the concept of GApplication, a class that handles application uniqueness in a cross-platform way and provides its own main loop. Its counterpart GtkApplication also handles application lifetime with respect to open windows.</p>
+
+<pre class="python">
+from twisted.internet import gtk3reactor
+gtk3reactor.install
+
+from gi.repository import Gtk
+app = Gtk.Application(...)
+
+from twisted import reactor
+reactor.registerGApplication(app)
+reactor.run()
+</pre>
+
     <h3>wxPython</h3><a name="wxpython" />
 
     <p>Twisted currently supports two methods of integrating
