diff --git twisted/internet/test/test_udp.py twisted/internet/test/test_udp.py
index 4452e2c..f9640b3 100644
--- twisted/internet/test/test_udp.py
+++ twisted/internet/test/test_udp.py
@@ -26,7 +26,35 @@ from twisted.internet.protocol import DatagramProtocol
 
 from twisted.internet.test.connectionmixins import (LogObserverMixin,
                                                     findFreePort)
-from twisted.trial.unittest import SkipTest
+from twisted.trial.unittest import TestCase, SkipTest
+
+
+
+class BroadcastDatagramProtocol(DatagramProtocol):
+
+        def __init__(self, broadcasthost, broadcastport):
+            self.d = None
+            self.sentmessage = None
+            self.broadcasthost = broadcasthost
+            self.broadcastport = broadcastport
+
+
+        def setDeferred(self, d):
+            self.d = d
+
+
+        def startProtocol(self):
+            self.sentmessage = "Twisted is a flying house"
+            self.transport.socket.setsockopt(
+                socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
+            self.transport.write(
+                self.sentmessage, addr=(self.broadcasthost, self.broadcastport))
+
+
+        def datagramReceived(self, data, (host, port)):
+            if self.d is not None:
+                d, self.d = self.d, None
+                d.callback((data, self.sentmessage))
 
 
 
@@ -116,6 +144,26 @@ class UDPPortTestsMixin(object):
     Tests for L{IReactorUDP.listenUDP} and
     L{IReactorSocket.adoptDatagramPort}.
     """
+    def test_UDPBroadcast(self):
+
+        def _cb(data):
+
+            self.assertEqual(data[0], data[1])
+            return self.port.stopListening()
+
+        reactor = self.buildReactor()
+        host, portNumber = findFreePort(type=socket.SOCK_DGRAM)
+        senderprotocol = BroadcastDatagramProtocol(host, portNumber)
+        port = self.getListeningPort(
+            reactor, senderprotocol, port=portNumber, interface=host)
+
+        d = Deferred()
+        d.addCallback(_cb)
+
+        senderprotocol.setDeferred(d)
+        return d
+
+
     def test_interface(self):
         """
         L{IReactorUDP.listenUDP} returns an object providing L{IListeningPort}.
