diff --git twisted/internet/test/test_udp.py twisted/internet/test/test_udp.py
index 4452e2c..6554ddd 100644
--- twisted/internet/test/test_udp.py
+++ twisted/internet/test/test_udp.py
@@ -116,6 +116,46 @@ class UDPPortTestsMixin(object):
     Tests for L{IReactorUDP.listenUDP} and
     L{IReactorSocket.adoptDatagramPort}.
     """
+    def test_UDPBroadcast(self):
+        """
+        Broadcasting to 127.0.0.255 works.
+        """
+        class BroadcastDatagramProtocol(DatagramProtocol):
+
+            def __init__(self, broadcasthost, broadcastport, d):
+                self.d = d
+                self.sentmessage = "Twisted is a flying house"
+                self.broadcasthost = broadcasthost
+                self.broadcastport = broadcastport
+
+
+            def startProtocol(self):
+                self.transport.socket.setsockopt(
+                    socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
+                self.transport.write(self.sentmessage, addr=(self.broadcasthost, self.broadcastport))
+
+
+            def datagramReceived(self, data, (host, port)):
+                self.d.callback((data, self.sentmessage))
+
+        reactor = self.buildReactor()
+
+        d = Deferred()
+
+        portNumber = findFreePort(type=socket.SOCK_DGRAM)[1]
+        host = "127.0.0.255"
+        senderprotocol = BroadcastDatagramProtocol(host, portNumber, d)
+        port = self.getListeningPort(
+            reactor, senderprotocol, port=portNumber, interface=host)
+
+        d.addCallback(lambda data: self.assertEqual(data[0], data[1]))
+        d.addErrback(err)
+        d.addCallback(lambda ignored: port.stopListening())
+        d.addCallback(lambda ignored: reactor.stop())
+
+        self.runReactor(reactor)
+
+
     def test_interface(self):
         """
         L{IReactorUDP.listenUDP} returns an object providing L{IListeningPort}.
