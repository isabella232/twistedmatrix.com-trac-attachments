diff --git twisted/web/client.py twisted/web/client.py
index 6120d1f..ac4bd08 100644
--- twisted/web/client.py
+++ twisted/web/client.py
@@ -32,7 +32,6 @@ from twisted.web import http
 from twisted.internet import defer, protocol, task, reactor
 from twisted.internet.interfaces import IProtocol
 from twisted.internet.endpoints import TCP4ClientEndpoint, SSL4ClientEndpoint
-from twisted.python import failure
 from twisted.python.util import InsensitiveDict
 from twisted.python.components import proxyForInterface
 from twisted.web import error
@@ -151,7 +150,7 @@ class HTTPPageGetter(http.HTTPClient):
                     self.status,
                     'Infinite redirection detected',
                     location=url)
-                self.factory.noPage(failure.Failure(err))
+                self.factory.noPage(Failure(err))
                 self.quietLoss = True
                 self.transport.loseConnection()
                 return
@@ -172,7 +171,7 @@ class HTTPPageGetter(http.HTTPClient):
         else:
             self.handleStatusDefault()
             self.factory.noPage(
-                failure.Failure(
+                Failure(
                     error.PageRedirect(
                         self.status, self.message, location = url)))
         self.quietLoss = True
@@ -210,7 +209,7 @@ class HTTPPageGetter(http.HTTPClient):
             return
         if self.failed:
             self.factory.noPage(
-                failure.Failure(
+                Failure(
                     error.Error(
                         self.status, self.message, response)))
         if self.factory.method == b'HEAD':
@@ -218,7 +217,7 @@ class HTTPPageGetter(http.HTTPClient):
             # body for HEAD requests.
             self.factory.page(b'')
         elif self.length != None and self.length != 0:
-            self.factory.noPage(failure.Failure(
+            self.factory.noPage(Failure(
                 PartialDownloadError(self.status, self.message, response)))
         else:
             self.factory.page(response)
@@ -253,14 +252,14 @@ class HTTPPageDownloader(HTTPPageGetter):
         if self.length:
             self.transmittingPage = 0
             self.factory.noPage(
-                failure.Failure(
+                Failure(
                     PartialDownloadError(self.status)))
         if self.transmittingPage:
             self.factory.pageEnd()
             self.transmittingPage = 0
         if self.failed:
             self.factory.noPage(
-                failure.Failure(
+                Failure(
                     error.Error(
                         self.status, self.message, None)))
             self.transport.loseConnection()
@@ -496,7 +495,7 @@ class HTTPDownloader(HTTPClientFactory):
                     self.file = self.openFile(partialContent)
             except IOError:
                 #raise
-                self.deferred.errback(failure.Failure())
+                self.deferred.errback(Failure())
 
     def pagePart(self, data):
         if not self.file:
@@ -506,7 +505,7 @@ class HTTPDownloader(HTTPClientFactory):
         except IOError:
             #raise
             self.file = None
-            self.deferred.errback(failure.Failure())
+            self.deferred.errback(Failure())
 
 
     def noPage(self, reason):
@@ -531,7 +530,7 @@ class HTTPDownloader(HTTPClientFactory):
         try:
             self.file.close()
         except IOError:
-            self.deferred.errback(failure.Failure())
+            self.deferred.errback(Failure())
             return
         self.deferred.callback(self.value)
 
@@ -1546,7 +1545,7 @@ class _GzipProtocol(proxyForInterface(IProtocol)):
         try:
             rawData = self._zlibDecompress.decompress(data)
         except zlib.error:
-            raise ResponseFailed([failure.Failure()], self._response)
+            raise ResponseFailed([Failure()], self._response)
         if rawData:
             self.original.dataReceived(rawData)
 
@@ -1559,7 +1558,7 @@ class _GzipProtocol(proxyForInterface(IProtocol)):
         try:
             rawData = self._zlibDecompress.flush()
         except zlib.error:
-            raise ResponseFailed([reason, failure.Failure()], self._response)
+            raise ResponseFailed([reason, Failure()], self._response)
         if rawData:
             self.original.dataReceived(rawData)
         self.original.connectionLost(reason)
@@ -1700,12 +1699,12 @@ class RedirectAgent(object):
                 response.code,
                 'Infinite redirection detected',
                 location=uri)
-            raise ResponseFailed([failure.Failure(err)], response)
+            raise ResponseFailed([Failure(err)], response)
         locationHeaders = response.headers.getRawHeaders('location', [])
         if not locationHeaders:
             err = error.RedirectWithNoLocation(
                 response.code, 'No location header field', uri)
-            raise ResponseFailed([failure.Failure(err)], response)
+            raise ResponseFailed([Failure(err)], response)
         location = self._resolveLocation(uri, locationHeaders[0])
         deferred = self._agent.request(method, location, headers)
         def _chainResponse(newResponse):
@@ -1723,7 +1722,7 @@ class RedirectAgent(object):
         if response.code in self._redirectResponses:
             if method not in ('GET', 'HEAD'):
                 err = error.PageRedirect(response.code, location=uri)
-                raise ResponseFailed([failure.Failure(err)], response)
+                raise ResponseFailed([Failure(err)], response)
             return self._handleRedirect(response, method, uri, headers,
                                         redirectCount)
         elif response.code in self._seeOtherResponses:
diff --git twisted/web/domhelpers.py twisted/web/domhelpers.py
index e6f1b51..60a90f9 100644
--- twisted/web/domhelpers.py
+++ twisted/web/domhelpers.py
@@ -10,6 +10,10 @@ import StringIO
 
 from twisted.web import microdom
 from twisted.web.microdom import getElementsByTagName, escape, unescape
+# These modules are imported here as a shortcut.
+escape
+getElementsByTagName
+
 
 
 class NodeLookupError(Exception):
diff --git twisted/web/http.py twisted/web/http.py
index fe29fe7..d1dbab9 100644
--- twisted/web/http.py
+++ twisted/web/http.py
@@ -75,7 +75,6 @@ try:
 except ImportError:
     from urllib.parse import (
         ParseResultBytes, urlparse as _urlparse, unquote as _unquote)
-    from io import TextIOWrapper
 
     def unquote(string, *args, **kwargs):
         return _unquote(string.decode('charmap'), *args, **kwargs).encode('charmap')
diff --git twisted/web/microdom.py twisted/web/microdom.py
index ca35612..11873c6 100644
--- twisted/web/microdom.py
+++ twisted/web/microdom.py
@@ -22,8 +22,6 @@ Microdom mainly focuses on working with HTML and XHTML.
 import re
 from cStringIO import StringIO
 
-# create NodeList class
-from types import ListType as NodeList
 from types import StringTypes, UnicodeType
 
 # Twisted Imports
diff --git twisted/web/soap.py twisted/web/soap.py
index 1ca747b..fc15e03 100644
--- twisted/web/soap.py
+++ twisted/web/soap.py
@@ -52,7 +52,7 @@ class SOAPPublisher(resource.Resource):
 
         p, header, body, attrs = SOAPpy.parseSOAPRPC(data, 1, 1, 1)
 
-        methodName, args, kwargs, ns = p._name, p._aslist, p._asdict, p._ns
+        methodName, args, kwargs = p._name, p._aslist, p._asdict
 
         # deal with changes in SOAPpy 0.11
         if callable(args):
diff --git twisted/web/tap.py twisted/web/tap.py
index 23abf50..60abaf6 100644
--- twisted/web/tap.py
+++ twisted/web/tap.py
@@ -171,7 +171,7 @@ demo webserver that has the Test class from twisted.web.demo in it."""
         """
         if self['https']:
             try:
-                from twisted.internet.ssl import DefaultOpenSSLContextFactory
+                reflect.namedModule('OpenSSL.SSL')
             except ImportError:
                 raise usage.UsageError("SSL support not installed")
         if self['port'] is None:
diff --git twisted/web/test/test_distrib.py twisted/web/test/test_distrib.py
index c6e2ae3..7d58a27 100755
--- twisted/web/test/test_distrib.py
+++ twisted/web/test/test_distrib.py
@@ -14,12 +14,12 @@ except ImportError:
 
 from zope.interface.verify import verifyObject
 
-from twisted.python import log, filepath
+from twisted.python import filepath
 from twisted.internet import reactor, defer
 from twisted.trial import unittest
 from twisted.spread import pb
 from twisted.spread.banana import SIZE_LIMIT
-from twisted.web import http, distrib, client, resource, static, server
+from twisted.web import distrib, client, resource, static, server
 from twisted.web.test.test_web import DummyRequest
 from twisted.web.test._util import _render
 from twisted.test import proto_helpers
diff --git twisted/web/test/test_http.py twisted/web/test/test_http.py
index 5a0a853..d5fc77e 100644
--- twisted/web/test/test_http.py
+++ twisted/web/test/test_http.py
@@ -8,11 +8,9 @@ Test HTTP support.
 import random, cgi, base64
 
 try:
-    from urlparse import (
-        ParseResult as ParseResultBytes, urlparse, urlunsplit, clear_cache)
+    from urlparse import urlparse, urlunsplit, clear_cache
 except ImportError:
-    from urllib.parse import (
-        ParseResultBytes, urlparse, urlunsplit, clear_cache)
+    from urllib.parse import urlparse, urlunsplit, clear_cache
 
 from twisted.python.compat import _PY3, iterbytes, networkString, unicode, intToBytes
 from twisted.python.failure import Failure
diff --git twisted/web/test/test_http_headers.py twisted/web/test/test_http_headers.py
index 3209e40..7a12a06 100644
--- twisted/web/test/test_http_headers.py
+++ twisted/web/test/test_http_headers.py
@@ -7,8 +7,6 @@ Tests for L{twisted.web.http_headers}.
 
 from __future__ import division, absolute_import
 
-import sys
-
 from twisted.python.compat import _PY3
 from twisted.trial.unittest import TestCase
 from twisted.web.http_headers import _DictHeaders, Headers
diff --git twisted/web/test/test_wsgi.py twisted/web/test/test_wsgi.py
index 7925ecf..4e902e5 100644
--- twisted/web/test/test_wsgi.py
+++ twisted/web/test/test_wsgi.py
@@ -911,7 +911,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
                     'HTTP/1.1 107 Strange message'))
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -951,7 +951,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
 
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
         return d
@@ -1015,7 +1015,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
             self.assertEqual(intermediateValues, [''])
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -1050,7 +1050,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
             self.assertTrue(intermediateValues[1])
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -1087,7 +1087,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
                 'foobar')
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -1116,7 +1116,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
                     'HTTP/1.1 200 Bar\r\n'))
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -1144,7 +1144,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
                     'HTTP/1.1 100 Foo\r\n'))
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -1191,7 +1191,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
 
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -1229,7 +1229,7 @@ class StartResponseTests(WSGITestsMixin, TestCase):
                 'foobar')
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -1469,7 +1469,7 @@ class ApplicationTests(WSGITestsMixin, TestCase):
                     'HTTP/1.1 500 Internal Server Error'))
         d.addCallback(cbRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactory, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
@@ -1522,7 +1522,7 @@ class ApplicationTests(WSGITestsMixin, TestCase):
             self.assertIn(responseContent, response)
         d.addErrback(ebRendered)
 
-        request = self.lowLevelRender(
+        self.lowLevelRender(
             requestFactoryWrapper, applicationFactory,
             lambda: channel, 'GET', '1.1', [], [''], None, [])
 
diff --git twisted/web/test/test_xml.py twisted/web/test/test_xml.py
index 513a943..0954db3 100644
--- twisted/web/test/test_xml.py
+++ twisted/web/test/test_xml.py
@@ -620,9 +620,14 @@ alert("I hate you");
         s = '<p>foo<b a="c"><foo z="foo"></foo><foo></foo><bar c="y"></bar></b></p>'
         self.assertEqual(s, n.toxml())
 
+
     def testDict(self):
+        """
+        Returns a dictionary which is hashable.
+        """
         n = microdom.Element("p")
-        d = {n : 1} # will fail if Element is unhashable
+        hash(n)
+
 
     def testEscaping(self):
         # issue 590
diff --git twisted/web/test/test_xmlrpc.py twisted/web/test/test_xmlrpc.py
index bad6b77..4a4ff4b 100644
--- twisted/web/test/test_xmlrpc.py
+++ twisted/web/test/test_xmlrpc.py
@@ -18,10 +18,11 @@ from twisted.web import server, static, client, error, http
 from twisted.internet import reactor, defer
 from twisted.internet.error import ConnectionDone
 from twisted.python import failure
+from twisted.python.reflect import namedModule
 from twisted.test.proto_helpers import MemoryReactor
 from twisted.web.test.test_web import DummyRequest
 try:
-    import twisted.internet.ssl
+    namedModule('twisted.internet.ssl')
 except ImportError:
     sslSkip = "OpenSSL not present"
 else:
diff --git twisted/web/topfiles/7000.misc twisted/web/topfiles/7000.misc
new file mode 100644
index 0000000..e69de29
diff --git twisted/web/topfiles/setup.py twisted/web/topfiles/setup.py
index 0ba08f1..dd23923 100644
--- twisted/web/topfiles/setup.py
+++ twisted/web/topfiles/setup.py
@@ -1,8 +1,6 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-import sys
-
 try:
     from twisted.python import dist
 except ImportError:
