Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(revision 27027)
+++ twisted/test/test_amp.py	(working copy)
@@ -186,6 +186,14 @@
     arguments = [('length', amp.Integer())]
     response = [('body', amp.AmpList([('x', amp.Integer())]))]
 
+class DontRejectMe(amp.Command):
+    commandName = 'dontrejectme'
+    arguments = [
+            ('magicWord', amp.Unicode()),
+            ('list', amp.AmpList([('name', amp.Unicode())], optional=True)),
+            ]
+    response = [('response', amp.Unicode())]
+
 class SecuredPing(amp.Command):
     # XXX TODO: actually make this refuse to send over an insecure connection
     response = [('pinged', amp.Boolean())]
@@ -267,6 +275,10 @@
         return {'body': [dict(x=1)] * length}
     GetList.responder(cmdGetlist)
 
+    def okiwont(self, magicWord, list):
+        return dict(response=u'%s accepted' % (list[0]['name']))
+    DontRejectMe.responder(okiwont)
+
     def waitforit(self):
         self.waiting = defer.Deferred()
         return self.waiting
@@ -1405,6 +1417,31 @@
         self.assertEquals(values, [{'x': 1}] * 10)
 
 
+    def test_optionalAmpListOmitted(self):
+        """
+        Test that sending a command with an omitted AmpList argument that is
+        designated as optional does not raise an InvalidSignature error.
+        """
+        dontRejectMeCommand = DontRejectMe(magicWord=u'please')
+   
+
+    def test_optionalAmpListPresent(self):
+        """
+        Sanity check that optional AmpList arguments are processed normally.
+        """
+        dontRejectMeCommand = DontRejectMe(magicWord=u'please',
+                list=[{'name': 'foo'}])
+        c, s, p = connectedServerAndClient(
+            ServerClass=SimpleSymmetricCommandProtocol,
+            ClientClass=SimpleSymmetricCommandProtocol)
+        L = []
+        c.callRemote(DontRejectMe, magicWord=u'please',
+                list=[{'name': 'foo'}]).addCallback(L.append)
+        p.flush()
+        response = L.pop().get('response')
+        self.assertEquals(response, 'foo accepted')
+
+
     def test_failEarlyOnArgSending(self):
         """
         Verify that if we pass an invalid argument list (omitting an argument), an
Index: twisted/protocols/amp.py
===================================================================
--- twisted/protocols/amp.py	(revision 27027)
+++ twisted/protocols/amp.py	(working copy)
@@ -1370,14 +1370,18 @@
         AmpList([('a', Integer()),
                  ('b', Unicode())])
     """
-    def __init__(self, subargs):
+    def __init__(self, subargs, optional=False):
         """
         Create an AmpList.
 
         @param subargs: a list of 2-tuples of ('name', argument) describing the
         schema of the dictionaries in the sequence of amp boxes.
+        
+        @param optional: a boolean indicating whether this argument can be
+        omitted in the protocol.
         """
         self.subargs = subargs
+        Argument.__init__(self, optional)
 
 
     def fromStringProto(self, inString, proto):
