Function 'twisted.conch.interfaces.ISFTPServer.openFile'
   1 Called when the clients asks to open a file.
   2 
   3 filename is a string representing the file to open.
   4 
   5 flags is a integer of the flags to open the file with, ORed together.
   6 The flags and their values are listed at the bottom of this file.
   7 
   8 attrs is a list of attributes to open the file with.  It is a
   9 dictionary, consisting of 0 or more keys.  The possible keys are:
  10     size: the size of the file in bytes
  11     uid: the user ID of the file as an integer
  12     gid: the group ID of the file as an integer
  13     permissions: the permissions of the file with as an integer.
  14     the bit representation of this field is defined by POSIX.
  15     atime: the access time of the file as seconds since the epoch.
  16     mtime: the modification time of the file as seconds since the epoch.
  17     ext_*: extended attributes.  The server is not required to
  18     understand this, but it may.
  19 
  20 NOTE: there is no way to indicate text or binary files.  it is up
  21 to the SFTP client to deal with this.
  22 
  23 This method returns an object that meets the ISFTPFile interface.
  24 Alternatively, it can return a Deferred that will be called back
  25 with the object.
  L10: Error: Improper paragraph indentation.
Function 'twisted.conch.manhole_tap.makeService'
   1 Create a manhole server service.
   2 
   3 @type options: C{dict}
   4 @param options: A mapping describing the configuration of
   5 the desired service.  Recognized key/value pairs are:
   6 
   7     "telnetPort": strports description of the address on which
   8                   to listen for telnet connections.  If None,
   9                   no telnet service will be started.
  10 
  11     "sshPort": strports description of the address on which to
  12                listen for ssh connections.  If None, no ssh
  13                service will be started.
  14 
  15     "namespace": dictionary containing desired initial locals
  16                  for manhole connections.  If None, an empty
  17                  dictionary will be used.
  18 
  19     "passwd": Name of a passwd(5)-format username/password file.
  20 
  21 @rtype: L{twisted.application.service.IService}
  22 @return: A manhole service.
   L7: Error: Improper paragraph indentation.
   L8: Error: Improper paragraph indentation.
  L11: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L15: Error: Improper paragraph indentation.
  L16: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
Function 'twisted.conch.ssh.filetransfer.FileTransferClient.openFile'
   1 Open a file.
   2 
   3 filename is a string representing the file to open.
   4 
   5 flags is a integer of the flags to open the file with, ORed together.
   6 The flags and their values are listed at the bottom of this file.
   7 
   8 attrs is a list of attributes to open the file with.  It is a
   9 dictionary, consisting of 0 or more keys.  The possible keys are:
  10     size: the size of the file in bytes
  11     uid: the user ID of the file as an integer
  12     gid: the group ID of the file as an integer
  13     permissions: the permissions of the file with as an integer.
  14     the bit representation of this field is defined by POSIX.
  15     atime: the access time of the file as seconds since the epoch.
  16     mtime: the modification time of the file as seconds since the epoch.
  17     ext_*: extended attributes.  The server is not required to
  18     understand this, but it may.
  19 
  20 NOTE: there is no way to indicate text or binary files.  it is up
  21 to the SFTP client to deal with this.
  22 
  23 This method returns an Deferred that is called back with an object
  24 that meets the ISFTPFile interface.
  L10: Error: Improper paragraph indentation.
Function 'twisted.conch.ssh.userauth.SSHUserAuthClient.getGenericAnswers'
   1 Returns a C{Deferred} with the responses to the promopts.
   2 
   3 name is the name of the authentication currently
   4 in progress.
   5 instruction describes what the authentication wants.
   6 prompts is a list of (prompt, echo) pairs.
   7     prompt is the prompt to display.
   8     echo is a C{bool}.  If False, do not display what the
   9     user types for this prompt.
   L7: Error: Improper paragraph indentation.
Function 'twisted.enterprise.adbapi.ConnectionPool.__init__'
   1 Create a new ConnectionPool.
   2 
   3 @param dbapiName: an import string to use to obtain a DB-API
   4                   compatible module (e.g. 'pyPgSQL.PgSQL')
   5 
   6 @param cp_min: the minimum number of connections in pool (default 3)
   7 
   8 @param cp_max: the maximum number of connections in pool (default 5)
   9 
  10 @param cp_noisy: generate informational log messages during
  11                  operation (default False)
  12 
  13 @param cp_openfun: a callback invoked after every connect()
  14                    on the underlying DB-API object. The callback
  15                    is passed a new DB-API connection object.
  16                    This callback can setup per-connection
  17                    state such as charset, timezone, etc.
  18 
  19 @param cp_reconnect: detect connections which have failed
  20                      and reconnect (default False). Failed
  21                      connections may result in ConnectionLost
  22                      exceptions, which indicate the query may
  23                      need to be re-sent.
  24 
  25 @param cp_good_sql: an sql query which should always succeed
  26                     and change no state (default 'select 1')
  27 
  28 Any remaining positional and keyword arguments are passed
  29 to the DB-API object when connecting. Use these arguments
  30 to pass database names, usernames, passwords, etc.
  L28: Error: Fields must be the final elements in an epytext string.
TwistedClass 'twisted.enterprise.row.RowObject'
   1 I represent a row in a table in a relational database.
   2 
   3 My class is "populated" by a Reflector object. After I am
   4 populated, instances of me are able to interact with a particular
   5 database table.
   6 
   7 You should use a class derived from this class for each database
   8 table.
   9 
  10 reflector.loadObjectsFrom() is used to create sets of
  11 instance of objects of this class from database tables.
  12 
  13 Once created, the "key column" attributes cannot be changed.
  14 
  15 
  16 Class Attributes that users must supply:
  17 
  18    rowKeyColumns     # list of key columns in form: [(columnName, typeName)]
  19    rowTableName      # name of database table
  20    rowColumns        # list of the columns in the table with the correct
  21                      # case.this will be used to create member variables.
  22    rowFactoryMethod  # method to create an instance of this class.
  23                      # HACK: must be in a list!!! [factoryMethod] (optional)
  24    rowForeignKeys    # keys to other tables (optional)
  25                     
  L18: Error: Improper paragraph indentation.
  L21: Error: Improper paragraph indentation.
  L22: Error: Improper paragraph indentation.
  L23: Error: Improper paragraph indentation.
  L24: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.base.Cooperate'
   1 Requests that processing be paused so other tasks can resume
   2 
   3 Yield this object when the current chain would block or periodically
   4 during an intensive processing task.   The flow mechanism uses these
   5 objects to signal that the current processing chain should be paused
   6 and resumed later.  This allows other delayed operations to be
   7 processed, etc.  Usage is quite simple:
   8 
   9        // within some generator wrapped by a Controller
  10        yield Cooperate(1)  # yield for a second or more
   L9: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.base.Stage'
   1 Abstract base defining protocol for iterator/generators in a flow
   2 
   3 This is the primary component in the flow system, it is an
   4 iterable object which must be passed to a yield statement 
   5 before each call to next().   Usage...
   6 
   7    iterable = DerivedStage( ... , SpamError, EggsError))
   8    yield iterable
   9    for result in iterable:
  10        // handle good result, or SpamError or EggsError
  11        yield iterable 
  12 
  13 Alternatively, when inside a generator, the next() method can be
  14 used directly.   In this case, if no results are available,
  15 StopIteration is raised, and if left uncaught, will nicely end
  16 the generator.   Of course, unexpected failures are raised.  This 
  17 technique is especially useful when pulling from more than 
  18 one stage at a time.
  19 
  20      def someGenerator():
  21          iterable = SomeStage( ... , SpamError, EggsError)
  22          while True:
  23              yield iterable
  24              result = iterable.next() 
  25              // handle good result or SpamError or EggsError
  26 
  27 For many generators, the results become available in chunks
  28 of rows.  While the default value is to get one row at a time,
  29 there is a 'chunked' property which allows them to be 
  30 returned via the next() method as many rows rather than
  31 row by row.
  32 
  33      iterable = DerivedStage(...)
  34      iterable.chunked = True
  35      for results in iterable:
  36          for result in results:
  37               // handle good result
  38          yield iterable
  39 
  40 For those wishing more control at the cost of a painful experience,
  41 the following member variables can be used to great effect:
  42 
  43     results  This is a list of results produced by the generator,
  44              they can be fetched one by one using next() or in a
  45              group together.  If no results were produced, then
  46              this is an empty list.   These results should be 
  47              removed from the list after they are read; or, after
  48              reading all of the results set to an empty list
  49 
  50     stop     This is true if the underlying generator has finished 
  51              execution (raised a StopIteration or returned).  Note
  52              that several results may exist, and stop may be true.
  53 
  54     failure  If the generator produced an exception, then it is 
  55              wrapped as a Failure object and put here.  Note that
  56              several results may have been produced before the 
  57              failure.  To ensure that the failure isn't accidently
  58              reported twice, it is adviseable to set stop to True.
  59 
  60 The order in which these member variables is used is *critical* for
  61 proper adherance to the flow protocol.   First, all successful
  62 results should be handled.  Second, the iterable should be checked
  63 to see if it is finished.  Third, a failure should be checked; 
  64 while handling a failure, either the loop should be exited, or
  65 the iterable's stop member should be set. 
  66 
  67      iterable = SomeStage(...)
  68      while True:
  69          yield iterable
  70          if iterable.results:
  71              for result in iterable.results:
  72                  // handle good result
  73              iterable.results = []
  74          if iterable.stop:
  75              break
  76          if iterable.failure:
  77              iterable.stop = True
  78              // handle iterable.failure
  79              break
   L7: Error: Improper paragraph indentation.
  L10: Error: Improper paragraph indentation.
  L20: Error: Improper paragraph indentation.
  L21: Error: Improper paragraph indentation.
  L23: Error: Improper paragraph indentation.
  L33: Error: Improper paragraph indentation.
  L36: Error: Improper paragraph indentation.
  L37: Error: Improper paragraph indentation.
  L38: Error: Improper paragraph indentation.
  L43: Error: Improper paragraph indentation.
  L44: Error: Improper paragraph indentation.
  L50: Error: Improper paragraph indentation.
  L51: Error: Improper paragraph indentation.
  L54: Error: Improper paragraph indentation.
  L55: Error: Improper paragraph indentation.
  L67: Error: Improper paragraph indentation.
  L69: Error: Improper paragraph indentation.
  L71: Error: Improper paragraph indentation.
  L72: Error: Improper paragraph indentation.
  L73: Error: Improper paragraph indentation.
  L74: Error: Improper paragraph indentation.
  L75: Error: Improper paragraph indentation.
  L76: Error: Improper paragraph indentation.
  L77: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.controller.Deferred'
   1 wraps up a Stage with a Deferred interface
   2 
   3 In this version, the results of the Stage are used to 
   4 construct a list of results and then sent to deferred.  Further,
   5 in this version Cooperate is implemented via reactor's callLater.
   6 
   7     from twisted.internet import reactor
   8     from twisted.flow import flow
   9     
  10     def res(x): print x
  11     d = flow.Deferred([1,2,3])
  12     d.addCallback(res)
  13     reactor.iterate()
   L7: Error: Improper paragraph indentation.
  L10: Error: Improper paragraph indentation.
Module 'twisted.flow.flow'
   1 flow -- asynchronous data flows using generators
   2 
   3 This module provides a mechanism for using async data flows through
   4 the use of generators.  The basic idea of flow is that when ever
   5 you require data from a producer, you yield the producer.  If the
   6 producer is ready, then you can call producer.next() to fetch the
   7 incoming data.  Otherwise, the underlying controller will suspend
   8 the operation to try again later.
   9 
  10 For example, here is a simple 'printer' which consumes items
  11 from its source by printing them.   Note that to get a new item,
  12 it first yields the data source and then calls source.next()
  13 
  14     from __future__ import generators
  15     from twisted.flow import flow
  16     from twisted.internet import reactor, defer
  17     
  18     def printer(source):
  19         source = flow.wrap(source)
  20         while True:
  21             yield source
  22             print source.next()
  23     
  24     someFlowSource =  ["one", flow.Cooperate(1), "two"]
  25 
  26     d = flow.Deferred(printer(someFlowSource))
  27     d.addCallback(lambda _: reactor.stop())
  28     reactor.run()
  29 
  30 In the example above, there are three objects imported from
  31 the flow module:
  32 
  33    flow.wrap        This converts many data sources such as lists,
  34                     generators, and deferreds, into a special 
  35                     instruction object, a Stage.   In this case,  
  36                     a simple list is wrapped.
  37  
  38    flow.Deferred    This is a flow Controller, which executes the
  39                     stage passed to it, aggregating all results into
  40                     a list which is passed to the deferred's callback.
  41                     In this case, the result list is empty, but the
  42                     callback is used to stop the reactor after the
  43                     printing has finished.
  44 
  45    flow.Cooperate   This is a special instruction object, which is
  46                     used by the flow Controller.  In this case, the
  47                     the flow pauses for one second between 'one'
  48                     and 'two'.
  49 
  50 Most classes in the flow module an Instruction, either a CallLater
  51 or a Stage.   A Stage instruction is used to wrap various sorts of
  52 producers, anything from a simple string to Callback functions.  
  53 Some stages can be constructed directly, such as Zip, Concurrent,
  54 Merge, Callback, or Threaded.  But in most cases, in particular
  55 _String, _List, _Iterable, and _Deferred, state construction is
  56 handled through the wrap function.  Stages can yield other stages 
  57 to build a processing chain, results which are returned to the 
  58 previous stage, or a CallLater instruction which causes the whole 
  59 operation to be suspended.   
  60 
  61 Typically, the CallLater instructions as passed up the call stack
  62 till the top level, or Controller.  The controller then typically
  63 returns control, but registers itself to be called later.  Once
  64 called again, the controller sets up the call stack and resumes
  65 the top level generator.  There is a special CallLater, Cooperate,
  66 which simply resumes the chain of stages at a later time.   Some 
  67 stages, Callback, _Deferred, and Threaded have their own special 
  68 CallLater which handles the process of resuming flow for their 
  69 specific case.
  70 
  71     Instruction
  72        CallLater
  73           Cooperate
  74        Stage
  75               # private stages (use flow.wrap)
  76           _String
  77           _List
  78           _Iterable
  79           _Deferred
  80               # public stages
  81           Map
  82              Zip
  83           Concurrent
  84              Merge
  85           Block
  86           Callback*
  87           Threaded*
  88     Controller
  89         Deferred 
  90         Block
  91         Protocol
  L14: Error: Improper paragraph indentation.
  L18: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
  L21: Error: Improper paragraph indentation.
  L24: Error: Improper paragraph indentation.
  L26: Error: Improper paragraph indentation.
  L33: Error: Improper paragraph indentation.
  L34: Error: Improper paragraph indentation.
  L38: Error: Improper paragraph indentation.
  L39: Error: Improper paragraph indentation.
  L45: Error: Improper paragraph indentation.
  L46: Error: Improper paragraph indentation.
  L71: Error: Improper paragraph indentation.
  L72: Error: Improper paragraph indentation.
  L73: Error: Improper paragraph indentation.
  L74: Error: Improper paragraph indentation.
  L75: Error: Improper paragraph indentation.
  L76: Error: Improper paragraph indentation.
  L80: Error: Improper paragraph indentation.
  L81: Error: Improper paragraph indentation.
  L82: Error: Improper paragraph indentation.
  L83: Error: Improper paragraph indentation.
  L84: Error: Improper paragraph indentation.
  L85: Error: Improper paragraph indentation.
  L88: Error: Improper paragraph indentation.
  L89: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.pipe.Filter'
   1 flow equivalent to filter:  Filter(function, source, ... )
   2 
   3 Yield those elements from a source stage for which a function
   4 returns true.   If the function is None, the identity 
   5 function is assumed, that is, all items yielded that are
   6 false (zero or empty) are discarded.
   7 
   8     def odd(val):
   9         if val % 2:
  10             return True
  11     
  12     def range():
  13         yield 1
  14         yield 2
  15         yield 3
  16         yield 4
  17     
  18     source = flow.Filter(odd,range)
  19     printFlow(source)
   L8: Error: Improper paragraph indentation.
   L9: Error: Improper paragraph indentation.
  L10: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L13: Error: Improper paragraph indentation.
  L18: Error: Improper paragraph indentation.
Function 'twisted.flow.protocol.makeProtocol'
   1 Construct a flow based protocol
   2 
   3         This takes a base protocol class, and a set of callbacks and
   4         creates a connection flow based on the two.   For example, 
   5         the following would build a simple 'echo' protocol.
   6 
   7             from __future__ import generators
   8             from twisted.internet import reactor, protocol
   9             from twisted.flow import flow
  10             PORT = 8392
  11 
  12             def echoServer(conn):
  13                 yield conn
  14                 for data in conn:
  15                     conn.write(data)
  16                     yield conn
  17             
  18             def echoClient(conn):
  19                 conn.write("hello, world!")
  20                 yield conn
  21                 print "server said: ", conn.next()
  22                 reactor.callLater(0,reactor.stop)
  23             
  24             server = protocol.ServerFactory()
  25             server.protocol = flow.makeProtocol(echoServer)
  26             reactor.listenTCP(PORT,server)
  27             client = protocol.ClientFactory()
  28             client.protocol = flow.makeProtocol(echoClient)
  29             reactor.connectTCP("localhost", PORT, client)
  30             reactor.run()
  31 
  32         Of course, the best part about flow is that you can nest
  33         stages.  Therefore it is quite easy to make a lineBreaker
  34         generator which takes an input connection and produces
  35         and output connection.   Anyway, the code is almost 
  36         identical as far as the client/server is concerned:
  37 
  38             # this is a filter generator, it consumes from the
  39             # incoming connection, and yields results to
  40             # the next stage, the echoServer below
  41             def lineBreaker(conn, lineEnding = "
  42 "):
  43                 lst = []
  44                 yield conn
  45                 for chunk in conn:
  46                    pos = chunk.find(lineEnding)
  47                    if pos > -1:
  48                        lst.append(chunk[:pos])
  49                        yield "".join(lst)
  50                        lst = [chunk[pos+1:]]
  51                    else:
  52                        lst.append(chunk)
  53                    yield conn
  54                 yield "".join(lst)
  55 
  56             # note that this class is only slightly modified,
  57             # simply comment out the line breaker line to see
  58             # how the server behaves without the filter...
  59             def echoServer(conn):
  60                 lines = flow.wrap(lineBreaker(conn))
  61                 yield lines
  62                 for data in lines:
  63                     conn.write(data)
  64                     yield lines
  65             
  66             # and the only thing that is changed is that we
  67             # are sending data in strange chunks, and even
  68             # putting the last chunk on hold for 2 seconds. 
  69             def echoClient(conn):
  70                 conn.write("Good Morning!
  71 Please ")
  72                 yield conn
  73                 print "server said: ", conn.next()
  74                 conn.write("do not disregard ")
  75                 reactor.callLater(2, conn.write, "this.
  76 ")
  77                 yield conn
  78                 print "server said: ", conn.next()
  79                 reactor.callLater(0,reactor.stop)
  80 
  81     
   L3: Error: Improper paragraph indentation.
   L7: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L13: Error: Improper paragraph indentation.
  L15: Error: Improper paragraph indentation.
  L18: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
  L24: Error: Improper paragraph indentation.
  L32: Error: Improper paragraph indentation.
  L38: Error: Improper paragraph indentation.
  L43: Error: Improper paragraph indentation.
  L46: Error: Improper paragraph indentation.
  L48: Error: Improper paragraph indentation.
  L51: Error: Improper paragraph indentation.
  L52: Error: Improper paragraph indentation.
  L53: Error: Improper paragraph indentation.
  L54: Error: Improper paragraph indentation.
  L56: Error: Improper paragraph indentation.
  L60: Error: Improper paragraph indentation.
  L63: Error: Improper paragraph indentation.
  L66: Error: Improper paragraph indentation.
  L70: Error: Improper paragraph indentation.
  L72: Error: Improper paragraph indentation.
  L77: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.stage.Map'
   1 flow equivalent to map:  Map(function, stage, ... )
   2 
   3 Apply a function to every item yielded and yield the results.
   4 If additional stages are passed, the function must take that
   5 many arguments and is applied to the items of all lists in 
   6 parallel.  If a list is shorter than another, it is assumed
   7 to be extended with None items.    If the function is None,
   8 the identity function is assumed; if there are multiple list
   9 arguments, Map stage returns a sequence consisting of tuples
  10 containing the corresponding items from all lists.
  11 
  12     def fn(val):
  13         return val + 10
  14     
  15     source = flow.Map(fn,range(4))
  16     printFlow(source)
  17     
  L12: Error: Improper paragraph indentation.
  L13: Error: Improper paragraph indentation.
  L15: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.stage.Callback'
   1 Converts a single-thread push interface into a pull interface.
   2 
   3 Once this stage is constructed, its result, errback, and 
   4 finish member variables may be called by a producer.   The
   5 results of which can be obtained by yielding the Callback and
   6 then calling next().   For example:
   7 
   8     source = flow.Callback()
   9     reactor.callLater(0, lambda: source.result("one"))
  10     reactor.callLater(.5, lambda: source.result("two"))
  11     reactor.callLater(1, lambda: source.finish())
  12     printFlow(source)
   L8: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.test.test_flow.slowlist'
   1 this is a generator based list
   2 
   3 def slowlist(list):
   4     list = list[:]
   5     while list:
   6        yield list.pop(0)
   7 
   8 It is primarly used to simulate generators by using
   9 a list (for testing purposes) without being wrapped
  10 as a flow.List, which has all kinds of shortcuts we
  11 don't want for testing.
   L4: Error: Improper paragraph indentation.
   L6: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.test.test_flow.producer'
   1 iterator version of the following generator...
   2 
   3 def producer():
   4     lst = flow.wrap(slowlist([1,2,3]))
   5     nam = flow.wrap(slowlist(_onetwothree))
   6     while True:
   7         yield lst
   8         yield nam
   9         yield (lst.next(),nam.next())
   L4: Error: Improper paragraph indentation.
   L7: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.test.test_flow.consumer'
   1 iterator version of the following generator...
   2 
   3 def consumer():
   4     title = flow.wrap(['Title'])
   5     prod = flow.wrap(producer())
   6     yield title
   7     yield title.next()
   8     yield prod
   9     for data in prod:
  10         yield data
  11         yield prod
   L4: Error: Improper paragraph indentation.
  L10: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.test.test_flow.badgen'
   1 a bad generator...
   2 
   3 def badgen():
   4     yield 'x'
   5     err =  3/ 0
   L4: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.test.test_flow.buildlist'
   1 building a list
   2 
   3 def buildlist(src):
   4     out = []
   5     yield src
   6     for itm in src:
   7         out.append(itm)
   8         yield src
   9     yield out
   L4: Error: Improper paragraph indentation.
   L7: Error: Improper paragraph indentation.
   L9: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.test.test_flow.testconcur'
   1 interweving two concurrent stages
   2 
   3 def testconcur(*stages):
   4     both = flow.Concurrent(*stages)
   5     yield both
   6     for stage in both:
   7         yield (stage.name, stage.result)
   8         yield both
   L4: Error: Improper paragraph indentation.
   L7: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.test.test_flow.echoServer'
   1 a simple echo protocol, server side
   2 
   3 def echoServer(conn):
   4     yield conn
   5     for data in conn:
   6         yield data
   7         yield conn
   L4: Error: Improper paragraph indentation.
   L6: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.test.test_flow.echoClient'
   1 a simple echo client tester
   2 
   3 def echoClient(conn):
   4     yield "testing"
   5     yield conn
   6     # signal that we are done
   7     conn.d.callback(conn.next())
   L4: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.threads.Threaded'
   1 A stage which runs a blocking iterable in a separate thread
   2 
   3 This stage tunnels output from an iterable executed in a separate
   4 thread to the main thread.   This process is carried out by 
   5 a result buffer, and returning Cooperate if the buffer is
   6 empty.   The wrapped iterable's __iter__ and next() methods
   7 will only be invoked in the spawned thread.
   8 
   9 This can be used in one of two ways, first, it can be 
  10 extended via inheritance; with the functionality of the
  11 inherited code implementing next(), and using init() for
  12 initialization code to be run in the thread.
  13 
  14 If the iterable happens to have a chunked attribute, and
  15 that attribute is true, then this wrapper will assume that
  16 data arrives in chunks via a sequence instead of by values.
  17 
  18     from __future__ import generators
  19     from twisted.internet import reactor, defer
  20     from twisted.flow import flow
  21     from twisted.flow.threads import Threaded
  22     
  23     def countSleep(index):
  24         from time import sleep
  25         for index in range(index):
  26             sleep(.3)
  27             print "sleep", index
  28             yield index
  29     
  30     def countCooperate(index):
  31         for index in range(index):
  32             yield flow.Cooperate(.1)
  33             print "cooperate", index
  34             yield "coop %s" % index
  35     
  36     d = flow.Deferred( flow.Merge(
  37             Threaded(countSleep(5)),
  38             countCooperate(5)))
  39     
  40     def prn(x):
  41         print x
  42         reactor.stop()
  43     d.addCallback(prn)
  44     reactor.run()
  L18: Error: Improper paragraph indentation.
  L23: Error: Improper paragraph indentation.
  L24: Error: Improper paragraph indentation.
  L26: Error: Improper paragraph indentation.
  L30: Error: Improper paragraph indentation.
  L31: Error: Improper paragraph indentation.
  L32: Error: Improper paragraph indentation.
  L36: Error: Improper paragraph indentation.
  L37: Error: Improper paragraph indentation.
  L40: Error: Improper paragraph indentation.
  L41: Error: Improper paragraph indentation.
  L43: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.threads.QueryIterator'
   1 Converts a database query into a result iterator
   2 
   3 from __future__         import generators
   4 from twisted.enterprise import adbapi
   5 from twisted.internet   import reactor
   6 from twisted.flow import flow
   7 from twisted.flow.threads import QueryIterator, Threaded
   8 
   9 dbpool = adbapi.ConnectionPool("SomeDriver",host='localhost', 
  10              db='Database',user='User',passwd='Password')
  11 
  12 # # I test with...
  13 # from pyPgSQL import PgSQL
  14 # dbpool = PgSQL
  15  
  16 sql = '''
  17   (SELECT 'one')
  18 UNION ALL
  19   (SELECT 'two')
  20 UNION ALL
  21   (SELECT 'three')
  22 '''
  23 def consumer():
  24     print "executing"
  25     query = Threaded(QueryIterator(dbpool, sql))
  26     print "yielding"
  27     yield query
  28     print "done yeilding"
  29     for row in query:
  30         print "Processed result : ", row
  31         yield query
  32 
  33 from twisted.internet import reactor
  34 def finish(result): 
  35     print "Deferred Complete : ", result
  36     reactor.stop()
  37 f = flow.Deferred(consumer())
  38 f.addBoth(finish)
  39 reactor.run()
  L10: Error: Improper paragraph indentation.
  L17: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
  L21: Error: Improper paragraph indentation.
  L24: Error: Improper paragraph indentation.
  L30: Error: Improper paragraph indentation.
  L35: Error: Improper paragraph indentation.
TwistedClass 'twisted.flow.web.Resource'
   1 a resource which uses flow in its page generation
   2 
   3 from __future__ import generators
   4 from twisted.flow import flow
   5 
   6 def render(req):
   7     req.write("<html><head><title>Delayed</title></head>")
   8     req.write("<body><h1>Delayed WebPage</h1>")
   9     yield flow.Cooperate(5)
  10     req.write("<p>Delayed Content</p></body></html>")
  11 
  12 if __name__=='__main__':
  13     from twisted.internet import reactor
  14     from twisted.web.server import Site
  15     from twisted.flow.web import Resource
  16     print "visit http://localhost:8081/ to view"
  17     reactor.listenTCP(8081,Site(Resource(render)))
  18     reactor.run()
   L7: Error: Improper paragraph indentation.
  L13: Error: Improper paragraph indentation.
Function 'twisted.flow.wrap.wrap'
   1 Wraps various objects for use within a flow
   2 
   3 The following example illustrates many different
   4 ways in which regular objects can be wrapped by
   5 the flow module to behave in a cooperative manner.
   6 
   7     # required imports
   8     from __future__ import generators
   9     from twisted.flow import flow
  10     from twisted.internet import reactor, defer
  11     
  12     # save this function, it is used everwhere
  13     def printFlow(source):
  14         def printer(source):
  15             source = flow.wrap(source)
  16             while True:
  17                 yield source
  18                 print source.next()
  19         d = flow.Deferred(printer(source))
  20         d.addCallback(lambda _: reactor.stop())
  21         reactor.run()
  22   
  23     source = "string"
  24     printFlow(source)
  25 
  26     source = ["one",flow.Cooperate(1),"two"]
  27     printFlow(source)
  28 
  29     def source():
  30         yield "aeye"
  31         yield flow.Cooperate()
  32         yield "capin"
  33     printFlow(source)
  34 
  35     source = Deferred()
  36     reactor.callLater(1, lambda: source.callback("howdy"))
  37     printFlow(source)
   L7: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L14: Error: Improper paragraph indentation.
  L15: Error: Improper paragraph indentation.
  L17: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
  L23: Error: Improper paragraph indentation.
  L26: Error: Improper paragraph indentation.
  L29: Error: Improper paragraph indentation.
  L30: Error: Improper paragraph indentation.
  L33: Error: Improper paragraph indentation.
  L35: Error: Improper paragraph indentation.
Module 'twisted.internet._posixstdio'
   1 Standard input/out/err support.
   2 
   3 API Stability: unstable (pending deprecation in favor of a reactor-based API)
   4 
   5 Future Plans:
   6 
   7     support for stderr, perhaps
   8     Rewrite to use the reactor instead of an ad-hoc mechanism for connecting
   9         protocols to transport.
  10 
  11 Maintainer: U{James Y Knight <mailto:foom@fuhm.net>}
   L7: Error: Improper paragraph indentation.
   L9: Error: Improper paragraph indentation.
TwistedClass 'twisted.internet.defer.waitForDeferred'
   1 API Stability: semi-stable
   2 
   3 Maintainer: U{Christopher Armstrong<mailto:radix@twistedmatrix.com>}
   4 
   5 waitForDeferred and deferredGenerator help you write
   6 Deferred-using code that looks like it's blocking (but isn't
   7 really), with the help of generators.
   8 
   9 There are two important functions involved: waitForDeferred, and
  10 deferredGenerator.
  11 
  12     def thingummy():
  13         thing = waitForDeferred(makeSomeRequestResultingInDeferred())
  14         yield thing
  15         thing = thing.getResult()
  16         print thing #the result! hoorj!
  17     thingummy = deferredGenerator(thingummy)
  18 
  19 waitForDeferred returns something that you should immediately yield;
  20 when your generator is resumed, calling thing.getResult() will either
  21 give you the result of the Deferred if it was a success, or raise an
  22 exception if it was a failure.
  23 
  24 deferredGenerator takes one of these waitForDeferred-using
  25 generator functions and converts it into a function that returns a
  26 Deferred. The result of the Deferred will be the last
  27 value that your generator yielded (remember that 'return result' won't
  28 work; use 'yield result; return' in place of that).
  29 
  30 Note that not yielding anything from your generator will make the
  31 Deferred result in None. Yielding a Deferred from your generator
  32 is also an error condition; always yield waitForDeferred(d)
  33 instead.
  34 
  35 The Deferred returned from your deferred generator may also
  36 errback if your generator raised an exception.
  37 
  38     def thingummy():
  39         thing = waitForDeferred(makeSomeRequestResultingInDeferred())
  40         yield thing
  41         thing = thing.getResult()
  42         if thing == 'I love Twisted':
  43             # will become the result of the Deferred
  44             yield 'TWISTED IS GREAT!'
  45             return
  46         else:
  47             # will trigger an errback
  48             raise Exception('DESTROY ALL LIFE')
  49     thingummy = deferredGenerator(thingummy)
  50 
  51 Put succinctly, these functions connect deferred-using code with this
  52 'fake blocking' style in both directions: waitForDeferred converts from
  53 a Deferred to the 'blocking' style, and deferredGenerator converts from
  54 the 'blocking' style to a Deferred.
  L12: Error: Improper paragraph indentation.
  L13: Error: Improper paragraph indentation.
  L17: Error: Improper paragraph indentation.
  L38: Error: Improper paragraph indentation.
  L39: Error: Improper paragraph indentation.
  L43: Error: Improper paragraph indentation.
  L46: Error: Improper paragraph indentation.
  L47: Error: Improper paragraph indentation.
  L49: Error: Improper paragraph indentation.
Function 'twisted.internet.defer._ConcurrencyPrimitive.run'
   1 Acquire, run, release.
   2 
   3 This function takes a callable as its first argument and any
   4 number of other positional and keyword arguments.  When the
   5 lock or semaphore is acquired, the callable will be invoked
   6 with those arguments.
   7 
   8 The callable may return a Deferred; if it does, the lock or 
   9 semaphore won't be released until that Deferred fires.
  10 
  11 @return Deferred of function result.
  L11: Warning: Possible mal-formatted field item.
Function 'twisted.internet.interfaces.IProcessTransport.signalProcess'
   1 Send a signal to the process.
   2 
   3 @param signalID: can be
   4   - one of C{"HUP"}, C{"KILL"}, C{"STOP"}, or C{"INT"}.
   5       These will be implemented in a
   6       cross-platform manner, and so should be used
   7       if possible.
   8   - an integer, where it represents a POSIX
   9       signal ID.
  10 
  11 @raise L{twisted.internet.error.ProcessExitedAlready}: Raised if the
  12 process has already exited.
  L11: Warning: Possible mal-formatted field item.
Function 'twisted.internet.interfaces.IUDPTransport.write'
   1 Write packet to given address.
   2 
   3 @param addr: a tuple of (ip, port). For connected transports must
   4              be the address the transport is connected to, or None.
   5              In non-connected mode this is mandatory.
   6 @raise L{MessageLengthError<twisted.internet.error.MessageLengthError>}
   L6: Warning: Possible mal-formatted field item.
   L6: Error: Fields must be the final elements in an epytext string.
Module 'twisted.internet.kqreactor'
   1 A kqueue()/kevent() based implementation of the Twisted main loop.
   2 
   3 To install the event loop (and you should do this before any connections,
   4 listeners or connectors are added)::
   5 
   6     | from twisted.internet import kqreactor
   7     | kqreactor.install()
   8 
   9 This reactor only works on FreeBSD and requires PyKQueue 1.3, which is
  10 available at:  U{http://people.freebsd.org/~dwhite/PyKQueue/}
  11 
  12 API Stability: stable
  13 
  14 Maintainer: U{Itamar Shtull-Trauring<mailto:twisted@itamarst.org>}
  15 
  16 
  17 
  18 You're going to need to patch PyKqueue:
  19 
  20 =====================================================
  21 --- PyKQueue-1.3/kqsyscallmodule.c      Sun Jan 28 21:59:50 2001
  22 +++ PyKQueue-1.3/kqsyscallmodule.c.new  Tue Jul 30 18:06:08 2002
  23 @@ -137,7 +137,7 @@
  24  }
  25  
  26  statichere PyTypeObject KQEvent_Type = {
  27 -  PyObject_HEAD_INIT(NULL)
  28 +  PyObject_HEAD_INIT(&PyType_Type)
  29    0,                             // ob_size
  30    "KQEvent",                     // tp_name
  31    sizeof(KQEventObject),         // tp_basicsize
  32 @@ -291,13 +291,14 @@
  33  
  34    /* Build timespec for timeout */
  35    totimespec.tv_sec = timeout / 1000;
  36 -  totimespec.tv_nsec = (timeout % 1000) * 100000;
  37 +  totimespec.tv_nsec = (timeout % 1000) * 1000000;
  38  
  39    // printf("timespec: sec=%d nsec=%d
  40 ", totimespec.tv_sec, totimespec.tv_nsec);
  41  
  42    /* Make the call */
  43 -
  44 +  Py_BEGIN_ALLOW_THREADS
  45    gotNumEvents = kevent (self->fd, changelist, haveNumEvents, triggered, wantNumEvents, &totimespec);
  46 +  Py_END_ALLOW_THREADS
  47  
  48    /* Don't need the input event list anymore, so get rid of it */
  49    free (changelist);
  50 @@ -361,7 +362,7 @@
  51  statichere PyTypeObject KQueue_Type = {
  52         /* The ob_type field must be initialized in the module init function
  53          * to be portable to Windows without using C++. */
  54 -       PyObject_HEAD_INIT(NULL)
  55 +       PyObject_HEAD_INIT(&PyType_Type)
  56         0,                      /*ob_size*/
  57         "KQueue",                       /*tp_name*/
  58         sizeof(KQueueObject),   /*tp_basicsize*/
  L23: Warning: Possible mal-formatted field item.
  L32: Warning: Possible mal-formatted field item.
  L50: Warning: Possible mal-formatted field item.
  L24: Error: Improper paragraph indentation.
  L26: Error: Improper paragraph indentation.
  L27: Error: Lists must be indented.
  L29: Error: Improper paragraph indentation.
  L34: Error: Improper paragraph indentation.
  L39: Error: Improper paragraph indentation.
  L42: Error: Improper paragraph indentation.
  L45: Error: Improper paragraph indentation.
  L48: Error: Improper paragraph indentation.
  L51: Error: Improper paragraph indentation.
  L52: Error: Improper paragraph indentation.
  L53: Error: Improper paragraph indentation.
  L56: Error: Improper paragraph indentation.
Function 'twisted.internet.posixbase.PosixReactorBase._removeAll'
   1 Remove all readers and writers, and return list of Selectables.
   2 Meant for calling from subclasses, to implement removeAll, like:
   3   def removeAll(self):
   4       return self._removeAll(reads, writes)
   5 where reads, writes are iterables.
   L3: Error: Improper paragraph indentation.
   L4: Error: Improper paragraph indentation.
Function 'twisted.internet.process.Process.__init__'
   1 Spawn an operating-system process.
   2 
   3 This is where the hard work of disconnecting all currently open
   4 files / forking / executing the new process happens.  (This is
   5 executed automatically when a Process is instantiated.)
   6 
   7 This will also run the subprocess as a given user ID and group ID, if
   8 specified.  (Implementation Note: this doesn't support all the arcane
   9 nuances of setXXuid on UNIX: it will assume that either your effective
  10 or real UID is 0.)
  11 
  12 @param childFDs: a dictionary mapping
  13     fd_in_child -> current_fd_in_parent/'r'/'w'
  14 
  15      If the value is a number, it specifies one of the parent's fds
  16      that will be remapped to the child's fd. This is useful for
  17      things like inetd and shell-like file redirection.
  18 
  19      If it is the string 'r', a pipe will be created and attached to
  20      the child at that fd number, and the parent will be able to
  21      read from the pipe. This is useful for the child's stdout and
  22      stderr.
  23 
  24      If it is the string 'w', a pipe will be created and attached,
  25      and the parent will be able to write into that pipe. This is
  26      useful for the child's stdin.
  27 
  28     If childFDs is not passed, the default behaviour is to use a
  29     mapping that opens the usual stdin/stdout/stderr pipes.
  L15: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
  L24: Error: Improper paragraph indentation.
Function 'twisted.internet.process.Process._setupChild'
   1 fdmap[childFD] = parentFD
   2 
   3 The child wants to end up with 'childFD' attached to what used to be
   4 the parent's parentFD. As an example, a bash command run like
   5 'command 2>&1' would correspond to an fdmap of {0:0, 1:1, 2:1}.
   6 'command >foo.txt' would be {0:0, 1:os.open('foo.txt'), 2:2}.
   7 
   8 Step 1: close all file descriptors that aren't values of fdmap.
   9 This means 0 .. maxfds.
  10 
  11 Step 2: for each childFD:
  12  if fdmap[childFD] == childFD, the descriptor is already in place.
  13  Make sure the CLOEXEC flag is not set, then delete the entry from
  14  fdmap.
  15 
  16  if childFD is in fdmap.values(), then the target descriptor is
  17  busy. Use os.dup() to move it elsewhere, update all fdmap[childFD]
  18  items that point to it, then close the original. Then fall through
  19  to the next case.
  20 
  21  now fdmap[childFD] is not in fdmap.values(), and is free. Use
  22  os.dup2() to move it to the right place, then close the original.
  L12: Error: Improper paragraph indentation.
  L16: Error: Improper paragraph indentation.
  L21: Error: Improper paragraph indentation.
Module 'twisted.internet.stdio'
   1 Standard input/out/err support.
   2 
   3 API Stability: unstable (pending deprecation in favor of a reactor-based API)
   4 
   5 This module exposes one name, StandardIO, which is a factory that takes an
   6 IProtocol provider as an argument.  It connects that protocol to standard input
   7 and output on the current process.
   8 
   9 It should work on any UNIX and also on Win32 (with some caveats: due to
  10 platform limitations, it will perform very poorly on Win32).
  11 
  12 Future Plans:
  13 
  14     support for stderr, perhaps
  15     Rewrite to use the reactor instead of an ad-hoc mechanism for connecting
  16         protocols to transport.
  17 
  18 
  19 Maintainer: U{James Y Knight <mailto:foom@fuhm.net>}
  L14: Error: Improper paragraph indentation.
  L16: Error: Improper paragraph indentation.
Module 'twisted.lore.nevowlore'
   1 Nevow support for lore.
   2 
   3 Do something like:
   4 
   5   lore -inevow --config pageclass=some.module.SomePageSubclass [other-opts]
   6 
   7 API Stability: unstable
   8 
   9 Maintainer: U{Christopher Armstrong<mailto:radix@twistedmatrix.com>}
   L5: Error: Improper paragraph indentation.
Module 'twisted.mail.alias'
   1 Support for aliases(5) configuration files
   2 
   3 API Stability: Unstable
   4 
   5 @author: U{Jp Calderone<mailto:exarkun@twistedmatrix.com>}
   6 
   7 TODO: Monitor files for reparsing
   8       Handle non-local alias targets
   9       Handle maildir alias targets
   L8: Error: Improper paragraph indentation.
Function 'twisted.mail.alias.loadAliasFile'
   1 Load a file containing email aliases.
   2 
   3 Lines in the file should be formatted like so:
   4 
   5     username: alias1,alias2,...,aliasN
   6 
   7 Aliases beginning with a | will be treated as programs, will be run, and
   8 the message will be written to their stdin.
   9 
  10 Aliases without a host part will be assumed to be addresses on localhost.
  11 
  12 If a username is specified multiple times, the aliases for each are joined
  13 together as if they had all been on one line.
  14 
  15 @type domains: C{dict} of implementor of C{IDomain}
  16 @param domains: The domains to which these aliases will belong.
  17 
  18 @type filename: C{str}
  19 @param filename: The filename from which to load aliases.
  20 
  21 @type fp: Any file-like object.
  22 @param fp: If specified, overrides C{filename}, and aliases are read from
  23 it.
  24 
  25 @rtype: C{dict}
  26 @return: A dictionary mapping usernames to C{AliasGroup} objects.
   L5: Error: Improper paragraph indentation.
Module 'twisted.mail.imap4'
   1 An IMAP4 protocol implementation
   2 
   3 API Stability: Semi-stable
   4 
   5 @author: U{Jp Calderone<mailto:exarkun@twistedmatrix.com>}
   6 
   7 To do:
   8   Suspend idle timeout while server is processing
   9   Use an async message parser instead of buffering in memory
  10   Figure out a way to not queue multi-message client requests (Flow? A simple callback?)
  11   Clarify some API docs (Query, etc)
  12   Make APPEND recognize (again) non-existent mailboxes before accepting the literal
   L8: Error: Improper paragraph indentation.
Function 'twisted.mail.imap4.IMAP4Client.namespace'
   1 Retrieve information about the namespaces available to this account
   2 
   3 This command is allowed in the Authenticated and Selected states.
   4 
   5 @rtype: C{Deferred}
   6 @return: A deferred whose callback is invoked with namespace
   7 information.  An example of this information is:
   8 
   9     [[['', '/']], [], []]
  10 
  11 which indicates a single personal namespace called '' with '/'
  12 as its hierarchical delimiter, and no shared or user namespaces.
   L9: Error: Improper paragraph indentation.
Function 'twisted.mail.imap4.Query'
   1 Create a query string
   2 
   3 Among the accepted keywords are:
   4 
   5     all         : If set to a true value, search all messages in the
   6                   current mailbox
   7 
   8     answered    : If set to a true value, search messages flagged with
   9                   \Answered
  10 
  11     bcc         : A substring to search the BCC header field for
  12 
  13     before      : Search messages with an internal date before this
  14                   value.  The given date should be a string in the format
  15                   of 'DD-Mon-YYYY'.  For example, '03-Mar-2003'.
  16 
  17     body        : A substring to search the body of the messages for
  18 
  19     cc          : A substring to search the CC header field for
  20 
  21     deleted     : If set to a true value, search messages flagged with
  22                   \Deleted
  23 
  24     draft       : If set to a true value, search messages flagged with
  25                   \Draft
  26 
  27     flagged     : If set to a true value, search messages flagged with
  28                   \Flagged
  29 
  30     from        : A substring to search the From header field for
  31 
  32     header      : A two-tuple of a header name and substring to search
  33                   for in that header
  34 
  35     keyword     : Search for messages with the given keyword set
  36 
  37     larger      : Search for messages larger than this number of octets
  38 
  39     messages    : Search only the given message sequence set.
  40 
  41     new         : If set to a true value, search messages flagged with
  42                   \Recent but not \Seen
  43 
  44     old         : If set to a true value, search messages not flagged with
  45                   \Recent
  46 
  47     on          : Search messages with an internal date which is on this
  48                   date.  The given date should be a string in the format
  49                   of 'DD-Mon-YYYY'.  For example, '03-Mar-2003'.
  50 
  51     recent      : If set to a true value, search for messages flagged with
  52                   \Recent
  53 
  54     seen        : If set to a true value, search for messages flagged with
  55                   \Seen
  56 
  57     sentbefore  : Search for messages with an RFC822 'Date' header before
  58                   this date.  The given date should be a string in the format
  59                   of 'DD-Mon-YYYY'.  For example, '03-Mar-2003'.
  60 
  61     senton      : Search for messages with an RFC822 'Date' header which is
  62                   on this date  The given date should be a string in the format
  63                   of 'DD-Mon-YYYY'.  For example, '03-Mar-2003'.
  64 
  65     sentsince   : Search for messages with an RFC822 'Date' header which is
  66                   after this date.  The given date should be a string in the format
  67                   of 'DD-Mon-YYYY'.  For example, '03-Mar-2003'.
  68 
  69     since       : Search for messages with an internal date that is after
  70                   this date..  The given date should be a string in the format
  71                   of 'DD-Mon-YYYY'.  For example, '03-Mar-2003'.
  72 
  73     smaller     : Search for messages smaller than this number of octets
  74 
  75     subject     : A substring to search the 'subject' header for
  76 
  77     text        : A substring to search the entire message for
  78 
  79     to          : A substring to search the 'to' header for
  80 
  81     uid         : Search only the messages in the given message set
  82 
  83     unanswered  : If set to a true value, search for messages not
  84                   flagged with \Answered
  85 
  86     undeleted   : If set to a true value, search for messages not
  87                   flagged with \Deleted
  88 
  89     undraft     : If set to a true value, search for messages not
  90                   flagged with \Draft
  91 
  92     unflagged   : If set to a true value, search for messages not
  93                   flagged with \Flagged
  94 
  95     unkeyword   : Search for messages without the given keyword set
  96 
  97     unseen      : If set to a true value, search for messages not
  98                   flagged with \Seen
  99 
 100 @type sorted: C{bool}
 101 @param sorted: If true, the output will be sorted, alphabetically.
 102 The standard does not require it, but it makes testing this function
 103 easier.  The default is zero, and this should be acceptable for any
 104 application.
 105 
 106 @rtype: C{str}
 107 @return: The formatted query string
   L5: Error: Improper paragraph indentation.
   L6: Error: Improper paragraph indentation.
   L8: Error: Improper paragraph indentation.
   L9: Error: Improper paragraph indentation.
  L11: Error: Improper paragraph indentation.
  L13: Error: Improper paragraph indentation.
  L14: Error: Improper paragraph indentation.
  L17: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
  L21: Error: Improper paragraph indentation.
  L22: Error: Improper paragraph indentation.
  L24: Error: Improper paragraph indentation.
  L25: Error: Improper paragraph indentation.
  L27: Error: Improper paragraph indentation.
  L28: Error: Improper paragraph indentation.
  L30: Error: Improper paragraph indentation.
  L32: Error: Improper paragraph indentation.
  L33: Error: Improper paragraph indentation.
  L35: Error: Improper paragraph indentation.
  L37: Error: Improper paragraph indentation.
  L39: Error: Improper paragraph indentation.
  L41: Error: Improper paragraph indentation.
  L42: Error: Improper paragraph indentation.
  L44: Error: Improper paragraph indentation.
  L45: Error: Improper paragraph indentation.
  L47: Error: Improper paragraph indentation.
  L48: Error: Improper paragraph indentation.
  L51: Error: Improper paragraph indentation.
  L52: Error: Improper paragraph indentation.
  L54: Error: Improper paragraph indentation.
  L55: Error: Improper paragraph indentation.
  L57: Error: Improper paragraph indentation.
  L58: Error: Improper paragraph indentation.
  L61: Error: Improper paragraph indentation.
  L62: Error: Improper paragraph indentation.
  L65: Error: Improper paragraph indentation.
  L66: Error: Improper paragraph indentation.
  L69: Error: Improper paragraph indentation.
  L70: Error: Improper paragraph indentation.
  L73: Error: Improper paragraph indentation.
  L75: Error: Improper paragraph indentation.
  L77: Error: Improper paragraph indentation.
  L79: Error: Improper paragraph indentation.
  L81: Error: Improper paragraph indentation.
  L83: Error: Improper paragraph indentation.
  L84: Error: Improper paragraph indentation.
  L86: Error: Improper paragraph indentation.
  L87: Error: Improper paragraph indentation.
  L89: Error: Improper paragraph indentation.
  L90: Error: Improper paragraph indentation.
  L92: Error: Improper paragraph indentation.
  L93: Error: Improper paragraph indentation.
  L95: Error: Improper paragraph indentation.
  L97: Error: Improper paragraph indentation.
  L98: Error: Improper paragraph indentation.
Function 'twisted.mail.imap4.IMessagePart.getSubPart'
   1 Retrieve a MIME sub-message
   2 
   3 @type part: C{int}
   4 @param part: The number of the part to retrieve, indexed from 0.
   5 
   6 @raise C{IndexError}: Raised if the specified part does not exist.
   7 @raise C{TypeError}: Raised if this message is not multipart.
   8 
   9 @rtype: Any object implementing C{IMessagePart}.
  10 @return: The specified sub-part.
   L6: Warning: Possible mal-formatted field item.
   L7: Warning: Possible mal-formatted field item.
Module 'twisted.mail.pop3'
   1 Post-office Protocol version 3
   2 
   3 @author U{Glyph Lefkowitz<mailto:glyph@twistedmatrix.com>}
   4 @author U{Jp Calderone<mailto:exarkun@twistedmatrix.com>}
   5 
   6 API Stability: Unstable
   L3: Warning: Possible mal-formatted field item.
   L4: Warning: Possible mal-formatted field item.
Module 'twisted.mail.pop3client'
   1 POP3 client protocol implementation
   2 
   3 Don't use this module directly.  Use twisted.mail.pop3 instead.
   4 
   5 @author U{Jp Calderone<mailto:exarkun@twistedmatrix.com>}
   6 
   7 API Stability: Unstable
   L5: Warning: Possible mal-formatted field item.
Function 'twisted.mail.pop3client._dotUnquoter'
   1     '.' characters which begin a line of a message are doubled to avoid
   2     confusing with the terminating '.
   3 ' sequence.  This function unquotes
   4     them.
   5     
   L3: Error: Improper paragraph indentation.
Function 'twisted.mail.pop3client.POP3Client.capabilities'
   1 Retrieve the capabilities supported by this server.
   2 
   3 Not all servers support this command.  If the server does not
   4 support this, it is treated as though it returned a successful
   5 response listing no capabilities.  At some future time, this may be
   6 changed to instead seek out information about a server's
   7 capabilities in some other fashion (only if it proves useful to do
   8 so, and only if there are servers still in use which do not support
   9 CAPA but which do support POP3 extensions that are useful).
  10 
  11 @type useCache: C{bool}
  12 @param useCache: If set, and if capabilities have been
  13 retrieved previously, just return the previously retrieved
  14 results.
  15 
  16 @return: A Deferred which fires with a C{dict} mapping C{str}
  17 to C{None} or C{list}s of C{str}.  For example,
  18 
  19     C: CAPA
  20     S: +OK Capability list follows
  21     S: TOP
  22     S: USER
  23     S: SASL CRAM-MD5 KERBEROS_V4
  24     S: RESP-CODES
  25     S: LOGIN-DELAY 900
  26     S: PIPELINING
  27     S: EXPIRE 60
  28     S: UIDL
  29     S: IMPLEMENTATION Shlemazle-Plotz-v302
  30     S: .
  31 
  32 will be lead to a result of
  33 
  34     | {'TOP': None,
  35     |  'USER': None,
  36     |  'SASL': ['CRAM-MD5', 'KERBEROS_V4'],
  37     |  'RESP-CODES': None,
  38     |  'LOGIN-DELAY': ['900'],
  39     |  'PIPELINING': None,
  40     |  'EXPIRE': ['60'],
  41     |  'UIDL': None,
  42     |  'IMPLEMENTATION': ['Shlemazle-Plotz-v302']}
  L19: Error: Improper paragraph indentation.
  L34: Error: Improper paragraph indentation.
TwistedClass 'twisted.mail.scripts.mailmail.Configuration'
   1 @ivar allowUIDs
   2 @ivar allowGIDs
   3 @ivar denyUIDs
   4 @ivar denyGIDs
   5 @ivar useraccess
   6 @ivar groupaccess
   7 @ivar identities
   8 @ivar smarthost
   9 @ivar domain
  10 @ivar defaultAccess
   L1: Warning: Possible mal-formatted field item.
   L2: Warning: Possible mal-formatted field item.
   L3: Warning: Possible mal-formatted field item.
   L4: Warning: Possible mal-formatted field item.
   L5: Warning: Possible mal-formatted field item.
   L6: Warning: Possible mal-formatted field item.
   L7: Warning: Possible mal-formatted field item.
   L8: Warning: Possible mal-formatted field item.
   L9: Warning: Possible mal-formatted field item.
  L10: Warning: Possible mal-formatted field item.
Module 'twisted.names.root'
   1 Resolver implementation for querying successive authoritative servers to
   2 lookup a record, starting from the root nameservers.
   3 
   4 API Stability: Unstable
   5 
   6 @author U{Jp Calderone<mailto:exarkun@twistedmatrix.com>}
   7 
   8 todo: robustify it
   9       break discoverAuthority into several smaller functions
  10       documentation
   L6: Warning: Possible mal-formatted field item.
   L9: Error: Improper paragraph indentation.
Function 'twisted.pb.negotiate.Negotiation.evaluateHello'
   1 Evaluate the HELLO message sent by the other side. We compare
   2 TubIDs, and the higher value becomes the 'master' and makes the
   3 negotiation decisions.
   4 
   5 This method returns a tuple of DECISION,PARAMS. There are a few
   6 different possibilities:
   7 
   8  We are the master, we make a negotiation decision: DECISION is the
   9  block of data to send back to the non-master side, PARAMS are the
  10  connection parameters we will use ourselves.
  11 
  12  We are the master, we can't accomodate their request: raise
  13  NegotiationError
  14 
  15  We are not the master: DECISION is None
   L8: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L15: Error: Improper paragraph indentation.
Function 'twisted.pb.pb.Listener.getPortnum'
   1 When this Listener was created with a strport string of '0' or
   2 'tcp:0' (meaning 'please allocate me something'), and if the Listener
   3 is active (it is attached to a Tub which is in the 'running' state),
   4 this method will return the port number that was allocated. This is
   5 useful for the following pattern:
   6 
   7  t = PBService()
   8  l = t.listenOn('tcp:0')
   9  t.setLocation('localhost:%d' % l.getPortnum())
   L7: Error: Improper paragraph indentation.
Function 'twisted.pb.pb.PBService.setLocation'
   1 Tell this service what its location is: a host:port description of
   2 how to reach it from the outside world. You need to use this because
   3 the Tub can't do it without help. If you do a
   4 C{s.listenOn('tcp:1234')}, and the host is known as
   5 C{foo.example.com}, then it would be appropriate to do:
   6 
   7  s.setLocation('foo.example.com:1234')
   8 
   9 You must set the location before you can register any references.
  10 
  11 Encrypted Tubs can have multiple location hints, just provide
  12 multiple arguments. Unencrypted Tubs can only have one location.
   L7: Error: Improper paragraph indentation.
TwistedClass 'twisted.pb.remoteinterface.RemoteInterfaceClass'
   1 This metaclass lets RemoteInterfaces be a lot like Interfaces. The
   2 methods are parsed differently (PB needs more information from them than
   3 z.i extracts, and the methods can be specified with a RemoteMethodSchema
   4 directly).
   5 
   6 RemoteInterfaces can accept the following additional attribute:
   7 
   8  __remote_name__: can be set to a string to specify the globally-unique
   9                   name for this interface. This should be a URL in a
  10                   namespace you administer. If not set, defaults to the
  11                   fully qualified classname.
  12 
  13 RIFoo.names() returns the list of remote method names.
  14 
  15 RIFoo['bar'] is still used to get information about method 'bar', however
  16 it returns a RemoteMethodSchema instead of a z.i Method instance.
   L8: Error: Improper paragraph indentation.
   L9: Error: Improper paragraph indentation.
Module 'twisted.pb.schema'
   1 primitive constraints:
   2    types.StringType: string with maxLength=1k
   3    String(maxLength=1000): string with arbitrary maxLength
   4    types.BooleanType: boolean
   5    types.IntType: integer that fits in s_int32_t
   6    types.LongType: integer with abs(num) < 2**8192 (fits in 1024 bytes)
   7    Int(maxBytes=1024): integer with arbitrary maxValue=2**(8*maxBytes)
   8    types.FloatType: number
   9    Number(maxBytes=1024): float or integer with maxBytes
  10    interface: instance which implements (or adapts to) the Interface
  11    class: instance of the class or a subclass
  12    # unicode? types? none?
  13 
  14 container constraints:
  15    TupleOf(constraint1, constraint2..): fixed size, per-element constraint
  16    ListOf(constraint, maxLength=30): all elements obey constraint
  17    DictOf(keyconstraint, valueconstraint): keys and values obey constraints
  18    AttributeDict(*attrTuples, ignoreUnknown=False):
  19     attrTuples are (name, constraint)
  20     ignoreUnknown=True means that received attribute names which aren't
  21      listed in attrTuples should be ignored instead of raising an
  22      UnknownAttrName exception
  23 
  24 composite constraints:
  25    tuple: alternatives: must obey one of the different constraints
  26 
  27 modifiers:
  28    Shared(constraint, refLimit=None): object may be referenced multiple times
  29      within the serialization domain (question: which domain?). All
  30      constraints default to refLimit=1, and a MultiplyReferenced exception
  31      is raised as soon as the reference count goes above the limit.
  32      refLimit=None means no limit is enforced.
  33    Optional(name, constraint, default=None): key is not required. If not
  34             provided and default is None, key/attribute will not be created
  35             Only valid inside DictOf and AttributeDict.
  36    
   L2: Error: Improper paragraph indentation.
  L15: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
  L21: Error: Improper paragraph indentation.
  L25: Error: Improper paragraph indentation.
  L28: Error: Improper paragraph indentation.
  L29: Error: Improper paragraph indentation.
  L33: Error: Improper paragraph indentation.
  L34: Error: Improper paragraph indentation.
Function 'twisted.pb.tokens.IUnslicer.receiveClose'
   1 Called when the Close token is received. Returns a tuple of
   2 (object/referenceable-deferred, complete-deferred), or an
   3 BananaFailure if something went wrong. There are four potential
   4 cases:
   5 
   6  (obj, None): the object is complete and ready to go
   7  (d1, None): the object cannot be referenced yet, probably
   8              because it is an immutable container, and one of its
   9              children cannot be referenced yet. The deferred will
  10              fire by the time the cycle has been fully deserialized,
  11              with the object as its argument.
  12  (obj, d2): the object can be referenced, but it is not yet
  13             complete, probably because some component of it is
  14             'slow' (see below). The Deferred will fire (with an
  15             argument of None) when the object is ready to be used.
  16             It is not guaranteed to fire by the time the enclosing
  17             top-level object has finished deserializing.
  18  (d1, d2): the object cannot yet be referenced, and even if it could
  19            be, it would not yet be ready for use. Any potential users
  20            should wait until both deferreds fire before using it.
  21 
  22 The first deferred (d1) is guaranteed to fire before the top-most
  23 enclosing object (a CallUnslicer, for PB methods) is closed. (if it
  24 does not fire, that indicates a broken cycle). It is present to
  25 handle cycles that include immutable containers, like tuples.
  26 Mutable containers *must* return a reference to an object (even if
  27 it is not yet ready to be used, because it contains placeholders to
  28 tuples that have not yet been created), otherwise those cycles
  29 cannot be broken and the object graph will not reconstructable.
  30 
  31 The second (d2) has no such guarantees about when it will fire. It
  32 indicates a dependence upon 'slow' external events. The first use
  33 case for such 'slow' objects is a globally-referenceable object
  34 which requires a new Broker connection before it can be used, so the
  35 Deferred will not fire until a TCP connection has been established
  36 and the first stages of PB negotiation have been completed.
  37 
  38 If necessary, unbanana.setObject should be called, then the Deferred
  39 created in start() should be fired with the new object.
   L6: Error: Improper paragraph indentation.
   L8: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L13: Error: Improper paragraph indentation.
  L18: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
Function 'twisted.protocols.ftp.FTP.ftp_PASV'
   1 Request for a passive connection
   2 
   3 from the rfc:
   4     This command requests the server-DTP to "listen" on a data
   5     port (which is not its default data port) and to wait for a
   6     connection rather than initiate one upon receipt of a
   7     transfer command.  The response to this command includes the
   8     host and port address this server is listening on.
   L4: Error: Improper paragraph indentation.
Function 'twisted.protocols.ftp.IFTPShell.list'
   1 Retrieve information about the given path.
   2 
   3 If the path represents a non-directory, the result list should
   4 have only one entry with information about that non-directory.
   5 Otherwise, the result list should have an element for each
   6 child of the directory.
   7 
   8 @param path: The path, as a list of segments, to list
   9 @type path: C{list} of C{unicode}
  10 
  11 @param keys: A tuple of keys desired in the resulting
  12 dictionaries.
  13 
  14 @return: A Deferred which fires with a list of (name, list),
  15 where the name is the name of the entry as a unicode string
  16 and each list contains values corresponding to the requested
  17 keys.  The following are possible elements of keys, and the
  18 values which should be returned for them:
  19 
  20     'size': size in bytes, as an integer (this is kinda required)
  21     'directory': boolean indicating the type of this entry
  22     'permissions': a bitvector (see os.stat(foo).st_mode)
  23     'hardlinks': Number of hard links to this entry
  24     'modified': number of seconds since the epoch since entry was modified
  25     'owner': string indicating the user owner of this entry
  26     'group': string indicating the group owner of this entry
  L20: Error: Improper paragraph indentation.
Function 'twisted.protocols.ident.IdentServer.lookup'
   1 Lookup user information about the specified address pair.
   2 
   3 Return value should be a two-tuple of system name and username. 
   4 Acceptable values for the system name may be found online at
   5 
   6     <http://www.iana.org/assignments/operating-system-names>
   7 
   8 This method may also raise any IdentError subclass (or IdentError
   9 itself) to indicate user information will not be provided for the
  10 given query.
  11 
  12 A Deferred may also be returned.
  13 
  14 @param serverAddress: A two-tuple representing the server endpoint
  15 of the address being queried.  The first element is a string holding
  16 a dotted-quad IP address.  The second element is an integer
  17 representing the port.
  18 
  19 @param clientAddress: Like L{serverAddress}, but represents the
  20 client endpoint of the address being queried.
   L6: Error: Improper paragraph indentation.
TwistedClass 'twisted.protocols.policies.LimitTotalConnectionsFactory'
   1 Factory that limits the number of simultaneous connections.
   2 
   3 @type connectionCount: C{int}
   4 @ivar connectionCount: number of current connections.
   5 @type connectionLimit: C{int} or C{None}
   6 @cvar connectionLimit: maximum number of connections.
   7 @type overflowProtocol: L{Protocol} or C{None}
   8 @cvar overflowProtocol: Protocol to use for new connections when
   9     connectionLimit is exceeded.  If C{None} (the default value), excess
  10     connections will be closed immediately.
  11 
  12 API Stability: Unstable
  L12: Error: Fields must be the final elements in an epytext string.
Module 'twisted.python.components'
   1 Component architecture for Twisted, based on Zope3 components.
   2 
   3 Using the Zope3 API directly is strongly recommended. Everything
   4 you need is in the top-level of the zope.interface package, e.g.:
   5 
   6    from zope.interface import Interface, implements
   7 
   8    class IFoo(Interface):
   9        pass
  10 
  11    class Foo:
  12        implements(IFoo)
  13 
  14    print IFoo.implementedBy(Foo) # True
  15    print IFoo.providedBy(Foo()) # True
  16 
  17 The one exception is twisted.python.components.registerAdapter, which
  18 is still the way to register adapters (at least, if you want Twisted's
  19 global adapter registry).
  20 
  21 
  22 Backwards Compatability:
  23 
  24 IMPORTANT: In old code the meaning of 'implementing' was too vague. In
  25 this version we will switch to the Zope3 meaning (objects provide
  26 interfaces, if a class implements interfaces that means its
  27 *instances* provide them).  However, some deprecated methods
  28 (e.g. twisted.python.components.implements()) are confusing because
  29 they actually check if object *provides* an interface. Don't use them.
  30 
  31 Possible bugs in your code may happen because you rely on
  32 __implements__ existing and/or have only that and assumes that means
  33 the component system knows it implements interfaces. This compat layer
  34 will do its best to make sure that is the case, but sometimes it will
  35 fail on edge cases, and it will always fail if you use zope.interface APIs directly,
  36 e.g. this code will NOT WORK AS EXPECTED:
  37 
  38     from twisted.python.components import implements
  39     class Foo:
  40         __implements__ = IFoo,
  41     IFoo.providedBy(Foo()) # returns False, not True
  42     implements(Foo(), IFoo) # True! notice meaning of 'implements' changed
  43     IFoo.providedBy(Foo()) # now returns True, since implements() fixed it
  44 
  45 The lesson - just switch all your code to zope.interface, or only use
  46 old APIs. These are slow and will whine a lot. Use zope.interface.
   L6: Error: Improper paragraph indentation.
   L8: Error: Improper paragraph indentation.
   L9: Error: Improper paragraph indentation.
  L11: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L14: Error: Improper paragraph indentation.
  L38: Error: Improper paragraph indentation.
  L40: Error: Improper paragraph indentation.
  L41: Error: Improper paragraph indentation.
Function 'twisted.python.components.backwardsCompatImplements'
   1 Make a class have __implements__, for backwards compatability.
   2 
   3 This allows you to use new zope.interface APIs for declaring
   4 implements on classes, while still allowing subclasses that
   5 expect the old API.
   6 
   7    class YourClass:
   8        zope.interface.implements(IFoo) # correct zope way
   9 
  10    backwardsCompatImplements(YourClass) # add __implements__
  11    ----
  12 
  13    # someone else still hasn't updated their code:
  14    
  15    class ThirdPartyClass(YourClass):
  16        __implements__ = IBar, YourClass.__implements__
   L7: Error: Improper paragraph indentation.
   L8: Error: Improper paragraph indentation.
  L10: Error: Improper paragraph indentation.
  L13: Error: Improper paragraph indentation.
  L15: Error: Improper paragraph indentation.
  L16: Error: Improper paragraph indentation.
TwistedClass 'twisted.python.util.IntervalDifferential'
   1 Given a list of intervals, generate the amount of time to sleep between
   2 "instants".
   3 
   4 For example, given 7, 11 and 13, the three (infinite) sequences
   5 
   6     7 14 21 28 35 ...
   7     11 22 33 44 ...
   8     13 26 39 52 ...
   9 
  10 will be generated, merged, and used to produce:
  11 
  12     (7, 0) (4, 1) (2, 2) (1, 0) (7, 0) (1, 1) (4, 2) (2, 0) (5, 1) (2, 0)
  13 
  14 New intervals may be added or removed as iteration proceeds using the
  15 proper methods.
   L6: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
Module 'twisted.python.zshcomp'
   1 This module implements a zsh code generator which generates completion code
   2 for commands that use twisted.python.usage. This is the stuff that makes
   3 pressing Tab at the command line work.
   4 
   5 API Stability: API? what API?
   6 
   7 Maintainer: U{Eric Mangold<mailto:teratorn@twistedmatrix.com>}
   8 
   9 To build completion functions for your own commands, and not
  10 twisted commands, then just do something like this:
  11     o = mymodule.MyOptions()
  12     f = file('_mycommand', 'w')
  13     Builder("mycommand", o, f).write()
  14 
  15 Then all you have to do is place the generated file somewhere in your $fpath,
  16 and restart zsh. Note the "site-functions" directory in your $fpath where you
  17 may install 3rd-party completion functions (like the one you're building). Use
  18 the siteFunctionsPath function below to locate this directory programmatically.
  19 
  20 SPECIAL CLASS VARIABLES. You may set these on your usage.Options subclass.
  21 
  22     zsh_altArgDescr
  23     zsh_multiUse
  24     zsh_mutuallyExclusive
  25     zsh_actions
  26     zsh_actionDescr
  27     zsh_extras
  28 
  29 Here is what they mean (with examples):
  30 
  31     zsh_altArgDescr = {"foo":"use this description for foo instead"}
  32         A dict mapping long option names to alternate descriptions.  When
  33         this variable is present, the descriptions contained here will override
  34         those descriptions provided in the optFlags and optParameters variables.
  35 
  36     zsh_multiUse = ["foo", "bar"]
  37         A sequence containing those long option names which may appear on the
  38         command line more than once. By default, options will only be
  39         completed one time.
  40 
  41     zsh_mutuallyExclusive = [("foo", "bar"), ("bar", "baz")]
  42         A sequence of sequences, with each sub-sequence containing those long
  43         option names that are mutually exclusive. That is, those options
  44         that cannot appear on the command line together.
  45 
  46     zsh_actions = {"foo":'_files -g "*.foo"', "bar":"(one two three)",
  47             "colors":"_values -s , 'colors to use' red green blue"}
  48         A dict mapping long option names to Zsh "actions". These actions
  49         define what will be completed as the argument to the given option.
  50         By default, all files/dirs will be completed if no action is given.
  51 
  52         As you can see in the example above. The "foo" option will have
  53         files that end in .foo completed when the user presses Tab. The
  54         "bar" option will have either of the strings "one", "two", or
  55         "three" compelted when the user presses Tab.
  56         
  57         "colors" will allow multiple arguments to be completed, seperated by
  58         commas. The possible arguments are red, green, and blue. Examples:
  59             my_command --foo some-file.foo --colors=red,green
  60             my_command --colors=green
  61             my_command --colors=green,blue
  62 
  63         Actions may take many forms, and it is beyond the scope of this
  64         document to illustrate them all. Please refer to the documention
  65         for the Zsh _arguments function. zshcomp is basically a front-end
  66         to Zsh's _arguments completion function.
  67 
  68         That documentation is available on the zsh web site at this URL:
  69         http://zsh.sunsite.dk/Doc/Release/zsh_19.html#SEC124
  70 
  71     zsh_actionDescr = {"logfile":"log file name", "random":"random seed"}
  72         A dict mapping long option names to a description for the corresponding
  73         zsh "action". These descriptions are show above the generated matches
  74         when the user is doing completions for this option.
  75 
  76         Normally Zsh does not show these descriptions unless you have "verbose"
  77         completion turned on. Turn on verbosity with this in your ~/.zshrc
  78             zstyle ':completion:*' verbose yes
  79             zstyle ':completion:*:descriptions' format '%B%d%b'
  80 
  81     zsh_extras = [":file to read from:action", ":file to write to:action"]
  82         A sequence of extra arguments that will be passed verbatim to Zsh's
  83         _arguments completion function. The _arguments function does all the
  84         hard work of doing command line completions. You can see how
  85         zshcomp invokes the _arguments call by looking at the generated
  86         completion files that this module creates.
  87 
  88    *** NOTE ***
  89         
  90         You will need to use this variable to describe completions for normal
  91         command line arguments. That is, those arguments that are not
  92         associated with an option. That is, the arguments that are
  93         given to the parseArgs method of your usage.Options subclass.
  94 
  95         In the example above, the 1st non-option argument will be described
  96         as "file to read from" and completion options will be generated
  97         in accordance with the "action". (See above about zsh "actions")
  98         The 2nd non-option argument will be described as "file to write to"
  99         and the action will be interpreted likewise.
 100 
 101         Things you can put here are all documented under the _arguments
 102         function here: http://zsh.sunsite.dk/Doc/Release/zsh_19.html#SEC124
 103 
 104 Zsh Notes:
 105 
 106 To enable advanced completion add something like this to your ~/.zshrc
 107     autoload -U compinit
 108     compinit
 109 
 110 For some extra verbosity, and general niceness add these lines too:
 111     zstyle ':completion:*' verbose yes
 112     zstyle ':completion:*:descriptions' format '%B%d%b'
 113     zstyle ':completion:*:messages' format '%d'
 114     zstyle ':completion:*:warnings' format 'No matches for: %d'
 115 
 116 Have fun!
  L11: Error: Improper paragraph indentation.
  L22: Error: Improper paragraph indentation.
  L31: Error: Improper paragraph indentation.
  L32: Error: Improper paragraph indentation.
  L36: Error: Improper paragraph indentation.
  L37: Error: Improper paragraph indentation.
  L41: Error: Improper paragraph indentation.
  L42: Error: Improper paragraph indentation.
  L46: Error: Improper paragraph indentation.
  L47: Error: Improper paragraph indentation.
  L48: Error: Improper paragraph indentation.
  L52: Error: Improper paragraph indentation.
  L57: Error: Improper paragraph indentation.
  L59: Error: Improper paragraph indentation.
  L63: Error: Improper paragraph indentation.
  L68: Error: Improper paragraph indentation.
  L71: Error: Improper paragraph indentation.
  L72: Error: Improper paragraph indentation.
  L76: Error: Improper paragraph indentation.
  L78: Error: Improper paragraph indentation.
  L81: Error: Improper paragraph indentation.
  L82: Error: Improper paragraph indentation.
  L88: Error: Improper paragraph indentation.
  L90: Error: Improper paragraph indentation.
  L95: Error: Improper paragraph indentation.
 L101: Error: Improper paragraph indentation.
 L107: Error: Improper paragraph indentation.
 L111: Error: Improper paragraph indentation.
TwistedClass 'twisted.spread.newjelly.NullReference'
   1 This object is a marker for when a reference is made to an object
   2 that can't be referenced, i.e.
   3 
   4     (tuple (tuple (reference 1)))
   L4: Error: Improper paragraph indentation.
Function 'twisted.spread.pb.PBClientFactory.getRootObject'
   1 Get root object of remote PB server.
   2 
   3 @return Deferred of the root object.
   L3: Warning: Possible mal-formatted field item.
Function 'twisted.spread.pb.PBClientFactory.getPerspective'
   1 Get perspective from remote PB server.
   2 
   3 New systems should use login() instead.
   4 
   5 @return Deferred of RemoteReference to the perspective.
   L5: Warning: Possible mal-formatted field item.
Function 'twisted.spread.pb.PBClientFactory.login'
   1 Login and get perspective from remote PB server.
   2 
   3 Currently only credentials implementing IUsernamePassword are
   4 supported.
   5 
   6 @return Deferred of RemoteReference to the perspective.
   L6: Warning: Possible mal-formatted field item.
TwistedClass 'twisted.trial.runner.PyUnitTestCase'
   1 This class decorates the pyunit.TestCase class, mainly to work around
   2 the differences between unittest in Python 2.3 and unittest in Python 2.4
   3 These differences are:
   4 - The way doctest unittests describe themselves
   5 - Where the implementation of TestCase.run is (used to be in __call__)
   6 
   7 It also implements visit, which we like.
   L4: Error: Lists must be indented.
Function 'twisted.vfs.ivfs.IFileSystemNode.getMetadata'
   1 returns a map of arbitrary metadata. As an example, here's what
   2 SFTP expects (but doesn't require):
   3 {
   4     'size'         : size of file in bytes,
   5     'uid'          : owner of the file,
   6     'gid'          : group owner of the file,
   7     'permissions'  : file permissions,
   8     'atime'        : last time the file was accessed,
   9     'mtime'        : last time the file was modified,
  10     'nlink'        : number of links to the file
  11 }
  12 
  13 Protocols that need metadata should handle the case when a
  14 particular value isn't available as gracefully as possible.
   L1: Error: Unbalanced '{'.

       ...t doesn't require): {
                              ^
   L4: Error: Improper paragraph indentation.
  L11: Error: Unbalanced '}'.

       }
       ^
Function 'twisted.vfs.pathutils.IFileSystem._getImplicitChildren'
   1 returns implicit children for a given dir
   2 this is placed in the filesystem so that the same
   3 directory can have different implicit children depending
   4 on what sort of filesystem it has been placed in
   5 
   6 - may not be the best idea ...
   7 
   8 returns a list of 2 element tuples:
   9 
  10 [ ( path, nodeObject ) ]
  11 
  12 eg.
  13 
  14 [ ( ".", dir ), ( "..", dir.parent ) ]
   L6: Error: Lists must be indented.
Module 'twisted.web.woven.simpleguard'
   1 A simple guard framework for implementing web sites that only need
   2 'Anonymous' vs 'Logged on' distinction, but nothing more.
   3 
   4 If you need
   5  * multiple levels of access, or
   6  * multiple-interface applications, or
   7  * anything else more complex than 'Logged on' and 'Not logged on'
   8 
   9 you need to use twisted.web.woven.guard directly.
   L5: Error: Improper paragraph indentation.
Function 'twisted.web2.channel.http.HTTPChannel.lingeringClose'
   1 This is a bit complicated. This process is necessary to ensure
   2 proper workingness when HTTP pipelining is in use.
   3 
   4 Here is what it wants to do:
   5 1)  Finish writing any buffered data, then close our write side.
   6 
   7     While doing so, read and discard any incoming data.
   8 2)  When that happens (writeConnectionLost called), wait up to 20
   9     seconds for the remote end to close their write side (our read
  10     side).
  11 3a) If they do (readConnectionLost called), close the socket,
  12     and cancel the timeout.
  13 3b) If that doesn't happen, the timer fires, and makes the socket
  14     close anyways.
   L7: Error: Improper paragraph indentation.
   L9: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L14: Error: Improper paragraph indentation.
Function 'twisted.web2.http_headers.tokenize'
   1 Tokenize a string according to normal HTTP header parsing rules.
   2 
   3 In particular:
   4 - Whitespace is irrelevant and eaten next to special separator tokens.
   5   Its existance (but not amount) is important between character strings.
   6 - Quoted string support including embedded backslashes.
   7 - Case is insignificant (and thus lowercased), except in quoted strings.
   8    (unless foldCase=False)
   9 - Multiple headers are concatenated with ','
  10 
  11 NOTE: not all headers can be parsed with this function.
  12 
  13 Takes a raw header value (list of strings), and
  14 Returns a generator of strings and Token class instances.
   L4: Error: Lists must be indented.
Function 'twisted.web2.stream.IByteStream.split'
   1 Split this stream into two, at byte position 'point'.
   2 
   3 Returns a tuple of (before, after). After calling split,
   4 no other methods should be called on this stream. Doing
   5 so will have undefined behavior.
   6 
   7 Implementation note:
   8 If you cannot implement split easily, you may implement it as:
   9   return fallbackSplit(self, point)
   L9: Error: Improper paragraph indentation.
Function 'twisted.web2.test.test_vhost.TestVhost.testNameVirtualHost'
   1 Test basic Name Virtual Host behavior
   2 1) NameVirtualHost.default is defined, so an undefined NVH (localhost)
   3     gets handled by NameVirtualHost.default
   4 
   5 2) A defined NVH gets passed the proper host header and is handled by the proper resource
   L3: Error: Improper paragraph indentation.
Function 'twisted.web2.vhost.NameVirtualHost.addHost'
   1 Add a host to this virtual host. - The Fun Stuff(TM)
   2     
   3 This associates a host named 'name' with a resource 'resrc'
   4 
   5     nvh.addHost('nevow.com', nevowDirectory)
   6     nvh.addHost('divmod.org', divmodDirectory)
   7     nvh.addHost('twistedmatrix.com', twistedMatrixDirectory)
   8 
   9 I told you that was fun.
   L5: Error: Improper paragraph indentation.
TwistedClass 'twisted.web2.vhost.AutoVHostURIRewrite'
   1 I do request mangling to insure that children know what host they are being 
   2 accessed from behind apache2.
   3 
   4 Usage:
   5 -Twisted-
   6     root = MyResource()
   7     vur = vhost.AutoVHostURIRewrite(root)
   8     
   9 -Apache2-
  10 <Location /whatever/>
  11   ProxyPass http://localhost:8538/
  12   RequestHeader set X-App-Location /whatever/
  13 </Location>
  14 
  15 If the trailing / is ommitted in the second argument to ProxyPass VHostURIRewrite
  16 will return a 404 response code.
  17 
  18 If proxying HTTPS, add:
  19   RequestHeader set X-App-Scheme https
  20 to the apache config.
   L6: Error: Improper paragraph indentation.
  L11: Error: Improper paragraph indentation.
  L19: Error: Improper paragraph indentation.
TwistedClass 'twisted.web2.vhost.VHostURIRewrite'
   1 I do request mangling to insure that children know what host they are being 
   2 accessed from behind mod_proxy.
   3 
   4 Usage:
   5 -Twisted-
   6     root = MyResource()
   7     vur = vhost.VHostURIRewrite(uri='http://hostname:port/path', resource=root)
   8     server.Site(vur)
   9     
  10 -Apache-
  11     <VirtualHost hostname:port>
  12         ProxyPass /path/ http://localhost:8080/
  13         Servername hostname
  14     </VirtualHost>
  15 
  16 If the trailing / is ommitted in the second argument to ProxyPass VHostURIRewrite
  17 will return a 404 response code.
  18 
  19 uri must be a fully specified uri complete with scheme://hostname/path/
   L6: Error: Improper paragraph indentation.
  L11: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L14: Error: Improper paragraph indentation.
Function 'twisted.words.im.interfaces.IGroup.sendGroupMessage'
   1 Send a message to this group.
   2 
   3 @type text: string
   4 
   5 @type metadata: dict
   6 @param metadata: Valid keys for this dictionary include:
   7 
   8     style: associated with one of:
   9         emote: indicates this is an action
   L9: Error: Improper paragraph indentation.
TwistedClass 'twisted.words.protocols.jabber.xmpp_stringprep.NamePrep'
   1 Implements preparation of internationalized domain names.
   2 
   3 This class implements preparing internationalized domain names using the
   4 rules defined in RFC 3491, section 4 (Conversion operations).
   5 
   6 We do not perform step 4 since we deal with unicode representations of
   7 domain names and do not convert from or to ASCII representations using
   8 punycode encoding. When such a conversion is needed, the L{idna} standard
   9 library provides the C{ToUnicode()} and C{ToASCII()} functions. Note that
  10 L{idna} itself assumes UseSTD3ASCIIRules to be false.
  11 
  12 The following steps are performed by C{prepare()}:
  13 
  14   * Split the domain name in labels at the dots (RFC 3490, 3.1)
  15   * Apply nameprep proper on each label (RFC 3491)
  16   * Enforce the restrictions on ASCII characters in host names by
  17     assuming STD3ASCIIRules to be true. (STD 3)
  18   * Rejoin the labels using the label separator U+002E (full stop).
  L14: Error: Improper paragraph indentation.
  L17: Error: Improper paragraph indentation.
  L18: Error: Improper paragraph indentation.
Function 'twisted.words.protocols.toc.TOCClient.tocRVOUS_PROPOSE'
   1 RVOUS_PROPOSE:<user>:<uuid>:<cookie>:<seq>:<rip>:<pip>:<vip>:<port>
   2       [:tlv tag1:tlv value1[:tlv tag2:tlv value2[:...]]]
   L2: Error: Improper paragraph indentation.
Module 'twisted.words.service'
   1 A module that needs a better name.
   2 
   3 Implements new cred things for words.
   4 
   5 How does this thing work?
   6 
   7 1) Network connection on some port expecting to speak some protocol
   8 2) Protocol-specific authentication, resulting in some kind of credentials object
   9 3) twisted.cred.portal login using those credentials for the interface
  10    IUser and with something implementing IChatClient as the mind
  11 4) successful login results in an IUser avatar the protocol can
  12    call methods on, and state added to the realm such that the mind
  13    will have methods called on it as is necessary
  14 5) protocol specific actions lead to calls onto the avatar; remote
  15    events lead to calls onto the mind
  16 6) protocol specific hangup, realm is notified, user is removed
  17    from active play, the end.
  L10: Error: Improper paragraph indentation.
  L12: Error: Improper paragraph indentation.
  L15: Error: Improper paragraph indentation.
  L17: Error: Improper paragraph indentation.
Module 'twisted.words.xish.xmlstream'
   1 XML Stream processing.
   2 
   3 An XML Stream is defined as a connection over which two XML documents are
   4 exchanged during the lifetime of the connection, one for each direction. The
   5 unit of interaction is a direct child element of the root element (stanza).
   6 
   7 The most prominent use of XML Streams is Jabber, but this module is generically
   8 usable. See Twisted Words for Jabber specific protocol support.
   9 
  10 Maintainer: U{Ralph Meijer<mailto:twisted@ralphm.ik.nu>)
  L10: Error: Unbalanced '{'.

       Maintainer: U{Ralph Meijer<mailto...
                    ^
Function 'twisted.words.xish.xmlstream.XmlStream.onElement'
   1 Called whenever a direct child element of the root element has
   2     been received.
   3 
   4 Dispatches the received element.
   L2: Error: Improper paragraph indentation.
379 epytext errors
