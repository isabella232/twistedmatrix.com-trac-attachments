diff --git setup3.py setup3.py
index ca27cbe..4ae1a61 100644
--- setup3.py
+++ setup3.py
@@ -79,6 +79,7 @@ modules = [
     "twisted.python.monkey",
     "twisted.python.randbytes",
     "twisted.python._reflectpy3",
+    "twisted.python.reflect",
     "twisted.python.runtime",
     "twisted.python.test",
     "twisted.python.test.deprecatedattributes",
@@ -173,6 +174,7 @@ testModules = [
     "twisted.test.test_paths",
     "twisted.test.test_policies",
     "twisted.test.test_randbytes",
+    "twisted.test.test_reflect",
     "twisted.test.test_setup",
     "twisted.test.test_ssl",
     "twisted.test.test_sslverify",
diff --git twisted/python/compat.py twisted/python/compat.py
index a8fc936..4d2afa5 100644
--- twisted/python/compat.py
+++ twisted/python/compat.py
@@ -405,6 +405,26 @@ interpolation.  For example, this is safe on Python 2 and Python 3:
 """
 
 
+try:
+    StringType = basestring
+except NameError:
+    # Python 3+
+    StringType = str
+
+try:
+    from types import InstanceType
+except ImportError:
+    # Python 3+
+    InstanceType = object
+
+try:
+    from types import FileType
+except ImportError:
+    from io import IOBase
+    # Python 3+
+    FileType = IOBase
+
+
 __all__ = [
     "reraise",
     "execfile",
@@ -420,4 +440,7 @@ __all__ = [
     "iterbytes",
     "intToBytes",
     "lazyByteSlice",
+    "StringType",
+    "InstanceType",
+    "FileType",
     ]
diff --git twisted/python/reflect.py twisted/python/reflect.py
index ac25d47..675cbe3 100644
--- twisted/python/reflect.py
+++ twisted/python/reflect.py
@@ -18,13 +18,9 @@ from collections import deque
 RegexType = type(re.compile(""))
 
 
-try:
-    from cStringIO import StringIO
-except ImportError:
-    from StringIO import StringIO
-
 from twisted.python.compat import _PY3
 from twisted.python.deprecate import deprecated
+from twisted.python import compat
 from twisted.python.deprecate import _fullyQualifiedName as fullyQualifiedName
 from twisted.python.versions import Version
 
@@ -113,7 +109,7 @@ def getClass(obj):
 
 # I should really have a better name for this...
 def isinst(inst,clazz):
-    if type(inst) != types.InstanceType or type(clazz)!= types.ClassType:
+    if type(inst) != compat.InstanceType or type(clazz)!= types.ClassType:
         return isinstance(inst,clazz)
     cl = inst.__class__
     cl2 = getcurrent(cl)
@@ -226,7 +222,7 @@ def modgrep(goal):
 
 def isOfType(start, goal):
     return ((type(start) is goal) or
-            (isinstance(start, types.InstanceType) and
+            (isinstance(start, compat.InstanceType) and
              start.__class__ is goal))
 
 
@@ -252,33 +248,33 @@ def objgrep(start, goal, eq=isLike, path='', paths=None, seen=None, showUnknowns
             return
         maxDepth -= 1
     seen[id(start)] = start
-    if isinstance(start, types.DictionaryType):
+    if isinstance(start, dict):
         for k, v in start.items():
             objgrep(k, goal, eq, path+'{'+repr(v)+'}', paths, seen, showUnknowns, maxDepth)
             objgrep(v, goal, eq, path+'['+repr(k)+']', paths, seen, showUnknowns, maxDepth)
     elif isinstance(start, (list, tuple, deque)):
-        for idx in xrange(len(start)):
+        for idx, _elem in enumerate(start):
             objgrep(start[idx], goal, eq, path+'['+str(idx)+']', paths, seen, showUnknowns, maxDepth)
     elif isinstance(start, types.MethodType):
-        objgrep(start.im_self, goal, eq, path+'.im_self', paths, seen, showUnknowns, maxDepth)
-        objgrep(start.im_func, goal, eq, path+'.im_func', paths, seen, showUnknowns, maxDepth)
-        objgrep(start.im_class, goal, eq, path+'.im_class', paths, seen, showUnknowns, maxDepth)
+        objgrep(start.__self__, goal, eq, path+'.__self__', paths, seen, showUnknowns, maxDepth)
+        objgrep(start.__func__, goal, eq, path+'.__func__', paths, seen, showUnknowns, maxDepth)
+        objgrep(start.__self__.__class__, goal, eq, path+'.__self__.__class__', paths, seen, showUnknowns, maxDepth)
     elif hasattr(start, '__dict__'):
         for k, v in start.__dict__.items():
             objgrep(v, goal, eq, path+'.'+k, paths, seen, showUnknowns, maxDepth)
-        if isinstance(start, types.InstanceType):
+        if isinstance(start, compat.InstanceType):
             objgrep(start.__class__, goal, eq, path+'.__class__', paths, seen, showUnknowns, maxDepth)
     elif isinstance(start, weakref.ReferenceType):
         objgrep(start(), goal, eq, path+'()', paths, seen, showUnknowns, maxDepth)
-    elif (isinstance(start, types.StringTypes+
-                    (types.IntType, types.FunctionType,
-                     types.BuiltinMethodType, RegexType, types.FloatType,
-                     types.NoneType, types.FileType)) or
+    elif (isinstance(start, (compat.StringType,
+                    int, types.FunctionType,
+                     types.BuiltinMethodType, RegexType, float,
+                     type(None), compat.FileType)) or
           type(start).__name__ in ('wrapper_descriptor', 'method_descriptor',
                                    'member_descriptor', 'getset_descriptor')):
         pass
     elif showUnknowns:
-        print 'unknown type', type(start), start
+        print('unknown type', type(start), start)
     return paths
 
 
diff --git twisted/test/test_reflect.py twisted/test/test_reflect.py
index be608e6..b691d95 100644
--- twisted/test/test_reflect.py
+++ twisted/test/test_reflect.py
@@ -13,6 +13,7 @@ try:
 except ImportError:
     ModuleImporter = None
 
+from twisted.python.compat import _PY3
 from twisted.trial import unittest
 from twisted.python import reflect
 from twisted.python.versions import Version
@@ -114,9 +115,9 @@ class ObjectGrep(unittest.TestCase):
         o = Dummy()
         m = o.dummy
 
-        self.assertIn(".im_self", reflect.objgrep(m, m.im_self, reflect.isSame))
-        self.assertIn(".im_class", reflect.objgrep(m, m.im_class, reflect.isSame))
-        self.assertIn(".im_func", reflect.objgrep(m, m.im_func, reflect.isSame))
+        self.assertIn(".__self__", reflect.objgrep(m, m.__self__, reflect.isSame))
+        self.assertIn(".__self__.__class__", reflect.objgrep(m, m.__self__.__class__, reflect.isSame))
+        self.assertIn(".__func__", reflect.objgrep(m, m.__func__, reflect.isSame))
 
     def test_everything(self):
         """
@@ -136,7 +137,7 @@ class ObjectGrep(unittest.TestCase):
         m = i.method
         w = weakref.ref(m)
 
-        self.assertIn("().im_self.attr[2][0][2]{'Foosh'}", reflect.objgrep(w, o, reflect.isSame))
+        self.assertIn("().__self__.attr[2][0][2]{'Foosh'}", reflect.objgrep(w, o, reflect.isSame))
 
     def test_depthLimit(self):
         """
@@ -165,11 +166,16 @@ class ObjectGrep(unittest.TestCase):
 
 
 class GetClass(unittest.TestCase):
+    if _PY3:
+        oldClassNames = ['type']
+    else:
+        oldClassNames = ['class', 'classobj']
+
     def testOld(self):
         class OldClass:
             pass
         old = OldClass()
-        self.assertIn(reflect.getClass(OldClass).__name__, ('class', 'classobj'))
+        self.assertIn(reflect.getClass(OldClass).__name__, self.oldClassNames)
         self.assertEqual(reflect.getClass(old).__name__, 'OldClass')
 
     def testNew(self):
@@ -180,25 +186,31 @@ class GetClass(unittest.TestCase):
         self.assertEqual(reflect.getClass(new).__name__, 'NewClass')
 
 
-class DeprecationTestCase(unittest.TestCase):
-    """
-    Test deprecations in twisted.python.reflect
-    """
-
-    def test_allYourBase(self):
+if not _PY3:
+    # The functions tested below are deprecated but still used by external
+    # projects like Nevow 0.10. They are not going to be ported to Python 3
+    # (hence the condition above) and will be removed as soon as no project used
+    # by Twisted will depend on these functions. Also, have a look at the
+    # comments related to those functions in twisted.python.reflect.
+    class DeprecationTestCase(unittest.TestCase):
         """
-        Test deprecation of L{reflect.allYourBase}. See #5481 for removal.
+        Test deprecations in twisted.python.reflect
         """
-        self.callDeprecated(
-            (Version("Twisted", 11, 0, 0), "inspect.getmro"),
-            reflect.allYourBase, DeprecationTestCase)
 
+        def test_allYourBase(self):
+            """
+            Test deprecation of L{reflect.allYourBase}. See #5481 for removal.
+            """
+            self.callDeprecated(
+                (Version("Twisted", 11, 0, 0), "inspect.getmro"),
+                reflect.allYourBase, DeprecationTestCase)
 
-    def test_accumulateBases(self):
-        """
-        Test deprecation of L{reflect.accumulateBases}. See #5481 for removal.
-        """
-        l = []
-        self.callDeprecated(
-            (Version("Twisted", 11, 0, 0), "inspect.getmro"),
-            reflect.accumulateBases, DeprecationTestCase, l, None)
+
+        def test_accumulateBases(self):
+            """
+            Test deprecation of L{reflect.accumulateBases}. See #5481 for removal.
+            """
+            l = []
+            self.callDeprecated(
+                (Version("Twisted", 11, 0, 0), "inspect.getmro"),
+                reflect.accumulateBases, DeprecationTestCase, l, None)
