Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 27295)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -639,6 +639,13 @@
         self.assertEquals(self.transport.value(), "")
 
 
+    def getLastLine(self, transport):
+        """
+        Return the last IRC message in the transport buffer.
+        """
+        return transport.value().split('\r\n')[-2]
+
+
     def test_away(self):
         """
         L{IRCCLient.away} sends an AWAY command with the specified message.
@@ -725,6 +732,74 @@
         self.assertEquals(self.transport.value().split('\r\n'), expected)
 
 
+    def test_registerWithTakenNick(self):
+        """
+        Verify that the client repeats the L{IRCClient.setNick} method with a
+        new value when presented with an C{ERR_NICKNAMEINUSE} while trying to
+        register.
+        """
+        username = 'testuser'
+        hostname = 'testhost'
+        servername = 'testserver'
+        self.protocol.realname = 'testname'
+        self.protocol.password = 'testpass'
+        self.protocol.register(username, hostname, servername)
+        self.protocol.irc_ERR_NICKNAMEINUSE('prefix', ['param'])
+        lastLine = self.getLastLine(self.transport)
+        self.assertNotEquals(lastLine, 'NICK %s' % (username,))
+
+        # Keep chaining underscores for each collision
+        self.protocol.irc_ERR_NICKNAMEINUSE('prefix', ['param'])
+        lastLine = self.getLastLine(self.transport)
+        self.assertEquals(lastLine, 'NICK %s' % (username + '__',))
+
+
+    def test_nickChange(self):
+        """
+        When a NICK command is sent after signon, C{IRCClient.nickname} is set
+        to the new nickname I{after} the server sends an acknowledgement.
+        """
+        oldnick = 'foo'
+        newnick = 'bar'
+        self.protocol.register(oldnick)
+        self.protocol.irc_RPL_WELCOME('prefix', ['param'])
+        self.protocol.setNick(newnick)
+        self.assertEquals(self.protocol.nickname, oldnick)
+        self.protocol.irc_NICK('%s!quux@qux' % (oldnick,), [newnick])
+        self.assertEquals(self.protocol.nickname, newnick)
+
+
+    def test_erroneousNick(self):
+        """
+        Trying to register an illegal nickname results in the default legal
+        nickname being set, and trying to change a nickname to an illegal
+        nickname results in the old nickname being kept.
+        """
+        # Registration case: change illegal nickname to erroneousNickFallback
+        badnick = 'foo'
+        self.assertEquals(self.protocol._registered, False)
+        self.protocol.register(badnick)
+        self.protocol.irc_ERR_ERRONEUSNICKNAME('prefix', ['param'])
+        lastLine = self.getLastLine(self.transport)
+        self.assertEquals(
+            lastLine, 'NICK %s' % (self.protocol.erroneousNickFallback,))
+        self.protocol.irc_RPL_WELCOME('prefix', ['param'])
+        self.assertEquals(self.protocol._registered, True)
+        self.protocol.setNick(self.protocol.erroneousNickFallback)
+        self.assertEquals(
+            self.protocol.nickname, self.protocol.erroneousNickFallback)
+
+        # Illegal nick change attempt after registration. Fall back to the old
+        # nickname instead of erroneousNickFallback.
+        oldnick = self.protocol.nickname
+        self.protocol.setNick(badnick)
+        self.protocol.irc_ERR_ERRONEUSNICKNAME('prefix', ['param'])
+        lastLine = self.getLastLine(self.transport)
+        self.assertEquals(
+            lastLine, 'NICK %s' % (badnick,))
+        self.assertEquals(self.protocol.nickname, oldnick)
+
+
     def test_describe(self):
         """
         L{IRCClient.desrcibe} sends a CTCP ACTION message to the target
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 27295)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -1,5 +1,5 @@
 # -*- test-case-name: twisted.words.test.test_irc -*-
-# Copyright (c) 2001-2008 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2009 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
@@ -524,6 +524,20 @@
     @ivar motd: Either L{None} or, between receipt of I{RPL_MOTDSTART} and
         I{RPL_ENDOFMOTD}, a L{list} of L{str}, each of which is the content
         of an I{RPL_MOTD} message.
+
+    @ivar erroneousNickFallback: Default nickname assigned when an unregistered
+        client triggers an C{ERR_ERRONEUSNICKNAME} while trying to register
+        with an illegal nickname.
+    @type erroneousNickFallback: C{str}
+
+    @ivar _registered: Whether or not the user is registered. It becomes True
+        once a welcome has been received from the server.
+    @type _registered: C{bool}
+
+    @ivar _attemptedNick: The nickname that will try to get registered. It may
+        change if it is illegal or already taken. L{nickname} becomes the
+        L{_attemptedNick} that is successfully registered.
+    @type _attemptedNick:  C{str}
     """
     motd = None
     nickname = 'irc'
@@ -576,6 +590,9 @@
 
     __pychecker__ = 'unusednames=params,prefix,channel'
 
+    _registered = False
+    _attemptedNick = ''
+    erroneousNickFallback = 'defaultnick'
 
     def _reallySendLine(self, line):
         return basic.LineReceiver.sendLine(self, lowQuote(line) + '\r')
@@ -1060,7 +1077,7 @@
         @type nickname: C{str}
         @param nickname: The nickname to change to.
         """
-        self.nickname = nickname
+        self._attemptedNick = nickname
         self.sendLine("NICK %s" % nickname)
 
     def quit(self, message = ''):
@@ -1179,10 +1196,26 @@
 
     def irc_ERR_NICKNAMEINUSE(self, prefix, params):
         """
-        Called when we try to register an invalid nickname.
+        Called when we try to register or change to a nickname that is already
+        taken.
+
+        If we are in the process of registering, call self.setNick()
+        again with a hopefully sufficiently modified argument.
         """
-        self.register(self.nickname+'_')
+        self._attemptedNick = self._attemptedNick + '_'
+        self.setNick(self._attemptedNick)
 
+    def irc_ERR_ERRONEUSNICKNAME(self, prefix, params):
+        """
+        Called when we try to register or change to an illegal nickname.
+
+        The server should send this reply when the nickname contains any
+        disallowed characters.  The bot will stall, waiting for RPL_WELCOME, if
+        we don't handle this during sign-on.
+        """
+        if not self._registered:
+            self.setNick(self.erroneousNickFallback)
+
     def irc_ERR_PASSWDMISMATCH(self, prefix, params):
         """
         Called when the login was incorrect.
@@ -1193,6 +1226,8 @@
         """
         Called when we have received the welcome from the server.
         """
+        self._registered = True
+        self.nickname = self._attemptedNick
         self.signedOn()
 
     def irc_JOIN(self, prefix, params):
