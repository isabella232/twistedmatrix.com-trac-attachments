Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 25601)
+++ twisted/python/filepath.py	(working copy)
@@ -133,6 +133,20 @@
     def getContent(self):
         return self.open().read()
 
+
+    def parents(self):
+        """
+        @return: an iterator of all the ancestors of this path, from the most
+        recent (its immediate parent) to the root of its filesystem.
+        """
+        x = self
+        p = self.parent()
+        while x != p:
+            x = p
+            p = p.parent()
+            yield x
+
+
     def children(self):
         """
         List the chilren of this path object.
Index: twisted/test/test_paths.py
===================================================================
--- twisted/test/test_paths.py	(revision 25601)
+++ twisted/test/test_paths.py	(working copy)
@@ -55,6 +55,7 @@
         f = self.subfile("sub3", "file3.ext3")
         f.close()
         self.path = filepath.FilePath(cmn)
+        self.root = filepath.FilePath("/")
 
 
     def test_segmentsFromPositive(self):
@@ -83,6 +84,24 @@
         self.assertEquals(set(x), set(self.all))
 
 
+    def test_parents(self):
+        """
+        L{FilePath.parents()} should return an iterator of every ancestor of
+        the L{FilePath} in question.
+        """
+        L = []
+        pathobj = self.path.child("a").child("b").child("c")
+        fullpath = pathobj.path
+        lastpath = fullpath
+        thispath = os.path.dirname(fullpath)
+        while lastpath != self.root.path:
+            L.append(thispath)
+            lastpath = thispath
+            thispath = os.path.dirname(thispath)
+        self.assertEquals([x.path for x in pathobj.parents()],
+                          L)
+
+
     def test_validSubdir(self):
         """Verify that a valid subdirectory will show up as a directory, but not as a
         file, not as a symlink, and be listable.
@@ -262,6 +281,7 @@
         AbstractFilePathTestCase.setUp(self)
         zipit(self.cmn, self.cmn+'.zip')
         self.path = ZipArchive(self.cmn+'.zip')
+        self.root = self.path
         self.all = [x.replace(self.cmn, self.cmn+'.zip') for x in self.all]
 
 
