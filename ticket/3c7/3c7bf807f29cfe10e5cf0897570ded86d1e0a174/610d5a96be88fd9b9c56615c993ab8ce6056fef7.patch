Index: doc/core/howto/ssl.xhtml
===================================================================
--- doc/core/howto/ssl.xhtml	(revision 27245)
+++ doc/core/howto/ssl.xhtml	(working copy)
@@ -6,14 +6,21 @@
     <title>Using SSL in Twisted</title>
   </head>
   <body>
-
-    XXX - Should insert some text about who the target audience is; what are
-    you expected to know already when you read this document?  The
-    information in the conclusion, what you should expect to know once you
-    have finished reading this, should be copied up here as well.
-
+    
     <h2>Overview</h2>
 
+    <p>This document describes how to use SSL in Twisted servers and
+    clients. It assumes that you know what SSL is, what some of the
+    major reasons to use it are, and how to generate your own SSL
+    certificates, in particular self-signed certificates. It also
+    assumes that you are comfortable with creating TCP servers and
+    clients as described in the <a href="servers.xhtml">server
+    howto</a> and <a href="clients.xhtml">client howto</a>. After
+    reading this document you should be able to create servers and
+    clients that can use SSL to encrypt their connections, switch from
+    using an unencrypted channel to an encrypted one mid-connection,
+    and require client authentication.</p>
+
     <p>Using SSL in Twisted requires that you have
     <a href="http://pyopenssl.sf.net">pyOpenSSL</a> installed. A quick
     test to verify that you do is to run <code>from OpenSSL import
@@ -23,39 +30,37 @@
     generated by a ContextFactory that maintains state like the SSL
     method, private key file name, and certificate file name.</p>
 
-    XXX - Making listenSSL and connectSSL API links in the next section
-    would probably be useful.
+    <p>Instead of using listenTCP and connectTCP to create a connection, use 
+    <code class="API">twisted.internet.interfaces.IReactorSSL.listenSSL</code>
+    and <code class="API">twisted.internet.interfaces.IReactorSSL.connectSSL</code>
+    for a server and client respectively. These methods take a
+    contextFactory as an additional argument.</p>
 
-    <p>Instead of using listenTCP and connectTCP, use listenSSL and
-    connectSSL for a server and client respectively. These methods
-    take a contextFactory as an additional argument.</p>
+    <p>The basic server context factory
+    is <code class="API">twisted.internet.ssl.ContextFactory</code>,
+    and the basic client context factory is
+    <code class="API">twisted.internet.ssl.ClientContextFactory</code>. They
+    can be used as-is or subclassed.
+    <code class="API">twisted.internet.ssl.DefaultOpenSSLContextFactory</code>
+    is a convenience server class that subclasses ContextFactory and
+    has default parameters to the SSL handshake and
+    connection. Another useful class is
+    <code class="API">twisted.internet.ssl.CertificateOptions</code>;
+    it is a factory for SSL context objects that lets you specify many
+    of the common verification and session options so it can do the
+    proper pyOpenSSL initialization for you.</p>
 
-    XXX - These three context factories have been in Twisted the longest. 
-    It's not necessary to subclass them, though it's often useful.  There's
-    also another context factory which was added more recently,
-    CertificateOptions.  Making these API links would be good too.
-
-    <p>All server context factories should inherit from
-    ContextFactory, and all client context factories should inherit
-    from ClientContextFactory. DefaultOpenSSLContextFactory is a
-    convenience class with default parameters to the SSL handshake and
-    connection.</p>
-
     <p>Those are the big immediate differences between TCP and SSL
     connections, so let's look at an example. In it and all subsequent
     examples it is assumed that keys and certificates for the server,
     certificate authority, and client should they exist live in
     a <i>keys/</i> subdirectory of the directory containing the
-    example code.</p>
+    example code, and that the certificates are self-signed.</p>
 
     <h2>SSL echo server and client without client authentication</h2>
 
-    XXX - The server sometimes doesn't need a certificate.  It's probably
-    not worth going into anonymous dh here (at least not yet), though.  We
-    could just say "almost always".
-
     <p>Authentication and encryption are two separate parts of the SSL
-    protocol.  The server always needs a key and certificate to
+    protocol.  The server almost always needs a key and certificate to
     authenticate itself to the client but is usually configured to
     allow encrypted connections with unauthenticated clients who don't
     have certificates.  This common case is demonstrated first by
@@ -85,8 +90,8 @@
     <h3>SSL echo client</h3>
 
     <pre class="python">
-from twisted.internet.protocol import ClientFactory, Protocol
 from twisted.internet import ssl, reactor
+from twisted.internet.protocol import ClientFactory, Protocol
 
 class EchoClient(Protocol):
     def connectionMade(self):
@@ -114,13 +119,12 @@
     reactor.run()
     </pre>
 
-    <p>The context factories used above set a method to create context
-    objects for
-    you. <code>SSLv3_METHOD</code>, <code>SSLv23_METHOD</code>, and
+    <p>Contexts are created according to a specified method. 
+    <code>SSLv3_METHOD</code>, <code>SSLv23_METHOD</code>, and
     <code>TLSv1_METHOD</code> are the valid constants that represent
     SSL methods to use when creating a context object.
-    DefaultOpenSSLContextFactory and ClientContextFactory use
-    <code>SSL.SSLv23_METHOD</code> as their method, and it is
+    DefaultOpenSSLContextFactory and ClientContextFactory default to
+    using <code>SSL.SSLv23_METHOD</code> as their method, and it is
     compatible for communication with all the other methods listed
     above. An older method constant, <code>SSLv2_METHOD</code>, exists
     but is explicitly disallowed in both DefaultOpenSSLContextFactory
@@ -131,35 +135,22 @@
 
     <h2>Using startTLS</h2>
 
-    XXX - startTLS could be an API link in this section
-
     <p>If you want to switch from unencrypted to encrypted traffic
-    mid-connection, you'll need to turn on SSL
-    with <code>startTLS</code> on both ends of the connection at the
-    same time via some agreed-upon signal like the reception of a
-    particular message. You can readily verify the switch to an
-    encrypted channel by examining the packet payloads with a tool
+    mid-connection, you'll need to turn on SSL with <code class="API" 
+    base="twisted.internet.interfaces.ITLSTransport">startTLS</code>
+    on both ends of the connection at the same time via some
+    agreed-upon signal like the reception of a particular message. You
+    can readily verify the switch to an encrypted channel by examining
+    the packet payloads with a tool
     like <a href="http://www.wireshark.org/">wireshark</a>.</p>
 
     <h3>startTLS server</h3>
 
-    XXX - Examples often don't follow all of the Twisted coding standard -
-    but for the case of import order, I think there's no reason not to.  We
-    put imports in dependency order.  ie, if module A depends on module B,
-    module B gets imported first.  So, move the OpenSSL import up to the
-    top.
-
-    XXX - Also, "isClient" is completely ignored by the current SSL
-    implementation.  It's actually a useful piece of information, though,
-    and I feel like it would be nice for the implementation to respect it
-    /someday/.  Not sure if that means it's best to leave it in here or take
-    /it out.
-
     <pre class="python">
-from twisted.internet.protocol import ServerFactory
+from OpenSSL import SSL
 from twisted.internet import reactor, ssl
+from twisted.internet.protocol import ServerFactory
 from twisted.protocols.basic import LineReceiver
-from OpenSSL import SSL
 
 class TLSServer(LineReceiver):
     def lineReceived(self, line):
@@ -192,10 +183,10 @@
     <h3>startTLS client</h3>
 
     <pre class="python">
+from OpenSSL import SSL
+from twisted.internet import reactor, ssl
 from twisted.internet.protocol import ClientFactory
 from twisted.protocols.basic import LineReceiver
-from twisted.internet import reactor, ssl
-from OpenSSL import SSL
 
 class ClientTLSContext(ssl.ClientContextFactory):
     isClient = 1
@@ -244,11 +235,11 @@
 
     <p><code>startTLS</code> is a transport method that gets passed a
     context. It is invoked at an agreed-upon time in the data
-    reception method of the client and server
-    protocols. ServerTLSContext and ClientTLSContext inherit from the
-    basic server and client context factories used in the echo
-    examples above and illustrate two more ways of setting an SSL
-    method.</p>
+    reception method of the client and server protocols. The
+    ServerTLSContext and ClientTLSContext classes used above inherit
+    from the basic server and client context factories used in the
+    earlier echo examples and illustrate two more ways of setting an
+    SSL method.</p>
 
     <h2>Client authentication</h2>
 
@@ -260,17 +251,15 @@
     <h3>Client-authenticating server</h3>
 
     <pre class="python">
+from OpenSSL import SSL
 from twisted.internet import ssl, reactor
 from twisted.internet.protocol import Factory, Protocol
-from OpenSSL import SSL
 
 class Echo(Protocol):
     def dataReceived(self, data):
         self.transport.write(data)
 
-   # XXX rename to verifyCallback instead
-
-def verify_callback(connection, x509, errnum, errdepth, ok):
+def verifyCallback(connection, x509, errnum, errdepth, ok):
     if not ok:
         print 'invalid cert from subject:', x509.get_subject()
         return False
@@ -290,7 +279,7 @@
 
     ctx.set_verify(
         SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT,
-        verify_callback
+        verifyCallback
         )
 
     # Since we have self-signed certs we have to explicitly
@@ -304,7 +293,7 @@
     <p>Use the <code>set_verify</code> method to set the verification
     mode for a context object and the verification callback. The mode
     is either <code>VERIFY_NONE</code> or <code>VERIFY_PEER</code>. If
-    VERIFY_PEER is set, the mode can be augmented by 
+    <code>VERIFY_PEER</code> is set, the mode can be augmented by 
     <code>VERIFY_FAIL_IF_NO_PEER_CERT</code> and/or
     <code>VERIFY_CLIENT_ONCE</code>.</p>
 
@@ -319,9 +308,9 @@
     <h3>Client with certificates</h3>
 
     <pre class="python">
-from twisted.internet.protocol import ClientFactory, Protocol
-from twisted.internet import ssl, reactor
 from OpenSSL import SSL
+from twisted.internet import ssl, reactor
+from twisted.internet.protocol import ClientFactory, Protocol
 
 class EchoClient(Protocol):
     def connectionMade(self):
