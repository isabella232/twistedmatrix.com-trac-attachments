Index: server.py
===================================================================
--- server.py	(revisione 20207)
+++ server.py	(copia locale)
@@ -332,21 +332,28 @@
         return self.session
 
     def _prePathURL(self, prepath):
-        port = self.getHost().port
+        host, port = self.getRequestHost()
+
+        if port is None:
+            hostport = host
+        else:
+            hostport = '%s:%d' % (host, port)
+        
+        # TODO: if we are behind a proxy, we have no way to know if
+        # the original request is over HTTPS
+        # A possible solution is to check for a private header like
+        # X-Secure-Host (the proxy server can set it).
+        # A more general solution is to use setHost via
+        # VHostMonsterResourc as explained in 
+        # http://divmod.org/trac/wiki/DivmodNevow/ApacheProxy
         if self.isSecure():
-            default = 443
+            proto = 'https'
         else:
-            default = 80
-        if port == default:
-            hostport = ''
-        else:
-            hostport = ':%d' % port
-        return quote('http%s://%s%s/%s' % (
-            self.isSecure() and 's' or '',
-            self.getRequestHostname(),
-            hostport,
-            string.join(prepath, '/')), "/:")
+            proto = 'http'
 
+        url = '%s://%s/%s' % (proto, hostport, '/'.join(prepath))
+        return quote(url, '/:')
+
     def prePathURL(self):
         return self._prePathURL(self.prepath)
 
Index: http.py
===================================================================
--- http.py	(revisione 20207)
+++ http.py	(copia locale)
@@ -844,6 +844,32 @@
                 socket.gethostbyaddr(self.getHost()[1])[0]
                 ).split(':')[0]
 
+    def getRequestHost(self):
+        """Get the host and the port that the user passed in to the request.
+ 	
+        This will either use the Host: header (if it is available) or the
+        host we are listening on if the header is unavailable.
+
+        Note that a client MUST include the Host header field in all
+        HTTP/1.1 request messages.
+        """
+
+        requestHost = self.getHeader('host')
+        if not requestHost:
+            # This does not work for UNIX address
+            # We assume that the proxy server does not allow request
+            # messages without the Host header field
+            host, port = socket.gethostbyaddr(self.host.host)[0], self.getHost().port
+        else:
+            t = requestHost.split(':')
+            if len(t) == 1:
+                # Use the default port
+                host, port = t[0], None
+            else:
+                host, port = t[0], int(t[1])
+                
+        return host, port
+
     def getHost(self):
         """Get my originally requesting transport's host.
 
@@ -867,10 +893,15 @@
 
            request.setHost('www.example.com', 443, ssl=1)
 
-        This method is experimental.
+        This method is experimental and supports only IPv4 addresses.
         """
         self._forceSSL = ssl
-        self.received_headers["host"] = host
+        if (ssl == 1 and port == 443) or (ssl == 0 and port == 80):
+            hostHeader = host
+        else:
+            hostHeader = "%s:%d" % (host, port)
+
+        self.received_headers["host"] = hostHeader
         self.host = address.IPv4Address("TCP", host, port)
 
     def getClientIP(self):
Index: test/test_web.py
===================================================================
--- test/test_web.py	(revisione 20207)
+++ test/test_web.py	(copia locale)
@@ -356,7 +356,7 @@
         d.transport = DummyChannel.SSL()
         d.transport.port = 443
         request = server.Request(d, 1)
-        request.setHost('example.com', 443)
+        request.setHost('example.com', 443, 1)
         request.gotLength(0)
         request.requestReceived('GET', '/foo/bar', 'HTTP/1.0')
         self.assertEqual(request.prePathURL(), 'https://example.com/foo/bar')
@@ -366,7 +366,7 @@
         d.transport = DummyChannel.SSL()
         d.transport.port = 80
         request = server.Request(d, 1)
-        request.setHost('example.com', 80)
+        request.setHost('example.com', 80, 1)
         request.gotLength(0)
         request.requestReceived('GET', '/foo/bar', 'HTTP/1.0')
         self.assertEqual(request.prePathURL(), 'https://example.com:80/foo/bar')
@@ -428,7 +428,7 @@
             request.setHost('example.com', 81)
             request.gotLength(0)
             request.requestReceived('GET', url, 'HTTP/1.0')
-            self.assertEqual(request.getRootURL(), "http://example.com/foo")
+            self.assertEqual(request.getRootURL(), "http://example.com:81/foo")
 
     def testRoot(self):
         rr = RootResource()
@@ -440,7 +440,7 @@
             request.setHost('example.com', 81)
             request.gotLength(0)
             request.requestReceived('GET', url, 'HTTP/1.0')
-            self.assertEqual(request.getRootURL(), "http://example.com/")
+            self.assertEqual(request.getRootURL(), "http://example.com:81/")
 
 
 class NewRenderResource(resource.Resource):
