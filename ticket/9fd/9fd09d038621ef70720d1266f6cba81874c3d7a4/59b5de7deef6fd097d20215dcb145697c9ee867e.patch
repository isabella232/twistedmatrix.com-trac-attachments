diff --git a/twisted/mail/test/test_imap.py b/twisted/mail/test/test_imap.py
index 857e786..1ce3ed6 100644
--- a/twisted/mail/test/test_imap.py
+++ b/twisted/mail/test/test_imap.py
@@ -321,9 +321,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         for (wildcard, fail, succeed) in cases:
             wildcard = imap4.wildcardToRegexp(wildcard, '/')
             for x in fail:
-                self.failIf(wildcard.match(x))
+                self.assertFalse(wildcard.match(x))
             for x in succeed:
-                self.failUnless(wildcard.match(x))
+                self.assertTrue(wildcard.match(x))
 
 
     def test_wildcardNoDelim(self):
@@ -343,9 +343,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         for (wildcard, fail, succeed) in cases:
             wildcard = imap4.wildcardToRegexp(wildcard, None)
             for x in fail:
-                self.failIf(wildcard.match(x), x)
+                self.assertFalse(wildcard.match(x), x)
             for x in succeed:
-                self.failUnless(wildcard.match(x), x)
+                self.assertTrue(wildcard.match(x), x)
 
 
     def test_headerFormatter(self):
@@ -599,7 +599,7 @@ class IMAP4HelperTestCase(unittest.TestCase):
             p = imap4._FetchParser()
             p.parseString(inp)
             self.assertEqual(len(p.result), 1)
-            self.failUnless(isinstance(p.result[0], getattr(p, outp)))
+            self.assertTrue(isinstance(p.result[0], getattr(p, outp)))
 
 
     def test_fetchParserMacros(self):
@@ -625,7 +625,7 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, False)
         self.assertEqual(p.result[0].header, None)
         self.assertEqual(str(p.result[0]), 'BODY')
@@ -633,23 +633,23 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
         self.assertEqual(str(p.result[0]), 'BODY')
 
         p = P()
         p.parseString('BODY[]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].empty, True)
         self.assertEqual(str(p.result[0]), 'BODY[]')
 
         p = P()
         p.parseString('BODY[HEADER]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, False)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, True)
         self.assertEqual(p.result[0].header.fields, ())
         self.assertEqual(p.result[0].empty, False)
@@ -658,9 +658,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK[HEADER]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, True)
         self.assertEqual(p.result[0].header.fields, ())
         self.assertEqual(p.result[0].empty, False)
@@ -669,9 +669,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY[HEADER.FIELDS (Subject Cc Message-Id)]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, False)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, False)
         self.assertEqual(p.result[0].header.fields, ['SUBJECT', 'CC', 'MESSAGE-ID'])
         self.assertEqual(p.result[0].empty, False)
@@ -680,9 +680,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK[HEADER.FIELDS (Subject Cc Message-Id)]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, False)
         self.assertEqual(p.result[0].header.fields, ['SUBJECT', 'CC', 'MESSAGE-ID'])
         self.assertEqual(p.result[0].empty, False)
@@ -691,9 +691,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK[HEADER.FIELDS.NOT (Subject Cc Message-Id)]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, True)
         self.assertEqual(p.result[0].header.fields, ['SUBJECT', 'CC', 'MESSAGE-ID'])
         self.assertEqual(p.result[0].empty, False)
@@ -702,9 +702,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY[1.MIME]<10.50>')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, False)
-        self.failUnless(isinstance(p.result[0].mime, p.MIME))
+        self.assertTrue(isinstance(p.result[0].mime, p.MIME))
         self.assertEqual(p.result[0].part, (0,))
         self.assertEqual(p.result[0].partialBegin, 10)
         self.assertEqual(p.result[0].partialLength, 50)
@@ -714,9 +714,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK[1.3.9.11.HEADER.FIELDS.NOT (Message-Id Date)]<103.69>')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].part, (0, 2, 8, 10))
         self.assertEqual(p.result[0].header.fields, ['MESSAGE-ID', 'DATE'])
         self.assertEqual(p.result[0].partialBegin, 103)
@@ -1303,7 +1303,7 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
         d1.addCallbacks(self._cbStopClient, self._ebGeneral)
         d2 = self.loopback()
         d = defer.gatherResults([d1, d2])
-        d.addCallback(lambda _: self.failUnless(isinstance(self.stashed,
+        d.addCallback(lambda _: self.assertTrue(isinstance(self.stashed,
                                                            failure.Failure)))
         return d
 
@@ -1384,7 +1384,7 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
         d2 = self.loopback()
         d = defer.gatherResults([d1, d2])
         d.addCallback(lambda _:
-                      self.failUnless(isinstance(self.stashed, failure.Failure)))
+                      self.assertTrue(isinstance(self.stashed, failure.Failure)))
         return d
 
     def testHierarchicalRename(self):
@@ -1633,7 +1633,7 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
     def _cbTestClose(self, ignored, m):
         self.assertEqual(len(m.messages), 1)
         self.assertEqual(m.messages[0], ('Message 2', ('AnotherFlag',), None, 1))
-        self.failUnless(m.closed)
+        self.assertTrue(m.closed)
 
     def testExpunge(self):
         m = SimpleMailbox()
@@ -1650,7 +1650,7 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
         def expunge():
             return self.client.expunge()
         def expunged(results):
-            self.failIf(self.server.mbox is None)
+            self.assertFalse(self.server.mbox is None)
             self.results = results
 
         self.results = None
@@ -4324,7 +4324,7 @@ class FetchSearchStoreTestCase(unittest.TestCase, IMAP4HelperMixin):
 
         def check(ignored):
             # Ensure no short-circuiting wierdness is going on
-            self.failIf(self.result is self.expected)
+            self.assertFalse(self.result is self.expected)
 
             self.assertEqual(self.result, self.expected)
             self.assertEqual(self.uid, self.server_received_uid)
@@ -4378,7 +4378,7 @@ class FetchSearchStoreTestCase(unittest.TestCase, IMAP4HelperMixin):
 
         def check(ignored):
             # Ensure no short-circuiting wierdness is going on
-            self.failIf(self.result is self.expected)
+            self.assertFalse(self.result is self.expected)
 
             self.parts and self.parts.sort()
             self.server_received_parts and self.server_received_parts.sort()
@@ -4489,7 +4489,7 @@ class CopyWorkerTestCase(unittest.TestCase):
                 self.assertEqual(a[2], "internaldate")
 
             for (status, result) in results:
-                self.failUnless(status)
+                self.assertTrue(status)
                 self.assertEqual(result, None)
 
         return d.addCallback(cbCopy)
@@ -4518,7 +4518,7 @@ class CopyWorkerTestCase(unittest.TestCase):
             self.assertEqual(seen, exp)
 
             for (status, result) in results:
-                self.failUnless(status)
+                self.assertTrue(status)
                 self.assertEqual(result, None)
 
         return d.addCallback(cbCopy)
@@ -4614,7 +4614,7 @@ class TLSTestCase(IMAP4HelperMixin, unittest.TestCase):
         self.connected.addErrback(self._ebGeneral)
 
         d = self.loopback()
-        d.addCallback(lambda x : self.failUnless(success))
+        d.addCallback(lambda x : self.assertTrue(success))
         return defer.gatherResults([d, self.connected])
 
 
@@ -4630,7 +4630,7 @@ class TLSTestCase(IMAP4HelperMixin, unittest.TestCase):
         self.connected.addErrback(self._ebGeneral)
 
         def check(ignored):
-            self.failUnless(failure)
+            self.assertTrue(failure)
             self.assertIdentical(failure[0], imap4.IMAP4Exception)
         return self.loopback().addCallback(check)
 
@@ -4735,11 +4735,11 @@ class Timeout(IMAP4HelperMixin, unittest.TestCase):
 
         # 2/3rds of the idle timeout elapses...
         c.pump([0.0] + [self.server.timeOut / 3.0] * 2)
-        self.failIf(lost, lost)
+        self.assertFalse(lost, lost)
 
         # Now some more
         c.pump([0.0, self.server.timeOut / 2.0])
-        self.failUnless(lost)
+        self.assertTrue(lost)
 
 
 
diff --git a/twisted/mail/test/test_mail.py b/twisted/mail/test/test_mail.py
index ba91544..1dd064c 100644
--- a/twisted/mail/test/test_mail.py
+++ b/twisted/mail/test/test_mail.py
@@ -79,8 +79,8 @@ class DomainWithDefaultsTestCase(unittest.TestCase):
         for x in range(10):
             self.assertEqual(d[x], x + 10)
             self.assertEqual(d.get(x), x + 10)
-            self.failUnless(x in d)
-            self.failUnless(d.has_key(x))
+            self.assertTrue(x in d)
+            self.assertTrue(d.has_key(x))
 
         del d[2], d[4], d[6]
 
@@ -188,8 +188,8 @@ class FileMessageTestCase(unittest.TestCase):
 
     def _cbFinalName(self, result):
         self.assertEqual(result, self.final)
-        self.failUnless(self.f.closed)
-        self.failIf(os.path.exists(self.name))
+        self.assertTrue(self.f.closed)
+        self.assertFalse(os.path.exists(self.name))
 
     def testContents(self):
         contents = "first line\nsecond line\nthird line\n"
@@ -203,8 +203,8 @@ class FileMessageTestCase(unittest.TestCase):
         for line in contents.splitlines():
             self.fp.lineReceived(line)
         self.fp.connectionLost()
-        self.failIf(os.path.exists(self.name))
-        self.failIf(os.path.exists(self.final))
+        self.assertFalse(os.path.exists(self.name))
+        self.assertFalse(os.path.exists(self.final))
 
 class MailServiceTestCase(unittest.TestCase):
     def setUp(self):
@@ -212,16 +212,16 @@ class MailServiceTestCase(unittest.TestCase):
 
     def testFactories(self):
         f = self.service.getPOP3Factory()
-        self.failUnless(isinstance(f, protocol.ServerFactory))
-        self.failUnless(f.buildProtocol(('127.0.0.1', 12345)), pop3.POP3)
+        self.assertTrue(isinstance(f, protocol.ServerFactory))
+        self.assertTrue(f.buildProtocol(('127.0.0.1', 12345)), pop3.POP3)
 
         f = self.service.getSMTPFactory()
-        self.failUnless(isinstance(f, protocol.ServerFactory))
-        self.failUnless(f.buildProtocol(('127.0.0.1', 12345)), smtp.SMTP)
+        self.assertTrue(isinstance(f, protocol.ServerFactory))
+        self.assertTrue(f.buildProtocol(('127.0.0.1', 12345)), smtp.SMTP)
 
         f = self.service.getESMTPFactory()
-        self.failUnless(isinstance(f, protocol.ServerFactory))
-        self.failUnless(f.buildProtocol(('127.0.0.1', 12345)), smtp.ESMTP)
+        self.assertTrue(isinstance(f, protocol.ServerFactory))
+        self.assertTrue(f.buildProtocol(('127.0.0.1', 12345)), smtp.ESMTP)
 
     def testPortals(self):
         o1 = object()
@@ -229,8 +229,8 @@ class MailServiceTestCase(unittest.TestCase):
         self.service.portals['domain'] = o1
         self.service.portals[''] = o2
 
-        self.failUnless(self.service.lookupPortal('domain') is o1)
-        self.failUnless(self.service.defaultPortal() is o2)
+        self.assertTrue(self.service.lookupPortal('domain') is o1)
+        self.assertTrue(self.service.defaultPortal() is o2)
 
 
 class StringListMailboxTests(unittest.TestCase):
@@ -491,20 +491,20 @@ class MaildirTestCase(unittest.TestCase):
         d = self.d
         trash = os.path.join(d, '.Trash')
 
-        self.failUnless(os.path.exists(d) and os.path.isdir(d))
-        self.failUnless(os.path.exists(os.path.join(d, 'new')))
-        self.failUnless(os.path.exists(os.path.join(d, 'cur')))
-        self.failUnless(os.path.exists(os.path.join(d, 'tmp')))
-        self.failUnless(os.path.isdir(os.path.join(d, 'new')))
-        self.failUnless(os.path.isdir(os.path.join(d, 'cur')))
-        self.failUnless(os.path.isdir(os.path.join(d, 'tmp')))
+        self.assertTrue(os.path.exists(d) and os.path.isdir(d))
+        self.assertTrue(os.path.exists(os.path.join(d, 'new')))
+        self.assertTrue(os.path.exists(os.path.join(d, 'cur')))
+        self.assertTrue(os.path.exists(os.path.join(d, 'tmp')))
+        self.assertTrue(os.path.isdir(os.path.join(d, 'new')))
+        self.assertTrue(os.path.isdir(os.path.join(d, 'cur')))
+        self.assertTrue(os.path.isdir(os.path.join(d, 'tmp')))
 
-        self.failUnless(os.path.exists(os.path.join(trash, 'new')))
-        self.failUnless(os.path.exists(os.path.join(trash, 'cur')))
-        self.failUnless(os.path.exists(os.path.join(trash, 'tmp')))
-        self.failUnless(os.path.isdir(os.path.join(trash, 'new')))
-        self.failUnless(os.path.isdir(os.path.join(trash, 'cur')))
-        self.failUnless(os.path.isdir(os.path.join(trash, 'tmp')))
+        self.assertTrue(os.path.exists(os.path.join(trash, 'new')))
+        self.assertTrue(os.path.exists(os.path.join(trash, 'cur')))
+        self.assertTrue(os.path.exists(os.path.join(trash, 'tmp')))
+        self.assertTrue(os.path.isdir(os.path.join(trash, 'new')))
+        self.assertTrue(os.path.isdir(os.path.join(trash, 'cur')))
+        self.assertTrue(os.path.isdir(os.path.join(trash, 'tmp')))
 
 
     def test_nameGenerator(self):
@@ -553,20 +553,20 @@ class MaildirTestCase(unittest.TestCase):
         d = {}
         for i in range(10):
             u = mb.getUidl(i)
-            self.failIf(u in d)
+            self.assertFalse(u in d)
             d[u] = None
 
         p, f = os.path.split(msgs[5])
 
         mb.deleteMessage(5)
         self.assertEqual(mb.listMessages(5), 0)
-        self.failUnless(os.path.exists(j(self.d, '.Trash', 'cur', f)))
-        self.failIf(os.path.exists(j(self.d, msgs[5])))
+        self.assertTrue(os.path.exists(j(self.d, '.Trash', 'cur', f)))
+        self.assertFalse(os.path.exists(j(self.d, msgs[5])))
 
         mb.undeleteMessages()
         self.assertEqual(mb.listMessages(5), 6)
-        self.failIf(os.path.exists(j(self.d, '.Trash', 'cur', f)))
-        self.failUnless(os.path.exists(j(self.d, msgs[5])))
+        self.assertFalse(os.path.exists(j(self.d, '.Trash', 'cur', f)))
+        self.assertTrue(os.path.exists(j(self.d, msgs[5])))
 
 class MaildirDirdbmDomainTestCase(unittest.TestCase):
     def setUp(self):
@@ -583,16 +583,16 @@ class MaildirDirdbmDomainTestCase(unittest.TestCase):
             self.D.addUser(u, p)
 
         for (u, p) in toAdd:
-            self.failUnless(u in self.D.dbm)
+            self.assertTrue(u in self.D.dbm)
             self.assertEqual(self.D.dbm[u], p)
-            self.failUnless(os.path.exists(os.path.join(self.P, u)))
+            self.assertTrue(os.path.exists(os.path.join(self.P, u)))
 
     def testCredentials(self):
         creds = self.D.getCredentialsCheckers()
 
         self.assertEqual(len(creds), 1)
-        self.failUnless(cred.checkers.ICredentialsChecker.providedBy(creds[0]))
-        self.failUnless(cred.credentials.IUsernamePassword in creds[0].credentialInterfaces)
+        self.assertTrue(cred.checkers.ICredentialsChecker.providedBy(creds[0]))
+        self.assertTrue(cred.credentials.IUsernamePassword in creds[0].credentialInterfaces)
 
     def testRequestAvatar(self):
         class ISomething(Interface):
@@ -606,8 +606,8 @@ class MaildirDirdbmDomainTestCase(unittest.TestCase):
 
         t = self.D.requestAvatar('user', None, pop3.IMailbox)
         self.assertEqual(len(t), 3)
-        self.failUnless(t[0] is pop3.IMailbox)
-        self.failUnless(pop3.IMailbox.providedBy(t[1]))
+        self.assertTrue(t[0] is pop3.IMailbox)
+        self.assertTrue(pop3.IMailbox.providedBy(t[1]))
 
         t[2]()
 
@@ -702,7 +702,7 @@ class ServiceDomainTestCase(unittest.TestCase):
          fp = StringIO.StringIO(hdr)
          m = rfc822.Message(fp)
          self.assertEqual(len(m.items()), 1)
-         self.failUnless(m.has_key('Received'))
+         self.assertTrue(m.has_key('Received'))
 
     def testValidateTo(self):
         user = smtp.User('user@test.domain', 'helo', None, 'wherever@whatever')
@@ -711,7 +711,7 @@ class ServiceDomainTestCase(unittest.TestCase):
             )
 
     def _cbValidateTo(self, result):
-        self.failUnless(callable(result))
+        self.assertTrue(callable(result))
 
     def testValidateToBadUsername(self):
         user = smtp.User('resu@test.domain', 'helo', None, 'wherever@whatever')
@@ -728,15 +728,15 @@ class ServiceDomainTestCase(unittest.TestCase):
     def testValidateFrom(self):
         helo = ('hostname', '127.0.0.1')
         origin = smtp.Address('<user@hostname>')
-        self.failUnless(self.D.validateFrom(helo, origin) is origin)
+        self.assertTrue(self.D.validateFrom(helo, origin) is origin)
 
         helo = ('hostname', '1.2.3.4')
         origin = smtp.Address('<user@hostname>')
-        self.failUnless(self.D.validateFrom(helo, origin) is origin)
+        self.assertTrue(self.D.validateFrom(helo, origin) is origin)
 
         helo = ('hostname', '1.2.3.4')
         origin = smtp.Address('<>')
-        self.failUnless(self.D.validateFrom(helo, origin) is origin)
+        self.assertTrue(self.D.validateFrom(helo, origin) is origin)
 
         self.assertRaises(
             smtp.SMTPBadSender,
@@ -771,7 +771,7 @@ class VirtualPOP3TestCase(unittest.TestCase):
     def _cbAuthenticateAPOP(self, result):
         self.assertEqual(len(result), 3)
         self.assertEqual(result[0], pop3.IMailbox)
-        self.failUnless(pop3.IMailbox.providedBy(result[1]))
+        self.assertTrue(pop3.IMailbox.providedBy(result[1]))
         result[2]()
 
     def testAuthenticateIncorrectUserAPOP(self):
@@ -794,7 +794,7 @@ class VirtualPOP3TestCase(unittest.TestCase):
     def _cbAuthenticatePASS(self, result):
         self.assertEqual(len(result), 3)
         self.assertEqual(result[0], pop3.IMailbox)
-        self.failUnless(pop3.IMailbox.providedBy(result[1]))
+        self.assertTrue(pop3.IMailbox.providedBy(result[1]))
         result[2]()
 
     def testAuthenticateBadUserPASS(self):
@@ -834,7 +834,7 @@ class RelayTestCase(unittest.TestCase):
             user.protocol.transport = empty()
             user.protocol.transport.getPeer = lambda: peer
 
-            self.failUnless(callable(domain.exists(user)))
+            self.assertTrue(callable(domain.exists(user)))
 
         for peer in dontRelay:
             user = empty()
@@ -953,7 +953,7 @@ class DirectoryQueueTestCase(unittest.TestCase):
         shutil.rmtree(self.tmpdir)
 
     def testWaiting(self):
-        self.failUnless(self.queue.hasWaiting())
+        self.assertTrue(self.queue.hasWaiting())
         self.assertEqual(len(self.queue.getWaiting()), 25)
 
         waiting = self.queue.getWaiting()
@@ -971,7 +971,7 @@ class DirectoryQueueTestCase(unittest.TestCase):
                 25 - len(self.queue.getWaiting())
             )
 
-        self.failIf(self.queue.hasWaiting())
+        self.assertFalse(self.queue.hasWaiting())
 
         relayed = self.queue.getRelayed()
         self.queue.setWaiting(relayed[0])
@@ -986,8 +986,8 @@ class DirectoryQueueTestCase(unittest.TestCase):
         self.assertEqual(len(self.queue.getWaiting()), 24)
         self.assertEqual(len(self.queue.getRelayed()), 0)
 
-        self.failIf(msg in self.queue.getWaiting())
-        self.failIf(msg in self.queue.getRelayed())
+        self.assertFalse(msg in self.queue.getWaiting())
+        self.assertFalse(msg in self.queue.getRelayed())
 
     def testEnvelope(self):
         envelopes = []
@@ -1421,7 +1421,7 @@ class MXTestCase(unittest.TestCase):
             )
 
     def _cbManyRecordsSuccessfulLookup(self, mx):
-        self.failUnless(str(mx.name).split('.', 1)[0] in ('mx1', 'mx2', 'mx3'))
+        self.assertTrue(str(mx.name).split('.', 1)[0] in ('mx1', 'mx2', 'mx3'))
         self.mx.markBad(str(mx.name))
         return self.mx.getMX('test.domain'
             ).addCallback(self._cbManyRecordsDifferentResult, mx
@@ -1674,8 +1674,8 @@ class AliasTestCase(unittest.TestCase):
 
     def _cbMultiWrapper(self, ignored, msgs):
         for m in msgs:
-            self.failUnless(m.eom)
-            self.failIf(m.lost)
+            self.assertTrue(m.eom)
+            self.assertFalse(m.lost)
             self.assertEqual(self.lines, m.lines)
 
     def testFileAlias(self):
diff --git a/twisted/mail/test/test_pop3.py b/twisted/mail/test/test_pop3.py
index 4379a1e..9052db8 100644
--- a/twisted/mail/test/test_pop3.py
+++ b/twisted/mail/test/test_pop3.py
@@ -382,7 +382,7 @@ class AnotherPOP3TestCase(unittest.TestCase):
         return d.addCallback(self._cbTestAuthListing, client)
 
     def _cbTestAuthListing(self, ignored, client):
-        self.failUnless(client.response[1].startswith('+OK'))
+        self.assertTrue(client.response[1].startswith('+OK'))
         self.assertEqual(sorted(client.response[2:5]),
                          ["AUTH1", "AUTHLAST", "SECONDAUTH"])
         self.assertEqual(client.response[5], ".")
@@ -555,7 +555,7 @@ class SASLTestCase(unittest.TestCase):
         p.connectionMade()
 
         p.lineReceived("CAPA")
-        self.failUnless(s.getvalue().find("SASL CRAM-MD5") >= 0)
+        self.assertTrue(s.getvalue().find("SASL CRAM-MD5") >= 0)
 
         p.lineReceived("AUTH CRAM-MD5")
         chal = s.getvalue().splitlines()[-1][2:]
@@ -563,8 +563,8 @@ class SASLTestCase(unittest.TestCase):
         response = hmac.HMAC('testpassword', chal).hexdigest()
 
         p.lineReceived(base64.encodestring('testuser ' + response).rstrip('\n'))
-        self.failUnless(p.mbox)
-        self.failUnless(s.getvalue().splitlines()[-1].find("+OK") >= 0)
+        self.assertTrue(p.mbox)
+        self.assertTrue(s.getvalue().splitlines()[-1].find("+OK") >= 0)
         p.connectionLost(failure.Failure(Exception("Test harness disconnect")))
 
 
@@ -1068,4 +1068,4 @@ class POP3MiscTestCase(unittest.TestCase):
         """
         mod = twisted.mail.pop3
         for attr in mod.__all__:
-            self.failUnless(hasattr(mod, attr))
+            self.assertTrue(hasattr(mod, attr))
diff --git a/twisted/mail/test/test_pop3client.py b/twisted/mail/test/test_pop3client.py
index 502aae8..e24aea3 100644
--- a/twisted/mail/test/test_pop3client.py
+++ b/twisted/mail/test/test_pop3client.py
@@ -146,7 +146,7 @@ class POP3ClientLoginTestCase(unittest.TestCase):
         p, t = setUp(greet=False)
         p.dataReceived("+OK Howdy\r\n")
         d = p.login("username", "password")
-        self.failIf(t.value())
+        self.assertFalse(t.value())
         return self.assertFailure(
             d, InsecureAuthenticationDisallowed)
 
diff --git a/twisted/mail/test/test_smtp.py b/twisted/mail/test/test_smtp.py
index 058bb8e..dd0ad6d 100644
--- a/twisted/mail/test/test_smtp.py
+++ b/twisted/mail/test/test_smtp.py
@@ -657,7 +657,7 @@ class SMTPHelperTestCase(unittest.TestCase):
         d = {}
         for i in range(1000):
             m = smtp.messageid('testcase')
-            self.failIf(m in d)
+            self.assertFalse(m in d)
             d[m] = None
 
     def testQuoteAddr(self):
@@ -764,7 +764,7 @@ class EmptyLineTestCase(unittest.TestCase):
 
         out = transport.value().splitlines()
         self.assertEqual(len(out), 2)
-        self.failUnless(out[0].startswith('220'))
+        self.assertTrue(out[0].startswith('220'))
         self.assertEqual(out[1], "500 Error: bad syntax")
 
 
@@ -1247,9 +1247,9 @@ class ESMTPAuthenticationTestCase(unittest.TestCase):
         """
         d, credentials, mind, interfaces = loginArgs.pop()
         self.assertEqual(loginArgs, [])
-        self.failUnless(twisted.cred.credentials.IUsernamePassword.providedBy(credentials))
+        self.assertTrue(twisted.cred.credentials.IUsernamePassword.providedBy(credentials))
         self.assertEqual(credentials.username, username)
-        self.failUnless(credentials.checkPassword(password))
+        self.assertTrue(credentials.checkPassword(password))
         self.assertIn(smtp.IMessageDeliveryFactory, interfaces)
         self.assertIn(smtp.IMessageDelivery, interfaces)
         d.callback((smtp.IMessageDeliveryFactory, None, lambda: None))
