Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 35929)
+++ twisted/python/filepath.py	(working copy)
@@ -10,7 +10,6 @@
 
 import os
 import errno
-import random
 import base64
 from hashlib import sha1
 
@@ -49,11 +48,12 @@
 
 def _stub_islink(path):
     """
-    Always return 'false' if the operating system does not support symlinks.
+    Always return C{false} if the operating system does not support symlinks.
 
-    @param path: a path string.
-    @type path: L{str}
-    @return: false
+    @param path: A path string.
+    @type path: C{str}
+    @return: C{False}
+    @rtype: C{bool}
     """
     return False
 
@@ -109,7 +109,8 @@
     def open(mode="r"):
         """
         Opens this file path with the given mode.
-        @return: a file-like-object.
+
+        @return: a file-like object.
         @raise Exception: if this file path cannot be opened.
         """
 
@@ -120,6 +121,8 @@
 
     def getsize():
         """
+        Retrieve the size of this file in bytes.
+
         @return: the size of the file at this file path in bytes.
         @raise Exception: if the size cannot be obtained.
         """
@@ -129,7 +132,7 @@
         Retrieve the time of last access from this file.
 
         @return: a number of seconds from the epoch.
-        @rtype: float
+        @rtype: C{float}
         """
 
     def getStatusChangeTime():
@@ -137,7 +140,7 @@
         Retrieve the time of the last status change for this file.
 
         @return: a number of seconds from the epoch.
-        @rtype: float
+        @rtype: C{float}
         """
 
     def getAccessTime():
@@ -145,36 +148,49 @@
         Retrieve the time that this file was last accessed.
 
         @return: a number of seconds from the epoch.
-        @rtype: float
+        @rtype: C{float}
         """
 
     def exists():
         """
+        Check if this file path exists.
+
         @return: C{True} if the file at this file path exists, C{False}
             otherwise.
+        @rtype: C{bool}
         """
 
     def isdir():
         """
+        Check if this file path refers to a directory.
+
         @return: C{True} if the file at this file path is a directory, C{False}
             otherwise.
         """
 
     def isfile():
         """
+        Check if this file path refers to a regular file.
+
         @return: C{True} if the file at this file path is a regular file,
             C{False} otherwise.
         """
 
     def children():
         """
+        List the children of this path object.
+
         @return: a sequence of the children of the directory at this file path.
         @raise Exception: if the file at this file path is not a directory.
         """
 
     def basename():
         """
+        Retrieve the final component of the file path's path (everything
+        after the final path separator).
+
         @return: the base name of this file path.
+        @rtype: C{str}
         """
 
     def parent():
@@ -185,15 +201,17 @@
     def sibling(name):
         """
         A file path for the directory containing the file at this file path.
+
         @param name: the name of a sibling of this path. C{name} must be a direct
             sibling of this path and may not contain a path separator.
 
         @return: a sibling file path of this one.
         """
 
+
 class InsecurePath(Exception):
     """
-    Error that is raised when the path provided to FilePath is invalid.
+    Error that is raised when the path provided to L{FilePath} is invalid.
     """
 
 
@@ -215,7 +233,7 @@
     while still being catchable as an independent type.
 
     @ivar originalException: the actual original exception instance, either an
-    L{OSError} or a L{WindowsError}.
+    C{OSError} or a C{WindowsError}.
     """
     def __init__(self, originalException):
         """
@@ -252,14 +270,18 @@
 
 class AbstractFilePath(object):
     """
-    Abstract implementation of an IFilePath; must be completed by a subclass.
+    Abstract implementation of an L{IFilePath}; must be completed by a
+    subclass.
 
     This class primarily exists to provide common implementations of certain
-    methods in IFilePath. It is *not* a required parent class for IFilePath
+    methods in IFilePath. It is *not* a required parent class for L{IFilePath}
     implementations, just a useful starting point.
     """
 
     def getContent(self):
+        """
+        Retrieve the file-like object for this file path.
+        """
         fp = self.open()
         try:
             return fp.read()
@@ -269,6 +291,8 @@
 
     def parents(self):
         """
+        Retrieve an iterator of all the ancestors of this path.
+
         @return: an iterator of all the ancestors of this path, from the most
         recent (its immediate parent) to the root of its filesystem.
         """
@@ -295,7 +319,7 @@
         OSError subclass L{UnlistableError} is raised instead.
 
         @return: an iterable of all currently-existing children of this object
-        accessible with L{_PathHelper.child}.
+        accessible with C{_PathHelper.child}.
         """
         try:
             subnames = self.listdir()
@@ -341,7 +365,9 @@
     def walk(self, descend=None):
         """
         Yield myself, then each of my children, and each of those children's
-        children in turn.  The optional argument C{descend} is a predicate that
+        children in turn.
+
+        The optional argument C{descend} is a predicate that
         takes a FilePath, and determines whether or not that FilePath is
         traversed/descended into.  It will be called with each path for which
         C{isdir} returns C{True}.  If C{descend} is not specified, all
@@ -433,7 +459,7 @@
     # new in 8.0
     def __hash__(self):
         """
-        Hash the same as another FilePath with the same path as mine.
+        Hash the same as another L{FilePath} with the same path as mine.
         """
         return hash((self.__class__, self.path))
 
@@ -571,7 +597,7 @@
 
     Note: although time-related methods do return floating-point results, they
     may still be only second resolution depending on the platform and the last
-    value passed to L{os.stat_float_times}.  If you want greater-than-second
+    value passed to C{os.stat_float_times}.  If you want greater-than-second
     precision, call C{os.stat_float_times(True)}, or use Python 2.5.
     Greater-than-second precision is only available in Windows on Python2.5 and
     later.
@@ -597,7 +623,7 @@
         attribute.  Instead, use the methods on L{FilePath} which give you
         information about it, like C{getsize()}, C{isdir()},
         C{getModificationTime()}, and so on.
-    @type statinfo: C{int} or L{types.NoneType} or L{os.stat_result}
+    @type statinfo: C{int} or C{types.NoneType} or C{os.stat_result}
     """
 
     statinfo = None
@@ -615,7 +641,7 @@
 
     def __getstate__(self):
         """
-        Support serialization by discarding cached L{os.stat} results and
+        Support serialization by discarding cached C{os.stat} results and
         returning everything else.
         """
         d = self.__dict__.copy()
@@ -650,7 +676,7 @@
 
     def preauthChild(self, path):
         """
-        Use me if `path' might have slashes in it, but you know they're safe.
+        Use me if C{path} might have slashes in it, but you know they're safe.
 
         (NOT slashes at the beginning. It still needs to be a _child_).
         """
@@ -659,14 +685,16 @@
             raise InsecurePath("%s is not a child of %s" % (newpath, self.path))
         return self.clonePath(newpath)
 
+
     def childSearchPreauth(self, *paths):
-        """Return my first existing child with a name in 'paths'.
+        """
+        Return my first existing child with a name in C{paths}.
 
-        paths is expected to be a list of *pre-secured* path fragments; in most
-        cases this will be specified by a system administrator and not an
-        arbitrary user.
+        C{paths} is expected to be a list of *pre-secured* path fragments;
+        in most cases this will be specified by a system administrator and not
+        an arbitrary user.
 
-        If no appropriately-named children exist, this will return None.
+        If no appropriately-named children exist, this will return C{None}.
         """
         p = self.path
         for child in paths:
@@ -674,17 +702,19 @@
             if exists(jp):
                 return self.clonePath(jp)
 
+
     def siblingExtensionSearch(self, *exts):
-        """Attempt to return a path with my name, given multiple possible
+        """
+        Attempt to return a path with my name, given multiple possible
         extensions.
 
-        Each extension in exts will be tested and the first path which exists
-        will be returned.  If no path exists, None will be returned.  If '' is
-        in exts, then if the file referred to by this path exists, 'self' will
-        be returned.
+        Each extension in C{exts} will be tested and the first path which
+        exists will be returned.  If no path exists, C{None} will be returned.
+        If C{''} is in C{exts}, then if the file referred to by this path
+        exists, C{self} will be returned.
 
         The extension '*' has a magic meaning, which means "any path that
-        begins with self.path+'.' is acceptable".
+        begins with C{self.path + '.'} is acceptable".
         """
         p = self.path
         for ext in exts:
@@ -702,17 +732,20 @@
 
     def realpath(self):
         """
-        Returns the absolute target as a FilePath if self is a link, self
-        otherwise.  The absolute link is the ultimate file or directory the
+        Returns the absolute target as a L{FilePath} if self is a link, self
+        otherwise.
+
+        The absolute link is the ultimate file or directory the
         link refers to (for instance, if the link refers to another link, and
         another...).  If the filesystem does not support symlinks, or
-        if the link is cyclical, raises a LinkError.
+        if the link is cyclical, raises a L{LinkError}.
 
-        Behaves like L{os.path.realpath} in that it does not resolve link
+        Behaves like C{os.path.realpath} in that it does not resolve link
         names in the middle (ex. /x/y/z, y is a link to w - realpath on z
         will return /x/y/z, not /x/w/z).
 
-        @return: FilePath of the target path
+        @return: L{FilePath} of the target path.
+        @rtype: L{FilePath}
         @raises LinkError: if links are not supported or links are cyclical.
         """
         if self.islink():
@@ -724,18 +757,27 @@
 
 
     def siblingExtension(self, ext):
-        return self.clonePath(self.path+ext)
+        """
+        Attempt to return a path with my name, given the extension at C{ext}.
+
+        @param ext: File-extension to search for.
+        @type ext: C{str}
+        @rtype: L{FilePath}
+        """
+        return self.clonePath(self.path + ext)
 
 
     def linkTo(self, linkFilePath):
         """
         Creates a symlink to self to at the path in the L{FilePath}
-        C{linkFilePath}.  Only works on posix systems due to its dependence on
+        C{linkFilePath}.
+
+        Only works on posix systems due to its dependence on
         C{os.symlink}.  Propagates C{OSError}s up from C{os.symlink} if
         C{linkFilePath.parent()} does not exist, or C{linkFilePath} already
         exists.
 
-        @param linkFilePath: a FilePath representing the link to be created
+        @param linkFilePath: a FilePath representing the link to be created.
         @type linkFilePath: L{FilePath}
         """
         os.symlink(self.path, linkFilePath.path)
@@ -773,10 +815,10 @@
         after you know the filesystem may have changed, call this method.
 
         @param reraise: a boolean.  If true, re-raise exceptions from
-        L{os.stat}; otherwise, mark this path as not existing, and remove any
+        C{os.stat}; otherwise, mark this path as not existing, and remove any
         cached stat information.
 
-        @raise Exception: is C{reraise} is C{True} and an exception occurs while
+        @raise Exception: If C{reraise} is C{True} and an exception occurs while
             reloading metadata.
         """
         try:
@@ -809,6 +851,13 @@
 
 
     def getsize(self):
+        """
+        Retrieve the size of this file in bytes.
+
+        @return: The size of the file at this file path in bytes.
+        @raise Exception: if the size cannot be obtained.
+        @rtype: C{int}
+        """
         st = self.statinfo
         if not st:
             self.restat()
@@ -821,7 +870,7 @@
         Retrieve the time of last access from this file.
 
         @return: a number of seconds from the epoch.
-        @rtype: float
+        @rtype: C{float}
         """
         st = self.statinfo
         if not st:
@@ -835,7 +884,7 @@
         Retrieve the time of the last status change for this file.
 
         @return: a number of seconds from the epoch.
-        @rtype: float
+        @rtype: C{float}
         """
         st = self.statinfo
         if not st:
@@ -849,7 +898,7 @@
         Retrieve the time that this file was last accessed.
 
         @return: a number of seconds from the epoch.
-        @rtype: float
+        @rtype: C{float}
         """
         st = self.statinfo
         if not st:
@@ -863,7 +912,7 @@
         Retrieve the file serial number, also called inode number, which
         distinguishes this file from all other files on the same device.
 
-        @raise: NotImplementedError if the platform is Windows, since the
+        @raise NotImplementedError: if the platform is Windows, since the
                 inode number would be a dummy value for all files in Windows
         @return: a number representing the file serial number
         @rtype: C{int}
@@ -885,7 +934,7 @@
         number together uniquely identify the file, but the device number is
         not necessarily consistent across reboots or system crashes.
 
-        @raise: NotImplementedError if the platform is Windows, since the
+        @raise NotImplementedError: if the platform is Windows, since the
                 device number would be 0 for all partitions on a Windows
                 platform
         @return: a number representing the device
@@ -904,15 +953,16 @@
 
     def getNumberOfHardLinks(self):
         """
-        Retrieves the number of hard links to the file.  This count keeps
-        track of how many directories have entries for this file.  If the
-        count is ever decremented to zero then the file itself is discarded
-        as soon as no process still holds it open.  Symbolic links are not
-        counted in the total.
-
-        @raise: NotImplementedError if the platform is Windows, since Windows
-                doesn't maintain a link count for directories, and os.stat
-                does not set st_nlink on Windows anyway.
+        Retrieves the number of hard links to the file.
+
+        This count keeps track of how many directories have entries for this
+        file. If the count is ever decremented to zero then the file itself is
+        discarded as soon as no process still holds it open.  Symbolic links
+        are not counted in the total.
+
+        @raise NotImplementedError: if the platform is Windows, since Windows
+                doesn't maintain a link count for directories, and C{os.stat}
+                does not set C{st_nlink} on Windows anyway.
         @return: the number of hard links to the file
         @rtype: C{int}
         @since: 11.0
@@ -931,7 +981,7 @@
         """
         Returns the user ID of the file's owner.
 
-        @raise: NotImplementedError if the platform is Windows, since the UID
+        @raise NotImplementedError: if the platform is Windows, since the UID
                 is always 0 on Windows
         @return: the user ID of the file's owner
         @rtype: C{int}
@@ -951,7 +1001,7 @@
         """
         Returns the group ID of the file.
 
-        @raise: NotImplementedError if the platform is Windows, since the GID
+        @raise NotImplementedError: if the platform is Windows, since the GID
                 is always 0 on windows
         @return: the group ID of the file
         @rtype: C{int}
@@ -1003,8 +1053,11 @@
 
     def isdir(self):
         """
+        Check if this L{FilePath} refers to a directory.
+
         @return: C{True} if this L{FilePath} refers to a directory, C{False}
             otherwise.
+        @rtype: C{bool}
         """
         st = self.statinfo
         if not st:
@@ -1017,8 +1070,11 @@
 
     def isfile(self):
         """
+        Check if this file path refers to a regular file.
+
         @return: C{True} if this L{FilePath} points to a regular file (not a
             directory, socket, named pipe, etc), C{False} otherwise.
+        @rtype: C{bool}
         """
         st = self.statinfo
         if not st:
@@ -1065,7 +1121,11 @@
 
     def islink(self):
         """
-        @return: C{True} if this L{FilePath} points to a symbolic link.
+        Check if this L{FilePath} points to a symbolic link.
+
+        @return: C{True} if this L{FilePath} points to a symbolic link,
+            C{False} otherwise.
+        @rtype: C{bool}
         """
         # We can't use cached stat results here, because that is the stat of
         # the destination - (see #1773) which in *every case* but this one is
@@ -1076,7 +1136,12 @@
 
     def isabs(self):
         """
+        Check if this L{FilePath} refers to an absolute path.
+
+        This always returns C{True}.
+
         @return: C{True}, always.
+        @rtype: C{bool}
         """
         return isabs(self.path)
 
@@ -1085,20 +1150,25 @@
         """
         List the base names of the direct children of this L{FilePath}.
 
-        @return: a C{list} of C{bytes} giving the names of the contents of the
+        @return: A C{list} of C{bytes} giving the names of the contents of the
             directory this L{FilePath} refers to.  These names are relative to
             this L{FilePath}.
+        @rtype: C{list}
 
         @raise: Anything the platform C{os.listdir} implementation might raise
-            (typically OSError).
+            (typically C{OSError}).
         """
         return listdir(self.path)
 
 
     def splitext(self):
         """
-        @return: tuple where the first item is the filename and second item is
-            the file extension. See Python docs for C{os.path.splitext}
+        Split the file path into a pair C{(root, ext)} such that
+        C{root + ext == path}.
+
+        @return: Tuple where the first item is the filename and second item is
+            the file extension. See Python docs for C{os.path.splitext}.
+        @rtype: C{tuple}
         """
         return splitext(self.path)
 
@@ -1151,16 +1221,22 @@
         Assuming I am representing a directory, return a list of
         FilePaths representing my children that match the given
         pattern.
+
+        @rtype: C{list}
         """
         import glob
-        path = self.path[-1] == b'/' and self.path + pattern or self.sep.join([self.path, pattern])
+        path = self.path[-1] == b'/' and self.path + pattern or self.sep.join(
+            [self.path, pattern])
         return map(self.clonePath, glob.glob(path))
 
 
     def basename(self):
         """
-        @return: The final component of the L{FilePath}'s path (Everything after
-            the final path separator).
+        Retrieve the final component of the file path's path (everything
+        after the final path separator).
+
+        @return: The final component of the L{FilePath}'s path (Everything
+            after the final path separator).
         @rtype: C{bytes}
         """
         return basename(self.path)
@@ -1168,8 +1244,11 @@
 
     def dirname(self):
         """
-        @return: All of the components of the L{FilePath}'s path except the last
-            one (everything up to the final path separator).
+        Retrieve all of the components of the L{FilePath}'s path except the
+        last one (everything up to the final path separator).
+
+        @return: All of the components of the L{FilePath}'s path except the
+            last one (everything up to the final path separator).
         @rtype: C{bytes}
         """
         return dirname(self.path)
@@ -1177,8 +1256,11 @@
 
     def parent(self):
         """
+        A file path for the directory containing the file at this file path.
+
         @return: A L{FilePath} representing the path which directly contains
             this L{FilePath}.
+        @rtype: L{FilePath}
         """
         return self.clonePath(self.dirname())
 
@@ -1220,8 +1302,7 @@
         same time.
 
         @param content: The desired contents of the file at this path.
-
-        @type content: L{bytes}
+        @type content: C{bytes}
 
         @param ext: An extension to append to the temporary filename used to
             store the bytes while they are being written.  This can be used to
@@ -1259,6 +1340,9 @@
 
 
     def requireCreate(self, val=1):
+        """
+        Sets the C{alwaysCreate} variable.
+        """
         self.alwaysCreate = val
 
 
@@ -1385,7 +1469,9 @@
     def moveTo(self, destination, followLinks=True):
         """
         Move self to destination - basically renaming self to whatever
-        destination is named.  If destination is an already-existing directory,
+        destination is named.
+
+        If destination is an already-existing directory,
         moves all children to destination if destination is empty.  If
         destination is a non-empty directory, or destination is a file, an
         OSError will be raised.
