Index: twisted/test/test_strcred.py
===================================================================
--- twisted/test/test_strcred.py	(revision 34957)
+++ twisted/test/test_strcred.py	(working copy)
@@ -268,9 +268,9 @@
         self.alice = credentials.UsernamePassword('alice', 'foo')
         self.badPass = credentials.UsernamePassword('alice', 'foobar')
         self.badUser = credentials.UsernamePassword('x', 'yz')
-        self.filename = self.mktemp()
-        FilePath(self.filename).setContent('admin:asdf\nalice:foo\n')
-        self.checker = strcred.makeChecker('file:' + self.filename)
+        self.filename = FilePath(self.mktemp())
+        self.filename.setContent('admin:asdf\nalice:foo\n')
+        self.checker = strcred.makeChecker('file:' + self.filename.path)
 
 
     def _fakeFilename(self):
@@ -527,11 +527,11 @@
     """
 
     def setUp(self):
-        self.filename = self.mktemp()
-        file(self.filename, 'w').write('admin:asdf\nalice:foo\n')
-        self.goodChecker = checkers.FilePasswordDB(self.filename)
+        self.filename = FilePath(self.mktemp())
+        self.filename.setContent('admin:asdf\nalice:foo\n')
+        self.goodChecker = checkers.FilePasswordDB(self.filename.path)
         self.badChecker = checkers.FilePasswordDB(
-            self.filename, hash=self._hash)
+            self.filename.path, hash=self._hash)
         self.anonChecker = checkers.AllowAnonymousAccess()
 
 
Index: twisted/test/test_process.py
===================================================================
--- twisted/test/test_process.py	(revision 34957)
+++ twisted/test/test_process.py	(working copy)
@@ -27,7 +27,7 @@
 from twisted.python.log import msg
 from twisted.internet import reactor, protocol, error, interfaces, defer
 from twisted.trial import unittest
-from twisted.python import util, runtime, procutils
+from twisted.python import util, runtime, procutils, filepath
 from twisted.python.compat import set
 
 
@@ -2379,7 +2379,7 @@
                            (j(self.bazfoo, "executable"), 0700),
                            (j(self.bazfoo, "executable.bin"), 0700),
                            (j(self.bazbar, "executable"), 0)]:
-            f = file(name, "w")
+            f = filepath.FilePath(name).open("w")
             f.close()
             os.chmod(name, mode)
 
Index: twisted/test/test_stdio.py
===================================================================
--- twisted/test/test_stdio.py	(revision 34957)
+++ twisted/test/test_stdio.py	(working copy)
@@ -137,7 +137,7 @@
 
         def processEnded(reason):
             # Copy the child's log to ours so it's more visible.
-            for line in file(errorLogFile):
+            for line in filepath.FilePath(errorLogFile).open():
                 log.msg("Child logged: " + line.rstrip())
 
             self.failIfIn(1, p.data)
@@ -260,12 +260,11 @@
 
 
     def _junkPath(self):
-        junkPath = self.mktemp()
-        junkFile = file(junkPath, 'w')
-        for i in xrange(1024):
-            junkFile.write(str(i) + '\n')
-        junkFile.close()
-        return junkPath
+        junkPath = filepath.FilePath(self.mktemp())
+        with junkPath.open('w') as junkFile:
+            for i in xrange(1024):
+                junkFile.write(str(i) + '\n')
+        return junkPath.path
 
 
     def test_producer(self):
@@ -309,7 +308,8 @@
         self._spawnProcess(p, 'stdio_test_consumer.py', junkPath)
 
         def processEnded(reason):
-            self.assertEqual(p.data[1], file(junkPath).read())
+            self.assertEqual(p.data[1],
+                             filepath.FilePath(junkPath).open().read())
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
 
Index: twisted/test/test_threads.py
===================================================================
--- twisted/test/test_threads.py	(revision 34957)
+++ twisted/test/test_threads.py	(working copy)
@@ -11,7 +11,7 @@
 from twisted.trial import unittest
 
 from twisted.internet import reactor, defer, interfaces, threads, protocol, error
-from twisted.python import failure, threadable, log, threadpool
+from twisted.python import failure, threadable, log, threadpool, filepath
 
 
 
@@ -371,11 +371,11 @@
     """
 
 
-    def testCallBeforeStartupUnexecuted(self):
+    def test_callBeforeStartupUnexecuted(self):
         progname = self.mktemp()
-        progfile = file(progname, 'w')
-        progfile.write(_callBeforeStartupProgram % {'reactor': reactor.__module__})
-        progfile.close()
+        with filepath.FilePath(progname).open('w') as progfile:
+            progfile.write(_callBeforeStartupProgram % {
+                'reactor': reactor.__module__})
 
         def programFinished((out, err, reason)):
             if reason.check(error.ProcessTerminated):
Index: twisted/test/test_ssl.py
===================================================================
--- twisted/test/test_ssl.py	(revision 34957)
+++ twisted/test/test_ssl.py	(working copy)
@@ -11,6 +11,7 @@
 from twisted.protocols import basic
 from twisted.python import util
 from twisted.python.runtime import platform
+from twisted.python.filepath import FilePath
 from twisted.test.test_tcp import ProperlyCloseFilesMixin
 
 import os, errno
@@ -216,9 +217,8 @@
         ('req', req, crypto.dump_certificate_request),
         ('cert', cert, crypto.dump_certificate)]:
         fName = os.extsep.join((basename, ext))
-        fObj = file(fName, 'w')
-        fObj.write(dumpFunc(crypto.FILETYPE_PEM, obj))
-        fObj.close()
+        with FilePath(fName).open('w') as fObj:
+            fObj.write(dumpFunc(crypto.FILETYPE_PEM, obj))
 
 
 
Index: twisted/test/test_pb.py
===================================================================
--- twisted/test/test_pb.py	(revision 34957)
+++ twisted/test/test_pb.py	(working copy)
@@ -23,6 +23,7 @@
 from twisted.internet.defer import Deferred, gatherResults, succeed
 from twisted.protocols.policies import WrappingFactory
 from twisted.python import failure, log
+from twisted.python.filepath import FilePath
 from twisted.cred.error import UnauthorizedLogin, UnhandledCredentials
 from twisted.cred import portal, checkers, credentials
 
@@ -826,7 +827,7 @@
         self.callback, self.args, self.kw = callback, args, kw
 
     def remote_getPages(self, collector):
-        self.pager = util.FilePager(collector, file(self.filename),
+        self.pager = util.FilePager(collector, FilePath(self.filename).open(),
                                     self.callback, *self.args, **self.kw)
         self.args = self.kw = None
 
@@ -842,9 +843,8 @@
         Create a file used to test L{util.FilePager}.
         """
         self.filename = self.mktemp()
-        fd = file(self.filename, 'w')
-        fd.write(bigString)
-        fd.close()
+        with FilePath(self.filename).open('w') as fd:
+            fd.write(bigString)
 
 
     def test_pagingWithCallback(self):
@@ -887,7 +887,7 @@
         Test L{util.FilePager}, sending an empty file.
         """
         filenameEmpty = self.mktemp()
-        fd = file(filenameEmpty, 'w')
+        fd = FilePath(filenameEmpty).open('w')
         fd.close()
         c, s, pump = connectedServerAndClient()
         pagerizer = FilePagerizer(filenameEmpty, None)
Index: twisted/test/test_fdesc.py
===================================================================
--- twisted/test/test_fdesc.py	(revision 34957)
+++ twisted/test/test_fdesc.py	(working copy)
@@ -16,6 +16,7 @@
     from twisted.internet import fdesc
 
 from twisted.python.util import untilConcludes
+from twisted.python.filepath import FilePath
 from twisted.trial import unittest
 
 
@@ -215,7 +216,7 @@
         by a new process image created with one of the exec family of
         functions.
         """
-        fObj = file(self.mktemp(), 'w')
+        fObj = FilePath(self.mktemp()).open('w')
         fdesc._setCloseOnExec(fObj.fileno())
         status = self._execWithFileDescriptor(fObj)
         self.assertTrue(os.WIFEXITED(status))
@@ -227,7 +228,7 @@
         A file descriptor passed to L{fdesc._unsetCloseOnExec} is inherited by
         a new process image created with one of the exec family of functions.
         """
-        fObj = file(self.mktemp(), 'w')
+        fObj = FilePath(self.mktemp()).open('w')
         fdesc._setCloseOnExec(fObj.fileno())
         fdesc._unsetCloseOnExec(fObj.fileno())
         status = self._execWithFileDescriptor(fObj)
Index: twisted/test/test_rebuild.py
===================================================================
--- twisted/test/test_rebuild.py	(revision 34957)
+++ twisted/test/test_rebuild.py	(working copy)
@@ -7,6 +7,7 @@
 
 from twisted.trial import unittest
 from twisted.python import rebuild
+from twisted.python.filepath import FilePath
 
 import crash_test_dummy
 f = crash_test_dummy.foo
@@ -45,12 +46,14 @@
         os.mkdir(self.libPath)
         self.fakelibPath = os.path.join(self.libPath, 'twisted_rebuild_fakelib')
         os.mkdir(self.fakelibPath)
-        file(os.path.join(self.fakelibPath, '__init__.py'), 'w').close()
+        FilePath(self.fakelibPath).child('__init__.py').setContent('')
         sys.path.insert(0, self.libPath)
 
+
     def tearDown(self):
         sys.path.remove(self.libPath)
 
+
     def testFileRebuild(self):
         from twisted.python.util import sibpath
         import shutil, time
Index: twisted/test/test_iutils.py
===================================================================
--- twisted/test/test_iutils.py	(revision 34957)
+++ twisted/test/test_iutils.py	(working copy)
@@ -8,6 +8,7 @@
 import warnings, os, stat, sys, signal
 
 from twisted.python.runtime import platform
+from twisted.python.filepath import FilePath
 from twisted.trial import unittest
 from twisted.internet import error, reactor, utils, interfaces
 
@@ -30,11 +31,10 @@
         Write the given list of lines to a text file and return the absolute
         path to it.
         """
-        script = self.mktemp()
-        scriptFile = file(script, 'wt')
-        scriptFile.write(os.linesep.join(sourceLines) + os.linesep)
-        scriptFile.close()
-        return os.path.abspath(script)
+        script = FilePath(self.mktemp())
+        with script.open('wt') as scriptFile:
+            scriptFile.write(os.linesep.join(sourceLines) + os.linesep)
+        return script.path
 
 
     def test_output(self):
Index: twisted/test/test_sob.py
===================================================================
--- twisted/test/test_sob.py	(revision 34957)
+++ twisted/test/test_sob.py	(working copy)
@@ -12,23 +12,28 @@
 from twisted.trial import unittest
 from twisted.persisted import sob
 from twisted.python import components
+from twisted.python.filepath import FilePath
+
 
 class Dummy(components.Componentized):
     pass
 
 objects = [
-1,
-"hello",
-(1, "hello"),
-[1, "hello"],
-{1:"hello"},
+    1,
+    "hello",
+    (1, "hello"),
+    [1, "hello"],
+    {1:"hello"},
 ]
 
+
 class FakeModule(object):
     pass
 
+
+
 class PersistTestCase(unittest.TestCase):
-    def testStyles(self):
+    def test_styles(self):
         for o in objects:
             p = sob.Persistent(o, '')
             for style in 'source pickle'.split():
@@ -37,7 +42,7 @@
                 o1 = sob.load('persisttest.'+style, style)
                 self.assertEqual(o, o1)
 
-    def testStylesBeingSet(self):
+    def test_stylesBeingSet(self):
         o = Dummy()
         o.foo = 5
         o.setComponent(sob.IPersistable, sob.Persistent(o, 'lala'))
@@ -49,7 +54,7 @@
             self.assertEqual(sob.IPersistable(o1).style, style)
 
 
-    def testNames(self):
+    def test_names(self):
         o = [1,2,3]
         p = sob.Persistent(o, 'object')
         for style in 'source pickle'.split():
@@ -62,7 +67,7 @@
                 o1 = sob.load('object-'+tag+'.ta'+style[0], style)
                 self.assertEqual(o, o1)
       
-    def testEncryptedStyles(self):
+    def test_encryptedStyles(self):
         for o in objects:
             phrase='once I was the king of spain'
             p = sob.Persistent(o, '')
@@ -74,25 +79,26 @@
     if Crypto is None:
         testEncryptedStyles.skip = "PyCrypto required for encrypted config"
 
-    def testPython(self):
-        f = open("persisttest.python", 'w')
-        f.write('foo=[1,2,3] ')
-        f.close()
+
+    def test_python(self):
+        with FilePath("persisttest.python").open('w') as f:
+            f.write('foo=[1,2,3] ')
         o = sob.loadValueFromFile('persisttest.python', 'foo')
         self.assertEqual(o, [1,2,3])
 
-    def testEncryptedPython(self):
+
+    def test_encryptedPython(self):
         phrase='once I was the king of spain'
-        f = open("epersisttest.python", 'w')
-        f.write(
-            sob._encrypt(phrase, 'foo=[1,2,3]'))
-        f.close()
+        with FilePath("epersisttest.python").open('w') as f:
+            f.write(
+                sob._encrypt(phrase, 'foo=[1,2,3]'))
         o = sob.loadValueFromFile('epersisttest.python', 'foo', phrase)
         self.assertEqual(o, [1,2,3])
     if Crypto is None:
         testEncryptedPython.skip = "PyCrypto required for encrypted config"
 
-    def testTypeGuesser(self):
+
+    def test_typeGuesser(self):
         self.assertRaises(KeyError, sob.guessType, "file.blah")
         self.assertEqual('python', sob.guessType("file.py"))
         self.assertEqual('python', sob.guessType("file.tac"))
@@ -102,7 +108,8 @@
         self.assertEqual('source', sob.guessType("file.tas"))
         self.assertEqual('source', sob.guessType("file.etas"))
 
-    def testEverythingEphemeralGetattr(self):
+
+    def test_everythingEphemeralGetattr(self):
         """
         Verify that _EverythingEphermal.__getattr__ works.
         """
@@ -110,18 +117,17 @@
 
         dirname = self.mktemp()
         os.mkdir(dirname)
-
         filename = os.path.join(dirname, 'persisttest.ee_getattr')
 
-        f = file(filename, 'w')
-        f.write('import __main__\n')
-        f.write('if __main__.testMainModGetattr != 1: raise AssertionError\n')
-        f.write('app = None\n')
-        f.close()
+        with FilePath(filename).open('w') as f:
+            f.write('import __main__\n')
+            f.write('if __main__.testMainModGetattr != 1: raise AssertionError\n')
+            f.write('app = None\n')
 
         sob.load(filename, 'source')
 
-    def testEverythingEphemeralSetattr(self):
+
+    def test_everythingEphemeralSetattr(self):
         """
         Verify that _EverythingEphemeral.__setattr__ won't affect __main__.
         """
@@ -129,19 +135,19 @@
 
         dirname = self.mktemp()
         os.mkdir(dirname)
-
         filename = os.path.join(dirname, 'persisttest.ee_setattr')
-        f = file(filename, 'w')
-        f.write('import __main__\n')
-        f.write('__main__.testMainModSetattr = 2\n')
-        f.write('app = None\n')
-        f.close()
+
+        with FilePath(filename).open('w') as f:
+            f.write('import __main__\n')
+            f.write('__main__.testMainModSetattr = 2\n')
+            f.write('app = None\n')
 
         sob.load(filename, 'source')
 
         self.assertEqual(self.fakeMain.testMainModSetattr, 1)
 
-    def testEverythingEphemeralException(self):
+
+    def test_everythingEphemeralException(self):
         """
         Test that an exception during load() won't cause _EE to mask __main__
         """
@@ -149,9 +155,8 @@
         os.mkdir(dirname)
         filename = os.path.join(dirname, 'persisttest.ee_exception')
 
-        f = file(filename, 'w')
-        f.write('raise ValueError\n')
-        f.close()
+        with FilePath(filename).open('w') as f:
+            f.write('raise ValueError\n')
 
         self.assertRaises(ValueError, sob.load, filename, 'source')
         self.assertEqual(type(sys.modules['__main__']), FakeModule)
Index: twisted/test/test_twistd.py
===================================================================
--- twisted/test/test_twistd.py	(revision 34957)
+++ twisted/test/test_twistd.py	(working copy)
@@ -30,13 +30,13 @@
 from twisted.application import service, app, reactors
 from twisted.scripts import twistd
 from twisted.python import log
+from twisted.python.filepath import FilePath
 from twisted.python.usage import UsageError
 from twisted.python.log import ILogObserver
-from twisted.python.versions import Version
 from twisted.python.components import Componentized
+from twisted.python.fakepwd import UserDatabase
 from twisted.internet.defer import Deferred
 from twisted.internet.interfaces import IReactorDaemonize
-from twisted.python.fakepwd import UserDatabase
 
 try:
     from twisted.python import syslog
@@ -355,9 +355,8 @@
         Create a trivial Application and put it in a tap file on disk.
         """
         self.tapfile = self.mktemp()
-        f = file(self.tapfile, 'wb')
-        pickle.dump(service.Application("Hi!"), f)
-        f.close()
+        with FilePath(self.tapfile).open('wb') as f:
+            pickle.dump(service.Application("Hi!"), f)
 
 
     def test_createOrGetApplicationWithTapFile(self):
@@ -679,9 +678,8 @@
         """
         pidfile = self.mktemp()
         self.runner.setupEnvironment(None, ".", True, None, pidfile)
-        fObj = file(pidfile)
-        pid = int(fObj.read())
-        fObj.close()
+        with FilePath(pidfile).open() as fObj:
+            pid = int(fObj.read())
         self.assertEqual(pid, self.pid)
 
 
@@ -693,9 +691,8 @@
         """
         pidfile = self.mktemp()
         self.runner.setupEnvironment(None, ".", False, None, pidfile)
-        fObj = file(pidfile)
-        pid = int(fObj.read())
-        fObj.close()
+        with FilePath(pidfile).open() as fObj:
+            pid = int(fObj.read())
         self.assertEqual(pid, self.pid + 1)
 
 
@@ -790,7 +787,7 @@
         path = self.mktemp()
         os.makedirs(path)
         pidfile = os.path.join(path, "foo.pid")
-        file(pidfile, "w").close()
+        FilePath(pidfile).open("w").close()
         runner.removePID(pidfile)
         self.assertFalse(os.path.exists(pidfile))
 
@@ -917,7 +914,7 @@
         profiler.run(reactor)
 
         self.assertTrue(reactor.called)
-        data = file(config["profile"]).read()
+        data = FilePath(config["profile"]).getContent()
         self.assertIn("DummyReactor.run", data)
         self.assertIn("function calls", data)
 
@@ -1021,7 +1018,7 @@
         profiler.run(reactor)
 
         self.assertTrue(reactor.called)
-        data = file(config["profile"]).read()
+        data = FilePath(config["profile"]).getContent()
         self.assertIn("run", data)
         self.assertIn("function calls", data)
 
@@ -1106,7 +1103,7 @@
         profiler.run(reactor)
 
         self.assertTrue(reactor.called)
-        data = file(config["profile"]).read()
+        data = FilePath(config["profile"]).getContent()
         self.assertIn("run", data)
         self.assertIn("function calls", data)
 
Index: twisted/test/test_logfile.py
===================================================================
--- twisted/test/test_logfile.py	(revision 34957)
+++ twisted/test/test_logfile.py	(working copy)
@@ -5,6 +5,7 @@
 
 from twisted.trial import unittest
 from twisted.python import logfile, runtime
+from twisted.python.filepath import FilePath
 
 
 class LogFileTestCase(unittest.TestCase):
@@ -13,10 +14,10 @@
     """
 
     def setUp(self):
-        self.dir = self.mktemp()
-        os.makedirs(self.dir)
+        self.dir = FilePath(self.mktemp())
+        self.dir.makedirs()
         self.name = "test.log"
-        self.path = os.path.join(self.dir, self.name)
+        self.path = self.dir.child(self.name).path
 
 
     def tearDown(self):
@@ -24,54 +25,56 @@
         Restore back write rights on created paths: if tests modified the
         rights, that will allow the paths to be removed easily afterwards.
         """
-        os.chmod(self.dir, 0777)
+        self.dir.chmod(0777)
         if os.path.exists(self.path):
             os.chmod(self.path, 0777)
 
 
-    def testWriting(self):
-        log = logfile.LogFile(self.name, self.dir)
+    def test_writing(self):
+        log = logfile.LogFile(self.name, self.dir.path)
         log.write("123")
         log.write("456")
         log.flush()
         log.write("7890")
         log.close()
 
-        f = open(self.path, "r")
+        f = FilePath(self.path).open()
         self.assertEqual(f.read(), "1234567890")
         f.close()
 
-    def testRotation(self):
+
+    def test_rotation(self):
         # this logfile should rotate every 10 bytes
-        log = logfile.LogFile(self.name, self.dir, rotateLength=10)
+        log = logfile.LogFile(self.name, self.dir.path, rotateLength=10)
 
         # test automatic rotation
         log.write("123")
         log.write("4567890")
         log.write("1" * 11)
-        self.assert_(os.path.exists("%s.1" % self.path))
-        self.assert_(not os.path.exists("%s.2" % self.path))
+        self.assert_(FilePath("%s.1" % self.path).exists())
+        self.assert_(not FilePath("%s.2" % self.path).exists())
         log.write('')
-        self.assert_(os.path.exists("%s.1" % self.path))
-        self.assert_(os.path.exists("%s.2" % self.path))
-        self.assert_(not os.path.exists("%s.3" % self.path))
+        self.assert_(FilePath("%s.1" % self.path).exists())
+        self.assert_(FilePath("%s.2" % self.path).exists())
+        self.assert_(not FilePath("%s.3" % self.path).exists())
         log.write("3")
-        self.assert_(not os.path.exists("%s.3" % self.path))
+        self.assert_(not FilePath("%s.3" % self.path).exists())
 
         # test manual rotation
         log.rotate()
-        self.assert_(os.path.exists("%s.3" % self.path))
-        self.assert_(not os.path.exists("%s.4" % self.path))
+        self.assert_(FilePath("%s.3" % self.path).exists())
+        self.assert_(not FilePath("%s.4" % self.path).exists())
         log.close()
 
         self.assertEqual(log.listLogs(), [1, 2, 3])
 
-    def testAppend(self):
-        log = logfile.LogFile(self.name, self.dir)
+
+    def test_append(self):
+        log = logfile.LogFile(self.name, self.dir.path)
         log.write("0123456789")
         log.close()
 
-        log = logfile.LogFile(self.name, self.dir)
+        log = logfile.LogFile(self.name, self.dir.path)
         self.assertEqual(log.size, 10)
         self.assertEqual(log._file.tell(), log.size)
         log.write("abc")
@@ -82,8 +85,9 @@
         self.assertEqual(f.read(), "0123456789abc")
         log.close()
 
-    def testLogReader(self):
-        log = logfile.LogFile(self.name, self.dir)
+
+    def test_logReader(self):
+        log = logfile.LogFile(self.name, self.dir.path)
         log.write("abc\n")
         log.write("def\n")
         log.rotate()
@@ -119,14 +123,16 @@
         self.assertEqual(reader.readLines(), [])
         reader.close()
 
-    def testModePreservation(self):
+
+    def test_modePreservation(self):
         """
         Check rotated files have same permissions as original.
         """
-        f = open(self.path, "w").close()
-        os.chmod(self.path, 0707)
+        f = FilePath(self.path)
+        f.setContent('')
+        f.chmod(0707)
         mode = os.stat(self.path)[stat.ST_MODE]
-        log = logfile.LogFile(self.name, self.dir)
+        log = logfile.LogFile(self.name, self.dir.path)
         log.write("abc")
         log.rotate()
         self.assertEqual(mode, os.stat(self.path)[stat.ST_MODE])
@@ -136,16 +142,16 @@
         """
         Check it keeps working when permission on dir changes.
         """
-        log = logfile.LogFile(self.name, self.dir)
+        log = logfile.LogFile(self.name, self.dir.path)
         log.write("abc")
 
         # change permissions so rotation would fail
-        os.chmod(self.dir, 0555)
+        self.dir.chmod(0555)
 
         # if this succeeds, chmod doesn't restrict us, so we can't
         # do the test
         try:
-            f = open(os.path.join(self.dir,"xxx"), "w")
+            f = self.dir.child("xxx").open("w")
         except (OSError, IOError):
             pass
         else:
@@ -169,44 +175,46 @@
         Test it respect the limit on the number of files when maxRotatedFiles
         is not None.
         """
-        log = logfile.LogFile(self.name, self.dir, rotateLength=10,
+        log = logfile.LogFile(self.name, self.dir.path, rotateLength=10,
                               maxRotatedFiles=3)
         log.write("1" * 11)
         log.write("2" * 11)
-        self.failUnless(os.path.exists("%s.1" % self.path))
+        self.failUnless(FilePath("%s.1" % self.path).exists())
 
         log.write("3" * 11)
-        self.failUnless(os.path.exists("%s.2" % self.path))
+        self.failUnless(FilePath("%s.2" % self.path).exists())
 
         log.write("4" * 11)
-        self.failUnless(os.path.exists("%s.3" % self.path))
-        self.assertEqual(file("%s.3" % self.path).read(), "1" * 11)
+        self.failUnless(FilePath("%s.3" % self.path).exists())
+        self.assertEqual(FilePath("%s.3" % self.path).getContent(), "1" * 11)
 
         log.write("5" * 11)
-        self.assertEqual(file("%s.3" % self.path).read(), "2" * 11)
-        self.failUnless(not os.path.exists("%s.4" % self.path))
+        self.assertEqual(FilePath("%s.3" % self.path).getContent(), "2" * 11)
+        self.failUnless(not FilePath("%s.4" % self.path).exists())
+
 
     def test_fromFullPath(self):
         """
         Test the fromFullPath method.
         """
-        log1 = logfile.LogFile(self.name, self.dir, 10, defaultMode=0777)
+        log1 = logfile.LogFile(self.name, self.dir.path, 10, defaultMode=0777)
         log2 = logfile.LogFile.fromFullPath(self.path, 10, defaultMode=0777)
         self.assertEqual(log1.name, log2.name)
         self.assertEqual(os.path.abspath(log1.path), log2.path)
         self.assertEqual(log1.rotateLength, log2.rotateLength)
         self.assertEqual(log1.defaultMode, log2.defaultMode)
 
+
     def test_defaultPermissions(self):
         """
         Test the default permission of the log file: if the file exist, it
         should keep the permission.
         """
-        f = file(self.path, "w")
-        os.chmod(self.path, 0707)
+        f = FilePath(self.path)
+        f.setContent('')
+        f.chmod(0707)
         currentMode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
-        f.close()
-        log1 = logfile.LogFile(self.name, self.dir)
+        log1 = logfile.LogFile(self.name, self.dir.path)
         self.assertEqual(stat.S_IMODE(os.stat(self.path)[stat.ST_MODE]),
                           currentMode)
 
@@ -215,7 +223,7 @@
         """
         Test specifying the permissions used on the log file.
         """
-        log1 = logfile.LogFile(self.name, self.dir, defaultMode=0066)
+        log1 = logfile.LogFile(self.name, self.dir.path, defaultMode=0066)
         mode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
         if runtime.platform.isWindows():
             # The only thing we can get here is global read-only
@@ -229,18 +237,18 @@
         L{logfile.LogFile.reopen} allows to rename the currently used file and
         make L{logfile.LogFile} create a new file.
         """
-        log1 = logfile.LogFile(self.name, self.dir)
+        log1 = logfile.LogFile(self.name, self.dir.path)
         log1.write("hello1")
-        savePath = os.path.join(self.dir, "save.log")
-        os.rename(self.path, savePath)
+        savePath = self.dir.child("save.log")
+        os.rename(self.path, savePath.path)
         log1.reopen()
         log1.write("hello2")
         log1.close()
 
-        f = open(self.path, "r")
+        f = FilePath(self.path).open()
         self.assertEqual(f.read(), "hello2")
         f.close()
-        f = open(savePath, "r")
+        f = savePath.open()
         self.assertEqual(f.read(), "hello1")
         f.close()
 
@@ -271,33 +279,36 @@
             return time.gmtime(*args)[:3]
         return time.gmtime(self._clock)[:3]
 
+
+
 class DailyLogFileTestCase(unittest.TestCase):
     """
     Test rotating log file.
     """
 
     def setUp(self):
-        self.dir = self.mktemp()
-        os.makedirs(self.dir)
+        self.dir = FilePath(self.mktemp())
+        self.dir.makedirs()
         self.name = "testdaily.log"
-        self.path = os.path.join(self.dir, self.name)
+        self.path = self.dir.child(self.name).path
 
 
-    def testWriting(self):
-        log = RiggedDailyLogFile(self.name, self.dir)
+    def test_writing(self):
+        log = RiggedDailyLogFile(self.name, self.dir.path)
         log.write("123")
         log.write("456")
         log.flush()
         log.write("7890")
         log.close()
 
-        f = open(self.path, "r")
+        f = FilePath(self.path).open()
         self.assertEqual(f.read(), "1234567890")
         f.close()
 
-    def testRotation(self):
+
+    def test_rotation(self):
         # this logfile should rotate every 10 bytes
-        log = RiggedDailyLogFile(self.name, self.dir)
+        log = RiggedDailyLogFile(self.name, self.dir.path)
         days = [(self.path + '.' + log.suffix(day * 86400)) for day in range(3)]
 
         # test automatic rotation
@@ -307,14 +318,14 @@
         log.write("4567890")
         log._clock = 86400  # 1970/01/02 00:00.00
         log.write("1" * 11)
-        self.assert_(os.path.exists(days[0]))
-        self.assert_(not os.path.exists(days[1]))
+        self.assert_(FilePath(days[0]).exists())
+        self.assert_(not FilePath(days[1]).exists())
         log._clock = 172800 # 1970/01/03 00:00.00
         log.write('')
-        self.assert_(os.path.exists(days[0]))
-        self.assert_(os.path.exists(days[1]))
-        self.assert_(not os.path.exists(days[2]))
+        self.assert_(FilePath(days[0]).exists())
+        self.assert_(FilePath(days[1]).exists())
+        self.assert_(not FilePath(days[2]).exists())
         log._clock = 259199 # 1970/01/03 23:59.59
         log.write("3")
-        self.assert_(not os.path.exists(days[2]))
+        self.assert_(not FilePath(days[2]).exists())
 
Index: twisted/test/test_ftp.py
===================================================================
--- twisted/test/test_ftp.py	(revision 34957)
+++ twisted/test/test_ftp.py	(working copy)
@@ -623,15 +623,15 @@
             self.assertEqual('', download)
         return d.addCallback(checkDownload)
 
-    def testManyLargeDownloads(self):
+
+    def test_manyLargeDownloads(self):
         # Login
         d = self._anonymousLogin()
 
         # Download a range of different size files
         for size in range(100000, 110000, 500):
-            fObj = file(os.path.join(self.directory, '%d.txt' % (size,)), 'wb')
-            fObj.write('x' * size)
-            fObj.close()
+            with self.dirPath.child('%d.txt' % (size,)).open('wb') as fObj:
+                fObj.write('x' * size)
 
             self._download('RETR %d.txt' % (size,), chainDeferred=d)
             def checkDownload(download, size=size):
