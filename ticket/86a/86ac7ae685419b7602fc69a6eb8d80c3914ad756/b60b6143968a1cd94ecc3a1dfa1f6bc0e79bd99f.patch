Index: twisted/test/test_twistd.py
===================================================================
--- twisted/test/test_twistd.py	(revision 34957)
+++ twisted/test/test_twistd.py	(working copy)
@@ -355,9 +355,8 @@
         Create a trivial Application and put it in a tap file on disk.
         """
         self.tapfile = self.mktemp()
-        f = file(self.tapfile, 'wb')
-        pickle.dump(service.Application("Hi!"), f)
-        f.close()
+        with open(self.tapfile, 'wb') as f:
+            pickle.dump(service.Application("Hi!"), f)
 
 
     def test_createOrGetApplicationWithTapFile(self):
@@ -679,9 +678,8 @@
         """
         pidfile = self.mktemp()
         self.runner.setupEnvironment(None, ".", True, None, pidfile)
-        fObj = file(pidfile)
-        pid = int(fObj.read())
-        fObj.close()
+        with open(pidfile) as fObj:
+            pid = int(fObj.read())
         self.assertEqual(pid, self.pid)
 
 
@@ -693,9 +691,8 @@
         """
         pidfile = self.mktemp()
         self.runner.setupEnvironment(None, ".", False, None, pidfile)
-        fObj = file(pidfile)
-        pid = int(fObj.read())
-        fObj.close()
+        with open(pidfile) as fObj:
+            pid = int(fObj.read())
         self.assertEqual(pid, self.pid + 1)
 
 
@@ -790,7 +787,7 @@
         path = self.mktemp()
         os.makedirs(path)
         pidfile = os.path.join(path, "foo.pid")
-        file(pidfile, "w").close()
+        open(pidfile, "w").close()
         runner.removePID(pidfile)
         self.assertFalse(os.path.exists(pidfile))
 
@@ -917,7 +914,7 @@
         profiler.run(reactor)
 
         self.assertTrue(reactor.called)
-        data = file(config["profile"]).read()
+        data = open(config["profile"]).read()
         self.assertIn("DummyReactor.run", data)
         self.assertIn("function calls", data)
 
@@ -1021,7 +1018,7 @@
         profiler.run(reactor)
 
         self.assertTrue(reactor.called)
-        data = file(config["profile"]).read()
+        data = open(config["profile"]).read()
         self.assertIn("run", data)
         self.assertIn("function calls", data)
 
@@ -1106,7 +1103,7 @@
         profiler.run(reactor)
 
         self.assertTrue(reactor.called)
-        data = file(config["profile"]).read()
+        data = open(config["profile"]).read()
         self.assertIn("run", data)
         self.assertIn("function calls", data)
 
Index: twisted/test/test_stdio.py
===================================================================
--- twisted/test/test_stdio.py	(revision 34957)
+++ twisted/test/test_stdio.py	(working copy)
@@ -137,7 +137,7 @@
 
         def processEnded(reason):
             # Copy the child's log to ours so it's more visible.
-            for line in file(errorLogFile):
+            for line in open(errorLogFile):
                 log.msg("Child logged: " + line.rstrip())
 
             self.failIfIn(1, p.data)
@@ -261,10 +261,9 @@
 
     def _junkPath(self):
         junkPath = self.mktemp()
-        junkFile = file(junkPath, 'w')
-        for i in xrange(1024):
-            junkFile.write(str(i) + '\n')
-        junkFile.close()
+        with open(junkPath, 'w') as junkFile:
+            for i in xrange(1024):
+                junkFile.write(str(i) + '\n')
         return junkPath
 
 
@@ -309,7 +308,7 @@
         self._spawnProcess(p, 'stdio_test_consumer.py', junkPath)
 
         def processEnded(reason):
-            self.assertEqual(p.data[1], file(junkPath).read())
+            self.assertEqual(p.data[1], open(junkPath).read())
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
 
Index: twisted/test/test_sob.py
===================================================================
--- twisted/test/test_sob.py	(revision 34957)
+++ twisted/test/test_sob.py	(working copy)
@@ -17,11 +17,11 @@
     pass
 
 objects = [
-1,
-"hello",
-(1, "hello"),
-[1, "hello"],
-{1:"hello"},
+    1,
+    "hello",
+    (1, "hello"),
+    [1, "hello"],
+    {1:"hello"},
 ]
 
 class FakeModule(object):
@@ -113,11 +113,10 @@
 
         filename = os.path.join(dirname, 'persisttest.ee_getattr')
 
-        f = file(filename, 'w')
-        f.write('import __main__\n')
-        f.write('if __main__.testMainModGetattr != 1: raise AssertionError\n')
-        f.write('app = None\n')
-        f.close()
+        with open(filename, 'w') as f:
+            f.write('import __main__\n')
+            f.write('if __main__.testMainModGetattr != 1: raise AssertionError\n')
+            f.write('app = None\n')
 
         sob.load(filename, 'source')
 
@@ -131,11 +130,10 @@
         os.mkdir(dirname)
 
         filename = os.path.join(dirname, 'persisttest.ee_setattr')
-        f = file(filename, 'w')
-        f.write('import __main__\n')
-        f.write('__main__.testMainModSetattr = 2\n')
-        f.write('app = None\n')
-        f.close()
+        with open(filename, 'w') as f:
+            f.write('import __main__\n')
+            f.write('__main__.testMainModSetattr = 2\n')
+            f.write('app = None\n')
 
         sob.load(filename, 'source')
 
@@ -149,9 +147,8 @@
         os.mkdir(dirname)
         filename = os.path.join(dirname, 'persisttest.ee_exception')
 
-        f = file(filename, 'w')
-        f.write('raise ValueError\n')
-        f.close()
+        with open(filename, 'w') as f:
+            f.write('raise ValueError\n')
 
         self.assertRaises(ValueError, sob.load, filename, 'source')
         self.assertEqual(type(sys.modules['__main__']), FakeModule)
Index: twisted/test/test_logfile.py
===================================================================
--- twisted/test/test_logfile.py	(revision 34957)
+++ twisted/test/test_logfile.py	(working copy)
@@ -202,7 +202,7 @@
         Test the default permission of the log file: if the file exist, it
         should keep the permission.
         """
-        f = file(self.path, "w")
+        f = open(self.path, "w")
         os.chmod(self.path, 0707)
         currentMode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
         f.close()
Index: twisted/test/test_fdesc.py
===================================================================
--- twisted/test/test_fdesc.py	(revision 34957)
+++ twisted/test/test_fdesc.py	(working copy)
@@ -215,7 +215,7 @@
         by a new process image created with one of the exec family of
         functions.
         """
-        fObj = file(self.mktemp(), 'w')
+        fObj = open(self.mktemp(), 'w')
         fdesc._setCloseOnExec(fObj.fileno())
         status = self._execWithFileDescriptor(fObj)
         self.assertTrue(os.WIFEXITED(status))
@@ -227,7 +227,7 @@
         A file descriptor passed to L{fdesc._unsetCloseOnExec} is inherited by
         a new process image created with one of the exec family of functions.
         """
-        fObj = file(self.mktemp(), 'w')
+        fObj = open(self.mktemp(), 'w')
         fdesc._setCloseOnExec(fObj.fileno())
         fdesc._unsetCloseOnExec(fObj.fileno())
         status = self._execWithFileDescriptor(fObj)
Index: twisted/test/test_ftp.py
===================================================================
--- twisted/test/test_ftp.py	(revision 34957)
+++ twisted/test/test_ftp.py	(working copy)
@@ -623,15 +623,16 @@
             self.assertEqual('', download)
         return d.addCallback(checkDownload)
 
-    def testManyLargeDownloads(self):
+
+    def test_manyLargeDownloads(self):
         # Login
         d = self._anonymousLogin()
 
         # Download a range of different size files
         for size in range(100000, 110000, 500):
-            fObj = file(os.path.join(self.directory, '%d.txt' % (size,)), 'wb')
-            fObj.write('x' * size)
-            fObj.close()
+            path = os.path.join(self.directory, '%d.txt' % (size,))
+            with open(path, 'wb') as fObj:
+                fObj.write('x' * size)
 
             self._download('RETR %d.txt' % (size,), chainDeferred=d)
             def checkDownload(download, size=size):
Index: twisted/test/test_pb.py
===================================================================
--- twisted/test/test_pb.py	(revision 34957)
+++ twisted/test/test_pb.py	(working copy)
@@ -826,7 +826,7 @@
         self.callback, self.args, self.kw = callback, args, kw
 
     def remote_getPages(self, collector):
-        self.pager = util.FilePager(collector, file(self.filename),
+        self.pager = util.FilePager(collector, open(self.filename),
                                     self.callback, *self.args, **self.kw)
         self.args = self.kw = None
 
@@ -842,9 +842,8 @@
         Create a file used to test L{util.FilePager}.
         """
         self.filename = self.mktemp()
-        fd = file(self.filename, 'w')
-        fd.write(bigString)
-        fd.close()
+        with open(self.filename, 'w') as fd:
+            fd.write(bigString)
 
 
     def test_pagingWithCallback(self):
@@ -887,7 +886,7 @@
         Test L{util.FilePager}, sending an empty file.
         """
         filenameEmpty = self.mktemp()
-        fd = file(filenameEmpty, 'w')
+        fd = open(filenameEmpty, 'w')
         fd.close()
         c, s, pump = connectedServerAndClient()
         pagerizer = FilePagerizer(filenameEmpty, None)
Index: twisted/test/test_strcred.py
===================================================================
--- twisted/test/test_strcred.py	(revision 34957)
+++ twisted/test/test_strcred.py	(working copy)
@@ -528,7 +528,7 @@
 
     def setUp(self):
         self.filename = self.mktemp()
-        file(self.filename, 'w').write('admin:asdf\nalice:foo\n')
+        open(self.filename, 'w').write('admin:asdf\nalice:foo\n')
         self.goodChecker = checkers.FilePasswordDB(self.filename)
         self.badChecker = checkers.FilePasswordDB(
             self.filename, hash=self._hash)
Index: twisted/test/test_process.py
===================================================================
--- twisted/test/test_process.py	(revision 34957)
+++ twisted/test/test_process.py	(working copy)
@@ -2379,7 +2379,7 @@
                            (j(self.bazfoo, "executable"), 0700),
                            (j(self.bazfoo, "executable.bin"), 0700),
                            (j(self.bazbar, "executable"), 0)]:
-            f = file(name, "w")
+            f = open(name, "w")
             f.close()
             os.chmod(name, mode)
 
Index: twisted/test/test_threads.py
===================================================================
--- twisted/test/test_threads.py	(revision 34957)
+++ twisted/test/test_threads.py	(working copy)
@@ -373,9 +373,8 @@
 
     def testCallBeforeStartupUnexecuted(self):
         progname = self.mktemp()
-        progfile = file(progname, 'w')
-        progfile.write(_callBeforeStartupProgram % {'reactor': reactor.__module__})
-        progfile.close()
+        with open(progname, 'w') as progfile:
+            progfile.write(_callBeforeStartupProgram % {'reactor': reactor.__module__})
 
         def programFinished((out, err, reason)):
             if reason.check(error.ProcessTerminated):
Index: twisted/test/test_ssl.py
===================================================================
--- twisted/test/test_ssl.py	(revision 34957)
+++ twisted/test/test_ssl.py	(working copy)
@@ -216,9 +216,8 @@
         ('req', req, crypto.dump_certificate_request),
         ('cert', cert, crypto.dump_certificate)]:
         fName = os.extsep.join((basename, ext))
-        fObj = file(fName, 'w')
-        fObj.write(dumpFunc(crypto.FILETYPE_PEM, obj))
-        fObj.close()
+        with open(fName, 'w') as fObj:
+            fObj.write(dumpFunc(crypto.FILETYPE_PEM, obj))
 
 
 
Index: twisted/test/test_iutils.py
===================================================================
--- twisted/test/test_iutils.py	(revision 34957)
+++ twisted/test/test_iutils.py	(working copy)
@@ -31,9 +31,8 @@
         path to it.
         """
         script = self.mktemp()
-        scriptFile = file(script, 'wt')
-        scriptFile.write(os.linesep.join(sourceLines) + os.linesep)
-        scriptFile.close()
+        with open(script, 'wt') as scriptFile:
+            scriptFile.write(os.linesep.join(sourceLines) + os.linesep)
         return os.path.abspath(script)
 
 
Index: twisted/test/test_rebuild.py
===================================================================
--- twisted/test/test_rebuild.py	(revision 34957)
+++ twisted/test/test_rebuild.py	(working copy)
@@ -45,7 +45,7 @@
         os.mkdir(self.libPath)
         self.fakelibPath = os.path.join(self.libPath, 'twisted_rebuild_fakelib')
         os.mkdir(self.fakelibPath)
-        file(os.path.join(self.fakelibPath, '__init__.py'), 'w').close()
+        open(os.path.join(self.fakelibPath, '__init__.py'), 'w').close()
         sys.path.insert(0, self.libPath)
 
     def tearDown(self):
