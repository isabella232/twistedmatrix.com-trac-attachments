diff --git twisted/conch/ssh/connection.py twisted/conch/ssh/connection.py
index 53c9cf7..2527199 100644
--- twisted/conch/ssh/connection.py
+++ twisted/conch/ssh/connection.py
@@ -235,7 +235,7 @@ class SSHConnection(service.SSHService):
             #packet = packet[:channel.localWindowLeft+4]
         data = common.getNS(packet[4:])[0]
         channel.localWindowLeft -= dataLength
-        if channel.localWindowLeft < channel.localWindowSize / 2:
+        if channel.localWindowLeft < channel.localWindowSize // 2:
             self.adjustWindow(channel, channel.localWindowSize - \
                                        channel.localWindowLeft)
             #log.msg('local window left: %s/%s' % (channel.localWindowLeft,
@@ -264,7 +264,7 @@ class SSHConnection(service.SSHService):
             return
         data = common.getNS(packet[8:])[0]
         channel.localWindowLeft -= dataLength
-        if channel.localWindowLeft < channel.localWindowSize / 2:
+        if channel.localWindowLeft < channel.localWindowSize // 2:
             self.adjustWindow(channel, channel.localWindowSize -
                                        channel.localWindowLeft)
         log.callWithLogger(channel, channel.extReceived, typeCode, data)
diff --git twisted/conch/test/test_manhole.py twisted/conch/test/test_manhole.py
index 3b31984..09dd52c 100644
--- twisted/conch/test/test_manhole.py
+++ twisted/conch/test/test_manhole.py
@@ -22,7 +22,7 @@ def determineDefaultFunctionName():
     compiled from interactive input or at the top-level of modules.
     """
     try:
-        1 / 0
+        1 // 0
     except:
         # The last frame is this function.  The second to last frame is this
         # function's caller, which is module-scope, which is what we want,
diff --git twisted/internet/test/test_posixbase.py twisted/internet/test/test_posixbase.py
index 1d6c72c..2e0c2ec 100644
--- twisted/internet/test/test_posixbase.py
+++ twisted/internet/test/test_posixbase.py
@@ -188,7 +188,7 @@ class TCPPortTests(TestCase):
         """
         port = Port(12345, ServerFactory())
         port.connected = True
-        port.connectionLost = lambda reason: 1 / 0
+        port.connectionLost = lambda reason: 1 // 0
         return self.assertFailure(port.stopListening(), ZeroDivisionError)
 
 
diff --git twisted/mail/imap4.py twisted/mail/imap4.py
index 6ca8384..1284f50 100644
--- twisted/mail/imap4.py
+++ twisted/mail/imap4.py
@@ -1919,7 +1919,7 @@ class IMAP4Server(basic.LineReceiver, policies.TimeoutMixin):
                 sign = "+"
             else:
                 sign = "-"
-            odate = odate + sign + str(((abs(ttup[9]) / 3600) * 100 + (abs(ttup[9]) % 3600) / 60)).zfill(4)
+            odate = odate + sign + str(((abs(ttup[9]) // 3600) * 100 + (abs(ttup[9]) % 3600) // 60)).zfill(4)
         _w('INTERNALDATE ' + _quote(odate))
 
     def spew_rfc822header(self, id, msg, _w=None, _f=None):
diff --git twisted/mail/smtp.py twisted/mail/smtp.py
index d872111..3b8bd0a 100644
--- twisted/mail/smtp.py
+++ twisted/mail/smtp.py
@@ -289,7 +289,7 @@ def rfc822date(timeinfo=None,local=1):
 
         (tzhr, tzmin) = divmod(abs(tz), 3600)
         if tz:
-            tzhr *= int(abs(tz)/tz)
+            tzhr *= int(abs(tz)//tz)
         (tzmin, tzsec) = divmod(tzmin, 60)
     else:
         (tzhr, tzmin) = (0,0)
diff --git twisted/python/test/test_release.py twisted/python/test/test_release.py
index 55f360e..d5bf1d5 100644
--- twisted/python/test/test_release.py
+++ twisted/python/test/test_release.py
@@ -476,7 +476,7 @@ class UtilityTest(TestCase):
         def chAndBreak():
             os.mkdir('releaseCh')
             os.chdir('releaseCh')
-            1/0
+            1//0
         self.assertRaises(ZeroDivisionError,
                           release.runChdirSafe, chAndBreak)
         self.assertEqual(cwd, os.getcwd())
diff --git twisted/test/generator_failure_tests.py twisted/test/generator_failure_tests.py
index dcc6d42..be1344f 100644
--- twisted/test/generator_failure_tests.py
+++ twisted/test/generator_failure_tests.py
@@ -4,6 +4,7 @@
 """
 Python 2.5+ test cases for failures thrown into generators.
 """
+from __future__ import division
 
 import sys
 import traceback
diff --git twisted/test/reflect_helper_ZDE.py twisted/test/reflect_helper_ZDE.py
index bd05fbc..0c53583 100644
--- twisted/test/reflect_helper_ZDE.py
+++ twisted/test/reflect_helper_ZDE.py
@@ -1,4 +1,4 @@
 
 # Helper module for a test_reflect test
 
-1/0
+1//0
diff --git twisted/test/test_amp.py twisted/test/test_amp.py
index 1f4c369..325af40 100644
--- twisted/test/test_amp.py
+++ twisted/test/test_amp.py
@@ -655,7 +655,7 @@ class CommandDispatchTests(unittest.TestCase):
         self.sender.expectError()
 
         callResult = self.dispatcher.callRemote(Hello, hello='world')
-        callResult.addCallback(lambda result: 1 / 0)
+        callResult.addCallback(lambda result: 1 // 0)
 
         self.dispatcher.ampBoxReceived(amp.AmpBox({
                     'hello': "yay", 'print': "ignored", '_answer': "1"}))
@@ -671,7 +671,7 @@ class CommandDispatchTests(unittest.TestCase):
         self.sender.expectError()
 
         callResult = self.dispatcher.callRemote(Hello, hello='world')
-        callResult.addErrback(lambda result: 1 / 0)
+        callResult.addErrback(lambda result: 1 // 0)
 
         self.dispatcher.ampBoxReceived(amp.AmpBox({
                     '_error': '1', '_error_code': 'bugs',
diff --git twisted/test/test_application.py twisted/test/test_application.py
index 7736c5b..e1ac29f 100644
--- twisted/test/test_application.py
+++ twisted/test/test_application.py
@@ -476,7 +476,7 @@ class TestInternet2(unittest.TestCase):
 
     def testBrokenTimer(self):
         d = defer.Deferred()
-        t = internet.TimerService(1, lambda: 1 / 0)
+        t = internet.TimerService(1, lambda: 1 // 0)
         oldFailed = t._failed
         def _failed(why):
             oldFailed(why)
diff --git twisted/test/test_banana.py twisted/test/test_banana.py
index 88ad2e6..c4b69de 100644
--- twisted/test/test_banana.py
+++ twisted/test/test_banana.py
@@ -111,7 +111,7 @@ class BananaTestCase(unittest.TestCase):
         self.enc.sendEncoded(smallest)
         encoded = self.io.getvalue()
         self.io.truncate(0)
-        self.enc.setPrefixLimit(self.enc.prefixLimit / 2)
+        self.enc.setPrefixLimit(self.enc.prefixLimit // 2)
 
         self.assertRaises(banana.BananaError, self.enc.dataReceived, encoded)
 
@@ -139,7 +139,7 @@ class BananaTestCase(unittest.TestCase):
         self.enc.sendEncoded(largest)
         encoded = self.io.getvalue()
         self.io.truncate(0)
-        self.enc.setPrefixLimit(self.enc.prefixLimit / 2)
+        self.enc.setPrefixLimit(self.enc.prefixLimit // 2)
 
         self.assertRaises(banana.BananaError, self.enc.dataReceived, encoded)
 
diff --git twisted/test/test_defer.py twisted/test/test_defer.py
index f6f1596..1b11346 100644
--- twisted/test/test_defer.py
+++ twisted/test/test_defer.py
@@ -240,7 +240,7 @@ class DeferredTestCase(unittest.TestCase):
 
     def testCallbackErrors(self):
         l = []
-        d = defer.Deferred().addCallback(lambda _: 1 / 0).addErrback(l.append)
+        d = defer.Deferred().addCallback(lambda _: 1 // 0).addErrback(l.append)
         d.callback(1)
         self.assert_(isinstance(l[0].value, ZeroDivisionError))
         l = []
@@ -1098,7 +1098,7 @@ class FirstErrorTests(unittest.TestCase):
         compare equal to instances of other types.
         """
         try:
-            1 / 0
+            1 // 0
         except:
             firstFailure = failure.Failure()
 
@@ -1565,7 +1565,7 @@ class LogTestCase(unittest.TestCase):
         and its final result (the one not handled by any callback) is an
         exception, that exception will be logged immediately.
         """
-        defer.Deferred().addCallback(lambda x: 1 / 0).callback(1)
+        defer.Deferred().addCallback(lambda x: 1 // 0).callback(1)
         gc.collect()
         self._check()
 
@@ -1575,7 +1575,7 @@ class LogTestCase(unittest.TestCase):
         """
         def _subErrorLogWithInnerFrameRef():
             d = defer.Deferred()
-            d.addCallback(lambda x: 1 / 0)
+            d.addCallback(lambda x: 1 // 0)
             d.callback(1)
 
         _subErrorLogWithInnerFrameRef()
@@ -1588,7 +1588,7 @@ class LogTestCase(unittest.TestCase):
         """
         def _subErrorLogWithInnerFrameCycle():
             d = defer.Deferred()
-            d.addCallback(lambda x, d=d: 1 / 0)
+            d.addCallback(lambda x, d=d: 1 // 0)
             d._d = d
             d.callback(1)
 
diff --git twisted/test/test_defgen.py twisted/test/test_defgen.py
index 1d1ef1c..1ccd8e4 100644
--- twisted/test/test_defgen.py
+++ twisted/test/test_defgen.py
@@ -115,7 +115,7 @@ class DeferredGeneratorTests(BaseDefgenTests, unittest.TestCase):
 
     def _genBuggy(self):
         yield waitForDeferred(getThing())
-        1/0
+        1//0
     _genBuggy = deferredGenerator(_genBuggy)
 
 
diff --git twisted/test/test_failure.py twisted/test/test_failure.py
index 8a3670e..3963f8c 100644
--- twisted/test/test_failure.py
+++ twisted/test/test_failure.py
@@ -4,6 +4,7 @@
 """
 Test cases for failure module.
 """
+from __future__ import division
 
 import re
 import sys
diff --git twisted/test/test_log.py twisted/test/test_log.py
index 86f03d5..7fe05df 100644
--- twisted/test/test_log.py
+++ twisted/test/test_log.py
@@ -83,7 +83,7 @@ class LogTest(unittest.TestCase):
         L1 = []
         L2 = []
         def broken(events):
-            1 / 0
+            1 // 0
 
         for observer in [L1.append, broken, L2.append]:
             log.addObserver(observer)
@@ -258,13 +258,13 @@ class FakeFile(list):
 
 class EvilStr:
     def __str__(self):
-        1/0
+        1//0
 
 class EvilRepr:
     def __str__(self):
         return "Happy Evil Repr"
     def __repr__(self):
-        1/0
+        1//0
 
 class EvilReprStr(EvilStr, EvilRepr):
     pass
diff --git twisted/test/test_protocols.py twisted/test/test_protocols.py
index 0e03ad9..db12d3c 100644
--- twisted/test/test_protocols.py
+++ twisted/test/test_protocols.py
@@ -232,7 +232,7 @@ a'''
             t = proto_helpers.StringIOWithoutClosing()
             a = LineTester()
             a.makeConnection(protocol.FileWrapper(t))
-            for i in range(len(self.buffer)/packet_size + 1):
+            for i in range(len(self.buffer) // packet_size + 1):
                 s = self.buffer[i*packet_size:(i+1)*packet_size]
                 a.dataReceived(s)
             self.assertEqual(self.output, a.received)
@@ -254,7 +254,7 @@ a'''
             clock = task.Clock()
             a = LineTester(clock)
             a.makeConnection(protocol.FileWrapper(t))
-            for i in range(len(self.pause_buf)/packet_size + 1):
+            for i in range(len(self.pause_buf) // packet_size + 1):
                 s = self.pause_buf[i*packet_size:(i+1)*packet_size]
                 a.dataReceived(s)
             self.assertEqual(self.pause_output1, a.received)
@@ -277,7 +277,7 @@ a'''
             clock = task.Clock()
             a = LineTester(clock)
             a.makeConnection(protocol.FileWrapper(t))
-            for i in range(len(self.rawpause_buf)/packet_size + 1):
+            for i in range(len(self.rawpause_buf) // packet_size + 1):
                 s = self.rawpause_buf[i*packet_size:(i+1)*packet_size]
                 a.dataReceived(s)
             self.assertEqual(self.rawpause_output1, a.received)
@@ -297,7 +297,7 @@ a'''
             t = proto_helpers.StringIOWithoutClosing()
             a = LineTester()
             a.makeConnection(protocol.FileWrapper(t))
-            for i in range(len(self.stop_buf)/packet_size + 1):
+            for i in range(len(self.stop_buf) // packet_size + 1):
                 s = self.stop_buf[i*packet_size:(i+1)*packet_size]
                 a.dataReceived(s)
             self.assertEqual(self.stop_output, a.received)
@@ -455,7 +455,7 @@ class NetstringReceiverTestCase(unittest.TestCase, LPTestCaseMixin):
             for s in self.strings:
                 a.sendString(s)
             out = t.value()
-            for i in range(len(out)/packet_size + 1):
+            for i in range(len(out) // packet_size + 1):
                 s = out[i*packet_size:(i+1)*packet_size]
                 if s:
                     a.dataReceived(s)
diff --git twisted/test/test_threads.py twisted/test/test_threads.py
index e1ddd82..0b218a3 100644
--- twisted/test/test_threads.py
+++ twisted/test/test_threads.py
@@ -275,7 +275,7 @@ class DeferredResultTestCase(unittest.TestCase):
         # alas, this test appears to flunk the default reactor too
 
         d = threads.deferToThread(lambda: None)
-        d.addCallback(lambda ign: threads.deferToThread(lambda: 1/0))
+        d.addCallback(lambda ign: threads.deferToThread(lambda: 1//0))
         return self.assertFailure(d, ZeroDivisionError)
 
 
diff --git twisted/trial/test/erroneous.py twisted/trial/test/erroneous.py
index e1fd21c..f66f4d4 100644
--- twisted/trial/test/erroneous.py
+++ twisted/trial/test/erroneous.py
@@ -1,6 +1,7 @@
 # -*- test-case-name: twisted.trial.test.test_tests -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
+from __future__ import division
 
 from twisted.trial import unittest, util
 from twisted.internet import reactor, protocol, defer
diff --git twisted/trial/test/mockdoctest.py twisted/trial/test/mockdoctest.py
index 6d5bce7..85beadd 100644
--- twisted/trial/test/mockdoctest.py
+++ twisted/trial/test/mockdoctest.py
@@ -3,7 +3,7 @@
 
 # this module is a trivial class with doctests and a __test__ attribute
 # to test trial's doctest support with python2.4
-
+from __future__ import division
 
 class Counter(object):
     """a simple counter object for testing trial's doctest support
diff --git twisted/trial/test/test_assertions.py twisted/trial/test/test_assertions.py
index c720a64..b7847ff 100644
--- twisted/trial/test/test_assertions.py
+++ twisted/trial/test/test_assertions.py
@@ -4,6 +4,7 @@
 """
 Tests for assertions provided by L{twisted.trial.unittest.TestCase}.
 """
+from __future__ import division
 
 import warnings
 from pprint import pformat
diff --git twisted/trial/test/test_log.py twisted/trial/test/test_log.py
index 7afdcdf..a137a9f 100644
--- twisted/trial/test/test_log.py
+++ twisted/trial/test/test_log.py
@@ -4,6 +4,7 @@
 """
 Test the interaction between trial and errors logged during test run.
 """
+from __future__ import division
 
 import time
 
diff --git twisted/trial/test/test_pyunitcompat.py twisted/trial/test/test_pyunitcompat.py
index 72e7f11..7b85154 100644
--- twisted/trial/test/test_pyunitcompat.py
+++ twisted/trial/test/test_pyunitcompat.py
@@ -2,7 +2,7 @@
 # See LICENSE for details.
 #
 # Maintainer: Jonathan Lange
-
+from __future__ import division
 
 import sys
 import traceback
diff --git twisted/trial/test/test_reporter.py twisted/trial/test/test_reporter.py
index 9c5af7b..89f446a 100644
--- twisted/trial/test/test_reporter.py
+++ twisted/trial/test/test_reporter.py
@@ -6,7 +6,7 @@
 """
 Tests for L{twisted.trial.reporter}.
 """
-
+from __future__ import division
 
 import errno, sys, os, re, StringIO
 from inspect import getmro
diff --git twisted/trial/test/weird.py twisted/trial/test/weird.py
index e35526d..3533f56 100644
--- twisted/trial/test/weird.py
+++ twisted/trial/test/weird.py
@@ -1,3 +1,5 @@
+from __future__ import division
+
 from twisted.trial import unittest
 from twisted.internet import defer
 
diff --git twisted/web/static.py twisted/web/static.py
index 3992ac8..3474f2d 100644
--- twisted/web/static.py
+++ twisted/web/static.py
@@ -5,6 +5,7 @@
 """
 Static resources for L{twisted.web}.
 """
+from __future__ import division
 
 import os
 import warnings
diff --git twisted/web/test/test_template.py twisted/web/test/test_template.py
index 2e2ab94..b29303b 100644
--- twisted/web/test/test_template.py
+++ twisted/web/test/test_template.py
@@ -656,7 +656,7 @@ class FailingElement(Element):
     def render(self, request):
         a = 42
         b = 0
-        return a / b
+        return a // b
 
 
 
diff --git twisted/web/test/test_webclient.py twisted/web/test/test_webclient.py
index 1841402..7291c6e 100644
--- twisted/web/test/test_webclient.py
+++ twisted/web/test/test_webclient.py
@@ -1215,7 +1215,7 @@ class FileBodyProducerTests(unittest.TestCase):
         producer = FileBodyProducer(
             StringIO(expectedResult), self.cooperator, readSize)
         complete = producer.startProducing(consumer)
-        for i in range(len(expectedResult) / readSize + 1):
+        for i in range(len(expectedResult) // readSize + 1):
             self._scheduled.pop(0)()
         self.assertEqual([], self._scheduled)
         self.assertEqual(expectedResult, output.getvalue())
@@ -1233,7 +1233,7 @@ class FileBodyProducerTests(unittest.TestCase):
         producer = FileBodyProducer(inputFile, self.cooperator, readSize)
         consumer = FileConsumer(StringIO())
         producer.startProducing(consumer)
-        for i in range(len(inputBytes) / readSize + 2):
+        for i in range(len(inputBytes) // readSize + 2):
             self._scheduled.pop(0)()
         self.assertTrue(inputFile.closed)
 
diff --git twisted/web/test/test_xml.py twisted/web/test/test_xml.py
index 365e101..513a943 100644
--- twisted/web/test/test_xml.py
+++ twisted/web/test/test_xml.py
@@ -543,7 +543,7 @@ alert("I hate you");
             '\x80\x95\xb6[\xea0\xb90\xc80 \x00<\x00/\x00T\x00I\x00T\x00L\x00E'
             '\x00>\x00<\x00/\x00J\x00A\x00P\x00A\x00N\x00E\x00S\x00E\x00>\x00')
         def reverseBytes(s):
-            fmt = str(len(s) / 2) + 'H'
+            fmt = str(len(s) // 2) + 'H'
             return struct.pack('<' + fmt, *struct.unpack('>' + fmt, s))
         urd = microdom.parseString(reverseBytes(s.encode('UTF-16')))
         ud = microdom.parseString(s.encode('UTF-16'))
diff --git twisted/web/twcgi.py twisted/web/twcgi.py
index b1f001a..dca2bb7 100644
--- twisted/web/twcgi.py
+++ twisted/web/twcgi.py
@@ -254,7 +254,7 @@ class CGIProcessProtocol(protocol.ProcessProtocol, pb.Viewable):
                 headerend, delimiter = headerEnds[0]
                 self.headertext = text[:headerend]
                 # This is a final version of the header text.
-                linebreak = delimiter[:len(delimiter)/2]
+                linebreak = delimiter[:len(delimiter)//2]
                 headers = self.headertext.split(linebreak)
                 for header in headers:
                     br = header.find(': ')
diff --git twisted/words/test/test_irc.py twisted/words/test/test_irc.py
index 46af3c7..ffda689 100644
--- twisted/words/test/test_irc.py
+++ twisted/words/test/test_irc.py
@@ -1576,7 +1576,7 @@ class ClientMsgTests(unittest.TestCase):
         """
         message = 'o' * (irc.MAX_COMMAND_LENGTH - 2)
         self.assertLongMessageSplitting(
-            message, 3, length=irc.MAX_COMMAND_LENGTH / 2)
+            message, 3, length=irc.MAX_COMMAND_LENGTH // 2)
 
 
     def test_newlinesBeforeLineBreaking(self):
