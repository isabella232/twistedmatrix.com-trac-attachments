Index: twisted/web/http.py
===================================================================
--- twisted/web/http.py	(revision 30441)
+++ twisted/web/http.py	(working copy)
@@ -916,6 +916,7 @@
             self.channel.factory.log(self)
 
         self.finished = 1
+        
         if not self.queued:
             self._cleanup()
 
@@ -927,6 +928,8 @@
         @type data: C{str}
         @param data: Some bytes to be sent as part of the response body.
         """
+        if self.finished == 1:
+            raise RuntimeError('Request.write called on a request after Request.finish was called.')
         if not self.startedWriting:
             self.startedWriting = 1
             version = self.clientproto
Index: twisted/web/test/test_web.py

===================================================================
--- twisted/web/test/test_http.py	(revision 30441)
+++ twisted/web/test/test_http.py	(working copy)
@@ -1405,6 +1405,20 @@
         request.gotLength(1)
         request.finish()
         return finished
+
+
+    def test_writeAfterFinish(self):
+        """
+        Calling L{Request.write} after L{Request.finish} has been 
+        called results in a L{RuntimeError} being raised.
+        """
+        request = http.Request(DummyChannel(), False)
+        finished = request.notifyFinish()
+        # Force the request to have a non-None content attribute.  This is
+        # probably a bug in Request.
+        request.gotLength(1)
+        request.write('foobar')
+        request.finish()
+        self.assertRaises(RuntimeError, request.write,'foobar')
+        return finished
 
  
