Index: twisted/web/test/test_webclient.py
===================================================================
--- twisted/web/test/test_webclient.py	(revision 25503)
+++ twisted/web/test/test_webclient.py	(working copy)
@@ -409,6 +409,19 @@
         return d
 
 
+    def test_isolatedFollowRedirect(self):
+        """
+        C{client.HTTPPagerGetter} instances obey their factory instance's
+        C{followRedirect} value.
+        """
+        d1 = client.getPage(self.getURL('redirect'), followRedirect=True)
+        d2 = client.getPage(self.getURL('redirect'), followRedirect=False)
+
+        d = self.assertFailure(d2, error.PageRedirect
+            ).addCallback(lambda dummy: d1)
+        return d
+
+
     def testPartial(self):
         name = self.mktemp()
         f = open(name, "wb")
Index: twisted/web/client.py
===================================================================
--- twisted/web/client.py	(revision 25503)
+++ twisted/web/client.py	(working copy)
@@ -28,7 +28,6 @@
 class HTTPPageGetter(http.HTTPClient):
 
     quietLoss = 0
-    followRedirect = 1
     failed = 0
 
     _specialHeaders = set(('host', 'user-agent', 'cookie', 'content-length'))
@@ -88,7 +87,7 @@
             self.handleStatusDefault()
             return
         url = l[0]
-        if self.followRedirect:
+        if self.factory.followRedirect:
             scheme, host, port, path = \
                 _parse(url, defaultPort=self.transport.getPeer().port)
 
@@ -234,8 +233,8 @@
 
     def __init__(self, url, method='GET', postdata=None, headers=None,
                  agent="Twisted PageGetter", timeout=0, cookies=None,
-                 followRedirect=1, redirectLimit=20):
-        self.protocol.followRedirect = followRedirect
+                 followRedirect=True, redirectLimit=20):
+        self.followRedirect = followRedirect
         self.redirectLimit = redirectLimit
         self._redirectCount = 0
         self.timeout = timeout
