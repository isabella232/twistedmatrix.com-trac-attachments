Index: twisted/internet/interfaces.py
===================================================================
--- twisted/internet/interfaces.py	(revision 30183)
+++ twisted/internet/interfaces.py	(working copy)
@@ -168,6 +168,11 @@
         Lookup the TXT records associated with C{name}.
         """
 
+    def lookupSenderPolicy(name, timeout = 10):
+        """
+        Lookup the SPF records associated with C{name}.
+        """
+
     def lookupResponsibility(name, timeout = 10):
         """
         Lookup the RP records associated with C{name}.
Index: twisted/names/test/test_client.py
===================================================================
--- twisted/names/test/test_client.py	(revision 30183)
+++ twisted/names/test/test_client.py	(working copy)
@@ -585,6 +585,14 @@
         d.addCallback(self.checkResult, dns.TXT)
         return d
 
+    def test_lookupSenderPolicy(self):
+        """
+        See L{test_lookupAddress}
+        """
+        d = client.lookupSenderPolicy(self.hostname)
+        d.addCallback(self.checkResult, dns.SPF)
+        return d
+
     def test_lookupResponsibility(self):
         """
         See L{test_lookupAddress}
Index: twisted/names/test/test_names.py
===================================================================
--- twisted/names/test/test_names.py	(revision 30183)
+++ twisted/names/test/test_names.py	(working copy)
@@ -73,6 +73,8 @@
             soa_record,
             dns.Record_A('127.0.0.1'),
             dns.Record_NS('39.28.189.39'),
+            dns.Record_SPF('v=spf1 mx/30 mx:example.org/30 -all'),
+            dns.Record_SPF('v=spf1 +mx a:\0colo', '.example.com/28 -all not valid'),
             dns.Record_MX(10, 'host.test-domain.com'),
             dns.Record_HINFO(os='Linux', cpu='A Fast One, Dontcha know'),
             dns.Record_CNAME('canonical.name.com'),
@@ -345,6 +347,13 @@
              dns.Record_TXT('Some more text, haha!  Yes.  \0  Still here?', ttl=19283784)]
         )
 
+    def testSPF(self):
+        """Test DNS 'SPF' record queries"""
+        return self.namesTest(
+            self.resolver.lookupSenderPolicy('test-domain.com'),
+            [dns.Record_SPF('v=spf1 mx/30 mx:example.org/30 -all', ttl=19283784),
+            dns.Record_SPF('v=spf1 +mx a:\0colo', '.example.com/28 -all not valid', ttl=19283784)]
+        )
 
     def testWKS(self):
         """Test DNS 'WKS' record queries"""
Index: twisted/names/test/test_dns.py
===================================================================
--- twisted/names/test/test_dns.py	(revision 30183)
+++ twisted/names/test/test_dns.py	(working copy)
@@ -668,8 +668,18 @@
             repr(dns.Record_TXT("foo", "bar", ttl=15)),
             "<TXT data=['foo', 'bar'] ttl=15>")
 
+    def test_spf(self):
+        """
+        The repr of a L{dns.Record_SPF} instance includes the data and ttl
+        fields of the record, since it is structurally
+        similar to L{dns.Record_TXT}.
+        """
+        self.assertEqual(
+            repr(dns.Record_SPF("foo", "bar", ttl=15)),
+            "<SPF data=['foo', 'bar'] ttl=15>")
 
 
+
 class _Equal(object):
     """
     A class the instances of which are equal to anything and everything.
@@ -1201,16 +1211,38 @@
         """
         # Vary the length of the data
         self._equalityTest(
-            dns.Record_TXT(['foo', 'bar'], 10),
-            dns.Record_TXT(['foo', 'bar'], 10),
-            dns.Record_TXT(['foo', 'bar', 'baz'], 10))
+            dns.Record_TXT('foo', 'bar', ttl=10),
+            dns.Record_TXT('foo', 'bar', ttl=10),
+            dns.Record_TXT('foo', 'bar', 'baz', ttl=10))
         # Vary the value of the data
         self._equalityTest(
-            dns.Record_TXT(['foo', 'bar'], 10),
-            dns.Record_TXT(['foo', 'bar'], 10),
-            dns.Record_TXT(['bar', 'foo'], 10))
+            dns.Record_TXT('foo', 'bar', ttl=10),
+            dns.Record_TXT('foo', 'bar', ttl=10),
+            dns.Record_TXT('bar', 'foo', ttl=10))
         # Vary the ttl
         self._equalityTest(
-            dns.Record_TXT(['foo', 'bar'], 10),
-            dns.Record_TXT(['foo', 'bar'], 10),
-            dns.Record_TXT(['foo', 'bar'], 100))
+            dns.Record_TXT('foo', 'bar', ttl=10),
+            dns.Record_TXT('foo', 'bar', ttl=10),
+            dns.Record_TXT('foo', 'bar', ttl=100))
+
+
+    def test_spf(self):
+        """
+        L{dns.Record_SPF} records are structurally similar to L{dns.Record_TXT}
+        records, so they are equal if and only if they have the same data and ttl. 
+        """
+        # Vary the length of the data
+        self._equalityTest(
+            dns.Record_SPF('foo', 'bar', ttl=10),
+            dns.Record_SPF('foo', 'bar', ttl=10),
+            dns.Record_SPF('foo', 'bar', 'baz', ttl=10))
+        # Vary the value of the data
+        self._equalityTest(
+            dns.Record_SPF('foo', 'bar', ttl=10),
+            dns.Record_SPF('foo', 'bar', ttl=10),
+            dns.Record_SPF('bar', 'foo', ttl=10))
+        # Vary the ttl
+        self._equalityTest(
+            dns.Record_SPF('foo', 'bar', ttl=10),
+            dns.Record_SPF('foo', 'bar', ttl=10),
+            dns.Record_SPF('foo', 'bar', ttl=100))
Index: twisted/names/common.py
===================================================================
--- twisted/names/common.py	(revision 30183)
+++ twisted/names/common.py	(working copy)
@@ -163,6 +163,12 @@
         """
         return self._lookup(name, dns.IN, dns.TXT, timeout)
 
+    def lookupSenderPolicy(self, name, timeout = None):
+        """
+        @see: twisted.names.client.lookupSenderPolicy
+        """
+        return self._lookup(name, dns.IN, dns.SPF, timeout)
+
     def lookupResponsibility(self, name, timeout = None):
         """
         @see: twisted.names.client.lookupResponsibility
@@ -261,6 +267,7 @@
     dns.MINFO: 'lookupMailboxInfo',
     dns.MX:    'lookupMailExchange',
     dns.TXT:   'lookupText',
+    dns.SPF:   'lookupSenderPolicy',
 
     dns.RP:    'lookupResponsibility',
     dns.AFSDB: 'lookupAFSDatabase',
Index: twisted/names/client.py
===================================================================
--- twisted/names/client.py	(revision 30183)
+++ twisted/names/client.py	(working copy)
@@ -850,6 +850,21 @@
     """
     return getResolver().lookupText(name, timeout)
 
+def lookupSenderPolicy(name, timeout=None):
+    """
+    Perform a SPF record lookup.
+
+    @type name: C{str}
+    @param name: DNS name to resolve.
+
+    @type timeout: Sequence of C{int}
+    @param timeout: Number of seconds after which to reissue the query.
+    When the last timeout expires, the query is considered failed.
+
+    @rtype: C{Deferred}
+    """
+    return getResolver().lookupSenderPolicy(name, timeout)
+
 def lookupResponsibility(name, timeout=None):
     """
     Perform an RP record lookup.
Index: twisted/names/dns.py
===================================================================
--- twisted/names/dns.py	(revision 30183)
+++ twisted/names/dns.py	(working copy)
@@ -17,7 +17,7 @@
 
     'A', 'A6', 'AAAA', 'AFSDB', 'CNAME', 'DNAME', 'HINFO',
     'MAILA', 'MAILB', 'MB', 'MD', 'MF', 'MG', 'MINFO', 'MR', 'MX',
-    'NAPTR', 'NS', 'NULL', 'PTR', 'RP', 'SOA', 'SRV', 'TXT', 'WKS',
+    'NAPTR', 'NS', 'NULL', 'PTR', 'RP', 'SOA', 'SPF', 'SRV', 'TXT', 'WKS',
 
     'ANY', 'CH', 'CS', 'HS', 'IN',
 
@@ -29,7 +29,7 @@
     'Record_DNAME', 'Record_HINFO', 'Record_MB', 'Record_MD', 'Record_MF',
     'Record_MG', 'Record_MINFO', 'Record_MR', 'Record_MX', 'Record_NAPTR',
     'Record_NS', 'Record_NULL', 'Record_PTR', 'Record_RP', 'Record_SOA',
-    'Record_SRV', 'Record_TXT', 'Record_WKS',
+    'Record_SPF', 'Record_SRV', 'Record_TXT', 'Record_WKS',
 
     'QUERY_CLASSES', 'QUERY_TYPES', 'REV_CLASSES', 'REV_TYPES', 'EXT_QUERIES',
 
@@ -82,6 +82,7 @@
 NAPTR = 35
 A6 = 38
 DNAME = 39
+SPF = 99
 
 QUERY_TYPES = {
     A: 'A',
@@ -109,7 +110,8 @@
     SRV: 'SRV',
     NAPTR: 'NAPTR',
     A6: 'A6',
-    DNAME: 'DNAME'
+    DNAME: 'DNAME',
+    SPF: 'SPF'
 }
 
 IXFR, AXFR, MAILB, MAILA, ALL_RECORDS = range(251, 256)
@@ -1420,6 +1422,9 @@
 
     @type data: C{list} of C{str}
     @ivar data: Freeform text which makes up this record.
+    
+    @type ttl: C{int}
+    @ivar ttl: The maximum number of seconds which this record should be cached.
     """
     implements(IEncodable, IRecord)
 
@@ -1448,8 +1453,8 @@
             soFar += L + 1
         if soFar != length:
             log.msg(
-                "Decoded %d bytes in TXT record, but rdlength is %d" % (
-                    soFar, length
+                "Decoded %d bytes in %s record, but rdlength is %d" % (
+                    soFar, self.fancybasename, length
                 )
             )
 
@@ -1459,6 +1464,22 @@
 
 
 
+class Record_SPF(Record_TXT):
+    """
+    Structurally, freeform text. Semantically, a policy definition, formatted
+    as defined in U{rfc 4408<http://www.faqs.org/rfcs/rfc4408.html>}.
+    
+    @type data: C{list} of C{str}
+    @ivar data: Freeform text which makes up this record.
+    
+    @type ttl: C{int}
+    @ivar ttl: The maximum number of seconds which this record should be cached.
+    """
+    TYPE = SPF
+    fancybasename = 'SPF'
+
+
+
 class Message:
     """
     L{Message} contains all the information represented by a single
