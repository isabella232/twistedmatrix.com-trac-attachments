Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 34875)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -3678,6 +3678,229 @@
         return d
 
 
+    def testFetchBodyHeaderWithOffset(self):
+        """
+        A subset of header should return when using offset and length.
+        Don't think this is particularly useful, but RFC 2060 allows it.
+
+        See U{RFC 2060<http://tools.ietf.org/html/rfc2060#section-6.4.5>},
+        section 6.4.5, for details.
+        """
+        self.function = self.client.fetchSpecific
+        self.messages = '1'
+        outerBody = 'DA body'
+        headers = util.OrderedDict()
+        headers['from'] = 'sender@host'
+        headers['to'] = 'recipient@domain'
+        headers['subject'] = 'booga booga boo'
+        headers['content-type'] = 'text/plain'
+        self.msgObjs = [FakeyMessage(
+            headers, (), None, outerBody, 123, None)]
+        self.expected = {0: [['BODY', ['HEADER'], '<0>', 'From: sender@host']]}
+
+        def result(R):
+            self.result = R
+
+        self.connected.addCallback(
+            lambda _: self.function(self.messages,
+                                    headerType="HEADER",
+                                    offset=0, length=17))
+        self.connected.addCallback(result)
+        self.connected.addCallback(self._cbStopClient)
+        self.connected.addErrback(self._ebGeneral)
+
+        d = loopback.loopbackTCP(self.server, self.client, noisy=False)
+        d.addCallback(lambda ign: self.assertEqual(self.result, self.expected))
+        return d
+
+
+    def testFetchBodyTextWithOffset(self):
+        """
+        A subset of body text should return when using offset and length.
+
+        See U{RFC 2060<http://tools.ietf.org/html/rfc2060#section-6.4.5>},
+        section 6.4.5, for details.
+        """
+        self.function = self.client.fetchSpecific
+        self.messages = '1'
+        outerBody = 'Testing Fetch Body Text!'
+        headers = util.OrderedDict()
+        headers['from'] = 'sender@host'
+        headers['to'] = 'recipient@domain'
+        headers['subject'] = 'booga booga boo'
+        headers['content-type'] = 'text/plain'
+        self.msgObjs = [FakeyMessage(
+            headers, (), None, outerBody, 123, None)]
+        self.expected = {0: [['BODY', ['TEXT'], '<8>', 'Fetch Body Text!']]}
+
+        def result(R):
+            self.result = R
+
+        self.connected.addCallback(
+            lambda _: self.function(self.messages,
+                                    headerType="TEXT",
+                                    offset=8, length=17))
+        self.connected.addCallback(result)
+        self.connected.addCallback(self._cbStopClient)
+        self.connected.addErrback(self._ebGeneral)
+
+        d = loopback.loopbackTCP(self.server, self.client, noisy=False)
+        d.addCallback(lambda ign: self.assertEqual(self.result, self.expected))
+        return d
+
+
+    def testFetchBodyMIMEWithOffset(self):
+        """
+        A subset of MIME header should return when using offset and length.
+        Don't think this is particularly useful, but RFC 2060 allows it.
+
+        See U{RFC 2060<http://tools.ietf.org/html/rfc2060#section-6.4.5>},
+        section 6.4.5, for details.
+        """
+        self.function = self.client.fetchSpecific
+        self.messages = '1'
+        outerBody = 'Testing Fetch Body MIME Header!'
+        headers = util.OrderedDict()
+        headers['from'] = 'sender@host'
+        headers['to'] = 'recipient@domain'
+        headers['subject'] = 'booga booga boo'
+        headers['content-type'] = 'text/plain'
+        self.msgObjs = [FakeyMessage(
+            headers, (), None, outerBody, 123, None)]
+        self.expected = {0: [['BODY', ['MIME'], '<41>', 'Subject: booga booga boo']]}
+
+        def result(R):
+            self.result = R
+
+        self.connected.addCallback(
+            lambda _: self.function(self.messages,
+                                    headerType="MIME",
+                                    offset=41, length=24))
+        self.connected.addCallback(result)
+        self.connected.addCallback(self._cbStopClient)
+        self.connected.addErrback(self._ebGeneral)
+
+        d = loopback.loopbackTCP(self.server, self.client, noisy=False)
+        d.addCallback(lambda ign: self.assertEqual(self.result, self.expected))
+        return d
+
+
+    def testFetchBodyMultiWithOffset(self):
+        """
+        A subset of body text should return when using offset and length
+        with headerNumber.
+
+        See U{RFC 2060<http://tools.ietf.org/html/rfc2060#section-6.4.5>},
+        section 6.4.5, for details.
+        """
+        self.function = self.client.fetchSpecific
+        self.messages = '1'
+        outerBody = ''
+        innerBody1 = 'Contained body message text.'
+        innerBody2 = 'Secondary <i>message</i> for the test.'
+        headers = util.OrderedDict()
+        headers['from'] = 'sender@host'
+        headers['to'] = 'recipient@domain'
+        headers['subject'] = 'booga booga boo'
+        headers['content-type'] = 'multipart/alternative; boundary="xyz"'
+        innerHeaders = util.OrderedDict()
+        innerHeaders['subject'] = 'this is subject text'
+        innerHeaders['content-type'] = 'text/plain'
+        innerHeaders2 = util.OrderedDict()
+        innerHeaders2['subject'] = '<b>this is subject</b>'
+        innerHeaders2['content-type'] = 'text/html'
+        self.msgObjs = [FakeyMessage(
+            headers, (), None, outerBody, 123,
+            [FakeyMessage(innerHeaders, (), None, innerBody1, None, None),
+             FakeyMessage(innerHeaders2, (), None, innerBody2, None, None)])]
+        self.expected = {
+            0: [['BODY', ['2'], '<10>', '<i>message</i> for the test.']]
+        }
+
+        def result(R):
+            self.result = R
+
+        self.connected.addCallback(
+            lambda _: self.function(self.messages, headerNumber=2,
+                                    offset=10, length=200))
+        self.connected.addCallback(result)
+        self.connected.addCallback(self._cbStopClient)
+        self.connected.addErrback(self._ebGeneral)
+
+        d = loopback.loopbackTCP(self.server, self.client, noisy=False)
+        d.addCallback(lambda ign: self.assertEqual(self.result, self.expected))
+        return d
+
+
+    def testFetchBodyFullWithOffset(self):
+        """
+        A subset of full message should return when using offset and length.
+
+        See U{RFC 2060<http://tools.ietf.org/html/rfc2060#section-6.4.5>},
+        section 6.4.5, for details.
+        """
+        self.function = self.client.fetchSpecific
+        self.messages = '1'
+        outerBody = 'Testing Fetch Body!'
+        headers = util.OrderedDict()
+        headers['from'] = 'sender@host'
+        headers['to'] = 'recipient@domain'
+        headers['subject'] = 'booga booga boo'
+        headers['content-type'] = 'text/plain'
+        self.msgObjs = [FakeyMessage(
+            headers, (), None, outerBody, 123, None)]
+        self.expected = {0: [['BODY', [], '<41>', 'Subject: booga booga boo']]}
+
+        def result(R):
+            self.result = R
+
+        self.connected.addCallback(
+            lambda _: self.function(self.messages,
+                                    offset=41, length=24))
+        self.connected.addCallback(result)
+        self.connected.addCallback(self._cbStopClient)
+        self.connected.addErrback(self._ebGeneral)
+
+        d = loopback.loopbackTCP(self.server, self.client, noisy=False)
+        d.addCallback(lambda ign: self.assertEqual(self.result, self.expected))
+        return d
+
+
+    def testFetchBodyWithLargeOffset(self):
+        """
+        When the offset is longer than the length of the return message,
+        an empty string should be returned.
+
+        See U{RFC 2060<http://tools.ietf.org/html/rfc2060#section-6.4.5>},
+        section 6.4.5, for details.
+        """
+        self.function = self.client.fetchSpecific
+        self.messages = '1'
+        outerBody = 'DA body'
+        headers = util.OrderedDict()
+        headers['from'] = 'sender@host'
+        headers['to'] = 'recipient@domain'
+        headers['subject'] = 'booga booga boo'
+        headers['content-type'] = 'text/plain'
+        self.msgObjs = [FakeyMessage(
+            headers, (), None, outerBody, 123, None)]
+        self.expected = {0: [['BODY', ['1'], '<100>', '']]}
+
+        def result(R):
+            self.result = R
+
+        self.connected.addCallback(
+            lambda _: self.function(self.messages, headerNumber=1,
+                                    offset=100, length=5))
+        self.connected.addCallback(result)
+        self.connected.addCallback(self._cbStopClient)
+        self.connected.addErrback(self._ebGeneral)
+
+        d = loopback.loopbackTCP(self.server, self.client, noisy=False)
+        d.addCallback(lambda ign: self.assertEqual(self.result, self.expected))
+        return d
+
+
     def test_fetchBodyPartOfNonMultipart(self):
         """
         Single-part messages have an implicit first part which clients
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 34875)
+++ twisted/mail/imap4.py	(working copy)
@@ -1975,31 +1975,48 @@
                 # other parts - reject any request for any other part.
                 raise TypeError("Requested subpart of non-multipart message")
 
+        if part.partialBegin or part.partialBegin == 0:
+            str_part = str(part).split('<')[0]
+            str_part += "<%s> " % ( part.partialBegin, )
+        else:
+            str_part = str(part) + ' '
+
         if part.header:
             hdrs = msg.getHeaders(part.header.negate, *part.header.fields)
             hdrs = _formatHeaders(hdrs)
-            _w(str(part) + ' ' + _literal(hdrs))
+            if part.partialLength:
+                end = part.partialBegin + part.partialLength
+                hdrs = hdrs[part.partialBegin:end]
+            _w(str_part + _literal(hdrs))
         elif part.text:
-            _w(str(part) + ' ')
+            _w(str_part)
             _f()
-            return FileProducer(msg.getBodyFile()
-                ).beginProducing(self.transport
-                )
+            return FileProducer(msg.getBodyFile(),
+                                part.partialBegin, part.partialLength
+                               ).beginProducing(self.transport)
         elif part.mime:
             hdrs = _formatHeaders(msg.getHeaders(True))
-            _w(str(part) + ' ' + _literal(hdrs))
+            if part.partialLength:
+                end = part.partialBegin + part.partialLength
+                hdrs = hdrs[part.partialBegin:end]
+            _w(str_part + _literal(hdrs))
         elif part.empty:
-            _w(str(part) + ' ')
+            _w(str_part)
             _f()
             if part.part:
-                return FileProducer(msg.getBodyFile()
-                    ).beginProducing(self.transport
-                    )
+                return FileProducer(msg.getBodyFile(),
+                                    part.partialBegin, part.partialLength
+                                   ).beginProducing(self.transport)
             else:
+                # The full message
                 mf = IMessageFile(msg, None)
                 if mf is not None:
-                    return FileProducer(mf.open()).beginProducing(self.transport)
-                return MessageProducer(msg, None, self._scheduler).beginProducing(self.transport)
+                    return FileProducer(mf.open(),
+                                        part.partialBegin, part.partialLength
+                                       ).beginProducing(self.transport)
+                return MessageProducer(msg, None, self._scheduler, 
+                                       part.partialBegin, part.partialLength
+                                      ).beginProducing(self.transport)
 
         else:
             _w('BODY ' + collapseNestedLists([getBodyStructure(msg)]))
@@ -2035,6 +2052,7 @@
             flush()
         return self._scheduler(spew())
 
+
     def __ebFetch(self, failure, tag):
         self.setTimeout(self._oldTimeout)
         del self._oldTimeout
@@ -3743,7 +3761,7 @@
             header = '.' + headerType
         else:
             header = headerType
-        if header and headerType not in ('TEXT', 'MIME'):
+        if header and headerType not in ('TEXT', 'MIME', 'HEADER'):
             if headerArgs is not None:
                 payload = ' (%s)' % ' '.join(headerArgs)
             else:
@@ -5282,7 +5300,8 @@
 class MessageProducer:
     CHUNK_SIZE = 2 ** 2 ** 2 ** 2
 
-    def __init__(self, msg, buffer = None, scheduler = None):
+    def __init__(self, msg, buffer = None, scheduler = None,
+                 start = None, length = None):
         """Produce this message.
 
         @param msg: The message I am to produce.
@@ -5299,6 +5318,8 @@
         if scheduler is None:
             scheduler = iterateInReactor
         self.scheduler = scheduler
+        self.start = start
+        self.length = length
         self.write = self.buffer.write
 
     def beginProducing(self, consumer):
@@ -5341,7 +5362,7 @@
                     break
         if self.consumer:
             self.buffer.seek(0, 0)
-            yield FileProducer(self.buffer
+            yield FileProducer(self.buffer, self.start, self.length
                 ).beginProducing(self.consumer
                 ).addCallback(lambda _: self
                 )
@@ -5665,9 +5686,35 @@
 
     firstWrite = True
 
-    def __init__(self, f):
+    def __init__(self, f, start=None, length=None):
+        """
+        @type f: C{file}
+        @param f: The file-like object to read data from
+
+        @type start: C{int}
+        @param start: The starting position of desired octet
+
+        @type length: C{int}
+        @param length: The number of octects wanted
+        """
         self.f = f
+        self.start = start
+        self.length = length
+        # Truncates the message if requested clients
+        if self.length:
+            file_size = self._size()
+            if file_size < self.length:
+                self.length = file_size-self.start
 
+            if file_size >= self.start:
+                self.f.seek(self.start, 0)
+                self.f.truncate(self.start + self.length)
+                self.f.seek(self.start, 0)
+            else:
+                # Return an empty string if the starting octet is
+                # larger than the size of the message
+                self.f = StringIO.StringIO('')
+
     def beginProducing(self, consumer):
         self.consumer = consumer
         self.produce = consumer.write
