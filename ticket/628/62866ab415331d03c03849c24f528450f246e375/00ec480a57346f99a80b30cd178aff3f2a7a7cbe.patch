Index: test_jelly.py
===================================================================
--- test_jelly.py	(revision 13595)
+++ test_jelly.py	(working copy)
@@ -11,7 +11,7 @@
 from twisted.test import test_newjelly
 
 class TestNode(object, jelly.Jellyable):
-    """An object to test jellyfying of new style class isntances.
+    """An object to test jellyfying of new style class instances.
     """
     classAttr = 4
     def __init__(self, parent=None):
@@ -23,7 +23,18 @@
         self.parent = parent
         self.children = []
 
+class TestNode2(TestNode):
+    """An object to test jellyfying of new style class instances.
+    that override __new__
+    """
+    instanceCount = 1
+    def __new__(typ, parent=None):
+        """Keeps a count of how many instances have been instantiated"""
+        inst = object.__new__(typ, parent)
+        TestNode2.instanceCount += 1
+        return inst
 
+
 class JellyTestCase(test_newjelly.JellyTestCase):
     jc = jelly
     if test_newjelly.haveDatetime:
@@ -67,9 +78,27 @@
         jel = self.jc.jelly(n)
         m = self.jc.unjelly(jel)
         # Check that it has been restored ok
-        TestNode.classAttr == 5 # Shouldn't override jellied values
         self._check_newstyle(n,m)
 
+    def testNewStyleClasses2(self):
+        """Checks that new style classes
+        that override __new__ work ok
+        """
+        n = TestNode2()
+        n1 = TestNode2(n)
+        n11 = TestNode2(n1)
+        n2 = TestNode2(n)
+        # Jelly it
+        jel = self.jc.jelly(n)
+        m = self.jc.unjelly(jel)
+        # Check that it has been restored ok
+        self.assert_(n.__class__.__name__ == 'TestNode2', n.__class__.__name__)
+        self.assert_(m.__class__.__name__ == 'TestNode2', m.__class__.__name__)
+        self.assert_(len(n.children) > 0)
+        self._check_newstyle(n,m)
+        # Should have counted a lot of instances bieng created
+        assert TestNode2.instanceCount == 9, TestNode2.instanceCount
+
     def _check_newstyle(self, a, b):
         self.assertEqual(a.id, b.id)
         self.assertEqual(a.classAttr, 4)
