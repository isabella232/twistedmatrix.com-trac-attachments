diff --git a/twisted/web/server.py b/twisted/web/server.py
index 447d578..4ea8895 100644
--- a/twisted/web/server.py
+++ b/twisted/web/server.py
@@ -11,7 +11,6 @@ infrastructure.
 # System Imports
 
 import warnings
-import string
 import types
 import copy
 import os
@@ -121,7 +120,7 @@ class Request(pb.Copyable, http.Request, components.Componentized):
 
         # Resource Identification
         self.prepath = []
-        self.postpath = map(unquote, string.split(self.path[1:], '/'))
+        self.postpath = map(unquote, self.path[1:].split('/'))
         try:
             resrc = self.site.getResourceFor(self)
             self.render(resrc)
@@ -181,7 +180,7 @@ class Request(pb.Copyable, http.Request, components.Componentized):
                     'URI': escape(self.uri),
                     'method': self.method,
                     'plural': ((len(allowedMethods) > 1) and 's') or '',
-                    'allowed': string.join(allowedMethods, ', ')
+                    'allowed': ', '.join(allowedMethods)
                     })
                 epage = resource.ErrorPage(http.NOT_ALLOWED,
                                            "Method Not Allowed", s)
@@ -287,7 +286,7 @@ class Request(pb.Copyable, http.Request, components.Componentized):
     def getSession(self, sessionInterface = None):
         # Session management
         if not self.session:
-            cookiename = string.join(['TWISTED_SESSION'] + self.sitepath, "_")
+            cookiename = "_".join(['TWISTED_SESSION'] + self.sitepath)
             sessionCookie = self.getCookie(cookiename)
             if sessionCookie:
                 try:
diff --git a/twisted/web/twcgi.py b/twisted/web/twcgi.py
index 1bdc402..eab658e 100644
--- a/twisted/web/twcgi.py
+++ b/twisted/web/twcgi.py
@@ -8,7 +8,6 @@ I hold resource classes and helper classes that deal with CGI scripts.
 """
 
 # System Imports
-import string
 import os
 import urllib
 
@@ -68,8 +67,8 @@ class CGIScript(resource.Resource):
         @type request: L{twisted.web.http.Request}
         @param request: An HTTP request.
         """
-        script_name = "/"+string.join(request.prepath, '/')
-        serverName = string.split(request.getRequestHostname(), ':')[0]
+        script_name = "/"+"/".join(request.prepath)
+        serverName = request.getRequestHostname().split(':')[0]
         env = {"SERVER_SOFTWARE":   server.version,
                "SERVER_NAME":       serverName,
                "GATEWAY_INTERFACE": "CGI/1.1",
@@ -89,7 +88,7 @@ class CGIScript(resource.Resource):
             env['REMOTE_ADDR'] = ip
         pp = request.postpath
         if pp:
-            env["PATH_INFO"] = "/"+string.join(pp, '/')
+            env["PATH_INFO"] = "/"+"/".join(pp)
 
         if hasattr(request, "content"):
             # request.content is either a StringIO or a TemporaryFile, and
@@ -99,7 +98,7 @@ class CGIScript(resource.Resource):
             request.content.seek(0,0)
             env['CONTENT_LENGTH'] = str(length)
 
-        qindex = string.find(request.uri, '?')
+        qindex = request.uri.find('?')
         if qindex != -1:
             qs = env['QUERY_STRING'] = request.uri[qindex+1:]
             if '=' in qs:
@@ -112,7 +111,7 @@ class CGIScript(resource.Resource):
 
         # Propogate HTTP headers
         for title, header in request.getAllHeaders().items():
-            envname = string.upper(string.replace(title, '-', '_'))
+            envname = title.replace('-', '_').upper()
             if title not in ('content-type', 'content-length'):
                 envname = "HTTP_" + envname
             env[envname] = header
@@ -276,7 +275,7 @@ class CGIProcessProtocol(protocol.ProcessProtocol, pb.Viewable):
             text = self.headertext + output
             headerEnds = []
             for delimiter in '\n\n','\r\n\r\n','\r\r', '\n\r\n':
-                headerend = string.find(text,delimiter)
+                headerend = text.find(delimiter)
                 if headerend != -1:
                     headerEnds.append((headerend, delimiter))
             if headerEnds:
@@ -289,13 +288,13 @@ class CGIProcessProtocol(protocol.ProcessProtocol, pb.Viewable):
                 self.headertext = text[:headerend]
                 # This is a final version of the header text.
                 linebreak = delimiter[:len(delimiter)/2]
-                headers = string.split(self.headertext, linebreak)
+                headers = self.headertext.split(linebreak)
                 for header in headers:
-                    br = string.find(header,': ')
+                    br = header.find(': ')
                     if br == -1:
                         log.msg( 'ignoring malformed CGI header: %s' % header )
                     else:
-                        headerName = string.lower(header[:br])
+                        headerName = header[:br].lower()
                         headerText = header[br+2:]
                         if headerName == 'location':
                             self.request.setResponseCode(http.FOUND)
diff --git a/twisted/web/util.py b/twisted/web/util.py
index 719b161..ce25a9d 100644
--- a/twisted/web/util.py
+++ b/twisted/web/util.py
@@ -5,7 +5,7 @@
 
 from cStringIO import StringIO
 import linecache
-import string, re
+import re
 import types
 
 from twisted.python import failure
@@ -289,9 +289,9 @@ htmlReprTypes = {types.DictType: htmlDict,
 
 
 def htmlIndent(snippetLine):
-    ret = string.replace(string.replace(html.escape(string.rstrip(snippetLine)),
-                                  '  ', '&nbsp;'),
-                   '\t', '&nbsp; &nbsp; &nbsp; &nbsp; ')
+    ret = html.escape(snippetLine.rstrip())\
+            .replace('  ', '&nbsp;')\
+            .replace('\t', '&nbsp; &nbsp; &nbsp; &nbsp; ')
     return ret
 
 def formatFailure(myFailure):
