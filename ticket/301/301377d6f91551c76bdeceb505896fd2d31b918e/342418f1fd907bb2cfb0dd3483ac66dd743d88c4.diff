*** site-packages/twisted/internet/defer.py	Tue Sep 21 21:54:40 2004
--- defer.py	Wed Jan 26 10:15:23 2005
***************
*** 155,162 ****
  
  def passthru(arg):
      return arg
  
! class Deferred:
      """This is a callback which will be put off until later.
  
      Why do we want this? Well, in cases where a function in a threaded
--- 155,241 ----
  
  def passthru(arg):
      return arg
+ 
+ class DeferCleanupPassThrough( object ):
+     """Descriptor which stores copy of attributes in client.deferCleanup
+ 
+     This class forwards a given attribute name such that
+     after setting client.attribute, client.deferCleanup.attribute
+     is also set.  The deferCleanup mechanism avoids defining
+     __del__ on a Deferred object, which avoids memory leaks.
+ 
+     Note:
+         Use of DeferCleanupPassThrough requires using a new-style
+         class for Deferred objects.
+     """
+     def __init__( self, name='result', default=None ):
+         """Initialise the descriptor
+ 
+         name -- string giving the attribute name we are to forward
+         default -- if not None, a value to return as the default
+             value for the descriptor on any given client
+         """
+         self.name = name
+         if default is not None:
+             self.default = default
+     def __get__( self, client=None, cls=None ):
+         """Retrieve the descriptor's value for instance or class"""
+         if client is None:
+             return self
+         else:
+             try:
+                 return client.__dict__[ self.name ]
+             except KeyError, err:
+                 if hasattr( self, 'default' ):
+                     return self.default
+                 else:
+                     raise AttributeError( self.name )
+     def __set__( self, client, value ):
+         """Retrieve the descriptor's value for an instance"""
+         client.__dict__[ self.name ] = value
+         setattr(client.deferCleanup, self.name, value )
+ 
+ class DeferCleanup( object ):
+     """Result holder for a deferred object
+ 
+     Instances of this class are used to avoid defining a __del__
+     method on Deferred objects.  They receive forwarded copies
+     of the relevant attributes of the Deferred object via
+     DeferCleanupPassThrough descriptors in the Deferred class.
+     """
+     called = None
+     result = None
+     debug = None
+     def __init__( self, debug=False ):
+         """Initialise the DeferResult holder
+ 
+         debug -- whether to operate in debug mode or not
+         """
+         self.debug = debug
+     def __del__( self ):
+         """Handle deletion, log an error on unhandled Failure instance"""
+         if (self.called and
+             isinstance(self.result, failure.Failure)):
+             log.msg("Unhandled error in Deferred:", isError=True)
+             if self.debug:
+                 log.msg("(debug: " + self._debugInfo() + ")", isError=True)
+             log.err(self.result)
+     def _debugInfo(self):
+         """Get debug information for (now defunct) Deferred object"""
+         info = ''
+         if hasattr(self, "creator"):
+             info += " C: Deferred was created:\n C:"
+             info += "".join(self.creator).rstrip().replace("\n","\n C:")
+             info += "\n"
+         if hasattr(self, "invoker"):
+             info += " I: First Invoker was:\n I:"
+             info += "".join(self.invoker).rstrip().replace("\n","\n I:")
+             info += "\n"
+         return info
+ 
+ 
  
! class Deferred(object):
      """This is a callback which will be put off until later.
  
      Why do we want this? Well, in cases where a function in a threaded
***************
*** 172,178 ****
      U{http://www.twistedmatrix.com/documents/howto/defer}
      """
  
!     called = 0
      default = 0
      paused = 0
      timeoutCall = None
--- 251,260 ----
      U{http://www.twistedmatrix.com/documents/howto/defer}
      """
  
!     called = DeferCleanupPassThrough( 'called', default=0 )
!     result = DeferCleanupPassThrough( 'result' )
!     result = DeferCleanupPassThrough( 'creator' )
!     result = DeferCleanupPassThrough( 'invoker' )
      default = 0
      paused = 0
      timeoutCall = None
***************
*** 181,187 ****
      debug = False
  
      def __init__(self):
!         self.callbacks = []
          if self.debug:
              self.creator = traceback.format_stack()[:-1]
  
--- 263,270 ----
      debug = False
  
      def __init__(self):
!         self.callbacks = []
!         self.deferCleanup = DeferCleanup(debug=self.debug)
          if self.debug:
              self.creator = traceback.format_stack()[:-1]
  
***************
*** 397,417 ****
                                                         self.result)
          return "<%s at %s>" % (cname, hex(id(self)))
      __repr__ = __str__
! 
! 
!     def __del__(self):
!         """Print tracebacks and die.
! 
!         If the *last* (and I do mean *last*) callback leaves me in an error
!         state, print a traceback (if said errback is a Failure).
!         """
!         if (self.called and
!             isinstance(self.result, failure.Failure)):
!             log.msg("Unhandled error in Deferred:", isError=True)
!             if self.debug:
!                 log.msg("(debug: " + self._debugInfo() + ")", isError=True)
!             log.err(self.result)
! 
  
  class DeferredList(Deferred):
      """I combine a group of deferreds into one callback.
--- 480,486 ----
                                                         self.result)
          return "<%s at %s>" % (cname, hex(id(self)))
      __repr__ = __str__
! 
  
  class DeferredList(Deferred):
      """I combine a group of deferreds into one callback.
