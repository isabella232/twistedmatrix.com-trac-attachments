Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 31552)
+++ twisted/python/filepath.py	(working copy)
@@ -246,6 +246,10 @@
 
 
     def sibling(self, path):
+	"""
+	Return a L{FilePath} that is the sibbling of the current,
+	named C{path}.
+	"""
         return self.parent().child(path)
 
 
@@ -336,7 +340,7 @@
     Instantiate me with a pathname (for example,
     FilePath('/home/myuser/public_html')) and I will attempt to only provide
     access to files which reside inside that path.  I may be a path to a file,
-    a directory, or a file which does not exist.
+    a directory, or a file which does not exist. Unicode pathnames work.
 
     The correct way to use me is to instantiate me, and then do ALL filesystem
     access through me.  In other words, do not import the 'os' module; if you
@@ -379,16 +383,32 @@
     path = None
 
     def __init__(self, path, alwaysCreate=False):
+	"""
+        Initialize the L{FilePath}
+        """
+
         self.path = abspath(path)
         self.alwaysCreate = alwaysCreate
 
     def __getstate__(self):
+	"""
+        Internal method for pickling
+        """
+
         d = self.__dict__.copy()
         if d.has_key('statinfo'):
             del d['statinfo']
         return d
 
     def child(self, path):
+	"""
+        Returns a new L{FilePath} to the L{FilePath}'s child.
+
+	@param path: The path to test for child-ness
+	@type path: String
+	@raise InsecurePath: If path is not a child of the L{FilePath}
+	"""
+	
         if platform.isWindows() and path.count(":"):
             # Catch paths like C:blah that don't have a slash
             raise InsecurePath("%r contains a colon." % (path,))
@@ -719,7 +739,7 @@
 
     def exists(self):
         """
-        Check if the C{path} exists.
+        Check if the L{FilePath} exists.
 
         @return: C{True} if the stats of C{path} can be retrieved successfully,
             C{False} in the other cases.
@@ -736,6 +756,9 @@
 
 
     def isdir(self):
+	"""
+        @return: C{True} if the L{FilePath} points to a directory.
+        """
         st = self.statinfo
         if not st:
             self.restat(False)
@@ -745,6 +768,10 @@
         return S_ISDIR(st.st_mode)
 
     def isfile(self):
+	"""
+        @return: C{True} if the L{FilePath} points to a file.
+        """
+
         st = self.statinfo
         if not st:
             self.restat(False)
@@ -754,6 +781,9 @@
         return S_ISREG(st.st_mode)
 
     def islink(self):
+	"""
+        @return: C{True} if the L{FilePath} points to a link.
+        """
         # We can't use cached stat results here, because that is the stat of
         # the destination - (see #1773) which in *every case* but this one is
         # the right thing to use.  We could call lstat here and use that, but
@@ -761,18 +791,33 @@
         return islink(self.path)
 
     def isabs(self):
+	"""
+        @return C{True} if the L{FilePath} is absolute
+        """
         return isabs(self.path)
 
     def listdir(self):
+	"""
+	@return: List of the L{FilePath}'s children
+	@raise: OSError if C{self.isfile()} is True.
+	"""
         return listdir(self.path)
 
     def splitext(self):
+	"""
+        @return: tuple where the first item is the filename and second
+        item is the file extension. See Python docs for C{os.path.splitext}
+        """
         return splitext(self.path)
 
     def __repr__(self):
         return 'FilePath(%r)' % (self.path,)
 
     def touch(self):
+        """
+        Update the access and modified times of the L{FilePath}'s file.
+        Fails silently.
+        """
         try:
             self.open('a').close()
         except IOError:
@@ -814,12 +859,22 @@
         return map(self.clonePath, glob.glob(path))
 
     def basename(self):
+        """
+        @return: The final component of the L{FilePath}'s path
+        (Everything after the final path seperator)
+        """
         return basename(self.path)
 
     def dirname(self):
+        """
+        @return: The name of the L{FilePath}'s parent directory
+        """
         return dirname(self.path)
 
     def parent(self):
+        """
+        @return: A L{FilePath} representing this L{FilePath}'s parent
+        """
         return self.clonePath(self.dirname())
 
 
@@ -889,14 +944,19 @@
         return cmp(self.path, other.path)
 
     def createDirectory(self):
+        """
+        Creates the directory the L{FilePath} points to if it doesn't exist
+        You may want to use makedirs instead.
+        """
         os.mkdir(self.path)
 
     def requireCreate(self, val=1):
         self.alwaysCreate = val
 
     def create(self):
-        """Exclusively create a file, only if this file previously did not exist.
         """
+        Exclusively create a file, only if this file previously did not exist.
+        """
         fdint = os.open(self.path, _CREATE_FLAGS)
 
         # XXX TODO: 'name' attribute of returned files is not mutable or
