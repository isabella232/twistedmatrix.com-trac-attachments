=== modified file 'twisted/web/_element.py'
--- twisted/web/_element.py	2011-03-21 13:17:42 +0000
+++ twisted/web/_element.py	2011-09-30 16:07:54 +0000
@@ -4,7 +4,7 @@
 
 from zope.interface import implements
 
-from twisted.web.iweb import IRenderable
+from twisted.web.iweb import IRenderable, ITemplateLoader
 
 from twisted.web.error import MissingRenderMethod, UnexposedMethodError
 from twisted.web.error import MissingTemplateLoader
@@ -182,3 +182,40 @@
             raise MissingTemplateLoader(self)
         return loader.load()
 
+
+class _StanLoader(object):
+    implements(ITemplateLoader)
+
+    def __init__(self, tag):
+        self.tag = tag
+
+
+    def load(self):
+        return self.tag
+
+
+class Namespace(Element):
+    """
+    Base for classes which introduce a new renderer namespace.
+
+    A L{Namespace} is very similar to an L{Element}, except that it does not
+    load a template. Rather, it's template is a L{Tag} provided directly. A
+    typical use looks like this::
+
+        @renderer
+        def inSeparateNamespace(self, request, tag):
+            return MyNamespace(tag, ...)
+
+    The implementation of C{MyNamespace} is then used to locate renderers as
+    the tag which had C{t:render="inSeparateNamespace"} on it.
+
+    This is useful because it provides a way to have renderers that reference
+    different state in multiple places in a document. For example, one may want
+    to render a list of clients, each which a list of contacts. An outer client
+    renderer can yield an instance of a Namespace for each client which has
+    been given a reference to the list of contacts. That Namespace can then
+    implement a renderer for each contact, which renders only the contacts for
+    the individual client with which it was created.
+    """
+    def __init__(self, tag):
+        self.loader = _StanLoader(tag)

=== modified file 'twisted/web/template.py'
--- twisted/web/template.py	2011-03-21 18:45:11 +0000
+++ twisted/web/template.py	2011-09-30 15:58:03 +0000
@@ -420,11 +420,11 @@
 
 
 
-from twisted.web._element import Element, renderer
+from twisted.web._element import Element, Namespace, renderer
 from twisted.web._flatten import flatten, flattenString
 
 __all__ = [
-    'TEMPLATE_NAMESPACE', 'VALID_HTML_TAG_NAMES', 'Element', 'renderer',
+    'TEMPLATE_NAMESPACE', 'VALID_HTML_TAG_NAMES', 'Element', 'Namespace', 'renderer',
     'flatten', 'flattenString', 'tags', 'Comment', 'CDATA', 'Tag', 'slot'
 ]
 

=== modified file 'twisted/web/test/test_template.py'
--- twisted/web/test/test_template.py	2011-03-21 13:17:42 +0000
+++ twisted/web/test/test_template.py	2011-09-30 15:59:01 +0000
@@ -9,10 +9,13 @@
 
 from cStringIO import StringIO
 
+from zope.interface.verify import verifyObject
+
 from twisted.internet.defer import succeed, gatherResults
 from twisted.trial.unittest import TestCase
 from twisted.web.template import (
-    Element, renderer, XMLFile, XMLString)
+    Element, Namespace, tags, renderer, XMLFile, XMLString)
+from twisted.web.iweb import ITemplateLoader
 
 from twisted.web.error import MissingTemplateLoader, MissingRenderMethod
 
@@ -454,3 +457,22 @@
         self.assertFlattensImmediately(e2, "<p>3 1</p>")
 
 
+class TestNamespace(FlattenTestCase):
+    """
+    Tests for L{Namespace}
+    """
+    def test_flatten(self):
+        class TestedNamespace(Namespace):
+            @renderer
+            def test(_, request, tag):
+                tag('rendered')
+                return tag
+
+        self.namespace = TestedNamespace(tags.i(render='test'))
+
+        verifyObject(ITemplateLoader, self.namespace.loader)
+
+        return self.assertFlattensTo(
+            self.namespace,
+            '<i>rendered</i>'
+        )

=== added file 'twisted/web/topfiles/5040.feature'
--- twisted/web/topfiles/5040.feature	1970-01-01 00:00:00 +0000
+++ twisted/web/topfiles/5040.feature	2011-09-30 16:10:53 +0000
@@ -0,0 +1,2 @@
+New class twisted.web.template.Namespace provides a mechanism to change the
+namespace used to find renderers for subtrees of a document tree.

