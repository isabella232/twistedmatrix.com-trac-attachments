Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 40138)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -1,4 +1,4 @@
-# -*- test-case-name: twisted.words.test.test_irc -*-
+    # -*- test-case-name: twisted.words.test.test_irc -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
@@ -1090,7 +1090,8 @@
     _heartbeat = None
     heartbeatInterval = 120
 
-    # cache of nickname prefixes from ServerSupportedFeatures, extracted by irc_RPL_NAMREPLY
+    # cache of nickname prefixes from ServerSupportedFeatures,
+    # extracted by irc_RPL_NAMREPLY
     _nickprefixes = None
 
 
@@ -1265,9 +1266,10 @@
         intact.
         """
 
-        
+
     def channelNames(self, channel, names):
-        """Called when a list of users in the channel has been requested.
+        """
+        Called when a list of users in the channel has been requested.
 
         Also called when first joining a channel.
 
@@ -1437,8 +1439,12 @@
         """
         Tells the server to give a list of users in the specified channels.
 
-        Multiple channels can be specified at one time, `channelNames` will be 
+        Multiple channels can be specified at one time, `channelNames` will be
         called multiple times, once for each channel.
+
+        @type channels: C{str}
+        @param channels: The name of the channel or or channels to request
+            the username lists for from the server.
         """
         # dump all names of all visible channels
         if not channels:
@@ -1446,7 +1452,7 @@
         else:
             # some servers do not support multiple channel names at once
             for channel in channels:
-                self.sendLine("NAMES %s" % channel)
+                self.sendLine("NAMES %s" % (channel,))
 
     def leave(self, channel, reason=None):
         """
@@ -1863,24 +1869,31 @@
         Called when the login was incorrect.
         """
         raise IRCPasswordMismatch("Password Incorrect.")
- 
 
+
     def irc_RPL_NAMREPLY(self, prefix, params):
         """
         Handles the raw NAMREPLY that is returned as answer to
         the NAMES command. Accumulates users until ENDOFNAMES.
+
+        @type prefix: C{str}
+        @param prefix: irc command prefix, irrelevant to this method
+        @type params: C{Array}
+        @param params: parameters for the RPL_NAMREPLY message
+            the third entry is the channel name and the fourth
+            is a space-delimited list of member usernames.
         """
         # cache nickname prefixes if not already parsed from ServerSupportedFeatures instance
         if not self._nickprefixes:
             self._nickprefixes = ''
             prefixes = self.supported.getFeature('PREFIX', {})
-            for prefix_tuple in prefixes.itervalues():
-                self._nickprefixes = self._nickprefixes + prefix_tuple[0]
+            for prefixTuple in prefixes.itervalues():
+                self._nickprefixes = self._nickprefixes + prefixTuple[0]
         channel = params[2]
-        prefixed_users = params[3].split()
+        prefixedUsers = params[3].split()
         users = []
-        for prefixed_user in prefixed_users:
-            users.append(prefixed_user.lstrip(self._nickprefixes))
+        for prefixedUser in prefixedUsers:
+            users.append(prefixedUser.lstrip(self._nickprefixes))
         self._namreply.setdefault(channel, []).extend(users)
 
 
@@ -1890,6 +1903,13 @@
         NAMREPLYs have finished. It gathers one, or all depending
         on the NAMES request, channel names lists gathered from
         RPL_NAMREPLY responses.
+
+        @type prefix: C{str}
+        @param prefix: irc command prefix, irrelevant to this method
+        @type params: C{Array}
+        @param params: parameters for the RPL_ENDOFNAMES message
+            the second entry will be the channel for which all
+            member usernames have already been sent to the client.
         """
         channel = params[1]
         if channel not in self._namreply:
Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 40138)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -2009,19 +2009,50 @@
     A L{twisted.words.protocols.irc.IRCClient} that implements some of the
     callback stubs for testing.
     """
+
+
     def __init__(self):
         self.userNamesByChannel = {}
 
+
     def clear(self):
+        """
+        Clear the stored map of recieved usernames by channel name.
+        """
         self.userNamesByChannel = {}
 
+
     def hasChannel(self, channel):
+        """
+        Convenience method to check if a channel is represented in the
+        usernames by channel map.
+
+        @type channel: C{str}
+        @param channel: channel name to check
+        """
         return channel in self.userNamesByChannel
 
+
     def getUsersByChannel(self, channel):
+        """
+        Return the current stored list of users by channel name.
+
+        @type channel: C{str}
+        @param channel: channel name
+        """
         return self.userNamesByChannel[channel]
 
+
     def channelNames(self, channel, names):
+        """
+        Associate the list of usernames to the channel name in the internal
+        map.
+
+        @type channel: C{str}
+        @param channel: channel name
+        @type names: C{Array}
+        @param names: list of usernames
+        """
         self.userNamesByChannel[channel] = names
 
 
@@ -2252,7 +2283,104 @@
             'spam', ['#greasyspooncafe', "I don't want any spam!"])
 
 
+    def test_names_no_channels(self):
+        """
+        L{IRCClient.names} sends one NAMES request with no channel arguments to the destination
+        server.
+        """
+        usersReply = 'someguy someotherguy'
+        oneChannel = 'justachannel'
+        self.protocol.names()
+        self.assertEqual(self.transport.value().rstrip(), 'NAMES')
+        self.protocol.irc_RPL_NAMREPLY(None, [None, None, oneChannel, usersReply])
+        self.protocol.irc_RPL_ENDOFNAMES(None, [None, oneChannel])
+        self.assertTrue(self.protocol.hasChannel(oneChannel))
+        self.assertEqual(self.protocol.getUsersByChannel(oneChannel), usersReply.split(' '))
+        self.transport.clear()
+        self.protocol.clear()
 
+
+    def test_names_one_channel(self):
+        """
+        L{IRCClient.names} sends one NAMES request with one channel argument to the destination
+        server.
+        """
+        usersReply = 'someguy someotherguy'
+        oneChannel = 'justachannel'
+        self.protocol.names(oneChannel)
+        self.assertEqual(self.transport.value().rstrip(), 'NAMES ' + oneChannel)
+        self.protocol.irc_RPL_NAMREPLY(None, [None, None, oneChannel, usersReply])
+        self.protocol.irc_RPL_ENDOFNAMES(None, [None, oneChannel])
+        self.assertTrue(self.protocol.hasChannel(oneChannel))
+        self.assertEqual(self.protocol.getUsersByChannel(oneChannel), usersReply.split(' '))
+        self.transport.clear()
+        self.protocol.clear()
+
+
+    def test_names_many_channels(self):
+        """
+        L{IRCClient.names} sends one NAMES request with one channel argument to the destination
+        server.
+        """
+        usersReply = 'someguy someotherguy'
+        manyChannels = ['justachannel', 'justanotherchannel', 'yetanotherchannel']
+        usersReplyByChannel = {
+            manyChannels[0]: usersReply,
+            manyChannels[1]: 'pinky thebrain',
+            manyChannels[2]: 'justme'
+        }
+        self.protocol.names(manyChannels[0], manyChannels[1], manyChannels[2])
+        expected = []
+        for channel in manyChannels:
+            expected.append('NAMES ' + channel)
+        self.assertEqual(self.transport.value().rstrip().split('\r\n'), expected)
+        self.protocol.irc_RPL_NAMREPLY(None, [None, None, manyChannels[0],
+                                              usersReplyByChannel[manyChannels[0]]])
+        self.protocol.irc_RPL_NAMREPLY(None, [None, None, manyChannels[1],
+                                              usersReplyByChannel[manyChannels[1]]])
+        self.protocol.irc_RPL_NAMREPLY(None, [None, None, manyChannels[2],
+                                              usersReplyByChannel[manyChannels[2]]])
+        self.protocol.irc_RPL_ENDOFNAMES(None, [None, None])
+        for channel in manyChannels:
+            self.assertTrue(self.protocol.hasChannel(channel))
+            self.assertEqual(self.protocol.getUsersByChannel(channel), usersReplyByChannel[channel].split(' '))
+        self.transport.clear()
+        self.protocol.clear()
+
+
+    def test_names_many_channels_many_user_types(self):
+        """
+        L{IRCClient.names} sends one NAMES request with one channel argument to the destination
+        server.
+        """
+        usersReply = 'someguy someotherguy'
+        manyChannels = ['justachannel', 'justanotherchannel', 'yetanotherchannel']
+        usersReplyByChannel = {
+            manyChannels[0]: usersReply,
+            manyChannels[1]: 'owner admin operator halfoperator voiced',
+            manyChannels[2]: 'justme'
+        }
+        server_reply_channel_2 = '~owner &admin @operator %halfoperator +voiced'
+        self.protocol.names(manyChannels[0], manyChannels[1], manyChannels[2])
+        expected = []
+        for channel in manyChannels:
+            expected.append('NAMES ' + channel)
+        self.assertEqual(self.transport.value().rstrip().split('\r\n'), expected)
+        self.protocol.irc_RPL_NAMREPLY(None, [None, None, manyChannels[0],
+                                              usersReplyByChannel[manyChannels[0]]])
+        self.protocol.irc_RPL_NAMREPLY(None, [None, None, manyChannels[1],
+                                              server_reply_channel_2])
+        self.protocol.irc_RPL_NAMREPLY(None, [None, None, manyChannels[2],
+                                              usersReplyByChannel[manyChannels[2]]])
+        self.protocol.irc_RPL_ENDOFNAMES(None, [None, None])
+        for channel in manyChannels:
+            self.assertTrue(self.protocol.hasChannel(channel))
+            self.assertEqual(self.protocol.getUsersByChannel(channel), usersReplyByChannel[channel].split(' '))
+        self.transport.clear()
+        self.protocol.clear()
+
+
+
 class CollectorClient(irc.IRCClient):
     """
     A client that saves in a list the names of the methods that got called.
@@ -2599,98 +2727,7 @@
                                       "DCC data :Unknown DCC type 'DATA'")]))])
 
 
-    def test_names_no_channels(self):
-        """
-        L{IRCClient.names} sends one NAMES request with no channel arguments to the destination
-        server.
-        """
-        users_reply = 'someguy someotherguy'
-        one_channel = 'justachannel'
-        self.protocol.names()
-        self.assertEqual(self.transport.value().rstrip(), 'NAMES')
-        self.protocol.irc_RPL_NAMREPLY(None, [None, None, one_channel, users_reply])
-        self.protocol.irc_RPL_ENDOFNAMES(None, [None, one_channel])
-        self.assertTrue(self.protocol.hasChannel(one_channel))
-        self.assertEqual(self.protocol.getUsersByChannel(one_channel), users_reply.split(' '))
-        self.transport.clear()
-        self.protocol.clear()
 
-
-    def test_names_one_channel(self):
-        """
-        L{IRCClient.names} sends one NAMES request with one channel argument to the destination
-        server.
-        """
-        users_reply = 'someguy someotherguy'
-        one_channel = 'justachannel'
-        self.protocol.names(one_channel)
-        self.assertEqual(self.transport.value().rstrip(), 'NAMES ' + one_channel)
-        self.protocol.irc_RPL_NAMREPLY(None, [None, None, one_channel, users_reply])
-        self.protocol.irc_RPL_ENDOFNAMES(None, [None, one_channel])
-        self.assertTrue(self.protocol.hasChannel(one_channel))
-        self.assertEqual(self.protocol.getUsersByChannel(one_channel), users_reply.split(' '))
-        self.transport.clear()
-        self.protocol.clear()
-
-
-    def test_names_many_channels(self):
-        """
-        L{IRCClient.names} sends one NAMES request with one channel argument to the destination
-        server.
-        """
-        users_reply = 'someguy someotherguy'
-        many_channels = ['justachannel', 'justanotherchannel', 'yetanotherchannel']
-        users_reply_by_channel = {
-            many_channels[0]: users_reply,
-            many_channels[1]: 'pinky thebrain',
-            many_channels[2]: 'justme'
-        }
-        self.protocol.names(many_channels[0], many_channels[1], many_channels[2])
-        expected = []
-        for channel in many_channels:
-            expected.append('NAMES ' + channel)
-        self.assertEqual(self.transport.value().rstrip().split('\r\n'), expected)
-        self.protocol.irc_RPL_NAMREPLY(None, [None, None, many_channels[0], users_reply_by_channel[many_channels[0]]])
-        self.protocol.irc_RPL_NAMREPLY(None, [None, None, many_channels[1], users_reply_by_channel[many_channels[1]]])
-        self.protocol.irc_RPL_NAMREPLY(None, [None, None, many_channels[2], users_reply_by_channel[many_channels[2]]])
-        self.protocol.irc_RPL_ENDOFNAMES(None, [None, None])
-        for channel in many_channels:
-            self.assertTrue(self.protocol.hasChannel(channel))
-            self.assertEqual(self.protocol.getUsersByChannel(channel), users_reply_by_channel[channel].split(' '))
-        self.transport.clear()
-        self.protocol.clear()
-
-
-    def test_names_many_channels_many_user_types(self):
-        """
-        L{IRCClient.names} sends one NAMES request with one channel argument to the destination
-        server.
-        """
-        users_reply = 'someguy someotherguy'
-        many_channels = ['justachannel', 'justanotherchannel', 'yetanotherchannel']
-        users_reply_by_channel = {
-            many_channels[0]: users_reply,
-            many_channels[1]: 'owner admin operator halfoperator voiced',
-            many_channels[2]: 'justme'
-        }
-        server_reply_channel_2 = '~owner &admin @operator %halfoperator +voiced'
-        self.protocol.names(many_channels[0], many_channels[1], many_channels[2])
-        expected = []
-        for channel in many_channels:
-            expected.append('NAMES ' + channel)
-        self.assertEqual(self.transport.value().rstrip().split('\r\n'), expected)
-        self.protocol.irc_RPL_NAMREPLY(None, [None, None, many_channels[0], users_reply_by_channel[many_channels[0]]])
-        self.protocol.irc_RPL_NAMREPLY(None, [None, None, many_channels[1], server_reply_channel_2])
-        self.protocol.irc_RPL_NAMREPLY(None, [None, None, many_channels[2], users_reply_by_channel[many_channels[2]]])
-        self.protocol.irc_RPL_ENDOFNAMES(None, [None, None])
-        for channel in many_channels:
-            self.assertTrue(self.protocol.hasChannel(channel))
-            self.assertEqual(self.protocol.getUsersByChannel(channel), users_reply_by_channel[channel].split(' '))
-        self.transport.clear()
-        self.protocol.clear()
-
-
-
 class DccChatFactoryTests(unittest.TestCase):
     """
     Tests for L{DccChatFactory}.
