Index: twisted/web/client.py
===================================================================
--- twisted/web/client.py	(Revision 34731)
+++ twisted/web/client.py	(Arbeitskopie)
@@ -1069,7 +1069,7 @@
 
 
     def _requestWithEndpoint(self, key, endpoint, method, parsedURI,
-                             headers, bodyProducer, requestPath):
+                             headers, bodyProducer, requestPath, timeout):
         """
         Issue a new request, given the endpoint and the path sent as part of
         the request.
@@ -1087,7 +1087,7 @@
         def cbConnected(proto):
             return proto.request(
                 Request(method, requestPath, headers, bodyProducer,
-                        persistent=self._pool.persistent))
+                        persistent=self._pool.persistent, timeout=timeout))
         d.addCallback(cbConnected)
         return d
 
@@ -1171,7 +1171,7 @@
             raise SchemeNotSupported("Unsupported scheme: %r" % (scheme,))
 
 
-    def request(self, method, uri, headers=None, bodyProducer=None):
+    def request(self, method, uri, headers=None, bodyProducer=None, timeout=0):
         """
         Issue a new request.
 
@@ -1204,7 +1204,8 @@
             return defer.fail(Failure())
         key = (parsedURI.scheme, parsedURI.host, parsedURI.port)
         return self._requestWithEndpoint(key, endpoint, method, parsedURI,
-                                         headers, bodyProducer, parsedURI.path)
+                                         headers, bodyProducer, parsedURI.path,
+                                         timeout)
 
 
 
Index: twisted/web/_newclient.py
===================================================================
--- twisted/web/_newclient.py	(Revision 34731)
+++ twisted/web/_newclient.py	(Arbeitskopie)
@@ -34,6 +34,7 @@
 from twisted.python.reflect import fullyQualifiedName
 from twisted.python.failure import Failure
 from twisted.python.compat import set
+from twisted.internet import reactor
 from twisted.internet.interfaces import IConsumer, IPushProducer
 from twisted.internet.error import ConnectionDone
 from twisted.internet.defer import Deferred, succeed, fail, maybeDeferred
@@ -565,12 +566,13 @@
     @ivar persistent: Set to C{True} when you use HTTP persistent connection.
     @type persistent: C{bool}
     """
-    def __init__(self, method, uri, headers, bodyProducer, persistent=False):
+    def __init__(self, method, uri, headers, bodyProducer, persistent=False, timeout=0):
         self.method = method
         self.uri = uri
         self.headers = headers
         self.bodyProducer = bodyProducer
         self.persistent = persistent
+        self.timeout = timeout
 
 
     def _writeHeaders(self, transport, TEorCL):
@@ -737,6 +739,9 @@
             been completely written to the transport or with a L{Failure} if
             there is any problem generating the request bytes.
         """
+        if self.timeout > 0:
+            td = reactor.callLater(self.timeout, transport.loseConnection)
+
         if self.bodyProducer is not None:
             if self.bodyProducer.length is UNKNOWN_LENGTH:
                 return self._writeToChunked(transport)
