diff --git twisted/python/test/test_versions.py twisted/python/test/test_versions.py
index 79388cf..f75a205 100644
--- twisted/python/test/test_versions.py
+++ twisted/python/test/test_versions.py
@@ -5,7 +5,7 @@ import sys
 from cStringIO import StringIO
 
 from twisted.python.versions import getVersionString, IncomparableVersions
-from twisted.python.versions import Version, _inf
+from twisted.python.versions import Version
 from twisted.python.filepath import FilePath
 
 from twisted.trial import unittest
@@ -101,23 +101,17 @@ class VersionsTest(unittest.TestCase):
         """
         va = Version("whatever", 1, 0, 0, prerelease=1)
         vb = Version("whatever", 1, 0, 0, prerelease=2)
+        vc = Version("whatever", 1, 0, 0, prerelease=2)
+
         self.assertTrue(va < vb)
         self.assertFalse(va > vb)
         self.assertNotEqual(va, vb)
-
-
-    def test_infComparison(self):
-        """
-        L{_inf} is equal to L{_inf}.
-
-        This is a regression test.
-        """
-        self.assertEqual(_inf, _inf)
+        self.assertEqual(vb, vc)
 
 
     def testDontAllowBuggyComparisons(self):
         self.assertRaises(IncomparableVersions,
-                          cmp,
+                          Version._cmp,
                           Version("dummy", 1, 0, 0),
                           Version("dumym", 1, 0, 0))
 
diff --git twisted/python/versions.py twisted/python/versions.py
index d6f6715..0d9a48d 100644
--- twisted/python/versions.py
+++ twisted/python/versions.py
@@ -11,25 +11,6 @@ See L{Version}.
 import sys, os
 
 
-class _inf(object):
-    """
-    An object that is bigger than all other objects.
-    """
-    def __cmp__(self, other):
-        """
-        @param other: Another object.
-        @type other: any
-
-        @return: 0 if other is inf, 1 otherwise.
-        @rtype: C{int}
-        """
-        if other is _inf:
-            return 0
-        return 1
-
-_inf = _inf()
-
-
 class IncomparableVersions(TypeError):
     """
     Two versions could not be compared.
@@ -111,8 +92,43 @@ class Version(object):
             self.package,
             self.short())
 
+    def __eq__(self, other):
+        c = self._cmp(other)
+        if c is NotImplemented:
+            return c
+        return c == 0
+
+    def __ne__(self, other):
+        c = self._cmp(other)
+        if c is NotImplemented:
+            return c
+        return c != 0
+
+    def __lt__(self, other):
+        c = self._cmp(other)
+        if c is NotImplemented:
+            return c
+        return c < 0
 
-    def __cmp__(self, other):
+    def __le__(self, other):
+        c = self._cmp(other)
+        if c is NotImplemented:
+            return c
+        return c <= 0
+
+    def __gt__(self, other):
+        c = self._cmp(other)
+        if c is NotImplemented:
+            return c
+        return c > 0
+
+    def __ge__(self, other):
+        c = self._cmp(other)
+        if c is NotImplemented:
+            return c
+        return c >= 0
+
+    def _cmp(self, other):
         """
         Compare two versions, considering major versions, minor versions, micro
         versions, then prereleases.
@@ -136,25 +152,29 @@ class Version(object):
             raise IncomparableVersions("%r != %r"
                                        % (self.package, other.package))
 
-        if self.prerelease is None:
-            prerelease = _inf
-        else:
-            prerelease = self.prerelease
-
-        if other.prerelease is None:
-            otherpre = _inf
-        else:
-            otherpre = other.prerelease
+        v1 = (self.major, self.minor, self.micro)
+        v2 = (other.major, other.minor, other.micro)
+        
+        if v1 != v2:
+            # if version number don't match, the prerelease doesn't matter
+            if v1 < v2:
+                return -1
+            else:
+                return 1
 
-        x = cmp((self.major,
-                    self.minor,
-                    self.micro,
-                    prerelease),
-                   (other.major,
-                    other.minor,
-                    other.micro,
-                    otherpre))
-        return x
+        if (not self.prerelease and not other.prerelease):
+            return 0
+        elif (self.prerelease and not other.prerelease):
+            return -1
+        elif (not self.prerelease and other.prerelease):
+            return 1
+        elif (self.prerelease and other.prerelease):
+            if self.prerelease == other.prerelease:
+                return 0
+            elif self.prerelease < other.prerelease:
+                return -1
+            else:
+                return 1
 
 
     def _parseSVNEntries_4(self, entriesFile):
