Index: twisted/protocols/ftp.py
===================================================================
--- twisted/protocols/ftp.py	(revision 18389)
+++ twisted/protocols/ftp.py	(working copy)
@@ -2330,8 +2330,8 @@
 
     If I can't find the path, I return C{None}.
     """
-    match = re.search('".*"', response)
+    match = re.search('(".*")', response)
     if match:
-        return match.groups()[0]
+        return match.groups()[0][1:-1]
     else:
         return None
Index: twisted/test/test_ftp.py
===================================================================
--- twisted/test/test_ftp.py	(revision 18389)
+++ twisted/test/test_ftp.py	(working copy)
@@ -12,6 +12,7 @@
 import os.path
 from StringIO import StringIO
 import shutil
+import tempfile
 
 from twisted.trial import unittest
 from twisted.protocols import basic
@@ -591,6 +592,189 @@
         self.failUnless(m, m)
 
 
+class FTPWriteRealm(ftp.FTPRealm):
+    """
+    Sample FTP realm with write access for everyone.
+    """
+    def requestAvatar(self, avatarId, mind, *interfaces):
+        for iface in interfaces:
+            if iface is ftp.IFTPShell:
+                avatar = ftp.FTPShell(self.anonymousRoot)
+                return (ftp.IFTPShell, avatar,
+                        getattr(avatar, 'logout', lambda: None))
+        raise NotImplementedError(
+            "Only IFTPShell interface is supported by this realm")
+
+class FTPClientAndServerTestCase(FTPServerTestCase):
+    """
+    Test both client and server: call client commands and verify their response.
+    """
+    def setUp(self):
+        # Create a directory
+        self.directory = self.mktemp()
+        os.mkdir(self.directory)
+
+        # Start the server
+        p = portal.Portal(FTPWriteRealm(self.directory))
+        p.registerChecker(checkers.AllowAnonymousAccess(),
+                          credentials.IAnonymous)
+        self.factory = ftp.FTPFactory(portal=p)
+        self.port = reactor.listenTCP(0, self.factory, interface="127.0.0.1")
+
+        # Hook the server's buildProtocol to make the protocol instance
+        # accessible to tests.
+        buildProtocol = self.factory.buildProtocol
+        d1 = defer.Deferred()
+        def _rememberProtocolInstance(addr):
+            protocol = buildProtocol(addr)
+            self.serverProtocol = protocol.wrappedProtocol
+            d1.callback(None)
+            return protocol
+        self.factory.buildProtocol = _rememberProtocolInstance
+
+        # Connect a client to it
+        portNum = self.port.getHost().port
+        clientCreator = protocol.ClientCreator(reactor, ftp.FTPClient)
+        d2 = clientCreator.connectTCP("127.0.0.1", portNum)
+        def gotClient(client):
+            self.client = client
+        d2.addCallback(gotClient)
+        return defer.gatherResults([d1, d2])
+
+    def testRETR(self):
+        """
+        Test the RETR command: get a file and verify its content.
+        """
+        fdTmpFile, tmpFile = tempfile.mkstemp('', '', self.directory)
+        os.write(fdTmpFile, 'x' * 1000)
+        os.close(fdTmpFile)
+        tmpFile = os.path.split(tmpFile)[-1]
+        d = self._anonymousLogin()
+        def cb(res):
+            proto = _BufferingProtocol()
+            d = self.client.retrieveFile(tmpFile, proto
+                ).addCallback(cbRetr, proto)
+            return d
+        def cbRetr(res, proto):
+            self.assertEquals(proto.buffer, 'x' * 1000)
+        d.addCallback(cb)
+        return d
+
+    def testSTORE(self):
+        """
+        Test the STORE command: send a file and verify its content.
+        """
+        inDirectory = self.mktemp()
+        os.mkdir(inDirectory)
+        fdTmpFile, tmpFile = tempfile.mkstemp('', '', inDirectory)
+        os.write(fdTmpFile, 'x' * 1000)
+        os.close(fdTmpFile)
+        relTmpFile = os.path.split(tmpFile)[-1]
+        d = self._anonymousLogin()
+        def cb(res):
+            d1, d2 = self.client.storeFile(relTmpFile)
+            d1.addCallback(cbStore)
+            return d2
+        def cbStore(sender):
+            d = basic.FileSender().beginFileTransfer(file(tmpFile), sender.transport)
+            d.addCallback(cbFinish, sender)
+            sender.deferred.addCallback(cbEnd)
+        def cbFinish(ign, sender):
+            sender.finish()
+        def cbEnd(ign):
+            self.assertEquals(file(os.path.join(self.directory, relTmpFile)
+                              ).read(), 'x' * 1000)
+            shutil.rmtree(inDirectory)
+        d.addCallback(cb)
+        return d
+
+    def testLIST(self):
+        """
+        Test the LIST command: create some files on the server, and verify
+        their presence.
+        """
+        fdFile, tmpFile1 = tempfile.mkstemp('', '', self.directory)
+        os.close(fdFile)
+        fdFile, tmpFile2 = tempfile.mkstemp('', '', self.directory)
+        os.close(fdFile)
+        d = self._anonymousLogin()
+        def cb(res):
+            fileList = ftp.FTPFileListProtocol()
+            return self.client.list('.', fileList).addCallback(cbList, fileList)
+        def cbList(res, fileList):
+            fls = [f["filename"] for f in fileList.files]
+            expected = [os.path.split(tmpFile1)[1], os.path.split(tmpFile2)[1]]
+            expected.sort()
+            fls.sort()
+            self.assertEquals(fls, expected)
+        d.addCallback(cb)
+        return d
+
+    def testNLST(self):
+        """
+        Test the NLST command.
+        """
+        fdFile, tmpFile1 = tempfile.mkstemp('', '', self.directory)
+        os.close(fdFile)
+        fdFile, tmpFile2 = tempfile.mkstemp('', '', self.directory)
+        os.close(fdFile)
+        d = self._anonymousLogin()
+        def cb(res):
+            proto = _BufferingProtocol()
+            return self.client.nlst('.', proto).addCallback(cbList, proto)
+        def cbList(res, proto):
+            fls = proto.buffer.splitlines()
+            expected = [os.path.split(tmpFile1)[1], os.path.split(tmpFile2)[1]]
+            expected.sort()
+            fls.sort()
+            self.assertEquals(fls, expected)
+        d.addCallback(cb)
+        return d
+
+    def testCWD(self):
+        """
+        Test the CWD command.
+        """
+        tmpDir = os.path.split(tempfile.mkdtemp('', '', self.directory))[-1]
+        d = self._anonymousLogin()
+        def cb(res):
+            return self.client.cwd(tmpDir).addCallback(cbCwd)
+        def cbCwd(res):
+            return self.client.pwd().addCallback(cbPwd)
+        def cbPwd(res):
+            self.assertEquals(ftp.parsePWDResponse(res[0]), "/" + tmpDir)
+        d.addCallback(cb)
+        return d
+
+    def testCDUP(self):
+        """
+        Test the CDUP command.
+        """
+        tmpDir = os.path.split(tempfile.mkdtemp('', '', self.directory))[-1]
+        d = self._anonymousLogin()
+        def cb(res):
+            return self.client.cwd(tmpDir).addCallback(cbCwd)
+        def cbCwd(res):
+            return self.client.cdup().addCallback(cbCdup)
+        def cbCdup(res):
+            return self.client.pwd().addCallback(cbPwd)
+        def cbPwd(res):
+            self.assertEquals(ftp.parsePWDResponse(res[0]), "/")
+        d.addCallback(cb)
+        return d
+
+    def testPWD(self):
+        """
+        Test the PWD command.
+        """
+        d = self._anonymousLogin()
+        def cb(res):
+            return self.client.pwd().addCallback(cbPwd)
+        def cbPwd(res):
+            self.assertEquals(ftp.parsePWDResponse(res[0]), "/")
+        d.addCallback(cb)
+        return d
+
 class DummyTransport:
     def write(self, bytes):
         pass
