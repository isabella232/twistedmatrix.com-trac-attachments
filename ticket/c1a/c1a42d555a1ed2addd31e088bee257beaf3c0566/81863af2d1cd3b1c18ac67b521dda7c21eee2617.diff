Index: twisted/python/reflect.py
===================================================================
--- twisted/python/reflect.py	(revision 38232)
+++ twisted/python/reflect.py	(working copy)
@@ -7,6 +7,8 @@
 with Python's reflection capabilities.
 """
 
+from __future__ import print_function
+
 import sys
 import types
 import pickle
@@ -18,11 +20,6 @@
 RegexType = type(re.compile(""))
 
 
-try:
-    from cStringIO import StringIO
-except ImportError:
-    from StringIO import StringIO
-
 from twisted.python.deprecate import deprecated, deprecatedModuleAttribute
 from twisted.python.deprecate import _fullyQualifiedName as fullyQualifiedName
 from twisted.python.versions import Version
@@ -509,7 +506,7 @@
                                    'member_descriptor', 'getset_descriptor')):
         pass
     elif showUnknowns:
-        print 'unknown type', type(start), start
+        print('unknown type', type(start), start)
     return paths
 
 
Index: twisted/python/lockfile.py
===================================================================
--- twisted/python/lockfile.py	(revision 38232)
+++ twisted/python/lockfile.py	(working copy)
@@ -40,7 +40,7 @@
         def kill(pid, signal):
             try:
                 OpenProcess(0, 0, pid)
-            except pywintypes.error, e:
+            except pywintypes.error as e:
                 if e.args[0] == ERROR_ACCESS_DENIED:
                     return
                 elif e.args[0] == ERROR_INVALID_PARAMETER:
@@ -69,8 +69,8 @@
 
     def readlink(filename):
         try:
-            fObj = _open(os.path.join(filename,'symlink'), 'rb')
-        except IOError, e:
+            fObj = _open(os.path.join(filename, 'symlink'), 'rb')
+        except IOError as e:
             if e.errno == errno.ENOENT or e.errno == errno.EIO:
                 raise OSError(e.errno, None)
             raise
@@ -125,7 +125,7 @@
         while True:
             try:
                 symlink(str(os.getpid()), self.name)
-            except OSError, e:
+            except OSError as e:
                 if _windows and e.errno in (errno.EACCES, errno.EIO):
                     # The lock is in the middle of being deleted because we're
                     # on Windows where lock removal isn't atomic.  Give up, we
@@ -134,13 +134,13 @@
                 if e.errno == errno.EEXIST:
                     try:
                         pid = readlink(self.name)
-                    except OSError, e:
+                    except OSError as e:
                         if e.errno == errno.ENOENT:
                             # The lock has vanished, try to claim it in the
                             # next iteration through the loop.
                             continue
                         raise
-                    except IOError, e:
+                    except IOError as e:
                         if _windows and e.errno == errno.EACCES:
                             # The lock is in the middle of being
                             # deleted because we're on Windows where
@@ -152,13 +152,13 @@
                     try:
                         if kill is not None:
                             kill(int(pid), 0)
-                    except OSError, e:
+                    except OSError as e:
                         if e.errno == errno.ESRCH:
                             # The owner has vanished, try to claim it in the next
                             # iteration through the loop.
                             try:
                                 rmlink(self.name)
-                            except OSError, e:
+                            except OSError as e:
                                 if e.errno == errno.ENOENT:
                                     # Another process cleaned up the lock.
                                     # Race them to acquire it in the next
Index: twisted/internet/posixbase.py
===================================================================
--- twisted/internet/posixbase.py	(revision 38232)
+++ twisted/internet/posixbase.py	(working copy)
@@ -21,7 +21,7 @@
     IReactorTCP, IReactorUDP, IReactorSSL, IReactorSocket)
 from twisted.internet.interfaces import IReactorProcess, IReactorMulticast
 from twisted.internet.interfaces import IHalfCloseableDescriptor
-from twisted.internet import error, udp, tcp
+from twisted.internet import error, udp, tcp, unix
 
 from twisted.python import log, failure, util
 from twisted.python.runtime import platformType, platform
@@ -392,18 +392,12 @@
 
     def connectUNIX(self, address, factory, timeout=30, checkPID=0):
         assert unixEnabled, "UNIX support is not present"
-        # Move this import back up to main level when twisted.internet.unix is
-        # ported to Python 3:
-        from twisted.internet import unix
         c = unix.Connector(address, factory, timeout, self, checkPID)
         c.connect()
         return c
 
     def listenUNIX(self, address, factory, backlog=50, mode=0o666, wantPID=0):
         assert unixEnabled, "UNIX support is not present"
-        # Move this import back up to main level when twisted.internet.unix is
-        # ported to Python 3:
-        from twisted.internet import unix
         p = unix.Port(address, factory, backlog, mode, self, wantPID)
         p.startListening()
         return p
@@ -421,9 +415,6 @@
         @returns: object conforming to L{IListeningPort}.
         """
         assert unixEnabled, "UNIX support is not present"
-        # Move this import back up to main level when twisted.internet.unix is
-        # ported to Python 3:
-        from twisted.internet import unix
         p = unix.DatagramPort(address, protocol, maxPacketSize, mode, self)
         p.startListening()
         return p
@@ -436,9 +427,6 @@
         EXPERIMENTAL.
         """
         assert unixEnabled, "UNIX support is not present"
-        # Move this import back up to main level when twisted.internet.unix is
-        # ported to Python 3:
-        from twisted.internet import unix
         p = unix.ConnectedDatagramPort(address, protocol, maxPacketSize, mode, bindAddress, self)
         p.startListening()
         return p
Index: twisted/internet/endpoints.py
===================================================================
--- twisted/internet/endpoints.py	(revision 38232)
+++ twisted/internet/endpoints.py	(working copy)
@@ -56,6 +56,7 @@
 __all3__ = ["TCP4ServerEndpoint", "TCP6ServerEndpoint",
             "TCP4ClientEndpoint", "TCP6ClientEndpoint",
             "SSL4ServerEndpoint", "SSL4ClientEndpoint",
+            "UNIXServerEndpoint", "UNIXClientEndpoint",
             ]
 
 
Index: twisted/internet/unix.py
===================================================================
--- twisted/internet/unix.py	(revision 38232)
+++ twisted/internet/unix.py	(working copy)
@@ -15,7 +15,7 @@
 import os, sys, stat, socket, struct
 from errno import EINTR, EMSGSIZE, EAGAIN, EWOULDBLOCK, ECONNREFUSED, ENOBUFS
 
-from zope.interface import implements, implementsOnly, implementedBy
+from zope.interface import implementedBy, implementer, implementer_only
 
 if not hasattr(socket, 'AF_UNIX'):
     raise ImportError("UNIX sockets not supported on this platform")
@@ -41,7 +41,7 @@
     return [(socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, packed)]
 
 
-
+@implementer(interfaces.IUNIXTransport)
 class _SendmsgMixin(object):
     """
     Mixin for stream-oriented UNIX transports which uses sendmsg and recvmsg to
@@ -60,7 +60,6 @@
         descriptors to accept and queue for sending before pausing the
         registered producer, if there is one.
     """
-    implements(interfaces.IUNIXTransport)
 
     _writeSomeDataBase = None
     _fileDescriptorBufferSize = 64
@@ -126,7 +125,7 @@
                     untilConcludes(
                         sendmsg.send1msg, self.socket.fileno(), data[index], 0,
                         _ancillaryDescriptor(fd))
-                except socket.error, se:
+                except socket.error as se:
                     if se.args[0] in (EWOULDBLOCK, ENOBUFS):
                         return index
                     else:
@@ -159,7 +158,7 @@
         try:
             data, flags, ancillary = untilConcludes(
                 sendmsg.recv1msg, self.socket.fileno(), 0, self.bufferSize)
-        except socket.error, se:
+        except socket.error as se:
             if se.args[0] == EWOULDBLOCK:
                 return
             else:
@@ -244,7 +243,7 @@
     transport = Server
     lockFile = None
 
-    def __init__(self, fileName, factory, backlog=50, mode=0666, reactor=None, wantPID = 0):
+    def __init__(self, fileName, factory, backlog=50, mode=0o666, reactor=None, wantPID=0):
         tcp.Port.__init__(self, fileName, factory, backlog, reactor=reactor)
         self.mode = mode
         self.wantPID = wantPID
@@ -271,7 +270,7 @@
         if self.wantPID:
             self.lockFile = lockfile.FilesystemLock(self.port + ".lock")
             if not self.lockFile.lock():
-                raise CannotListenError, (None, self.port, "Cannot acquire lock")
+                raise CannotListenError(None, self.port, "Cannot acquire lock")
             else:
                 if not self.lockFile.clean:
                     try:
@@ -289,8 +288,8 @@
         try:
             skt = self.createInternetSocket()
             skt.bind(self.port)
-        except socket.error, le:
-            raise CannotListenError, (None, self.port, le)
+        except socket.error as le:
+            raise CannotListenError(None, self.port, le)
         else:
             if _inFilesystemNamespace(self.port):
                 # Make the socket readable and writable to the world.
@@ -355,14 +354,13 @@
         return address.UNIXAddress(self.address)
 
 
+@implementer(interfaces.IUNIXDatagramTransport)
 class DatagramPort(_UNIXPort, udp.Port):
     """Datagram UNIX port, listening for packets."""
 
-    implements(interfaces.IUNIXDatagramTransport)
-
     addressFamily = socket.AF_UNIX
 
-    def __init__(self, addr, proto, maxPacketSize=8192, mode=0666, reactor=None):
+    def __init__(self, addr, proto, maxPacketSize=8192, mode=0o666, reactor=None):
         """Initialize with address to listen on.
         """
         udp.Port.__init__(self, addr, proto, maxPacketSize=maxPacketSize, reactor=reactor)
@@ -383,8 +381,8 @@
             skt = self.createInternetSocket() # XXX: haha misnamed method
             if self.port:
                 skt.bind(self.port)
-        except socket.error, le:
-            raise error.CannotListenError, (None, self.port, le)
+        except socket.error as le:
+            raise error.CannotListenError(None, self.port, le)
         if self.port and _inFilesystemNamespace(self.port):
             # Make the socket readable and writable to the world.
             os.chmod(self.port, self.mode)
@@ -396,12 +394,12 @@
         """Write a datagram."""
         try:
             return self.socket.sendto(datagram, address)
-        except socket.error, se:
+        except socket.error as se:
             no = se.args[0]
             if no == EINTR:
                 return self.write(datagram, address)
             elif no == EMSGSIZE:
-                raise error.MessageLengthError, "message too long"
+                raise error.MessageLengthError("message too long")
             elif no == EAGAIN:
                 # oh, well, drop the data. The only difference from UDP
                 # is that UDP won't ever notice.
@@ -431,16 +429,14 @@
         self.logstr = reflect.qual(self.protocol.__class__) + " (UDP)"
 
 
-
+@implementer_only(interfaces.IUNIXDatagramConnectedTransport,
+                   *(implementedBy(base.BasePort)))
 class ConnectedDatagramPort(DatagramPort):
     """
     A connected datagram UNIX socket.
     """
 
-    implementsOnly(interfaces.IUNIXDatagramConnectedTransport,
-                   *(implementedBy(base.BasePort)))
-
-    def __init__(self, addr, proto, maxPacketSize=8192, mode=0666,
+    def __init__(self, addr, proto, maxPacketSize=8192, mode=0o666,
                  bindAddress=None, reactor=None):
         assert isinstance(proto, protocol.ConnectedDatagramProtocol)
         DatagramPort.__init__(self, bindAddress, proto, maxPacketSize, mode,
@@ -479,7 +475,7 @@
                 data, addr = self.socket.recvfrom(self.maxPacketSize)
                 read += len(data)
                 self.protocol.datagramReceived(data)
-            except socket.error, se:
+            except socket.error as se:
                 no = se.args[0]
                 if no in (EAGAIN, EINTR, EWOULDBLOCK):
                     return
@@ -497,12 +493,12 @@
         """
         try:
             return self.socket.send(data)
-        except socket.error, se:
+        except socket.error as se:
             no = se.args[0]
             if no == EINTR:
                 return self.write(data)
             elif no == EMSGSIZE:
-                raise error.MessageLengthError, "message too long"
+                raise error.MessageLengthError("message too long")
             elif no == ECONNREFUSED:
                 self.protocol.connectionRefused()
             elif no == EAGAIN:
Index: twisted/internet/test/test_unix.py
===================================================================
--- twisted/internet/test/test_unix.py	(revision 38232)
+++ twisted/internet/test/test_unix.py	(working copy)
@@ -5,6 +5,7 @@
 Tests for implementations of L{IReactorUNIX}.
 """
 
+import sys
 from stat import S_IMODE
 from os import stat, close
 from tempfile import mktemp
@@ -16,7 +17,7 @@
 except ImportError:
     AF_UNIX = None
 
-from zope.interface import implements
+from zope.interface import implements, implementer
 
 from twisted.python.log import addObserver, removeObserver, err
 from twisted.python.failure import Failure
@@ -56,7 +57,7 @@
         Assert that the mode of the created unix socket is set to the mode
         specified to the reactor method.
         """
-        mode = 0600
+        mode = 0o600
         reactor = self.buildReactor()
         unixPort = getattr(reactor, methodName)(path, factory, mode=mode)
         unixPort.stopListening()
@@ -70,7 +71,7 @@
     # Use the test cases's mktemp to get something unique, but also squash it
     # down to make sure it fits in the unix socket path limit (something around
     # 110 bytes).
-    return md5(case.mktemp()).hexdigest()
+    return md5(case.mktemp().encode(sys.getfilesystemencoding())).hexdigest()
 
 
 
@@ -135,7 +136,7 @@
         self.reason = reason
 
 
-
+@implementer(IFileDescriptorReceiver)
 class ReceiveFileDescriptor(ConnectableProtocol):
     """
     L{ReceiveFileDescriptor} provides an API for waiting for file descriptors to
@@ -148,8 +149,6 @@
         received, or with a failure if the connection is lost with no descriptor
         arriving.
     """
-    implements(IFileDescriptorReceiver)
-
     reason = None
     waiting = None
 
Index: admin/_twistedpython3.py
===================================================================
--- admin/_twistedpython3.py	(revision 38232)
+++ admin/_twistedpython3.py	(working copy)
@@ -52,6 +52,7 @@
     "twisted.internet.test.reactormixins",
     "twisted.internet.threads",
     "twisted.internet.udp",
+    "twisted.internet.unix",
     "twisted.internet.util",
     "twisted.names",
     "twisted.names.cache",
@@ -140,6 +141,7 @@
     "twisted.internet.test.test_tls",
     "twisted.internet.test.test_udp",
     "twisted.internet.test.test_udp_internals",
+    "twisted.internet.test.test_unix",
     "twisted.names.test.test_cache",
     "twisted.names.test.test_client",
     "twisted.names.test.test_common",
