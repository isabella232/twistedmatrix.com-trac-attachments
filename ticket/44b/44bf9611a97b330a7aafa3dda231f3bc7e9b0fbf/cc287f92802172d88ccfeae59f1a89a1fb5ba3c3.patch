diff --git setup3.py setup3.py
index cc54546..f01b521 100644
--- setup3.py
+++ setup3.py
@@ -110,6 +110,7 @@ modules = [
     "twisted.web.test",
     "twisted.web.test.requesthelper",
     "twisted.web._version",
+    "twisted.web.static",
 ]
 
 
@@ -197,6 +198,7 @@ testModules = [
     "twisted.web.test.test_http_headers",
     "twisted.web.test.test_resource",
     "twisted.web.test.test_web",
+    "twisted.web.test.test_static",
 ]
 
 
diff --git twisted/persisted/styles.py twisted/persisted/styles.py
index e3ca39b..93c06ba 100644
--- twisted/persisted/styles.py
+++ twisted/persisted/styles.py
@@ -10,19 +10,18 @@ Different styles of persisted objects.
 
 # System Imports
 import types
-import copy_reg
+try:
+    import copyreg
+except ImportError:
+    import copy_reg as copyreg
 import copy
 import inspect
 import sys
 
-try:
-    import cStringIO as StringIO
-except ImportError:
-    import StringIO
-
 # Twisted Imports
 from twisted.python import log
 from twisted.python import reflect
+from twisted.python.compat import NativeStringIO as StringIO
 
 oldModules = {}
 
@@ -30,7 +29,7 @@ oldModules = {}
 ## be registerable...
 
 def pickleMethod(method):
-    'support function for copy_reg to pickle method refs'
+    'support function for copyreg to pickle method refs'
     return unpickleMethod, (method.im_func.__name__,
                              method.im_self,
                              method.im_class)
@@ -38,7 +37,7 @@ def pickleMethod(method):
 def unpickleMethod(im_name,
                     im_self,
                     im_class):
-    'support function for copy_reg to unpickle method refs'
+    'support function for copyreg to unpickle method refs'
     try:
         unbound = getattr(im_class,im_name)
         if im_self is None:
@@ -58,16 +57,16 @@ def unpickleMethod(im_name,
         bound = types.MethodType(unbound.im_func, im_self, im_self.__class__)
         return bound
 
-copy_reg.pickle(types.MethodType,
+copyreg.pickle(types.MethodType,
                 pickleMethod,
                 unpickleMethod)
 
 def pickleModule(module):
-    'support function for copy_reg to pickle module refs'
+    'support function for copyreg to pickle module refs'
     return unpickleModule, (module.__name__,)
 
 def unpickleModule(name):
-    'support function for copy_reg to unpickle module refs'
+    'support function for copyreg to unpickle module refs'
     if name in oldModules:
         log.msg("Module has moved: %s" % name)
         name = oldModules[name]
@@ -75,12 +74,12 @@ def unpickleModule(name):
     return __import__(name,{},{},'x')
 
 
-copy_reg.pickle(types.ModuleType,
+copyreg.pickle(types.ModuleType,
                 pickleModule,
                 unpickleModule)
 
 def pickleStringO(stringo):
-    'support function for copy_reg to pickle StringIO.OutputTypes'
+    'support function for copyreg to pickle StringIO.OutputTypes'
     return unpickleStringO, (stringo.getvalue(), stringo.tell())
 
 def unpickleStringO(val, sek):
@@ -90,7 +89,7 @@ def unpickleStringO(val, sek):
     return x
 
 if hasattr(StringIO, 'OutputType'):
-    copy_reg.pickle(StringIO.OutputType,
+    copyreg.pickle(StringIO.OutputType,
                     pickleStringO,
                     unpickleStringO)
 
@@ -104,7 +103,7 @@ def unpickleStringI(val, sek):
 
 
 if hasattr(StringIO, 'InputType'):
-    copy_reg.pickle(StringIO.InputType,
+    copyreg.pickle(StringIO.InputType,
                 pickleStringI,
                 unpickleStringI)
 
diff --git twisted/python/modules.py twisted/python/modules.py
index 11455be..421af62 100644
--- twisted/python/modules.py
+++ twisted/python/modules.py
@@ -62,7 +62,7 @@ import sys
 import zipimport
 import inspect
 import warnings
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 
 from twisted.python.components import registerAdapter
 from twisted.python.filepath import FilePath, UnlistableError
@@ -476,16 +476,16 @@ class IPathImportMapper(Interface):
         L{ZipPath}, but more might be added later).
         """
 
+@implementer(IPathImportMapper)
 class _DefaultMapImpl:
     """ Wrapper for the default importer, i.e. None.  """
-    implements(IPathImportMapper)
     def mapPath(self, fsPathString):
         return FilePath(fsPathString)
 _theDefaultMapper = _DefaultMapImpl()
 
+@implementer(IPathImportMapper)
 class _ZipMapImpl:
     """ IPathImportMapper implementation for zipimport.ZipImporter.  """
-    implements(IPathImportMapper)
     def __init__(self, importer):
         self.importer = importer
 
diff --git twisted/python/reflect.py twisted/python/reflect.py
index 4baf090..f1d4a6b 100644
--- twisted/python/reflect.py
+++ twisted/python/reflect.py
@@ -18,11 +18,7 @@ from collections import deque
 RegexType = type(re.compile(""))
 
 
-try:
-    from cStringIO import StringIO
-except ImportError:
-    from StringIO import StringIO
-
+from twisted.python.compat import NativeStringIO as StringIO
 from twisted.python.deprecate import deprecated, deprecatedModuleAttribute
 from twisted.python.deprecate import _fullyQualifiedName as fullyQualifiedName
 from twisted.python.versions import Version
@@ -509,7 +505,7 @@ def objgrep(start, goal, eq=isLike, path='', paths=None, seen=None, showUnknowns
                                    'member_descriptor', 'getset_descriptor')):
         pass
     elif showUnknowns:
-        print 'unknown type', type(start), start
+        print('unknown type', type(start), start)
     return paths
 
 
diff --git twisted/python/urlpath.py twisted/python/urlpath.py
index 1c15f09..2e67926 100644
--- twisted/python/urlpath.py
+++ twisted/python/urlpath.py
@@ -4,7 +4,10 @@
 
 #
 
-import urlparse
+try:
+    from urlparse import urlsplit
+except ImportError:
+    from urllib.parse import urlsplit
 import urllib
 
 class URLPath:
diff --git twisted/python/zippath.py twisted/python/zippath.py
index a82f253..c29addd 100644
--- twisted/python/zippath.py
+++ twisted/python/zippath.py
@@ -27,7 +27,7 @@ else:
 
 from twisted.python.filepath import IFilePath, FilePath, AbstractFilePath
 
-from zope.interface import implements
+from zope.interface import implementer
 
 # using FilePath here exclusively rather than os to make sure that we don't do
 # anything OS-path-specific here.
@@ -36,13 +36,12 @@ ZIP_PATH_SEP = '/'              # In zipfiles, "/" is universally used as the
                                 # path separator, regardless of platform.
 
 
+@implementer(IFilePath)
 class ZipPath(AbstractFilePath):
     """
     I represent a file or directory contained within a zip file.
     """
 
-    implements(IFilePath)
-
     sep = ZIP_PATH_SEP
 
     def __init__(self, archive, pathInArchive):
diff --git twisted/web/_element.py twisted/web/_element.py
index 3c15b3b..621d7e9 100644
--- twisted/web/_element.py
+++ twisted/web/_element.py
@@ -2,7 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.web.iweb import IRenderable
 
@@ -31,7 +31,7 @@ class Expose(object):
         Add one or more functions to the set of exposed functions.
 
         This is a way to declare something about a class definition, similar to
-        L{zope.interface.implements}.  Use it like this::
+        L{zope.interface.implementer}.  Use it like this::
 
             magic = Expose('perform extra magic')
             class Foo(Bar):
@@ -122,6 +122,7 @@ def renderer():
 
 
 
+@implementer(IRenderable)
 class Element(object):
     """
     Base for classes which can render part of a page.
@@ -149,7 +150,6 @@ class Element(object):
     @ivar loader: The factory which will be used to load documents to
         return from C{render}.
     """
-    implements(IRenderable)
     loader = None
 
     def __init__(self, loader=None):
diff --git twisted/web/_flatten.py twisted/web/_flatten.py
index 98d2b46..e8e8269 100644
--- twisted/web/_flatten.py
+++ twisted/web/_flatten.py
@@ -7,7 +7,6 @@ Context-free flattener/serializer for rendering Python objects, possibly
 complex or arbitrarily nested, as strings.
 """
 
-from cStringIO import StringIO
 from sys import exc_info
 from types import GeneratorType
 from traceback import extract_tb
@@ -18,6 +17,7 @@ from twisted.web.iweb import IRenderable
 from twisted.web._stan import (
     Tag, slot, voidElements, Comment, CDATA, CharRef)
 
+from twisted.python.compat import NativeStringIO as StringIO
 
 
 def escapeForContent(data):
@@ -317,7 +317,7 @@ def _flattenTree(request, root):
             element = stack[-1].next()
         except StopIteration:
             stack.pop()
-        except Exception, e:
+        except Exception as e:
             stack.pop()
             roots = []
             for generator in stack:
@@ -328,7 +328,8 @@ def _flattenTree(request, root):
             if type(element) is str:
                 yield element
             elif isinstance(element, Deferred):
-                def cbx((original, toFlatten)):
+                def cbx(arg):
+                    original, toFlatten = arg
                     stack.append(toFlatten)
                     return original
                 yield element.addCallback(cbx)
diff --git twisted/web/script.py twisted/web/script.py
index 1b50105..e675ddb 100644
--- twisted/web/script.py
+++ twisted/web/script.py
@@ -8,13 +8,9 @@ I contain PythonScript, which is a very simple python script resource.
 
 import os, traceback
 
-try:
-    import cStringIO as StringIO
-except ImportError:
-    import StringIO
-
 from twisted import copyright
 from twisted.python.compat import execfile
+from twisted.python.compat import NativeStringIO as StringIO
 from twisted.web import http, server, static, resource, html
 
 
@@ -63,7 +59,7 @@ def ResourceScript(path, registry):
             'recache': cs.recache}
     try:
         execfile(path, glob, glob)
-    except AlreadyCached, ac:
+    except AlreadyCached as ac:
         return ac.args[0]
     rsrc = glob['resource']
     if cs.doCache and rsrc is not noRsrc:
@@ -79,7 +75,7 @@ def ResourceTemplate(path, registry):
             'registry': registry}
 
     e = ptl_compile.compile_template(open(path), path)
-    exec e in glob
+    exec(e, glob)
     return glob['resource']
 
 
@@ -158,7 +154,7 @@ class PythonScript(resource.Resource):
                      'registry': self.registry}
         try:
             execfile(self.filename, namespace, namespace)
-        except IOError, e:
+        except IOError as e:
             if e.errno == 2: #file not found
                 request.setResponseCode(http.NOT_FOUND)
                 request.write(resource.NoResource("File not found.").render(request))
diff --git twisted/web/static.py twisted/web/static.py
index 05fd7d9..7d75fcd 100644
--- twisted/web/static.py
+++ twisted/web/static.py
@@ -14,7 +14,7 @@ import itertools
 import cgi
 import time
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.web import server
 from twisted.web import resource
@@ -438,7 +438,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
             offset, offset + size - 1, self.getFileSize())
 
 
-    def _doSingleRangeRequest(self, request, (start, end)):
+    def _doSingleRangeRequest(self, request, start, end):
         """
         Set up the response for Range headers that specify a single range.
 
@@ -580,7 +580,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
 
         if len(parsedRanges) == 1:
             offset, size = self._doSingleRangeRequest(
-                request, parsedRanges[0])
+                request, *parsedRanges[0])
             self._setContentHeaders(request, size)
             return SingleRangeStaticProducer(
                 request, fileForReading, offset, size)
@@ -613,7 +613,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
 
         try:
             fileForReading = self.openForReading()
-        except IOError, e:
+        except IOError as e:
             import errno
             if e[0] == errno.EACCES:
                 return resource.ForbiddenResource().render(request)
@@ -659,7 +659,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
         return f
 
 
-
+@implementer(interfaces.IPullProducer)
 class StaticProducer(object):
     """
     Superclass for classes that implement the business of producing.
@@ -668,8 +668,6 @@ class StaticProducer(object):
     @ivar fileObject: The file the contents of which to write to the request.
     """
 
-    implements(interfaces.IPullProducer)
-
     bufferSize = abstract.FileDescriptor.bufferSize
 
 
diff --git twisted/web/template.py twisted/web/template.py
index 224a192..cb195ed 100644
--- twisted/web/template.py
+++ twisted/web/template.py
@@ -26,13 +26,13 @@ __all__ = [
     ]
 
 import warnings
-from zope.interface import implements
+from zope.interface import implementer
 
-from cStringIO import StringIO
 from xml.sax import make_parser, handler
 
 from twisted.web._stan import Tag, slot, Comment, CDATA, CharRef
 from twisted.python.filepath import FilePath
+from twisted.python.compat import NativeStringIO as StringIO
 
 TEMPLATE_NAMESPACE = 'http://twistedmatrix.com/ns/twisted.web.template/0.1'
 
@@ -353,6 +353,7 @@ def _flatsaxParse(fl):
     return s.document
 
 
+@implementer(ITemplateLoader)
 class TagLoader(object):
     """
     An L{ITemplateLoader} that loads existing L{IRenderable} providers.
@@ -360,7 +361,6 @@ class TagLoader(object):
     @ivar tag: The object which will be loaded.
     @type tag: An L{IRenderable} provider.
     """
-    implements(ITemplateLoader)
 
     def __init__(self, tag):
         """
@@ -375,6 +375,7 @@ class TagLoader(object):
 
 
 
+@implementer(ITemplateLoader)
 class XMLString(object):
     """
     An L{ITemplateLoader} that loads and parses XML from a string.
@@ -382,7 +383,6 @@ class XMLString(object):
     @ivar _loadedTemplate: The loaded document.
     @type _loadedTemplate: a C{list} of Stan objects.
     """
-    implements(ITemplateLoader)
 
     def __init__(self, s):
         """
@@ -405,6 +405,7 @@ class XMLString(object):
 
 
 
+@implementer(ITemplateLoader)
 class XMLFile(object):
     """
     An L{ITemplateLoader} that loads and parses XML from a file.
@@ -415,7 +416,6 @@ class XMLFile(object):
     @ivar _path: The L{FilePath}, file object, or filename that is being
         loaded from.
     """
-    implements(ITemplateLoader)
 
     def __init__(self, path):
         """
diff --git twisted/web/test/test_static.py twisted/web/test/test_static.py
index bc6320f..4d5e10f 100644
--- twisted/web/test/test_static.py
+++ twisted/web/test/test_static.py
@@ -5,10 +5,12 @@
 Tests for L{twisted.web.static}.
 """
 
-import os, re, StringIO
+import os
+import re
 
 from zope.interface.verify import verifyObject
 
+from twisted.python.compat import NativeStringIO as StringIO
 from twisted.internet import abstract, interfaces
 from twisted.python.runtime import platform
 from twisted.python.filepath import FilePath
@@ -19,7 +21,6 @@ from twisted.web.server import UnsupportedMethod
 from twisted.web.test.test_web import DummyRequest
 from twisted.web.test._util import _render
 
-
 class StaticDataTests(TestCase):
     """
     Tests for L{Data}.
@@ -134,7 +135,7 @@ class StaticFileTests(TestCase):
         base = FilePath(self.mktemp())
         base.setContent('')
         # Make sure we can delete the file later.
-        self.addCleanup(base.chmod, 0700)
+        self.addCleanup(base.chmod, 420) # 0700 in octal, 'rwx------'
 
         # Get rid of our own read permission.
         base.chmod(0)
@@ -340,7 +341,7 @@ class StaticMakeProducerTests(TestCase):
         start with 'content-'.
         """
         contentHeaders = {}
-        for k, v in request.outgoingHeaders.iteritems():
+        for k, v in request.outgoingHeaders.items():
             if k.startswith('content-'):
                 contentHeaders[k] = v
         return contentHeaders
@@ -612,7 +613,7 @@ class StaticProducerTests(TestCase):
         L{StaticProducer.stopProducing} closes the file object the producer is
         producing data from.
         """
-        fileObject = StringIO.StringIO()
+        fileObject = StringIO()
         producer = static.StaticProducer(None, fileObject)
         producer.stopProducing()
         self.assertTrue(fileObject.closed)
@@ -624,7 +625,7 @@ class StaticProducerTests(TestCase):
         None, which indicates to subclasses' resumeProducing methods that no
         more data should be produced.
         """
-        fileObject = StringIO.StringIO()
+        fileObject = StringIO()
         producer = static.StaticProducer(DummyRequest([]), fileObject)
         producer.stopProducing()
         self.assertIdentical(None, producer.request)
@@ -653,7 +654,7 @@ class NoRangeStaticProducerTests(TestCase):
         request = DummyRequest([])
         content = 'abcdef'
         producer = static.NoRangeStaticProducer(
-            request, StringIO.StringIO(content))
+            request, StringIO(content))
         # start calls registerProducer on the DummyRequest, which pulls all
         # output from the producer and so we just need this one call.
         producer.start()
@@ -670,7 +671,7 @@ class NoRangeStaticProducerTests(TestCase):
         bufferSize = abstract.FileDescriptor.bufferSize
         content = 'a' * (2*bufferSize + 1)
         producer = static.NoRangeStaticProducer(
-            request, StringIO.StringIO(content))
+            request, StringIO(content))
         # start calls registerProducer on the DummyRequest, which pulls all
         # output from the producer and so we just need this one call.
         producer.start()
@@ -692,7 +693,7 @@ class NoRangeStaticProducerTests(TestCase):
         callbackList = []
         finishDeferred.addCallback(callbackList.append)
         producer = static.NoRangeStaticProducer(
-            request, StringIO.StringIO('abcdef'))
+            request, StringIO('abcdef'))
         # start calls registerProducer on the DummyRequest, which pulls all
         # output from the producer and so we just need this one call.
         producer.start()
@@ -723,7 +724,7 @@ class SingleRangeStaticProducerTests(TestCase):
         request = DummyRequest([])
         content = 'abcdef'
         producer = static.SingleRangeStaticProducer(
-            request, StringIO.StringIO(content), 1, 3)
+            request, StringIO(content), 1, 3)
         # DummyRequest.registerProducer pulls all output from the producer, so
         # we just need to call start.
         producer.start()
@@ -740,7 +741,7 @@ class SingleRangeStaticProducerTests(TestCase):
         bufferSize = abstract.FileDescriptor.bufferSize
         content = 'abc' * bufferSize
         producer = static.SingleRangeStaticProducer(
-            request, StringIO.StringIO(content), 1, bufferSize+10)
+            request, StringIO(content), 1, bufferSize+10)
         # DummyRequest.registerProducer pulls all output from the producer, so
         # we just need to call start.
         producer.start()
@@ -761,7 +762,7 @@ class SingleRangeStaticProducerTests(TestCase):
         callbackList = []
         finishDeferred.addCallback(callbackList.append)
         producer = static.SingleRangeStaticProducer(
-            request, StringIO.StringIO('abcdef'), 1, 1)
+            request, StringIO('abcdef'), 1, 1)
         # start calls registerProducer on the DummyRequest, which pulls all
         # output from the producer and so we just need this one call.
         producer.start()
@@ -792,7 +793,7 @@ class MultipleRangeStaticProducerTests(TestCase):
         request = DummyRequest([])
         content = 'abcdef'
         producer = static.MultipleRangeStaticProducer(
-            request, StringIO.StringIO(content), [('1', 1, 3), ('2', 5, 1)])
+            request, StringIO(content), [('1', 1, 3), ('2', 5, 1)])
         # DummyRequest.registerProducer pulls all output from the producer, so
         # we just need to call start.
         producer.start()
@@ -816,7 +817,7 @@ class MultipleRangeStaticProducerTests(TestCase):
         request = DummyRequest([])
         content = '0123456789' * 2
         producer = static.MultipleRangeStaticProducer(
-            request, StringIO.StringIO(content),
+            request, StringIO(content),
             [('a', 0, 2), ('b', 5, 10), ('c', 0, 0)])
         producer.bufferSize = 10
         # DummyRequest.registerProducer pulls all output from the producer, so
@@ -839,7 +840,7 @@ class MultipleRangeStaticProducerTests(TestCase):
         callbackList = []
         finishDeferred.addCallback(callbackList.append)
         producer = static.MultipleRangeStaticProducer(
-            request, StringIO.StringIO('abcdef'), [('', 1, 2)])
+            request, StringIO('abcdef'), [('', 1, 2)])
         # start calls registerProducer on the DummyRequest, which pulls all
         # output from the producer and so we just need this one call.
         producer.start()
diff --git twisted/web/util.py twisted/web/util.py
index 0c6cdb6..09a0be4 100644
--- twisted/web/util.py
+++ twisted/web/util.py
@@ -10,11 +10,11 @@ __all__ = [
     "redirectTo", "Redirect", "ChildRedirector", "ParentRedirect",
     "DeferredResource", "htmlIndent", "FailureElement", "formatFailure"]
 
-from cStringIO import StringIO
 import linecache
 import string
 import types
 
+from twisted.python.compat import NativeStringIO as StringIO
 from twisted.python.filepath import FilePath
 from twisted.python.reflect import fullyQualifiedName
 from twisted.python.deprecate import deprecatedModuleAttribute
@@ -191,10 +191,10 @@ def htmlFunc(f):
                          f.func_code.co_firstlineno))+
             '</div>')
 
-htmlReprTypes = {types.DictType: htmlDict,
-                 types.ListType: htmlList,
-                 types.InstanceType: htmlInst,
-                 types.StringType: htmlString,
+htmlReprTypes = {dict: htmlDict,
+                 list: htmlList,
+                 str: htmlString,
+                 object: htmlInst,
                  types.FunctionType: htmlFunc}
 
 
@@ -369,7 +369,7 @@ class FailureElement(Element):
 
     @since: 12.1
     """
-    loader = XMLFile(getModule(__name__).filePath.sibling("failure.xhtml"))
+    loader = XMLFile(getModule(__name__).filePath.sibling(b"failure.xhtml"))
 
     def __init__(self, failure, loader=None):
         Element.__init__(self, loader)
