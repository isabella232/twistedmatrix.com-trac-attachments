Index: test_pb.py
===================================================================
--- test_pb.py	(revision 27289)
+++ test_pb.py	(working copy)
@@ -199,11 +199,15 @@
 class NestedComplicatedCache(pb.Referenceable):
     def __init__(self):
         self.c = VeryVeryComplicatedCacheable()
+        self.d = VeryVeryComplicatedNewStyleCacheable()
 
     def remote_getCache(self):
         return self.c
 
+    def remote_getNewStyleCache(self):
+        return self.d
 
+
 class VeryVeryComplicatedCacheable(pb.Cacheable):
     def __init__(self):
         self.x = 1
@@ -212,7 +216,7 @@
 
     def setFoo4(self):
         self.foo = 4
-        self.observer.callRemote('foo',4)
+        self.observer.callRemote('foo', 4)
 
     def getStateToCacheAndObserveFor(self, perspective, observer):
         self.observer = observer
@@ -227,6 +231,29 @@
             self.observer = None
 
 
+class VeryVeryComplicatedNewStyleCacheable(pb.Cacheable, object):
+    def __init__(self):
+        self.x = 1
+        self.y = 2
+        self.foo = 3
+
+    def setFoo4(self):
+        self.foo = 4
+        self.observer.callRemote('foo', 4)
+
+    def getStateToCacheAndObserveFor(self, perspective, observer):
+        self.observer = observer
+        return {"x": self.x,
+                "y": self.y,
+                "foo": self.foo}
+
+    def stoppedObserving(self, perspective, observer):
+        log.msg("stopped observing")
+        observer.callRemote("end")
+        if observer == self.observer:
+            self.observer = None
+
+
 class RatherBaroqueCache(pb.RemoteCache):
     def observe_foo(self, newFoo):
         self.foo = newFoo
@@ -235,6 +262,8 @@
         log.msg("the end of things")
 
 pb.setUnjellyableForClass(VeryVeryComplicatedCacheable, RatherBaroqueCache)
+pb.setUnjellyableForClass(VeryVeryComplicatedNewStyleCacheable,
+                          RatherBaroqueCache)
 
 
 class SimpleLocalCache(pb.RemoteCache):
@@ -256,14 +285,21 @@
 class NestedCache(pb.Referenceable):
     def __init__(self):
         self.x = SimpleCache()
+        self.y = NewStyleCacheCopy()
 
     def remote_getCache(self):
-        return [self.x,self.x]
+        return [self.x, self.x]
 
+    def remote_getNewStyleCache(self):
+        return [self.y, self.y]
+
     def remote_putCache(self, cache):
         return (self.x is cache)
 
+    def remote_putNewStyleCache(self, cache):
+        return (self.y is cache)
 
+
 class Observable(pb.Referenceable):
     def __init__(self):
         self.observers = []
@@ -334,9 +370,24 @@
 
 
 class NewStyleCacheCopy(pb.Cacheable, pb.RemoteCache, object):
+    def __init__(self):
+        self.x = 1
+        self.y = 2
+        self.foo = 3
+
     def getStateToCacheAndObserveFor(self, perspective, observer):
         return self.__dict__
 
+    def checkMethod(self):
+        return self.check
+
+    def checkSelf(self):
+        return self
+
+    def check(self):
+        return 1
+
+
 pb.setUnjellyableForClass(NewStyleCacheCopy, NewStyleCacheCopy)
 
 
@@ -722,6 +773,76 @@
                          "Client still had complex after GC")
         self.assertIdentical(vcc.observer, None, "observer was not removed")
 
+    def test_newStyleCache(self):
+        c, s, pump = connectedServerAndClient()
+        obj = NestedCache()
+        obj2 = NestedComplicatedCache()
+        vcc = obj2.d
+        s.setNameForLocal("obj", obj)
+        s.setNameForLocal("xxx", obj2)
+        o2 = c.remoteForName("obj")
+        o3 = c.remoteForName("xxx")
+        coll = []
+        o2.callRemote("getNewStyleCache"
+            ).addCallback(coll.append).addErrback(coll.append)
+        o2.callRemote("getNewStyleCache"
+            ).addCallback(coll.append).addErrback(coll.append)
+        complex = []
+        o3.callRemote("getNewStyleCache").addCallback(complex.append)
+        o3.callRemote("getNewStyleCache").addCallback(complex.append)
+        pump.flush()
+        # `worst things first'
+        self.assertEquals(complex[0].x, 1)
+        self.assertEquals(complex[0].y, 2)
+        self.assertEquals(complex[0].foo, 3)
+
+        vcc.setFoo4()
+        pump.flush()
+        self.assertEquals(complex[0].foo, 4)
+        self.assertEquals(len(coll), 2)
+        cp = coll[0][0]
+        self.assertIdentical(cp.checkMethod().im_self, cp,
+                             "potential refcounting issue")
+        self.assertIdentical(cp.checkSelf(), cp,
+                             "other potential refcounting issue")
+        col2 = []
+        o2.callRemote('putNewStyleCache', cp).addCallback(col2.append)
+        pump.flush()
+        # The objects were the same (testing lcache identity)
+        #self.assertTrue(col2[0])
+        # test equality of references to methods
+        self.assertEquals(o2.remoteMethod("getCache"),
+                          o2.remoteMethod("getCache"))
+
+        # now, refcounting (similiar to testRefCount)
+        luid = cp.luid
+        baroqueLuid = complex[0].luid
+        self.assertIn(luid, s.remotelyCachedObjects,
+                      "remote cache doesn't have it")
+        del coll
+        del cp
+        pump.flush()
+        del complex
+        del col2
+        # extra nudge...
+        pump.flush()
+        # del vcc.observer
+        # nudge the gc
+        if sys.hexversion >= 0x2000000 and os.name != "java":
+            gc.collect()
+        # try to nudge the GC even if we can't really
+        pump.flush()
+        # The GC is done with it.
+        self.assertNotIn(luid, s.remotelyCachedObjects,
+                         "Server still had it after GC")
+        self.assertNotIn(luid, c.locallyCachedObjects,
+                         "Client still had it after GC")
+        self.assertNotIn(baroqueLuid, s.remotelyCachedObjects,
+                         "Server still had complex after GC")
+        self.assertNotIn(baroqueLuid, c.locallyCachedObjects,
+                         "Client still had complex after GC")
+        self.assertIdentical(vcc.observer, None, "observer was not removed")
+
     def test_publishable(self):
         try:
             os.unlink('None-None-TESTING.pub') # from RemotePublished.getFileName
