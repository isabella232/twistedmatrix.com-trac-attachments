Index: twisted/web/test/test_http.py
===================================================================
--- twisted/web/test/test_http.py	(revision 37864)
+++ twisted/web/test/test_http.py	(working copy)
@@ -21,16 +21,17 @@
 from twisted.web import http, http_headers
 from twisted.web.http import PotentialDataLoss, _DataLoss
 from twisted.web.http import _IdentityTransferDecoder
+from twisted.web.http import parseContentRange
 from twisted.internet.task import Clock
 from twisted.internet.error import ConnectionLost
 from twisted.protocols import loopback
 from twisted.test.proto_helpers import StringTransport
 from twisted.test.test_internet import DummyProducer
 from twisted.web.test.requesthelper import DummyChannel
+from twisted.web.test.test_web import DummyRequest
 
 
 
-
 class DateTimeTest(unittest.TestCase):
     """Test date parsing functions."""
 
@@ -1877,3 +1878,43 @@
               b"Version: HTTP/1.1",
               b"Request: /foo",
               b"'''\n4\ndefg'''\n")])
+
+
+
+class ParseContentRangeTests(unittest.TestCase):
+    """
+    Tests parsing of the content-range header.
+    """
+    
+    def test_raiseValueErrorForNonByteData(self):
+        """
+        L{parseContentrange} raises ValueError for non-byte type data in
+        content-range header.
+        """
+        request = DummyRequest([])
+        request.headers['range'] = 'foo'
+        self.assertRaises(ValueError, parseContentRange, request.headers['range'])
+
+
+    def test_realLengthNone(self):
+        """
+        L{parseContentRange} returns realLength as None if * is passed as
+        realLength.
+        """
+        request = DummyRequest([])
+        request.headers['range'] = 'bytes 1-3/*'
+        start, end, realLength = parseContentRange(request.headers['range'])
+        self.assertEquals(realLength, None)
+
+
+    def test_returnedContentLength(self):
+        """
+        L{parseContentRange} returns start, end and real content length
+        correctly as passed in content-range header.
+        """
+        request = DummyRequest([])
+        request.headers['range'] = 'bytes 1-3/10'
+        start, end, realLength = parseContentRange(request.headers['range'])
+        self.assertEqual(start, 1)
+        self.assertEqual(end, 3)
+        self.assertEqual(realLength, 10)
