Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 34726)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -792,6 +792,23 @@
             self.assertEqual(query, expected)
 
 
+    def test_queryAtomArgs(self):
+        """
+        When passed the C{keyward} argument, L{imap4.Query} returns an
+        C{atom} that consists of one or more non-special characters.
+
+        @see: U{http://tools.ietf.org/html/rfc3501#section-4.1}
+        @see: U{http://tools.ietf.org/html/rfc3501#section-9}
+        @see: U{http://tools.ietf.org/html/rfc3501#section-6.4.4}
+
+        List of the invalid characters:
+        ( ) { % * " \ ] CTL SP
+        """
+        query = imap4.Query(keyword='t"\w(iste{%d]-m)a{* il]@]google.com\n\02')
+        expected = '(KEYWORD twisted-mail@google.com)'
+        self.assertEqual(query, expected)
+
+
     def test_invalidIdListParser(self):
         """
         Trying to parse an invalid representation of a sequence range raises an
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 34726)
+++ twisted/mail/imap4.py	(working copy)
@@ -4104,6 +4104,11 @@
            cmd.append(k)
         elif k == 'HEADER':
             cmd.extend([k, v[0], '"%s"' % (v[1],)])
+        elif k == 'KEYWORD':
+           # Strip the following characters:
+           # ( ) { % * " \ ] CTL SP (CHAR is 7bit)
+           cmd.extend([k, '%s' % 
+               (re.sub('[\\\\()\]{%*"\\\x00-\x20\x80-\xff]', '', v),)])
         elif k not in _NO_QUOTES:
            cmd.extend([k, '"%s"' % (v,)])
         else:
Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 34726)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -792,6 +792,33 @@
             self.assertEqual(query, expected)
 
 
+    def test_queryAtomArgs(self):
+        """
+        When passed the C{keyward} argument, L{imap4.Query} returns an
+        C{atom} that consists of one or more non-special characters.
+
+        @see: U{http://tools.ietf.org/html/rfc3501#section-4.1}
+        @see: U{http://tools.ietf.org/html/rfc3501#section-9}
+        @see: U{http://tools.ietf.org/html/rfc3501#section-6.4.4}
+
+        List of the invalid characters:
+        ( ) { % * " \ ] CTL SP
+        """
+        inputs = [ imap4.Query(keyword='t"\w(iste{%d]-m)a{* il]@]google.com') ]
+
+        # Let's insert all the CTL characters
+        for i in range(33):
+            print 'twisted'+ chr(i) + '-mail@google.com'
+            inputs.append(
+                imap4.Query(keyword='twisted'+ chr(i) + '-mail@google.com')
+            )
+
+        expected = '(KEYWORD twisted-mail@google.com)'
+
+        for query in inputs:
+            self.assertEqual(query, expected)
+
+
     def test_invalidIdListParser(self):
         """
         Trying to parse an invalid representation of a sequence range raises an
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 34726)
+++ twisted/mail/imap4.py	(working copy)
@@ -4104,6 +4104,11 @@
            cmd.append(k)
         elif k == 'HEADER':
             cmd.extend([k, v[0], '"%s"' % (v[1],)])
+        elif k == 'KEYWORD':
+           # Strip the following characters:
+           # ( ) { % * " \ ] CTL SP (CHAR is 7bit)
+           cmd.extend([k, '%s' % 
+               (re.sub('[\\\\()\]{%*"\\\x00-\x20\x80-\xff]', '', v),)])
         elif k not in _NO_QUOTES:
            cmd.extend([k, '"%s"' % (v,)])
         else:
