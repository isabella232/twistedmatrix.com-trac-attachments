Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 34656)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -792,6 +792,17 @@
             self.assertEqual(query, expected)
 
 
+    def test_queryAtomArgs(self):
+        """
+        Testing arguments that are atoms.
+        Query should strip away all the invalid characters:
+        ( ) { % * " \ ] CTL SP
+        """
+        query = imap4.Query(keyword='t"\w(iste{%d]m)a* il') 
+        expected = '(KEYWORD twistedmail)' 
+        self.assertEqual(query, expected)
+
+
     def test_invalidIdListParser(self):
         """
         Trying to parse an invalid representation of a sequence range raises an
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 34656)
+++ twisted/mail/imap4.py	(working copy)
@@ -3984,6 +3984,10 @@
     'LARGER', 'SMALLER', 'UID'
 )
 
+_ATOM_ARGS = (
+    'KEYWORD',
+)
+
 def Query(sorted=0, **kwarg):
     """Create a query string
 
@@ -4104,6 +4108,12 @@
            cmd.append(k)
         elif k == 'HEADER':
             cmd.extend([k, v[0], '"%s"' % (v[1],)])
+        elif k in _ATOM_ARGS:
+           """ 
+           Strip the following characters:
+           ( ) { % * " \ ] CTL SP (CHAR is 7bit)
+           """
+           cmd.extend([k, '%s' % (re.sub('[\\\\()\]{%*"\\\x00-\x20\x80-\xff]', '', v),)])
         elif k not in _NO_QUOTES:
            cmd.extend([k, '"%s"' % (v,)])
         else:
