Index: twisted/python/test/test_util.py
===================================================================
--- twisted/python/test/test_util.py	(revision 24262)
+++ twisted/python/test/test_util.py	(working copy)
@@ -67,7 +67,7 @@
 
     def testNameToLabel(self):
         """
-        Test the various kinds of inputs L{nameToLabel} supports.
+        Test the various kinds of inputs C{nameToLabel} supports.
         """
         nameData = [
             ('f', 'F'),
@@ -85,7 +85,7 @@
 
     def test_uidFromNumericString(self):
         """
-        When L{uidFromString} is called with a base-ten string representation
+        When C{uidFromString} is called with a base-ten string representation
         of an integer, it returns the integer.
         """
         self.assertEqual(util.uidFromString("100"), 100)
@@ -93,7 +93,7 @@
 
     def test_uidFromUsernameString(self):
         """
-        When L{uidFromString} is called with a base-ten string representation
+        When C{uidFromString} is called with a base-ten string representation
         of an integer, it returns the integer.
         """
         pwent = pwd.getpwuid(os.getuid())
@@ -105,7 +105,7 @@
 
     def test_gidFromNumericString(self):
         """
-        When L{gidFromString} is called with a base-ten string representation
+        When C{gidFromString} is called with a base-ten string representation
         of an integer, it returns the integer.
         """
         self.assertEqual(util.gidFromString("100"), 100)
@@ -113,7 +113,7 @@
 
     def test_gidFromGroupnameString(self):
         """
-        When L{gidFromString} is called with a base-ten string representation
+        When C{gidFromString} is called with a base-ten string representation
         of an integer, it returns the integer.
         """
         grent = grp.getgrgid(os.getgid())
@@ -126,7 +126,7 @@
 
 class TestMergeFunctionMetadata(unittest.TestCase):
     """
-    Tests for L{mergeFunctionMetadata}.
+    Tests for C{mergeFunctionMetadata}.
     """
 
     def test_mergedFunctionBehavesLikeMergeTarget(self):
@@ -280,7 +280,7 @@
 
 class PasswordTestingProcessProtocol(ProcessProtocol):
     """
-    Write the string C{"secret\n"} to a subprocess and then collect all of
+    Write the string C{"secret\\n"} to a subprocess and then collect all of
     its output and fire a Deferred with it when the process ends.
     """
     def connectionMade(self):
@@ -438,7 +438,7 @@
 
 class Record(util.FancyEqMixin):
     """
-    Trivial user of L{FancyEqMixin} used by tests.
+    Trivial user of C{FancyEqMixin} used by tests.
     """
     compareAttributes = ('a', 'b')
 
@@ -450,7 +450,7 @@
 
 class DifferentRecord(util.FancyEqMixin):
     """
-    Trivial user of L{FancyEqMixin} which is not related to L{Record}.
+    Trivial user of C{FancyEqMixin} which is not related to L{Record}.
     """
     compareAttributes = ('a', 'b')
 
@@ -458,8 +458,6 @@
         self.a = a
         self.b = b
 
-
-
 class DerivedRecord(Record):
     """
     A class with an inheritance relationship to L{Record}.
@@ -495,11 +493,11 @@
 
 class EqualityTests(unittest.TestCase):
     """
-    Tests for L{FancyEqMixin}.
+    Tests for C{FancyEqMixin}.
     """
     def test_identity(self):
         """
-        Instances of a class which mixes in L{FancyEqMixin} but which
+        Instances of a class which mixes in C{FancyEqMixin} but which
         defines no comparison attributes compare by identity.
         """
         class Empty(util.FancyEqMixin):
@@ -514,9 +512,10 @@
 
     def test_equality(self):
         """
-        Instances of a class which mixes in L{FancyEqMixin} should compare
-        equal if all of their attributes compare equal.  They should not
-        compare equal if any of their attributes do not compare equal.
+        Instances of a class which mixes in C{FancyEqMixin} should 
+        compare equal if all of their attributes compare equal. They 
+        should not compare equal if any of their attributes do not
+        compare equal.
         """
         self.assertTrue(Record(1, 2) == Record(1, 2))
         self.assertFalse(Record(1, 2) == Record(1, 3))
@@ -526,7 +525,7 @@
 
     def test_unequality(self):
         """
-        Unequality between instances of a particular L{record} should be
+        Unequality between instances of a particular C{record} should be
         defined as the negation of equality.
         """
         self.assertFalse(Record(1, 2) != Record(1, 2))
@@ -537,16 +536,16 @@
 
     def test_differentClassesEquality(self):
         """
-        Instances of different classes which mix in L{FancyEqMixin} should not
-        compare equal.
+        Instances of different classes which mix in C{FancyEqMixin}  
+        should not compare equal.
         """
         self.assertFalse(Record(1, 2) == DifferentRecord(1, 2))
 
 
     def test_differentClassesInequality(self):
         """
-        Instances of different classes which mix in L{FancyEqMixin} should
-        compare unequal.
+        Instances of different classes which mix in C{FancyEqMixin} 
+        should compare unequal.
         """
         self.assertTrue(Record(1, 2) != DifferentRecord(1, 2))
 
@@ -554,8 +553,8 @@
     def test_inheritedClassesEquality(self):
         """
         An instance of a class which derives from a class which mixes in
-        L{FancyEqMixin} should compare equal to an instance of the base class
-        if and only if all of their attributes compare equal.
+        C{FancyEqMixin} should compare equal to an instance of the 
+        base class if and only if all of their attributes compare equal.
         """
         self.assertTrue(Record(1, 2) == DerivedRecord(1, 2))
         self.assertFalse(Record(1, 2) == DerivedRecord(1, 3))
@@ -566,8 +565,8 @@
     def test_inheritedClassesInequality(self):
         """
         An instance of a class which derives from a class which mixes in
-        L{FancyEqMixin} should compare unequal to an instance of the base
-        class if any of their attributes compare unequal.
+        C{FancyEqMixin} should compare unequal to an instance of 
+        the base class if any of their attributes compare unequal.
         """
         self.assertFalse(Record(1, 2) != DerivedRecord(1, 2))
         self.assertTrue(Record(1, 2) != DerivedRecord(1, 3))
@@ -579,8 +578,8 @@
         """
         The right-hand argument to the equality operator is given a chance
         to determine the result of the operation if it is of a type
-        unrelated to the L{FancyEqMixin}-based instance on the left-hand
-        side.
+        unrelated to the C{FancyEqMixin}-based instance on the 
+        left-hand side.
         """
         self.assertTrue(Record(1, 2) == EqualToEverything())
         self.assertFalse(Record(1, 2) == EqualToNothing())
@@ -590,8 +589,8 @@
         """
         The right-hand argument to the non-equality operator is given a
         chance to determine the result of the operation if it is of a type
-        unrelated to the L{FancyEqMixin}-based instance on the left-hand
-        side.
+        unrelated to the C{FancyEqMixin}-based instance on the 
+        left-hand side.
         """
         self.assertFalse(Record(1, 2) != EqualToEverything())
         self.assertTrue(Record(1, 2) != EqualToNothing())
Index: twisted/python/test/test_release.py
===================================================================
--- twisted/python/test/test_release.py	(revision 24262)
+++ twisted/python/test/test_release.py	(working copy)
@@ -2,7 +2,7 @@
 # See LICENSE for details.
 
 """
-Tests for L{twisted.python.release} and L{twisted.python._release}.
+Tests for C{twisted.python.release} and C{twisted.python._release}.
 """
 
 import warnings
@@ -134,7 +134,7 @@
         Make a Twisted-style project in the given base directory.
 
         @param baseDirectory: The directory to create files in
-            (as a L{FilePath).
+            (as a L{FilePath}).
         @param version: The version information for the project.
         @return: L{Project} pointing to the created project.
         """
@@ -475,20 +475,23 @@
     def setUp(self):
         """
         Set up a few instance variables that will be useful.
-
-        @ivar builder: A plain L{DocBuilder}.
-        @ivar docCounter: An integer to be used as a counter by the
-            C{getArbitrary...} methods.
-        @ivar howtoDir: A L{FilePath} representing a directory to be used for
-            containing Lore documents.
-        @ivar templateFile: A L{FilePath} representing a file with
-            C{self.template} as its content.
         """
         BuilderTestsMixin.setUp(self)
         self.builder = DocBuilder()
+        """
+        @ivar: A plain L{DocBuilder}.
+        """
         self.howtoDir = FilePath(self.mktemp())
+        """
+        @ivar: A L{FilePath} representing a directory to be used for
+            containing Lore documents.
+        """
         self.howtoDir.createDirectory()
         self.templateFile = self.howtoDir.child("template.tpl")
+        """
+        @ivar: A L{FilePath} representing a file with
+            C{self.template} as its content.
+        """
         self.templateFile.setContent(self.template)
 
 
@@ -573,7 +576,7 @@
 
     def test_deleteInput(self):
         """
-        L{DocBuilder.build} can be instructed to delete the input files after
+        C{DocBuilder.build} can be instructed to delete the input files after
         generating the output based on them.
         """
         input1 = self.getArbitraryLoreInput(0)
@@ -647,7 +650,7 @@
 
     def test_build(self):
         """
-        L{APIBuilder.build} writes an index file which includes the name of the
+        C{APIBuilder.build} writes an index file which includes the name of the
         project specified.
         """
         stdout = StringIO()
@@ -714,20 +717,23 @@
     def setUp(self):
         """
         Set up a few instance variables that will be useful.
-
-        @ivar builder: A plain L{ManBuilder}.
-        @ivar manDir: A L{FilePath} representing a directory to be used for
-            containing man pages.
         """
         BuilderTestsMixin.setUp(self)
         self.builder = ManBuilder()
+        """
+        @ivar: A plain L{ManBuilder}.
+        """
         self.manDir = FilePath(self.mktemp())
+        """
+        @ivar: A L{FilePath} representing a directory to be used for
+            containing man pages.
+        """
         self.manDir.createDirectory()
 
 
     def test_noDocumentsFound(self):
         """
-        L{ManBuilder.build} raises L{NoDocumentsFound} if there are no
+        C{ManBuilder.build} raises L{NoDocumentsFound} if there are no
         .1 files in the given directory.
         """
         self.assertRaises(NoDocumentsFound, self.builder.build, self.manDir)
@@ -735,7 +741,7 @@
 
     def test_build(self):
         """
-        Check that L{ManBuilder.build} find the man page in the directory, and
+        Check that C{ManBuilder.build} find the man page in the directory, and
         successfully produce a Lore content.
         """
         manContent = self.getArbitraryManInput()
@@ -751,7 +757,7 @@
     def test_toHTML(self):
         """
         Check that the content output by C{build} is compatible as input of
-        L{DocBuilder.build}.
+        C{DocBuilder.build}.
         """
         manContent = self.getArbitraryManInput()
         self.manDir.child('test1.1').setContent(manContent)
@@ -815,7 +821,7 @@
 
     def test_runSuccess(self):
         """
-        L{BookBuilder.run} executes the command it is passed and returns a
+        C{BookBuilder.run} executes the command it is passed and returns a
         string giving the stdout and stderr of the command if it completes
         successfully.
         """
@@ -825,7 +831,7 @@
 
     def test_runFailed(self):
         """
-        L{BookBuilder.run} executes the command it is passed and raises
+        C{BookBuilder.run} executes the command it is passed and raises
         L{CommandFailed} if it completes unsuccessfully.
         """
         builder = BookBuilder()
@@ -836,7 +842,7 @@
 
     def test_runSignaled(self):
         """
-        L{BookBuilder.run} executes the command it is passed and raises
+        C{BookBuilder.run} executes the command it is passed and raises
         L{CommandFailed} if it exits due to a signal.
         """
         builder = BookBuilder()
@@ -850,7 +856,7 @@
 
     def test_buildTeX(self):
         """
-        L{BookBuilder.buildTeX} writes intermediate TeX files for all lore
+        C{BookBuilder.buildTeX} writes intermediate TeX files for all lore
         input files in a directory.
         """
         version = "3.2.1"
@@ -870,7 +876,7 @@
 
     def test_buildTeXRejectsInvalidDirectory(self):
         """
-        L{BookBuilder.buildTeX} raises L{ValueError} if passed a directory
+        C{BookBuilder.buildTeX} raises L{ValueError} if passed a directory
         which does not exist.
         """
         builder = BookBuilder()
@@ -880,7 +886,7 @@
 
     def test_buildTeXOnlyBuildsXHTML(self):
         """
-        L{BookBuilder.buildTeX} ignores files which which don't end with
+        C{BookBuilder.buildTeX} ignores files which which don't end with
         ".xhtml".
         """
         # Hopefully ">" is always a parse error from microdom!
@@ -890,7 +896,7 @@
 
     def test_stdout(self):
         """
-        L{BookBuilder.buildTeX} does not write to stdout.
+        C{BookBuilder.buildTeX} does not write to stdout.
         """
         stdout = StringIO()
         self.patch(sys, 'stdout', stdout)
@@ -904,7 +910,7 @@
 
     def test_buildPDFRejectsInvalidBookFilename(self):
         """
-        L{BookBuilder.buildPDF} raises L{ValueError} if the book filename does
+        C{BookBuilder.buildPDF} raises L{ValueError} if the book filename does
         not end with ".tex".
         """
         builder = BookBuilder()
@@ -941,7 +947,7 @@
 
     def test_buildPDF(self):
         """
-        L{BookBuilder.buildPDF} creates a PDF given an index tex file and a
+        C{BookBuilder.buildPDF} creates a PDF given an index tex file and a
         directory containing .tex files.
         """
         bookPath = self._setupTeXFiles()
@@ -955,7 +961,7 @@
 
     def test_buildPDFLongPath(self):
         """
-        L{BookBuilder.buildPDF} succeeds even if the paths it is operating on
+        C{BookBuilder.buildPDF} succeeds even if the paths it is operating on
         are very long.
 
         C{ps2pdf13} seems to have problems when path names are long.  This test
@@ -978,7 +984,7 @@
 
     def test_buildPDFRunsLaTeXThreeTimes(self):
         """
-        L{BookBuilder.buildPDF} runs C{latex} three times.
+        C{BookBuilder.buildPDF} runs C{latex} three times.
         """
         class InspectableBookBuilder(BookBuilder):
             def __init__(self):
@@ -1024,7 +1030,7 @@
     def test_noSideEffects(self):
         """
         The working directory is the same before and after a call to
-        L{BookBuilder.buildPDF}.  Also the contents of the directory containing
+        C{BookBuilder.buildPDF}.  Also the contents of the directory containing
         the input book are the same before and after the call.
         """
         startDir = os.getcwd()
@@ -1042,7 +1048,7 @@
 
     def test_failedCommandProvidesOutput(self):
         """
-        If a subprocess fails, L{BookBuilder.buildPDF} raises L{CommandFailed}
+        If a subprocess fails, C{BookBuilder.buildPDF} raises L{CommandFailed}
         with the subprocess's output and leaves the temporary directory as a
         sibling of the book path.
         """
@@ -1064,7 +1070,7 @@
 
     def test_build(self):
         """
-        L{BookBuilder.build} generates a pdf book file from some lore input
+        C{BookBuilder.build} generates a pdf book file from some lore input
         files.
         """
         sections = range(1, 4)
@@ -1082,7 +1088,7 @@
 
     def test_buildRemovesTemporaryLaTeXFiles(self):
         """
-        L{BookBuilder.build} removes the intermediate LaTeX files it creates.
+        C{BookBuilder.build} removes the intermediate LaTeX files it creates.
         """
         sections = range(1, 4)
         for sectionNumber in sections:
@@ -1339,13 +1345,13 @@
         """
         The subproject tarball includes files like so:
 
-        1. twisted/<subproject>/topfiles defines the files that will be in the
-           top level in the tarball, except LICENSE, which comes from the real
-           top-level directory.
-        2. twisted/<subproject> is included, but without the topfiles entry
-           in that directory. No other twisted subpackages are included.
-        3. twisted/plugins/twisted_<subproject>.py is included, but nothing
-           else in plugins is.
+         1. twisted/<subproject>/topfiles defines the files that will be in the
+            top level in the tarball, except LICENSE, which comes from the real
+            top-level directory.
+         2. twisted/<subproject> is included, but without the topfiles entry
+            in that directory. No other twisted subpackages are included.
+         3. twisted/plugins/twisted_<subproject>.py is included, but nothing
+            else in plugins is.
         """
         structure = {
             "README": "HI!@",
@@ -1440,9 +1446,9 @@
         The core tarball looks a lot like a subproject tarball, except it
         doesn't include:
 
-        - Python packages from other subprojects
-        - plugins from other subprojects
-        - scripts from other subprojects
+         - Python packages from other subprojects
+         - plugins from other subprojects
+         - scripts from other subprojects
         """
         indexInput, indexOutput = self.getArbitraryLoreInputAndOutput(
             "8.0.0", prefix="howto/")
Index: twisted/protocols/ftp.py
===================================================================
--- twisted/protocols/ftp.py	(revision 24262)
+++ twisted/protocols/ftp.py	(working copy)
@@ -2216,9 +2216,9 @@
         Retrieves a file or listing generated by the given command,
         feeding it to the given protocol.
 
-        @param command: list of strings of FTP commands to execute then receive
+        @param commands: list of strings of FTP commands to execute then receive
             the results of (e.g. LIST, RETR)
-        @param protocol: A L{Protocol} *instance* e.g. an
+        @param protocol: A L{Protocol} B{instance} e.g. an
             L{FTPFileListProtocol}, or something that can be adapted to one.
             Typically this will be an L{IConsumer} implemenation.
 
Index: twisted/conch/test/test_conch.py
===================================================================
--- twisted/conch/test/test_conch.py	(revision 24262)
+++ twisted/conch/test/test_conch.py	(working copy)
@@ -70,7 +70,7 @@
         """
         Called when the process has ended.
 
-        @param reason: a Failure giving the reason for the process' end.
+        @param reason: a C{Failure} giving the reason for the process' end.
         """
         if reason.value.exitCode != 0:
             self._getDeferred().errback(
@@ -104,7 +104,7 @@
         (it is assumed that the server is running on localhost).
 
         @type data: C{str}
-        @param data: This is sent to the third-party server. Must end with '\n'
+        @param data: This is sent to the third-party server. Must end with '\\n'
         in order to trigger a disconnect.
         """
         self.port = port
@@ -179,7 +179,7 @@
     def __init__(self, protocol, data):
         """
         @type protocol: L{ConchTestForwardingProcess}
-        @param protocol: The L{ProcessProtocol} which made this connection.
+        @param protocol: The C{ProcessProtocol} which made this connection.
 
         @type data: str
         @param data: The data to be sent to the third-party server.
@@ -306,10 +306,10 @@
     protocols over SSH.
 
     These tests are integration tests, not unit tests. They launch a Conch
-    server, a custom TCP server (just an L{EchoProtocol}) and then call
-    L{execute}.
+    server, a custom TCP server (just an C{EchoProtocol}) and then call
+    C{execute}.
 
-    L{execute} is implemented by subclasses of L{ForwardingTestBase}. It should
+    C{execute} is implemented by subclasses of L{ForwardingTestBase}. It should
     cause an SSH client to connect to the Conch server, asking it to forward
     data to the custom TCP server.
     """
@@ -342,7 +342,7 @@
     def _makeConchFactory(self):
         """
         Make a L{ConchTestServerFactory}, which allows us to start a
-        L{ConchTestServer} -- i.e. an actually listening conch.
+        C{ConchTestServer} -- i.e. an actually listening conch.
         """
         realm = ConchTestRealm()
         p = portal.Portal(realm)
@@ -429,7 +429,7 @@
         @type sshArgs: str
         @param sshArgs: Arguments to pass to the 'ssh' process.
 
-        @return: L{defer.Deferred}
+        @return: C{defer.Deferred}
         """
         process.deferred = defer.Deferred()
         cmdline = ('ssh -2 -l testuser -p %i '
@@ -554,7 +554,7 @@
     def execute(self, remoteCommand, process, sshArgs=''):
         """
         Connect to the forwarding process using the 'unix' client found in
-        L{twisted.conch.client.unix.connect}.  See
+        C{twisted.conch.client.unix.connect}.See
         L{OpenSSHClientTestCase.execute}.
         """
         process.deferred = defer.Deferred()
@@ -575,7 +575,7 @@
     def test_noHome(self):
         """
         When setting the HOME environment variable to a path that doesn't
-        exist, L{connect.connect} should forward the failure, and the created
+        exist, C{connect.connect} should forward the failure, and the created
         process should fail with a L{ConchError}.
         """
         path = self.mktemp()
Index: twisted/conch/test/test_insults.py
===================================================================
--- twisted/conch/test/test_insults.py	(revision 24262)
+++ twisted/conch/test/test_insults.py	(working copy)
@@ -370,7 +370,7 @@
     """
     def test_nextLine(self):
         """
-        L{ServerProtocol.nextLine} writes C{"\r\n"} to its transport.
+        L{ServerProtocol.nextLine} writes C{"\\r\\n"} to its transport.
         """
         # Why doesn't it write ESC E?  Because ESC E is poorly supported.  For
         # example, gnome-terminal (many different versions) fails to scroll if
Index: twisted/conch/test/test_helper.py
===================================================================
--- twisted/conch/test/test_helper.py	(revision 24262)
+++ twisted/conch/test/test_helper.py	(working copy)
@@ -38,7 +38,7 @@
 
     def test_carriageReturn(self):
         """
-        C{"\r"} moves the cursor to the first column in the current row.
+        C{"\\r"} moves the cursor to the first column in the current row.
         """
         self.term.cursorForward(5)
         self.term.cursorDown(3)
@@ -49,7 +49,7 @@
 
     def test_linefeed(self):
         """
-        C{"\n"} moves the cursor to the next row without changing the column.
+        C{"\\n"} moves the cursor to the next row without changing the column.
         """
         self.term.cursorForward(5)
         self.assertEqual(self.term.reportCursorPosition(), (5, 0))
@@ -59,7 +59,7 @@
 
     def test_newline(self):
         """
-        C{write} transforms C{"\n"} into C{"\r\n"}.
+        C{write} transforms C{"\\n"} into C{"\\r\\n"}.
         """
         self.term.cursorForward(5)
         self.term.cursorDown(3)
@@ -70,7 +70,7 @@
 
     def test_setPrivateModes(self):
         """
-        Verify that L{helper.TerminalBuffer.setPrivateModes} changes the Set
+        Verify that C{helper.TerminalBuffer.setPrivateModes} changes the Set
         Mode (SM) state to "set" for the private modes it is passed.
         """
         expected = self.term.privateModes.copy()
@@ -82,7 +82,7 @@
 
     def test_resetPrivateModes(self):
         """
-        Verify that L{helper.TerminalBuffer.resetPrivateModes} changes the Set
+        Verify that C{helper.TerminalBuffer.resetPrivateModes} changes the Set
         Mode (SM) state to "reset" for the private modes it is passed.
         """
         expected = self.term.privateModes.copy()
Index: twisted/web2/test/test_vhost.py
===================================================================
--- twisted/web2/test/test_vhost.py	(revision 24262)
+++ twisted/web2/test/test_vhost.py	(working copy)
@@ -22,11 +22,12 @@
         self.root.addHost('foo', HostResource())
 
     def testNameVirtualHost(self):
-        """ Test basic Name Virtual Host behavior
-            1) NameVirtualHost.default is defined, so an undefined NVH (localhost)
-                gets handled by NameVirtualHost.default
+        """
+        Test basic Name Virtual Host behavior
+         1. NameVirtualHost.default is defined, so an undefined NVH (localhost)
+            gets handled by NameVirtualHost.default
 
-            2) A defined NVH gets passed the proper host header and is handled by the proper resource
+         2. A defined NVH gets passed the proper host header and is handled by the proper resource
         """
 
         self.assertResponse(
@@ -46,17 +47,19 @@
             (404, {}, None))
 
     def testNameVirtualHostWithChildren(self):
-        """ Test that children of a defined NVH are handled appropriately
         """
+        Test that children of a defined NVH are handled appropriately
+        """
         
         self.assertResponse(
             (self.root, 'http://foo/bar/'),
             (200, {}, 'foo'))
 
     def testNameVirtualHostWithNesting(self):
-        """ Test that an unknown virtual host gets handled by the domain parent 
-            and passed on to the parent's resource.
         """
+        Test that an unknown virtual host gets handled by the domain parent 
+        and passed on to the parent's resource.
+        """
 
         nested = vhost.NameVirtualHost()
         nested.addHost('is.nested', HostResource())
Index: twisted/web2/test/test_wsgi.py
===================================================================
--- twisted/web2/test/test_wsgi.py	(revision 24262)
+++ twisted/web2/test/test_wsgi.py	(working copy)
@@ -23,7 +23,7 @@
 
     def flushErrors(self, result, error):
         """
-        Flush the specified C{error] and forward C{result}.
+        Flush the specified C{error} and forward C{result}.
         """
         self.flushLoggedErrors(error)
         return result
Index: twisted/flow/test/test_flow.py
===================================================================
--- twisted/flow/test/test_flow.py	(revision 24262)
+++ twisted/flow/test/test_flow.py	(working copy)
@@ -16,7 +16,8 @@
 from time import sleep
 
 class slowlist:
-    """ this is a generator based list
+    """
+    This is a generator based list::
 
         def slowlist(list):
             list = list[:]
@@ -40,7 +41,8 @@
 _onetwothree = ['one','two',flow.Cooperate(),'three']
 
 class producer:
-    """ iterator version of the following generator...
+    """
+    iterator version of the following generator...::
 
         def producer():
             lst = flow.wrap(slowlist([1,2,3]))
@@ -67,7 +69,8 @@
         return (self.lst.next(), self.nam.next())
 
 class consumer:
-    """ iterator version of the following generator...
+    """
+    iterator version of the following generator...::
 
         def consumer():
             title = flow.wrap(['Title'])
@@ -99,11 +102,12 @@
 
 
 class badgen:
-    """ a bad generator...
+    """
+    A bad generator...::
 
-    def badgen():
-        yield 'x'
-        err =  3/ 0
+        def badgen():
+            yield 'x'
+            err =  3/ 0
     """
     def __iter__(self):
         self.next = self.yield_x
@@ -116,7 +120,8 @@
         raise StopIteration
 
 class buildlist:
-    """ building a list
+    """
+    Building a list::
 
         def buildlist(src):
             out = []
@@ -146,7 +151,8 @@
         raise StopIteration
 
 class testconcur:
-    """ interweving two concurrent stages
+    """
+    Interweving two concurrent stages::
 
         def testconcur(*stages):
             both = flow.Concurrent(*stages)
@@ -169,7 +175,8 @@
         return (stage.name, stage.next())
 
 class echoServer:
-    """ a simple echo protocol, server side
+    """
+    A simple echo protocol, server side::
 
         def echoServer(conn):
             yield conn
@@ -190,7 +197,8 @@
         return self.conn.next()
 
 class echoClient:
-    """ a simple echo client tester
+    """
+    A simple echo client tester::
 
         def echoClient(conn):
             yield "testing"
@@ -461,13 +469,13 @@
 
     def testThreadedImmediate(self):
         """
-            The goal of this test is to test the callback mechanism with
-            regard to threads, namely to assure that results can be
-            accumulated before they are needed; and that left-over results
-            are immediately made available on the next round (even though
-            the producing thread has shut down).  This is a very tough thing
-            to test due to the timing issues.  So it may fail on some
-            platforms, I'm not sure.
+        The goal of this test is to test the callback mechanism with
+        regard to threads, namely to assure that results can be
+        accumulated before they are needed; and that left-over results
+        are immediately made available on the next round (even though
+        the producing thread has shut down).  This is a very tough thing
+        to test due to the timing issues.  So it may fail on some
+        platforms, I'm not sure.
         """
         expect = [5,4,3,2,1]
         result = []
Index: twisted/web/test/test_xml.py
===================================================================
--- twisted/web/test/test_xml.py	(revision 24262)
+++ twisted/web/test/test_xml.py	(working copy)
@@ -688,7 +688,7 @@
     """
     Tests for when microdom encounters very bad HTML and C{beExtremelyLenient}
     is enabled. These tests are inspired by some HTML generated in by a mailer,
-    which breaks up very long lines by splitting them with '!\n '. The expected
+    which breaks up very long lines by splitting them with '!\\n '. The expected
     behaviour is loosely modelled on the way Firefox treats very bad HTML.
     """
 
Index: twisted/web/test/test_httpauth.py
===================================================================
--- twisted/web/test/test_httpauth.py	(revision 24262)
+++ twisted/web/test/test_httpauth.py	(working copy)
@@ -366,11 +366,11 @@
         Format all given keyword arguments and their values suitably for use as
         the value of an HTTP header.
 
-        @types quotes: C{bool}
         @param quotes: A flag indicating whether to quote the values of each
             field in the response.
-
-        @param **kw: Keywords and C{str} values which will be treated as field
+        @type quotes: C{bool}
+        
+        @param kw: Keywords and C{str} values which will be treated as field
             name/value pairs to include in the result.
 
         @rtype: C{str}
Index: twisted/test/test_reflect.py
===================================================================
--- twisted/test/test_reflect.py	(revision 24262)
+++ twisted/test/test_reflect.py	(working copy)
@@ -187,10 +187,11 @@
         """
         Passing a name which isn't a fully-qualified Python name to L{namedAny}
         should result in one of the following exceptions:
-        - L{InvalidName}: the name is not a dot-separated list of Python objects
-        - L{ObjectNotFound}: the object doesn't exist
-        - L{ModuleNotFound}: the object doesn't exist and there is only one
-          component in the name
+        
+         - L{InvalidName}: the name is not a dot-separated list of Python objects
+         - L{ObjectNotFound}: the object doesn't exist
+         - L{ModuleNotFound}: the object doesn't exist and there is only one
+           component in the name
         """
         err = self.assertRaises(reflect.ModuleNotFound, reflect.namedAny,
                                 'nosuchmoduleintheworld')
Index: twisted/test/test_ftp.py
===================================================================
--- twisted/test/test_ftp.py	(revision 24262)
+++ twisted/test/test_ftp.py	(working copy)
@@ -910,7 +910,7 @@
         """
         Try a RETR, but disconnect during the transfer.
         L{ftp.FTPClient.retrieveFile} should return a Deferred which
-        errbacks with L{ftp.ConnectionLost)
+        errbacks with L{ftp.ConnectionLost}.
         """
         self.client.passive = False
 
Index: twisted/test/test_process.py
===================================================================
--- twisted/test/test_process.py	(revision 24262)
+++ twisted/test/test_process.py	(working copy)
@@ -1181,7 +1181,7 @@
     @type actions: C{list} of C{str}
 
     @ivar closed: keep track of the file descriptor closed.
-    @param closed: C{list} of C{int}
+    @type closed: C{list} of C{int}
 
     @ivar child: whether fork return for the child or the parent.
     @type child: C{bool}
@@ -1531,7 +1531,7 @@
         The garbage collector should be enabled when L{reactor.spawnProcess}
         returns if it was initially enabled.
 
-        @see L{_mockForkInParentTest}
+        @see: L{_mockForkInParentTest}
         """
         gc.enable()
         self._mockForkInParentTest()
@@ -1543,7 +1543,7 @@
         The garbage collector should be disabled when L{reactor.spawnProcess}
         returns if it was initially disabled.
 
-        @see L{_mockForkInParentTest}
+        @see: L{_mockForkInParentTest}
         """
         gc.disable()
         self._mockForkInParentTest()
Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(revision 24262)
+++ twisted/test/test_amp.py	(working copy)
@@ -398,7 +398,7 @@
 class FakeSender:
     """
     This is a fake implementation of the 'box sender' interface implied by
-    L{AMP}.
+    L{amp.AMP}.
     """
     def __init__(self):
         """
@@ -699,9 +699,9 @@
     def test_receiveBoxStateMachine(self):
         """
         When a binary box protocol receives:
-            * a key
-            * a value
-            * an empty string
+         - a key
+         - a value
+         - an empty string
         it should emit a box and send it to its boxReceiver.
         """
         a = amp.BinaryBoxProtocol(self)
Index: twisted/test/test_internet.py
===================================================================
--- twisted/test/test_internet.py	(revision 24262)
+++ twisted/test/test_internet.py	(working copy)
@@ -658,14 +658,14 @@
         L{twisted.internet.reactor.seconds} should return something
         like a number.
 
-        1. This test specifically does not assert any relation to the
-           "system time" as returned by L{time.time} or
-           L{twisted.python.runtime.seconds}, because at some point we
-           may find a better option for scheduling calls than
-           wallclock-time.
-        2. This test *also* does not assert anything about the type of
-           the result, because operations may not return ints or
-           floats: For example, datetime-datetime == timedelta(0).
+         1. This test specifically does not assert any relation to the
+            "system time" as returned by L{time.time} or
+            L{twisted.python.runtime.seconds}, because at some point we
+            may find a better option for scheduling calls than
+            wallclock-time.
+         2. This test B{also} does not assert anything about the type of
+            the result, because operations may not return ints or
+            floats: For example, C{datetime-datetime == timedelta(0)}.
         """
         now = reactor.seconds()
         self.assertEquals(now-now+now, now)
Index: twisted/mail/test/test_pop3.py
===================================================================
--- twisted/mail/test/test_pop3.py	(revision 24262)
+++ twisted/mail/test/test_pop3.py	(working copy)
@@ -2,7 +2,7 @@
 # See LICENSE for details.
 
 """
-Test cases for Ltwisted.mail.pop3} module.
+Test cases for L{twisted.mail.pop3} module.
 """
 
 import StringIO
Index: twisted/internet/test/test_iocp.py
===================================================================
--- twisted/internet/test/test_iocp.py	(revision 24262)
+++ twisted/internet/test/test_iocp.py	(working copy)
@@ -50,14 +50,16 @@
         """
         This test checks transport read state! There are three bits
         of it:
-        1) The transport producer is paused -- transport.reading
+        
+         1. The transport producer is paused -- transport.reading
            is False)
-        2) The transport is about to schedule an OS read, on the next
-           reactor iteration -- transport._readScheduled
-        3) The OS has a pending asynchronous read on our behalf --
-           transport._readScheduledInOS
-        if 3) is not implemented, it is possible to trick IOCPReactor into
-        scheduling an OS read before the previous one finishes
+         2. The transport is about to schedule an OS read, on the next
+           reactor iteration -- C{transport._readScheduled}
+         3. The OS has a pending asynchronous read on our behalf --
+           C{transport._readScheduledInOS}
+           
+        If 3 is not implemented, it is possible to trick C{IOCPReactor} 
+        into scheduling an OS read before the previous one finishes
         """
         sf = ServerFactory()
         sf.protocol = StopStartReadingProtocol
Index: twisted/trial/test/test_reporter.py
===================================================================
--- twisted/trial/test/test_reporter.py	(revision 24262)
+++ twisted/trial/test/test_reporter.py	(working copy)
@@ -329,11 +329,11 @@
         indicating how many tests ran, how many failed etc.
 
         The numbers represents:
-         * the run time of the tests
-         * the number of tests run, printed 2 times for legacy reasons
-         * the number of errors
-         * the number of failures
-         * the number of skips
+         - the run time of the tests
+         - the number of tests run, printed 2 times for legacy reasons
+         - the number of errors
+         - the number of failures
+         - the number of skips
         """
         result = reporter.MinimalReporter(self.stream)
         self.test.run(result)
Index: twisted/trial/reporter.py
===================================================================
--- twisted/trial/reporter.py	(revision 24262)
+++ twisted/trial/reporter.py	(working copy)
@@ -105,10 +105,11 @@
         self.failures.append((test, self._getFailure(fail)))
 
     def addError(self, test, error):
-        """Report an error that occurred while running the given test.
+        """
+        Report an error that occurred while running the given test.
 
         @type test: L{pyunit.TestCase}
-        @type fail: L{Failure} or L{tuple}
+        @type error: L{Failure} or L{tuple}
         """
         self.errors.append((test, self._getFailure(error)))
 
@@ -294,7 +295,7 @@
     """
     A basic L{TestResult} with support for writing to a stream.
     
-    @param _startTime: The time when the first test was started. It defaults to
+    @ivar _startTime: The time when the first test was started. It defaults to
         C{None}, which means that no test was actually launched.
     @type _startTime: C{float} or C{NoneType}
     """
@@ -378,7 +379,7 @@
         Safely write to the reporter's stream.
 
         @param format: A format string to write.
-        @param *args: The arguments for the format string.
+        @param args: The arguments for the format string.
         """
         s = str(format)
         assert isinstance(s, type(''))
@@ -401,7 +402,7 @@
         the format string.
 
         @param format: A format string to write.
-        @param *args: The arguments for the format string.
+        @param args: The arguments for the format string.
         """
         self._write(format, *args)
         self._write('\n')
