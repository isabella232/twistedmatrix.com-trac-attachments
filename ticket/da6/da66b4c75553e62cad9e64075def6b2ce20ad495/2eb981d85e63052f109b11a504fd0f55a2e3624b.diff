diff --git twisted/conch/test/test_agent.py twisted/conch/test/test_agent.py
index 532a0e5..14c4727 100644
--- twisted/conch/test/test_agent.py
+++ twisted/conch/test/test_agent.py
@@ -7,14 +7,9 @@ Tests for L{twisted.conch.ssh.agent}.
 
 import struct
 
+from twisted.internet.interfaces import ITLSTransport
 from twisted.trial import unittest
-
-try:
-    import OpenSSL
-except ImportError:
-    iosim = None
-else:
-    from twisted.test import iosim
+from twisted.test import iosim
 
 try:
     import Crypto.Cipher.DES3
@@ -49,7 +44,7 @@ class AgentTestBase(unittest.TestCase):
     """
     Tests for SSHAgentServer/Client.
     """
-    if iosim is None:
+    if not ITLSTransport.implementedBy(iosim.FakeTransport):
         skip = "iosim requires SSL, but SSL is not available"
     elif agent is None or keys is None:
         skip = "Cannot run without PyCrypto or PyASN1"
diff --git twisted/test/iosim.py twisted/test/iosim.py
index fe47283..74901e8 100644
--- twisted/test/iosim.py
+++ twisted/test/iosim.py
@@ -12,10 +12,11 @@ import itertools
 
 try:
     from OpenSSL.SSL import Error as NativeOpenSSLError
+    _ssl_supported = True
 except ImportError:
-    pass
+    _ssl_supported = False
 
-from zope.interface import implementer, directlyProvides
+from zope.interface import implementer, implements, directlyProvides
 
 from twisted.python.failure import Failure
 from twisted.internet import error
@@ -50,8 +51,6 @@ class FakeAddress(object):
 
 
 
-@implementer(interfaces.ITransport,
-             interfaces.ITLSTransport)
 class FakeTransport:
     """
     A wrapper around a file-like object to make it behave as a Transport.
@@ -60,6 +59,16 @@ class FakeTransport:
     and is thus useful mainly as a utility for debugging protocols.
     """
 
+    if _ssl_supported:
+        # Not fully supporting ITLSTransport, just minimal implementation
+        # to help with testing.
+        implements(
+            interfaces.ITransport,
+            interfaces.ITLSTransport,
+            )
+    else:
+        implements(interfaces.ITransport)
+
     _nextserial = staticmethod(lambda counter=itertools.count(): next(counter))
     closed = 0
     disconnecting = 0
@@ -168,15 +177,6 @@ class FakeTransport:
     def stopProducing(self):
         self.loseConnection()
 
-    def startTLS(self, contextFactory, beNormal=True):
-        # Nothing's using this feature yet, but startTLS has an undocumented
-        # second argument which defaults to true; if set to False, servers will
-        # behave like clients and clients will behave like servers.
-        connectState = self.isServer ^ beNormal
-        self.tls = TLSNegotiation(contextFactory, connectState)
-        self.tlsbuf = []
-
-
     def getOutBuffer(self):
         """
         Get the pending writes from this transport, clearing them from the
@@ -219,6 +219,15 @@ class FakeTransport:
         else:
             self.protocol.dataReceived(buf)
 
+    if _ssl_supported:
+        def startTLS(self, contextFactory, beNormal=True):
+            # Nothing's using this feature yet, but startTLS has an undocumented
+            # second argument which defaults to true; if set to False, servers will
+            # behave like clients and clients will behave like servers.
+            connectState = self.isServer ^ beNormal
+            self.tls = TLSNegotiation(contextFactory, connectState)
+            self.tlsbuf = []
+
 
 
 def makeFakeClient(clientProtocol):
