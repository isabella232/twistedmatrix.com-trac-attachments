--- Twisted-9.0.0/twisted/names/root.py	2009-03-31 06:26:55.000000000 +0200
+++ Twisted-9.0.0.my/twisted/names/root.py	2009-12-01 20:50:27.054065261 +0100
@@ -14,6 +14,13 @@
     documentation
 """
 
+import warnings
+import exceptions
+import logging
+
+logging.basicConfig(level=logging.DEBUG)
+DNSLogger = logging.getLogger('DNSRoot')
+
 from twisted.internet import defer
 from twisted.names import dns
 from twisted.names import common
@@ -55,29 +62,52 @@
         d.addCallback(r.filterAnswers)
         return d
 
+
+def cleanUpProtocolInstance(data,protocolInstance):
+    if protocolInstance is None:
+        warnings.warn("protocollInstance is None", DeprecationWarning, stacklevel=2)
+    else:
+        DNSLogger.debug("clean up ProtocolInstance: %s" % protocolInstance)
+        try:
+            protocolInstance.transport.stopListening()
+        except exceptions.AttributeError:
+            DNSLogger.debug("ProtocolInstance: %s could not be cleaned up after: %s" % (protocolInstance,protocolInstance.transport))            
+    return data
+
+
 def lookupNameservers(host, atServer, p=None):
     # print 'Nameserver lookup for', host, 'at', atServer, 'with', p
-    if p is None:
+    pWasNone=(p is None)
+    if pWasNone:
         p = dns.DNSDatagramProtocol(_DummyController())
         p.noisy = False
-    return retry(
+    ret=retry(
         (1, 3, 11, 45),                     # Timeouts
         p,                                  # Protocol instance
         (atServer, dns.PORT),               # Server to query
         [dns.Query(host, dns.NS, dns.IN)]   # Question to ask
     )
+    if pWasNone:
+        print "%s" % p
+        ret.addBoth(cleanUpProtocolInstance,p)
+    return ret
 
 def lookupAddress(host, atServer, p=None):
     # print 'Address lookup for', host, 'at', atServer, 'with', p
-    if p is None:
+    pWasNone=(p is None)
+    if pWasNone:
         p = dns.DNSDatagramProtocol(_DummyController())
         p.noisy = False
-    return retry(
+    ret = retry(
         (1, 3, 11, 45),                     # Timeouts
         p,                                  # Protocol instance
         (atServer, dns.PORT),               # Server to query
         [dns.Query(host, dns.A, dns.IN)]    # Question to ask
     )
+    if pWasNone:
+        print "%s" % p
+        ret.addBoth(cleanUpProtocolInstance,p)
+    return ret
 
 def extractAuthority(msg, cache):
     records = msg.answers + msg.authority + msg.additional
