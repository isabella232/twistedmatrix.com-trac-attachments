Index: TwistedWords-0.5.0/twisted/words/protocols/jabber/xmlstream.py
===================================================================
--- TwistedWords-0.5.0/twisted/words/protocols/jabber/xmlstream.py	(revision 8462)
+++ TwistedWords-0.5.0/twisted/words/protocols/jabber/xmlstream.py	(working copy)
@@ -670,27 +670,31 @@
         if to is not None:
             self["to"] = to
 
-        if not ijabber.IIQResponseTracker.providedBy(self._xmlstream):
-            upgradeWithIQResponseTracker(self._xmlstream)
+        if self['type'] in ('get', 'set'):
+            if not ijabber.IIQResponseTracker.providedBy(self._xmlstream):
+                upgradeWithIQResponseTracker(self._xmlstream)
 
-        d = defer.Deferred()
-        self._xmlstream.iqDeferreds[self['id']] = d
+            d = defer.Deferred()
+            self._xmlstream.iqDeferreds[self['id']] = d
 
-        timeout = self.timeout or self._xmlstream.iqDefaultTimeout
-        if timeout is not None:
-            def onTimeout():
-                del self._xmlstream.iqDeferreds[self['id']]
-                d.errback(TimeoutError("IQ timed out"))
+            timeout = self.timeout or self._xmlstream.iqDefaultTimeout
+            if timeout is not None:
+                def onTimeout():
+                    del self._xmlstream.iqDeferreds[self['id']]
+                    d.errback(TimeoutError("IQ timed out"))
 
-            call = self._xmlstream._callLater(timeout, onTimeout)
+                call = self._xmlstream._callLater(timeout, onTimeout)
 
-            def cancelTimeout(result):
-                if call.active():
-                    call.cancel()
+                def cancelTimeout(result):
+                    if call.active():
+                        call.cancel()
 
-                return result
+                    return result
 
-            d.addBoth(cancelTimeout)
+                d.addBoth(cancelTimeout)
 
-        self._xmlstream.send(self)
-        return d
+            self._xmlstream.send(self)
+            return d
+        else:
+            self._xmlstream.send(self)
+            return defer.succeed(None)
