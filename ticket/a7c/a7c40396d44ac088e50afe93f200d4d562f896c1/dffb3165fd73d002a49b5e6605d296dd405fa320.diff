diff --git a/twisted/internet/_pollingfile.py b/twisted/internet/_pollingfile.py
index 5d00ace..ff6481a 100644
--- a/twisted/internet/_pollingfile.py
+++ b/twisted/internet/_pollingfile.py
@@ -166,7 +166,7 @@ class _PollableWritePipe(_PollableResource):
     def __init__(self, writePipe, lostCallback):
         self.disconnecting = False
         self.producer = None
-        self.producerPaused = 0
+        self.producerPaused = False
         self.streamingProducer = 0
         self.outQueue = []
         self.writePipe = writePipe
@@ -185,13 +185,13 @@ class _PollableWritePipe(_PollableResource):
 
     def bufferFull(self):
         if self.producer is not None:
-            self.producerPaused = 1
+            self.producerPaused = True
             self.producer.pauseProducing()
 
     def bufferEmpty(self):
         if self.producer is not None and ((not self.streamingProducer) or
                                           self.producerPaused):
-            self.producer.producerPaused = 0
+            self.producer.producerPaused = False
             self.producer.resumeProducing()
             return True
         return False
diff --git a/twisted/internet/abstract.py b/twisted/internet/abstract.py
index 6e69f4a..af376b8 100644
--- a/twisted/internet/abstract.py
+++ b/twisted/internet/abstract.py
@@ -59,7 +59,7 @@ class _ConsumerMixin(object):
 
     @ivar producerPaused: A flag indicating whether the producer is currently
         paused.
-    @type producerPaused: C{bool} or C{int}
+    @type producerPaused: C{bool}
 
     @ivar streamingProducer: A flag indicating whether the producer was
         registered as a streaming (ie push) producer or not (ie a pull
@@ -267,7 +267,7 @@ class FileDescriptor(_ConsumerMixin, _LogOwner):
             if self.producer is not None and ((not self.streamingProducer)
                                               or self.producerPaused):
                 # tell them to supply some more.
-                self.producerPaused = 0
+                self.producerPaused = False
                 self.producer.resumeProducing()
             elif self.disconnecting:
                 # But if I was previously asked to let the connection die, do
@@ -327,7 +327,7 @@ class FileDescriptor(_ConsumerMixin, _LogOwner):
             # and our buffer is full,
             if self._isSendBufferFull():
                 # pause it.
-                self.producerPaused = 1
+                self.producerPaused = True
                 self.producer.pauseProducing()
 
 
