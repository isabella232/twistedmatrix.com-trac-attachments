diff --git twisted/internet/test/test_inotify.py twisted/internet/test/test_inotify.py
index 038782a..cad0c9c 100644
--- twisted/internet/test/test_inotify.py
+++ twisted/internet/test/test_inotify.py
@@ -509,44 +509,47 @@ class TestINotify(unittest.TestCase):
         L{inotify.INotify} will callback the overflow-callback in case of
         IN_Q_OVERFLOW.
         """
-        # There could be more than just one overflow so keep track of when it
-        # has happened in order to only try to finish the test on the first
-        # overflow.
-        overflowed = set()
-        def overflow():
-            if not overflowed:
-                overflowed.add(None)
-                notify.stopReading()
-                overflowing.callback(None)
+        import os, struct
+        class FakeINotify:
+            def init(self):
+                self.next_wd = 0
+                fd, self.write_fd = os.pipe()
+                return fd
+
+            def add(self, fd, path, mask):
+                self.next_wd += 1
+                return self.next_wd
+
+            def remove(fd, wd):
+                pass
 
-        subdir = self.dirname.child(b"overflow")
-        subdir.makedirs()
+            def initializeModule(libc):
+                pass
+
+            def write_event(self, wd, mask, cookie = 0, name = b''):
+                """
+                Simulate an event with wd, mask, cookie and name.
+                """
+                buf = struct.pack("=lLLL", wd, mask, cookie, len(name)) + name
+                os.write(self.write_fd, buf)
+
+        fake_inotify = FakeINotify()
+        self.patch(inotify.INotify, '_inotify', fake_inotify)
+
+        def overflow():
+            notify.stopReading()
+            overflowing.callback(None)
 
         overflowing = defer.Deferred()
         notify = inotify.INotify(overflow=overflow)
 
-        # To try to make this test hit the limit as quickly as possible, pick a
-        # certain set of events associated with some of the less expensive I/O
-        # operations INotify supports.  There shouldn't be anything special
-        # about these events with respect to the overflow functionality.  They
-        # are selected *only* for their desirable performance characteristics.
-        mask = inotify.IN_OPEN | inotify.IN_ACCESS | inotify.IN_CLOSE_NOWRITE
-        notify.watch(subdir, mask=mask)
-
-        maxEvents = filepath.FilePath(b"/proc/sys/fs/inotify/max_queued_events")
-        num = int(maxEvents.getContent())
-
-        probe = subdir.child(b"probe")
-        probe.setContent(b"x")
-
-        # Since there are three events per iteration, one third the limit
-        # should suffice.
-        num = num / 3 + 1
-        for i in range(num):
-            # open generates IN_OPEN
-            # read generates IN_ACCESS
-            # close generates IN_CLOSE_NOWRITE
-            probe.getContent()
+        wd = notify.watch(self.dirname)
+        #Fake some events
+        fake_inotify.write_event(wd, inotify.IN_CREATE, 0, b'a')
+        fake_inotify.write_event(wd, inotify.IN_CREATE, 0, b'b')
+        fake_inotify.write_event(wd, inotify.IN_CREATE, 0, b'c')
+        #Whopsie those were to many:
+        fake_inotify.write_event(-1, inotify.IN_Q_OVERFLOW)
 
         notify.startReading()
         return overflowing
