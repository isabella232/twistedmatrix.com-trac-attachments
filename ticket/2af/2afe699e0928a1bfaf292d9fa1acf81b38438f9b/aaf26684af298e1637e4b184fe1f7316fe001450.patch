diff --git twisted/conch/scripts/ckeygen.py twisted/conch/scripts/ckeygen.py
index 5e7184a..ee6c8cc 100644
--- twisted/conch/scripts/ckeygen.py
+++ twisted/conch/scripts/ckeygen.py
@@ -36,6 +36,7 @@ class GeneralOptions(usage.Options):
     optFlags = [['fingerprint', 'l', 'Show fingerprint of key file.'],
                 ['changepass', 'p', 'Change passphrase of private key file.'],
                 ['quiet', 'q', 'Quiet.'],
+                ['no-passphrase', None, "Create the key with no passphrase"],
                 ['showpub', 'y', 'Read private key file and print public key.']]
 
     compData = usage.Completions(
@@ -193,7 +194,9 @@ def _saveKey(key, options):
         yn = raw_input('Overwrite (y/n)? ')
         if yn[0].lower() != 'y':
             sys.exit()
-    if not options['pass']:
+    if options.get('no-passphrase', False):
+        options['pass'] = ''
+    elif not options['pass']:
         while 1:
             p1 = getpass.getpass('Enter passphrase (empty for no passphrase): ')
             p2 = getpass.getpass('Enter same passphrase again: ')
diff --git twisted/conch/test/test_ckeygen.py twisted/conch/test/test_ckeygen.py
index b4df2d7..ca3fba3 100644
--- twisted/conch/test/test_ckeygen.py
+++ twisted/conch/test/test_ckeygen.py
@@ -99,6 +99,34 @@ class KeyGenTests(TestCase):
             key.public())
 
 
+    def test_saveKeyEmptyPassphrase(self):
+        """
+        L{_saveKey} accepts an empty string as the passphrase.
+        """
+        base = FilePath(self.mktemp())
+        base.makedirs()
+        filename = base.child('id_rsa').path
+        key = Key.fromString(privateRSA_openssh)
+        _saveKey(
+            key.keyObject,
+            {'filename': filename, 'no-passphrase': True})
+        self.assertEqual(
+            self.stdout.getvalue(),
+            "Your identification has been saved in %s\n"
+            "Your public key has been saved in %s.pub\n"
+            "The key fingerprint is:\n"
+            "3d:13:5f:cb:c9:79:8a:93:06:27:65:bc:3d:0b:8f:af\n" % (
+                filename,
+                filename))
+        self.assertEqual(
+            key.fromString(
+                base.child('id_rsa').getContent(), None, ''),
+            key)
+        self.assertEqual(
+            Key.fromString(base.child('id_rsa.pub').getContent()),
+            key.public())
+
+
     def test_displayPublicKey(self):
         """
         L{displayPublicKey} prints out the public key associated with a given
