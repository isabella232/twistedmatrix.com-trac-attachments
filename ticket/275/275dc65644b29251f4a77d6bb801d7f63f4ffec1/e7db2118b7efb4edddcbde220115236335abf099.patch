=== modified file 'doc/core/howto/listings/udp/MulticastClient.py'
--- doc/core/howto/listings/udp/MulticastClient.py	2011-11-10 03:08:41 +0000
+++ doc/core/howto/listings/udp/MulticastClient.py	2011-11-10 10:50:28 +0000
@@ -7,13 +7,12 @@
     def startProtocol(self):
         # Join the multicast address, so we can receive replies:
         self.transport.joinGroup("228.0.0.5")
-        # Send to 228.0.0.5:8005 - all listeners on the multicast address will
-        # receive this message. We also send unicast to a specific address the
-        # same way a normal UDP client would.
+        # Send to 228.0.0.5:8005 - all listeners on the multicast address
+        # (including us) will receive this message.
         self.transport.write('Client: Ping', ("228.0.0.5", 8005))
 
     def datagramReceived(self, datagram, address):
-        print "Received: " + repr(datagram)
+        print "Datagram %s received from %s" % (repr(datagram), repr(address))
 
 
 reactor.listenMulticast(8005, MulticastPingClient(), listenMultiple=True)

=== modified file 'doc/core/howto/listings/udp/MulticastServer.py'
--- doc/core/howto/listings/udp/MulticastServer.py	2011-11-10 03:08:41 +0000
+++ doc/core/howto/listings/udp/MulticastServer.py	2011-11-10 10:51:16 +0000
@@ -17,7 +17,7 @@
         print "Datagram %s received from %s" % (repr(datagram), repr(address))
         if datagram == "Client: Ping":
             # Rather than replying to the group multicast address, we send the
-            # reply directly to the originating port:
+            # reply directly (unicast) to the originating port:
             self.transport.write("Server: Pong", address)
 
 

