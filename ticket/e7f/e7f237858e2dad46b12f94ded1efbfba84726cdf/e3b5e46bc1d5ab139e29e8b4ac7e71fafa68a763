diff --git a/src/twisted/internet/iocpreactor/build.bat b/src/twisted/internet/iocpreactor/build.bat
index 25f361b..3cd6958 100644
--- a/src/twisted/internet/iocpreactor/build.bat
+++ b/src/twisted/internet/iocpreactor/build.bat
@@ -1,4 +1,14 @@
+@echo off
+set args=-c mingw
+
+if %1.==. goto build
+
+if "%1" == "vs" (
+    set args=
+)
+
+:build
 del iocpsupport\iocpsupport.c iocpsupport.pyd
 del /f /s /q build
-python setup.py build_ext -i -c mingw32
+python setup.py build_ext -i %args%
 
diff --git a/src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi b/src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi
index 9fc5e8c..3a2e8cb 100644
--- a/src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi
+++ b/src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi
@@ -14,7 +14,7 @@ def accept(long listening, long accepting, object buff, object obj):
 
     PyObject_AsWriteBuffer(buff, &mem_buffer, &size)
 
-    ov = makeOV(obj, buff)
+    ov = makeOV(obj)
 
     rc = lpAcceptEx(listening, accepting, mem_buffer, 0,
                     <DWORD>size / 2, <DWORD>size / 2,
diff --git a/src/twisted/internet/iocpreactor/iocpsupport/iocpsupport.c b/src/twisted/internet/iocpreactor/iocpsupport/iocpsupport.c
index e860550..8f8d87c 100755
--- a/src/twisted/internet/iocpreactor/iocpsupport/iocpsupport.c
+++ b/src/twisted/internet/iocpreactor/iocpsupport/iocpsupport.c
@@ -1,13 +1,14 @@
-/* Generated by Cython 0.25 */
+/* Generated by Cython 0.27.3 */
 
 #define PY_SSIZE_T_CLEAN
 #include "Python.h"
 #ifndef Py_PYTHON_H
     #error Python headers needed to compile C extensions, please install development version of Python.
-#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
-    #error Cython requires Python 2.6+ or Python 3.2+.
+#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
+    #error Cython requires Python 2.6+ or Python 3.3+.
 #else
-#define CYTHON_ABI "0_25"
+#define CYTHON_ABI "0_27_3"
+#define CYTHON_FUTURE_DIVISION 0
 #include <stddef.h>
 #ifndef offsetof
   #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
@@ -29,8 +30,9 @@
 #ifndef DL_EXPORT
   #define DL_EXPORT(t) t
 #endif
+#define __PYX_COMMA ,
 #ifndef HAVE_LONG_LONG
-  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
+  #if PY_VERSION_HEX >= 0x02070000
     #define HAVE_LONG_LONG
   #endif
 #endif
@@ -46,8 +48,14 @@
   #define CYTHON_COMPILING_IN_CPYTHON 0
   #undef CYTHON_USE_TYPE_SLOTS
   #define CYTHON_USE_TYPE_SLOTS 0
-  #undef CYTHON_USE_ASYNC_SLOTS
-  #define CYTHON_USE_ASYNC_SLOTS 0
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #if PY_VERSION_HEX < 0x03050000
+    #undef CYTHON_USE_ASYNC_SLOTS
+    #define CYTHON_USE_ASYNC_SLOTS 0
+  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
+    #define CYTHON_USE_ASYNC_SLOTS 1
+  #endif
   #undef CYTHON_USE_PYLIST_INTERNALS
   #define CYTHON_USE_PYLIST_INTERNALS 0
   #undef CYTHON_USE_UNICODE_INTERNALS
@@ -66,6 +74,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #elif defined(PYSTON_VERSION)
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 1
@@ -73,6 +85,8 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
   #undef CYTHON_USE_ASYNC_SLOTS
   #define CYTHON_USE_ASYNC_SLOTS 0
   #undef CYTHON_USE_PYLIST_INTERNALS
@@ -97,6 +111,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #else
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 0
@@ -104,6 +122,12 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #if PY_VERSION_HEX < 0x02070000
+    #undef CYTHON_USE_PYTYPE_LOOKUP
+    #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
+    #define CYTHON_USE_PYTYPE_LOOKUP 1
+  #endif
   #if PY_MAJOR_VERSION < 3
     #undef CYTHON_USE_ASYNC_SLOTS
     #define CYTHON_USE_ASYNC_SLOTS 0
@@ -143,6 +167,12 @@
   #ifndef CYTHON_FAST_PYCALL
     #define CYTHON_FAST_PYCALL 1
   #endif
+  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
+    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
+  #endif
+  #ifndef CYTHON_USE_TP_FINALIZE
+    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
+  #endif
 #endif
 #if !defined(CYTHON_FAST_PYCCALL)
 #define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
@@ -181,19 +211,44 @@
 #ifndef Py_TPFLAGS_HAVE_FINALIZE
   #define Py_TPFLAGS_HAVE_FINALIZE 0
 #endif
-#ifndef METH_FASTCALL
-  #define METH_FASTCALL 0x80
-  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
-                                              Py_ssize_t nargs, PyObject *kwnames);
+#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
+  #ifndef METH_FASTCALL
+     #define METH_FASTCALL 0x80
+  #endif
+  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
+  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
+                                                          Py_ssize_t nargs, PyObject *kwnames);
 #else
   #define __Pyx_PyCFunctionFast _PyCFunctionFast
+  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
 #endif
 #if CYTHON_FAST_PYCCALL
 #define __Pyx_PyFastCFunction_Check(func)\
-    ((PyCFunction_Check(func) && METH_FASTCALL == PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))
+    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
 #else
 #define __Pyx_PyFastCFunction_Check(func) 0
 #endif
+#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#elif PY_VERSION_HEX >= 0x03060000
+  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
+#elif PY_VERSION_HEX >= 0x03000000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#else
+  #define __Pyx_PyThreadState_Current _PyThreadState_Current
+#endif
+#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
+#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
+#else
+#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
+#endif
+#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
+#else
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
+#endif
 #if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
   #define CYTHON_PEP393_ENABLED 1
   #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
@@ -277,7 +332,7 @@
 #ifndef PySet_CheckExact
   #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
 #endif
-#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
+#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
 #if PY_MAJOR_VERSION >= 3
   #define PyIntObject                  PyLongObject
   #define PyInt_Type                   PyLong_Type
@@ -316,20 +371,28 @@
 #else
   #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
 #endif
+#ifndef __has_attribute
+  #define __has_attribute(x) 0
+#endif
+#ifndef __has_cpp_attribute
+  #define __has_cpp_attribute(x) 0
+#endif
 #if CYTHON_USE_ASYNC_SLOTS
   #if PY_VERSION_HEX >= 0x030500B1
     #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
     #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
   #else
+    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
+  #endif
+#else
+  #define __Pyx_PyType_AsAsync(obj) NULL
+#endif
+#ifndef __Pyx_PyAsyncMethodsStruct
     typedef struct {
         unaryfunc am_await;
         unaryfunc am_aiter;
         unaryfunc am_anext;
     } __Pyx_PyAsyncMethodsStruct;
-    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
-  #endif
-#else
-  #define __Pyx_PyType_AsAsync(obj) NULL
 #endif
 #ifndef CYTHON_RESTRICT
   #if defined(__GNUC__)
@@ -342,10 +405,76 @@
     #define CYTHON_RESTRICT
   #endif
 #endif
+#ifndef CYTHON_UNUSED
+# if defined(__GNUC__)
+#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
+#     define CYTHON_UNUSED __attribute__ ((__unused__))
+#   else
+#     define CYTHON_UNUSED
+#   endif
+# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
+#   define CYTHON_UNUSED __attribute__ ((__unused__))
+# else
+#   define CYTHON_UNUSED
+# endif
+#endif
+#ifndef CYTHON_MAYBE_UNUSED_VAR
+#  if defined(__cplusplus)
+     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
+#  else
+#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
+#  endif
+#endif
+#ifndef CYTHON_NCP_UNUSED
+# if CYTHON_COMPILING_IN_CPYTHON
+#  define CYTHON_NCP_UNUSED
+# else
+#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
+# endif
+#endif
 #define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
+#ifdef _MSC_VER
+    #ifndef _MSC_STDINT_H_
+        #if _MSC_VER < 1300
+           typedef unsigned char     uint8_t;
+           typedef unsigned int      uint32_t;
+        #else
+           typedef unsigned __int8   uint8_t;
+           typedef unsigned __int32  uint32_t;
+        #endif
+    #endif
+#else
+   #include <stdint.h>
+#endif
+#ifndef CYTHON_FALLTHROUGH
+  #if defined(__cplusplus) && __cplusplus >= 201103L
+    #if __has_cpp_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH [[fallthrough]]
+    #elif __has_cpp_attribute(clang::fallthrough)
+      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
+    #elif __has_cpp_attribute(gnu::fallthrough)
+      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
+    #endif
+  #endif
+  #ifndef CYTHON_FALLTHROUGH
+    #if __has_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
+    #else
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+  #if defined(__clang__ ) && defined(__apple_build_version__)
+    #if __apple_build_version__ < 7000000
+      #undef  CYTHON_FALLTHROUGH
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+#endif
 
 #ifndef CYTHON_INLINE
-  #if defined(__GNUC__)
+  #if defined(__clang__)
+    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
+  #elif defined(__GNUC__)
     #define CYTHON_INLINE __inline__
   #elif defined(_MSC_VER)
     #define CYTHON_INLINE __inline
@@ -381,14 +510,6 @@ static CYTHON_INLINE float __PYX_NAN() {
   __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
 }
 
-#if PY_MAJOR_VERSION >= 3
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
-#else
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
-#endif
-
 #ifndef __PYX_EXTERN_C
   #ifdef __cplusplus
     #define __PYX_EXTERN_C extern "C"
@@ -412,30 +533,10 @@ static CYTHON_INLINE float __PYX_NAN() {
 #include <omp.h>
 #endif /* _OPENMP */
 
-#ifdef PYREX_WITHOUT_ASSERTIONS
+#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
 #define CYTHON_WITHOUT_ASSERTIONS
 #endif
 
-#ifndef CYTHON_UNUSED
-# if defined(__GNUC__)
-#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
-#     define CYTHON_UNUSED __attribute__ ((__unused__))
-#   else
-#     define CYTHON_UNUSED
-#   endif
-# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
-#   define CYTHON_UNUSED __attribute__ ((__unused__))
-# else
-#   define CYTHON_UNUSED
-# endif
-#endif
-#ifndef CYTHON_NCP_UNUSED
-# if CYTHON_COMPILING_IN_CPYTHON
-#  define CYTHON_NCP_UNUSED
-# else
-#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
-# endif
-#endif
 typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                 const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;
 
@@ -463,8 +564,8 @@ typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* enc
     #define __Pyx_sst_abs(value) abs(value)
 #elif SIZEOF_LONG >= SIZEOF_SIZE_T
     #define __Pyx_sst_abs(value) labs(value)
-#elif defined (_MSC_VER) && defined (_M_X64)
-    #define __Pyx_sst_abs(value) _abs64(value)
+#elif defined (_MSC_VER)
+    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
 #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
     #define __Pyx_sst_abs(value) llabs(value)
 #elif defined (__GNUC__)
@@ -472,8 +573,8 @@ typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* enc
 #else
     #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
 #endif
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
 #define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
 #define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
 #define __Pyx_PyBytes_FromString        PyBytes_FromString
@@ -486,23 +587,27 @@ static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
     #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
     #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
 #endif
-#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
-#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
 #define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
 #define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
 #define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
 #define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
 #define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
-#if PY_MAJOR_VERSION < 3
-static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
-{
+static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
     const Py_UNICODE *u_end = u;
     while (*u_end++) ;
     return (size_t)(u_end - u - 1);
 }
-#else
-#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
-#endif
 #define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
 #define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
 #define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
@@ -511,6 +616,8 @@ static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
 #define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
 static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
+#define __Pyx_PySequence_Tuple(obj)\
+    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
 static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
 static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
 #if CYTHON_ASSUME_SAFE_MACROS
@@ -609,10 +716,12 @@ bad:
   #define likely(x)   (x)
   #define unlikely(x) (x)
 #endif /* __GNUC__ */
+static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
 
-static PyObject *__pyx_m;
+static PyObject *__pyx_m = NULL;
 static PyObject *__pyx_d;
 static PyObject *__pyx_b;
+static PyObject *__pyx_cython_runtime;
 static PyObject *__pyx_empty_tuple;
 static PyObject *__pyx_empty_bytes;
 static PyObject *__pyx_empty_unicode;
@@ -623,11 +732,12 @@ static const char *__pyx_filename;
 
 
 static const char *__pyx_f[] = {
-  "src\\twisted\\internet\\iocpreactor\\iocpsupport\\iocpsupport.pyx",
-  "src\\twisted\\internet\\iocpreactor\\iocpsupport\\acceptex.pxi",
-  "src\\twisted\\internet\\iocpreactor\\iocpsupport\\connectex.pxi",
-  "src\\twisted\\internet\\iocpreactor\\iocpsupport\\wsarecv.pxi",
-  "src\\twisted\\internet\\iocpreactor\\iocpsupport\\wsasend.pxi",
+  "iocpsupport\\iocpsupport.pyx",
+  "stringsource",
+  "iocpsupport\\acceptex.pxi",
+  "iocpsupport\\connectex.pxi",
+  "iocpsupport\\wsarecv.pxi",
+  "iocpsupport\\wsasend.pxi",
 };
 
 /* "iocpsupport.pyx":7
@@ -813,23 +923,35 @@ static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg
 /* PyThreadStateGet.proto */
 #if CYTHON_FAST_THREAD_STATE
 #define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
-#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
+#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
+#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
 #else
 #define __Pyx_PyThreadState_declare
 #define __Pyx_PyThreadState_assign
+#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
 #endif
 
 /* PyErrFetchRestore.proto */
 #if CYTHON_FAST_THREAD_STATE
+#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
 #define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
 #define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
 #define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
 #define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
 static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
 static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
+#else
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
+#endif
 #else
+#define __Pyx_PyErr_Clear() PyErr_Clear()
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
 #define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
 #define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
+#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
+#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
 #define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
 #define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
 #endif
@@ -887,8 +1009,13 @@ static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObje
         (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
          (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
              ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
-              (PY_VERSION_HEX >= 0x030600B1 && (cfunc)->flag == METH_FASTCALL ?  (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL) :\
-                __Pyx__CallUnboundCMethod0(cfunc, self))))) :\
+              (PY_VERSION_HEX >= 0x030600B1 && (cfunc)->flag == METH_FASTCALL ?\
+                (PY_VERSION_HEX >= 0x030700A0 ?\
+                    (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0) :\
+                    (*(__Pyx_PyCFunctionFastWithKeywords)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL)) :\
+              (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
+                    (*(__Pyx_PyCFunctionFastWithKeywords)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL) :\
+                    __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
         __Pyx__CallUnboundCMethod0(cfunc, self))
 #else
 #define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
@@ -907,7 +1034,21 @@ static CYTHON_INLINE int __Pyx_IterFinish(void);
 static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);
 
 /* KeywordStringCheck.proto */
-static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);
+static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);
+
+/* PyErrExceptionMatches.proto */
+#if CYTHON_FAST_THREAD_STATE
+#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
+static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
+#else
+#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
+#endif
+
+/* GetAttr.proto */
+static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);
+
+/* GetAttr3.proto */
+static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);
 
 /* GetItemInt.proto */
 #define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
@@ -927,7 +1068,7 @@ static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_
     (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
 static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                               int wraparound, int boundscheck);
-static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
+static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
 static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                      int is_list, int wraparound, int boundscheck);
 
@@ -980,6 +1121,44 @@ static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject
 #define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
 #endif
 
+/* Import.proto */
+static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);
+
+/* ImportFrom.proto */
+static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);
+
+/* PyCFunctionFastCall.proto */
+#if CYTHON_FAST_PYCCALL
+static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
+#else
+#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
+#endif
+
+/* PyFunctionFastCall.proto */
+#if CYTHON_FAST_PYCALL
+#define __Pyx_PyFunction_FastCall(func, args, nargs)\
+    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
+#if 1 || PY_VERSION_HEX < 0x030600B1
+static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
+#else
+#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
+#endif
+#endif
+
+/* PyObjectCallMethO.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
+#endif
+
+/* PyObjectCallOneArg.proto */
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);
+
+/* HasAttr.proto */
+static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
+
+/* SetupReduce.proto */
+static int __Pyx_setup_reduce(PyObject* type_obj);
+
 /* FetchCommonType.proto */
 static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
 
@@ -1046,8 +1225,12 @@ static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases,
 static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                       PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);
 
-/* Import.proto */
-static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);
+/* CLineInTraceback.proto */
+#ifdef CYTHON_CLINE_IN_TRACEBACK
+#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
+#else
+static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
+#endif
 
 /* CodeObjectCache.proto */
 typedef struct {
@@ -1095,6 +1278,18 @@ static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *);
 /* CIntFromPy.proto */
 static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);
 
+/* FastTypeChecks.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
+#else
+#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
+#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
+#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
+#endif
+
 /* CheckBinaryVersion.proto */
 static int __Pyx_check_binary_version(void);
 
@@ -1113,7 +1308,9 @@ static PyObject *__pyx_f_11iocpsupport__makesockaddr(struct sockaddr *, Py_ssize
 static PyObject *__pyx_f_11iocpsupport_fillinetaddr(struct sockaddr_in *, PyObject *); /*proto*/
 static PyObject *__pyx_f_11iocpsupport_fillinet6addr(struct sockaddr_in6 *, PyObject *); /*proto*/
 static int __pyx_f_11iocpsupport_getAddrFamily(__pyx_t_11iocpsupport_SOCKET); /*proto*/
+static PyObject *__pyx_f_11iocpsupport___pyx_unpickle_CompletionPort__set_state(struct __pyx_obj_11iocpsupport_CompletionPort *, PyObject *); /*proto*/
 #define __Pyx_MODULE_NAME "iocpsupport"
+extern int __pyx_module_is_main_iocpsupport;
 int __pyx_module_is_main_iocpsupport = 0;
 
 /* Implementation of 'iocpsupport' */
@@ -1133,13 +1330,15 @@ static const char __pyx_k_ov[] = "ov";
 static const char __pyx_k_rc[] = "rc";
 static const char __pyx_k_doc[] = "__doc__";
 static const char __pyx_k_key[] = "key";
+static const char __pyx_k_new[] = "__new__";
 static const char __pyx_k_obj[] = "obj";
 static const char __pyx_k_res[] = "res";
 static const char __pyx_k_addr[] = "addr";
 static const char __pyx_k_buff[] = "buff";
+static const char __pyx_k_dict[] = "__dict__";
 static const char __pyx_k_init[] = "__init__";
 static const char __pyx_k_main[] = "__main__";
-static const char __pyx_k_name[] = "name";
+static const char __pyx_k_name[] = "__name__";
 static const char __pyx_k_recv[] = "recv";
 static const char __pyx_k_self[] = "self";
 static const char __pyx_k_send[] = "send";
@@ -1157,8 +1356,12 @@ static const char __pyx_k_family[] = "family";
 static const char __pyx_k_handle[] = "handle";
 static const char __pyx_k_import[] = "__import__";
 static const char __pyx_k_module[] = "__module__";
+static const char __pyx_k_name_2[] = "name";
+static const char __pyx_k_pickle[] = "pickle";
+static const char __pyx_k_reduce[] = "__reduce__";
 static const char __pyx_k_rsplit[] = "rsplit";
 static const char __pyx_k_socket[] = "socket";
+static const char __pyx_k_update[] = "update";
 static const char __pyx_k_ws_buf[] = "ws_buf";
 static const char __pyx_k_wsa_pi[] = "wsa_pi";
 static const char __pyx_k_buffers[] = "buffers";
@@ -1167,9 +1370,12 @@ static const char __pyx_k_namelen[] = "namelen";
 static const char __pyx_k_prepare[] = "__prepare__";
 static const char __pyx_k_bufflist[] = "bufflist";
 static const char __pyx_k_callback[] = "callback";
+static const char __pyx_k_getstate[] = "__getstate__";
 static const char __pyx_k_locallen[] = "locallen";
+static const char __pyx_k_pyx_type[] = "__pyx_type";
 static const char __pyx_k_qualname[] = "__qualname__";
 static const char __pyx_k_recvfrom[] = "recvfrom";
+static const char __pyx_k_setstate[] = "__setstate__";
 static const char __pyx_k_accepting[] = "accepting";
 static const char __pyx_k_addr_buff[] = "addr_buff";
 static const char __pyx_k_buffcount[] = "buffcount";
@@ -1178,48 +1384,62 @@ static const char __pyx_k_ipv6_name[] = "ipv6_name";
 static const char __pyx_k_listening[] = "listening";
 static const char __pyx_k_localaddr[] = "localaddr";
 static const char __pyx_k_metaclass[] = "__metaclass__";
+static const char __pyx_k_pyx_state[] = "__pyx_state";
+static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
 static const char __pyx_k_remotelen[] = "remotelen";
 static const char __pyx_k_ValueError[] = "ValueError";
 static const char __pyx_k_getsockopt[] = "getsockopt";
 static const char __pyx_k_maxAddrLen[] = "maxAddrLen";
 static const char __pyx_k_mem_buffer[] = "mem_buffer";
+static const char __pyx_k_pyx_result[] = "__pyx_result";
 static const char __pyx_k_remoteaddr[] = "remoteaddr";
 static const char __pyx_k_MemoryError[] = "MemoryError";
+static const char __pyx_k_PickleError[] = "PickleError";
 static const char __pyx_k_c_addr_buff[] = "c_addr_buff";
 static const char __pyx_k_iocpsupport[] = "iocpsupport";
 static const char __pyx_k_Event___init[] = "Event.__init__";
 static const char __pyx_k_RuntimeError[] = "RuntimeError";
 static const char __pyx_k_WindowsError[] = "WindowsError";
 static const char __pyx_k_makesockaddr[] = "makesockaddr";
+static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
+static const char __pyx_k_stringsource[] = "stringsource";
 static const char __pyx_k_addr_len_buff[] = "addr_len_buff";
+static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
 static const char __pyx_k_have_connectex[] = "have_connectex";
 static const char __pyx_k_c_addr_buff_len[] = "c_addr_buff_len";
 static const char __pyx_k_c_addr_len_buff[] = "c_addr_len_buff";
+static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
+static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
 static const char __pyx_k_get_accept_addrs[] = "get_accept_addrs";
+static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
 static const char __pyx_k_WSAAddressToStringW[] = "WSAAddressToStringW";
 static const char __pyx_k_c_addr_len_buff_len[] = "c_addr_len_buff_len";
 static const char __pyx_k_invalid_IP_address_r[] = "invalid IP address %r";
 static const char __pyx_k_CreateIoCompletionPort[] = "CreateIoCompletionPort";
 static const char __pyx_k_invalid_IPv6_address_r[] = "invalid IPv6 address %r";
+static const char __pyx_k_iocpsupport_wsarecv_pxi[] = "iocpsupport\\wsarecv.pxi";
+static const char __pyx_k_iocpsupport_wsasend_pxi[] = "iocpsupport\\wsasend.pxi";
+static const char __pyx_k_iocpsupport_acceptex_pxi[] = "iocpsupport\\acceptex.pxi";
+static const char __pyx_k_iocpsupport_connectex_pxi[] = "iocpsupport\\connectex.pxi";
 static const char __pyx_k_PostQueuedCompletionStatus[] = "PostQueuedCompletionStatus";
 static const char __pyx_k_unsupported_address_family[] = "unsupported address family";
+static const char __pyx_k_iocpsupport_iocpsupport_pyx[] = "iocpsupport\\iocpsupport.pyx";
+static const char __pyx_k_pyx_unpickle_CompletionPort[] = "__pyx_unpickle_CompletionPort";
 static const char __pyx_k_unsupported_address_family_d[] = "unsupported address family %d";
 static const char __pyx_k_length_of_address_length_buffer[] = "length of address length buffer needs to be sizeof(int)";
 static const char __pyx_k_undefined_error_occurred_during[] = "undefined error occurred during address parsing";
 static const char __pyx_k_ConnectEx_is_not_available_on_th[] = "ConnectEx is not available on this system";
 static const char __pyx_k_Failed_to_initialize_Winsock_fun[] = "Failed to initialize Winsock function vectors";
-static const char __pyx_k_z_Projects_Twisted_src_twisted_i[] = "z:\\Projects\\Twisted\\src\\twisted\\internet\\iocpreactor\\iocpsupport\\iocpsupport.pyx";
-static const char __pyx_k_z_Projects_Twisted_src_twisted_i_2[] = "z:\\Projects\\Twisted\\src\\twisted\\internet\\iocpreactor\\iocpsupport\\acceptex.pxi";
-static const char __pyx_k_z_Projects_Twisted_src_twisted_i_3[] = "z:\\Projects\\Twisted\\src\\twisted\\internet\\iocpreactor\\iocpsupport\\connectex.pxi";
-static const char __pyx_k_z_Projects_Twisted_src_twisted_i_4[] = "z:\\Projects\\Twisted\\src\\twisted\\internet\\iocpreactor\\iocpsupport\\wsarecv.pxi";
-static const char __pyx_k_z_Projects_Twisted_src_twisted_i_5[] = "z:\\Projects\\Twisted\\src\\twisted\\internet\\iocpreactor\\iocpsupport\\wsasend.pxi";
+static const char __pyx_k_Incompatible_checksums_s_vs_0x90[] = "Incompatible checksums (%s vs 0x901555f = (port))";
 static PyObject *__pyx_kp_u_;
 static PyObject *__pyx_kp_s_ConnectEx_is_not_available_on_th;
 static PyObject *__pyx_n_s_CreateIoCompletionPort;
 static PyObject *__pyx_n_s_Event;
 static PyObject *__pyx_n_s_Event___init;
 static PyObject *__pyx_kp_s_Failed_to_initialize_Winsock_fun;
+static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x90;
 static PyObject *__pyx_n_s_MemoryError;
+static PyObject *__pyx_n_s_PickleError;
 static PyObject *__pyx_n_s_PostQueuedCompletionStatus;
 static PyObject *__pyx_n_s_RuntimeError;
 static PyObject *__pyx_n_s_ValueError;
@@ -1243,12 +1463,15 @@ static PyObject *__pyx_n_s_c_addr_buff_len;
 static PyObject *__pyx_n_s_c_addr_len_buff;
 static PyObject *__pyx_n_s_c_addr_len_buff_len;
 static PyObject *__pyx_n_s_callback;
+static PyObject *__pyx_n_s_cline_in_traceback;
 static PyObject *__pyx_n_s_connect;
+static PyObject *__pyx_n_s_dict;
 static PyObject *__pyx_n_s_doc;
 static PyObject *__pyx_n_s_family;
 static PyObject *__pyx_n_s_flags;
 static PyObject *__pyx_n_s_get_accept_addrs;
 static PyObject *__pyx_n_s_getsockopt;
+static PyObject *__pyx_n_s_getstate;
 static PyObject *__pyx_n_s_handle;
 static PyObject *__pyx_n_s_have_connectex;
 static PyObject *__pyx_n_s_i;
@@ -1257,6 +1480,11 @@ static PyObject *__pyx_n_s_init;
 static PyObject *__pyx_kp_s_invalid_IP_address_r;
 static PyObject *__pyx_kp_s_invalid_IPv6_address_r;
 static PyObject *__pyx_n_s_iocpsupport;
+static PyObject *__pyx_kp_s_iocpsupport_acceptex_pxi;
+static PyObject *__pyx_kp_s_iocpsupport_connectex_pxi;
+static PyObject *__pyx_kp_s_iocpsupport_iocpsupport_pyx;
+static PyObject *__pyx_kp_s_iocpsupport_wsarecv_pxi;
+static PyObject *__pyx_kp_s_iocpsupport_wsasend_pxi;
 static PyObject *__pyx_n_s_ipv4_name;
 static PyObject *__pyx_n_s_ipv6_name;
 static PyObject *__pyx_n_s_items;
@@ -1274,15 +1502,27 @@ static PyObject *__pyx_n_s_mem_buffer;
 static PyObject *__pyx_n_s_metaclass;
 static PyObject *__pyx_n_s_module;
 static PyObject *__pyx_n_s_name;
+static PyObject *__pyx_n_s_name_2;
 static PyObject *__pyx_n_s_namelen;
+static PyObject *__pyx_n_s_new;
 static PyObject *__pyx_n_s_obj;
 static PyObject *__pyx_n_s_ov;
 static PyObject *__pyx_n_s_owner;
+static PyObject *__pyx_n_s_pickle;
 static PyObject *__pyx_n_s_prepare;
+static PyObject *__pyx_n_s_pyx_PickleError;
+static PyObject *__pyx_n_s_pyx_checksum;
+static PyObject *__pyx_n_s_pyx_result;
+static PyObject *__pyx_n_s_pyx_state;
+static PyObject *__pyx_n_s_pyx_type;
+static PyObject *__pyx_n_s_pyx_unpickle_CompletionPort;
 static PyObject *__pyx_n_s_qualname;
 static PyObject *__pyx_n_s_rc;
 static PyObject *__pyx_n_s_recv;
 static PyObject *__pyx_n_s_recvfrom;
+static PyObject *__pyx_n_s_reduce;
+static PyObject *__pyx_n_s_reduce_cython;
+static PyObject *__pyx_n_s_reduce_ex;
 static PyObject *__pyx_n_s_remoteaddr;
 static PyObject *__pyx_n_s_remotelen;
 static PyObject *__pyx_n_s_res;
@@ -1290,28 +1530,29 @@ static PyObject *__pyx_n_s_rsplit;
 static PyObject *__pyx_n_s_s;
 static PyObject *__pyx_n_s_self;
 static PyObject *__pyx_n_s_send;
+static PyObject *__pyx_n_s_setstate;
+static PyObject *__pyx_n_s_setstate_cython;
 static PyObject *__pyx_n_s_size;
 static PyObject *__pyx_n_s_socket;
 static PyObject *__pyx_n_s_split;
+static PyObject *__pyx_kp_s_stringsource;
 static PyObject *__pyx_n_s_test;
 static PyObject *__pyx_kp_s_undefined_error_occurred_during;
 static PyObject *__pyx_kp_s_unsupported_address_family;
 static PyObject *__pyx_kp_s_unsupported_address_family_d;
+static PyObject *__pyx_n_s_update;
 static PyObject *__pyx_kp_s_utf_8;
 static PyObject *__pyx_n_s_v;
 static PyObject *__pyx_n_s_ws_buf;
 static PyObject *__pyx_n_s_wsa_pi;
-static PyObject *__pyx_kp_s_z_Projects_Twisted_src_twisted_i;
-static PyObject *__pyx_kp_s_z_Projects_Twisted_src_twisted_i_2;
-static PyObject *__pyx_kp_s_z_Projects_Twisted_src_twisted_i_3;
-static PyObject *__pyx_kp_s_z_Projects_Twisted_src_twisted_i_4;
-static PyObject *__pyx_kp_s_z_Projects_Twisted_src_twisted_i_5;
 static PyObject *__pyx_pf_11iocpsupport_5Event___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_owner, PyObject *__pyx_v_kw); /* proto */
 static int __pyx_pf_11iocpsupport_14CompletionPort___init__(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_2addHandle(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self, __pyx_t_11iocpsupport_HANDLE __pyx_v_handle, size_t __pyx_v_key); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4getEvent(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self, long __pyx_v_timeout); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_6postEvent(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self, unsigned long __pyx_v_bytes, size_t __pyx_v_key, PyObject *__pyx_v_obj); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_8__del__(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_10__reduce_cython__(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_12__setstate_cython__(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_makesockaddr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_buff); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_2maxAddrLen(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_s); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_listening, long __pyx_v_accepting, PyObject *__pyx_v_buff, PyObject *__pyx_v_obj); /* proto */
@@ -1320,10 +1561,12 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
 static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_s, PyObject *__pyx_v_bufflist, PyObject *__pyx_v_obj, unsigned long __pyx_v_flags); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_s, PyObject *__pyx_v_buff, PyObject *__pyx_v_addr_buff, PyObject *__pyx_v_addr_len_buff, PyObject *__pyx_v_obj, unsigned long __pyx_v_flags); /* proto */
 static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_s, PyObject *__pyx_v_buff, PyObject *__pyx_v_obj, unsigned long __pyx_v_flags); /* proto */
+static PyObject *__pyx_pf_11iocpsupport_16__pyx_unpickle_CompletionPort(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
 static PyObject *__pyx_tp_new_11iocpsupport_CompletionPort(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
 static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
 static PyObject *__pyx_int_0;
 static PyObject *__pyx_int_1;
+static PyObject *__pyx_int_151082335;
 static PyObject *__pyx_int_neg_1;
 static PyObject *__pyx_slice__6;
 static PyObject *__pyx_tuple__2;
@@ -1338,6 +1581,7 @@ static PyObject *__pyx_tuple__19;
 static PyObject *__pyx_tuple__21;
 static PyObject *__pyx_tuple__23;
 static PyObject *__pyx_tuple__25;
+static PyObject *__pyx_tuple__27;
 static PyObject *__pyx_codeobj__10;
 static PyObject *__pyx_codeobj__12;
 static PyObject *__pyx_codeobj__14;
@@ -1347,6 +1591,7 @@ static PyObject *__pyx_codeobj__20;
 static PyObject *__pyx_codeobj__22;
 static PyObject *__pyx_codeobj__24;
 static PyObject *__pyx_codeobj__26;
+static PyObject *__pyx_codeobj__28;
 
 /* "iocpsupport.pyx":152
  * 
@@ -1379,7 +1624,7 @@ static struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_f_11iocpsupport_makeOV(P
  *     if not res:
  *         raise MemoryError
  */
-  __pyx_t_1 = PyMem_Malloc((sizeof(struct __pyx_t_11iocpsupport_myOVERLAPPED))); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(0, 156, __pyx_L1_error)
+  __pyx_t_1 = PyMem_Malloc((sizeof(struct __pyx_t_11iocpsupport_myOVERLAPPED))); if (unlikely(__pyx_t_1 == ((void *)NULL))) __PYX_ERR(0, 156, __pyx_L1_error)
   __pyx_v_res = ((struct __pyx_t_11iocpsupport_myOVERLAPPED *)__pyx_t_1);
 
   /* "iocpsupport.pyx":157
@@ -1656,8 +1901,11 @@ static PyObject *__pyx_pw_11iocpsupport_5Event_1__init__(PyObject *__pyx_self, P
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -1666,11 +1914,13 @@ static PyObject *__pyx_pw_11iocpsupport_5Event_1__init__(PyObject *__pyx_self, P
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_callback)) != 0)) kw_args--;
         else {
           __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 184, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_owner)) != 0)) kw_args--;
         else {
@@ -1784,7 +2034,7 @@ static PyObject *__pyx_pf_11iocpsupport_5Event___init__(CYTHON_UNUSED PyObject *
       if (unlikely(!__pyx_t_1)) {
         PyObject* exc_type = PyErr_Occurred();
         if (exc_type) {
-          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
+          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
           else __PYX_ERR(0, 187, __pyx_L1_error)
         }
         break;
@@ -1853,7 +2103,7 @@ static PyObject *__pyx_pf_11iocpsupport_5Event___init__(CYTHON_UNUSED PyObject *
  * 
  * cdef class CompletionPort:
  */
-    __pyx_t_9 = PyObject_SetAttr(__pyx_v_self, __pyx_v_k, __pyx_v_v); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 188, __pyx_L1_error)
+    __pyx_t_9 = PyObject_SetAttr(__pyx_v_self, __pyx_v_k, __pyx_v_v); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 188, __pyx_L1_error)
 
     /* "iocpsupport.pyx":187
  *         self.callback = callback
@@ -2012,7 +2262,9 @@ static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_3addHandle(PyObject *__
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -2021,6 +2273,7 @@ static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_3addHandle(PyObject *__
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (kw_args > 0) {
           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key);
@@ -2033,6 +2286,7 @@ static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_3addHandle(PyObject *__
     } else {
       switch (PyTuple_GET_SIZE(__pyx_args)) {
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
         break;
         default: goto __pyx_L5_argtuple_error;
@@ -2162,7 +2416,7 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4getEvent(struct __pyx_
   size_t __pyx_v_key;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_v_ov;
   PyObject *__pyx_v_obj = NULL;
-  CYTHON_UNUSED PyObject *__pyx_v_ignored = NULL;
+  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   int __pyx_t_1;
@@ -2246,7 +2500,7 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4getEvent(struct __pyx_
  * 
  *         obj = None             # <<<<<<<<<<<<<<
  *         if ov:
- *             obj, ignored = <object>ov.attached
+ *             obj, _ = <object>ov.attached
  */
   __Pyx_INCREF(Py_None);
   __pyx_v_obj = Py_None;
@@ -2255,7 +2509,7 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4getEvent(struct __pyx_
  * 
  *         obj = None
  *         if ov:             # <<<<<<<<<<<<<<
- *             obj, ignored = <object>ov.attached
+ *             obj, _ = <object>ov.attached
  *             unmakeOV(ov)
  */
   __pyx_t_1 = (__pyx_v_ov != 0);
@@ -2264,7 +2518,7 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4getEvent(struct __pyx_
     /* "iocpsupport.pyx":228
  *         obj = None
  *         if ov:
- *             obj, ignored = <object>ov.attached             # <<<<<<<<<<<<<<
+ *             obj, _ = <object>ov.attached             # <<<<<<<<<<<<<<
  *             unmakeOV(ov)
  * 
  */
@@ -2322,12 +2576,12 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4getEvent(struct __pyx_
     }
     __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_3);
     __pyx_t_3 = 0;
-    __pyx_v_ignored = __pyx_t_4;
+    __pyx_v__ = __pyx_t_4;
     __pyx_t_4 = 0;
 
     /* "iocpsupport.pyx":229
  *         if ov:
- *             obj, ignored = <object>ov.attached
+ *             obj, _ = <object>ov.attached
  *             unmakeOV(ov)             # <<<<<<<<<<<<<<
  * 
  *         return (rc, bytes, key, obj)
@@ -2338,7 +2592,7 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4getEvent(struct __pyx_
  * 
  *         obj = None
  *         if ov:             # <<<<<<<<<<<<<<
- *             obj, ignored = <object>ov.attached
+ *             obj, _ = <object>ov.attached
  *             unmakeOV(ov)
  */
   }
@@ -2393,7 +2647,7 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4getEvent(struct __pyx_
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XDECREF(__pyx_v_obj);
-  __Pyx_XDECREF(__pyx_v_ignored);
+  __Pyx_XDECREF(__pyx_v__);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
@@ -2424,8 +2678,11 @@ static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_7postEvent(PyObject *__
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -2434,11 +2691,13 @@ static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_7postEvent(PyObject *__
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bytes)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
         else {
           __Pyx_RaiseArgtupleInvalid("postEvent", 1, 3, 3, 1); __PYX_ERR(0, 233, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
         else {
@@ -2502,7 +2761,7 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_6postEvent(struct __pyx
  *         else:
  *             ov = NULL
  */
-    __pyx_t_3 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, NULL); if (unlikely(__pyx_t_3 == NULL)) __PYX_ERR(0, 238, __pyx_L1_error)
+    __pyx_t_3 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, NULL); if (unlikely(__pyx_t_3 == ((struct __pyx_t_11iocpsupport_myOVERLAPPED *)NULL))) __PYX_ERR(0, 238, __pyx_L1_error)
     __pyx_v_ov = __pyx_t_3;
 
     /* "iocpsupport.pyx":237
@@ -2662,94 +2921,382 @@ static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_8__del__(struct __pyx_o
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":251
- *         CloseHandle(self.port)
- * 
- * def makesockaddr(object buff):             # <<<<<<<<<<<<<<
- *     cdef void *mem_buffer
- *     cdef Py_ssize_t size
+/* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     cdef bint use_setstate
+ *     state = (self.port,)
  */
 
 /* Python wrapper */
-static PyObject *__pyx_pw_11iocpsupport_1makesockaddr(PyObject *__pyx_self, PyObject *__pyx_v_buff); /*proto*/
-static PyMethodDef __pyx_mdef_11iocpsupport_1makesockaddr = {"makesockaddr", (PyCFunction)__pyx_pw_11iocpsupport_1makesockaddr, METH_O, 0};
-static PyObject *__pyx_pw_11iocpsupport_1makesockaddr(PyObject *__pyx_self, PyObject *__pyx_v_buff) {
+static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
   PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("makesockaddr (wrapper)", 0);
-  __pyx_r = __pyx_pf_11iocpsupport_makesockaddr(__pyx_self, ((PyObject *)__pyx_v_buff));
+  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_11iocpsupport_14CompletionPort_10__reduce_cython__(((struct __pyx_obj_11iocpsupport_CompletionPort *)__pyx_v_self));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_11iocpsupport_makesockaddr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_buff) {
-  void *__pyx_v_mem_buffer;
-  Py_ssize_t __pyx_v_size;
+static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_10__reduce_cython__(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self) {
+  int __pyx_v_use_setstate;
+  PyObject *__pyx_v_state = NULL;
+  PyObject *__pyx_v__dict = NULL;
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
-  int __pyx_t_1;
+  PyObject *__pyx_t_1 = NULL;
   PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("makesockaddr", 0);
+  int __pyx_t_3;
+  int __pyx_t_4;
+  PyObject *__pyx_t_5 = NULL;
+  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
 
-  /* "iocpsupport.pyx":255
- *     cdef Py_ssize_t size
- * 
- *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)             # <<<<<<<<<<<<<<
- *     # XXX: this should really return the address family as well
- *     return _makesockaddr(<sockaddr *>mem_buffer, size)
+  /* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     cdef bint use_setstate
+ *     state = (self.port,)             # <<<<<<<<<<<<<<
+ *     _dict = getattr(self, '__dict__', None)
+ *     if _dict is not None:
  */
-  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 255, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->port); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_1);
+  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
+  __pyx_t_1 = 0;
+  __pyx_v_state = __pyx_t_2;
+  __pyx_t_2 = 0;
 
-  /* "iocpsupport.pyx":257
- *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)
- *     # XXX: this should really return the address family as well
- *     return _makesockaddr(<sockaddr *>mem_buffer, size)             # <<<<<<<<<<<<<<
- * 
- * cdef object _makesockaddr(sockaddr *addr, Py_ssize_t len):
+  /* "(tree fragment)":4
+ *     cdef bint use_setstate
+ *     state = (self.port,)
+ *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
+ *     if _dict is not None:
+ *         state += (_dict,)
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_2 = __pyx_f_11iocpsupport__makesockaddr(((struct sockaddr *)__pyx_v_mem_buffer), __pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_r = __pyx_t_2;
+  __pyx_v__dict = __pyx_t_2;
   __pyx_t_2 = 0;
-  goto __pyx_L0;
 
-  /* "iocpsupport.pyx":251
- *         CloseHandle(self.port)
- * 
- * def makesockaddr(object buff):             # <<<<<<<<<<<<<<
- *     cdef void *mem_buffer
- *     cdef Py_ssize_t size
+  /* "(tree fragment)":5
+ *     state = (self.port,)
+ *     _dict = getattr(self, '__dict__', None)
+ *     if _dict is not None:             # <<<<<<<<<<<<<<
+ *         state += (_dict,)
+ *         use_setstate = True
+ */
+  __pyx_t_3 = (__pyx_v__dict != Py_None);
+  __pyx_t_4 = (__pyx_t_3 != 0);
+  if (__pyx_t_4) {
+
+    /* "(tree fragment)":6
+ *     _dict = getattr(self, '__dict__', None)
+ *     if _dict is not None:
+ *         state += (_dict,)             # <<<<<<<<<<<<<<
+ *         use_setstate = True
+ *     else:
+ */
+    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(__pyx_v__dict);
+    __Pyx_GIVEREF(__pyx_v__dict);
+    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
+    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_DECREF_SET(__pyx_v_state, __pyx_t_1);
+    __pyx_t_1 = 0;
+
+    /* "(tree fragment)":7
+ *     if _dict is not None:
+ *         state += (_dict,)
+ *         use_setstate = True             # <<<<<<<<<<<<<<
+ *     else:
+ *         use_setstate = False
+ */
+    __pyx_v_use_setstate = 1;
+
+    /* "(tree fragment)":5
+ *     state = (self.port,)
+ *     _dict = getattr(self, '__dict__', None)
+ *     if _dict is not None:             # <<<<<<<<<<<<<<
+ *         state += (_dict,)
+ *         use_setstate = True
+ */
+    goto __pyx_L3;
+  }
+
+  /* "(tree fragment)":9
+ *         use_setstate = True
+ *     else:
+ *         use_setstate = False             # <<<<<<<<<<<<<<
+ *     if use_setstate:
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, None), state
+ */
+  /*else*/ {
+    __pyx_v_use_setstate = 0;
+  }
+  __pyx_L3:;
+
+  /* "(tree fragment)":10
+ *     else:
+ *         use_setstate = False
+ *     if use_setstate:             # <<<<<<<<<<<<<<
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, None), state
+ *     else:
+ */
+  __pyx_t_4 = (__pyx_v_use_setstate != 0);
+  if (__pyx_t_4) {
+
+    /* "(tree fragment)":11
+ *         use_setstate = False
+ *     if use_setstate:
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, None), state             # <<<<<<<<<<<<<<
+ *     else:
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, state)
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_CompletionPort); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 11, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    __Pyx_INCREF(__pyx_int_151082335);
+    __Pyx_GIVEREF(__pyx_int_151082335);
+    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_151082335);
+    __Pyx_INCREF(Py_None);
+    __Pyx_GIVEREF(Py_None);
+    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
+    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_GIVEREF(__pyx_t_1);
+    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
+    __Pyx_GIVEREF(__pyx_t_2);
+    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
+    __Pyx_INCREF(__pyx_v_state);
+    __Pyx_GIVEREF(__pyx_v_state);
+    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
+    __pyx_t_1 = 0;
+    __pyx_t_2 = 0;
+    __pyx_r = __pyx_t_5;
+    __pyx_t_5 = 0;
+    goto __pyx_L0;
+
+    /* "(tree fragment)":10
+ *     else:
+ *         use_setstate = False
+ *     if use_setstate:             # <<<<<<<<<<<<<<
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, None), state
+ *     else:
+ */
+  }
+
+  /* "(tree fragment)":13
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, None), state
+ *     else:
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, state)             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     __pyx_unpickle_CompletionPort__set_state(self, __pyx_state)
+ */
+  /*else*/ {
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_CompletionPort); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    __Pyx_INCREF(__pyx_int_151082335);
+    __Pyx_GIVEREF(__pyx_int_151082335);
+    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_151082335);
+    __Pyx_INCREF(__pyx_v_state);
+    __Pyx_GIVEREF(__pyx_v_state);
+    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
+    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_GIVEREF(__pyx_t_5);
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+    __Pyx_GIVEREF(__pyx_t_2);
+    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
+    __pyx_t_5 = 0;
+    __pyx_t_2 = 0;
+    __pyx_r = __pyx_t_1;
+    __pyx_t_1 = 0;
+    goto __pyx_L0;
+  }
+
+  /* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     cdef bint use_setstate
+ *     state = (self.port,)
  */
 
   /* function exit code */
   __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("iocpsupport.makesockaddr", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
+  __Pyx_XDECREF(__pyx_v_state);
+  __Pyx_XDECREF(__pyx_v__dict);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":259
- *     return _makesockaddr(<sockaddr *>mem_buffer, size)
- * 
- * cdef object _makesockaddr(sockaddr *addr, Py_ssize_t len):             # <<<<<<<<<<<<<<
- *     cdef sockaddr_in *sin
- *     cdef sockaddr_in6 *sin6
+/* "(tree fragment)":14
+ *     else:
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, state)
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     __pyx_unpickle_CompletionPort__set_state(self, __pyx_state)
  */
 
-static PyObject *__pyx_f_11iocpsupport__makesockaddr(struct sockaddr *__pyx_v_addr, Py_ssize_t __pyx_v_len) {
-  struct sockaddr_in *__pyx_v_sin;
-  struct sockaddr_in6 *__pyx_v_sin6;
-  WCHAR __pyx_v_buff[0x100];
-  __pyx_t_11iocpsupport_DWORD __pyx_v_buffWcharLen;
-  int __pyx_v_rc;
-  unsigned short __pyx_v_sa_port;
+/* Python wrapper */
+static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
+static PyObject *__pyx_pw_11iocpsupport_14CompletionPort_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_11iocpsupport_14CompletionPort_12__setstate_cython__(((struct __pyx_obj_11iocpsupport_CompletionPort *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_12__setstate_cython__(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
+
+  /* "(tree fragment)":15
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, state)
+ * def __setstate_cython__(self, __pyx_state):
+ *     __pyx_unpickle_CompletionPort__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
+ */
+  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
+  __pyx_t_1 = __pyx_f_11iocpsupport___pyx_unpickle_CompletionPort__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "(tree fragment)":14
+ *     else:
+ *         return __pyx_unpickle_CompletionPort, (type(self), 0x901555f, state)
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     __pyx_unpickle_CompletionPort__set_state(self, __pyx_state)
+ */
+
+  /* function exit code */
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "iocpsupport.pyx":251
+ *         CloseHandle(self.port)
+ * 
+ * def makesockaddr(object buff):             # <<<<<<<<<<<<<<
+ *     cdef void *mem_buffer
+ *     cdef Py_ssize_t size
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_11iocpsupport_1makesockaddr(PyObject *__pyx_self, PyObject *__pyx_v_buff); /*proto*/
+static PyMethodDef __pyx_mdef_11iocpsupport_1makesockaddr = {"makesockaddr", (PyCFunction)__pyx_pw_11iocpsupport_1makesockaddr, METH_O, 0};
+static PyObject *__pyx_pw_11iocpsupport_1makesockaddr(PyObject *__pyx_self, PyObject *__pyx_v_buff) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("makesockaddr (wrapper)", 0);
+  __pyx_r = __pyx_pf_11iocpsupport_makesockaddr(__pyx_self, ((PyObject *)__pyx_v_buff));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_11iocpsupport_makesockaddr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_buff) {
+  void *__pyx_v_mem_buffer;
+  Py_ssize_t __pyx_v_size;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("makesockaddr", 0);
+
+  /* "iocpsupport.pyx":255
+ *     cdef Py_ssize_t size
+ * 
+ *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)             # <<<<<<<<<<<<<<
+ *     # XXX: this should really return the address family as well
+ *     return _makesockaddr(<sockaddr *>mem_buffer, size)
+ */
+  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 255, __pyx_L1_error)
+
+  /* "iocpsupport.pyx":257
+ *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)
+ *     # XXX: this should really return the address family as well
+ *     return _makesockaddr(<sockaddr *>mem_buffer, size)             # <<<<<<<<<<<<<<
+ * 
+ * cdef object _makesockaddr(sockaddr *addr, Py_ssize_t len):
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_2 = __pyx_f_11iocpsupport__makesockaddr(((struct sockaddr *)__pyx_v_mem_buffer), __pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_r = __pyx_t_2;
+  __pyx_t_2 = 0;
+  goto __pyx_L0;
+
+  /* "iocpsupport.pyx":251
+ *         CloseHandle(self.port)
+ * 
+ * def makesockaddr(object buff):             # <<<<<<<<<<<<<<
+ *     cdef void *mem_buffer
+ *     cdef Py_ssize_t size
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("iocpsupport.makesockaddr", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "iocpsupport.pyx":259
+ *     return _makesockaddr(<sockaddr *>mem_buffer, size)
+ * 
+ * cdef object _makesockaddr(sockaddr *addr, Py_ssize_t len):             # <<<<<<<<<<<<<<
+ *     cdef sockaddr_in *sin
+ *     cdef sockaddr_in6 *sin6
+ */
+
+static PyObject *__pyx_f_11iocpsupport__makesockaddr(struct sockaddr *__pyx_v_addr, Py_ssize_t __pyx_v_len) {
+  struct sockaddr_in *__pyx_v_sin;
+  struct sockaddr_in6 *__pyx_v_sin6;
+  WCHAR __pyx_v_buff[0x100];
+  __pyx_t_11iocpsupport_DWORD __pyx_v_buffWcharLen;
+  int __pyx_v_rc;
+  unsigned short __pyx_v_sa_port;
   PyObject *__pyx_v_host = NULL;
   PyObject *__pyx_v_port = NULL;
   PyObject *__pyx_r = NULL;
@@ -4236,13 +4783,13 @@ static int __pyx_f_11iocpsupport_getAddrFamily(__pyx_t_11iocpsupport_SOCKET __py
   /* function exit code */
   __pyx_L1_error:;
   __Pyx_AddTraceback("iocpsupport.getAddrFamily", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
+  __pyx_r = -1;
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":5
+/* "iocpsupport/acceptex.pxi":5
  * 
  * 
  * def accept(long listening, long accepting, object buff, object obj):             # <<<<<<<<<<<<<<
@@ -4270,9 +4817,13 @@ static PyObject *__pyx_pw_11iocpsupport_5accept(PyObject *__pyx_self, PyObject *
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -4281,24 +4832,27 @@ static PyObject *__pyx_pw_11iocpsupport_5accept(PyObject *__pyx_self, PyObject *
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_listening)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_accepting)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 1); __PYX_ERR(1, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 1); __PYX_ERR(2, 5, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 2); __PYX_ERR(1, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 2); __PYX_ERR(2, 5, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  3:
         if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 3); __PYX_ERR(1, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 3); __PYX_ERR(2, 5, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "accept") < 0)) __PYX_ERR(1, 5, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "accept") < 0)) __PYX_ERR(2, 5, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
       goto __pyx_L5_argtuple_error;
@@ -4308,14 +4862,14 @@ static PyObject *__pyx_pw_11iocpsupport_5accept(PyObject *__pyx_self, PyObject *
       values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
       values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
     }
-    __pyx_v_listening = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_listening == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 5, __pyx_L3_error)
-    __pyx_v_accepting = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_accepting == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 5, __pyx_L3_error)
+    __pyx_v_listening = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_listening == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 5, __pyx_L3_error)
+    __pyx_v_accepting = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_accepting == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 5, __pyx_L3_error)
     __pyx_v_buff = values[2];
     __pyx_v_obj = values[3];
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 5, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 5, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("iocpsupport.accept", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -4338,34 +4892,31 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
   __Pyx_RefNannyDeclarations
   int __pyx_t_1;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_2;
-  struct __pyx_opt_args_11iocpsupport_makeOV __pyx_t_3;
-  int __pyx_t_4;
-  PyObject *__pyx_t_5 = NULL;
+  int __pyx_t_3;
+  PyObject *__pyx_t_4 = NULL;
   __Pyx_RefNannySetupContext("accept", 0);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":15
+  /* "iocpsupport/acceptex.pxi":15
  *     cdef myOVERLAPPED *ov
  * 
  *     PyObject_AsWriteBuffer(buff, &mem_buffer, &size)             # <<<<<<<<<<<<<<
  * 
- *     ov = makeOV(obj, buff)
+ *     ov = makeOV(obj)
  */
-  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(1, 15, __pyx_L1_error)
+  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 15, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":17
+  /* "iocpsupport/acceptex.pxi":17
  *     PyObject_AsWriteBuffer(buff, &mem_buffer, &size)
  * 
- *     ov = makeOV(obj, buff)             # <<<<<<<<<<<<<<
+ *     ov = makeOV(obj)             # <<<<<<<<<<<<<<
  * 
  *     rc = lpAcceptEx(listening, accepting, mem_buffer, 0,
  */
-  __pyx_t_3.__pyx_n = 1;
-  __pyx_t_3.other = __pyx_v_buff;
-  __pyx_t_2 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, &__pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) __PYX_ERR(1, 17, __pyx_L1_error)
+  __pyx_t_2 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, NULL); if (unlikely(__pyx_t_2 == ((struct __pyx_t_11iocpsupport_myOVERLAPPED *)NULL))) __PYX_ERR(2, 17, __pyx_L1_error)
   __pyx_v_ov = __pyx_t_2;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":19
- *     ov = makeOV(obj, buff)
+  /* "iocpsupport/acceptex.pxi":19
+ *     ov = makeOV(obj)
  * 
  *     rc = lpAcceptEx(listening, accepting, mem_buffer, 0,             # <<<<<<<<<<<<<<
  *                     <DWORD>size / 2, <DWORD>size / 2,
@@ -4373,17 +4924,17 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
  */
   __pyx_v_rc = lpAcceptEx(__pyx_v_listening, __pyx_v_accepting, __pyx_v_mem_buffer, 0, (((__pyx_t_11iocpsupport_DWORD)__pyx_v_size) / 2), (((__pyx_t_11iocpsupport_DWORD)__pyx_v_size) / 2), (&__pyx_v_bytes), ((OVERLAPPED *)__pyx_v_ov));
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":22
+  /* "iocpsupport/acceptex.pxi":22
  *                     <DWORD>size / 2, <DWORD>size / 2,
  *                     &bytes, <OVERLAPPED *>ov)
  *     if not rc:             # <<<<<<<<<<<<<<
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  */
-  __pyx_t_4 = ((!(__pyx_v_rc != 0)) != 0);
-  if (__pyx_t_4) {
+  __pyx_t_3 = ((!(__pyx_v_rc != 0)) != 0);
+  if (__pyx_t_3) {
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":23
+    /* "iocpsupport/acceptex.pxi":23
  *                     &bytes, <OVERLAPPED *>ov)
  *     if not rc:
  *         rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -4392,17 +4943,17 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
  */
     __pyx_v_rc = WSAGetLastError();
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":24
+    /* "iocpsupport/acceptex.pxi":24
  *     if not rc:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
  *             unmakeOV(ov)
  *             return rc
  */
-    __pyx_t_4 = ((__pyx_v_rc != ERROR_IO_PENDING) != 0);
-    if (__pyx_t_4) {
+    __pyx_t_3 = ((__pyx_v_rc != ERROR_IO_PENDING) != 0);
+    if (__pyx_t_3) {
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":25
+      /* "iocpsupport/acceptex.pxi":25
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  *             unmakeOV(ov)             # <<<<<<<<<<<<<<
@@ -4411,7 +4962,7 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
  */
       __pyx_f_11iocpsupport_unmakeOV(__pyx_v_ov);
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":26
+      /* "iocpsupport/acceptex.pxi":26
  *         if rc != ERROR_IO_PENDING:
  *             unmakeOV(ov)
  *             return rc             # <<<<<<<<<<<<<<
@@ -4419,13 +4970,13 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
  *     return 0
  */
       __Pyx_XDECREF(__pyx_r);
-      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 26, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_5);
-      __pyx_r = __pyx_t_5;
-      __pyx_t_5 = 0;
+      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 26, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_r = __pyx_t_4;
+      __pyx_t_4 = 0;
       goto __pyx_L0;
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":24
+      /* "iocpsupport/acceptex.pxi":24
  *     if not rc:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -4434,7 +4985,7 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
  */
     }
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":22
+    /* "iocpsupport/acceptex.pxi":22
  *                     <DWORD>size / 2, <DWORD>size / 2,
  *                     &bytes, <OVERLAPPED *>ov)
  *     if not rc:             # <<<<<<<<<<<<<<
@@ -4443,7 +4994,7 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
  */
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":28
+  /* "iocpsupport/acceptex.pxi":28
  *             return rc
  * 
  *     return 0             # <<<<<<<<<<<<<<
@@ -4455,7 +5006,7 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
   __pyx_r = __pyx_int_0;
   goto __pyx_L0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":5
+  /* "iocpsupport/acceptex.pxi":5
  * 
  * 
  * def accept(long listening, long accepting, object buff, object obj):             # <<<<<<<<<<<<<<
@@ -4465,7 +5016,7 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
 
   /* function exit code */
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_XDECREF(__pyx_t_4);
   __Pyx_AddTraceback("iocpsupport.accept", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
@@ -4474,7 +5025,7 @@ static PyObject *__pyx_pf_11iocpsupport_4accept(CYTHON_UNUSED PyObject *__pyx_se
   return __pyx_r;
 }
 
-/* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":30
+/* "iocpsupport/acceptex.pxi":30
  *     return 0
  * 
  * def get_accept_addrs(long s, object buff):             # <<<<<<<<<<<<<<
@@ -4499,7 +5050,9 @@ static PyObject *__pyx_pw_11iocpsupport_7get_accept_addrs(PyObject *__pyx_self,
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -4508,14 +5061,15 @@ static PyObject *__pyx_pw_11iocpsupport_7get_accept_addrs(PyObject *__pyx_self,
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("get_accept_addrs", 1, 2, 2, 1); __PYX_ERR(1, 30, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("get_accept_addrs", 1, 2, 2, 1); __PYX_ERR(2, 30, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_accept_addrs") < 0)) __PYX_ERR(1, 30, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_accept_addrs") < 0)) __PYX_ERR(2, 30, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
       goto __pyx_L5_argtuple_error;
@@ -4523,12 +5077,12 @@ static PyObject *__pyx_pw_11iocpsupport_7get_accept_addrs(PyObject *__pyx_self,
       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
     }
-    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 30, __pyx_L3_error)
+    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L3_error)
     __pyx_v_buff = values[1];
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("get_accept_addrs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 30, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("get_accept_addrs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 30, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("iocpsupport.get_accept_addrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -4557,16 +5111,16 @@ static PyObject *__pyx_pf_11iocpsupport_6get_accept_addrs(CYTHON_UNUSED PyObject
   PyObject *__pyx_t_5 = NULL;
   __Pyx_RefNannySetupContext("get_accept_addrs", 0);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":38
+  /* "iocpsupport/acceptex.pxi":38
  *     cdef sockaddr *remoteaddr
  * 
  *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)             # <<<<<<<<<<<<<<
  * 
  *     lpGetAcceptExSockaddrs(mem_buffer, 0, <DWORD>size / 2, <DWORD>size / 2,
  */
-  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(1, 38, __pyx_L1_error)
+  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 38, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":40
+  /* "iocpsupport/acceptex.pxi":40
  *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)
  * 
  *     lpGetAcceptExSockaddrs(mem_buffer, 0, <DWORD>size / 2, <DWORD>size / 2,             # <<<<<<<<<<<<<<
@@ -4575,20 +5129,20 @@ static PyObject *__pyx_pf_11iocpsupport_6get_accept_addrs(CYTHON_UNUSED PyObject
  */
   lpGetAcceptExSockaddrs(__pyx_v_mem_buffer, 0, (((__pyx_t_11iocpsupport_DWORD)__pyx_v_size) / 2), (((__pyx_t_11iocpsupport_DWORD)__pyx_v_size) / 2), (&__pyx_v_localaddr), (&__pyx_v_locallen), (&__pyx_v_remoteaddr), (&__pyx_v_remotelen));
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":42
+  /* "iocpsupport/acceptex.pxi":42
  *     lpGetAcceptExSockaddrs(mem_buffer, 0, <DWORD>size / 2, <DWORD>size / 2,
  *                            &localaddr, &locallen, &remoteaddr, &remotelen)
  *     return remoteaddr.sa_family, _makesockaddr(localaddr, locallen), _makesockaddr(remoteaddr, remotelen)             # <<<<<<<<<<<<<<
  * 
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_2 = __Pyx_PyInt_From_unsigned_short(__pyx_v_remoteaddr->sa_family); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 42, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyInt_From_unsigned_short(__pyx_v_remoteaddr->sa_family); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 42, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __pyx_f_11iocpsupport__makesockaddr(__pyx_v_localaddr, __pyx_v_locallen); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 42, __pyx_L1_error)
+  __pyx_t_3 = __pyx_f_11iocpsupport__makesockaddr(__pyx_v_localaddr, __pyx_v_locallen); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 42, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_4 = __pyx_f_11iocpsupport__makesockaddr(__pyx_v_remoteaddr, __pyx_v_remotelen); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 42, __pyx_L1_error)
+  __pyx_t_4 = __pyx_f_11iocpsupport__makesockaddr(__pyx_v_remoteaddr, __pyx_v_remotelen); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 42, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 42, __pyx_L1_error)
+  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 42, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
   __Pyx_GIVEREF(__pyx_t_2);
   PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
@@ -4603,7 +5157,7 @@ static PyObject *__pyx_pf_11iocpsupport_6get_accept_addrs(CYTHON_UNUSED PyObject
   __pyx_t_5 = 0;
   goto __pyx_L0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":30
+  /* "iocpsupport/acceptex.pxi":30
  *     return 0
  * 
  * def get_accept_addrs(long s, object buff):             # <<<<<<<<<<<<<<
@@ -4625,7 +5179,7 @@ static PyObject *__pyx_pf_11iocpsupport_6get_accept_addrs(CYTHON_UNUSED PyObject
   return __pyx_r;
 }
 
-/* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":5
+/* "iocpsupport/connectex.pxi":5
  * 
  * 
  * def connect(long s, object addr, object obj):             # <<<<<<<<<<<<<<
@@ -4652,8 +5206,11 @@ static PyObject *__pyx_pw_11iocpsupport_9connect(PyObject *__pyx_self, PyObject
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -4662,19 +5219,21 @@ static PyObject *__pyx_pw_11iocpsupport_9connect(PyObject *__pyx_self, PyObject
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_addr)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, 1); __PYX_ERR(2, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, 1); __PYX_ERR(3, 5, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, 2); __PYX_ERR(2, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, 2); __PYX_ERR(3, 5, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "connect") < 0)) __PYX_ERR(2, 5, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "connect") < 0)) __PYX_ERR(3, 5, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
       goto __pyx_L5_argtuple_error;
@@ -4683,13 +5242,13 @@ static PyObject *__pyx_pw_11iocpsupport_9connect(PyObject *__pyx_self, PyObject
       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
       values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
     }
-    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 5, __pyx_L3_error)
+    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(3, 5, __pyx_L3_error)
     __pyx_v_addr = values[1];
     __pyx_v_obj = values[2];
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 5, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 5, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("iocpsupport.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -4719,21 +5278,21 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_5;
   __Pyx_RefNannySetupContext("connect", 0);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":16
+  /* "iocpsupport/connectex.pxi":16
  *     cdef int namelen
  * 
  *     if not have_connectex:             # <<<<<<<<<<<<<<
  *         raise ValueError, 'ConnectEx is not available on this system'
  * 
  */
-  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_have_connectex); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 16, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_have_connectex); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 16, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 16, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 16, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __pyx_t_3 = ((!__pyx_t_2) != 0);
   if (__pyx_t_3) {
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":17
+    /* "iocpsupport/connectex.pxi":17
  * 
  *     if not have_connectex:
  *         raise ValueError, 'ConnectEx is not available on this system'             # <<<<<<<<<<<<<<
@@ -4741,9 +5300,9 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  *     family = getAddrFamily(s)
  */
     __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_ConnectEx_is_not_available_on_th, 0, 0);
-    __PYX_ERR(2, 17, __pyx_L1_error)
+    __PYX_ERR(3, 17, __pyx_L1_error)
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":16
+    /* "iocpsupport/connectex.pxi":16
  *     cdef int namelen
  * 
  *     if not have_connectex:             # <<<<<<<<<<<<<<
@@ -4752,17 +5311,17 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":19
+  /* "iocpsupport/connectex.pxi":19
  *         raise ValueError, 'ConnectEx is not available on this system'
  * 
  *     family = getAddrFamily(s)             # <<<<<<<<<<<<<<
  *     if family == AF_INET:
  *         name = <sockaddr *>&ipv4_name
  */
-  __pyx_t_4 = __pyx_f_11iocpsupport_getAddrFamily(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 19, __pyx_L1_error)
+  __pyx_t_4 = __pyx_f_11iocpsupport_getAddrFamily(__pyx_v_s); if (unlikely(__pyx_t_4 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(3, 19, __pyx_L1_error)
   __pyx_v_family = __pyx_t_4;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":20
+  /* "iocpsupport/connectex.pxi":20
  * 
  *     family = getAddrFamily(s)
  *     if family == AF_INET:             # <<<<<<<<<<<<<<
@@ -4772,7 +5331,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
   switch (__pyx_v_family) {
     case AF_INET:
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":21
+    /* "iocpsupport/connectex.pxi":21
  *     family = getAddrFamily(s)
  *     if family == AF_INET:
  *         name = <sockaddr *>&ipv4_name             # <<<<<<<<<<<<<<
@@ -4781,7 +5340,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
     __pyx_v_name = ((struct sockaddr *)(&__pyx_v_ipv4_name));
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":22
+    /* "iocpsupport/connectex.pxi":22
  *     if family == AF_INET:
  *         name = <sockaddr *>&ipv4_name
  *         namelen = sizeof(ipv4_name)             # <<<<<<<<<<<<<<
@@ -4790,18 +5349,18 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
     __pyx_v_namelen = (sizeof(__pyx_v_ipv4_name));
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":23
+    /* "iocpsupport/connectex.pxi":23
  *         name = <sockaddr *>&ipv4_name
  *         namelen = sizeof(ipv4_name)
  *         fillinetaddr(&ipv4_name, addr)             # <<<<<<<<<<<<<<
  *     elif family == AF_INET6:
  *         name = <sockaddr *>&ipv6_name
  */
-    __pyx_t_1 = __pyx_f_11iocpsupport_fillinetaddr((&__pyx_v_ipv4_name), __pyx_v_addr); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 23, __pyx_L1_error)
+    __pyx_t_1 = __pyx_f_11iocpsupport_fillinetaddr((&__pyx_v_ipv4_name), __pyx_v_addr); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 23, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":20
+    /* "iocpsupport/connectex.pxi":20
  * 
  *     family = getAddrFamily(s)
  *     if family == AF_INET:             # <<<<<<<<<<<<<<
@@ -4810,7 +5369,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
     break;
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":24
+    /* "iocpsupport/connectex.pxi":24
  *         namelen = sizeof(ipv4_name)
  *         fillinetaddr(&ipv4_name, addr)
  *     elif family == AF_INET6:             # <<<<<<<<<<<<<<
@@ -4819,7 +5378,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
     case AF_INET6:
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":25
+    /* "iocpsupport/connectex.pxi":25
  *         fillinetaddr(&ipv4_name, addr)
  *     elif family == AF_INET6:
  *         name = <sockaddr *>&ipv6_name             # <<<<<<<<<<<<<<
@@ -4828,7 +5387,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
     __pyx_v_name = ((struct sockaddr *)(&__pyx_v_ipv6_name));
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":26
+    /* "iocpsupport/connectex.pxi":26
  *     elif family == AF_INET6:
  *         name = <sockaddr *>&ipv6_name
  *         namelen = sizeof(ipv6_name)             # <<<<<<<<<<<<<<
@@ -4837,18 +5396,18 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
     __pyx_v_namelen = (sizeof(__pyx_v_ipv6_name));
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":27
+    /* "iocpsupport/connectex.pxi":27
  *         name = <sockaddr *>&ipv6_name
  *         namelen = sizeof(ipv6_name)
  *         fillinet6addr(&ipv6_name, addr)             # <<<<<<<<<<<<<<
  *     else:
  *         raise ValueError, 'unsupported address family'
  */
-    __pyx_t_1 = __pyx_f_11iocpsupport_fillinet6addr((&__pyx_v_ipv6_name), __pyx_v_addr); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 27, __pyx_L1_error)
+    __pyx_t_1 = __pyx_f_11iocpsupport_fillinet6addr((&__pyx_v_ipv6_name), __pyx_v_addr); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 27, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":24
+    /* "iocpsupport/connectex.pxi":24
  *         namelen = sizeof(ipv4_name)
  *         fillinetaddr(&ipv4_name, addr)
  *     elif family == AF_INET6:             # <<<<<<<<<<<<<<
@@ -4858,7 +5417,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
     break;
     default:
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":29
+    /* "iocpsupport/connectex.pxi":29
  *         fillinet6addr(&ipv6_name, addr)
  *     else:
  *         raise ValueError, 'unsupported address family'             # <<<<<<<<<<<<<<
@@ -4866,11 +5425,11 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  * 
  */
     __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_unsupported_address_family, 0, 0);
-    __PYX_ERR(2, 29, __pyx_L1_error)
+    __PYX_ERR(3, 29, __pyx_L1_error)
     break;
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":30
+  /* "iocpsupport/connectex.pxi":30
  *     else:
  *         raise ValueError, 'unsupported address family'
  *     name.sa_family = family             # <<<<<<<<<<<<<<
@@ -4879,17 +5438,17 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
   __pyx_v_name->sa_family = __pyx_v_family;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":32
+  /* "iocpsupport/connectex.pxi":32
  *     name.sa_family = family
  * 
  *     ov = makeOV(obj)             # <<<<<<<<<<<<<<
  * 
  *     rc = lpConnectEx(s, name, namelen, NULL, 0, NULL, <OVERLAPPED *>ov)
  */
-  __pyx_t_5 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, NULL); if (unlikely(__pyx_t_5 == NULL)) __PYX_ERR(2, 32, __pyx_L1_error)
+  __pyx_t_5 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, NULL); if (unlikely(__pyx_t_5 == ((struct __pyx_t_11iocpsupport_myOVERLAPPED *)NULL))) __PYX_ERR(3, 32, __pyx_L1_error)
   __pyx_v_ov = __pyx_t_5;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":34
+  /* "iocpsupport/connectex.pxi":34
  *     ov = makeOV(obj)
  * 
  *     rc = lpConnectEx(s, name, namelen, NULL, 0, NULL, <OVERLAPPED *>ov)             # <<<<<<<<<<<<<<
@@ -4898,7 +5457,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
   __pyx_v_rc = lpConnectEx(__pyx_v_s, __pyx_v_name, __pyx_v_namelen, NULL, 0, NULL, ((OVERLAPPED *)__pyx_v_ov));
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":36
+  /* "iocpsupport/connectex.pxi":36
  *     rc = lpConnectEx(s, name, namelen, NULL, 0, NULL, <OVERLAPPED *>ov)
  * 
  *     if not rc:             # <<<<<<<<<<<<<<
@@ -4908,7 +5467,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
   __pyx_t_3 = ((!(__pyx_v_rc != 0)) != 0);
   if (__pyx_t_3) {
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":37
+    /* "iocpsupport/connectex.pxi":37
  * 
  *     if not rc:
  *         rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -4917,7 +5476,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
     __pyx_v_rc = WSAGetLastError();
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":38
+    /* "iocpsupport/connectex.pxi":38
  *     if not rc:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -4927,7 +5486,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
     __pyx_t_3 = ((__pyx_v_rc != ERROR_IO_PENDING) != 0);
     if (__pyx_t_3) {
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":39
+      /* "iocpsupport/connectex.pxi":39
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  *             unmakeOV(ov)             # <<<<<<<<<<<<<<
@@ -4936,7 +5495,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
       __pyx_f_11iocpsupport_unmakeOV(__pyx_v_ov);
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":40
+      /* "iocpsupport/connectex.pxi":40
  *         if rc != ERROR_IO_PENDING:
  *             unmakeOV(ov)
  *             return rc             # <<<<<<<<<<<<<<
@@ -4944,13 +5503,13 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  *     return 0
  */
       __Pyx_XDECREF(__pyx_r);
-      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 40, __pyx_L1_error)
+      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 40, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_1);
       __pyx_r = __pyx_t_1;
       __pyx_t_1 = 0;
       goto __pyx_L0;
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":38
+      /* "iocpsupport/connectex.pxi":38
  *     if not rc:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -4959,7 +5518,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
     }
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":36
+    /* "iocpsupport/connectex.pxi":36
  *     rc = lpConnectEx(s, name, namelen, NULL, 0, NULL, <OVERLAPPED *>ov)
  * 
  *     if not rc:             # <<<<<<<<<<<<<<
@@ -4968,7 +5527,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
  */
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":42
+  /* "iocpsupport/connectex.pxi":42
  *             return rc
  * 
  *     return 0             # <<<<<<<<<<<<<<
@@ -4979,7 +5538,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
   __pyx_r = __pyx_int_0;
   goto __pyx_L0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":5
+  /* "iocpsupport/connectex.pxi":5
  * 
  * 
  * def connect(long s, object addr, object obj):             # <<<<<<<<<<<<<<
@@ -4998,7 +5557,7 @@ static PyObject *__pyx_pf_11iocpsupport_8connect(CYTHON_UNUSED PyObject *__pyx_s
   return __pyx_r;
 }
 
-/* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":5
+/* "iocpsupport/wsarecv.pxi":5
  * 
  * 
  * def recv(long s, object bufflist, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -5025,9 +5584,13 @@ static PyObject *__pyx_pw_11iocpsupport_11recv(PyObject *__pyx_self, PyObject *_
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -5036,16 +5599,19 @@ static PyObject *__pyx_pw_11iocpsupport_11recv(PyObject *__pyx_self, PyObject *_
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bufflist)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, 1); __PYX_ERR(3, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, 1); __PYX_ERR(4, 5, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, 2); __PYX_ERR(3, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, 2); __PYX_ERR(4, 5, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  3:
         if (kw_args > 0) {
           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
@@ -5053,11 +5619,12 @@ static PyObject *__pyx_pw_11iocpsupport_11recv(PyObject *__pyx_self, PyObject *_
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "recv") < 0)) __PYX_ERR(3, 5, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "recv") < 0)) __PYX_ERR(4, 5, __pyx_L3_error)
       }
     } else {
       switch (PyTuple_GET_SIZE(__pyx_args)) {
         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
         values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
@@ -5065,18 +5632,18 @@ static PyObject *__pyx_pw_11iocpsupport_11recv(PyObject *__pyx_self, PyObject *_
         default: goto __pyx_L5_argtuple_error;
       }
     }
-    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(3, 5, __pyx_L3_error)
+    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(4, 5, __pyx_L3_error)
     __pyx_v_bufflist = values[1];
     __pyx_v_obj = values[2];
     if (values[3]) {
-      __pyx_v_flags = __Pyx_PyInt_As_unsigned_long(values[3]); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(3, 5, __pyx_L3_error)
+      __pyx_v_flags = __Pyx_PyInt_As_unsigned_long(values[3]); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(4, 5, __pyx_L3_error)
     } else {
       __pyx_v_flags = ((unsigned long)0);
     }
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 5, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 5, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("iocpsupport.recv", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -5120,19 +5687,19 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
   __Pyx_RefNannySetupContext("recv", 0);
   __Pyx_INCREF(__pyx_v_bufflist);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":13
+  /* "iocpsupport/wsarecv.pxi":13
  *     cdef Py_ssize_t i, size, buffcount
  * 
  *     bufflist = PySequence_Fast(bufflist, 'second argument needs to be a list')             # <<<<<<<<<<<<<<
  *     buffcount = PySequence_Fast_GET_SIZE(bufflist)
  *     buffers = PySequence_Fast_ITEMS(bufflist)
  */
-  __pyx_t_1 = PySequence_Fast(__pyx_v_bufflist, ((char *)"second argument needs to be a list")); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 13, __pyx_L1_error)
+  __pyx_t_1 = PySequence_Fast(__pyx_v_bufflist, ((char *)"second argument needs to be a list")); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 13, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __Pyx_DECREF_SET(__pyx_v_bufflist, __pyx_t_1);
   __pyx_t_1 = 0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":14
+  /* "iocpsupport/wsarecv.pxi":14
  * 
  *     bufflist = PySequence_Fast(bufflist, 'second argument needs to be a list')
  *     buffcount = PySequence_Fast_GET_SIZE(bufflist)             # <<<<<<<<<<<<<<
@@ -5141,7 +5708,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
   __pyx_v_buffcount = PySequence_Fast_GET_SIZE(__pyx_v_bufflist);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":15
+  /* "iocpsupport/wsarecv.pxi":15
  *     bufflist = PySequence_Fast(bufflist, 'second argument needs to be a list')
  *     buffcount = PySequence_Fast_GET_SIZE(bufflist)
  *     buffers = PySequence_Fast_ITEMS(bufflist)             # <<<<<<<<<<<<<<
@@ -5150,17 +5717,17 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
   __pyx_v_buffers = PySequence_Fast_ITEMS(__pyx_v_bufflist);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":17
+  /* "iocpsupport/wsarecv.pxi":17
  *     buffers = PySequence_Fast_ITEMS(bufflist)
  * 
  *     ws_buf = <WSABUF *>PyMem_Malloc(buffcount*sizeof(WSABUF))             # <<<<<<<<<<<<<<
  * 
  *     try:
  */
-  __pyx_t_2 = PyMem_Malloc((__pyx_v_buffcount * (sizeof(WSABUF)))); if (unlikely(__pyx_t_2 == NULL)) __PYX_ERR(3, 17, __pyx_L1_error)
+  __pyx_t_2 = PyMem_Malloc((__pyx_v_buffcount * (sizeof(WSABUF)))); if (unlikely(__pyx_t_2 == ((void *)NULL))) __PYX_ERR(4, 17, __pyx_L1_error)
   __pyx_v_ws_buf = ((WSABUF *)__pyx_t_2);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":19
+  /* "iocpsupport/wsarecv.pxi":19
  *     ws_buf = <WSABUF *>PyMem_Malloc(buffcount*sizeof(WSABUF))
  * 
  *     try:             # <<<<<<<<<<<<<<
@@ -5169,7 +5736,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
   /*try:*/ {
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":20
+    /* "iocpsupport/wsarecv.pxi":20
  * 
  *     try:
  *         for i from 0 <= i < buffcount:             # <<<<<<<<<<<<<<
@@ -5179,7 +5746,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
     __pyx_t_3 = __pyx_v_buffcount;
     for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_3; __pyx_v_i++) {
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":21
+      /* "iocpsupport/wsarecv.pxi":21
  *     try:
  *         for i from 0 <= i < buffcount:
  *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, &size)             # <<<<<<<<<<<<<<
@@ -5188,10 +5755,10 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
       __pyx_t_1 = ((PyObject *)(__pyx_v_buffers[__pyx_v_i]));
       __Pyx_INCREF(__pyx_t_1);
-      __pyx_t_4 = PyObject_AsWriteBuffer(__pyx_t_1, ((void **)(&(__pyx_v_ws_buf[__pyx_v_i]).buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(3, 21, __pyx_L4_error)
+      __pyx_t_4 = PyObject_AsWriteBuffer(__pyx_t_1, ((void **)(&(__pyx_v_ws_buf[__pyx_v_i]).buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 21, __pyx_L4_error)
       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":22
+      /* "iocpsupport/wsarecv.pxi":22
  *         for i from 0 <= i < buffcount:
  *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, &size)
  *             ws_buf[i].len = <DWORD>size             # <<<<<<<<<<<<<<
@@ -5201,7 +5768,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
       (__pyx_v_ws_buf[__pyx_v_i]).len = ((__pyx_t_11iocpsupport_DWORD)__pyx_v_size);
     }
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":24
+    /* "iocpsupport/wsarecv.pxi":24
  *             ws_buf[i].len = <DWORD>size
  * 
  *         ov = makeOV(obj, bufflist)             # <<<<<<<<<<<<<<
@@ -5210,10 +5777,10 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
     __pyx_t_6.__pyx_n = 1;
     __pyx_t_6.other = __pyx_v_bufflist;
-    __pyx_t_5 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, &__pyx_t_6); if (unlikely(__pyx_t_5 == NULL)) __PYX_ERR(3, 24, __pyx_L4_error)
+    __pyx_t_5 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, &__pyx_t_6); if (unlikely(__pyx_t_5 == ((struct __pyx_t_11iocpsupport_myOVERLAPPED *)NULL))) __PYX_ERR(4, 24, __pyx_L4_error)
     __pyx_v_ov = __pyx_t_5;
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":26
+    /* "iocpsupport/wsarecv.pxi":26
  *         ov = makeOV(obj, bufflist)
  * 
  *         rc = WSARecv(s, ws_buf, <DWORD>buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)             # <<<<<<<<<<<<<<
@@ -5222,7 +5789,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
     __pyx_v_rc = WSARecv(__pyx_v_s, __pyx_v_ws_buf, ((__pyx_t_11iocpsupport_DWORD)__pyx_v_buffcount), (&__pyx_v_bytes), (&__pyx_v_flags), ((OVERLAPPED *)__pyx_v_ov), NULL);
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":28
+    /* "iocpsupport/wsarecv.pxi":28
  *         rc = WSARecv(s, ws_buf, <DWORD>buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)
  * 
  *         if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
@@ -5232,7 +5799,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
     __pyx_t_7 = ((__pyx_v_rc == SOCKET_ERROR) != 0);
     if (__pyx_t_7) {
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":29
+      /* "iocpsupport/wsarecv.pxi":29
  * 
  *         if rc == SOCKET_ERROR:
  *             rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -5241,7 +5808,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
       __pyx_v_rc = WSAGetLastError();
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":30
+      /* "iocpsupport/wsarecv.pxi":30
  *         if rc == SOCKET_ERROR:
  *             rc = WSAGetLastError()
  *             if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -5251,7 +5818,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
       __pyx_t_7 = ((__pyx_v_rc != ERROR_IO_PENDING) != 0);
       if (__pyx_t_7) {
 
-        /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":31
+        /* "iocpsupport/wsarecv.pxi":31
  *             rc = WSAGetLastError()
  *             if rc != ERROR_IO_PENDING:
  *                 unmakeOV(ov)             # <<<<<<<<<<<<<<
@@ -5260,7 +5827,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
         __pyx_f_11iocpsupport_unmakeOV(__pyx_v_ov);
 
-        /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":32
+        /* "iocpsupport/wsarecv.pxi":32
  *             if rc != ERROR_IO_PENDING:
  *                 unmakeOV(ov)
  *                 return rc, 0             # <<<<<<<<<<<<<<
@@ -5268,9 +5835,9 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  *         return rc, bytes
  */
         __Pyx_XDECREF(__pyx_r);
-        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 32, __pyx_L4_error)
+        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 32, __pyx_L4_error)
         __Pyx_GOTREF(__pyx_t_1);
-        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 32, __pyx_L4_error)
+        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 32, __pyx_L4_error)
         __Pyx_GOTREF(__pyx_t_8);
         __Pyx_GIVEREF(__pyx_t_1);
         PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
@@ -5282,7 +5849,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
         __pyx_t_8 = 0;
         goto __pyx_L3_return;
 
-        /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":30
+        /* "iocpsupport/wsarecv.pxi":30
  *         if rc == SOCKET_ERROR:
  *             rc = WSAGetLastError()
  *             if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -5291,7 +5858,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
       }
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":28
+      /* "iocpsupport/wsarecv.pxi":28
  *         rc = WSARecv(s, ws_buf, <DWORD>buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)
  * 
  *         if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
@@ -5300,7 +5867,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  */
     }
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":34
+    /* "iocpsupport/wsarecv.pxi":34
  *                 return rc, 0
  * 
  *         return rc, bytes             # <<<<<<<<<<<<<<
@@ -5308,11 +5875,11 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  *         PyMem_Free(ws_buf)
  */
     __Pyx_XDECREF(__pyx_r);
-    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 34, __pyx_L4_error)
+    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 34, __pyx_L4_error)
     __Pyx_GOTREF(__pyx_t_8);
-    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 34, __pyx_L4_error)
+    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 34, __pyx_L4_error)
     __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 34, __pyx_L4_error)
+    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 34, __pyx_L4_error)
     __Pyx_GOTREF(__pyx_t_9);
     __Pyx_GIVEREF(__pyx_t_8);
     PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
@@ -5325,7 +5892,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
     goto __pyx_L3_return;
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":36
+  /* "iocpsupport/wsarecv.pxi":36
  *         return rc, bytes
  *     finally:
  *         PyMem_Free(ws_buf)             # <<<<<<<<<<<<<<
@@ -5333,11 +5900,11 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
  * def recvfrom(long s, object buff, object addr_buff, object addr_len_buff, object obj, unsigned long flags = 0):
  */
   /*finally:*/ {
+    __pyx_L4_error:;
     /*exception exit:*/{
       __Pyx_PyThreadState_declare
-      __pyx_L4_error:;
-      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
       __Pyx_PyThreadState_assign
+      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
       __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
       __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
       __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
@@ -5353,7 +5920,6 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
       {
         PyMem_Free(__pyx_v_ws_buf);
       }
-      __Pyx_PyThreadState_assign
       if (PY_MAJOR_VERSION >= 3) {
         __Pyx_XGIVEREF(__pyx_t_15);
         __Pyx_XGIVEREF(__pyx_t_16);
@@ -5378,7 +5944,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
     }
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":5
+  /* "iocpsupport/wsarecv.pxi":5
  * 
  * 
  * def recv(long s, object bufflist, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -5400,7 +5966,7 @@ static PyObject *__pyx_pf_11iocpsupport_10recv(CYTHON_UNUSED PyObject *__pyx_sel
   return __pyx_r;
 }
 
-/* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":38
+/* "iocpsupport/wsarecv.pxi":38
  *         PyMem_Free(ws_buf)
  * 
  * def recvfrom(long s, object buff, object addr_buff, object addr_len_buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -5429,11 +5995,17 @@ static PyObject *__pyx_pw_11iocpsupport_13recvfrom(PyObject *__pyx_self, PyObjec
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
+        CYTHON_FALLTHROUGH;
         case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        CYTHON_FALLTHROUGH;
         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -5442,26 +6014,31 @@ static PyObject *__pyx_pw_11iocpsupport_13recvfrom(PyObject *__pyx_self, PyObjec
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 1); __PYX_ERR(3, 38, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 1); __PYX_ERR(4, 38, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_addr_buff)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 2); __PYX_ERR(3, 38, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 2); __PYX_ERR(4, 38, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  3:
         if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_addr_len_buff)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 3); __PYX_ERR(3, 38, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 3); __PYX_ERR(4, 38, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  4:
         if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 4); __PYX_ERR(3, 38, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 4); __PYX_ERR(4, 38, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  5:
         if (kw_args > 0) {
           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
@@ -5469,11 +6046,12 @@ static PyObject *__pyx_pw_11iocpsupport_13recvfrom(PyObject *__pyx_self, PyObjec
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "recvfrom") < 0)) __PYX_ERR(3, 38, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "recvfrom") < 0)) __PYX_ERR(4, 38, __pyx_L3_error)
       }
     } else {
       switch (PyTuple_GET_SIZE(__pyx_args)) {
         case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
+        CYTHON_FALLTHROUGH;
         case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
         values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
         values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
@@ -5483,20 +6061,20 @@ static PyObject *__pyx_pw_11iocpsupport_13recvfrom(PyObject *__pyx_self, PyObjec
         default: goto __pyx_L5_argtuple_error;
       }
     }
-    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(3, 38, __pyx_L3_error)
+    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(4, 38, __pyx_L3_error)
     __pyx_v_buff = values[1];
     __pyx_v_addr_buff = values[2];
     __pyx_v_addr_len_buff = values[3];
     __pyx_v_obj = values[4];
     if (values[5]) {
-      __pyx_v_flags = __Pyx_PyInt_As_unsigned_long(values[5]); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(3, 38, __pyx_L3_error)
+      __pyx_v_flags = __Pyx_PyInt_As_unsigned_long(values[5]); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(4, 38, __pyx_L3_error)
     } else {
       __pyx_v_flags = ((unsigned long)0);
     }
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 38, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 38, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("iocpsupport.recvfrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -5530,16 +6108,16 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
   PyObject *__pyx_t_7 = NULL;
   __Pyx_RefNannySetupContext("recvfrom", 0);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":47
+  /* "iocpsupport/wsarecv.pxi":47
  *     cdef Py_ssize_t size
  * 
  *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, &size)             # <<<<<<<<<<<<<<
  *     ws_buf.len = <DWORD>size
  *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)
  */
-  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_buff, ((void **)(&__pyx_v_ws_buf.buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(3, 47, __pyx_L1_error)
+  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_buff, ((void **)(&__pyx_v_ws_buf.buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(4, 47, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":48
+  /* "iocpsupport/wsarecv.pxi":48
  * 
  *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, &size)
  *     ws_buf.len = <DWORD>size             # <<<<<<<<<<<<<<
@@ -5548,16 +6126,16 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
   __pyx_v_ws_buf.len = ((__pyx_t_11iocpsupport_DWORD)__pyx_v_size);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":49
+  /* "iocpsupport/wsarecv.pxi":49
  *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, &size)
  *     ws_buf.len = <DWORD>size
  *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)             # <<<<<<<<<<<<<<
  *     c_addr_buff_len = <int>size
  *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &size)
  */
-  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_addr_buff, ((void **)(&__pyx_v_c_addr_buff)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(3, 49, __pyx_L1_error)
+  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_addr_buff, ((void **)(&__pyx_v_c_addr_buff)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(4, 49, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":50
+  /* "iocpsupport/wsarecv.pxi":50
  *     ws_buf.len = <DWORD>size
  *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)
  *     c_addr_buff_len = <int>size             # <<<<<<<<<<<<<<
@@ -5566,16 +6144,16 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
   __pyx_v_c_addr_buff_len = ((int)__pyx_v_size);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":51
+  /* "iocpsupport/wsarecv.pxi":51
  *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)
  *     c_addr_buff_len = <int>size
  *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &size)             # <<<<<<<<<<<<<<
  *     c_addr_len_buff_len = <int>size
  * 
  */
-  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_addr_len_buff, ((void **)(&__pyx_v_c_addr_len_buff)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(3, 51, __pyx_L1_error)
+  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_addr_len_buff, ((void **)(&__pyx_v_c_addr_len_buff)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(4, 51, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":52
+  /* "iocpsupport/wsarecv.pxi":52
  *     c_addr_buff_len = <int>size
  *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &size)
  *     c_addr_len_buff_len = <int>size             # <<<<<<<<<<<<<<
@@ -5584,7 +6162,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
   __pyx_v_c_addr_len_buff_len = ((int)__pyx_v_size);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":54
+  /* "iocpsupport/wsarecv.pxi":54
  *     c_addr_len_buff_len = <int>size
  * 
  *     if c_addr_len_buff_len != sizeof(int):             # <<<<<<<<<<<<<<
@@ -5594,7 +6172,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
   __pyx_t_2 = ((__pyx_v_c_addr_len_buff_len != (sizeof(int))) != 0);
   if (__pyx_t_2) {
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":55
+    /* "iocpsupport/wsarecv.pxi":55
  * 
  *     if c_addr_len_buff_len != sizeof(int):
  *         raise ValueError, 'length of address length buffer needs to be sizeof(int)'             # <<<<<<<<<<<<<<
@@ -5602,9 +6180,9 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  *     c_addr_len_buff[0] = c_addr_buff_len
  */
     __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_length_of_address_length_buffer, 0, 0);
-    __PYX_ERR(3, 55, __pyx_L1_error)
+    __PYX_ERR(4, 55, __pyx_L1_error)
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":54
+    /* "iocpsupport/wsarecv.pxi":54
  *     c_addr_len_buff_len = <int>size
  * 
  *     if c_addr_len_buff_len != sizeof(int):             # <<<<<<<<<<<<<<
@@ -5613,7 +6191,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":57
+  /* "iocpsupport/wsarecv.pxi":57
  *         raise ValueError, 'length of address length buffer needs to be sizeof(int)'
  * 
  *     c_addr_len_buff[0] = c_addr_buff_len             # <<<<<<<<<<<<<<
@@ -5622,14 +6200,14 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
   (__pyx_v_c_addr_len_buff[0]) = __pyx_v_c_addr_buff_len;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":59
+  /* "iocpsupport/wsarecv.pxi":59
  *     c_addr_len_buff[0] = c_addr_buff_len
  * 
  *     ov = makeOV(obj, (buff, addr_buff, addr_len_buff))             # <<<<<<<<<<<<<<
  * 
  *     rc = WSARecvFrom(s, &ws_buf, 1, &bytes, &flags, c_addr_buff, c_addr_len_buff, <OVERLAPPED *>ov, NULL)
  */
-  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 59, __pyx_L1_error)
+  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 59, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __Pyx_INCREF(__pyx_v_buff);
   __Pyx_GIVEREF(__pyx_v_buff);
@@ -5642,11 +6220,11 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
   PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_addr_len_buff);
   __pyx_t_5.__pyx_n = 1;
   __pyx_t_5.other = __pyx_t_3;
-  __pyx_t_4 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, &__pyx_t_5); if (unlikely(__pyx_t_4 == NULL)) __PYX_ERR(3, 59, __pyx_L1_error)
+  __pyx_t_4 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, &__pyx_t_5); if (unlikely(__pyx_t_4 == ((struct __pyx_t_11iocpsupport_myOVERLAPPED *)NULL))) __PYX_ERR(4, 59, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   __pyx_v_ov = __pyx_t_4;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":61
+  /* "iocpsupport/wsarecv.pxi":61
  *     ov = makeOV(obj, (buff, addr_buff, addr_len_buff))
  * 
  *     rc = WSARecvFrom(s, &ws_buf, 1, &bytes, &flags, c_addr_buff, c_addr_len_buff, <OVERLAPPED *>ov, NULL)             # <<<<<<<<<<<<<<
@@ -5655,7 +6233,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
   __pyx_v_rc = WSARecvFrom(__pyx_v_s, (&__pyx_v_ws_buf), 1, (&__pyx_v_bytes), (&__pyx_v_flags), __pyx_v_c_addr_buff, __pyx_v_c_addr_len_buff, ((OVERLAPPED *)__pyx_v_ov), NULL);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":63
+  /* "iocpsupport/wsarecv.pxi":63
  *     rc = WSARecvFrom(s, &ws_buf, 1, &bytes, &flags, c_addr_buff, c_addr_len_buff, <OVERLAPPED *>ov, NULL)
  * 
  *     if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
@@ -5665,7 +6243,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
   __pyx_t_2 = ((__pyx_v_rc == SOCKET_ERROR) != 0);
   if (__pyx_t_2) {
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":64
+    /* "iocpsupport/wsarecv.pxi":64
  * 
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -5674,7 +6252,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
     __pyx_v_rc = WSAGetLastError();
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":65
+    /* "iocpsupport/wsarecv.pxi":65
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -5684,7 +6262,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
     __pyx_t_2 = ((__pyx_v_rc != ERROR_IO_PENDING) != 0);
     if (__pyx_t_2) {
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":66
+      /* "iocpsupport/wsarecv.pxi":66
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  *             unmakeOV(ov)             # <<<<<<<<<<<<<<
@@ -5693,7 +6271,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
       __pyx_f_11iocpsupport_unmakeOV(__pyx_v_ov);
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":67
+      /* "iocpsupport/wsarecv.pxi":67
  *         if rc != ERROR_IO_PENDING:
  *             unmakeOV(ov)
  *             return rc, 0             # <<<<<<<<<<<<<<
@@ -5701,9 +6279,9 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  *     return rc, bytes
  */
       __Pyx_XDECREF(__pyx_r);
-      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 67, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 67, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 67, __pyx_L1_error)
+      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 67, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GIVEREF(__pyx_t_3);
       PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
@@ -5715,7 +6293,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
       __pyx_t_6 = 0;
       goto __pyx_L0;
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":65
+      /* "iocpsupport/wsarecv.pxi":65
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -5724,7 +6302,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
     }
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":63
+    /* "iocpsupport/wsarecv.pxi":63
  *     rc = WSARecvFrom(s, &ws_buf, 1, &bytes, &flags, c_addr_buff, c_addr_len_buff, <OVERLAPPED *>ov, NULL)
  * 
  *     if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
@@ -5733,18 +6311,18 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
  */
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":69
+  /* "iocpsupport/wsarecv.pxi":69
  *             return rc, 0
  * 
  *     return rc, bytes             # <<<<<<<<<<<<<<
  * 
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 69, __pyx_L1_error)
+  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 69, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_3 = __Pyx_PyInt_From_unsigned_long(__pyx_v_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 69, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyInt_From_unsigned_long(__pyx_v_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 69, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 69, __pyx_L1_error)
+  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 69, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_7);
   __Pyx_GIVEREF(__pyx_t_6);
   PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
@@ -5756,7 +6334,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
   __pyx_t_7 = 0;
   goto __pyx_L0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":38
+  /* "iocpsupport/wsarecv.pxi":38
  *         PyMem_Free(ws_buf)
  * 
  * def recvfrom(long s, object buff, object addr_buff, object addr_len_buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -5777,7 +6355,7 @@ static PyObject *__pyx_pf_11iocpsupport_12recvfrom(CYTHON_UNUSED PyObject *__pyx
   return __pyx_r;
 }
 
-/* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":5
+/* "iocpsupport/wsasend.pxi":5
  * 
  * 
  * def send(long s, object buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -5804,9 +6382,13 @@ static PyObject *__pyx_pw_11iocpsupport_15send(PyObject *__pyx_self, PyObject *_
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -5815,16 +6397,19 @@ static PyObject *__pyx_pw_11iocpsupport_15send(PyObject *__pyx_self, PyObject *_
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, 1); __PYX_ERR(4, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, 1); __PYX_ERR(5, 5, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, 2); __PYX_ERR(4, 5, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, 2); __PYX_ERR(5, 5, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  3:
         if (kw_args > 0) {
           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
@@ -5832,11 +6417,12 @@ static PyObject *__pyx_pw_11iocpsupport_15send(PyObject *__pyx_self, PyObject *_
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send") < 0)) __PYX_ERR(4, 5, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send") < 0)) __PYX_ERR(5, 5, __pyx_L3_error)
       }
     } else {
       switch (PyTuple_GET_SIZE(__pyx_args)) {
         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
         values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
@@ -5844,18 +6430,18 @@ static PyObject *__pyx_pw_11iocpsupport_15send(PyObject *__pyx_self, PyObject *_
         default: goto __pyx_L5_argtuple_error;
       }
     }
-    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(4, 5, __pyx_L3_error)
+    __pyx_v_s = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 5, __pyx_L3_error)
     __pyx_v_buff = values[1];
     __pyx_v_obj = values[2];
     if (values[3]) {
-      __pyx_v_flags = __Pyx_PyInt_As_unsigned_long(values[3]); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(4, 5, __pyx_L3_error)
+      __pyx_v_flags = __Pyx_PyInt_As_unsigned_long(values[3]); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(5, 5, __pyx_L3_error)
     } else {
       __pyx_v_flags = ((unsigned long)0);
     }
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 5, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 5, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("iocpsupport.send", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -5878,45 +6464,42 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
   __Pyx_RefNannyDeclarations
   int __pyx_t_1;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_2;
-  struct __pyx_opt_args_11iocpsupport_makeOV __pyx_t_3;
-  int __pyx_t_4;
+  int __pyx_t_3;
+  PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
   PyObject *__pyx_t_6 = NULL;
-  PyObject *__pyx_t_7 = NULL;
   __Pyx_RefNannySetupContext("send", 0);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":12
+  /* "iocpsupport/wsasend.pxi":12
  *     cdef Py_ssize_t size
  * 
  *     PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, &size)             # <<<<<<<<<<<<<<
  *     ws_buf.len = <DWORD>size
  * 
  */
-  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, ((void **)(&__pyx_v_ws_buf.buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(4, 12, __pyx_L1_error)
+  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, ((void **)(&__pyx_v_ws_buf.buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":13
+  /* "iocpsupport/wsasend.pxi":13
  * 
  *     PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, &size)
  *     ws_buf.len = <DWORD>size             # <<<<<<<<<<<<<<
  * 
- *     ov = makeOV(obj, buff)
+ *     ov = makeOV(obj)
  */
   __pyx_v_ws_buf.len = ((__pyx_t_11iocpsupport_DWORD)__pyx_v_size);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":15
+  /* "iocpsupport/wsasend.pxi":15
  *     ws_buf.len = <DWORD>size
  * 
- *     ov = makeOV(obj, buff)             # <<<<<<<<<<<<<<
+ *     ov = makeOV(obj)             # <<<<<<<<<<<<<<
  * 
  *     rc = WSASend(s, &ws_buf, 1, &bytes, flags, <OVERLAPPED *>ov, NULL)
  */
-  __pyx_t_3.__pyx_n = 1;
-  __pyx_t_3.other = __pyx_v_buff;
-  __pyx_t_2 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, &__pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) __PYX_ERR(4, 15, __pyx_L1_error)
+  __pyx_t_2 = __pyx_f_11iocpsupport_makeOV(__pyx_v_obj, NULL); if (unlikely(__pyx_t_2 == ((struct __pyx_t_11iocpsupport_myOVERLAPPED *)NULL))) __PYX_ERR(5, 15, __pyx_L1_error)
   __pyx_v_ov = __pyx_t_2;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":17
- *     ov = makeOV(obj, buff)
+  /* "iocpsupport/wsasend.pxi":17
+ *     ov = makeOV(obj)
  * 
  *     rc = WSASend(s, &ws_buf, 1, &bytes, flags, <OVERLAPPED *>ov, NULL)             # <<<<<<<<<<<<<<
  * 
@@ -5924,17 +6507,17 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
  */
   __pyx_v_rc = WSASend(__pyx_v_s, (&__pyx_v_ws_buf), 1, (&__pyx_v_bytes), __pyx_v_flags, ((OVERLAPPED *)__pyx_v_ov), NULL);
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":19
+  /* "iocpsupport/wsasend.pxi":19
  *     rc = WSASend(s, &ws_buf, 1, &bytes, flags, <OVERLAPPED *>ov, NULL)
  * 
  *     if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  */
-  __pyx_t_4 = ((__pyx_v_rc == SOCKET_ERROR) != 0);
-  if (__pyx_t_4) {
+  __pyx_t_3 = ((__pyx_v_rc == SOCKET_ERROR) != 0);
+  if (__pyx_t_3) {
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":20
+    /* "iocpsupport/wsasend.pxi":20
  * 
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -5943,17 +6526,17 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
  */
     __pyx_v_rc = WSAGetLastError();
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":21
+    /* "iocpsupport/wsasend.pxi":21
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
  *             unmakeOV(ov)
  *             return rc, bytes
  */
-    __pyx_t_4 = ((__pyx_v_rc != ERROR_IO_PENDING) != 0);
-    if (__pyx_t_4) {
+    __pyx_t_3 = ((__pyx_v_rc != ERROR_IO_PENDING) != 0);
+    if (__pyx_t_3) {
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":22
+      /* "iocpsupport/wsasend.pxi":22
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  *             unmakeOV(ov)             # <<<<<<<<<<<<<<
@@ -5962,7 +6545,7 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
  */
       __pyx_f_11iocpsupport_unmakeOV(__pyx_v_ov);
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":23
+      /* "iocpsupport/wsasend.pxi":23
  *         if rc != ERROR_IO_PENDING:
  *             unmakeOV(ov)
  *             return rc, bytes             # <<<<<<<<<<<<<<
@@ -5970,23 +6553,23 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
  *     return rc, bytes
  */
       __Pyx_XDECREF(__pyx_r);
-      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 23, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 23, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_t_5 = __Pyx_PyInt_From_unsigned_long(__pyx_v_bytes); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 23, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_5);
-      __pyx_t_6 = __Pyx_PyInt_From_unsigned_long(__pyx_v_bytes); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 23, __pyx_L1_error)
+      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 23, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
-      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 23, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_7);
+      __Pyx_GIVEREF(__pyx_t_4);
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
       __Pyx_GIVEREF(__pyx_t_5);
-      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
-      __Pyx_GIVEREF(__pyx_t_6);
-      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
+      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
+      __pyx_t_4 = 0;
       __pyx_t_5 = 0;
+      __pyx_r = __pyx_t_6;
       __pyx_t_6 = 0;
-      __pyx_r = __pyx_t_7;
-      __pyx_t_7 = 0;
       goto __pyx_L0;
 
-      /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":21
+      /* "iocpsupport/wsasend.pxi":21
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -5995,7 +6578,7 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
  */
     }
 
-    /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":19
+    /* "iocpsupport/wsasend.pxi":19
  *     rc = WSASend(s, &ws_buf, 1, &bytes, flags, <OVERLAPPED *>ov, NULL)
  * 
  *     if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
@@ -6004,7 +6587,7 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
  */
   }
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":25
+  /* "iocpsupport/wsasend.pxi":25
  *             return rc, bytes
  * 
  *     return rc, bytes             # <<<<<<<<<<<<<<
@@ -6012,23 +6595,23 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
  * 
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 25, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __pyx_t_6 = __Pyx_PyInt_From_unsigned_long(__pyx_v_bytes); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 25, __pyx_L1_error)
+  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_rc); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 25, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 25, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyInt_From_unsigned_long(__pyx_v_bytes); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 25, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_GIVEREF(__pyx_t_7);
-  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
+  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 25, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
   __Pyx_GIVEREF(__pyx_t_6);
-  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
-  __pyx_t_7 = 0;
+  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
+  __Pyx_GIVEREF(__pyx_t_5);
+  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
   __pyx_t_6 = 0;
-  __pyx_r = __pyx_t_5;
   __pyx_t_5 = 0;
+  __pyx_r = __pyx_t_4;
+  __pyx_t_4 = 0;
   goto __pyx_L0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":5
+  /* "iocpsupport/wsasend.pxi":5
  * 
  * 
  * def send(long s, object buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -6038,9 +6621,9 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
 
   /* function exit code */
   __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
   __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_XDECREF(__pyx_t_7);
   __Pyx_AddTraceback("iocpsupport.send", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
@@ -6049,45 +6632,524 @@ static PyObject *__pyx_pf_11iocpsupport_14send(CYTHON_UNUSED PyObject *__pyx_sel
   return __pyx_r;
 }
 
-static PyObject *__pyx_tp_new_11iocpsupport_CompletionPort(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
-  PyObject *o;
-  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
-    o = (*t->tp_alloc)(t, 0);
-  } else {
-    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
-  }
-  if (unlikely(!o)) return 0;
-  return o;
-}
+/* "(tree fragment)":1
+ * def __pyx_unpickle_CompletionPort(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
+ *     if __pyx_checksum != 0x901555f:
+ *         from pickle import PickleError as __pyx_PickleError
+ */
 
-static void __pyx_tp_dealloc_11iocpsupport_CompletionPort(PyObject *o) {
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
-    if (PyObject_CallFinalizerFromDealloc(o)) return;
+/* Python wrapper */
+static PyObject *__pyx_pw_11iocpsupport_17__pyx_unpickle_CompletionPort(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_11iocpsupport_17__pyx_unpickle_CompletionPort = {"__pyx_unpickle_CompletionPort", (PyCFunction)__pyx_pw_11iocpsupport_17__pyx_unpickle_CompletionPort, METH_VARARGS|METH_KEYWORDS, 0};
+static PyObject *__pyx_pw_11iocpsupport_17__pyx_unpickle_CompletionPort(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v___pyx_type = 0;
+  long __pyx_v___pyx_checksum;
+  PyObject *__pyx_v___pyx_state = 0;
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__pyx_unpickle_CompletionPort (wrapper)", 0);
+  {
+    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
+    PyObject* values[3] = {0,0,0};
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
+      switch (pos_args) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (pos_args) {
+        case  0:
+        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
+        case  1:
+        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompletionPort", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
+        }
+        CYTHON_FALLTHROUGH;
+        case  2:
+        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompletionPort", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_CompletionPort") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+    }
+    __pyx_v___pyx_type = values[0];
+    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
+    __pyx_v___pyx_state = values[2];
   }
-  #endif
-  (*Py_TYPE(o)->tp_free)(o);
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompletionPort", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("iocpsupport.__pyx_unpickle_CompletionPort", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __pyx_r = __pyx_pf_11iocpsupport_16__pyx_unpickle_CompletionPort(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
 }
 
-static PyMethodDef __pyx_methods_11iocpsupport_CompletionPort[] = {
-  {"addHandle", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_3addHandle, METH_VARARGS|METH_KEYWORDS, 0},
-  {"getEvent", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_5getEvent, METH_O, 0},
-  {"postEvent", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_7postEvent, METH_VARARGS|METH_KEYWORDS, 0},
-  {"__del__", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_9__del__, METH_NOARGS, 0},
-  {0, 0, 0, 0}
-};
+static PyObject *__pyx_pf_11iocpsupport_16__pyx_unpickle_CompletionPort(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_v___pyx_PickleError = NULL;
+  PyObject *__pyx_v___pyx_result = NULL;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  PyObject *__pyx_t_6 = NULL;
+  int __pyx_t_7;
+  __Pyx_RefNannySetupContext("__pyx_unpickle_CompletionPort", 0);
 
-static PyTypeObject __pyx_type_11iocpsupport_CompletionPort = {
-  PyVarObject_HEAD_INIT(0, 0)
-  "iocpsupport.CompletionPort", /*tp_name*/
-  sizeof(struct __pyx_obj_11iocpsupport_CompletionPort), /*tp_basicsize*/
-  0, /*tp_itemsize*/
-  __pyx_tp_dealloc_11iocpsupport_CompletionPort, /*tp_dealloc*/
-  0, /*tp_print*/
-  0, /*tp_getattr*/
-  0, /*tp_setattr*/
-  #if PY_MAJOR_VERSION < 3
-  0, /*tp_compare*/
+  /* "(tree fragment)":2
+ * def __pyx_unpickle_CompletionPort(__pyx_type, long __pyx_checksum, __pyx_state):
+ *     if __pyx_checksum != 0x901555f:             # <<<<<<<<<<<<<<
+ *         from pickle import PickleError as __pyx_PickleError
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x901555f = (port))" % __pyx_checksum)
+ */
+  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x901555f) != 0);
+  if (__pyx_t_1) {
+
+    /* "(tree fragment)":3
+ * def __pyx_unpickle_CompletionPort(__pyx_type, long __pyx_checksum, __pyx_state):
+ *     if __pyx_checksum != 0x901555f:
+ *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x901555f = (port))" % __pyx_checksum)
+ *     __pyx_result = CompletionPort.__new__(__pyx_type)
+ */
+    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(__pyx_n_s_PickleError);
+    __Pyx_GIVEREF(__pyx_n_s_PickleError);
+    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
+    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(__pyx_t_2);
+    __pyx_v___pyx_PickleError = __pyx_t_2;
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+    /* "(tree fragment)":4
+ *     if __pyx_checksum != 0x901555f:
+ *         from pickle import PickleError as __pyx_PickleError
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x901555f = (port))" % __pyx_checksum)             # <<<<<<<<<<<<<<
+ *     __pyx_result = CompletionPort.__new__(__pyx_type)
+ *     if __pyx_state is not None:
+ */
+    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x90, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_INCREF(__pyx_v___pyx_PickleError);
+    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
+    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
+      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
+      if (likely(__pyx_t_5)) {
+        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
+        __Pyx_INCREF(__pyx_t_5);
+        __Pyx_INCREF(function);
+        __Pyx_DECREF_SET(__pyx_t_2, function);
+      }
+    }
+    if (!__pyx_t_5) {
+      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __Pyx_GOTREF(__pyx_t_3);
+    } else {
+      #if CYTHON_FAST_PYCALL
+      if (PyFunction_Check(__pyx_t_2)) {
+        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
+        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
+        __Pyx_GOTREF(__pyx_t_3);
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      } else
+      #endif
+      #if CYTHON_FAST_PYCCALL
+      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
+        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
+        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
+        __Pyx_GOTREF(__pyx_t_3);
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      } else
+      #endif
+      {
+        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_6);
+        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
+        __Pyx_GIVEREF(__pyx_t_4);
+        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
+        __pyx_t_4 = 0;
+        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_3);
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      }
+    }
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __PYX_ERR(1, 4, __pyx_L1_error)
+
+    /* "(tree fragment)":2
+ * def __pyx_unpickle_CompletionPort(__pyx_type, long __pyx_checksum, __pyx_state):
+ *     if __pyx_checksum != 0x901555f:             # <<<<<<<<<<<<<<
+ *         from pickle import PickleError as __pyx_PickleError
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x901555f = (port))" % __pyx_checksum)
+ */
+  }
+
+  /* "(tree fragment)":5
+ *         from pickle import PickleError as __pyx_PickleError
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x901555f = (port))" % __pyx_checksum)
+ *     __pyx_result = CompletionPort.__new__(__pyx_type)             # <<<<<<<<<<<<<<
+ *     if __pyx_state is not None:
+ *         __pyx_unpickle_CompletionPort__set_state(<CompletionPort> __pyx_result, __pyx_state)
+ */
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_11iocpsupport_CompletionPort), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_6 = NULL;
+  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
+    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
+    if (likely(__pyx_t_6)) {
+      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
+      __Pyx_INCREF(__pyx_t_6);
+      __Pyx_INCREF(function);
+      __Pyx_DECREF_SET(__pyx_t_2, function);
+    }
+  }
+  if (!__pyx_t_6) {
+    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+  } else {
+    #if CYTHON_FAST_PYCALL
+    if (PyFunction_Check(__pyx_t_2)) {
+      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
+      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
+      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
+      __Pyx_GOTREF(__pyx_t_3);
+    } else
+    #endif
+    #if CYTHON_FAST_PYCCALL
+    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
+      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
+      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
+      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
+      __Pyx_GOTREF(__pyx_t_3);
+    } else
+    #endif
+    {
+      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_4);
+      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
+      __Pyx_INCREF(__pyx_v___pyx_type);
+      __Pyx_GIVEREF(__pyx_v___pyx_type);
+      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_3);
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    }
+  }
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_v___pyx_result = __pyx_t_3;
+  __pyx_t_3 = 0;
+
+  /* "(tree fragment)":6
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x901555f = (port))" % __pyx_checksum)
+ *     __pyx_result = CompletionPort.__new__(__pyx_type)
+ *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
+ *         __pyx_unpickle_CompletionPort__set_state(<CompletionPort> __pyx_result, __pyx_state)
+ *     return __pyx_result
+ */
+  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
+  __pyx_t_7 = (__pyx_t_1 != 0);
+  if (__pyx_t_7) {
+
+    /* "(tree fragment)":7
+ *     __pyx_result = CompletionPort.__new__(__pyx_type)
+ *     if __pyx_state is not None:
+ *         __pyx_unpickle_CompletionPort__set_state(<CompletionPort> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
+ *     return __pyx_result
+ * cdef __pyx_unpickle_CompletionPort__set_state(CompletionPort __pyx_result, tuple __pyx_state):
+ */
+    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
+    __pyx_t_3 = __pyx_f_11iocpsupport___pyx_unpickle_CompletionPort__set_state(((struct __pyx_obj_11iocpsupport_CompletionPort *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+    /* "(tree fragment)":6
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x901555f = (port))" % __pyx_checksum)
+ *     __pyx_result = CompletionPort.__new__(__pyx_type)
+ *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
+ *         __pyx_unpickle_CompletionPort__set_state(<CompletionPort> __pyx_result, __pyx_state)
+ *     return __pyx_result
+ */
+  }
+
+  /* "(tree fragment)":8
+ *     if __pyx_state is not None:
+ *         __pyx_unpickle_CompletionPort__set_state(<CompletionPort> __pyx_result, __pyx_state)
+ *     return __pyx_result             # <<<<<<<<<<<<<<
+ * cdef __pyx_unpickle_CompletionPort__set_state(CompletionPort __pyx_result, tuple __pyx_state):
+ *     __pyx_result.port = __pyx_state[0]
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __Pyx_INCREF(__pyx_v___pyx_result);
+  __pyx_r = __pyx_v___pyx_result;
+  goto __pyx_L0;
+
+  /* "(tree fragment)":1
+ * def __pyx_unpickle_CompletionPort(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
+ *     if __pyx_checksum != 0x901555f:
+ *         from pickle import PickleError as __pyx_PickleError
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_AddTraceback("iocpsupport.__pyx_unpickle_CompletionPort", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
+  __Pyx_XDECREF(__pyx_v___pyx_result);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "(tree fragment)":9
+ *         __pyx_unpickle_CompletionPort__set_state(<CompletionPort> __pyx_result, __pyx_state)
+ *     return __pyx_result
+ * cdef __pyx_unpickle_CompletionPort__set_state(CompletionPort __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
+ *     __pyx_result.port = __pyx_state[0]
+ *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
+ */
+
+static PyObject *__pyx_f_11iocpsupport___pyx_unpickle_CompletionPort__set_state(struct __pyx_obj_11iocpsupport_CompletionPort *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __pyx_t_11iocpsupport_HANDLE __pyx_t_2;
+  int __pyx_t_3;
+  Py_ssize_t __pyx_t_4;
+  int __pyx_t_5;
+  int __pyx_t_6;
+  PyObject *__pyx_t_7 = NULL;
+  PyObject *__pyx_t_8 = NULL;
+  PyObject *__pyx_t_9 = NULL;
+  PyObject *__pyx_t_10 = NULL;
+  __Pyx_RefNannySetupContext("__pyx_unpickle_CompletionPort__set_state", 0);
+
+  /* "(tree fragment)":10
+ *     return __pyx_result
+ * cdef __pyx_unpickle_CompletionPort__set_state(CompletionPort __pyx_result, tuple __pyx_state):
+ *     __pyx_result.port = __pyx_state[0]             # <<<<<<<<<<<<<<
+ *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
+ *         __pyx_result.__dict__.update(__pyx_state[1])
+ */
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+    __PYX_ERR(1, 10, __pyx_L1_error)
+  }
+  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v___pyx_result->port = __pyx_t_2;
+
+  /* "(tree fragment)":11
+ * cdef __pyx_unpickle_CompletionPort__set_state(CompletionPort __pyx_result, tuple __pyx_state):
+ *     __pyx_result.port = __pyx_state[0]
+ *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
+ *         __pyx_result.__dict__.update(__pyx_state[1])
+ */
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
+    __PYX_ERR(1, 11, __pyx_L1_error)
+  }
+  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
+  __pyx_t_5 = ((__pyx_t_4 > 1) != 0);
+  if (__pyx_t_5) {
+  } else {
+    __pyx_t_3 = __pyx_t_5;
+    goto __pyx_L4_bool_binop_done;
+  }
+  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
+  __pyx_t_6 = (__pyx_t_5 != 0);
+  __pyx_t_3 = __pyx_t_6;
+  __pyx_L4_bool_binop_done:;
+  if (__pyx_t_3) {
+
+    /* "(tree fragment)":12
+ *     __pyx_result.port = __pyx_state[0]
+ *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
+ *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
+ */
+    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_7);
+    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_8);
+    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+    if (unlikely(__pyx_v___pyx_state == Py_None)) {
+      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+      __PYX_ERR(1, 12, __pyx_L1_error)
+    }
+    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_7);
+    __pyx_t_9 = NULL;
+    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
+      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
+      if (likely(__pyx_t_9)) {
+        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
+        __Pyx_INCREF(__pyx_t_9);
+        __Pyx_INCREF(function);
+        __Pyx_DECREF_SET(__pyx_t_8, function);
+      }
+    }
+    if (!__pyx_t_9) {
+      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      __Pyx_GOTREF(__pyx_t_1);
+    } else {
+      #if CYTHON_FAST_PYCALL
+      if (PyFunction_Check(__pyx_t_8)) {
+        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_7};
+        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      } else
+      #endif
+      #if CYTHON_FAST_PYCCALL
+      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
+        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_7};
+        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      } else
+      #endif
+      {
+        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 12, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_10);
+        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
+        __Pyx_GIVEREF(__pyx_t_7);
+        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_7);
+        __pyx_t_7 = 0;
+        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
+      }
+    }
+    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+    /* "(tree fragment)":11
+ * cdef __pyx_unpickle_CompletionPort__set_state(CompletionPort __pyx_result, tuple __pyx_state):
+ *     __pyx_result.port = __pyx_state[0]
+ *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
+ *         __pyx_result.__dict__.update(__pyx_state[1])
+ */
+  }
+
+  /* "(tree fragment)":9
+ *         __pyx_unpickle_CompletionPort__set_state(<CompletionPort> __pyx_result, __pyx_state)
+ *     return __pyx_result
+ * cdef __pyx_unpickle_CompletionPort__set_state(CompletionPort __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
+ *     __pyx_result.port = __pyx_state[0]
+ *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
+ */
+
+  /* function exit code */
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_7);
+  __Pyx_XDECREF(__pyx_t_8);
+  __Pyx_XDECREF(__pyx_t_9);
+  __Pyx_XDECREF(__pyx_t_10);
+  __Pyx_AddTraceback("iocpsupport.__pyx_unpickle_CompletionPort__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = 0;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_tp_new_11iocpsupport_CompletionPort(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
+  PyObject *o;
+  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
+    o = (*t->tp_alloc)(t, 0);
+  } else {
+    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
+  }
+  if (unlikely(!o)) return 0;
+  return o;
+}
+
+static void __pyx_tp_dealloc_11iocpsupport_CompletionPort(PyObject *o) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
+    if (PyObject_CallFinalizerFromDealloc(o)) return;
+  }
+  #endif
+  (*Py_TYPE(o)->tp_free)(o);
+}
+
+static PyMethodDef __pyx_methods_11iocpsupport_CompletionPort[] = {
+  {"addHandle", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_3addHandle, METH_VARARGS|METH_KEYWORDS, 0},
+  {"getEvent", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_5getEvent, METH_O, 0},
+  {"postEvent", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_7postEvent, METH_VARARGS|METH_KEYWORDS, 0},
+  {"__del__", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_9__del__, METH_NOARGS, 0},
+  {"__reduce_cython__", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_11__reduce_cython__, METH_NOARGS, 0},
+  {"__setstate_cython__", (PyCFunction)__pyx_pw_11iocpsupport_14CompletionPort_13__setstate_cython__, METH_O, 0},
+  {0, 0, 0, 0}
+};
+
+static PyTypeObject __pyx_type_11iocpsupport_CompletionPort = {
+  PyVarObject_HEAD_INIT(0, 0)
+  "iocpsupport.CompletionPort", /*tp_name*/
+  sizeof(struct __pyx_obj_11iocpsupport_CompletionPort), /*tp_basicsize*/
+  0, /*tp_itemsize*/
+  __pyx_tp_dealloc_11iocpsupport_CompletionPort, /*tp_dealloc*/
+  0, /*tp_print*/
+  0, /*tp_getattr*/
+  0, /*tp_setattr*/
+  #if PY_MAJOR_VERSION < 3
+  0, /*tp_compare*/
   #endif
   #if PY_MAJOR_VERSION >= 3
   0, /*tp_as_async*/
@@ -6140,17 +7202,31 @@ static PyMethodDef __pyx_methods[] = {
 };
 
 #if PY_MAJOR_VERSION >= 3
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
+static int __pyx_pymod_exec_iocpsupport(PyObject* module); /*proto*/
+static PyModuleDef_Slot __pyx_moduledef_slots[] = {
+  {Py_mod_create, (void*)__pyx_pymod_create},
+  {Py_mod_exec, (void*)__pyx_pymod_exec_iocpsupport},
+  {0, NULL}
+};
+#endif
+
 static struct PyModuleDef __pyx_moduledef = {
-  #if PY_VERSION_HEX < 0x03020000
-    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
-  #else
     PyModuleDef_HEAD_INIT,
-  #endif
     "iocpsupport",
     0, /* m_doc */
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    0, /* m_size */
+  #else
     -1, /* m_size */
+  #endif
     __pyx_methods /* m_methods */,
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    __pyx_moduledef_slots, /* m_slots */
+  #else
     NULL, /* m_reload */
+  #endif
     NULL, /* m_traverse */
     NULL, /* m_clear */
     NULL /* m_free */
@@ -6164,7 +7240,9 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s_Event, __pyx_k_Event, sizeof(__pyx_k_Event), 0, 0, 1, 1},
   {&__pyx_n_s_Event___init, __pyx_k_Event___init, sizeof(__pyx_k_Event___init), 0, 0, 1, 1},
   {&__pyx_kp_s_Failed_to_initialize_Winsock_fun, __pyx_k_Failed_to_initialize_Winsock_fun, sizeof(__pyx_k_Failed_to_initialize_Winsock_fun), 0, 0, 1, 0},
+  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x90, __pyx_k_Incompatible_checksums_s_vs_0x90, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x90), 0, 0, 1, 0},
   {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
+  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
   {&__pyx_n_s_PostQueuedCompletionStatus, __pyx_k_PostQueuedCompletionStatus, sizeof(__pyx_k_PostQueuedCompletionStatus), 0, 0, 1, 1},
   {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
   {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
@@ -6188,12 +7266,15 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s_c_addr_len_buff, __pyx_k_c_addr_len_buff, sizeof(__pyx_k_c_addr_len_buff), 0, 0, 1, 1},
   {&__pyx_n_s_c_addr_len_buff_len, __pyx_k_c_addr_len_buff_len, sizeof(__pyx_k_c_addr_len_buff_len), 0, 0, 1, 1},
   {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
+  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
   {&__pyx_n_s_connect, __pyx_k_connect, sizeof(__pyx_k_connect), 0, 0, 1, 1},
+  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
   {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
   {&__pyx_n_s_family, __pyx_k_family, sizeof(__pyx_k_family), 0, 0, 1, 1},
   {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
   {&__pyx_n_s_get_accept_addrs, __pyx_k_get_accept_addrs, sizeof(__pyx_k_get_accept_addrs), 0, 0, 1, 1},
   {&__pyx_n_s_getsockopt, __pyx_k_getsockopt, sizeof(__pyx_k_getsockopt), 0, 0, 1, 1},
+  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
   {&__pyx_n_s_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 0, 1, 1},
   {&__pyx_n_s_have_connectex, __pyx_k_have_connectex, sizeof(__pyx_k_have_connectex), 0, 0, 1, 1},
   {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
@@ -6202,6 +7283,11 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_kp_s_invalid_IP_address_r, __pyx_k_invalid_IP_address_r, sizeof(__pyx_k_invalid_IP_address_r), 0, 0, 1, 0},
   {&__pyx_kp_s_invalid_IPv6_address_r, __pyx_k_invalid_IPv6_address_r, sizeof(__pyx_k_invalid_IPv6_address_r), 0, 0, 1, 0},
   {&__pyx_n_s_iocpsupport, __pyx_k_iocpsupport, sizeof(__pyx_k_iocpsupport), 0, 0, 1, 1},
+  {&__pyx_kp_s_iocpsupport_acceptex_pxi, __pyx_k_iocpsupport_acceptex_pxi, sizeof(__pyx_k_iocpsupport_acceptex_pxi), 0, 0, 1, 0},
+  {&__pyx_kp_s_iocpsupport_connectex_pxi, __pyx_k_iocpsupport_connectex_pxi, sizeof(__pyx_k_iocpsupport_connectex_pxi), 0, 0, 1, 0},
+  {&__pyx_kp_s_iocpsupport_iocpsupport_pyx, __pyx_k_iocpsupport_iocpsupport_pyx, sizeof(__pyx_k_iocpsupport_iocpsupport_pyx), 0, 0, 1, 0},
+  {&__pyx_kp_s_iocpsupport_wsarecv_pxi, __pyx_k_iocpsupport_wsarecv_pxi, sizeof(__pyx_k_iocpsupport_wsarecv_pxi), 0, 0, 1, 0},
+  {&__pyx_kp_s_iocpsupport_wsasend_pxi, __pyx_k_iocpsupport_wsasend_pxi, sizeof(__pyx_k_iocpsupport_wsasend_pxi), 0, 0, 1, 0},
   {&__pyx_n_s_ipv4_name, __pyx_k_ipv4_name, sizeof(__pyx_k_ipv4_name), 0, 0, 1, 1},
   {&__pyx_n_s_ipv6_name, __pyx_k_ipv6_name, sizeof(__pyx_k_ipv6_name), 0, 0, 1, 1},
   {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
@@ -6219,15 +7305,27 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
   {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
   {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
+  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
   {&__pyx_n_s_namelen, __pyx_k_namelen, sizeof(__pyx_k_namelen), 0, 0, 1, 1},
+  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
   {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
   {&__pyx_n_s_ov, __pyx_k_ov, sizeof(__pyx_k_ov), 0, 0, 1, 1},
   {&__pyx_n_s_owner, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
+  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
   {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_unpickle_CompletionPort, __pyx_k_pyx_unpickle_CompletionPort, sizeof(__pyx_k_pyx_unpickle_CompletionPort), 0, 0, 1, 1},
   {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
   {&__pyx_n_s_rc, __pyx_k_rc, sizeof(__pyx_k_rc), 0, 0, 1, 1},
   {&__pyx_n_s_recv, __pyx_k_recv, sizeof(__pyx_k_recv), 0, 0, 1, 1},
   {&__pyx_n_s_recvfrom, __pyx_k_recvfrom, sizeof(__pyx_k_recvfrom), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
   {&__pyx_n_s_remoteaddr, __pyx_k_remoteaddr, sizeof(__pyx_k_remoteaddr), 0, 0, 1, 1},
   {&__pyx_n_s_remotelen, __pyx_k_remotelen, sizeof(__pyx_k_remotelen), 0, 0, 1, 1},
   {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
@@ -6235,22 +7333,21 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
   {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
   {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
   {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
   {&__pyx_n_s_socket, __pyx_k_socket, sizeof(__pyx_k_socket), 0, 0, 1, 1},
   {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
+  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
   {&__pyx_kp_s_undefined_error_occurred_during, __pyx_k_undefined_error_occurred_during, sizeof(__pyx_k_undefined_error_occurred_during), 0, 0, 1, 0},
   {&__pyx_kp_s_unsupported_address_family, __pyx_k_unsupported_address_family, sizeof(__pyx_k_unsupported_address_family), 0, 0, 1, 0},
   {&__pyx_kp_s_unsupported_address_family_d, __pyx_k_unsupported_address_family_d, sizeof(__pyx_k_unsupported_address_family_d), 0, 0, 1, 0},
+  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
   {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
   {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
   {&__pyx_n_s_ws_buf, __pyx_k_ws_buf, sizeof(__pyx_k_ws_buf), 0, 0, 1, 1},
   {&__pyx_n_s_wsa_pi, __pyx_k_wsa_pi, sizeof(__pyx_k_wsa_pi), 0, 0, 1, 1},
-  {&__pyx_kp_s_z_Projects_Twisted_src_twisted_i, __pyx_k_z_Projects_Twisted_src_twisted_i, sizeof(__pyx_k_z_Projects_Twisted_src_twisted_i), 0, 0, 1, 0},
-  {&__pyx_kp_s_z_Projects_Twisted_src_twisted_i_2, __pyx_k_z_Projects_Twisted_src_twisted_i_2, sizeof(__pyx_k_z_Projects_Twisted_src_twisted_i_2), 0, 0, 1, 0},
-  {&__pyx_kp_s_z_Projects_Twisted_src_twisted_i_3, __pyx_k_z_Projects_Twisted_src_twisted_i_3, sizeof(__pyx_k_z_Projects_Twisted_src_twisted_i_3), 0, 0, 1, 0},
-  {&__pyx_kp_s_z_Projects_Twisted_src_twisted_i_4, __pyx_k_z_Projects_Twisted_src_twisted_i_4, sizeof(__pyx_k_z_Projects_Twisted_src_twisted_i_4), 0, 0, 1, 0},
-  {&__pyx_kp_s_z_Projects_Twisted_src_twisted_i_5, __pyx_k_z_Projects_Twisted_src_twisted_i_5, sizeof(__pyx_k_z_Projects_Twisted_src_twisted_i_5), 0, 0, 1, 0},
   {0, 0, 0, 0, 0, 0, 0}
 };
 static int __Pyx_InitCachedBuiltins(void) {
@@ -6320,7 +7417,7 @@ static int __Pyx_InitCachedConstants(void) {
   __pyx_tuple__9 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_callback, __pyx_n_s_owner, __pyx_n_s_kw, __pyx_n_s_k, __pyx_n_s_v); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 184, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__9);
   __Pyx_GIVEREF(__pyx_tuple__9);
-  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i, __pyx_n_s_init, 184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 184, __pyx_L1_error)
+  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_iocpsupport_pyx, __pyx_n_s_init, 184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 184, __pyx_L1_error)
 
   /* "iocpsupport.pyx":251
  *         CloseHandle(self.port)
@@ -6332,7 +7429,7 @@ static int __Pyx_InitCachedConstants(void) {
   __pyx_tuple__11 = PyTuple_Pack(3, __pyx_n_s_buff, __pyx_n_s_mem_buffer, __pyx_n_s_size); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 251, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__11);
   __Pyx_GIVEREF(__pyx_tuple__11);
-  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i, __pyx_n_s_makesockaddr, 251, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 251, __pyx_L1_error)
+  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_iocpsupport_pyx, __pyx_n_s_makesockaddr, 251, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 251, __pyx_L1_error)
 
   /* "iocpsupport.pyx":356
  * 
@@ -6344,79 +7441,89 @@ static int __Pyx_InitCachedConstants(void) {
   __pyx_tuple__13 = PyTuple_Pack(5, __pyx_n_s_s, __pyx_n_s_s, __pyx_n_s_wsa_pi, __pyx_n_s_size, __pyx_n_s_rc); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 356, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__13);
   __Pyx_GIVEREF(__pyx_tuple__13);
-  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i, __pyx_n_s_maxAddrLen, 356, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 356, __pyx_L1_error)
+  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_iocpsupport_pyx, __pyx_n_s_maxAddrLen, 356, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 356, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":5
+  /* "iocpsupport/acceptex.pxi":5
  * 
  * 
  * def accept(long listening, long accepting, object buff, object obj):             # <<<<<<<<<<<<<<
  *     """
  *     CAUTION: unlike system AcceptEx(), this function returns 0 on success
  */
-  __pyx_tuple__15 = PyTuple_Pack(9, __pyx_n_s_listening, __pyx_n_s_accepting, __pyx_n_s_buff, __pyx_n_s_obj, __pyx_n_s_bytes, __pyx_n_s_rc, __pyx_n_s_size, __pyx_n_s_mem_buffer, __pyx_n_s_ov); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 5, __pyx_L1_error)
+  __pyx_tuple__15 = PyTuple_Pack(9, __pyx_n_s_listening, __pyx_n_s_accepting, __pyx_n_s_buff, __pyx_n_s_obj, __pyx_n_s_bytes, __pyx_n_s_rc, __pyx_n_s_size, __pyx_n_s_mem_buffer, __pyx_n_s_ov); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 5, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__15);
   __Pyx_GIVEREF(__pyx_tuple__15);
-  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i_2, __pyx_n_s_accept, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(1, 5, __pyx_L1_error)
+  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_acceptex_pxi, __pyx_n_s_accept, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(2, 5, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":30
+  /* "iocpsupport/acceptex.pxi":30
  *     return 0
  * 
  * def get_accept_addrs(long s, object buff):             # <<<<<<<<<<<<<<
  *     cdef WSAPROTOCOL_INFO wsa_pi
  *     cdef int locallen, remotelen
  */
-  __pyx_tuple__17 = PyTuple_Pack(9, __pyx_n_s_s, __pyx_n_s_buff, __pyx_n_s_wsa_pi, __pyx_n_s_locallen, __pyx_n_s_remotelen, __pyx_n_s_size, __pyx_n_s_mem_buffer, __pyx_n_s_localaddr, __pyx_n_s_remoteaddr); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 30, __pyx_L1_error)
+  __pyx_tuple__17 = PyTuple_Pack(9, __pyx_n_s_s, __pyx_n_s_buff, __pyx_n_s_wsa_pi, __pyx_n_s_locallen, __pyx_n_s_remotelen, __pyx_n_s_size, __pyx_n_s_mem_buffer, __pyx_n_s_localaddr, __pyx_n_s_remoteaddr); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 30, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__17);
   __Pyx_GIVEREF(__pyx_tuple__17);
-  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i_2, __pyx_n_s_get_accept_addrs, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(1, 30, __pyx_L1_error)
+  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_acceptex_pxi, __pyx_n_s_get_accept_addrs, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(2, 30, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":5
+  /* "iocpsupport/connectex.pxi":5
  * 
  * 
  * def connect(long s, object addr, object obj):             # <<<<<<<<<<<<<<
  *     """
  *     CAUTION: unlike system ConnectEx(), this function returns 0 on success
  */
-  __pyx_tuple__19 = PyTuple_Pack(10, __pyx_n_s_s, __pyx_n_s_addr, __pyx_n_s_obj, __pyx_n_s_family, __pyx_n_s_rc, __pyx_n_s_ov, __pyx_n_s_ipv4_name, __pyx_n_s_ipv6_name, __pyx_n_s_name, __pyx_n_s_namelen); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 5, __pyx_L1_error)
+  __pyx_tuple__19 = PyTuple_Pack(10, __pyx_n_s_s, __pyx_n_s_addr, __pyx_n_s_obj, __pyx_n_s_family, __pyx_n_s_rc, __pyx_n_s_ov, __pyx_n_s_ipv4_name, __pyx_n_s_ipv6_name, __pyx_n_s_name_2, __pyx_n_s_namelen); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(3, 5, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__19);
   __Pyx_GIVEREF(__pyx_tuple__19);
-  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(3, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i_3, __pyx_n_s_connect, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(2, 5, __pyx_L1_error)
+  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(3, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_connectex_pxi, __pyx_n_s_connect, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(3, 5, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":5
+  /* "iocpsupport/wsarecv.pxi":5
  * 
  * 
  * def recv(long s, object bufflist, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
  *     cdef int rc, res
  *     cdef myOVERLAPPED *ov
  */
-  __pyx_tuple__21 = PyTuple_Pack(13, __pyx_n_s_s, __pyx_n_s_bufflist, __pyx_n_s_obj, __pyx_n_s_flags, __pyx_n_s_rc, __pyx_n_s_res, __pyx_n_s_ov, __pyx_n_s_ws_buf, __pyx_n_s_bytes, __pyx_n_s_buffers, __pyx_n_s_i, __pyx_n_s_size, __pyx_n_s_buffcount); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(3, 5, __pyx_L1_error)
+  __pyx_tuple__21 = PyTuple_Pack(13, __pyx_n_s_s, __pyx_n_s_bufflist, __pyx_n_s_obj, __pyx_n_s_flags, __pyx_n_s_rc, __pyx_n_s_res, __pyx_n_s_ov, __pyx_n_s_ws_buf, __pyx_n_s_bytes, __pyx_n_s_buffers, __pyx_n_s_i, __pyx_n_s_size, __pyx_n_s_buffcount); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(4, 5, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__21);
   __Pyx_GIVEREF(__pyx_tuple__21);
-  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(4, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i_4, __pyx_n_s_recv, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(3, 5, __pyx_L1_error)
+  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(4, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_wsarecv_pxi, __pyx_n_s_recv, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(4, 5, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":38
+  /* "iocpsupport/wsarecv.pxi":38
  *         PyMem_Free(ws_buf)
  * 
  * def recvfrom(long s, object buff, object addr_buff, object addr_len_buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
  *     cdef int rc, c_addr_buff_len, c_addr_len_buff_len
  *     cdef myOVERLAPPED *ov
  */
-  __pyx_tuple__23 = PyTuple_Pack(15, __pyx_n_s_s, __pyx_n_s_buff, __pyx_n_s_addr_buff, __pyx_n_s_addr_len_buff, __pyx_n_s_obj, __pyx_n_s_flags, __pyx_n_s_rc, __pyx_n_s_c_addr_buff_len, __pyx_n_s_c_addr_len_buff_len, __pyx_n_s_ov, __pyx_n_s_ws_buf, __pyx_n_s_bytes, __pyx_n_s_c_addr_buff, __pyx_n_s_c_addr_len_buff, __pyx_n_s_size); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(3, 38, __pyx_L1_error)
+  __pyx_tuple__23 = PyTuple_Pack(15, __pyx_n_s_s, __pyx_n_s_buff, __pyx_n_s_addr_buff, __pyx_n_s_addr_len_buff, __pyx_n_s_obj, __pyx_n_s_flags, __pyx_n_s_rc, __pyx_n_s_c_addr_buff_len, __pyx_n_s_c_addr_len_buff_len, __pyx_n_s_ov, __pyx_n_s_ws_buf, __pyx_n_s_bytes, __pyx_n_s_c_addr_buff, __pyx_n_s_c_addr_len_buff, __pyx_n_s_size); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(4, 38, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__23);
   __Pyx_GIVEREF(__pyx_tuple__23);
-  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(6, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i_4, __pyx_n_s_recvfrom, 38, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(3, 38, __pyx_L1_error)
+  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(6, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_wsarecv_pxi, __pyx_n_s_recvfrom, 38, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(4, 38, __pyx_L1_error)
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":5
+  /* "iocpsupport/wsasend.pxi":5
  * 
  * 
  * def send(long s, object buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
  *     cdef int rc
  *     cdef myOVERLAPPED *ov
  */
-  __pyx_tuple__25 = PyTuple_Pack(9, __pyx_n_s_s, __pyx_n_s_buff, __pyx_n_s_obj, __pyx_n_s_flags, __pyx_n_s_rc, __pyx_n_s_ov, __pyx_n_s_ws_buf, __pyx_n_s_bytes, __pyx_n_s_size); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(4, 5, __pyx_L1_error)
+  __pyx_tuple__25 = PyTuple_Pack(9, __pyx_n_s_s, __pyx_n_s_buff, __pyx_n_s_obj, __pyx_n_s_flags, __pyx_n_s_rc, __pyx_n_s_ov, __pyx_n_s_ws_buf, __pyx_n_s_bytes, __pyx_n_s_size); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(5, 5, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__25);
   __Pyx_GIVEREF(__pyx_tuple__25);
-  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_Projects_Twisted_src_twisted_i_5, __pyx_n_s_send, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(4, 5, __pyx_L1_error)
+  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_iocpsupport_wsasend_pxi, __pyx_n_s_send, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(5, 5, __pyx_L1_error)
+
+  /* "(tree fragment)":1
+ * def __pyx_unpickle_CompletionPort(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
+ *     if __pyx_checksum != 0x901555f:
+ *         from pickle import PickleError as __pyx_PickleError
+ */
+  __pyx_tuple__27 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 1, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__27);
+  __Pyx_GIVEREF(__pyx_tuple__27);
+  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_CompletionPort, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(1, 1, __pyx_L1_error)
   __Pyx_RefNannyFinishContext();
   return 0;
   __pyx_L1_error:;
@@ -6429,6 +7536,7 @@ static int __Pyx_InitGlobals(void) {
   if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
   __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
   __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_int_151082335 = PyInt_FromLong(151082335L); if (unlikely(!__pyx_int_151082335)) __PYX_ERR(0, 1, __pyx_L1_error)
   __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
   return 0;
   __pyx_L1_error:;
@@ -6441,12 +7549,56 @@ PyMODINIT_FUNC initiocpsupport(void)
 #else
 PyMODINIT_FUNC PyInit_iocpsupport(void); /*proto*/
 PyMODINIT_FUNC PyInit_iocpsupport(void)
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+{
+  return PyModuleDef_Init(&__pyx_moduledef);
+}
+static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
+    PyObject *value = PyObject_GetAttrString(spec, from_name);
+    int result = 0;
+    if (likely(value)) {
+        result = PyDict_SetItemString(moddict, to_name, value);
+        Py_DECREF(value);
+    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
+        PyErr_Clear();
+    } else {
+        result = -1;
+    }
+    return result;
+}
+static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
+    PyObject *module = NULL, *moddict, *modname;
+    if (__pyx_m)
+        return __Pyx_NewRef(__pyx_m);
+    modname = PyObject_GetAttrString(spec, "name");
+    if (unlikely(!modname)) goto bad;
+    module = PyModule_NewObject(modname);
+    Py_DECREF(modname);
+    if (unlikely(!module)) goto bad;
+    moddict = PyModule_GetDict(module);
+    if (unlikely(!moddict)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
+    return module;
+bad:
+    Py_XDECREF(module);
+    return NULL;
+}
+
+
+static int __pyx_pymod_exec_iocpsupport(PyObject *__pyx_pyinit_module)
+#endif
 #endif
 {
   PyObject *__pyx_t_1 = NULL;
   PyObject *__pyx_t_2 = NULL;
   int __pyx_t_3;
   __Pyx_RefNannyDeclarations
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
+  #endif
   #if CYTHON_REFNANNY
   __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
   if (!__Pyx_RefNanny) {
@@ -6473,6 +7625,9 @@ PyMODINIT_FUNC PyInit_iocpsupport(void)
   #ifdef __Pyx_Generator_USED
   if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
+  #ifdef __Pyx_AsyncGen_USED
+  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  #endif
   #ifdef __Pyx_StopAsyncIteration_USED
   if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
@@ -6484,15 +7639,21 @@ PyMODINIT_FUNC PyInit_iocpsupport(void)
   #endif
   #endif
   /*--- Module creation code ---*/
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  __pyx_m = __pyx_pyinit_module;
+  Py_INCREF(__pyx_m);
+  #else
   #if PY_MAJOR_VERSION < 3
   __pyx_m = Py_InitModule4("iocpsupport", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
   #else
   __pyx_m = PyModule_Create(&__pyx_moduledef);
   #endif
   if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
+  #endif
   __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
   Py_INCREF(__pyx_d);
   __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
   #if CYTHON_COMPILING_IN_PYPY
   Py_INCREF(__pyx_b);
   #endif
@@ -6524,6 +7685,7 @@ PyMODINIT_FUNC PyInit_iocpsupport(void)
   if (PyType_Ready(&__pyx_type_11iocpsupport_CompletionPort) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
   __pyx_type_11iocpsupport_CompletionPort.tp_print = 0;
   if (PyObject_SetAttrString(__pyx_m, "CompletionPort", (PyObject *)&__pyx_type_11iocpsupport_CompletionPort) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
+  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11iocpsupport_CompletionPort) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
   __pyx_ptype_11iocpsupport_CompletionPort = &__pyx_type_11iocpsupport_CompletionPort;
   /*--- Type import code ---*/
   /*--- Variable import code ---*/
@@ -6645,76 +7807,86 @@ PyMODINIT_FUNC PyInit_iocpsupport(void)
   if (PyDict_SetItem(__pyx_d, __pyx_n_s_have_connectex, __pyx_t_1) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":5
+  /* "iocpsupport/acceptex.pxi":5
  * 
  * 
  * def accept(long listening, long accepting, object buff, object obj):             # <<<<<<<<<<<<<<
  *     """
  *     CAUTION: unlike system AcceptEx(), this function returns 0 on success
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_5accept, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_5accept, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_accept, __pyx_t_1) < 0) __PYX_ERR(1, 5, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_accept, __pyx_t_1) < 0) __PYX_ERR(2, 5, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi":30
+  /* "iocpsupport/acceptex.pxi":30
  *     return 0
  * 
  * def get_accept_addrs(long s, object buff):             # <<<<<<<<<<<<<<
  *     cdef WSAPROTOCOL_INFO wsa_pi
  *     cdef int locallen, remotelen
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_7get_accept_addrs, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 30, __pyx_L1_error)
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_7get_accept_addrs, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_accept_addrs, __pyx_t_1) < 0) __PYX_ERR(1, 30, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_accept_addrs, __pyx_t_1) < 0) __PYX_ERR(2, 30, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/connectex.pxi":5
+  /* "iocpsupport/connectex.pxi":5
  * 
  * 
  * def connect(long s, object addr, object obj):             # <<<<<<<<<<<<<<
  *     """
  *     CAUTION: unlike system ConnectEx(), this function returns 0 on success
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_9connect, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_9connect, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 5, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_connect, __pyx_t_1) < 0) __PYX_ERR(2, 5, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_connect, __pyx_t_1) < 0) __PYX_ERR(3, 5, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":5
+  /* "iocpsupport/wsarecv.pxi":5
  * 
  * 
  * def recv(long s, object bufflist, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
  *     cdef int rc, res
  *     cdef myOVERLAPPED *ov
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_11recv, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 5, __pyx_L1_error)
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_11recv, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_recv, __pyx_t_1) < 0) __PYX_ERR(3, 5, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_recv, __pyx_t_1) < 0) __PYX_ERR(4, 5, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi":38
+  /* "iocpsupport/wsarecv.pxi":38
  *         PyMem_Free(ws_buf)
  * 
  * def recvfrom(long s, object buff, object addr_buff, object addr_len_buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
  *     cdef int rc, c_addr_buff_len, c_addr_len_buff_len
  *     cdef myOVERLAPPED *ov
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_13recvfrom, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 38, __pyx_L1_error)
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_13recvfrom, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 38, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_recvfrom, __pyx_t_1) < 0) __PYX_ERR(3, 38, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_recvfrom, __pyx_t_1) < 0) __PYX_ERR(4, 38, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi":5
+  /* "iocpsupport/wsasend.pxi":5
  * 
  * 
  * def send(long s, object buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
  *     cdef int rc
  *     cdef myOVERLAPPED *ov
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_15send, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_15send, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_send, __pyx_t_1) < 0) __PYX_ERR(4, 5, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_send, __pyx_t_1) < 0) __PYX_ERR(5, 5, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "(tree fragment)":1
+ * def __pyx_unpickle_CompletionPort(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
+ *     if __pyx_checksum != 0x901555f:
+ *         from pickle import PickleError as __pyx_PickleError
+ */
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_17__pyx_unpickle_CompletionPort, NULL, __pyx_n_s_iocpsupport); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_CompletionPort, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
   /* "iocpsupport.pyx":1
@@ -6722,7 +7894,7 @@ PyMODINIT_FUNC PyInit_iocpsupport(void)
  * # See LICENSE for details.
  * 
  */
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
@@ -6735,7 +7907,7 @@ PyMODINIT_FUNC PyInit_iocpsupport(void)
   __Pyx_XDECREF(__pyx_t_2);
   if (__pyx_m) {
     if (__pyx_d) {
-      __Pyx_AddTraceback("init iocpsupport", __pyx_clineno, __pyx_lineno, __pyx_filename);
+      __Pyx_AddTraceback("init iocpsupport", 0, __pyx_lineno, __pyx_filename);
     }
     Py_DECREF(__pyx_m); __pyx_m = 0;
   } else if (!PyErr_Occurred()) {
@@ -6743,10 +7915,12 @@ PyMODINIT_FUNC PyInit_iocpsupport(void)
   }
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
-  #if PY_MAJOR_VERSION < 3
-  return;
-  #else
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  return (__pyx_m != NULL) ? 0 : -1;
+  #elif PY_MAJOR_VERSION >= 3
   return __pyx_m;
+  #else
+  return;
   #endif
 }
 
@@ -6960,11 +8134,7 @@ static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject
             "raise: exception class must be a subclass of BaseException");
         goto bad;
     }
-#if PY_VERSION_HEX >= 0x03030000
     if (cause) {
-#else
-    if (cause && cause != Py_None) {
-#endif
         PyObject *fixed_cause;
         if (cause == Py_None) {
             fixed_cause = NULL;
@@ -6992,7 +8162,7 @@ static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject
         PyErr_Restore(tmp_type, tmp_value, tb);
         Py_XDECREF(tmp_tb);
 #else
-        PyThreadState *tstate = PyThreadState_GET();
+        PyThreadState *tstate = __Pyx_PyThreadState_Current;
         PyObject* tmp_tb = tstate->curexc_traceback;
         if (tb != tmp_tb) {
             Py_INCREF(tb);
@@ -7008,7 +8178,7 @@ bad:
 #endif
 
 /* RaiseArgTupleInvalid */
-    static void __Pyx_RaiseArgtupleInvalid(
+  static void __Pyx_RaiseArgtupleInvalid(
     const char* func_name,
     int exact,
     Py_ssize_t num_min,
@@ -7034,7 +8204,7 @@ bad:
 }
 
 /* RaiseDoubleKeywords */
-    static void __Pyx_RaiseDoubleKeywordsError(
+  static void __Pyx_RaiseDoubleKeywordsError(
     const char* func_name,
     PyObject* kw_name)
 {
@@ -7048,7 +8218,7 @@ bad:
 }
 
 /* ParseKeywords */
-    static int __Pyx_ParseOptionalKeywords(
+  static int __Pyx_ParseOptionalKeywords(
     PyObject *kwds,
     PyObject **argnames[],
     PyObject *kwds2,
@@ -7150,7 +8320,7 @@ bad:
 }
 
 /* UnpackUnboundCMethod */
-    static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
+  static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
     PyObject *method;
     method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
     if (unlikely(!method))
@@ -7158,7 +8328,7 @@ bad:
     target->method = method;
 #if CYTHON_COMPILING_IN_CPYTHON
     #if PY_MAJOR_VERSION >= 3
-    if (likely(PyObject_TypeCheck(method, &PyMethodDescr_Type)))
+    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
     #endif
     {
         PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
@@ -7170,7 +8340,7 @@ bad:
 }
 
 /* CallUnboundCMethod0 */
-    static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
+  static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
     PyObject *args, *result = NULL;
     if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
 #if CYTHON_ASSUME_SAFE_MACROS
@@ -7189,7 +8359,7 @@ bad:
 }
 
 /* py_dict_items */
-    static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
+  static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
     if (PY_MAJOR_VERSION >= 3)
         return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
     else
@@ -7197,25 +8367,25 @@ bad:
 }
 
 /* RaiseTooManyValuesToUnpack */
-    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
+  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
     PyErr_Format(PyExc_ValueError,
                  "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
 }
 
 /* RaiseNeedMoreValuesToUnpack */
-    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
+  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
     PyErr_Format(PyExc_ValueError,
                  "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                  index, (index == 1) ? "" : "s");
 }
 
 /* IterFinish */
-    static CYTHON_INLINE int __Pyx_IterFinish(void) {
+  static CYTHON_INLINE int __Pyx_IterFinish(void) {
 #if CYTHON_FAST_THREAD_STATE
-    PyThreadState *tstate = PyThreadState_GET();
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
     PyObject* exc_type = tstate->curexc_type;
     if (unlikely(exc_type)) {
-        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
+        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
             PyObject *exc_value, *exc_tb;
             exc_value = tstate->curexc_value;
             exc_tb = tstate->curexc_traceback;
@@ -7245,7 +8415,7 @@ bad:
 }
 
 /* UnpackItemEndCheck */
-    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
+  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
     if (unlikely(retval)) {
         Py_DECREF(retval);
         __Pyx_RaiseTooManyValuesError(expected);
@@ -7257,7 +8427,7 @@ bad:
 }
 
 /* KeywordStringCheck */
-    static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
+  static int __Pyx_CheckKeywordStrings(
     PyObject *kwdict,
     const char* function_name,
     int kw_allowed)
@@ -7271,7 +8441,7 @@ bad:
 #else
     while (PyDict_Next(kwdict, &pos, &key, 0)) {
         #if PY_MAJOR_VERSION < 3
-        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
+        if (unlikely(!PyString_Check(key)))
         #endif
             if (unlikely(!PyUnicode_Check(key)))
                 goto invalid_keyword_type;
@@ -7296,8 +8466,61 @@ invalid_keyword:
     return 0;
 }
 
+/* PyErrExceptionMatches */
+  #if CYTHON_FAST_THREAD_STATE
+static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
+    Py_ssize_t i, n;
+    n = PyTuple_GET_SIZE(tuple);
+#if PY_MAJOR_VERSION >= 3
+    for (i=0; i<n; i++) {
+        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
+    }
+#endif
+    for (i=0; i<n; i++) {
+        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
+    }
+    return 0;
+}
+static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
+    PyObject *exc_type = tstate->curexc_type;
+    if (exc_type == err) return 1;
+    if (unlikely(!exc_type)) return 0;
+    if (unlikely(PyTuple_Check(err)))
+        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
+    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
+}
+#endif
+
+/* GetAttr */
+  static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
+#if CYTHON_USE_TYPE_SLOTS
+#if PY_MAJOR_VERSION >= 3
+    if (likely(PyUnicode_Check(n)))
+#else
+    if (likely(PyString_Check(n)))
+#endif
+        return __Pyx_PyObject_GetAttrStr(o, n);
+#endif
+    return PyObject_GetAttr(o, n);
+}
+
+/* GetAttr3 */
+  static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
+        return NULL;
+    __Pyx_PyErr_Clear();
+    Py_INCREF(d);
+    return d;
+}
+static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
+    PyObject *r = __Pyx_GetAttr(o, n);
+    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
+}
+
 /* GetItemInt */
-    static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
+  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
     PyObject *r;
     if (!j) return NULL;
     r = PyObject_GetItem(o, j);
@@ -7308,9 +8531,12 @@ static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_
                                                               CYTHON_NCP_UNUSED int wraparound,
                                                               CYTHON_NCP_UNUSED int boundscheck) {
 #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
-    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
-        PyObject *r = PyList_GET_ITEM(o, i);
+    Py_ssize_t wrapped_i = i;
+    if (wraparound & unlikely(i < 0)) {
+        wrapped_i += PyList_GET_SIZE(o);
+    }
+    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
+        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
         Py_INCREF(r);
         return r;
     }
@@ -7323,9 +8549,12 @@ static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize
                                                               CYTHON_NCP_UNUSED int wraparound,
                                                               CYTHON_NCP_UNUSED int boundscheck) {
 #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
-    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
-        PyObject *r = PyTuple_GET_ITEM(o, i);
+    Py_ssize_t wrapped_i = i;
+    if (wraparound & unlikely(i < 0)) {
+        wrapped_i += PyTuple_GET_SIZE(o);
+    }
+    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
+        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
         Py_INCREF(r);
         return r;
     }
@@ -7378,7 +8607,7 @@ static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
 }
 
 /* BytesEquals */
-    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
+  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
 #if CYTHON_COMPILING_IN_PYPY
     return PyObject_RichCompareBool(s1, s2, equals);
 #else
@@ -7396,7 +8625,16 @@ static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
         } else if (length == 1) {
             return (equals == Py_EQ);
         } else {
-            int result = memcmp(ps1, ps2, (size_t)length);
+            int result;
+#if CYTHON_USE_UNICODE_INTERNALS
+            Py_hash_t hash1, hash2;
+            hash1 = ((PyBytesObject*)s1)->ob_shash;
+            hash2 = ((PyBytesObject*)s2)->ob_shash;
+            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
+                return (equals == Py_NE);
+            }
+#endif
+            result = memcmp(ps1, ps2, (size_t)length);
             return (equals == Py_EQ) ? (result == 0) : (result != 0);
         }
     } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
@@ -7416,7 +8654,7 @@ static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
 }
 
 /* UnicodeEquals */
-    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
+  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
 #if CYTHON_COMPILING_IN_PYPY
     return PyObject_RichCompareBool(s1, s2, equals);
 #else
@@ -7456,6 +8694,21 @@ static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
         if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
             goto return_ne;
         }
+#if CYTHON_USE_UNICODE_INTERNALS
+        {
+            Py_hash_t hash1, hash2;
+        #if CYTHON_PEP393_ENABLED
+            hash1 = ((PyASCIIObject*)s1)->hash;
+            hash2 = ((PyASCIIObject*)s2)->hash;
+        #else
+            hash1 = ((PyUnicodeObject*)s1)->hash;
+            hash2 = ((PyUnicodeObject*)s2)->hash;
+        #endif
+            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
+                goto return_ne;
+            }
+        }
+#endif
         kind = __Pyx_PyUnicode_KIND(s1);
         if (kind != __Pyx_PyUnicode_KIND(s2)) {
             goto return_ne;
@@ -7500,7 +8753,7 @@ return_ne:
 }
 
 /* SliceObject */
-    static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
+  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
         Py_ssize_t cstart, Py_ssize_t cstop,
         PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
         int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
@@ -7597,7 +8850,7 @@ bad:
 }
 
 /* GetException */
-    #if CYTHON_FAST_THREAD_STATE
+  #if CYTHON_FAST_THREAD_STATE
 static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
 #else
 static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
@@ -7626,88 +8879,497 @@ static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
         if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
             goto bad;
     }
-    #endif
-    Py_XINCREF(local_tb);
-    Py_XINCREF(local_type);
-    Py_XINCREF(local_value);
-    *type = local_type;
-    *value = local_value;
-    *tb = local_tb;
-#if CYTHON_FAST_THREAD_STATE
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = local_type;
-    tstate->exc_value = local_value;
-    tstate->exc_traceback = local_tb;
-    Py_XDECREF(tmp_type);
-    Py_XDECREF(tmp_value);
-    Py_XDECREF(tmp_tb);
+    #endif
+    Py_XINCREF(local_tb);
+    Py_XINCREF(local_type);
+    Py_XINCREF(local_value);
+    *type = local_type;
+    *value = local_value;
+    *tb = local_tb;
+#if CYTHON_FAST_THREAD_STATE
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = local_type;
+    tstate->exc_state.exc_value = local_value;
+    tstate->exc_state.exc_traceback = local_tb;
+    #else
+    tmp_type = tstate->exc_type;
+    tmp_value = tstate->exc_value;
+    tmp_tb = tstate->exc_traceback;
+    tstate->exc_type = local_type;
+    tstate->exc_value = local_value;
+    tstate->exc_traceback = local_tb;
+    #endif
+    Py_XDECREF(tmp_type);
+    Py_XDECREF(tmp_value);
+    Py_XDECREF(tmp_tb);
+#else
+    PyErr_SetExcInfo(local_type, local_value, local_tb);
+#endif
+    return 0;
+bad:
+    *type = 0;
+    *value = 0;
+    *tb = 0;
+    Py_XDECREF(local_type);
+    Py_XDECREF(local_value);
+    Py_XDECREF(local_tb);
+    return -1;
+}
+
+/* SwapException */
+    #if CYTHON_FAST_THREAD_STATE
+static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
+    PyObject *tmp_type, *tmp_value, *tmp_tb;
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = *type;
+    tstate->exc_state.exc_value = *value;
+    tstate->exc_state.exc_traceback = *tb;
+    #else
+    tmp_type = tstate->exc_type;
+    tmp_value = tstate->exc_value;
+    tmp_tb = tstate->exc_traceback;
+    tstate->exc_type = *type;
+    tstate->exc_value = *value;
+    tstate->exc_traceback = *tb;
+    #endif
+    *type = tmp_type;
+    *value = tmp_value;
+    *tb = tmp_tb;
+}
+#else
+static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
+    PyObject *tmp_type, *tmp_value, *tmp_tb;
+    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
+    PyErr_SetExcInfo(*type, *value, *tb);
+    *type = tmp_type;
+    *value = tmp_value;
+    *tb = tmp_tb;
+}
+#endif
+
+/* SaveResetException */
+    #if CYTHON_FAST_THREAD_STATE
+static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
+    #if PY_VERSION_HEX >= 0x030700A2
+    *type = tstate->exc_state.exc_type;
+    *value = tstate->exc_state.exc_value;
+    *tb = tstate->exc_state.exc_traceback;
+    #else
+    *type = tstate->exc_type;
+    *value = tstate->exc_value;
+    *tb = tstate->exc_traceback;
+    #endif
+    Py_XINCREF(*type);
+    Py_XINCREF(*value);
+    Py_XINCREF(*tb);
+}
+static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
+    PyObject *tmp_type, *tmp_value, *tmp_tb;
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = type;
+    tstate->exc_state.exc_value = value;
+    tstate->exc_state.exc_traceback = tb;
+    #else
+    tmp_type = tstate->exc_type;
+    tmp_value = tstate->exc_value;
+    tmp_tb = tstate->exc_traceback;
+    tstate->exc_type = type;
+    tstate->exc_value = value;
+    tstate->exc_traceback = tb;
+    #endif
+    Py_XDECREF(tmp_type);
+    Py_XDECREF(tmp_value);
+    Py_XDECREF(tmp_tb);
+}
+#endif
+
+/* Import */
+    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
+    PyObject *empty_list = 0;
+    PyObject *module = 0;
+    PyObject *global_dict = 0;
+    PyObject *empty_dict = 0;
+    PyObject *list;
+    #if PY_MAJOR_VERSION < 3
+    PyObject *py_import;
+    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
+    if (!py_import)
+        goto bad;
+    #endif
+    if (from_list)
+        list = from_list;
+    else {
+        empty_list = PyList_New(0);
+        if (!empty_list)
+            goto bad;
+        list = empty_list;
+    }
+    global_dict = PyModule_GetDict(__pyx_m);
+    if (!global_dict)
+        goto bad;
+    empty_dict = PyDict_New();
+    if (!empty_dict)
+        goto bad;
+    {
+        #if PY_MAJOR_VERSION >= 3
+        if (level == -1) {
+            if (strchr(__Pyx_MODULE_NAME, '.')) {
+                module = PyImport_ImportModuleLevelObject(
+                    name, global_dict, empty_dict, list, 1);
+                if (!module) {
+                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
+                        goto bad;
+                    PyErr_Clear();
+                }
+            }
+            level = 0;
+        }
+        #endif
+        if (!module) {
+            #if PY_MAJOR_VERSION < 3
+            PyObject *py_level = PyInt_FromLong(level);
+            if (!py_level)
+                goto bad;
+            module = PyObject_CallFunctionObjArgs(py_import,
+                name, global_dict, empty_dict, list, py_level, NULL);
+            Py_DECREF(py_level);
+            #else
+            module = PyImport_ImportModuleLevelObject(
+                name, global_dict, empty_dict, list, level);
+            #endif
+        }
+    }
+bad:
+    #if PY_MAJOR_VERSION < 3
+    Py_XDECREF(py_import);
+    #endif
+    Py_XDECREF(empty_list);
+    Py_XDECREF(empty_dict);
+    return module;
+}
+
+/* ImportFrom */
+    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
+    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
+    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
+        PyErr_Format(PyExc_ImportError,
+        #if PY_MAJOR_VERSION < 3
+            "cannot import name %.230s", PyString_AS_STRING(name));
+        #else
+            "cannot import name %S", name);
+        #endif
+    }
+    return value;
+}
+
+/* PyCFunctionFastCall */
+    #if CYTHON_FAST_PYCCALL
+static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
+    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
+    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
+    PyObject *self = PyCFunction_GET_SELF(func);
+    int flags = PyCFunction_GET_FLAGS(func);
+    assert(PyCFunction_Check(func));
+    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
+    assert(nargs >= 0);
+    assert(nargs == 0 || args != NULL);
+    /* _PyCFunction_FastCallDict() must not be called with an exception set,
+       because it may clear it (directly or indirectly) and so the
+       caller loses its exception */
+    assert(!PyErr_Occurred());
+    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
+        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
+    } else {
+        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
+    }
+}
+#endif
+
+/* PyFunctionFastCall */
+    #if CYTHON_FAST_PYCALL
+#include "frameobject.h"
+static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
+                                               PyObject *globals) {
+    PyFrameObject *f;
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
+    PyObject **fastlocals;
+    Py_ssize_t i;
+    PyObject *result;
+    assert(globals != NULL);
+    /* XXX Perhaps we should create a specialized
+       PyFrame_New() that doesn't take locals, but does
+       take builtins without sanity checking them.
+       */
+    assert(tstate != NULL);
+    f = PyFrame_New(tstate, co, globals, NULL);
+    if (f == NULL) {
+        return NULL;
+    }
+    fastlocals = f->f_localsplus;
+    for (i = 0; i < na; i++) {
+        Py_INCREF(*args);
+        fastlocals[i] = *args++;
+    }
+    result = PyEval_EvalFrameEx(f,0);
+    ++tstate->recursion_depth;
+    Py_DECREF(f);
+    --tstate->recursion_depth;
+    return result;
+}
+#if 1 || PY_VERSION_HEX < 0x030600B1
+static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
+    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
+    PyObject *globals = PyFunction_GET_GLOBALS(func);
+    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
+    PyObject *closure;
+#if PY_MAJOR_VERSION >= 3
+    PyObject *kwdefs;
+#endif
+    PyObject *kwtuple, **k;
+    PyObject **d;
+    Py_ssize_t nd;
+    Py_ssize_t nk;
+    PyObject *result;
+    assert(kwargs == NULL || PyDict_Check(kwargs));
+    nk = kwargs ? PyDict_Size(kwargs) : 0;
+    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
+        return NULL;
+    }
+    if (
+#if PY_MAJOR_VERSION >= 3
+            co->co_kwonlyargcount == 0 &&
+#endif
+            likely(kwargs == NULL || nk == 0) &&
+            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
+        if (argdefs == NULL && co->co_argcount == nargs) {
+            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
+            goto done;
+        }
+        else if (nargs == 0 && argdefs != NULL
+                 && co->co_argcount == Py_SIZE(argdefs)) {
+            /* function called with no arguments, but all parameters have
+               a default value: use default values as arguments .*/
+            args = &PyTuple_GET_ITEM(argdefs, 0);
+            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
+            goto done;
+        }
+    }
+    if (kwargs != NULL) {
+        Py_ssize_t pos, i;
+        kwtuple = PyTuple_New(2 * nk);
+        if (kwtuple == NULL) {
+            result = NULL;
+            goto done;
+        }
+        k = &PyTuple_GET_ITEM(kwtuple, 0);
+        pos = i = 0;
+        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
+            Py_INCREF(k[i]);
+            Py_INCREF(k[i+1]);
+            i += 2;
+        }
+        nk = i / 2;
+    }
+    else {
+        kwtuple = NULL;
+        k = NULL;
+    }
+    closure = PyFunction_GET_CLOSURE(func);
+#if PY_MAJOR_VERSION >= 3
+    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
+#endif
+    if (argdefs != NULL) {
+        d = &PyTuple_GET_ITEM(argdefs, 0);
+        nd = Py_SIZE(argdefs);
+    }
+    else {
+        d = NULL;
+        nd = 0;
+    }
+#if PY_MAJOR_VERSION >= 3
+    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
+                               args, nargs,
+                               k, (int)nk,
+                               d, (int)nd, kwdefs, closure);
 #else
-    PyErr_SetExcInfo(local_type, local_value, local_tb);
+    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
+                               args, nargs,
+                               k, (int)nk,
+                               d, (int)nd, closure);
 #endif
-    return 0;
-bad:
-    *type = 0;
-    *value = 0;
-    *tb = 0;
-    Py_XDECREF(local_type);
-    Py_XDECREF(local_value);
-    Py_XDECREF(local_tb);
-    return -1;
+    Py_XDECREF(kwtuple);
+done:
+    Py_LeaveRecursiveCall();
+    return result;
+}
+#endif
+#endif
+
+/* PyObjectCallMethO */
+    #if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
+    PyObject *self, *result;
+    PyCFunction cfunc;
+    cfunc = PyCFunction_GET_FUNCTION(func);
+    self = PyCFunction_GET_SELF(func);
+    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
+        return NULL;
+    result = cfunc(self, arg);
+    Py_LeaveRecursiveCall();
+    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
+        PyErr_SetString(
+            PyExc_SystemError,
+            "NULL result without error in PyObject_Call");
+    }
+    return result;
 }
+#endif
 
-/* SwapException */
-      #if CYTHON_FAST_THREAD_STATE
-static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
-    PyObject *tmp_type, *tmp_value, *tmp_tb;
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = *type;
-    tstate->exc_value = *value;
-    tstate->exc_traceback = *tb;
-    *type = tmp_type;
-    *value = tmp_value;
-    *tb = tmp_tb;
+/* PyObjectCallOneArg */
+    #if CYTHON_COMPILING_IN_CPYTHON
+static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+    PyObject *result;
+    PyObject *args = PyTuple_New(1);
+    if (unlikely(!args)) return NULL;
+    Py_INCREF(arg);
+    PyTuple_SET_ITEM(args, 0, arg);
+    result = __Pyx_PyObject_Call(func, args, NULL);
+    Py_DECREF(args);
+    return result;
+}
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+#if CYTHON_FAST_PYCALL
+    if (PyFunction_Check(func)) {
+        return __Pyx_PyFunction_FastCall(func, &arg, 1);
+    }
+#endif
+    if (likely(PyCFunction_Check(func))) {
+        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
+            return __Pyx_PyObject_CallMethO(func, arg);
+#if CYTHON_FAST_PYCCALL
+        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
+            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
+#endif
+        }
+    }
+    return __Pyx__PyObject_CallOneArg(func, arg);
 }
 #else
-static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
-    PyObject *tmp_type, *tmp_value, *tmp_tb;
-    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
-    PyErr_SetExcInfo(*type, *value, *tb);
-    *type = tmp_type;
-    *value = tmp_value;
-    *tb = tmp_tb;
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+    PyObject *result;
+    PyObject *args = PyTuple_Pack(1, arg);
+    if (unlikely(!args)) return NULL;
+    result = __Pyx_PyObject_Call(func, args, NULL);
+    Py_DECREF(args);
+    return result;
 }
 #endif
 
-/* SaveResetException */
-      #if CYTHON_FAST_THREAD_STATE
-static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
-    *type = tstate->exc_type;
-    *value = tstate->exc_value;
-    *tb = tstate->exc_traceback;
-    Py_XINCREF(*type);
-    Py_XINCREF(*value);
-    Py_XINCREF(*tb);
-}
-static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
-    PyObject *tmp_type, *tmp_value, *tmp_tb;
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = type;
-    tstate->exc_value = value;
-    tstate->exc_traceback = tb;
-    Py_XDECREF(tmp_type);
-    Py_XDECREF(tmp_value);
-    Py_XDECREF(tmp_tb);
+/* HasAttr */
+    static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
+    PyObject *r;
+    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
+        PyErr_SetString(PyExc_TypeError,
+                        "hasattr(): attribute name must be string");
+        return -1;
+    }
+    r = __Pyx_GetAttr(o, n);
+    if (unlikely(!r)) {
+        PyErr_Clear();
+        return 0;
+    } else {
+        Py_DECREF(r);
+        return 1;
+    }
 }
+
+/* SetupReduce */
+    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
+  int ret;
+  PyObject *name_attr;
+  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
+  if (likely(name_attr)) {
+      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
+  } else {
+      ret = -1;
+  }
+  if (unlikely(ret < 0)) {
+      PyErr_Clear();
+      ret = 0;
+  }
+  Py_XDECREF(name_attr);
+  return ret;
+}
+static int __Pyx_setup_reduce(PyObject* type_obj) {
+    int ret = 0;
+    PyObject *object_reduce = NULL;
+    PyObject *object_reduce_ex = NULL;
+    PyObject *reduce = NULL;
+    PyObject *reduce_ex = NULL;
+    PyObject *reduce_cython = NULL;
+    PyObject *setstate = NULL;
+    PyObject *setstate_cython = NULL;
+#if CYTHON_USE_PYTYPE_LOOKUP
+    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
+#else
+    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
+#endif
+#if CYTHON_USE_PYTYPE_LOOKUP
+    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#else
+    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
 #endif
+    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
+    if (reduce_ex == object_reduce_ex) {
+#if CYTHON_USE_PYTYPE_LOOKUP
+        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#else
+        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#endif
+        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
+        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
+            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
+            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
+            if (!setstate) PyErr_Clear();
+            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
+                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
+                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
+                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
+            }
+            PyType_Modified((PyTypeObject*)type_obj);
+        }
+    }
+    goto GOOD;
+BAD:
+    if (!PyErr_Occurred())
+        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
+    ret = -1;
+GOOD:
+#if !CYTHON_USE_PYTYPE_LOOKUP
+    Py_XDECREF(object_reduce);
+    Py_XDECREF(object_reduce_ex);
+#endif
+    Py_XDECREF(reduce);
+    Py_XDECREF(reduce_ex);
+    Py_XDECREF(reduce_cython);
+    Py_XDECREF(setstate);
+    Py_XDECREF(setstate_cython);
+    return ret;
+}
 
 /* FetchCommonType */
-      static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
+    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
     PyObject* fake_module;
     PyTypeObject* cached_type = NULL;
     fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
@@ -7746,7 +9408,7 @@ bad:
 }
 
 /* CythonFunction */
-      static PyObject *
+    static PyObject *
 __Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
 {
     if (unlikely(op->func_doc == NULL)) {
@@ -8028,7 +9690,7 @@ static PyGetSetDef __pyx_CyFunction_getsets[] = {
     {0, 0, 0, 0, 0}
 };
 static PyMemberDef __pyx_CyFunction_members[] = {
-    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
+    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
     {0, 0, 0,  0, 0}
 };
 static PyObject *
@@ -8106,14 +9768,18 @@ __Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
     }
     return 0;
 }
-static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
+static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
 {
-    PyObject_GC_UnTrack(m);
     if (__Pyx_CyFunction_weakreflist(m) != NULL)
         PyObject_ClearWeakRefs((PyObject *) m);
     __Pyx_CyFunction_clear(m);
     PyObject_GC_Del(m);
 }
+static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
+{
+    PyObject_GC_UnTrack(m);
+    __Pyx__CyFunction_dealloc(m);
+}
 static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
 {
     Py_VISIT(m->func_closure);
@@ -8188,10 +9854,16 @@ static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, Py
         if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
             size = PyTuple_GET_SIZE(arg);
             if (likely(size == 1)) {
-                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
-                if (unlikely(!arg0)) return NULL;
+                PyObject *result, *arg0;
+                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
+                arg0 = PyTuple_GET_ITEM(arg, 0);
+                #else
+                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
+                #endif
                 result = (*meth)(self, arg0);
+                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                 Py_DECREF(arg0);
+                #endif
                 return result;
             }
             PyErr_Format(PyExc_TypeError,
@@ -8298,7 +9970,7 @@ static PyTypeObject __pyx_CyFunctionType_type = {
 };
 static int __pyx_CyFunction_init(void) {
     __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
-    if (__pyx_CyFunctionType == NULL) {
+    if (unlikely(__pyx_CyFunctionType == NULL)) {
         return -1;
     }
     return 0;
@@ -8306,7 +9978,7 @@ static int __pyx_CyFunction_init(void) {
 static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
     __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
     m->defaults = PyObject_Malloc(size);
-    if (!m->defaults)
+    if (unlikely(!m->defaults))
         return PyErr_NoMemory();
     memset(m->defaults, 0, size);
     m->defaults_pyobjects = pyobjects;
@@ -8329,7 +10001,7 @@ static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, Py
 }
 
 /* CalculateMetaclass */
-          static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
+        static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
     Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
     for (i=0; i < nbases; i++) {
         PyTypeObject *tmptype;
@@ -8368,7 +10040,7 @@ static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, Py
 }
 
 /* Py3ClassCreate */
-          static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
+        static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                            PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
     PyObject *ns;
     if (metaclass) {
@@ -8434,82 +10106,45 @@ static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObj
     return result;
 }
 
-/* Import */
-          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
-    PyObject *empty_list = 0;
-    PyObject *module = 0;
-    PyObject *global_dict = 0;
-    PyObject *empty_dict = 0;
-    PyObject *list;
-    #if PY_VERSION_HEX < 0x03030000
-    PyObject *py_import;
-    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
-    if (!py_import)
-        goto bad;
-    #endif
-    if (from_list)
-        list = from_list;
-    else {
-        empty_list = PyList_New(0);
-        if (!empty_list)
-            goto bad;
-        list = empty_list;
-    }
-    global_dict = PyModule_GetDict(__pyx_m);
-    if (!global_dict)
-        goto bad;
-    empty_dict = PyDict_New();
-    if (!empty_dict)
-        goto bad;
+/* CLineInTraceback */
+        #ifndef CYTHON_CLINE_IN_TRACEBACK
+static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
+    PyObject *use_cline;
+    PyObject *ptype, *pvalue, *ptraceback;
+#if CYTHON_COMPILING_IN_CPYTHON
+    PyObject **cython_runtime_dict;
+#endif
+    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
+#if CYTHON_COMPILING_IN_CPYTHON
+    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
+    if (likely(cython_runtime_dict)) {
+      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
+    } else
+#endif
     {
-        #if PY_MAJOR_VERSION >= 3
-        if (level == -1) {
-            if (strchr(__Pyx_MODULE_NAME, '.')) {
-                #if PY_VERSION_HEX < 0x03030000
-                PyObject *py_level = PyInt_FromLong(1);
-                if (!py_level)
-                    goto bad;
-                module = PyObject_CallFunctionObjArgs(py_import,
-                    name, global_dict, empty_dict, list, py_level, NULL);
-                Py_DECREF(py_level);
-                #else
-                module = PyImport_ImportModuleLevelObject(
-                    name, global_dict, empty_dict, list, 1);
-                #endif
-                if (!module) {
-                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
-                        goto bad;
-                    PyErr_Clear();
-                }
-            }
-            level = 0;
-        }
-        #endif
-        if (!module) {
-            #if PY_VERSION_HEX < 0x03030000
-            PyObject *py_level = PyInt_FromLong(level);
-            if (!py_level)
-                goto bad;
-            module = PyObject_CallFunctionObjArgs(py_import,
-                name, global_dict, empty_dict, list, py_level, NULL);
-            Py_DECREF(py_level);
-            #else
-            module = PyImport_ImportModuleLevelObject(
-                name, global_dict, empty_dict, list, level);
-            #endif
-        }
+      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
+      if (use_cline_obj) {
+        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
+        Py_DECREF(use_cline_obj);
+      } else {
+        PyErr_Clear();
+        use_cline = NULL;
+      }
     }
-bad:
-    #if PY_VERSION_HEX < 0x03030000
-    Py_XDECREF(py_import);
-    #endif
-    Py_XDECREF(empty_list);
-    Py_XDECREF(empty_dict);
-    return module;
+    if (!use_cline) {
+        c_line = 0;
+        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
+    }
+    else if (PyObject_Not(use_cline) != 0) {
+        c_line = 0;
+    }
+    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
+    return c_line;
 }
+#endif
 
 /* CodeObjectCache */
-          static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
+        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
     int start = 0, mid = 0, end = count - 1;
     if (end >= 0 && code_line > entries[end].code_line) {
         return count;
@@ -8589,7 +10224,7 @@ static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
 }
 
 /* AddTraceback */
-          #include "compile.h"
+        #include "compile.h"
 #include "frameobject.h"
 #include "traceback.h"
 static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
@@ -8648,18 +10283,22 @@ static void __Pyx_AddTraceback(const char *funcname, int c_line,
                                int py_line, const char *filename) {
     PyCodeObject *py_code = 0;
     PyFrameObject *py_frame = 0;
-    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
+    if (c_line) {
+        c_line = __Pyx_CLineForTraceback(tstate, c_line);
+    }
+    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
     if (!py_code) {
         py_code = __Pyx_CreateCodeObjectForTraceback(
             funcname, c_line, py_line, filename);
         if (!py_code) goto bad;
-        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
+        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
     }
     py_frame = PyFrame_New(
-        PyThreadState_GET(), /*PyThreadState *tstate,*/
-        py_code,             /*PyCodeObject *code,*/
-        __pyx_d,      /*PyObject *globals,*/
-        0                    /*PyObject *locals*/
+        tstate,            /*PyThreadState *tstate,*/
+        py_code,           /*PyCodeObject *code,*/
+        __pyx_d,    /*PyObject *globals,*/
+        0                  /*PyObject *locals*/
     );
     if (!py_frame) goto bad;
     __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
@@ -8670,7 +10309,7 @@ bad:
 }
 
 /* CIntFromPyVerify */
-          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
+        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
 #define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
@@ -8692,7 +10331,7 @@ bad:
     }
 
 /* CIntToPy */
-          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -8723,7 +10362,7 @@ bad:
 }
 
 /* CIntToPy */
-          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
     const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -8754,7 +10393,7 @@ bad:
 }
 
 /* CIntToPy */
-          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value) {
     const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -8785,7 +10424,7 @@ bad:
 }
 
 /* CIntToPy */
-          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -8816,7 +10455,7 @@ bad:
 }
 
 /* CIntFromPy */
-          static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
+        static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
     const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -9005,7 +10644,7 @@ raise_neg_overflow:
 }
 
 /* CIntFromPy */
-          static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
+        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -9194,7 +10833,7 @@ raise_neg_overflow:
 }
 
 /* CIntFromPy */
-          static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
+        static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
     const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -9383,7 +11022,7 @@ raise_neg_overflow:
 }
 
 /* CIntFromPy */
-          static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *x) {
+        static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *x) {
     const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -9572,7 +11211,7 @@ raise_neg_overflow:
 }
 
 /* CIntFromPy */
-          static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
+        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -9760,8 +11399,80 @@ raise_neg_overflow:
     return (int) -1;
 }
 
+/* FastTypeChecks */
+        #if CYTHON_COMPILING_IN_CPYTHON
+static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
+    while (a) {
+        a = a->tp_base;
+        if (a == b)
+            return 1;
+    }
+    return b == &PyBaseObject_Type;
+}
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
+    PyObject *mro;
+    if (a == b) return 1;
+    mro = a->tp_mro;
+    if (likely(mro)) {
+        Py_ssize_t i, n;
+        n = PyTuple_GET_SIZE(mro);
+        for (i = 0; i < n; i++) {
+            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
+                return 1;
+        }
+        return 0;
+    }
+    return __Pyx_InBases(a, b);
+}
+#if PY_MAJOR_VERSION == 2
+static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
+    PyObject *exception, *value, *tb;
+    int res;
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&exception, &value, &tb);
+    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
+    if (unlikely(res == -1)) {
+        PyErr_WriteUnraisable(err);
+        res = 0;
+    }
+    if (!res) {
+        res = PyObject_IsSubclass(err, exc_type2);
+        if (unlikely(res == -1)) {
+            PyErr_WriteUnraisable(err);
+            res = 0;
+        }
+    }
+    __Pyx_ErrRestore(exception, value, tb);
+    return res;
+}
+#else
+static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
+    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
+    if (!res) {
+        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
+    }
+    return res;
+}
+#endif
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
+    if (likely(err == exc_type)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
+    }
+    return PyErr_GivenExceptionMatches(err, exc_type);
+}
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
+    if (likely(err == exc_type1 || err == exc_type2)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
+    }
+    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
+}
+#endif
+
 /* CheckBinaryVersion */
-          static int __Pyx_check_binary_version(void) {
+        static int __Pyx_check_binary_version(void) {
     char ctversion[4], rtversion[4];
     PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
     PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
@@ -9777,7 +11488,7 @@ raise_neg_overflow:
 }
 
 /* InitStrings */
-          static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
+        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
     while (t->p) {
         #if PY_MAJOR_VERSION < 3
         if (t->is_unicode) {
@@ -9802,6 +11513,8 @@ raise_neg_overflow:
         #endif
         if (!*t->p)
             return -1;
+        if (PyObject_Hash(*t->p) == -1)
+            PyErr_Clear();
         ++t;
     }
     return 0;
@@ -9810,50 +11523,57 @@ raise_neg_overflow:
 static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
     return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
     Py_ssize_t ignore;
     return __Pyx_PyObject_AsStringAndSize(o, &ignore);
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
-#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
-    if (
-#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-            __Pyx_sys_getdefaultencoding_not_ascii &&
-#endif
-            PyUnicode_Check(o)) {
-#if PY_VERSION_HEX < 0x03030000
-        char* defenc_c;
-        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
-        if (!defenc) return NULL;
-        defenc_c = PyBytes_AS_STRING(defenc);
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+#if !CYTHON_PEP393_ENABLED
+static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    char* defenc_c;
+    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
+    if (!defenc) return NULL;
+    defenc_c = PyBytes_AS_STRING(defenc);
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        {
-            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
-            char* c;
-            for (c = defenc_c; c < end; c++) {
-                if ((unsigned char) (*c) >= 128) {
-                    PyUnicode_AsASCIIString(o);
-                    return NULL;
-                }
+    {
+        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
+        char* c;
+        for (c = defenc_c; c < end; c++) {
+            if ((unsigned char) (*c) >= 128) {
+                PyUnicode_AsASCIIString(o);
+                return NULL;
             }
         }
+    }
 #endif
-        *length = PyBytes_GET_SIZE(defenc);
-        return defenc_c;
+    *length = PyBytes_GET_SIZE(defenc);
+    return defenc_c;
+}
 #else
-        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
+static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        if (PyUnicode_IS_ASCII(o)) {
-            *length = PyUnicode_GET_LENGTH(o);
-            return PyUnicode_AsUTF8(o);
-        } else {
-            PyUnicode_AsASCIIString(o);
-            return NULL;
-        }
+    if (likely(PyUnicode_IS_ASCII(o))) {
+        *length = PyUnicode_GET_LENGTH(o);
+        return PyUnicode_AsUTF8(o);
+    } else {
+        PyUnicode_AsASCIIString(o);
+        return NULL;
+    }
 #else
-        return PyUnicode_AsUTF8AndSize(o, length);
+    return PyUnicode_AsUTF8AndSize(o, length);
 #endif
+}
+#endif
+#endif
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+    if (
+#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
+            __Pyx_sys_getdefaultencoding_not_ascii &&
 #endif
+            PyUnicode_Check(o)) {
+        return __Pyx_PyUnicode_AsStringAndSize(o, length);
     } else
 #endif
 #if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
@@ -9877,6 +11597,26 @@ static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
    else return PyObject_IsTrue(x);
 }
+static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
+#if PY_MAJOR_VERSION >= 3
+    if (PyLong_Check(result)) {
+        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
+                "__int__ returned non-int (type %.200s).  "
+                "The ability to return an instance of a strict subclass of int "
+                "is deprecated, and may be removed in a future version of Python.",
+                Py_TYPE(result)->tp_name)) {
+            Py_DECREF(result);
+            return NULL;
+        }
+        return result;
+    }
+#endif
+    PyErr_Format(PyExc_TypeError,
+                 "__%.4s__ returned non-%.4s (type %.200s)",
+                 type_name, type_name, Py_TYPE(result)->tp_name);
+    Py_DECREF(result);
+    return NULL;
+}
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
 #if CYTHON_USE_TYPE_SLOTS
   PyNumberMethods *m;
@@ -9884,9 +11624,9 @@ static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
   const char *name = NULL;
   PyObject *res = NULL;
 #if PY_MAJOR_VERSION < 3
-  if (PyInt_Check(x) || PyLong_Check(x))
+  if (likely(PyInt_Check(x) || PyLong_Check(x)))
 #else
-  if (PyLong_Check(x))
+  if (likely(PyLong_Check(x)))
 #endif
     return __Pyx_NewRef(x);
 #if CYTHON_USE_TYPE_SLOTS
@@ -9894,32 +11634,30 @@ static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
   #if PY_MAJOR_VERSION < 3
   if (m && m->nb_int) {
     name = "int";
-    res = PyNumber_Int(x);
+    res = m->nb_int(x);
   }
   else if (m && m->nb_long) {
     name = "long";
-    res = PyNumber_Long(x);
+    res = m->nb_long(x);
   }
   #else
-  if (m && m->nb_int) {
+  if (likely(m && m->nb_int)) {
     name = "int";
-    res = PyNumber_Long(x);
+    res = m->nb_int(x);
   }
   #endif
 #else
-  res = PyNumber_Int(x);
+  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
+    res = PyNumber_Int(x);
+  }
 #endif
-  if (res) {
+  if (likely(res)) {
 #if PY_MAJOR_VERSION < 3
-    if (!PyInt_Check(res) && !PyLong_Check(res)) {
+    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
 #else
-    if (!PyLong_Check(res)) {
+    if (unlikely(!PyLong_CheckExact(res))) {
 #endif
-      PyErr_Format(PyExc_TypeError,
-                   "__%.4s__ returned non-%.4s (type %.200s)",
-                   name, name, Py_TYPE(res)->tp_name);
-      Py_DECREF(res);
-      return NULL;
+        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
     }
   }
   else if (!PyErr_Occurred()) {
diff --git a/src/twisted/internet/iocpreactor/iocpsupport/iocpsupport.pyx b/src/twisted/internet/iocpreactor/iocpsupport/iocpsupport.pyx
index 6c8e1c3..dc8b1eb 100644
--- a/src/twisted/internet/iocpreactor/iocpsupport/iocpsupport.pyx
+++ b/src/twisted/internet/iocpreactor/iocpsupport/iocpsupport.pyx
@@ -225,7 +225,7 @@ cdef class CompletionPort:
 
         obj = None
         if ov:
-            obj, ignored = <object>ov.attached
+            obj, _ = <object>ov.attached
             unmakeOV(ov)
 
         return (rc, bytes, key, obj)
diff --git a/src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi b/src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi
index 5b334ad..c1cf252 100644
--- a/src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi
+++ b/src/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi
@@ -12,7 +12,7 @@ def send(long s, object buff, object obj, unsigned long flags = 0):
     PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, &size)
     ws_buf.len = <DWORD>size
 
-    ov = makeOV(obj, buff)
+    ov = makeOV(obj)
 
     rc = WSASend(s, &ws_buf, 1, &bytes, flags, <OVERLAPPED *>ov, NULL)
 
diff --git a/src/twisted/newsfragments/9358.bugfix b/src/twisted/newsfragments/9358.bugfix
new file mode 100644
index 0000000..faff3b9
--- /dev/null
+++ b/src/twisted/newsfragments/9358.bugfix
@@ -0,0 +1 @@
+twisted.internet.iocpreactor.send no longer attaches send buffer to completion event, saving memory.
