Index: procmon.py
===================================================================
--- procmon.py	(revision 44097)
+++ procmon.py	(working copy)
@@ -118,7 +118,8 @@
         return dct
 
 
-    def addProcess(self, name, args, uid=None, gid=None, env={}):
+    def addProcess(self, name, args, uid=None, gid=None, env={}, path=None,
+                   childFDs=None):
         """
         Add a new monitored process and start it immediately if the
         L{ProcessMonitor} service is running.
@@ -140,12 +141,19 @@
         @param env: The environment to give to the launched process. See
             L{IReactorProcess.spawnProcess}'s C{env} parameter.
         @type env: C{dict}
+        @param path: the path to run the subprocess in - defaults to the
+            current directory.
+        @type name: C{str}
+        @param childFDs: A dictionary mapping file descriptors in the new
+            child process to an integer or to the string 'r' or 'w'. See
+            L{IReactorProcess.spawnProcess}'s C{childFDs} parameter.
+        @type childFDs: C{dict}
         @raises: C{KeyError} if a process with the given name already
             exists
         """
         if name in self.processes:
             raise KeyError("remove %s first" % (name,))
-        self.processes[name] = args, uid, gid, env
+        self.processes[name] = args, uid, gid, env, path, childFDs
         self.delay[name] = self.minRestartDelay
         if self.running:
             self.startProcess(name)
@@ -239,7 +247,7 @@
         if name in self.protocols:
             return
 
-        args, uid, gid, env = self.processes[name]
+        args, uid, gid, env, path, childFDs = self.processes[name]
 
         proto = LoggingProtocol()
         proto.service = self
@@ -247,7 +255,8 @@
         self.protocols[name] = proto
         self.timeStarted[name] = self._reactor.seconds()
         self._reactor.spawnProcess(proto, args[0], args, uid=uid,
-                                          gid=gid, env=env)
+                                          gid=gid, env=env, path=path, 
+                                          childFDs=childFDs)
 
 
     def _forceStopProcess(self, proc):
