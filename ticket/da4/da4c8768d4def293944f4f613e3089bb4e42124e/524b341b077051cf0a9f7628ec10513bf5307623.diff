--- twisted/runner/procmon.py.orig	Tue May 30 11:05:57 2006
+++ twisted/runner/procmon.py	Tue May 30 11:29:50 2006
@@ -12,8 +12,7 @@
 it. A successful run will reset the counter.
 
 The primary interface is "addProcess" and "removeProcess". When the
-service is active (that is, when the application it is attached to
-is running), adding a process automatically starts it.
+service is running, adding a process automatically starts it.
 
 Each process has a name (a string). This string must uniquely identify
 the process. In particular, attempting to add two processes with the
@@ -95,7 +94,6 @@
 class ProcessMonitor(service.Service):
 
     threshold = 1
-    active = 0
     killTime = 5
     consistency = None
     consistencyDelay = 60
@@ -109,7 +107,7 @@
 
     def __getstate__(self):
         dct = service.Service.__getstate__(self)
-        for k in ('active', 'consistency'):
+        for k in ('consistency', ):
             if dct.has_key(k):
                 del dct[k]
         dct['protocols'] = {}
@@ -134,7 +132,7 @@
         if self.processes.has_key(name):
             raise KeyError("remove %s first" % name)
         self.processes[name] = args, uid, gid
-        if self.active:
+        if self.running:
             self.startProcess(name)
 
     def removeProcess(self, name):
@@ -143,7 +141,6 @@
 
     def startService(self):
         service.Service.startService(self)
-        self.active = 1
         for name in self.processes.keys():
             reactor.callLater(0, self.startProcess, name)
         self.consistency = reactor.callLater(self.consistencyDelay,
@@ -151,7 +148,6 @@
 
     def stopService(self):
         service.Service.stopService(self)
-        self.active = 0
         for name in self.processes.keys():
             self.stopProcess(name)
         self.consistency.cancel()
@@ -166,7 +162,7 @@
             delay = self.delay[name] = min(1+2*self.delay.get(name, 0), 3600)
         else:
             delay = self.delay[name] = 0
-        if self.active and self.processes.has_key(name):
+        if self.running and self.processes.has_key(name):
             reactor.callLater(delay, self.startProcess, name)
 
     def startProcess(self, name):
