diff --git twisted/manhole/explorer.py twisted/manhole/explorer.py
index 30db8e2..ac11a1b 100644
--- twisted/manhole/explorer.py
+++ twisted/manhole/explorer.py
@@ -16,7 +16,6 @@ L{inspect} module available in Python 2.1.
 
 # System Imports
 import inspect, string, sys, types
-import UserDict
 
 # Twisted Imports
 from twisted.spread import pb
@@ -26,17 +25,17 @@ from twisted.python import reflect
 True=(1==1)
 False=not True
 
-class Pool(UserDict.UserDict):
+class Pool(dict):
     def getExplorer(self, object, identifier):
         oid = id(object)
-        if oid in self.data:
+        if oid in self:
             # XXX: This potentially returns something with
             # 'identifier' set to a different value.
-            return self.data[oid]
+            return self[oid]
         else:
             klass = typeTable.get(type(object), ExplorerGeneric)
             e = types.InstanceType(klass, {})
-            self.data[oid] = e
+            self[oid] = e
             klass.__init__(e, object, identifier)
             return e
 
diff --git twisted/protocols/postfix.py twisted/protocols/postfix.py
index 7a2079d..43797bf 100644
--- twisted/protocols/postfix.py
+++ twisted/protocols/postfix.py
@@ -7,7 +7,6 @@ Postfix mail transport agent related protocols.
 """
 
 import sys
-import UserDict
 import urllib
 
 from twisted.protocols import basic
@@ -92,8 +91,7 @@ class PostfixTCPMapServer(basic.LineReceiver, policies.TimeoutMixin):
                 self.sendCode(500, 'put is not implemented yet.')
 
 
-class PostfixTCPMapDictServerFactory(protocol.ServerFactory,
-                                     UserDict.UserDict):
+class PostfixTCPMapDictServerFactory(protocol.ServerFactory, dict):
     """An in-memory dictionary factory for PostfixTCPMapServer."""
 
     protocol = PostfixTCPMapServer
diff --git twisted/python/util.py twisted/python/util.py
index 852043c..3d4e90a 100644
--- twisted/python/util.py
+++ twisted/python/util.py
@@ -12,7 +12,6 @@ try:
     from os import setgroups, getgroups
 except ImportError:
     setgroups = getgroups = None
-from UserDict import UserDict
 
 
 class InsensitiveDict:
@@ -140,8 +139,8 @@ class InsensitiveDict:
                 return 0
         return len(self)==len(other)
 
-class OrderedDict(UserDict):
-    """A UserDict that preserves insert order whenever possible."""
+class OrderedDict(dict):
+    """A dict that preserves insert order whenever possible."""
     def __init__(self, dict=None, **kwargs):
         self._order = []
         self.data = {}
@@ -159,13 +158,13 @@ class OrderedDict(UserDict):
     def __setitem__(self, key, value):
         if not self.has_key(key):
             self._order.append(key)
-        UserDict.__setitem__(self, key, value)
+        dict.__setitem__(self, key, value)
 
     def copy(self):
         return self.__class__(self)
 
     def __delitem__(self, key):
-        UserDict.__delitem__(self, key)
+        dict.__delitem__(self, key)
         self._order.remove(key)
 
     def iteritems(self):
