Index: twisted/internet/base.py
===================================================================
--- twisted/internet/base.py	(revision 17069)
+++ twisted/internet/base.py	(working copy)
@@ -527,14 +527,21 @@
             # making them, in case another call is added to the queue
             # while we're in this loop.
             count = 0
+            total = len(self.threadCallQueue)
             for (f, a, kw) in self.threadCallQueue:
                 try:
                     f(*a, **kw)
                 except:
                     log.err()
                 count += 1
+                if count == total:
+                    break
             del self.threadCallQueue[:count]
+            if self.threadCallQueue:
+                if self.waker:
+                    self.waker.wakeUp()
 
+
         # insert new delayed calls now
         self._insertNewDelayedCalls()
 
Index: twisted/test/test_internet.py
===================================================================
--- twisted/test/test_internet.py	(revision 17069)
+++ twisted/test/test_internet.py	(working copy)
@@ -376,6 +376,7 @@
         self.assertEquals(dc.getTime(), 13)
 
 
+class CallFromThreadTests(unittest.TestCase):
     def testWakeUp(self):
         # Make sure other threads can wake up the reactor
         d = Deferred()
@@ -389,7 +390,31 @@
     if interfaces.IReactorThreads(reactor, None) is None:
         testWakeUp.skip = "Nothing to wake up for without thread support"
 
-
+    def _stopCallFromThreadCallback(self):
+        self.stopped=True
+        
+    def _callFromThreadCallback(self, d):
+        reactor.callFromThread(self._callFromThreadCallback2, d)
+        reactor.callLater(0, self._stopCallFromThreadCallback)
+        
+    def _callFromThreadCallback2(self, d):
+        try:
+            self.assert_(self.stopped)
+        except:
+            # Send the error to the deferred
+            d.errback()
+        else:
+            d.callback(None)
+        
+    def testCallFromThreadStops(self):
+        # Ensure that callFromThread from inside a callFromThread
+        # callback doesn't sit in an infinite loop and lets other
+        # things happen too.
+        self.stopped=False
+        d=defer.Deferred()
+        reactor.callFromThread(self._callFromThreadCallback, d)
+        return d
+    
 class ReactorCoreTestCase(unittest.TestCase):
     def setUp(self):
         self.triggers = []
