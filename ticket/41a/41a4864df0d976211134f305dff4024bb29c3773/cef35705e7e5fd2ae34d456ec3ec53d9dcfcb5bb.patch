From 242cc5f75f26f596c16999b8f3e8f3d93a986cc6 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Tue, 15 Apr 2014 17:14:17 -0400
Subject: [PATCH 01/20] add python3 future imports and add zippath to py3 test
 suite

---
 twisted/python/dist3.py   | 1 +
 twisted/python/zippath.py | 1 +
 2 files changed, 2 insertions(+)

diff --git a/twisted/python/dist3.py b/twisted/python/dist3.py
index eee4f44..613646f 100644
--- a/twisted/python/dist3.py
+++ b/twisted/python/dist3.py
@@ -100,6 +100,7 @@ modules = [
     "twisted.python.test",
     "twisted.python.test.deprecatedattributes",
     "twisted.python.test.modules_helpers",
+    "twisted.python.test.test_zippath",
     "twisted.python.threadable",
     "twisted.python.threadpool",
     "twisted.python.usage",
diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index c29addd..f6bd4e7 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -7,6 +7,7 @@ This module contains implementations of IFilePath for zip files.
 
 See the constructor for ZipArchive for use.
 """
+from __future__ import print_function, division, absolute_import
 
 __metaclass__ = type
 
-- 
1.7.12.4 (Apple Git-37)


From 0d451dc03c3874473135e64e5bd738ff1317139c Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Tue, 15 Apr 2014 17:49:11 -0400
Subject: [PATCH 02/20] WIP: getting around bytes + str error, still broken
 with ZipArchive(b'..'). see twisted.test.test_paths
 for workaround?

---
 twisted/python/test/test_zippath.py | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/twisted/python/test/test_zippath.py b/twisted/python/test/test_zippath.py
index 863e2f3..6f40e4a 100644
--- a/twisted/python/test/test_zippath.py
+++ b/twisted/python/test/test_zippath.py
@@ -33,10 +33,10 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
     """
     def setUp(self):
         AbstractFilePathTestCase.setUp(self)
-        zipit(self.cmn, self.cmn + '.zip')
-        self.path = ZipArchive(self.cmn + '.zip')
+        zipit(self.cmn, self.cmn + b'.zip')
+        self.path = ZipArchive(self.cmn + b'.zip')
         self.root = self.path
-        self.all = [x.replace(self.cmn, self.cmn + '.zip') for x in self.all]
+        self.all = [x.replace(self.cmn, self.cmn + b'.zip') for x in self.all]
 
 
     def test_zipPathRepr(self):
-- 
1.7.12.4 (Apple Git-37)


From e094de2dc288f6fd65d73d51aba1a998267725df Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 08:18:34 -0400
Subject: [PATCH 03/20] fix bugs using zipfile.  it only works if you pass it
 strings, not bytestrings

---
 twisted/python/test/test_zippath.py | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/twisted/python/test/test_zippath.py b/twisted/python/test/test_zippath.py
index 6f40e4a..98ca9b5 100644
--- a/twisted/python/test/test_zippath.py
+++ b/twisted/python/test/test_zippath.py
@@ -10,18 +10,22 @@ import os, zipfile
 from twisted.test.test_paths import AbstractFilePathTestCase
 from twisted.python.zippath import ZipArchive
 
+import sys
+
+encoding = sys.getfilesystemencoding()
+
 
 def zipit(dirname, zfname):
     """
     Create a zipfile on zfname, containing the contents of dirname'
     """
-    zf = zipfile.ZipFile(zfname, "w")
+    zf = zipfile.ZipFile(zfname.decode(encoding), "w")
     for root, ignored, files, in os.walk(dirname):
         for fname in files:
             fspath = os.path.join(root, fname)
             arcpath = os.path.join(root, fname)[len(dirname)+1:]
             # print fspath, '=>', arcpath
-            zf.write(fspath, arcpath)
+            zf.write(fspath.decode(encoding), arcpath.decode(encoding))
     zf.close()
 
 
@@ -34,7 +38,7 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
     def setUp(self):
         AbstractFilePathTestCase.setUp(self)
         zipit(self.cmn, self.cmn + b'.zip')
-        self.path = ZipArchive(self.cmn + b'.zip')
+        self.path = ZipArchive((self.cmn + b'.zip').decode(encoding))
         self.root = self.path
         self.all = [x.replace(self.cmn, self.cmn + b'.zip') for x in self.all]
 
-- 
1.7.12.4 (Apple Git-37)


From b9db7e93dd9ee6efc72f03d545fee0a82890d219 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 08:31:26 -0400
Subject: [PATCH 04/20] fix tests in python2, strings are now unicode

---
 twisted/python/zippath.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index f6bd4e7..0f02ff7 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -71,7 +71,7 @@ class ZipPath(AbstractFilePath):
         parts = [os.path.abspath(self.archive.path)]
         parts.extend(self.pathInArchive.split(ZIP_PATH_SEP))
         path = os.sep.join(parts)
-        return "ZipPath('%s')" % (path.encode('string-escape'),)
+        return "ZipPath('%s')" % (path.encode('unicode-escape'),)
 
 
     def parent(self):
-- 
1.7.12.4 (Apple Git-37)


From eac43c8b8d543226f33f898858496c001972ce7b Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 10:37:24 -0400
Subject: [PATCH 05/20] converting strings to bytes, since that's how the
 test_paths suite looks

---
 twisted/python/test/test_zippath.py | 11 ++++++-----
 twisted/python/zippath.py           |  2 +-
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/twisted/python/test/test_zippath.py b/twisted/python/test/test_zippath.py
index 98ca9b5..6134237 100644
--- a/twisted/python/test/test_zippath.py
+++ b/twisted/python/test/test_zippath.py
@@ -50,7 +50,7 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         """
         child = self.path.child("foo")
         pathRepr = "ZipPath(%r)" % (
-            os.path.abspath(self.cmn + ".zip" + os.sep + 'foo'),)
+            os.path.abspath(self.cmn + b".zip" + os.sep.encode() + b'foo'),)
 
         # Check for an absolute path
         self.assertEqual(repr(child), pathRepr)
@@ -72,7 +72,8 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         """
         child = self.path.child("foo").child("..").child("bar")
         pathRepr = "ZipPath(%r)" % (
-            self.cmn + ".zip" + os.sep.join(["", "foo", "..", "bar"]))
+            self.cmn +
+            (".zip" + os.sep.join(["", "foo", "..", "bar"])).encode("utf-8"))
         self.assertEqual(repr(child), pathRepr)
 
 
@@ -82,8 +83,8 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         string literals are escaped in the ZipPath repr.
         """
         child = self.path.child("'")
-        path = self.cmn + ".zip" + os.sep.join(["", "'"])
-        pathRepr = "ZipPath('%s')" % (path.encode('string-escape'),)
+        path = self.cmn + (".zip" + os.sep.join(["", "'"])).encode("utf-8")
+        pathRepr = "ZipPath('%s')" % (path,)
         self.assertEqual(repr(child), pathRepr)
 
 
@@ -92,7 +93,7 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         Make sure that invoking ZipArchive's repr prints the correct class
         name and an absolute path to the zip file.
         """
-        pathRepr = 'ZipArchive(%r)' % (os.path.abspath(self.cmn + '.zip'),)
+        pathRepr = 'ZipArchive(%r)' % (os.path.abspath(self.cmn + b'.zip'),)
 
         # Check for an absolute path
         self.assertEqual(repr(self.path), pathRepr)
diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 0f02ff7..dfbc641 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -71,7 +71,7 @@ class ZipPath(AbstractFilePath):
         parts = [os.path.abspath(self.archive.path)]
         parts.extend(self.pathInArchive.split(ZIP_PATH_SEP))
         path = os.sep.join(parts)
-        return "ZipPath('%s')" % (path.encode('unicode-escape'),)
+        return "ZipPath('%s')" % (path,)
 
 
     def parent(self):
-- 
1.7.12.4 (Apple Git-37)


From aa8620ee01d5e089cda77e55a9b65d8daefbbb7d Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 11:51:27 -0400
Subject: [PATCH 06/20] convert stray strings to bytes

---
 twisted/python/zippath.py | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index dfbc641..6a25db4 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -33,7 +33,7 @@ from zope.interface import implementer
 # using FilePath here exclusively rather than os to make sure that we don't do
 # anything OS-path-specific here.
 
-ZIP_PATH_SEP = '/'              # In zipfiles, "/" is universally used as the
+ZIP_PATH_SEP = b'/'             # In zipfiles, "/" is universally used as the
                                 # path separator, regardless of platform.
 
 
@@ -57,7 +57,7 @@ class ZipPath(AbstractFilePath):
         self.pathInArchive = pathInArchive
         # self.path pretends to be os-specific because that's the way the
         # 'zipimport' module does it.
-        self.path = os.path.join(archive.zipfile.filename,
+        self.path = os.path.join(archive.zipfile.filename.encode(),
                                  *(self.pathInArchive.split(ZIP_PATH_SEP)))
 
     def __cmp__(self, other):
@@ -208,17 +208,21 @@ class ZipArchive(ZipPath):
             self.zipfile = ZipFile(archivePathname)
         else:
             self.zipfile = ChunkingZipFile(archivePathname)
-        self.path = archivePathname
-        self.pathInArchive = ''
+        try:
+            self.path = archivePathname.encode("utf-8")
+        except AttributeError:
+            self.path = archivePathname
+
+        self.pathInArchive = b''
         # zipfile is already wasting O(N) memory on cached ZipInfo instances,
         # so there's no sense in trying to do this lazily or intelligently
         self.childmap = {}      # map parent: list of children
 
         for name in self.zipfile.namelist():
-            name = name.split(ZIP_PATH_SEP)
+            name = name.split(ZIP_PATH_SEP.decode())
             for x in range(len(name)):
                 child = name[-x]
-                parent = ZIP_PATH_SEP.join(name[:-x])
+                parent = ZIP_PATH_SEP.decode().join(name[:-x])
                 if parent not in self.childmap:
                     self.childmap[parent] = {}
                 self.childmap[parent][child] = 1
-- 
1.7.12.4 (Apple Git-37)


From fa8909ae5ac234ab2c8541a72cb9ba11e716ab99 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 12:02:57 -0400
Subject: [PATCH 07/20] convert more stray strings to bytes

---
 twisted/python/zippath.py | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 6a25db4..4ac984a 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -58,7 +58,7 @@ class ZipPath(AbstractFilePath):
         # self.path pretends to be os-specific because that's the way the
         # 'zipimport' module does it.
         self.path = os.path.join(archive.zipfile.filename.encode(),
-                                 *(self.pathInArchive.split(ZIP_PATH_SEP)))
+                                 *(self.pathInArchive.encode().split(ZIP_PATH_SEP)))
 
     def __cmp__(self, other):
         if not isinstance(other, ZipPath):
@@ -69,13 +69,13 @@ class ZipPath(AbstractFilePath):
 
     def __repr__(self):
         parts = [os.path.abspath(self.archive.path)]
-        parts.extend(self.pathInArchive.split(ZIP_PATH_SEP))
+        parts.extend(self.pathInArchive.encode().split(ZIP_PATH_SEP))
         path = os.sep.join(parts)
         return "ZipPath('%s')" % (path,)
 
 
     def parent(self):
-        splitup = self.pathInArchive.split(ZIP_PATH_SEP)
+        splitup = self.pathInArchive.encode.split(ZIP_PATH_SEP)
         if len(splitup) == 1:
             return self.archive
         return ZipPath(self.archive, ZIP_PATH_SEP.join(splitup[:-1]))
-- 
1.7.12.4 (Apple Git-37)


From 82dfacfb8a74155e9d835caf4345a9d971f66dea Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 15:21:37 -0400
Subject: [PATCH 08/20] wip: confused with these repr tests breaking in py2

---
 twisted/python/test/test_zippath.py | 2 +-
 twisted/python/zippath.py           | 6 +++---
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/twisted/python/test/test_zippath.py b/twisted/python/test/test_zippath.py
index 6134237..c79325b 100644
--- a/twisted/python/test/test_zippath.py
+++ b/twisted/python/test/test_zippath.py
@@ -84,7 +84,7 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         """
         child = self.path.child("'")
         path = self.cmn + (".zip" + os.sep.join(["", "'"])).encode("utf-8")
-        pathRepr = "ZipPath('%s')" % (path,)
+        pathRepr = "ZipPath(%s)" % (path,)
         self.assertEqual(repr(child), pathRepr)
 
 
diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 4ac984a..16166c7 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -70,12 +70,12 @@ class ZipPath(AbstractFilePath):
     def __repr__(self):
         parts = [os.path.abspath(self.archive.path)]
         parts.extend(self.pathInArchive.encode().split(ZIP_PATH_SEP))
-        path = os.sep.join(parts)
-        return "ZipPath('%s')" % (path,)
+        path = os.sep.encode().join(parts)
+        return "ZipPath(%s)" % (path,)
 
 
     def parent(self):
-        splitup = self.pathInArchive.encode.split(ZIP_PATH_SEP)
+        splitup = self.pathInArchive.encode().split(ZIP_PATH_SEP)
         if len(splitup) == 1:
             return self.archive
         return ZipPath(self.archive, ZIP_PATH_SEP.join(splitup[:-1]))
-- 
1.7.12.4 (Apple Git-37)


From f728abf2d4e0ce3e2653d26f35eac26c17fedd12 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 16:40:12 -0400
Subject: [PATCH 09/20] fix escaping test between py2 and 3

---
 twisted/python/test/test_zippath.py | 6 +++++-
 twisted/python/zippath.py           | 2 +-
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/twisted/python/test/test_zippath.py b/twisted/python/test/test_zippath.py
index c79325b..b61beff 100644
--- a/twisted/python/test/test_zippath.py
+++ b/twisted/python/test/test_zippath.py
@@ -9,6 +9,7 @@ import os, zipfile
 
 from twisted.test.test_paths import AbstractFilePathTestCase
 from twisted.python.zippath import ZipArchive
+import twisted.python.compat as compat
 
 import sys
 
@@ -84,7 +85,10 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         """
         child = self.path.child("'")
         path = self.cmn + (".zip" + os.sep.join(["", "'"])).encode("utf-8")
-        pathRepr = "ZipPath(%s)" % (path,)
+        if compat._PY3:
+            pathRepr = "ZipPath(%s)" % (path,)
+        else:
+            pathRepr = "ZipPath(%r)" % (path,)
         self.assertEqual(repr(child), pathRepr)
 
 
diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 16166c7..edbb63f 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -71,7 +71,7 @@ class ZipPath(AbstractFilePath):
         parts = [os.path.abspath(self.archive.path)]
         parts.extend(self.pathInArchive.encode().split(ZIP_PATH_SEP))
         path = os.sep.encode().join(parts)
-        return "ZipPath(%s)" % (path,)
+        return "ZipPath(%r)" % (path,)
 
 
     def parent(self):
-- 
1.7.12.4 (Apple Git-37)


From e9e0dd727f59c76ffb4a0d3fb84ddaf9a968e354 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 17:08:07 -0400
Subject: [PATCH 10/20] fix error adding bytes to strings, fix ZipArchive to
 allow taking bytes, since ZipFile breaks if you pass
 it bytes

---
 twisted/python/test/test_zippath.py | 4 +++-
 twisted/python/zippath.py           | 7 +++++++
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/twisted/python/test/test_zippath.py b/twisted/python/test/test_zippath.py
index b61beff..8c71a8d 100644
--- a/twisted/python/test/test_zippath.py
+++ b/twisted/python/test/test_zippath.py
@@ -57,7 +57,9 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         self.assertEqual(repr(child), pathRepr)
 
         # Create a path to the file rooted in the current working directory
-        relativeCommon = self.cmn.replace(os.getcwd() + os.sep, "", 1) + ".zip"
+        relativeCommon = self.cmn.replace(
+            os.getcwd().encode(encoding) + os.sep.encode(encoding), b"", 1)
+        relativeCommon += b".zip"
         relpath = ZipArchive(relativeCommon)
         child = relpath.child("foo")
 
diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index edbb63f..c8ddd39 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -36,6 +36,8 @@ from zope.interface import implementer
 ZIP_PATH_SEP = b'/'             # In zipfiles, "/" is universally used as the
                                 # path separator, regardless of platform.
 
+ENCODING = sys.getfilesystemencoding()
+
 
 @implementer(IFilePath)
 class ZipPath(AbstractFilePath):
@@ -204,6 +206,11 @@ class ZipArchive(ZipPath):
 
         @param archivePathname: a str, naming a path in the filesystem.
         """
+
+        # convert to string because python3 ZipFile doesn't take bytes
+        if isinstance(archivePathname, bytes):
+            archivePathname = archivePathname.decode(ENCODING)
+
         if _USE_ZIPFILE:
             self.zipfile = ZipFile(archivePathname)
         else:
-- 
1.7.12.4 (Apple Git-37)


From 43f072be68e7ef99cbd10ceca540873337592849 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 17:32:55 -0400
Subject: [PATCH 11/20] keep archive path internally as bytes, fix parentdir
 test

---
 twisted/python/zippath.py | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index c8ddd39..5ed0905 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -56,11 +56,17 @@ class ZipPath(AbstractFilePath):
         @param pathInArchive: a ZIP_PATH_SEP-separated string.
         """
         self.archive = archive
-        self.pathInArchive = pathInArchive
+
+        # keep pathInArchive as bytes
+        if isinstance(pathInArchive, bytes):
+            self.pathInArchive = pathInArchive
+        else:
+            self.pathInArchive = pathInArchive.encode(ENCODING)
+
         # self.path pretends to be os-specific because that's the way the
         # 'zipimport' module does it.
         self.path = os.path.join(archive.zipfile.filename.encode(),
-                                 *(self.pathInArchive.encode().split(ZIP_PATH_SEP)))
+                                 *(self.pathInArchive.split(ZIP_PATH_SEP)))
 
     def __cmp__(self, other):
         if not isinstance(other, ZipPath):
@@ -71,13 +77,13 @@ class ZipPath(AbstractFilePath):
 
     def __repr__(self):
         parts = [os.path.abspath(self.archive.path)]
-        parts.extend(self.pathInArchive.encode().split(ZIP_PATH_SEP))
+        parts.extend(self.pathInArchive.split(ZIP_PATH_SEP))
         path = os.sep.encode().join(parts)
         return "ZipPath(%r)" % (path,)
 
 
     def parent(self):
-        splitup = self.pathInArchive.encode().split(ZIP_PATH_SEP)
+        splitup = self.pathInArchive.split(ZIP_PATH_SEP)
         if len(splitup) == 1:
             return self.archive
         return ZipPath(self.archive, ZIP_PATH_SEP.join(splitup[:-1]))
@@ -95,7 +101,9 @@ class ZipPath(AbstractFilePath):
             it) as this means it may include special names with special
             meaning outside of the context of a zip archive.
         """
-        return ZipPath(self.archive, ZIP_PATH_SEP.join([self.pathInArchive, path]))
+        encodedPath = path.encode(ENCODING)
+        return ZipPath(self.archive,
+                       ZIP_PATH_SEP.join([self.pathInArchive, encodedPath]))
 
 
     def sibling(self, path):
-- 
1.7.12.4 (Apple Git-37)


From 3aba52936bdd98f0010f4f180d1db51466e8b075 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 17:35:55 -0400
Subject: [PATCH 12/20] fix bytes mixing issue

---
 twisted/python/test/test_zippath.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/twisted/python/test/test_zippath.py b/twisted/python/test/test_zippath.py
index 8c71a8d..e1e4a50 100644
--- a/twisted/python/test/test_zippath.py
+++ b/twisted/python/test/test_zippath.py
@@ -105,7 +105,7 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         self.assertEqual(repr(self.path), pathRepr)
 
         # Create a path to the file rooted in the current working directory
-        relativeCommon = self.cmn.replace(os.getcwd() + os.sep, "", 1) + ".zip"
+        relativeCommon = self.cmn.replace(os.getcwd().encode(encoding) + os.sep.encode(encoding), b"", 1) + b".zip"
         relpath = ZipArchive(relativeCommon)
 
         # Check using a path without the cwd prepended
-- 
1.7.12.4 (Apple Git-37)


From 8db91d6fffe764bf955f8b565b884ee65e3faea8 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 23:05:59 -0400
Subject: [PATCH 13/20] fix double encoding error.  broken equality check now
 :(

---
 twisted/python/zippath.py | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 5ed0905..0b0ac82 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -101,7 +101,11 @@ class ZipPath(AbstractFilePath):
             it) as this means it may include special names with special
             meaning outside of the context of a zip archive.
         """
-        encodedPath = path.encode(ENCODING)
+        try:
+            encodedPath = path.encode(ENCODING)
+        except AttributeError:
+            encodedPath = path
+
         return ZipPath(self.archive,
                        ZIP_PATH_SEP.join([self.pathInArchive, encodedPath]))
 
-- 
1.7.12.4 (Apple Git-37)


From 46464c3771c8d1d0f8fed334a5dc0fec0a9af941 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 23:42:35 -0400
Subject: [PATCH 14/20] convert cmp method to eq. python3 doesn't support cmp

---
 twisted/python/filepath.py | 4 ++--
 twisted/python/zippath.py  | 6 +++---
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/twisted/python/filepath.py b/twisted/python/filepath.py
index d3f8b8a..4fd3d62 100644
--- a/twisted/python/filepath.py
+++ b/twisted/python/filepath.py
@@ -1346,10 +1346,10 @@ class FilePath(AbstractFilePath):
         os.rename(sib.path, self.path)
 
 
-    def __cmp__(self, other):
+    def __eq__(self, other):
         if not isinstance(other, FilePath):
             return NotImplemented
-        return cmp(self.path, other.path)
+        return self.path == other.path
 
 
     def createDirectory(self):
diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 0b0ac82..e3f11de 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -68,11 +68,11 @@ class ZipPath(AbstractFilePath):
         self.path = os.path.join(archive.zipfile.filename.encode(),
                                  *(self.pathInArchive.split(ZIP_PATH_SEP)))
 
-    def __cmp__(self, other):
+    def __eq__(self, other):
         if not isinstance(other, ZipPath):
             return NotImplemented
-        return cmp((self.archive, self.pathInArchive),
-                   (other.archive, other.pathInArchive))
+        return ("{0}, {1}".format(self.archive, self.pathInArchive) ==
+                "{0}, {1}".format(other.archive, other.pathInArchive))
 
 
     def __repr__(self):
-- 
1.7.12.4 (Apple Git-37)


From 2e1ef6507f8db531f03427983fc2dc5706d290d9 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Thu, 17 Apr 2014 23:54:48 -0400
Subject: [PATCH 15/20] add hash function to fix test_dictionaryKeyWithString

---
 twisted/python/zippath.py | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index e3f11de..017e382 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -75,6 +75,14 @@ class ZipPath(AbstractFilePath):
                 "{0}, {1}".format(other.archive, other.pathInArchive))
 
 
+    def __hash__(self):
+        """
+        Hash the same as another L{ZipPath}. Similar to L{FilePath},
+        but with added path in the archive.
+        """
+        return hash((self.__class__, self.path, self.pathInArchive))
+
+
     def __repr__(self):
         parts = [os.path.abspath(self.archive.path)]
         parts.extend(self.pathInArchive.split(ZIP_PATH_SEP))
-- 
1.7.12.4 (Apple Git-37)


From d7c8439ae92aff7c356c60d15714f4cb9f636318 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Sat, 19 Apr 2014 11:18:08 -0400
Subject: [PATCH 16/20] fix __cmp__ missing stuff and __hash__ wasn't getting
 inherited

---
 twisted/python/filepath.py | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/twisted/python/filepath.py b/twisted/python/filepath.py
index 4fd3d62..867764d 100644
--- a/twisted/python/filepath.py
+++ b/twisted/python/filepath.py
@@ -1352,6 +1352,16 @@ class FilePath(AbstractFilePath):
         return self.path == other.path
 
 
+    def __cmp__(self, other):
+        if not isinstance(other, FilePath):
+            return NotImplemented
+        return cmp(self.path, other.path)
+
+
+    def __hash__(self):
+        return hash((self.__class__, self.path))
+
+
     def createDirectory(self):
         """
         Create the directory the L{FilePath} refers to.
-- 
1.7.12.4 (Apple Git-37)


From bd94340df903ba8a4f9c5c48705bdf6000b96de3 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Sat, 26 Apr 2014 13:37:14 -0500
Subject: [PATCH 17/20] fix error with getting file info from archive. was
 hashed against 'str', not 'bytes'

---
 twisted/python/zippath.py | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 017e382..d58bcec 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -181,7 +181,8 @@ class ZipPath(AbstractFilePath):
         @return: file size, in bytes
         """
 
-        return self.archive.zipfile.NameToInfo[self.pathInArchive].file_size
+        pathInArchive = self.pathInArchive.decode("utf-8")
+        return self.archive.zipfile.NameToInfo[pathInArchive].file_size
 
     def getAccessTime(self):
         """
@@ -200,8 +201,9 @@ class ZipPath(AbstractFilePath):
 
         @return: a number of seconds since the epoch.
         """
+        pathInArchive = self.pathInArchive.decode("utf-8")
         return time.mktime(
-            self.archive.zipfile.NameToInfo[self.pathInArchive].date_time
+            self.archive.zipfile.NameToInfo[pathInArchive].date_time
             + (0, 0, 0))
 
 
-- 
1.7.12.4 (Apple Git-37)


From 8580f7ed0b5e18695feceb380ab36e2d221d2ea7 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Sat, 26 Apr 2014 13:43:17 -0500
Subject: [PATCH 18/20] fix 'validFiles' test, python3 zipfile doesn't look at
 bytestrings. fixed encoding consistency

---
 twisted/python/zippath.py | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index d58bcec..5bb1227 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -130,7 +130,7 @@ class ZipPath(AbstractFilePath):
         return self.pathInArchive in self.archive.childmap
 
     def isfile(self):
-        return self.pathInArchive in self.archive.zipfile.NameToInfo
+        return self.pathInArchive.decode(ENCODING) in self.archive.zipfile.NameToInfo
 
     def islink(self):
         return False
@@ -138,7 +138,7 @@ class ZipPath(AbstractFilePath):
     def listdir(self):
         if self.exists():
             if self.isdir():
-                return self.archive.childmap[self.pathInArchive].keys()
+                return self.archive.childmap[self.pathInArchive.decode(ENCODING)].keys()
             else:
                 raise OSError(errno.ENOTDIR, "Leaf zip entry listed")
         else:
@@ -165,11 +165,11 @@ class ZipPath(AbstractFilePath):
 
     def open(self, mode="r"):
         if _USE_ZIPFILE:
-            return self.archive.zipfile.open(self.pathInArchive, mode=mode)
+            return self.archive.zipfile.open(self.pathInArchive.decode(ENCODING), mode=mode)
         else:
             # XXX oh man, is this too much hax?
             self.archive.zipfile.mode = mode
-            return self.archive.zipfile.readfile(self.pathInArchive)
+            return self.archive.zipfile.readfile(self.pathInArchive.decode(ENCODING))
 
     def changed(self):
         pass
@@ -181,7 +181,7 @@ class ZipPath(AbstractFilePath):
         @return: file size, in bytes
         """
 
-        pathInArchive = self.pathInArchive.decode("utf-8")
+        pathInArchive = self.pathInArchive.decode(ENCODING)
         return self.archive.zipfile.NameToInfo[pathInArchive].file_size
 
     def getAccessTime(self):
@@ -201,7 +201,7 @@ class ZipPath(AbstractFilePath):
 
         @return: a number of seconds since the epoch.
         """
-        pathInArchive = self.pathInArchive.decode("utf-8")
+        pathInArchive = self.pathInArchive.decode(ENCODING)
         return time.mktime(
             self.archive.zipfile.NameToInfo[pathInArchive].date_time
             + (0, 0, 0))
@@ -238,7 +238,7 @@ class ZipArchive(ZipPath):
         else:
             self.zipfile = ChunkingZipFile(archivePathname)
         try:
-            self.path = archivePathname.encode("utf-8")
+            self.path = archivePathname.encode(ENCODING)
         except AttributeError:
             self.path = archivePathname
 
-- 
1.7.12.4 (Apple Git-37)


From f3eb4dfb41ea74f905565ae61b75feb71669ac3d Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Sun, 27 Apr 2014 01:18:58 -0500
Subject: [PATCH 19/20] fix last tests -- keep internal modeling with bytes,
 otherwise switch to str with stdlib zipfile

---
 twisted/python/zippath.py | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 5bb1227..1c89c5e 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -130,7 +130,7 @@ class ZipPath(AbstractFilePath):
         return self.pathInArchive in self.archive.childmap
 
     def isfile(self):
-        return self.pathInArchive.decode(ENCODING) in self.archive.zipfile.NameToInfo
+        return self.pathInArchive in self.archive.zipfile.NameToInfo
 
     def islink(self):
         return False
@@ -138,7 +138,9 @@ class ZipPath(AbstractFilePath):
     def listdir(self):
         if self.exists():
             if self.isdir():
-                return self.archive.childmap[self.pathInArchive.decode(ENCODING)].keys()
+                # py3 changes the return type of dict().keys(),
+                # so a manual conversion is needed to reflect FilePath.listdir()
+                return list(self.archive.childmap[self.pathInArchive])
             else:
                 raise OSError(errno.ENOTDIR, "Leaf zip entry listed")
         else:
@@ -252,6 +254,9 @@ class ZipArchive(ZipPath):
             for x in range(len(name)):
                 child = name[-x]
                 parent = ZIP_PATH_SEP.decode().join(name[:-x])
+                # convert back to bytes to reflect correct file path api
+                parent = parent.encode(ENCODING)
+                child = child.encode(ENCODING)
                 if parent not in self.childmap:
                     self.childmap[parent] = {}
                 self.childmap[parent][child] = 1
-- 
1.7.12.4 (Apple Git-37)


From 625a9b24635f76034e8f5cdc0f0ab42528d45e35 Mon Sep 17 00:00:00 2001
From: Conrad Dean <conrad.p.dean@gmail.com>
Date: Sun, 27 Apr 2014 10:45:34 -0500
Subject: [PATCH 20/20] fix twistedchecker errors

---
 twisted/python/test/test_zippath.py |  7 ++++++-
 twisted/python/zippath.py           | 22 +++++++++++++---------
 2 files changed, 19 insertions(+), 10 deletions(-)

diff --git a/twisted/python/test/test_zippath.py b/twisted/python/test/test_zippath.py
index e1e4a50..f531629 100644
--- a/twisted/python/test/test_zippath.py
+++ b/twisted/python/test/test_zippath.py
@@ -105,7 +105,12 @@ class ZipFilePathTestCase(AbstractFilePathTestCase):
         self.assertEqual(repr(self.path), pathRepr)
 
         # Create a path to the file rooted in the current working directory
-        relativeCommon = self.cmn.replace(os.getcwd().encode(encoding) + os.sep.encode(encoding), b"", 1) + b".zip"
+        relativeCommon = self.cmn.replace(
+            os.getcwd().encode(encoding) + os.sep.encode(encoding),
+            b"",
+            1
+        )
+        relativeCommon = relativeCommon + b".zip"
         relpath = ZipArchive(relativeCommon)
 
         # Check using a path without the cwd prepended
diff --git a/twisted/python/zippath.py b/twisted/python/zippath.py
index 1c89c5e..43f92a6 100644
--- a/twisted/python/zippath.py
+++ b/twisted/python/zippath.py
@@ -30,7 +30,7 @@ from twisted.python.filepath import IFilePath, FilePath, AbstractFilePath
 
 from zope.interface import implementer
 
-# using FilePath here exclusively rather than os to make sure that we don't do
+# Using FilePath here exclusively rather than os to make sure that we don't do
 # anything OS-path-specific here.
 
 ZIP_PATH_SEP = b'/'             # In zipfiles, "/" is universally used as the
@@ -57,7 +57,7 @@ class ZipPath(AbstractFilePath):
         """
         self.archive = archive
 
-        # keep pathInArchive as bytes
+        # Keep pathInArchive as bytes
         if isinstance(pathInArchive, bytes):
             self.pathInArchive = pathInArchive
         else:
@@ -138,8 +138,7 @@ class ZipPath(AbstractFilePath):
     def listdir(self):
         if self.exists():
             if self.isdir():
-                # py3 changes the return type of dict().keys(),
-                # so a manual conversion is needed to reflect FilePath.listdir()
+                # py3's dict().keys() is no longer a list
                 return list(self.archive.childmap[self.pathInArchive])
             else:
                 raise OSError(errno.ENOTDIR, "Leaf zip entry listed")
@@ -160,18 +159,22 @@ class ZipPath(AbstractFilePath):
     def basename(self):
         return self.pathInArchive.split(ZIP_PATH_SEP)[-1]
 
+
     def dirname(self):
         # XXX NOTE: This API isn't a very good idea on filepath, but it's even
         # less meaningful here.
         return self.parent().path
 
+
     def open(self, mode="r"):
         if _USE_ZIPFILE:
-            return self.archive.zipfile.open(self.pathInArchive.decode(ENCODING), mode=mode)
+            return self.archive.zipfile.open(
+                self.pathInArchive.decode(ENCODING), mode=mode)
         else:
             # XXX oh man, is this too much hax?
             self.archive.zipfile.mode = mode
-            return self.archive.zipfile.readfile(self.pathInArchive.decode(ENCODING))
+            return self.archive.zipfile.readfile(
+                self.pathInArchive.decode(ENCODING))
 
     def changed(self):
         pass
@@ -221,12 +224,13 @@ class ZipPath(AbstractFilePath):
 
 
 class ZipArchive(ZipPath):
-    """ I am a FilePath-like object which can wrap a zip archive as if it were a
-    directory.
+    """ I am a FilePath-like object which can wrap a zip archive as if it were
+    a directory.
     """
     archive = property(lambda self: self)
     def __init__(self, archivePathname):
-        """Create a ZipArchive, treating the archive at archivePathname as a zip file.
+        """Create a ZipArchive, treating the archive at archivePathname as a
+        zip file.
 
         @param archivePathname: a str, naming a path in the filesystem.
         """
-- 
1.7.12.4 (Apple Git-37)

