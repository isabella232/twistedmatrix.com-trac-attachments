diff --git twisted/spread/jelly.py twisted/spread/jelly.py
index 9bdbcfc..bb4810c 100644
--- twisted/spread/jelly.py
+++ twisted/spread/jelly.py
@@ -152,7 +152,10 @@ def _newInstance(cls, state=_NO_STATE):
         inst = cls.__new__(cls)
 
         if state is not _NO_STATE:
-            inst.__dict__.update(state) # Copy 'instance' behaviour
+            for k,v in inst.__dict__.iteritems():
+                if k not in state:
+                    state[k] = v
+            inst.__dict__ = state
     else:
         if state is not _NO_STATE:
             inst = InstanceType(cls, state)
@@ -894,7 +897,7 @@ class _Unjellier:
         im_name = rest[0]
         im_self = self.unjelly(rest[1])
         im_class = self.unjelly(rest[2])
-        if type(im_class) is not types.ClassType:
+        if type(im_class) is not types.ClassType and not hasattr(im_class, '__new__'):
             raise InsecureJelly("Method found with non-class class.")
         if im_name in im_class.__dict__:
             if im_self is None:
diff --git twisted/test/test_jelly.py twisted/test/test_jelly.py
index 33e9185..b918a66 100644
--- twisted/test/test_jelly.py
+++ twisted/test/test_jelly.py
@@ -72,6 +72,27 @@ class C:
         """
 
 
+class Anew(object):
+    """
+    Dummy new style class.
+    """
+
+    def amethod(self):
+        """
+        Method to be used in circular referencing tests.
+        """
+
+
+class Bnew(object):
+    """
+    Dummy new style class.
+    """
+
+    def bmethod(self):
+        """
+        Method to be used in circular referencing tests.
+        """
+
 
 class D(object):
     """
@@ -140,7 +161,7 @@ class JellyTestCase(unittest.TestCase):
         self.assertRaises(jelly.InsecureJelly, jelly.unjelly, c, taster)
 
 
-    def test_methodSelfIdentity(self):
+    def test_methodSelfIdentityOldStyle(self):
         a = A()
         b = B()
         a.bmethod = b.bmethod
@@ -149,6 +170,15 @@ class JellyTestCase(unittest.TestCase):
         self.assertEqual(im_.im_class, im_.im_self.__class__)
 
 
+    def test_methodSelfIdentityNewStyle(self):
+        a = Anew()
+        b = Bnew()
+        a.bmethod = b.bmethod
+        b.a = a
+        im_ = jelly.unjelly(jelly.jelly(b)).a.bmethod
+        self.assertEqual(im_.im_class, im_.im_self.__class__)
+
+
     def test_methodsNotSelfIdentity(self):
         """
         If a class change after an instance has been created, L{jelly.unjelly}
@@ -586,13 +616,65 @@ class ClassB(pb.Copyable, pb.RemoteCopy):
         self.ref = ref
 
 
-
 class CircularReferenceTestCase(unittest.TestCase):
     """
     Tests for circular references handling in the jelly/unjelly process.
     """
 
+    def test_dictCircle(self):
+        """Check if all references are correctly resolved when unjellying.
+        See Ticket 4935."""
+        a = {}
+        a['bar'] = {}
+        a['bar']['foo'] = a
+        a1 = jelly.unjelly(jelly.jelly(a))
+        self.assertEqual(a1['bar']['foo'], a1,
+            "circular reference between two dict not resolved")
+
+    def test_objectCircle(self):
+        """Check if all references are correctly resolved when unjellying.
+        See Ticket 4935."""
+        a = Anew()
+        b = Bnew()
+        a.b = b
+        a.b.a = a
+        a1 = jelly.unjelly(jelly.jelly(a))
+        self.assertIdentical(a1.b.a, a1,
+            "Circular reference between two new style objects not resolved")
+
+    def test_objectDictCircle(self):
+        """Check if all references are correctly resolved when unjellying.
+        See Ticket 4935."""
+        a = Anew()
+        a.dict = dict()
+        a.dict['abc'] = a
+        a1 = jelly.unjelly(jelly.jelly(a))
+        self.assertIdentical(a1.dict['abc'], a1,
+            "Circular reference between dict and object not resolved")
+
+    def test_dictObjectCircle(self):
+        """Check if all references are correctly resolved when unjellying.
+        See Ticket 4935."""
+        a = dict()
+        a['abc'] = Anew()
+        a['abc'].dict = a
+        a1 = jelly.unjelly(jelly.jelly(a))
+        self.assertIdentical(a1['abc'].dict, a1,
+            "Circular reference between dict and object not resolved")
+
+    def test_oldClassCircle(self):
+        """Check if all references are correctly resolved when unjellying.
+        See Ticket 4935."""
+        a = A()
+        a.b = B()
+        a.b.a = a
+        a1 = jelly.unjelly(jelly.jelly(a))
+        self.assertIdentical(a1.b.a, a1,
+            "Circular reference between two old style objects not resolved")
+
     def test_simpleCircle(self):
+        """Check if all references are correctly resolved when unjellying.
+        See Ticket 4935."""
         jelly.setUnjellyableForClass(ClassA, ClassA)
         jelly.setUnjellyableForClass(ClassB, ClassB)
         a = jelly.unjelly(jelly.jelly(ClassA()))
