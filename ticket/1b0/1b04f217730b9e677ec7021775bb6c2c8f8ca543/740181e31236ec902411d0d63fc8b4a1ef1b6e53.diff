? name_conflict_fix.diff
? twisted/internet/.defer.py.swp
Index: twisted/internet/base.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/base.py,v
retrieving revision 1.65
diff -u -r1.65 base.py
--- twisted/internet/base.py	15 Oct 2003 20:34:17 -0000	1.65
+++ twisted/internet/base.py	18 Oct 2003 03:11:53 -0000
@@ -325,18 +325,20 @@
                 except:
                     log.deferr()
 
-    def addSystemEventTrigger(self, phase, eventType, f, *args, **kw):
+## using _phase _eventType _f to avoid kwargs conflicts with user specified named
+## parameters 
+    def addSystemEventTrigger(self, _phase, _eventType, _f, *args, **kw):
         """See twisted.internet.interfaces.IReactorCore.addSystemEventTrigger.
         """
-        assert callable(f), "%s is not callable" % f
-        if self._eventTriggers.has_key(eventType):
-            triglist = self._eventTriggers[eventType]
+        assert callable(_f), "%s is not callable" % _f
+        if self._eventTriggers.has_key(_eventType):
+            triglist = self._eventTriggers[_eventType]
         else:
             triglist = [[], [], []]
-            self._eventTriggers[eventType] = triglist
-        evtList = triglist[{"before": 0, "during": 1, "after": 2}[phase]]
-        evtList.append((f, args, kw))
-        return (phase, eventType, (f, args, kw))
+            self._eventTriggers[_eventType] = triglist
+        evtList = triglist[{"before": 0, "during": 1, "after": 2}[_phase]]
+        evtList.append((_f, args, kw))
+        return (_phase, _eventType, (_f, args, kw))
 
     def removeSystemEventTrigger(self, triggerID):
         """See twisted.internet.interfaces.IReactorCore.removeSystemEventTrigger.
@@ -347,23 +349,28 @@
                                         "after":  2}[phase]
                                        ].remove(item)
 
-    def callWhenRunning(self, callable, *args, **kw):
+## using _callable to avoid kwargs conflicts with user specified named
+## parameters 
+    def callWhenRunning(self, _callable, *args, **kw):
         """See twisted.internet.interfaces.IReactorCore.callWhenRunning.
         """
         if self.running:
-            callable(*args, **kw)
+            _callable(*args, **kw)
         else:
             return self.addSystemEventTrigger('after', 'startup',
-                                              callable, *args, **kw)
+                                              _callable, *args, **kw)
 
     # IReactorTime
 
-    def callLater(self, seconds, f, *args, **kw):
+
+## using _seconds and _f to avoid kwargs conflicts with user specified named
+## parameters 
+    def callLater(self, _seconds, _f, *args, **kw):
         """See twisted.internet.interfaces.IReactorTime.callLater.
         """
-        assert callable(f), "%s is not callable" % f
-        assert seconds >= 0, "%s is not greater than or equal to 0 seconds" % (seconds,)
-        tple = DelayedCall(time() + seconds, f, args, kw, self._pendingTimedCalls.remove, self._resetCallLater)
+        assert callable(_f), "%s is not callable" % _f
+        assert _seconds >= 0, "%s is not greater than or equal to 0 _seconds" % (_seconds,)
+        tple = DelayedCall(time() + _seconds, _f, args, kw, self._pendingTimedCalls.remove, self._resetCallLater)
         insort(self._pendingTimedCalls, tple)
         return tple
 
@@ -433,12 +440,14 @@
         self.threadpool.start()
         self.addSystemEventTrigger('during', 'shutdown', self.threadpool.stop)
 
-    def callInThread(self, callable, *args, **kwargs):
+## using _callable to avoid kwargs conflicts with user specified named
+## parameters 
+    def callInThread(self, _callable, *args, **kwargs):
         """See twisted.internet.interfaces.IReactorThreads.callInThread.
         """
         if not self.threadpool:
             self._initThreadPool()
-        self.threadpool.callInThread(callable, *args, **kwargs)
+        self.threadpool.callInThread(_callable, *args, **kwargs)
 
     def suggestThreadPoolSize(self, size):
         """See twisted.internet.interfaces.IReactorThreads.suggestThreadPoolSize.
Index: twisted/internet/defer.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/defer.py,v
retrieving revision 1.49
diff -u -r1.49 defer.py
--- twisted/internet/defer.py	15 Oct 2003 20:19:49 -0000	1.49
+++ twisted/internet/defer.py	18 Oct 2003 03:11:53 -0000
@@ -178,12 +178,15 @@
             self._runCallbacks()
         return self
 
-    def addCallback(self, callback, *args, **kw):
+
+## using _callback to avoid kwargs conflicts with user specified named
+## parameters 
+    def addCallback(self, _callback, *args, **kw):
         """Convenience method for adding just a callback.
 
         See L{addCallbacks}.
         """
-        return self.addCallbacks(callback, callbackArgs=args,
+        return self.addCallbacks(_callback, callbackArgs=args,
                                  callbackKeywords=kw)
 
     def addErrback(self, errback, *args, **kw):
Index: twisted/internet/threads.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/threads.py,v
retrieving revision 1.9
diff -u -r1.9 threads.py
--- twisted/internet/threads.py	24 Jul 2003 01:14:04 -0000	1.9
+++ twisted/internet/threads.py	18 Oct 2003 03:11:55 -0000
@@ -30,16 +30,18 @@
 from twisted.internet import defer
 
 
-def _putResultInDeferred(deferred, f, args, kwargs):
+## using _f to avoid kwargs conflicts with user specified named
+## parameters -- suggested by warner, added by slyphon
+def _putResultInDeferred(deferred, _f, args, kwargs):
     """Run a function and give results to a Deferred."""
     from twisted.internet import reactor
     try:
-        result = f(*args, **kwargs)
+        result = _f(*args, **kwargs)
     except:
-        f = failure.Failure()
-        reactor.callFromThread(deferred.errback, f)
+        _f = failure.Failure()
+        reactor.callFromThread(deferred.errback, _f)
     else:
-        reactor.callFromThread(deferred.callback, result)
+        reactor.callFromThread(deferred.callback, _result)
 
 def deferToThread(f, *args, **kwargs):
     """Run function in thread and return result as Deferred."""
