Index: distrib.py
===================================================================
--- distrib.py	(revision 10486)
+++ distrib.py	(working copy)
@@ -32,6 +32,7 @@
 from twisted.python import log
 from twisted.persisted import styles
 from twisted.web.woven import page
+from twisted.python import reflect
 
 # Sibling Imports
 import resource
@@ -54,10 +55,25 @@
     def remote_stopProducing(self):
         self.producer.stopProducing()
 
+_allowedAddressTypes = {
+    'twisted.internet.address.IPv4Address': True,
+    'twisted.internet.address.UNIXAddress': True}
 
+class _Dummy(object):
+    pass
+
 class Request(pb.RemoteCopy, server.Request):
     def setCopyableState(self, state):
+        for k in 'host', 'client':
+            addrType, addrArgs = state[k]
+            if addrType not in _allowedAddressTypes:
+                raise ValueError("Illegal Address Type", addrType)
+            o = _Dummy()
+            o.__class__ = reflect.namedAny(addrType)
+            vars(o).update(addrArgs)
+            state[k] = o
         pb.RemoteCopy.setCopyableState(self, state)
+
         # Emulate the local request interface --
         self.content = cStringIO.StringIO(self.content_data)
         self.write            = self.remote.remoteMethod('write')
@@ -67,7 +83,7 @@
         self.setETag          = self.remote.remoteMethod('setETag')
         self.setResponseCode  = self.remote.remoteMethod('setResponseCode')
         self.setLastModified  = self.remote.remoteMethod('setLastModified')
-
+        
     def registerProducer(self, producer, streaming):
         self.remote.callRemote("registerProducer",
                                _ReferenceableProducerWrapper(producer),
Index: server.py
===================================================================
--- server.py	(revision 10486)
+++ server.py	(working copy)
@@ -117,6 +117,12 @@
         self.content.seek(0, 0)
         x['content_data'] = self.content.read()
         x['remote'] = pb.ViewPoint(issuer, self)
+        
+        # IPv4Addresses (and others) are not jellyable
+        host = x['host']
+        x['host'] = reflect.qual(host.__class__), vars(host)
+        client = x['client']
+        x['client'] = reflect.qual(client.__class__), vars(client)
         return x
 
     # HTML generation helpers
