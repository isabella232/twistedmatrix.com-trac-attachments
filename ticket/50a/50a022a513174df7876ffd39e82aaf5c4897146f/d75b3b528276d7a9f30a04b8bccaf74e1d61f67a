Index: twisted/web/test/test_xmlrpc.py
===================================================================
--- twisted/web/test/test_xmlrpc.py	(revision 28673)
+++ twisted/web/test/test_xmlrpc.py	(working copy)
@@ -13,7 +13,7 @@
 from twisted.web.xmlrpc import XMLRPC, addIntrospection, _QueryFactory
 from twisted.web import server, static, client, error, http
 from twisted.internet import reactor, defer
-from twisted.internet.error import ConnectionDone
+from twisted.internet.error import ConnectionDone, UserError
 from twisted.python import failure
 
 
@@ -194,6 +194,16 @@
         d.addCallback(cb)
         return d
 
+    def test_cancel(self):
+        """
+        Test that a deferred from the Proxy can be cancelled,
+        closing the connection.
+        """
+        d = self.proxy().callRemote('add', (2, 3))
+        d.cancel()
+        d = self.assertFailure(d, UserError)
+        return d
+
     def test_errorGet(self):
         """
         A classic GET on the xml server should return a NOT_ALLOWED.
Index: twisted/web/xmlrpc.py
===================================================================
--- twisted/web/xmlrpc.py	(revision 28673)
+++ twisted/web/xmlrpc.py	(working copy)
@@ -303,12 +303,12 @@
     protocol = QueryProtocol
 
     def __init__(self, path, host, method, user=None, password=None,
-                 allowNone=False, args=()):
+                 allowNone=False, args=(), canceller=None):
         self.path, self.host = path, host
         self.user, self.password = user, password
         self.payload = payloadTemplate % (method,
             xmlrpclib.dumps(args, allow_none=allowNone))
-        self.deferred = defer.Deferred()
+        self.deferred = defer.Deferred(canceller)
 
     def parseResponse(self, contents):
         if not self.deferred:
@@ -409,15 +409,17 @@
             be L{Fault}, but you can also have an C{IndexError} on some buggy
             servers giving empty responses.
         """
+        def cancel(d):
+            connector.disconnect()
         factory = self.queryFactory(
             self.path, self.host, method, self.user,
-            self.password, self.allowNone, args)
+            self.password, self.allowNone, args, cancel)
         if self.secure:
             from twisted.internet import ssl
-            reactor.connectSSL(self.host, self.port or 443,
-                               factory, ssl.ClientContextFactory())
+            connector = reactor.connectSSL(self.host, self.port or 443,
+                                           factory, ssl.ClientContextFactory())
         else:
-            reactor.connectTCP(self.host, self.port or 80, factory)
+            connector = reactor.connectTCP(self.host, self.port or 80, factory)
         return factory.deferred
 
 
