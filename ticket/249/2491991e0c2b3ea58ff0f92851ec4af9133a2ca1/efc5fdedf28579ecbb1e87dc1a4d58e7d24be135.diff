Index: TwistedWords-0.5.0/twisted/words/test/test_xpath.py
===================================================================
--- TwistedWords-0.5.0/twisted/words/test/test_xpath.py	(revision 5192)
+++ TwistedWords-0.5.0/twisted/words/test/test_xpath.py	(revision 5206)
@@ -26,6 +26,15 @@
         #          <gar>ABC</gar>
         #        </bar>
         #     <bar/>
+	#     <bar attrib4='value4' attrib5='value5'>
+	#        <foo/>
+	#        <gar>JKL</gar>
+	#     </bar>
+        #     <bar attrib4='value4' attrib5='value4'>
+	#        <foo/>
+	#        <gar>MNO</gar>
+	#     </bar>
+	#     <bar attrib4='value4' attrib5='value6'/>
         # </foo>
         self.e = Element(("testns", "foo"))
         self.e["attrib1"] = "value1"
@@ -43,13 +52,28 @@
         self.gar2 = self.bar3.addElement("gar")
         self.gar2.addContent("ABC")
         self.bar4 = self.e.addElement("bar")
+	self.bar5 = self.e.addElement("bar")
+	self.bar5["attrib4"] = "value4"
+	self.bar5["attrib5"] = "value5"
+	self.subfoo3 = self.bar5.addElement("foo")
+	self.gar3 = self.bar5.addElement("gar")
+	self.gar3.addContent("JKL")
+	self.bar6 = self.e.addElement("bar")
+	self.bar6["attrib4"] = "value4"
+	self.bar6["attrib5"] = "value4"
+	self.subfoo4 = self.bar6.addElement("foo")
+	self.gar4 = self.bar6.addElement("gar")
+	self.gar4.addContent("MNO")
+	self.bar7 = self.e.addElement("bar")
+	self.bar7["attrib4"] = "value4"
+	self.bar7["attrib5"] = "value6"
 
     
     def testStaticMethods(self):
         self.assertEquals(xpath.matches("/foo/bar", self.e),
                           True)
         self.assertEquals(xpath.queryForNodes("/foo/bar", self.e),
-                          [self.bar1, self.bar2, self.bar4])
+                          [self.bar1, self.bar2, self.bar4, self.bar5, self.bar6, self.bar7])
         self.assertEquals(xpath.queryForString("/foo", self.e),
                           "somecontent")
         self.assertEquals(xpath.queryForStringList("/foo", self.e),
@@ -61,14 +85,14 @@
 
         xp = XPathQuery("/foo/bar/foo")
         self.assertEquals(xp.matches(self.e), 1)
-        self.assertEquals(xp.queryForNodes(self.e), [self.subfoo])
+        self.assertEquals(xp.queryForNodes(self.e), [self.subfoo, self.subfoo3, self.subfoo4])
         
         xp = XPathQuery("/foo/bar3")
         self.assertEquals(xp.matches(self.e), 0)
 
         xp = XPathQuery("/foo/*")
         self.assertEquals(xp.matches(self.e), True)
-        self.assertEquals(xp.queryForNodes(self.e), [self.bar1, self.bar2, self.bar4])
+        self.assertEquals(xp.queryForNodes(self.e), [self.bar1, self.bar2, self.bar4, self.bar5, self.bar6, self.bar7])
 
         xp = XPathQuery("/foo[@attrib1]")
         self.assertEquals(xp.matches(self.e), True)
@@ -96,7 +120,7 @@
         self.assertEquals(xp.queryForStringList(self.e), ["somecontent", "somemorecontent"])
 
         xp = XPathQuery("/foo/bar")
-        self.assertEquals(xp.queryForNodes(self.e), [self.bar1, self.bar2, self.bar4])
+        self.assertEquals(xp.queryForNodes(self.e), [self.bar1, self.bar2, self.bar4, self.bar5, self.bar6, self.bar7])
 
         xp = XPathQuery("/foo[text() = 'somecontent']")
         self.assertEquals(xp.matches(self.e), True)
@@ -106,12 +130,25 @@
 
         xp = XPathQuery("//gar")
         self.assertEquals(xp.matches(self.e), True)
-        self.assertEquals(xp.queryForNodes(self.e), [self.gar1, self.gar2])
-        self.assertEquals(xp.queryForStringList(self.e), ["DEF", "ABC"])
+        self.assertEquals(xp.queryForNodes(self.e), [self.gar1, self.gar2, self.gar3, self.gar4])
+        self.assertEquals(xp.queryForStringList(self.e), ["DEF", "ABC", "JKL", "MNO"])
 
         xp = XPathQuery("//bar")
         self.assertEquals(xp.matches(self.e), True)
-        self.assertEquals(xp.queryForNodes(self.e), [self.bar1, self.bar2, self.bar3, self.bar4])
+        self.assertEquals(xp.queryForNodes(self.e), [self.bar1, self.bar2, self.bar3, self.bar4, self.bar5, self.bar6, self.bar7])
 
+	xp = XPathQuery("//bar[@attrib4='value4' and @attrib5='value5']")
+	self.assertEquals(xp.matches(self.e), True)
+	self.assertEquals(xp.queryForNodes(self.e), [self.bar5])
 
+	xp = XPathQuery("//bar[@attrib5='value4' or @attrib5='value5']")
+	self.assertEquals(xp.matches(self.e), True)
+	self.assertEquals(xp.queryForNodes(self.e), [self.bar5, self.bar6])
 
+	xp = XPathQuery("//bar[@attrib4='value4' and (@attrib5='value4' or @attrib5='value6')]")
+	self.assertEquals(xp.matches(self.e), True)
+	self.assertEquals(xp.queryForNodes(self.e), [self.bar6, self.bar7])
+
+	xp = XPathQuery("//bar[@attrib5='value4' or @attrib5='value5' or @attrib5='value6']")
+	self.assertEquals(xp.matches(self.e), True)
+	self.assertEquals(xp.queryForNodes(self.e), [self.bar5, self.bar6, self.bar7])
Index: TwistedWords-0.5.0/twisted/words/xish/xpathparser.g
===================================================================
--- TwistedWords-0.5.0/twisted/words/xish/xpathparser.g	(revision 5192)
+++ TwistedWords-0.5.0/twisted/words/xish/xpathparser.g	(revision 5206)
@@ -1,5 +1,5 @@
-
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# -*- test-case-name: twisted.words.test -*-
+# Copyright (c) 2001-2007 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
@@ -55,17 +55,17 @@
     """
     
     def __init__(self, patterns, ignore, input):
-        """Initialize the scanner.
+        """ Initialize the scanner.
 
-        Parameters:
-          patterns : [(terminal, uncompiled regex), ...] or None
-          ignore : [terminal,...]
-          input : string
 
-        If patterns is None, we assume that the subclass has
-        defined self.patterns : [(terminal, compiled regex), ...].
+	@param patterns: [(terminal, uncompiled regex), ...] or C{None}
+	@param ignore: [terminal,...]
+	@param input: string
+
+        If patterns is C{None}, we assume that the subclass has
+        defined C{self.patterns} : [(terminal, compiled regex), ...].
         Note that the patterns parameter expects uncompiled regexes,
-        whereas the self.patterns field expects compiled regexes.
+        whereas the C{self.patterns} field expects compiled regexes.
         """
         self.tokens = [] # [(begin char pos, end char pos, token name, matched text), ...]
         self.restrictions = []
@@ -116,15 +116,15 @@
     def token(self, i, restrict=None):
         """Get the i'th token in the input.
 
-        If i is one past the end, then scan for another token.
+        If L{i} is one past the end, then scan for another token.
         
-        Args:
+	@param i: token index
 
-        restrict : [token, ...] or None; if restrict is None, then any
-        token is allowed.  You may call token(i) more than once.
-        However, the restrict set may never be larger than what was
-        passed in on the first call to token(i).
-        
+        @param restrict: [token, ...] or C{None}; if restrict is
+	       C{None}, then any token is allowed.  You may call
+	       token(i) more than once.  However, the restrict set may
+	       never be larger than what was passed in on the first
+	       call to token(i).
         """
         if i == len(self.tokens):
             self.scan(restrict)
@@ -222,12 +222,13 @@
     def __init__(self, parent, scanner, tokenpos, rule, args=()):
         """Create a new context.
 
-        Args:
-        parent: Context object or None
-        scanner: Scanner object
-        pos: integer (scanner token position)
-        rule: string (name of the rule)
-        args: tuple listing parameters to the rule
+        @param parent: Context object or C{None}
+        @param scanner: Scanner object
+        @param tokenpos: scanner token position
+	@type tokenpos: L{int}
+	@param rule: name of the rule
+        @type rule: L{str}
+        @param args: tuple listing parameters to the rule
 
         """
         self.parent = parent
@@ -309,7 +310,7 @@
 
 
 
-from twisted.words.xish.xpath import _Location, _AnyLocation, IndexValue, CompareValue, AttribValue, LiteralValue, Function
+from twisted.words.xish.xpath import _Location, _AnyLocation, IndexValue, CompareValue, BooleanValue, AttribValue, LiteralValue, Function
 
 %%
 parser XPathParser:
@@ -323,6 +324,8 @@
         token CMP_NE:       "\!\="
         token STR_DQ:       '"([^"]|(\\"))*?"'
         token STR_SQ:       "'([^']|(\\'))*?'"
+	token OP_AND:       "and"
+	token OP_OR:        "or"
         token END:          "$"
 
         rule XPATH:    PATH {{ result = PATH; current = result }}
@@ -337,13 +340,22 @@
         rule PREDICATE:  EXPR  {{ return EXPR }} | 
                          INDEX {{ return IndexValue(INDEX) }}
 
-        rule EXPR:       VALUE            {{ e = VALUE }}
-                           [ CMP VALUE  {{ e = CompareValue(e, CMP, VALUE) }} ]  
-                                          {{ return e }}
+        rule EXPR:       FACTOR {{ e = FACTOR }}
+	                   ( BOOLOP FACTOR {{ e = BooleanValue(e, BOOLOP, FACTOR) }} )*
+			     {{ return e }}
 
+	rule BOOLOP:     ( OP_AND {{ return OP_AND }} | OP_OR {{ return OP_OR }} )
+
+        rule FACTOR:    TERM {{ return TERM }}
+                           | "\(" EXPR "\)" {{ return EXPR }}
+
+	rule TERM:       VALUE            {{ t = VALUE }}
+                           [ CMP VALUE  {{ t = CompareValue(t, CMP, VALUE) }} ]  
+                                          {{ return t }}
+
         rule VALUE:      "@" IDENTIFIER   {{ return AttribValue(IDENTIFIER) }} | 
                          FUNCNAME         {{ f = Function(FUNCNAME); args = [] }}
-                           "\("[ VALUE      {{ args.append(VALUE) }} 
+                           "\(" [ VALUE      {{ args.append(VALUE) }} 
                              (
                                "," VALUE     {{ args.append(VALUE) }} 
                              )*   
Index: TwistedWords-0.5.0/twisted/words/xish/xpathparser.py
===================================================================
--- TwistedWords-0.5.0/twisted/words/xish/xpathparser.py	(revision 5192)
+++ TwistedWords-0.5.0/twisted/words/xish/xpathparser.py	(revision 5206)
@@ -1,5 +1,5 @@
 # -*- test-case-name: twisted.words.test -*-
-# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2007 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
@@ -9,6 +9,7 @@
 
 # HOWTO Generate me:
 # 1.) Grab a copy of yapps2: http://theory.stanford.edu/~amitp/Yapps/
+#     (available on debian by "apt-get install -t unstable yapps2")
 # 2.) Hack it to not add a "import yappsrt" in the output file
 # 3.) Generate the grammar as usual
 
@@ -56,14 +57,15 @@
     def __init__(self, patterns, ignore, input):
         """ Initialize the scanner.
 
-        @param patterns: [(terminal, uncompiled regex), ...] or C{None}
-        @param ignore: [terminal,...]
-        @param input: string
 
-        If patterns is C{None}, we assume that the subclass has defined
-        C{self.patterns} : [(terminal, compiled regex), ...]. Note that the
-        patterns parameter expects uncompiled regexes, whereas the
-        C{self.patterns} field expects compiled regexes.
+	@param patterns: [(terminal, uncompiled regex), ...] or C{None}
+	@param ignore: [terminal,...]
+	@param input: string
+
+        If patterns is C{None}, we assume that the subclass has
+        defined C{self.patterns} : [(terminal, compiled regex), ...].
+        Note that the patterns parameter expects uncompiled regexes,
+        whereas the C{self.patterns} field expects compiled regexes.
         """
         self.tokens = [] # [(begin char pos, end char pos, token name, matched text), ...]
         self.restrictions = []
@@ -114,15 +116,15 @@
     def token(self, i, restrict=None):
         """Get the i'th token in the input.
 
+        If L{i} is one past the end, then scan for another token.
+        
+	@param i: token index
 
-        If L{i} is one past the end, then scan for another token.
-       
-        @param i: token index
-        @param restrict: [token, ...] or C{None}; if restrict is C{None},
-                         then any token is allowed. You may call token(i) more
-                         than once.  However, the restrict set may never be
-                         larger than what was passed in on the first call to
-                         token(i).
+        @param restrict: [token, ...] or C{None}; if restrict is
+	       C{None}, then any token is allowed.  You may call
+	       token(i) more than once.  However, the restrict set may
+	       never be larger than what was passed in on the first
+	       call to token(i).
         """
         if i == len(self.tokens):
             self.scan(restrict)
@@ -223,8 +225,8 @@
         @param parent: Context object or C{None}
         @param scanner: Scanner object
         @param tokenpos: scanner token position
-        @type tokenpos: L{int}
-        @param rule: name of the rule
+	@type tokenpos: L{int}
+	@param rule: name of the rule
         @type rule: L{str}
         @param args: tuple listing parameters to the rule
 
@@ -308,18 +310,16 @@
 
 
 
-from twisted.words.xish.xpath import _Location, _AnyLocation, IndexValue, CompareValue, AttribValue, LiteralValue, Function
+from twisted.words.xish.xpath import _Location, _AnyLocation, IndexValue, CompareValue, BooleanValue, AttribValue, LiteralValue, Function
 
 
-# Begin -- grammar generated by Yapps
-import sys, re
 
 class XPathParserScanner(Scanner):
     patterns = [
+        ('","', re.compile(',')),
+        ('"@"', re.compile('@')),
         ('"\\)"', re.compile('\\)')),
-        ('","', re.compile(',')),
         ('"\\("', re.compile('\\(')),
-        ('"@"', re.compile('@')),
         ('"\\]"', re.compile('\\]')),
         ('"\\["', re.compile('\\[')),
         ('"//"', re.compile('//')),
@@ -334,113 +334,130 @@
         ('CMP_NE', re.compile('\\!\\=')),
         ('STR_DQ', re.compile('"([^"]|(\\"))*?"')),
         ('STR_SQ', re.compile("'([^']|(\\'))*?'")),
+        ('OP_AND', re.compile('and')),
+        ('OP_OR', re.compile('or')),
         ('END', re.compile('$')),
     ]
     def __init__(self, str):
         Scanner.__init__(self,None,['\\s+'],str)
 
 class XPathParser(Parser):
-    Context = Context
-    def XPATH(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'XPATH', [])
-        PATH = self.PATH(_context)
+    def XPATH(self):
+        PATH = self.PATH()
         result = PATH; current = result
         while self._peek('END', '"/"', '"//"') != 'END':
-            PATH = self.PATH(_context)
+            PATH = self.PATH()
             current.childLocation = PATH; current = current.childLocation
-        if self._peek() not in ['END', '"/"', '"//"']:
-            raise SyntaxError(charpos=self._scanner.get_prev_char_pos(), context=_context, msg='Need one of ' + ', '.join(['END', '"/"', '"//"']))
         END = self._scan('END')
         return  result
 
-    def PATH(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'PATH', [])
-        _token = self._peek('"/"', '"//"')
-        if _token == '"/"':
+    def PATH(self):
+        _token_ = self._peek('"/"', '"//"')
+        if _token_ == '"/"':
             self._scan('"/"')
             result = _Location()
-        else: # == '"//"'
+        else:# == '"//"'
             self._scan('"//"')
             result = _AnyLocation()
-        _token = self._peek('IDENTIFIER', 'WILDCARD')
-        if _token == 'IDENTIFIER':
+        _token_ = self._peek('IDENTIFIER', 'WILDCARD')
+        if _token_ == 'IDENTIFIER':
             IDENTIFIER = self._scan('IDENTIFIER')
             result.elementName = IDENTIFIER
-        else: # == 'WILDCARD'
+        else:# == 'WILDCARD'
             WILDCARD = self._scan('WILDCARD')
             result.elementName = None
         while self._peek('"\\["', 'END', '"/"', '"//"') == '"\\["':
             self._scan('"\\["')
-            PREDICATE = self.PREDICATE(_context)
+            PREDICATE = self.PREDICATE()
             result.predicates.append(PREDICATE)
             self._scan('"\\]"')
-        if self._peek() not in ['"\\["', 'END', '"/"', '"//"']:
-            raise SyntaxError(charpos=self._scanner.get_prev_char_pos(), context=_context, msg='Need one of ' + ', '.join(['"\\["', 'END', '"/"', '"//"']))
         return result
 
-    def PREDICATE(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'PREDICATE', [])
-        _token = self._peek('INDEX', '"@"', 'FUNCNAME', 'STR_DQ', 'STR_SQ')
-        if _token != 'INDEX':
-            EXPR = self.EXPR(_context)
+    def PREDICATE(self):
+        _token_ = self._peek('INDEX', '"\\("', '"@"', 'FUNCNAME', 'STR_DQ', 'STR_SQ')
+        if _token_ != 'INDEX':
+            EXPR = self.EXPR()
             return EXPR
-        else: # == 'INDEX'
+        else:# == 'INDEX'
             INDEX = self._scan('INDEX')
             return IndexValue(INDEX)
 
-    def EXPR(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'EXPR', [])
-        VALUE = self.VALUE(_context)
-        e = VALUE
-        if self._peek('CMP_EQ', 'CMP_NE', '"\\]"') != '"\\]"':
-            CMP = self.CMP(_context)
-            VALUE = self.VALUE(_context)
-            e = CompareValue(e, CMP, VALUE)
+    def EXPR(self):
+        FACTOR = self.FACTOR()
+        e = FACTOR
+        while self._peek('OP_AND', 'OP_OR', '"\\)"', '"\\]"') in ['OP_AND', 'OP_OR']:
+            BOOLOP = self.BOOLOP()
+            FACTOR = self.FACTOR()
+            e = BooleanValue(e, BOOLOP, FACTOR)
         return e
 
-    def VALUE(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'VALUE', [])
-        _token = self._peek('"@"', 'FUNCNAME', 'STR_DQ', 'STR_SQ')
-        if _token == '"@"':
+    def BOOLOP(self):
+        _token_ = self._peek('OP_AND', 'OP_OR')
+        if _token_ == 'OP_AND':
+            OP_AND = self._scan('OP_AND')
+            return OP_AND
+        else:# == 'OP_OR'
+            OP_OR = self._scan('OP_OR')
+            return OP_OR
+
+    def FACTOR(self):
+        _token_ = self._peek('"\\("', '"@"', 'FUNCNAME', 'STR_DQ', 'STR_SQ')
+        if _token_ != '"\\("':
+            TERM = self.TERM()
+            return TERM
+        else:# == '"\\("'
+            self._scan('"\\("')
+            EXPR = self.EXPR()
+            self._scan('"\\)"')
+            return EXPR
+
+    def TERM(self):
+        VALUE = self.VALUE()
+        t = VALUE
+        if self._peek('CMP_EQ', 'CMP_NE', 'OP_AND', 'OP_OR', '"\\)"', '"\\]"') in ['CMP_EQ', 'CMP_NE']:
+            CMP = self.CMP()
+            VALUE = self.VALUE()
+            t = CompareValue(t, CMP, VALUE)
+        return t
+
+    def VALUE(self):
+        _token_ = self._peek('"@"', 'FUNCNAME', 'STR_DQ', 'STR_SQ')
+        if _token_ == '"@"':
             self._scan('"@"')
             IDENTIFIER = self._scan('IDENTIFIER')
             return AttribValue(IDENTIFIER)
-        elif _token == 'FUNCNAME':
+        elif _token_ == 'FUNCNAME':
             FUNCNAME = self._scan('FUNCNAME')
             f = Function(FUNCNAME); args = []
             self._scan('"\\("')
-            if self._peek('"\\)"', '"@"', 'FUNCNAME', '","', 'STR_DQ', 'STR_SQ') not in ['"\\)"', '","']:
-                VALUE = self.VALUE(_context)
+            if self._peek('","', '"\\)"', '"@"', 'FUNCNAME', 'STR_DQ', 'STR_SQ') not in ['","', '"\\)"']:
+                VALUE = self.VALUE()
                 args.append(VALUE)
                 while self._peek('","', '"\\)"') == '","':
                     self._scan('","')
-                    VALUE = self.VALUE(_context)
+                    VALUE = self.VALUE()
                     args.append(VALUE)
-                if self._peek() not in ['","', '"\\)"']:
-                    raise SyntaxError(charpos=self._scanner.get_prev_char_pos(), context=_context, msg='Need one of ' + ', '.join(['","', '"\\)"']))
             self._scan('"\\)"')
             f.setParams(*args); return f
-        else: # in ['STR_DQ', 'STR_SQ']
-            STR = self.STR(_context)
+        else:# in ['STR_DQ', 'STR_SQ']
+            STR = self.STR()
             return LiteralValue(STR[1:len(STR)-1])
 
-    def CMP(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'CMP', [])
-        _token = self._peek('CMP_EQ', 'CMP_NE')
-        if _token == 'CMP_EQ':
+    def CMP(self):
+        _token_ = self._peek('CMP_EQ', 'CMP_NE')
+        if _token_ == 'CMP_EQ':
             CMP_EQ = self._scan('CMP_EQ')
             return CMP_EQ
-        else: # == 'CMP_NE'
+        else:# == 'CMP_NE'
             CMP_NE = self._scan('CMP_NE')
             return CMP_NE
 
-    def STR(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'STR', [])
-        _token = self._peek('STR_DQ', 'STR_SQ')
-        if _token == 'STR_DQ':
+    def STR(self):
+        _token_ = self._peek('STR_DQ', 'STR_SQ')
+        if _token_ == 'STR_DQ':
             STR_DQ = self._scan('STR_DQ')
             return STR_DQ
-        else: # == 'STR_SQ'
+        else:# == 'STR_SQ'
             STR_SQ = self._scan('STR_SQ')
             return STR_SQ
 
@@ -457,5 +474,4 @@
         else:
             f = stdin
         print parse(argv[1], f.read())
-    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
-# End -- grammar generated by Yapps
+    else: print 'Args:  <rule> [<filename>]'
Index: TwistedWords-0.5.0/twisted/words/xish/xpath.py
===================================================================
--- TwistedWords-0.5.0/twisted/words/xish/xpath.py	(revision 5192)
+++ TwistedWords-0.5.0/twisted/words/xish/xpath.py	(revision 5206)
@@ -50,6 +50,21 @@
     def _compareNotEqual(self, elem):
         return self.lhs.value(elem) != self.rhs.value(elem)
 
+class BooleanValue:
+    def __init__(self, lhs, op, rhs):
+	self.lhs = lhs
+	self.rhs = rhs
+	if op == "and":
+	    self.value = self._booleanAnd
+	else:
+	    self.value = self._booleanOr
+
+    def _booleanAnd(self, elem):
+	return self.lhs.value(elem) and self.rhs.value(elem)
+    
+    def _booleanOr(self, elem):
+	return self.lhs.value(elem) or self.rhs.value(elem)
+
 def Function(fname):
     """ Internal method which selects the function object """
     klassname = "_%s_Function" % fname
@@ -82,7 +97,7 @@
     def matchesPredicates(self, elem):
         if self.elementName != None and self.elementName != elem.name:
             return 0
-                
+
         for p in self.predicates:
             if not p.value(elem):
                 return 0
