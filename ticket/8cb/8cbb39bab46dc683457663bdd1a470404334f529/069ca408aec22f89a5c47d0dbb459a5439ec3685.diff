Index: twisted/test/test_defgen.py
===================================================================
--- twisted/test/test_defgen.py	(revision 30920)
+++ twisted/test/test_defgen.py	(working copy)
@@ -270,6 +270,39 @@
 
         return _return().addCallback(self.assertEqual, 6)
 
+    def testNonGenerator(self):
+        """
+        Ensure that the correct exception is raised when a non-generator
+        returns something
+        """
+        def _noYield():
+            return 5
+        _noYield = inlineCallbacks(_noYield)
+
+        return self.failUnlessRaises(TypeError, _noYield)
+
+    def testNonGenerator2(self):
+        """
+        Ensure that the correct exception is raised when a non-generator
+        raises an exception
+        """
+        def _noYield():
+            0/0
+        _noYield = inlineCallbacks(_noYield)
+
+        return self.failUnlessRaises(TypeError, _noYield)
+
+    def testNonGenerator3(self):
+        """
+        Ensure that the correct exception is raised when a non-generator
+        uses returnValue, which creates a _BaseException_
+        """
+        def _noYield():
+            returnValue(5)
+        _noYield = inlineCallbacks(_noYield)
+
+        return self.failUnlessRaises(TypeError, _noYield)
+
 '''
 
 if sys.version_info > (2, 5):
Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 30920)
+++ twisted/internet/defer.py	(working copy)
@@ -17,6 +17,7 @@
 """
 
 import traceback
+import types
 import warnings
 from sys import exc_info
 
@@ -1138,7 +1139,13 @@
                 raise Exception('DESTROY ALL LIFE')
     """
     def unwindGenerator(*args, **kwargs):
-        return _inlineCallbacks(None, f(*args, **kwargs), Deferred())
+	try:
+            gen = f(*args, **kwargs)
+        except BaseException, e:
+            raise TypeError("inlineCallbacks requires %r to produce a generator; instead caught %r" % (f, e))
+        if not isinstance(gen, types.GeneratorType):
+            raise TypeError("inlineCallbacks requires %r to produce a generator; instead got %r" % (f, gen))
+        return _inlineCallbacks(None, gen, Deferred())
     return mergeFunctionMetadata(f, unwindGenerator)
 
 
