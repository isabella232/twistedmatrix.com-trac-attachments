Index: twisted/test/test_defgen.py
===================================================================
--- twisted/test/test_defgen.py	(revision 31908)
+++ twisted/test/test_defgen.py	(working copy)
@@ -270,6 +270,32 @@
 
         return _return().addCallback(self.assertEqual, 6)
 
+
+    def test_nonGeneratorReturn(self):
+        """
+        Ensure that C{TypeError} with a message about L{inlineCallbacks} is
+        raised when a non-generator returns something other than a generator.
+        """
+        def _noYield():
+            return 5
+        _noYield = inlineCallbacks(_noYield)
+
+        self.assertIn("inlineCallbacks",
+            str(self.assertRaises(TypeError, _noYield)))
+
+
+    def test_nonGeneratorReturnValue(self):
+        """
+        Ensure that C{TypeError} with a message about L{inlineCallbacks} is
+        raised when a non-generator calls L{returnValue}.
+        """
+        def _noYield():
+            returnValue(5)
+        _noYield = inlineCallbacks(_noYield)
+
+        self.assertIn("inlineCallbacks",
+            str(self.assertRaises(TypeError, _noYield)))
+
 '''
 
 if sys.version_info > (2, 5):
Index: twisted/topfiles/2501.feature
===================================================================
--- twisted/topfiles/2501.feature	(revision 0)
+++ twisted/topfiles/2501.feature	(revision 0)
@@ -0,0 +1 @@
+twisted.internet.defer.inlineCallbacks(f) now raises TypeError when f returns something other than a generator or raises _DefGen_Return.
Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 31908)
+++ twisted/internet/defer.py	(working copy)
@@ -1,5 +1,5 @@
 # -*- test-case-name: twisted.test.test_defer,twisted.test.test_defgen,twisted.internet.test.test_inlinecb -*-
-# Copyright (c) Twisted Matrix Laboratories.
+# Copyright (c) 2011 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
@@ -17,6 +17,7 @@
 """
 
 import traceback
+import types
 import warnings
 from sys import exc_info
 
@@ -1142,7 +1143,17 @@
                 raise Exception('DESTROY ALL LIFE')
     """
     def unwindGenerator(*args, **kwargs):
-        return _inlineCallbacks(None, f(*args, **kwargs), Deferred())
+        try:
+            gen = f(*args, **kwargs)
+        except _DefGen_Return:
+            raise TypeError(
+                "inlineCallbacks requires %r to produce a generator; "
+                "instead caught _DefGen_Return()" % (f,))
+        if not isinstance(gen, types.GeneratorType):
+            raise TypeError(
+                "inlineCallbacks requires %r to produce a generator; "
+                "instead got %r" % (f, gen))
+        return _inlineCallbacks(None, gen, Deferred())
     return mergeFunctionMetadata(f, unwindGenerator)
 
 
