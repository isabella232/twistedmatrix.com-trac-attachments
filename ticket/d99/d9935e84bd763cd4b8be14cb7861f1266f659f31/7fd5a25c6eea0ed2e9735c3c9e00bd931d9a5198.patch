Index: twisted/trial/test/test_trial.py
===================================================================
--- twisted/trial/test/test_trial.py    (revision 13767)
+++ twisted/trial/test/test_trial.py    (revision 13768)
@@ -207,14 +207,6 @@
         assert_(isinstance(self.tm.errors[0].value, util.PendingTimedCallsError))
         self.assertMethodsCalled(*allMethods)

-    def testTimingOutDeferred(self):
-        self.suite.addMethod(erroneous.TimingOutDeferred.test_deferredThatNeverFires)
-        self.suite.run()
-        assert_(self.tm.errors)
-        assert_(isinstance(self.tm.errors[0].value, defer.TimeoutError))
-        self.assertMethodsCalled(*allMethods)
-        assertSubstring("FAILED (errors=1)", self.reporter.out)
-
     def testPyUnitSupport(self):
         self.suite.addTestClass(pyunit.PyUnitTest)
         self.suite.run()
Index: twisted/trial/test/erroneous.py
===================================================================
--- twisted/trial/test/erroneous.py     (revision 13767)
+++ twisted/trial/test/erroneous.py     (revision 13768)
@@ -1,6 +1,6 @@
 # -*- test-case-name: twisted.trial.test.test_trial -*-
 from twisted.trial import unittest
-from twisted.internet import reactor, protocol, defer
+from twisted.internet import reactor, protocol
 from twisted.trial.test.common import BaseTest

 """
@@ -90,8 +90,3 @@
         f.protocol = protocol.Protocol
         reactor.listenTCP(0, f)

-class TimingOutDeferred(BaseTest, unittest.TestCase):
-    def test_deferredThatNeverFires(self):
-        self.methodCalled = True
-        d = defer.Deferred()
-        return d
Index: twisted/trial/runner.py
===================================================================
--- twisted/trial/runner.py     (revision 13767)
+++ twisted/trial/runner.py     (revision 13768)
@@ -332,19 +332,13 @@
         timeout = getattr(self, 'timeout', None)
         if timeout is None:
             timeout = getattr(self.original, 'timeout', None)
-
+
         self.startTime = time.time()
-
-        waitkw = {'useWaitError': True}
-        if timeout is not None:
-            waitkw['timeout'] = timeout
-
+
         try:
-            _runWithWarningFilters(
-                self.suppress,
-                lambda: util.wait(
-                    defer.maybeDeferred(self.original, *a, **kw),
-                    **waitkw))
+            _runWithWarningFilters(self.suppress,
+                lambda :util.wait(defer.maybeDeferred(self.original, *a, **kw),
+                       timeout, useWaitError=True))
         except util.MultiError, e:
             for f in e.failures:
                 self.errors.append(f)
