Index: twisted/cred/checkers.py
===================================================================
--- twisted/cred/checkers.py	(revision 34957)
+++ twisted/cred/checkers.py	(working copy)
@@ -193,7 +193,7 @@
 
     def _loadCredentials(self):
         try:
-            f = file(self.filename)
+            f = open(self.filename)
         except:
             log.err()
             raise error.UnauthorizedLogin()
Index: twisted/test/test_newcred.py
===================================================================
--- twisted/test/test_newcred.py	(revision 34957)
+++ twisted/test/test_newcred.py	(working copy)
@@ -177,50 +177,50 @@
         ('user3', 'pass3'),
     ]
 
-
-    def testUserLookup(self):
+    def test_userLookup(self):
         dbfile = self.mktemp()
         db = checkers.FilePasswordDB(dbfile)
-        f = file(dbfile, 'w')
-        for (u, p) in self.users:
-            f.write('%s:%s\n' % (u, p))
-        f.close()
+        with open(dbfile, 'w') as f:
+            for (u, p) in self.users:
+                f.write('%s:%s\n' % (u, p))
 
         for (u, p) in self.users:
             self.failUnlessRaises(KeyError, db.getUser, u.upper())
             self.assertEqual(db.getUser(u), (u, p))
 
-    def testCaseInSensitivity(self):
+
+    def test_caseInSensitivity(self):
         dbfile = self.mktemp()
         db = checkers.FilePasswordDB(dbfile, caseSensitive=0)
-        f = file(dbfile, 'w')
-        for (u, p) in self.users:
-            f.write('%s:%s\n' % (u, p))
-        f.close()
+        with open(dbfile, 'w') as f:
+            for (u, p) in self.users:
+                f.write('%s:%s\n' % (u, p))
 
         for (u, p) in self.users:
             self.assertEqual(db.getUser(u.upper()), (u, p))
 
-    def testRequestAvatarId(self):
+
+    def test_requestAvatarId(self):
         dbfile = self.mktemp()
         db = checkers.FilePasswordDB(dbfile, caseSensitive=0)
-        f = file(dbfile, 'w')
-        for (u, p) in self.users:
-            f.write('%s:%s\n' % (u, p))
-        f.close()
+        with open(dbfile, 'w') as f:
+            for (u, p) in self.users:
+                f.write('%s:%s\n' % (u, p))
+
         creds = [credentials.UsernamePassword(u, p) for u, p in self.users]
         d = defer.gatherResults(
             [defer.maybeDeferred(db.requestAvatarId, c) for c in creds])
         d.addCallback(self.assertEqual, [u for u, p in self.users])
         return d
 
-    def testRequestAvatarId_hashed(self):
+
+    def test_requestAvatarId_hashed(self):
         dbfile = self.mktemp()
         db = checkers.FilePasswordDB(dbfile, caseSensitive=0)
-        f = file(dbfile, 'w')
-        for (u, p) in self.users:
-            f.write('%s:%s\n' % (u, p))
-        f.close()
+        with open(dbfile, 'w') as f:
+            for (u, p) in self.users:
+                f.write('%s:%s\n' % (u, p))
+
         creds = [credentials.UsernameHashedPassword(u, p) for u, p in self.users]
         d = defer.gatherResults(
             [defer.maybeDeferred(db.requestAvatarId, c) for c in creds])
@@ -240,24 +240,26 @@
     def hash(self, u, p, s):
         return crypt(p, s)
 
+
     def setUp(self):
         dbfile = self.mktemp()
         self.db = checkers.FilePasswordDB(dbfile, hash=self.hash)
-        f = file(dbfile, 'w')
-        for (u, p) in self.users:
-            f.write('%s:%s\n' % (u, crypt(p, u[:2])))
-        f.close()
+        with open(dbfile, 'w') as f:
+            for (u, p) in self.users:
+                f.write('%s:%s\n' % (u, crypt(p, u[:2])))
         r = TestRealm()
         self.port = portal.Portal(r)
         self.port.registerChecker(self.db)
 
-    def testGoodCredentials(self):
+
+    def test_goodCredentials(self):
         goodCreds = [credentials.UsernamePassword(u, p) for u, p in self.users]
         d = defer.gatherResults([self.db.requestAvatarId(c) for c in goodCreds])
         d.addCallback(self.assertEqual, [u for u, p in self.users])
         return d
 
-    def testGoodCredentials_login(self):
+
+    def test_goodCredentials_login(self):
         goodCreds = [credentials.UsernamePassword(u, p) for u, p in self.users]
         d = defer.gatherResults([self.port.login(c, None, ITestable)
                                  for c in goodCreds])
@@ -265,7 +267,8 @@
         d.addCallback(self.assertEqual, [u for u, p in self.users])
         return d
 
-    def testBadCredentials(self):
+
+    def test_badCredentials(self):
         badCreds = [credentials.UsernamePassword(u, 'wrong password')
                     for u, p in self.users]
         d = defer.DeferredList([self.port.login(c, None, ITestable)
@@ -273,7 +276,8 @@
         d.addCallback(self._assertFailures, error.UnauthorizedLogin)
         return d
 
-    def testHashedCredentials(self):
+
+    def test_hashedCredentials(self):
         hashedCreds = [credentials.UsernameHashedPassword(u, crypt(p, u[:2]))
                        for u, p in self.users]
         d = defer.DeferredList([self.port.login(c, None, ITestable)
@@ -281,6 +285,7 @@
         d.addCallback(self._assertFailures, error.UnhandledCredentials)
         return d
 
+
     def _assertFailures(self, failures, *expectedFailures):
         for flag, failure in failures:
             self.assertEqual(flag, defer.FAILURE)
@@ -290,6 +295,8 @@
     if crypt is None:
         skip = "crypt module not available"
 
+
+
 class PluggableAuthenticationModulesTest(unittest.TestCase):
 
     def setUp(self):
@@ -362,6 +369,8 @@
     if not pamauth:
         skip = "Can't run without PyPAM"
 
+
+
 class CheckersMixin:
     def testPositive(self):
         for chk in self.getCheckers():
@@ -379,6 +388,8 @@
                 self.assertRaises(error.UnauthorizedLogin, r.getResult)
     testNegative = dG(testNegative)
 
+
+
 class HashlessFilePasswordDBMixin:
     credClass = credentials.UsernamePassword
     diskHash = None
@@ -389,42 +400,44 @@
         ('user2', 'password2'),
         ('user3', 'password3')]
 
+
     def getGoodCredentials(self):
         for u, p in self._validCredentials:
             yield self.credClass(u, self.networkHash(p)), u
 
+
     def getBadCredentials(self):
         for u, p in [('user1', 'password3'),
                      ('user2', 'password1'),
                      ('bloof', 'blarf')]:
             yield self.credClass(u, self.networkHash(p))
 
+
     def getCheckers(self):
         diskHash = self.diskHash or (lambda x: x)
         hashCheck = self.diskHash and (lambda username, password, stored: self.diskHash(password))
 
         for cache in True, False:
             fn = self.mktemp()
-            fObj = file(fn, 'w')
-            for u, p in self._validCredentials:
-                fObj.write('%s:%s\n' % (u, diskHash(p)))
-            fObj.close()
+            with open(fn, 'w') as fObj:
+                for u, p in self._validCredentials:
+                    fObj.write('%s:%s\n' % (u, diskHash(p)))
             yield checkers.FilePasswordDB(fn, cache=cache, hash=hashCheck)
 
             fn = self.mktemp()
-            fObj = file(fn, 'w')
-            for u, p in self._validCredentials:
-                fObj.write('%s dingle dongle %s\n' % (diskHash(p), u))
-            fObj.close()
+            with open(fn, 'w') as fObj:
+                for u, p in self._validCredentials:
+                    fObj.write('%s dingle dongle %s\n' % (diskHash(p), u))
             yield checkers.FilePasswordDB(fn, ' ', 3, 0, cache=cache, hash=hashCheck)
 
             fn = self.mktemp()
-            fObj = file(fn, 'w')
-            for u, p in self._validCredentials:
-                fObj.write('zip,zap,%s,zup,%s\n' % (u.title(), diskHash(p)))
-            fObj.close()
+            with open(fn, 'w') as fObj:
+                for u, p in self._validCredentials:
+                    fObj.write('zip,zap,%s,zup,%s\n' % (u.title(), diskHash(p)))
             yield checkers.FilePasswordDB(fn, ',', 2, 4, False, cache=cache, hash=hashCheck)
 
+
+
 class LocallyHashedFilePasswordDBMixin(HashlessFilePasswordDBMixin):
     diskHash = staticmethod(lambda x: x.encode('hex'))
 
