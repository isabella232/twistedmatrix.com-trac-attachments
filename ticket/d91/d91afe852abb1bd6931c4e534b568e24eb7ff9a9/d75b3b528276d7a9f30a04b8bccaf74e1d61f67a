Index: twisted/internet/base.py
===================================================================
--- twisted/internet/base.py	(révision 20474)
+++ twisted/internet/base.py	(copie de travail)
@@ -269,6 +269,7 @@
         self._newTimedCalls = []
         self._cancellations = 0
         self.running = 0
+        self.shuttingDown = False
         self.waker = None
 
         self.addSystemEventTrigger('during', 'shutdown', self.crash)
@@ -334,8 +335,11 @@
     def stop(self):
         """See twisted.internet.interfaces.IReactorCore.stop.
         """
+        if self.shuttingDown:
+            raise error.ReactorAlreadyStopped, "don't stop reactor twice"
         if not self.running:
             raise RuntimeError, "can't stop reactor that isn't running"
+        self.shuttingDown = True
         self.fireSystemEvent("shutdown")
 
     def crash(self):
@@ -346,20 +350,29 @@
     def sigInt(self, *args):
         """Handle a SIGINT interrupt.
         """
-        log.msg("Received SIGINT, shutting down.")
-        self.callFromThread(self.stop)
+        if not self.shuttingDown:
+            log.msg("Received SIGINT, shutting down.")
+            self.callFromThread(self.stop)
+        else:
+            log.msg("Received SIGINT, discaring.")
 
     def sigBreak(self, *args):
         """Handle a SIGBREAK interrupt.
         """
-        log.msg("Received SIGBREAK, shutting down.")
-        self.callFromThread(self.stop)
+        if not self.shuttingDown:
+            log.msg("Received SIGBREAK, shutting down.")
+            self.callFromThread(self.stop)
+        else:
+            log.msg("Received SIGBREAK, discaring.")
 
     def sigTerm(self, *args):
         """Handle a SIGTERM interrupt.
         """
-        log.msg("Received SIGTERM, shutting down.")
-        self.callFromThread(self.stop)
+        if not self.shuttingDown:
+            log.msg("Received SIGTERM, shutting down.")
+            self.callFromThread(self.stop)
+        else:
+            log.msg("Received SIGTERM, discaring.")
 
     def disconnectAll(self):
         """Disconnect every reader, and writer in the system.
Index: twisted/internet/error.py
===================================================================
--- twisted/internet/error.py	(révision 20474)
+++ twisted/internet/error.py	(copie de travail)
@@ -265,3 +265,8 @@
             s = '%s: %s' % (s, ' '.join(self.args))
         s = '%s.' % s
         return s
+
+
+class ReactorAlreadyStopped(RuntimeError):
+    """The reactor has already been asked to stop"""
+
