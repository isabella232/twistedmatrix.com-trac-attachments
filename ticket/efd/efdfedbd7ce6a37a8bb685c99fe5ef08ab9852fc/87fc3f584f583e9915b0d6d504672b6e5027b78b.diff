--- logfile.py	2010-04-28 15:55:42.000000000 -0600
+++ logfile_datestamp.py	2010-04-28 19:28:00.000000000 -0600
@@ -231,6 +231,103 @@
 
 threadable.synchronize(LogFile)
 
+class TimestampLogFile(BaseLogFile):
+    """
+    A log file that can be rotated to logfile.<PID>.<UNIXTimestamp>.
+
+    A rotateLength of None disables automatic log rotation.
+    """
+    def __init__(self, name, directory, rotateLength=1000000, defaultMode=None,
+                 maxRotatedFiles=None):
+        """
+        Create a log file rotating on length.
+
+        @param name: file name.
+        @type name: C{str}
+        @param directory: path of the log file.
+        @type directory: C{str}
+        @param rotateLength: size of the log file where it rotates. Default to
+            1M.
+        @type rotateLength: C{int}
+        @param defaultMode: mode used to create the file.
+        @type defaultMode: C{int}
+        @param maxRotatedFiles: if not None, max number of log files the class
+            creates. Warning: it removes all log files above this number.
+        @type maxRotatedFiles: C{int}
+        """
+        BaseLogFile.__init__(self, name, directory, defaultMode)
+        self.rotateLength = rotateLength
+        self.maxRotatedFiles = maxRotatedFiles
+
+    def _openFile(self):
+        BaseLogFile._openFile(self)
+        self.size = self._file.tell()
+
+    def shouldRotate(self):
+        """
+        Rotate when the log file size is larger than rotateLength.
+        """
+        
+        return self.rotateLength and self.size >= self.rotateLength
+
+    def getLog(self, identifier):
+        """
+        Given an integer, return a LogReader for an old log file.
+        """
+        filename = "%s.%s" % (self.path, identifier)
+        if not os.path.exists(filename):
+            raise ValueError, "no such logfile exists"
+        return LogReader(filename)
+
+    def write(self, data):
+        """
+        Write some data to the file.
+        """
+        BaseLogFile.write(self, data)
+        self.size += len(data)
+
+    def rotate(self):
+        """
+        Rotate the file and create a new one.
+
+        If it's not possible to open new logfile, this will fail silently,
+        and continue logging to old logfile.
+        """
+        if not (os.access(self.directory, os.W_OK) and os.access(self.path, os.W_OK)):
+            return
+        
+        logs = self.listLogs()
+        
+        for suffix in logs:
+            if self.maxRotatedFiles is not None and len(logs) >= self.maxRotatedFiles:
+                os.remove("%s.%s" % (self.path, suffix))
+                
+        self._file.close()
+        os.rename(self.path, "%s.%d.%d" % (self.path,os.getpid(),time.time()))
+        self._openFile()
+
+    def listLogs(self):
+        """
+        Return sorted list of integers - the old logs' identifiers.
+        """
+        result = []
+        
+        for name in glob.glob("%s.*" % self.path):
+            try:
+                counter = '.'.join(name.split('.')[-2:])
+                if counter:
+                    result.append(counter)
+            except ValueError:
+                pass
+        result.sort()
+        return result
+
+    def __getstate__(self):
+        state = BaseLogFile.__getstate__(self)
+        del state["size"]
+        return state
+
+threadable.synchronize(LogFile)
 
 class DailyLogFile(BaseLogFile):
     """A log file that is rotated daily (at or after midnight localtime)
