--- test_logfile.py	2010-04-28 19:38:09.000000000 -0600
+++ test_logfile_timestamp.py	2010-04-28 19:37:41.000000000 -0600
@@ -4,7 +4,7 @@
 from twisted.trial import unittest
 
 # system imports
-import os, time, stat
+import os, time, stat, glob
 
 # twisted imports
 from twisted.python import logfile, runtime
@@ -251,6 +251,245 @@
         test_reopen.skip = "Can't test reopen on Windows"
 
 
+class TimestampLogFileTestCase(unittest.TestCase):
+    """
+    Test the timestamp-based rotating log file.
+    """
+
+    def setUp(self):
+        self.dir = self.mktemp()
+        os.makedirs(self.dir)
+        self.name = "test.log"
+        self.path = os.path.join(self.dir, self.name)
+
+
+    def tearDown(self):
+        """
+        Restore back write rights on created paths: if tests modified the
+        rights, that will allow the paths to be removed easily afterwards.
+        """
+        os.chmod(self.dir, 0777)
+        if os.path.exists(self.path):
+            os.chmod(self.path, 0777)
+
+
+    def testWriting(self):
+        log = logfile.TimestampLogFile(self.name, self.dir)
+        log.write("123")
+        log.write("456")
+        log.flush()
+        log.write("7890")
+        log.close()
+        
+        f = open(self.path, "r")
+        self.assertEquals(f.read(), "1234567890")
+        f.close()
+        
+    def testRotation(self):
+        # this logfile should rotate every 10 bytes
+        log = logfile.TimestampLogFile(self.name, self.dir, rotateLength=10)
+        
+        # test automatic rotation
+        log.write("123")
+        log.write("4567890")
+        log.write("1" * 11)
+        self.assert_(len(log.listLogs()) == 1)
+        time.sleep(1)
+        log.write('')
+        time.sleep(1)
+        self.assert_(len(log.listLogs()) == 2)
+        log.write("3")
+        self.assert_(len(log.listLogs()) == 2)
+
+        # test manual rotation
+        log.rotate()
+        self.assert_(len(log.listLogs()) == 3)
+        log.close()
+
+        self.assert_(len(log.listLogs()) == 3)
+
+    def testAppend(self):
+        log = logfile.TimestampLogFile(self.name, self.dir)
+        log.write("0123456789")
+        log.close()
+
+        log = logfile.TimestampLogFile(self.name, self.dir)
+        self.assertEquals(log.size, 10)
+        self.assertEquals(log._file.tell(), log.size)
+        log.write("abc")
+        self.assertEquals(log.size, 13)
+        self.assertEquals(log._file.tell(), log.size)
+        f = log._file
+        f.seek(0, 0)
+        self.assertEquals(f.read(), "0123456789abc")
+        log.close()
+
+    def testLogReader(self):
+        log = logfile.TimestampLogFile(self.name, self.dir)
+        log.write("abc\n")
+        log.write("def\n")
+        log.rotate()
+        time.sleep(1)
+        log.write("ghi\n")
+        log.flush()
+        
+        # check reading logs
+        self.assertEquals(len(glob.glob('/'.join(self.path.split('/')[:-1]) + "/*")), 2)
+        reader = log.getCurrentLog()
+        reader._file.seek(0)
+        self.assertEquals(reader.readLines(), ["ghi\n"])
+        self.assertEquals(reader.readLines(), [])
+        reader.close()
+        reader = log.getLog(log.listLogs()[0])
+        self.assertEquals(reader.readLines(), ["abc\n", "def\n"])
+        self.assertEquals(reader.readLines(), [])
+        reader.close()
+
+        # check getting illegal log readers
+        self.assertRaises(ValueError, log.getLog, 2)
+
+        # check that log numbers are higher for older logs
+        log.rotate()
+        time.sleep(1)
+        self.assertEquals(len(log.listLogs()), 2)
+        reader = log.getLog(log.listLogs()[1])
+        reader._file.seek(0)
+        self.assertEquals(reader.readLines(), ["ghi\n"])
+        self.assertEquals(reader.readLines(), [])
+        reader.close()
+        reader = log.getLog(log.listLogs()[0])
+        self.assertEquals(reader.readLines(), ["abc\n", "def\n"])
+        self.assertEquals(reader.readLines(), [])
+        reader.close()
+
+    def testModePreservation(self):
+        """
+        Check rotated files have same permissions as original.
+        """
+        f = open(self.path, "w").close()
+        os.chmod(self.path, 0707)
+        mode = os.stat(self.path)[stat.ST_MODE]
+        log = logfile.TimestampLogFile(self.name, self.dir)
+        log.write("abc")
+        log.rotate()
+        self.assertEquals(mode, os.stat(self.path)[stat.ST_MODE])
+
+
+    def test_noPermission(self):
+        """
+        Check it keeps working when permission on dir changes.
+        """
+        log = logfile.TimestampLogFile(self.name, self.dir)
+        log.write("abc")
+
+        # change permissions so rotation would fail
+        os.chmod(self.dir, 0555)
+
+        # if this succeeds, chmod doesn't restrict us, so we can't
+        # do the test
+        try:
+            f = open(os.path.join(self.dir,"xxx"), "w")
+        except (OSError, IOError):
+            pass
+        else:
+            f.close()
+            return
+
+        log.rotate() # this should not fail
+
+        log.write("def")
+        log.flush()
+
+        f = log._file
+        self.assertEquals(f.tell(), 6)
+        f.seek(0, 0)
+        self.assertEquals(f.read(), "abcdef")
+        log.close()
+
+
+    def test_maxNumberOfLog(self):
+        """
+        Test it respect the limit on the number of files when maxRotatedFiles
+        is not None.
+        """
+        log = logfile.TimestampLogFile(self.name, self.dir, rotateLength=10,
+                                       maxRotatedFiles=3)
+        log.write("1" * 11)
+        log.write("2" * 11)
+        time.sleep(1)
+        self.failUnless(len(log.listLogs()) == 1)
+        
+        log.write("3" * 11)
+        self.failUnless(len(log.listLogs()) == 2)
+        time.sleep(1)
+        log.write("4" * 11)
+        self.failUnless(len(log.listLogs()) == 3)
+        self.assertEquals(file("%s.%s" % (self.path, log.listLogs()[0])).read(), "1" * 11)
+        time.sleep(1)
+        log.write("5" * 11)
+        self.assertEquals(file("%s.%s" % (self.path, log.listLogs()[0])).read(), "4" * 11)
+        self.failUnless(not os.path.exists("%s.4" % self.path))
+
+    def test_fromFullPath(self):
+        """
+        Test the fromFullPath method.
+        """
+        log1 = logfile.TimestampLogFile(self.name, self.dir, 10, defaultMode=0777)
+        log2 = logfile.TimestampLogFile.fromFullPath(self.path, 10, defaultMode=0777)
+        self.assertEquals(log1.name, log2.name)
+        self.assertEquals(os.path.abspath(log1.path), log2.path)
+        self.assertEquals(log1.rotateLength, log2.rotateLength)
+        self.assertEquals(log1.defaultMode, log2.defaultMode)
+
+    def test_defaultPermissions(self):
+        """
+        Test the default permission of the log file: if the file exist, it
+        should keep the permission.
+        """
+        f = file(self.path, "w")
+        os.chmod(self.path, 0707)
+        currentMode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
+        f.close()
+        log1 = logfile.TimestampLogFile(self.name, self.dir)
+        self.assertEquals(stat.S_IMODE(os.stat(self.path)[stat.ST_MODE]),
+                          currentMode)
+
+
+    def test_specifiedPermissions(self):
+        """
+        Test specifying the permissions used on the log file.
+        """
+        log1 = logfile.TimestampLogFile(self.name, self.dir, defaultMode=0066)
+        mode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
+        if runtime.platform.isWindows():
+            # The only thing we can get here is global read-only
+            self.assertEquals(mode, 0444)
+        else:
+            self.assertEquals(mode, 0066)
+
+
+    def test_reopen(self):
+        """
+        L{logfile.LogFile.reopen} allows to rename the currently used file and
+        make L{logfile.LogFile} create a new file.
+        """
+        log1 = logfile.TimestampLogFile(self.name, self.dir)
+        log1.write("hello1")
+        savePath = os.path.join(self.dir, "save.log")
+        os.rename(self.path, savePath)
+        log1.reopen()
+        log1.write("hello2")
+        log1.close()
+
+        f = open(self.path, "r")
+        self.assertEquals(f.read(), "hello2")
+        f.close()
+        f = open(savePath, "r")
+        self.assertEquals(f.read(), "hello1")
+        f.close()
+
+    if runtime.platform.isWindows():
+        test_reopen.skip = "Can't test reopen on Windows"
 
 class RiggedDailyLogFile(logfile.DailyLogFile):
     _clock = 0.0
