Index: twisted/test/process_tester.py
===================================================================
--- twisted/test/process_tester.py	(revision 14502)
+++ twisted/test/process_tester.py	(working copy)
@@ -2,7 +2,8 @@
 
 import sys, os
 
-test_file = "process_test.log"
+test_file_match = "process_test.log.*"
+test_file = "process_test.log.%d" % os.getpid()
 
 def main():
     f = open(test_file, 'wb')
Index: twisted/test/test_process.py
===================================================================
--- twisted/test/test_process.py	(revision 14502)
+++ twisted/test/test_process.py	(working copy)
@@ -40,6 +40,10 @@
 class TestProcessProtocol(protocol.ProcessProtocol):
 
     finished = 0
+    
+    def __init__(self):
+        
+        self.deferred = defer.Deferred()
 
     def connectionMade(self):
         self.stages = [1]
@@ -73,6 +77,10 @@
     def processEnded(self, reason):
         self.finished = 1
         self.reason = reason
+        if reason.check(error.ProcessDone):
+            self.deferred.callback(None)
+        else:
+            self.deferred.errback(reason)
 
 class EchoProtocol(protocol.ProcessProtocol):
 
@@ -186,10 +194,45 @@
         #self.assertEquals(f.value.signal, None)
 
         try:
-            import process_tester
-            os.remove(process_tester.test_file)
+            import process_tester, glob
+            for f in glob.glob(process_tester.test_file_match):
+                os.remove(f)
         except:
             pass
+            
+    def testManyProcesses(self):
+        
+        def openProcess(cmd_and_args, proto):
+            cmd = cmd_and_args[0]
+            args = cmd_and_args[1:]
+            proto.cmd = cmd_and_args
+            reactor.spawnProcess(proto, cmd, cmd_and_args, env=None)
+            return proto.deferred
+        
+        def _check(results, protocols):
+            for p in protocols:
+                self.failUnless(p.finished)
+                self.assertEquals(p.stages, [1, 2, 3, 4, 5], "[%d] stages = %s" % (id(p.transport), str(p.stages)))
+                # test status code
+                f = p.reason
+                f.trap(error.ProcessTerminated)
+                self.assertEquals(f.value.exitCode, 23)
+        
+        exe = sys.executable
+        scriptPath = util.sibpath(__file__, "process_tester.py")
+        cmd = [exe, "-u", scriptPath]
+        protocols = []
+        deferreds = []
+                   
+        for i in xrange(200):
+            p = TestProcessProtocol()
+            protocols.append(p)
+            d = openProcess(cmd, p)
+            deferreds.append(d)
+        
+        deferredList = defer.DeferredList(deferreds)
+        deferredList.addCallback(_check, protocols)
+        return deferredList
 
     def testEcho(self):
         finished = defer.Deferred()
@@ -215,14 +258,14 @@
         pyExe = sys.executable
         scriptPath = util.sibpath(__file__, "process_cmdline.py")
         p = Accumulator()
-        reactor.spawnProcess(p, pyExe, [pyExe, "-u", scriptPath]+args, env=None,
+        reactor.spawnProcess(p, pyExe, [pyExe, "-u", scriptPath]+args, env=None ,
                              path=None)
 
         spinUntil(lambda :p.closed)
         self.assertEquals(p.errF.getvalue(), "")
         recvdArgs = p.outF.getvalue().splitlines()
         self.assertEquals(recvdArgs, args)
-        
+
     testEcho.timeout = 60
 
 class TwoProcessProtocol(protocol.ProcessProtocol):
@@ -740,8 +783,9 @@
         """ProcessProtocol.transport.closeStdout actually closes the pipe."""
         d = self.doit(1)
         def _check(errput):
-            unittest.failIfEqual(errput.index('OSError'), -1)
-            unittest.failIfEqual(errput.index('Broken pipe'), -1)
+            unittest.failIfEqual(errput.find('OSError'), -1)
+            if runtime.platform.getType() != 'win32':
+                unittest.failIfEqual(errput.find('Broken pipe'), -1)
         d.addCallback(_check)
         return d
 
Index: twisted/internet/iocpreactor/proactor.py
===================================================================
--- twisted/internet/iocpreactor/proactor.py	(revision 14502)
+++ twisted/internet/iocpreactor/proactor.py	(working copy)
@@ -3,7 +3,8 @@
 
 
 from twisted.internet import defer, base, main
-from twisted.internet.interfaces import IReactorTCP, IReactorUDP, IReactorArbitrary
+from twisted.internet.interfaces import IReactorTCP, IReactorUDP, IReactorArbitrary, IReactorProcess
+from twisted.internet.iocpreactor import process
 from twisted.python import threadable, log
 from zope.interface import implements, implementsOnly
 
@@ -14,7 +15,7 @@
     # TODO: IReactorArbitrary, IReactorUDP, IReactorMulticast,
     # IReactorSSL (or leave it until exarkun finishes TLS)
     # IReactorProcess, IReactorCore (cleanup)
-    implementsOnly(IReactorTCP, IReactorUDP, IReactorArbitrary)
+    implementsOnly(IReactorTCP, IReactorUDP, IReactorArbitrary, IReactorProcess)
     handles = None
     iocp = None
 
@@ -92,6 +93,11 @@
         c = connectorType(*args, **kw)
         c.connect()
         return c
+           
+    def spawnProcess(self, processProtocol, executable, args=(), env={}, path=None, usePTY=0):
+        """Spawn a process."""
+        return process.Process(self, processProtocol, executable, args, env, path)
+        
 
 def install():
     from twisted.python import threadable
Index: twisted/internet/iocpreactor/process.py
===================================================================
--- twisted/internet/iocpreactor/process.py	(revision 0)
+++ twisted/internet/iocpreactor/process.py	(revision 0)
@@ -0,0 +1,542 @@
+# Win32 imports
+import win32api
+import win32gui
+import win32con
+import win32file
+import win32pipe
+import win32process
+import win32security
+from win32event import CreateEvent, SetEvent, WaitForSingleObject, MsgWaitForMultipleObjects, \
+                       WAIT_OBJECT_0, WAIT_TIMEOUT, INFINITE, QS_ALLINPUT, QS_POSTMESSAGE, \
+                       QS_ALLEVENTS
+
+# Zope & Twisted imports
+from zope.interface import implements
+from twisted.internet import error
+from twisted.python import failure, components
+from twisted.internet.interfaces import IProcessTransport
+
+# sibling imports
+import ops
+
+# System imports
+import os
+import sys
+import re
+import time
+import threading
+import itertools
+
+# Counter for uniquely identifying pipes
+counter = itertools.count(1)
+
+# Message ID must be greater than WM_USER or the system will do
+# marshalling automatically.
+#WM_NEW_PHANDLE = win32con.WM_USER + 1
+#WM_CLOSE_THREAD = win32con.WM_USER + 2
+WM_NEW_PHANDLE = win32con.WM_APP + 1
+WM_CLOSE_THREAD = win32con.WM_APP + 2
+
+_cmdLineQuoteRe = re.compile(r'(\\*)"')
+def _cmdLineQuote(s):
+    return '"' + _cmdLineQuoteRe.sub(r'\1\1\\"', s) + '"'
+
+
+
+class Process(object):
+    """A process that integrates with the Twisted event loop.
+
+    See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/creating_a_child_process_with_redirected_input_and_output.asp
+    for more info on how to create processes in Windows and access their
+    stdout/err/in.  Another good source is http://www.informit.com/articles/article.asp?p=362660&seqNum=2.
+    
+    Issues:
+
+    If your subprocess is a python program, you need to:
+
+     - Run python.exe with the '-u' command line option - this turns on
+       unbuffered I/O. Buffering stdout/err/in can cause problems, see e.g.
+       http://support.microsoft.com/default.aspx?scid=kb;EN-US;q1903
+
+     - (is this still true?) If you don't want Windows messing with data passed over
+       stdin/out/err, set the pipes to be in binary mode::
+
+        import os, sys, mscvrt
+        msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
+        msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
+        msvcrt.setmode(sys.stderr.fileno(), os.O_BINARY)
+
+    """
+    implements(IProcessTransport)
+    
+    # I used this size because abstract.ConnectedSocket did.  I don't
+    # know why though.
+    bufferSize = 2**2**2**2
+    # Per http://www-128.ibm.com/developerworks/linux/library/l-rt4/,
+    # an extra 24 bytes are needed to handle write header.  I haven't seen
+    # any problems not having the extra 24 bytes though, so I'm not
+    # adding it to the size.  I comment here just in case it is discovered
+    # to be necessary down the road.
+    pipeBufferSize = bufferSize
+    
+    usedThreads = []  # threads waiting on 63 process handles
+    availableThreads = [] # threads waiting on less than 63 process handles
+
+    threadToNumProcessHandles = {} # to track when a thread can handle more process handles
+    threadToMsgWindowCreationEvent = {} # event signalled when msg queue created
+    threadToMsgWindowCreated = {} # boolean indicated msg queue is created
+    needWaiting = {} # used to pass process handles to new WaitForMultipleObjects thread
+    phandleToTransport = {} # so we can call methods on the transport when a proc handle is signalled
+    threadToMsgWindow = {} # since we need the window to call PostMessage
+    phandleKeyToThreadHandle = {} # proc handle keys passed to PostThreadMessage to tell thread to wait on new proc handle
+    threadToNumEnded = {}
+
+    def __init__(self, reactor, protocol, command, args, environment, path):
+        self.reactor = reactor
+        self.protocol = protocol
+        self.outBuffer = reactor.AllocateReadBuffer(self.bufferSize)
+        self.errBuffer = reactor.AllocateReadBuffer(self.bufferSize)
+        # This is the buffer for *reading* stdin, which is only done to
+        # determine if the other end of the pipe was closed.
+        self.inBuffer = reactor.AllocateReadBuffer(self.bufferSize)
+        # IO operation classes
+        self.readOutOp = ops.ReadOutOp(self)
+        self.readErrOp = ops.ReadErrOp(self)
+        self.readInOp = ops.ReadInOp(self)
+        self.writeInOp = ops.WriteInOp(self)
+        
+        self.writeBuffer = ""
+        self.writing = False
+        self.finished = False
+        self.offset = 0
+        self.writeBufferedSize = 0
+        self.closingStdin = False
+        self.closedStdin = False
+        self.closedStdout = False
+        self.closedStderr = False
+        # Stdio handles
+        self.hChildStdinRd = None
+        self.hChildStdinWr = None
+        self.hChildStdinWrDup = None
+        self.hChildStdoutRd = None
+        self.hChildStdoutWr = None
+        self.hChildStdoutRdDup = None
+        self.hChildStderrRd = None
+        self.hChildStderrWr = None
+        self.hChildStderrRdDup = None
+        # handle of thread calling WaitForMultipleObjects on this process'es handle
+        self.wfmoThread = None
+        
+        self.closedNotifies = 0  # increments to 3 (for stdin, stdout, stderr)
+        self.closed = False # set to true when all 3 handles close
+        self.exited = False # set to true when WFMO thread gets signalled proc handle.  See doWaitForProcessExit.
+
+        # Set the bInheritHandle flag so pipe handles are inherited. 
+        saAttr = win32security.SECURITY_ATTRIBUTES()
+        saAttr.bInheritHandle = 1
+        
+        pid = win32api.GetCurrentProcess() # -1 which stands for current process
+        self.realPid = os.getpid() # unique pid for pipe naming
+        
+        # Create a pipe for the child process's STDOUT. 
+        self.stdoutPipeName = r"\\.\pipe\twisted-iocp-stdout-%d-%d-%d" % (self.realPid, counter.next(), time.time())
+        self.hChildStdoutRd = \
+            win32pipe.CreateNamedPipe(self.stdoutPipeName,
+                                      win32con.PIPE_ACCESS_INBOUND | win32con.FILE_FLAG_OVERLAPPED, # open mode
+                                      win32con.PIPE_TYPE_BYTE, # pipe mode
+                                      1, # max instances
+                                      self.pipeBufferSize, # out buffer size
+                                      self.pipeBufferSize, # in buffer size
+                                      0, # timeout 
+                                      saAttr)
+
+        self.hChildStdoutWr = win32file.CreateFile(self.stdoutPipeName,
+                                         win32con.GENERIC_WRITE,
+                                         win32con.FILE_SHARE_READ|win32con.FILE_SHARE_WRITE,
+                                         saAttr,
+                                         win32con.OPEN_EXISTING,
+                                         win32con.FILE_FLAG_OVERLAPPED,
+                                         0);
+ 
+        # Create noninheritable read handle and close the inheritable read 
+        # handle.
+        self.hChildStdoutRdDup = win32api.DuplicateHandle(
+                                     pid, self.hChildStdoutRd,
+                                     pid, 0,
+                                     0,
+                                     win32con.DUPLICATE_SAME_ACCESS)
+        win32api.CloseHandle(self.hChildStdoutRd);
+        self.hChildStdoutRd = self.hChildStdoutRdDup
+        
+        # Create a pipe for the child process's STDERR.
+        self.stderrPipeName = r"\\.\pipe\twisted-iocp-stderr-%d-%d-%d" % (self.realPid, counter.next(), time.time())
+        self.hChildStderrRd = \
+            win32pipe.CreateNamedPipe(self.stderrPipeName,
+                                      win32con.PIPE_ACCESS_INBOUND | win32con.FILE_FLAG_OVERLAPPED, # open mode
+                                      win32con.PIPE_TYPE_BYTE, # pipe mode
+                                      1, # max instances
+                                      self.pipeBufferSize, # out buffer size
+                                      self.pipeBufferSize, # in buffer size
+                                      0, # timeout 
+                                      saAttr)
+        self.hChildStderrWr = win32file.CreateFile(self.stderrPipeName,
+                                         win32con.GENERIC_WRITE,
+                                         win32con.FILE_SHARE_READ|win32con.FILE_SHARE_WRITE,
+                                         saAttr,
+                                         win32con.OPEN_EXISTING,
+                                         win32con.FILE_FLAG_OVERLAPPED,
+                                         0);
+
+        # Create noninheritable read handle and close the inheritable read 
+        # handle.
+        self.hChildStderrRdDup = win32api.DuplicateHandle(
+                                     pid, self.hChildStderrRd,
+                                     pid, 0,
+                                     0,
+                                     win32con.DUPLICATE_SAME_ACCESS)
+        win32api.CloseHandle(self.hChildStderrRd)
+        self.hChildStderrRd = self.hChildStderrRdDup
+        
+        
+        # Create a pipe for the child process's STDIN. This one is opened
+        # in duplex mode so we can read from it too in order to detect when
+        # the child closes their end of the pipe.
+        self.stdinPipeName = r"\\.\pipe\twisted-iocp-stdin-%d-%d-%d" % (self.realPid, counter.next(), time.time())
+        self.hChildStdinWr = \
+            win32pipe.CreateNamedPipe(self.stdinPipeName,
+                                      win32con.PIPE_ACCESS_DUPLEX | win32con.FILE_FLAG_OVERLAPPED, # open mode
+                                      win32con.PIPE_TYPE_BYTE, # pipe mode
+                                      1, # max instances
+                                      self.pipeBufferSize, # out buffer size
+                                      self.pipeBufferSize, # in buffer size
+                                      0, # timeout 
+                                      saAttr)
+
+        self.hChildStdinRd = win32file.CreateFile(self.stdinPipeName,
+                                         win32con.GENERIC_READ,
+                                         win32con.FILE_SHARE_READ|win32con.FILE_SHARE_WRITE,
+                                         saAttr,
+                                         win32con.OPEN_EXISTING,
+                                         win32con.FILE_FLAG_OVERLAPPED,
+                                         0);
+        
+        
+        # Duplicate the write handle to the pipe so it is not inherited.
+        self.hChildStdinWrDup = win32api.DuplicateHandle(
+                                    pid, self.hChildStdinWr, 
+                                    pid, 0, 
+                                    0,
+                                    win32con.DUPLICATE_SAME_ACCESS)
+        win32api.CloseHandle(self.hChildStdinWr)
+        self.hChildStdinWr = self.hChildStdinWrDup
+        
+        # set the info structure for the new process.  This is where
+        # we tell the process to use the pipes for stdout/err/in.
+        StartupInfo = win32process.STARTUPINFO()
+        StartupInfo.hStdOutput = self.hChildStdoutWr
+        StartupInfo.hStdError  = self.hChildStderrWr
+        StartupInfo.hStdInput  = self.hChildStdinRd
+        StartupInfo.dwFlags = win32process.STARTF_USESTDHANDLES
+        
+        # create the process
+        cmdline = ' '.join([_cmdLineQuote(a) for a in args])
+        self.hProcess, hThread, dwPid, dwTid = \
+            win32process.CreateProcess(command,     # name
+                                       cmdline,     # command line
+                                       None,        # process security attributes
+                                       None,        # primary thread security attributes
+                                       1,           # handles are inherited
+                                       0,           # creation flags
+                                       environment, # if NULL, use parent environment
+                                       path,        # current directory
+                                       StartupInfo) # STARTUPINFO pointer 
+
+        
+
+        # close handles which only the child will use
+        win32file.CloseHandle(self.hChildStderrWr)
+        win32file.CloseHandle(self.hChildStdoutWr)
+        win32file.CloseHandle(self.hChildStdinRd)
+        
+        # Begin reading on stdout and stderr, before we have output on them.
+        self.readOutOp.initiateOp(self.hChildStdoutRd, self.outBuffer)
+        self.readErrOp.initiateOp(self.hChildStderrRd, self.errBuffer)
+        # Read stdin which was opened in duplex mode so we can detect when
+        # the child closed their end of the pipe.
+        self.readInOp.initiateOp(self.hChildStdinWr, self.inBuffer)
+
+        # When the process is done, call connectionLost().
+        # This function returns right away.  Note I call this after
+        # protocol.makeConnection to ensure that the protocol doesn't
+        # have processEnded called before protocol.makeConnection.
+        self.notifyOnExit()
+        
+        # notify protocol by calling protocol.makeConnection and specifying
+        # ourself as the transport.
+        self.protocol.makeConnection(self)
+        
+        
+        
+    def notifyOnExit(self):
+        # Pass the process handle to the thread via a key into a global dict
+        self.processHandleKey = counter.next()
+        self.needWaiting[self.processHandleKey] = self.hProcess
+        self.phandleToTransport[self.hProcess] = self
+            
+        # If there are available threads, use one of them
+        if len(self.availableThreads) > 0:
+            self.wfmoThread = self.availableThreads[0]
+            self.threadToNumProcessHandles[self.wfmoThread] += 1
+            # Update used/available thread lists
+            if self.threadToNumProcessHandles[self.wfmoThread] == 63:
+                self.usedThreads.append(self.wfmoThread)
+                self.availableThreads.remove(self.wfmoThread)
+            
+            if self.threadToMsgWindowCreated[self.wfmoThread] is False:
+                # Make sure the window has been created so we can send messages to it
+                val = WaitForSingleObject(self.threadToMsgWindowCreationEvent[self.wfmoThread], INFINITE)
+                if val != WAIT_OBJECT_0:
+                    raise RuntimeError("WaitForSingleObject returned %d.  It should only return %d" % (val, WAIT_OBJECT_0))
+            # Notify the thread that it should wait on the process handle.
+            if win32api.PostMessage(
+                                self.threadToMsgWindow[self.wfmoThread],
+                                WM_NEW_PHANDLE, # message 
+                                self.processHandleKey, # wParam
+                                0 # lParam
+                                ) == 0:
+                raise Exception("Failed to post thread message!")
+        else:
+            # Create a new thread and wait on the proc handle
+            self.wfmoThread = threading.Thread(
+                target=self.doWaitForProcessExit,
+                name="iocpreactor.process.Process.waitForProcessExit pid=%d" % self.realPid)
+            # Create a window creation event that will be triggered from the thread
+            self.threadToMsgWindowCreationEvent[self.wfmoThread] = CreateEvent(None, 0, 0, None)
+            self.threadToMsgWindowCreated[self.wfmoThread] = False
+            self.threadToNumProcessHandles[self.wfmoThread] = 1
+            self.availableThreads.append(self.wfmoThread)
+            self.phandleKeyToThreadHandle[self.processHandleKey] = self.wfmoThread
+            self.wfmoThread.setDaemon(True)
+            self.wfmoThread.start()
+    
+    def doWaitForProcessExit(self):       
+        # Create a hidden window that will receive messages for things
+        # like adding new handles to wait on or quitting the thread.
+        # I use the Button class because I'm too lazy to register my own.
+        theWindow = win32gui.CreateWindow("Button", # lpClassName
+                                          "",       # lpWindowName
+                                          0,        # dwStyle
+                                          0,        # x
+                                          0,        # y
+                                          0,        # width
+                                          0,        # height
+                                          0,        # parent
+                                          0,        # menu
+                                          0,        # hInstance
+                                          None      # lParam
+                                          )
+        # list of process handles to wait for                     
+        handles = []
+        # First time through add first process handle to list
+        handles.append(self.needWaiting[self.processHandleKey])
+        # Save window so IO thread can wake us up with it
+        threadHandle = self.phandleKeyToThreadHandle[self.processHandleKey]
+        self.threadToMsgWindow[threadHandle] = theWindow
+        self.threadToNumEnded[self.wfmoThread] = 0
+
+        # Signal an event so IO thread knows that window
+        # is successfully created so it can call PostMessage.
+        # Note that this line is intentionally placed after setting
+        # threadToMsgWindow so that we don't attempt to lookup a msg window
+        # in the IO thread before defining it here.
+        self.threadToMsgWindowCreated[self.wfmoThread] = True
+        SetEvent(self.threadToMsgWindowCreationEvent[self.wfmoThread])
+        
+        while True:
+            val = MsgWaitForMultipleObjects(handles, 0, INFINITE, QS_POSTMESSAGE | QS_ALLEVENTS)
+            if val >= WAIT_OBJECT_0 and val < WAIT_OBJECT_0 + len(handles):
+                phandle = handles[val - WAIT_OBJECT_0]
+                # Remove process handle from wait list
+                handles.remove(phandle)
+                # Tell transport process ended
+                transport = self.phandleToTransport[phandle]
+                self.reactor.callFromThread(transport.processEnded)
+            elif val == WAIT_OBJECT_0 + len(handles):
+                # We were interrupted by the IO thread calling PostMessage
+                status, msg = win32gui.PeekMessage(theWindow,
+                                                   0,
+                                                   0,
+                                                   win32con.PM_REMOVE)
+                while status != 0:
+                    if msg[1] == WM_NEW_PHANDLE:
+                        # Add a process handle to wait list
+                        phandleKey = msg[2]
+                        handles.append(self.needWaiting[phandleKey])
+                    elif msg[1] == WM_CLOSE_THREAD:
+                        # Break out of while loop so thread will exit
+                        break
+                    else:
+                        # Drop all other messages, since we receive all messages, not
+                        # just WM_NEW_PHANDLE and WM_CLOSE_THREAD.
+                        pass
+                    
+                    status, msg = win32gui.PeekMessage(theWindow,
+                                                       0,
+                                                       0,
+                                                       win32con.PM_REMOVE)
+            else:
+                raise Exception("MsgWaitForMultipleObjects returned unknown value: %s" % str(val))
+
+    def signalProcess(self, signalID):
+        if signalID in ("INT", "TERM", "KILL"):
+            win32process.TerminateProcess(self.hProcess, 1)
+
+    def startWriting(self):
+        if not self.writing:
+            self.writing = True
+            b = buffer(self.writeBuffer, self.offset, self.offset + self.bufferSize)
+            self.writeInOp.initiateOp(self.hChildStdinWr, b)
+
+    def stopWriting(self):
+        self.writing = False
+
+    def writeDone(self, bytes):
+        self.writing = False
+        self.offset += bytes
+        self.writeBufferedSize -= bytes
+        if self.offset == len(self.writeBuffer):
+            self.writeBuffer = ""
+            self.offset = 0
+        if self.writeBuffer == "":
+            self.writing = False
+            # If there's nothing else to write and we're closing,
+            # do it now.
+            if self.closingStdin:
+                self._closeStdin()
+                self.connectionLostNotify()
+        else:
+            self.startWriting()
+            
+    def write(self, data):
+        """Write data to the process' stdin."""
+        self.writeBuffer += data
+        self.writeBufferedSize += len(data)
+        if not self.writing:
+            self.startWriting()
+
+    def writeSequence(self, seq):
+        """Write a list of strings to the physical connection.
+
+        If possible, make sure that all of the data is written to
+        the socket at once, without first copying it all into a
+        single string.
+        """
+        self.write("".join(seq))
+
+    def closeStdin(self):
+        """Close the process' stdin."""
+        if not self.closingStdin:
+            self.closingStdin = True
+            if not self.writing:
+                self._closeStdin()
+                self.connectionLostNotify()
+
+    def _closeStdin(self):
+        if hasattr(self, "hChildStdinWr"):
+            win32file.CloseHandle(self.hChildStdinWr)
+            del self.hChildStdinWr
+            self.closingStdin = False
+            self.closedStdin = True
+
+    def closeStderr(self):
+        if hasattr(self, "hChildStderrRd"):
+            win32file.CloseHandle(self.hChildStderrRd)
+            del self.hChildStderrRd
+            self.closedStderr = True
+            self.connectionLostNotify()
+
+    def closeStdout(self):
+        if hasattr(self, "hChildStdoutRd"):
+            win32file.CloseHandle(self.hChildStdoutRd)
+            del self.hChildStdoutRd
+            self.closedStdout = True
+            self.connectionLostNotify()
+
+    def loseConnection(self):
+        """Close the process' stdout, in and err."""
+        self.closeStdin()
+        self.closeStdout()
+        self.closeStderr()
+
+    def outConnectionLost(self):
+        self.closeStdout() # in case process closed it, not us
+        self.protocol.outConnectionLost()
+
+    def errConnectionLost(self):
+        self.closeStderr() # in case process closed it
+        self.protocol.errConnectionLost()
+
+    def inConnectionLost(self):
+        self._closeStdin()
+        self.protocol.inConnectionLost()
+        self.connectionLostNotify()
+
+    def connectionLostNotify(self):
+        """Will be called 3 times, for stdout/err/in."""
+        self.closedNotifies = self.closedNotifies + 1
+        if self.closedNotifies == 3:
+            self.closed = 1
+            if self.exited:
+                self.connectionLost()
+        
+    def processEnded(self):
+        self.threadToNumEnded[self.wfmoThread] += 1
+        # Decrement proc handle count for thread
+        self.threadToNumProcessHandles[self.wfmoThread] -= 1
+        # If we go from 63 to 62 phandles for the thread, mark it available.
+        if self.threadToNumProcessHandles[self.wfmoThread] == 62:
+            self.availableThreads.append(self.wfmoThread)
+            self.usedThreads.remove(self.wfmoThread)
+        # If we go to 0 phandles, end the thread
+        elif self.threadToNumProcessHandles[self.wfmoThread] == 0:
+            # Mark thread as unavailable
+            self.availableThreads.remove(self.wfmoThread)
+            # Notify the thread that it should exit.
+            if not self.threadToMsgWindowCreated[self.wfmoThread]:
+                val = WaitForSingleObject(self.threadToMsgWindowCreationEvent[self.wfmoThread], INFINITE)
+                if val != WAIT_OBJECT_0:
+                    raise RuntimeError("WaitForSingleObject returned %d.  It should only return %d" % (val, WAIT_OBJECT_0))
+            # Notify the thread that it should wait on the process handle.
+            win32api.PostMessage(
+                                self.threadToMsgWindow[self.wfmoThread], # thread id
+                                WM_CLOSE_THREAD, # message 
+                                self.processHandleKey, # wParam
+                                0 # lParam
+                                )
+            
+            # Cleanup thread resources
+            del self.threadToNumProcessHandles[self.wfmoThread]
+            del self.threadToMsgWindowCreated[self.wfmoThread]
+            del self.wfmoThread
+        
+        # Cleanup process handle resources
+        del self.needWaiting[self.processHandleKey]
+        del self.phandleToTransport[self.hProcess]
+        
+        self.exited = True    
+        # If all 3 stdio handles are closed, call connectionLost
+        if self.closed:
+            self.connectionLost()
+            
+    def connectionLost(self, reason=None):
+        """Shut down resources."""
+        # Get the exit status and notify the protocol
+        exitCode = win32process.GetExitCodeProcess(self.hProcess)
+        if exitCode == 0:
+            err = error.ProcessDone(exitCode)
+        else:
+            err = error.ProcessTerminated(exitCode)
+        self.protocol.processEnded(failure.Failure(err))
+
+
+components.backwardsCompatImplements(Process)
Index: twisted/internet/iocpreactor/ops.py
===================================================================
--- twisted/internet/iocpreactor/ops.py	(revision 14502)
+++ twisted/internet/iocpreactor/ops.py	(working copy)
@@ -128,3 +128,70 @@
         if res:
             raise error.getConnectError((res, os.strerror(res)))
 
+## Define custom xxxOp classes to handle IO operations related
+## to stdout/err/in for the process transport.
+class ReadOutOp(OverlappedOp):
+    def ovDone(self, ret, bytes, (handle, buffer)):
+        if ret or not bytes:
+            self.transport.outConnectionLost()
+        else:
+            self.transport.protocol.outReceived(buffer[:bytes])
+            # Keep reading
+            try:
+                self.initiateOp(handle, buffer)
+            except WindowsError, e:
+                if e.strerror == "The pipe has been ended":
+                    self.transport.outConnectionLost()
+                else:
+                    raise e
+
+    def initiateOp(self, handle, buffer):
+        self.reactor.issueReadFile(handle, buffer, self.ovDone, (handle, buffer))
+
+class ReadErrOp(OverlappedOp):
+    def ovDone(self, ret, bytes, (handle, buffer)):
+        if ret or not bytes:
+            self.transport.errConnectionLost()
+        else:
+            self.transport.protocol.errReceived(buffer[:bytes])
+            # Keep reading
+            try:
+                self.initiateOp(handle, buffer)
+            except WindowsError, e:
+                if e.strerror == "The pipe has been ended":
+                    self.transport.errConnectionLost()
+                else:
+                    raise e
+
+    def initiateOp(self, handle, buffer):
+        self.reactor.issueReadFile(handle, buffer, self.ovDone, (handle, buffer))
+
+class WriteInOp(OverlappedOp):
+    def ovDone(self, ret, bytes, (handle, buffer)):
+        if ret or not bytes:
+            self.transport.inConnectionLost()
+        else:
+            self.transport.writeDone(bytes)
+
+    def initiateOp(self, handle, buffer):
+        self.reactor.issueWriteFile(handle, buffer, self.ovDone, (handle, buffer))
+
+class ReadInOp(OverlappedOp):
+    """Stdin pipe will be opened in duplex mode.  The parent will read
+    stdin to detect when the child closes it so we can close our end.
+    """
+    def ovDone(self, ret, bytes, (handle, buffer)):
+        if ret or not bytes:
+            self.transport.inConnectionLost()
+        else:
+            # Keep reading
+            try:
+                self.initiateOp(handle, buffer)
+            except WindowsError, e:
+                if e.strerror == "The pipe has been ended":
+                    self.transport.inConnectionLost()
+                else:
+                    raise e
+                    
+    def initiateOp(self, handle, buffer):
+        self.reactor.issueReadFile(handle, buffer, self.ovDone, (handle, buffer))
