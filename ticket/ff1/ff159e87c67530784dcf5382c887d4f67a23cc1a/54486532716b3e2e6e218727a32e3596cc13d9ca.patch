Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 29941)
+++ twisted/internet/defer.py	(working copy)
@@ -904,7 +904,7 @@
 
 
 
-def _inlineCallbacks(result, g, deferred):
+def _inlineCallbacks(result, g, deferred, state):
     """
     See L{inlineCallbacks}.
     """
@@ -913,6 +913,8 @@
     # loop and the waiting variable solve that by manually unfolding the
     # recursion.
 
+    # See _startInlineCallbacks comments about 'state' argument
+
     waiting = [True, # waiting for result?
                None] # result
 
@@ -927,7 +929,7 @@
         except StopIteration:
             # fell off the end, or "return" statement
             deferred.callback(None)
-            return deferred
+            return
         except _DefGen_Return, e:
             # returnValue() was called; time to give a result to the original
             # Deferred.  First though, let's try to identify the potentially
@@ -967,10 +969,10 @@
                         appCodeTrace.tb_frame.f_code.co_name),
                     DeprecationWarning, filename, lineno)
             deferred.callback(e.value)
-            return deferred
+            return
         except:
             deferred.errback()
-            return deferred
+            return
 
         if isinstance(result, Deferred):
             # a deferred was yielded, get the result.
@@ -979,14 +981,24 @@
                     waiting[0] = False
                     waiting[1] = r
                 else:
-                    _inlineCallbacks(r, g, deferred)
+                    # We are not waiting for deferred result any more
+                    state[0] = None
+                    if state[1]: # if cancelling in progress
+                        # In this case r is normally a
+                        #   result of cancel (Failure(CancelledError))
+                        g.close() # stop generator
+                        if isinstance(r, failure.Failure): # trap CancelledError
+                            r.trap(CancelledError)
+                    else:
+                        _inlineCallbacks(r, g, deferred, state)
 
             result.addBoth(gotResult)
             if waiting[0]:
                 # Haven't called back yet, set flag so that we get reinvoked
                 # and return from the loop
                 waiting[0] = False
-                return deferred
+                state[0] = result # store deferred result we are waiting for
+                return
 
             result = waiting[1]
             # Reset waiting to initial values for next loop.  gotResult uses
@@ -999,6 +1011,44 @@
             waiting[1] = None
 
 
+
+def _startInlineCallbacks(g, deferred):
+    """
+    This function prepares and starts generator processing. See
+    L{inlineCallbacks} for details about this generator.
+
+    @param g: generator to be processed
+
+    @param deferred: L{Deferred} to be callbacked with generator result
+    """
+
+    # Let's:
+    #   - G is a generator decorated with inlineCallbacks
+    #   - D is a Deferred returned by G
+    #   - C is a Deferred awaited by G with yield
+
+    # `state` is a placeholder for information about current situation:
+    #   1. Deferred (C) we are waiting for (when G yields C)
+    #      This information will be provided by _inlineCallbacks.
+    #   2. Flag "is there a cancelling in progress or not". Cancelling process
+    #      started when D finished while we are waiting for C
+    state = [
+        None, # deferred result we are waiting for or None
+        False, # cancelling flag
+    ]
+
+    # start cancelling process when `deferred` finished while we are waiting
+    # for result (C)
+    def finish(result):
+        if state[0] is not None:
+            state[1] = True
+            state[0].cancel()
+            state[0] = None
+        return result
+    deferred.addBoth(finish)
+
+    _inlineCallbacks(None, g, deferred, state)
+
     return deferred
 
 
@@ -1042,9 +1092,15 @@
                 # will trigger an errback
                 raise Exception('DESTROY ALL LIFE')
         thingummy = inlineCallbacks(thingummy)
+
+    You can cancel (or even errback or callback) the L{Deferred} returned from
+    your C(inlineCallbacks) generator before it errback or callback by generator
+    result. In this case yield throws standard C(GeneratorExit) exception. And
+    L{Deferred} that yield was waiting for will be cancelled too and it's
+    C(CancelledError) will be trapped.
     """
     def unwindGenerator(*args, **kwargs):
-        return _inlineCallbacks(None, f(*args, **kwargs), Deferred())
+        return _startInlineCallbacks(f(*args, **kwargs), Deferred())
     return mergeFunctionMetadata(f, unwindGenerator)
 
 
Index: twisted/test/test_defgen.py
===================================================================
--- twisted/test/test_defgen.py	(revision 29941)
+++ twisted/test/test_defgen.py	(working copy)
@@ -179,6 +179,7 @@
 ## syntax error in Python 2.4 and before.
 inlineCallbacksTestsSource = '''
 from twisted.internet.defer import inlineCallbacks, returnValue
+from twisted.python.failure import Failure
 
 class InlineCallbacksTests(BaseDefgenTests, unittest.TestCase):
     # First provide all the generator impls necessary for BaseDefgenTests
@@ -238,6 +239,30 @@
         returnValue(0)
     _genStackUsage2 = inlineCallbacks(_genStackUsage2)
 
+
+    def _genCascadeCancellingTesting(
+        self, result_holder=[None], getChildThing=getThing
+    ):
+        """
+        Generator for testing cascade cancelling cases
+
+        @param result_holder: A placeholder to report about C{GeneratorExit}
+            exception
+
+        @param getChildThing: Some callable returning L{defer.Deferred} that we
+            awaiting (with C{yield})
+        """
+        try:
+            x = yield getChildThing()
+        except GeneratorExit:
+            # Report about GeneratorExit exception
+            result_holder[0] = 'GeneratorExit'
+            # Stop generator with GeneratorExit reraising
+            raise
+        returnValue(x)
+    _genCascadeCancellingTesting = inlineCallbacks(_genCascadeCancellingTesting)
+
+
     # Tests unique to inlineCallbacks
 
     def testYieldNonDeferrred(self):
@@ -270,6 +295,148 @@
 
         return _return().addCallback(self.assertEqual, 6)
 
+
+    def test_cascadeCancellingOnCallback(self):
+        """
+        Let's:
+            - G is a generator decorated with C{inlineCallbacks}
+            - D is a L{defer.Deferred} returned by G
+            - C is a L{defer.Deferred} awaited by G with C{yield}
+
+        When D callbacked, C will be immediately cancelled.
+        """
+        child_result_holder = ['FAILURE']
+        def getChildThing():
+            d = Deferred()
+            def _eb(result):
+                if result.check(defer.CancelledError):
+                    child_result_holder[0] = 'SUCCESS'
+                return result
+            d.addErrback(_eb)
+            return d
+        d = self._genCascadeCancellingTesting(getChildThing=getChildThing)
+        d.callback(None)
+        self.assertEqual(
+            child_result_holder[0], 'SUCCESS', "no cascade cancelling occurs"
+        )
+
+
+    def test_cascadeCancellingOnErrback(self):
+        """
+        Let's:
+            - G is a generator decorated with C{inlineCallbacks}
+            - D is a L{defer.Deferred} returned by G
+            - C is a L{defer.Deferred} awaited by G with C{yield}
+
+        When D errbacked, C will be immediately cancelled.
+        """
+        child_result_holder = ['FAILURE']
+        def getChildThing():
+            d = Deferred()
+            def _eb(result):
+                if result.check(defer.CancelledError):
+                    child_result_holder[0] = 'SUCCESS'
+                return result
+            d.addErrback(_eb)
+            return d
+        d = self._genCascadeCancellingTesting(getChildThing=getChildThing)
+        d.addErrback(lambda result: None)
+        d.errback(RuntimeError('test'))
+        self.assertEqual(
+            child_result_holder[0], 'SUCCESS', "no cascade cancelling occurs"
+        )
+
+
+    def test_cascadeCancellingOnCancel(self):
+        """
+        Let's:
+            - G is a generator decorated with C{inlineCallbacks}
+            - D is a L{defer.Deferred} returned by G
+            - C is a L{defer.Deferred} awaited by G with C{yield}
+
+        When D cancelled, C will be immediately cancelled too.
+        """
+        child_result_holder = ['FAILURE']
+        def getChildThing():
+            d = Deferred()
+            def _eb(result):
+                if result.check(defer.CancelledError):
+                    child_result_holder[0] = 'SUCCESS'
+                return result
+            d.addErrback(_eb)
+            return d
+        d = self._genCascadeCancellingTesting(getChildThing=getChildThing)
+        d.addErrback(lambda result: None)
+        d.cancel()
+        self.assertEqual(
+            child_result_holder[0], 'SUCCESS', "no cascade cancelling occurs"
+        )
+
+
+    def test_trapChildCancelledErrorOnCascadeCancelling(self):
+        """
+        Let's:
+            - G is a generator decorated with C{inlineCallbacks}
+            - D is a L{defer.Deferred} returned by G
+            - C is a L{defer.Deferred} awaited by G with C{yield}
+
+        When D cancelled, CancelledError from cascade cancelled C will be
+        trapped
+        """
+        d = self._genCascadeCancellingTesting()
+        d.addErrback(lambda fail: None)
+        d.cancel()
+        def check_errors():
+            errors = self.flushLoggedErrors(defer.CancelledError)
+            self.assertEquals(len(errors), 0, "CancelledError not trapped")
+        reactor.callLater(0, check_errors)
+
+
+    def test_dontTrapChildFailureOnCascadeCancelling(self):
+        """
+        Let's:
+            - G is a generator decorated with C{inlineCallbacks}
+            - D is a L{defer.Deferred} returned by G
+            - C is a L{defer.Deferred} awaited by G with C{yield}
+
+        When D cancelled and some failure (F) occurs during cascade cancelling,
+        it (F) will be not trapped (in contrast with CancelledError)
+        """
+        class MyError(ValueError):
+            pass
+        def getChildThing():
+            d = Deferred()
+            def _eb(result):
+                raise MyError()
+            d.addErrback(_eb)
+            return d
+        d = self._genCascadeCancellingTesting(getChildThing=getChildThing)
+        d.addErrback(lambda fail: None)
+        d.cancel()
+        def check_errors():
+            errors = self.flushLoggedErrors(MyError)
+            self.assertEquals(len(errors), 1, "exception consumed")
+            errors[0].trap(MyError)
+        reactor.callLater(0, check_errors)
+
+
+    def test_generatorStopsWhenCancelling(self):
+        """
+        Let's:
+            - G is a generator decorated with C{inlineCallbacks}
+            - D is a L{defer.Deferred} returned by G
+            - C is a L{defer.Deferred} awaited by G with C{yield}
+
+        When D cancelled, G will be immediately stopped
+        """
+        result_holder = [None]
+        d = self._genCascadeCancellingTesting(result_holder=result_holder)
+        d.addErrback(lambda fail: None)
+        d.cancel()
+        self.assertEqual(
+            result_holder[0], 'GeneratorExit',
+            "generator does not stop with GeneratorExit"
+        )
 '''
 
 if sys.version_info > (2, 5):
