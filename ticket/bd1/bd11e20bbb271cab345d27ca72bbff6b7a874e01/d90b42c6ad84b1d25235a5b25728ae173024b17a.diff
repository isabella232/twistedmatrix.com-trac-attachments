diff --git twisted/logger/test/test_global.py twisted/logger/test/test_global.py
index 5e7e88d..5ebdfc0 100644
--- twisted/logger/test/test_global.py
+++ twisted/logger/test/test_global.py
@@ -11,7 +11,7 @@ import io
 
 from twisted.trial import unittest
 
-from .._file import textFileLogObserver
+from .._format import formatEvent
 from .._observer import LogPublisher
 from .._logger import Logger
 from .._global import LogBeginner
@@ -41,18 +41,31 @@ def compareEvents(test, actualEvents, expectedEvents):
 
     for event in expectedEvents:
         allMergedKeys |= set(event.keys())
+        event['_test_format'] = formatEvent(event)
 
     def simplify(event):
         copy = event.copy()
         for key in event.keys():
             if key not in allMergedKeys:
                 copy.pop(key)
+        copy['_test_format'] = formatEvent(event)
         return copy
 
     simplifiedActual = [simplify(event) for event in actualEvents]
     test.assertEqual(simplifiedActual, expectedEvents)
 
 
+class InMemoryObserver(object):
+
+    def __init__(self):
+        self._events = []
+
+    def __call__(self, event):
+        self._events.append(event)
+
+    def getAllEvents(self):
+        return self._events[:]
+
 
 class LogBeginnerTests(unittest.TestCase):
     """
@@ -159,16 +172,14 @@ class LogBeginnerTests(unittest.TestCase):
         message warning the user that they previously began logging, and add
         the new log observers.
         """
-        events1 = []
-        events2 = []
-        fileHandle = io.StringIO()
-        textObserver = textFileLogObserver(fileHandle)
+        observer1 = InMemoryObserver()
+        observer2 = InMemoryObserver()
         self.publisher(dict(event="prebuffer"))
         firstFilename, firstLine = nextLine()
-        self.beginner.beginLoggingTo([events1.append, textObserver])
+        self.beginner.beginLoggingTo([observer1])
         self.publisher(dict(event="postbuffer"))
         secondFilename, secondLine = nextLine()
-        self.beginner.beginLoggingTo([events2.append, textObserver])
+        self.beginner.beginLoggingTo([observer2])
         self.publisher(dict(event="postwarn"))
         warning = dict(
             log_format=MORE_THAN_ONCE_WARNING,
@@ -178,7 +189,7 @@ class LogBeginnerTests(unittest.TestCase):
         )
 
         compareEvents(
-            self, events1,
+            self, observer1.getAllEvents(),
             [
                 dict(event="prebuffer"),
                 dict(event="postbuffer"),
@@ -186,13 +197,8 @@ class LogBeginnerTests(unittest.TestCase):
                 dict(event="postwarn")
             ]
         )
-        compareEvents(self, events2, [warning, dict(event="postwarn")])
-
-        output = fileHandle.getvalue()
-        self.assertIn('<{0}:{1}>'.format(firstFilename, firstLine),
-                      output)
-        self.assertIn('<{0}:{1}>'.format(secondFilename, secondLine),
-                      output)
+        compareEvents(
+            self, observer2.getAllEvents(), [warning, dict(event="postwarn")])
 
 
     def test_criticalLogging(self):
@@ -299,6 +305,7 @@ class LogBeginnerTests(unittest.TestCase):
         compareEvents(
             self, x,
             [dict(
+                log_format="{filename}:{lineno}: {category}: {warning}",
                 warning="another message",
                 category=(
                     DeprecationWarning.__module__ + "." +
