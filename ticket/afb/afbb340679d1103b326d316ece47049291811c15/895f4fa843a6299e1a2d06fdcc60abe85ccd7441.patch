Index: twisted/topfiles/4817.removal
===================================================================
--- twisted/topfiles/4817.removal	(revision 30592)
+++ twisted/topfiles/4817.removal	(working copy)
@@ -1 +1,2 @@
-__getitem__ __getslice__ and __eq__ (tuple comparison, indexing) removed from twisted.internet.IPv4Address and twisted.internet.UNIXAddress classes
+__getitem__ __getslice__ and __eq__ (tuple comparison, indexing) removed from twisted.internet.address.IPv4Address and twisted.internet.address.UNIXAddress classes
+UNIXAddress and IPv4Address properties _bwHack are now deprecated in twisted.internet.address
Index: twisted/internet/address.py
===================================================================
--- twisted/internet/address.py	(revision 30592)
+++ twisted/internet/address.py	(working copy)
@@ -21,13 +21,6 @@
     @ivar port: An integer representing the port number.
     """
 
-    # _bwHack is given to old users who think we are a tuple. They expected
-    # addr[0] to define the socket type rather than the address family, so
-    # the value comes from a different namespace than the new .type value:
-
-    #  type = map[_bwHack]
-    # map = { 'SSL': 'TCP', 'INET': 'TCP', 'INET_UDP': 'UDP' }
-
     implements(IAddress)
 
     compareAttributes = ('type', 'host', 'port')
@@ -37,7 +30,9 @@
         self.type = type
         self.host = host
         self.port = port
-        self._bwHack = _bwHack
+        if _bwHack is not None:
+            warnings.warn("twisted.internet.address.IPv4Address._bwHack is deprecated since Twisted 11.0",
+                    DeprecationWarning, stacklevel=2)
 
     def __repr__(self):
         return 'IPv4Address(%s, %r, %d)' % (self.type, self.host, self.port)
@@ -56,9 +51,11 @@
 
     compareAttributes = ('name', )
 
-    def __init__(self, name, _bwHack='UNIX'):
+    def __init__(self, name, _bwHack = None):
         self.name = name
-        self._bwHack = _bwHack
+        if _bwHack is not None:
+            warnings.warn("twisted.internet.address.UNIXAddress._bwHack is deprecated since Twisted 11.0",
+                    DeprecationWarning, stacklevel=2)
 
     def __eq__(self, other):
         """
Index: twisted/internet/test/test_address.py
===================================================================
--- twisted/internet/test/test_address.py	(revision 30592)
+++ twisted/internet/test/test_address.py	(working copy)
@@ -63,40 +63,64 @@
         self._stringRepresentation(repr)
 
 
+    def test_differentNamesComparison(self):
+        """
+        Check that comparison operators work correctly on address objects
+        when a different name is passed in
+        """
+        self.assertFalse(self.buildAddress() == self.buildDifferentAddress())
+        self.assertTrue(self.buildAddress() != self.buildDifferentAddress())
 
+    def assertDeprecations(self, testMethod, message):
+        warnings = self.flushWarnings([testMethod])
+        self.assertEquals(warnings[0]['category'], DeprecationWarning)
+        self.assertEquals(warnings[0]['message'], message)
+        self.assertEquals(len(warnings),1)
+
+
 class IPv4AddressTestCaseMixin(AddressTestCaseMixin):
     addressArgSpec = (("type", "%s"), ("host", "%r"), ("port", "%d"))
 
 
-
 class IPv4AddressTCPTestCase(unittest.TestCase, IPv4AddressTestCaseMixin):
     def buildAddress(self):
         return IPv4Address("TCP", "127.0.0.1", 0)
 
+    def buildDifferentAddress(self):
+        return IPv4Address("TCP", "127.0.0.2", 0)
 
+    def test_bwHackDeprecation(self):
+        message = "twisted.internet.address.IPv4Address._bwHack is deprecated since Twisted 11.0"
+        address = IPv4Address("TCP", "127.0.0.3", 0, _bwHack="TCP")
+        return self.assertDeprecations(self.test_bwHackDeprecation, message)
 
+
 class IPv4AddressUDPTestCase(unittest.TestCase, IPv4AddressTestCaseMixin):
     def buildAddress(self):
         return IPv4Address("UDP", "127.0.0.1", 0)
 
+    def buildDifferentAddress(self):
+        return IPv4Address("UDP", "127.0.0.2", 0)
 
+    def test_bwHackDeprecation(self):
+        message = "twisted.internet.address.IPv4Address._bwHack is deprecated since Twisted 11.0"
+        address = IPv4Address("UDP", "127.0.0.3", 0, _bwHack="UDP")
+        return self.assertDeprecations(self.test_bwHackDeprecation, message)
 
+
 class UNIXAddressTestCase(unittest.TestCase, AddressTestCaseMixin):
     addressArgSpec = (("name", "%r"),)
 
     def setUp(self):
         self._socketAddress = self.mktemp()
 
-
     def buildAddress(self):
         return UNIXAddress(self._socketAddress)
 
-    def test_differentNamesComparison(self):
-        """
-        Check that comparison operators work correctly on UNIXAddress objects
-        when a different name is passed in
-        """
-        self.assertFalse(UNIXAddress(self.mktemp()) ==
-                UNIXAddress(self.mktemp()))
-        self.assertTrue(UNIXAddress(self.mktemp()) !=
-                UNIXAddress(self.mktemp()))
+    def buildDifferentAddress(self):
+        return UNIXAddress(self.mktemp())
+
+    def test_bwHackDeprecation(self):
+        message = "twisted.internet.address.UNIXAddress._bwHack is deprecated since Twisted 11.0"
+        address = UNIXAddress(self.mktemp(), _bwHack='UNIX')
+        return self.assertDeprecations(self.test_bwHackDeprecation, message)
