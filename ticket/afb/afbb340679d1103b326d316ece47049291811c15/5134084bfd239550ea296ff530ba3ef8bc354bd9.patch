Index: twisted/test/test_udp.py
===================================================================
--- twisted/test/test_udp.py	(revision 30567)
+++ twisted/test/test_udp.py	(working copy)
@@ -1,5 +1,5 @@
 # -*- test-case-name: twisted.test.test_udp -*-
-# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2011 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
@@ -113,7 +113,10 @@
 
 class UDPTestCase(unittest.TestCase):
 
-    def testOldAddress(self):
+    def test_oldAddress(self):
+        """
+        Assert that the L{DatagramProtocol} is correctly connected to a UDP port
+        """
         server = Server()
         d = server.startedDeferred = defer.Deferred()
         p = reactor.listenUDP(0, server, interface="127.0.0.1")
@@ -122,12 +125,12 @@
             self.assertEquals(addr.type, 'UDP')
             return p.stopListening()
         return d.addCallback(cbStarted)
-    testOldAddress.suppress = [
-        util.suppress(message='IPv4Address.__getitem__',
-                      category=DeprecationWarning)]
 
-
-    def testStartStop(self):
+    def test_startStop(self):
+        """
+        Ensure that the protocol's L{startProtocol} and L{stopProtocol} methods
+        are called correctly
+        """
         server = Server()
         d = server.startedDeferred = defer.Deferred()
         port1 = reactor.listenUDP(0, server, interface="127.0.0.1")
@@ -139,9 +142,11 @@
             self.assertEquals(server.stopped, 1)
         return d.addCallback(cbStarted).addCallback(cbStopped)
 
-    def testRebind(self):
-        # Ensure binding the same DatagramProtocol repeatedly invokes all
-        # the right callbacks.
+    def test_rebind(self):
+        """
+        Ensure binding the same L{DatagramProtocol} repeatedly invokes all the
+        right callbacks
+        """
         server = Server()
         d = server.startedDeferred = defer.Deferred()
         p = reactor.listenUDP(0, server, interface="127.0.0.1")
@@ -157,14 +162,17 @@
         return d.addCallback(cbStarted, p)
 
 
-    def testBindError(self):
+    def test_bindError(self):
+        """
+        Assert that a L{CannotListenError} exception is raised when attempting
+        to bind a second protocol instance to an already bound port
+        """
         server = Server()
         d = server.startedDeferred = defer.Deferred()
         port = reactor.listenUDP(0, server, interface='127.0.0.1')
 
         def cbStarted(ignored):
             self.assertEquals(port.getHost(), server.transport.getHost())
-
             server2 = Server()
             self.assertRaises(
                 error.CannotListenError,
@@ -177,7 +185,11 @@
         d.addCallback(cbFinished)
         return d
 
-    def testSendPackets(self):
+    def test_sendPackets(self):
+        """
+        Sets up a client and server, sending data from former to latter, and
+        ensures the correct data is received
+        """
         server = Server()
         serverStarted = server.startedDeferred = defer.Deferred()
         port1 = reactor.listenUDP(0, server, interface="127.0.0.1")
@@ -247,8 +259,12 @@
         return d
 
 
-    def testConnectionRefused(self):
-        # assume no one listening on port 80 UDP
+    def test_connectionRefused(self):
+        """
+        Ensures that a L{connectionRefusedError} exception is raised when a
+        connection attempt is actively refused by the other end
+        Note: This test assumes no one is listening on port 80 UDP
+        """
         client = GoodClient()
         clientStarted = client.startedDeferred = defer.Deferred()
         port = reactor.listenUDP(0, client, interface="127.0.0.1")
@@ -284,7 +300,15 @@
         d.addCallback(cbFinished)
         return d
 
-    def testBadConnect(self):
+    def test_badConnect(self):
+        """
+        Ensure that:
+        A call to the transport's connect method fails with a
+        L{ValueError} when 'localhost' is passed as a host value.
+        A call to a transport's connect method fails with a L{RuntimeError}
+        when a successful call to the method has already been made with the
+        same parameters.
+        """
         client = GoodClient()
         port = reactor.listenUDP(0, client, interface="127.0.0.1")
         self.assertRaises(ValueError, client.transport.connect,
@@ -296,7 +320,7 @@
 
 
 
-    def testDatagramReceivedError(self):
+    def test_datagramReceivedError(self):
         """
         Test that when datagramReceived raises an exception it is logged but
         the port is not disconnected.
@@ -395,7 +419,11 @@
         return finalDeferred
 
 
-    def testPortRepr(self):
+    def test_portRepr(self):
+        """
+        Ensure the correct port number can be found in the string returned from
+        calling repr() on L{twisted.internet.udp.Port}
+        """
         client = GoodClient()
         p = reactor.listenUDP(0, client)
         portNo = str(p.getHost().port)
Index: twisted/topfiles/4817.bugfix
===================================================================
--- twisted/topfiles/4817.bugfix	(revision 0)
+++ twisted/topfiles/4817.bugfix	(revision 0)
@@ -0,0 +1 @@
+IPv4Address and UNIXAddress object comparison operators fixed
Index: twisted/topfiles/4817.removal
===================================================================
--- twisted/topfiles/4817.removal	(revision 0)
+++ twisted/topfiles/4817.removal	(revision 0)
@@ -0,0 +1 @@
+__getitem__ __getslice__ and __eq__ (tuple comparison, indexing) removed from twisted.internet.IPv4Address and twisted.internet.UNIXAddress classes
Index: twisted/internet/address.py
===================================================================
--- twisted/internet/address.py	(revision 30567)
+++ twisted/internet/address.py	(working copy)
@@ -1,4 +1,4 @@
-# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2011 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
@@ -39,16 +39,6 @@
         self.port = port
         self._bwHack = _bwHack
 
-    def __getitem__(self, index):
-        warnings.warn("IPv4Address.__getitem__ is deprecated.  Use attributes instead.",
-                      category=DeprecationWarning, stacklevel=2)
-        return (self._bwHack or self.type, self.host, self.port).__getitem__(index)
-
-    def __getslice__(self, start, stop):
-        warnings.warn("IPv4Address.__getitem__ is deprecated.  Use attributes instead.",
-                      category=DeprecationWarning, stacklevel=2)
-        return (self._bwHack or self.type, self.host, self.port)[start:stop]
-
     def __repr__(self):
         return 'IPv4Address(%s, %r, %d)' % (self.type, self.host, self.port)
 
@@ -70,16 +60,19 @@
         self.name = name
         self._bwHack = _bwHack
 
-    def __getitem__(self, index):
-        warnings.warn("UNIXAddress.__getitem__ is deprecated.  Use attributes instead.",
-                      category=DeprecationWarning, stacklevel=2)
-        return (self._bwHack, self.name).__getitem__(index)
+    def __eq__(self, other):
+        """
+        overriding L{util.FancyEqMixin} to ensure the os level samefile check
+        is done if the name attributes do not match.
+        """
+        res = super(UNIXAddress, self).__eq__(other)
+        if res == False:
+            try:
+                return os.path.samefile(self.name, other.name)
+            except OSError:
+                pass
+        return res
 
-    def __getslice__(self, start, stop):
-        warnings.warn("UNIXAddress.__getitem__ is deprecated.  Use attributes instead.",
-                      category=DeprecationWarning, stacklevel=2)
-        return (self._bwHack, self.name)[start:stop]
-
     def __repr__(self):
         return 'UNIXAddress(%r)' % (self.name,)
 
Index: twisted/internet/test/test_address.py
===================================================================
--- twisted/internet/test/test_address.py	(revision 30567)
+++ twisted/internet/test/test_address.py	(working copy)
@@ -1,4 +1,4 @@
-# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2011 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 import re
@@ -11,8 +11,10 @@
         """
         Test that two different address instances, sharing the same
         properties are considered equal, testing both __eq__ and __ne__ methods
+        note: When applied via UNIXAddress class, this uses the same filename
+        for both objects being compared
         """
-        self.assertEquals(self.buildAddress(), self.buildAddress())
+        self.assertTrue(self.buildAddress() == self.buildAddress())
         self.assertFalse(self.buildAddress() != self.buildAddress())
 
 
@@ -88,3 +90,13 @@
 
     def buildAddress(self):
         return UNIXAddress(self._socketAddress)
+
+    def test_differentNamesComparison(self):
+        """
+        Check that comparison operators work correctly on UNIXAddress objects
+        when a different name is passed in
+        """
+        self.assertFalse(UNIXAddress(self.mktemp()) ==
+                UNIXAddress(self.mktemp()))
+        self.assertTrue(UNIXAddress(self.mktemp()) !=
+                UNIXAddress(self.mktemp()))
