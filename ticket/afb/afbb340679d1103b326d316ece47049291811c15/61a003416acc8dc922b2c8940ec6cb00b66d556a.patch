Index: twisted/test/test_udp.py
===================================================================
--- twisted/test/test_udp.py	(revision 30564)
+++ twisted/test/test_udp.py	(working copy)
@@ -119,7 +119,7 @@
         p = reactor.listenUDP(0, server, interface="127.0.0.1")
         def cbStarted(ignored):
             addr = p.getHost()
-            self.assertEquals(addr, ('INET_UDP', addr.host, addr.port))
+            self.assertEquals(addr.type, 'UDP')
             return p.stopListening()
         return d.addCallback(cbStarted)
     testOldAddress.suppress = [
Index: twisted/internet/address.py
===================================================================
--- twisted/internet/address.py	(revision 30564)
+++ twisted/internet/address.py	(working copy)
@@ -9,9 +9,10 @@
 from zope.interface import implements
 
 from twisted.internet.interfaces import IAddress
+from twisted.python import util
 
 
-class IPv4Address(object):
+class IPv4Address(object, util.FancyEqMixin):
     """
     Object representing an IPv4 socket endpoint.
 
@@ -29,6 +30,8 @@
 
     implements(IAddress)
 
+    compareAttributes = ('type', 'host', 'port')
+
     def __init__(self, type, host, port, _bwHack = None):
         assert type in ('TCP', 'UDP')
         self.type = type
@@ -46,21 +49,12 @@
                       category=DeprecationWarning, stacklevel=2)
         return (self._bwHack or self.type, self.host, self.port)[start:stop]
 
-    def __eq__(self, other):
-        if isinstance(other, tuple):
-            return tuple(self) == other
-        elif isinstance(other, IPv4Address):
-            a = (self.type, self.host, self.port)
-            b = (other.type, other.host, other.port)
-            return a == b
-        return False
-
     def __repr__(self):
         return 'IPv4Address(%s, %r, %d)' % (self.type, self.host, self.port)
 
 
 
-class UNIXAddress(object):
+class UNIXAddress(object, util.FancyEqMixin):
     """
     Object representing a UNIX socket endpoint.
 
@@ -70,6 +64,8 @@
 
     implements(IAddress)
 
+    compareAttributes = ('name', )
+
     def __init__(self, name, _bwHack='UNIX'):
         self.name = name
         self._bwHack = _bwHack
@@ -84,22 +80,6 @@
                       category=DeprecationWarning, stacklevel=2)
         return (self._bwHack, self.name)[start:stop]
 
-    def __eq__(self, other):
-        if isinstance(other, tuple):
-            return tuple(self) == other
-        elif isinstance(other, UNIXAddress):
-            # First do the simple thing and check to see if the names are the
-            # same. If not, and the paths exist, check to see if they point to
-            # the same file.
-            if self.name == other.name:
-                return True
-            else:
-                try:
-                    return os.path.samefile(self.name, other.name)
-                except OSError:
-                    pass
-        return False
-
     def __repr__(self):
         return 'UNIXAddress(%r)' % (self.name,)
 
Index: twisted/internet/test/test_address.py
===================================================================
--- twisted/internet/test/test_address.py	(revision 30564)
+++ twisted/internet/test/test_address.py	(working copy)
@@ -10,9 +10,10 @@
     def test_addressComparison(self):
         """
         Test that two different address instances, sharing the same
-        properties are considered equal.
+        properties are considered equal, testing both __eq__ and __ne__ methods
         """
         self.assertEquals(self.buildAddress(), self.buildAddress())
+        self.assertFalse(self.buildAddress() != self.buildAddress())
 
 
     def _stringRepresentation(self, stringFunction):
