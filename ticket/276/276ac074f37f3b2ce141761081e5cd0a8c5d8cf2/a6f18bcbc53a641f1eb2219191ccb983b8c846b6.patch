diff -r 0bf8fc09142b example_tunnel_proxy.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/example_tunnel_proxy.py	Sun Apr 01 22:33:25 2012 -0700
@@ -0,0 +1,11 @@
+#! /usr/bin/env python
+
+from twisted.web import proxy
+from twisted.internet import reactor
+from twisted.python import log
+import sys
+log.startLogging(sys.stdout)
+
+ 
+reactor.listenTCP(8181, proxy.TunnelProxyFactory())
+reactor.run()
diff -r 0bf8fc09142b twisted/web/proxy.py
--- a/twisted/web/proxy.py	Wed Mar 28 20:40:51 2012 -0700
+++ b/twisted/web/proxy.py	Sun Apr 01 22:33:25 2012 -0700
@@ -23,10 +23,10 @@
 from urllib import quote as urlquote
 
 from twisted.internet import reactor
-from twisted.internet.protocol import ClientFactory
+from twisted.internet.protocol import ClientFactory, Protocol
 from twisted.web.resource import Resource
 from twisted.web.server import NOT_DONE_YET
-from twisted.web.http import HTTPClient, Request, HTTPChannel
+from twisted.web.http import HTTPClient, Request, HTTPChannel, HTTPFactory
 
 
 
@@ -165,7 +165,7 @@
 
 class Proxy(HTTPChannel):
     """
-    This class implements a simple web proxy.
+    This class implements a simple web proxy without CONNECT support.
 
     Since it inherits from L{twisted.web.http.HTTPChannel}, to use it you
     should do something like this::
@@ -182,6 +182,160 @@
 
 
 
+class TunnelProxyRequest (ProxyRequest):
+    """
+    A request processor which supports the TUNNEL method.
+    """
+    def process(self):
+        if self.method.upper() == 'CONNECT':
+            self._process_connect()
+        else:
+            return ProxyRequest.process(self)
+
+    def _process_connect(self):
+        try:
+            host, portStr = self.uri.split(':', 1)
+            port = int(portStr)
+        except ValueError:
+            # Either the connect parameter is not HOST:PORT or PORT is
+            # not an integer, in which case this request is invalid.
+            self.setResponseCode(400)
+            self.finish()
+        else:
+            restrictedToPort = self.channel.factory.restrictedToPort
+            if (restrictedToPort is not None) and (port != restrictedToPort):
+                self.setResponseCode(403, 'Forbidden port')
+                self.finish()
+            else:
+                self.reactor.connectTCP(host, port, TunnelProtocolFactory(self, host, port))
+
+
+
+class TunnelProxy (Proxy):
+    """
+    This class implements a simple web proxy with CONNECT support.
+
+    It inherits from L{Proxy} and expects
+    L{twisted.web.proxy.TunnelProxyFactory} as a factory.
+
+        f = TunnelProxyFactory()
+
+    Make the TunnelProxyFactory a listener on a port as per usual,
+    and you have a fully-functioning web proxy which supports CONNECT.
+    This should support typical web usage with common browsers.
+
+    @ivar _tunnelproto: This is part of a private interface between
+        TunnelProxy and TunnelProtocol. This is either None or a
+        TunnelProtocol connected to a server due to a CONNECT request.
+        If this is set, then the stream from the user agent is forwarded
+        to the target HOST:PORT of the CONNECT request.
+    """
+    requestFactory = TunnelProxyRequest
+
+    def __init__(self):
+        self._tunnelproto = None
+        Proxy.__init__(self)
+
+    def _registerTunnel(self, tunnelproto):
+        """
+        This is a private interface for L{TunnelProtocol}.  This sets
+        L{_tunnelproto} to which to forward the stream from the user
+        agent.  This should only be set after the tunnel to the target
+        HOST:PORT is established.
+        """
+        assert self._tunnelproto is None, 'Precondition failure: Multiple TunnelProtocols set: self._tunnelproto == %r; new tunnelproto == %r' % (self._tunnelproto, tunnelproto)
+        self._tunnelproto = tunnelproto
+
+    def dataReceived(self, data):
+        """
+        If there is a tunnel connection, forward the stream; otherwise
+        behave just like Proxy.
+        """
+        if self._tunnelproto is None:
+            Proxy.dataReceived(self, data)
+        else:
+            self._tunnelproto.transport.write(data)
+
+
+
+class TunnelProxyFactory (HTTPFactory):
+    """
+    Factory for an HTTP proxy.
+
+    @ivar restrictedToPort: Only CONNECT requests to this port number
+        are allowed.  This may be None, in which case any port is allowed.
+    @type restrictedToPort: L{int} or None
+    """
+
+    protocol = TunnelProxy
+
+    def __init__(self, logPath=None, timeout=60*60*12, restrictedToPort=443):
+        """
+        @param logPath: The same as for HTTPFactory.
+        @param timeout: The same as for HTTPFactory.
+
+        @param restrictedToPort: Only CONNECT requests to this port number
+            are allowed.  This may be None, in which case any port
+            is allowed.
+        @type restrictedToPort: C{int} or None
+        """
+        assert restrictedToPort is None or type(restrictedToPort) is int, \
+            'Invalid restrictedToPort value: %r' % (restrictedToPort,)
+
+        self.restrictedToPort = restrictedToPort
+        HTTPFactory.__init__(self, logPath, timeout)
+
+
+
+class TunnelProtocol (Protocol):
+    """
+    When a user agent makes a CONNECT request to a TunnelProxy, this
+    protocol implements the proxy's client logic.
+
+    When the proxy connects to the target host, it responds to the user
+    agent's request with an HTTP 200.  After that, it relays the stream
+    from the target host back through the connection to the user agent.
+
+    BUG: Verify that the 200 response meets the RFCs (or the common
+    practice if it deviates from the specification).
+    """
+    # BUG: Handle early disconnects and other edge cases.
+
+    def __init__(self, request):
+        self._request = request
+        self._channel = request.channel
+        self._peertransport = request.channel.transport
+    
+    def connectionMade(self):
+        # BUG: Check this against RFCs or common implementation:
+
+        self._channel._registerTunnel(self)
+        self._request.setResponseCode(200, 'Connected')
+
+        # Write nothing to trigger sending the response headers, but do
+        # not call finish, which may close the connection:
+        self._request.write('')
+
+    def dataReceived(self, data):
+        self._peertransport.write(data)
+
+
+
+class TunnelProtocolFactory (ClientFactory):
+    protocol = TunnelProtocol
+
+    def __init__(self, request, host, port):
+        self._request = request
+
+    def buildProtocol(self, addr):
+        return self.protocol(self._request)
+
+    def clientConnectionFailed(self, connector, reason):
+        self._request.setResponseCode(501, 'Gateway error')
+        self._request.finish()
+
+
+
 class ReverseProxyRequest(Request):
     """
     Used by ReverseProxy to implement a simple reverse proxy.
diff -r 0bf8fc09142b twisted/web/test/test_proxy.py
--- a/twisted/web/test/test_proxy.py	Wed Mar 28 20:40:51 2012 -0700
+++ b/twisted/web/test/test_proxy.py	Sun Apr 01 22:33:25 2012 -0700
@@ -12,7 +12,7 @@
 from twisted.web.resource import Resource
 from twisted.web.server import Site
 from twisted.web.proxy import ReverseProxyResource, ProxyClientFactory
-from twisted.web.proxy import ProxyClient, ProxyRequest, ReverseProxyRequest
+from twisted.web.proxy import ProxyClient, ProxyRequest, ReverseProxyRequest, TunnelProtocolFactory
 from twisted.web.test.test_web import DummyRequest
 
 
@@ -501,6 +501,31 @@
         self.assertEqual(reactor.tcpClients[0][1], 1234)
 
 
+    def test_connectMethod(self):
+        """
+        Check that L{ProxyRequest.process} handles the CONNECT method
+        to port 443.
+        """
+        expectedHost = 'example.com'
+        expectedPort = 443
+
+        transport = StringTransportWithDisconnection()
+        channel = DummyChannel(transport)
+        reactor = MemoryReactor()
+        request = ProxyRequest(channel, False, reactor)
+
+        hostPort = '%s:%d' % (expectedHost, expectedPort)
+
+        request.requestReceived('CONNECT', hostPort, 'HTTP/1.0')
+
+        self.assertEqual(len(reactor.tcpClients), 1)
+
+        [ (actualHost, actualPort, actualFactory, _, _) ] = reactor.tcpClients
+
+        self.assertEqual(expectedHost, actualHost)
+        self.assertEqual(expectedPort, actualPort)
+        self.assertIsInstance(actualFactory, TunnelProtocolFactory)
+
 
 class DummyFactory(object):
     """
