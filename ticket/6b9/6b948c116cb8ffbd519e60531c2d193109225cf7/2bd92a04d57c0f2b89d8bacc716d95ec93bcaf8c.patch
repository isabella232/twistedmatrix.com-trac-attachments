diff --git twisted/python/dist3.py twisted/python/dist3.py
index d56173d..eee4f44 100644
--- twisted/python/dist3.py
+++ twisted/python/dist3.py
@@ -102,6 +102,7 @@ modules = [
     "twisted.python.test.modules_helpers",
     "twisted.python.threadable",
     "twisted.python.threadpool",
+    "twisted.python.usage",
     "twisted.python.util",
     "twisted.python.versions",
     "twisted.test",
@@ -203,6 +204,7 @@ testModules = [
     "twisted.test.test_twisted",
     "twisted.test.test_threadpool",
     "twisted.test.test_udp",
+    "twisted.test.test_usage",
     "twisted.trial.test.test_assertions",
     "twisted.trial.test.test_asyncassertions",
     "twisted.trial.test.test_deferred",
diff --git twisted/python/test/test_util.py twisted/python/test/test_util.py
index 241b163..c3e5d28 100644
--- twisted/python/test/test_util.py
+++ twisted/python/test/test_util.py
@@ -1077,6 +1077,68 @@ class FancyStrMixinTests(unittest.TestCase):
         obj = Foo()
         self.assertEqual(str(obj), repr(obj))
 
+
+class PadToTest(unittest.TestCase):
+    """
+    Tests for L{util.padTo}.
+    """
+
+    def test_default(self):
+        """
+        Pad a list with the default value.
+        """
+        l = []
+        res = util.padTo(3, l)
+        self.assertEqual([None] * 3, res)
+
+
+    def test_specificDefaultValue(self):
+        """
+        Pad a list with a specific value.
+        """
+        l = []
+        res = util.padTo(4, l, "x")
+        self.assertEqual(["x"] * 4, res)
+
+
+    def test_padNonEmptyList(self):
+        """
+        Pad a list which already contains elements.
+        """
+        l = [1, 2]
+        res = util.padTo(3, l, "z")
+        self.assertEqual([1, 2, "z"], res)
+
+
+    def test_padToSmallerSize(self):
+        """
+        L{util.padTo} can't pad a list if the size requested is smaller than the
+        size of the list to pad.
+        """
+        l = [1, 2]
+        self.assertRaises(ValueError, util.padTo, 1, l)
+
+
+    def test_alreadyPadded(self):
+        """
+        Padding a list to the exact size of this list just returns a copy.
+        """
+        l = [1, 2]
+        res = util.padTo(len(l), l)
+        self.assertEqual(l, res)
+        self.assertNotEqual(id(res), id(l))
+
+
+    def test_makeCopy(self):
+        """
+        L{util.padTo} doesn't modify the input list but makes a copy.
+        """
+        l = []
+        res = util.padTo(4, l)
+        self.assertEqual([], l)
+        self.assertNotEqual(id(res), id(l))
+
+
 if _PY3:
     del (SwitchUIDTest, SearchUpwardsTest, RunAsEffectiveUserTests,
          OrderedDictTest, IntervalDifferentialTestCase, UtilTestCase,
diff --git twisted/python/usage.py twisted/python/usage.py
index a21e58c..ef1c7ca 100644
--- twisted/python/usage.py
+++ twisted/python/usage.py
@@ -13,15 +13,18 @@ or doc/core/howto/options.xhtml in your Twisted directory.
 """
 
 from __future__ import print_function
+from __future__ import division, absolute_import
 
 # System Imports
+import inspect
 import os
 import sys
 import getopt
 from os import path
+import textwrap
 
 # Sibling Imports
-from twisted.python import reflect, text, util
+from twisted.python import reflect, util
 
 
 class UsageError(Exception):
@@ -430,13 +433,11 @@ class Options(dict):
                 reverse_dct[method] = []
             reverse_dct[method].append(name.replace('_', '-'))
 
-        cmpLength = lambda a, b: cmp(len(a), len(b))
-
         for method, names in reverse_dct.items():
             if len(names) < 2:
                 continue
             names_ = names[:]
-            names_.sort(cmpLength)
+            names_.sort(key=len)
             longest = names_.pop()
             for name in names_:
                 synonyms[name] = longest
@@ -533,7 +534,7 @@ class Options(dict):
 
         if longdesc:
             longdesc = ('\n' +
-                        '\n'.join(text.wordWrap(longdesc, width)).strip()
+                        '\n'.join(textwrap.wrap(longdesc, width)).strip()
                         + '\n')
 
         if optDicts:
@@ -933,7 +934,7 @@ def docMakeChunks(optList, width=80):
                 doc = "%s. %s" % (doc, d.doc)
 
         if doc:
-            column2_l = text.wordWrap(doc, colWidth2)
+            column2_l = textwrap.wrap(doc, colWidth2)
         else:
             column2_l = ['']
 
@@ -948,10 +949,10 @@ def docMakeChunks(optList, width=80):
 
 
 def flagFunction(method, name=None):
-    reqArgs = method.im_func.func_code.co_argcount
+    reqArgs = len(inspect.getargspec(method).args)
     if reqArgs > 2:
         raise UsageError('Invalid Option function for %s' %
-                         (name or method.func_name))
+                         (name or method.__name__))
     if reqArgs == 2:
         # argName = method.im_func.func_code.co_varnames[1]
         return 0
diff --git twisted/python/util.py twisted/python/util.py
index 78434f2..7e01957 100644
--- twisted/python/util.py
+++ twisted/python/util.py
@@ -1037,7 +1037,7 @@ __all__ = [
 if _PY3:
     __all3__ = ["FancyEqMixin", "untilConcludes",
                 "runWithWarningsSuppressed", "FancyStrMixin", "nameToLabel",
-                "InsensitiveDict"]
+                "InsensitiveDict", "padTo"]
     for name in __all__[:]:
         if name not in __all3__:
             __all__.remove(name)
diff --git twisted/test/test_usage.py twisted/test/test_usage.py
index b676b7e..3ab5996 100644
--- twisted/test/test_usage.py
+++ twisted/test/test_usage.py
@@ -5,6 +5,10 @@
 Tests for L{twisted.python.usage}, a command line option parsing library.
 """
 
+from __future__ import division, absolute_import
+
+import sys
+
 from twisted.trial import unittest
 from twisted.python import usage
 
@@ -393,7 +397,7 @@ class HelpStringTest(unittest.TestCase):
         """
         try:
             self.nice.__str__()
-        except Exception, e:
+        except Exception as e:
             self.fail(e)
 
     def test_whitespaceStripFlagsAndParameters(self):
@@ -610,3 +614,108 @@ class CompleterNotImplementedTestCase(unittest.TestCase):
                 action = cls(None)
             self.assertRaises(NotImplementedError, action._shellCode,
                               None, "bad_shell_type")
+
+
+class FlagFunctionTest(unittest.TestCase):
+    """
+    Tests for L{usage.flagFunction}.
+    """
+
+    class SomeClass:
+        """
+        Dummy class for L{usage.flagFunction} tests.
+        """
+        def oneArg(self, a):
+            """
+            A one argument method to be tested by L{usage.flagFunction}.
+
+            @param a: a useless argument to satisfy the function's signature.
+            """
+            pass
+
+        def noArg(self):
+            """
+            A no argument method to be tested by L{usage.flagFunction}.
+            """
+            pass
+
+        def manyArgs(self, a, b, c):
+            """
+            A multipe arguments method to be tested by L{usage.flagFunction}.
+
+            @param a: a useless argument to satisfy the function's signature.
+            @param b: a useless argument to satisfy the function's signature.
+            @param c: a useless argument to satisfy the function's signature.
+            """
+            pass
+
+
+    def test_hasArg(self):
+        """
+        L{usage.flagFunction} returns a truth value if the method checked allows
+        exactly one argument.
+        """
+        self.assertEqual(0, usage.flagFunction(SomeClass().oneArg))
+
+
+    def test_noArg(self):
+        """
+        L{usage.flagFunction} returns a false value if the method checked allows
+        exactly no argument.
+        """
+        self.assertEqual(1, usage.flagFunction(SomeClass().noArg))
+
+
+    def test_tooManyArguments(self):
+        """
+        L{usage.flagFunction} raises L{usage.UsageError} if the method checked
+        allows more than one argument.
+        """
+        try:
+            usage.flagFunction(SomeClass().manyArgs)
+        except usage.UsageError as e:
+            self.assertEqual("Invalid Option function for manyArgs", str(e))
+        except:
+            self.fail("Didn't raise UsageError")
+
+
+    def test_tooManyArgumentsAndSpecificErrorMessage(self):
+        """
+        L{usage.flagFunction} allows to specify the name of the method in its
+        error message if the method allows too many arguments.
+        """
+        try:
+            usage.flagFunction(SomeClass().manyArgs, "flubuduf")
+        except usage.UsageError as e:
+            self.assertEqual("Invalid Option function for flubuduf", str(e))
+        except:
+            self.fail("Didn't raise UsageError")
+
+
+class OptionsInternalTest(unittest.TestCase):
+    """
+    Tests internal behavior of C{usage.Options}.
+    """
+
+
+    def test_optionsAliasesOrder(self):
+        """
+        Options which are synonyms to another option are aliases towards the
+        longest option name.
+        """
+        class Opts(usage.Options):
+            def opt_very_very_long(self):
+                """
+                This is a option method with a very long name, that is going to
+                be aliased.
+                """
+                pass
+
+            opt_short = opt_very_very_long
+            opt_s = opt_very_very_long
+
+        opts = Opts()
+
+        self.assertEqual("very-very-long", opts.synonyms['s'])
+        self.assertEqual("very-very-long", opts.synonyms['short'])
+        self.assertEqual("very-very-long", opts.synonyms['very-very-long'])
diff --git twisted/topfiles/7038.misc twisted/topfiles/7038.misc
new file mode 100644
index 0000000..e69de29
