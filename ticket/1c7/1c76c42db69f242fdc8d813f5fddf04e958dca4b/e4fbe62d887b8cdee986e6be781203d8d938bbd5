Index: twisted/internet/protocol.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/protocol.py,v
retrieving revision 1.47
diff -u -r1.47 protocol.py
--- twisted/internet/protocol.py	14 Nov 2003 03:28:02 -0000	1.47
+++ twisted/internet/protocol.py	5 Dec 2003 09:31:46 -0000
@@ -1,4 +1,5 @@
-
+# -*- test-case-name: twisted.test.test_factories -*-
+#
 # Twisted, the Framework of Your Internet
 # Copyright (C) 2001 Matthew W. Lefkowitz
 #
@@ -251,18 +252,32 @@
     def stopTrying(self):
         """I put a stop to any attempt to reconnect in progress.
         """
-        # ??? Is this function really stopFactory?
         if self._callID:
             self._callID.cancel()
             self._callID = None
-        if self.connector:
-            # Hopefully this doesn't just make clientConnectionFailed
-            # retry again.
-            try:
-                self.connector.stopConnecting()
-            except error.NotConnectingError:
-                pass
         self.continueTrying = 0
+        if self.connector:
+            self.connector.disconnect()
+
+    def stopFactory(self):
+        # stopFactory loses the connector, so it cannot be restarted with
+        # .retry
+        self.stopTrying()
+        self.connector = None
+
+    def __getstate__(self):
+        # serialized instances should behave like new ones at startup, so do
+        # the same thing as self.resetDelay() would on the stored state. The
+        # connection will have to be restarted, of course.
+
+        #d = ClientFactory.__getstate__(self)
+        d = self.__dict__.copy()
+        d['delay'] = self.initialDelay
+        d['retries'] = 0
+        d['_callID'] = None
+        d['continueTrying'] = 1
+        d['connector'] = None # don't serialize it
+        return d
 
     def resetDelay(self):
         """Call me after a successful connection to reset.
