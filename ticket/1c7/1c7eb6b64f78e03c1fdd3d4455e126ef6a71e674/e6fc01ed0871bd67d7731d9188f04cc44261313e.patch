Index: twisted/conch/test/test_ckeygen.py
===================================================================
--- twisted/conch/test/test_ckeygen.py	(revision 40352)
+++ twisted/conch/test/test_ckeygen.py	(working copy)
@@ -68,8 +68,24 @@
         self.assertEqual(
             self.stdout.getvalue(),
             '768 3d:13:5f:cb:c9:79:8a:93:06:27:65:bc:3d:0b:8f:af temp\n')
+    
 
+    def test_printFingerprintDefultKeyfile(self):
+        """
+        L{printFingerprint} should provide a default keyfile if nothing is
+        specified.
+        """
+        def fake_input(str):
+            return ''
+        filename = self.mktemp()
+        FilePath(filename).setContent(publicRSA_openssh)
+        printFingerprint(
+                {'filename':''},raw_input=fake_input,default_file = filename)
+        self.assertEqual(
+            self.stdout.getvalue(),
+            '768 3d:13:5f:cb:c9:79:8a:93:06:27:65:bc:3d:0b:8f:af temp\n')
 
+
     def test_saveKey(self):
         """
         L{_saveKey} writes the private and public parts of a key to two
@@ -131,6 +147,24 @@
             pubKey.toString('openssh'))
 
 
+    def test_displayPublicKeyDefaultKeyfile(self):
+        """
+        L{displayPublicKey} should provide a default keyfile if nothing is 
+        specified.
+        """
+        def fake_input(str):
+            return ''
+        filename = self.mktemp()
+        pubKey = Key.fromString(publicRSA_openssh)
+        FilePath(filename).setContent(privateRSA_openssh)
+        try:
+            displayPublicKey(
+                    {'filename': ''},raw_input=fake_input,
+                    default_file=filename)
+        except:
+            self.fail()
+
+
     def test_displayPublicKeyEncrypted(self):
         """
         L{displayPublicKey} prints out the public key associated with a given
@@ -338,3 +372,23 @@
         self.assertEqual(
             'Could not change passphrase: key not encrypted', str(error))
         self.assertEqual(publicRSA_openssh, FilePath(filename).getContent())
+
+
+    def test_changePassphraseDefaultkeyfile(self):
+        """
+        L{changePassPhrase} should provide a default for keyfile if nothing
+        is specified.
+        """
+        def fake_input(str):
+            return ''
+
+        oldNewConfirm = makeGetpass('encrypted', 'newpass', 'newpass')
+        self.patch(getpass, 'getpass', oldNewConfirm)
+
+        filename = self.mktemp()
+        FilePath(filename).setContent(privateRSA_openssh_encrypted)
+
+        try:
+            changePassPhrase({'filename': ''},raw_input=fake_input,default_file=filename)
+        except:
+            self.fail()
Index: twisted/conch/topfiles/6607.feature
===================================================================
--- twisted/conch/topfiles/6607.feature	(revision 0)
+++ twisted/conch/topfiles/6607.feature	(revision 0)
@@ -0,0 +1 @@
+ckeygen now provides default keyfile for --fingerprint,--showpub and --changepass.
Index: twisted/conch/scripts/ckeygen.py
===================================================================
--- twisted/conch/scripts/ckeygen.py	(revision 40352)
+++ twisted/conch/scripts/ckeygen.py	(working copy)
@@ -99,10 +99,12 @@
 
 
 
-def printFingerprint(options):
+def printFingerprint(options,raw_input=raw_input,default_file='~/.ssh/id_rsa'):
     if not options['filename']:
-        filename = os.path.expanduser('~/.ssh/id_rsa')
-        options['filename'] = raw_input('Enter file in which the key is (%s): ' % filename)
+        filename = os.path.expanduser(default_file)
+        options['filename'] = raw_input(
+                'Enter file in which the key is (%s): ' % filename
+                ).strip() or filename
     if os.path.exists(options['filename']+'.pub'):
         options['filename'] += '.pub'
     try:
@@ -118,11 +120,12 @@
 
 
 
-def changePassPhrase(options):
+def changePassPhrase(options,raw_input=raw_input,default_file='~/.ssh/id_rsa'):
     if not options['filename']:
-        filename = os.path.expanduser('~/.ssh/id_rsa')
+        filename = os.path.expanduser(default_file)
         options['filename'] = raw_input(
-            'Enter file in which the key is (%s): ' % filename)
+            'Enter file in which the key is (%s): ' % filename
+            ).strip() or filename
     try:
         key = keys.Key.fromFile(options['filename']).keyObject
     except keys.EncryptedKeyError as e:
@@ -168,10 +171,12 @@
 
 
 
-def displayPublicKey(options):
+def displayPublicKey(options,raw_input=raw_input,default_file='~/.ssh/id_rsa'):
     if not options['filename']:
-        filename = os.path.expanduser('~/.ssh/id_rsa')
-        options['filename'] = raw_input('Enter file in which the key is (%s): ' % filename)
+        filename = os.path.expanduser(default_file)
+        options['filename'] = raw_input(
+                'Enter file in which the key is (%s): ' % filename
+                ).strip() or filename
     try:
         key = keys.Key.fromFile(options['filename']).keyObject
     except keys.EncryptedKeyError:
