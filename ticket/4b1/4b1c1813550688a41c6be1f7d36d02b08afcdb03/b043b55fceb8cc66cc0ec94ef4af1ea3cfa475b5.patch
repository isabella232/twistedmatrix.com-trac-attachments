Index: twisted/mail/smtp.py
===================================================================
--- twisted/mail/smtp.py	(revision 46343)
+++ twisted/mail/smtp.py	(working copy)
@@ -455,7 +455,7 @@
     including information on where the message came from
     """
 
-    def __init__(self, destination, helo, protocol, orig):
+    def __init__(self, destination, helo, protocol, orig, opts=None):
         host = getattr(protocol, 'host', None)
         self.dest = Address(destination, host)
         self.helo = helo
@@ -464,6 +464,9 @@
             self.orig = orig
         else:
             self.orig = Address(orig, host)
+        if opts is None:
+            opts = {}
+        self.options = opts
 
     def __getstate__(self):
         """Helper for pickle.
@@ -474,7 +477,8 @@
         return { 'dest' : self.dest,
                  'helo' : self.helo,
                  'protocol' : None,
-                 'orig' : self.orig }
+                 'orig' : self.orig,
+                 'options': self.options }
 
     def __str__(self):
         return str(self.dest)
@@ -498,7 +502,9 @@
         semantics should be to discard the message
         """
 
-class SMTP(basic.LineOnlyReceiver, policies.TimeoutMixin):
+# This used to derive from LineOnlyReceiver, but doing that means that it's
+# impossible to implement CHUNKED or BINARYMIME in an ESMTP subclass.
+class SMTP(basic.LineReceiver, policies.TimeoutMixin):
     """
     SMTP server-side protocol.
     """
@@ -629,6 +635,29 @@
                          )\s*(\s(?P<opts>.*))? # Optional WS + ESMTP options
                          $''',re.I|re.X)
 
+    opt_re = re.compile(r'''^(?P<keyword>[A-Z0-9][-A-Z0-9]*)
+                             (?:=(?P<value>[^=\ \0-\037]+))?$''',
+                        re.I|re.X)
+    space_re = re.compile(r'\s+')
+
+    def _processOptions(self, opts):
+        """Parse the ESMTP options into a dictionary."""
+        options = {}
+
+        for optstr in self.space_re.split(opts):
+            m = self.opt_re.match(optstr)
+            if not m:
+                return None
+            value = m.group('value')
+            if value:
+                value = value.upper()
+            else:
+                value = None
+            options[m.group('keyword').upper()] = value
+            
+        return options
+
+    
     def do_MAIL(self, rest):
         if self._from:
             self.sendCode(503,"Only one sender per message, please")
@@ -640,6 +669,14 @@
             self.sendCode(501, "Syntax error")
             return
 
+        opts = m.group('opts')
+        if opts:
+            options = self._processOptions(opts)
+            if options is None:
+                self.sendCode(501, 'Syntax error')
+                return
+            self._options = options
+        
         try:
             addr = Address(m.group('path'), self.host)
         except AddressError, e:
@@ -673,13 +710,23 @@
         if not self._from:
             self.sendCode(503, "Must have sender before recipient")
             return
+
+        options = {}
+
         m = self.rcpt_re.match(rest)
         if not m:
             self.sendCode(501, "Syntax error")
             return
 
+        opts = m.group('opts')
+        if opts:
+            options = self._processOptions(opts)
+            if options is None:
+                self.sendCode(501, 'Syntax error')
+                return
+
         try:
-            user = User(m.group('path'), self._helo, self, self._from)
+            user = User(m.group('path'), self._helo, self, self._from, options)
         except AddressError, e:
             self.sendCode(553, str(e))
             return
Index: twisted/mail/test/test_smtp.py
===================================================================
--- twisted/mail/test/test_smtp.py	(revision 46343)
+++ twisted/mail/test/test_smtp.py	(working copy)
@@ -1112,7 +1112,104 @@
         s.connectionLost(error.ConnectionDone())
         self.assertIn("ESMTP", t.value())
 
+        
+    def testESMTPOptions(self):
+        """
+        It must be possible to obtain the options passed by the client.
+        """
+        testcase = self
+        s = smtp.ESMTP()
 
+        class TestDelivery(NotImplementedDelivery):
+            """
+            Delivery object which checks the options.
+            """
+            def validateFrom(self, helo, origin):
+                testcase.assertEqual(s.options,
+                                     { 'OPTION': 'Value',
+                                       'OPTION2': 'Value2',
+                                       'OPTION-3': 'Value3' })
+                return origin
+
+            def validateTo(self, user):
+                if str(user) == 'bar@example.com':
+                    testcase.assertEqual(user.options,
+                                         { 'BAR-OPTION': 'Baz' })
+                elif str(user) == 'blam@example.com':
+                    testcase.assertEqual(user.options,
+                                         { 'BLAM-OPTION': 'Blat' })
+                return lambda: DummyMessage()
+        
+        t = StringTransport()
+        s.makeConnection(t)
+        s.dataReceived('EHLO example.com\r\n'
+                       'MAIL FROM: foo@example.com OPTION=Value '
+                       'OPTION2=Value2 OPTION-3=Value3\r\n'
+                       'RCPT TO: bar@example.com BAR-OPTION=Baz\r\n'
+                       'RCPT TO: blam@example.com BLAM-OPTION=Blat\r\n')
+        s.connectionLost(error.ConnectionDone())
+
+
+    def testESMTPBinaryMode(self):
+        """
+        It must be possible for an L{smtp.ESMTP} subclass to put the
+        class into binary mode.
+        """
+
+        testcase = self
+        
+        class ESMTPBinaryModeTest(smtp.ESMTP):
+            """
+            ESMTP subclass with a simple BINARY command extension.  This
+            isn't a real ESMTP command from any known extension; it just
+            puts the LineReceiver into binary mode and reads that many
+            bytes before continuing.
+            """
+            bin_re = re.compile(r'^(\d+)$')
+            def do_BINARY(self, rest):
+                m = self.bin_re.match(rest)
+                if not m:
+                    self.sendCode(500, 'Error: bad syntax')
+                    return
+                self.binary_count = int(m.group(1))
+                self.binary_left = self.binary_count
+                self.mode = 'BINARY'
+                
+                self.setRawMode()
+
+            def state_BINARY(self, line):
+                testcase.fail('Line received while in binary mode')
+
+            def rawDataReceived(self, data):
+                to_do = len(data)
+                if to_do > self.binary_left:
+                    to_do = self.binary_left
+
+                # In a real extension we'd do something with the data here
+                
+                self.binary_left -= to_do
+                if not self.binary_left:
+                    self.setLineMode(data[to_do:])
+                    self.mode = smtp.COMMAND
+                    self.sendCode(250, 'Received %d bytes' % self.binary_count)
+
+        s = ESMTPBinaryModeTest()
+        t = StringTransport()
+        s.delivery = SimpleDelivery(None)
+        s.makeConnection(t)
+        s.dataReceived('EHLO example.com\r\n'
+                       'BINARY 128\r\n')
+        t.clear()
+        s.dataReceived(b'*'*128)
+        s.dataReceived('MAIL FROM: foo@example.com\r\n')
+        s.connectionLost(error.ConnectionDone())
+
+        self.assertEqual(
+            t.value(),
+            '250 Received 128 bytes\r\n'
+            '250 Sender address accepted\r\n')
+
+        
     def test_acceptSenderAddress(self):
         """
         Test that a C{MAIL FROM} command with an acceptable address is
