diff --git twisted/python/usage.py twisted/python/usage.py
index 9280ae2..8898f9a 100644
--- twisted/python/usage.py
+++ twisted/python/usage.py
@@ -12,6 +12,9 @@ U{http://twistedmatrix.com/projects/core/documentation/howto/options.html},
 or doc/core/howto/options.xhtml in your Twisted directory.
 """
 
+from __future__ import print_function,division,absolute_import
+from twisted.python.compat import _PY3
+
 # System Imports
 import os
 import sys
@@ -25,10 +28,8 @@ from twisted.python import reflect, text, util
 class UsageError(Exception):
     pass
 
-
 error = UsageError
 
-
 class CoerceParameter(object):
     """
     Utility class that can corce a parameter before storing it.
@@ -52,7 +53,7 @@ class CoerceParameter(object):
                              % (parameterName,))
         try:
             value = self.coerce(value)
-        except ValueError, e:
+        except ValueError as e:
             raise UsageError("Parameter type enforcement failed: %s" % (e,))
 
         self.options.opts[parameterName] = value
@@ -188,13 +189,17 @@ class Options(dict):
         as dictionary keys.  This is an internal feature used to implement
         the parser.  Do not rely on it in application code.
         """
-        return int(id(self) % sys.maxint)
+        if _PY3:
+            # In Python3 integer has no size limit.
+            return int(id(self))
+        else:
+            return int(id(self) % sys.maxint)
 
     def opt_help(self):
         """
         Display this help and exit.
         """
-        print self.__str__()
+        print(self.__str__())
         sys.exit(0)
 
     def opt_version(self):
@@ -202,7 +207,7 @@ class Options(dict):
         Display Twisted version and exit.
         """
         from twisted import copyright
-        print "Twisted version:", copyright.version
+        print("Twisted version:", copyright.version)
         sys.exit(0)
 
     #opt_h = opt_help # this conflicted with existing 'host' options.
@@ -232,7 +237,7 @@ class Options(dict):
         try:
             opts, args = getopt.getopt(options,
                                        self.shortOpt, self.longOpt)
-        except getopt.error, e:
+        except getopt.error as e:
             raise UsageError(str(e))
 
         for opt, arg in opts:
@@ -434,11 +439,25 @@ class Options(dict):
 
         cmpLength = lambda a, b: cmp(len(a), len(b))
 
+        if _PY3:
+            def sort_by_length(lst):
+                """
+                Sort list elements by their length.
+                """
+                # Here we use a key function instead of a compare function.
+                KeyLength = lambda a:len(a)
+                lst.sort(key=KeyLength)
+        else:
+            def sort_by_length(lst):
+                # Old fashioned compare function here:
+                cmpLength = lambda a,b: cmp(len(a),len(b))
+                lst.sort(cmpLength)
+
         for method, names in reverse_dct.items():
             if len(names) < 2:
                 continue
             names_ = names[:]
-            names_.sort(cmpLength)
+            sort_by_length(names_)
             longest = names_.pop()
             for name in names_:
                 synonyms[name] = longest
@@ -950,7 +969,10 @@ def docMakeChunks(optList, width=80):
 
 
 def flagFunction(method, name=None):
-    reqArgs = method.im_func.func_code.co_argcount
+    if _PY3:
+        reqArgs = method.__func__.__code__.co_argcount
+    else:
+        reqArgs = method.im_func.func_code.co_argcount
     if reqArgs > 2:
         raise UsageError('Invalid Option function for %s' %
                          (name or method.func_name))
