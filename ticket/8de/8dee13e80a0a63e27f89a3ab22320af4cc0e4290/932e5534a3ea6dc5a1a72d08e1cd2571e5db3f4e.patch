Index: twisted/protocols/policies.py
===================================================================
--- twisted/protocols/policies.py	(révision 32354)
+++ twisted/protocols/policies.py	(copie de travail)
@@ -16,6 +16,7 @@
 # twisted imports
 from twisted.internet.protocol import ServerFactory, Protocol, ClientFactory
 from twisted.internet import error
+from twisted.internet.interfaces import ILoggingContext
 from twisted.python import log
 
 
@@ -42,8 +43,10 @@
         Use a customized log prefix mentioning both the wrapped protocol and
         the current one.
         """
-        logPrefix = getattr(self.wrappedProtocol, "logPrefix",
-                            lambda: self.wrappedProtocol.__class__.__name__)
+        try :
+            logPrefix = self.wrappedProtocol.logPrefix
+        except :
+            logPrefix = lambda :self.wrappedProtocol.__class__.__name__
         return "%s (%s)" % (logPrefix(), self.__class__.__name__)
 
 
Index: twisted/internet/udp.py
===================================================================
--- twisted/internet/udp.py	(révision 32354)
+++ twisted/internet/udp.py	(copie de travail)
@@ -33,6 +33,7 @@
 from twisted.internet import base, defer, address
 from twisted.python import log, reflect, failure
 from twisted.internet import abstract, error, interfaces
+from twisted.internet.logpre import LogPrefix
 
 
 class Port(base.BasePort):
@@ -232,14 +233,13 @@
         """
         Initialize the C{logstr} attribute to be used by C{logPrefix}.
         """
-        logPrefix = getattr(self.protocol, "logPrefix",
-                            lambda: self.protocol.__class__.__name__)
+        logPrefix = LogPrefix(self.protocol).getLogPrefix()
         self.logstr = "%s (UDP)" % logPrefix()
 
 
     def logPrefix(self):
         """
-        Returns the name of my class, to prefix log entries with.
+        Return the prefix to log with.
         """
         return self.logstr
 
Index: twisted/internet/unix.py
===================================================================
--- twisted/internet/unix.py	(révision 32354)
+++ twisted/internet/unix.py	(copie de travail)
@@ -24,6 +24,7 @@
 from twisted.internet import base, tcp, udp, error, interfaces, protocol, address
 from twisted.internet.error import CannotListenError
 from twisted.python import lockfile, log, reflect, failure
+from twisted.internet.logpre import LogPrefix
 
 
 class Server(tcp.Server):
@@ -257,8 +258,7 @@
         """
         Initialize the C{logstr} attribute to be used by C{logPrefix}.
         """
-        logPrefix = getattr(self.protocol, "logPrefix",
-                            lambda: self.protocol.__class__.__name__)
+        logPrefix = LogPrefix(self.protocol).getLogPrefix()
         self.logstr = "%s (Unix)" % logPrefix()
 
 
Index: twisted/internet/tcp.py
===================================================================
--- twisted/internet/tcp.py	(révision 32354)
+++ twisted/internet/tcp.py	(copie de travail)
@@ -21,6 +21,7 @@
 
 from twisted.python.runtime import platformType
 from twisted.python import versions, deprecate
+from twisted.internet.logpre import LogPrefix
 
 try:
     # Try to get the memory BIO based startTLS implementation, available since
@@ -375,8 +376,7 @@
     def _connectDone(self):
         self.protocol = self.connector.buildProtocol(self.getPeer())
         self.connected = 1
-        logPrefix = getattr(self.protocol, "logPrefix",
-                            lambda: self.protocol.__class__.__name__)
+        logPrefix = LogPrefix(self.protocol).getLogPrefix()
         self.logstr = "%s,client" % logPrefix()
         self.startReading()
         self.protocol.makeConnection(self)
@@ -462,8 +462,8 @@
         self.client = client
         self.sessionno = sessionno
         self.hostname = client[0]
-        logPrefix = getattr(self.protocol, "logPrefix",
-                            lambda: self.protocol.__class__.__name__)
+
+        logPrefix = LogPrefix(self.protocol).getLogPrefix()
         self.logstr = "%s,%s,%s" % (logPrefix(),
                                     sessionno,
                                     self.hostname)
Index: twisted/internet/test/test_logprefix.py
===================================================================
--- twisted/internet/test/test_logprefix.py	(révision 0)
+++ twisted/internet/test/test_logprefix.py	(révision 0)
@@ -0,0 +1,17 @@
+from twisted.trial.unittest import SkipTest, TestCase
+from twisted.internet.logpre import LogPrefix
+
+class LogPrefixTests(TestCase):
+    def test_logPrefix(self):
+        
+        class FirstProtocol(object):
+            logPrefix = lambda self : "foo"
+        protocol = FirstProtocol()
+        logPrefix = LogPrefix(protocol).getLogPrefix()
+        self.assertEquals("foo",logPrefix())
+
+        class SecondProtocol(object):
+            pass
+        protocol = SecondProtocol()
+        logPrefix = LogPrefix(protocol).getLogPrefix()
+        self.assertEquals("SecondProtocol",logPrefix())
Index: twisted/internet/logpre.py
===================================================================
--- twisted/internet/logpre.py	(révision 0)
+++ twisted/internet/logpre.py	(révision 0)
@@ -0,0 +1,17 @@
+class LogPrefix(object):
+    """
+    Handles the prefix log of protocols
+    """
+    def __init__(self,protocol):
+        self.protocol = protocol
+
+    def getLogPrefix(self):
+        """
+        Returns the prefix to log with
+        """
+        try:
+            logPrefix = self.protocol.logPrefix
+        except :
+            logPrefix = lambda: self.protocol.__class__.__name__
+        return logPrefix
+
