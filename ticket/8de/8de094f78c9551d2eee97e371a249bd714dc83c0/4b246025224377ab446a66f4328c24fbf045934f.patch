diff --git twisted/names/cache.py twisted/names/cache.py
index 9414538..854050b 100644
--- twisted/names/cache.py
+++ twisted/names/cache.py
@@ -2,7 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.names import dns, common
 from twisted.python import failure, log
@@ -10,7 +10,6 @@ from twisted.internet import interfaces, defer
 
 
 
-@implementer(interfaces.IResolver)
 class CacheResolver(common.ResolverBase):
     """
     A resolver that serves records from a local, memory cache.
@@ -18,6 +17,8 @@ class CacheResolver(common.ResolverBase):
     @ivar _reactor: A provider of L{interfaces.IReactorTime}.
     """
 
+    implements(interfaces.IResolver)
+
     cache = None
 
     def __init__(self, cache=None, verbose=0, reactor=None):
diff --git twisted/names/client.py twisted/names/client.py
index 6b7cc6e..a8dd0c5 100644
--- twisted/names/client.py
+++ twisted/names/client.py
@@ -22,7 +22,7 @@ import os
 import errno
 import warnings
 
-from zope.interface import implementer
+from zope.interface import implements
 
 # Twisted imports
 from twisted.python.runtime import platform
@@ -32,7 +32,6 @@ from twisted.python.deprecate import getWarningMethod
 from twisted.names import dns, common
 
 
-@implementer(interfaces.IResolver)
 class Resolver(common.ResolverBase):
     """
     @ivar _waiting: A C{dict} mapping tuple keys of query name/type/class to
@@ -47,6 +46,7 @@ class Resolver(common.ResolverBase):
         L{IReactorTime} which will be used to set up network resources and
         track timeouts.
     """
+    implements(interfaces.IResolver)
 
     index = 0
     timeout = None
diff --git twisted/names/dns.py twisted/names/dns.py
index bc5cb81..2b47d4d 100644
--- twisted/names/dns.py
+++ twisted/names/dns.py
@@ -52,7 +52,7 @@ import cStringIO as StringIO
 
 AF_INET6 = socket.AF_INET6
 
-from zope.interface import implementer, Interface, Attribute
+from zope.interface import implements, Interface, Attribute
 
 
 # Twisted imports
@@ -225,8 +225,8 @@ class IEncodable(Interface):
 
 
 
-@implementer(IEncodable)
 class Charstr(object):
+    implements(IEncodable)
 
     def __init__(self, string=''):
         if not isinstance(string, str):
@@ -279,8 +279,8 @@ class Charstr(object):
 
 
 
-@implementer(IEncodable)
 class Name:
+    implements(IEncodable)
 
     def __init__(self, name=''):
         assert isinstance(name, types.StringTypes), "%r is not a string" % (name,)
@@ -371,7 +371,6 @@ class Name:
     def __str__(self):
         return self.name
 
-@implementer(IEncodable)
 class Query:
     """
     Represent a single DNS query.
@@ -381,6 +380,8 @@ class Query:
     @ivar cls: The query class.
     """
 
+    implements(IEncodable)
+
     name = None
     type = None
     cls = None
@@ -433,7 +434,6 @@ class Query:
         return 'Query(%r, %r, %r)' % (str(self.name), self.type, self.cls)
 
 
-@implementer(IEncodable)
 class RRHeader(tputil.FancyEqMixin):
     """
     A resource record header.
@@ -450,6 +450,8 @@ class RRHeader(tputil.FancyEqMixin):
         authoritative message.
     """
 
+    implements(IEncodable)
+
     compareAttributes = ('name', 'type', 'cls', 'ttl', 'payload', 'auth')
 
     fmt = "!HHIH"
@@ -529,7 +531,6 @@ class RRHeader(tputil.FancyEqMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class SimpleRecord(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
     A Resource Record which consists of a single RFC 1035 domain-name.
@@ -541,6 +542,7 @@ class SimpleRecord(tputil.FancyStrMixin, tputil.FancyEqMixin):
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
     """
+    implements(IEncodable, IRecord)
 
     showAttributes = (('name', 'name', '%s'), 'ttl')
     compareAttributes = ('name', 'ttl')
@@ -669,7 +671,6 @@ class Record_DNAME(SimpleRecord):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_A(tputil.FancyEqMixin):
     """
     An IPv4 host address.
@@ -682,6 +683,7 @@ class Record_A(tputil.FancyEqMixin):
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
     """
+    implements(IEncodable, IRecord)
 
     compareAttributes = ('address', 'ttl')
 
@@ -716,7 +718,6 @@ class Record_A(tputil.FancyEqMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_SOA(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
     Marks the start of a zone of authority.
@@ -756,6 +757,7 @@ class Record_SOA(tputil.FancyEqMixin, tputil.FancyStrMixin):
     @type ttl: C{int}
     @ivar ttl: The default TTL to use for records served from this zone.
     """
+    implements(IEncodable, IRecord)
 
     fancybasename = 'SOA'
     compareAttributes = ('serial', 'mname', 'rname', 'refresh', 'expire', 'retry', 'minimum', 'ttl')
@@ -799,7 +801,6 @@ class Record_SOA(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_NULL(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
     A null record.
@@ -810,6 +811,7 @@ class Record_NULL(tputil.FancyStrMixin, tputil.FancyEqMixin):
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
     """
+    implements(IEncodable, IRecord)
 
     fancybasename = 'NULL'
     showAttributes = compareAttributes = ('payload', 'ttl')
@@ -834,7 +836,6 @@ class Record_NULL(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_WKS(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
     A well known service description.
@@ -857,6 +858,7 @@ class Record_WKS(tputil.FancyEqMixin, tputil.FancyStrMixin):
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
     """
+    implements(IEncodable, IRecord)
 
     fancybasename = "WKS"
     compareAttributes = ('address', 'protocol', 'map', 'ttl')
@@ -889,7 +891,6 @@ class Record_WKS(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_AAAA(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
     An IPv6 host address.
@@ -904,6 +905,7 @@ class Record_AAAA(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
     @see: U{http://www.faqs.org/rfcs/rfc1886.html}
     """
+    implements(IEncodable, IRecord)
     TYPE = AAAA
 
     fancybasename = 'AAAA'
@@ -930,7 +932,6 @@ class Record_AAAA(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_A6(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
     An IPv6 address.
@@ -958,6 +959,7 @@ class Record_A6(tputil.FancyStrMixin, tputil.FancyEqMixin):
     @see: U{http://www.faqs.org/rfcs/rfc3363.html}
     @see: U{http://www.faqs.org/rfcs/rfc3364.html}
     """
+    implements(IEncodable, IRecord)
     TYPE = A6
 
     fancybasename = 'A6'
@@ -1014,7 +1016,6 @@ class Record_A6(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_SRV(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
     The location of the server(s) for a specific protocol and domain.
@@ -1049,6 +1050,7 @@ class Record_SRV(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
     @see: U{http://www.faqs.org/rfcs/rfc2782.html}
     """
+    implements(IEncodable, IRecord)
     TYPE = SRV
 
     fancybasename = 'SRV'
@@ -1081,7 +1083,6 @@ class Record_SRV(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_NAPTR(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
     The location of the server(s) for a specific protocol and domain.
@@ -1126,6 +1127,7 @@ class Record_NAPTR(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
     @see: U{http://www.faqs.org/rfcs/rfc2915.html}
     """
+    implements(IEncodable, IRecord)
     TYPE = NAPTR
 
     compareAttributes = ('order', 'preference', 'flags', 'service', 'regexp',
@@ -1175,7 +1177,6 @@ class Record_NAPTR(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_AFSDB(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
     Map from a domain name to the name of an AFS cell database server.
@@ -1196,6 +1197,7 @@ class Record_AFSDB(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
     @see: U{http://www.faqs.org/rfcs/rfc1183.html}
     """
+    implements(IEncodable, IRecord)
     TYPE = AFSDB
 
     fancybasename = 'AFSDB'
@@ -1224,7 +1226,6 @@ class Record_AFSDB(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_RP(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
     The responsible person for a domain.
@@ -1243,6 +1244,7 @@ class Record_RP(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
     @see: U{http://www.faqs.org/rfcs/rfc1183.html}
     """
+    implements(IEncodable, IRecord)
     TYPE = RP
 
     fancybasename = 'RP'
@@ -1272,7 +1274,6 @@ class Record_RP(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_HINFO(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
     Host information.
@@ -1287,6 +1288,7 @@ class Record_HINFO(tputil.FancyStrMixin, tputil.FancyEqMixin):
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
     """
+    implements(IEncodable, IRecord)
     TYPE = HINFO
 
     fancybasename = 'HINFO'
@@ -1322,7 +1324,6 @@ class Record_HINFO(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_MINFO(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
     Mailbox or mail list information.
@@ -1344,6 +1345,7 @@ class Record_MINFO(tputil.FancyEqMixin, tputil.FancyStrMixin):
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
     """
+    implements(IEncodable, IRecord)
     TYPE = MINFO
 
     rmailbx = None
@@ -1376,7 +1378,6 @@ class Record_MINFO(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
-@implementer(IEncodable, IRecord)
 class Record_MX(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
     Mail exchange.
@@ -1393,6 +1394,7 @@ class Record_MX(tputil.FancyStrMixin, tputil.FancyEqMixin):
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
     """
+    implements(IEncodable, IRecord)
     TYPE = MX
 
     fancybasename = 'MX'
@@ -1419,7 +1421,6 @@ class Record_MX(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
 
 # Oh god, Record_TXT how I hate thee.
-@implementer(IEncodable, IRecord)
 class Record_TXT(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
     Freeform text.
@@ -1430,6 +1431,7 @@ class Record_TXT(tputil.FancyEqMixin, tputil.FancyStrMixin):
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be cached.
     """
+    implements(IEncodable, IRecord)
 
     TYPE = TXT
 
@@ -1468,7 +1470,6 @@ class Record_TXT(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 # This is a fallback record
-@implementer(IEncodable, IRecord)
 class UnknownRecord(tputil.FancyEqMixin, tputil.FancyStrMixin, object):
     """
     Encapsulate the wire data for unkown record types so that they can
@@ -1482,6 +1483,7 @@ class UnknownRecord(tputil.FancyEqMixin, tputil.FancyStrMixin, object):
 
     @since: 11.1
     """
+    implements(IEncodable, IRecord)
 
     fancybasename = 'UNKNOWN'
     compareAttributes = ('data', 'ttl')
diff --git twisted/names/resolve.py twisted/names/resolve.py
index 1bdecd2..19996e9 100644
--- twisted/names/resolve.py
+++ twisted/names/resolve.py
@@ -13,7 +13,7 @@ the query, or someway to specify (authority|ttl|cache behavior|more?)
 
 from twisted.internet import defer, interfaces
 from twisted.names import dns
-from zope.interface import implementer
+from zope.interface import implements
 import common
 
 class FailureHandler:
@@ -29,10 +29,11 @@ class FailureHandler:
         return self.resolver(self.query, self.timeout)
 
 
-@implementer(interfaces.IResolver)
 class ResolverChain(common.ResolverBase):
     """Lookup an address using multiple C{IResolver}s"""
 
+    implements(interfaces.IResolver)
+
 
     def __init__(self, resolvers):
         common.ResolverBase.__init__(self)
diff --git twisted/names/srvconnect.py twisted/names/srvconnect.py
index ace2f7b..34434db 100644
--- twisted/names/srvconnect.py
+++ twisted/names/srvconnect.py
@@ -4,7 +4,7 @@
 
 import random
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet import error, interfaces
 
@@ -29,10 +29,11 @@ class _SRVConnector_ClientFactoryWrapper:
     def __getattr__(self, key):
         return getattr(self.__wrappedFactory, key)
 
-@implementer(interfaces.IConnector)
 class SRVConnector:
     """A connector that looks up DNS SRV records. See RFC2782."""
 
+    implements(interfaces.IConnector)
+
     stopAfterDNS=0
 
     def __init__(self, reactor, service, domain, factory,
diff --git twisted/names/test/test_rootresolve.py twisted/names/test/test_rootresolve.py
index 2f9dc89..b3d34f3 100644
--- twisted/names/test/test_rootresolve.py
+++ twisted/names/test/test_rootresolve.py
@@ -7,7 +7,7 @@ Test cases for Twisted.names' root resolver.
 
 from random import randrange
 
-from zope.interface import implementer
+from zope.interface import implements
 from zope.interface.verify import verifyClass
 
 from twisted.python.log import msg
@@ -24,7 +24,6 @@ from twisted.names.dns import Query, Message, RRHeader, Record_A, Record_NS
 from twisted.names.error import DNSNameError, ResolverError
 
 
-@implementer(IUDPTransport)
 class MemoryDatagramTransport(object):
     """
     This L{IUDPTransport} implementation enforces the usual connection rules
@@ -41,6 +40,7 @@ class MemoryDatagramTransport(object):
     @ivar _maxPacketSize: An C{int} giving the maximum length of a datagram
         which will be successfully handled by C{write}.
     """
+    implements(IUDPTransport)
 
     def __init__(self, host, protocol, maxPacketSize):
         self._host = host
@@ -91,7 +91,6 @@ verifyClass(IUDPTransport, MemoryDatagramTransport)
 
 
 
-@implementer(IReactorUDP)
 class MemoryReactor(Clock):
     """
     An L{IReactorTime} and L{IReactorUDP} provider.
@@ -103,6 +102,7 @@ class MemoryReactor(Clock):
     @ivar udpPorts: A C{dict} mapping port numbers to instances of
         L{MemoryDatagramTransport}.
     """
+    implements(IReactorUDP)
 
     def __init__(self):
         Clock.__init__(self)
