diff --git a/twisted/trial/_synctest.py b/twisted/trial/_synctest.py
index e3d7956..5091a41 100644
--- a/twisted/trial/_synctest.py
+++ b/twisted/trial/_synctest.py
@@ -492,7 +492,7 @@ class _Assertions(pyunit.TestCase, object):
         """
         Fail if C{substring} does not exist within C{astring}.
         """
-        return self.failUnlessIn(substring, astring, msg)
+        return self.assertIn(substring, astring, msg)
     failUnlessSubstring = assertSubstring
 
 
@@ -500,7 +500,7 @@ class _Assertions(pyunit.TestCase, object):
         """
         Fail if C{astring} contains C{substring}.
         """
-        return self.failIfIn(substring, astring, msg)
+        return self.assertNotIn(substring, astring, msg)
     failIfSubstring = assertNotSubstring
 
 
@@ -535,7 +535,7 @@ class _Assertions(pyunit.TestCase, object):
         self.assertIdentical(first.category, category)
 
         # Use starts with because of .pyc/.pyo issues.
-        self.failUnless(
+        self.assertTrue(
             filename.startswith(first.filename),
             'Warning in %r, expected %r' % (first.filename, filename))
 
diff --git a/twisted/trial/test/detests.py b/twisted/trial/test/detests.py
index 237a989..e00f29b 100644
--- a/twisted/trial/test/detests.py
+++ b/twisted/trial/test/detests.py
@@ -21,7 +21,7 @@ class DeferredSetUpOK(unittest.TestCase):
         self._setUpCalled = True
 
     def test_ok(self):
-        self.failUnless(self._setUpCalled)
+        self.assertTrue(self._setUpCalled)
 
 
 class DeferredSetUpFail(unittest.TestCase):
diff --git a/twisted/trial/test/test_assertions.py b/twisted/trial/test/test_assertions.py
index b66bab9..bb1aa0d 100644
--- a/twisted/trial/test/test_assertions.py
+++ b/twisted/trial/test/test_assertions.py
@@ -98,7 +98,7 @@ class TestFailureTests(pyunit.TestCase):
         """
         result = pyunit.TestResult()
         self.suite.run(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.errors, [])
         self.assertEqual(len(result.failures), 1)
         self.assertEqual(result.failures[0][0], self.test)
@@ -140,7 +140,7 @@ class AssertFalseTests(unittest.SynchronousTestCase):
                 if str(e) != "failed on %r" % (true,):
                     self.fail("Raised incorrect exception on %r: %r" % (true, e))
             else:
-                self.fail("Call to failIf(%r) didn't fail" % (true,))
+                self.fail("Call to assertFalse(%r) didn't fail" % (true,))
 
 
     def test_failIfFalse(self):
@@ -344,7 +344,7 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
 
     def test_failUnlessRaises_expected(self):
         x = self.failUnlessRaises(ValueError, self._raiseError, ValueError)
-        self.failUnless(isinstance(x, ValueError),
+        self.assertTrue(isinstance(x, ValueError),
                         "Expect failUnlessRaises to return instance of raised "
                         "exception.")
 
@@ -374,7 +374,7 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
     def test_failUnlessRaises_failureException(self):
         x = self.failUnlessRaises(self.failureException, self._raiseError,
                                   self.failureException)
-        self.failUnless(isinstance(x, self.failureException),
+        self.assertTrue(isinstance(x, self.failureException),
                         "Expected %r instance to be returned"
                         % (self.failureException,))
         try:
@@ -392,9 +392,9 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         ret = self.failIfEqual(x, y)
         self.assertEqual(ret, x,
                              "failIfEqual should return first parameter")
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfEqual, x, x)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfEqual, x, z)
 
 
@@ -405,7 +405,7 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         ret = self.failIfEqual(x, y)
         self.assertEqual(ret, x,
                              "failIfEqual should return first parameter")
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfEqual, x, x)
         self.failIfEqual(x, z, "__ne__ should make these not equal")
 
@@ -427,7 +427,7 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         arguments are the same object.
         """
         x = object()
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfIdentical, x, x)
 
 
@@ -437,9 +437,9 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         self.assertEqual(ret, x,
                              'failUnlessIdentical should return first '
                              'parameter')
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessIdentical, x, y)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessIdentical, x, z)
 
     def test_failUnlessApproximates(self):
@@ -448,9 +448,9 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         ret = self.failUnlessApproximates(x, y, 0.2)
         self.assertEqual(ret, x, "failUnlessApproximates should return "
                              "first parameter")
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessApproximates, x, z, 0.1)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessApproximates, x, y, 0.1)
 
 
@@ -463,7 +463,7 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         ret = self.failUnlessAlmostEqual(x, z, precision)
         self.assertEqual(ret, x, "failUnlessAlmostEqual should return "
                              "first parameter (%r, %r)" % (ret, x))
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessAlmostEqual, x, y, precision)
 
 
@@ -475,9 +475,9 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         ret = self.failIfAlmostEqual(x, y, precision)
         self.assertEqual(ret, x, "failIfAlmostEqual should return "
                              "first parameter (%r, %r)" % (ret, x))
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfAlmostEqual, x, x, precision)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfAlmostEqual, x, z, precision)
 
 
@@ -488,9 +488,9 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         self.failUnlessSubstring(x, x)
         ret = self.failUnlessSubstring(x, z)
         self.assertEqual(ret, x, 'should return first parameter')
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessSubstring, x, y)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessSubstring, z, x)
 
 
@@ -501,9 +501,9 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
         self.failIfSubstring(z, x)
         ret = self.failIfSubstring(x, y)
         self.assertEqual(ret, x, 'should return first parameter')
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfSubstring, x, x)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfSubstring, x, z)
 
 
@@ -948,11 +948,11 @@ class TestAssertionNames(unittest.SynchronousTestCase):
             if not callable(value):
                 continue
             if name.endswith('Equal'):
-                self.failUnless(hasattr(self, name+'s'),
+                self.assertTrue(hasattr(self, name+'s'),
                                 "%s but no %ss" % (name, name))
                 self.assertEqual(value, getattr(self, name+'s'))
             if name.endswith('Equals'):
-                self.failUnless(hasattr(self, name[:-1]),
+                self.assertTrue(hasattr(self, name[:-1]),
                                 "%s but no %s" % (name, name[:-1]))
                 self.assertEqual(value, getattr(self, name[:-1]))
 
diff --git a/twisted/trial/test/test_deferred.py b/twisted/trial/test/test_deferred.py
index 1e7ce31..5b3040d 100644
--- a/twisted/trial/test/test_deferred.py
+++ b/twisted/trial/test/test_deferred.py
@@ -25,49 +25,49 @@ class TestSetUp(unittest.TestCase):
     def test_success(self):
         result, suite = self._loadSuite(detests.DeferredSetUpOK)
         suite(result)
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_fail(self):
-        self.failIf(detests.DeferredSetUpFail.testCalled)
+        self.assertFalse(detests.DeferredSetUpFail.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpFail)
         suite(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 1)
-        self.failIf(detests.DeferredSetUpFail.testCalled)
+        self.assertFalse(detests.DeferredSetUpFail.testCalled)
 
     def test_callbackFail(self):
-        self.failIf(detests.DeferredSetUpCallbackFail.testCalled)
+        self.assertFalse(detests.DeferredSetUpCallbackFail.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpCallbackFail)
         suite(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 1)
-        self.failIf(detests.DeferredSetUpCallbackFail.testCalled)
+        self.assertFalse(detests.DeferredSetUpCallbackFail.testCalled)
 
     def test_error(self):
-        self.failIf(detests.DeferredSetUpError.testCalled)
+        self.assertFalse(detests.DeferredSetUpError.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpError)
         suite(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 1)
-        self.failIf(detests.DeferredSetUpError.testCalled)
+        self.assertFalse(detests.DeferredSetUpError.testCalled)
 
     def test_skip(self):
-        self.failIf(detests.DeferredSetUpSkip.testCalled)
+        self.assertFalse(detests.DeferredSetUpSkip.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpSkip)
         suite(result)
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 0)
         self.assertEqual(len(result.skips), 1)
-        self.failIf(detests.DeferredSetUpSkip.testCalled)
+        self.assertFalse(detests.DeferredSetUpSkip.testCalled)
 
 
 class TestNeverFire(unittest.TestCase):
@@ -85,15 +85,15 @@ class TestNeverFire(unittest.TestCase):
         return r, s
 
     def test_setUp(self):
-        self.failIf(detests.DeferredSetUpNeverFire.testCalled)
+        self.assertFalse(detests.DeferredSetUpNeverFire.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpNeverFire)
         suite(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 1)
-        self.failIf(detests.DeferredSetUpNeverFire.testCalled)
-        self.failUnless(result.errors[0][1].check(defer.TimeoutError))
+        self.assertFalse(detests.DeferredSetUpNeverFire.testCalled)
+        self.assertTrue(result.errors[0][1].check(defer.TimeoutError))
 
 
 class TestTester(unittest.TestCase):
@@ -112,43 +112,43 @@ class TestDeferred(TestTester):
 
     def test_pass(self):
         result = self.runTest('test_pass')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_passGenerated(self):
         result = self.runTest('test_passGenerated')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
-        self.failUnless(detests.DeferredTests.touched)
+        self.assertTrue(detests.DeferredTests.touched)
 
     def test_fail(self):
         result = self.runTest('test_fail')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 1)
 
     def test_failureInCallback(self):
         result = self.runTest('test_failureInCallback')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 1)
 
     def test_errorInCallback(self):
         result = self.runTest('test_errorInCallback')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 1)
 
     def test_skip(self):
         result = self.runTest('test_skip')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.skips), 1)
-        self.failIf(detests.DeferredTests.touched)
+        self.assertFalse(detests.DeferredTests.touched)
 
     def test_todo(self):
         result = self.runTest('test_expectedFailure')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 0)
         self.assertEqual(len(result.failures), 0)
@@ -157,7 +157,7 @@ class TestDeferred(TestTester):
     def test_thread(self):
         result = self.runTest('test_thread')
         self.assertEqual(result.testsRun, 1)
-        self.failUnless(result.wasSuccessful(), result.errors)
+        self.assertTrue(result.wasSuccessful(), result.errors)
 
 
 
@@ -171,44 +171,44 @@ class TestTimeout(TestTester):
 
     def test_pass(self):
         result = self.runTest('test_pass')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_passDefault(self):
         result = self.runTest('test_passDefault')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_timeout(self):
         result = self.runTest('test_timeout')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 1)
         self._wasTimeout(result.errors[0][1])
 
     def test_timeoutZero(self):
         result = self.runTest('test_timeoutZero')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 1)
         self._wasTimeout(result.errors[0][1])
 
     def test_skip(self):
         result = self.runTest('test_skip')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.skips), 1)
 
     def test_todo(self):
         result = self.runTest('test_expectedFailure')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.expectedFailures), 1)
         self._wasTimeout(result.expectedFailures[0][1])
 
     def test_errorPropagation(self):
         result = self.runTest('test_errorPropagation')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self._wasTimeout(detests.TimeoutTests.timedOut)
 
@@ -228,7 +228,7 @@ class TestTimeout(TestTester):
         result = self.runTest('test_calledButNeverCallback')
         if call.active():
             call.cancel()
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self._wasTimeout(result.errors[0][1])
 
 
diff --git a/twisted/trial/test/test_keyboard.py b/twisted/trial/test/test_keyboard.py
index ac428d7..ff78a56 100644
--- a/twisted/trial/test/test_keyboard.py
+++ b/twisted/trial/test/test_keyboard.py
@@ -37,13 +37,13 @@ class TestInterruptInTest(TrialTest):
     def test_setUpOK(self):
         self.assertEqual(3, self.suite.countTestCases())
         self.assertEqual(0, self.reporter.testsRun)
-        self.failIf(self.reporter.shouldStop)
+        self.assertFalse(self.reporter.shouldStop)
 
     def test_interruptInTest(self):
         runner.TrialSuite([self.suite]).run(self.reporter)
-        self.failUnless(self.reporter.shouldStop)
+        self.assertTrue(self.reporter.shouldStop)
         self.assertEqual(2, self.reporter.testsRun)
-        self.failIf(TestInterruptInTest.test_03_doNothing_run,
+        self.assertFalse(TestInterruptInTest.test_03_doNothing_run,
                     "test_03_doNothing ran.")
 
 
@@ -73,13 +73,13 @@ class TestInterruptInSetUp(TrialTest):
         self.assertEqual(0, TestInterruptInSetUp.testsRun)
         self.assertEqual(2, self.suite.countTestCases())
         self.assertEqual(0, self.reporter.testsRun)
-        self.failIf(self.reporter.shouldStop)
+        self.assertFalse(self.reporter.shouldStop)
 
     def test_interruptInSetUp(self):
         runner.TrialSuite([self.suite]).run(self.reporter)
-        self.failUnless(self.reporter.shouldStop)
+        self.assertTrue(self.reporter.shouldStop)
         self.assertEqual(2, self.reporter.testsRun)
-        self.failIf(TestInterruptInSetUp.test_02_run,
+        self.assertFalse(TestInterruptInSetUp.test_02_run,
                     "test_02 ran")
 
 
@@ -109,11 +109,11 @@ class TestInterruptInTearDown(TrialTest):
         self.assertEqual(0, TestInterruptInTearDown.testsRun)
         self.assertEqual(2, self.suite.countTestCases())
         self.assertEqual(0, self.reporter.testsRun)
-        self.failIf(self.reporter.shouldStop)
+        self.assertFalse(self.reporter.shouldStop)
 
     def test_interruptInTearDown(self):
         runner.TrialSuite([self.suite]).run(self.reporter)
         self.assertEqual(1, self.reporter.testsRun)
-        self.failUnless(self.reporter.shouldStop)
-        self.failIf(TestInterruptInTearDown.test_02_run,
+        self.assertTrue(self.reporter.shouldStop)
+        self.assertFalse(TestInterruptInTearDown.test_02_run,
                     "test_02 ran")
diff --git a/twisted/trial/test/test_loader.py b/twisted/trial/test/test_loader.py
index 727c511..80a57f2 100644
--- a/twisted/trial/test/test_loader.py
+++ b/twisted/trial/test/test_loader.py
@@ -62,18 +62,18 @@ class FinderTest(packages.PackageTest):
         self.assertEqual(sample.FooTest, sample1)
 
     def test_findNonModule(self):
-        self.failUnlessRaises(AttributeError,
+        self.assertRaises(AttributeError,
                               self.loader.findByName,
                               'twisted.trial.test.nonexistent')
 
     def test_findNonPackage(self):
-        self.failUnlessRaises(ValueError,
+        self.assertRaises(ValueError,
                               self.loader.findByName,
                               'nonextant')
 
     def test_findNonFile(self):
         path = util.sibpath(__file__, 'nonexistent.py')
-        self.failUnlessRaises(ValueError, self.loader.findByName, path)
+        self.assertRaises(ValueError, self.loader.findByName, path)
 
 
 
@@ -82,7 +82,7 @@ class FileTest(packages.SysPathManglingTest):
     Tests for L{runner.filenameToModule}.
     """
     def test_notFile(self):
-        self.failUnlessRaises(ValueError,
+        self.assertRaises(ValueError,
                               runner.filenameToModule, 'doesntexist')
 
     def test_moduleInPath(self):
@@ -145,11 +145,11 @@ class FileTest(packages.SysPathManglingTest):
 
 
     def test_directoryNotPackage(self):
-        self.failUnlessRaises(ValueError, runner.filenameToModule,
+        self.assertRaises(ValueError, runner.filenameToModule,
                               util.sibpath(__file__, 'directory'))
 
     def test_filenameNotPython(self):
-        self.failUnlessRaises(ValueError, runner.filenameToModule,
+        self.assertRaises(ValueError, runner.filenameToModule,
                               util.sibpath(__file__, 'notpython.py'))
 
     def test_filenameMatchesPackage(self):
@@ -174,9 +174,9 @@ class FileTest(packages.SysPathManglingTest):
         f.close()
         try:
             module = runner.filenameToModule(path)
-            self.assert_(module.__name__.endswith('goodDirectory'))
+            self.assertTrue(module.__name__.endswith('goodDirectory'))
             module = runner.filenameToModule(path + os.path.sep)
-            self.assert_(module.__name__.endswith('goodDirectory'))
+            self.assertTrue(module.__name__.endswith('goodDirectory'))
         finally:
             shutil.rmtree(path)
 
@@ -224,11 +224,11 @@ class LoaderTest(packages.SysPathManglingTest):
 
     def test_loadNonMethod(self):
         import sample
-        self.failUnlessRaises(TypeError, self.loader.loadMethod, sample)
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadMethod, sample)
+        self.assertRaises(TypeError,
                               self.loader.loadMethod, sample.FooTest)
-        self.failUnlessRaises(TypeError, self.loader.loadMethod, "string")
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadMethod, "string")
+        self.assertRaises(TypeError,
                               self.loader.loadMethod, ('foo', 'bar'))
 
 
@@ -279,17 +279,17 @@ class LoaderTest(packages.SysPathManglingTest):
 
     def test_loadNonClass(self):
         import sample
-        self.failUnlessRaises(TypeError, self.loader.loadClass, sample)
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadClass, sample)
+        self.assertRaises(TypeError,
                               self.loader.loadClass, sample.FooTest.test_foo)
-        self.failUnlessRaises(TypeError, self.loader.loadClass, "string")
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadClass, "string")
+        self.assertRaises(TypeError,
                               self.loader.loadClass, ('foo', 'bar'))
 
 
     def test_loadNonTestCase(self):
         import sample
-        self.failUnlessRaises(ValueError, self.loader.loadClass,
+        self.assertRaises(ValueError, self.loader.loadClass,
                               sample.NotATest)
 
 
@@ -301,12 +301,12 @@ class LoaderTest(packages.SysPathManglingTest):
 
     def test_loadNonModule(self):
         import sample
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadModule, sample.FooTest)
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadModule, sample.FooTest.test_foo)
-        self.failUnlessRaises(TypeError, self.loader.loadModule, "string")
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadModule, "string")
+        self.assertRaises(TypeError,
                               self.loader.loadModule, ('foo', 'bar'))
 
 
@@ -318,19 +318,19 @@ class LoaderTest(packages.SysPathManglingTest):
 
     def test_loadNonPackage(self):
         import sample
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadPackage, sample.FooTest)
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadPackage, sample.FooTest.test_foo)
-        self.failUnlessRaises(TypeError, self.loader.loadPackage, "string")
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadPackage, "string")
+        self.assertRaises(TypeError,
                               self.loader.loadPackage, ('foo', 'bar'))
 
 
     def test_loadModuleAsPackage(self):
         import sample
         ## XXX -- should this instead raise a ValueError? -- jml
-        self.failUnlessRaises(TypeError, self.loader.loadPackage, sample)
+        self.assertRaises(TypeError, self.loader.loadPackage, sample)
 
 
     def test_loadPackageRecursive(self):
@@ -361,21 +361,21 @@ class LoaderTest(packages.SysPathManglingTest):
     def test_loadAnythingOnPackage(self):
         import goodpackage
         suite = self.loader.loadAnything(goodpackage)
-        self.failUnless(isinstance(suite, self.loader.suiteFactory))
+        self.assertTrue(isinstance(suite, self.loader.suiteFactory))
         self.assertEqual(7, suite.countTestCases())
 
 
     def test_loadAnythingOnPackageRecursive(self):
         import goodpackage
         suite = self.loader.loadAnything(goodpackage, recurse=True)
-        self.failUnless(isinstance(suite, self.loader.suiteFactory))
+        self.assertTrue(isinstance(suite, self.loader.suiteFactory))
         self.assertEqual(14, suite.countTestCases())
 
 
     def test_loadAnythingOnString(self):
         # the important thing about this test is not the string-iness
         # but the non-handledness.
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadAnything, "goodpackage")
 
 
diff --git a/twisted/trial/test/test_pyunitcompat.py b/twisted/trial/test/test_pyunitcompat.py
index c40907f..c76c054 100644
--- a/twisted/trial/test/test_pyunitcompat.py
+++ b/twisted/trial/test/test_pyunitcompat.py
@@ -131,9 +131,9 @@ class TestPyUnitResult(SynchronousTestCase):
         result = pyunit.TestResult()
         test.run(result)
 
-        self.failUnless(test.ran)
+        self.assertTrue(test.ran)
         self.assertEqual(1, result.testsRun)
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
 
     def test_failure(self):
         class FailureTest(SynchronousTestCase):
@@ -145,20 +145,20 @@ class TestPyUnitResult(SynchronousTestCase):
         result = pyunit.TestResult()
         test.run(result)
 
-        self.failUnless(test.ran)
+        self.assertTrue(test.ran)
         self.assertEqual(1, result.testsRun)
         self.assertEqual(1, len(result.failures))
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
 
     def test_error(self):
         test = self.ErrorTest('test_foo')
         result = pyunit.TestResult()
         test.run(result)
 
-        self.failUnless(test.ran)
+        self.assertTrue(test.ran)
         self.assertEqual(1, result.testsRun)
         self.assertEqual(1, len(result.errors))
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
 
     def test_setUpError(self):
         class ErrorTest(SynchronousTestCase):
@@ -171,10 +171,10 @@ class TestPyUnitResult(SynchronousTestCase):
         result = pyunit.TestResult()
         test.run(result)
 
-        self.failIf(test.ran)
+        self.assertFalse(test.ran)
         self.assertEqual(1, result.testsRun)
         self.assertEqual(1, len(result.errors))
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
 
     def test_tracebackFromFailure(self):
         """
diff --git a/twisted/trial/test/test_reporter.py b/twisted/trial/test/test_reporter.py
index 34d44ca..84d8a11 100644
--- a/twisted/trial/test/test_reporter.py
+++ b/twisted/trial/test/test_reporter.py
@@ -48,7 +48,7 @@ class BrokenStream(object):
 class StringTest(unittest.SynchronousTestCase):
     def stringComparison(self, expect, output):
         output = filter(None, output)
-        self.failUnless(len(expect) <= len(output),
+        self.assertTrue(len(expect) <= len(output),
                         "Must have more observed than expected"
                         "lines %d < %d" % (len(output), len(expect)))
         REGEX_PATTERN_TYPE = type(re.compile(''))
@@ -59,7 +59,7 @@ class StringTest(unittest.SynchronousTestCase):
                 self.assertSubstring(exp, out, "Line %d: %r not in %r"
                                      % (line_number, exp, out))
             elif isinstance(exp, REGEX_PATTERN_TYPE):
-                self.failUnless(exp.match(out),
+                self.assertTrue(exp.match(out),
                                 "Line %d: %r did not match string %r"
                                 % (line_number, exp.pattern, out))
             else:
@@ -171,7 +171,7 @@ class TestErrorReporting(StringTest):
         for substring in ['1/0', 'ZeroDivisionError',
                           'Exception raised:', path]:
             self.assertSubstring(substring, output)
-        self.failUnless(re.search('Fail(ed|ure in) example:', output),
+        self.assertTrue(re.search('Fail(ed|ure in) example:', output),
                         "Couldn't match 'Failure in example: ' "
                         "or 'Failed example: '")
         expect = [self.doubleSeparator,
@@ -533,7 +533,7 @@ class TestSkip(unittest.SynchronousTestCase):
         self.result.done()
         output = self.stream.getvalue().splitlines()[-1]
         prefix = 'PASSED '
-        self.failUnless(output.startswith(prefix))
+        self.assertTrue(output.startswith(prefix))
         self.assertEqual(output[len(prefix):].strip(), '(skips=1)')
 
 
@@ -658,7 +658,7 @@ class TodoTest(unittest.SynchronousTestCase):
         self.result.done()
         output = self.stream.getvalue().splitlines()[-1]
         prefix = 'PASSED '
-        self.failUnless(output.startswith(prefix))
+        self.assertTrue(output.startswith(prefix))
         self.assertEqual(output[len(prefix):].strip(),
                          '(expectedFailures=1)')
 
diff --git a/twisted/trial/test/test_runner.py b/twisted/trial/test/test_runner.py
index f14a5f2..50efe8b 100644
--- a/twisted/trial/test/test_runner.py
+++ b/twisted/trial/test/test_runner.py
@@ -135,7 +135,7 @@ class TrialRunnerTestsMixin:
         self.runner.run(self.test)
         self.runner.run(self.test)
         self.assertEqual(len(l), 2)
-        self.failIf(l[0] is l[1], "Should have created a new file observer")
+        self.assertFalse(l[0] is l[1], "Should have created a new file observer")
 
 
     def test_logFileGetsClosed(self):
@@ -150,7 +150,7 @@ class TrialRunnerTestsMixin:
         self.runner._setUpLogFile = setUpLogFile
         self.runner.run(self.test)
         self.assertEqual(len(l), 1)
-        self.failUnless(l[0].closed)
+        self.assertTrue(l[0].closed)
 
 
 
@@ -599,7 +599,7 @@ class TestUntilFailure(unittest.SynchronousTestCase):
         """
         result = self.runner.runUntilFailure(self.test)
         self.assertEqual(result.testsRun, 1)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(self._getFailures(result), 1)
 
 
@@ -711,7 +711,7 @@ class TestLoggedErrors(unittest.SynchronousTestCase):
         suite.run(result)
         self.assertEqual(len(result.errors), 1)
         self.assertEqual(result.errors[0][0].id(), runner.NOT_IN_TEST)
-        self.failUnless(result.errors[0][1].check(RuntimeError))
+        self.assertTrue(result.errors[0][1].check(RuntimeError))
 
 
 
@@ -891,7 +891,7 @@ class TestMalformedMethod(unittest.SynchronousTestCase):
         test = TestMalformedMethod.ContainMalformed(method)
         result = trialRunner.run(test)
         self.assertEqual(result.testsRun, 1)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(len(result.errors), 1)
 
     def test_extraArg(self):
diff --git a/twisted/trial/test/test_script.py b/twisted/trial/test/test_script.py
index d92d9f8..199bc11 100644
--- a/twisted/trial/test/test_script.py
+++ b/twisted/trial/test/test_script.py
@@ -264,15 +264,15 @@ class TestModuleTest(unittest.SynchronousTestCase):
                              localVars)
 
     def test_invalidLine(self):
-        self.failUnlessRaises(ValueError, trial._parseLocalVariables,
+        self.assertRaises(ValueError, trial._parseLocalVariables,
                               'foo')
 
     def test_invalidDeclaration(self):
-        self.failUnlessRaises(ValueError, trial._parseLocalVariables,
+        self.assertRaises(ValueError, trial._parseLocalVariables,
                               '-*- foo -*-')
-        self.failUnlessRaises(ValueError, trial._parseLocalVariables,
+        self.assertRaises(ValueError, trial._parseLocalVariables,
                               '-*- foo: bar; qux -*-')
-        self.failUnlessRaises(ValueError, trial._parseLocalVariables,
+        self.assertRaises(ValueError, trial._parseLocalVariables,
                               '-*- foo: bar: baz; qux: qax -*-')
 
     def test_variablesFromFile(self):
@@ -308,11 +308,11 @@ class TestModuleTest(unittest.SynchronousTestCase):
 
     def test_looksLikeTestModule(self):
         for filename in ['test_script.py', 'twisted/trial/test/test_script.py']:
-            self.failUnless(trial.isTestFile(filename),
+            self.assertTrue(trial.isTestFile(filename),
                             "%r should be a test file" % (filename,))
         for filename in ['twisted/trial/test/moduletest.py',
                          sibpath('scripttest.py'), sibpath('test_foo.bat')]:
-            self.failIf(trial.isTestFile(filename),
+            self.assertFalse(trial.isTestFile(filename),
                         "%r should *not* be a test file" % (filename,))
 
 
diff --git a/twisted/trial/test/test_tests.py b/twisted/trial/test/test_tests.py
index c5d1135..eb6b40b 100644
--- a/twisted/trial/test/test_tests.py
+++ b/twisted/trial/test/test_tests.py
@@ -54,7 +54,7 @@ class ResultsTestMixin(object):
 
 
     def test_setUp(self):
-        self.failUnless(self.reporter.wasSuccessful())
+        self.assertTrue(self.reporter.wasSuccessful())
         self.assertEqual(self.reporter.errors, [])
         self.assertEqual(self.reporter.failures, [])
         self.assertEqual(self.reporter.skips, [])
@@ -558,13 +558,13 @@ class TestReactorCleanup(unittest.SynchronousTestCase):
         suite = self.loader.loadMethod(
             erroneous.SocketOpenTest.test_socketsLeftOpen)
         suite.run(self.result)
-        self.failIf(self.result.wasSuccessful())
+        self.assertFalse(self.result.wasSuccessful())
         # socket cleanup happens at end of class's tests.
         # all the tests in the class are successful, even if the suite
         # fails
         self.assertEqual(self.result.successes, 1)
         failure = self.result.errors[0][1]
-        self.failUnless(failure.check(util.DirtyReactorAggregateError))
+        self.assertTrue(failure.check(util.DirtyReactorAggregateError))
 
 
     def testLeftoverPendingCalls(self):
@@ -574,10 +574,10 @@ class TestReactorCleanup(unittest.SynchronousTestCase):
         """
         suite = erroneous.ReactorCleanupTests('test_leftoverPendingCalls')
         suite.run(self.result)
-        self.failIf(self.result.wasSuccessful())
+        self.assertFalse(self.result.wasSuccessful())
         failure = self.result.errors[0][1]
         self.assertEqual(self.result.successes, 0)
-        self.failUnless(failure.check(util.DirtyReactorAggregateError))
+        self.assertTrue(failure.check(util.DirtyReactorAggregateError))
 
 
 
@@ -815,7 +815,7 @@ class AddCleanupMixin(object):
         """
         self.test.addCleanup(self.test.fail, 'foo')
         self.test.run(self.result)
-        self.failIf(self.result.wasSuccessful())
+        self.assertFalse(self.result.wasSuccessful())
         self.assertEqual(1, len(self.result.errors))
         [(test, error)] = self.result.errors
         self.assertEqual(test, self.test)
diff --git a/twisted/trial/test/test_util.py b/twisted/trial/test/test_util.py
index 0a529b8..f680bb7 100644
--- a/twisted/trial/test/test_util.py
+++ b/twisted/trial/test/test_util.py
@@ -126,11 +126,11 @@ class TestFindObject(packages.SysPathManglingTest):
         self.assertEqual((True, test_sample), test_sample2)
 
     def test_importError(self):
-        self.failUnlessRaises(ZeroDivisionError,
+        self.assertRaises(ZeroDivisionError,
                               util.findObject, 'package.test_bad_module')
 
     def test_sophisticatedImportError(self):
-        self.failUnlessRaises(ImportError,
+        self.assertRaises(ImportError,
                               util.findObject, 'package2.test_module')
 
     def test_importNonexistentPackage(self):
