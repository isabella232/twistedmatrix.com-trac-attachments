Index: doc/core/howto/listings/tubes/intparse.py
===================================================================
--- doc/core/howto/listings/tubes/intparse.py	(revision 39608)
+++ doc/core/howto/listings/tubes/intparse.py	(working copy)
@@ -15,6 +15,3 @@
         else:
             result = int(item)
         self.tube.deliver(result)
-
-def product(numbers):
-    return reduce(operator.mul, numbers, 1)
Index: doc/core/howto/tube.xhtml
===================================================================
--- doc/core/howto/tube.xhtml	(revision 39608)
+++ doc/core/howto/tube.xhtml	(working copy)
@@ -33,14 +33,16 @@
 
 <p>
 Also, when dealing with streams of data from networks, it's common to want to send data somewhere as well as receiving it from somewhere.
-Even if your program is concerned with converting a sequence bytes into a sequence of lines, it needs to be aware of the fact that its output may be full, and unprepared receive any more lines.
+Even if your program is concerned with converting a sequence bytes
+into a sequence of lines, it needs to be aware of the fact that its
+output buffer may be full, and unprepared to receive any more lines.
 For example, the line-splitting code above might be used in a proxy that relays output from a cloud server with a very fast datacenter uplink, to computers on very slow consumer networks.
 The cloud server's output will easily outpace a home network's input, which means that if the line parser is going as fast as it can, lines will pile up in outgoing buffers while waiting to be sent out, and consume all of the proxy's memory.
 When this happens, the line parsing program needs to tell <em>its</em> input to slow down, by indicating that it should no longer produce bytes, until the program consuming the line parser's output is ready again.
 </p>
 
 <p>
-The <code>twisted.tubes</code> package contains several interfaces and utilities for dealing with passing inputs to outputs, buffering intermediary data, and dealing with flow-control.
+The <code>twisted.tubes</code> package contains several interfaces and utilities for passing inputs to outputs, buffering intermediary data, and dealing with flow-control.
 <code>tubes</code> will solve some of the problems above for you automatically, and for those problems you need to solve yourself, it will provide common abstractions that make solving them easier.
 This document will teach you how to use the <code>twisted.tubes</code> package.
 </p>
@@ -63,7 +65,7 @@
     </li>
     <li>
     <code>twisted.tubes</code> <em>handles flow control automatically</em>.
-    The manual flow-control notifications provided by <code>IProducer</code> and <code>IConsumer</code> are still used internnally in <code>tubes</code> to hook up to <code>twisted.internet</code>, but the interfaces defined in <code>tubes</code> itself are considerably more flexible, as they allow you to hook together chains of arbitrary length, as opposed to just get buffer notifications for a single connection.
+    The manual flow-control notifications provided by <code>IProducer</code> and <code>IConsumer</code> are still used internally in <code>tubes</code> to hook up to <code>twisted.internet</code>, but the interfaces defined in <code>tubes</code> itself are considerably more flexible, as they allow you to hook together chains of arbitrary length, as opposed to just getting buffer notifications for a single connection.
     </li>
 </ol>
 </div>
@@ -86,7 +88,7 @@
 </p>
 
 <p>
-Let's do exactly that, and get <code>echoFlow</code> called with a real, network-facing <code>fount</code> and <code>drain</code>.
+Let's do exactly that, and call <code>echoFlow</code> with a real, network-facing <code>fount</code> and <code>drain</code>.
 </p>
 
 <a href="listings/tubes/echotube.py" class="py-listing">echotube.py</a>
@@ -125,7 +127,7 @@
 <p>
 To demonstrate this, we'll build a little network-based calculator.
 This program will take input, provided as a series of lines.
-These lines will contain data (numbers) and instructions (arithmetic operations, in this case "SUM" and "PRODUCT" for addition and multipliciation respectively) and produce output data (lines containing an equal sign and then results).
+These lines will contain data (numbers) and instructions (arithmetic operations, in this case "SUM" and "PRODUCT" for addition and multiplication respectively) and produce output data (lines containing an equal sign and then results).
 </p>
 
 <p>
@@ -191,11 +193,13 @@
 <a href="listings/tubes/portforward.py" class="py-listing">portforward.py</a>
 
 <p>
-For each incoming connection on port <code>6543</code>, we creating an outgoing connection to the echo server in our previous example.
+For each incoming connection on port <code>6543</code>, we create an outgoing connection to the echo server in our previous example.
 When we have successfully connected to the echo server we connect our incoming <code>listeningFount</code> to our outgoing <code>connectingDrain</code> and our <code>connectingFount</code> to our <code>listeningDrain</code>.
 This forwards all bytes from your <code>telnet</code> client to our echo server, and all bytes from our echo server to your client.
 </p>
 
+<h2>XXX: Add a subheading here to give some context</h2>
+<p>XXX: ...and isn't this the same as using series?</p>
 <pre class="python">
 def echoFlow(fount, drain):
     return (fount.flowTo(Tube(stringToNetstring()))
@@ -205,6 +209,8 @@
 <p>
 <code class="API" base="twisted.tubes.itube.IFount">flowTo</code> can return a <code class="API" base="twisted.tube.itube">IFount</code> so we can chain <code class="API" base="twisted.tubes.itube.IFount">flowTo</code> calls (in other words, call <code>flowTo</code> on the result of <code>flowTo</code>) to construct a "flow".
 In this case, <code>.flowTo(Tube(stringToNetstring()))</code> returns a new <code class="API" base="twisted.tubes.itube">IFount</code> whose output will be <a href="http://cr.yp.to/proto/netstrings.txt">netstring</a>s.
+
+<p>XXX: The following note is very difficult to read. I didn't find it helpful.</p>
 <div class="note">
     If you're curious: specifically, <code class="API" base="twisted.tubes.itube.IFount">flowTo</code> takes an <code class="API" base="twisted.tube.itube">IDrain</code>, and returns the result of that <code class="API" base="twisted.tube.itube">IDrain</code>'s <code class="API" base="twisted.tubes.itube.IDrain">flowingFrom</code> method.
     This allows the <code>Tube</code> - which is the <code>IDrain</code> in this scenario, and therefore what knows what the output will be after it's processed it, to affect the return value of the previous <code>IFount</code>'s <code>flowTo</code> method.
@@ -213,5 +219,8 @@
 This demonstrates how you can manipulate data as it passes through a flow.
 </p>
 
+<h2>Conclusion</h2>
+<p>XXX: Add a conclusion section - what has been learned, where to go next.</p>
+
 </body>
 </html>
