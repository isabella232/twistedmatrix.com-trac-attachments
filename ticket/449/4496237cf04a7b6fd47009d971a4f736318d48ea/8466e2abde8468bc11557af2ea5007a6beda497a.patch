commit 1e02d010c5c941f6c6638b31f56715e9a990fad7
Author: Wolfgang Rohdewald <wolfgang@rohdewald.de>
Date:   Fri Oct 3 12:17:25 2014 +0200

    twisted.python.reflect.safe_str on Python 3 converts utf-8 encoded bytes to clean str instead of "b'a'"

diff --git twisted/python/reflect.py twisted/python/reflect.py
index 363553e..3ffee85 100644
--- twisted/python/reflect.py
+++ twisted/python/reflect.py
@@ -388,7 +388,15 @@ def _safeFormat(formatter, o):
     Helper function for L{safe_repr} and L{safe_str}.
     """
     try:
-        return formatter(o)
+        if _PY3 and formatter is str and isinstance(o, bytes):
+            # for b"a", we do not want 'b"a"'
+            # do that only for legal utf-8 byte strings
+            try:
+                return o.decode('utf-8')
+            except UnicodeDecodeError:
+                return formatter(o)
+        else:
+            return formatter(o)
     except:
         io = NativeStringIO()
         traceback.print_exc(file=io)
diff --git twisted/python/topfiles/7660.bugfix twisted/python/topfiles/7660.bugfix
new file mode 100644
index 0000000..5487c8a
--- /dev/null
+++ twisted/python/topfiles/7660.bugfix
@@ -0,0 +1 @@
+twisted.python.reflect.safe_str on Python 3 converts utf-8 encoded bytes to clean str instead of "b'a'"
diff --git twisted/test/test_reflect.py twisted/test/test_reflect.py
index a521cbc..db9dfaf 100644
--- twisted/test/test_reflect.py
+++ twisted/test/test_reflect.py
@@ -434,8 +434,8 @@ class SafeRepr(TestCase):
         L{reflect.safe_repr} produces the same output as C{repr} on a working
         object.
         """
-        x = [1, 2, 3]
-        self.assertEqual(reflect.safe_repr(x), repr(x))
+        for x in ([1, 2, 3], b'a'):
+            self.assertEqual(reflect.safe_repr(x), repr(x))
 
 
     def test_brokenRepr(self):
@@ -537,6 +537,45 @@ class SafeStr(TestCase):
         reflect.safe_str(b)
 
 
+    def test_workingUtf8_2(self):
+        """
+        safe_str for b'utf8-data, Python 2'
+        """
+        x = b'a'
+        self.assertEqual(reflect.safe_str(x), 'a')
+        x = b't\xc3\xbcst'      # legal UTF-8: We want a native string
+        self.assertEqual(reflect.safe_str(x), x)
+
+
+    def test_workingUtf8_3(self):
+        """
+        safe_str for b'utf8-data, Python 3'
+        """
+        x = b'a'
+        self.assertEqual(reflect.safe_str(x), 'a')
+        x = b't\xc3\xbcst'      # legal UTF-8: We want a native string
+        self.assertEqual(reflect.safe_str(x), x.decode('utf-8'))
+
+
+    if _PY3:
+        # TODO: after something like python.compat.nativeUtf8String is
+        # introduced, use that one for assertEqual. Then we can combine
+        # test_workingUtf8_* tests into one without needing _PY3.
+        # nativeUtf8String is needed for Python 3 anyway.
+        test_workingUtf8_2.skip = ("Skip Python 2 specific test for utf-8 str")
+    else:
+        test_workingUtf8_3.skip = ("Skip Python 3 specific test for utf-8 bytes")
+
+
+    def test_brokenUtf8(self):
+        """
+        Use str() for non-utf8 bytes: "b'non-utf8'"
+        """
+        x = b'\xff'
+        xStr = reflect.safe_str(x)
+        self.assertEqual(xStr, str(x))
+
+
     def test_brokenRepr(self):
         b = Breakable()
         b.breakRepr = True
