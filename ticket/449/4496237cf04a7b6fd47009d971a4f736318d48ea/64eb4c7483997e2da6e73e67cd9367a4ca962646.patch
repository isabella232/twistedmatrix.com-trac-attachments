diff --git twisted/python/reflect.py twisted/python/reflect.py
index 4b92404..63334d2 100644
--- twisted/python/reflect.py
+++ twisted/python/reflect.py
@@ -386,24 +386,20 @@ def _determineClassName(x):
 def _safeFormat(formatter, o):
     """
     Helper function for L{safe_repr} and L{safe_str}.
+    Returns a string containing info about o and the lastest exception.
+
+    @param formatter: C{str} or C{repr}.
+    @type formatter: C{type}
+    @param o: Any object.
+
+    @rtype: C{str}
     """
-    try:
-        if _PY3 and formatter is str and isinstance(o, bytes):
-            # for b"a", we do not want 'b"a"'
-            # do that only for legal utf-8 byte strings
-            try:
-                return o.decode('utf-8')
-            except UnicodeDecodeError:
-                return formatter(o)
-        else:
-            return formatter(o)
-    except:
-        io = NativeStringIO()
-        traceback.print_exc(file=io)
-        className = _determineClassName(o)
-        tbValue = io.getvalue()
-        return "<%s instance at 0x%x with %s error:\n %s>" % (
-            className, id(o), formatter.__name__, tbValue)
+    io = NativeStringIO()
+    traceback.print_exc(file=io)
+    className = _determineClassName(o)
+    tbValue = io.getvalue()
+    return "<%s instance at 0x%x with %s error:\n %s>" % (
+        className, id(o), formatter.__name__, tbValue)
 
 
 
@@ -416,7 +412,10 @@ def safe_repr(o):
 
     @rtype: C{str}
     """
-    return _safeFormat(repr, o)
+    try:
+        return repr(o)
+    except:
+        return _safeFormat(repr, o)
 
 
 
@@ -429,7 +428,17 @@ def safe_str(o):
 
     @rtype: C{str}
     """
-    return _safeFormat(str, o)
+    if _PY3 and isinstance(o, bytes):
+        # If o is bytes and seems to holds a utf-8 encoded string,
+        # convert it to str.
+        try:
+            return o.decode('utf-8')
+        except:
+            pass
+    try:
+        return str(o)
+    except:
+        return _safeFormat(str, o)
 
 
 class QueueMethod:
diff --git twisted/test/test_reflect.py twisted/test/test_reflect.py
index a193ab7..1ea6068 100644
--- twisted/test/test_reflect.py
+++ twisted/test/test_reflect.py
@@ -434,8 +434,8 @@ class SafeRepr(TestCase):
         L{reflect.safe_repr} produces the same output as C{repr} on a working
         object.
         """
-        for x in ([1, 2, 3], b'a'):
-            self.assertEqual(reflect.safe_repr(x), repr(x))
+        working_objects = ([1, 2, 3], b'a')
+        self.assertEqual(map(reflect.safe_repr, working_objects), map(repr, working_objects))
 
 
     def test_brokenRepr(self):
@@ -537,23 +537,30 @@ class SafeStr(TestCase):
         reflect.safe_str(b)
 
 
-    def test_workingUtf8_2(self):
+    def test_workingAscii(self):
         """
-        safe_str for b'utf8-data, Python 2'
+        safe_str for C{str} with ascii-only data should return the
+        value unchanged.
         """
-        x = b'a'
+        x = 'a'
         self.assertEqual(reflect.safe_str(x), 'a')
-        x = b't\xc3\xbcst'      # legal UTF-8: We want a native string
+
+
+    def test_workingUtf8_2(self):
+        """
+        safe_str for C{str} with utf-8 encoded data should return the
+        value unchanged.
+        """
+        x = b't\xc3\xbcst'
         self.assertEqual(reflect.safe_str(x), x)
 
 
     def test_workingUtf8_3(self):
         """
-        safe_str for b'utf8-data, Python 3'
+        safe_str for C{bytes} with utf-8 encoded data should return
+        the value decoded into C{str}.
         """
-        x = b'a'
-        self.assertEqual(reflect.safe_str(x), 'a')
-        x = b't\xc3\xbcst'      # legal UTF-8: We want a native string
+        x = b't\xc3\xbcst'
         self.assertEqual(reflect.safe_str(x), x.decode('utf-8'))
 
 
