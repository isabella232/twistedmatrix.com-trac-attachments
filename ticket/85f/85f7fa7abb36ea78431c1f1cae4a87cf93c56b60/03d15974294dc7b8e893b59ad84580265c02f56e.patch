Index: test_deferred.py
===================================================================
--- test_deferred.py	(revision 37786)
+++ test_deferred.py	(working copy)
@@ -165,30 +165,50 @@
         self.assertEqual(result.testsRun, 1)
 
     def test_passGenerated(self):
+        """
+        C{runTest} is run with test_passGenerated as argument.
+        This test fails if C{runTest} fails
+        """
         result = self.runTest('test_passGenerated')
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.failUnless(detests.DeferredTests.touched)
 
     def test_fail(self):
+        """
+        C{runTest} is run with test_fail as argument. This fails 
+        if C{runTest} return any failure.
+        """
         result = self.runTest('test_fail')
         self.failIf(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 1)
 
     def test_failureInCallback(self):
+        """
+        C{runTest} is run with test_failureInCallback as argument.
+        Then fails if C{runTest} returns any failure
+        """
         result = self.runTest('test_failureInCallback')
         self.failIf(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 1)
 
     def test_errorInCallback(self):
+        """
+        C{runTest} is run with test_errorInCallback as argument.
+        Fails is C{runTest} retutrns any failure.
+        """
         result = self.runTest('test_errorInCallback')
         self.failIf(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 1)
 
     def test_skip(self):
+        """
+        C{runTest} is run with test_skip as argument. This fails if 
+        C{runTest} returns any failure.
+        """
         result = self.runTest('test_skip')
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
@@ -196,6 +216,10 @@
         self.failIf(detests.DeferredTests.touched)
 
     def test_todo(self):
+        """
+        C{runTest} is run with test_expectedFailure as argument. 
+        Fails if C{runTest} returns any failures.
+        """
         result = self.runTest('test_expectedFailure')
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
@@ -204,6 +228,10 @@
         self.assertEqual(len(result.expectedFailures), 1)
 
     def test_thread(self):
+        """
+        C{runTest} is run with test_thread as argument. 
+        Fails if C{runTest} returns any failures.
+        """
         result = self.runTest('test_thread')
         self.assertEqual(result.testsRun, 1)
         self.failUnless(result.wasSuccessful(), result.errors)
@@ -212,23 +240,41 @@
 
 class TestTimeout(TestTester):
     def getTest(self, name):
+        """
+        The argument passed to this test case is sent to C{TimeoutTests}.
+        """
         return detests.TimeoutTests(name)
 
     def _wasTimeout(self, error):
+        """
+        Tests if timeout has occured or not and return failure if timed out.
+        """
         self.assertEqual(error.check(defer.TimeoutError),
                              defer.TimeoutError)
 
     def test_pass(self):
+        """
+        C{runTest} is run with test_pass as argument. It fails if C{runTest} 
+        returns failure.
+        """
         result = self.runTest('test_pass')
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_passDefault(self):
+        """
+        C{runTest} is run with test_passDefault as argument. 
+        Fails if it returns failure.
+        """
         result = self.runTest('test_passDefault')
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_timeout(self):
+        """
+        C{runTest} is run with test timeout as argument.
+        Fails if it returns failure.
+        """
         result = self.runTest('test_timeout')
         self.failIf(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
@@ -236,6 +282,10 @@
         self._wasTimeout(result.errors[0][1])
 
     def test_timeoutZero(self):
+        """
+        C{runTest} is run with test test_timeoutZero as argument.
+        Fails if it returns failure.
+        """
         result = self.runTest('test_timeoutZero')
         self.failIf(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
@@ -243,12 +293,20 @@
         self._wasTimeout(result.errors[0][1])
 
     def test_skip(self):
+        """
+        C{runTest} is run with test test_skip as argument.
+        Fails if it returns failure.
+        """
         result = self.runTest('test_skip')
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.skips), 1)
 
     def test_todo(self):
+        """
+        C{runTest} is run with test test_expectedFailure as argument.
+        Fails if it returns failure. Also check if timeout has occured.
+        """
         result = self.runTest('test_expectedFailure')
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
@@ -256,12 +314,20 @@
         self._wasTimeout(result.expectedFailures[0][1])
 
     def test_errorPropagation(self):
+        """
+        C{runTest} is run with test test_errorPropagation as argument.
+        Fails if it returns failure. Also check if timeout has occured.
+        """
         result = self.runTest('test_errorPropagation')
         self.failIf(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self._wasTimeout(detests.TimeoutTests.timedOut)
 
     def test_classTimeout(self):
+        """
+        Loads C{TestLoader} and perform C{TestResult} from C{TestsFromTestCase}.
+        Fails if it returns failure
+        """
         loader = pyunit.TestLoader()
         suite = loader.loadTestsFromTestCase(detests.TestClassTimeoutAttribute)
         result = reporter.TestResult()
@@ -270,6 +336,11 @@
         self._wasTimeout(result.errors[0][1])
 
     def test_callbackReturnsNonCallingDeferred(self):
+        """
+        C{callLater} is called as argument that generates a delayed call back. 
+        C{runTest} is run with test_callButNeverCallback as argument.
+        Fails if it returns any failure.
+        """
         #hacky timeout
         # raises KeyboardInterrupt because Trial sucks
         from twisted.internet import reactor
