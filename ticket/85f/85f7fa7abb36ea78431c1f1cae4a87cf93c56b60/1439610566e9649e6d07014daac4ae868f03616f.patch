Index: test_deferred.py
===================================================================
--- test_deferred.py	(revision 37488)
+++ test_deferred.py	(working copy)
@@ -17,18 +17,27 @@
 
 class TestSetUp(unittest.TestCase):
     def _loadSuite(self, klass):
+        """
+        This testcase loads the test suite and accumulates the results
+        """
         loader = pyunit.TestLoader()
         r = reporter.TestResult()
         s = loader.loadTestsFromTestCase(klass)
         return r, s
 
     def test_success(self):
+        """
+        Tests whether the loaded test suite was successful and fail the test if C{result.testsRun} fails.
+        """
         result, suite = self._loadSuite(detests.DeferredSetUpOK)
         suite(result)
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_fail(self):
+        """
+        Test the result of C{detests.DeferredSetUpFail} and fails if it is returning any failures  
+        """
         self.failIf(detests.DeferredSetUpFail.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpFail)
         suite(result)
@@ -39,6 +48,9 @@
         self.failIf(detests.DeferredSetUpFail.testCalled)
 
     def test_callbackFail(self):
+        """
+        Test the result of C{detests.DeferredSetUpCallbackFail} and fails if it is returning any failures in call back. 
+        """
         self.failIf(detests.DeferredSetUpCallbackFail.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpCallbackFail)
         suite(result)
@@ -49,6 +61,9 @@
         self.failIf(detests.DeferredSetUpCallbackFail.testCalled)
 
     def test_error(self):
+        """
+        Test the result of L{detests.DeferredSetUpError} and fails if it is resulting any set up errors or failures.
+        """
         self.failIf(detests.DeferredSetUpError.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpError)
         suite(result)
@@ -59,6 +74,9 @@
         self.failIf(detests.DeferredSetUpError.testCalled)
 
     def test_skip(self):
+        """
+        Tests for the result of  L{detests.DeferredSetUpSkip} and fails if it is resulting in any failures or errors.
+        """
         self.failIf(detests.DeferredSetUpSkip.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpSkip)
         suite(result)
@@ -72,19 +90,31 @@
 
 class TestNeverFire(unittest.TestCase):
     def setUp(self):
+        """
+        Set up the old timeout as the default timeout duration and reset the C{util.DEFAULT_TIMEOUT_DURATION} as 0.1
+        """
         self._oldTimeout = util.DEFAULT_TIMEOUT_DURATION
         util.DEFAULT_TIMEOUT_DURATION = 0.1
 
     def tearDown(self):
+        """
+        Set the C{util.DEFAULT_TIMEOUT_DURATION} as the value of old timeout.
+        """
         util.DEFAULT_TIMEOUT_DURATION = self._oldTimeout
 
     def _loadSuite(self, klass):
+        """
+        This method loads the C{pyunit.TestLoader}
+        """
         loader = pyunit.TestLoader()
         r = reporter.TestResult()
         s = loader.loadTestsFromTestCase(klass)
         return r, s
 
     def test_setUp(self):
+        """
+        Test the result of C{detests.DeferredSetUpNeverFire} and fails if any failure or errors are detected. 
+        """
         self.failIf(detests.DeferredSetUpNeverFire.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpNeverFire)
         suite(result)
@@ -98,9 +128,15 @@
 
 class TestTester(unittest.TestCase):
     def getTest(self, name):
+        """
+        The function raises an exception as C{NotImplementedError}
+        """
         raise NotImplementedError("must override me")
 
     def runTest(self, name):
+        """
+        This test run the C{reporter.TestResult} C{getTest} with the argument passed.
+        """
         result = reporter.TestResult()
         self.getTest(name).run(result)
         return result
@@ -111,6 +147,9 @@
         return detests.DeferredTests(name)
 
     def test_pass(self):
+        """
+        C{runTest} is run with test_pass as argument. This test fails if C{runTest} fails 
+        """
         result = self.runTest('test_pass')
         self.failUnless(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
