Index: twisted/web/server.py
===================================================================
--- twisted/web/server.py	(revision 19298)
+++ twisted/web/server.py	(working copy)
@@ -75,7 +75,7 @@
     def __init__(self, allowedMethods, *args):
         Exception.__init__(self, allowedMethods, *args)
         self.allowedMethods = allowedMethods
-        
+
         if not operator.isSequenceType(allowedMethods):
             why = "but my first argument is not a sequence."
             s = ("First argument must be a sequence of"
@@ -387,55 +387,78 @@
 
 
 class Session(components.Componentized):
-    """A user's session with a system.
+    """
+    A user's session with a system.
 
     This utility class contains no functionality, but is used to
     represent a session.
     """
+    sessionTimeout = 900
+    loopFactory = task.LoopingCall
+
     def __init__(self, site, uid):
-        """Initialize a session with a unique ID for that session.
         """
+        Initialize a session with a unique ID for that session.
+        """
         components.Componentized.__init__(self)
         self.site = site
         self.uid = uid
         self.expireCallbacks = []
-        self.checkExpiredLoop = task.LoopingCall(self.checkExpired)
+        self.checkExpiredLoop = None
         self.touch()
         self.sessionNamespaces = {}
 
+    def startCheckingExpiration(self, lifetime):
+        """
+        Start expiration tracking.
+        """
+        self.checkExpiredLoop = self.loopFactory(self.checkExpired)
+        self.checkExpiredLoop.start(lifetime, now=False)
+
     def notifyOnExpire(self, callback):
-        """Call this callback when the session expires or logs out.
         """
+        Call this callback when the session expires or logs out.
+        """
         self.expireCallbacks.append(callback)
 
     def expire(self):
-        """Expire/logout of the session.
         """
-        #log.msg("expired session %s" % self.uid)
+        Expire/logout of the session.
+        """
         del self.site.sessions[self.uid]
         for c in self.expireCallbacks:
             c()
         self.expireCallbacks = []
-        self.checkExpiredLoop.stop()
-        # Break reference cycle.
-        self.checkExpiredLoop = None
+        if self.checkExpiredLoop:
+            self.checkExpiredLoop.stop()
+            # Break reference cycle.
+            self.checkExpiredLoop = None
 
+    def _getTime(self):
+        """
+        Return current time used for session validity.
+        """
+        return time.time()
+
     def touch(self):
-        self.lastModified = time.time()
+        """
+        Notify session modification.
+        """
+        self.lastModified = self._getTime()
 
     def checkExpired(self):
-        """Is it time for me to expire?
+        """
+        Is it time for me to expire?
 
         If I haven't been touched in fifteen minutes, I will call my
         expire method.
         """
         # If I haven't been touched in 15 minutes:
-        if time.time() - self.lastModified > 900:
-            if self.site.sessions.has_key(self.uid):
+        if self._getTime() - self.lastModified > self.sessionTimeout:
+            if self.uid in self.site.sessions:
                 self.expire()
 
 
-
 version = "TwistedWeb/%s" % copyright.version
 
 
@@ -444,10 +467,13 @@
     counter = 0
     requestFactory = Request
     displayTracebacks = True
-    
+    sessionFactory = Session
+    sessionCheckTime = 1800
+
     def __init__(self, resource, logPath=None, timeout=60*60*12):
-        """Initialize.
         """
+        Initialize.
+        """
         http.HTTPFactory.__init__(self, logPath=logPath, timeout=timeout)
         self.sessions = {}
         self.resource = resource
@@ -462,29 +488,33 @@
         return d
 
     def _mkuid(self):
-        """(internal) Generate an opaque, unique ID for a user's session.
         """
+        (internal) Generate an opaque, unique ID for a user's session.
+        """
         import md5, random
         self.counter = self.counter + 1
         return md5.new("%s_%s" % (str(random.random()) , str(self.counter))).hexdigest()
 
     def makeSession(self):
-        """Generate a new Session instance, and store it for future reference.
         """
+        Generate a new Session instance, and store it for future reference.
+        """
         uid = self._mkuid()
-        session = self.sessions[uid] = Session(self, uid)
-        session.checkExpiredLoop.start(1800)
+        session = self.sessions[uid] = self.sessionFactory(self, uid)
+        session.startCheckingExpiration(self.sessionCheckTime)
         return session
 
     def getSession(self, uid):
-        """Get a previously generated session, by its unique ID.
+        """
+        Get a previously generated session, by its unique ID.
         This raises a KeyError if the session is not found.
         """
         return self.sessions[uid]
 
     def buildProtocol(self, addr):
-        """Generate a channel attached to this site.
         """
+        Generate a channel attached to this site.
+        """
         channel = http.HTTPFactory.buildProtocol(self, addr)
         channel.requestFactory = self.requestFactory
         channel.site = self
@@ -493,19 +523,22 @@
     isLeaf = 0
 
     def render(self, request):
-        """Redirect because a Site is always a directory.
         """
+        Redirect because a Site is always a directory.
+        """
         request.redirect(request.prePathURL() + '/')
         request.finish()
 
     def getChildWithDefault(self, pathEl, request):
-        """Emulate a resource's getChild method.
         """
+        Emulate a resource's getChild method.
+        """
         request.site = self
         return self.resource.getChildWithDefault(pathEl, request)
 
     def getResourceFor(self, request):
-        """Get a resource for a request.
+        """
+        Get a resource for a request.
 
         This iterates through the resource heirarchy, calling
         getChildWithDefault on each resource it finds for a path element,
@@ -519,3 +552,4 @@
 
 
 import html
+
Index: twisted/web/test/test_web.py
===================================================================
--- twisted/web/test/test_web.py	(revision 19298)
+++ twisted/web/test/test_web.py	(working copy)
@@ -6,7 +6,7 @@
 from cStringIO import StringIO
 
 from twisted.web import server, resource, util
-from twisted.internet import defer, interfaces, error
+from twisted.internet import defer, interfaces, error, task
 from twisted.web import http
 from twisted.protocols import loopback
 from twisted.python import log, reflect
@@ -90,20 +90,57 @@
 class SessionTest(unittest.TestCase):
 
     def setUp(self):
+        clock = self.clock = task.Clock()
+        # Define a looping call using the clock
+        class MockLoopingCall(task.LoopingCall):
+            def _callLater(self, delay):
+                return clock.callLater(delay, self)
+
+        times = self.times = []
+
+        # Define a session that 1) user the mock looping call 2) use own timer
+        class MockSession(server.Session):
+            loopFactory = MockLoopingCall
+
+            def _getTime(self):
+                return times.pop(0)
+
         self.site = server.Site(SimpleResource())
+        self.site.sessionFactory = MockSession
 
+    def test_basicExpiration(self):
+        """
+        Test session expiration: setup a session, and simulate an expiration
+        time.
+        """
+        self.times.extend([0, server.Session.sessionTimeout + 1])
+        session = self.site.makeSession()
+        hasExpired = [False]
+        def cbExpire():
+            hasExpired[0] = True
+        session.notifyOnExpire(cbExpire)
+        self.clock.advance(server.Site.sessionCheckTime - 1)
+        # Looping call should not have been executed
+        self.assert_(not hasExpired[0])
+
+        self.clock.advance(1)
+
+        self.assert_(hasExpired[0])
+
     def test_delayedCallCleanup(self):
-        """Checking to make sure Sessions do not leave extra DelayedCalls.
         """
-        from twisted.internet import reactor
-        delayedCallsBeforeSession = repr(reactor.getDelayedCalls())
+        Checking to make sure Sessions do not leave extra DelayedCalls.
+        """
+        self.times.extend([0, 100])
 
         session = self.site.makeSession()
+        loop = session.checkExpiredLoop
         session.touch()
+        self.assert_(loop.running)
+
         session.expire()
 
-        self.failUnlessEqual(delayedCallsBeforeSession,
-                             repr(reactor.getDelayedCalls()))
+        self.assert_(not loop.running)
 
 
 # Conditional requests:
