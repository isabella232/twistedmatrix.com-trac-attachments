--- test_domish.py.orig	2008-07-09 11:34:41.000000000 +0200
+++ test_domish.py	2008-07-09 18:50:22.000000000 +0200
@@ -76,6 +76,110 @@
         self.assertEquals(e.hasAttribute("attrib2"), 0)
         self.assertEquals(e[("testns2", "attrib2")], "value2")
 
+    def testElementCompReflx(self):
+        """
+        Check if elements compare correctly, this tests ::
+        
+            Reflexivity : x == x -> True
+            
+            And x == None -> False
+        """
+        x = domish.Element(("testns", "foo"))
+        x.addContent("somecontent")
+        b2 = x.addElement(("testns2", "bar2"))
+        x["attrib1"] = "value1"
+        x[("testns2", "attrib2")] = "value2"
+        x.addElement("bar")
+        x.addElement("bar")
+        x.addContent("abc")
+        x.addContent("123")
+        
+        self.assertTrue(x == x)
+        self.assertFalse(x != x)
+        x.addContent("12345")
+        self.assertTrue(x == x)
+        self.assertFalse(x != x)
+        self.assertTrue(x != None)
+        
+    def testElementCompSym(self):
+        """
+        Check if elements compare correctly, this tests ::
+            
+            Symmetry : if x == y -> True
+                       then y == x -> True
+        """
+        x = domish.Element(("testns", "foo"))
+        x.addContent("somecontent")
+        b2 = x.addElement(("testns2", "bar2"))
+        x["attrib1"] = "value1"
+        x[("testns2", "attrib2")] = "value2"
+        x.addElement("bar")
+        x.addElement("bar")
+        x.addContent("abc")
+        x.addContent("123")
+        
+        y = domish.Element(("testns", "foo"))
+        y.addContent("somecontent")
+        b2 = y.addElement(("testns2", "bar2"))
+        y["attrib1"] = "value1"
+        y[("testns2", "attrib2")] = "value2"
+        y.addElement("bar")
+        y.addElement("bar")
+        y.addContent("abc")
+        y.addContent("123")
+        
+        self.assertTrue(x == y and y == x)
+        self.assertFalse(x != y or y != x)
+        y.addContent("12345")
+        self.assertFalse(x == y or y == x)
+        self.assertTrue(x != y and y != x)
+
+    def testElementCompTrans(self):
+        """
+        Check if elements compare correctly, this tests ::
+        
+            Transitivity : if x == y -> True
+                           and y == z -> True
+                           then x == z -> True
+        """
+        x = domish.Element(("testns", "foo"))
+        x.addContent("somecontent")
+        b2 = x.addElement(("testns2", "bar2"))
+        x["attrib1"] = "value1"
+        x[("testns2", "attrib2")] = "value2"
+        x.addElement("bar")
+        x.addElement("bar")
+        x.addContent("abc")
+        x.addContent("123")
+        
+        y = domish.Element(("testns", "foo"))
+        y.addContent("somecontent")
+        b2 = y.addElement(("testns2", "bar2"))
+        y["attrib1"] = "value1"
+        y[("testns2", "attrib2")] = "value2"
+        y.addElement("bar")
+        y.addElement("bar")
+        y.addContent("abc")
+        y.addContent("123")
+        
+        z = domish.Element(("testns", "foo"))
+        z.addContent("somecontent")
+        b2 = z.addElement(("testns2", "bar2"))
+        z["attrib1"] = "value1"
+        z[("testns2", "attrib2")] = "value2"
+        z.addElement("bar")
+        z.addElement("bar")
+        z.addContent("abc")
+        z.addContent("123")
+        
+        self.assertTrue(x == y and y == z and x == z)
+        self.assertFalse(x != y or y != z or x != z)
+        z.addContent("12345")
+        self.assertFalse(x == y and y == z and x == z)
+        self.assertFalse(x != y and y != z and x != z)
+
+
+
 class DomishStreamTestsMixin:
     """
     Mixin defining tests for different stream implementations.
