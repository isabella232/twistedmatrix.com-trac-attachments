diff --git a/twisted/conch/interfaces.py b/twisted/conch/interfaces.py
index d42811a..73d931e 100644
--- a/twisted/conch/interfaces.py
+++ b/twisted/conch/interfaces.py
@@ -124,7 +124,8 @@ class ISFTPServer(Interface):
         @param filename: a string representing the file to open.
 
         @param flags: an integer of the flags to open the file with, ORed together.
-        The flags and their values are listed at the bottom of this file.
+        The flags and their values are listed at the bottom of
+        L{twisted.conch.ssh.filetransfer}, prefixed with C{FXF_}.
 
         @param attrs: a list of attributes to open the file with.  It is a
         dictionary, consisting of 0 or more keys.  The possible keys are::
diff --git a/twisted/conch/test/test_unix.py b/twisted/conch/test/test_unix.py
new file mode 100644
index 0000000..dc12992
--- /dev/null
+++ b/twisted/conch/test/test_unix.py
@@ -0,0 +1,63 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for L{twisted.conch.unix}.
+"""
+
+import os
+
+from twisted.conch.unix import mkOpenFlags
+from twisted.conch.ssh.filetransfer import (FXF_READ, FXF_WRITE, FXF_APPEND, 
+                                            FXF_CREAT, FXF_TRUNC, FXF_EXCL)
+from twisted.trial.unittest import TestCase
+
+
+
+class mkOpenFlagsTest(TestCase):
+
+
+    def _testFlag(self, flag, os_flag):
+        """
+        Test that the given C{sftp_flag} is converted to C{os_flag} by
+        L{mkOpenFlags}.
+        
+        Also test that when ORed with FXF_APPEND, FXF_CREAT, FXF_TRUNC or
+        FXF_EXCL, the corresponding OR takes place on C{os_flag}.
+        """
+        result = mkOpenFlags(flag)
+        self.assertEqual(result, os_flag)
+        
+        result = mkOpenFlags(flag | FXF_APPEND)
+        self.assertEqual(result, os_flag | os.O_APPEND)
+        
+        result = mkOpenFlags(flag | FXF_CREAT)
+        self.assertEqual(result, os_flag | os.O_CREAT)
+        
+        result = mkOpenFlags(flag | FXF_TRUNC)
+        self.assertEqual(result, os_flag | os.O_TRUNC)
+
+        result = mkOpenFlags(flag | FXF_EXCL)
+        self.assertEqual(result, os_flag | os.O_EXCL)
+
+
+    def test_FXF_READ(self):
+        """
+        C{FXF_READ} should turn into C{os.O_RDONLY}
+        """
+        self._testFlag(FXF_READ, os.O_RDONLY)
+
+
+    def test_FXF_WRITE(self):
+        """
+        C{FXF_WRITE} should turn into C{os.O_WRONLY}
+        """
+        self._testFlag(FXF_WRITE, os.O_WRONLY)
+
+
+    def test_FXF_READ_or_FXF_WRITE(self):
+        """
+        C{FXF_READ | FXF_WRITE} should turn into C{os.O_RDWR}
+        """
+        self._testFlag(FXF_READ | FXF_WRITE, os.O_RDWR)
+        
diff --git a/twisted/conch/unix.py b/twisted/conch/unix.py
index 3a44be0..c5b624f 100644
--- a/twisted/conch/unix.py
+++ b/twisted/conch/unix.py
@@ -378,27 +378,44 @@ class SFTPServerForUnixConchUser:
     def extendedRequest(self, extName, extData):
         raise NotImplementedError
 
+
+
+def mkOpenFlags(flags):
+    """
+    Convert SFTP-specific flags to flags suitable for use with C{os.open}.
+    
+    @param flags: An ORing of the C{FXF_}-prefixed flags in
+        L{twisted.conch.ssh.filetransfer}.
+    
+    @rtype: int
+    @return: An integer suitable for use as the flags argument to C{os.open}
+    """
+    ret = os.O_RDONLY
+    if flags & FXF_WRITE == FXF_WRITE:
+        ret = os.O_WRONLY
+    if flags & FXF_WRITE == FXF_WRITE and flags & FXF_READ == FXF_READ:
+        ret = os.O_RDWR
+
+    mapping = {
+        FXF_APPEND: os.O_APPEND,
+        FXF_CREAT: os.O_CREAT,
+        FXF_TRUNC: os.O_TRUNC,
+        FXF_EXCL: os.O_EXCL,
+    }
+    for FXF_flag, os_flag in mapping.items():
+        if flags & FXF_flag == FXF_flag:
+            ret |= os_flag
+    return ret
+
+
+
 class UnixSFTPFile:
 
     interface.implements(ISFTPFile)
 
     def __init__(self, server, filename, flags, attrs):
         self.server = server
-        openFlags = 0
-        if flags & FXF_READ == FXF_READ and flags & FXF_WRITE == 0:
-            openFlags = os.O_RDONLY
-        if flags & FXF_WRITE == FXF_WRITE and flags & FXF_READ == 0:
-            openFlags = os.O_WRONLY
-        if flags & FXF_WRITE == FXF_WRITE and flags & FXF_READ == FXF_READ:
-            openFlags = os.O_RDWR
-        if flags & FXF_APPEND == FXF_APPEND:
-            openFlags |= os.O_APPEND
-        if flags & FXF_CREAT == FXF_CREAT:
-            openFlags |= os.O_CREAT
-        if flags & FXF_TRUNC == FXF_TRUNC:
-            openFlags |= os.O_TRUNC
-        if flags & FXF_EXCL == FXF_EXCL:
-            openFlags |= os.O_EXCL
+        openFlags = mkOpenFlags(flags)
         if "permissions" in attrs:
             mode = attrs["permissions"]
             del attrs["permissions"]
