diff --git a/twisted/names/test/test_cache.py b/twisted/names/test/test_cache.py
index 06245c3..fd3a7a4 100644
--- a/twisted/names/test/test_cache.py
+++ b/twisted/names/test/test_cache.py
@@ -75,10 +75,10 @@ class Caching(unittest.TestCase):
         clock.advance(1)
 
         def cbLookup(result):
-            self.assertEquals(result[0][0].ttl, 59)
-            self.assertEquals(result[1][0].ttl, 49)
-            self.assertEquals(result[2][0].ttl, 39)
-            self.assertEquals(result[0][0].name.name, b"example.com")
+            self.assertEqual(result[0][0].ttl, 59)
+            self.assertEqual(result[1][0].ttl, 49)
+            self.assertEqual(result[2][0].ttl, 39)
+            self.assertEqual(result[0][0].name.name, b"example.com")
 
         return c.lookupAddress(b"example.com").addCallback(cbLookup)
 
diff --git a/twisted/names/test/test_dns.py b/twisted/names/test/test_dns.py
index 32635ef..8abae73 100644
--- a/twisted/names/test/test_dns.py
+++ b/twisted/names/test/test_dns.py
@@ -589,10 +589,10 @@ class MessageTestCase(unittest.SynchronousTestCase):
             b'\x00\x00' # number of additionals
             )
         self.assertEqual(msg.id, 256)
-        self.failIf(msg.answer, "Message was not supposed to be an answer.")
+        self.assertFalse(msg.answer, "Message was not supposed to be an answer.")
         self.assertEqual(msg.opCode, dns.OP_QUERY)
-        self.failIf(msg.auth, "Message was not supposed to be authoritative.")
-        self.failIf(msg.trunc, "Message was not supposed to be truncated.")
+        self.assertFalse(msg.auth, "Message was not supposed to be authoritative.")
+        self.assertFalse(msg.trunc, "Message was not supposed to be truncated.")
         self.assertEqual(msg.queries, [])
         self.assertEqual(msg.answers, [])
         self.assertEqual(msg.authority, [])
@@ -615,7 +615,7 @@ class MessageTestCase(unittest.SynchronousTestCase):
         msg2 = dns.Message()
         msg2.decode(s)
 
-        self.failUnless(isinstance(msg2.answers[0].payload, dns.Record_NULL))
+        self.assertTrue(isinstance(msg2.answers[0].payload, dns.Record_NULL))
         self.assertEqual(msg2.answers[0].payload.payload, bytes)
 
 
diff --git a/twisted/names/test/test_names.py b/twisted/names/test/test_names.py
index 49ec40f..f57af5f 100644
--- a/twisted/names/test/test_names.py
+++ b/twisted/names/test/test_names.py
@@ -507,7 +507,7 @@ class HelperTestCase(unittest.TestCase):
         a = authority.getSerial(f)
         for i in range(20):
             b = authority.getSerial(f)
-            self.failUnless(a < b)
+            self.assertTrue(a < b)
             a = b
 
 
diff --git a/twisted/news/test/test_news.py b/twisted/news/test/test_news.py
index 35ac7d7..922f661 100644
--- a/twisted/news/test/test_news.py
+++ b/twisted/news/test/test_news.py
@@ -40,7 +40,7 @@ class NewsTestCase(unittest.TestCase):
 
     def testArticleExists(self):
         d = self.backend.articleExistsRequest(MESSAGE_ID)
-        d.addCallback(self.failUnless)
+        d.addCallback(self.assertTrue)
         return d
 
 
@@ -48,7 +48,7 @@ class NewsTestCase(unittest.TestCase):
         d = self.backend.articleRequest(None, None, MESSAGE_ID)
 
         def cbArticle(result):
-            self.failUnless(isinstance(result, tuple),
+            self.assertTrue(isinstance(result, tuple),
                             'callback result is wrong type: ' + str(result))
             self.assertEqual(len(result), 3,
                               'callback result list should have three entries: ' +
diff --git a/twisted/python/test/test_components.py b/twisted/python/test/test_components.py
index cc6905d..064b052 100644
--- a/twisted/python/test/test_components.py
+++ b/twisted/python/test/test_components.py
@@ -771,7 +771,7 @@ class ProxyForInterfaceTests(unittest.SynchronousTestCase):
         self.assertEqual(pd.__get__(fakeProxy), testObject.hello)
         fakeClassMethod = pd.__get__(None)
         fakeClassMethod(fakeProxy)
-        self.failUnless(testObject.called)
+        self.assertTrue(testObject.called)
 
 
     def test_proxyInheritance(self):
@@ -811,8 +811,8 @@ class ProxyForInterfaceTests(unittest.SynchronousTestCase):
         proxy = proxyClass(booable)
         proxy.yay()
         proxy.boo()
-        self.failUnless(booable.yayed)
-        self.failUnless(booable.booed)
+        self.assertTrue(booable.yayed)
+        self.assertTrue(booable.booed)
 
 
     def test_attributeCustomization(self):
diff --git a/twisted/python/test/test_sendmsg.py b/twisted/python/test/test_sendmsg.py
index 48301f5..884cf44 100644
--- a/twisted/python/test/test_sendmsg.py
+++ b/twisted/python/test/test_sendmsg.py
@@ -299,7 +299,7 @@ class SendmsgTestCase(TestCase):
             send1msg(self.input.fileno(), message, 0))
 
         result = recv1msg(fd=self.output.fileno())
-        self.assertEquals(result, (message, 0, []))
+        self.assertEqual(result, (message, 0, []))
 
 
     def test_shortsend(self):
@@ -323,7 +323,7 @@ class SendmsgTestCase(TestCase):
         send1msg(self.input.fileno(), "hello, world!", 0, [])
 
         result = recv1msg(fd=self.output.fileno())
-        self.assertEquals(result, ("hello, world!", 0, []))
+        self.assertEqual(result, ("hello, world!", 0, []))
 
 
     def test_flags(self):
@@ -356,7 +356,7 @@ class SendmsgTestCase(TestCase):
         error = self.assertRaises(TypeError,
                                   send1msg, self.input.fileno(),
                                   "hello, world!", 0, 4321)
-        self.assertEquals(str(error),
+        self.assertEqual(str(error),
                           "send1msg argument 3 expected list, got int")
 
 
@@ -402,9 +402,9 @@ class SendmsgTestCase(TestCase):
 
         close(pipeIn)
         yield sspp.stopped
-        self.assertEquals(read(pipeOut, 1024), "Test fixture data: blonk.\n")
+        self.assertEqual(read(pipeOut, 1024), "Test fixture data: blonk.\n")
         # Make sure that the pipe is actually closed now.
-        self.assertEquals(read(pipeOut, 1024), "")
+        self.assertEqual(read(pipeOut, 1024), "")
 
 
 
diff --git a/twisted/python/test/test_util.py b/twisted/python/test/test_util.py
index 793704b..f0372a2 100644
--- a/twisted/python/test/test_util.py
+++ b/twisted/python/test/test_util.py
@@ -33,8 +33,8 @@ class UtilTestCase(unittest.TestCase):
         self.assertEqual(util.uniquify(l), ["a", 1, "ab", 3, 4, 2, 6])
 
     def testRaises(self):
-        self.failUnless(util.raises(ZeroDivisionError, divmod, 1, 0))
-        self.failIf(util.raises(ZeroDivisionError, divmod, 0, 1))
+        self.assertTrue(util.raises(ZeroDivisionError, divmod, 1, 0))
+        self.assertFalse(util.raises(ZeroDivisionError, divmod, 0, 1))
 
         try:
             util.raises(TypeError, divmod, 1, 0)
@@ -278,7 +278,7 @@ class OrderedDictTest(unittest.TestCase):
     def testInitialization(self):
         d = util.OrderedDict({'monkey': 'ook',
                               'apple': 'red'})
-        self.failUnless(d._order)
+        self.assertTrue(d._order)
 
         d = util.OrderedDict(((1,1),(3,3),(2,2),(0,0)))
         self.assertEqual(repr(d), "{1: 1, 3: 3, 2: 2, 0: 0}")
diff --git a/twisted/python/test/test_zipstream.py b/twisted/python/test/test_zipstream.py
index b9d9a8a..cedc438 100644
--- a/twisted/python/test/test_zipstream.py
+++ b/twisted/python/test/test_zipstream.py
@@ -331,7 +331,7 @@ class ZipstreamTest(unittest.TestCase):
         # this could theoretically be any number but statistically it
         # should always be in this range
         approx = lower < r < upper
-        self.failUnless(approx)
+        self.assertTrue(approx)
         for r in uziter:
             pass
         self.assertEqual(r, 0)
