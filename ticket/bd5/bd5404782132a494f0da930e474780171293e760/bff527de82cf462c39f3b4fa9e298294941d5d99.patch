diff --git twisted/python/components.py twisted/python/components.py
index 2e715ba..001545e 100644
--- twisted/python/components.py
+++ twisted/python/components.py
@@ -370,7 +370,7 @@ class _ProxiedClassMethod(object):
     @type orginalAttribute: C{str}
     """
     def __init__(self, methodName, originalAttribute):
-        self.methodName = methodName
+        self.methodName = self.__name__ = methodName
         self.originalAttribute = originalAttribute
 
 
diff --git twisted/python/test/test_components.py twisted/python/test/test_components.py
index 1b09b6f..30cc93c 100644
--- twisted/python/test/test_components.py
+++ twisted/python/test/test_components.py
@@ -8,6 +8,8 @@ Test cases for Twisted component architecture.
 
 from __future__ import division, absolute_import
 
+from functools import wraps
+
 from zope.interface import Interface, implementer, Attribute
 from zope.interface.adapter import AdapterRegistry
 
@@ -655,6 +657,24 @@ class ProxyForInterfaceTests(unittest.SynchronousTestCase):
         self.assertEqual(yayable.yays, 2)
 
 
+    def test_decoratedProxyMethod(self):
+        """
+        Methods of the class created from L{proxyForInterface} can be used with
+        the decorator-helper L{functools.wraps}.
+        """
+        base = proxyForInterface(IProxiedInterface)
+        class klass(base):
+            @wraps(base.yay)
+            def yay(self):
+                self.original.yays += 1
+                return base.yay(self)
+
+        original = Yayable()
+        yayable = klass(original)
+        yayable.yay()
+        self.assertEqual(2, original.yays)
+
+
     def test_proxyAttribute(self):
         """
         Proxy objects should proxy declared attributes, but not other
diff --git twisted/topfiles/7832.feature twisted/topfiles/7832.feature
new file mode 100644
index 0000000..3eefd83
--- /dev/null
+++ twisted/topfiles/7832.feature
@@ -0,0 +1 @@
+twisted.python.components.proxyForInterface now creates method proxies that can be used with functools.wraps.
