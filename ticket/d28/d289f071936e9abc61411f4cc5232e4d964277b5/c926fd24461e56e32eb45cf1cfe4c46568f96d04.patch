diff --git a/twisted/web/test/test_cgi.py b/twisted/web/test/test_cgi.py
index f126e53..c23041b 100755
--- a/twisted/web/test/test_cgi.py
+++ b/twisted/web/test/test_cgi.py
@@ -21,6 +21,13 @@ print
 print "cgi output"
 '''
 
+DUAL_HEADER_CGI = '''\
+print "Header: spam"
+print "Header: eggs"
+print
+print "cgi output"
+'''
+
 READINPUT_CGI = '''\
 # this is an example of a correctly-written CGI script which reads a body
 # from stdin, which only reads env['CONTENT_LENGTH'] bytes.
@@ -83,10 +90,25 @@ class CGI(unittest.TestCase):
         d.addCallback(self._testCGI_1)
         return d
 
+    def testDuplicateHeaderCGI(self):
+        cgiFilename = os.path.abspath(self.mktemp())
+        cgiFile = file(cgiFilename, 'wt')
+        cgiFile.write(DUAL_HEADER_CGI)
+        cgiFile.close()
+
+        portnum = self.startServer(cgiFilename)
+        url = "http://localhost:%d/cgi" % (portnum,)
+        factory = client.HTTPClientFactory(url)
+        reactor.connectTCP('localhost', portnum, factory)
+        d = factory.deferred
+        d.addCallback(self._testCGI_2, factory)
+        return d
 
     def _testCGI_1(self, res):
         self.failUnlessEqual(res, "cgi output" + os.linesep)
 
+    def _testCGI_2(self, res, factory):
+        self.failUnlessEqual(factory.response_headers['header'], ['spam', 'eggs'])
 
     def testReadEmptyInput(self):
         cgiFilename = os.path.abspath(self.mktemp())
diff --git a/twisted/web/twcgi.py b/twisted/web/twcgi.py
index c1f0bbc..8f2a2a6 100644
--- a/twisted/web/twcgi.py
+++ b/twisted/web/twcgi.py
@@ -303,7 +303,9 @@ class CGIProcessProtocol(protocol.ProcessProtocol, pb.Viewable):
                             else:
                                 self.request.setResponseCode(statusNum)
                         else:
-                            self.request.setHeader(headerName,headerText)
+                            # Don't allow the application to control these required headers.
+                            if headerName.lower() not in ('server', 'date'):
+                                self.request.responseHeaders.addRawHeader(headerName, headerText)
                 output = text[headerend+len(delimiter):]
                 self.handling_headers = 0
             if self.handling_headers:
