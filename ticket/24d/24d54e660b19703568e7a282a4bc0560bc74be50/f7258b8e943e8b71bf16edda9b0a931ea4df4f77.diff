diff --git a/twisted/internet/test/test_endpoints.py b/twisted/internet/test/test_endpoints.py
index 5a14e5a..c9cdfae 100644
--- a/twisted/internet/test/test_endpoints.py
+++ b/twisted/internet/test/test_endpoints.py
@@ -26,6 +26,7 @@ from twisted.test.proto_helpers import RaisingMemoryReactor, StringTransport
 from twisted.python.failure import Failure
 from twisted.python.systemd import ListenFDs
 from twisted.python.filepath import FilePath
+from twisted.python.runtime import platform
 from twisted.python import log
 from twisted.protocols import basic
 from twisted.internet.task import Clock
@@ -700,6 +701,9 @@ class StandardIOEndpointsTestCase(unittest.TestCase):
 
         return d.addCallback(checkReaders)
 
+    if platform.isWindows():
+        test_StdioIOReceivesCorrectReactor.skip = "Requires POSIX stdio"
+
 
 
 class StubApplicationProtocol(protocol.Protocol):
diff --git a/twisted/python/__pycache__/_cffi__x125f6df2xf64a70fd.c b/twisted/python/__pycache__/_cffi__x125f6df2xf64a70fd.c
new file mode 100644
index 0000000..173dc2b
--- /dev/null
+++ b/twisted/python/__pycache__/_cffi__x125f6df2xf64a70fd.c
@@ -0,0 +1,738 @@
+
+#include <Python.h>
+#include <stddef.h>
+
+#ifdef MS_WIN32
+#include <malloc.h>   /* for alloca() */
+typedef __int8 int8_t;
+typedef __int16 int16_t;
+typedef __int32 int32_t;
+typedef __int64 int64_t;
+typedef unsigned __int8 uint8_t;
+typedef unsigned __int16 uint16_t;
+typedef unsigned __int32 uint32_t;
+typedef unsigned __int64 uint64_t;
+typedef unsigned char _Bool;
+#endif
+
+#if PY_MAJOR_VERSION < 3
+# undef PyCapsule_CheckExact
+# undef PyCapsule_GetPointer
+# define PyCapsule_CheckExact(capsule) (PyCObject_Check(capsule))
+# define PyCapsule_GetPointer(capsule, name) \
+    (PyCObject_AsVoidPtr(capsule))
+#endif
+
+#if PY_MAJOR_VERSION >= 3
+# define PyInt_FromLong PyLong_FromLong
+#endif
+
+#define _cffi_from_c_double PyFloat_FromDouble
+#define _cffi_from_c_float PyFloat_FromDouble
+#define _cffi_from_c_long PyInt_FromLong
+#define _cffi_from_c_ulong PyLong_FromUnsignedLong
+#define _cffi_from_c_longlong PyLong_FromLongLong
+#define _cffi_from_c_ulonglong PyLong_FromUnsignedLongLong
+
+#define _cffi_to_c_double PyFloat_AsDouble
+#define _cffi_to_c_float PyFloat_AsDouble
+
+#define _cffi_from_c_SIGNED(x, type)                                     \
+    (sizeof(type) <= sizeof(long) ? PyInt_FromLong(x) :                  \
+                                    PyLong_FromLongLong(x))
+#define _cffi_from_c_UNSIGNED(x, type)                                   \
+    (sizeof(type) < sizeof(long) ? PyInt_FromLong(x) :                   \
+     sizeof(type) == sizeof(long) ? PyLong_FromUnsignedLong(x) :         \
+                                    PyLong_FromUnsignedLongLong(x))
+
+#define _cffi_to_c_SIGNED(o, type)                                       \
+    (sizeof(type) == 1 ? _cffi_to_c_i8(o) :                              \
+     sizeof(type) == 2 ? _cffi_to_c_i16(o) :                             \
+     sizeof(type) == 4 ? _cffi_to_c_i32(o) :                             \
+     sizeof(type) == 8 ? _cffi_to_c_i64(o) :                             \
+     (Py_FatalError("unsupported size for type " #type), 0))
+#define _cffi_to_c_UNSIGNED(o, type)                                     \
+    (sizeof(type) == 1 ? _cffi_to_c_u8(o) :                              \
+     sizeof(type) == 2 ? _cffi_to_c_u16(o) :                             \
+     sizeof(type) == 4 ? _cffi_to_c_u32(o) :                             \
+     sizeof(type) == 8 ? _cffi_to_c_u64(o) :                             \
+     (Py_FatalError("unsupported size for type " #type), 0))
+
+#define _cffi_to_c_i8                                                    \
+                 ((int(*)(PyObject *))_cffi_exports[1])
+#define _cffi_to_c_u8                                                    \
+                 ((int(*)(PyObject *))_cffi_exports[2])
+#define _cffi_to_c_i16                                                   \
+                 ((int(*)(PyObject *))_cffi_exports[3])
+#define _cffi_to_c_u16                                                   \
+                 ((int(*)(PyObject *))_cffi_exports[4])
+#define _cffi_to_c_i32                                                   \
+                 ((int(*)(PyObject *))_cffi_exports[5])
+#define _cffi_to_c_u32                                                   \
+                 ((unsigned int(*)(PyObject *))_cffi_exports[6])
+#define _cffi_to_c_i64                                                   \
+                 ((long long(*)(PyObject *))_cffi_exports[7])
+#define _cffi_to_c_u64                                                   \
+                 ((unsigned long long(*)(PyObject *))_cffi_exports[8])
+#define _cffi_to_c_char                                                  \
+                 ((int(*)(PyObject *))_cffi_exports[9])
+#define _cffi_from_c_pointer                                             \
+    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[10])
+#define _cffi_to_c_pointer                                               \
+    ((char *(*)(PyObject *, CTypeDescrObject *))_cffi_exports[11])
+#define _cffi_get_struct_layout                                          \
+    ((PyObject *(*)(Py_ssize_t[]))_cffi_exports[12])
+#define _cffi_restore_errno                                              \
+    ((void(*)(void))_cffi_exports[13])
+#define _cffi_save_errno                                                 \
+    ((void(*)(void))_cffi_exports[14])
+#define _cffi_from_c_char                                                \
+    ((PyObject *(*)(char))_cffi_exports[15])
+#define _cffi_from_c_deref                                               \
+    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[16])
+#define _cffi_to_c                                                       \
+    ((int(*)(char *, CTypeDescrObject *, PyObject *))_cffi_exports[17])
+#define _cffi_from_c_struct                                              \
+    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[18])
+#define _cffi_to_c_wchar_t                                               \
+    ((wchar_t(*)(PyObject *))_cffi_exports[19])
+#define _cffi_from_c_wchar_t                                             \
+    ((PyObject *(*)(wchar_t))_cffi_exports[20])
+#define _cffi_to_c_long_double                                           \
+    ((long double(*)(PyObject *))_cffi_exports[21])
+#define _cffi_to_c__Bool                                                 \
+    ((_Bool(*)(PyObject *))_cffi_exports[22])
+#define _cffi_prepare_pointer_call_argument                              \
+    ((Py_ssize_t(*)(CTypeDescrObject *, PyObject *, char **))_cffi_exports[23])
+#define _cffi_convert_array_from_object                                  \
+    ((int(*)(char *, CTypeDescrObject *, PyObject *))_cffi_exports[24])
+#define _CFFI_NUM_EXPORTS 25
+
+typedef struct _ctypedescr CTypeDescrObject;
+
+static void *_cffi_exports[_CFFI_NUM_EXPORTS];
+static PyObject *_cffi_types, *_cffi_VerificationError;
+
+static PyObject *_cffi_setup_custom(PyObject *lib);   /* forward */
+
+static PyObject *_cffi_setup(PyObject *self, PyObject *args)
+{
+    PyObject *library;
+    if (!PyArg_ParseTuple(args, "OOO", &_cffi_types, &_cffi_VerificationError,
+                                       &library))
+        return NULL;
+    Py_INCREF(_cffi_types);
+    Py_INCREF(_cffi_VerificationError);
+    return _cffi_setup_custom(library);
+}
+
+static void _cffi_init(void)
+{
+    PyObject *module = PyImport_ImportModule("_cffi_backend");
+    PyObject *c_api_object;
+
+    if (module == NULL)
+        return;
+
+    c_api_object = PyObject_GetAttrString(module, "_C_API");
+    if (c_api_object == NULL)
+        return;
+    if (!PyCapsule_CheckExact(c_api_object)) {
+        PyErr_SetNone(PyExc_ImportError);
+        return;
+    }
+    memcpy(_cffi_exports, PyCapsule_GetPointer(c_api_object, "cffi"),
+           _CFFI_NUM_EXPORTS * sizeof(void *));
+}
+
+#define _cffi_type(num) ((CTypeDescrObject *)PyList_GET_ITEM(_cffi_types, num))
+
+/**********/
+
+
+
+#include <stdbool.h>
+
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <signal.h>
+
+#include <sys/param.h>
+
+#ifdef BSD
+#  include <sys/uio.h>
+#endif
+
+#if defined(SCM_CREDS)
+    static const bool HAS_SCM_CREDS = true;
+#else
+    static const bool HAS_SCM_CREDS = false;
+    static const int SCM_CREDS = -1;
+#endif
+
+#if defined(SCM_CREDENTIALS)
+    static const bool HAS_SCM_CREDENTIALS = true;
+#else
+    static const bool HAS_SCM_CREDENTIALS = false;
+    static const int SCM_CREDENTIALS = -1;
+#endif
+
+#if defined(SCM_TIMESTAMP)
+    static const bool HAS_SCM_TIMESTAMP = true;
+#else
+    static const bool HAS_SCM_TIMESTAMP = false;
+    static const int SCM_TIMESTAMP = -1;
+#endif
+
+
+static int _cffi_const_HAS_SCM_CREDENTIALS(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (HAS_SCM_CREDENTIALS) && (HAS_SCM_CREDENTIALS) <= LONG_MAX)
+    o = PyInt_FromLong((long)(HAS_SCM_CREDENTIALS));
+  else if ((HAS_SCM_CREDENTIALS) <= 0)
+    o = PyLong_FromLongLong((long long)(HAS_SCM_CREDENTIALS));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(HAS_SCM_CREDENTIALS));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "HAS_SCM_CREDENTIALS", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return 0;
+}
+
+static int _cffi_const_HAS_SCM_CREDS(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (HAS_SCM_CREDS) && (HAS_SCM_CREDS) <= LONG_MAX)
+    o = PyInt_FromLong((long)(HAS_SCM_CREDS));
+  else if ((HAS_SCM_CREDS) <= 0)
+    o = PyLong_FromLongLong((long long)(HAS_SCM_CREDS));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(HAS_SCM_CREDS));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "HAS_SCM_CREDS", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return _cffi_const_HAS_SCM_CREDENTIALS(lib);
+}
+
+static int _cffi_const_HAS_SCM_TIMESTAMP(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (HAS_SCM_TIMESTAMP) && (HAS_SCM_TIMESTAMP) <= LONG_MAX)
+    o = PyInt_FromLong((long)(HAS_SCM_TIMESTAMP));
+  else if ((HAS_SCM_TIMESTAMP) <= 0)
+    o = PyLong_FromLongLong((long long)(HAS_SCM_TIMESTAMP));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(HAS_SCM_TIMESTAMP));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "HAS_SCM_TIMESTAMP", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return _cffi_const_HAS_SCM_CREDS(lib);
+}
+
+static int _cffi_const_SCM_CREDENTIALS(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (SCM_CREDENTIALS) && (SCM_CREDENTIALS) <= LONG_MAX)
+    o = PyInt_FromLong((long)(SCM_CREDENTIALS));
+  else if ((SCM_CREDENTIALS) <= 0)
+    o = PyLong_FromLongLong((long long)(SCM_CREDENTIALS));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(SCM_CREDENTIALS));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "SCM_CREDENTIALS", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return _cffi_const_HAS_SCM_TIMESTAMP(lib);
+}
+
+static int _cffi_const_SCM_CREDS(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (SCM_CREDS) && (SCM_CREDS) <= LONG_MAX)
+    o = PyInt_FromLong((long)(SCM_CREDS));
+  else if ((SCM_CREDS) <= 0)
+    o = PyLong_FromLongLong((long long)(SCM_CREDS));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(SCM_CREDS));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "SCM_CREDS", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return _cffi_const_SCM_CREDENTIALS(lib);
+}
+
+static int _cffi_const_SCM_RIGHTS(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (SCM_RIGHTS) && (SCM_RIGHTS) <= LONG_MAX)
+    o = PyInt_FromLong((long)(SCM_RIGHTS));
+  else if ((SCM_RIGHTS) <= 0)
+    o = PyLong_FromLongLong((long long)(SCM_RIGHTS));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(SCM_RIGHTS));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "SCM_RIGHTS", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return _cffi_const_SCM_CREDS(lib);
+}
+
+static int _cffi_const_SCM_TIMESTAMP(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (SCM_TIMESTAMP) && (SCM_TIMESTAMP) <= LONG_MAX)
+    o = PyInt_FromLong((long)(SCM_TIMESTAMP));
+  else if ((SCM_TIMESTAMP) <= 0)
+    o = PyLong_FromLongLong((long long)(SCM_TIMESTAMP));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(SCM_TIMESTAMP));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "SCM_TIMESTAMP", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return _cffi_const_SCM_RIGHTS(lib);
+}
+
+static PyObject *
+_cffi_f_CMSG_DATA(PyObject *self, PyObject *arg0)
+{
+  struct cmsghdr * x0;
+  Py_ssize_t datasize;
+  unsigned char * result;
+
+  datasize = _cffi_prepare_pointer_call_argument(
+      _cffi_type(0), arg0, (char **)&x0);
+  if (datasize != 0) {
+    if (datasize < 0)
+      return NULL;
+    x0 = alloca(datasize);
+    memset((void *)x0, 0, datasize);
+    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(0), arg0) < 0)
+      return NULL;
+  }
+
+  Py_BEGIN_ALLOW_THREADS
+  _cffi_restore_errno();
+  { result = CMSG_DATA(x0); }
+  _cffi_save_errno();
+  Py_END_ALLOW_THREADS
+
+  return _cffi_from_c_pointer((char *)result, _cffi_type(1));
+}
+
+static PyObject *
+_cffi_f_CMSG_FIRSTHDR(PyObject *self, PyObject *arg0)
+{
+  struct msghdr * x0;
+  Py_ssize_t datasize;
+  struct cmsghdr * result;
+
+  datasize = _cffi_prepare_pointer_call_argument(
+      _cffi_type(2), arg0, (char **)&x0);
+  if (datasize != 0) {
+    if (datasize < 0)
+      return NULL;
+    x0 = alloca(datasize);
+    memset((void *)x0, 0, datasize);
+    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(2), arg0) < 0)
+      return NULL;
+  }
+
+  Py_BEGIN_ALLOW_THREADS
+  _cffi_restore_errno();
+  { result = CMSG_FIRSTHDR(x0); }
+  _cffi_save_errno();
+  Py_END_ALLOW_THREADS
+
+  return _cffi_from_c_pointer((char *)result, _cffi_type(0));
+}
+
+static PyObject *
+_cffi_f_CMSG_LEN(PyObject *self, PyObject *arg0)
+{
+  size_t x0;
+  size_t result;
+
+  x0 = _cffi_to_c_UNSIGNED(arg0, size_t);
+  if (x0 == (size_t)-1 && PyErr_Occurred())
+    return NULL;
+
+  Py_BEGIN_ALLOW_THREADS
+  _cffi_restore_errno();
+  { result = CMSG_LEN(x0); }
+  _cffi_save_errno();
+  Py_END_ALLOW_THREADS
+
+  return _cffi_from_c_UNSIGNED(result, size_t);
+}
+
+static PyObject *
+_cffi_f_CMSG_NXTHDR(PyObject *self, PyObject *args)
+{
+  struct msghdr * x0;
+  struct cmsghdr * x1;
+  Py_ssize_t datasize;
+  struct cmsghdr * result;
+  PyObject *arg0;
+  PyObject *arg1;
+
+  if (!PyArg_ParseTuple(args, "OO:CMSG_NXTHDR", &arg0, &arg1))
+    return NULL;
+
+  datasize = _cffi_prepare_pointer_call_argument(
+      _cffi_type(2), arg0, (char **)&x0);
+  if (datasize != 0) {
+    if (datasize < 0)
+      return NULL;
+    x0 = alloca(datasize);
+    memset((void *)x0, 0, datasize);
+    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(2), arg0) < 0)
+      return NULL;
+  }
+
+  datasize = _cffi_prepare_pointer_call_argument(
+      _cffi_type(0), arg1, (char **)&x1);
+  if (datasize != 0) {
+    if (datasize < 0)
+      return NULL;
+    x1 = alloca(datasize);
+    memset((void *)x1, 0, datasize);
+    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(0), arg1) < 0)
+      return NULL;
+  }
+
+  Py_BEGIN_ALLOW_THREADS
+  _cffi_restore_errno();
+  { result = CMSG_NXTHDR(x0, x1); }
+  _cffi_save_errno();
+  Py_END_ALLOW_THREADS
+
+  return _cffi_from_c_pointer((char *)result, _cffi_type(0));
+}
+
+static PyObject *
+_cffi_f_CMSG_SPACE(PyObject *self, PyObject *arg0)
+{
+  size_t x0;
+  size_t result;
+
+  x0 = _cffi_to_c_UNSIGNED(arg0, size_t);
+  if (x0 == (size_t)-1 && PyErr_Occurred())
+    return NULL;
+
+  Py_BEGIN_ALLOW_THREADS
+  _cffi_restore_errno();
+  { result = CMSG_SPACE(x0); }
+  _cffi_save_errno();
+  Py_END_ALLOW_THREADS
+
+  return _cffi_from_c_UNSIGNED(result, size_t);
+}
+
+static PyObject *
+_cffi_f_getsockname(PyObject *self, PyObject *args)
+{
+  int x0;
+  struct sockaddr * x1;
+  size_t * x2;
+  Py_ssize_t datasize;
+  int result;
+  PyObject *arg0;
+  PyObject *arg1;
+  PyObject *arg2;
+
+  if (!PyArg_ParseTuple(args, "OOO:getsockname", &arg0, &arg1, &arg2))
+    return NULL;
+
+  x0 = _cffi_to_c_SIGNED(arg0, int);
+  if (x0 == (int)-1 && PyErr_Occurred())
+    return NULL;
+
+  datasize = _cffi_prepare_pointer_call_argument(
+      _cffi_type(3), arg1, (char **)&x1);
+  if (datasize != 0) {
+    if (datasize < 0)
+      return NULL;
+    x1 = alloca(datasize);
+    memset((void *)x1, 0, datasize);
+    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(3), arg1) < 0)
+      return NULL;
+  }
+
+  datasize = _cffi_prepare_pointer_call_argument(
+      _cffi_type(4), arg2, (char **)&x2);
+  if (datasize != 0) {
+    if (datasize < 0)
+      return NULL;
+    x2 = alloca(datasize);
+    memset((void *)x2, 0, datasize);
+    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(4), arg2) < 0)
+      return NULL;
+  }
+
+  Py_BEGIN_ALLOW_THREADS
+  _cffi_restore_errno();
+  { result = getsockname(x0, x1, x2); }
+  _cffi_save_errno();
+  Py_END_ALLOW_THREADS
+
+  return _cffi_from_c_SIGNED(result, int);
+}
+
+static PyObject *
+_cffi_f_recvmsg(PyObject *self, PyObject *args)
+{
+  int x0;
+  struct msghdr * x1;
+  int x2;
+  Py_ssize_t datasize;
+  ssize_t result;
+  PyObject *arg0;
+  PyObject *arg1;
+  PyObject *arg2;
+
+  if (!PyArg_ParseTuple(args, "OOO:recvmsg", &arg0, &arg1, &arg2))
+    return NULL;
+
+  x0 = _cffi_to_c_SIGNED(arg0, int);
+  if (x0 == (int)-1 && PyErr_Occurred())
+    return NULL;
+
+  datasize = _cffi_prepare_pointer_call_argument(
+      _cffi_type(2), arg1, (char **)&x1);
+  if (datasize != 0) {
+    if (datasize < 0)
+      return NULL;
+    x1 = alloca(datasize);
+    memset((void *)x1, 0, datasize);
+    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(2), arg1) < 0)
+      return NULL;
+  }
+
+  x2 = _cffi_to_c_SIGNED(arg2, int);
+  if (x2 == (int)-1 && PyErr_Occurred())
+    return NULL;
+
+  Py_BEGIN_ALLOW_THREADS
+  _cffi_restore_errno();
+  { result = recvmsg(x0, x1, x2); }
+  _cffi_save_errno();
+  Py_END_ALLOW_THREADS
+
+  return _cffi_from_c_SIGNED(result, ssize_t);
+}
+
+static PyObject *
+_cffi_f_sendmsg(PyObject *self, PyObject *args)
+{
+  int x0;
+  struct msghdr const * x1;
+  int x2;
+  Py_ssize_t datasize;
+  ssize_t result;
+  PyObject *arg0;
+  PyObject *arg1;
+  PyObject *arg2;
+
+  if (!PyArg_ParseTuple(args, "OOO:sendmsg", &arg0, &arg1, &arg2))
+    return NULL;
+
+  x0 = _cffi_to_c_SIGNED(arg0, int);
+  if (x0 == (int)-1 && PyErr_Occurred())
+    return NULL;
+
+  datasize = _cffi_prepare_pointer_call_argument(
+      _cffi_type(5), arg1, (char **)&x1);
+  if (datasize != 0) {
+    if (datasize < 0)
+      return NULL;
+    x1 = alloca(datasize);
+    memset((void *)x1, 0, datasize);
+    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(5), arg1) < 0)
+      return NULL;
+  }
+
+  x2 = _cffi_to_c_SIGNED(arg2, int);
+  if (x2 == (int)-1 && PyErr_Occurred())
+    return NULL;
+
+  Py_BEGIN_ALLOW_THREADS
+  _cffi_restore_errno();
+  { result = sendmsg(x0, x1, x2); }
+  _cffi_save_errno();
+  Py_END_ALLOW_THREADS
+
+  return _cffi_from_c_SIGNED(result, ssize_t);
+}
+
+static void _cffi_check_struct_cmsghdr(struct cmsghdr *p)
+{
+  /* only to generate compile-time warnings or errors */
+  (void)((p->cmsg_level) << 1);
+  (void)((p->cmsg_type) << 1);
+  (void)((p->cmsg_len) << 1);
+}
+static PyObject *
+_cffi_layout_struct_cmsghdr(PyObject *self, PyObject *noarg)
+{
+  struct _cffi_aligncheck { char x; struct cmsghdr y; };
+  static Py_ssize_t nums[] = {
+    sizeof(struct cmsghdr),
+    offsetof(struct _cffi_aligncheck, y),
+    offsetof(struct cmsghdr, cmsg_level),
+    sizeof(((struct cmsghdr *)0)->cmsg_level),
+    offsetof(struct cmsghdr, cmsg_type),
+    sizeof(((struct cmsghdr *)0)->cmsg_type),
+    offsetof(struct cmsghdr, cmsg_len),
+    sizeof(((struct cmsghdr *)0)->cmsg_len),
+    -1
+  };
+  return _cffi_get_struct_layout(nums);
+  /* the next line is not executed, but compiled */
+  _cffi_check_struct_cmsghdr(0);
+}
+
+static void _cffi_check_struct_iovec(struct iovec *p)
+{
+  /* only to generate compile-time warnings or errors */
+  { char * *tmp = &p->iov_base; (void)tmp; }
+  (void)((p->iov_len) << 1);
+}
+static PyObject *
+_cffi_layout_struct_iovec(PyObject *self, PyObject *noarg)
+{
+  struct _cffi_aligncheck { char x; struct iovec y; };
+  static Py_ssize_t nums[] = {
+    sizeof(struct iovec),
+    offsetof(struct _cffi_aligncheck, y),
+    offsetof(struct iovec, iov_base),
+    sizeof(((struct iovec *)0)->iov_base),
+    offsetof(struct iovec, iov_len),
+    sizeof(((struct iovec *)0)->iov_len),
+    -1
+  };
+  return _cffi_get_struct_layout(nums);
+  /* the next line is not executed, but compiled */
+  _cffi_check_struct_iovec(0);
+}
+
+static void _cffi_check_struct_msghdr(struct msghdr *p)
+{
+  /* only to generate compile-time warnings or errors */
+  { void * *tmp = &p->msg_name; (void)tmp; }
+  (void)((p->msg_namelen) << 1);
+  { struct iovec * *tmp = &p->msg_iov; (void)tmp; }
+  (void)((p->msg_iovlen) << 1);
+  { void * *tmp = &p->msg_control; (void)tmp; }
+  (void)((p->msg_controllen) << 1);
+  (void)((p->msg_flags) << 1);
+}
+static PyObject *
+_cffi_layout_struct_msghdr(PyObject *self, PyObject *noarg)
+{
+  struct _cffi_aligncheck { char x; struct msghdr y; };
+  static Py_ssize_t nums[] = {
+    sizeof(struct msghdr),
+    offsetof(struct _cffi_aligncheck, y),
+    offsetof(struct msghdr, msg_name),
+    sizeof(((struct msghdr *)0)->msg_name),
+    offsetof(struct msghdr, msg_namelen),
+    sizeof(((struct msghdr *)0)->msg_namelen),
+    offsetof(struct msghdr, msg_iov),
+    sizeof(((struct msghdr *)0)->msg_iov),
+    offsetof(struct msghdr, msg_iovlen),
+    sizeof(((struct msghdr *)0)->msg_iovlen),
+    offsetof(struct msghdr, msg_control),
+    sizeof(((struct msghdr *)0)->msg_control),
+    offsetof(struct msghdr, msg_controllen),
+    sizeof(((struct msghdr *)0)->msg_controllen),
+    offsetof(struct msghdr, msg_flags),
+    sizeof(((struct msghdr *)0)->msg_flags),
+    -1
+  };
+  return _cffi_get_struct_layout(nums);
+  /* the next line is not executed, but compiled */
+  _cffi_check_struct_msghdr(0);
+}
+
+static void _cffi_check_struct_sockaddr(struct sockaddr *p)
+{
+  /* only to generate compile-time warnings or errors */
+  (void)((p->sa_family) << 1);
+}
+static PyObject *
+_cffi_layout_struct_sockaddr(PyObject *self, PyObject *noarg)
+{
+  struct _cffi_aligncheck { char x; struct sockaddr y; };
+  static Py_ssize_t nums[] = {
+    sizeof(struct sockaddr),
+    offsetof(struct _cffi_aligncheck, y),
+    offsetof(struct sockaddr, sa_family),
+    sizeof(((struct sockaddr *)0)->sa_family),
+    -1
+  };
+  return _cffi_get_struct_layout(nums);
+  /* the next line is not executed, but compiled */
+  _cffi_check_struct_sockaddr(0);
+}
+
+static PyObject *_cffi_setup_custom(PyObject *lib)
+{
+  if (_cffi_const_SCM_TIMESTAMP(lib) < 0)
+    return NULL;
+  Py_INCREF(Py_None);
+  return Py_None;
+}
+
+static PyMethodDef _cffi_methods[] = {
+  {"CMSG_DATA", _cffi_f_CMSG_DATA, METH_O},
+  {"CMSG_FIRSTHDR", _cffi_f_CMSG_FIRSTHDR, METH_O},
+  {"CMSG_LEN", _cffi_f_CMSG_LEN, METH_O},
+  {"CMSG_NXTHDR", _cffi_f_CMSG_NXTHDR, METH_VARARGS},
+  {"CMSG_SPACE", _cffi_f_CMSG_SPACE, METH_O},
+  {"getsockname", _cffi_f_getsockname, METH_VARARGS},
+  {"recvmsg", _cffi_f_recvmsg, METH_VARARGS},
+  {"sendmsg", _cffi_f_sendmsg, METH_VARARGS},
+  {"_cffi_layout_struct_cmsghdr", _cffi_layout_struct_cmsghdr, METH_NOARGS},
+  {"_cffi_layout_struct_iovec", _cffi_layout_struct_iovec, METH_NOARGS},
+  {"_cffi_layout_struct_msghdr", _cffi_layout_struct_msghdr, METH_NOARGS},
+  {"_cffi_layout_struct_sockaddr", _cffi_layout_struct_sockaddr, METH_NOARGS},
+  {"_cffi_setup", _cffi_setup, METH_VARARGS},
+  {NULL, NULL}    /* Sentinel */
+};
+
+PyMODINIT_FUNC
+init_cffi__x125f6df2xf64a70fd(void)
+{
+  PyObject *lib;
+  lib = Py_InitModule("_cffi__x125f6df2xf64a70fd", _cffi_methods);
+  if (lib == NULL || 0 < 0)
+    return;
+  _cffi_init();
+  return;
+}
diff --git a/twisted/python/__pycache__/_cffi__xf0e557fex170c7c20.c b/twisted/python/__pycache__/_cffi__xf0e557fex170c7c20.c
new file mode 100644
index 0000000..918b8d3
--- /dev/null
+++ b/twisted/python/__pycache__/_cffi__xf0e557fex170c7c20.c
@@ -0,0 +1,230 @@
+
+#include <Python.h>
+#include <stddef.h>
+
+#ifdef MS_WIN32
+#include <malloc.h>   /* for alloca() */
+typedef __int8 int8_t;
+typedef __int16 int16_t;
+typedef __int32 int32_t;
+typedef __int64 int64_t;
+typedef unsigned __int8 uint8_t;
+typedef unsigned __int16 uint16_t;
+typedef unsigned __int32 uint32_t;
+typedef unsigned __int64 uint64_t;
+typedef unsigned char _Bool;
+#endif
+
+#if PY_MAJOR_VERSION < 3
+# undef PyCapsule_CheckExact
+# undef PyCapsule_GetPointer
+# define PyCapsule_CheckExact(capsule) (PyCObject_Check(capsule))
+# define PyCapsule_GetPointer(capsule, name) \
+    (PyCObject_AsVoidPtr(capsule))
+#endif
+
+#if PY_MAJOR_VERSION >= 3
+# define PyInt_FromLong PyLong_FromLong
+#endif
+
+#define _cffi_from_c_double PyFloat_FromDouble
+#define _cffi_from_c_float PyFloat_FromDouble
+#define _cffi_from_c_long PyInt_FromLong
+#define _cffi_from_c_ulong PyLong_FromUnsignedLong
+#define _cffi_from_c_longlong PyLong_FromLongLong
+#define _cffi_from_c_ulonglong PyLong_FromUnsignedLongLong
+
+#define _cffi_to_c_double PyFloat_AsDouble
+#define _cffi_to_c_float PyFloat_AsDouble
+
+#define _cffi_from_c_SIGNED(x, type)                                     \
+    (sizeof(type) <= sizeof(long) ? PyInt_FromLong(x) :                  \
+                                    PyLong_FromLongLong(x))
+#define _cffi_from_c_UNSIGNED(x, type)                                   \
+    (sizeof(type) < sizeof(long) ? PyInt_FromLong(x) :                   \
+     sizeof(type) == sizeof(long) ? PyLong_FromUnsignedLong(x) :         \
+                                    PyLong_FromUnsignedLongLong(x))
+
+#define _cffi_to_c_SIGNED(o, type)                                       \
+    (sizeof(type) == 1 ? _cffi_to_c_i8(o) :                              \
+     sizeof(type) == 2 ? _cffi_to_c_i16(o) :                             \
+     sizeof(type) == 4 ? _cffi_to_c_i32(o) :                             \
+     sizeof(type) == 8 ? _cffi_to_c_i64(o) :                             \
+     (Py_FatalError("unsupported size for type " #type), 0))
+#define _cffi_to_c_UNSIGNED(o, type)                                     \
+    (sizeof(type) == 1 ? _cffi_to_c_u8(o) :                              \
+     sizeof(type) == 2 ? _cffi_to_c_u16(o) :                             \
+     sizeof(type) == 4 ? _cffi_to_c_u32(o) :                             \
+     sizeof(type) == 8 ? _cffi_to_c_u64(o) :                             \
+     (Py_FatalError("unsupported size for type " #type), 0))
+
+#define _cffi_to_c_i8                                                    \
+                 ((int(*)(PyObject *))_cffi_exports[1])
+#define _cffi_to_c_u8                                                    \
+                 ((int(*)(PyObject *))_cffi_exports[2])
+#define _cffi_to_c_i16                                                   \
+                 ((int(*)(PyObject *))_cffi_exports[3])
+#define _cffi_to_c_u16                                                   \
+                 ((int(*)(PyObject *))_cffi_exports[4])
+#define _cffi_to_c_i32                                                   \
+                 ((int(*)(PyObject *))_cffi_exports[5])
+#define _cffi_to_c_u32                                                   \
+                 ((unsigned int(*)(PyObject *))_cffi_exports[6])
+#define _cffi_to_c_i64                                                   \
+                 ((long long(*)(PyObject *))_cffi_exports[7])
+#define _cffi_to_c_u64                                                   \
+                 ((unsigned long long(*)(PyObject *))_cffi_exports[8])
+#define _cffi_to_c_char                                                  \
+                 ((int(*)(PyObject *))_cffi_exports[9])
+#define _cffi_from_c_pointer                                             \
+    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[10])
+#define _cffi_to_c_pointer                                               \
+    ((char *(*)(PyObject *, CTypeDescrObject *))_cffi_exports[11])
+#define _cffi_get_struct_layout                                          \
+    ((PyObject *(*)(Py_ssize_t[]))_cffi_exports[12])
+#define _cffi_restore_errno                                              \
+    ((void(*)(void))_cffi_exports[13])
+#define _cffi_save_errno                                                 \
+    ((void(*)(void))_cffi_exports[14])
+#define _cffi_from_c_char                                                \
+    ((PyObject *(*)(char))_cffi_exports[15])
+#define _cffi_from_c_deref                                               \
+    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[16])
+#define _cffi_to_c                                                       \
+    ((int(*)(char *, CTypeDescrObject *, PyObject *))_cffi_exports[17])
+#define _cffi_from_c_struct                                              \
+    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[18])
+#define _cffi_to_c_wchar_t                                               \
+    ((wchar_t(*)(PyObject *))_cffi_exports[19])
+#define _cffi_from_c_wchar_t                                             \
+    ((PyObject *(*)(wchar_t))_cffi_exports[20])
+#define _cffi_to_c_long_double                                           \
+    ((long double(*)(PyObject *))_cffi_exports[21])
+#define _cffi_to_c__Bool                                                 \
+    ((_Bool(*)(PyObject *))_cffi_exports[22])
+#define _cffi_prepare_pointer_call_argument                              \
+    ((Py_ssize_t(*)(CTypeDescrObject *, PyObject *, char **))_cffi_exports[23])
+#define _cffi_convert_array_from_object                                  \
+    ((int(*)(char *, CTypeDescrObject *, PyObject *))_cffi_exports[24])
+#define _CFFI_NUM_EXPORTS 25
+
+typedef struct _ctypedescr CTypeDescrObject;
+
+static void *_cffi_exports[_CFFI_NUM_EXPORTS];
+static PyObject *_cffi_types, *_cffi_VerificationError;
+
+static PyObject *_cffi_setup_custom(PyObject *lib);   /* forward */
+
+static PyObject *_cffi_setup(PyObject *self, PyObject *args)
+{
+    PyObject *library;
+    if (!PyArg_ParseTuple(args, "OOO", &_cffi_types, &_cffi_VerificationError,
+                                       &library))
+        return NULL;
+    Py_INCREF(_cffi_types);
+    Py_INCREF(_cffi_VerificationError);
+    return _cffi_setup_custom(library);
+}
+
+static void _cffi_init(void)
+{
+    PyObject *module = PyImport_ImportModule("_cffi_backend");
+    PyObject *c_api_object;
+
+    if (module == NULL)
+        return;
+
+    c_api_object = PyObject_GetAttrString(module, "_C_API");
+    if (c_api_object == NULL)
+        return;
+    if (!PyCapsule_CheckExact(c_api_object)) {
+        PyErr_SetNone(PyExc_ImportError);
+        return;
+    }
+    memcpy(_cffi_exports, PyCapsule_GetPointer(c_api_object, "cffi"),
+           _CFFI_NUM_EXPORTS * sizeof(void *));
+}
+
+#define _cffi_type(num) ((CTypeDescrObject *)PyList_GET_ITEM(_cffi_types, num))
+
+/**********/
+
+
+
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <signal.h>
+
+#include <sys/param.h>
+
+#ifdef BSD
+#  include <sys/uio.h>
+#endif
+
+#define member_size(type, member) sizeof(((type *)0)->member)
+
+static const size_t SIZEOF_SA_FAMILY = member_size(struct sockaddr, sa_family);
+static const size_t SIZEOF_CMSG_LEN = member_size(struct cmsghdr, cmsg_len);
+
+
+static int _cffi_const_SIZEOF_CMSG_LEN(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (SIZEOF_CMSG_LEN) && (SIZEOF_CMSG_LEN) <= LONG_MAX)
+    o = PyInt_FromLong((long)(SIZEOF_CMSG_LEN));
+  else if ((SIZEOF_CMSG_LEN) <= 0)
+    o = PyLong_FromLongLong((long long)(SIZEOF_CMSG_LEN));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(SIZEOF_CMSG_LEN));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "SIZEOF_CMSG_LEN", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return 0;
+}
+
+static int _cffi_const_SIZEOF_SA_FAMILY(PyObject *lib)
+{
+  PyObject *o;
+  int res;
+  if (LONG_MIN <= (SIZEOF_SA_FAMILY) && (SIZEOF_SA_FAMILY) <= LONG_MAX)
+    o = PyInt_FromLong((long)(SIZEOF_SA_FAMILY));
+  else if ((SIZEOF_SA_FAMILY) <= 0)
+    o = PyLong_FromLongLong((long long)(SIZEOF_SA_FAMILY));
+  else
+    o = PyLong_FromUnsignedLongLong((unsigned long long)(SIZEOF_SA_FAMILY));
+  if (o == NULL)
+    return -1;
+  res = PyObject_SetAttrString(lib, "SIZEOF_SA_FAMILY", o);
+  Py_DECREF(o);
+  if (res < 0)
+    return -1;
+  return _cffi_const_SIZEOF_CMSG_LEN(lib);
+}
+
+static PyObject *_cffi_setup_custom(PyObject *lib)
+{
+  if (_cffi_const_SIZEOF_SA_FAMILY(lib) < 0)
+    return NULL;
+  Py_INCREF(Py_None);
+  return Py_None;
+}
+
+static PyMethodDef _cffi_methods[] = {
+  {"_cffi_setup", _cffi_setup, METH_VARARGS},
+  {NULL, NULL}    /* Sentinel */
+};
+
+PyMODINIT_FUNC
+init_cffi__xf0e557fex170c7c20(void)
+{
+  PyObject *lib;
+  lib = Py_InitModule("_cffi__xf0e557fex170c7c20", _cffi_methods);
+  if (lib == NULL || 0 < 0)
+    return;
+  _cffi_init();
+  return;
+}
diff --git a/twisted/test/proto_helpers.py b/twisted/test/proto_helpers.py
index c12900b..3b0d27f 100644
--- a/twisted/test/proto_helpers.py
+++ b/twisted/test/proto_helpers.py
@@ -547,25 +547,58 @@ class MemoryReactor(object):
         self.connectors.append(conn)
         return conn
 
+
     def addReader(self, reader):
+        """
+        Fake L{IReactorFDSet.addReader} which adds the reader to a local set.
+        """
         self.readers.add(reader)
 
+
     def removeReader(self, reader):
+        """
+        Fake L{IReactorFDSet.removeReader} which removes the reader from a
+        local set.
+        """
         self.readers.discard(reader)
 
+
     def addWriter(self, writer):
+        """
+        Fake L{IReactorFDSet.addWriter} which adds the writer to a local set.
+        """
         self.writers.add(writer)
 
+
     def removeWriter(self, writer):
+        """
+        Fake L{IReactorFDSet.removeWriter} which removes the writer from a
+        local set.
+        """
         self.writers.discard(writer)
 
+
     def getReaders(self):
+        """
+        Fake L{IReactorFDSet.getReaders} which returns a list of readers from
+        the local set.
+        """
         return list(self.readers)
 
+
     def getWriters(self):
+        """
+        Fake L{IReactorFDSet.getWriters} which returns a list of writers from
+        the local set.
+        """
         return list(self.writers)
 
+
     def removeAll(self):
+        """
+        Fake L{IReactorFDSet.removeAll} which removed all readers and writers
+        from the local sets.
+        """
         self.readers.clear()
         self.writers.clear()
 
diff --git a/twisted/test/test_proto_helpers.py b/twisted/test/test_proto_helpers.py
deleted file mode 100644
index 17225b1..0000000
--- a/twisted/test/test_proto_helpers.py
+++ /dev/null
@@ -1,31 +0,0 @@
-from twisted.test.proto_helpers import MemoryReactor
-from twisted.trial import unittest
-
-
-
-class TestMemoryReactor(unittest.TestCase):
-    def test_readers(self):
-        reader = object()
-        reactor = MemoryReactor()
-
-        reactor.addReader(reader)
-        reactor.addReader(reader)
-
-        self.assertEqual(reactor.getReaders(), [reader])
-
-        reactor.removeReader(reader)
-
-        self.assertEqual(reactor.getReaders(), [])
-
-    def test_writers(self):
-        writer = object()
-        reactor = MemoryReactor()
-
-        reactor.addWriter(writer)
-        reactor.addWriter(writer)
-
-        self.assertEqual(reactor.getWriters(), [writer])
-
-        reactor.removeWriter(writer)
-
-        self.assertEqual(reactor.getWriters(), [])
diff --git a/twisted/test/test_stringtransport.py b/twisted/test/test_stringtransport.py
index ca12098..cc348cf 100644
--- a/twisted/test/test_stringtransport.py
+++ b/twisted/test/test_stringtransport.py
@@ -277,3 +277,36 @@ class ReactorTests(TestCase):
         address = port.getHost()
         verifyObject(IAddress, address)
         self.assertEqual(address.name, "/path/to/socket")
+
+
+    def test_readers(self):
+        """
+        Adding, removing, and listing readers works.
+        """
+        reader = object()
+        reactor = MemoryReactor()
+
+        reactor.addReader(reader)
+        reactor.addReader(reader)
+
+        self.assertEqual(reactor.getReaders(), [reader])
+
+        reactor.removeReader(reader)
+
+        self.assertEqual(reactor.getReaders(), [])
+
+    def test_writers(self):
+        """
+        Adding, removing, and listing writers works.
+        """
+        writer = object()
+        reactor = MemoryReactor()
+
+        reactor.addWriter(writer)
+        reactor.addWriter(writer)
+
+        self.assertEqual(reactor.getWriters(), [writer])
+
+        reactor.removeWriter(writer)
+
+        self.assertEqual(reactor.getWriters(), [])
