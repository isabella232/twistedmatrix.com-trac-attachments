diff --git a/twisted/internet/test/test_endpoints.py b/twisted/internet/test/test_endpoints.py
index 5a14e5a..c9cdfae 100644
--- a/twisted/internet/test/test_endpoints.py
+++ b/twisted/internet/test/test_endpoints.py
@@ -26,6 +26,7 @@ from twisted.test.proto_helpers import RaisingMemoryReactor, StringTransport
 from twisted.python.failure import Failure
 from twisted.python.systemd import ListenFDs
 from twisted.python.filepath import FilePath
+from twisted.python.runtime import platform
 from twisted.python import log
 from twisted.protocols import basic
 from twisted.internet.task import Clock
@@ -700,6 +701,9 @@ class StandardIOEndpointsTestCase(unittest.TestCase):
 
         return d.addCallback(checkReaders)
 
+    if platform.isWindows():
+        test_StdioIOReceivesCorrectReactor.skip = "Requires POSIX stdio"
+
 
 
 class StubApplicationProtocol(protocol.Protocol):
diff --git a/twisted/test/proto_helpers.py b/twisted/test/proto_helpers.py
index c12900b..3b0d27f 100644
--- a/twisted/test/proto_helpers.py
+++ b/twisted/test/proto_helpers.py
@@ -547,25 +547,58 @@ class MemoryReactor(object):
         self.connectors.append(conn)
         return conn
 
+
     def addReader(self, reader):
+        """
+        Fake L{IReactorFDSet.addReader} which adds the reader to a local set.
+        """
         self.readers.add(reader)
 
+
     def removeReader(self, reader):
+        """
+        Fake L{IReactorFDSet.removeReader} which removes the reader from a
+        local set.
+        """
         self.readers.discard(reader)
 
+
     def addWriter(self, writer):
+        """
+        Fake L{IReactorFDSet.addWriter} which adds the writer to a local set.
+        """
         self.writers.add(writer)
 
+
     def removeWriter(self, writer):
+        """
+        Fake L{IReactorFDSet.removeWriter} which removes the writer from a
+        local set.
+        """
         self.writers.discard(writer)
 
+
     def getReaders(self):
+        """
+        Fake L{IReactorFDSet.getReaders} which returns a list of readers from
+        the local set.
+        """
         return list(self.readers)
 
+
     def getWriters(self):
+        """
+        Fake L{IReactorFDSet.getWriters} which returns a list of writers from
+        the local set.
+        """
         return list(self.writers)
 
+
     def removeAll(self):
+        """
+        Fake L{IReactorFDSet.removeAll} which removed all readers and writers
+        from the local sets.
+        """
         self.readers.clear()
         self.writers.clear()
 
diff --git a/twisted/test/test_proto_helpers.py b/twisted/test/test_proto_helpers.py
deleted file mode 100644
index 17225b1..0000000
--- a/twisted/test/test_proto_helpers.py
+++ /dev/null
@@ -1,31 +0,0 @@
-from twisted.test.proto_helpers import MemoryReactor
-from twisted.trial import unittest
-
-
-
-class TestMemoryReactor(unittest.TestCase):
-    def test_readers(self):
-        reader = object()
-        reactor = MemoryReactor()
-
-        reactor.addReader(reader)
-        reactor.addReader(reader)
-
-        self.assertEqual(reactor.getReaders(), [reader])
-
-        reactor.removeReader(reader)
-
-        self.assertEqual(reactor.getReaders(), [])
-
-    def test_writers(self):
-        writer = object()
-        reactor = MemoryReactor()
-
-        reactor.addWriter(writer)
-        reactor.addWriter(writer)
-
-        self.assertEqual(reactor.getWriters(), [writer])
-
-        reactor.removeWriter(writer)
-
-        self.assertEqual(reactor.getWriters(), [])
diff --git a/twisted/test/test_stringtransport.py b/twisted/test/test_stringtransport.py
index ca12098..540fd62 100644
--- a/twisted/test/test_stringtransport.py
+++ b/twisted/test/test_stringtransport.py
@@ -277,3 +277,37 @@ class ReactorTests(TestCase):
         address = port.getHost()
         verifyObject(IAddress, address)
         self.assertEqual(address.name, "/path/to/socket")
+
+
+    def test_readers(self):
+        """
+        Adding, removing, and listing readers works.
+        """
+        reader = object()
+        reactor = MemoryReactor()
+
+        reactor.addReader(reader)
+        reactor.addReader(reader)
+
+        self.assertEqual(reactor.getReaders(), [reader])
+
+        reactor.removeReader(reader)
+
+        self.assertEqual(reactor.getReaders(), [])
+
+
+    def test_writers(self):
+        """
+        Adding, removing, and listing writers works.
+        """
+        writer = object()
+        reactor = MemoryReactor()
+
+        reactor.addWriter(writer)
+        reactor.addWriter(writer)
+
+        self.assertEqual(reactor.getWriters(), [writer])
+
+        reactor.removeWriter(writer)
+
+        self.assertEqual(reactor.getWriters(), [])
