diff --git a/twisted/internet/_win32stdio.py b/twisted/internet/_win32stdio.py
index c4c5644..65d4601 100644
--- a/twisted/internet/_win32stdio.py
+++ b/twisted/internet/_win32stdio.py
@@ -30,13 +30,14 @@ class StandardIO(_pollingfile._PollingTimer):
     disconnecting = False
     disconnected = False
 
-    def __init__(self, proto):
+    def __init__(self, proto, reactor=None):
         """
         Start talking to standard IO with the given protocol.
 
         Also, put it stdin/stdout/stderr into binary mode.
         """
-        from twisted.internet import reactor
+        if reactor is None:
+            from twisted.internet import reactor
 
         for stdfd in range(0, 1, 2):
             msvcrt.setmode(stdfd, os.O_BINARY)
diff --git a/twisted/internet/test/test_endpoints.py b/twisted/internet/test/test_endpoints.py
index 1c49d3f..5a14e5a 100644
--- a/twisted/internet/test/test_endpoints.py
+++ b/twisted/internet/test/test_endpoints.py
@@ -687,10 +687,18 @@ class StandardIOEndpointsTestCase(unittest.TestCase):
 
 
     def test_StdioIOReceivesCorrectReactor(self):
+        """
+        The reactor passed to the endpoint is the one that the readers are
+        added to.
+        """
         reactor = MemoryReactor()
         ep = endpoints.StandardIOEndpoint(reactor)
-        ep.listen(StdioFactory())
-        self.assertEqual(len(reactor.getReaders()), 1)
+        d = ep.listen(StdioFactory())
+
+        def checkReaders(stdioOb):
+            self.assertIn(stdioOb._reader, reactor.getReaders())
+
+        return d.addCallback(checkReaders)
 
 
 
diff --git a/twisted/test/proto_helpers.py b/twisted/test/proto_helpers.py
index 72d713e..c12900b 100644
--- a/twisted/test/proto_helpers.py
+++ b/twisted/test/proto_helpers.py
@@ -423,8 +423,8 @@ class MemoryReactor(object):
         self.adoptedStreamConnections = []
         self.connectors = []
 
-        self.readers = []
-        self.writers = []
+        self.readers = set()
+        self.writers = set()
 
 
     def adoptStreamPort(self, fileno, addressFamily, factory):
@@ -548,28 +548,26 @@ class MemoryReactor(object):
         return conn
 
     def addReader(self, reader):
-        if reader not in self.readers:
-            self.readers.append(reader)
+        self.readers.add(reader)
 
     def removeReader(self, reader):
-        self.readers.remove(reader)
+        self.readers.discard(reader)
 
     def addWriter(self, writer):
-        if writer not in self.writers:
-            self.writers.append(writer)
+        self.writers.add(writer)
 
     def removeWriter(self, writer):
-        self.writers.remove(writer)
+        self.writers.discard(writer)
 
     def getReaders(self):
-        return self.readers[:]
+        return list(self.readers)
 
     def getWriters(self):
-        return self.writers[:]
+        return list(self.writers)
 
     def removeAll(self):
-        del self.readers[:]
-        del self.writers[:]
+        self.readers.clear()
+        self.writers.clear()
 
 
 for iface in implementedBy(MemoryReactor):
