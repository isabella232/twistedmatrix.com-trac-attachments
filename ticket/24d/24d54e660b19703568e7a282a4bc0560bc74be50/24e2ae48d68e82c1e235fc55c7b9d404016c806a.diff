diff --git a/twisted/internet/endpoints.py b/twisted/internet/endpoints.py
index 3067041..8aa7ce5 100644
--- a/twisted/internet/endpoints.py
+++ b/twisted/internet/endpoints.py
@@ -258,7 +258,8 @@ class StandardIOEndpoint(object):
         Implement L{IStreamServerEndpoint.listen} to listen on stdin/stdout
         """
         return defer.execute(stdio.StandardIO,
-                             stdioProtocolFactory.buildProtocol(PipeAddress()))
+                             stdioProtocolFactory.buildProtocol(PipeAddress()),
+                             reactor=self._reactor)
 
 
 
diff --git a/twisted/internet/test/test_endpoints.py b/twisted/internet/test/test_endpoints.py
index 061f7ac..1c49d3f 100644
--- a/twisted/internet/test/test_endpoints.py
+++ b/twisted/internet/test/test_endpoints.py
@@ -686,6 +686,13 @@ class StandardIOEndpointsTestCase(unittest.TestCase):
         return d.addCallback(checkAddress)
 
 
+    def test_StdioIOReceivesCorrectReactor(self):
+        reactor = MemoryReactor()
+        ep = endpoints.StandardIOEndpoint(reactor)
+        ep.listen(StdioFactory())
+        self.assertEqual(len(reactor.getReaders()), 1)
+
+
 
 class StubApplicationProtocol(protocol.Protocol):
     """
diff --git a/twisted/test/proto_helpers.py b/twisted/test/proto_helpers.py
index 21138e7..72d713e 100644
--- a/twisted/test/proto_helpers.py
+++ b/twisted/test/proto_helpers.py
@@ -17,10 +17,9 @@ from zope.interface.verify import verifyClass
 from twisted.python import failure
 from twisted.python.compat import unicode
 from twisted.internet.interfaces import (
-    ITransport, IConsumer, IPushProducer, IConnector)
-from twisted.internet.interfaces import (
-    IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket)
-from twisted.internet.interfaces import IListeningPort
+    ITransport, IConsumer, IPushProducer, IConnector, IReactorTCP, IReactorSSL,
+    IReactorUNIX, IReactorSocket, IListeningPort, IReactorFDSet
+)
 from twisted.internet.abstract import isIPv6Address
 from twisted.internet.error import UnsupportedAddressFamily
 from twisted.protocols import basic
@@ -370,7 +369,9 @@ class _FakeConnector(object):
 
 
 
-@implementer(IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket)
+@implementer(
+    IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket, IReactorFDSet
+)
 class MemoryReactor(object):
     """
     A fake reactor to be used in tests.  This reactor doesn't actually do
@@ -422,6 +423,9 @@ class MemoryReactor(object):
         self.adoptedStreamConnections = []
         self.connectors = []
 
+        self.readers = []
+        self.writers = []
+
 
     def adoptStreamPort(self, fileno, addressFamily, factory):
         """
@@ -542,6 +546,32 @@ class MemoryReactor(object):
         factory.startedConnecting(conn)
         self.connectors.append(conn)
         return conn
+
+    def addReader(self, reader):
+        if reader not in self.readers:
+            self.readers.append(reader)
+
+    def removeReader(self, reader):
+        self.readers.remove(reader)
+
+    def addWriter(self, writer):
+        if writer not in self.writers:
+            self.writers.append(writer)
+
+    def removeWriter(self, writer):
+        self.writers.remove(writer)
+
+    def getReaders(self):
+        return self.readers[:]
+
+    def getWriters(self):
+        return self.writers[:]
+
+    def removeAll(self):
+        del self.readers[:]
+        del self.writers[:]
+
+
 for iface in implementedBy(MemoryReactor):
     verifyClass(iface, MemoryReactor)
 
diff --git a/twisted/test/test_proto_helpers.py b/twisted/test/test_proto_helpers.py
new file mode 100644
index 0000000..17225b1
--- /dev/null
+++ b/twisted/test/test_proto_helpers.py
@@ -0,0 +1,31 @@
+from twisted.test.proto_helpers import MemoryReactor
+from twisted.trial import unittest
+
+
+
+class TestMemoryReactor(unittest.TestCase):
+    def test_readers(self):
+        reader = object()
+        reactor = MemoryReactor()
+
+        reactor.addReader(reader)
+        reactor.addReader(reader)
+
+        self.assertEqual(reactor.getReaders(), [reader])
+
+        reactor.removeReader(reader)
+
+        self.assertEqual(reactor.getReaders(), [])
+
+    def test_writers(self):
+        writer = object()
+        reactor = MemoryReactor()
+
+        reactor.addWriter(writer)
+        reactor.addWriter(writer)
+
+        self.assertEqual(reactor.getWriters(), [writer])
+
+        reactor.removeWriter(writer)
+
+        self.assertEqual(reactor.getWriters(), [])
