Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py   (revision 34158)
+++ twisted/internet/defer.py   (working copy)
@@ -1394,8 +1394,9 @@
     """

     def __init__(self, size=None, backlog=None):
-        self.waiting = []
-        self.pending = []
+        from collections import deque
+        self.waiting = deque([])
+        self.pending = deque([])
         self.size = size
         self.backlog = backlog

@@ -1422,7 +1423,7 @@
         @raise QueueOverflow: Too many objects are in this queue.
         """
         if self.waiting:
-            self.waiting.pop(0).callback(obj)
+            self.waiting.popleft().callback(obj)
         elif self.size is None or len(self.pending) < self.size:
             self.pending.append(obj)
         else:
@@ -1440,7 +1441,7 @@
         L{Deferred}s are already waiting for an object from this queue.
         """
         if self.pending:
-            return succeed(self.pending.pop(0))
+            return succeed(self.pending.popleft())
         elif self.backlog is None or len(self.waiting) < self.backlog:
             d = Deferred(canceller=self._cancelGet)
             self.waiting.append(d)