Index: twisted/names/tap.py
===================================================================
--- twisted/names/tap.py	(revision 33692)
+++ twisted/names/tap.py	(working copy)
@@ -112,17 +112,32 @@
             raise usage.UsageError("Invalid port: %r" % (self['port'],))
 
 
-def makeService(config):
-    import client, cache, hosts
+def _buildResolvers(config):
+    """
+    Build DNS resolver instances in an order which leaves recursive
+    resolving as a last resort.
 
+    @type config: L{usage.Config} instance
+    @param config: Parsed command-line configuration
+
+    @return: Two-item tuple of a list of cache resovers and a list of client
+        resolvers
+    """
+    from twisted.names import client, cache, hosts
+
     ca, cl = [], []
     if config['cache']:
         ca.append(cache.CacheResolver(verbose=config['verbose']))
+    if config['hosts-file']:
+        cl.append(hosts.Resolver(file=config['hosts-file']))
     if config['recursive']:
         cl.append(client.createResolver(resolvconf=config['resolv-conf']))
-    if config['hosts-file']:
-        cl.append(hosts.Resolver(file=config['hosts-file']))
+    return ca, cl
 
+
+def makeService(config):
+    ca, cl = _buildResolvers(config)
+
     f = server.DNSServerFactory(config.zones, ca, cl, config['verbose'])
     p = dns.DNSDatagramProtocol(f)
     f.noisy = 0
Index: twisted/names/test/test_tap.py
===================================================================
--- twisted/names/test/test_tap.py	(revision 33692)
+++ twisted/names/test/test_tap.py	(working copy)
@@ -7,9 +7,10 @@
 
 from twisted.trial.unittest import TestCase
 from twisted.python.usage import UsageError
-from twisted.names.tap import Options
+from twisted.names.tap import Options, _buildResolvers
 from twisted.names.dns import PORT
 from twisted.names.secondary import SecondaryAuthorityService
+from twisted.names.resolve import ResolverChain
 
 
 class OptionsTests(TestCase):
@@ -75,3 +76,22 @@
         self.assertIsInstance(options.svcs[1], SecondaryAuthorityService)
         self.assertEqual(secondary.primary, '1.2.3.5')
         self.assertEqual(secondary._port, 5354)
+
+
+    def test_recursiveConfiguration(self):
+        """
+        Recursive DNS lookups, if enabled, should be a last-resort option.
+        Any other lookup method (cache, local lookup, etc.) should take
+        precedence over recursive lookups
+        """
+        options = Options()
+        options.parseOptions(['--hosts-file', 'hosts.txt', '--recursive'])
+        ca, cl = _buildResolvers(options)
+
+        for x in cl:
+            if isinstance(x, ResolverChain):
+                # Clean the callback for reparsing resolv.conf  -- boo
+                x.resolvers[-1]._parseCall.cancel()
+
+        self.assertIsInstance(cl[-1], ResolverChain)
+
