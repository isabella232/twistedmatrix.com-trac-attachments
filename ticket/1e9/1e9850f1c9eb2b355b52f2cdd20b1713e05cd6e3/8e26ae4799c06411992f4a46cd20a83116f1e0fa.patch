Index: twisted/web/test/test_xmlrpc.py
===================================================================
--- twisted/web/test/test_xmlrpc.py	(revision 30758)
+++ twisted/web/test/test_xmlrpc.py	(working copy)
@@ -16,7 +16,7 @@
     XMLRPC, payloadTemplate, addIntrospection, _QueryFactory, Proxy, withRequest)
 from twisted.web import server, static, client, error, http
 from twisted.internet import reactor, defer
-from twisted.internet.error import ConnectionDone, TimeoutError
+from twisted.internet.error import ConnectionDone
 from twisted.python import failure
 from twisted.web.test.test_web import DummyRequest
 
@@ -380,12 +380,20 @@
         L{xmlrpc.Proxy.callRemote} passes the original
         timeout argument to the underlying connectTCP or connectSSL
         """
-        #Assumes nothing is running on port 69.
-        proxy = xmlrpc.Proxy("http://127.0.0.1:69/", timeout=0.00001)
-        return self.assertFailure(proxy.callRemote("someMethod"), 
-                                    TimeoutError)
+        class FakeReactor:
 
+            def connectTCP(klass, *args, **kwargs):
+                self.assertTrue('timeout' in kwargs)
+                self.assertEquals(kwargs['timeout'], 2.0)
 
+
+        proxy = xmlrpc.Proxy("http://127.0.0.1:69", timeout=2.0, 
+                            reactor=FakeReactor())
+
+        self.assertTrue(proxy.callRemote("someMethod"))
+
+
+
 class XMLRPCTestCase2(XMLRPCTestCase):
     """
     Test with proxy that doesn't add a slash.
Index: twisted/web/topfiles/4741.feature
===================================================================
--- twisted/web/topfiles/4741.feature	(revision 30758)
+++ twisted/web/topfiles/4741.feature	(working copy)
@@ -1,2 +1,2 @@
-twisted.web.xmlrpc.Proxy constructor now takes additional 'timeout' argument,
-defaulting to 30 seconds.
+twisted.web.xmlrpc.Proxy constructor now takes additional 'timeout' and
+'reactor' argument. 'timeout' defaulting to 30 seconds.
Index: twisted/web/xmlrpc.py
===================================================================
--- twisted/web/xmlrpc.py	(revision 30758)
+++ twisted/web/xmlrpc.py	(working copy)
@@ -484,13 +484,16 @@
                 has failed.
     @type timeout: C{float}
 
+    @ivar reactor: the reactor used to create connections.
+    @type reactor: object providing L{twisted.internet.interfaces.IReactorTCP}
+
     @ivar queryFactory: object returning a factory for XML-RPC protocol. Mainly
         useful for tests.
     """
     queryFactory = _QueryFactory
 
     def __init__(self, url, user=None, password=None, allowNone=False,
-                 useDateTime=False, timeout=30.0):
+                 useDateTime=False, timeout=30.0, reactor=reactor):
         """
         @param url: The URL to which to post method calls.  Calls will be made
             over SSL if the scheme is HTTPS.  If netloc contains username or
@@ -527,6 +530,7 @@
         self.allowNone = allowNone
         self.useDateTime = useDateTime
         self.timeout = timeout
+        self._reactor = reactor
 
 
     def __setattr__(self, name, value):
@@ -554,13 +558,14 @@
         factory = self.queryFactory(
             self.path, self.host, method, self.user,
             self.password, self.allowNone, args, cancel, self.useDateTime)
+
         if self.secure:
             from twisted.internet import ssl
-            connector = reactor.connectSSL(self.host, self.port or 443,
-                                           factory, ssl.ClientContextFactory(),
-                                           timeout=self.timeout)
+            connector = self._reactor.connectSSL(self.host, self.port or 443,
+                                            factory, ssl.ClientContextFactory(),
+                                            timeout=self.timeout)
         else:
-            connector = reactor.connectTCP(self.host, self.port or 80, factory,
+            connector = self._reactor.connectTCP(self.host, self.port or 80, factory,
                                             timeout=self.timeout)
         return factory.deferred
 
