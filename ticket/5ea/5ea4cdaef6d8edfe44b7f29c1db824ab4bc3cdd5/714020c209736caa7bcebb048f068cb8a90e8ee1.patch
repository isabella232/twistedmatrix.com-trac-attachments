diff --git a/twisted/trial/test/test_assertions.py b/twisted/trial/test/test_assertions.py
index c720a64..9a2e8ff 100644
--- a/twisted/trial/test/test_assertions.py
+++ b/twisted/trial/test/test_assertions.py
@@ -650,53 +650,139 @@ class TestAssertions(unittest.TestCase):
 
 
 
-class TestAssertionNames(unittest.TestCase):
+class TestAssertionDeprecations(unittest.TestCase):
     """
-    Tests for consistency of naming within TestCase assertion methods
+    Tests for deprecations of the C{fail*} and duplicate C{assert*} methods.
     """
-    def _getAsserts(self):
-        dct = {}
-        reflect.accumulateMethods(self, dct, 'assert')
-        return [ dct[k] for k in dct if not k.startswith('Not') and k != '_' ]
 
-    def _name(self, x):
-        return x.__name__
+    version = Version('Twisted', 13, 0, 0)
+
+    def _boom(self):
+        raise ValueError()
+
+    def test_fail_deprecations(self):
+        """
+        The C{fail*} test methods, other than C{fail}, are deprecated in favor
+        of the C{assert*} test methods.
+
+        """
+
+        self.callDeprecated(
+            (self.version, self.assertFalse), self.failIf, False)
+        self.callDeprecated(
+            (self.version, self.assertFalse), self.failUnlessFalse, False)
+        self.callDeprecated(
+            (self.version, self.assertTrue), self.failUnless, True)
+        self.callDeprecated(
+            (self.version, self.assertTrue), self.failUnlessTrue, True)
+        self.callDeprecated(
+            (self.version, self.assertRaises),
+            self.failUnlessRaises,
+            ValueError,
+            self._boom)
+        self.callDeprecated(
+            (self.version, self.assertEqual), self.failUnlessEqual, 1, 1)
+        self.callDeprecated(
+            (self.version, self.assertEqual), self.failUnlessEquals, 1, 1)
+        self.callDeprecated(
+            (self.version, self.assertIs),
+            self.failUnlessIdentical,
+            None,
+            None)
+        self.callDeprecated(
+            (self.version, self.assertIsNot), self.failIfIdentical, 1, 2)
+        self.callDeprecated(
+            (self.version, self.assertNotEqual), self.failIfEqual, 1, 2)
+        self.callDeprecated(
+            (self.version, self.assertNotEqual), self.failIfEquals, 1, 2)
+        self.callDeprecated(
+            (self.version, self.assertIn), self.failUnlessIn, 1, [1])
+        self.callDeprecated(
+            (self.version, self.assertIn), self.failUnlessSubstring, "s", "os")
+        self.callDeprecated(
+            (self.version, self.assertNotIn), self.failIfIn, 1, [])
+        self.callDeprecated(
+            (self.version, self.assertNotIn), self.failIfSubstring, "s", "")
+        self.callDeprecated(
+            (self.version, self.assertNotAlmostEqual),
+            self.failIfAlmostEqual,
+            .1,
+            1000)
+        self.callDeprecated(
+            (self.version, self.assertNotAlmostEqual),
+            self.failIfAlmostEquals,
+            .1,
+            1000)
+        self.callDeprecated(
+            (self.version, self.assertAlmostEqual),
+            self.failUnlessAlmostEqual,
+            .1,
+            .1)
+        self.callDeprecated(
+            (self.version, self.assertAlmostEqual),
+            self.failUnlessAlmostEquals,
+            .1,
+            .1)
+        self.callDeprecated(
+            (self.version, self.assertApproximates),
+            self.failUnlessApproximates,
+            .1,
+            .1)
+        self.callDeprecated(
+            (self.version, self.assertFailure),
+            self.failUnlessFailure,
+            ValueError,
+            self._boom)
+        self.callDeprecated(
+            (self.version, self.assertWarns),
+            self.failUnlessWarns,
+            warnings.warn,
+            "foo")
+        self.callDeprecated(
+            (self.version, self.assertIsInstance),
+            self.failUnlessIsInstance,
+            "s",
+            str)
+        self.callDeprecated(
+            (self.version, self.assertNotIsInstance),
+            self.failIfIsInstance,
+            "s",
+            int)
+
+    def test_assert_deprecations(self):
+        """
+        The C{assert*} test methods should have a single preferred spelling.
+
+        """
+
+        self.callDeprecated(
+            (self.version, self.assertFalse), self.assertNot, False)
+        self.callDeprecated(
+            (self.version, self.assertTrue), self.assert_, True)
+        self.callDeprecated(
+            (self.version, self.assertEqual), self.assertEquals, 1, 1)
+        self.callDeprecated(
+            (self.version, self.assertIs), self.assertIdentical, None, None)
+        self.callDeprecated(
+            (self.version, self.assertIsNot), self.assertNotIdentical, 1, 2)
+        self.callDeprecated(
+            (self.version, self.assertNotEqual), self.assertNotEquals, 1, 2)
+        self.callDeprecated(
+            (self.version, self.assertIn), self.assertSubstring, "s", "os")
+        self.callDeprecated(
+            (self.version, self.assertNotIn), self.assertNotSubstring, "s", "")
+        self.callDeprecated(
+            (self.version, self.assertNotAlmostEqual),
+            self.assertNotAlmostEquals,
+            .1,
+            1000)
+        self.callDeprecated(
+            (self.version, self.assertAlmostEqual),
+            self.assertAlmostEquals,
+            .1,
+            .1)
 
 
-    def test_failUnlessMatchesAssert(self):
-        """
-        The C{failUnless*} test methods are a subset of the C{assert*} test
-        methods.  This is intended to ensure that methods using the
-        I{failUnless} naming scheme are not added without corresponding methods
-        using the I{assert} naming scheme.  The I{assert} naming scheme is
-        preferred, and new I{assert}-prefixed methods may be added without
-        corresponding I{failUnless}-prefixed methods.
-        """
-        asserts = set(self._getAsserts())
-        failUnlesses = set(reflect.prefixedMethods(self, 'failUnless'))
-        self.assertEqual(
-            failUnlesses, asserts.intersection(failUnlesses))
-
-
-    def test_failIf_matches_assertNot(self):
-        asserts = reflect.prefixedMethods(unittest.TestCase, 'assertNot')
-        failIfs = reflect.prefixedMethods(unittest.TestCase, 'failIf')
-        self.assertEqual(sorted(asserts, key=self._name),
-                             sorted(failIfs, key=self._name))
-
-    def test_equalSpelling(self):
-        for name, value in vars(self).items():
-            if not callable(value):
-                continue
-            if name.endswith('Equal'):
-                self.failUnless(hasattr(self, name+'s'),
-                                "%s but no %ss" % (name, name))
-                self.assertEqual(value, getattr(self, name+'s'))
-            if name.endswith('Equals'):
-                self.failUnless(hasattr(self, name[:-1]),
-                                "%s but no %s" % (name, name[:-1]))
-                self.assertEqual(value, getattr(self, name[:-1]))
-
 
 class TestCallDeprecated(unittest.TestCase):
     """
diff --git a/twisted/trial/test/test_warning.py b/twisted/trial/test/test_warning.py
index ca4ccdd..09ad08a 100644
--- a/twisted/trial/test/test_warning.py
+++ b/twisted/trial/test/test_warning.py
@@ -179,7 +179,7 @@ class FlushWarningsTests(TestCase):
             warnings.simplefilter('error')
             case.run(result)
             self.assertEqual(len(result.errors), 1)
-            self.assertIdentical(result.errors[0][0], case)
+            self.assertIs(result.errors[0][0], case)
             result.errors[0][1].trap(CustomWarning)
         finally:
             warnings.filters[:] = originalWarnings
diff --git a/twisted/trial/unittest.py b/twisted/trial/unittest.py
index c6522fe..a51de5a 100644
--- a/twisted/trial/unittest.py
+++ b/twisted/trial/unittest.py
@@ -11,12 +11,14 @@ Maintainer: Jonathan Lange
 
 import doctest, inspect
 import os, warnings, sys, tempfile, gc, types
+from functools import wraps
 from pprint import pformat
 from dis import findlinestarts as _findlinestarts
 
 from twisted.internet import defer, utils
 from twisted.python import components, failure, log, monkey
-from twisted.python.deprecate import getDeprecationWarningString
+from twisted.python.deprecate import deprecated, getDeprecationWarningString
+from twisted.python.versions import Version
 
 from twisted.trial import itrial, reporter, util
 
@@ -182,6 +184,17 @@ def _collectWarnings(observeWarning, f, *args, **kwargs):
     return result
 
 
+def _deprecate(name, test_method):
+    """
+    An internal method used to deprecate the C{fail*} test methods. Don't use.
+
+    """
+
+    def fn(*args, **kwargs):
+        return test_method(*args, **kwargs)
+    fn.func_name = name
+    return deprecated(Version("Twisted", 13, 0, 0), test_method)(fn)
+
 
 class _Assertions(pyunit.TestCase, object):
     """
@@ -202,7 +215,7 @@ class _Assertions(pyunit.TestCase, object):
         """
         raise self.failureException(msg)
 
-    def failIf(self, condition, msg=None):
+    def assertFalse(self, condition, msg=None):
         """
         Fail the test if C{condition} evaluates to True.
 
@@ -211,9 +224,8 @@ class _Assertions(pyunit.TestCase, object):
         if condition:
             raise self.failureException(msg)
         return condition
-    assertNot = assertFalse = failUnlessFalse = failIf
 
-    def failUnless(self, condition, msg=None):
+    def assertTrue(self, condition, msg=None):
         """
         Fail the test if C{condition} evaluates to False.
 
@@ -222,9 +234,8 @@ class _Assertions(pyunit.TestCase, object):
         if not condition:
             raise self.failureException(msg)
         return condition
-    assert_ = assertTrue = failUnlessTrue = failUnless
 
-    def failUnlessRaises(self, exception, f, *args, **kwargs):
+    def assertRaises(self, exception, f, *args, **kwargs):
         """
         Fail the test unless calling the function C{f} with the given
         C{args} and C{kwargs} raises C{exception}. The failure will report
@@ -250,8 +261,6 @@ class _Assertions(pyunit.TestCase, object):
         else:
             raise self.failureException('%s not raised (%r returned)'
                                         % (exception.__name__, result))
-    assertRaises = failUnlessRaises
-
 
     def assertEqual(self, first, second, msg=''):
         """
@@ -269,10 +278,8 @@ class _Assertions(pyunit.TestCase, object):
                 '%snot equal:\na = %s\nb = %s\n'
                 % (msg, pformat(first), pformat(second)))
         return first
-    failUnlessEqual = failUnlessEquals = assertEquals = assertEqual
 
-
-    def failUnlessIdentical(self, first, second, msg=None):
+    def assertIs(self, first, second, msg=None):
         """
         Fail the test if C{first} is not C{second}.  This is an
         obect-identity-equality test, not an object equality
@@ -284,9 +291,8 @@ class _Assertions(pyunit.TestCase, object):
         if first is not second:
             raise self.failureException(msg or '%r is not %r' % (first, second))
         return first
-    assertIdentical = failUnlessIdentical
 
-    def failIfIdentical(self, first, second, msg=None):
+    def assertIsNot(self, first, second, msg=None):
         """
         Fail the test if C{first} is C{second}.  This is an
         obect-identity-equality test, not an object equality
@@ -298,9 +304,8 @@ class _Assertions(pyunit.TestCase, object):
         if first is second:
             raise self.failureException(msg or '%r is %r' % (first, second))
         return first
-    assertNotIdentical = failIfIdentical
 
-    def failIfEqual(self, first, second, msg=None):
+    def assertNotEqual(self, first, second, msg=None):
         """
         Fail the test if C{first} == C{second}.
 
@@ -310,9 +315,8 @@ class _Assertions(pyunit.TestCase, object):
         if not first != second:
             raise self.failureException(msg or '%r == %r' % (first, second))
         return first
-    assertNotEqual = assertNotEquals = failIfEquals = failIfEqual
 
-    def failUnlessIn(self, containee, container, msg=None):
+    def assertIn(self, containee, container, msg=None):
         """
         Fail the test if C{containee} is not found in C{container}.
 
@@ -326,9 +330,8 @@ class _Assertions(pyunit.TestCase, object):
             raise self.failureException(msg or "%r not in %r"
                                         % (containee, container))
         return containee
-    assertIn = failUnlessIn
 
-    def failIfIn(self, containee, container, msg=None):
+    def assertNotIn(self, containee, container, msg=None):
         """
         Fail the test if C{containee} is found in C{container}.
 
@@ -342,9 +345,8 @@ class _Assertions(pyunit.TestCase, object):
             raise self.failureException(msg or "%r in %r"
                                         % (containee, container))
         return containee
-    assertNotIn = failIfIn
 
-    def failIfAlmostEqual(self, first, second, places=7, msg=None):
+    def assertNotAlmostEqual(self, first, second, places=7, msg=None):
         """
         Fail if the two objects are equal as determined by their
         difference rounded to the given number of decimal places
@@ -360,10 +362,8 @@ class _Assertions(pyunit.TestCase, object):
             raise self.failureException(msg or '%r == %r within %r places'
                                         % (first, second, places))
         return first
-    assertNotAlmostEqual = assertNotAlmostEquals = failIfAlmostEqual
-    failIfAlmostEquals = failIfAlmostEqual
 
-    def failUnlessAlmostEqual(self, first, second, places=7, msg=None):
+    def assertAlmostEqual(self, first, second, places=7, msg=None):
         """
         Fail if the two objects are unequal as determined by their
         difference rounded to the given number of decimal places
@@ -379,10 +379,8 @@ class _Assertions(pyunit.TestCase, object):
             raise self.failureException(msg or '%r != %r within %r places'
                                         % (first, second, places))
         return first
-    assertAlmostEqual = assertAlmostEquals = failUnlessAlmostEqual
-    failUnlessAlmostEquals = failUnlessAlmostEqual
 
-    def failUnlessApproximates(self, first, second, tolerance, msg=None):
+    def assertApproximates(self, first, second, tolerance, msg=None):
         """
         Fail if C{first} - C{second} > C{tolerance}
 
@@ -392,9 +390,8 @@ class _Assertions(pyunit.TestCase, object):
         if abs(first - second) > tolerance:
             raise self.failureException(msg or "%s ~== %s" % (first, second))
         return first
-    assertApproximates = failUnlessApproximates
 
-    def failUnlessFailure(self, deferred, *expectedFailures):
+    def assertFailure(self, deferred, *expectedFailures):
         """
         Fail if C{deferred} does not errback with one of C{expectedFailures}.
         Returns the original Deferred with callbacks added. You will need
@@ -412,24 +409,9 @@ class _Assertions(pyunit.TestCase, object):
                           % (expectedFailures, str(failure)))
                 raise self.failureException(output)
         return deferred.addCallbacks(_cb, _eb)
-    assertFailure = failUnlessFailure
 
-    def failUnlessSubstring(self, substring, astring, msg=None):
-        """
-        Fail if C{substring} does not exist within C{astring}.
-        """
-        return self.failUnlessIn(substring, astring, msg)
-    assertSubstring = failUnlessSubstring
-
-    def failIfSubstring(self, substring, astring, msg=None):
-        """
-        Fail if C{astring} contains C{substring}.
-        """
-        return self.failIfIn(substring, astring, msg)
-    assertNotSubstring = failIfSubstring
-
-    def failUnlessWarns(self, category, message, filename, f,
-                       *args, **kwargs):
+    def assertWarns(self, category, message, filename, f,
+                   *args, **kwargs):
         """
         Fail if the given function doesn't generate the specified warning when
         called. It calls the function, checks the warning, and forwards the
@@ -459,7 +441,7 @@ class _Assertions(pyunit.TestCase, object):
         self.assertIdentical(first.category, category)
 
         # Use starts with because of .pyc/.pyo issues.
-        self.failUnless(
+        self.assertTrue(
             filename.startswith(first.filename),
             'Warning in %r, expected %r' % (first.filename, filename))
 
@@ -470,9 +452,8 @@ class _Assertions(pyunit.TestCase, object):
         # self.assertEqual(lineno, xxx)
 
         return result
-    assertWarns = failUnlessWarns
 
-    def failUnlessIsInstance(self, instance, classOrTuple, message=None):
+    def assertIsInstance(self, instance, classOrTuple, message=None):
         """
         Fail if C{instance} is not an instance of the given class or of
         one of the given classes.
@@ -494,9 +475,8 @@ class _Assertions(pyunit.TestCase, object):
                 suffix = ": " + message
             self.fail("%r is not an instance of %s%s" % (
                     instance, classOrTuple, suffix))
-    assertIsInstance = failUnlessIsInstance
 
-    def failIfIsInstance(self, instance, classOrTuple):
+    def assertNotIsInstance(self, instance, classOrTuple):
         """
         Fail if C{instance} is not an instance of the given class or of
         one of the given classes.
@@ -510,7 +490,46 @@ class _Assertions(pyunit.TestCase, object):
         """
         if isinstance(instance, classOrTuple):
             self.fail("%r is an instance of %s" % (instance, classOrTuple))
-    assertNotIsInstance = failIfIsInstance
+
+    assertNot = _deprecate("assertNot", assertFalse)
+    failIf = _deprecate("failIf", assertFalse)
+    failUnlessFalse = _deprecate("failUnlessFalse", assertFalse)
+    assert_ = _deprecate("assert_", assertTrue)
+    failUnless = _deprecate("failUnless", assertTrue)
+    failUnlessTrue = _deprecate("failUnlessTrue", assertTrue)
+    failUnlessRaises = _deprecate("failUnlessRaises", assertRaises)
+    failUnlessEqual = _deprecate("failUnlessEqual", assertEqual)
+    failUnlessEquals = _deprecate("failUnlessEquals", assertEqual)
+    assertEquals = _deprecate("assertEquals", assertEqual)
+    failUnlessIdentical = _deprecate("failUnlessIdentical", assertIs)
+    assertIdentical = _deprecate("assertIdentical", assertIs)
+    assertNotIdentical = _deprecate("assertNotIdentical", assertIsNot)
+    failIfIdentical = _deprecate("failIfIdentical", assertIsNot)
+    failIfEqual = _deprecate("failIfEqual", assertNotEqual)
+    assertNotEquals = _deprecate("assertNotEquals", assertNotEqual)
+    failIfEquals = _deprecate("failIfEquals", assertNotEqual)
+    failUnlessIn = _deprecate("failUnlessIn", assertIn)
+    assertSubstring = _deprecate("assertSubstring", assertIn)
+    failUnlessSubstring = _deprecate("failUnlessSubstring", assertIn)
+    failIfIn = _deprecate("failIfIn", assertNotIn)
+    assertNotSubstring = _deprecate("assertNotSubstring", assertNotIn)
+    failIfSubstring = _deprecate("failIfSubstring", assertNotIn)
+    failIfAlmostEqual = _deprecate("failIfAlmostEqual", assertNotAlmostEqual)
+    failIfAlmostEquals = _deprecate("failIfAlmostEquals", assertNotAlmostEqual)
+    assertNotAlmostEquals = _deprecate(
+        "assertNotAlmostEquals", assertNotAlmostEqual)
+    failUnlessAlmostEqual = _deprecate(
+        "failUnlessAlmostEqual", assertAlmostEqual)
+    failUnlessAlmostEquals = _deprecate(
+        "failUnlessAlmostEquals", assertAlmostEqual)
+    assertAlmostEquals = _deprecate("assertAlmostEquals", assertAlmostEqual)
+    failUnlessApproximates = _deprecate(
+        "failUnlessApproximates", assertApproximates)
+    failUnlessFailure = _deprecate("failUnlessFailure", assertFailure)
+    failUnlessWarns = _deprecate("failUnlessWarns", assertWarns)
+    failUnlessIsInstance = _deprecate("failUnlessIsInstance", assertIsInstance)
+    failIfIsInstance = _deprecate("failIfIsInstance", assertNotIsInstance)
+
 
 
 class _LogObserver(object):
