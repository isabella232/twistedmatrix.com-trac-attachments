Index: doc/core/howto/glossary.xhtml
===================================================================
--- doc/core/howto/glossary.xhtml	(revision 25139)
+++ doc/core/howto/glossary.xhtml	(working copy)
@@ -118,6 +118,11 @@
 <dd>A nifty set of tools for CVS, available at 
 <a href="http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/">http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/</a>.</dd>
 
+<dt><a name="Deferred"><code class="API" base="twisted.internet.defer">Daemon</code></a></dt>
+<dd>
+  A background process that does a job or handles client requests. <i>Daemon</i> 
+  is a Unix term; <i>service</i> is the NT equivalent.</dd>
+
 <dt><a name="Deferred"><code class="API" base="twisted.internet.defer">Deferred</code></a></dt>
 <dd>
   A instance of <code class="API">twisted.internet.defer.Deferred</code>, an
Index: doc/core/howto/tutorial/intro.xhtml
===================================================================
--- doc/core/howto/tutorial/intro.xhtml	(revision 25518)
+++ doc/core/howto/tutorial/intro.xhtml	(working copy)
@@ -20,24 +20,22 @@
 
 <pre class="shell">
 Login: nail                           Name: Nail Sharp
-Directory: /home/nail                 Shell: /usr/bin/zsh
+Directory: /home/nail                 Shell: /usr/bin/sh
 Last login Wed Mar 31 18:32 2004 (PST)
 New mail received Thu Apr  1 10:50 2004 (PST)
      Unread since Thu Apr  1 10:50 2004 (PST)
 No Plan.
 </pre>
 
-<p>If the target computer does not have the <code>fingerd</code> daemon 
-running you'll get a "Connection Refused" error. Paranoid sysadmins keep 
-<code>fingerd</code> off or limit the output to hinder crackers and harassers. 
-The above format is the standard <code>fingerd</code> default, but an 
-alternate implementation can output anything it wants, such as automated 
-responsibility status for everyone in an organization. You can also define 
-pseudo "users", which are essentially keywords.</p>
+<p>If the target computer does not have the <code>fingerd</code>
+<a href="glossary.xhtml#Daemon">daemon</a> running you'll get a "Connection
+Refused" error. Paranoid sysadmins keep <code>fingerd</code> off or limit the
+output to hinder crackers and harassers. The above format is the standard 
+<code>fingerd</code> default, but an alternate implementation can output
+anything it wants, such as automated responsibility status for everyone in an
+organization. You can also define pseudo "users", which are essentially
+keywords.</p>
 
-<p>(A <i>daemon</i> is a background process that does a job or handles client 
-requests. "daemon" is a Unix term; "service" is the NT equivalent.)</p>
-
 <p>By the end of this section of the tutorial, our finger server will answer
 TCP finger requests on port 1079, and will read data from the web.</p>
 
@@ -48,9 +46,9 @@
 <p>This example only runs the reactor. It will consume almost no CPU 
 resources. As it is not listening on any port, it can't respond to network 
 requests &mdash; nothing at all will happen until we interrupt the program. 
-(At this point if you run <code>finger nail</code> or <code>telnet localhost 
+At this point if you run <code>finger nail</code> or <code>telnet localhost 
 1079</code>, you'll get a "Connection refused" error since there's no daemon 
-running to respond.)  Not very useful, perhaps &mdash; but this is the skeleton 
+running to respond.  Not very useful, perhaps &mdash; but this is the skeleton 
 inside which the Twisted program will grow.
 </p>
 
@@ -64,9 +62,9 @@
 events and making scheduled calls to code.</p>
 
 <p>Note that there are actually several different reactors to choose from; 
-<code>from twisted.internet import reactor</code> returns the current reactor 
-insteance.  If you haven't chosen a reactor class yet, it automatically chooses
-the default class.  See the <a href="../reactor-basics.xhtml">Reactor Basics 
+<code>from twisted.internet import reactor</code> returns the current reactor. 
+If you haven't chosen a reactor class yet, it automatically chooses
+the default.  See the <a href="../reactor-basics.xhtml">Reactor Basics 
 HOWTO</a> for more information.
 
 <h2>Do Nothing</h2>
@@ -77,14 +75,13 @@
 reminder that eventually we want to run on port 79, the standard port for 
 finger servers.)  The specified factory, <code>FingerFactory</code>, is used 
 to handle incoming requests on that port.  Specifically, for each request, the 
-reactor looks up the factory's <code>protocol</code> attribute and 
-instantiates it, such that the <code>FingerProtocol</code> class ultimately 
-processes the request. Since the protocol defined here does not actually 
-respond to any events, connections to 1079 will be accepted, but the input 
-ignored.</p>
+reactor calls the factory's <code>buildProtocol</code> method, which in this case 
+causes <code>FingerProtocol</code> to be instantiated. Since the 
+protocol defined here does not actually respond to any events, connections to 
+1079 will be accepted, but the input ignored.</p>
 
 <p>A Factory is the proper place for data that you want to make available 
-to the protocol instances, since the protocol instances are garbage-collected 
+to the protocol instances, since the protocol instances are garbage collected 
 when the connection is closed.</p>
 
 
@@ -157,129 +154,29 @@
 <p>But, here we tweak it just for the hell of it. Yes, while the
 previous version worked, it did assume the result of getUser is
 always immediately available. But what if instead of an in-memory
-database, we would have to fetch result from a remote Oracle?  By using a
-Deferred, we can ensure that the CPU can be used for other tasks 
+database, we would have to fetch result from a remote Oracle server?  By using 
+a Deferred, we can ensure that the CPU can be used for other tasks 
 while the data is being retrieved.</p>
 
-<p>As described in the <a href="../defer.xhtml">Deferred HOWTO</a>, the basic 
-idea behind Deferreds is to keep the CPU active as much as possible.  If one 
-task is waiting on data, rather than have the CPU (and the program!) idle 
+<p>As described in the <a href="../defer.xhtml">Deferred HOWTO</a>, Deferreds
+allow a program to be driven by events.  For instance, if one task in a program
+is waiting on data, rather than have the CPU (and the program!) idly 
 waiting for that data (a process normally called 'blocking'), the program 
-performs other operations in the meantime, and waits for some signal that data 
-is ready to be processed before returning to that process.  (Other systems use 
-'threads' to get around the blocking problem, but Twisted does not use threads 
-for performance reasons.)</p>
+can perform other operations in the meantime, and waits for some signal that data 
+is ready to be processed before returning to that process.</p>
 
-<p>Deferreds require you to restructure your code.  Rather than simply calling 
-a slow function and then operating on the result, you divide both the slow 
-function and the calling routine into two parts: stuff to execute 
-now and stuff to execute later.  In both cases, the stuff to execute later 
-gets encapsulated in a new function.  Execution happens like this:</p>
+<p>In brief, the code in <code>FingerFactory</code> above creates a Deferred, 
+to which we start to attach <em>callbacks</em>.  The deferred action in 
+<code>FingerFactory</code> is actually a fast-running expression consisting 
+of one dictionary method, <code>get</code>. Since this action can execute 
+without delay, <code>FingerFactory.getUser</code> forwards it using 
+<code>defer.succeed</code>, meaning its return value will be passed immediately 
+to the first callback function, which turns out to be 
+<code>FingerProtocol.writeResponse</code>.   We've also defined an 
+<em>errback</em> (appropriately named <code>FingerProtocol.onError</code>) that 
+will be called instead of <code>writeResponse</code> if something goes 
+wrong.</p>
 
-<ol>
-
-<li>The calling routine calls the slow function.</li>
-
-<li>The slow function executes everything "before the wait".  Everything "after 
-the wait" goes into a new function, which we'll call the "Deferred action". The 
-slow function thus creates a Deferred, schedules a job to execute the deferred 
-action, and returns the Deferred.  A simple example:
-<pre class="python">
-from twisted.internet import reactor, defer
-def SLOW_FUNCTION(...)
-    d = defer.Deferred()
-    reactor.callLater(SECONDS_FLOAT, DEFERRED_ACTION, *args, **kw)
-    return d
-</pre>
-This code tells the reactor to call <code>DEFERRED_ACTION</code> after 
-<code>SECONDS_FLOAT</code>. The action will need access to the Deferred, so it 
-should be passed as an argument or be available as an instance variable.</li>
-
-<li>Instead of receiving the actual result, the routine that called the slow 
-function receives a Deferred instead, so it can't operate on the result 
-directly.  Instead it registers a callback function which will operate on the 
-result when it's ready.
-<pre class="python">
-d = SLOW_FUNCTION(...)
-d.addCallback(CALLBACK)
-</pre>
-The callback will be called with one argument: the result.  You can register
-multiple callbacks and they will be called in order, the result of one being
-passed to the next.  This allows generic functions to act as filters,
-similar to a pipeline in Unix or nested functions in Python.  The callbacks
-must fully dispose of the result &mdash; e.g., by writing it to the output 
-stream or saving it in an instance variable &mdash; because the reactor will 
-<b>throw the result away</b> after the last callback finishes.</li>
-
-<li>The calling routine can also register "errbacks", which are called if the 
-deferred action recognizes an error condition or a callback raises an 
-exception.  The first errback is called with a 
-<code>twisted.python.failure.Failure</code> instance. There's a complicated 
-interaction between callbacks and errbacks, which is diagrammed in the <a 
-href="../defer.xhtml#auto2">Deferred HOWTO</a>.  For simplicity:</li>
-
-<ol type="a">
-
-<li>Register exactly one errback (no more, no less) before registering any 
-callbacks.</li>
-
-<li>Have the errback return a string error message, which will hopefully be 
-logged to stderr.  Do not let the errback fall off the bottom (implicitly 
-returning 'None').</li>
-
-<li>If no callbacks get called but no error appears either, assume there's 
-an invisible error which isn't being logged.  See "Unhandled errors" in the 
-Deferred HOWTO.</li>
-
-</ol>
-
-<li>Thus, after <code>SECONDS_FLOAT</code>, the reactor calls
-<code>DEFERRED_ACTION(*args, **kw)</code>. If the result still isn't ready, 
-the action registers itself to be called again after another delay.  If the 
-result <i>is</i> ready, the action uses <code>d.callback(RESULT)</code> to pass it 
-to whoever should receive it.</li>
-
-<li>"Whoever should receive it" is the callbacks, which are called in 
-order.</li>
-
-<li>If the action detects an error, it calls 
-<code>d.errback(Failure_INSTANCE)</code> instead of <code>d.callback</code>. 
-The errbacks will be executed rather than the callbacks.</li></ol>
-
-<p>Now, consider how these principles are applied in the example. The deferred 
-action in <code>FingerFactory</code> is actually a fast-running expression 
-consisting of one dictionary method, <code>get</code>. Since this action can 
-execute without delay, <code>FingerFactory.getUser</code> forwards it using 
-<code>defer.succeed</code>.  This module function creates a Deferred, wraps 
-the result in it, and returns the Deferred, all in one step.</p>
-
-<p>The calling routine, <code>FingerProtocol.lineReceived</code>, then attaches 
-lambda functions as the callback and errback.  To put it another way:
-<pre class="python">
-class FingerProtocol(basic.LineReceiver):
-    return "Internal error in server"
-
-    def lineReceived(self, user): 
-        d = self.factory.getUser(user) 
-        d.addErrback(catchError) 
-             def writeValue(value): 
-                 self.transport.write(value+'\r\n') 
-                 self.transport.loseConnection()
-        d.addCallback(writeValue)
-</pre></p>
-
-<p>If you were using a function that <i>did</i> have to wait for the result, you 
-might use something like this instead:
-<pre class="python">
-from twisted.internet import reactor, defer
-def deferredAction(d):
-    if not RESULT_IS_READY:
-        reactor.callLater(2, deferredAction, d)
-        return
-    d.callback(RESULT)
-reactor.callLater(2, deferredAction, d)
-</pre></p>
-
 <h2>Run 'finger' Locally</h2>
 
 <a href="listings/finger/finger09.py" class="py-listing">finger09.py</a>
Index: doc/core/howto/tutorial/protocol.xhtml
===================================================================
--- doc/core/howto/tutorial/protocol.xhtml	(revision 25518)
+++ doc/core/howto/tutorial/protocol.xhtml	(working copy)
@@ -43,27 +43,6 @@
 <code base="API" class="twisted.application.servce">IServiceCollection</code>. 
 Both services are thus started with the application.</p>
 
-<p>The FingerSetterFactory is initialized with the FingerFactory instance so it 
-can access the <code>users</code> dictionary.  The followling factory is 
-equivalent (without the Python shortcuts):</p>
-<pre class="python">
-class FingerSetterFactory(protocol.ServerFactory):
-    def __init__(self, ff):
-        self.ff = ff
-    def setUser(self, user, value):
-        self.ff.users[user] = value
-</pre>
-
-<p>Likewise, FingerSetterProtocol.connectionLost as written is equivalent 
-to:</p>
-<pre class="python">
-def connectionLost(self, reason):
-    user = self.lines[0]
-    value = self.lines[1]
-    self.factory.setUser(user, value)
-</pre>
-
-
 <h2>Use Services to Make Dependencies Sane</h2>
 
 <p>The previous version had the setter poke at the innards of the
@@ -155,39 +134,8 @@
 <code base="API" class="twisted.web.resource">Resource</code> object with an 
 overridden 
 <code base="API" class="twisted.web.resource.Resource">getChild</code> 
-method.  (Here we're calling the finger output "Motd", for "Message of the 
-Day".)</p>
+method.
 
-<p>Here's a slightly simplified version of the MotdResource class:</p>
-<pre class="python">
-class MotDResource(resource.Resource):
-    def getChild(self, path, request):
-        """'path' is a string. 
-            'request' is a 'twisted.protocols.http.Request'.
-        """
-        user = path
-        value = self.users.get(user, 
-            "No such user.&lt;p/&gt;http://this.site/user")
-        contentType = "text/html"
-        value = cgi.excape(value)
-        contentType = cgi.escape(contentType)
-        output = "&lt;h1&gt;%s&lt;/h1&gt;&lt;p&gt;%s&lt;/p&gt;" % (value, contentType)
-        return static.Data(output)
-</pre>
-
-<p>(Note that in this case we would use <code>def getResource(self): return 
-MyResource()</code>.)</p>
-
-<p>It's also worth pointing out a small change made to 
-<code>FingerService._read</code> in this code: instead of only clearing out the 
-<code>users</code> dict when <code>FingerService</code> is instantiated 
-(with <code>self.users = {}</code>), we do it before each refresh, thus ensuring that 
-obsolete entries do not remain.  (If this was a multithreaded program, we 
-might want to go further and set up a lock to prevent another thread from 
-reading <code>users</code> while it is being populated, but there's no need 
-for that here.)</p>
-
-
 <a href="listings/finger/finger15.tac" class="py-listing">finger15.tac</a>
 
 
