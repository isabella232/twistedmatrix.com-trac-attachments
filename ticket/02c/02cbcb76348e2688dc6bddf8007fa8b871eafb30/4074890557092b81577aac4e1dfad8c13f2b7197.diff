Index: doc/core/howto/tutorial/intro.xhtml
===================================================================
--- doc/core/howto/tutorial/intro.xhtml	(revision 24967)
+++ doc/core/howto/tutorial/intro.xhtml	(working copy)
@@ -13,6 +13,28 @@
 <p>This is the first part of the Twisted tutorial <a
 href="index.xhtml">Twisted from Scratch, or The Evolution of Finger</a>.</p>
 
+<p>If you're not familiar with 'finger' it's probably because it's not used as
+much nowadays as it used to be. Basically, if you run <code>finger nail</code> 
+or <code>finger nail@example.com</code> the target computer spits out some 
+information about the user named <code>nail</code>. For instance:</p>
+
+<pre class="shell">
+Login: nail                           Name: Nail Sharp
+Directory: /home/nail                 Shell: /usr/bin/sh
+Last login Wed Mar 31 18:32 2004 (PST)
+New mail received Thu Apr  1 10:50 2004 (PST)
+     Unread since Thu Apr  1 10:50 2004 (PST)
+No Plan.
+</pre>
+
+<p>If the target computer does not have the <code>fingerd</code> daemon 
+running you'll get a "Connection Refused" error. Paranoid sysadmins keep 
+<code>fingerd</code> off or limit the output to hinder crackers and harassers. 
+The above format is the standard <code>fingerd</code> default, but an 
+alternate implementation can output anything it wants, such as automated 
+responsibility status for everyone in an organization. You can also define 
+pseudo "users", which are essentially keywords.</p>
+
 <p>By the end of this section of the tutorial, our finger server will answer
 TCP finger requests on port 1079, and will read data from the web.</p>
 
@@ -20,10 +42,13 @@
 
 <a href="listings/finger/finger01.py" class="py-listing">finger01.py</a>
 
-<p>This example only runs the reactor. Nothing at all will happen until we
-interrupt the program.  It will consume almost no CPU resources. Not very
-useful, perhaps &mdash; but this is the skeleton inside which the Twisted program
-will grow.
+<p>This example only runs the reactor. It will consume almost no CPU 
+resources. As it is not listening on any port, it can't respond to network 
+requests &mdash; nothing at all will happen until we interrupt the program. 
+At this point if you run <code>finger nail</code> or <code>telnet localhost 
+1079</code>, you'll get a "Connection refused" error since there's no daemon 
+running to respond.  Not very useful, perhaps &mdash; but this is the skeleton 
+inside which the Twisted program will grow.
 </p>
 
 <h3>The Reactor</h3>
@@ -33,33 +58,44 @@
 is Twisted's main event loop, similar to the main loop in other toolkits available
 in Python (Qt, wx, and Gtk). There is exactly one reactor in any running Twisted
 application. Once started it loops over and over again, responding to network
-events, and making scheduled calls to code.</p>
+events and making scheduled calls to code.</p>
 
+<p>Note that there are actually several different reactors to choose from; 
+<code>from twisted.internet import reactor</code> returns the current reactor. 
+If you haven't chosen a reactor class yet, it automatically chooses
+the default.  See the <a href="../reactor-basics.xhtml">Reactor Basics 
+HOWTO</a> for more information.
+
 <h2>Do Nothing</h2>
 
 <a href="listings/finger/finger02.py" class="py-listing">finger02.py</a>
 
-<p>Here, we start listening on port 1079. The 1079 is a reminder that
-eventually, we want to run on port 79, the standard port for finger servers.
-We define a protocol which does not respond to any events. Thus, connections to
+<p>Here, <code>reactor.listenTCP</code> opens port 1079. (The number 1079 is a 
+reminder that eventually we want to run on port 79, the standard port for 
+finger servers.)  The specified factory, <code>FingerFactory</code>, is used 
+to handle incoming requests on that port.  Specifically, for each request, the 
+reactor calls the factory's <code>buildProtocol</code> method, which in this case 
+causes <code>FingerProtocol</code> to be instantiated. Since the 
+protocol defined here does not actually respond to any events, connections to 
 1079 will be accepted, but the input ignored.</p>
 
-<p>A new Protocol instance is created for every connection and defines what you
-want to do in response to events. A Factory produces new Protocol instances,
-and is the proper place for data that you want to make available to the protocol
-instances, since they are garbage collected when the connection is closed.</p>
+<p>A Factory is the proper place for data that you want to make available 
+to the protocol instances, since the protocol instances are garbage collected 
+when the connection is closed.</p>
 
+
 <h2>Drop Connections</h2>
 
 <a href="listings/finger/finger03.py" class="py-listing">finger03.py</a>
 
-<p>Here we add to the protocol the ability to respond to the event of beginning
-a connection &mdash; by terminating it.  Perhaps not an interesting behavior, but
-it is already close to behaving according to the letter of the protocol. After
-all, there is no requirement to send any data to the remote connection in the
-standard.  The only problem, as far as the standard is concerned, is that we
-terminate the connection too soon. A client which is slow enough will see his
-send() of the username result in an error.</p>
+<p>Here we add to the protocol the ability to respond to the event of 
+beginning a connection &mdash; by terminating it.  Perhaps not an interesting 
+behavior, but it is already close to behaving according to the letter of the 
+standard finger protocol. After all, there is no requirement to send any data 
+to the remote connection in the standard.  The only problem, as far as the 
+standard is concerned, is that we terminate the connection too soon. A client 
+which is slow enough will see his send() of the username result in an 
+error.</p>
 
 
 <h2>Read Username, Drop Connections</h2>
@@ -82,8 +118,8 @@
 
 <p>Finally, a useful version. Granted, the usefulness is somewhat
 limited by the fact that this version only prints out a <q>No such user</q>
-message. It could be used for devastating effect in honey-pots,
-of course.</p>
+message. It could be used for devastating effect in honey-pots (decoy 
+servers), of course.</p>
 
 
 <h2>Output From Empty Factory</h2>
@@ -116,32 +152,67 @@
 
 <p>But, here we tweak it just for the hell of it. Yes, while the
 previous version worked, it did assume the result of getUser is
-always immediately available. But what if instead of an in memory
-database, we would have to fetch result from a remote Oracle?
-Or from the web? Or, or...</p>
+always immediately available. But what if instead of an in-memory
+database, we would have to fetch result from a remote Oracle server?  By using 
+a Deferred, we can ensure that the CPU can be used for other tasks 
+while the data is being retrieved.</p>
 
+<p>As described in the <a href="../defer.xhtml">Deferred HOWTO</a>, the basic 
+idea behind Deferreds is to permit the various parts of one's program to use 
+the CPU more than they might be able to otherwise.  For instance, if one 
+task is waiting on data, rather than have the CPU (and the program!) idly 
+waiting for that data (a process normally called 'blocking'), the program 
+performs other operations in the meantime, and waits for some signal that data 
+is ready to be processed before returning to that process.  (Other systems use 
+threads to get around the blocking problem, but Twisted does not use threads 
+for performance reasons.)</p>
 
+<p>In brief, the code in <code>FingerFactory</code> above creates a Deferred, 
+to which we start to attach <em>callbacks</em>.  The deferred action in 
+<code>FingerFactory</code> is actually a fast-running expression consisting 
+of one dictionary method, <code>get</code>. Since this action can execute 
+without delay, <code>FingerFactory.getUser</code> forwards it using 
+<code>defer.succeed</code>, meaning its return value will be passed immediately 
+to the first callback function, which turns out to be 
+<code>FingerProtocol.writeResponse</code>.   We've also defined an 
+<em>errback</em> (appropriately named <code>FingerProtocol.onError</code>) that 
+will be called instead of <code>writeResponse</code> if something goes 
+wrong.</p>
+
 <h2>Run 'finger' Locally</h2>
 
 <a href="listings/finger/finger09.py" class="py-listing">finger09.py</a>
 
-<p>...from running a local command? Yes, this version runs
-finger locally with whatever arguments it is given, and returns the
-standard output. This is probably insecure, so you probably don't
-want a real server to do this without a lot more validation of the
-user input. This will do exactly what the standard version
-of the finger server does.</p>
+<p>This example also makes use of a Deferred. 
+<code>twisted.internet.utils.getProcessOutput</code> is basically a 
+non-blocking counterpart to Python's <code>commands.getOutput</code>: it runs 
+a shell command (<code>finger</code>, in this case) and captures its standard 
+output.  However, <code>getProcessOutput</code> returns a 
+Deferred instead of the output itself.  Since 
+<code>FingerProtocol.lineReceived</code> is already expecting a Deferred, it 
+doesn't need to be changed, and it returns the standard output as the finger 
+result.</p>
 
+<p>Note that in this case the shell's built-in <code>finger</code> command is 
+simply run with whatever arguments it is given. This is probably insecure, so 
+you probably don't want a real server to do this without a lot more validation 
+of the user input. This will do exactly what the standard version of the 
+finger server does.</p>
+
 <h2>Read Status from the Web</h2>
 
 <p>The web. That invention which has infiltrated homes around the
-world finally gets through to our invention. Here we use the built-in
-Twisted web client, which also returns a deferred. Finally, we manage
-to have examples of three different database back-ends, which do
-not change the protocol class. In fact, we will not have to change
-the protocol again until the end of this tutorial: we have achieved,
-here, one truly usable class.</p>
+world finally gets through to our invention. In this case we use the built-in
+Twisted web client via <code>twisted.web.client.getPage</code>, a non-blocking 
+counterpart to Python's <code>urllib2.urlopen(URL).read()</code>.  Like
+<code>getProcessOutput</code> it captures the output and returns a deferred, 
+and can thus be used as a drop-in replacement.</p>
 
+Thus, we have examples of three different database back-ends, none of which 
+change the protocol class. In fact, we will not have to change the protocol 
+again until the end of this tutorial: we have achieved, here, one truly usable 
+class.</p>
+
 <a href="listings/finger/finger10.py" class="py-listing">finger10.py</a>
 
 <h2>Use Application</h2>
@@ -160,15 +231,14 @@
 <h2>twistd</h2>
 
 <p>This is how to run <q>Twisted Applications</q> &mdash; files which define an
-'application'. twistd (TWISTed Daemonizer) does everything a daemon
-can be expected to &mdash; shuts down stdin/stdout/stderr, disconnects
-from the terminal and can even change runtime directory, or even
-the root filesystems. In short, it does everything so the Twisted
-application developer can concentrate on writing his networking code.
-</p>
+'application'. A daemon is expected to adhere to certain behavioral standards 
+so that standard tools can stop/start/query them.  If a Twisted application is 
+run via twistd, the TWISTed Daemonizer, all this behavioral stuff will be handled 
+for you. twistd does everything a daemon can be expected to &mdash; shuts down 
+stdin/stdout/stderr, disconnects from the terminal and can even change runtime 
+directory, or even the root filesystems. In short, it does everything so the Twisted
+application developer can concentrate on writing his networking code.</p>
 
-<a href="listings/finger/finger11.tac" class="py-listing">finger11.tac</a>
-
 <pre class="shell">
 root% twistd -ny finger11.tac # just like before
 root% twistd -y finger11.tac # daemonize, keep pid in twistd.pid
@@ -180,5 +250,26 @@
 root% twistd -y finger11.tac --syslog --prefix=twistedfinger # use given prefix
 </pre>
 
+<p>There are several ways to tell twistd where your application is; here we show 
+how it is done using the <code>application</code> attribute in a Python module.</p>
+
+<a href="listings/finger/finger11.tac" class="py-listing">finger11.tac</a>
+
+<p>Instead of using <code>reactor.listenTCP</code> as in the above examples, 
+here we are using its application-aware counterpart, 
+<code>internet.TCPServer</code>.  Notice that when it is instantiated, the
+application object itself does not reference either the protocol or the 
+factory &mdash; twistd just assumes that the TCPServers that have been started 
+are the ones that should run.  The application object is more useful for 
+returning an object that supports the <code class="API" base="twisted.application.service">IService</code>, 
+<code class="API" base="twisted.application.service">IServiceCollection</code>, 
+<code class="API" base="twisted.application.service">IProcess</code>, and 
+<code class="API" base="twisted.persisted">sob.IPersistable</code> interfaces 
+with the given parameters; we'll be seeing these in the next part of the 
+tutorial. As the parent of the TCPServer we opened, the application lets us manage the TCPServer.</p>
+
+<p>With the daemon running on the standard finger port, you can test it with the 
+standard finger command: <code>finger moshez</code>.</p>
+
 </body>
-</html>
+</html>
\ No newline at end of file
Index: doc/core/howto/tutorial/protocol.xhtml
===================================================================
--- doc/core/howto/tutorial/protocol.xhtml	(revision 24967)
+++ doc/core/howto/tutorial/protocol.xhtml	(working copy)
@@ -19,7 +19,7 @@
 
 <h2>Setting Message By Local Users</h2>
 
-<p>Now that port 1079 is free, maybe we can run on it a different
+<p>Now that port 1079 is free, maybe we can use it with a different
 server, one which will let people set their messages. It does
 no access control, so anyone who can login to the machine can
 set any message. We assume this is the desired behavior in
@@ -35,25 +35,59 @@
 
 <a href="listings/finger/finger12.tac" class="py-listing">finger12.tac</a>
 
+<p>This program has two protocol-factory-TCPServer pairs, which are both child 
+services of the application.  Specifically, the 
+<code base="API" class="twisted.application.service.Service">setServiceParent</code> 
+method is used to define the two TCPServer services as children of 
+<code>application</code>, which implements
+<code base="API" class="twisted.application.servce">IServiceCollection</code>. 
+Both services are thus started with the application.</p>
 
 <h2>Use Services to Make Dependencies Sane</h2>
 
 <p>The previous version had the setter poke at the innards of the
-finger factory. It's usually not a good idea: this version makes
+finger factory. This strategy is usually not a good idea: this version makes
 both factories symmetric by making them both look at a single
 object. Services are useful for when an object is needed which is
-not related to a specific network server. Here, we moved all responsibility
-for manufacturing factories into the service. Note that we stopped
-subclassing: the service simply puts useful methods and attributes
-inside the factories. We are getting better at protocol design:
-none of our protocol classes had to be changed, and neither will
-have to change until the end of the tutorial.</p>
+not related to a specific network server. Here, we define a common service 
+class with methods that will create factories on the fly. The service 
+also contains methods the factories will depend on.</p>
 
+<p>The factory-creation methods, <code>getFingerFactory</code> and 
+<code>getFingerSetterFactory</code>, follow this pattern:</p>
+
+<ol>
+
+<li>Instantiate a generic server factory, 
+<code>twisted.internet.protocol.ServerFactory</code>.</li>
+
+<li>Set the protocol class, just like our factory class would have.</li>
+
+<li>Copy a service method to the factory as a function attribute.  The 
+function won't have access to the factory's <code>self</code>, but that's OK 
+because as a bound method it has access to the service's <code>self</code>, 
+which is what it needs.  For <code>getUser</code>, a custom method defined in 
+the service gets copied.  For <code>setUser</code>, a standard method of the 
+<code>users</code> dictionary is copied.</li>
+
+</ol>
+
+<p>Thus, we stopped subclassing: the service simply puts useful methods and 
+attributes inside the factories. We are getting better at protocol design:
+none of our protocol classes had to be changed, and neither will have to 
+change until the end of the tutorial.</p>
+
+<p>As an application 
+<code class="API" base="twisted.application.service">service</code> , this new 
+finger service implements the 
+<code class="API" base="twisted.application.service">IService</code> interface 
+and can be started and stopped in a standardized manner.  We'll make use of 
+this in the next example.</p>
+
 <a href="listings/finger/finger13.tac" class="py-listing">finger13.tac</a>
 
 
 
-
 <h2>Read Status File</h2>
 
 <p>This version shows how, instead of just letting users set their
@@ -65,16 +99,43 @@
 
 <a href="listings/finger/finger14.tac" class="py-listing">finger14.tac</a>
 
+<p>Since this verison is reading data from a file (and refreshing the data 
+every 30 seconds), there is no <code>FingerSetterFactory</code> and thus 
+nothing listening on port 1079.</p>
 
+<p>Here we override the standard 
+<code class="API" base="twisted.application.service.Service">startService</code> 
+and 
+<code class="API" base="twisted.application.service.Service">stopService</code> 
+hooks in the Finger service, which is set up as a child service of 
+the application in the last line of the code. <code>startService</code> calls 
+<code>_read</code>, the function responsible for reading the data; 
+<code>reactor.callLater</code> is then used to schedule it to run again after 
+thirty seconds every time it is called. <code>reactor.callLater</code> returns 
+an object that lets us cancel the scheduled run in <code>stopService</code> 
+using its <code>cancel</code> method.</p>
+
 <h2>Announce on Web, Too</h2>
 
 <p>The same kind of service can also produce things useful for
 other protocols. For example, in twisted.web, the factory
-itself (the site) is almost never subclassed -- instead,
-it is given a resource, which represents the tree of resources
-available via URLs. That hierarchy is navigated by site,
-and overriding it dynamically is possible with getChild.</p>
+itself (<code base="API" class="twisted.web.server">Site</code>) is almost 
+never subclassed &mdash; instead, it is given a resource, which represents the tree 
+of resources available via URLs. That hierarchy is navigated by 
+<code base="API" class="twisted.web.server">Site</code>
+and overriding it dynamically is possible with 
+<code base="API" class="twisted.web.resource.Resource">getChild</code>.</p>
 
+<p>To integrate this into the Finger application (just because we can), we set 
+up a new TCPServer that calls the 
+<code base="API" class="twisted.web.server">Site</code> factory and retrieves 
+resources via a new function of <code>FingerService</code> named 
+<code>getResource</code>.  This function specifically returns a 
+<code base="API" class="twisted.web.resource">Resource</code> object with an 
+overridden 
+<code base="API" class="twisted.web.resource.Resource">getChild</code> 
+method.
+
 <a href="listings/finger/finger15.tac" class="py-listing">finger15.tac</a>
 
 
@@ -89,7 +150,17 @@
 
 <a href="listings/finger/finger16.tac" class="py-listing">finger16.tac</a>
 
+<p><code>FingerService</code> now has another new function, 
+<code>getIRCbot</code>, which returns the 
+<code>ReconnectingClientFactory</code>.  This factory in turn will instantiate 
+the <code>IRCReplyBot</code> protocol.  The IRCBot is configured in the last 
+line to connect to <code>irc.freenode.org</code> with a nickname of 
+<code>fingerbot</code>.</p>
 
+<p>By overriding <code>irc.IRCClient.connectionMade</code>, 
+<code>IRCReplyBot</code> can access the <code>nickname</code> attribute of the 
+factory that instantiated it.</p>
+
 <h2>Add XML-RPC Support</h2>
 
 <p>In Twisted, XML-RPC support is handled just as though it was
@@ -101,10 +172,11 @@
 
 <a href="listings/finger/finger17.tac" class="py-listing">finger17.tac</a>
 
-<p>A simple client to test the XMLRPC finger:</p>
+<p>Instead of a web browser, we can test the XMLRPC finger using a simple 
+client based on Python's built-in <code>xmlrpclib</code>, which will access 
+the resource we've made available at <code>localhost/RPC2</code>.</p>
 
 <a href="listings/finger/fingerXRclient.py" class="py-listing">fingerXRclient.py</a>
 
-
 </body>
 </html>
