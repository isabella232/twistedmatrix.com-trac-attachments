Index: doc/core/howto/tutorial/intro.xhtml
===================================================================
--- doc/core/howto/tutorial/intro.xhtml	(revision 24967)
+++ doc/core/howto/tutorial/intro.xhtml	(working copy)
@@ -13,6 +13,31 @@
 <p>This is the first part of the Twisted tutorial <a
 href="index.xhtml">Twisted from Scratch, or The Evolution of Finger</a>.</p>
 
+<p>If you're not familiar with 'finger' it's probably because it's not used as
+much nowadays as it used to be. Basically, if you run <code>finger nail</code> 
+or <code>finger nail@example.com</code> the target computer spits out some 
+information about the user named <code>nail</code>. For instance:</p>
+
+<pre class="shell">
+Login: nail                           Name: Nail Sharp
+Directory: /home/nail                 Shell: /usr/bin/zsh
+Last login Wed Mar 31 18:32 2004 (PST)
+New mail received Thu Apr  1 10:50 2004 (PST)
+     Unread since Thu Apr  1 10:50 2004 (PST)
+No Plan.
+</pre>
+
+<p>If the target computer does not have the <code>fingerd</code> daemon 
+running you'll get a "Connection Refused" error. Paranoid sysadmins keep 
+<code>fingerd</code> off or limit the output to hinder crackers and harassers. 
+The above format is the standard <code>fingerd</code> default, but an 
+alternate implementation can output anything it wants, such as automated 
+responsibility status for everyone in an organization. You can also define 
+pseudo "users", which are essentially keywords.</p>
+
+<p>(A <i>daemon</i> is a background process that does a job or handles client 
+requests. "daemon" is a Unix term; "service" is the NT equivalent.)</p>
+
 <p>By the end of this section of the tutorial, our finger server will answer
 TCP finger requests on port 1079, and will read data from the web.</p>
 
@@ -20,10 +45,13 @@
 
 <a href="listings/finger/finger01.py" class="py-listing">finger01.py</a>
 
-<p>This example only runs the reactor. Nothing at all will happen until we
-interrupt the program.  It will consume almost no CPU resources. Not very
-useful, perhaps &mdash; but this is the skeleton inside which the Twisted program
-will grow.
+<p>This example only runs the reactor. It will consume almost no CPU 
+resources. As it is not listening on any port, it can't respond to network 
+requests &mdash; nothing at all will happen until we interrupt the program. 
+(At this point if you run <code>finger nail</code> or <code>telnet localhost 
+1079</code>, you'll get a "Connection refused" error since there's no daemon 
+running to respond.)  Not very useful, perhaps &mdash; but this is the skeleton 
+inside which the Twisted program will grow.
 </p>
 
 <h3>The Reactor</h3>
@@ -33,33 +61,45 @@
 is Twisted's main event loop, similar to the main loop in other toolkits available
 in Python (Qt, wx, and Gtk). There is exactly one reactor in any running Twisted
 application. Once started it loops over and over again, responding to network
-events, and making scheduled calls to code.</p>
+events and making scheduled calls to code.</p>
 
+<p>Note that there are actually several different reactors to choose from; 
+<code>from twisted.internet import reactor</code> returns the current reactor 
+insteance.  If you haven't chosen a reactor class yet, it automatically chooses
+the default class.  See the <a href="../reactor-basics.xhtml">Reactor Basics 
+HOWTO</a> for more information.
+
 <h2>Do Nothing</h2>
 
 <a href="listings/finger/finger02.py" class="py-listing">finger02.py</a>
 
-<p>Here, we start listening on port 1079. The 1079 is a reminder that
-eventually, we want to run on port 79, the standard port for finger servers.
-We define a protocol which does not respond to any events. Thus, connections to
-1079 will be accepted, but the input ignored.</p>
+<p>Here, <code>reactor.listenTCP</code> opens port 1079. (The number 1079 is a 
+reminder that eventually we want to run on port 79, the standard port for 
+finger servers.)  The specified factory, <code>FingerFactory</code>, is used 
+to handle incoming requests on that port.  Specifically, for each request, the 
+reactor looks up the factory's <code>protocol</code> attribute and 
+instantiates it, such that the <code>FingerProtocol</code> class ultimately 
+processes the request. Since the protocol defined here does not actually 
+respond to any events, connections to 1079 will be accepted, but the input 
+ignored.</p>
 
-<p>A new Protocol instance is created for every connection and defines what you
-want to do in response to events. A Factory produces new Protocol instances,
-and is the proper place for data that you want to make available to the protocol
-instances, since they are garbage collected when the connection is closed.</p>
+<p>A Factory is the proper place for data that you want to make available 
+to the protocol instances, since the protocol instances are garbage-collected 
+when the connection is closed.</p>
 
+
 <h2>Drop Connections</h2>
 
 <a href="listings/finger/finger03.py" class="py-listing">finger03.py</a>
 
-<p>Here we add to the protocol the ability to respond to the event of beginning
-a connection &mdash; by terminating it.  Perhaps not an interesting behavior, but
-it is already close to behaving according to the letter of the protocol. After
-all, there is no requirement to send any data to the remote connection in the
-standard.  The only problem, as far as the standard is concerned, is that we
-terminate the connection too soon. A client which is slow enough will see his
-send() of the username result in an error.</p>
+<p>Here we add to the protocol the ability to respond to the event of 
+beginning a connection &mdash; by terminating it.  Perhaps not an interesting 
+behavior, but it is already close to behaving according to the letter of the 
+standard finger protocol. After all, there is no requirement to send any data 
+to the remote connection in the standard.  The only problem, as far as the 
+standard is concerned, is that we terminate the connection too soon. A client 
+which is slow enough will see his send() of the username result in an 
+error.</p>
 
 
 <h2>Read Username, Drop Connections</h2>
@@ -82,8 +122,8 @@
 
 <p>Finally, a useful version. Granted, the usefulness is somewhat
 limited by the fact that this version only prints out a <q>No such user</q>
-message. It could be used for devastating effect in honey-pots,
-of course.</p>
+message. It could be used for devastating effect in honey-pots (decoy 
+servers), of course.</p>
 
 
 <h2>Output From Empty Factory</h2>
@@ -116,32 +156,164 @@
 
 <p>But, here we tweak it just for the hell of it. Yes, while the
 previous version worked, it did assume the result of getUser is
-always immediately available. But what if instead of an in memory
-database, we would have to fetch result from a remote Oracle?
-Or from the web? Or, or...</p>
+always immediately available. But what if instead of an in-memory
+database, we would have to fetch result from a remote Oracle?  By using a
+Deferred, we can ensure that the CPU can be used for other tasks 
+while the data is being retrieved.</p>
 
+<p>As described in the <a href="../defer.xhtml">Deferred HOWTO</a>, the basic 
+idea behind Deferreds is to keep the CPU active as much as possible.  If one 
+task is waiting on data, rather than have the CPU (and the program!) idle 
+waiting for that data (a process normally called 'blocking'), the program 
+performs other operations in the meantime, and waits for some signal that data 
+is ready to be processed before returning to that process.  (Other systems use 
+'threads' to get around the blocking problem, but Twisted does not use threads 
+for performance reasons.)</p>
 
+<p>Deferreds require you to restructure your code.  Rather than simply calling 
+a slow function and then operating on the result, you divide both the slow 
+function and the calling routine into two parts: stuff to execute 
+now and stuff to execute later.  In both cases, the stuff to execute later 
+gets encapsulated in a new function.  Execution happens like this:</p>
+
+<ol>
+
+<li>The calling routine calls the slow function.</li>
+
+<li>The slow function executes everything "before the wait".  Everything "after 
+the wait" goes into a new function, which we'll call the "Deferred action". The 
+slow function thus creates a Deferred, schedules a job to execute the deferred 
+action, and returns the Deferred.  A simple example:
+<pre class="python">
+from twisted.internet import reactor, defer
+def SLOW_FUNCTION(...)
+    d = defer.Deferred()
+    reactor.callLater(SECONDS_FLOAT, DEFERRED_ACTION, *args, **kw)
+    return d
+</pre>
+This code tells the reactor to call <code>DEFERRED_ACTION</code> after 
+<code>SECONDS_FLOAT</code>. The action will need access to the Deferred, so it 
+should be passed as an argument or be available as an instance variable.</li>
+
+<li>Instead of receiving the actual result, the routine that called the slow 
+function receives a Deferred instead, so it can't operate on the result 
+directly.  Instead it registers a callback function which will operate on the 
+result when it's ready.
+<pre class="python">
+d = SLOW_FUNCTION(...)
+d.addCallback(CALLBACK)
+</pre>
+The callback will be called with one argument: the result.  You can register
+multiple callbacks and they will be called in order, the result of one being
+passed to the next.  This allows generic functions to act as filters,
+similar to a pipeline in Unix or nested functions in Python.  The callbacks
+must fully dispose of the result &mdash; e.g., by writing it to the output 
+stream or saving it in an instance variable &mdash; because the reactor will 
+<b>throw the result away</b> after the last callback finishes.</li>
+
+<li>The calling routine can also register "errbacks", which are called if the 
+deferred action recognizes an error condition or a callback raises an 
+exception.  The first errback is called with a 
+<code>twisted.python.failure.Failure</code> instance. There's a complicated 
+interaction between callbacks and errbacks, which is diagrammed in the <a 
+href="../defer.xhtml#auto2">Deferred HOWTO</a>.  For simplicity:</li>
+
+<ol type="a">
+
+<li>Register exactly one errback (no more, no less) before registering any 
+callbacks.</li>
+
+<li>Have the errback return a string error message, which will hopefully be 
+logged to stderr.  Do not let the errback fall off the bottom (implicitly 
+returning 'None').</li>
+
+<li>If no callbacks get called but no error appears either, assume there's 
+an invisible error which isn't being logged.  See "Unhandled errors" in the 
+Deferred HOWTO.</li>
+
+</ol>
+
+<li>Thus, after <code>SECONDS_FLOAT</code>, the reactor calls
+<code>DEFERRED_ACTION(*args, **kw)</code>. If the result still isn't ready, 
+the action registers itself to be called again after another delay.  If the 
+result <i>is</i> ready, the action uses <code>d.callback(RESULT)</code> to pass it 
+to whoever should receive it.</li>
+
+<li>"Whoever should receive it" is the callbacks, which are called in 
+order.</li>
+
+<li>If the action detects an error, it calls 
+<code>d.errback(Failure_INSTANCE)</code> instead of <code>d.callback</code>. 
+The errbacks will be executed rather than the callbacks.</li></ol>
+
+<p>Now, consider how these principles are applied in the example. The deferred 
+action in <code>FingerFactory</code> is actually a fast-running expression 
+consisting of one dictionary method, <code>get</code>. Since this action can 
+execute without delay, <code>FingerFactory.getUser</code> forwards it using 
+<code>defer.succeed</code>.  This module function creates a Deferred, wraps 
+the result in it, and returns the Deferred, all in one step.</p>
+
+<p>The calling routine, <code>FingerProtocol.lineReceived</code>, then attaches 
+lambda functions as the callback and errback.  To put it another way:
+<pre class="python">
+class FingerProtocol(basic.LineReceiver):
+    return "Internal error in server"
+
+    def lineReceived(self, user): 
+        d = self.factory.getUser(user) 
+        d.addErrback(catchError) 
+             def writeValue(value): 
+                 self.transport.write(value+'\r\n') 
+                 self.transport.loseConnection()
+        d.addCallback(writeValue)
+</pre></p>
+
+<p>If you were using a function that <i>did</i> have to wait for the result, you 
+might use something like this instead:
+<pre class="python">
+from twisted.internet import reactor, defer
+def deferredAction(d):
+    if not RESULT_IS_READY:
+        reactor.callLater(2, deferredAction, d)
+        return
+    d.callback(RESULT)
+reactor.callLater(2, deferredAction, d)
+</pre></p>
+
 <h2>Run 'finger' Locally</h2>
 
 <a href="listings/finger/finger09.py" class="py-listing">finger09.py</a>
 
-<p>...from running a local command? Yes, this version runs
-finger locally with whatever arguments it is given, and returns the
-standard output. This is probably insecure, so you probably don't
-want a real server to do this without a lot more validation of the
-user input. This will do exactly what the standard version
-of the finger server does.</p>
+<p>This example also makes use of a Deferred. 
+<code>twisted.internet.utils.getProcessOutput</code> is basically a 
+non-blocking counterpart to Python's <code>commands.getOutput</code>: it runs 
+a shell command (<code>finger</code>, in this case) and captures its standard 
+output.  However, <code>getProcessOutput</code> returns a 
+Deferred instead of the output itself.  Since 
+<code>FingerProtocol.lineReceived</code> is already expecting a Deferred, it 
+doesn't need to be changed, and it returns the standard output as the finger 
+result.</p>
 
+<p>Note that in this case the shell's built-in <code>finger</code> command is 
+simply run with whatever arguments it is given. This is probably insecure, so 
+you probably don't want a real server to do this without a lot more validation 
+of the user input. This will do exactly what the standard version of the 
+finger server does.</p>
+
 <h2>Read Status from the Web</h2>
 
 <p>The web. That invention which has infiltrated homes around the
-world finally gets through to our invention. Here we use the built-in
-Twisted web client, which also returns a deferred. Finally, we manage
-to have examples of three different database back-ends, which do
-not change the protocol class. In fact, we will not have to change
-the protocol again until the end of this tutorial: we have achieved,
-here, one truly usable class.</p>
+world finally gets through to our invention. In this case we use the built-in
+Twisted web client via <code>twisted.web.client.getPage</code>, a non-blocking 
+counterpart to Python's <code>urllib2.urlopen(URL).read()</code>.  Like
+<code>getProcessOutput</code> it captures the output and returns a deferred, 
+and can thus be used as a drop-in replacement.</p>
 
+Thus, we have examples of three different database back-ends, none of which 
+change the protocol class. In fact, we will not have to change the protocol 
+again until the end of this tutorial: we have achieved, here, one truly usable 
+class.</p>
+
 <a href="listings/finger/finger10.py" class="py-listing">finger10.py</a>
 
 <h2>Use Application</h2>
@@ -160,15 +332,14 @@
 <h2>twistd</h2>
 
 <p>This is how to run <q>Twisted Applications</q> &mdash; files which define an
-'application'. twistd (TWISTed Daemonizer) does everything a daemon
-can be expected to &mdash; shuts down stdin/stdout/stderr, disconnects
-from the terminal and can even change runtime directory, or even
-the root filesystems. In short, it does everything so the Twisted
-application developer can concentrate on writing his networking code.
-</p>
+'application'. A daemon is expected to adhere to certain behavioral standards 
+so that standard tools can stop/start/query them.  If a Twisted application is 
+run via twistd, the TWISTed Daemonizer, all this behavioral stuff will be handled 
+for you. twistd does everything a daemon can be expected to &mdash; shuts down 
+stdin/stdout/stderr, disconnects from the terminal and can even change runtime 
+directory, or even the root filesystems. In short, it does everything so the Twisted
+application developer can concentrate on writing his networking code.</p>
 
-<a href="listings/finger/finger11.tac" class="py-listing">finger11.tac</a>
-
 <pre class="shell">
 root% twistd -ny finger11.tac # just like before
 root% twistd -y finger11.tac # daemonize, keep pid in twistd.pid
@@ -180,5 +351,26 @@
 root% twistd -y finger11.tac --syslog --prefix=twistedfinger # use given prefix
 </pre>
 
+<p>There are several ways to tell twistd where your application is; here we show 
+how it is done using the <code>application</code> attribute in a Python module.</p>
+
+<a href="listings/finger/finger11.tac" class="py-listing">finger11.tac</a>
+
+<p>Instead of using <code>reactor.listenTCP</code> as in the above examples, 
+here we are using its application-aware counterpart, 
+<code>internet.TCPServer</code>.  Notice that when it is instantiated, the
+application object itself does not reference either the protocol or the 
+factory &mdash; twistd just assumes that the TCPServers that have been started 
+are the ones that should run.  The application object is more useful for 
+returning an object that supports the <code class="API" base="twisted.application.service">IService</code>, 
+<code class="API" base="twisted.application.service">IServiceCollection</code>, 
+<code class="API" base="twisted.application.service">IProcess</code>, and 
+<code class="API" base="twisted.persisted">sob.IPersistable</code> interfaces 
+with the given parameters; we'll be seeing these in the next part of the 
+tutorial. As the parent of the TCPServer we opened, the application lets us manage the TCPServer.</p>
+
+<p>With the daemon running on the standard finger port, you can test it with the 
+standard finger command: <code>finger moshez</code>.</p>
+
 </body>
-</html>
+</html>
\ No newline at end of file
