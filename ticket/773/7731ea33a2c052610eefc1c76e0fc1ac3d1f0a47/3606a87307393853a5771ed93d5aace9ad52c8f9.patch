diff -r e539d2b07906 twisted/scripts/_twistw.py
--- a/twisted/scripts/_twistw.py	Wed Oct 15 14:44:19 2008 +0200
+++ b/twisted/scripts/_twistw.py	Thu Oct 16 05:13:31 2008 +0200
@@ -45,6 +45,4 @@
         """
         service.IService(self.application).privilegedStartService()
         app.startApplication(self.application, not self.config['no_save'])
-        app.startApplication(internet.TimerService(0.1, lambda:None), 0)
         self.startReactor(None, self.oldstdout, self.oldstderr)
-        log.msg("Server Shut Down.")
diff -r e539d2b07906 twisted/test/test_twistd.py
--- a/twisted/test/test_twistd.py	Wed Oct 15 14:44:19 2008 +0200
+++ b/twisted/test/test_twistd.py	Thu Oct 16 05:13:31 2008 +0200
@@ -36,6 +36,11 @@
 else:
     from twisted.scripts._twistd_unix import UnixApplicationRunner
     from twisted.scripts._twistd_unix import UnixAppLogger
+
+try:
+    from twisted.scripts import _twistw
+except ImportError:
+    _twistw = None
 
 try:
     import profile
@@ -685,6 +690,47 @@
 
 
 
+class WindowsApplicationRunnerPostApplicationTests(unittest.TestCase):
+    """
+    Tests for L{_twistw.WindowsApplicationRunner.postApplication}.
+    """
+    if _twistw is None:
+        skip = "twistd windows not available"
+
+    def test_startedApplications(self):
+        """
+        Verify that twistd starts only one application.
+
+        L{_twistw.WindowsApplicationRunner.postApplication} used to always
+        start a L{twisted.application.internet.TimerService}. This is not
+        needed anymore, now that the select reactor has its own workaround
+        for noninterruptable C{select()}.
+        """
+        options = twistd.ServerOptions()
+        options.parseOptions([])
+        application = service.Application("test_startedApplications")
+        runner = _twistw.WindowsApplicationRunner(options)
+
+        apps = []
+        def fakeStartApplication(application, save):
+            apps.append(application)
+
+        self.assertEqual(inspect.getargspec(app.startApplication),
+                         inspect.getargspec(fakeStartApplication))
+
+        def passThrough(*args, **kwargs):
+            pass
+
+        runner.application = application
+        runner.oldstdout = runner.oldstderr = None
+        self.patch(runner, "startReactor", passThrough)
+        self.patch(app, 'startApplication', fakeStartApplication)
+
+        runner.postApplication()
+        self.assertEqual(apps, [application])
+
+
+
 class DummyReactor(object):
     """
     A dummy reactor, only providing a C{run} method and checking that it
