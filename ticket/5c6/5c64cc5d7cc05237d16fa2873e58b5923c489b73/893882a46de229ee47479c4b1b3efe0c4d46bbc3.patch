Index: twisted/xish/domish.py
===================================================================
--- twisted/xish/domish.py	(revision 13065)
+++ twisted/xish/domish.py	(working copy)
@@ -587,7 +587,7 @@
         self.parser.StartNamespaceDeclHandler = self._onStartNamespace
         self.parser.EndNamespaceDeclHandler = self._onEndNamespace
         self.currElem = None
-        self.defaultNsStack = []
+        self.defaultNsStack = [None]
         self.documentStarted = 0        
 
     def parse(self, buffer):
@@ -596,6 +596,8 @@
     def _onStartElement(self, name, attrs):
         # Generate a qname tuple from the provided name
         qname = name.split(" ")
+        if len(qname) == 1:
+            qname = (None, name)
 
         # Process attributes
         for k, v in attrs.items():
Index: twisted/xish/test/test_domish.py
===================================================================
--- twisted/xish/test/test_domish.py	(revision 13065)
+++ twisted/xish/test/test_domish.py	(working copy)
@@ -90,9 +90,21 @@
 xml1 = """<stream:stream xmlns:stream='etherx' xmlns='jabber'>
              <message to='bar'><x xmlns='xdelay'>some&amp;data&gt;</x></message>
           </stream:stream>"""
-query1_root = xpath.intern("/stream[@xmlns='etherx']")    
-query1_elem1 = xpath.intern("/message[@to='bar']/x[@xmlns='xdelay'][text()='some&data>']")
+query1_root = xpath.internQuery("/stream[@xmlns='etherx']")    
+query1_elem1 = xpath.internQuery("/message[@to='bar']/x[@xmlns='xdelay'][text()='some&data>']")
 
+xml2 = """<stream>
+             <error xmlns='etherx'/>
+          </stream>"""
+query2_root = xpath.internQuery("/stream[not(@xmlns)]")    
+query2_elem1 = xpath.internQuery("/error[@xmlns='etherx']")
+
+xml3 = """<stream:stream xmlns:stream='etherx'>
+             <error/>
+	  </stream:stream>"""
+query3_root = xpath.internQuery("/stream[@xmlns='etherx']")    
+query3_elem1 = xpath.internQuery("/error[not(@xmlns)]")
+
 class DomishStreamTestCase(unittest.TestCase):    
     def __init__(self):
         self.doc_started = False
@@ -136,6 +148,20 @@
         self.assertEquals(self.packet_count, 1)
         self.assertEquals(self.doc_ended, True)
         
+	# Setup the 2nd stream
+	self.setupStream(domish.ExpatElementStream(),
+			 [query2_root, query2_elem1])
+
+	# Run the test
+	self.stream.parse(xml2)
+
+	# Setup the 3nd stream
+	self.setupStream(domish.ExpatElementStream(),
+			 [query3_root, query3_elem1])
+
+	# Run the test
+	self.stream.parse(xml3)
+
     def testExpatStream(self):
         try: 
             # Setup the stream
@@ -149,6 +175,21 @@
             self.assertEquals(self.doc_started, True)
             self.assertEquals(self.packet_count, 1)
             self.assertEquals(self.doc_ended, True)
+
+            # Setup the 2nd stream
+            self.setupStream(domish.ExpatElementStream(),
+                             [query2_root, query2_elem1])
+
+            # Run the test
+            self.stream.parse(xml2)
+
+	    # Setup the 3nd stream
+	    self.setupStream(domish.ExpatElementStream(),
+			     [query3_root, query3_elem1])
+
+	    # Run the test
+	    self.stream.parse(xml3)
+
         except ImportError:
             raise unittest.SkipTest, "Skipping ExpatElementStream test, since no expat wrapper is available."
 
