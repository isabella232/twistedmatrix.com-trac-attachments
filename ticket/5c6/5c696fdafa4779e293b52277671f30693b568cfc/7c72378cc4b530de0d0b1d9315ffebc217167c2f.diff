diff --git a/twisted/internet/defer.py b/twisted/internet/defer.py
index fb1e65d..ec480b1 100644
--- a/twisted/internet/defer.py
+++ b/twisted/internet/defer.py
@@ -1112,9 +1112,9 @@ def _inlineCallbacks(result, g, deferred):
                 result = result.throwExceptionIntoGenerator(g)
             else:
                 result = g.send(result)
-        except StopIteration:
+        except StopIteration as e:
             # fell off the end, or "return" statement
-            deferred.callback(None)
+            deferred.callback(getattr(e, "value", None))
             return deferred
         except _DefGen_Return as e:
             # returnValue() was called; time to give a result to the original
diff --git a/twisted/internet/test/test_inlinecb.py b/twisted/internet/test/test_inlinecb.py
index fe5e9af..67a8f5f 100644
--- a/twisted/internet/test/test_inlinecb.py
+++ b/twisted/internet/test/test_inlinecb.py
@@ -11,9 +11,45 @@ well.
 
 from __future__ import division, absolute_import
 
+import sys
+
 from twisted.trial.unittest import TestCase
 from twisted.internet.defer import Deferred, returnValue, inlineCallbacks
 
+
+class StopIterationReturnTests(TestCase):
+    """
+    On Python 3.3 and newer generator functions may use the C{return} statement
+    with a value, which is attached to the L{StopIteration} exception that is
+    raised.
+
+    L{inlineCallbacks} will use this value when it fires the C{callback}.
+    """
+
+    def test_returnWithValue(self):
+        """
+        If the C{return} statement has a value it is propogated back to the
+        L{Deferred} that the C{inlineCallbacks} function returned.
+        """
+        environ = {"inlineCallbacks": inlineCallbacks}
+        exec("""
+@inlineCallbacks
+def f(d):
+    yield d
+    return 14
+        """, environ)
+        d1 = Deferred()
+        d2 = environ["f"](d1)
+        d1.callback(None)
+        self.assertEqual(self.successResultOf(d2), 14)
+
+
+
+if sys.version_info < (3, 3):
+    StopIterationReturnTests.skip = "Test requires Python 3.3 or greater"
+
+
+
 class NonLocalExitTests(TestCase):
     """
     It's possible for L{returnValue} to be (accidentally) invoked at a stack
