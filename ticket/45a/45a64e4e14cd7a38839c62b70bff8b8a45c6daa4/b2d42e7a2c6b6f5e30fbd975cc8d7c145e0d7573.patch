Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 42747)
+++ twisted/python/filepath.py	(working copy)
@@ -1227,7 +1227,7 @@
         self.changed()
 
 
-    def makedirs(self):
+    def makedirs(self, mode=0o777, exist_ok=False):
         """
         Create all directories not yet existing in C{path} segments, using
         L{os.makedirs}.
@@ -1234,7 +1234,8 @@
 
         @return: C{None}
         """
-        return os.makedirs(self.path)
+        if (exist_ok and not self.exists()) or not exist_ok:
+            os.makedirs(self.path, mode=mode)
 
 
     def globChildren(self, pattern):
Index: twisted/test/test_paths.py
===================================================================
--- twisted/test/test_paths.py	(revision 42747)
+++ twisted/test/test_paths.py	(working copy)
@@ -1328,7 +1328,53 @@
         fp.makedirs()
         self.assertEqual(fp.exists(), True)
 
+    def test_makedirs_makesDirectoriesRecursively(self):
+        """
+        Check that C{filepath.FilePath.makedirs} recursively creates all
+        parent directories leading up to a location.
+        """
+        fp = filepath.FilePath(os.path.join(self.mktemp(), "foo", "bar", "baz"))
+        self.assertFalse(fp.exists())
 
+        fp.makedirs()
+        self.assertTrue(fp.exists())
+        self.assertTrue(fp.isdir())
+
+    def test_makedirs_throwsWithExistentDirectory(self):
+        """
+        Check that C{filepath.FilePath.makedirs} throws a proper exception
+        when makedirs is called on a directory that already exists.
+        """
+        fp = filepath.FilePath(os.path.join(self.mktemp()))
+        fp.makedirs()
+
+        try:
+        	fp.makedirs()
+        except Exception as e:
+        	self.assertTrue(type(e) is OSError)
+        	self.assertEqual(errno.EEXIST, e.errno)
+
+    def test_makedirs_acceptsExistOk(self):
+        """
+        Check that C{filepath.FilePath.makedirs} succeeds when makedirs is
+        called on a directory that already exists and the exist_ok argument is
+        set to True.
+        """
+        fp = filepath.FilePath(self.mktemp())
+        fp.makedirs()
+        self.assertTrue(fp.exists())
+        fp.makedirs(exist_ok=True)
+        self.assertTrue(fp.exists())
+
+    def test_makedirs_acceptsMode(self):
+        """
+        Check that C{filepath.FilePath.makedirs} can set an arbitrary mode on
+        a newly created directory.
+        """
+        fp = filepath.FilePath(self.mktemp())
+        fp.makedirs(mode=0o700)
+        self.assertEqual("rwx------", fp.getPermissions().shorthand())
+
     def test_changed(self):
         """
         L{FilePath.changed} indicates that the L{FilePath} has changed, but does
