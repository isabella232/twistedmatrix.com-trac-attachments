diff --git twisted/python/filepath.py twisted/python/filepath.py
index 0e6bde7..31b3938 100644
--- twisted/python/filepath.py
+++ twisted/python/filepath.py
@@ -1411,14 +1411,21 @@ class FilePath(AbstractFilePath):
         self.changed()
 
 
-    def makedirs(self):
+    def makedirs(self, mode=0o777, existOk=False):
         """
         Create all directories not yet existing in C{path} segments, using
         L{os.makedirs}.
 
+        @param mode: Directories permissions.
+        @type mode: L{int} (octal)
+
+        @param existOk: Don't create directories if they already exist.
+        @type existOk: L{bool}
+
         @return: C{None}
         """
-        return os.makedirs(self.path)
+        if (existOk and not self.exists()) or not existOk:
+            return os.makedirs(self.path, mode=mode)
 
 
     def globChildren(self, pattern):
diff --git twisted/test/test_paths.py twisted/test/test_paths.py
index ad9533b..e7c35ad 100644
--- twisted/test/test_paths.py
+++ twisted/test/test_paths.py
@@ -1330,6 +1330,69 @@ class FilePathTests(AbstractFilePathTests):
         self.assertEqual(fp.exists(), True)
 
 
+    def test_makedirs_makesDirectoriesRecursively(self):
+        """
+        Check that C{filepath.FilePath.makedirs} recursively creates all
+        parent directories leading up to a location.
+        """
+        fp = filepath.FilePath(os.path.join(
+            self.mktemp(), b"foo", b"bar", b"baz"))
+        self.assertFalse(fp.exists())
+
+        fp.makedirs()
+        self.assertTrue(fp.exists())
+        self.assertTrue(fp.isdir())
+
+
+    def test_makedirs_makesDirectoriesWithExistsOk(self):
+        """
+        Check that C{filepath.FilePath.makedirs} existOk has no effect if
+        directory does not exist yet.
+        """
+        fp = filepath.FilePath(self.mktemp())
+        self.assertFalse(fp.exists())
+
+        fp.makedirs(existOk=True)
+        self.assertTrue(fp.exists())
+        self.assertTrue(fp.isdir())
+
+
+    def test_makedirs_throwsWithExistentDirectory(self):
+        """
+        Check that C{filepath.FilePath.makedirs} throws a proper exception
+        when makedirs is called on a directory that already exists.
+        """
+        fp = filepath.FilePath(os.path.join(self.mktemp()))
+        fp.makedirs()
+
+        with self.assertRaises(OSError) as e:
+            fp.makedirs()
+            self.assertEqual(e.errno, errno.EEXIST)
+
+
+    def test_makedirs_acceptsExistOk(self):
+        """
+        Check that C{filepath.FilePath.makedirs} succeeds when makedirs is
+        called on a directory that already exists and the existOk argument is
+        set to True.
+        """
+        fp = filepath.FilePath(self.mktemp())
+        fp.makedirs()
+        self.assertTrue(fp.exists())
+        fp.makedirs(existOk=True)
+        self.assertTrue(fp.exists())
+
+
+    def test_makedirs_acceptsMode(self):
+        """
+        Check that C{filepath.FilePath.makedirs} can set an arbitrary mode on
+        a newly created directory.
+        """
+        fp = filepath.FilePath(self.mktemp())
+        fp.makedirs(mode=0o700)
+        self.assertEqual("rwx------", fp.getPermissions().shorthand())
+
+
     def test_changed(self):
         """
         L{FilePath.changed} indicates that the L{FilePath} has changed, but does
diff --git twisted/topfiles/5704.feature twisted/topfiles/5704.feature
new file mode 100644
index 0000000..8aa33a7
--- /dev/null
+++ twisted/topfiles/5704.feature
@@ -0,0 +1,2 @@
+twisted.python.filepath.makedirs accepts an existOk option which won't create the directories if they already exist.
+twisted.python.filepath.makedirs accepts a mode option, similar to the standard library.
