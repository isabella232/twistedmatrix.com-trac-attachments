Index: msnsupport.py
===================================================================
--- msnsupport.py	(revision 0)
+++ msnsupport.py	(revision 0)
@@ -0,0 +1,178 @@
+from zope.interface import implements
+from twisted.words.im import basesupport, interfaces
+from twisted.words.protocols import msn
+from twisted.internet import protocol, defer, reactor
+from twisted.words.im import locals as constants
+from twisted.python import log
+
+class MsnGroup:
+    pass
+
+class MsnPerson(basesupport.AbstractPerson):
+
+    def setStatus(self, status):
+        self.status = status
+        self.account.client.chat.getContactsList().setContactStatus(self)
+
+    def sendMessage(self, message, meta=None):
+        self.account.client.sendMessage(self.name, message)
+
+class MsnConversation(msn.SwitchboardClient):
+    def __init__(self, notification, person, key, sessionId='', message=''):
+        msn.SwitchboardClient.__init__(self)
+        self.person = person
+        self.userHandle =  notification.account.username
+        self.notification = notification
+        self.key = key
+        self.sessionID = sessionId
+        self.message = message
+
+    def loggedIn(self):
+        msn.SwitchboardClient.loggedIn(self)
+        self.inviteUser(self.person)#.addCallback(lambda _: self.sendMessage(self.message))
+
+        self.notification.conversations[self.person] = self
+
+    def sendMessage(self, message):
+        msg = msn.MSNMessage(message=message)
+        msg.ack = msg.MESSAGE_NACK
+        msn.SwitchboardClient.sendMessage(self, msg).addCallbacks(log.debug, log.err)
+
+    def gotMessage(self, msg):
+        self.notification.chat.getConversation(
+                self.notification.chat.getPerson(self.person, self.notification)
+                    ).showMessage(msg.getMessage())
+
+class SwitchboardFactory(protocol.ClientFactory):
+    protocol = MsnConversation
+
+    def __init__(self, notification, person, key, sessionId='', message=''):
+        self.notification = notification
+        self.sessionId = sessionId
+        self.key = key
+        self.person = person
+        self.message = message
+
+    def buildProtocol(self, addr):
+        p = self.protocol(self.notification,
+                          self.person,
+                          self.key,
+                          self.sessionId,
+                          self.message)
+        if self.sessionId:
+            p.reply = 1
+        return p
+
+    def clientConnectionFailed(self, connector, reason):
+        if self.person in self.notification.conversations:
+            del self.notification.conversations[self.person]
+
+    clientConnectionLost = clientConnectionFailed
+
+class Notification(basesupport.AbstractClientMixin, msn.NotificationClient):
+    # this is analagous to TOCProto or OscarProto
+
+    def __init__(self, account, chatui, logonDeferred):
+        basesupport.AbstractClientMixin.__init__(self, account, chatui, logonDeferred)
+        msn.NotificationClient.__init__(self)
+        self.conversations = {}
+        self.account = account
+
+    def _contactStatusChanged(self, statusCode, userHandle):
+        status = {msn.STATUS_ONLINE: constants.ONLINE,
+                  msn.STATUS_OFFLINE: constants.OFFLINE}.get(status, constants.AWAY)
+
+        self.chat.getPerson(userHandle, self).setStatus(status)
+
+    def sendMessage(self, to, message):
+        if to in self.conversations:
+            self.conversations[to].sendMessage(message)
+        else:
+            self.addContact(msn.FORWARD_LIST, to)
+            futureServer = self.requestSwitchboardServer()
+
+            def setup((host, port, key)):
+                factory = SwitchboardFactory(self, to, key, message=message)
+                reactor.connectTCP(host, port, factory)
+
+            futureServer.addCallback(setup)
+
+    def gotContactStatus(self, statusCode, userHandle, screenname):
+        msn.NotificationClient.gotContactStatus(self, statusCode, userHandle, screenname)
+        self._contactStatusChanged(statusCode, userHandle)
+
+    def contactStatusChanged(self, statusCode, userHandle, screenname):
+        msn.NotificationClient.contactStatusChanged(self, statusCode, userHandle, screenname)
+        self._contactStatusChanged(statusCode, userHandle)
+
+    def connectionLost(self, reason):
+        if not self._logonDeferred.called:
+            self._logonDeferred.errback(reason)
+
+    def loggedIn(self, *args):
+        msn.NotificationClient.loggedIn(self, *args)
+        self._logonDeferred.callback(self)
+
+    def gotSwitchboardInvitation(self, sessionId, host, port, key, pport, sn):
+        factory = SwitchboardFactory(self, sn, key, sessionId)
+        reactor.connectTCP(host, port, factory)
+
+class LogonAwareFactoryMixin:
+    def clientConnectionFailed(self, connector, reason):
+        if not self.logonDeferred.called:
+            self.logonDeferred.errback(reason)
+
+    def buildProtocol(self, addr):
+        p = self.protocol(self.account, self.chatui, self.logonDeferred)
+        p.factory = self
+        return p
+
+class OurNotificationFactory(LogonAwareFactoryMixin, msn.NotificationFactory):
+    protocol = Notification
+
+    def __init__(self, account, chatui, logonDeferred):
+        self.account = account
+        self.chatui = chatui
+        self.logonDeferred = logonDeferred
+        self.userHandle = account.username
+        self.password = account.password
+
+class Dispatch(msn.DispatchClient):
+    notificationFactory = OurNotificationFactory
+
+    def __init__(self, account, chatui, logonDeferred):
+        msn.DispatchClient.__init__(self)
+        self.userHandle = account.username
+        self.password = account.password
+        self.account = account
+        self.chatui = chatui
+        self.logonDeferred = logonDeferred
+
+    def gotNotificationReferral(self, host, port):
+        self.transport.loseConnection()
+        factory = self.notificationFactory(self.account, self.chatui, self.logonDeferred)
+        reactor.connectTCP(host, port, factory)
+
+class MsnClientFactory(LogonAwareFactoryMixin, protocol.ClientFactory):
+    protocol = Dispatch
+
+    def __init__(self, account, chatui, logonDeferred):
+        self.account = account
+        self.chatui = chatui
+        self.logonDeferred = logonDeferred
+
+class MsnAccount(basesupport.AbstractAccount):
+    implements(interfaces.IAccount)
+    gatewayType = 'MSN'
+    protocol    = 'MSN'
+    defaultHost = 'messenger.hotmail.com'
+    defaultPort = 1863
+
+    _groupFactory  = MsnGroup
+    _personFactory = MsnPerson
+
+    def _startLogOn(self, chatui):
+        logonDeferred = defer.Deferred()
+        reactor.connectTCP(self.host, self.port,
+                           MsnClientFactory(self, chatui, logonDeferred))
+        return logonDeferred
Index: oscarsupport.py
===================================================================
--- oscarsupport.py	(revision 0)
+++ oscarsupport.py	(revision 0)
@@ -0,0 +1,112 @@
+from zope.interface import implements
+from twisted.words.im import basesupport, interfaces
+from twisted.words.protocols import oscar
+from twisted.internet import protocol, defer, reactor
+from twisted.words.im import locals as constants
+
+class OscarPerson(basesupport.AbstractPerson):
+
+    def sendMessage(self, message, meta=None):
+        self.account.client.sendMessage(self.name, ((message,),))
+
+    def setStatus(self, status):
+        self.status = status
+        self.account.client.chat.getContactsList().setContactStatus(self)
+
+class OscarProto(basesupport.AbstractClientMixin, oscar.BOSConnection):
+
+    def __init__(self, account, chatui, cookie, logonDeferred=None):
+        basesupport.AbstractClientMixin.__init__(self, account, chatui, logonDeferred)
+        oscar.BOSConnection.__init__(self, account.username, cookie)
+        self.groups = {}
+        self._ssiGroups = {}
+
+    def addContact(self, person):
+        def doAdd(ssiGroup, buddyID=1):
+            ssiBuddy = oscar.SSIBuddy(person.name)
+            ssiGroup.addUser(buddyID, ssiBuddy)
+            return self.modifyItemSSI(ssiBuddy).addCallback(lambda _: self.addItemSSI(ssiBuddy, buddyID = buddyID))
+
+        ssiGroup = self._ssiGroups.get(person.group.name)
+        if ssiGroup is None:
+            ssiGroup = oscar.SSIGroup(person.group.name)
+            return self.addItemSSI(ssiGroup, groupID = 1).addCallback(lambda _: doAdd(ssiGroup))
+        else:
+            return doAdd(ssiGroup)
+
+    def initDone(self):
+        def gotContactList(contacts_list):
+            self.activateSSI()
+            self.setIdleTime(0)
+            self.clientReady()
+            self._logonDeferred.callback(self)
+            groups = contacts_list[0]
+            for group in groups:
+                for contact in group.users:
+                    self._ssiGroups[group.name] = group
+                    group = self.groups.setdefault(group.name, self.chat.getContactGroup(group.name, self))
+                    self.chat.getPerson(contact.name, self).setStatus(constants.ONLINE)
+
+        self.requestSSI().addCallback(gotContactList)
+
+    def receiveMessage(self, user, multiparts, flags):
+        self.chat.getConversation(self.chat.getPerson(user.name, self)).showMessage(multiparts[0][0])
+
+    def updateBuddy(self, buddy):
+        for (group_name, group) in self.groups.items():
+            if buddy in group.people:
+                group.getPerson(buddy.name).setStatus(constants.ONLINE)
+
+class OscarGroup:
+    pass
+
+class OscarAuthenticator(oscar.OscarAuthenticator):
+    BOSClass = OscarProto
+
+    def __init__(self, account, chatui, logonDeferred, icq):
+        authDeferred = defer.Deferred()
+        authDeferred.addErrback(logonDeferred.errback)
+
+        oscar.OscarAuthenticator.__init__(self, account.username, account.password, authDeferred, icq)
+        self.chatui = chatui
+        self.account = account
+        self.logonDeferred = logonDeferred
+
+    def connectToBOS(self, server, port):
+        futureClient = protocol.ClientCreator(reactor, self.BOSClass,
+                                               self.account, self.chatui,
+                                               self.cookie, self.logonDeferred)
+
+        return futureClient.connectTCP(server, int(port))
+
+class OscarAccount(basesupport.AbstractAccount):
+    implements(interfaces.IAccount)
+    gatewayType = 'OSCAR'
+    defaultHost = None
+    defaultPort = None
+
+    _groupFactory  = OscarGroup
+    _personFactory = OscarPerson
+
+    def _startLogOn(self, chatui, icq):
+        logonDeferred = defer.Deferred()
+        futureClient = protocol.ClientCreator(reactor, OscarAuthenticator, self, chatui, logonDeferred, icq)
+        connectDeferred = futureClient.connectTCP(self.host, self.port)
+        connectDeferred.addErrback(logonDeferred.errback)
+        return logonDeferred
+
+class OscarAimAccount(OscarAccount):
+    protocol = 'AIM'
+    defaultHost = 'login.oscar.aol.com'
+    defaultPort = 5190
+
+    def _startLogOn(self, chatui):
+        return OscarAccount._startLogOn(self, chatui, icq=0)
+
+class OscarIcqAccount(OscarAccount):
+    protocol = 'ICQ'
+    defaultHost = 'login.icq.com'
+    defaultPort = 5238
+
+    def _startLogOn(self, chatui):
+        return OscarAccount._startLogOn(self, chatui, icq=1)
Index: basesupport.py
===================================================================
--- basesupport.py	(revision 15664)
+++ basesupport.py	(working copy)
@@ -14,12 +14,25 @@
 from twisted.words.im import interfaces
 
 from twisted.internet.protocol import Protocol
-
+from twisted.internet import defer
 from twisted.python.reflect import prefixedMethods
 from twisted.persisted import styles
 
 from twisted.internet import error
 
+class AbstractContactGroup:
+    def __init__(self, name, account):
+        self.name = name
+        self.account = account
+        self.people = {}
+
+    def getPerson(self, name):
+        person = self.people.get(name)
+        if person is None:
+            person = self.account._personFactory(name, self.account)
+            self.people[name] = person
+        return person
+
 class AbstractGroup:
     def __init__(self, name, account):
         self.name = name
@@ -147,20 +160,29 @@
     _isOnline = 0
     _isConnecting = 0
     client = None
+    
+    defaultHost = None
+    defaultPort = None
 
     _groupFactory = AbstractGroup
     _personFactory = AbstractPerson
-
+    _contactGroupFactory = AbstractContactGroup
+    
     persistanceVersion = 2
 
-    def __init__(self, accountName, autoLogin, username, password, host, port):
+    def __init__(self, accountName, autoLogin, username, password, host = None, port = None):
+        if host is None:
+            host = self.defaultHost
+        if port is None:
+            port = self.defaultPort
+
         self.accountName = accountName
         self.autoLogin = autoLogin
         self.username = username
         self.password = password
         self.host = host
         self.port = port
-
+        self.contactGroups = {}
         self._groups = {}
         self._persons = {}
 
@@ -203,8 +225,27 @@
             d.addCallback(chatui.registerAccountClient)
             return d
         else:
-            raise error.ConnectionError("Connection in progress")
+            raise error.ConnectInProgressError()
 
+    def logOff(self, chatui):
+        if self._isOnline and (not self._isConnecting):
+            d = defer.maybeDeferred(self._startLogOff, chatui)
+            d.addErrback(self._logOffFailed)
+            d.addCallback(lambda _: self._cb_logOff())
+            d.addCallback(lambda _: chatui.unregisterAccountClient(self.client))
+            return d
+        else:
+            raise error.ConnectError()
+
+    def _logOffFailed(self, f):
+        log.err(f)
+
+    def _cb_logOff(self):
+        self._isOnline = 0
+
+    def _startLogOff(self, chatui):
+        self.client.transport.loseConnection()
+
     def getGroup(self, name):
         """Group factory.
 
@@ -217,6 +258,13 @@
             self._groups[name] = group
         return group
 
+    def getContactGroup(self, name):
+        group = self.contactGroups.get(name)
+        if group is None:
+            group = self._contactGroupFactory(name, self)
+            self.contactGroups[name] = group
+        return group
+
     def getPerson(self, name):
         """Person factory.
 
Index: basechat.py
===================================================================
--- basechat.py	(revision 15664)
+++ basechat.py	(working copy)
@@ -68,6 +68,7 @@
         @type person: L{Person<interfaces.IPerson>}
         @type chatui: L{ChatUI}
         """
+        assert person is not None
         self.chatui = chatui
         self.person = person
 
@@ -190,6 +191,7 @@
         self.groupConversations = {} # cache of all group windows
         self.persons = {}            # keys are (name, client)
         self.groups = {}             # cache of all groups
+        self.contactGroups = {}
         self.onlineClients = []      # list of message sources currently online
         self.contactsList = ContactsList(self)
 
@@ -199,7 +201,6 @@
         @type client: L{Client<interfaces.IClient>}
         @returns: client, so that I may be used in a callback chain
         """
-        print "signing onto", client.accountName
         self.onlineClients.append(client)
         self.contactsList.registerAccountClient(client)
         return client
@@ -209,7 +210,6 @@
 
         @type client: L{Client<interfaces.IClient>}
         """
-        print "signing off from", client.accountName
         self.onlineClients.remove(client)
         self.contactsList.unregisterAccountClient(client)
 
@@ -259,6 +259,13 @@
             conv.show()
         return conv
 
+    def getContactGroup(self, name, client):
+        group = self.contactGroups.get(name)
+        if group is None:
+            group = client.account.getContactGroup(name)
+            self.contactGroups[name] = group
+        return group
+
     def getPerson(self, name, client):
         """For the given name and account client, returns the instance of the
         AbstractPerson subclass, or creates and returns a new AbstractPerson
Index: tocsupport.py
===================================================================
--- tocsupport.py	(revision 15664)
+++ tocsupport.py	(working copy)
@@ -207,7 +207,8 @@
 
 class TOCAccount(basesupport.AbstractAccount):
     implements(interfaces.IAccount)
-    gatewayType = "AIM (TOC)"
+    gatewayType = 'TOC'
+    protocol = 'AIM'
 
     _groupFactory = TOCGroup
     _personFactory = TOCPerson
Index: baseaccount.py
===================================================================
--- baseaccount.py	(revision 15664)
+++ baseaccount.py	(working copy)
@@ -53,10 +53,8 @@
         return self.accounts[accountName].logOn(chatui)
 
     def disconnect(self, accountName):
-        pass
-        #self.accounts[accountName].logOff()  - not yet implemented
+        self.accounts[accountName].logOff()
 
     def quit(self):
-        pass
-        #for account in self.accounts.values():
-        #    account.logOff()  - not yet implemented
+        for account in self.accounts.values():
+            account.logOff()
