Index: twisted/internet/test/test_serialport.py
===================================================================
--- twisted/internet/test/test_serialport.py	(revision 29567)
+++ twisted/internet/test/test_serialport.py	(working copy)
@@ -3,6 +3,11 @@
 
 """
 Tests for L{twisted.internet.serialport}.
+
+socat can be used on posix systems to provide a pty loopback
+for read/write tests:
+
+$ socat PTY,link=/tmp/a-pty PTY,link=/tmp/a-pty
 """
 
 
@@ -16,6 +21,7 @@
 from twisted.internet.error import ConnectionDone
 from twisted.internet.defer import Deferred
 from twisted.internet.test.reactormixins import ReactorBuilder
+from twisted.internet.protocol import Protocol
 from twisted.trial.unittest import SkipTest
 from twisted.test.test_tcp import ConnectionLostNotifyingProtocol
 
@@ -24,7 +30,7 @@
     """
     Builder defining tests for L{twisted.internet.serialport}.
     """
-    portName = 0
+    portName = '/tmp/a-pty'
 
     def test_loseConnection(self):
         """
@@ -53,4 +59,41 @@
         protocol.lostConnectionReason.trap(ConnectionDone)
 
 
+    def test_writeAndRead(self):
+        """
+        Test that dataReceived is called on the registered protocol
+        when data is written to the serial port
+        """
+        reactor = self.buildReactor()
+
+        protocol = Protocol()
+
+        message = list("12345")
+        sent = []
+
+        try:
+            port = SerialPort(protocol, self.portName, reactor)
+        except SerialException, e:
+            raise SkipTest("Cannot open serial port: %s" % (e,))
+
+        def cbDataRx(data):
+            self.assertEquals(data, sent[-1])
+            write()
+        protocol.dataReceived = cbDataRx
+
+        def write():
+            if message:
+                char = message.pop(0)
+                sent.append(char)
+                port.write(char)
+            else:
+                reactor.stop()
+
+        write()
+
+        self.runReactor(reactor) 
+
+    # Set short timeout in case loopback connector is missing
+    test_writeAndRead.timeout = 2
+
 globals().update(SerialPortTestsBuilder.makeTestCaseClasses())
