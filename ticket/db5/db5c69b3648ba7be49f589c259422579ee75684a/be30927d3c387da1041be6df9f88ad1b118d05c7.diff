diff --git twisted/conch/ssh/channel.py twisted/conch/ssh/channel.py
index f498aec..9651ad7 100644
--- twisted/conch/ssh/channel.py
+++ twisted/conch/ssh/channel.py
@@ -254,19 +254,15 @@ class SSHChannel(log.Logger):
 
     def getPeer(self):
         """
-        Return a tuple describing the other side of the connection.
-
-        @rtype: C{tuple}
+        See: L{ITransport.getPeer}
         """
-        return('SSH', )+self.conn.transport.getPeer()
+        return self.conn.transport.getPeer()
 
     def getHost(self):
         """
-        Return a tuple describing our side of the connection.
-
-        @rtype: C{tuple}
+        See: L{ITransport.getHost}
         """
-        return('SSH', )+self.conn.transport.getHost()
+        return self.conn.transport.getHost()
 
     def stopWriting(self):
         """
diff --git twisted/conch/ssh/transport.py twisted/conch/ssh/transport.py
index 843a6de..7ddfe1c 100644
--- twisted/conch/ssh/transport.py
+++ twisted/conch/ssh/transport.py
@@ -488,25 +488,15 @@ class SSHTransportBase(protocol.Protocol):
 
     def getPeer(self):
         """
-        Returns an L{SSHTransportAddress} corresponding to the other (peer)
-        side of this transport.
-
-        @return: L{SSHTransportAddress} for the peer
-        @rtype: L{SSHTransportAddress}
-        @since: 12.1
+        See: L{ITransport.getPeer}
         """
-        return address.SSHTransportAddress(self.transport.getPeer())
+        return self.transport.getPeer()
 
     def getHost(self):
         """
-        Returns an L{SSHTransportAddress} corresponding to the this side of
-        transport.
-
-        @return: L{SSHTransportAddress} for the peer
-        @rtype: L{SSHTransportAddress}
-        @since: 12.1
+        See: L{ITransport.getHost}
         """
-        return address.SSHTransportAddress(self.transport.getHost())
+        return self.transport.getHost()
 
 
     # Client-initiated rekeying looks like this:
diff --git twisted/conch/test/test_channel.py twisted/conch/test/test_channel.py
index a46596d..bd32ea7 100644
--- twisted/conch/test/test_channel.py
+++ twisted/conch/test/test_channel.py
@@ -5,24 +5,12 @@
 Test ssh/channel.py.
 """
 from twisted.conch.ssh import channel
+from twisted.conch.ssh.transport import SSHServerTransport
+from twisted.internet.address import IPv4Address
+from twisted.test.proto_helpers import StringTransport
 from twisted.trial import unittest
 
 
-class MockTransport(object):
-    """
-    A mock Transport.  All we use is the getPeer() and getHost() methods.
-    Channels implement the ITransport interface, and their getPeer() and
-    getHost() methods return ('SSH', <transport's getPeer/Host value>) so
-    we need to implement these methods so they have something to draw
-    from.
-    """
-    def getPeer(self):
-        return ('MockPeer',)
-
-    def getHost(self):
-        return ('MockHost',)
-
-
 class MockConnection(object):
     """
     A mock for twisted.conch.ssh.connection.SSHConnection.  Record the data
@@ -35,7 +23,6 @@ class MockConnection(object):
     @ivar closes: a C{dict} mapping channel id #s to True if that channel sent
         a close message.
     """
-    transport = MockTransport()
 
     def __init__(self):
         self.data = {}
@@ -266,14 +253,30 @@ class ChannelTestCase(unittest.TestCase):
         self.channel.addWindowBytes(8) # send extended data
         self.assertTrue(self.conn.closes.get(self.channel))
 
+    def connectTransport(self, hostAddress=None, peerAddress=None):
+        """
+        Connect a SSHTransport which is already connected to a remote peer to
+        the channel under test.
+        """
+        transport = SSHServerTransport()
+        transport.makeConnection(StringTransport(
+            hostAddress=hostAddress, peerAddress=peerAddress))
+        self.channel.conn.transport = transport
+
     def test_getPeer(self):
         """
-        Test that getPeer() returns ('SSH', <connection transport peer>).
+        Gets info from connected transport.
         """
-        self.assertEqual(self.channel.getPeer(), ('SSH', 'MockPeer'))
+        peer = IPv4Address('TCP', '192.168.0.1', 54321)
+        self.connectTransport(peerAddress=peer)
+
+        self.assertEqual(peer, self.channel.getPeer())
 
     def test_getHost(self):
         """
-        Test that getHost() returns ('SSH', <connection transport host>).
+        Gets info from connected transport.
         """
-        self.assertEqual(self.channel.getHost(), ('SSH', 'MockHost'))
+        peer = IPv4Address('TCP', '127.0.0.1', 12345)
+        self.connectTransport(hostAddress=peer)
+
+        self.assertEqual(peer, self.channel.getHost())
diff --git twisted/conch/test/test_transport.py twisted/conch/test/test_transport.py
index 70e116c..3ee6ceb 100644
--- twisted/conch/test/test_transport.py
+++ twisted/conch/test/test_transport.py
@@ -1154,21 +1154,17 @@ class ServerAndClientSSHTransportBaseCase:
 
     def test_getPeer(self):
         """
-        Test that the transport's L{getPeer} method returns an
-        L{SSHTransportAddress} with the L{IAddress} of the peer.
+        Gets value from the connected transport.
         """
-        self.assertEqual(self.proto.getPeer(),
-                         address.SSHTransportAddress(
-                self.proto.transport.getPeer()))
+        self.assertEqual(
+            self.proto.getPeer(), self.proto.transport.getPeer())
 
     def test_getHost(self):
         """
-        Test that the transport's L{getHost} method returns an
-        L{SSHTransportAddress} with the L{IAddress} of the host.
+        Gets value from the connected transport.
         """
-        self.assertEqual(self.proto.getHost(),
-                         address.SSHTransportAddress(
-                self.proto.transport.getHost()))
+        self.assertEqual(
+            self.proto.getHost(), self.proto.transport.getHost())
 
 
 
diff --git twisted/conch/topfiles/5999.bug twisted/conch/topfiles/5999.bug
new file mode 100644
index 0000000..581bac4
--- /dev/null
+++ twisted/conch/topfiles/5999.bug
@@ -0,0 +1 @@
+Fix getPeer and getHost in twisted.conch.ssh.channel.SSHChannel and twisted.conch.ssh.transport.SSHTransport.
\ No newline at end of file
