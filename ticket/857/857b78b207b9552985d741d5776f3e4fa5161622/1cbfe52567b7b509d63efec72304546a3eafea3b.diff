Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 22462)
+++ twisted/internet/defer.py	(working copy)
@@ -350,7 +350,7 @@
                 self._debugInfo.failResult = None
 
     def setTimeout(self, seconds, timeoutFunc=timeout, *args, **kw):
-        """Set a timeout function to be triggered if I am not called.
+        """Set a timeout function to be triggered if I am not called. (DEPRECATED)
 
         @param seconds: How long to wait (from now) before firing the
         timeoutFunc.
@@ -358,6 +358,19 @@
         @param timeoutFunc: will receive the Deferred and *args, **kw as its
         arguments.  The default timeoutFunc will call the errback with a
         L{TimeoutError}.
+
+        This function is deprecated because it was a bad idea. Consider:
+        >>> d = Deferred()
+        >>> reactor.callLater(3, d.callback, None)
+        >>> d.setTimeout(1)
+
+        Hint: calling callback() on a Deferred with errback() already called
+        raises L{twisted.internet.defer.AlreadyCalledError}.
+
+        setTimeout is deprecated because application specific code must handle
+        the case where some result arrives after a timeout has expired, and
+        setTimeout makes doing that hard. See
+        L{twisted.internet.interfaces.IReactorTime.callLater}.
         """
         warnings.warn(
             "Deferred.setTimeout is deprecated.  Look for timeout "
