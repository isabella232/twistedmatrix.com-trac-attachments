diff --git twisted/runner/inetdtap.py twisted/runner/inetdtap.py
index 3e62877..0fc6bd1 100644
--- twisted/runner/inetdtap.py
+++ twisted/runner/inetdtap.py
@@ -1,8 +1,7 @@
+# -*- test-case-name: twisted.runner.test.test_inetdtap -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# 
-
 """
 Twisted inetd TAP support
 
@@ -11,18 +10,27 @@ Maintainer: Andrew Bennetts
 Future Plans: more configurability.
 """
 
-import os, pwd, grp, socket
+import grp
+import pwd
+import socket
 
 from twisted.runner import inetd, inetdconf
 from twisted.python import log, usage
+from twisted.python.deprecate import deprecatedModuleAttribute
+from twisted.python.deprecate import warnAboutFunction
+from twisted.python.reflect import requireModule
+from twisted.python.versions import Version
 from twisted.internet.protocol import ServerFactory
 from twisted.application import internet, service as appservice
 
-try:
-    import portmap
-    rpcOk = 1
-except ImportError:
-    rpcOk = 0
+portmap = requireModule('portmap', False)
+
+deprecatedModuleAttribute(
+   Version("Twisted", 14, 0, 0),
+   "RPC is no longer supported.",
+   "twisted.runner.inetdtap",
+   "rpcOk")
+rpcOk = portmap != False
 
 
 # Protocol map
@@ -32,7 +40,6 @@ protocolDict = {'tcp': socket.IPPROTO_TCP, 'udp': socket.IPPROTO_UDP}
 class Options(usage.Options):
 
     optParameters = [
-        ['rpc', 'r', '/etc/rpc', 'RPC procedure table file'],
         ['file', 'f', '/etc/inetd.conf', 'Service configuration file']
     ]
 
@@ -42,6 +49,12 @@ class Options(usage.Options):
         optActions={"file": usage.CompleteFiles('*.conf')}
         )
 
+
+deprecatedModuleAttribute(
+   Version("Twisted", 14, 0, 0),
+   "RPC is no longer supported.",
+   "twisted.runner.inetdtap",
+   "RPCServer")
 class RPCServer(internet.TCPServer):
 
     def __init__(self, rpcVersions, rpcConf, proto, service):
@@ -50,64 +63,22 @@ class RPCServer(internet.TCPServer):
         self.proto = proto
         self.service = service
 
-    def startService(self):
-        internet.TCPServer.startService(self)
-        import portmap
-        portNo = self._port.getHost()[2]
-        service = self.service
-        for version in rpcVersions:
-            portmap.set(self.rpcConf.services[name], version, self.proto,
-                        portNo)
-            inetd.forkPassingFD(service.program, service.programArgs,
-                                os.environ, service.user, service.group, p)
+
 
 def makeService(config):
     s = appservice.MultiService()
     conf = inetdconf.InetdConf()
     conf.parseFile(open(config['file']))
 
-    rpcConf = inetdconf.RPCServicesConf()
-    try:
-        rpcConf.parseFile(open(config['rpc']))
-    except:
-        # We'll survive even if we can't read /etc/rpc
-        log.deferr()
-    
     for service in conf.services:
-        rpc = service.protocol.startswith('rpc/')
         protocol = service.protocol
 
-        if rpc and not rpcOk:
-            log.msg('Skipping rpc service due to lack of rpc support')
+        if service.protocol.startswith('rpc/'):
+            warnAboutFunction(
+                makeService,
+                'Skipping rpc service since RPC support it broken.')
             continue
 
-        if rpc:
-            # RPC has extra options, so extract that
-            protocol = protocol[4:]     # trim 'rpc/'
-            if not protocolDict.has_key(protocol):
-                log.msg('Bad protocol: ' + protocol)
-                continue
-            
-            try:
-                name, rpcVersions = service.name.split('/')
-            except ValueError:
-                log.msg('Bad RPC service/version: ' + service.name)
-                continue
-
-            if not rpcConf.services.has_key(name):
-                log.msg('Unknown RPC service: ' + repr(service.name))
-                continue
-
-            try:
-                if '-' in rpcVersions:
-                    start, end = map(int, rpcVersions.split('-'))
-                    rpcVersions = range(start, end+1)
-                else:
-                    rpcVersions = [int(rpcVersions)]
-            except ValueError:
-                log.msg('Bad RPC versions: ' + str(rpcVersions))
-                continue
-            
         if (protocol, service.socketType) not in [('tcp', 'stream'),
                                                   ('udp', 'dgram')]:
             log.msg('Skipping unsupported type/protocol: %s/%s'
@@ -148,12 +119,8 @@ def makeService(config):
                 continue
             factory = ServerFactory()
             factory.protocol = inetd.internalProtocols[service.name]
-        elif rpc:
-            i = RPCServer(rpcVersions, rpcConf, proto, service)
-            i.setServiceParent(s)
-            continue
         else:
-            # Non-internal non-rpc services use InetdFactory
+            # Non-internal services use InetdFactory
             factory = inetd.InetdFactory(service)
 
         if protocol == 'tcp':
diff --git twisted/runner/portmap.c twisted/runner/portmap.c
index ca0c1c9..b40554c 100644
--- twisted/runner/portmap.c
+++ twisted/runner/portmap.c
@@ -52,6 +52,12 @@ static PyMethodDef PortmapMethods[] = {
 
 void initportmap(void)
 {
+	PyErr_WarnEx(
+		PyExc_DeprecationWarning,
+		"twisted.runner.portmap has been deprecated in Twisted 14.0.0 "
+		"and will be removed.",
+		1
+	);
 	(void) Py_InitModule("portmap", PortmapMethods);
 }
 
diff --git twisted/runner/test/test_inetdtap.py twisted/runner/test/test_inetdtap.py
new file mode 100644
index 0000000..6f3a4b6
--- /dev/null
+++ twisted/runner/test/test_inetdtap.py
@@ -0,0 +1,76 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for L{twisted.runner.inetdtap}
+"""
+
+from twisted.trial import unittest
+from twisted.runner import inetdtap
+
+
+
+class InetdtapModuleTests(unittest.TestCase):
+    """
+    Tests for L{inetdtap} module.
+    """
+
+
+    def test_rpcOkDeprecation(self):
+        """
+        Attribute was deprecated.
+        """
+        inetdtap.rpcOk
+        warningsShown = self.flushWarnings()
+        self.assertEqual(1, len(warningsShown))
+        self.assertEqual(
+                'twisted.runner.inetdtap.rpcOk was deprecated in '
+                'Twisted 14.0.0: RPC is no longer supported.',
+                warningsShown[0]['message'])
+
+
+    def test_RPCServerDeprecation(self):
+        """
+        Class was deprecated.
+        """
+        inetdtap.RPCServer
+        warningsShown = self.flushWarnings()
+        self.assertEqual(1, len(warningsShown))
+        self.assertEqual(
+                'twisted.runner.inetdtap.RPCServer was deprecated in '
+                'Twisted 14.0.0: RPC is no longer supported.',
+                warningsShown[0]['message'])
+
+
+    def makeFile(self, content):
+        """
+        Create a new file.
+
+        @param content: Content to write in the new configuration file.
+        @type step: C{str}
+
+        @return: path to the new file.
+        """
+        path = self.mktemp()
+        file = open(path, 'w')
+        file.write(content)
+        file.close()
+        return path
+
+
+    def test_makeService_rpc(self):
+        """
+        RPC configuration is ignored and a warning is emitted.
+        """
+        config = inetdtap.Options()
+        config['file'] = self.makeFile(
+            'test stream rpc/tcp wait user /path/server arguments')
+
+        service = inetdtap.makeService(config)
+
+        self.assertEqual([], service.services)
+        warningsShown = self.flushWarnings()
+        self.assertEqual(1, len(warningsShown))
+        self.assertEqual(
+                'Skipping rpc service since RPC support it broken.',
+                warningsShown[0]['message'])
diff --git twisted/runner/test/test_portmap.py twisted/runner/test/test_portmap.py
new file mode 100644
index 0000000..090fce9
--- /dev/null
+++ twisted/runner/test/test_portmap.py
@@ -0,0 +1,27 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for L{twisted.runner.portmap}
+"""
+
+from twisted.trial import unittest
+from twisted.python.reflect import namedAny
+
+
+class PortmapTests(unittest.TestCase):
+    """
+    Tests for L{twisted.runner.portmap} module.
+    """
+
+    def test_importDeprecation(self):
+        """
+        Module was deprecated.
+        """
+        namedAny('twisted.runner.portmap')
+        warningsShown = self.flushWarnings()
+        self.assertEqual(1, len(warningsShown))
+        self.assertEqual(
+                'twisted.runner.portmap has been deprecated in Twisted 14.0.0 '
+                'and will be removed.',
+                warningsShown[0]['message'])
diff --git twisted/runner/topfiles/6873.removal twisted/runner/topfiles/6873.removal
new file mode 100644
index 0000000..d40b567
--- /dev/null
+++ twisted/runner/topfiles/6873.removal
@@ -0,0 +1 @@
+twisted.runner.portmap, twisted.runner.inetdtap.RPCServer and twisted.runner.inetdtap.rpcOk are now deprecated together with support for RPC services in inetd.conf files.
\ No newline at end of file
