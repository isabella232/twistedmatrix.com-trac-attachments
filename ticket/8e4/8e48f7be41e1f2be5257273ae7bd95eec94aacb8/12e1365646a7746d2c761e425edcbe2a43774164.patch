diff --git a/twisted/conch/endpoints.py b/twisted/conch/endpoints.py
index 37750d9..c987ac4 100644
--- a/twisted/conch/endpoints.py
+++ b/twisted/conch/endpoints.py
@@ -367,6 +367,9 @@ class _CommandTransport(SSHClientTransport):
 
     L{_CommandTransport} also knows how to set up a connection to an
     authentication agent if it is told where it can connect to one.
+
+    @ivar _userauth: The L{_UserAuth} instance which is in charge of the
+        overall authentication process.
     """
     # STARTING -> SECURING -> AUTHENTICATING -> CHANNELLING -> RUNNING
     _state = b'STARTING'
diff --git a/twisted/conch/test/test_endpoints.py b/twisted/conch/test/test_endpoints.py
index d548c29..8bcb76e 100644
--- a/twisted/conch/test/test_endpoints.py
+++ b/twisted/conch/test/test_endpoints.py
@@ -709,6 +709,46 @@ class NewConnectionTests(TestCase, SSHCommandClientEndpointTestsMixin):
             self.factory, self.reactor.tcpClients[0][2])
 
 
+    def loseConnectionToServer(self, server, client, protocol, pump):
+        """
+        Lose the connection to a server and pump the L{IOPump} sufficiently for
+        the client to handle the lost connection. Asserts that the client
+        disconnects its transport.
+
+        @param server: The SSH server protocol over which C{protocol} is
+            running.
+        @type server: L{IProtocol} provider
+
+        @param client: The SSH client protocol over which C{protocol} is
+            running.
+        @type client: L{IProtocol} provider
+
+        @param protocol: The protocol created by calling connect on the ssh
+            endpoint under test.
+        @type protocol: L{IProtocol} provider
+
+        @param pump: The L{IOPump} connecting client to server.
+        @type pump: L{IOPump}
+        """
+        closed = self.record(server, protocol, 'closed', noArgs=True)
+        protocol.transport.loseConnection()
+        pump.pump()
+        self.assertEqual([None], closed)
+
+        # Let the last bit of network traffic flow.  This lets the server's
+        # close acknowledgement through, at which point the client can close
+        # the overall SSH connection.
+        pump.pump()
+
+        # Nothing useful can be done with the connection at this point, so the
+        # endpoint should close it.
+        self.assertTrue(client.transport.disconnecting)
+
+        # Given that the client transport is disconnecting, report the
+        # disconnect from up to the ssh protocol.
+        client.transport.reportDisconnect()
+
+
     def assertClientTransportState(self, client, immediateClose):
         """
         Assert that the transport for the given protocol has been disconnected.
@@ -1104,7 +1144,8 @@ class NewConnectionTests(TestCase, SSHCommandClientEndpointTestsMixin):
         """
         If L{SSHCommandClientEndpoint} is initialized with an
         L{SSHAgentClient}, the agent is used to authenticate with the SSH
-        server.
+        server. Once the connection with the SSH server has concluded, the
+        connection to the agent is disconnected.
         """
         key = Key.fromString(privateRSA_openssh)
         agentServer = SSHAgentServer()
@@ -1137,17 +1178,9 @@ class NewConnectionTests(TestCase, SSHCommandClientEndpointTestsMixin):
         protocol = self.successResultOf(connected)
         self.assertIsNot(None, protocol.transport)
 
-        # Shut down the ssh connection between the client and the server.
-        protocol.transport.loseConnection()
-        pump.pump()
-        pump.pump()
-        self.assertTrue(client.transport.disconnecting)
-
-        # Report the disconnect back to the ssh protocol.
-        client.transport.reportDisconnect()
-        pump.pump()
-
-        # Verify that the transport connected to the agent is disconnected.
+        # Ensure the connection with the agent is cleaned up after the
+        # connection with the server is lost.
+        self.loseConnectionToServer(server, client, protocol, pump)
         self.assertTrue(agentEndpoint.pump.clientIO.disconnecting)
 
 
@@ -1167,19 +1200,7 @@ class NewConnectionTests(TestCase, SSHCommandClientEndpointTestsMixin):
         server, client, pump = self.finishConnection()
 
         protocol = self.successResultOf(connected)
-        closed = self.record(server, protocol, 'closed', noArgs=True)
-        protocol.transport.loseConnection()
-        pump.pump()
-        self.assertEqual([None], closed)
-
-        # Let the last bit of network traffic flow.  This lets the server's
-        # close acknowledgement through, at which point the client can close
-        # the overall SSH connection.
-        pump.pump()
-
-        # Nothing useful can be done with the connection at this point, so the
-        # endpoint should close it.
-        self.assertTrue(client.transport.disconnecting)
+        self.loseConnectionToServer(server, client, protocol, pump)
 
 
 
