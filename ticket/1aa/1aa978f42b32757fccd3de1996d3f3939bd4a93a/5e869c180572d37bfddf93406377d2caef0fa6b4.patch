# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: andrew@puzzling.org-20080713084019-hhqgv5d6pye8hgyw
# target_branch: file:///home/andrew/code/twisted-import-trunk/trunk/
# testament_sha1: fc3a7dd341a3112db7c3e18ec38b730c387bce95
# timestamp: 2008-07-13 18:40:41 +1000
# base_revision_id: svn-v3-trunk0:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:24262
# 
# Begin patch
=== modified file 'twisted/protocols/basic.py'
--- twisted/protocols/basic.py	2008-03-04 21:36:22 +0000
+++ twisted/protocols/basic.py	2008-07-13 08:40:19 +0000
@@ -225,7 +225,7 @@
             else:
                 linelength = len(line)
                 if linelength > self.MAX_LENGTH:
-                    exceeded = line + self.__buffer
+                    exceeded = line + self.delimiter + self.__buffer
                     self.__buffer = ''
                     return self.lineLengthExceeded(exceeded)
                 why = self.lineReceived(line)

=== modified file 'twisted/test/test_protocols.py'
--- twisted/test/test_protocols.py	2007-11-05 19:18:22 +0000
+++ twisted/test/test_protocols.py	2008-07-13 08:40:19 +0000
@@ -279,6 +279,35 @@
         self.assertEquals(a.received,
                           ['produce', 'hello world', 'unproduce', 'goodbye'])
 
+    def testLongLineWithDelimiter(self):
+        """
+        When MAX_LENGTH is exceeded *and* a delimiter has been received,
+        lineLengthExceeded is called with the right bytes.
+
+        See http://twistedmatrix.com/trac/ticket/3277
+        """
+        # Set up a line receiver with a short MAX_LENGTH that logs
+        # lineLengthExceeded events.
+        class LineReceiverThatRecords(basic.LineReceiver):
+            MAX_LENGTH = 10
+            def connectionMade(self):
+                self.calls = []
+            def lineReceived(self, line):
+                self.calls.append(('lineReceived', line))
+            def lineLengthExceeded(self, line):
+                self.calls.append(('lineLengthExceeded', line))
+        lineReceiver = LineReceiverThatRecords()
+        t = StringIOWithoutClosing()
+        lineReceiver.makeConnection(protocol.FileWrapper(t))
+        # Call dataReceived with two lines, the first longer than MAX_LENGTH.
+        longLine = ('x' * 11) + '\r\n'
+        nextLine = 'next line\r\n'
+        lineReceiver.dataReceived(longLine + nextLine)
+        # We expect lineLengthExceeded to be called with exactly what we just
+        # passed dataReceived.  lineReceived is not called.
+        expectedCalls = [('lineLengthExceeded', longLine + nextLine)]
+        self.assertEqual(expectedCalls, lineReceiver.calls)
+
 
 class LineOnlyReceiverTestCase(unittest.TestCase):
     """

# Begin bundle
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
