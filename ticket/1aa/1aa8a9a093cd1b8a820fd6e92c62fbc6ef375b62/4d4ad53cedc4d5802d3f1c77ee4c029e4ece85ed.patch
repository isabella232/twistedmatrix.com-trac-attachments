Index: twisted/protocols/amp.py
===================================================================
--- twisted/protocols/amp.py	(revision 18276)
+++ twisted/protocols/amp.py	(working copy)
@@ -1256,7 +1256,6 @@
     # These properties are described in startTLS
     certificate = _keyprop('tls_localCertificate', _NoCertificate(False))
     verify = _keyprop('tls_verifyAuthorities', None)
-    tlsstarted = _keyprop('tls_started', None)
 
     def _sendTo(self, proto):
         """
@@ -1264,13 +1263,10 @@
         """
         ab = AmpBox(self)
         for k in ['tls_localCertificate',
-                  'tls_verifyAuthorities',
-                  'tls_started']:
+                  'tls_verifyAuthorities']:
             ab.pop(k, None)
         ab._sendTo(proto)
         proto._startTLS(self.certificate, self.verify)
-        if self.tlsstarted is not None:
-            self.tlsstarted()
 
 
 
@@ -1301,11 +1297,6 @@
         twisted.internet.ssl.Certificate objects that will be used as the
         certificate authorities to verify our peer's certificate.
 
-        - tls_started: only available on the response side, you may pass a
-        0-arg callable which is called when the TLS connection is actually
-        initiated.  On the calling side, you get this notification as the
-        regular callRemote callback.
-
     Each of those special parameters may also be present as a key in the
     response dictionary.
     """
@@ -1314,8 +1305,7 @@
                  ("tls_verifyAuthorities", _LocalArgument(optional=True))]
 
     response = [("tls_localCertificate", _LocalArgument(optional=True)),
-                ("tls_verifyAuthorities", _LocalArgument(optional=True)),
-                ("tls_started", _LocalArgument(optional=True))]
+                ("tls_verifyAuthorities", _LocalArgument(optional=True))]
 
     responseType = _TLSBox
 
Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(revision 18276)
+++ twisted/test/test_amp.py	(working copy)
@@ -889,23 +889,17 @@
 
 class SecurableProto(FactoryNotifier):
 
-    serverStarted = 0
     factory = None
 
-    def sfunc(self):
-        self.serverStarted += 1
-
     def verifyFactory(self):
         return [PretendRemoteCertificateAuthority()]
 
     def getTLSVars(self):
         cert = self.certFactory()
         verify = self.verifyFactory()
-        started = self.sfunc
         return dict(
             tls_localCertificate=cert,
-            tls_verifyAuthorities=verify,
-            tls_started=started)
+            tls_verifyAuthorities=verify)
     amp.StartTLS.responder(getTLSVars)
 
 
@@ -923,21 +917,16 @@
         okc = OKCert()
         svr.certFactory = lambda : okc
 
-        # print c, c.transport
-        cli.callRemote(amp.StartTLS,
-                       tls_localCertificate=okc,
-                       tls_verifyAuthorities=[PretendRemoteCertificateAuthority()])
+        cli.callRemote(
+            amp.StartTLS, tls_localCertificate=okc,
+            tls_verifyAuthorities=[PretendRemoteCertificateAuthority()])
 
         # let's buffer something to be delivered securely
         L = []
         d = cli.callRemote(SecuredPing).addCallback(L.append)
         p.flush()
-        self.assertEquals(okc.verifyCount, 2) # once for client once for server
-        self.assertEquals(svr.serverStarted, 1)
-        # this is the server start func, make sure that it hasn't received a
-        # duplicate notification.
-        self.assertEquals(cli.serverStarted, 0)
-        # or for some insane reason been called in the wrong place
+        # once for client once for server
+        self.assertEquals(okc.verifyCount, 2) 
         L = []
         d = cli.callRemote(SecuredPing).addCallback(L.append)
         p.flush()
@@ -985,14 +974,8 @@
                        tls_localCertificate=badCert)
 
         p.flush()
-        self.assertEquals(badCert.verifyCount, 2) # once for client once for server - but both fail
-        self.assertEquals(svr.serverStarted, 1)   # this gets called, because
-                                                  # it's right after we TRY to
-                                                  # initiate SSL...
-        # this is the server start func, make sure that it hasn't received a
-        # duplicate notification.
-        self.assertEquals(cli.serverStarted, 0)
-        # or for some insane reason been called in the wrong place
+        # once for client once for server - but both fail
+        self.assertEquals(badCert.verifyCount, 2)
         d = cli.callRemote(SecuredPing)
         p.flush()
         self.assertFailure(d, iosim.OpenSSLVerifyError)
@@ -1015,10 +998,7 @@
         p.flush()
 
         self.assertEquals(droppyCert.verifyCount, 2)
-        self.assertEquals(svr.serverStarted, 1)
 
-        self.assertEquals(cli.serverStarted, 0)
-
         d = cli.callRemote(SecuredPing)
         p.flush()
 
