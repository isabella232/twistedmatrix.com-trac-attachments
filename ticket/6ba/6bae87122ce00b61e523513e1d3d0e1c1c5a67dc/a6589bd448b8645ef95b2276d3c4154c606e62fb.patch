diff --git a/twisted/test/test_paths.py b/twisted/test/test_paths.py
index a657f75..2923102 100644
--- a/twisted/test/test_paths.py
+++ b/twisted/test/test_paths.py
@@ -126,13 +126,13 @@ class AbstractFilePathTestCase(BytesTestCase):
         file, not as a symlink, and be listable.
         """
         sub1 = self.path.child(b'sub1')
-        self.failUnless(sub1.exists(),
+        self.assertTrue(sub1.exists(),
                         "This directory does exist.")
-        self.failUnless(sub1.isdir(),
+        self.assertTrue(sub1.isdir(),
                         "It's a directory.")
-        self.failUnless(not sub1.isfile(),
+        self.assertTrue(not sub1.isfile(),
                         "It's a directory.")
-        self.failUnless(not sub1.islink(),
+        self.assertTrue(not sub1.islink(),
                         "It's a directory.")
         self.assertEqual(sub1.listdir(),
                              [b'file2'])
@@ -143,7 +143,7 @@ class AbstractFilePathTestCase(BytesTestCase):
         Verify that a subdirectory that doesn't exist is reported as such.
         """
         sub2 = self.path.child(b'sub2')
-        self.failIf(sub2.exists(),
+        self.assertFalse(sub2.exists(),
                     "This directory does not exist.")
 
     def test_validFiles(self):
@@ -819,13 +819,13 @@ class FilePathTestCase(AbstractFilePathTestCase):
     def testMultiExt(self):
         f3 = self.path.child(b'sub3').child(b'file3')
         exts = b'.foo', b'.bar', b'ext1', b'ext2', b'ext3'
-        self.failIf(f3.siblingExtensionSearch(*exts))
+        self.assertFalse(f3.siblingExtensionSearch(*exts))
         f3e = f3.siblingExtension(b".foo")
         f3e.touch()
-        self.failIf(not f3.siblingExtensionSearch(*exts).exists())
-        self.failIf(not f3.siblingExtensionSearch(b'*').exists())
+        self.assertFalse(not f3.siblingExtensionSearch(*exts).exists())
+        self.assertFalse(not f3.siblingExtensionSearch(b'*').exists())
         f3e.remove()
-        self.failIf(f3.siblingExtensionSearch(*exts))
+        self.assertFalse(f3.siblingExtensionSearch(*exts))
 
     def testPreauthChild(self):
         fp = filepath.FilePath(b'.')
@@ -887,24 +887,24 @@ class FilePathTestCase(AbstractFilePathTestCase):
     def testComparison(self):
         self.assertEqual(filepath.FilePath(b'a'),
                           filepath.FilePath(b'a'))
-        self.failUnless(filepath.FilePath(b'z') >
+        self.assertTrue(filepath.FilePath(b'z') >
                         filepath.FilePath(b'a'))
-        self.failUnless(filepath.FilePath(b'z') >=
+        self.assertTrue(filepath.FilePath(b'z') >=
                         filepath.FilePath(b'a'))
-        self.failUnless(filepath.FilePath(b'a') >=
+        self.assertTrue(filepath.FilePath(b'a') >=
                         filepath.FilePath(b'a'))
-        self.failUnless(filepath.FilePath(b'a') <=
+        self.assertTrue(filepath.FilePath(b'a') <=
                         filepath.FilePath(b'a'))
-        self.failUnless(filepath.FilePath(b'a') <
+        self.assertTrue(filepath.FilePath(b'a') <
                         filepath.FilePath(b'z'))
-        self.failUnless(filepath.FilePath(b'a') <=
+        self.assertTrue(filepath.FilePath(b'a') <=
                         filepath.FilePath(b'z'))
-        self.failUnless(filepath.FilePath(b'a') !=
+        self.assertTrue(filepath.FilePath(b'a') !=
                         filepath.FilePath(b'z'))
-        self.failUnless(filepath.FilePath(b'z') !=
+        self.assertTrue(filepath.FilePath(b'z') !=
                         filepath.FilePath(b'a'))
 
-        self.failIf(filepath.FilePath(b'z') !=
+        self.assertFalse(filepath.FilePath(b'z') !=
                     filepath.FilePath(b'z'))
 
 
@@ -951,7 +951,7 @@ class FilePathTestCase(AbstractFilePathTestCase):
         recursively delete its contents.
         """
         self.path.remove()
-        self.failIf(self.path.exists())
+        self.assertFalse(self.path.exists())
 
 
     def test_removeWithSymlink(self):
@@ -1233,7 +1233,7 @@ class FilePathTestCase(AbstractFilePathTestCase):
         """
         path = filepath.FilePath(self.mktemp())
         f = path.create()
-        self.failUnless("b" in f.mode)
+        self.assertTrue("b" in f.mode)
         f.write(b"\n")
         f.close()
         read = open(path.path, "rb").read()
diff --git a/twisted/test/test_pb.py b/twisted/test/test_pb.py
index 4616708..f18805a 100644
--- a/twisted/test/test_pb.py
+++ b/twisted/test/test_pb.py
@@ -406,9 +406,9 @@ class NewStyleTestCase(unittest.TestCase):
         orig = NewStyleCopy("value")
         d = self.ref.callRemote("echo", orig)
         def cb(res):
-            self.failUnless(isinstance(res, NewStyleCopy))
+            self.assertTrue(isinstance(res, NewStyleCopy))
             self.assertEqual(res.s, "value")
-            self.failIf(res is orig) # no cheating :)
+            self.assertFalse(res is orig) # no cheating :)
         d.addCallback(cb)
         return d
 
@@ -422,11 +422,11 @@ class NewStyleTestCase(unittest.TestCase):
         d = self.ref.callRemote("echo", orig)
         def cb(res):
             # receiving the response creates a third one on the way back
-            self.failUnless(isinstance(res, NewStyleCopy2))
+            self.assertTrue(isinstance(res, NewStyleCopy2))
             self.assertEqual(res.value, 2)
             self.assertEqual(NewStyleCopy2.allocated, 3)
             self.assertEqual(NewStyleCopy2.initialized, 1)
-            self.failIf(res is orig) # no cheating :)
+            self.assertFalse(res is orig) # no cheating :)
         # sending the object creates a second one on the far side
         d.addCallback(cb)
         return d
diff --git a/twisted/test/test_pbfailure.py b/twisted/test/test_pbfailure.py
index 91cd6ba..f7b82a5 100644
--- a/twisted/test/test_pbfailure.py
+++ b/twisted/test/test_pbfailure.py
@@ -262,8 +262,8 @@ class PBFailureTest(PBConnTestCase):
         """
         def failureJelly(fail):
             fail.trap(JellyError)
-            self.failIf(isinstance(fail.type, str))
-            self.failUnless(isinstance(fail.value, fail.type))
+            self.assertFalse(isinstance(fail.type, str))
+            self.assertTrue(isinstance(fail.value, fail.type))
             return 43
         return self._testImpl('jelly', 43, failureJelly)
 
@@ -275,8 +275,8 @@ class PBFailureTest(PBConnTestCase):
         """
         def failureDeferredJelly(fail):
             fail.trap(JellyError)
-            self.failIf(isinstance(fail.type, str))
-            self.failUnless(isinstance(fail.value, fail.type))
+            self.assertFalse(isinstance(fail.type, str))
+            self.assertTrue(isinstance(fail.value, fail.type))
             return 430
         return self._testImpl('deferredJelly', 430, failureDeferredJelly)
 
@@ -314,8 +314,8 @@ class PBFailureTest(PBConnTestCase):
         """
         def failureSecurity(fail):
             fail.trap(SecurityError)
-            self.failIf(isinstance(fail.type, str))
-            self.failUnless(isinstance(fail.value, fail.type))
+            self.assertFalse(isinstance(fail.type, str))
+            self.assertTrue(isinstance(fail.value, fail.type))
             return 4300
         return self._testImpl('security', 4300, failureSecurity)
 
@@ -328,8 +328,8 @@ class PBFailureTest(PBConnTestCase):
         """
         def failureDeferredSecurity(fail):
             fail.trap(SecurityError)
-            self.failIf(isinstance(fail.type, str))
-            self.failUnless(isinstance(fail.value, fail.type))
+            self.assertFalse(isinstance(fail.type, str))
+            self.assertTrue(isinstance(fail.value, fail.type))
             return 43000
         return self._testImpl('deferredSecurity', 43000, failureDeferredSecurity)
 
diff --git a/twisted/test/test_pcp.py b/twisted/test/test_pcp.py
index 71de8bb..2e4b674 100644
--- a/twisted/test/test_pcp.py
+++ b/twisted/test/test_pcp.py
@@ -104,14 +104,14 @@ class ConsumerInterfaceTest:
     def testRegisterPush(self):
         self.consumer.registerProducer(self.producer, True)
         ## Consumer should NOT have called PushProducer.resumeProducing
-        self.failIf(self.producer.resumed)
+        self.assertFalse(self.producer.resumed)
 
     ## I'm I'm just a proxy, should I only do resumeProducing when
     ## I get poked myself?
     #def testRegisterPull(self):
     #    self.consumer.registerProducer(self.producer, False)
     #    ## Consumer SHOULD have called PushProducer.resumeProducing
-    #    self.failUnless(self.producer.resumed)
+    #    self.assertTrue(self.producer.resumed)
 
     def testUnregister(self):
         self.consumer.registerProducer(self.producer, False)
@@ -122,7 +122,7 @@ class ConsumerInterfaceTest:
         # a PullProducer and have someone ask me for data.
         self.producer.resumed = False
         self.consumer.resumeProducing()
-        self.failIf(self.producer.resumed)
+        self.assertFalse(self.producer.resumed)
 
     def testFinish(self):
         self.consumer.registerProducer(self.producer, False)
@@ -130,7 +130,7 @@ class ConsumerInterfaceTest:
         # I guess finish should behave like unregister?
         self.producer.resumed = False
         self.consumer.resumeProducing()
-        self.failIf(self.producer.resumed)
+        self.assertFalse(self.producer.resumed)
 
 
 class ProducerInterfaceTest:
@@ -152,7 +152,7 @@ class ProducerInterfaceTest:
     def testPause(self):
         self.producer.pauseProducing()
         self.producer.write("yakkity yak")
-        self.failIf(self.consumer.getvalue(),
+        self.assertFalse(self.consumer.getvalue(),
                     "Paused producer should not have sent data.")
 
     def testResume(self):
@@ -176,7 +176,7 @@ class ProducerInterfaceTest:
     def testStop(self):
         self.producer.stopProducing()
         self.producer.write("yakkity yak")
-        self.failIf(self.consumer.getvalue(),
+        self.assertFalse(self.consumer.getvalue(),
                     "Stopped producer should not have sent data.")
 
 
@@ -204,7 +204,7 @@ class ProducerProxyTest(unittest.TestCase):
 
     def testStop(self):
         self.proxy.stopProducing()
-        self.failUnless(self.parentProducer.stopped)
+        self.assertTrue(self.parentProducer.stopped)
 
 
 class ConsumerProxyTest(unittest.TestCase):
@@ -223,11 +223,11 @@ class ConsumerProxyTest(unittest.TestCase):
 
     def testFinish(self):
         self.consumer.finish()
-        self.failUnless(self.underlying.finished)
+        self.assertTrue(self.underlying.finished)
 
     def testUnregister(self):
         self.consumer.unregisterProducer()
-        self.failUnless(self.underlying.unregistered)
+        self.assertTrue(self.underlying.unregistered)
 
 
 class PullProducerTest:
@@ -240,7 +240,7 @@ class PullProducerTest:
     def testHoldWrites(self):
         self.proxy.write("hello")
         # Consumer should get no data before it says resumeProducing.
-        self.failIf(self.underlying.getvalue(),
+        self.assertFalse(self.underlying.getvalue(),
                     "Pulling Consumer got data before it pulled.")
 
     def testPull(self):
@@ -291,11 +291,11 @@ class BufferedConsumerTest(unittest.TestCase):
     def testRegisterPull(self):
         self.proxy.registerProducer(self.parentProducer, False)
         ## Consumer SHOULD have called PushProducer.resumeProducing
-        self.failUnless(self.parentProducer.resumed)
+        self.assertTrue(self.parentProducer.resumed)
 
     def testPauseIntercept(self):
         self.proxy.pauseProducing()
-        self.failIf(self.parentProducer.paused)
+        self.assertFalse(self.parentProducer.paused)
 
     def testResumeIntercept(self):
         self.proxy.pauseProducing()
@@ -303,30 +303,30 @@ class BufferedConsumerTest(unittest.TestCase):
         # With a streaming producer, just because the proxy was resumed is
         # not necessarily a reason to resume the parent producer.  The state
         # of the buffer should decide that.
-        self.failIf(self.parentProducer.resumed)
+        self.assertFalse(self.parentProducer.resumed)
 
     def testTriggerPause(self):
         """Make sure I say \"when.\""""
 
         # Pause the proxy so data sent to it builds up in its buffer.
         self.proxy.pauseProducing()
-        self.failIf(self.parentProducer.paused, "don't pause yet")
+        self.assertFalse(self.parentProducer.paused, "don't pause yet")
         self.proxy.write("x" * 51)
-        self.failIf(self.parentProducer.paused, "don't pause yet")
+        self.assertFalse(self.parentProducer.paused, "don't pause yet")
         self.proxy.write("x" * 51)
-        self.failUnless(self.parentProducer.paused)
+        self.assertTrue(self.parentProducer.paused)
 
     def testTriggerResume(self):
         """Make sure I resumeProducing when my buffer empties."""
         self.proxy.pauseProducing()
         self.proxy.write("x" * 102)
-        self.failUnless(self.parentProducer.paused, "should be paused")
+        self.assertTrue(self.parentProducer.paused, "should be paused")
         self.proxy.resumeProducing()
         # Resuming should have emptied my buffer, so I should tell my
         # parent to resume too.
-        self.failIf(self.parentProducer.paused,
+        self.assertFalse(self.parentProducer.paused,
                     "Producer should have resumed.")
-        self.failIf(self.proxy.producerPaused)
+        self.assertFalse(self.proxy.producerPaused)
 
 class BufferedPullTests(unittest.TestCase):
     class proxyClass(pcp.ProducerConsumerProxy):
@@ -349,7 +349,7 @@ class BufferedPullTests(unittest.TestCase):
         # some from its PullProducer.
         self.parentProducer.resumed = False
         self.proxy.resumeProducing()
-        self.failUnless(self.parentProducer.resumed)
+        self.assertTrue(self.parentProducer.resumed)
 
     def testLateWriteBuffering(self):
         # consumer sends its initial pull before we have data
diff --git a/twisted/test/test_persisted.py b/twisted/test/test_persisted.py
index 4a80791..9ffaf09 100644
--- a/twisted/test/test_persisted.py
+++ b/twisted/test/test_persisted.py
@@ -87,8 +87,8 @@ class VersionTestCase(unittest.TestCase):
         styles.doUpgrade()
         self.assertEqual(v1.unique, 'v1')
         self.assertEqual(v2.unique, 'v2')
-        self.failUnless(v1.upgraded)
-        self.failUnless(v2.upgraded)
+        self.assertTrue(v1.upgraded)
+        self.assertTrue(v2.upgraded)
     
     def testUpgradeDeserializesObjectsRequiringUpgrade(self):
         global ToyClassA, ToyClassB
@@ -110,7 +110,7 @@ class VersionTestCase(unittest.TestCase):
 
         x = pickle.loads(pklA)
         styles.doUpgrade()
-        self.failUnless(x.y.upgraded)
+        self.assertTrue(x.y.upgraded)
 
 
 
@@ -192,7 +192,7 @@ class EphemeralTestCase(unittest.TestCase):
         o = pickle.loads(pickl)
         
         self.assertEqual(o.__class__, styles.Ephemeral)
-        self.assert_(not hasattr(o, 'x'))
+        self.assertTrue(not hasattr(o, 'x'))
 
 
 class Pickleable:
diff --git a/twisted/test/test_plugin.py b/twisted/test/test_plugin.py
index c33ecf1..93e9766 100644
--- a/twisted/test/test_plugin.py
+++ b/twisted/test/test_plugin.py
@@ -178,8 +178,8 @@ class PluginTestCase(unittest.TestCase):
             ).copyTo(self.package.child('pluginextra.py'))
         try:
             # Check that the current situation is clean
-            self.failIfIn('mypackage.pluginextra', sys.modules)
-            self.failIf(hasattr(sys.modules['mypackage'], 'pluginextra'),
+            self.assertNotIn('mypackage.pluginextra', sys.modules)
+            self.assertFalse(hasattr(sys.modules['mypackage'], 'pluginextra'),
                         "mypackage still has pluginextra module")
 
             plgs = list(plugin.getPlugins(ITestPlugin, self.module))
@@ -262,7 +262,7 @@ class PluginTestCase(unittest.TestCase):
         C{__path__} which do not exist.
         """
         path = self.mktemp()
-        self.failIf(os.path.exists(path))
+        self.assertFalse(os.path.exists(path))
         # Add the test directory to the plugins path
         self.module.__path__.append(path)
         try:
@@ -280,7 +280,7 @@ class PluginTestCase(unittest.TestCase):
         C{__path__} which refer to children of paths which are not directories.
         """
         path = FilePath(self.mktemp())
-        self.failIf(path.exists())
+        self.assertFalse(path.exists())
         path.touch()
         child = path.child("test_package").path
         self.module.__path__.append(child)
@@ -523,10 +523,10 @@ class DeveloperSetupTests(unittest.TestCase):
         self.resetEnvironment()
         # Sanity check.
         self.assertIn('one', self.getAllPlugins())
-        self.failIfIn('two', self.getAllPlugins())
+        self.assertNotIn('two', self.getAllPlugins())
         self.resetEnvironment()
         mypath.setContent(pluginFileContents('two'))
-        self.failIfIn('one', self.getAllPlugins())
+        self.assertNotIn('one', self.getAllPlugins())
         self.assertIn('two', self.getAllPlugins())
 
 
diff --git a/twisted/test/test_policies.py b/twisted/test/test_policies.py
index 956cf19..5ea083f 100644
--- a/twisted/test/test_policies.py
+++ b/twisted/test/test_policies.py
@@ -509,11 +509,11 @@ class TimeoutTestCase(unittest.TestCase):
         """
         # Let almost 3 time units pass
         self.clock.pump([0.0, 0.5, 1.0, 1.0, 0.4])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Now let the timer elapse
         self.clock.pump([0.0, 0.2])
-        self.failUnless(self.proto.wrappedProtocol.disconnected)
+        self.assertTrue(self.proto.wrappedProtocol.disconnected)
 
 
     def test_sendAvoidsTimeout(self):
@@ -523,7 +523,7 @@ class TimeoutTestCase(unittest.TestCase):
         """
         # Let half the countdown period elapse
         self.clock.pump([0.0, 0.5, 1.0])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Send some data (self.proto is the /real/ proto's transport, so this
         # is the write that gets called)
@@ -531,18 +531,18 @@ class TimeoutTestCase(unittest.TestCase):
 
         # More time passes, putting us past the original timeout
         self.clock.pump([0.0, 1.0, 1.0])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Make sure writeSequence delays timeout as well
         self.proto.writeSequence([b'bytes'] * 3)
 
         # Tick tock
         self.clock.pump([0.0, 1.0, 1.0])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Don't write anything more, just let the timeout expire
         self.clock.pump([0.0, 2.0])
-        self.failUnless(self.proto.wrappedProtocol.disconnected)
+        self.assertTrue(self.proto.wrappedProtocol.disconnected)
 
 
     def test_receiveAvoidsTimeout(self):
@@ -551,19 +551,19 @@ class TimeoutTestCase(unittest.TestCase):
         """
         # Let half the countdown period elapse
         self.clock.pump([0.0, 1.0, 0.5])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Some bytes arrive, they should reset the counter
         self.proto.dataReceived(b'bytes bytes bytes')
 
         # We pass the original timeout
         self.clock.pump([0.0, 1.0, 1.0])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Nothing more arrives though, the new timeout deadline is passed,
         # the connection should be dropped.
         self.clock.pump([0.0, 1.0, 1.0])
-        self.failUnless(self.proto.wrappedProtocol.disconnected)
+        self.assertTrue(self.proto.wrappedProtocol.disconnected)
 
 
 
@@ -652,9 +652,9 @@ class TestTimeout(unittest.TestCase):
 
         # timeOut value is 3
         self.clock.pump([0, 0.5, 1.0, 1.0])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
         self.clock.pump([0, 1.0])
-        self.failUnless(self.proto.timedOut)
+        self.assertTrue(self.proto.timedOut)
 
 
     def test_noTimeout(self):
@@ -664,12 +664,12 @@ class TestTimeout(unittest.TestCase):
         self.proto.makeConnection(StringTransport())
 
         self.clock.pump([0, 0.5, 1.0, 1.0])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
         self.proto.dataReceived(b'hello there')
         self.clock.pump([0, 1.0, 1.0, 0.5])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
         self.clock.pump([0, 1.0])
-        self.failUnless(self.proto.timedOut)
+        self.assertTrue(self.proto.timedOut)
 
 
     def test_resetTimeout(self):
@@ -684,9 +684,9 @@ class TestTimeout(unittest.TestCase):
         self.assertEqual(self.proto.timeOut, 1)
 
         self.clock.pump([0, 0.9])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
         self.clock.pump([0, 0.2])
-        self.failUnless(self.proto.timedOut)
+        self.assertTrue(self.proto.timedOut)
 
 
     def test_cancelTimeout(self):
@@ -700,7 +700,7 @@ class TestTimeout(unittest.TestCase):
         self.assertEqual(self.proto.timeOut, None)
 
         self.clock.pump([0, 5, 5, 5])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
 
 
     def test_return(self):
@@ -814,7 +814,7 @@ class LoggingFactoryTestCase(unittest.TestCase):
 
         v = f.openFile.getvalue()
         self.assertIn('*', v)
-        self.failIf(t.value())
+        self.assertFalse(t.value())
 
         p.dataReceived(b'here are some bytes')
 
diff --git a/twisted/test/test_process.py b/twisted/test/test_process.py
index 9d766cb..f32e03c 100644
--- a/twisted/test/test_process.py
+++ b/twisted/test/test_process.py
@@ -514,7 +514,7 @@ class ProcessTestCase(unittest.TestCase):
         scriptPath = util.sibpath(__file__, "process_echoer.py")
         procTrans = reactor.spawnProcess(p, exe,
                                     [exe, scriptPath], env=None)
-        self.failUnless(procTrans.pid)
+        self.assertTrue(procTrans.pid)
 
         def afterProcessEnd(ignored):
             self.assertEqual(procTrans.pid, None)
@@ -593,8 +593,8 @@ class ProcessTestCase(unittest.TestCase):
         reactor.spawnProcess(p, exe, [exe, scriptPath], env=None)
 
         def asserts(ignored):
-            self.failIf(p.failure, p.failure)
-            self.failUnless(hasattr(p, 'buffer'))
+            self.assertFalse(p.failure, p.failure)
+            self.assertTrue(hasattr(p, 'buffer'))
             self.assertEqual(len(''.join(p.buffer)), len(p.s * p.n))
 
         def takedownProcess(err):
@@ -788,7 +788,7 @@ class TestTwoProcessesBase:
         if self.verbose: print "closing stdin [%d]" % num
         p = self.processes[num]
         pp = self.pp[num]
-        self.failIf(pp.finished, "Process finished too early")
+        self.assertFalse(pp.finished, "Process finished too early")
         p.loseConnection()
         if self.verbose: print self.pp[0].finished, self.pp[1].finished
 
@@ -821,7 +821,7 @@ class TestTwoProcessesPosix(TestTwoProcessesBase, unittest.TestCase):
         if self.verbose: print "kill [%d] with SIGTERM" % num
         p = self.processes[num]
         pp = self.pp[num]
-        self.failIf(pp.finished, "Process finished too early")
+        self.assertFalse(pp.finished, "Process finished too early")
         os.kill(p.pid, signal.SIGTERM)
         if self.verbose: print self.pp[0].finished, self.pp[1].finished
 
@@ -938,7 +938,7 @@ class FDTest(unittest.TestCase):
                              path=None,
                              childFDs={0:"w", 1:"r", 2:2,
                                        3:"w", 4:"r", 5:"w"})
-        d.addCallback(lambda x : self.failIf(p.failed, p.failed))
+        d.addCallback(lambda x : self.assertFalse(p.failed, p.failed))
         return d
 
     def testLinger(self):
@@ -1650,7 +1650,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=False)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(
                 self.mockos.actions, [("fork", False), "exec", "exit"])
         else:
@@ -1715,7 +1715,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=True)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(
                 self.mockos.actions, [("fork", False), "exec", "exit"])
         else:
@@ -1825,7 +1825,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=False)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(
                 self.mockos.actions, [("fork", False), "exec", "exit"])
             # Check that fd have been closed
@@ -1851,7 +1851,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=False, uid=8080)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(self.mockos.actions,
                 [('setuid', 0), ('setgid', 0), ('fork', False),
                   ('switchuid', 8080, 1234), 'exec', 'exit'])
@@ -1890,7 +1890,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=True, uid=8081)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(self.mockos.actions,
                 [('setuid', 0), ('setgid', 0), ('fork', False),
                   ('switchuid', 8081, 1234), 'exec', 'exit'])
@@ -2054,7 +2054,7 @@ class MockProcessTestCase(unittest.TestCase):
         self.mockos.raiseKill = OSError(errno.EINVAL, "Invalid signal")
         err = self.assertRaises(OSError,
                                 proc.signalProcess, "KILL")
-        self.assertEquals(err.errno, errno.EINVAL)
+        self.assertEqual(err.errno, errno.EINVAL)
 
 
 
