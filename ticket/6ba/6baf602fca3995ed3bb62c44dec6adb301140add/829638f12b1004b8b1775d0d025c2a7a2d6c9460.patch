# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130302164358-ok1or8rwl13y4oo7
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: 01591c377cc8595c40a782b9af315412b7004b91
# timestamp: 2013-03-02 17:44:55 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:37359
# 
# Begin patch
=== modified file 'twisted/internet/_sslverify.py'
--- twisted/internet/_sslverify.py	2013-02-14 22:21:31 +0000
+++ twisted/internet/_sslverify.py	2013-03-02 16:43:58 +0000
@@ -742,6 +742,8 @@
 
     def _makeContext(self):
         ctx = SSL.Context(self.method)
+        # Disallow insecure SSLv2. Applies only for SSLv23_METHOD.
+        ctx.set_options(SSL.OP_NO_SSLv2)
 
         if self.certificate is not None and self.privateKey is not None:
             ctx.use_certificate(self.certificate)

=== modified file 'twisted/test/test_sslverify.py'
--- twisted/test/test_sslverify.py	2013-02-14 22:21:31 +0000
+++ twisted/test/test_sslverify.py	2013-03-02 16:43:58 +0000
@@ -539,6 +539,17 @@
                 lambda result: self.assertEqual(result, WritingProtocol.byte))
 
 
+    def test_SSLv2IsDisabledForSSLv23(self):
+        """
+        SSLv2 is insecure and should be disabled so when users use
+        SSLv23_METHOD, they get at least SSLV3.  It does nothing if
+        SSLv2_METHOD chosen explicitly.
+        """
+        opts = sslverify.OpenSSLCertificateOptions()
+        ctx = opts.getContext()
+        self.assertEqual(SSL.OP_NO_SSLv2, ctx.set_options(0) & SSL.OP_NO_SSLv2)
+
+
 
 if interfaces.IReactorSSL(reactor, None) is None:
     OpenSSLOptions.skip = "Reactor does not support SSL, cannot run SSL tests"

=== added file 'twisted/topfiles/6337.bugfix'
--- twisted/topfiles/6337.bugfix	1970-01-01 00:00:00 +0000
+++ twisted/topfiles/6337.bugfix	2013-03-02 16:43:58 +0000
@@ -0,0 +1,1 @@
+SSLv2 is disabled now if SSLv23_METHOD is chosen for CertificateOptions.

# Begin bundle
IyBCYXphYXIgcmV2aXNpb24gYnVuZGxlIHY0CiMKQlpoOTFBWSZTWWHl7/IAAwrfgEQQW2f/939n
zQC/7//wUAWs3q0Bq7nW1VFWtVu0JJJpoVPyU/KfqaaNMmUE0wnqAbRGgGjagkpMp6T0aZCmIaBp
oAAAA0AAkUySanhU/Kj09U9EegmnqHqAAAZBo0HMAmAmRgBGJiYTCYIaYmmAkkKbTIAJkaU9U/Qm
jSbKNM1AaYDSaOkSGVFUa8E9vt5mwt1XjsKX2d3CqV7pgrw9D3j0KjAs7bpJWdszTWgCiRfwar18
DhGm2zp+qP3NkUyeUYkFaVgymYn79nXl18uvny4jisuien037nWulE+W1nV2XMw1XlWVOezkk5Jw
2bRTfLO4q2s2W41GE6maudaJwib5gkUMgdSYiYbap7H0ffgfmV3Ww16AsTMFmCpBTBX5LviwRB2A
Yi9sbZU1+CfbUpJFThUDVeq4fkuyALHNgTp5vlcCvBXjnAvAF6O1qyRlN6TWq49V9lba1LpxDB3M
bm4FtYLze7abd9tI5y3MzfjpYC3ArCzEmItkhlYfbuqowDSgY9ZmCsGP2yZuM+5jRcDBUEx4/68W
MBH4OWH4yObjJg5Aq8+QLYlrHzDJqMshnlmlhUnVi8UiZcUEAVpsMbsEKZc0LvtYCkC38QTwUisv
4nQsFUWCLFWcWkHREzpqCmXxKlSWqkvOR/xERdSw6ZNyMNDAKCO5REPgPLtn2SBUqUVohrQYNxzO
wRXLdqw0nFZU3FEzMQyrcooiWnAoMR1BjvsnIwgn3E4DaImnr5mQjIeIyO0rEYhoy0nRyinAZOWF
RugSMiJbBODBUDy1qy2SJmJEoBbywFLHMvKJsEUwGtgTUGjCmdZDBG4vLB5WTstfdAFkIhAfmCuo
KaiuEYxjYVaGIvZm+UZ8UNS17qItpeyc3SukBFEOxyForLkW0zBXJe9ZtnozRsTZivIojv7VvszG
zHypF9pgmNj+3nntfoOS2afmFGiMGF5BS6PkIPul9Q9i8k1ZaqBBH3HFxl8b1G9w4pTQNMty/qxW
hkMeLFQ2fKiX8HzPx7h1A7dBIYzYb38Jag9oLx8LO2XAXHvk1K3fDG2lBz1cZW8Bvd4vmXuOQ41P
As6isFpI1NkeSTwXiQYweCyK6Qn0rqR5Mcr9JQTAsTujbpy3Q9kR1A1XY9pzkSOTiTAVAsOp9xoV
sC85H2jxjgCmjeVIdfuklT8aqCqkFVdtBX6pCY5guWjvt1dBO4XN+rcrtQLIoixpqQNioF3HoZjg
eliI4mrhep0AW2R54EUnuvLc3guSLSyYZmWiDZ+TisLM8Q8UyKo65pUpE4h5mfLc22ZJr9Kag0C5
oAVzTlllJpdeYkrzI7DNX4ApmzCoX+Wair7lrkDnJkpM0n9PWtR0GIFG/Egof4dwMqMMEom3TMbn
j4eKTPjkYA4ilSIcQ94qeeQ+C4V2Q0ioCZfvQMdYtaWv12KhRfcx1CMjYC4C50KoQ3yJom8NefZ1
CoZZvTqDrKtWpmSAt15FYuO87vDMhOKmdiKBDzUlRR+OBQc2QKuoYQKQZOcnMhlxugIp5SEbRF3z
cHf6hFJl5j2xtN4jogKRYOW42xc7D5pGNOLJkODhOfik88ZoQGY7xew6HvgdfWnIDtmQQT7bwjsy
VKZaPveiEAXAQ5bSTNSm5rwftSOLoB0tDkmN/LURln2HS8IrKsTlYHpakDdbpJ8RPgBSlIE+ML3v
emOeEIZVlQVFAOpRLCq6Fgz1xAuh67XesTjDK7AVwYAWAe1D3JcCvOLFsKO9UCjhJnohXVokqEsY
qUdhUZS3pViGxVgihIeOkgyKoveHrHwvSdWI0UECyIVf4u5IpwoSDDy9/kA=
