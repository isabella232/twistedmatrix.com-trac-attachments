# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130302210803-0lhj8ze3dcwolzdo
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: a050ecd59ebf20b6d2368a8e708d68c4d0c783bc
# timestamp: 2013-03-02 22:09:46 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:37359
# 
# Begin patch
=== modified file 'twisted/internet/_sslverify.py'
--- twisted/internet/_sslverify.py	2013-02-14 22:21:31 +0000
+++ twisted/internet/_sslverify.py	2013-03-02 16:43:58 +0000
@@ -742,6 +742,8 @@
 
     def _makeContext(self):
         ctx = SSL.Context(self.method)
+        # Disallow insecure SSLv2. Applies only for SSLv23_METHOD.
+        ctx.set_options(SSL.OP_NO_SSLv2)
 
         if self.certificate is not None and self.privateKey is not None:
             ctx.use_certificate(self.certificate)

=== modified file 'twisted/test/test_sslverify.py'
--- twisted/test/test_sslverify.py	2013-02-14 22:21:31 +0000
+++ twisted/test/test_sslverify.py	2013-03-02 16:43:58 +0000
@@ -539,6 +539,17 @@
                 lambda result: self.assertEqual(result, WritingProtocol.byte))
 
 
+    def test_SSLv2IsDisabledForSSLv23(self):
+        """
+        SSLv2 is insecure and should be disabled so when users use
+        SSLv23_METHOD, they get at least SSLV3.  It does nothing if
+        SSLv2_METHOD chosen explicitly.
+        """
+        opts = sslverify.OpenSSLCertificateOptions()
+        ctx = opts.getContext()
+        self.assertEqual(SSL.OP_NO_SSLv2, ctx.set_options(0) & SSL.OP_NO_SSLv2)
+
+
 
 if interfaces.IReactorSSL(reactor, None) is None:
     OpenSSLOptions.skip = "Reactor does not support SSL, cannot run SSL tests"

=== added file 'twisted/topfiles/6337.bugfix'
--- twisted/topfiles/6337.bugfix	1970-01-01 00:00:00 +0000
+++ twisted/topfiles/6337.bugfix	2013-03-02 21:08:03 +0000
@@ -0,0 +1,1 @@
+twisted.internet.ssl.CertificateOptions now disables SSLv2 if SSLv23 is selected, allowing only SSLv3 and TLSv1.

# Begin bundle
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
