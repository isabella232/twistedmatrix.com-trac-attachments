Index: twisted/lore/test/test_indexer.py
===================================================================
--- twisted/lore/test/test_indexer.py	(revision 0)
+++ twisted/lore/test/test_indexer.py	(revision 0)
@@ -0,0 +1,16 @@
+"""
+Tests to verify the behavior of the indexer module.
+"""
+from twisted.lore.indexer import Index
+from twisted.trial.unittest import TestCase
+
+class TestIndexer(TestCase):
+    def test_entry(self):
+        """
+        Creates an Index object and adds an entry to it. Then
+        it makes sure that it is added correctly.
+        """
+
+        index = Index()
+        index.addEntry("file", "anchor", "text", "ref")
+        self.assertEquals(index.entries, {'text': [("file", "anchor", "ref")]})
Index: twisted/lore/indexer.py
===================================================================
--- twisted/lore/indexer.py	(revision 20303)
+++ twisted/lore/indexer.py	(working copy)
@@ -1,7 +1,36 @@
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+This module accumulates entries for the index file during processing and
+outputs an HTML index once it's done.
+"""
 
+class Index:
+    """
+    This keeps track of and format an index html page
+    """
+
+    def __init__(self):
+        """
+        Create an index object.
+        """
+        self.entries = {}
+
+    def addEntry(self, filename, anchor, text, reference):
+        """
+        Adds an entry to the index.
+        @param filename: the filename of the entry
+        @type filename: L{str}
+        @param anchor: the # part of the url
+        @param text: the term that is indexed
+        @param reference: the link text
+        """
+        if text not in self.entries:
+            self.entries[text] = []
+        self.entries[text].append((filename, anchor, reference))
+
+
 def setIndexFilename(filename='index.xhtml'):
     global indexFilename
     indexFilename = filename
Index: twisted/lore/scripts/lore.py
===================================================================
--- twisted/lore/scripts/lore.py	(revision 20303)
+++ twisted/lore/scripts/lore.py	(working copy)
@@ -1,6 +1,10 @@
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+Command-line main point for the "lore" documentation generation program.
+"""
+
 import sys
 
 from zope.interface import Interface, Attribute
Index: twisted/lore/latex.py
===================================================================
--- twisted/lore/latex.py	(revision 20303)
+++ twisted/lore/latex.py	(working copy)
@@ -1,6 +1,8 @@
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.
-
+"""
+This module includes support for generating LaTeX from a Lore+HTML DOM.
+"""
 #
 
 from twisted.web import microdom, domhelpers
Index: twisted/lore/process.py
===================================================================
--- twisted/lore/process.py	(revision 20303)
+++ twisted/lore/process.py	(working copy)
@@ -1,7 +1,11 @@
 # -*- test-case-name: twisted.lore.test.test_lore -*-
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.
-
+"""
+This module implements filesystem tree-walking and progress-reporting,
+allowing Lore to run a particular documentation generation function on any part
+of the tree.
+"""
 #
 import sys, os
 import tree #todo: get rid of this later
Index: twisted/lore/default.py
===================================================================
--- twisted/lore/default.py	(revision 20303)
+++ twisted/lore/default.py	(working copy)
@@ -1,6 +1,11 @@
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+This module provides generation functions for HTML and LaTeX, suitable for
+use by the path-walking utility in process.py.
+"""
+
 #
 from __future__ import nested_scopes
 
