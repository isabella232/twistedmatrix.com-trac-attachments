diff --git a/doc/core/benchmarks/test_for_monotonic_clock.py b/doc/core/benchmarks/test_for_monotonic_clock.py
new file mode 100644
index 0000000..4cb63e2
--- /dev/null
+++ b/doc/core/benchmarks/test_for_monotonic_clock.py
@@ -0,0 +1,14 @@
+print '''\
+After starting this program, adjust your system clock
+forward. If Twisted is using monoclock.nano_count(),
+you will see no interruption in the counter below.
+'''
+
+from twisted.internet import reactor
+
+def start(n):
+    print n
+    reactor.callLater(1, start, n + 1)
+
+reactor.callWhenRunning(start, 0)
+reactor.run()
diff --git a/twisted/protocols/sip.py b/twisted/protocols/sip.py
index 07d10a9..8be723c 100644
--- a/twisted/protocols/sip.py
+++ b/twisted/protocols/sip.py
@@ -1300,7 +1300,7 @@ class InMemoryRegistry:
             return defer.fail(LookupError("unknown domain"))
         if self.users.has_key(userURI.username):
             dc, url = self.users[userURI.username]
-            return defer.succeed(Registration(int(dc.getTime() - time.time()), url))
+            return defer.succeed(Registration(int(dc.getTime() - dc.seconds()), url))
         else:
             return defer.fail(LookupError("no such user"))
 
@@ -1328,7 +1328,7 @@ class InMemoryRegistry:
             dc = reactor.callLater(3600, self._expireRegistration, logicalURL.username)
         log.msg("Registered %s at %s" % (logicalURL.toString(), physicalURL.toString()))
         self.users[logicalURL.username] = (dc, physicalURL)
-        return defer.succeed(Registration(int(dc.getTime() - time.time()), physicalURL))
+        return defer.succeed(Registration(int(dc.getTime() - dc.seconds()), physicalURL))
 
     def unregisterAddress(self, domainURL, logicalURL, physicalURL):
         return self._expireRegistration(logicalURL.username)
diff --git a/twisted/python/runtime.py b/twisted/python/runtime.py
index 94958ca..251ab14 100644
--- a/twisted/python/runtime.py
+++ b/twisted/python/runtime.py
@@ -3,12 +3,22 @@
 # See LICENSE for details.
 
 
-# System imports
 import os
 import sys
 import time
 import imp
 
+from twisted.python import log
+
+# If a monotonic clock is available, use it.
+try:
+    from monoclock import nano_count
+    _defaultTimeFunc = lambda: nano_count() / 1e9
+except ImportError:
+    log.msg('Danger: monotonic clock not available; '
+        'DelayedCalls may be affected by system time jumps.')
+    _defaultTimeFunc = time.time
+
 
 def shortPythonVersion():
     hv = sys.hexversion
@@ -34,12 +44,12 @@ class Platform:
     """Gives us information about the platform we're running on"""
 
     type = knownPlatforms.get(os.name)
-    seconds = staticmethod(_timeFunctions.get(type, time.time))
+    seconds = staticmethod(_timeFunctions.get(type, _defaultTimeFunc))
 
     def __init__(self, name=None):
         if name is not None:
             self.type = knownPlatforms.get(name)
-            self.seconds = _timeFunctions.get(self.type, time.time)
+            self.seconds = _timeFunctions.get(self.type, _defaultTimeFunc)
 
     def isKnown(self):
         """Do we know about this platform?"""
diff --git a/twisted/test/test_internet.py b/twisted/test/test_internet.py
index 8b4d6f3..0702b18 100644
--- a/twisted/test/test_internet.py
+++ b/twisted/test/test_internet.py
@@ -783,7 +783,11 @@ class TimeTestCase(unittest.TestCase):
     def testCallLaterTime(self):
         d = reactor.callLater(10, lambda: None)
         try:
-            self.failUnless(d.getTime() - (time.time() + 10) < 1)
+            callTime = d.getTime()
+            timeNow = d.seconds()
+            self.assertTrue(callTime >= 0, callTime)
+            self.assertTrue(callTime - (timeNow + 10) < 1,
+                dict(callTime=callTime, timeNow=timeNow))
         finally:
             d.cancel()
 
