Index: twisted/protocols/basic.py
===================================================================
--- twisted/protocols/basic.py	(revision 38689)
+++ twisted/protocols/basic.py	(working copy)
@@ -481,7 +481,7 @@
         Called when the maximum line length has been reached.
         Override if it needs to be dealt with in some special way.
         """
-        return error.ConnectionLost('Line length exceeded')
+        return self.transport.loseConnection() 
 
 
 
Index: twisted/protocols/test/test_basic.py
===================================================================
--- twisted/protocols/test/test_basic.py	(revision 38689)
+++ twisted/protocols/test/test_basic.py	(working copy)
@@ -128,27 +128,6 @@
 
 
 
-class LineOnlyTester(basic.LineOnlyReceiver):
-    """
-    A buffering line only receiver.
-    """
-    delimiter = b'\n'
-    MAX_LENGTH = 64
-
-    def connectionMade(self):
-        """
-        Create/clean data received on connection.
-        """
-        self.received = []
-
-
-    def lineReceived(self, line):
-        """
-        Save received data.
-        """
-        self.received.append(line)
-
-
 class LineReceiverTestCase(unittest.SynchronousTestCase):
     """
     Test L{twisted.protocols.basic.LineReceiver}, using the C{LineTester}
@@ -359,6 +338,27 @@
 
 
 
+class LineOnlyTester(basic.LineOnlyReceiver):
+    """
+    A buffering line only receiver.
+    """
+    delimiter = b'\n'
+    MAX_LENGTH = 64
+
+    def connectionMade(self):
+        """
+        Create/clean data received on connection.
+        """
+        self.received = []
+
+
+    def lineReceived(self, line):
+        """
+        Save received data.
+        """
+        self.received.append(line)
+
+
 class LineOnlyReceiverTestCase(unittest.SynchronousTestCase):
     """
     Tests for L{twisted.protocols.basic.LineOnlyReceiver}.
@@ -381,15 +381,16 @@
         self.assertEqual(a.received, self.buffer.split(b'\n')[:-1])
 
 
-    def test_lineTooLong(self):
+    def test_greaterThanMaximumLineLength(self):
         """
-        Test sending a line too long: it should close the connection.
+        C{LineOnlyReceiver} disconnects the transport if it receives a
+        line longer than its C{MAX_LENGTH} + len(delimiter).
         """
-        t = proto_helpers.StringTransport()
-        a = LineOnlyTester()
-        a.makeConnection(t)
-        res = a.dataReceived(b'x' * 200)
-        self.assertIsInstance(res, error.ConnectionLost)
+        proto = LineOnlyTester()
+        transport = proto_helpers.StringTransport()
+        proto.makeConnection(transport)
+        proto.dataReceived(b'x' * (proto.MAX_LENGTH + len(proto.delimiter) + 1) + b'\r\nr')
+        self.assertTrue(transport.disconnecting)
 
 
     def test_lineReceivedNotImplemented(self):
