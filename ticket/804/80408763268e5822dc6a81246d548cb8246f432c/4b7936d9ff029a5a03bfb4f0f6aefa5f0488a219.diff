--- C:/Users/BRMA/AppData/Local/Temp/reactor.py-revBASE.svn004.tmp.py	Tue Oct 11 05:01:26 2011
+++ E:/Workspace/svn/Twisted/twisted/internet/iocpreactor/reactor.py	Thu Dec 27 08:49:08 2012
@@ -94,25 +94,24 @@
         # here and GetQueuedCompletionStatus in a thread. Or I could poll with
         # a reasonable interval. Guess what! Threads are hard.
 
-        processed_events = 0
         if timeout is None:
             timeout = MAX_TIMEOUT
         else:
             timeout = min(MAX_TIMEOUT, int(1000*timeout))
-        rc, bytes, key, evt = self.port.getEvent(timeout)
-        while 1:
-            if rc == WAIT_TIMEOUT:
-                break
-            if key != KEY_WAKEUP:
-                assert key == KEY_NORMAL
-                log.callWithLogger(evt.owner, self._callEventCallback,
-                                   rc, bytes, evt)
-                processed_events += 1
-            if processed_events >= EVENTS_PER_LOOP:
-                break
-            rc, bytes, key, evt = self.port.getEvent(0)
+        # pull all the existing events
+        events = []
+        event = self.port.getEvent(timeout)
+        while event[0] != WAIT_TIMEOUT:
+            if event[2] == KEY_NORMAL:
+                events.append(event)
+            event = self.port.getEvent(0)
 
+        #process them
+        for (rc, bytes, key, evt) in events:
+            log.callWithLogger(evt.owner, self._callEventCallback,
+                               rc, bytes, evt)
 
+
     def _callEventCallback(self, rc, bytes, evt):
         owner = evt.owner
         why = None
