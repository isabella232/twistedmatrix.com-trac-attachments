diff --git twisted/test/crash_test_dummy.py twisted/test/crash_test_dummy.py
index d6a96e0..5a30bd4 100644
--- twisted/test/crash_test_dummy.py
+++ twisted/test/crash_test_dummy.py
@@ -4,7 +4,7 @@
 
 
 from twisted.python import components
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 def foo():
     return 2
@@ -24,8 +24,8 @@ class XComponent(components.Componentized):
 class IX(Interface):
     pass
 
-@implementer(IX)
 class XA(components.Adapter):
+    implements(IX)
 
     def method(self):
         # Kick start :(
diff --git twisted/test/iosim.py twisted/test/iosim.py
index 1a17740..afa80f9 100644
--- twisted/test/iosim.py
+++ twisted/test/iosim.py
@@ -13,7 +13,7 @@ try:
 except ImportError:
     pass
 
-from zope.interface import implementer, directlyProvides
+from zope.interface import implements, directlyProvides
 
 from twisted.python.failure import Failure
 from twisted.internet import error
@@ -38,8 +38,6 @@ class TLSNegotiation:
             tpt.loseConnection()
 
 
-@implementer(interfaces.ITransport,
-               interfaces.ITLSTransport) # ha ha not really
 class FakeTransport:
     """
     A wrapper around a file-like object to make it behave as a Transport.
@@ -47,6 +45,8 @@ class FakeTransport:
     This doesn't actually stream the file to the attached protocol,
     and is thus useful mainly as a utility for debugging protocols.
     """
+    implements(interfaces.ITransport,
+               interfaces.ITLSTransport) # ha ha not really
 
     _nextserial = itertools.count().next
     closed = 0
diff --git twisted/test/plugin_basic.py twisted/test/plugin_basic.py
index 0265961..a4c297b 100644
--- twisted/test/plugin_basic.py
+++ twisted/test/plugin_basic.py
@@ -8,43 +8,49 @@ I'm a test drop-in.  The plugin system's unit tests use me.  No one
 else should.
 """
 
-from zope.interface import provider
+from zope.interface import classProvides
 
 from twisted.plugin import IPlugin
 from twisted.test.test_plugin import ITestPlugin, ITestPlugin2
 
 
 
-@provider(ITestPlugin, IPlugin)
 class TestPlugin:
     """
     A plugin used solely for testing purposes.
     """
 
+    classProvides(ITestPlugin,
+                  IPlugin)
+
     def test1():
         pass
     test1 = staticmethod(test1)
 
 
 
-@provider(ITestPlugin2, IPlugin)
 class AnotherTestPlugin:
     """
     Another plugin used solely for testing purposes.
     """
 
+    classProvides(ITestPlugin2,
+                  IPlugin)
+
     def test():
         pass
     test = staticmethod(test)
 
 
 
-@provider(ITestPlugin2, IPlugin)
 class ThirdTestPlugin:
     """
     Another plugin used solely for testing purposes.
     """
 
+    classProvides(ITestPlugin2,
+                  IPlugin)
+
     def test():
         pass
     test = staticmethod(test)
diff --git twisted/test/plugin_extra1.py twisted/test/plugin_extra1.py
index ef28a43..9e4c8d4 100644
--- twisted/test/plugin_extra1.py
+++ twisted/test/plugin_extra1.py
@@ -6,15 +6,16 @@
 Test plugin used in L{twisted.test.test_plugin}.
 """
 
-from zope.interface import provider
+from zope.interface import classProvides
 
 from twisted.plugin import IPlugin
 from twisted.test.test_plugin import ITestPlugin
 
 
 
-@provider(ITestPlugin, IPlugin)
 class FourthTestPlugin:
+    classProvides(ITestPlugin,
+                  IPlugin)
 
     def test1():
         pass
diff --git twisted/test/plugin_extra2.py twisted/test/plugin_extra2.py
index e92c057..a6b3f09 100644
--- twisted/test/plugin_extra2.py
+++ twisted/test/plugin_extra2.py
@@ -6,15 +6,16 @@
 Test plugin used in L{twisted.test.test_plugin}.
 """
 
-from zope.interface import provider
+from zope.interface import classProvides
 
 from twisted.plugin import IPlugin
 from twisted.test.test_plugin import ITestPlugin
 
 
 
-@provider(ITestPlugin, IPlugin)
 class FourthTestPlugin:
+    classProvides(ITestPlugin,
+                  IPlugin)
 
     def test1():
         pass
@@ -22,11 +23,12 @@ class FourthTestPlugin:
 
 
 
-@provider(ITestPlugin, IPlugin)
 class FifthTestPlugin:
     """
     More documentation: I hate you.
     """
+    classProvides(ITestPlugin,
+                  IPlugin)
 
     def test1():
         pass
diff --git twisted/test/process_twisted.py twisted/test/process_twisted.py
index c1110e5..2071090 100644
--- twisted/test/process_twisted.py
+++ twisted/test/process_twisted.py
@@ -12,7 +12,7 @@ sys.path.insert(0, os.curdir)
 
 
 from twisted.python import log
-from zope.interface import implementer
+from zope.interface import implements
 from twisted.internet import interfaces
 
 log.startLogging(sys.stderr)
@@ -20,8 +20,8 @@ log.startLogging(sys.stderr)
 from twisted.internet import protocol, reactor, stdio
 
 
-@implementer(interfaces.IHalfCloseableProtocol)
 class Echo(protocol.Protocol):
+    implements(interfaces.IHalfCloseableProtocol)
     
     def connectionMade(self):
         print "connection made"
diff --git twisted/test/proto_helpers.py twisted/test/proto_helpers.py
index 3384d63..d5d053c 100644
--- twisted/test/proto_helpers.py
+++ twisted/test/proto_helpers.py
@@ -9,7 +9,7 @@ Assorted functionality which is commonly useful when writing unit tests.
 from socket import AF_INET, AF_INET6
 from StringIO import StringIO
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet.interfaces import (
     ITransport, IConsumer, IPushProducer, IConnector)
@@ -98,7 +98,6 @@ class FakeDatagramTransport:
         self.written.append((packet, addr))
 
 
-@implementer(ITransport, IConsumer, IPushProducer)
 class StringTransport:
     """
     A transport implementation which buffers data in memory and keeps track of
@@ -134,6 +133,7 @@ class StringTransport:
         transport since the last call to L{clear}.  Use L{value} instead of
         accessing this directly.
     """
+    implements(ITransport, IConsumer, IPushProducer)
 
     disconnecting = False
 
@@ -267,7 +267,6 @@ class StringIOWithoutClosing(StringIO):
 
 
 
-@implementer(IListeningPort)
 class _FakePort(object):
     """
     A fake L{IListeningPort} to be used in tests.
@@ -275,6 +274,7 @@ class _FakePort(object):
     @ivar _hostAddress: The L{IAddress} this L{IListeningPort} is pretending
         to be listening on.
     """
+    implements(IListeningPort)
 
     def __init__(self, hostAddress):
         """
@@ -304,7 +304,6 @@ class _FakePort(object):
 
 
 
-@implementer(IConnector)
 class _FakeConnector(object):
     """
     A fake L{IConnector} that allows us to inspect if it has been told to stop
@@ -315,6 +314,7 @@ class _FakeConnector(object):
 
     @ivar _address: An L{IAddress} provider that represents our destination.
     """
+    implements(IConnector)
 
     stoppedConnecting = False
 
@@ -355,7 +355,6 @@ class _FakeConnector(object):
 
 
 
-@implementer(IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket)
 class MemoryReactor(object):
     """
     A fake reactor to be used in tests.  This reactor doesn't actually do
@@ -389,6 +388,7 @@ class MemoryReactor(object):
     @ivar adoptedPorts: a list that keeps track of server listen attempts (ie,
         calls to C{adoptStreamPort}).
     """
+    implements(IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket)
 
     def __init__(self):
         """
@@ -489,7 +489,6 @@ class MemoryReactor(object):
 
 
 
-@implementer(IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket)
 class RaisingMemoryReactor(object):
     """
     A fake reactor to be used in tests.  It accepts TCP connection setup
@@ -498,6 +497,7 @@ class RaisingMemoryReactor(object):
     @ivar _listenException: An instance of an L{Exception}
     @ivar _connectException: An instance of an L{Exception}
     """
+    implements(IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket)
 
     def __init__(self, listenException=None, connectException=None):
         """
diff --git twisted/test/stdio_test_halfclose.py twisted/test/stdio_test_halfclose.py
index 0aaa43a..b80a8f9 100644
--- twisted/test/stdio_test_halfclose.py
+++ twisted/test/stdio_test_halfclose.py
@@ -11,20 +11,20 @@ transports.
 
 import sys, _preamble
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet.interfaces import IHalfCloseableProtocol
 from twisted.internet import stdio, protocol
 from twisted.python import reflect, log
 
 
-@implementer(IHalfCloseableProtocol)
 class HalfCloseProtocol(protocol.Protocol):
     """
     A protocol to hook up to stdio and observe its transport being
     half-closed.  If all goes as expected, C{exitCode} will be set to C{0};
     otherwise it will be set to C{1} to indicate failure.
     """
+    implements(IHalfCloseableProtocol)
 
     exitCode = None
 
diff --git twisted/test/test_amp.py twisted/test/test_amp.py
index 101affd..325af40 100644
--- twisted/test/test_amp.py
+++ twisted/test/test_amp.py
@@ -9,7 +9,7 @@ Tests for L{twisted.protocols.amp}.
 import datetime
 import decimal
 
-from zope.interface import implementer
+from zope.interface import implements
 from zope.interface.verify import verifyClass, verifyObject
 
 from twisted.python.util import setIDFunction
@@ -2947,7 +2947,6 @@ class ListOfOptionalTests(unittest.TestCase):
 
 
 
-@implementer(interfaces.IUNIXTransport)
 class UNIXStringTransport(object):
     """
     An in-memory implementation of L{interfaces.IUNIXTransport} which collects
@@ -2957,6 +2956,7 @@ class UNIXStringTransport(object):
         eg via C{write} or C{sendFileDescriptor}.  Elements are two-tuples of a
         string (identifying the destination of the data) and the data itself.
     """
+    implements(interfaces.IUNIXTransport)
 
     def __init__(self, descriptorFuzz):
         """
diff --git twisted/test/test_ftp.py twisted/test/test_ftp.py
index 359259c..23ffcba 100644
--- twisted/test/test_ftp.py
+++ twisted/test/test_ftp.py
@@ -10,7 +10,7 @@ import errno
 from StringIO import StringIO
 import getpass
 
-from zope.interface import implementer
+from zope.interface import implements
 from zope.interface.verify import verifyClass
 
 from twisted.trial import unittest, util
@@ -2868,7 +2868,6 @@ class FTPShellTestCase(unittest.TestCase, IFTPShellTestsMixin):
 
 
 
-@implementer(IConsumer)
 class TestConsumer(object):
     """
     A simple consumer for tests. It only works with non-streaming producers.
@@ -2876,6 +2875,8 @@ class TestConsumer(object):
     @ivar producer: an object providing
         L{twisted.internet.interfaces.IPullProducer}.
     """
+
+    implements(IConsumer)
     producer = None
 
     def registerProducer(self, producer, streaming):
@@ -3031,8 +3032,8 @@ class FTPReadWriteTestCase(unittest.TestCase, IReadWriteTestsMixin):
         return self.root.child(self.filename).getContent()
 
 
-@implementer(ftp.IWriteFile)
 class CloseTestWriter:
+    implements(ftp.IWriteFile)
     closeStarted = False
     def receive(self):
         self.s = StringIO()
diff --git twisted/test/test_loopback.py twisted/test/test_loopback.py
index 3eb54ea..f09908f 100644
--- twisted/test/test_loopback.py
+++ twisted/test/test_loopback.py
@@ -5,7 +5,7 @@
 Test case for L{twisted.protocols.loopback}.
 """
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.trial import unittest
 from twisted.trial.util import suppress as SUPPRESS
@@ -248,8 +248,8 @@ class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
         """
         Test a push producer registered against a loopback transport.
         """
-        @implementer(IPushProducer)
         class PushProducer(object):
+            implements(IPushProducer)
             resumed = False
 
             def __init__(self, toProduce):
@@ -283,8 +283,8 @@ class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
         """
         Test a pull producer registered against a loopback transport.
         """
-        @implementer(IPullProducer)
         class PullProducer(object):
+            implements(IPullProducer)
 
             def __init__(self, toProduce):
                 self.toProduce = toProduce
diff --git twisted/test/test_newcred.py twisted/test/test_newcred.py
index fd4fbfa..01660cd 100644
--- twisted/test/test_newcred.py
+++ twisted/test/test_newcred.py
@@ -7,7 +7,7 @@ Tests for L{twisted.cred}, now with 30% more starch.
 
 
 import hmac
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 from twisted.trial import unittest
 from twisted.cred import portal, checkers, credentials, error
@@ -44,9 +44,8 @@ class TestAvatar:
     def logout(self):
         self.loggedOut = True
 
-@implementer(ITestable)
 class Testable(components.Adapter):
-    pass
+    implements(ITestable)
 
 # components.Interface(TestAvatar).adaptWith(Testable, ITestable)
 
@@ -55,8 +54,8 @@ components.registerAdapter(Testable, TestAvatar, ITestable)
 class IDerivedCredentials(credentials.IUsernamePassword):
     pass
 
-@implementer(IDerivedCredentials, ITestable)
 class DerivedCredentials(object):
+    implements(IDerivedCredentials, ITestable)
 
     def __init__(self, username, password):
         self.username = username
@@ -66,8 +65,8 @@ class DerivedCredentials(object):
         return password == self.password
 
 
-@implementer(portal.IRealm)
 class TestRealm:
+    implements(portal.IRealm)
     def __init__(self):
         self.avatars = {}
 
diff --git twisted/test/test_pb.py twisted/test/test_pb.py
index b2e3fe0..4616708 100644
--- twisted/test/test_pb.py
+++ twisted/test/test_pb.py
@@ -14,7 +14,7 @@ only specific tests for old API.
 import sys, os, time, gc, weakref
 
 from cStringIO import StringIO
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 from twisted.trial import unittest
 from twisted.spread import pb, util, publish, jelly
@@ -44,8 +44,8 @@ class DummyPerspective(pb.Avatar):
 
 
 
-@implementer(portal.IRealm)
 class DummyRealm(object):
+    implements(portal.IRealm)
 
     def requestAvatar(self, avatarId, mind, *interfaces):
         for iface in interfaces:
@@ -1062,7 +1062,6 @@ class LocalRemoteTest(util.LocalAsRemote):
 
 
 
-@implementer(pb.IPerspective)
 class MyPerspective(pb.Avatar):
     """
     @ivar loggedIn: set to C{True} when the avatar is logged in.
@@ -1071,6 +1070,7 @@ class MyPerspective(pb.Avatar):
     @ivar loggedOut: set to C{True} when the avatar is logged out.
     @type loggedOut: C{bool}
     """
+    implements(pb.IPerspective)
 
     loggedIn = loggedOut = False
 
@@ -1630,8 +1630,8 @@ class NewCredTestCase(unittest.TestCase):
 
 
 
-@implementer(pb.IPerspective)
 class NonSubclassingPerspective:
+    implements(pb.IPerspective)
 
     def __init__(self, avatarId):
         pass
@@ -1703,7 +1703,6 @@ class IForwarded(Interface):
         """
 
 
-@implementer(IForwarded)
 class Forwarded:
     """
     Test implementation of L{IForwarded}.
@@ -1713,6 +1712,7 @@ class Forwarded:
     @ivar unforwarded: set if C{dontForwardMe} is called.
     @type unforwarded: C{bool}
     """
+    implements(IForwarded)
     forwarded = False
     unforwarded = False
 
diff --git twisted/test/test_policies.py twisted/test/test_policies.py
index f5e6669..3cdf096 100644
--- twisted/test/test_policies.py
+++ twisted/test/test_policies.py
@@ -5,7 +5,7 @@
 Test code for policies.
 """
 
-from zope.interface import Interface, implementer, implementedBy
+from zope.interface import Interface, implements, implementedBy
 
 from StringIO import StringIO
 
@@ -144,9 +144,8 @@ class WrapperTestCase(unittest.TestCase):
         class IStubTransport(Interface):
             pass
 
-        @implementer(IStubTransport)
         class StubTransport:
-            pass
+            implements(IStubTransport)
 
         # Looking up what ProtocolWrapper implements also mutates the class.
         # It adds __implemented__ and __providedBy__ attributes to it.  These
diff --git twisted/test/test_sip.py twisted/test/test_sip.py
index aead81c..73f09d4 100644
--- twisted/test/test_sip.py
+++ twisted/test/test_sip.py
@@ -16,7 +16,7 @@ from twisted import cred
 import twisted.cred.portal
 import twisted.cred.checkers
 
-from zope.interface import implementer
+from zope.interface import implements
 
 
 # request, prefixed by random CRLFs
@@ -421,13 +421,13 @@ class ParseTestCase(unittest.TestCase):
             self.assertEqual(gparams, params)
 
 
-@implementer(sip.ILocator)
 class DummyLocator:
+    implements(sip.ILocator)
     def getAddress(self, logicalURL):
         return defer.succeed(sip.URL("server.com", port=5060))
 
-@implementer(sip.ILocator)
 class FailingLocator:
+    implements(sip.ILocator)
     def getAddress(self, logicalURL):
         return defer.fail(LookupError())
 
diff --git twisted/test/test_tcp.py twisted/test/test_tcp.py
index c12c825..aac8888 100644
--- twisted/test/test_tcp.py
+++ twisted/test/test_tcp.py
@@ -7,7 +7,7 @@ Tests for implementations of L{IReactorTCP}.
 
 import socket, random, errno
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.trial import unittest
 
@@ -989,7 +989,6 @@ class WriteDataTestCase(unittest.TestCase):
         self.addCleanup(port.stopListening)
         addr = port.getHost()
 
-        @implementer(IPullProducer)
         class Infinite(object):
             """
             A producer which will write to its consumer as long as
@@ -997,6 +996,7 @@ class WriteDataTestCase(unittest.TestCase):
 
             @ivar consumer: The L{IConsumer} which will be written to.
             """
+            implements(IPullProducer)
 
             def __init__(self, consumer):
                 self.consumer = consumer
@@ -1435,9 +1435,10 @@ class LargeBufferTestCase(unittest.TestCase):
         return d.addCallback(check)
 
 
-@implementer(IHalfCloseableProtocol)
 class MyHCProtocol(AccumulatingProtocol):
 
+    implements(IHalfCloseableProtocol)
+
     readHalfClosed = False
     writeHalfClosed = False
 
diff --git twisted/test/test_twistd.py twisted/test/test_twistd.py
index 2f9b7a3..d8ae688 100644
--- twisted/test/test_twistd.py
+++ twisted/test/test_twistd.py
@@ -19,7 +19,7 @@ try:
 except ImportError:
     import pickle
 
-from zope.interface import implementer
+from zope.interface import implements
 from zope.interface.verify import verifyObject
 
 from twisted.trial import unittest
@@ -494,8 +494,8 @@ class ApplicationRunnerTest(unittest.TestCase):
                 pass
 
 
-        @implementer(service.IService, service.IProcess)
         class FakeService(object):
+            implements(service.IService, service.IProcess)
 
             processName = None
             uid = None
@@ -831,13 +831,14 @@ class FakeNonDaemonizingReactor(object):
 
 
 
-@implementer(IReactorDaemonize)
 class FakeDaemonizingReactor(FakeNonDaemonizingReactor):
     """
     A dummy reactor, providing C{beforeDaemonize} and C{afterDaemonize} methods,
     announcing this, and logging whether the methods have been called.
     """
 
+    implements(IReactorDaemonize)
+
 
 
 class ReactorDaemonizationTests(unittest.TestCase):
