Index: twisted/test/test_factories.py
===================================================================
--- twisted/test/test_factories.py	(revision 30600)
+++ twisted/test/test_factories.py	(working copy)
@@ -107,6 +107,26 @@
         self.assertEquals(f.allMessages, [Out.msgs] * 2)
         self.failIf(c.continueTrying, "stopTrying never called or ineffective")
 
+    def test_stopTryingDoesNotReconnect(self):
+        """
+        Calling stopTrying on a L{ReconnectingClientFactory} doesn't attempt a
+        retry on any active connector.
+        """
+        class StateAwareReconnectingClientFactory(ReconnectingClientFactory):
+            def retry(self, connector=None):
+                # we're only interested in our internal state
+                self.attempted_retry = self.continueTrying
+        f = StateAwareReconnectingClientFactory()
+        class FactoryAwareFakeConnector(FakeConnector):
+            def stopConnecting(self):
+                f.clientConnectionFailed(self, None)
+        f.attempted_retry = 0       # a retry has never been attempted
+        # simulate an active connection - stopConnecting on this connector should
+        # be triggered when we call stopTrying
+        f.connector = FactoryAwareFakeConnector()
+        f.stopTrying()
+        # make sure we never attempted to retry
+        self.assertTrue(f.attempted_retry == 0)
 
     def test_serializeUnused(self):
         """
@@ -129,7 +149,6 @@
         reconstituted = pickle.loads(pickle.dumps(original))
         self.assertIdentical(reconstituted.clock, None)
 
-
     def test_deserializationResetsParameters(self):
         """
         A L{ReconnectingClientFactory} which is unpickled does not have an
Index: twisted/internet/protocol.py
===================================================================
--- twisted/internet/protocol.py	(revision 30600)
+++ twisted/internet/protocol.py	(working copy)
@@ -387,6 +387,7 @@
         if self._callID:
             self._callID.cancel()
             self._callID = None
+        self.continueTrying = 0
         if self.connector:
             # Hopefully this doesn't just make clientConnectionFailed
             # retry again.
@@ -394,7 +395,6 @@
                 self.connector.stopConnecting()
             except error.NotConnectingError:
                 pass
-        self.continueTrying = 0
 
 
     def resetDelay(self):
