=== added file 'doc/web/howto/listings/iteration-1.py'
--- doc/web/howto/listings/iteration-1.py	1970-01-01 00:00:00 +0000
+++ doc/web/howto/listings/iteration-1.py	2011-10-01 23:49:11 +0000
@@ -0,0 +1,16 @@
+from twisted.web.template import Element, renderer, XMLFile, flattenString
+
+class WidgetsElement(Element):
+    loader = XMLFile('iteration-1.xml')
+
+    widgetData = ['gadget', 'contraption', 'gizmo', 'doohickey']
+
+    @renderer
+    def widgets(self, request, tag):
+        for widget in self.widgetData:
+            yield tag.clone().fillSlots(widgetName=widget)
+
+def printResult(result):
+    print result
+
+flattenString(None, WidgetsElement()).addCallback(printResult)

=== added file 'doc/web/howto/listings/iteration-1.xml'
--- doc/web/howto/listings/iteration-1.xml	1970-01-01 00:00:00 +0000
+++ doc/web/howto/listings/iteration-1.xml	2011-10-01 23:49:11 +0000
@@ -0,0 +1,3 @@
+<ul xmlns:t="http://twistedmatrix.com/ns/twisted.web.template/0.1">
+    <li t:render="widgets"><t:slot name="widgetName"/></li>
+</ul>

=== added file 'doc/web/howto/listings/iteration-output-1.xml'
--- doc/web/howto/listings/iteration-output-1.xml	1970-01-01 00:00:00 +0000
+++ doc/web/howto/listings/iteration-output-1.xml	2011-10-01 23:49:11 +0000
@@ -0,0 +1,3 @@
+<ul>
+    <li>gadget</li><li>contraption</li><li>gizmo</li><li>doohickey</li>
+</ul>

=== modified file 'doc/web/howto/twisted-templates.xhtml'
--- doc/web/howto/twisted-templates.xhtml	2011-03-21 13:17:42 +0000
+++ doc/web/howto/twisted-templates.xhtml	2011-10-01 23:49:11 +0000
@@ -134,8 +134,6 @@
 conveniently fill with multiple pieces of data straight from your Python
 program.
 
-<h3>A nice example of Slots and Attributes</h3>
-
 The following example demonstrates both <code>t:attr</code>
 and <code>t:slot</code> in action. Here we have a layout which displays a person's
 profile on your snazzy new Twisted-powered social networking site. We use
@@ -152,6 +150,24 @@
 <a href="listings/slots-attributes-output.html"
     class="html-listing">slots and attributes output</a>
 
+<h3>Iteration</h3>
+
+<p>Often, you will have a sequence of things, and want to render each of them,
+repeating a part of the template for each one. This can be done by
+cloning <code>tag</code> in your renderer:</p>
+
+<a href="listings/iteration-1.xml" class="html-listing">iteration template</a>
+<a href="listings/iteration-1.py" class="py-listing">iteration element</a>
+<a href="listings/iteration-output-1.xml" class="html-listing">iteration output</a>
+
+<p>This renderer works because a renderer can return anything that can be
+rendered, not just <code>tag</code>. In this case, we define a generator, which
+returns a thing that is iterable. We also could have returned
+a <code>list</code>. Anything that is iterable will be rendered by <code
+    class="API">twisted.web.template</code> rendering each item in it. In
+this case, each item is a copy of the tag the renderer received, each filled
+with the name of a widget.</p>
+
 <h3>Transparent</h3>
 
 Note how renderers, slots and attributes require you to specify a renderer on

=== modified file 'twisted/application/service.py'
--- twisted/application/service.py	2011-09-12 12:10:04 +0000
+++ twisted/application/service.py	2011-10-01 23:49:11 +0000
@@ -106,7 +106,8 @@
 
     def setServiceParent(parent):
         """
-        Set the parent of the service.
+        Set the parent of the service.  This method is responsible for setting
+        the C{parent} attribute on this service (the child service).
 
         @type parent: L{IServiceCollection}
         @raise RuntimeError: Raised if the service already has a parent
@@ -122,7 +123,7 @@
         sets the C{parent} attribute on the child.
 
         @rtype: L{Deferred<defer.Deferred>}
-        @return: a L{Deferred<defer.Deferred>} which is triggered when the 
+        @return: a L{Deferred<defer.Deferred>} which is triggered when the
             service has finished shutting down. If shutting down is immediate,
             a value can be returned (usually, C{None}).
         """
@@ -137,7 +138,7 @@
         Stop the service.
 
         @rtype: L{Deferred<defer.Deferred>}
-        @return: a L{Deferred<defer.Deferred>} which is triggered when the 
+        @return: a L{Deferred<defer.Deferred>} which is triggered when the
             service has finished shutting down. If shutting down is immediate,
             a value can be returned (usually, C{None}).
         """
@@ -228,6 +229,9 @@
         """
         Add a child service.
 
+        Only implementations of L{IService.setServiceParent} should use this
+        method.
+
         @type service: L{IService}
         @raise RuntimeError: Raised if the service has a child with
             the given name.
@@ -243,7 +247,7 @@
         @type service: L{IService}
         @raise ValueError: Raised if the given service is not a child.
         @rtype: L{Deferred<defer.Deferred>}
-        @return: a L{Deferred<defer.Deferred>} which is triggered when the 
+        @return: a L{Deferred<defer.Deferred>} which is triggered when the
             service has finished shutting down. If shutting down is immediate,
             a value can be returned (usually, C{None}).
         """
@@ -333,13 +337,13 @@
         """
         An C{int} giving the user id as which the process should run (or
         C{None} to leave the UID alone).
-        """)    
+        """)
 
     gid = Attribute(
         """
         An C{int} giving the group id as which the process should run (or
         C{None} to leave the GID alone).
-        """)    
+        """)
 
 
 

=== modified file 'twisted/protocols/basic.py'
--- twisted/protocols/basic.py	2011-02-14 04:45:15 +0000
+++ twisted/protocols/basic.py	2011-10-01 23:49:11 +0000
@@ -11,7 +11,7 @@
 
 # System imports
 import re
-import struct
+from struct import pack, unpack, calcsize
 import warnings
 import cStringIO
 import math
@@ -647,12 +647,36 @@
 
 
 
+class _RecvdCompatHack(object):
+    """
+    Emulates the to-be-deprecated C{IntNStringReceiver.recvd} attribute.
+
+    The C{recvd} attribute was where the working buffer for buffering and
+    parsing netstrings was kept.  It was updated each time new data arrived and
+    each time some of that data was parsed and delivered to application code.
+    The piecemeal updates to its string value were expensive and have been
+    removed from C{IntNStringReceiver} in the normal case.  However, for
+    applications directly reading this attribute, this descriptor restores that
+    behavior.  It only copies the working buffer when necessary (ie, when
+    accessed).  This avoids the cost for applications not using the data.
+
+    This is a custom descriptor rather than a property, because we still need
+    the default __set__ behavior in both new-style and old-style subclasses.
+    """
+    def __get__(self, oself, type=None):
+        return oself._unprocessed[oself._compatibilityOffset:]
+
+
+
 class IntNStringReceiver(protocol.Protocol, _PauseableMixin):
     """
     Generic class for length prefixed protocols.
 
-    @ivar recvd: buffer holding received data when splitted.
-    @type recvd: C{str}
+    @ivar _unprocessed: bytes received, but not yet broken up into messages /
+        sent to stringReceived.  _compatibilityOffset must be updated when this
+        value is updated so that the C{recvd} attribute can be generated
+        correctly.
+    @type _unprocessed: C{bytes}
 
     @ivar structFormat: format used for struct packing/unpacking. Define it in
         subclass.
@@ -661,9 +685,19 @@
     @ivar prefixLength: length of the prefix, in bytes. Define it in subclass,
         using C{struct.calcsize(structFormat)}
     @type prefixLength: C{int}
+
+    @ivar _compatibilityOffset: the offset within C{_unprocessed} to the next
+        message to be parsed. (used to generate the recvd attribute)
+    @type _compatibilityOffset: C{int}
     """
+
     MAX_LENGTH = 99999
-    recvd = ""
+    _unprocessed = ""
+    _compatibilityOffset = 0
+
+    # Backwards compatibility support for applications which directly touch the
+    # "internal" parse buffer.
+    recvd = _RecvdCompatHack()
 
     def stringReceived(self, string):
         """
@@ -688,23 +722,55 @@
         self.transport.loseConnection()
 
 
-    def dataReceived(self, recd):
+    def dataReceived(self, data):
         """
         Convert int prefixed strings into calls to stringReceived.
         """
-        self.recvd = self.recvd + recd
-        while len(self.recvd) >= self.prefixLength and not self.paused:
-            length ,= struct.unpack(
-                self.structFormat, self.recvd[:self.prefixLength])
+        # Try to minimize string copying (via slices) by keeping one buffer
+        # containing all the data we have so far and a separate offset into that
+        # buffer.
+        alldata = self._unprocessed + data
+        currentOffset = 0
+        prefixLength = self.prefixLength
+        fmt = self.structFormat
+        self._unprocessed = alldata
+
+        while len(alldata) >= (currentOffset + prefixLength) and not self.paused:
+            messageStart = currentOffset + prefixLength
+            length, = unpack(fmt, alldata[currentOffset:messageStart])
             if length > self.MAX_LENGTH:
+                self._unprocessed = alldata
+                self._compatibilityOffset = currentOffset
                 self.lengthLimitExceeded(length)
                 return
-            if len(self.recvd) < length + self.prefixLength:
+            messageEnd = messageStart + length
+            if len(alldata) < messageEnd:
                 break
-            packet = self.recvd[self.prefixLength:length + self.prefixLength]
-            self.recvd = self.recvd[length + self.prefixLength:]
+
+            # Here we have to slice the working buffer so we can send just the
+            # netstring into the stringReceived callback.
+            packet = alldata[messageStart:messageEnd]
+            currentOffset = messageEnd
+            self._compatibilityOffset = currentOffset
             self.stringReceived(packet)
 
+            # Check to see if the backwards compat "recvd" attribute got written
+            # to by application code.  If so, drop the current data buffer and
+            # switch to the new buffer given by that attribute's value.
+            if 'recvd' in self.__dict__:
+                alldata = self.__dict__.pop('recvd')
+                self._unprocessed = alldata
+                self._compatibilityOffset = currentOffset = 0
+                if alldata:
+                    continue
+                return
+
+        # Slice off all the data that has been processed, avoiding holding onto
+        # memory to store it, and update the compatibility attributes to reflect
+        # that change.
+        self._unprocessed = alldata[currentOffset:]
+        self._compatibilityOffset = 0
+
 
     def sendString(self, string):
         """
@@ -719,7 +785,7 @@
                 "Try to send %s bytes whereas maximum is %s" % (
                 len(string), 2 ** (8 * self.prefixLength)))
         self.transport.write(
-            struct.pack(self.structFormat, len(string)) + string)
+            pack(self.structFormat, len(string)) + string)
 
 
 
@@ -733,7 +799,7 @@
     This class publishes the same interface as NetstringReceiver.
     """
     structFormat = "!I"
-    prefixLength = struct.calcsize(structFormat)
+    prefixLength = calcsize(structFormat)
 
 
 
@@ -747,7 +813,7 @@
     This class publishes the same interface as NetstringReceiver.
     """
     structFormat = "!H"
-    prefixLength = struct.calcsize(structFormat)
+    prefixLength = calcsize(structFormat)
 
 
 
@@ -761,7 +827,7 @@
     This class publishes the same interface as NetstringReceiver.
     """
     structFormat = "!B"
-    prefixLength = struct.calcsize(structFormat)
+    prefixLength = calcsize(structFormat)
 
 
 

=== modified file 'twisted/test/test_protocols.py'
--- twisted/test/test_protocols.py	2011-09-19 17:39:55 +0000
+++ twisted/test/test_protocols.py	2011-10-01 23:49:11 +0000
@@ -751,6 +751,111 @@
 
 
 
+class RecvdAttributeMixin(object):
+    """
+    Mixin defining tests for string receiving protocols with a C{recvd}
+    attribute which should be settable by application code, to be combined with
+    L{IntNTestCaseMixin} on a L{TestCase} subclass
+    """
+
+    def makeMessage(self, protocol, data):
+        """
+        Return C{data} prefixed with message length in C{protocol.structFormat}
+        form.
+        """
+        return struct.pack(protocol.structFormat, len(data)) + data
+
+
+    def test_recvdContainsRemainingData(self):
+        """
+        In stringReceived, recvd contains the remaining data that was passed to
+        dataReceived that was not part of the current message.
+        """
+        result = []
+        r = self.getProtocol()
+        def stringReceived(receivedString):
+            result.append(r.recvd)
+        r.stringReceived = stringReceived
+        completeMessage = (struct.pack(r.structFormat, 5) + ('a' * 5))
+        incompleteMessage = (struct.pack(r.structFormat, 5) + ('b' * 4))
+        # Receive a complete message, followed by an incomplete one
+        r.dataReceived(completeMessage + incompleteMessage)
+        self.assertEquals(result, [incompleteMessage])
+
+
+    def test_recvdChanged(self):
+        """
+        In stringReceived, if recvd is changed, messages should be parsed from
+        it rather than the input to dataReceived.
+        """
+        r = self.getProtocol()
+        result = []
+        payloadC = 'c' * 5
+        messageC = self.makeMessage(r, payloadC)
+        def stringReceived(receivedString):
+            if not result:
+                r.recvd = messageC
+            result.append(receivedString)
+        r.stringReceived = stringReceived
+        payloadA = 'a' * 5
+        payloadB = 'b' * 5
+        messageA = self.makeMessage(r, payloadA)
+        messageB = self.makeMessage(r, payloadB)
+        r.dataReceived(messageA + messageB)
+        self.assertEquals(result, [payloadA, payloadC])
+
+
+    def test_switching(self):
+        """
+        Data already parsed by L{IntNStringReceiver.dataReceived} is not
+        reparsed if C{stringReceived} consumes some of the
+        L{IntNStringReceiver.recvd} buffer.
+        """
+        proto = self.getProtocol()
+        mix = []
+        SWITCH = "\x00\x00\x00\x00"
+        for s in self.strings:
+            mix.append(self.makeMessage(proto, s))
+            mix.append(SWITCH)
+
+        result = []
+        def stringReceived(receivedString):
+            result.append(receivedString)
+            proto.recvd = proto.recvd[len(SWITCH):]
+
+        proto.stringReceived = stringReceived
+        proto.dataReceived("".join(mix))
+        # Just another byte, to trigger processing of anything that might have
+        # been left in the buffer (should be nothing).
+        proto.dataReceived("\x01")
+        self.assertEqual(result, self.strings)
+        # And verify that another way
+        self.assertEqual(proto.recvd, "\x01")
+
+
+    def test_recvdInLengthLimitExceeded(self):
+        """
+        The L{IntNStringReceiver.recvd} buffer contains all data not yet
+        processed by L{IntNStringReceiver.dataReceived} if the
+        C{lengthLimitExceeded} event occurs.
+        """
+        proto = self.getProtocol()
+        DATA = "too long"
+        proto.MAX_LENGTH = len(DATA) - 1
+        message = self.makeMessage(proto, DATA)
+
+        result = []
+        def lengthLimitExceeded(length):
+            result.append(length)
+            result.append(proto.recvd)
+
+        proto.lengthLimitExceeded = lengthLimitExceeded
+        proto.dataReceived(message)
+        self.assertEqual(result[0], len(DATA))
+        self.assertEqual(result[1], message)
+
+
+
 class TestInt32(TestMixin, basic.Int32StringReceiver):
     """
     A L{basic.Int32StringReceiver} storing received strings in an array.
@@ -760,7 +865,7 @@
 
 
 
-class Int32TestCase(unittest.TestCase, IntNTestCaseMixin):
+class Int32TestCase(unittest.TestCase, IntNTestCaseMixin, RecvdAttributeMixin):
     """
     Test case for int32-prefixed protocol
     """
@@ -790,7 +895,7 @@
 
 
 
-class Int16TestCase(unittest.TestCase, IntNTestCaseMixin):
+class Int16TestCase(unittest.TestCase, IntNTestCaseMixin, RecvdAttributeMixin):
     """
     Test case for int16-prefixed protocol
     """
@@ -820,6 +925,22 @@
 
 
 
+class NewStyleTestInt16(TestInt16, object):
+    """
+    A new-style class version of TestInt16
+    """
+
+
+
+class NewStyleInt16TestCase(Int16TestCase):
+    """
+    This test case verifies that IntNStringReceiver still works when inherited
+    by a new-style class.
+    """
+    protocol = NewStyleTestInt16
+
+
+
 class TestInt8(TestMixin, basic.Int8StringReceiver):
     """
     A L{basic.Int8StringReceiver} storing received strings in an array.
@@ -829,7 +950,7 @@
 
 
 
-class Int8TestCase(unittest.TestCase, IntNTestCaseMixin):
+class Int8TestCase(unittest.TestCase, IntNTestCaseMixin, RecvdAttributeMixin):
     """
     Test case for int8-prefixed protocol
     """

=== modified file 'twisted/test/test_stateful.py'
--- twisted/test/test_stateful.py	2011-07-14 18:05:14 +0000
+++ twisted/test/test_stateful.py	2011-10-01 23:49:11 +0000
@@ -6,6 +6,7 @@
 Test cases for twisted.protocols.stateful
 """
 
+from twisted.trial.unittest import TestCase
 from twisted.test import test_protocols
 from twisted.protocols.stateful import StatefulProtocol
 
@@ -64,8 +65,11 @@
         self.closed = 1
 
 
-class Int32TestCase(test_protocols.Int32TestCase):
+class Int32TestCase(TestCase, test_protocols.IntNTestCaseMixin):
     protocol = TestInt32
+    strings = ["a", "b" * 16]
+    illegalStrings = ["\x10\x00\x00\x00aaaaaa"]
+    partialStrings = ["\x00\x00\x00", "hello there", ""]
 
     def test_bigReceive(self):
         r = self.getProtocol()

=== added file 'twisted/topfiles/5075.feature'
--- twisted/topfiles/5075.feature	1970-01-01 00:00:00 +0000
+++ twisted/topfiles/5075.feature	2011-10-01 23:49:11 +0000
@@ -0,0 +1,1 @@
+AMP's raw message-parsing performance was increased by approximately 12%.

=== added file 'twisted/topfiles/5273.misc'
=== modified file 'twisted/web/_flatten.py'
--- twisted/web/_flatten.py	2011-03-21 18:45:11 +0000
+++ twisted/web/_flatten.py	2011-10-01 23:49:11 +0000
@@ -75,7 +75,10 @@
     """
     if isinstance(data, unicode):
         data = data.encode('utf-8')
-    return data.replace('--', '- -')
+    data = data.replace('--', '- - ').replace('>', '&gt;')
+    if data and data[-1] == '-':
+        data += ' '
+    return data
 
 
 def _getSlotValue(name, slotData, default=None):

=== modified file 'twisted/web/_stan.py'
--- twisted/web/_stan.py	2011-03-21 13:17:42 +0000
+++ twisted/web/_stan.py	2011-10-01 23:49:11 +0000
@@ -145,6 +145,9 @@
 
         During the rendering of children of this node, slots with names in
         C{slots} will be rendered as their corresponding values.
+
+        @return: C{self}. This enables the idiom C{return tag.fillSlots(...)} in
+            renderers.
         """
         if self.slotData is None:
             self.slotData = {}
@@ -200,7 +203,7 @@
         @param deep: whether to continue cloning child objects; i.e. the
             contents of lists, the sub-tags within a tag.
 
-        @return: a clone of obj.
+        @return: a clone of C{obj}.
         """
         if hasattr(obj, 'clone'):
             return obj.clone(deep)

=== modified file 'twisted/web/test/test_flatten.py'
--- twisted/web/test/test_flatten.py	2011-03-21 13:17:42 +0000
+++ twisted/web/test/test_flatten.py	2011-10-01 23:49:11 +0000
@@ -10,6 +10,7 @@
 from twisted.trial.unittest import TestCase
 from twisted.internet.defer import succeed, gatherResults
 from twisted.web._stan import Tag
+from twisted.web._flatten import flattenString
 from twisted.web.error import UnfilledSlot, UnsupportedType, FlattenerError
 from twisted.web.template import tags, Comment, CDATA, slot
 from twisted.web.iweb import IRenderable
@@ -50,10 +51,54 @@
         """
         Test that comments are correctly flattened and escaped.
         """
-        return gatherResults([
-            self.assertFlattensTo(Comment('foo bar'), '<!--foo bar-->'),
-            self.assertFlattensTo(Comment('foo -- bar'), '<!--foo - - bar-->'),
-        ])
+        return self.assertFlattensTo(Comment('foo bar'), '<!--foo bar-->'),
+
+
+    def test_commentEscaping(self):
+        """
+        The data in a L{Comment} is escaped and mangled in the flattened output
+        so that the result is a legal SGML and XML comment.
+
+        SGML comment syntax is complicated and hard to use. This rule is more
+        restrictive, and more compatible:
+
+        Comments start with <!-- and end with --> and never contain -- or >.
+
+        Also by XML syntax, a comment may not end with '-'.
+
+        @see: U{http://www.w3.org/TR/REC-xml/#sec-comments}
+        """
+        def verifyComment(c):
+            self.assertTrue(
+                c.startswith('<!--'),
+                "%r does not start with the comment prefix" % (c,))
+            self.assertTrue(
+                c.endswith('-->'),
+                "%r does not end with the comment suffix" % (c,))
+            # If it is shorter than 7, then the prefix and suffix overlap
+            # illegally.
+            self.assertTrue(
+                len(c) >= 7,
+                "%r is too short to be a legal comment" % (c,))
+            content = c[4:-3]
+            self.assertNotIn('--', content)
+            self.assertNotIn('>', content)
+            if content:
+                self.assertNotEqual(content[-1], '-')
+
+        results = []
+        for c in [
+            '',
+            'foo---bar',
+            'foo---bar-',
+            'foo>bar',
+            'foo-->bar',
+            '----------------',
+        ]:
+            d = flattenString(None, Comment(c))
+            d.addCallback(verifyComment)
+            results.append(d)
+        return gatherResults(results)
 
 
     def test_serializeCDATA(self):

=== modified file 'twisted/web/test/test_stan.py'
--- twisted/web/test/test_stan.py	2011-07-14 18:05:14 +0000
+++ twisted/web/test/test_stan.py	2011-10-01 23:49:11 +0000
@@ -18,6 +18,17 @@
 
 
 class TestTag(TestCase):
+    """
+    Tests for L{Tag}.
+    """
+    def test_fillSlots(self):
+        """
+        L{Tag.fillSlots} returns self.
+        """
+        tag = proto()
+        self.assertIdentical(tag, tag.fillSlots(test='test'))
+
+
     def test_cloneShallow(self):
         """
         L{Tag.clone} copies all attributes and children of a tag, including its

=== added file 'twisted/web/topfiles/5275.bugfix'
--- twisted/web/topfiles/5275.bugfix	1970-01-01 00:00:00 +0000
+++ twisted/web/topfiles/5275.bugfix	2011-10-01 23:49:11 +0000
@@ -0,0 +1,1 @@
+twisted.web.template now escapes more inputs to comments which require escaping in the output.

=== added file 'twisted/web/topfiles/5286.doc'
--- twisted/web/topfiles/5286.doc	1970-01-01 00:00:00 +0000
+++ twisted/web/topfiles/5286.doc	2011-10-03 13:56:38 +0000
@@ -0,0 +1,1 @@
+The twisted.web.template howto now documents the common idiom of yielding tag clones from a renderer.

=== added file 'twisted/web/topfiles/5288.misc'
