=== added file 'doc/web/howto/listings/iteration-1.py'
--- doc/web/howto/listings/iteration-1.py	1970-01-01 00:00:00 +0000
+++ doc/web/howto/listings/iteration-1.py	2011-09-30 21:29:08 +0000
@@ -0,0 +1,16 @@
+from twisted.web.template import Element, renderer, XMLFile, flattenString
+
+class WidgetsElement(Element):
+    loader = XMLFile('iteration-1.xml')
+
+    widgetData = ['gadget', 'contraption', 'gizmo', 'doohickey']
+
+    @renderer
+    def widgets(self, request, tag):
+        for widget in self.widgetData:
+            yield tag.clone().fillSlots(widgetName=widget)
+
+def printResult(result):
+    print result
+
+flattenString(None, WidgetsElement()).addCallback(printResult)

=== added file 'doc/web/howto/listings/iteration-1.xml'
--- doc/web/howto/listings/iteration-1.xml	1970-01-01 00:00:00 +0000
+++ doc/web/howto/listings/iteration-1.xml	2011-09-30 21:23:30 +0000
@@ -0,0 +1,3 @@
+<ul xmlns:t="http://twistedmatrix.com/ns/twisted.web.template/0.1">
+    <li t:render="widgets"><t:slot name="widgetName"/></li>
+</ul>

=== added file 'doc/web/howto/listings/iteration-output-1.xml'
--- doc/web/howto/listings/iteration-output-1.xml	1970-01-01 00:00:00 +0000
+++ doc/web/howto/listings/iteration-output-1.xml	2011-09-30 21:27:06 +0000
@@ -0,0 +1,3 @@
+<ul>
+    <li>gadget</li><li>contraption</li><li>gizmo</li><li>doohickey</li>
+</ul>

=== modified file 'doc/web/howto/twisted-templates.xhtml'
--- doc/web/howto/twisted-templates.xhtml	2011-03-21 13:17:42 +0000
+++ doc/web/howto/twisted-templates.xhtml	2011-09-30 21:31:16 +0000
@@ -134,8 +134,6 @@
 conveniently fill with multiple pieces of data straight from your Python
 program.
 
-<h3>A nice example of Slots and Attributes</h3>
-
 The following example demonstrates both <code>t:attr</code>
 and <code>t:slot</code> in action. Here we have a layout which displays a person's
 profile on your snazzy new Twisted-powered social networking site. We use
@@ -152,6 +150,24 @@
 <a href="listings/slots-attributes-output.html"
     class="html-listing">slots and attributes output</a>
 
+<h3>Iteration</h3>
+
+<p>Often, you will have a sequence of things, and want to render each of them,
+repeating a part of the template for each one. This can be done by cloning
+<code>tag</code> in your renderer:</p>
+
+<a href="listings/iteration-1.xml" class="html-listing">iteration template</a>
+<a href="listings/iteration-1.py" class="py-listing">iteration element</a>
+<a href="listings/iteration-output-1.xml" class="html-listing">iteration output</a>
+
+<p>This renderer works because a renderer can return anything that can be
+rendered, not just <code>tag</code>. In this case, we define a generator, which
+returns a thing that is iterable. We also could have returned a
+<code>list</code>. Anything that is iterable will be rendered by
+<code class="API">twisted.web.template</code> rendering each item in it. In
+this case, each item is a copy of the tag the renderer received, each filled
+with the name of a widget.</p>
+
 <h3>Transparent</h3>
 
 Note how renderers, slots and attributes require you to specify a renderer on

