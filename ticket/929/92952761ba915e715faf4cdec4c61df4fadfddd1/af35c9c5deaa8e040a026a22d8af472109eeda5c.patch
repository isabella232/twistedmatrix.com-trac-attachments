# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130202161952-tfjjeagecv1lrusg
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: a16a9869fd991a579f5e0d796092a3eb0480e002
# timestamp: 2013-02-02 17:20:05 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:37018
# 
# Begin patch
=== modified file 'twisted/internet/_sslverify.py'
--- twisted/internet/_sslverify.py	2013-01-02 01:05:08 +0000
+++ twisted/internet/_sslverify.py	2013-02-02 16:17:57 +0000
@@ -657,15 +657,15 @@
         @param method: The SSL protocol to use, one of SSLv23_METHOD,
         SSLv2_METHOD, SSLv3_METHOD, TLSv1_METHOD.  Defaults to TLSv1_METHOD.
 
-        @param verify: If True, verify certificates received from the peer and
-        fail the handshake if verification fails.  Otherwise, allow anonymous
-        sessions and sessions with certificates which fail validation.  By
-        default this is False.
+        @param verify: If C{True}, verify certificates received from the peer
+            and fail the handshake if verification fails.  Otherwise, allow
+            anonymous sessions and sessions with certificates which fail
+            validation.  By default this is C{False}.
 
         @param caCerts: List of certificate authority certificate objects to
             use to verify the peer's certificate.  Only used if verify is
-            C{True}, and if verify is C{True}, this must be specified.  Since
-            verify is C{False} by default, this is C{None} by default.
+            C{True} and will be ignored otherwise.  Since verify is C{False} by
+            default, this is C{None} by default.
 
         @type caCerts: C{list} of L{OpenSSL.crypto.X509}
 
@@ -696,15 +696,18 @@
         ticket extensions in the hello.
         """
 
-        assert (privateKey is None) == (certificate is None), "Specify neither or both of privateKey and certificate"
+        if (privateKey is None) != (certificate is None):
+            raise ValueError(
+                "Specify neither or both of privateKey and certificate")
         self.privateKey = privateKey
         self.certificate = certificate
         if method is not None:
             self.method = method
 
+        if verify and not caCerts:
+            raise ValueError("Specify client CA certificate information if and"
+                             " only if enabling certificate verification")
         self.verify = verify
-        assert ((verify and caCerts) or
-                (not verify)), "Specify client CA certificate information if and only if enabling certificate verification"
 
         self.caCerts = caCerts
         self.verifyDepth = verifyDepth

=== modified file 'twisted/test/test_sslverify.py'
--- twisted/test/test_sslverify.py	2012-10-30 17:06:40 +0000
+++ twisted/test/test_sslverify.py	2013-02-02 16:19:52 +0000
@@ -137,6 +137,14 @@
         self.cKey, self.cCert = makeCertificate(
             O=b"Client Test Certificate",
             CN=b"client")
+        self.caCert1 = makeCertificate(
+            O=b"CA Test Certificate 1",
+            CN=b"ca1")[1]
+        self.caCert2 = makeCertificate(
+            O=b"CA Test Certificate",
+            CN=b"ca2")[1]
+        self.caCerts = [self.caCert1, self.caCert2]
+
 
     def tearDown(self):
         if self.serverPort is not None:
@@ -174,6 +182,71 @@
         self.clientConn = reactor.connectSSL('127.0.0.1',
                 self.serverPort.getHost().port, clientFactory, clientCertOpts)
 
+
+    def test_constructorWithOnlyPrivateKey(self):
+        """
+        C{privateKey} and C{certificate} make only sense if both are set.
+        """
+        self.assertRaises(
+            ValueError,
+            sslverify.OpenSSLCertificateOptions, privateKey=self.sKey
+        )
+
+
+    def test_constructorWithOnlyCertificate(self):
+        """
+        C{privateKey} and C{certificate} make only sense if both are set.
+        """
+        self.assertRaises(
+            ValueError,
+            sslverify.OpenSSLCertificateOptions, certificate=self.sCert
+        )
+
+
+    def test_constructorWithCertificateAndPrivateKey(self):
+        """
+        Specifying C{privateKey} and C{certificate} initializes correctly.
+        """
+        opts = sslverify.OpenSSLCertificateOptions(privateKey=self.sKey,
+                                                   certificate=self.sCert)
+        self.assertEqual(opts.privateKey, self.sKey)
+        self.assertEqual(opts.certificate, self.sCert)
+
+
+    def test_constructorDoesNotAllowVerifyWithoutCACerts(self):
+        """
+        C{verify} must not be C{True} without specifying C{caCerts}.
+        """
+        self.assertRaises(
+            ValueError,
+            sslverify.OpenSSLCertificateOptions,
+            privateKey=self.sKey, certificate=self.sCert, verify=True
+        )
+
+
+    def test_constructorAllowsCACertsWithoutVerify(self):
+        """
+        It's currently a NOP, but valid.
+        """
+        opts = sslverify.OpenSSLCertificateOptions(privateKey=self.sKey,
+                                                   certificate=self.sCert,
+                                                   caCerts=self.caCerts)
+        self.assertFalse(opts.verify)
+        self.assertEqual(self.caCerts, opts.caCerts)
+
+
+    def test_constructorWithVerifyAndCACerts(self):
+        """
+        Specifying C{verify} and C{caCerts} initializes correctly.
+        """
+        opts = sslverify.OpenSSLCertificateOptions(privateKey=self.sKey,
+                                                   certificate=self.sCert,
+                                                   verify=True,
+                                                   caCerts=self.caCerts)
+        self.assertTrue(opts.verify)
+        self.assertEqual(self.caCerts, opts.caCerts)
+
+
     def test_abbreviatingDistinguishedNames(self):
         """
         Check that abbreviations used in certificates correctly map to

=== added file 'twisted/topfiles/6288.misc'
# Begin bundle
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
