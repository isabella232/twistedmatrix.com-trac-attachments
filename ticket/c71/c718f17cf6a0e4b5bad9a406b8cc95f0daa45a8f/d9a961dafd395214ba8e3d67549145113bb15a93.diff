=== modified file 'twisted/python/filepath.py'
--- twisted/python/filepath.py	2011-04-12 03:28:17 +0000
+++ twisted/python/filepath.py	2011-09-27 22:24:17 +0000
@@ -974,7 +974,7 @@
         return cmp(self.path, other.path)
 
 
-    def createDirectory(self):
+    def createDirectory(self, mode=None):
         """
         Create the directory the L{FilePath} refers to.
 
@@ -982,7 +982,10 @@
 
         @raise OSError: If the directory cannot be created.
         """
-        os.mkdir(self.path)
+        if mode is not None:
+            os.mkdir(self.path, mode=mode)
+        else:
+            os.mkdir(self.path)
 
 
     def requireCreate(self, val=1):

=== modified file 'twisted/test/test_paths.py'
--- twisted/test/test_paths.py	2011-04-11 18:55:50 +0000
+++ twisted/test/test_paths.py	2011-09-27 22:16:54 +0000
@@ -491,7 +491,12 @@
 
 
 
-class FilePathTestCase(AbstractFilePathTestCase):
+class ReallyEqualMixin:
+    def failUnlessReallyEqual(self, a, b, msg=None):
+        self.failUnlessEqual(a, b, msg=msg)
+        self.failUnlessEqual(type(a), type(b), msg="a :: %r, b :: %r, %r" % (a, b, msg))
+
+class FilePathTestCase(AbstractFilePathTestCase, ReallyEqualMixin):
     """
     Test various L{FilePath} path manipulations.
     """
@@ -842,6 +847,25 @@
         ts.createDirectory()
         self.assertIn(ts, self.path.parent().children())
 
+    def testCreateDirectory(self):
+        class Sentinel(object):
+            pass
+        s = Sentinel()
+        def mock_mkdir1(path, mode=s):
+            self.failUnlessReallyEqual(path, os.path.join(os.getcwd(), 'test_dir1'))
+            self.failUnlessIdentical(mode, s)
+        self.patch(os, 'mkdir', mock_mkdir1)
+
+        fp1 = filepath.FilePath("test_dir1")
+        fp1.createDirectory()
+
+        def mock_mkdir2(path, mode=s):
+            self.failUnlessReallyEqual(path, os.path.join(os.getcwd(), 'test_dir2'))
+            self.failUnlessReallyEqual(mode, 0700)
+        self.patch(os, 'mkdir', mock_mkdir2)
+
+        fp2 = filepath.FilePath("test_dir2")
+        fp2.createDirectory(mode=0700)
 
     def test_temporarySiblingExtension(self):
         """

