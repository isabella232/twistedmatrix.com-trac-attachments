=== modified file 'twisted/python/filepath.py'
--- twisted/python/filepath.py	2011-04-12 03:28:17 +0000
+++ twisted/python/filepath.py	2011-09-28 04:45:01 +0000
@@ -863,12 +863,15 @@
         self.changed()
 
 
-    def makedirs(self):
+    def makedirs(self, mode=None):
         """
         Create all directories not yet existing in C{path} segments, using
         C{os.makedirs}.
         """
-        return os.makedirs(self.path)
+        if mode is not None:
+            return os.makedirs(self.path, mode)
+        else:
+            return os.makedirs(self.path)
 
 
     def globChildren(self, pattern):
@@ -974,7 +977,7 @@
         return cmp(self.path, other.path)
 
 
-    def createDirectory(self):
+    def createDirectory(self, mode=None):
         """
         Create the directory the L{FilePath} refers to.
 
@@ -982,7 +985,10 @@
 
         @raise OSError: If the directory cannot be created.
         """
-        os.mkdir(self.path)
+        if mode is not None:
+            os.mkdir(self.path, mode=mode)
+        else:
+            os.mkdir(self.path)
 
 
     def requireCreate(self, val=1):

=== modified file 'twisted/test/test_paths.py'
--- twisted/test/test_paths.py	2011-04-11 18:55:50 +0000
+++ twisted/test/test_paths.py	2011-09-28 04:48:17 +0000
@@ -491,7 +491,12 @@
 
 
 
-class FilePathTestCase(AbstractFilePathTestCase):
+class ReallyEqualMixin:
+    def failUnlessReallyEqual(self, a, b, msg=None):
+        self.failUnlessEqual(a, b, msg=msg)
+        self.failUnlessEqual(type(a), type(b), msg="a :: %r, b :: %r, %r" % (a, b, msg))
+
+class FilePathTestCase(AbstractFilePathTestCase, ReallyEqualMixin):
     """
     Test various L{FilePath} path manipulations.
     """
@@ -842,6 +847,57 @@
         ts.createDirectory()
         self.assertIn(ts, self.path.parent().children())
 
+    def testCreateDirectory(self):
+        class Sentinel(object):
+            pass
+        s = Sentinel()
+        def mock_mkdir1(path, mode=s):
+            self.failUnlessReallyEqual(path, os.path.join(os.getcwd(), 'test_dir1'))
+            self.failUnlessIdentical(mode, s)
+        self.patch(os, 'mkdir', mock_mkdir1)
+
+        fp1 = filepath.FilePath("test_dir1")
+        fp1.createDirectory()
+
+        def mock_mkdir2(path, mode=s):
+            self.failUnlessReallyEqual(path, os.path.join(os.getcwd(), 'test_dir2'))
+            self.failUnlessReallyEqual(mode, 0700)
+        self.patch(os, 'mkdir', mock_mkdir2)
+
+        fp2 = filepath.FilePath("test_dir2")
+        fp2.createDirectory(mode=0700)
+
+        calls_to_mkdir = []
+        def mock_mkdir3(path, mode=s):
+            calls_to_mkdir.append((path, mode))
+        self.patch(os, 'mkdir', mock_mkdir3)
+
+        fp3 = filepath.FilePath("test_dir3/test_dir4")
+        fp3.makedirs()
+
+        d3path = os.path.join(os.getcwd(), "test_dir3")
+        d4path = os.path.join(d3path, "test_dir4")
+
+        self.failUnlessEqual(calls_to_mkdir, [(d3path, 0777), (d4path, 0777)])
+        del calls_to_mkdir[:]
+
+        fp6 = filepath.FilePath("test_dir5/test_dir6")
+        fp6.makedirs(mode=0644)
+
+        d5path = os.path.join(os.getcwd(), "test_dir5")
+        d6path = os.path.join(d5path, "test_dir6")
+
+        self.failUnlessEqual(calls_to_mkdir, [(d5path, 0644), (d6path, 0644)])
+        del calls_to_mkdir[:]
+
+        fp7 = filepath.FilePath("test_dir5/test_dir7")
+        fp7.makedirs(mode=0640)
+
+        d7path = os.path.join(d5path, "test_dir7")
+
+        # We don't care what calls were made to mkdir(d5path, ...), but we do
+        # require that the was finally a call to mkdir(d7path, 0640):
+        self.failUnlessEqual(calls_to_mkdir[-1], (d7path, 0640))
 
     def test_temporarySiblingExtension(self):
         """

