From 744a1bf3c8ce8b0dc1d75ff7e2a6de7aa9781736 Mon Sep 17 00:00:00 2001
From: Carlos Valiente <carlos.valiente@ecmwf.int>
Date: Fri, 2 Jul 2010 14:14:34 +0100
Subject: [PATCH] Also use _listOpenFDs in PTYProcess

---
 twisted/internet/process.py           |   11 +++--
 twisted/internet/test/test_process.py |   79 ++++++++++++++++-----------------
 2 files changed, 45 insertions(+), 45 deletions(-)

diff --git a/twisted/internet/process.py b/twisted/internet/process.py
index a846f95..f8d89d3 100644
--- a/twisted/internet/process.py
+++ b/twisted/internet/process.py
@@ -908,11 +908,12 @@ class PTYProcess(abstract.FileDescriptor, _BaseProcess):
         os.dup2(slavefd, 1) # stdout
         os.dup2(slavefd, 2) # stderr
 
-        for fd in xrange(3, 256):
-            try:
-                os.close(fd)
-            except:
-                pass
+        for fd in _listOpenFDs():
+            if fd > 2:
+                try:
+                    os.close(fd)
+                except:
+                    pass
 
         self._resetSignalDisposition()
 
diff --git a/twisted/internet/test/test_process.py b/twisted/internet/test/test_process.py
index 1dab301..adbb04c 100644
--- a/twisted/internet/test/test_process.py
+++ b/twisted/internet/test/test_process.py
@@ -219,6 +219,45 @@ class ProcessTestsBuilderBase(ReactorBuilder):
         self.assertEqual(result, ["Foo\n"])
 
 
+    def test_openFileDescriptors(self):
+        """
+        A spawned process has only stdin, stdout and stderr open
+        (file descriptor 3 is also reported as open, because of the call to
+        'os.listdir()').
+        """
+        from twisted.python.runtime import platformType
+        if platformType == "posix":
+            raise SkipTest("Test only applies to POSIX platforms")
+
+        here = FilePath(__file__)
+        top = here.parent().parent().parent().parent()
+        source = (
+            "import sys",
+            "sys.path.insert(0, '%s')" % (top.path,),
+            "from twisted.internet import process",
+            "sys.stdout.write(str(process._listOpenFDs()))",
+            "sys.stdout.flush()")
+
+        reactor = self.buildReactor()
+
+        def processFinished(output):
+            self.assertEquals('[0, 1, 2, 3]', output)
+
+        def shutdown(result):
+            reactor.stop()
+            return result
+
+        def spawnChild():
+            msg("Spawning child with Twisted at %r" % (top.path,))
+            d = succeed(None)
+            d.addCallback(lambda dummy: utils.getProcessOutput(
+                sys.executable, ["-c", "\n".join(source)], reactor=reactor))
+            d.addCallback(processFinished)
+            d.addBoth(shutdown)
+
+        reactor.callWhenRunning(spawnChild)
+        self.runReactor(reactor)
+
 
 class ProcessTestsBuilder(ProcessTestsBuilderBase):
     """
@@ -476,46 +515,6 @@ class ProcessTestsBuilder(ProcessTestsBuilderBase):
 
         reactor.callWhenRunning(spawnChild)
         self.runReactor(reactor)
-
-
-    def test_openFileDescriptors(self):
-        """
-        A spawned process has only stdin, stdout and stderr open
-        (file descriptor 3 is also reported as open, because of the call to
-        'os.listdir()').
-        """
-        from twisted.python.runtime import platformType
-        if platformType == "posix":
-            raise SkipTest("Test only applies to POSIX platforms")
-
-        here = FilePath(__file__)
-        top = here.parent().parent().parent().parent()
-        source = (
-            "import sys",
-            "sys.path.insert(0, '%s')" % (top.path,),
-            "from twisted.internet import process",
-            "sys.stdout.write(str(process._listOpenFDs()))",
-            "sys.stdout.flush()")
-
-        reactor = self.buildReactor()
-
-        def processFinished(output):
-            self.assertEquals('[0, 1, 2, 3]', output)
-
-        def shutdown(result):
-            reactor.stop()
-            return result
-
-        def spawnChild():
-            msg("Spawning child with Twisted at %r" % (top.path,))
-            d = succeed(None)
-            d.addCallback(lambda dummy: utils.getProcessOutput(
-                sys.executable, ["-c", "\n".join(source)], reactor=reactor))
-            d.addCallback(processFinished)
-            d.addBoth(shutdown)
-
-        reactor.callWhenRunning(spawnChild)
-        self.runReactor(reactor)
 globals().update(ProcessTestsBuilder.makeTestCaseClasses())
 
 
-- 
1.7.1

