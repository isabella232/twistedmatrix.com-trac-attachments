From a094d63fd8ee1ebc59db86c4d9354ee896c1a342 Mon Sep 17 00:00:00 2001
From: Vadim Markovtsev <v.markovtsev@samsung.com>
Date: Fri, 23 May 2014 10:51:52 +0400
Subject: [PATCH 5/5] Port twisted.web.client.Agent functionality to Python 3

---
 twisted/web/_newclient.py | 63 +++++++++++++++++++++++++----------------------
 twisted/web/client.py     | 44 +++++++++++++++++----------------
 2 files changed, 56 insertions(+), 51 deletions(-)

diff --git a/twisted/web/_newclient.py b/twisted/web/_newclient.py
index 3e2ba06..b504ac2 100644
--- a/twisted/web/_newclient.py
+++ b/twisted/web/_newclient.py
@@ -28,7 +28,7 @@
 
 __metaclass__ = type
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python import log
 from twisted.python.components import proxyForInterface
@@ -233,11 +233,11 @@ class HTTPParser(LineReceiver):
 
     # Some servers (like http://news.ycombinator.com/) return status lines and
     # HTTP headers delimited by \n instead of \r\n.
-    delimiter = '\n'
+    delimiter = b'\n'
 
     CONNECTION_CONTROL_HEADERS = set([
-            'content-length', 'connection', 'keep-alive', 'te', 'trailers',
-            'transfer-encoding', 'upgrade', 'proxy-connection'])
+            b'content-length', b'connection', b'keep-alive', b'te', b'trailers',
+            b'transfer-encoding', b'upgrade', b'proxy-connection'])
 
     def connectionMade(self):
         self.headers = Headers()
@@ -264,17 +264,17 @@ def lineReceived(self, line):
         Handle one line from a response.
         """
         # Handle the normal CR LF case.
-        if line[-1:] == '\r':
+        if line[-1:] == b'\r':
             line = line[:-1]
 
         if self.state == STATUS:
             self.statusReceived(line)
             self.state = HEADER
         elif self.state == HEADER:
-            if not line or line[0] not in ' \t':
+            if not line or line[0] not in b' \t':
                 if self._partialHeader is not None:
-                    header = ''.join(self._partialHeader)
-                    name, value = header.split(':', 1)
+                    header = b''.join(self._partialHeader)
+                    name, value = header.split(b':', 1)
                     value = value.strip()
                     self.headerReceived(name, value)
                 if not line:
@@ -389,10 +389,10 @@ def parseVersion(self, strversion):
         on bad syntax.
         """
         try:
-            proto, strnumber = strversion.split('/')
-            major, minor = strnumber.split('.')
+            proto, strnumber = strversion.split(b'/')
+            major, minor = strnumber.split(b'.')
             major, minor = int(major), int(minor)
-        except ValueError, e:
+        except ValueError as e:
             raise BadResponseVersion(str(e), strversion)
         if major < 0 or minor < 0:
             raise BadResponseVersion("version may not be negative", strversion)
@@ -404,7 +404,7 @@ def statusReceived(self, status):
         Parse the status line into its components and create a response object
         to keep track of this response's state.
         """
-        parts = status.split(' ', 2)
+        parts = status.split(b' ', 2)
         if len(parts) != 3:
             raise ParseError("wrong number of parts", status)
 
@@ -441,7 +441,7 @@ def isConnectionControlHeader(self, name):
         Content-Length in the response to a HEAD request is an entity header,
         not a connection control header.
         """
-        if self.request.method == 'HEAD' and name == 'content-length':
+        if self.request.method == b'HEAD' and name == b'content-length':
             return False
         return HTTPParser.isConnectionControlHeader(self, name)
 
@@ -452,7 +452,7 @@ def allHeadersReceived(self):
         headers and stuff.
         """
         if (self.response.code in self.NO_BODY_CODES
-            or self.request.method == 'HEAD'):
+            or self.request.method == b'HEAD'):
             self.response.length = 0
             # The order of the next two lines might be of interest when adding
             # support for pipelining.
@@ -460,7 +460,7 @@ def allHeadersReceived(self):
             self.response._bodyDataFinished()
         else:
             transferEncodingHeaders = self.connHeaders.getRawHeaders(
-                'transfer-encoding')
+                b'transfer-encoding')
             if transferEncodingHeaders:
 
                 # This could be a KeyError.  However, that would mean we do not
@@ -476,7 +476,7 @@ def allHeadersReceived(self):
                 # allow the transfer decoder to set the response object's
                 # length attribute.
             else:
-                contentLengthHeaders = self.connHeaders.getRawHeaders('content-length')
+                contentLengthHeaders = self.connHeaders.getRawHeaders(b'content-length')
                 if contentLengthHeaders is None:
                     contentLength = None
                 elif len(contentLengthHeaders) == 1:
@@ -546,6 +546,7 @@ def connectionLost(self, reason):
 
 
 
+@implementer(IClientRequest)
 class Request:
     """
     A L{Request} instance describes an HTTP request to be sent to an HTTP
@@ -560,7 +561,6 @@ class Request:
     @ivar _parsedURI: Parsed I{URI} for the request, or C{None}.
     @type _parsedURI: L{twisted.web.client.URI} or L{None}
     """
-    implements(IClientRequest)
 
 
     def __init__(self, method, uri, headers, bodyProducer, persistent=False):
@@ -623,7 +623,7 @@ def absoluteURI(self):
 
 
     def _writeHeaders(self, transport, TEorCL):
-        hosts = self.headers.getRawHeaders('host', ())
+        hosts = self.headers.getRawHeaders(b'host', ())
         if len(hosts) != 1:
             raise BadHeaders("Exactly one Host header required")
 
@@ -631,15 +631,17 @@ def _writeHeaders(self, transport, TEorCL):
         # method would probably be good.  It would be nice if this method
         # weren't limited to issueing HTTP/1.1 requests.
         requestLines = []
-        requestLines.append(
-            '%s %s HTTP/1.1\r\n' % (self.method, self.uri))
+        requestLines.append(b' '.join([self.method, self.uri]) +
+                            b' HTTP/1.1\r\n')
+
         if not self.persistent:
-            requestLines.append('Connection: close\r\n')
+            requestLines.append(b'Connection: close\r\n')
         if TEorCL is not None:
             requestLines.append(TEorCL)
         for name, values in self.headers.getAllRawHeaders():
-            requestLines.extend(['%s: %s\r\n' % (name, v) for v in values])
-        requestLines.append('\r\n')
+            requestLines.extend([b': '.join([name, v]) + b'\r\n'
+                                for v in values])
+        requestLines.append(b'\r\n')
         transport.writeSequence(requestLines)
 
 
@@ -648,7 +650,7 @@ def _writeToChunked(self, transport):
         Write this request to the given transport using chunked
         transfer-encoding to frame the body.
         """
-        self._writeHeaders(transport, 'Transfer-Encoding: chunked\r\n')
+        self._writeHeaders(transport, b'Transfer-Encoding: chunked\r\n')
         encoder = ChunkedEncoder(transport)
         encoder.registerProducer(self.bodyProducer, True)
         d = self.bodyProducer.startProducing(encoder)
@@ -674,7 +676,8 @@ def _writeToContentLength(self, transport):
         """
         self._writeHeaders(
             transport,
-            'Content-Length: %d\r\n' % (self.bodyProducer.length,))
+            b'Content-Length: ' +
+            str(self.bodyProducer.length).encode('charmap') + b'\r\n')
 
         # This Deferred is used to signal an error in the data written to the
         # encoder below.  It can only errback and it will only do so before too
@@ -914,6 +917,7 @@ def dispatcher(self, *args, **kwargs):
 
 
 
+@implementer(IResponse)
 class Response:
     """
     A L{Response} instance describes an HTTP response received from an HTTP
@@ -957,7 +961,6 @@ class Response:
             more data, the L{Response} moves to this state.  Nothing else
             can happen once the L{Response} is in this state.
     """
-    implements(IResponse)
 
     length = UNKNOWN_LENGTH
 
@@ -1173,12 +1176,12 @@ def _bodyDataFinished_FINISHED(self):
 
 
 
+@implementer(IConsumer)
 class ChunkedEncoder:
     """
     Helper object which exposes L{IConsumer} on top of L{HTTP11ClientProtocol}
     for streaming request bodies to the server.
     """
-    implements(IConsumer)
 
     def __init__(self, transport):
         self.transport = transport
@@ -1221,6 +1224,7 @@ def unregisterProducer(self):
 
 
 
+@implementer(IPushProducer)
 class TransportProxyProducer:
     """
     An L{IPushProducer} implementation which wraps another such thing and
@@ -1229,7 +1233,6 @@ class TransportProxyProducer:
     @ivar _producer: The wrapped L{IPushProducer} provider or C{None} after
         this proxy has been stopped.
     """
-    implements(IPushProducer)
 
     # LineReceiver uses this undocumented attribute of transports to decide
     # when to stop calling lineReceived or rawDataReceived (if it finds it to
@@ -1402,7 +1405,7 @@ def cancelRequest(ign):
         self._parser.makeConnection(self._transportProxy)
         self._responseDeferred = self._parser._responseDeferred
 
-        def cbRequestWrotten(ignored):
+        def cbRequestWritten(ignored):
             if self._state == 'TRANSMITTING':
                 self._state = 'WAITING'
                 self._responseDeferred.chainDeferred(self._finishedRequest)
@@ -1417,7 +1420,7 @@ def ebRequestWriting(err):
                 log.err(err, 'Error writing request, but not in valid state '
                              'to finalize request: %s' % self._state)
 
-        _requestDeferred.addCallbacks(cbRequestWrotten, ebRequestWriting)
+        _requestDeferred.addCallbacks(cbRequestWritten, ebRequestWriting)
 
         return self._finishedRequest
 
diff --git a/twisted/web/client.py b/twisted/web/client.py
index 7197aae..dcce391 100644
--- a/twisted/web/client.py
+++ b/twisted/web/client.py
@@ -328,7 +328,7 @@ class HTTPClientFactory(protocol.ClientFactory):
     port = None
     path = None
 
-    def __init__(self, url, method=b'GET', postdata=None, headers=None,
+    def __init__(self, url, method='GET', postdata=None, headers=None,
                  agent=b"Twisted PageGetter", timeout=0, cookies=None,
                  followRedirect=True, redirectLimit=20,
                  afterFoundGet=False):
@@ -603,6 +603,8 @@ def fromBytes(cls, uri, defaultPort=None):
         @rtype: L{URI}
         @return: Parsed URI instance.
         """
+        if not isinstance(uri, bytes):
+            raise TypeError("uri must be bytes, not a string")
         uri = uri.strip()
         scheme, netloc, path, params, query, fragment = http.urlparse(uri)
 
@@ -620,7 +622,8 @@ def fromBytes(cls, uri, defaultPort=None):
             except ValueError:
                 port = defaultPort
 
-        return cls(scheme, netloc, host, port, path, params, query, fragment)
+        return cls(scheme, netloc, host.decode(), port, path, params, query,
+                   fragment)
 
 
     def toBytes(self):
@@ -751,15 +754,11 @@ def downloadPage(url, file, contextFactory=None, *args, **kwargs):
 # feature equivalent.
 
 from twisted.web.error import SchemeNotSupported
-if not _PY3:
-    from twisted.web._newclient import Request, Response, HTTP11ClientProtocol
-    from twisted.web._newclient import ResponseDone, ResponseFailed
-    from twisted.web._newclient import RequestNotSent, RequestTransmissionFailed
-    from twisted.web._newclient import (
-        ResponseNeverReceived, PotentialDataLoss, _WrapperException)
-
-
-
+from twisted.web._newclient import Request, Response, HTTP11ClientProtocol
+from twisted.web._newclient import ResponseDone, ResponseFailed
+from twisted.web._newclient import RequestNotSent, RequestTransmissionFailed
+from twisted.web._newclient import (
+    ResponseNeverReceived, PotentialDataLoss, _WrapperException)
 try:
     from OpenSSL import SSL
 except ImportError:
@@ -1113,7 +1112,7 @@ def _shouldRetry(self, method, exception, bodyProducer):
         requirement may be relaxed in the future, and PUT added to approved
         method list.
         """
-        if method not in ("GET", "HEAD", "OPTIONS", "DELETE", "TRACE"):
+        if method not in (b"GET", b"HEAD", b"OPTIONS", b"DELETE", b"TRACE"):
             return False
         if not isinstance(exception, (RequestNotSent, RequestTransmissionFailed,
                                       ResponseNeverReceived)):
@@ -1326,9 +1325,13 @@ def _computeHostValue(self, scheme, host, port):
         Compute the string to use for the value of the I{Host} header, based on
         the given scheme, host name, and port number.
         """
-        if (scheme, port) in (('http', 80), ('https', 443)):
+        if _PY3:
+            # make host a bytes object, not str, after playing the trick
+            # with isIPv6Address in endpoint
+            host = host.encode('charmap')
+        if (scheme, port) in ((b'http', 80), (b'https', 443)):
             return host
-        return '%s:%d' % (host, port)
+        return host + b':' + bytes(str(port), 'charmap')
 
 
     def _requestWithEndpoint(self, key, endpoint, method, parsedURI,
@@ -1340,12 +1343,11 @@ def _requestWithEndpoint(self, key, endpoint, method, parsedURI,
         # Create minimal headers, if necessary:
         if headers is None:
             headers = Headers()
-        if not headers.hasHeader('host'):
+        if not headers.hasHeader(b'host'):
             headers = headers.copy()
-            headers.addRawHeader(
-                'host', self._computeHostValue(parsedURI.scheme, parsedURI.host,
-                                               parsedURI.port))
-
+            host_value = self._computeHostValue(
+                parsedURI.scheme, parsedURI.host, parsedURI.port)
+            headers.addRawHeader(b'host', host_value)
         d = self._pool.getConnection(key, endpoint)
         def cbConnected(proto):
             return proto.request(
@@ -1975,13 +1977,13 @@ def _handleResponse(self, response, method, uri, headers, redirectCount):
         Handle the response, making another request if it indicates a redirect.
         """
         if response.code in self._redirectResponses:
-            if method not in ('GET', 'HEAD'):
+            if method not in (b'GET', b'HEAD'):
                 err = error.PageRedirect(response.code, location=uri)
                 raise ResponseFailed([failure.Failure(err)], response)
             return self._handleRedirect(response, method, uri, headers,
                                         redirectCount)
         elif response.code in self._seeOtherResponses:
-            return self._handleRedirect(response, 'GET', uri, headers,
+            return self._handleRedirect(response, b'GET', uri, headers,
                                         redirectCount)
         return response
 
-- 
1.9.3