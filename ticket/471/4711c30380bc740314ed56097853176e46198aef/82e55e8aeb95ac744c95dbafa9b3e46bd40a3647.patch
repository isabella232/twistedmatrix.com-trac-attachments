Index: doc/core/howto/trial.xhtml
===================================================================
--- doc/core/howto/trial.xhtml	(revision 40054)
+++ doc/core/howto/trial.xhtml	(working copy)
@@ -25,7 +25,7 @@
 the <a href="http://docs.python.org/library/unittest.html">unittest --
 Unit testing framework chapter</a> of the <a
 href="http://docs.python.org/library/index.html">Python Library
-Reference</a>. There is also a ton of information available online and in
+Reference</a>. There is a lot of information available online and in
 books.</p>
 
 <h2>Introductory example of Python unit testing</h2>
@@ -33,7 +33,7 @@
 <p>This document is principally a guide to Trial, Twisted's unit testing
 framework. Trial is based on Python's unit testing framework. While we do not
 aim to give a comprehensive guide to general Python unit testing, it will be
-helpful to consider a simple non-networked example before expanding to cover a
+helpful to consider a simple non-networked example before expanding to cover
 networking code that requires the special capabilities of Trial. If you are
 already familiar with unit test in Python, jump straight to the section
 specific to <a href="#twisted">testing Twisted code</a>.</p>
@@ -87,8 +87,8 @@
 </pre>
 </p>
 
-<p>To run the tests, there are two things you must get set up. Make sure
-you get these both done - nothing below will work unless you do.</p>
+<p>To run the tests, there are two things you must set up. Make sure
+you get both done - nothing below will work unless you do.</p>
 
 <p>First, make sure that the directory that <em>contains</em> your
  <code class="shell">calculus</code> directory is in your Python load path. If you're
@@ -118,7 +118,7 @@
 directory.
 
 You should see the following output (though your files are probably not in
- <code class="shell">/tmp</code>:</p>
+ <code class="shell">/tmp</code>):</p>
 
 <pre class="shell">
 $ trial calculus.test.test_base_1
@@ -225,7 +225,7 @@
 test runs.
 </p>
 
-<p>You'll notice that Trial create a <code class="shell">_trial_temp</code> directory in
+<p>You'll notice that Trial creates a <code class="shell">_trial_temp</code> directory in
 the directory where you run the tests. This has a file called
  <code class="shell">test.log</code> which contains the log output of the tests (created
 using <code class="python">log.msg</code> or <code
@@ -271,7 +271,7 @@
 of that. Python's unit testing framework allows your test class to define a
  <code class="python">setUp</code> method that is called before
  <em>each</em> test method in the class. This allows you to add attributes
-to <code class="python">self</code> that can be used in tests
+to <code class="python">self</code> that can be used in test
 methods. We'll also add a parameterized test method to further simplify the
 code.</p>
 
@@ -287,7 +287,7 @@
 
 <a href="listings/trial/calculus/test/test_base_2b.py" class="py-listing">test_base_2b.py</a>
 
-<p>Much cleaner, no?</p>
+<p>Much cleaner, isn't it?</p>
 
 <p>We'll now add some additional error tests. Testing just for successful
 use of the API is generally not enough, especially if you expect your code
@@ -309,7 +309,7 @@
 
 <p>If you run the above, you'll see that not all tests fail. In Python it's
 often valid to add and multiply objects of different and even differing
-types, so the code in the add and mutiply tests does not raise an exception
+types, so the code in the add and multiply tests does not raise an exception
 and those tests therefore fail. So let's add explicit type conversion to
 our API class. This brings us to <code
 class="py-filename">calculus/base_3.py</code>:</p>
@@ -322,7 +322,7 @@
 
 <div class="note">The <code class="python">int</code> conversion can also
 raise a <code class="python">TypeError</code> if passed something of the
-wrong type, such as a list. We'll just let that exception go by as <code
+wrong type, such as a list. We'll just let that exception go by, as <code
 class="python">TypeError</code> is already what we want in case something
 goes wrong.</div></p>
 
@@ -347,7 +347,7 @@
 
 <h2>Testing a protocol</h2>
 
-<p>We'll now create a custom protocol to invoke our class from within a
+<p>We'll now create a custom protocol to invoke our class from a
 telnet-like session. We'll remotely call commands with arguments and read back
 the response. The goal will be to test our network code without creating
 sockets.</p>
@@ -359,8 +359,8 @@
 
 <a href="listings/trial/calculus/test/test_remote_1.py" class="py-listing">test_remote_1.py</a>
 
-<p>To fully understand this client, it helps a lot to be comfortable with
-the Factory/Protocol/Transport pattern used in Twisted.</p>
+<p>To fully understand this client, being comfortable with
+the Factory/Protocol/Transport pattern used in Twisted would be helpful.</p>
 
 <p>We first create a protocol factory object. Note that we have yet to see
 the <code class="python">RemoteCalculationFactory</code> class. It is in
@@ -391,7 +391,7 @@
  <code class="py-filename">calculus/remote_1.py</code> below). So the client
 is essentially tricking the server into thinking it has received the
 operation and the arguments over the network. The server (once again, see
-below) hands the work off to its <code
+below) hands over the work to its <code
 class="python">CalculationProxy</code> object which in turn hands it to its
  <code class="python">Calculation</code> instance. The result is written
 back via <code class="python">sendLine</code> (into the fake string
@@ -439,8 +439,8 @@
 
 <h3>Creating and testing the client</h3>
 
-<p>Of course, what we build is not particulary useful for now : we'll now build
-a client to our server, to be able to use it inside a Python program. And it
+<p>Of course, what we build is not particularly useful for now: we'll now build
+a client for our server, to be able to use it inside a Python program. And it
 will serve our next purpose.</p>
 
 <p>Create <code
@@ -484,11 +484,11 @@
 
 <p>What happens here? We instantiate our protocol as usual, the only trick
 is to create the clock, and assign <code class="python">proto.callLater</code> to
- <code class="python">clock.callLater</code>. Thus, every callLater calls in the protocol
-will finish before <code class="python">clock.advance()</code> returns.</p>
+ <code class="python">clock.callLater</code>. Thus, every <code class="python">callLater</code>
+ call in the protocol will finish before <code class="python">clock.advance()</code> returns.</p>
 
 <p>In the new test (test_timeout), we call <code
-class="python">clock.advance</code>, that simulates and advance in time
+class="python">clock.advance</code>, that simulates and advances in time
 (logically it's similar to a <code class="python">time.sleep</code> call). And
 we just have to verify that our Deferred got a timeout error.</p>
 
@@ -496,14 +496,14 @@
 
 <a href="listings/trial/calculus/client_2.py" class="py-listing">client_2.py</a>
 
-<p>The only important thing here is to not forget to cancel our callLater
-when everything went fine.</p>
+<p>It is important not to forget to cancel the 
+<code class="python">callLater</code> after everything went fine.</p>
 
 <h3>Cleaning up after tests</h3>
 
-<p>This chapter is mainly intended for people that want to have sockets or
+<p>This chapter is mainly intended for people who want to have sockets or
 processes created in their tests. If it's still not obvious, you must try to
-avoid that like the plague, because it ends up with a lot of problems, one of
+avoid using them, because it ends up with a lot of problems, one of
 them being intermittent failures. And intermittent failures are the plague
 of automated tests.</p>
 
@@ -513,11 +513,11 @@
 class="py-listing">test_remote_2.py</a>
 
 <p>Recent versions of trial will fail loudly if you remove the
- <code class="python">stopListening</code> call, which is good.</p>
+ <code class="python">stopListening</code> call (which is good).</p>
 
 <p>Also, you should be aware that <code class="python">tearDown</code> will
-called in any case, after success or failure. So don't expect that every
-objects you created in the test method are present, because your tests may
+be called in any case, after success or failure. So don't expect every
+object you created in the test method to be present, because your tests may
 have failed in the middle.</p>
 
 <p>Trial also has a <code class="python">addCleanup</code> method, which makes
@@ -539,7 +539,7 @@
     return creator.connectTCP('127.0.0.1', self.port.getHost().port).addCallback(cb)
 </pre>
 
-<p>This remove the need of a tearDown method, and you don't have to check for
+<p>This removes the need of a <code class="python">tearDown</code> method, and you don't have to check for
 the value of self.client: you only call addCleanup when the client is
 created.</p>
 
@@ -601,8 +601,8 @@
 <p>A bug was left over during the development of the timeout (probably several
 bugs, but that's not the point), concerning the reuse of the protocol when you
 got a timeout: the connection is not dropped, so you can get timeout forever.
-Generally an user will come to you saying &quot;I have this strange problem on
-my crappy network environment. It seems you could solve it with doing XXX at
+Generally a user will come to you saying &quot;I have this strange problem on
+my crappy networking environment. It seems you could solve it with doing XXX at
 YYY.&quot;</p>
 
 <p>Actually, this bug can be corrected several ways. But if you correct it 
@@ -692,22 +692,22 @@
 <h2>Code coverage</h2>
 
 <p>Code coverage is one of the aspects of software testing that shows how much
-your tests cross (cover) the code of your program. There are different kind of
+your tests cross (cover) the code of your program. There are different kinds of
 measures: path coverage, condition coverage, statement coverage... We'll only
 consider statement coverage here, whether a line has been executed or not.
 </p>
 
 <p>Trial has an option to generate the statement coverage of your tests.
 This option is --coverage. It creates a coverage directory in _trial_temp,
-with a file .cover for every modules used during the tests. The ones
-interesting for us are calculus.base.cover and calculus.remote.cover.  In
-front of each line is the number of times you went through during the
+with a file .cover for every module used during the tests. The ones
+interesting for us are calculus.base.cover and calculus.remote.cover. Each line
+starts with the number of times you went through during the
 tests, or the marker '&gt;&gt;&gt;&gt;&gt;&gt;' if the line was not
-covered. If you went through all the tutorial to this point, you should
+covered. If you went through the whole tutorial to this point, you should
 have complete coverage :).</p>
 
 <p>Again, this is only another useful pointer, but it doesn't mean your
-code is perfect: your tests should consider every possibile input and
+code is perfect: your tests should consider every possible input and
 output, to get <strong>full</strong> coverage (condition, path, etc.) as well
 .</p>
 
