Index: twisted/plugins/twisted_trial.py
===================================================================
--- twisted/plugins/twisted_trial.py    (revision 15328)
+++ twisted/plugins/twisted_trial.py    (working copy)
@@ -25,6 +25,13 @@
                  shortOpt="v",
                  klass="TreeReporter")
 
+Tree = _Reporter("HTML Reporter",
+                 "twisted.trial.reporter",
+                 description="verbose color HTML output",
+                 longOpt="html",
+                 shortOpt="h",
+                 klass="HTMLReporter")
+
 BlackAndWhite = _Reporter("Black-And-White Reporter",
                           "twisted.trial.reporter",
                           description="Colorless verbose output",
Index: twisted/trial/reporter.py
===================================================================
--- twisted/trial/reporter.py   (revision 15328)
+++ twisted/trial/reporter.py   (working copy)
@@ -330,7 +330,76 @@
         self.write("(%.03f secs)\n" % self._last_time)
         super(TimingTextReporter, self).stopTest(method)
 
+class HTMLReporter(Reporter):
+    RED = 'red'
+    GREEN = 'green'
+    BLUE = 'blue'
 
+    def __init__(self, stream=sys.stdout, tbformat='default', args=None,
+                 realtime=False):
+        super(HTMLReporter, self).__init__(stream, tbformat, args, realtime)
+        self._opened = 0
+        
+    def addSuccess(self, test):
+        super(HTMLReporter, self).addSuccess(test)
+        self.endLine('[OK]', self.GREEN)
+
+    def addError(self, *args):
+        super(HTMLReporter, self).addError(*args)
+        self.endLine('[ERROR]', self.RED)
+
+    def addFailure(self, *args):
+        super(HTMLReporter, self).addFailure(*args)
+        self.endLine('[FAIL]', self.RED)
+
+    def addSkip(self, *args):
+        super(HTMLReporter, self).addSkip(*args)
+        self.endLine('[SKIPPED]', self.BLUE)
+
+    def addExpectedFailure(self, *args):
+        super(HTMLReporter, self).addExpectedFailure(*args)
+        self.endLine('[TODO]', self.BLUE)
+
+    def addUnexpectedSuccess(self, *args):
+        super(HTMLReporter, self).addUnexpectedSuccess(*args)
+        self.endLine('[SUCCESS!?!]', self.RED)
+
+    def endLine(self, message, color):
+        self.write('<span style="color: %s">%s</span></li>\n' % (color, message))
+
+    def startTrial(self, count):
+        self.write('''<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
+<head><title>Test Results</title></head><body>\n''')
+        super(HTMLReporter, self).startTrial(count)
+
+    def endTrial(self, suite):
+        self.write('<pre>')
+        super(HTMLReporter, self).endTrial(suite)
+        self.write('</pre>')
+        self.write('</body></html>')
+
+    def startSuite(self, name):
+        try:
+            module = reflect.namedAny(name)
+        except ValueError:
+            module = None
+        if not module:
+            self.write('<h2>%s</h2>\n<ul>' % (name,))
+            self._opened += 1
+        else:
+            self.write('<h1>%s</h1>\n' % (name,))
+        
+    def endSuite(self, name):
+        if self._opened:
+            self.write('</ul>\n')
+            self._opened -= 1
+
+    def startTest(self, method):
+        self.write('<li>%s ... ' % (method.shortDescription()))
+        super(HTMLReporter, self).startTest(method)
+
 class TreeReporter(Reporter):
     currentLine = ''
     indent = '  '