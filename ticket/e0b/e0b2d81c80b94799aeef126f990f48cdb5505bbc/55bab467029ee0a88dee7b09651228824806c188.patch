Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 35084)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -4827,3 +4827,36 @@
 elif interfaces.IReactorSSL(reactor, None) is None:
     for case in (TLSTestCase,):
         case.skip = "Reactor doesn't support SSL"
+
+
+
+class IMAP4ServerFetchTestCase(unittest.TestCase):
+    """
+    This test case is for the FETCH tests that require
+    a C{StringTransport}.
+    """
+
+    def setUp(self):
+        self.transport = StringTransport()
+        self.server = imap4.IMAP4Server()
+        self.server.state = 'select'
+        self.server.makeConnection(self.transport)
+
+
+    def test_fetchWithPartialValidArgument(self):
+        """
+        If by any chance, extra bytes got appended at the end of of an valid
+        FETCH arguments, the client should get a BAD - arguments invalid
+        response.
+
+        See U{RFC 3501<http://tools.ietf.org/html/rfc3501#section-6.4.5>},
+        section 6.4.5,
+        """
+        # We need to clear out the welcome message.
+        self.transport.clear()
+        # Let's send out the faulty command.
+        self.server.dataReceived("0001 FETCH 1 FULLL\r\n")
+        expected = "0001 BAD Illegal syntax: Invalid Argument\r\n"
+        self.assertEqual(self.transport.value(), expected)
+        self.transport.clear()
+        self.server.connectionLost(error.ConnectionDone("Connection closed"))
Index: twisted/mail/topfiles/4000.bugfix
===================================================================
--- twisted/mail/topfiles/4000.bugfix	(revision 0)
+++ twisted/mail/topfiles/4000.bugfix	(revision 0)
@@ -0,0 +1 @@
+twisted.mail.imap4._FetchParser now raises IllegalClientResponse("Invalid Argument") when encounters extra bytes at the end of a valid FETCH command.
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 35084)
+++ twisted/mail/imap4.py	(working copy)
@@ -5829,6 +5829,8 @@
         s = self.remaining + s
         try:
             while s or self.state:
+                if not self.state:
+                    raise IllegalClientResponse("Invalid Argument")
                 # print 'Entering state_' + self.state[-1] + ' with', repr(s)
                 state = self.state.pop()
                 try:
