Index: twisted/test/test_stdio.py
===================================================================
--- twisted/test/test_stdio.py	(revision 38158)
+++ twisted/test/test_stdio.py	(working copy)
@@ -189,10 +189,13 @@
 
         # p.onConnection.addCallback(lambda ign: __import__('time').sleep(5))
 
+        usePTY = True
+        if platform.isWindows():
+            usePTY = False
         try:
             self._spawnProcess(
                 p, 'stdio_test_lastwrite.py', UNIQUE_LAST_WRITE_STRING,
-                usePTY=True)
+                usePTY=usePTY)
         except ValueError, e:
             # Some platforms don't work with usePTY=True
             raise unittest.SkipTest(str(e))
Index: twisted/internet/_pollingfile.py
===================================================================
--- twisted/internet/_pollingfile.py	(revision 38158)
+++ twisted/internet/_pollingfile.py	(working copy)
@@ -4,11 +4,17 @@
 
 """
 Implements a simple polling interface for file descriptors that don't work with
-select() - this is pretty much only useful on Windows.
+C{select()} - this is pretty much only useful on Windows.
 """
 
+import sys
 from zope.interface import implements
 
+import win32pipe
+import win32file
+import win32api
+import pywintypes
+
 from twisted.internet.interfaces import IConsumer, IPushProducer
 
 
@@ -16,20 +22,18 @@
 MAX_TIMEOUT = 0.1
 
 
+class _PollableResource(object):
 
-class _PollableResource:
     active = True
 
     def activate(self):
         self.active = True
 
-
     def deactivate(self):
         self.active = False
 
 
-
-class _PollingTimer:
+class _PollingTimer(object):
     # Everything is private here because it is really an implementation detail.
 
     def __init__(self, reactor):
@@ -98,37 +102,126 @@
 # If we ever (let's hope not) need the above functionality on UNIX, this could
 # be factored into a different module.
 
-import win32pipe
-import win32file
-import win32api
-import pywintypes
+class Channel(object):
+    def closeRead(self):
+        raise NotImplementedError()
 
-class _PollableReadPipe(_PollableResource):
+    def closeWrite(self):
+        raise NotImplementedError()
 
+    def read(self, size):
+        raise NotImplementedError()
+
+    def write(self, data):
+        raise NotImplementedError()
+
+    def isWriteClosed(self):
+        raise NotImplementedError()
+
+    def setEcho(self, enabled):
+        raise NotImplementedError()
+
+
+class ChannelReadPipe(Channel):
+    def __init__(self, pipe):
+        self.handle = pipe
+
+    def read(self):
+        _, bytesToRead, _ = win32pipe.PeekNamedPipe(self.handle, 1)
+        if not bytesToRead:
+            return ''
+        _, data = win32file.ReadFile(self.handle, bytesToRead, None)
+        return data
+
+    def closeRead(self):
+        try:
+            win32api.CloseHandle(self.handle)
+        except pywintypes.error:
+            pass
+
+
+class ChannelWritePipe(Channel):
+    def __init__(self, pipe):
+        self.handle = pipe
+        try:
+            win32pipe.SetNamedPipeHandleState(self.handle, win32pipe.PIPE_NOWAIT, None, None)
+        except pywintypes.error:
+            # Maybe it's an invalid handle.  Who knows.
+            pass
+
+    def write(self, data):
+        try:
+            _, bytesWritten = win32file.WriteFile(self.handle, data, None)
+        except win32api.error:
+            return None
+        return bytesWritten
+
+    def closeWrite(self):
+        try:
+            win32api.CloseHandle(self.handle)
+        except pywintypes.error:
+            pass
+
+    def isWriteClosed(self):
+        try:
+            win32file.WriteFile(self.handle, '', None)
+            return False
+        except pywintypes.error:
+            return True
+
+
+class ChannelConsole(Channel):
+    def __init__(self):
+        import win32conio
+        self.console = win32conio.Channel()
+
+    def read(self):
+        return self.console.read()
+
+    def write(self, data):
+        try:
+            bytesWritten = self.console.write(data)
+        except (pywintypes.error,), err:
+            if err.winerror == 8:
+                # 'Not enough storage is available to process this command.'
+                raise ValueError(err.strerror)
+            return None
+        return bytesWritten
+
+    def closeRead(self):
+        self.console.closeRead()
+
+    def closeWrite(self):
+        self.console.closeWrite()
+
+    def isWriteClosed(self):
+        return self.console.isWriteClosed()
+
+    def setEcho(self, enabled):
+        self.console.setEcho(enabled)
+
+
+class _PollableReader(_PollableResource):
+
     implements(IPushProducer)
 
-    def __init__(self, pipe, receivedCallback, lostCallback):
-        # security attributes for pipes
-        self.pipe = pipe
+    def __init__(self, channel, receivedCallback, lostCallback):
+        self.channel = channel
         self.receivedCallback = receivedCallback
         self.lostCallback = lostCallback
 
     def checkWork(self):
         finished = 0
         fullDataRead = []
-
         while 1:
             try:
-                buffer, bytesToRead, result = win32pipe.PeekNamedPipe(self.pipe, 1)
-                # finished = (result == -1)
-                if not bytesToRead:
+                data = self.channel.read()
+                if not data:
                     break
-                hr, data = win32file.ReadFile(self.pipe, bytesToRead, None)
                 fullDataRead.append(data)
-            except win32api.error:
+            except pywintypes.error:
                 finished = 1
                 break
-
         dataBuf = ''.join(fullDataRead)
         if dataBuf:
             self.receivedCallback(dataBuf)
@@ -141,11 +234,7 @@
         self.lostCallback()
 
     def close(self):
-        try:
-            win32api.CloseHandle(self.pipe)
-        except pywintypes.error:
-            # You can't close std handles...?
-            pass
+        self.channel.closeRead()
 
     def stopProducing(self):
         self.close()
@@ -157,31 +246,24 @@
         self.activate()
 
 
-FULL_BUFFER_SIZE = 64 * 1024
 
-class _PollableWritePipe(_PollableResource):
+class _PollableWriter(_PollableResource):
+    FULL_BUFFER_SIZE = 64 * 1024
 
     implements(IConsumer)
 
-    def __init__(self, writePipe, lostCallback):
+    def __init__(self, channel, lostCallback):
         self.disconnecting = False
         self.producer = None
         self.producerPaused = 0
         self.streamingProducer = 0
         self.outQueue = []
-        self.writePipe = writePipe
+        self.channel = channel
         self.lostCallback = lostCallback
-        try:
-            win32pipe.SetNamedPipeHandleState(writePipe,
-                                              win32pipe.PIPE_NOWAIT,
-                                              None,
-                                              None)
-        except pywintypes.error:
-            # Maybe it's an invalid handle.  Who knows.
-            pass
 
     def close(self):
         self.disconnecting = True
+        self.checkWork()
 
     def bufferFull(self):
         if self.producer is not None:
@@ -227,74 +309,78 @@
 
     def writeConnectionLost(self):
         self.deactivate()
-        try:
-            win32api.CloseHandle(self.writePipe)
-        except pywintypes.error:
-            # OMG what
-            pass
+        self.channel.closeWrite()
         self.lostCallback()
 
-
     def writeSequence(self, seq):
-        """
-        Append a C{list} or C{tuple} of bytes to the output buffer.
-
-        @param seq: C{list} or C{tuple} of C{str} instances to be appended to
-            the output buffer.
-
-        @raise TypeError: If C{seq} contains C{unicode}.
-        """
-        if unicode in map(type, seq):
-            raise TypeError("Unicode not allowed in output buffer.")
+        if self.disconnecting:
+            return
         self.outQueue.extend(seq)
+        if sum(map(len, self.outQueue)) > self.FULL_BUFFER_SIZE:
+            self.bufferFull()
+        self.checkWork()
 
-
     def write(self, data):
-        """
-        Append some bytes to the output buffer.
-
-        @param data: C{str} to be appended to the output buffer.
-        @type data: C{str}.
-
-        @raise TypeError: If C{data} is C{unicode} instead of C{str}.
-        """
-        if isinstance(data, unicode):
-            raise TypeError("Unicode not allowed in output buffer.")
         if self.disconnecting:
             return
         self.outQueue.append(data)
-        if sum(map(len, self.outQueue)) > FULL_BUFFER_SIZE:
+        if sum(map(len, self.outQueue)) > self.FULL_BUFFER_SIZE:
             self.bufferFull()
+        self.checkWork()
 
-
     def checkWork(self):
-        numBytesWritten = 0
         if not self.outQueue:
-            if self.disconnecting:
+            if self.disconnecting or self.channel.isWriteClosed():
                 self.writeConnectionLost()
                 return 0
-            try:
-                win32file.WriteFile(self.writePipe, '', None)
-            except pywintypes.error:
-                self.writeConnectionLost()
-                return numBytesWritten
+        totalBytesWritten = 0
         while self.outQueue:
             data = self.outQueue.pop(0)
-            errCode = 0
+            if isinstance(data, unicode):
+                raise TypeError("unicode not allowed")
+
             try:
-                errCode, nBytesWritten = win32file.WriteFile(self.writePipe,
-                                                             data, None)
-            except win32api.error:
+                bytesWritten = self.channel.write(data)
+            except ValueError:
+                # WriteConsole() has variable buffer length limitations.
+                # Split data into two (roughly), put back into queue and
+                # try again.
+                len2 = len(data)/2
+                d1, d2 = data[:len2], data[len2:]
+                self.outQueue.insert(0, d2)
+                self.outQueue.insert(0, d1)
+                continue
+            if bytesWritten is None:        # error occurred
                 self.writeConnectionLost()
                 break
-            else:
-                # assert not errCode, "wtf an error code???"
-                numBytesWritten += nBytesWritten
-                if len(data) > nBytesWritten:
-                    self.outQueue.insert(0, data[nBytesWritten:])
-                    break
+            totalBytesWritten += bytesWritten
+            if len(data) > bytesWritten:
+                self.outQueue.insert(0, data[bytesWritten:])
+                break
         else:
             resumed = self.bufferEmpty()
             if not resumed and self.disconnecting:
                 self.writeConnectionLost()
-        return numBytesWritten
+        return totalBytesWritten
+
+
+# _pollingfile support
+class _PollableReadConsole(_PollableReader):
+    def __init__(self, channelConsole, receivedCallback, lostCallback):
+        _PollableReader.__init__(self, channelConsole, receivedCallback, lostCallback) 
+
+
+class _PollableReadPipe(_PollableReader):
+    def __init__(self, handle, receivedCallback, lostCallback):
+        _PollableReader.__init__(self, ChannelReadPipe(handle), receivedCallback, lostCallback)
+
+
+class _PollableWriteConsole(_PollableWriter):
+    def __init__(self, channelConsole, lostCallback):
+        _PollableWriter.__init__(self, channelConsole, lostCallback)
+
+
+class _PollableWritePipe(_PollableWriter):
+    def __init__(self, handle, lostCallback):
+        _PollableWriter.__init__(self, ChannelWritePipe(handle), lostCallback)
+
Index: twisted/internet/test/test_pollingfile.py
===================================================================
--- twisted/internet/test/test_pollingfile.py	(revision 38158)
+++ twisted/internet/test/test_pollingfile.py	(working copy)
@@ -14,21 +14,22 @@
     _pollingfile = None
 
 
-
 class TestPollableWritePipe(TestCase):
     """
     Tests for L{_pollingfile._PollableWritePipe}.
     """
 
-    def test_writeUnicode(self):
+    def test_checkWorkUnicode(self):
         """
-        L{_pollingfile._PollableWritePipe.write} raises a C{TypeError} if an
-        attempt is made to append unicode data to the output buffer.
+        When one tries to pass unicode to L{_pollingfile._PollableWritePipe}, a
+        C{TypeError} is raised instead of passing the data to C{WriteFile}
+        call which is going to mangle it.
         """
         p = _pollingfile._PollableWritePipe(1, lambda: None)
+        p.write("test")
+        p.checkWork()
         self.assertRaises(TypeError, p.write, u"test")
 
-
     def test_writeSequenceUnicode(self):
         """
         L{_pollingfile._PollableWritePipe.writeSequence} raises a C{TypeError}
@@ -36,11 +37,11 @@
         output buffer.
         """
         p = _pollingfile._PollableWritePipe(1, lambda: None)
+        
         self.assertRaises(TypeError, p.writeSequence, [u"test"])
-        self.assertRaises(TypeError, p.writeSequence, (u"test", ))
+        
+        self.assertRaises(TypeError, p.writeSequence, (u"test",))
 
 
-
-
 if _pollingfile is None:
     TestPollableWritePipe.skip = "Test will run only on Windows."
Index: twisted/internet/_dumbwin32proc.py
===================================================================
--- twisted/internet/_dumbwin32proc.py	(revision 38158)
+++ twisted/internet/_dumbwin32proc.py	(working copy)
@@ -144,24 +144,10 @@
         StartupInfo.hStdInput  = hStdinR
         StartupInfo.dwFlags = win32process.STARTF_USESTDHANDLES
 
-        # Create new handles whose inheritance property is false
-        currentPid = win32api.GetCurrentProcess()
+        win32api.SetHandleInformation(self.hStdoutR, win32con.HANDLE_FLAG_INHERIT, 0)
+        win32api.SetHandleInformation(self.hStderrR, win32con.HANDLE_FLAG_INHERIT, 0)
+        win32api.SetHandleInformation(self.hStdinW,  win32con.HANDLE_FLAG_INHERIT, 0)
 
-        tmp = win32api.DuplicateHandle(currentPid, self.hStdoutR, currentPid, 0, 0,
-                                       win32con.DUPLICATE_SAME_ACCESS)
-        win32file.CloseHandle(self.hStdoutR)
-        self.hStdoutR = tmp
-
-        tmp = win32api.DuplicateHandle(currentPid, self.hStderrR, currentPid, 0, 0,
-                                       win32con.DUPLICATE_SAME_ACCESS)
-        win32file.CloseHandle(self.hStderrR)
-        self.hStderrR = tmp
-
-        tmp = win32api.DuplicateHandle(currentPid, self.hStdinW, currentPid, 0, 0,
-                                       win32con.DUPLICATE_SAME_ACCESS)
-        win32file.CloseHandle(self.hStdinW)
-        self.hStdinW = tmp
-
         # Add the specified environment to the current environment - this is
         # necessary because certain operations are only supported on Windows
         # if certain environment variables are present.
Index: twisted/internet/_win32stdio.py
===================================================================
--- twisted/internet/_win32stdio.py	(revision 38158)
+++ twisted/internet/_win32stdio.py	(working copy)
@@ -1,18 +1,27 @@
-# -*- test-case-name: twisted.test.test_stdio -*-
+# -*- test-case-name: twisted.test.test_process.ProcessTestCase.testStdio,twisted.test.test_conio.StdIOTestCase -*-
 
+# Copyright (c) 2009 Twisted Matrix Laboratories.
+# See LICENSE for details.
+
 """
 Windows-specific implementation of the L{twisted.internet.stdio} interface.
 """
+import os
+import sys
+import errno
+import msvcrt
+import time
 
+import pywintypes
 import win32api
-import os, msvcrt
 
 from zope.interface import implements
 
 from twisted.internet.interfaces import IHalfCloseableProtocol, ITransport, IAddress
 from twisted.internet.interfaces import IConsumer, IPushProducer
+from twisted.internet import main, abstract
 
-from twisted.internet import _pollingfile, main
+import _pollingfile
 from twisted.python.failure import Failure
 
 
@@ -20,7 +29,10 @@
     implements(IAddress)
 
 
+class Win32ConsoleAddress(object):
+    implements(IAddress)
 
+
 class StandardIO(_pollingfile._PollingTimer):
 
     implements(ITransport,
@@ -30,29 +42,50 @@
     disconnecting = False
     disconnected = False
 
-    def __init__(self, proto):
+    def __init__(self, proto, forceConsole=False):
         """
         Start talking to standard IO with the given protocol.
 
-        Also, put it stdin/stdout/stderr into binary mode.
+        Also, put stdin/stdout/stderr into binary mode.
         """
         from twisted.internet import reactor
-
-        for stdfd in range(0, 1, 2):
+        
+        for stdfd in (0, 1, 2):
             msvcrt.setmode(stdfd, os.O_BINARY)
 
         _pollingfile._PollingTimer.__init__(self, reactor)
         self.proto = proto
+        
+        # Check if we are connected to a console.
+        # If this is the case, connect to the console, else connect to
+        # anonymous pipes.
+        if forceConsole or os.isatty(0) or os.isatty(1) or os.isatty(2):
+            import win32conio
+            console = win32conio.Console()
+            self.stdin = _pollingfile._PollableReadConsole(
+                console, self.dataReceived, self.readConnectionLost
+                )
+            self.stdout = _pollingfile._PollableWriteConsole(
+                console, self.writeConnectionLost
+                )
+            self.stderr = None
+            self._disconnectCount = 2
+        else:
+            hstdin = win32api.GetStdHandle(win32api.STD_INPUT_HANDLE)
+            self.stdin = _pollingfile._PollableReadPipe(
+                hstdin, self.dataReceived, self.readConnectionLost
+                )
+            hstdout = win32api.GetStdHandle(win32api.STD_OUTPUT_HANDLE)
+            self.stdout = _pollingfile._PollableWritePipe(
+                hstdout, self.writeConnectionLost
+                )
+            hstderr = win32api.GetStdHandle(win32api.STD_ERROR_HANDLE)
+            self.stderr = _pollingfile._PollableWritePipe(
+                hstderr, self.writeConnectionLost
+                )
+            self._disconnectCount = 3
+            self._addPollableResource(self.stderr)
 
-        hstdin = win32api.GetStdHandle(win32api.STD_INPUT_HANDLE)
-        hstdout = win32api.GetStdHandle(win32api.STD_OUTPUT_HANDLE)
-
-        self.stdin = _pollingfile._PollableReadPipe(
-            hstdin, self.dataReceived, self.readConnectionLost)
-
-        self.stdout = _pollingfile._PollableWritePipe(
-            hstdout, self.writeConnectionLost)
-
         self._addPollableResource(self.stdin)
         self._addPollableResource(self.stdout)
 
@@ -75,13 +108,17 @@
 
     def checkConnLost(self):
         self.connsLost += 1
-        if self.connsLost >= 2:
+        if self.connsLost >= self._disconnectCount:
             self.disconnecting = True
             self.disconnected = True
             self.proto.connectionLost(Failure(main.CONNECTION_DONE))
 
     # ITransport
 
+    # XXX Actually, see #3597.
+    def loseWriteConnection(self):
+        self.stdout.close()
+
     def write(self, data):
         self.stdout.write(data)
 
@@ -90,15 +127,28 @@
 
     def loseConnection(self):
         self.disconnecting = True
+        self.disconnected = True
         self.stdin.close()
         self.stdout.close()
+        if self.stderr:
+            self.stderr.close()
 
+    def setEcho(self, enabled):
+        self.stdin.channel.setEcho(enabled)
+
     def getPeer(self):
-        return Win32PipeAddress()
+        if os.isatty(0) and os.isatty(1):
+            return Win32ConsoleAddress()
+        else:
+            return Win32PipeAddress()
 
     def getHost(self):
-        return Win32PipeAddress()
+        if os.isatty(0) and os.isatty(1):
+            return Win32ConsoleAddress()
+        else:
+            return Win32PipeAddress()
 
+
     # IConsumer
 
     def registerProducer(self, producer, streaming):
