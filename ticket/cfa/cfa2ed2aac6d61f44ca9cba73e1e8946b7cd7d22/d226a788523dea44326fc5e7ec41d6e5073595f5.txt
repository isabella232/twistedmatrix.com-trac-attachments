? _trial_temp
? diff
? manhole.patch
? manhole.txt
? internet/pickle.py
? protocols/DEADJOE
? test/DEADJOE
? test/_trial_temp
Index: manhole/service.py
===================================================================
RCS file: /cvs/Twisted/twisted/manhole/service.py,v
retrieving revision 1.37
diff -u -r1.37 service.py
--- manhole/service.py	18 Feb 2003 21:15:30 -0000	1.37
+++ manhole/service.py	8 Oct 2003 21:58:04 -0000
@@ -22,6 +22,7 @@
 from twisted import copyright
 from twisted.spread import pb
 from twisted.python import log, components, failure
+from twisted.cred import portal
 
 # sibling imports
 import explorer
@@ -199,12 +200,13 @@
 
 class Perspective(pb.Perspective):
     lastDeferred = 0
-    def __init__(self, perspectiveName, identityName="Nobody"):
+    def __init__(self, service, perspectiveName, identityName="Nobody"):
         pb.Perspective.__init__(self, perspectiveName, identityName)
         self.localNamespace = {
             "_": None,
             }
         self.clients = {}
+        self.service = service
 
     def __getstate__(self):
         state = self.__dict__.copy()
@@ -213,10 +215,6 @@
             del state['localNamespace']['__builtins__']
         return state
 
-    def setService(self, service):
-        pb.Perspective.setService(self, service)
-        # self.browser.globalNamespace = service.namespace
-
     def attached(self, client, identity):
         """A client has attached -- welcome them and add them to the list.
         """
@@ -226,9 +224,6 @@
 
         msg = self.service.welcomeMessage % {
             'you': getattr(identity, 'name', str(identity)),
-            'serviceName': self.service.getServiceName(),
-            'app': getattr(self.service.application, 'name',
-                           "some application"),
             'host': host,
             'longversion': copyright.longversion,
             }
@@ -366,18 +361,29 @@
                               self.receiveExplorer)
 
 
-class Service(pb.Service):
-    perspectiveClass = Perspective
-    serviceType = "manhole"
+class Realm:
+
+    __implements__ = portal.IRealm
+
+    def __init__(self, service):
+        self.service = service
+
+    def requestAvatar(self, avatarId, mind, *interfaces):
+        if pb.IPerspective in interfaces:
+            return (pb.IPerspective,
+                    Perspective(self.service, "manhole", avatarId),
+                    lambda : None)
+        else:
+            raise NotImplementedError("no interface")
+
+class Service:
 
     welcomeMessage = (
-        "\nHello %(you)s, welcome to %(serviceName)s "
-        "in %(app)s on %(host)s.\n"
+        "\nHello %(you)s, welcome to Manhole "
+        "on %(host)s.\n"
         "%(longversion)s.\n\n")
 
-    def __init__(self, serviceName='twisted.manhole', serviceParent=None, authorizer=None):
-        pb.Service.__init__(self, serviceName, serviceParent, authorizer)
-
+    def __init__(self):
         self.namespace = {
             # I'd specify __name__ so we don't get it from __builtins__,
             # but that seems to have the potential for breaking imports.
@@ -391,15 +397,9 @@
         """
         # TODO -- refactor this and twisted.reality.author.Author to
         # use common functionality (perhaps the 'code' module?)
-        dict = pb.Service.__getstate__(self)
+        dict = self.__dict__.copy()
         ns = dict['namespace'].copy()
         dict['namespace'] = ns
         if ns.has_key('__builtins__'):
             del ns['__builtins__']
         return dict
-
-    def __str__(self):
-        s = "<%s in application \'%s\'>" % (self.getServiceName(),
-                                            getattr(self.application,
-                                                    'name', "???"))
-        return s
Index: names/client.py
===================================================================
RCS file: /cvs/Twisted/twisted/names/client.py,v
retrieving revision 1.41
diff -u -r1.41 client.py
--- names/client.py	19 Sep 2003 09:38:30 -0000	1.41
+++ names/client.py	8 Oct 2003 21:58:04 -0000
@@ -300,7 +300,7 @@
 
 def createResolver(servers = None, resolvconf = None, hosts = None):
     import resolve, cache, hosts, root
-    if platform.getType() == 'posix':
+    if platform.getType() == 'posixZZZ':
         if resolvconf is None:
             resolvconf = '/etc/resolv.conf'
         if hosts is None:
@@ -317,6 +317,7 @@
     L = [hostResolver, cache.CacheResolver(), theResolver]
     return resolve.ResolverChain(L)
 
+theResolver = None
 def _makeLookup(method):
     def lookup(*a, **kw):
         global theResolver
Index: spread/ui/gtk2util.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/ui/gtk2util.py,v
retrieving revision 1.5
diff -u -r1.5 gtk2util.py
--- spread/ui/gtk2util.py	10 Apr 2003 01:21:56 -0000	1.5
+++ spread/ui/gtk2util.py	8 Oct 2003 21:58:04 -0000
@@ -23,6 +23,7 @@
 from twisted.internet import defer
 from twisted.python import failure, log, util
 from twisted.spread import pb
+from twisted.cred.credentials import UsernamePassword
 
 from twisted.internet import error as netError
 
@@ -160,17 +161,23 @@
         except ValueError:
             pass
 
-        _identityConnector = pb.IdentityConnector(**idParams)
+        f = pb.PBClientFactory()
+        from twisted.internet import reactor
+        reactor.connectTCP(idParams['host'], idParams['port'], f)
+        f.login(UsernamePassword(idParams['identityName'], idParams['password'])
+            ).addCallbacks(self._cbGotPerspective, self._ebFailedLogin
+            ).setTimeout(30
+            )
         self.statusMsg("Contacting server...")
 
-        serviceName = self._serviceNameEntry.get_text()
-        perspectiveName = self._perspectiveNameEntry.get_text()
-        if not perspectiveName:
-            perspectiveName = idParams['identityName']
-
-        d = _identityConnector.requestService(serviceName, perspectiveName,
-                                              self.client)
-        d.addCallbacks(self._cbGotPerspective, self._ebFailedLogin)
+        # serviceName = self._serviceNameEntry.get_text()
+        # perspectiveName = self._perspectiveNameEntry.get_text()
+        # if not perspectiveName:
+        #     perspectiveName = idParams['identityName']
+
+        # d = _identityConnector.requestService(serviceName, perspectiveName,
+        #                                       self.client)
+        # d.addCallbacks(self._cbGotPerspective, self._ebFailedLogin)
         # setCursor to waiting
 
     def _cbGotPerspective(self, perspective):
Index: spread/ui/gtkutil.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/ui/gtkutil.py,v
retrieving revision 1.21
diff -u -r1.21 gtkutil.py
--- spread/ui/gtkutil.py	28 Apr 2002 09:49:30 -0000	1.21
+++ spread/ui/gtkutil.py	8 Oct 2003 21:58:04 -0000
@@ -21,6 +21,7 @@
 from twisted.spread import pb
 from twisted import copyright
 from twisted.python import reflect
+from twisted.cred.credentials import UsernamePassword
 
 normalFont = gtk.load_font("-adobe-courier-medium-r-normal-*-*-120-*-*-m-*-iso8859-1")
 boldFont = gtk.load_font("-adobe-courier-bold-r-normal-*-*-120-*-*-m-*-iso8859-1")
@@ -185,10 +186,16 @@
         self.service_tx = service
         self.perspective_tx = perspective or user
         afterOneTimeout(10, self.__actuallyConnect)
+    
     def __actuallyConnect(self):
-        pb.connect(self.host_tx, self.port_tx, self.user_tx, self.pswd_tx,
-                   self.service_tx, self.perspective_tx, self.pbReferenceable, 30).addCallbacks(
-            self.pbCallback, self.couldNotConnect)
+        from twisted.application import internet
+
+        f = pb.PBClientFactory()
+        internet.TCPClient(self.host_tx, self.port_tx, f)
+        f.login(UsernamePassword(self.user_tx, self.pswd_tx)
+            ).addCallbacks(self.pbCallback, self.couldNotConnect
+            ).setTimeout(30
+            )
 
     def couldNotConnect(self, msg):
         self.loginReport("couldn't connect: %s" % str(msg))
Index: tap/manhole.py
===================================================================
RCS file: /cvs/Twisted/twisted/tap/manhole.py,v
retrieving revision 1.25
diff -u -r1.25 manhole.py
--- tap/manhole.py	11 Apr 2003 18:54:12 -0000	1.25
+++ tap/manhole.py	8 Oct 2003 21:58:04 -0000
@@ -20,20 +20,18 @@
 """
 
 from twisted.manhole import service
-from twisted.cred import authorizer
 from twisted.spread import pb
 from twisted.python import usage, util
+from twisted.cred import portal, checkers
+from twisted.application import strports
 import os, sys
 
-
 class Options(usage.Options):
     synopsis = "mktap manhole [options]"
-    optParameters = [["user", "u", "admin", "Name of user to allow to log in"]]
-    def opt_port(self, opt):
-        try:
-            self['port'] = int(opt)
-        except ValueError:
-            raise usage.error("Invalid argument to 'port'!")
+    optParameters = [
+           ["user", "u", "admin", "Name of user to allow to log in"],
+           ["port", "p", str(pb.portno), "Port to listen on"]
+    ]
 
     def opt_password(self, password):
         """Required.  '-' will prompt or read a password from stdin.
@@ -45,23 +43,16 @@
             self['password'] = util.getPassword(confirm=1)
         else:
             self['password'] = password
+    opt_w = opt_password
 
     def postOptions(self):
         if not self.has_key('password'):
             self.opt_password('-')
 
-    opt_p = opt_port
-    opt_w = opt_password
-
-
-def updateApplication(app, config):
-    auth = authorizer.DefaultAuthorizer(app)
-    svc = service.Service("twisted.manhole", serviceParent=app,
-                          authorizer=auth)
-    p = svc.createPerspective(config['user'])
-    p.makeIdentity(config['password'])
-    try:
-        portno = config['port']
-    except KeyError:
-        portno = pb.portno
-    app.listenTCP(portno, pb.BrokerFactory(pb.AuthRoot(auth)))
+def makeService(config):
+    realm = service.Realm(service.Service())
+    p = portal.Portal(realm)
+    checker = checkers.InMemoryUsernamePasswordDatabaseDontUse()
+    checker.addUser(config['user'], config['password'])
+    p.registerChecker(checker)
+    return strports.service(config['port'], pb.PBServerFactory(p))
