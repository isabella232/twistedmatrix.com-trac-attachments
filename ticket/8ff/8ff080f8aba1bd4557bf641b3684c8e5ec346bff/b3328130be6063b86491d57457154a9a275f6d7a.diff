Index: doc/development/philosophy.xhtml
===================================================================
--- doc/development/philosophy.xhtml	(revision 24967)
+++ doc/development/philosophy.xhtml	(working copy)
@@ -41,10 +41,9 @@
 that's OK, when they need it they can learn a bit more. This
 will also lead to a cleaner, easier to test design.</p>
 
-<p>For example - mktap together with twistd is a great way to
-deploy applications. But to get started you don't need to know
-or care about either. Later on you can start using twistd,
-and if you choose mktap as well. Using them is optional.</p>
+<p>For example - using twistd is a great way to deploy applications.
+But to get started you don't need to know about it.  Later on you can 
+start using twistd, but its usage is optional.</p>
 
 </body>
 </html>
Index: doc/web/howto/using-twistedweb.xhtml
===================================================================
--- doc/web/howto/using-twistedweb.xhtml	(revision 24967)
+++ doc/web/howto/using-twistedweb.xhtml	(working copy)
@@ -36,12 +36,18 @@
 
 </ul>
 
+The Twisted.Web server is stopped and started through the Twisted Daemon, as in:
+
+<pre class="shell">
+% twistd web
+</pre>
+
 <h3>Site Objects</h3>
 <a name="sites" />
 
 <p>Site objects serve as the glue between a port to listen for HTTP requests on, and a root Resource object.</p>
 
-<p>When using <code>mktap web --path /foo/bar/baz</code>, a Site object is created with a root Resource that serves files out of the given path.</p>
+<p>When using <code>twistd -n web --path /foo/bar/baz</code>, a Site object is created with a root Resource that serves files out of the given path.</p>
 
 <p>You can also create a <code>Site</code> instance by hand, passing it a
 <code>Resource</code> object which will serve as the root of the site:</p>
@@ -148,8 +154,7 @@
 <p>Creating a Twisted Web server which serves a directory is easy:</p>
 
 <pre class="shell">
-% mktap web --path /Users/dsp/Sites
-% twistd -nf web.tap
+% twistd -n web --path /Users/dsp/Sites
 </pre>
 
 <h3>Resource rendering</h3>
@@ -383,16 +388,16 @@
 <p> To install the Twisted.Web server, you'll need to have
 installed Twisted.</p>
 
-<p> Pre-configured Twisted servers, like the web server, do not have configuration files.  Instead, you instantiate the server and store it into a 'Pickle' file, <code>web.tap</code>.  This file will then be loaded by the Twisted Daemon.   </p>
+<p> Pre-configured Twisted servers, like the web server, do not have configuration files.  Instead, you load them with the Twisted Daemon.   </p>
 
 <pre class="shell">
-% mktap web --path /path/to/web/content
+% twistd web --path /path/to/web/content
 </pre>
 
 <p> If you just want to serve content from your own home directory, the following will do:  </p>
 
 <pre class="shell">
-% mktap web --path ~/public_html/
+% twistd web --path ~/public_html/
 </pre>
 
 <p> Some other configuration options are available as well:  </p>
@@ -407,7 +412,7 @@
 <p> The full set of options that are available can be seen with:  </p>
 
 <pre class="shell">
-% mktap web --help
+% twistd web --help
 </pre>
 
 
@@ -415,10 +420,10 @@
 
 <h3>Stopping and Starting the Server</h3>
 
-<p> Once you've created your <code>web.tap</code> file and done any configuration, you can start the server:  </p>
+<p> The Twisted Daemon is used to start the web server:  </p>
 
 <pre class="shell">
-% twistd -f web.tap
+% twistd web
 </pre>
 
 <p> You can stop the server at any time by going back to the directory you started it in and running the command: </p>
@@ -507,11 +512,11 @@
 <p> One of the most interesting applications of Twisted.Web is the distributed webserver; multiple servers can all answer requests on the same port, using the <code class="API">twisted.spread</code> package for <q>spreadable</q> computing.  In two different directories, run the commands:  </p>
 
 <pre class="shell">
-% mktap web --user
-% mktap web --personal [other options, if you desire]
+% twistd web --user
+% twistd web --personal [other options, if you desire]
 </pre>
 
-<p> Both of these create a <code>web.tap</code>; you need to run both at the same time.  Once you have, go to <code>http://localhost:8080/your_username.twistd/</code> -- you will see the front page from the server you created with the <code>--personal</code> option.  What's happening here is that the request you've sent is being relayed from the central (User) server to your own (Personal) server, over a PB connection.  This technique can be highly useful for small <q>community</q> sites; using the code that makes this demo work, you can connect one HTTP port to multiple resources running with different permissions on the same machine, on different local machines, or even over the internet to a remote site.  </p>
+<p> Once you're running both of these instances, go to <code>http://localhost:8080/your_username.twistd/</code> -- you will see the front page from the server you created with the <code>--personal</code> option.  What's happening here is that the request you've sent is being relayed from the central (User) server to your own (Personal) server, over a PB connection.  This technique can be highly useful for small <q>community</q> sites; using the code that makes this demo work, you can connect one HTTP port to multiple resources running with different permissions on the same machine, on different local machines, or even over the internet to a remote site.  </p>
 
 
 <h3>Serving PHP/Perl/CGI</h3>
@@ -562,7 +567,7 @@
 <p>Of course, an equivalent <code>.trp</code> can also be used. Make sure
 the web server is configured with the correct processors for the 
 <code>rpy</code> or <code>trp</code> extensions (the web server 
-<code>mktap web --path</code> generates by default is so configured).</p>
+<code>twistd web --path</code> generates by default is so configured).</p>
 
 <p>From the Apache side, instead of using the following ProxyPass directive:</p>
 
