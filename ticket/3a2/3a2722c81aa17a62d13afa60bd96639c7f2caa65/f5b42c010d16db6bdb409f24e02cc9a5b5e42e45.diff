--- twisted/internet/defer.py 
+++ twisted/internet/defer.py 
@@ -777,7 +777,7 @@
     regular sequential function. This function uses features of Python 2.5
     generators.  If you need to be compatible with Python 2.4 or before, use
     the L{deferredGenerator} function instead, which accomplishes the same
-    thing, but with somewhat more boilerplate.
+    thing, but with somewhat more boilerplate.  For example::
 
         def thingummy():
             thing = yield makeSomeRequestResultingInDeferred()
@@ -797,7 +797,7 @@
     will cause the Deferred to have a result of None.
 
     The Deferred returned from your deferred generator may errback if your
-    generator raised an exception.
+    generator raised an exception::
 
         def thingummy():
             thing = yield makeSomeRequestResultingInDeferred()
--- twisted/internet/task.py 
+++ twisted/internet/task.py 
@@ -21,6 +21,9 @@
 
 class LoopingCall:
     """Call a function repeatedly.
+
+    If C{f} returns a deferred, rescheduling will not take place until the
+    deferred has fired. The result value is ignored.
 
     @ivar f: The function to call.
     @ivar a: A tuple of arguments to pass the function.
@@ -30,9 +33,6 @@
         L{twisted.internet.reactor}. Feel free to set this to
         something else, but it probably ought to be set *before*
         calling L{start}.
-
-    If C{f} returns a deferred, rescheduling will not take place until the
-    deferred has fired. The result value is ignored.
     """
 
     call = None
--- twisted/mail/pop3.py 
+++ twisted/mail/pop3.py 
@@ -881,8 +881,7 @@
 
         @return: The number of octets in the specified message, or an iterable
         of integers representing the number of octets in all the messages.  Any
-        value which would have referred to a deleted message should be set to
-        0.
+        value which would have referred to a deleted message should be set to 0.
 
         @raise ValueError: if C{index} is greater than the index of any message
         in the mailbox.
@@ -896,7 +895,7 @@
 
         @rtype: A file-like object
         @return: A file containing the message data with lines delimited by
-        C{\n}.
+        C{\\n}.
         """
 
     def getUidl(index):
--- twisted/python/modules.py 
+++ twisted/python/modules.py 
@@ -17,7 +17,7 @@
 The top-level exposed functions in this module for accessing the system path
 are "walkModules", "iterModules", and "getModule".
 
-From most to least specific, here are the objects provided:
+From most to least specific, here are the objects provided::
 
                   PythonPath  # sys.path
                       |
@@ -37,7 +37,7 @@
                      ...
 
 Here's an example of idiomatic usage: this is what you would do to list all of
-the modules outside the standard library's python-files directory.
+the modules outside the standard library's python-files directory::
 
     import os
     stdlibdir = os.path.dirname(os.__file__)
--- twisted/python/zshcomp.py 
+++ twisted/python/zshcomp.py 
@@ -3,7 +3,7 @@
 # See LICENSE for details.
 
 """
-Rebuild the completion functions for the currently active version of Twisted:
+Rebuild the completion functions for the currently active version of Twisted::
     $ python zshcomp.py -i
 
 This module implements a zsh code generator which generates completion code for
@@ -12,7 +12,7 @@
 
 API Stability: Unstable
 
-@maintainer: Eric Mangold
+Maintainer: Eric Mangold
 
 To build completion functions for your own commands, and not Twisted commands,
 then just do something like this::
--- twisted/spread/banana.py 
+++ twisted/spread/banana.py 
@@ -90,7 +90,7 @@
         """
         Set the prefix limit for decoding done by this protocol instance.
 
-        @see L{setPrefixLimit}
+        @see: L{setPrefixLimit}
         """
         self.prefixLimit = limit
         self._smallestLongInt = -2 ** (limit * 7) + 1
--- twisted/spread/jelly.py 
+++ twisted/spread/jelly.py 
@@ -278,7 +278,7 @@
 
     def jellyFor(self, jellier):
         """
-        @see L{twisted.spread.interfaces.IJellyable.jellyFor}
+        @see: L{twisted.spread.interfaces.IJellyable.jellyFor}
         """
         sxp = jellier.prepare(self)
         sxp.extend([
@@ -302,7 +302,7 @@
         """
         Perform the inverse operation of L{Jellyable.jellyFor}.
 
-        @see L{twisted.spread.interfaces.IUnjellyable.unjellyFor}
+        @see: L{twisted.spread.interfaces.IUnjellyable.unjellyFor}
         """
         state = unjellier.unjelly(jellyList[1])
         self.setStateFor(unjellier, state)
--- twisted/vfs/ivfs.py 
+++ twisted/vfs/ivfs.py 
@@ -101,7 +101,7 @@
         """
         Returns a node object for child childName
 
-        @raises NotFoundError if no child with that name exists.
+        @raises: NotFoundError if no child with that name exists.
         """
 
     def createDirectory(childName):
--- twisted/web/http.py 
+++ twisted/web/http.py 
@@ -173,7 +173,7 @@
     This is similar to L{urlparse.urlparse}, but rejects C{unicode} input
     and always produces C{str} output.
 
-    @type url C{str}
+    @type url: C{str}
 
     @raise TypeError: The given url was a C{unicode} string instead of a
     C{str}.
--- twisted/web2/auth/digest.py 
+++ twisted/web2/auth/digest.py 
@@ -244,7 +244,7 @@
 
         @return: Return True if the opaque was successfully verified
 
-        @raise L{twisted.cred.error.LoginFailed}
+        @raise: L{twisted.cred.error.LoginFailed}
         """
 
         # First split the digest from the key
--- twisted/web2/client/interfaces.py 
+++ twisted/web2/client/interfaces.py 
@@ -23,12 +23,12 @@
         pass
 
     def clientPipelining(proto):
-        """Called when the L{HTTPClientProtocol determines that it is able to
+        """Called when the L{HTTPClientProtocol} determines that it is able to
         support request pipelining.
     
         @param proto: The L{HTTPClientProtocol} that is changing state.
         @type proto: L{HTTPClientProtocol}
-        """     
+        """
         pass
     
     def clientGone(proto):
--- twisted/web2/dav/resource.py 
+++ twisted/web2/dav/resource.py 
@@ -60,28 +60,28 @@
     There are three categories of DAV properties, for the purposes of how this
     class manages them.  A X{property} is either a X{live property} or a
     X{dead property}, and live properties are split into two categories:
-    
-    1. Dead properties.  There are properties that the server simply stores as
-       opaque data.  These are store in the X{dead property store}, which is
-       provided by subclasses via the L{deadProperties} method.
-
-    2. Live properties which are always computed.  These properties aren't
-       stored anywhere (by this class) but instead are derived from the resource
-       state or from data that is persisted elsewhere.  These are listed in the
-       L{liveProperties} attribute and are handled explicitly by the
-       L{readProperty} method.
-
-    3. Live properties may be acted on specially and are stored in the X{dead
-       property store}.  These are not listed in the L{liveProperties} attribute,
-       but may be handled specially by the property access methods.  For
-       example, L{writeProperty} might validate the data and refuse to write
-       data it deems inappropriate for a given property.
+
+     1. Dead properties.  There are properties that the server simply stores as
+        opaque data.  These are store in the X{dead property store}, which is
+        provided by subclasses via the L{deadProperties} method.
+
+     2. Live properties which are always computed.  These properties aren't
+        stored anywhere (by this class) but instead are derived from the resource
+        state or from data that is persisted elsewhere.  These are listed in the
+        L{liveProperties} attribute and are handled explicitly by the
+        L{readProperty} method.
+
+     3. Live properties may be acted on specially and are stored in the X{dead
+        property store}.  These are not listed in the L{liveProperties} attribute,
+        but may be handled specially by the property access methods.  For
+        example, L{writeProperty} might validate the data and refuse to write
+        data it deems inappropriate for a given property.
 
     There are two sets of property access methods.  The first group
     (L{hasProperty}, etc.) provides access to all properties.  They
     automatically figure out which category a property falls into and act
     accordingly.
-    
+
     The second group (L{hasDeadProperty}, etc.) accesses the dead property store
     directly and bypasses any live property logic that exists in the first group
     of methods.  These methods are used by the first group of methods, and there
--- twisted/web2/dav/xattrprops.py 
+++ twisted/web2/dav/xattrprops.py 
@@ -47,7 +47,7 @@
 class xattrPropertyStore (object):
     """
 
-    This implementation uses Bob Ippolito's xattr package, available from:
+    This implementation uses Bob Ippolito's xattr package, available from::
 
         http://undefined.org/python/#xattr
 
--- twisted/words/protocols/jabber/client.py 
+++ twisted/words/protocols/jabber/client.py 
@@ -286,7 +286,7 @@
     Client factory for XMPP 1.0 (only).
 
     This returns a L{xmlstream.XmlStreamFactory} with an L{XMPPAuthenticator}
-    object to perform the stream initialization steps (such as authentication}.
+    object to perform the stream initialization steps (such as authentication).
 
     @see: The notes at L{XMPPAuthenticator} describe how the L{jid} and
     L{password} parameters are to be used.
--- twisted/words/xish/domish.py 
+++ twisted/words/xish/domish.py 
@@ -324,7 +324,7 @@
 
     To illustrate, an example from a Jabber stream. Assume the start tag of the
     root element of the stream has already been serialized, along with several
-    complete child elements, and sent off, looking like this:
+    complete child elements, and sent off, looking like this::
 
       <stream:stream xmlns:stream='http://etherx.jabber.org/streams'
                      xmlns='jabber:client' to='example.com'>
