Index: twisted/protocols/basic.py
===================================================================
--- twisted/protocols/basic.py	(revision 38689)
+++ twisted/protocols/basic.py	(working copy)
@@ -449,11 +449,15 @@
                 # the one that told it to close.
                 return
             if len(line) > self.MAX_LENGTH:
-                return self.lineLengthExceeded(line)
+                lines.append(self._buffer)
+                buf = self.delimiter.join(lines)
+                self._buffer = ''
+                return self.lineLengthExceeded(buf)
             else:
                 self.lineReceived(line)
         if len(self._buffer) > self.MAX_LENGTH:
-            return self.lineLengthExceeded(self._buffer)
+            buf, self._buffer = self._buffer, ''
+            return self.lineLengthExceeded(buf)
 
 
     def lineReceived(self, line):
Index: twisted/protocols/test/test_basic.py
===================================================================
--- twisted/protocols/test/test_basic.py	(revision 38689)
+++ twisted/protocols/test/test_basic.py	(working copy)
@@ -401,7 +401,44 @@
         self.assertRaises(NotImplementedError, proto.lineReceived, 'foo')
 
 
+    def test_lineLengthExceeded(self):
+        """
+        C{LineOnlyReceiver} calls C{lineLengthExceeded} with the
+        entire remaining contents of its buffer.
+        """
+        caught_line = []
+        class ExcessivelyLargeLineCatcher(LineOnlyTester):
+            def lineReceived(self, line):
+                pass
+            def lineLengthExceeded(self, line):
+                caught_line.append(line)
 
+        proto = ExcessivelyLargeLineCatcher()
+        proto.MAX_LENGTH=6
+        transport = proto_helpers.StringTransport()
+        proto.makeConnection(transport)
+        excessive_input = b'y' * (proto.MAX_LENGTH * 2 + 2)
+        proto.dataReceived(excessive_input)
+        self.assertEqual(caught_line and caught_line[0], excessive_input)
+        del caught_line[:]
+
+        excessive_input = b'u' * (proto.MAX_LENGTH * 2 + 2)
+        proto.dataReceived(b'z'+proto.delimiter + excessive_input)
+        self.assertEqual(caught_line[0], excessive_input)
+        del caught_line[:]
+
+        excessive_input = b'q' * (proto.MAX_LENGTH * 2 + 2) + proto.delimiter + b't' * (proto.MAX_LENGTH * 2 + 2)
+        proto.dataReceived(excessive_input)
+        self.assertEqual(caught_line[0], excessive_input)
+        del caught_line[:]
+
+        excessive_input = b'r' * (proto.MAX_LENGTH * 2 + 2) + proto.delimiter + b'v' * (proto.MAX_LENGTH * 2 + 2) + proto.delimiter
+        proto.dataReceived(excessive_input)
+        self.assertEqual(caught_line[0], excessive_input)
+        del caught_line[:]
+
+
+
 class TestMixin:
 
     def connectionMade(self):
