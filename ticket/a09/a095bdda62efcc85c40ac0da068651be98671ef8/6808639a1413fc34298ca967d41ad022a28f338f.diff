=== modified file 'twisted/internet/base.py'
--- twisted/internet/base.py	2009-06-01 18:07:14 +0000
+++ twisted/internet/base.py	2009-10-30 08:04:56 +0000
@@ -614,7 +614,7 @@
     def addSystemEventTrigger(self, _phase, _eventType, _f, *args, **kw):
         """See twisted.internet.interfaces.IReactorCore.addSystemEventTrigger.
         """
-        assert callable(_f), "%s is not callable" % _f
+        assert hasattr(_f, "__call__"), "%s is not callable" % _f
         if _eventType not in self._eventTriggers:
             self._eventTriggers[_eventType] = _ThreePhaseEvent()
         return (_eventType, self._eventTriggers[_eventType].addTrigger(
@@ -671,7 +671,7 @@
     def callLater(self, _seconds, _f, *args, **kw):
         """See twisted.internet.interfaces.IReactorTime.callLater.
         """
-        assert callable(_f), "%s is not callable" % _f
+        assert hasattr(_f, "__call__"), "%s is not callable" % _f
         assert sys.maxint >= _seconds >= 0, \
                "%s is not greater than or equal to 0 seconds" % (_seconds,)
         tple = DelayedCall(self.seconds() + _seconds, _f, args, kw,
@@ -896,7 +896,7 @@
             """
             See L{twisted.internet.interfaces.IReactorThreads.callFromThread}.
             """
-            assert callable(f), "%s is not callable" % (f,)
+            assert hasattr(f, "__call__"), "%s is not callable" % (f,)
             # lists are thread-safe in CPython, but not in Jython
             # this is probably a bug in Jython, but until fixed this code
             # won't work in Jython.
@@ -957,7 +957,7 @@
     else:
         # This is for signal handlers.
         def callFromThread(self, f, *args, **kw):
-            assert callable(f), "%s is not callable" % (f,)
+            assert hasattr(f, "__call__"), "%s is not callable" % (f,)
             # See comment in the other callFromThread implementation.
             self.threadCallQueue.append((f, args, kw))
 

=== modified file 'twisted/internet/defer.py'
--- twisted/internet/defer.py	2009-06-29 21:12:48 +0000
+++ twisted/internet/defer.py	2009-10-30 08:04:56 +0000
@@ -171,8 +171,8 @@
 
         These will be executed when the 'master' callback is run.
         """
-        assert callable(callback)
-        assert errback == None or callable(errback)
+        assert hasattr(callback, "__call__")
+        assert errback == None or hasattr(errback, "__call__")
         cbs = ((callback, callbackArgs, callbackKeywords),
                (errback or (passthru), errbackArgs, errbackKeywords))
         self.callbacks.append(cbs)

=== modified file 'twisted/mail/imap4.py'
--- twisted/mail/imap4.py	2009-03-23 11:02:59 +0000
+++ twisted/mail/imap4.py	2009-10-30 08:04:56 +0000
@@ -622,7 +622,7 @@
 
     def __doCommand(self, tag, handler, args, parseargs, line, uid):
         for (i, arg) in enumerate(parseargs):
-            if callable(arg):
+            if hasattr(arg, "__call__"):
                 parseargs = parseargs[i+1:]
                 maybeDeferred(arg, self, line).addCallback(
                     self.__cbDispatch, tag, handler, args,

=== modified file 'twisted/mail/test/test_mail.py'
--- twisted/mail/test/test_mail.py	2009-05-03 22:17:54 +0000
+++ twisted/mail/test/test_mail.py	2009-10-30 08:04:56 +0000
@@ -640,7 +640,7 @@
             )
 
     def _cbValidateTo(self, result):
-        self.failUnless(callable(result))
+        self.failUnless(hasattr(result, "__call__"))
 
     def testValidateToBadUsername(self):
         user = smtp.User('resu@test.domain', 'helo', None, 'wherever@whatever')
@@ -763,7 +763,7 @@
             user.protocol.transport = empty()
             user.protocol.transport.getPeer = lambda: peer
 
-            self.failUnless(callable(domain.exists(user)))
+            self.failUnless(hasattr(domain.exists(user), "__call__"))
 
         for peer in dontRelay:
             user = empty()

=== modified file 'twisted/manhole/service.py'
--- twisted/manhole/service.py	2006-07-01 16:08:17 +0000
+++ twisted/manhole/service.py	2009-10-30 08:04:56 +0000
@@ -119,7 +119,7 @@
         kw = {}
     if localNS is None:
         localNS = globalNS
-    if (globalNS is None) and (not callable(command)):
+    if (globalNS is None) and (not hasattr(command, "__call__")):
         raise ValueError("Need a namespace to evaluate the command in.")
 
     try:
@@ -128,7 +128,7 @@
         sys.stdout = fakeout
         sys.stderr = fakeerr
         try:
-            if callable(command):
+            if hasattr(command, "__call__"):
                 val = apply(command, args, kw)
             else:
                 try:

=== modified file 'twisted/python/log.py'
--- twisted/python/log.py	2009-08-10 12:44:10 +0000
+++ twisted/python/log.py	2009-10-30 08:04:56 +0000
@@ -250,7 +250,7 @@
         @param other: A callable object that will be called with each new log
             message (a dict).
         """
-        assert callable(other)
+        assert hasattr(other, "__call__")
         self.observers.append(other)
 
     def removeObserver(self, other):

=== modified file 'twisted/python/zshcomp.py'
--- twisted/python/zshcomp.py	2008-03-04 20:36:22 +0000
+++ twisted/python/zshcomp.py	2009-10-30 08:04:56 +0000
@@ -526,7 +526,7 @@
         @return: C{str}
         """
         if long in self.actions:
-            if callable(self.actions[long]):
+            if hasattr(self.actions[long], "__call__"):
                 action = self.actions[long]()
             else:
                 action = self.actions[long]

=== modified file 'twisted/spread/pb.py'
--- twisted/spread/pb.py	2008-11-19 18:56:50 +0000
+++ twisted/spread/pb.py	2009-10-30 08:04:56 +0000
@@ -279,7 +279,7 @@
 
         This callback will be called with one argument, this instance.
         """
-        assert callable(callback)
+        assert hasattr(callback, "__call__")
         self.disconnectCallbacks.append(callback)
         if len(self.disconnectCallbacks) == 1:
             self.broker.notifyOnDisconnect(self._disconnected)
@@ -605,17 +605,17 @@
 
     def notifyOnDisconnect(self, notifier):
         """Call the given callback when the Broker disconnects."""
-        assert callable(notifier)
+        assert hasattr(notifier, "__call__")
         self.disconnects.append(notifier)
 
     def notifyOnFail(self, notifier):
         """Call the given callback if the Broker fails to connect."""
-        assert callable(notifier)
+        assert hasattr(notifier, "__call__")
         self.failures.append(notifier)
 
     def notifyOnConnect(self, notifier):
         """Call the given callback when the Broker connects."""
-        assert callable(notifier)
+        assert hasattr(notifier, "__call__")
         if self.connects is None:
             try:
                 notifier()

=== modified file 'twisted/spread/util.py'
--- twisted/spread/util.py	2008-02-16 08:00:12 +0000
+++ twisted/spread/util.py	2009-10-30 08:04:56 +0000
@@ -92,7 +92,7 @@
         Create a pager with a Reference to a remote collector and
         an optional callable to invoke upon completion.
         """
-        if callable(callback):
+        if hasattr(callback, "__call__"):
             self.callback = callback
             self.callbackArgs = args
             self.callbackKeyword = kw

=== modified file 'twisted/trial/test/test_assertions.py'
--- twisted/trial/test/test_assertions.py	2008-11-02 13:59:21 +0000
+++ twisted/trial/test/test_assertions.py	2009-10-30 08:05:18 +0000
@@ -640,7 +640,7 @@
 
     def test_equalSpelling(self):
         for name, value in vars(self).items():
-            if not callable(value):
+            if not hasattr(value, "__call__"):
                 continue
             if name.endswith('Equal'):
                 self.failUnless(hasattr(self, name+'s'),

=== modified file 'twisted/trial/test/test_pyunitcompat.py'
--- twisted/trial/test/test_pyunitcompat.py	2008-07-29 20:13:54 +0000
+++ twisted/trial/test/test_pyunitcompat.py	2009-10-30 08:04:56 +0000
@@ -50,7 +50,7 @@
         """
         Tests must be callable in order to be used with Python's unittest.py.
         """
-        self.assertTrue(callable(self.test),
+        self.assertTrue(hasattr(self.test, "__call__"),
                         "%r is not callable." % (self.test,))
 
 

=== modified file 'twisted/web/xmlrpc.py'
--- twisted/web/xmlrpc.py	2009-01-21 17:10:00 +0000
+++ twisted/web/xmlrpc.py	2009-10-30 08:04:56 +0000
@@ -179,7 +179,7 @@
         if not f:
             raise NoSuchFunction(self.NOT_FOUND,
                 "function %s not found" % functionPath)
-        elif not callable(f):
+        elif not hasattr(f, "__call__"):
             raise NoSuchFunction(self.NOT_FOUND,
                 "function %s not callable" % functionPath)
         else:

=== modified file 'twisted/web2/xmlrpc.py'
--- twisted/web2/xmlrpc.py	2008-07-29 20:13:54 +0000
+++ twisted/web2/xmlrpc.py	2009-10-30 08:04:56 +0000
@@ -131,7 +131,7 @@
         f = getattr(self, "xmlrpc_%s" % functionPath, None)
         if not f:
             raise NoSuchFunction(self.NOT_FOUND, "function %s not found" % functionPath)
-        elif not callable(f):
+        elif not hasattr(f, "__call__"):
             raise NoSuchFunction(self.NOT_FOUND, "function %s not callable" % functionPath)
         else:
             return f

