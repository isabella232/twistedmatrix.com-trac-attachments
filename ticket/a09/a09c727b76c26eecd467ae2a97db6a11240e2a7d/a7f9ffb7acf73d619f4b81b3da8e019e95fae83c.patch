Index: twisted/web2/test/test_log.py
===================================================================
--- twisted/web2/test/test_log.py	(revision 19131)
+++ twisted/web2/test/test_log.py	(working copy)
@@ -6,20 +6,19 @@
 from twisted.test.test_log import FakeFile
 
 class BufferingLogObserver(log.BaseCommonAccessLoggingObserver):
-    messages = ['']
+    messages = []
     def logMessage(self, message):
         self.messages.append(message)
 
-class TestLogWrapperResource(resource.WrapperResource):
+class SetDateWrapperResource(resource.WrapperResource):
     def hook(self, req):
-        def _logFilter(req, resp):
+        def _filter(req, resp):
             resp.headers.setHeader('date', 0.0)
-            return log.logFilter(req, resp)
+            return resp
+        _filter.handleErrors = True
+        
+        req.addResponseFilter(_filter, atEnd=True)
 
-        _logFilter.handleErrors = True
-                                 
-        req.addResponseFilter(_logFilter, atEnd=True)
-
 class NoneStreamResource(resource.Resource):
     def render(self, req):
         return http.Response(200)
@@ -35,8 +34,11 @@
         self.resrc.addSlash = True
         self.resrc.responseHeaders = {'Date': 0.0}
         
-        self.root = TestLogWrapperResource(self.resrc)
+        self.root = SetDateWrapperResource(log.LogWrapperResource(self.resrc))
 
+    def tearDown(self):
+        tlog.removeObserver(self.blo.emit)
+        
     def assertLogged(self, **expected):
         if 'date' not in expected:
             epoch = log.BaseCommonAccessLoggingObserver().logDateString(0)
@@ -56,20 +58,20 @@
 
         if 'remotehost' not in expected:
             expected['remotehost'] = 'remotehost'
+
+        messages = self.blo.messages[:]
+        del self.blo.messages[:]
         
-        if 'message' in expected:
-            message = message
-        else:
-            message = self.blo.messages[-1]
-
         expectedLog = ('%(remotehost)s - %(user)s [%(date)s] "%(method)s '
                        '%(uri)s HTTP/%(version)s" %(status)d %(length)d '
                        '"%(referer)s" "%(user-agent)s"')
 
         if expected.get('logged', True):
-            self.assertEquals(message, expectedLog % expected)
+            # Ensure there weren't other messages hanging out
+            self.assertEquals(len(messages), 1, "len(%r) != 1" % (messages, ))
+            self.assertEquals(messages[0], expectedLog % expected)
         else:
-            self.failIfEquals(message, expectedLog % expected)
+            self.assertEquals(len(messages), 0, "len(%r) != 0" % (messages, ))
 
     def testLogSimpleRequest(self):
         uri = 'http://localhost/'
