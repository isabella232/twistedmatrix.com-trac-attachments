Index: twisted/test/test_protocols.py
===================================================================
--- twisted/test/test_protocols.py	(revision 18505)
+++ twisted/test/test_protocols.py	(working copy)
@@ -8,14 +8,14 @@
 
 from twisted.trial import unittest
 from twisted.protocols import basic, wire, portforward
-from twisted.internet import reactor, protocol, defer, task
+from twisted.internet import reactor, protocol, defer, task, error
 
 import struct
 import StringIO
 
 class StringIOWithoutClosing(StringIO.StringIO):
     """
-    A StringIO that can't be closed
+    A StringIO that can't be closed.
     """
     def close(self):
         """
@@ -25,6 +25,14 @@
 class LineTester(basic.LineReceiver):
     """
     A line receiver that parses data received and make actions on some tokens.
+
+    @type delimiter: C{str}
+    @ivar delimiter: character used between received lines.
+    @type MAX_LENGTH: C{int}
+    @ivar MAX_LENGTH: size of a line when C{lineLengthExceeded} will be called.
+    @type clock: L{twisted.internet.task.Clock}
+    @ivar clock: clock simulating reactor callLater. Pass it to constructor if
+        you want to use the pause/rawpause functionalities.
     """
 
     delimiter = '\n'
@@ -111,7 +119,7 @@
     """
     def testEcho(self):
         """
-        Test wire.Echo protocol.
+        Test wire.Echo protocol: send some data and check it send it back.
         """
         t = StringIOWithoutClosing()
         a = wire.Echo()
@@ -184,7 +192,8 @@
 
     def testBuffer(self):
         """
-        Test buffering for different packet size.
+        Test buffering for different packet size, checking received matches
+        expected data.
         """
         for packet_size in range(1, 10):
             t = StringIOWithoutClosing()
@@ -203,7 +212,8 @@
 
     def testPausing(self):
         """
-        Test pause inside data receiving.
+        Test pause inside data receiving. It uses fake clock to see if
+        pausing/resuming work.
         """
         for packet_size in range(1, 10):
             t = StringIOWithoutClosing()
@@ -281,7 +291,7 @@
 
     def testBuffer(self):
         """
-        Test buffering.
+        Test buffering over line protocol: data received should match buffer.
         """
         t = StringIOWithoutClosing()
         a = LineOnlyTester()
@@ -292,13 +302,13 @@
 
     def testLineTooLong(self):
         """
-        Test sending a line too long.
+        Test sending a line too long: it should close the connection.
         """
         t = StringIOWithoutClosing()
         a = LineOnlyTester()
         a.makeConnection(protocol.FileWrapper(t))
         res = a.dataReceived('x'*200)
-        self.failIfEqual(res, None)
+        self.assertTrue(isinstance(res, error.ConnectionLost))
 
 
 class TestMixin:
@@ -478,11 +488,17 @@
         self.openPorts = []
 
     def tearDown(self):
-        self.clientProtocol.transport.loseConnection()
-        self.serverProtocol.transport.loseConnection()
+        try:
+            self.clientProtocol.transport.loseConnection()
+        except:
+            pass
+        try:
+            self.serverProtocol.transport.loseConnection()
+        except:
+            pass
         return defer.gatherResults(
             [defer.maybeDeferred(p.stopListening) for p in self.openPorts])
-    
+
     def testPortforward(self):
         """
         Test port forwarding through Echo protocol.
@@ -494,7 +510,7 @@
         self.openPorts.append(realServerPort)
 
         proxyServerFactory = portforward.ProxyFactory('127.0.0.1',
-                                                      realServerPort.getHost().port)
+                                realServerPort.getHost().port)
         proxyServerPort = reactor.listenTCP(0, proxyServerFactory,
                                             interface='127.0.0.1')
         self.openPorts.append(proxyServerPort)
@@ -509,7 +525,8 @@
                 d.callback(None)
 
         self.clientProtocol.dataReceived = cb
-        self.clientProtocol.connectionMade = lambda: self.clientProtocol.transport.write('x' * nBytes)
+        self.clientProtocol.connectionMade = \
+            lambda: self.clientProtocol.transport.write('x' * nBytes)
         clientFactory = protocol.ClientFactory()
         clientFactory.protocol = lambda: self.clientProtocol
 
