Index: twisted/test/test_protocols.py
===================================================================
--- twisted/test/test_protocols.py	(revision 18479)
+++ twisted/test/test_protocols.py	(working copy)
@@ -8,35 +8,56 @@
 
 from twisted.trial import unittest
 from twisted.protocols import basic, wire, portforward
-from twisted.internet import reactor, protocol, defer
+from twisted.internet import reactor, protocol, defer, task
 
-import string, struct
+import struct
 import StringIO
 
 class StringIOWithoutClosing(StringIO.StringIO):
+    """
+    A StringIO that can't be closed
+    """
     def close(self):
-        pass
+        """
+        Do nothing.
+        """
 
 class LineTester(basic.LineReceiver):
+    """
+    A line receiver that parses data received and make actions on some tokens.
+    """
 
     delimiter = '\n'
     MAX_LENGTH = 64
 
+    def __init__(self, clock=None):
+        """
+        If given, use a clock to make callLater calls.
+        """
+        self.clock = clock
+
     def connectionMade(self):
+        """
+        Create/clean data received on connection.
+        """
         self.received = []
 
     def lineReceived(self, line):
+        """
+        Receive line and make some action for some tokens: pause, rawpause,
+        stop, len, produce, unproduce.
+        """
         self.received.append(line)
         if line == '':
             self.setRawMode()
         elif line == 'pause':
             self.pauseProducing()
-            reactor.callLater(0, self.resumeProducing)
+            self.clock.callLater(0, self.resumeProducing)
         elif line == 'rawpause':
             self.pauseProducing()
             self.setRawMode()
             self.received.append('')
-            reactor.callLater(0, self.resumeProducing)
+            self.clock.callLater(0, self.resumeProducing)
         elif line == 'stop':
             self.stopProducing()
         elif line[:4] == 'len ':
@@ -47,6 +68,10 @@
             self.transport.unregisterProducer()
 
     def rawDataReceived(self, data):
+        """
+        Read raw data, until the quantity specified by a previous 'len' line is
+        reached.
+        """
         data, rest = data[:self.length], data[self.length:]
         self.length = self.length - len(data)
         self.received[-1] = self.received[-1] + data
@@ -54,24 +79,40 @@
             self.setLineMode(rest)
 
     def lineLengthExceeded(self, line):
-        if len(line) > self.MAX_LENGTH+1:
-            self.setLineMode(line[self.MAX_LENGTH+1:])
+        """
+        Adjust line mode when long lines received.
+        """
+        if len(line) > self.MAX_LENGTH + 1:
+            self.setLineMode(line[self.MAX_LENGTH + 1:])
 
 
 class LineOnlyTester(basic.LineOnlyReceiver):
-
+    """
+    A buffering line only receiver.
+    """
     delimiter = '\n'
     MAX_LENGTH = 64
 
     def connectionMade(self):
+        """
+        Create/clean data received on connection.
+        """
         self.received = []
 
     def lineReceived(self, line):
+        """
+        Save received data.
+        """
         self.received.append(line)
 
 class WireTestCase(unittest.TestCase):
-
+    """
+    Test wire protocols.
+    """
     def testEcho(self):
+        """
+        Test wire.Echo protocol.
+        """
         t = StringIOWithoutClosing()
         a = wire.Echo()
         a.makeConnection(protocol.FileWrapper(t))
@@ -83,12 +124,18 @@
         self.failUnlessEqual(t.getvalue(), "helloworldhowareyou")
 
     def testWho(self):
+        """
+        Test wire.Who protocol.
+        """
         t = StringIOWithoutClosing()
         a = wire.Who()
         a.makeConnection(protocol.FileWrapper(t))
         self.failUnlessEqual(t.getvalue(), "root\r\n")
 
     def testQOTD(self):
+        """
+        Test wire.QOTD protocol.
+        """
         t = StringIOWithoutClosing()
         a = wire.QOTD()
         a.makeConnection(protocol.FileWrapper(t))
@@ -96,6 +143,9 @@
                              "An apple a day keeps the doctor away.\r\n")
 
     def testDiscard(self):
+        """
+        Test wire.Discard protocol.
+        """
         t = StringIOWithoutClosing()
         a = wire.Discard()
         a.makeConnection(protocol.FileWrapper(t))
@@ -107,7 +157,9 @@
         self.failUnlessEqual(t.getvalue(), "")
 
 class LineReceiverTestCase(unittest.TestCase):
-
+    """
+    Test LineReceiver, using the C{LineTester} wrapper.
+    """
     buffer = '''\
 len 10
 
@@ -131,6 +183,9 @@
               'len 0', 'foo 5', '', '67890', 'len 1', 'a']
 
     def testBuffer(self):
+        """
+        Test buffering for different packet size.
+        """
         for packet_size in range(1, 10):
             t = StringIOWithoutClosing()
             a = LineTester()
@@ -147,15 +202,19 @@
     pause_output2 = pause_output1+['twiddle3']
 
     def testPausing(self):
+        """
+        Test pause inside data receiving.
+        """
         for packet_size in range(1, 10):
             t = StringIOWithoutClosing()
-            a = LineTester()
+            clock = task.Clock()
+            a = LineTester(clock)
             a.makeConnection(protocol.FileWrapper(t))
             for i in range(len(self.pause_buf)/packet_size + 1):
                 s = self.pause_buf[i*packet_size:(i+1)*packet_size]
                 a.dataReceived(s)
             self.failUnlessEqual(self.pause_output1, a.received)
-            reactor.iterate(0)
+            clock.advance(0)
             self.failUnlessEqual(self.pause_output2, a.received)
 
     rawpause_buf = 'twiddle1\ntwiddle2\nlen 5\nrawpause\n12345twiddle3\n'
@@ -164,21 +223,29 @@
     rawpause_output2 = ['twiddle1', 'twiddle2', 'len 5', 'rawpause', '12345', 'twiddle3']
 
     def testRawPausing(self):
+        """
+        Test pause inside raw date receiving.
+        """
         for packet_size in range(1, 10):
             t = StringIOWithoutClosing()
-            a = LineTester()
+            clock = task.Clock()
+            a = LineTester(clock)
             a.makeConnection(protocol.FileWrapper(t))
             for i in range(len(self.rawpause_buf)/packet_size + 1):
                 s = self.rawpause_buf[i*packet_size:(i+1)*packet_size]
                 a.dataReceived(s)
             self.failUnlessEqual(self.rawpause_output1, a.received)
-            reactor.iterate(0)
+            clock.advance(0)
             self.failUnlessEqual(self.rawpause_output2, a.received)
 
     stop_buf = 'twiddle1\ntwiddle2\nstop\nmore\nstuff\n'
 
     stop_output = ['twiddle1', 'twiddle2', 'stop']
+
     def testStopProducing(self):
+        """
+        Test stop inside producing.
+        """
         for packet_size in range(1, 10):
             t = StringIOWithoutClosing()
             a = LineTester()
@@ -190,6 +257,9 @@
 
 
     def testLineReceiverAsProducer(self):
+        """
+        Test produce/unproduce in receiving.
+        """
         a = LineTester()
         t = StringIOWithoutClosing()
         a.makeConnection(protocol.FileWrapper(t))
@@ -198,7 +268,9 @@
 
 
 class LineOnlyReceiverTestCase(unittest.TestCase):
-
+    """
+    Test line only receiveer.
+    """
     buffer = """foo
     bleakness
     desolation
@@ -206,6 +278,9 @@
     """
 
     def testBuffer(self):
+        """
+        Test buffering.
+        """
         t = StringIOWithoutClosing()
         a = LineOnlyTester()
         a.makeConnection(protocol.FileWrapper(t))
@@ -214,15 +289,18 @@
         self.failUnlessEqual(a.received, self.buffer.split('\n')[:-1])
 
     def testLineTooLong(self):
+        """
+        Test sending a line too long.
+        """
         t = StringIOWithoutClosing()
         a = LineOnlyTester()
         a.makeConnection(protocol.FileWrapper(t))
         res = a.dataReceived('x'*200)
         self.failIfEqual(res, None)
-            
-                
+
+
 class TestMixin:
-    
+
     def connectionMade(self):
         self.received = []
 
@@ -250,7 +328,7 @@
         a = self.protocol()
         a.makeConnection(protocol.FileWrapper(t))
         return a
-    
+
     def testIllegal(self):
         for s in self.illegal_strings:
             r = self.getProtocol()
@@ -267,7 +345,7 @@
                        '51:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab,',]
 
     protocol = TestNetstring
-    
+
     def testBuffer(self):
         for packet_size in range(1, 10):
             t = StringIOWithoutClosing()
@@ -294,7 +372,7 @@
     strings = ["a", "b" * 16]
     illegal_strings = ["\x10\x00\x00\x00aaaaaa"]
     partial_strings = ["\x00\x00\x00", "hello there", ""]
-    
+
     def testPartial(self):
         for s in self.partial_strings:
             r = self.getProtocol()
@@ -388,7 +466,13 @@
 
 
 class Portforwarding(unittest.TestCase):
+    """
+    Test port forwarding.
+    """
     def testPortforward(self):
+        """
+        Test port forwarding through Echo protocol.
+        """
         serverProtocol = wire.Echo()
         realServerFactory = protocol.ServerFactory()
         realServerFactory.protocol = lambda: serverProtocol
@@ -403,7 +487,19 @@
         nBytes = 1000
         received = []
         clientProtocol = protocol.Protocol()
-        clientProtocol.dataReceived = received.extend
+        d = defer.Deferred()
+        def cb(data):
+            received.extend(data)
+            if len(received) >= nBytes:
+                self.assertEquals(''.join(received), 'x' * nBytes)
+                clientProtocol.transport.loseConnection()
+                serverProtocol.transport.loseConnection()
+                return defer.gatherResults([
+                    defer.maybeDeferred(realServerPort.stopListening),
+                    defer.maybeDeferred(proxyServerPort.stopListening)]
+                    ).addCallback(d.callback)
+
+        clientProtocol.dataReceived = cb
         clientProtocol.connectionMade = lambda: clientProtocol.transport.write('x' * nBytes)
         clientFactory = protocol.ClientFactory()
         clientFactory.protocol = lambda: clientProtocol
@@ -411,15 +507,5 @@
         reactor.connectTCP('127.0.0.1', proxyServerPort.getHost().port,
                            clientFactory)
 
-        c = 0
-        while len(received) < nBytes and c < 100:
-            reactor.iterate(0.01)
-            c += 1
+        return d
 
-        self.assertEquals(''.join(received), 'x' * nBytes)
-        
-        clientProtocol.transport.loseConnection()
-        serverProtocol.transport.loseConnection()
-        return defer.gatherResults([
-            defer.maybeDeferred(realServerPort.stopListening),
-            defer.maybeDeferred(proxyServerPort.stopListening)])
