--- tmp/Twisted-1.2.0/twisted/internet/gtk2reactor.py	2003-12-23 17:07:59.000000000 +0100
+++ svn/fluendo/flumotion/flumotion/gstreactor.py	2004-04-26 11:41:22.000000000 +0200
@@ -32,16 +32,9 @@
 
 __all__ = ['install']
 
-# System Imports
+import gobject
 import sys, time
 try:
    if not hasattr(sys, 'frozen'):
        # Don't want to check this for py2exe
@@ -57,22 +50,25 @@
 
 # the next callback
 _simtag = None
-POLL_DISCONNECTED = gtk._gobject.IO_HUP | gtk._gobject.IO_ERR | \
-                    gtk._gobject.IO_NVAL
+POLL_DISCONNECTED = gobject.IO_HUP | gobject.IO_ERR | \
+                    gobject.IO_NVAL
 
 # gtk's iochannel sources won't tell us about any events that we haven't
 # asked for, even if those events aren't sensible inputs to the poll()
 # call.
-INFLAGS = gtk._gobject.IO_IN | POLL_DISCONNECTED
-OUTFLAGS = gtk._gobject.IO_OUT | POLL_DISCONNECTED
+INFLAGS = gobject.IO_IN | POLL_DISCONNECTED
+OUTFLAGS = gobject.IO_OUT | POLL_DISCONNECTED
 
 
class Gtk2Reactor(default.PosixReactorBase):
    """GTK+-2 event loop reactor.
    """
 
     __implements__ = (default.PosixReactorBase.__implements__, IReactorFDSet)
 
+    def __init__(self):
+        self.context = gobject.MainContext()
+        default.PosixReactorBase.__init__(self)
+        
     # The input_add function in pygtk1 checks for objects with a
     # 'fileno' method and, if present, uses the result of that method
     # as the input source. The pygtk2 input_add does not do this. The
@@ -83,18 +79,19 @@
     # gtk_input_add(). We use g_io_add_watch() here in case pygtk fixes this
     # bug.
     def input_add(self, source, condition, callback):
-        if hasattr(source, 'fileno'):
+	if hasattr(source, 'fileno'):
             # handle python objects
             def wrapper(source, condition, real_s=source, real_cb=callback):
                 return real_cb(real_s, condition)
-            return gtk._gobject.io_add_watch(source.fileno(), condition,
+            return gobject.io_add_watch(source.fileno(), condition,
                                              wrapper)
         else:
-            return gtk._gobject.io_add_watch(source, condition, callback)
+            return gobject.io_add_watch(source, condition, callback)
 
     def addReader(self, reader):
         if not hasReader(reader):
             reads[reader] = self.input_add(reader, INFLAGS, self.callback)
+        self.simulate()
 
     def addWriter(self, writer):
         if not hasWriter(writer):
@@ -108,12 +105,12 @@
 
     def removeReader(self, reader):
         if hasReader(reader):
-            gtk.input_remove(reads[reader])
+            gobject.source_remove(reads[reader])
             del reads[reader]
 
     def removeWriter(self, writer):
         if hasWriter(writer):
-            gtk.input_remove(writes[writer])
+            gobject.source_remove(writes[writer])
             del writes[writer]
 
     doIterationTimer = None
@@ -126,45 +123,45 @@
         # don't use the usual "while gtk.events_pending(): mainiteration()"
         # idiom because lots of IO (in particular test_tcp's
         # ProperlyCloseFilesTestCase) can keep us from ever exiting.
-        if gtk.events_pending():
-            gtk.main_iteration(0)
+        if self.context.pending():
+            self.context.iteration(0)
             return
         # nothing to do, must delay
         if delay == 0:
             return # shouldn't delay, so just return
-        self.doIterationTimer = gtk.timeout_add(int(delay * 1000),
-                                                self.doIterationTimeout)
+        self.doIterationTimer = gobject.timeout_add(int(delay * 1000),
+                                                    self.doIterationTimeout)
         # This will either wake up from IO or from a timeout.
-        gtk.main_iteration(1) # block
+        self.context.iteration(1) # block
         # note: with the .simulate timer below, delays > 0.1 will always be
         # woken up by the .simulate timer
         if self.doIterationTimer:
             # if woken by IO, need to cancel the timer
-            gtk.timeout_remove(self.doIterationTimer)
+            gobject.source_remove(self.doIterationTimer)
             self.doIterationTimer = None
 
     def crash(self):
         gtk.main_quit()
 
     def run(self, installSignalHandlers=1):
         self.startRunning(installSignalHandlers=installSignalHandlers)
         self.simulate()
         gtk.main()
 
     def _doReadOrWrite(self, source, condition, faildict={
         error.ConnectionDone: failure.Failure(error.ConnectionDone()),
         error.ConnectionLost: failure.Failure(error.ConnectionLost())  }):
         why = None
         if condition & POLL_DISCONNECTED and \
-               not (condition & gtk._gobject.IO_IN):
+               not (condition & gobject.IO_IN):
             why = main.CONNECTION_LOST
         else:
             try:
                 didRead = None
-                if condition & gtk._gobject.IO_IN:
+                if condition & gobject.IO_IN:
                     why = source.doRead()
                     didRead = source.doRead
-                if not why and condition & gtk._gobject.IO_OUT:
+                if not why and condition & gobject.IO_OUT:
                     # if doRead caused connectionLost, don't call doWrite
                     # if doRead is doWrite, don't call it again.
                     if not source.disconnected and source.doWrite != didRead:
@@ -194,58 +191,18 @@
         """
         global _simtag
         if _simtag is not None:
-            gtk.timeout_remove(_simtag)
+            gobject.source_remove(_simtag)
         self.runUntilCurrent()
         timeout = min(self.timeout(), 0.1)
         if timeout is None:
             timeout = 0.1
         # grumble
         _simtag = gtk.timeout_add(int(timeout * 1010), self.simulate)
