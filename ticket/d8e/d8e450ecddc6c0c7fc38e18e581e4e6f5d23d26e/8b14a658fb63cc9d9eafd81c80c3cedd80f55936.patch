diff --git a/twisted/internet/defer.py b/twisted/internet/defer.py
index 05c7da7..4f229a6 100644
--- a/twisted/internet/defer.py
+++ b/twisted/internet/defer.py
@@ -321,6 +321,60 @@ class Deferred:
                                  callbackKeywords=kw, errbackKeywords=kw)
 
 
+    def tapCallbacks(self, callback, errback=None,
+                     callbackArgs=None, callbackKeywords=None,
+                     errbackArgs=None, errbackKeywords=None):
+        """
+        Tap a pair of callbacks (success and error) to this L{Deferred}.
+
+        These will be executed when the 'master' callback is run.
+        """
+        def runCallback(result):
+            callback(result, *(callbackArgs or []), **(callbackKeywords or {}))
+            return result
+
+        def runErrback(result):
+            errback(result, *(errbackArgs or []), **(errbackKeywords or {}))
+            return result
+
+        assert callable(callback)
+        assert errback is None or callable(errback)
+        return self.addCallbacks(runCallback, errback and runErrback)
+
+
+    def tapCallback(self, callback, *args, **kw):
+        """
+        Convenience method for tapping just a callback.
+
+        See L{tapCallbacks}.
+        """
+        return self.tapCallbacks(callback, callbackArgs=args,
+                                 callbackKeywords=kw)
+
+
+    def tapErrback(self, errback, *args, **kw):
+        """
+        Convenience method for tapping just an errback.
+
+        See L{tapCallbacks}.
+        """
+        return self.tapCallbacks(passthru, errback,
+                                 errbackArgs=args,
+                                 errbackKeywords=kw)
+
+
+    def tapBoth(self, callback, *args, **kw):
+        """
+        Convenience method for tapping a single callable as both a callback
+        and an errback.
+
+        See L{tapCallbacks}.
+        """
+        return self.tapCallbacks(callback, callback,
+                                 callbackArgs=args, errbackArgs=args,
+                                 callbackKeywords=kw, errbackKeywords=kw)
+
+
     def chainDeferred(self, d):
         """
         Chain another L{Deferred} to this L{Deferred}.
diff --git a/twisted/test/test_defer.py b/twisted/test/test_defer.py
index e2438b0..c8b966b 100644
--- a/twisted/test/test_defer.py
+++ b/twisted/test/test_defer.py
@@ -198,6 +198,85 @@ class DeferredTestCase(unittest.TestCase):
         self.assertEqual(self.callback2Results,
                              (('hello',), {}))
 
+    def testTapCallbackWithoutArgs(self):
+        """
+        Test that L{Deferred.tapCallback} allows 0 extra arguments to be
+        given
+        """
+        deferred = defer.Deferred()
+        deferred.tapCallback(self._callback)
+        deferred.addCallback(self.assertEqual, "hello")
+        deferred.callback("hello")
+        self.assertEqual(self.errbackResults, None)
+        self.assertEqual(self.callbackResults, (('hello',), {}))
+
+    def testTapCallbackWithArgs(self):
+        """
+        Test that L{Deferred.tapCallback} allows 1 extra positional
+        argument to be given
+        """
+        deferred = defer.Deferred()
+        deferred.tapCallback(self._callback, "world")
+        deferred.addCallback(self.assertEqual, "hello")
+        deferred.callback("hello")
+        self.assertEqual(self.errbackResults, None)
+        self.assertEqual(self.callbackResults, (('hello', 'world'), {}))
+
+    def testTapCallbackWithKwArgs(self):
+        """
+        Test that L{Deferred.tapCallback} allows 1 extra keyword argument
+        to be given
+        """
+        deferred = defer.Deferred()
+        deferred.tapCallback(self._callback, world="world")
+        deferred.addCallback(self.assertEqual, "hello")
+        deferred.callback("hello")
+        self.assertEqual(self.errbackResults, None)
+        self.assertEqual(self.callbackResults,
+                             (('hello',), {'world': 'world'}))
+
+    def testTapErrbackWithoutArgs(self):
+        """
+        Test that L{Deferred.tapErrback} allows 0 extra arguments to be
+        given
+        """
+        f = failure.Failure("hello")
+        deferred = defer.Deferred()
+        deferred.tapErrback(self._errback)
+        deferred.addErrback(self.assertEqual, f)
+        deferred.addErrback(lambda _: "catch error")
+        deferred.errback(f)
+        self.assertEqual(self.callbackResults, None)
+        self.assertEqual(self.errbackResults, ((f,), {}))
+
+    def testTapErrbackbackWithArgs(self):
+        """
+        Test that L{Deferred.tapErrback} allows 1 extra positional
+        argument to be given
+        """
+        f = failure.Failure("hello")
+        deferred = defer.Deferred()
+        deferred.tapErrback(self._errback, "world")
+        deferred.addErrback(self.assertEqual, f)
+        deferred.addErrback(lambda _: "catch error")
+        deferred.errback(f)
+        self.assertEqual(self.callbackResults, None)
+        self.assertEqual(self.errbackResults, ((f, 'world'), {}))
+
+    def testTapErrbackbackWithKwArgs(self):
+        """
+        Test that L{Deferred.tapErrback} allows 1 extra keyword argument
+        to be given
+        """
+        f = failure.Failure("hello")
+        deferred = defer.Deferred()
+        deferred.tapErrback(self._errback, world="world")
+        deferred.addErrback(self.assertEqual, f)
+        deferred.addErrback(lambda _: "catch error")
+        deferred.errback(f)
+        self.assertEqual(self.callbackResults, None)
+        self.assertEqual(self.errbackResults, ((f,), {'world': 'world'}))
+
     def testDeferredList(self):
         defr1 = defer.Deferred()
         defr2 = defer.Deferred()
