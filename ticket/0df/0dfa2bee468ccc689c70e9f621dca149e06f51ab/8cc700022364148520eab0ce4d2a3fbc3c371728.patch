Index: twisted/names/client.py
===================================================================
--- twisted/names/client.py	(revision 34957)
+++ twisted/names/client.py	(working copy)
@@ -148,8 +148,8 @@
             return
 
         try:
-            resolvConf = file(self.resolv)
-        except IOError, e:
+            resolvConf = open(self.resolv)
+        except IOError as e:
             if e.errno == errno.ENOENT:
                 # Missing resolv.conf is treated the same as an empty resolv.conf
                 self.parseConfig(())
Index: twisted/names/test/test_names.py
===================================================================
--- twisted/names/test/test_names.py	(revision 34957)
+++ twisted/names/test/test_names.py	(working copy)
@@ -632,7 +632,7 @@
 
     def testEmpty(self):
         resolvConf = self.mktemp()
-        fObj = file(resolvConf, 'w')
+        fObj = open(resolvConf, 'w')
         fObj.close()
         r = client.Resolver(resolv=resolvConf)
         self.assertEqual(r.dynServers, [('127.0.0.1', 53)])
Index: twisted/names/authority.py
===================================================================
--- twisted/names/authority.py	(revision 34957)
+++ twisted/names/authority.py	(working copy)
@@ -16,8 +16,10 @@
 
 import common
 
+
 def getSerial(filename = '/tmp/twisted-names.serial'):
-    """Return a monotonically increasing (across program runs) integer.
+    """
+    Return a monotonically increasing (across program runs) integer.
 
     State is stored in the given file.  If it does not exist, it is
     created with rw-/---/--- permissions.
@@ -27,19 +29,16 @@
     o = os.umask(0177)
     try:
         if not os.path.exists(filename):
-            f = file(filename, 'w')
-            f.write(serial + ' 0')
-            f.close()
+            with open(filename, 'w') as f:
+                f.write(serial + ' 0')
     finally:
         os.umask(o)
 
-    serialFile = file(filename, 'r')
-    lastSerial, ID = serialFile.readline().split()
-    ID = (lastSerial == serial) and (int(ID) + 1) or 0
-    serialFile.close()
-    serialFile = file(filename, 'w')
-    serialFile.write('%s %d' % (serial, ID))
-    serialFile.close()
+    with open(filename, 'r') as serialFile:
+        lastSerial, ID = serialFile.readline().split()
+        ID = (lastSerial == serial) and (int(ID) + 1) or 0
+    with open(filename, 'w') as serialFile:
+        serialFile.write('%s %d' % (serial, ID))
     serial = serial + ('%02d' % (ID,))
     return serial
 
@@ -61,7 +60,9 @@
 
 
 class FileAuthority(common.ResolverBase):
-    """An Authority that is loaded from a file."""
+    """
+    An Authority that is loaded from a file.
+    """
 
     soa = None
     records = None
@@ -74,7 +75,7 @@
 
     def __setstate__(self, state):
         self.__dict__ = state
-#        print 'setstate ', self.soa
+
 
     def _lookup(self, name, cls, type, timeout = None):
         cnames = []
@@ -167,7 +168,9 @@
 
 
 class PySourceAuthority(FileAuthority):
-    """A FileAuthority that is built up from Python source code."""
+    """
+    A L{FileAuthority} that is built up from Python source code.
+    """
 
     def loadFile(self, filename):
         g, l = self.setupConfigNamespace(), {}
@@ -197,7 +200,9 @@
 
 
 class BindAuthority(FileAuthority):
-    """An Authority that loads BIND configuration files"""
+    """
+    An Authority that loads BIND configuration files.
+    """
 
     def loadFile(self, filename):
         self.origin = os.path.basename(filename) + '.' # XXX - this might suck
