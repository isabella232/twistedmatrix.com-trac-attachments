Index: reactors/win32eventreactor.py
===================================================================
RCS file: /home/cvs/development/software/application/Aspen/reactors/win32eventreactor.py,v
retrieving revision 1.1
diff -c -3 -r1.1 win32eventreactor.py
*** reactors/win32eventreactor.py	7 Oct 2005 12:49:19 -0000	1.1
--- reactors/win32eventreactor.py	7 Oct 2005 15:52:28 -0000
***************
*** 19,26 ****
  TODO:
   1. Event loop handling of writes is *very* problematic (this is causing failed tests).
      Switch to doing it the correct way, whatever that means (see below).
!  2. Replace icky socket loopback waker with event based waker (use dummyEvent object)
!  3. Switch everyone to using Free Software so we don't have to deal with proprietary APIs.
  
  
  ALTERNATIVE SOLUTIONS:
--- 19,25 ----
  TODO:
   1. Event loop handling of writes is *very* problematic (this is causing failed tests).
      Switch to doing it the correct way, whatever that means (see below).
!  2. Switch everyone to using Free Software so we don't have to deal with proprietary APIs.
  
  
  ALTERNATIVE SOLUTIONS:
***************
*** 45,51 ****
  # Win32 imports
  from win32file import WSAEventSelect, FD_READ, FD_WRITE, FD_CLOSE, \
                        FD_ACCEPT, FD_CONNECT
! from win32event import CreateEvent, MsgWaitForMultipleObjects, \
                         WAIT_OBJECT_0, WAIT_TIMEOUT, INFINITE, QS_ALLINPUT, QS_ALLEVENTS
  import win32api
  import win32con
--- 44,50 ----
  # Win32 imports
  from win32file import WSAEventSelect, FD_READ, FD_WRITE, FD_CLOSE, \
                        FD_ACCEPT, FD_CONNECT
! from win32event import CreateEvent, SetEvent, MsgWaitForMultipleObjects, \
                         WAIT_OBJECT_0, WAIT_TIMEOUT, INFINITE, QS_ALLINPUT, QS_ALLEVENTS
  import win32api
  import win32con
***************
*** 62,67 ****
--- 61,67 ----
  from twisted.internet import abstract, posixbase, main, error
  from twisted.python import log, threadable, failure, components
  from twisted.internet.interfaces import IReactorFDSet, IReactorProcess
+ from twisted.persisted import styles
  
  # System imports
  import os
***************
*** 86,91 ****
--- 86,96 ----
  
      dummyEvent = CreateEvent(None, 0, 0, None)
  
+     def installWaker(self):
+         if not self.waker:
+             self.waker = w = _Waker()
+             self.addEvent(w.event, w, '_pass')
+ 
      def _makeSocketEvent(self, fd, action, why, events=events):
          """Make a win32 event object for a socket."""
          event = CreateEvent(None, 0, 0, None)
***************
*** 208,216 ****
  def install():
      threadable.init(1)
      r = Win32Reactor()
!     import main
      main.installReactor(r)
  
  
  class Process(abstract.FileDescriptor):
      """A process that integrates with the Twisted event loop.
--- 213,231 ----
  def install():
      threadable.init(1)
      r = Win32Reactor()
!     from twisted.internet import main
      main.installReactor(r)
  
+ 
+ class _Waker(log.Logger, styles.Ephemeral):
+     def __init__(self):
+         self.event = CreateEvent(None,0,0,None)
+     def wakeUp(self):
+         SetEvent(self.event)
+     def _pass(self):
+         pass            # Have just been woken up. nothing to do
+ 
+     
  
  class Process(abstract.FileDescriptor):
      """A process that integrates with the Twisted event loop.
