Index: twisted/python/reflect.py
===================================================================
--- twisted/python/reflect.py	(revision 14634)
+++ twisted/python/reflect.py	(working copy)
@@ -461,7 +461,25 @@
             whati,swron,gwith)
         return you
 
+def safe_str(o):
+    """safe_str(anything) -> string
 
+    Returns a string representation of an object, or a string containing a
+    traceback, if that object's __str__ raised an exception.
+    """
+
+    try:
+        return str(o)
+    except:
+        io = StringIO.StringIO()
+        traceback.print_stack(file=io)
+        whati = _determineClassName(o)
+        swron = io.getvalue()
+        gwith = id(o)
+        you ='<%s instance at %s with str error %s>' % (
+            whati,swron,gwith)
+        return you
+    
 ##the following were factored out of usage
 
 def allYourBase(classObj, baseClass=None):
Index: twisted/python/failure.py
===================================================================
--- twisted/python/failure.py	(revision 14634)
+++ twisted/python/failure.py	(working copy)
@@ -297,7 +297,7 @@
         """Get a string of the exception which caused this Failure."""
         if isinstance(self.value, Failure):
             return self.value.getErrorMessage()
-        return str(self.value)
+        return reflect.safe_str(self.value)
 
     def getBriefTraceback(self):
         io = StringIO()
@@ -341,7 +341,8 @@
 
         # postamble, if any
         if not detail == 'brief':
-            w("%s: %s\n" % (str(self.type), str(self.value)))
+            w("%s: %s\n" % (reflect.safe_str(self.type),
+                            reflect.safe_str(self.value)))
         # chaining
         if isinstance(self.value, Failure):
             # TODO: indentation for chained failures?
Index: twisted/test/test_reflect.py
===================================================================
--- twisted/test/test_reflect.py	(revision 14634)
+++ twisted/test/test_reflect.py	(working copy)
@@ -294,3 +294,39 @@
         class X(BTBase):
             breakName = True
         reflect.safe_repr(X())
+
+
+class SafeStr(unittest.TestCase):
+    def testWorkingStr(self):
+        x = [1,2,3]
+        self.assertEquals(reflect.safe_str(x), str(x))
+
+    def testBrokenStr(self):
+        b = Breakable()
+        b.breakStr = True
+        reflect.safe_str(b)
+
+    def testBrokenRepr(self):
+        b = Breakable()
+        b.breakRepr = True
+        reflect.safe_str(b)
+
+    def testBrokenClassStr(self):
+        class X(BTBase):
+            breakStr = True
+        reflect.safe_str(X)
+        reflect.safe_str(X())
+
+    def testBrokenClassRepr(self):
+        class X(BTBase):
+            breakRepr = True
+        reflect.safe_str(X)
+        reflect.safe_str(X())
+
+    def testBroken__Class__Attr(self):
+        reflect.safe_str(NoClassAttr())
+
+    def testBroken__Class__Name__Attr(self):
+        class X(BTBase):
+            breakName = True
+        reflect.safe_str(X())
Index: twisted/test/test_failure.py
===================================================================
--- twisted/test/test_failure.py	(revision 14634)
+++ twisted/test/test_failure.py	(working copy)
@@ -17,6 +17,10 @@
 from twisted.python import failure
 
 
+class BrokenStr(Exception):
+    def __str__(self):
+        raise self
+
 class FailureTestCase(unittest.TestCase):
 
     def testFailAndTrap(self):
@@ -100,3 +104,15 @@
             self.assertEquals(sys.exc_info()[0], "bugger off")
         else:
             raise AssertionError("Should have raised")
+
+    def testBrokenStr(self):
+        x = BrokenStr()
+        try:
+            str(x)
+        except:
+            f = failure.Failure()
+        self.assertEquals(f.value, x)
+        try:
+            f.getTraceback()
+        except:
+            self.fail("getTraceback() shouldn't raise an exception")
