Index: twisted/test/test_protocols.py
===================================================================
--- twisted/test/test_protocols.py	(revision 27226)
+++ twisted/test/test_protocols.py	(working copy)
@@ -381,6 +381,8 @@
 
     strings = ['hello', 'world', 'how', 'are', 'you123', ':today', "a"*515]
 
+    nonStrings = [ [], { 1 : 'a', 2 : 'b' }, ['a', 'b', 'c'], 673, (12, "fine", "and", "you?") ]
+
     illegalStrings = [
         '9999999999999999999999', 'abc', '4:abcde',
         '51:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab,',]
@@ -406,6 +408,22 @@
                     a.dataReceived(s)
             self.assertEquals(a.received, self.strings)
 
+    def test_sendString(self):
+        """
+        Test if sendString acts correct if passed non-string types.
+        """
+        a = TestNetstring()
+        t = proto_helpers.StringTransport()
+        a.MAX_LENGTH = 100
+        a.makeConnection(t)
+        for s in self.nonStrings:
+            a.sendString(s)
+            out = t.value()
+            t.clear()
+            length = out[:out.find(":")]
+            data = out[out.find(":") + 1:-1] #[:-1] because we ignore the trailing ","
+            self.assertEquals(int(length), len(str(s)))
+            self.assertEquals(data, str(s))
 
 class IntNTestCaseMixin(LPTestCaseMixin):
     """
Index: twisted/protocols/basic.py
===================================================================
--- twisted/protocols/basic.py	(revision 27226)
+++ twisted/protocols/basic.py	(working copy)
@@ -107,6 +107,12 @@
             self.brokenPeer = 1
 
     def sendString(self, data):
+        """A method for sending a Netstring.
+
+	This method accepts a string and writes it to the transport.
+	If 'data' is not a string it will be converted to one using str().
+	"""
+	data = str(data)
         self.transport.write('%d:%s,' % (len(data), data))
 
 
