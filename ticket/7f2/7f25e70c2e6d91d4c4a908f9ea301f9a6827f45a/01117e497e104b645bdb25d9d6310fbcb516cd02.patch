Index: twisted/test/test_htb.py
===================================================================
--- twisted/test/test_htb.py	(revision 33421)
+++ twisted/test/test_htb.py	(working copy)
@@ -33,7 +33,7 @@
         fit = b.add(1000)
         self.assertEqual(100, fit)
 
-    def testBucketDrian(self):
+    def testBucketDrain(self):
         """Testing the bucket's drain rate."""
         b = SomeBucket()
         fit = b.add(1000)
@@ -41,6 +41,17 @@
         fit = b.add(1000)
         self.assertEqual(20, fit)
 
+    def testBucketEmpty(self):
+        """Testing the return value of drip()."""
+        b = SomeBucket()
+        b.add(20)
+        self.clock.set(9)
+        empty = b.drip()
+        self.assertFalse(empty)
+        self.clock.set(10)
+        empty = b.drip()
+        self.assertTrue(empty)
+
 class TestBucketNesting(TestBucketBase):
     def setUp(self):
         TestBucketBase.setUp(self)
Index: twisted/protocols/htb.py
===================================================================
--- twisted/protocols/htb.py	(revision 33421)
+++ twisted/protocols/htb.py	(working copy)
@@ -79,7 +79,7 @@
         How much of the bucket drains depends on how long it has been
         since I was last called.
 
-        @returns: True if I am now empty.
+        @returns: True if the bucket is empty after this drip
         @returntype: bool
         """
         if self.parentBucket is not None:
@@ -87,13 +87,12 @@
 
         if self.rate is None:
             self.content = 0
-            return True
         else:
             now = time()
             deltaT = now - self.lastDrip
             self.content = long(max(0, self.content - deltaT * self.rate))
             self.lastDrip = now
-            return False
+        return self.content == 0
 
 
 class IBucketFilter(Interface):
