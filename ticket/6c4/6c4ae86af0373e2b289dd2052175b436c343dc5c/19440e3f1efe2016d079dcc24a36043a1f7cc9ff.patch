commit cc726c2fd5cfd04e7446e4b4db71629c11403652
Author: Wolfgang Rohdewald <wolfgang@rohdewald.de>
Date:   Wed Sep 3 13:00:11 2014 +0200

    spread.jelly: support the sets module only for Python 2

diff --git twisted/spread/jelly.py twisted/spread/jelly.py
index 8898706..6118730 100644
--- twisted/spread/jelly.py
+++ twisted/spread/jelly.py
@@ -58,9 +58,14 @@ solution is to always use C{set}.
 
 The same rule applies for C{frozenset} and C{sets.ImmutableSet}.
 
+sets.Set and sets.ImmutableSet are deprecated since Python 2.6 and do not
+exist anymore since Python 3.0.
+
 @author: Glyph Lefkowitz
 """
 
+from twisted.python.compat import _PY3
+
 # System Imports
 import pickle
 import types
@@ -86,13 +91,15 @@ import copy
 import datetime
 from types import BooleanType
 
-try:
-    # Filter out deprecation warning for Python >= 2.6
-    warnings.filterwarnings("ignore", category=DeprecationWarning,
-        message="the sets module is deprecated", append=True)
-    import sets as _sets
-finally:
-    warnings.filters.pop()
+if not _PY3:
+    # Python 3 dropped the sets module
+    try:
+        # Filter out deprecation warning for Python >= 2.6
+        warnings.filterwarnings("ignore", category=DeprecationWarning,
+            message="the sets module is deprecated", append=True)
+        import sets as _sets
+    finally:
+        warnings.filters.pop()
 
 
 from zope.interface import implements
@@ -532,9 +539,9 @@ class _Jellier:
                     sxp.append(dictionary_atom)
                     for key, val in obj.items():
                         sxp.append([self.jelly(key), self.jelly(val)])
-                elif objType is set or objType is _sets.Set:
+                elif objType is set or (not _PY3 and objType is _sets.Set):
                     sxp.extend(self._jellyIterable(set_atom, obj))
-                elif objType is frozenset or objType is _sets.ImmutableSet:
+                elif objType is frozenset or (not _PY3 and objType is _sets.ImmutableSet):
                     sxp.extend(self._jellyIterable(frozenset_atom, obj))
                 else:
                     className = qual(obj.__class__)
diff --git twisted/test/test_jelly.py twisted/test/test_jelly.py
index 4575163..8d6dc8c 100644
--- twisted/test/test_jelly.py
+++ twisted/test/test_jelly.py
@@ -5,6 +5,8 @@
 Test cases for L{jelly} object serialization.
 """
 
+from twisted.python.compat import _PY3
+
 import datetime
 import decimal
 
@@ -366,39 +368,41 @@ class JellyTestCase(unittest.TestCase):
         self._testSecurity(inputList, "frozenset")
 
 
-    def test_oldSets(self):
-        """
-        Test jellying C{sets.Set}: it should serialize to the same thing as
-        C{set} jelly, and be unjellied as C{set} if available.
-        """
-        inputList = [jelly._sets.Set([1, 2, 3])]
-        inputJelly = jelly.jelly(inputList)
-        self.assertEqual(inputJelly, jelly.jelly([set([1, 2, 3])]))
-        output = jelly.unjelly(inputJelly)
-        # Even if the class is different, it should coerce to the same list
-        self.assertEqual(list(inputList[0]), list(output[0]))
-        if set is jelly._sets.Set:
-            self.assertIsInstance(output[0], jelly._sets.Set)
-        else:
-            self.assertIsInstance(output[0], set)
-
-
-    def test_oldImmutableSets(self):
-        """
-        Test jellying C{sets.ImmutableSet}: it should serialize to the same
-        thing as C{frozenset} jelly, and be unjellied as C{frozenset} if
-        available.
-        """
-        inputList = [jelly._sets.ImmutableSet([1, 2, 3])]
-        inputJelly = jelly.jelly(inputList)
-        self.assertEqual(inputJelly, jelly.jelly([frozenset([1, 2, 3])]))
-        output = jelly.unjelly(inputJelly)
-        # Even if the class is different, it should coerce to the same list
-        self.assertEqual(list(inputList[0]), list(output[0]))
-        if frozenset is jelly._sets.ImmutableSet:
-            self.assertIsInstance(output[0], jelly._sets.ImmutableSet)
-        else:
-            self.assertIsInstance(output[0], frozenset)
+    if not _PY3:
+        # the sets module is deprecated since 2.6 and removed with 3.0
+        def test_oldSets(self):
+            """
+            Test jellying C{sets.Set}: it should serialize to the same thing as
+            C{set} jelly, and be unjellied as C{set} if available.
+            """
+            inputList = [jelly._sets.Set([1, 2, 3])]
+            inputJelly = jelly.jelly(inputList)
+            self.assertEqual(inputJelly, jelly.jelly([set([1, 2, 3])]))
+            output = jelly.unjelly(inputJelly)
+            # Even if the class is different, it should coerce to the same list
+            self.assertEqual(list(inputList[0]), list(output[0]))
+            if set is jelly._sets.Set:
+                self.assertIsInstance(output[0], jelly._sets.Set)
+            else:
+                self.assertIsInstance(output[0], set)
+
+
+        def test_oldImmutableSets(self):
+            """
+            Test jellying C{sets.ImmutableSet}: it should serialize to the same
+            thing as C{frozenset} jelly, and be unjellied as C{frozenset} if
+            available.
+            """
+            inputList = [jelly._sets.ImmutableSet([1, 2, 3])]
+            inputJelly = jelly.jelly(inputList)
+            self.assertEqual(inputJelly, jelly.jelly([frozenset([1, 2, 3])]))
+            output = jelly.unjelly(inputJelly)
+            # Even if the class is different, it should coerce to the same list
+            self.assertEqual(list(inputList[0]), list(output[0]))
+            if frozenset is jelly._sets.ImmutableSet:
+                self.assertIsInstance(output[0], jelly._sets.ImmutableSet)
+            else:
+                self.assertIsInstance(output[0], frozenset)
 
 
     def test_simple(self):
