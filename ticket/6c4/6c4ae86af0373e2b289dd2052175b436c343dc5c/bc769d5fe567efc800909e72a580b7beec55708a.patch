commit 1dcc14bc5f7dcd1980e7de8dfe9cd99f971b7e43
Author: Wolfgang Rohdewald <wolfgang@rohdewald.de>
Date:   Wed Sep 3 13:00:11 2014 +0200

    spread.jelly: support the sets module only for Python 2

diff --git twisted/spread/jelly.py twisted/spread/jelly.py
index 8898706..5019e02 100644
--- twisted/spread/jelly.py
+++ twisted/spread/jelly.py
@@ -54,13 +54,16 @@ Instance Method: s.center, where s is an instance of UserString.UserString::
 The C{set} builtin and the C{sets.Set} class are serialized to the same
 thing, and unserialized to C{set} if available, else to C{sets.Set}. It means
 that there's a possibility of type switching in the serialization process. The
-solution is to always use C{set}.
+solution is to always use C{set}. C{sets.Set} is deprecated since Python 2.6
+and does not exist anymore since Python 3.0.
 
 The same rule applies for C{frozenset} and C{sets.ImmutableSet}.
 
 @author: Glyph Lefkowitz
 """
 
+from twisted.python.compat import _PY3
+
 # System Imports
 import pickle
 import types
@@ -86,13 +89,15 @@ import copy
 import datetime
 from types import BooleanType
 
-try:
-    # Filter out deprecation warning for Python >= 2.6
-    warnings.filterwarnings("ignore", category=DeprecationWarning,
-        message="the sets module is deprecated", append=True)
-    import sets as _sets
-finally:
-    warnings.filters.pop()
+if not _PY3:
+    # Python 3 dropped the sets module
+    try:
+        # Filter out deprecation warning for Python >= 2.6
+        warnings.filterwarnings("ignore", category=DeprecationWarning,
+            message="the sets module is deprecated", append=True)
+        import sets as _sets
+    finally:
+        warnings.filters.pop()
 
 
 from zope.interface import implements
@@ -532,9 +537,9 @@ class _Jellier:
                     sxp.append(dictionary_atom)
                     for key, val in obj.items():
                         sxp.append([self.jelly(key), self.jelly(val)])
-                elif objType is set or objType is _sets.Set:
+                elif objType is set or (not _PY3 and objType is _sets.Set):
                     sxp.extend(self._jellyIterable(set_atom, obj))
-                elif objType is frozenset or objType is _sets.ImmutableSet:
+                elif objType is frozenset or (not _PY3 and objType is _sets.ImmutableSet):
                     sxp.extend(self._jellyIterable(frozenset_atom, obj))
                 else:
                     className = qual(obj.__class__)
diff --git twisted/spread/topfiles/7625.misc twisted/spread/topfiles/7625.misc
new file mode 100644
index 0000000..c64110b
--- /dev/null
+++ twisted/spread/topfiles/7625.misc
@@ -0,0 +1,2 @@
+twisted.spread.jelly: The sets module is gone with Python 3, support it only when running Python
+2.x
diff --git twisted/test/test_jelly.py twisted/test/test_jelly.py
index 4575163..27af156 100644
--- twisted/test/test_jelly.py
+++ twisted/test/test_jelly.py
@@ -5,6 +5,8 @@
 Test cases for L{jelly} object serialization.
 """
 
+from twisted.python.compat import _PY3
+
 import datetime
 import decimal
 
@@ -377,7 +379,7 @@ class JellyTestCase(unittest.TestCase):
         output = jelly.unjelly(inputJelly)
         # Even if the class is different, it should coerce to the same list
         self.assertEqual(list(inputList[0]), list(output[0]))
-        if set is jelly._sets.Set:
+        if not _PY3 and set is jelly._sets.Set:
             self.assertIsInstance(output[0], jelly._sets.Set)
         else:
             self.assertIsInstance(output[0], set)
@@ -395,11 +397,15 @@ class JellyTestCase(unittest.TestCase):
         output = jelly.unjelly(inputJelly)
         # Even if the class is different, it should coerce to the same list
         self.assertEqual(list(inputList[0]), list(output[0]))
-        if frozenset is jelly._sets.ImmutableSet:
+        if not _PY3 and frozenset is jelly._sets.ImmutableSet:
             self.assertIsInstance(output[0], jelly._sets.ImmutableSet)
         else:
             self.assertIsInstance(output[0], frozenset)
 
+    if _PY3:
+        # the sets module is deprecated since 2.6 and removed with 3.0
+        test_oldSets.skip = "Not available in Python 3"
+        test_oldImmutableSets.skip = "Not available in Python 3"
 
     def test_simple(self):
         """
