Index: twisted/trial/reporter.py
===================================================================
RCS file: /cvs/Twisted/twisted/trial/reporter.py,v
retrieving revision 1.13
diff -u -r1.13 reporter.py
--- twisted/trial/reporter.py	11 Jul 2003 05:00:44 -0000	1.13
+++ twisted/trial/reporter.py	19 Oct 2003 06:57:30 -0000
@@ -145,7 +145,8 @@
         elif isinstance(error, types.TupleType):
             d = {'plain': traceback,
                  'emacs': util}
-            tb = ''.join(d[self.tbformat].format_exception(*error))
+            f = getattr(util, self.tbformat+'_format_exception')
+            tb = ''.join(f(*error))
         else:
             tb = "%s\n" % error
 
Index: twisted/trial/util.py
===================================================================
RCS file: /cvs/Twisted/twisted/trial/util.py,v
retrieving revision 1.5
diff -u -r1.5 util.py
--- twisted/trial/util.py	15 May 2003 22:07:50 -0000	1.5
+++ twisted/trial/util.py	19 Oct 2003 06:57:30 -0000
@@ -108,7 +108,7 @@
         del l[-1]
     return l
 
-def format_exception(eType, eValue, tb, limit=None):
+def emacs_format_exception(eType, eValue, tb, limit=None):
     """A formatted traceback and exception, without exposing the framework.
 
     I am identical in function to L{traceback.format_exception},
@@ -118,11 +118,8 @@
     result = [x.strip()+'\n' for x in
               failure.Failure(eValue,eType,tb).getBriefTraceback().split('\n')]
     return result
-    # Only mess with tracebacks if they are from an explicitly failed
-    # test.
-    if eType != unittest.FailTest:
-        return traceback.format_exception(eType, eValue, tb, limit)
 
+def plain_format_exception(eType, eValue, tb, limit=None):
     tb_list = extract_tb(tb, limit)
 
     l = ["Traceback (most recent call last):\n"]
