Index: twisted/protocols/tls.py
===================================================================
--- twisted/protocols/tls.py	(revision 32050)
+++ twisted/protocols/tls.py	(working copy)
@@ -51,7 +51,7 @@
 from twisted.internet.interfaces import ISystemHandle, ISSLTransport
 from twisted.internet.main import CONNECTION_DONE, CONNECTION_LOST
 from twisted.internet.protocol import Protocol
-from twisted.internet.interfaces import ITCPTransport
+from twisted.internet.interfaces import ITCPTransport, IHalfCloseableProtocol
 from twisted.protocols.policies import ProtocolWrapper, WrappingFactory
 
 
@@ -97,7 +97,7 @@
         be used as the reason passed to the application protocol's
         C{connectionLost} method.
     """
-    implements(ISystemHandle, ISSLTransport)
+    implements(ISystemHandle, ISSLTransport, IHalfCloseableProtocol)
 
     _reason = None
     _handshakeDone = False
@@ -250,15 +250,27 @@
         self._flushReceiveBIO()
 
 
+    def readConnectionLost(self, *reason):
+        print self.factory._isClient, "Read connection lost"
+        if not self._shuttingDown:
+            self.transport.loseConnection() # just close uncleanly
+
+    def writeConnectionLost(self, *reason):
+        print self.factory._isClient, "Write connection lost"
+
+
+    _shuttingDown = False
+
     def _shutdownTLS(self):
         """
         Initiate, or reply to, the shutdown handshake of the TLS layer.
         """
+        self._shuttingDown = True
         if (not self._lostConnection and
             ITCPTransport.providedBy(self.transport)):
             # In order for TLS shutdown notification to arrive as fast as
             # possible, disable Nagle algorithm:
-            self.transport.setTcpNoDelay(True)
+            pass #self.transport.setTcpNoDelay(True)
         shutdownSuccess = self._tlsConnection.shutdown()
         self._flushSendBIO()
         if shutdownSuccess:
@@ -267,6 +279,11 @@
             # negotiation at all yet, in which case shutdown succeeds
             # immediately.
             self.transport.loseConnection()
+        else:
+            # We no longer expect to read anything, so close writing side of
+            # our connection. This speeds up closing the underlying connection
+            # once the TLS shutdown handshake is done:
+            self.transport.loseWriteConnection()
 
 
     def _tlsShutdownFinished(self, reason):
