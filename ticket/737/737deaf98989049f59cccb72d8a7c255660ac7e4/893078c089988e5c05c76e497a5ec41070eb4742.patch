# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130116093528-fwo6ppjngpv810z9
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: 323151317d12e2f30d7034e948ddc54f4d21b372
# timestamp: 2013-01-16 10:38:03 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:36805
# 
# Begin patch
=== modified file 'twisted/internet/ssl.py'
--- twisted/internet/ssl.py	2012-11-06 14:15:38 +0000
+++ twisted/internet/ssl.py	2013-01-16 09:35:28 +0000
@@ -56,7 +56,9 @@
                  sslmethod=SSL.SSLv23_METHOD, _contextFactory=SSL.Context):
         """
         @param privateKeyFileName: Name of a file containing a private key
-        @param certificateFileName: Name of a file containing a certificate
+        @param certificateFileName: Name of a file containing a certificate. It
+            is possible to supply chain certificates by concatenating them to
+            the file.
         @param sslmethod: The SSL method to use
         """
         self.privateKeyFileName = privateKeyFileName
@@ -76,7 +78,10 @@
             # Disallow SSLv2!  It's insecure!  SSLv3 has been around since
             # 1996.  It's time to move on.
             ctx.set_options(SSL.OP_NO_SSLv2)
-            ctx.use_certificate_file(self.certificateFileName)
+            try:
+                ctx.use_certificate_chain_file(self.certificateFileName)
+            except SSL.Error:
+                ctx.use_certificate_file(self.certificateFileName)
             ctx.use_privatekey_file(self.privateKeyFileName)
             self._context = ctx
 

=== modified file 'twisted/test/test_ssl.py'
--- twisted/test/test_ssl.py	2012-11-06 14:15:38 +0000
+++ twisted/test/test_ssl.py	2013-01-16 09:35:28 +0000
@@ -639,6 +639,8 @@
     def use_certificate_file(self, fileName):
         pass
 
+    def use_certificate_chain_file(self, fileName):
+        pass
 
     def use_privatekey_file(self, fileName):
         pass
@@ -694,6 +696,22 @@
             SSL.Error,
             ssl.DefaultOpenSSLContextFactory, self.mktemp(), certPath)
 
+    def test_certificateIsNotPEMEncoded(self):
+        """
+        Nowadays it's preferable to use
+        L{SSL.Context.use_certificate_chain_file} over
+        L{SSL.Context.use_certificate_file}.  However, the former accepts only
+        PEM encoded certificates while the latter is more general.  Therefore
+        if C{use_certificate_chain_file} fails, it's possible a non-PEM
+        certificate has been supplied and we have to re-try using
+        C{use_certificate_file}.
+        """
+        class FakeContextRaising(FakeContext):
+            def use_certificate_chain_file(self, fileName):
+                raise SSL.Error()
+
+        ssl.DefaultOpenSSLContextFactory(certPath, certPath,
+                                         _contextFactory=FakeContextRaising)
 
 
 class ClientContextFactoryTests(unittest.TestCase):

# Begin bundle
IyBCYXphYXIgcmV2aXNpb24gYnVuZGxlIHY0CiMKQlpoOTFBWSZTWU8cqxsAAq5fgERUUuf/939n
3gC//9/6UAXPcgAbNbDWiWlsEJJKeip+nqDaTCEyZkpkGQYEaGmGjQ1BzAEYJiAYBME0ZDQwCYIx
MMRNJpGjKj1PyoPU08Uek8UDTagB6amIB6hzAEYJiAYBME0ZDQwCYIxMJJBMjQIZGSBMo2mCTI9J
oepoPUyMJICIVZNJHxkL3f6mkznBf4YaP12bbMH1c+axo+UZ3rTaFHujMSngdTP3zhlXVU7gAgcA
mMhpYn7HUMMzMDt4nLKdrKTpklZI5EIWRO7Drv481t2EZaoz0jPxxD3eLq7cJ6K0lo5RVFAhbUwF
LIsks4o74pwHOljja1wK544OVVRddZWa74hkO0J+Ej0n4ARYVFMZMaMbtlsI4h3xcdV7q28x5tp0
JHQkfQDJI1vSLQHW0xughuJ8nVz8iDGJageJqM2ZkUtoPFowmamIJ2zUB/aB7UiFSYDrKmVStHfH
uOvOpBapycVuc9I6GSJZGvZeB2loEI7jGm2rds0k/JItqAvh6QsPev9vy3nCpwHf6HvKzT3MakDM
rM5UNNdLd4FJE5lsDUumxhICyp8EeIhoDJF3IOekToVsb4gcYskapEzkw48kC0ChZlUi9I5OGNub
rcXOiWIz2YFlCKHxKtuD0iHAiVfNDWJ5VQhbwGzo8B8rWwtbkRx4TLoubwsRgXpr1R9uzQokUzqA
t3lpEer9+8zio3G60LdmR3AXWDbbN774m4mVbi64MSIxikUSJ03bEEILgBzVSuoMpBhXCy697bQW
8kwRvIoKGMhqSMwGOrENiyTmEzGLnV1rqcVVbtKMrORhhdIRemna5dgFUpGsidCKNeSMQPSPAteB
tyMzaw7jNo0jnqB3ED12WVpBILg2obmETk/Yd7juHsl7ZLUQ/urg/4ooXJ8EYQp6nO+DBNH2JmrF
sbED0QGRQdJMiMe+RNRYHXqHNpps2d0kV8t/YKnWgfIjfRyxAovbiCd1N5irJb0/XECDc3YdSAuH
QfOSdp7ofdyFhyG/gaJHOjzF7UiAyRlE0M5QO9BExnUkXniRGLrBLJiZLxPtj7NuHh3O9Y31QMcL
73kEZ9+BGuRGRKo8yxBkpMlxSNOt5bwQu67VIrCYe8dtrK0XmvKQoby5IicrHkMkf2efCnWrpZer
73JLnQT7fU+2OCBYCbTQuGHHaSOrZJXlbs5Is6Qhy3dS+Ce8MEZAOAcYI6tmUkjUgYmjc9gnXHSV
4NkiRXY2yx6YbdwDyFEWn2uLEVO1025cK1JggO0VOxdy6bLr4qsuYAca0ck0l0XI6Ygo8wS6dwPQ
3GmBzmcTn0SIr0EP467kgmfI7gd1DA4N83kmb3gQReKDgMjE1EwEB6k301j/RimKsMEpl/HCUgDs
caENlm+2tOAJg1Ml+RhmFY8scl80NGfHK4fMufJTNKiFsy96M4nl0pTsA0Z2KEiCzIaSUQZEnBVX
nzdjAwwgiilePjFiy6qqXKnANmoLteWcGDVAzEIs5DTDtNuDQDLrjEZA8gBpa5IlZJOgmScnMDLn
5g1A4FJu3SQ7sg75gzFQTRXkwZvQx+99bvp5IJwdo4YPTBfWdaRUfoBmmpeOgAfMFjnrYBJEfRn1
SFMcQTXqgy11AMe89MC0kSCWVIZmTNxGB93DLvcz+LjQb5b8lk3+cByIq62W4mRkk8elWHrxKbDn
8Js3saIFgrUaDC2bqaSwYYmfz2sVMSw4jyVQ4HJzVD2BOE20gnGKvYxgk8LInrenUogMR8Aoifaw
zRSN9eyuIV4yFMz7IkkiitXT8WGZ16LgJXLDMVaIPkzZCtAvAggeOkhVm06TAeDI7KeQDZKfzPAc
H/F3JFOFCQTxyrGw
