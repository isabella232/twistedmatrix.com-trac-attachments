# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130116105001-60cxn0ju6um3at8i
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: 960fe8ee7a9f5d7310db88c2191a97cdd831dbf4
# timestamp: 2013-01-16 11:50:21 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:36805
# 
# Begin patch
=== modified file 'twisted/internet/ssl.py'
--- twisted/internet/ssl.py	2012-11-06 14:15:38 +0000
+++ twisted/internet/ssl.py	2013-01-16 09:35:28 +0000
@@ -56,7 +56,9 @@
                  sslmethod=SSL.SSLv23_METHOD, _contextFactory=SSL.Context):
         """
         @param privateKeyFileName: Name of a file containing a private key
-        @param certificateFileName: Name of a file containing a certificate
+        @param certificateFileName: Name of a file containing a certificate. It
+            is possible to supply chain certificates by concatenating them to
+            the file.
         @param sslmethod: The SSL method to use
         """
         self.privateKeyFileName = privateKeyFileName
@@ -76,7 +78,10 @@
             # Disallow SSLv2!  It's insecure!  SSLv3 has been around since
             # 1996.  It's time to move on.
             ctx.set_options(SSL.OP_NO_SSLv2)
-            ctx.use_certificate_file(self.certificateFileName)
+            try:
+                ctx.use_certificate_chain_file(self.certificateFileName)
+            except SSL.Error:
+                ctx.use_certificate_file(self.certificateFileName)
             ctx.use_privatekey_file(self.privateKeyFileName)
             self._context = ctx
 

=== modified file 'twisted/test/test_ssl.py'
--- twisted/test/test_ssl.py	2012-11-06 14:15:38 +0000
+++ twisted/test/test_ssl.py	2013-01-16 09:35:28 +0000
@@ -639,6 +639,8 @@
     def use_certificate_file(self, fileName):
         pass
 
+    def use_certificate_chain_file(self, fileName):
+        pass
 
     def use_privatekey_file(self, fileName):
         pass
@@ -694,6 +696,22 @@
             SSL.Error,
             ssl.DefaultOpenSSLContextFactory, self.mktemp(), certPath)
 
+    def test_certificateIsNotPEMEncoded(self):
+        """
+        Nowadays it's preferable to use
+        L{SSL.Context.use_certificate_chain_file} over
+        L{SSL.Context.use_certificate_file}.  However, the former accepts only
+        PEM encoded certificates while the latter is more general.  Therefore
+        if C{use_certificate_chain_file} fails, it's possible a non-PEM
+        certificate has been supplied and we have to re-try using
+        C{use_certificate_file}.
+        """
+        class FakeContextRaising(FakeContext):
+            def use_certificate_chain_file(self, fileName):
+                raise SSL.Error()
+
+        ssl.DefaultOpenSSLContextFactory(certPath, certPath,
+                                         _contextFactory=FakeContextRaising)
 
 
 class ClientContextFactoryTests(unittest.TestCase):

=== added file 'twisted/topfiles/6258.feature'
--- twisted/topfiles/6258.feature	1970-01-01 00:00:00 +0000
+++ twisted/topfiles/6258.feature	2013-01-16 10:50:01 +0000
@@ -0,0 +1,1 @@
+twisted.internet.ssl.DefaultOpenSSLContextFactory now supports chained certificate files.

# Begin bundle
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
