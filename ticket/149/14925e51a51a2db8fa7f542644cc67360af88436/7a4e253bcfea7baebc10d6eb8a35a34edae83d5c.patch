Index: twisted/test/test_task.py
===================================================================
--- twisted/test/test_task.py	(revision 38074)
+++ twisted/test/test_task.py	(working copy)
@@ -89,7 +89,21 @@
         self.assertEqual(events, [None])
         self.failIf(call.active())
 
+    def testAdvanceInfiniteLoop(self):
+        """
+        check if advance(0) leads to infinite loop
+        """
+        self.i = 0
+        def f():
+            if self.i <= 2:
+                self.c.callLater(0, f)
+            self.i+=1
+        self.c = task.Clock()
+        f()
+        self.c.advance(0)
+        self.assertEqual(self.i,2)
 
+
     def testAdvanceCancel(self):
         """
         Test attemping to cancel the call in a callback.
Index: twisted/internet/task.py
===================================================================
--- twisted/internet/task.py	(revision 38074)
+++ twisted/internet/task.py	(working copy)
@@ -696,6 +696,8 @@
 
     def __init__(self):
         self.calls = []
+        self.tempCalls = []
+        self.checkLoop = 0
 
 
     def seconds(self):
@@ -726,7 +728,10 @@
                                self.calls.remove,
                                lambda c: None,
                                self.seconds)
-        self.calls.append(dc)
+        if self.checkLoop and not when:
+            self.tempCalls.append(dc)
+        else:
+            self.calls.append(dc)
         self._sortCalls()
         return dc
 
@@ -748,12 +753,19 @@
         time.
         """
         self.rightNow += amount
+        if not amount:
+            self.checkLoop = 1
         self._sortCalls()
         while self.calls and self.calls[0].getTime() <= self.seconds():
             call = self.calls.pop(0)
             call.called = 1
             call.func(*call.args, **call.kw)
             self._sortCalls()
+        if self.checkLoop and self.tempCalls:
+            self.calls = self.calls + self.tempCalls
+            self.tempCalls = []
+            self._sortCalls()
+        self.checkLoop = 0
 
 
     def pump(self, timings):
