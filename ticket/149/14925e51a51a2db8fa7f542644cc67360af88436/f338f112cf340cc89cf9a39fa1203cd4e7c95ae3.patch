Index: twisted/test/test_task.py
===================================================================
--- twisted/test/test_task.py	(revision 38074)
+++ twisted/test/test_task.py	(working copy)
@@ -90,6 +90,22 @@
         self.failIf(call.active())
 
 
+    def test_AdvanceInfiniteLoop(self):
+        """
+        Advance(0) must not lead to infinite loop if rescheduling of function with '0' delay takes place.
+        This requires storing the function temporarily and then adding to  original calls after ongoing advance is completed.
+        """
+        i = [0]
+        def f():
+            if i[0] <= 2:
+                c.callLater(0, f)
+            i[0]+=1
+        c = task.Clock()
+        f()
+        c.advance(0)
+        self.assertEqual(i[0],2)
+
+
     def testAdvanceCancel(self):
         """
         Test attemping to cancel the call in a callback.
Index: twisted/topfiles/5962.bugfix
===================================================================
--- twisted/topfiles/5962.bugfix	(revision 0)
+++ twisted/topfiles/5962.bugfix	(revision 0)
@@ -0,0 +1 @@
+twisted.internet.task.advance now handles the defective infinite loop occuring due to rescheduled functions with delay '0' in Clock.advance(0) by detecting them and listing them only after the current advance takes place.
Index: twisted/internet/task.py
===================================================================
--- twisted/internet/task.py	(revision 38074)
+++ twisted/internet/task.py	(working copy)
@@ -696,6 +696,10 @@
 
     def __init__(self):
         self.calls = []
+        #To avoid infinite loop,temporary list of functions rescheduled with 0 delay in on-going advance(0). 
+        self.tempCalls = []
+        #Detect functions for tempCalls
+        self._insideAdvance = 0
 
 
     def seconds(self):
@@ -726,7 +730,10 @@
                                self.calls.remove,
                                lambda c: None,
                                self.seconds)
-        self.calls.append(dc)
+        if self._insideAdvance and not when:
+            self.tempCalls.append(dc)
+        else:
+            self.calls.append(dc)
         self._sortCalls()
         return dc
 
@@ -748,12 +755,19 @@
         time.
         """
         self.rightNow += amount
+        if not amount:
+            self._insideAdvance = 1
         self._sortCalls()
         while self.calls and self.calls[0].getTime() <= self.seconds():
             call = self.calls.pop(0)
             call.called = 1
             call.func(*call.args, **call.kw)
             self._sortCalls()
+        if self._insideAdvance and self.tempCalls:
+            self.calls = self.calls + self.tempCalls
+            self.tempCalls = []
+            self._sortCalls()
+        self._insideAdvance = 0
 
 
     def pump(self, timings):
