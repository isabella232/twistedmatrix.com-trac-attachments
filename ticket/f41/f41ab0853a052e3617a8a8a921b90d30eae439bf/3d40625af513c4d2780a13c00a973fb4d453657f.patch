diff --git a/twisted/internet/base.py b/twisted/internet/base.py
index 4f2c862..cf3e2d2 100644
--- a/twisted/internet/base.py
+++ b/twisted/internet/base.py
@@ -37,7 +37,6 @@ class DelayedCall:
     # enable .debug to record creator call stack, and it will be logged if
     # an exception occurs while the function is being run
     debug = False
-    _str = None
 
     def __init__(self, time, func, args, kw, cancel, reset,
                  seconds=runtimeSeconds):
@@ -63,8 +62,7 @@ class DelayedCall:
         self.seconds = seconds
         self.cancelled = self.called = 0
         self.delayed_time = 0
-        if self.debug:
-            self.creator = traceback.format_stack()[:-2]
+        self.creator = traceback.format_stack()[:-2]
 
     def getTime(self):
         """Return the time at which this call will fire
@@ -89,9 +87,8 @@ class DelayedCall:
             raise error.AlreadyCalled
         else:
             self.canceller(self)
+            self.representation = str(self)
             self.cancelled = 1
-            if self.debug:
-                self._str = bytes(self)
             del self.func, self.args, self.kw
 
     def reset(self, secondsFromNow):
@@ -172,8 +169,10 @@ class DelayedCall:
 
 
     def __str__(self):
-        if self._str is not None:
-            return self._str
+        if hasattr(self, "representation"):
+            # When call is cancelled it won't have 'func' attribute but users may want to see same representation
+            # as for call that is not cancelled.
+            return self.representation
         if hasattr(self, 'func'):
             # This code should be replaced by a utility function in reflect;
             # see ticket #6066:
@@ -825,12 +824,12 @@ class ReactorBase(object):
                 call.func(*call.args, **call.kw)
             except:
                 log.deferr()
-                if hasattr(call, "creator"):
+                if call.debug:
                     e = "\n"
-                    e += " C: previous exception occurred in " + \
+                    e += "previous exception occurred in " + \
                          "a DelayedCall created here:\n"
-                    e += " C:"
-                    e += "".join(call.creator).rstrip().replace("\n","\n C:")
+                    e += ""
+                    e += "".join(call.creator).rstrip()
                     e += "\n"
                     log.msg(e)
 
diff --git a/twisted/test/test_internet.py b/twisted/test/test_internet.py
index a42384c..9c88b85 100644
--- a/twisted/test/test_internet.py
+++ b/twisted/test/test_internet.py
@@ -11,6 +11,8 @@ import os
 import sys
 import time
 
+from twisted.internet.base import DelayedCall
+
 from twisted.python.compat import _PY3
 from twisted.trial import unittest
 from twisted.internet import reactor, protocol, error, abstract, defer
@@ -830,6 +832,52 @@ class TimeTests(unittest.TestCase):
         self.assertEqual(dc.getTime(), 13)
 
 
+class DelayedCallDebugModeTests(TimeTests):
+    """
+    Rerun all DelayedCall tests with debug mode = True in order to make sure it does not disturb anything.
+
+    There are two extra tests for setting debug mode on instance (instead of setting it on class).
+    """
+
+
+    def setUp(self):
+        """
+        Enable debug mode on class level.
+        """
+        DelayedCall.debug = True
+
+
+    def tearDown(self):
+        """
+        Ensure value of DelayedCall.debug class property is always reset to default value
+        specified in class definition.
+        """
+        DelayedCall.debug = False
+
+
+    def test_cancelDelayedCallInDebugMode(self):
+        """
+        Test that setting debug mode to True on DelayedCall instance does
+        not cause unhandled exception after canceling call.
+        """
+        DelayedCall.debug = False
+        call = reactor.callLater(0, lambda: None)
+        call.debug = True
+        call.cancel()
+        self.assertIsInstance(str(call), str)
+
+
+    def test_stringifyDelayedCallInDebugMode(self):
+        """
+        Test that setting debug mode to True on DelayedCall instance does
+        not cause unhandled exception when calling str() on this call.
+        """
+        DelayedCall.debug = False
+        call = reactor.callLater(0, lambda: None)
+        call.debug = True
+        self.assertIsInstance(str(call), str)
+
+
 class CallFromThreadStopsAndWakeUpTests(unittest.TestCase):
     def testWakeUp(self):
         # Make sure other threads can wake up the reactor
diff --git a/twisted/topfiles/8110.bugfix b/twisted/topfiles/8110.bugfix
new file mode 100644
index 0000000..1057abe
--- /dev/null
+++ b/twisted/topfiles/8110.bugfix
@@ -0,0 +1 @@
+twisted.internet.base.DelayedCall no longer causes unhandled exception after cancel with debug mode True
\ No newline at end of file
