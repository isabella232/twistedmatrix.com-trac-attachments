diff --git a/twisted/internet/base.py b/twisted/internet/base.py
index b06ba8a..11c315a 100644
--- a/twisted/internet/base.py
+++ b/twisted/internet/base.py
@@ -63,8 +63,7 @@ class DelayedCall:
         self.seconds = seconds
         self.cancelled = self.called = 0
         self.delayed_time = 0
-        if self.debug:
-            self.creator = traceback.format_stack()[:-2]
+        self.creator = traceback.format_stack()[:-2]
 
     def getTime(self):
         """Return the time at which this call will fire
@@ -173,7 +172,7 @@ class DelayedCall:
 
     def __str__(self):
         if self._str is not None:
-            return self._str
+            return self._str.decode("utf8")
         if hasattr(self, 'func'):
             # This code should be replaced by a utility function in reflect;
             # see ticket #6066:
@@ -208,6 +207,8 @@ class DelayedCall:
 
         return "".join(L)
 
+    def __bytes__(self):
+        return self.__str__().encode("utf8")
 
 
 @implementer(IResolverSimple)
diff --git a/twisted/test/test_internet.py b/twisted/test/test_internet.py
index 9f88ff8..60b0c4d 100644
--- a/twisted/test/test_internet.py
+++ b/twisted/test/test_internet.py
@@ -11,6 +11,8 @@ import os
 import sys
 import time
 
+from twisted.internet.base import DelayedCall
+
 from twisted.python.compat import _PY3
 from twisted.trial import unittest
 from twisted.internet import reactor, protocol, error, abstract, defer
@@ -828,6 +830,49 @@ class TimeTests(unittest.TestCase):
         self.assertEqual(dc.getTime(), 13)
 
 
+class DelayedCallDebugModeTests(TimeTests):
+    """
+    Rerun all DelayedCall tests with debug mode = True in order to make sure it does not disturb anything.
+
+    There are two extra tests for setting debug mode on instance (instead of setting it on class).
+    """
+
+
+    def setUp(self):
+        DelayedCall.debug = True
+
+
+    def tearDown(self):
+        """
+        Ensure value of DelayedCall.debug class property is always reset to default value
+        specified in class definition.
+        """
+        DelayedCall.debug = False
+
+
+    def test_cancelDelayedCallInDebugMode(self):
+        """
+        Test that setting debug mode to True on DelayedCall instance does
+        not cause unhandled exception after canceling call.
+        """
+        DelayedCall.debug = False
+        call = reactor.callLater(0, lambda: None)
+        call.debug = True
+        call.cancel()
+        self.assertIsInstance(call._str, bytes)
+
+
+    def test_stringifyDelayedCallInDebugMode(self):
+        """
+        Test that setting debug mode to True on DelayedCall instance does
+        not cause unhandled exception when calling str() on this call.
+        """
+        DelayedCall.debug = False
+        call = reactor.callLater(0, lambda: None)
+        call.debug = True
+        self.assertIsInstance(str(call), str)
+
+
 class CallFromThreadStopsAndWakeUpTests(unittest.TestCase):
     def testWakeUp(self):
         # Make sure other threads can wake up the reactor
diff --git a/twisted/topfiles/8110.bugfix b/twisted/topfiles/8110.bugfix
new file mode 100644
index 0000000..5ef9b78
--- /dev/null
+++ b/twisted/topfiles/8110.bugfix
@@ -0,0 +1 @@
+twisted.internet.base.DelayedCall no longer causes unhandled exception after cancel with debug mode True
