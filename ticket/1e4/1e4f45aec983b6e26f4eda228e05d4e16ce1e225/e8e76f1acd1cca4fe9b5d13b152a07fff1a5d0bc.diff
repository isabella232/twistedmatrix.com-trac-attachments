diff --git a/twisted/protocols/ftp.py b/twisted/protocols/ftp.py
index 09ec8a5..655fd63 100644
--- a/twisted/protocols/ftp.py
+++ b/twisted/protocols/ftp.py
@@ -1220,11 +1220,10 @@ class FTP(object, basic.LineReceiver, policies.TimeoutMixin):
             Called from data transport when there are errors during the
             transfer.
             """
-            if err.check(FTPCmdError):
-                return (err.value.errorCode, '/'.join(newsegs))
-
             log.msg("Unexpected error received during transfer:")
             log.err(err)
+            if err.check(FTPCmdError):
+                return err
             return (CNX_CLOSED_TXFR_ABORTED,)
 
         d = self.shell.openForWriting(newsegs)
diff --git a/twisted/test/test_ftp.py b/twisted/test/test_ftp.py
index 5ae8e3d..1f251da 100644
--- a/twisted/test/test_ftp.py
+++ b/twisted/test/test_ftp.py
@@ -625,7 +625,7 @@ class FTPServerTestCaseAdvancedClient(FTPServerTestCase):
         # Make a failing file writer.
         class FailingFileWriter(ftp._FileWriter):
             def receive(self):
-                return defer.fail(ftp.IsADirectoryError("blah"))
+                return defer.fail(ftp.IsADirectoryError("failing_file"))
 
         def failingSTOR(a, b):
             return defer.succeed(FailingFileWriter(None))
@@ -636,6 +636,9 @@ class FTPServerTestCaseAdvancedClient(FTPServerTestCase):
 
         def eb(res):
             res.trap(ftp.CommandFailed)
+            logs = self.flushLoggedErrors()
+            self.assertEqual(1, len(logs))
+            self.assertIsInstance(logs[0].value, ftp.IsADirectoryError)
             self.assertEqual(
                 res.value.args[0][0],
                 "550 failing_file: is a directory")
