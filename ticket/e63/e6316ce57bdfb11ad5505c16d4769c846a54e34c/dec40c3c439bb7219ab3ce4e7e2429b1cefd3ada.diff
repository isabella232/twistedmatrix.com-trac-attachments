Index: twisted/web2/static.py
===================================================================
--- twisted/web2/static.py	(revision 17248)
+++ twisted/web2/static.py	(working copy)
@@ -322,7 +322,12 @@
         """
         children = self.putChildren.keys()
         if self.fp.isdir():
-            children += [c for c in self.fp.listdir() if c not in children]
+            try:
+                children += [c for c in self.fp.listdir() if c not in children]
+            except (IOError,OSError), errmsg:
+                # this is likely a perm. denied on traversing a directory
+                # it can be ignored
+                print "\"%s\"" % errmsg
         return children
 
     def locateChild(self, req, segments):
Index: twisted/web2/dav/fileop.py
===================================================================
--- twisted/web2/dav/fileop.py	(revision 17248)
+++ twisted/web2/dav/fileop.py	(working copy)
@@ -114,8 +114,21 @@
         for dir, subdirs, files in os.walk(filepath.path, topdown=False):
             for filename in files:
                 path = os.path.join(dir, filename)
-                try: os.remove(path)
-                except: errors.add(path, Failure())
+                try:
+                    os.remove(path)
+                except (IOError, OSError), (error,msg):
+                    # this is likely a perm. denied
+                    # it should return a HTTP code 403, *NOT* a 500
+                    import errno
+                    log.msg("%s (errno=%d) on remove(%s)" % (msg,error,filepath.path))
+                    if error==errno.EPERM or error==errno.EACCES:
+                        return responsecode.FORBIDDEN
+                    elif error==errno.ENOENT:
+                        return responsecode.NOT_FOUND
+                    else:
+                        errors.add(path, Failure())
+                except:
+                    errors.add(path, Failure())
 
             for subdir in subdirs:
                 path = os.path.join(dir, subdir)
@@ -126,7 +139,19 @@
                     try: os.rmdir(path)
                     except: errors.add(path, Failure())
 
-        try: os.rmdir(filepath.path)
+        try:
+            os.rmdir(filepath.path)
+        except (IOError,OSError), (error,msg):
+            # this is likely a perm. denied
+            # it should return a HTTP code 403, *NOT* a 500
+            import errno
+            log.msg("%s (errno=%d) on rmdir(%s)" % (msg,error,filepath.path))
+            if error==errno.EPERM or error==errno.EACCES:
+                return responsecode.FORBIDDEN
+            elif error==errno.ENOENT:
+                return responsecode.NOT_FOUND
+            else:
+                return statusForFailure(Failure(), "deleting directory: %s" % (filepath.path,))
         except:
             return statusForFailure(Failure(), "deleting directory: %s" % (filepath.path,))
 
@@ -139,6 +164,17 @@
         log.msg("Deleting file %s" % (filepath.path,))
         try:
             os.remove(filepath.path)
+        except (IOError,OSError), (error,msg):
+            # this is likely a perm. denied
+            # it should return a HTTP code 403, *NOT* a 500
+            import errno
+            log.msg("%s (errno=%d) on remove(%s)" % (msg,error,filepath.path))
+            if error==errno.EPERM or error==errno.EACCES:
+                return responsecode.FORBIDDEN
+            elif error==errno.ENOENT:
+                return responsecode.NOT_FOUND
+            else:
+                return statusForFailure(Failure(), "deleting directory: %s" % (filepath.path,))
         except:
             return statusForFailure(Failure(), "deleting file: %s" % (filepath.path,))
 
@@ -326,7 +362,16 @@
     #
     try:
         os.rename(source_filepath.path, destination_filepath.path)
-    except OSError: pass
+    except (IOError,OSError), (error,msg):
+        import errno
+        log.msg("%s (errno=%d) on rename(%s,%s)"  % (msg,error,source_filepath.path,destination_filepath.path))
+        if error==errno.EPERM or error==errno.EACCES:
+            success_code = responsecode.FORBIDDEN
+        elif error==errno.ENOENT:
+            success_code = responsecode.NOT_FOUND
+        else:
+            success_code = responsecode.INTERNAL_SERVER_ERROR
+        return success_code
     else:
         # Restat source filepath since we moved it
         source_filepath.restat(False)
@@ -426,6 +471,17 @@
         os.mkdir(filepath.path)
         # Restat filepath because we modified it
         filepath.restat(False)
+    except (IOError,OSError), (error,msg):
+        # this is likely a perm. denied
+        # it should return a HTTP code 403, *NOT* a 500
+        import errno
+        log.msg("%s (errno=%d) on mkdir(%s)" % (msg,error,filepath.path))
+        if error==errno.EPERM or error==errno.EACCES:
+            return responsecode.FORBIDDEN
+        elif error==errno.ENOENT:
+            return responsecode.NOT_FOUND
+        else:
+            return statusForFailure(Failure(), "creating directory in MKCOL: %s" % (filepath.path,))
     except:
         return statusForFailure(Failure(), "creating directory in MKCOL: %s" % (filepath.path,))
 
