diff --git twisted/internet/gtkreactor.py twisted/internet/gtkreactor.py
index 60e17b4..aa82ad9 100644
--- twisted/internet/gtkreactor.py
+++ twisted/internet/gtkreactor.py
@@ -106,7 +106,7 @@ class GtkReactor(posixbase.PosixReactorBase):
         # flush some pending events, return if there was something to do
         # don't use the usual "while gtk.events_pending(): mainiteration()"
         # idiom because lots of IO (in particular test_tcp's
-        # ProperlyCloseFilesTestCase) can keep us from ever exiting.
+        # ProperlyCloseFilesTests) can keep us from ever exiting.
         log.msg(channel='system', event='iteration', reactor=self)
         if gtk.events_pending():
             gtk.mainiteration(0)
diff --git twisted/python/test/test_zippath.py twisted/python/test/test_zippath.py
index 75e8c5e..a9e23c3 100644
--- twisted/python/test/test_zippath.py
+++ twisted/python/test/test_zippath.py
@@ -7,7 +7,7 @@ Test cases covering L{twisted.python.zippath}.
 
 import os, zipfile
 
-from twisted.test.test_paths import AbstractFilePathTestCase
+from twisted.test.test_paths import AbstractFilePathTests
 from twisted.python.zippath import ZipArchive
 
 
@@ -26,13 +26,13 @@ def zipit(dirname, zfname):
 
 
 
-class ZipFilePathTests(AbstractFilePathTestCase):
+class ZipFilePathTests(AbstractFilePathTests):
     """
     Test various L{ZipPath} path manipulations as well as reprs for L{ZipPath}
     and L{ZipArchive}.
     """
     def setUp(self):
-        AbstractFilePathTestCase.setUp(self)
+        AbstractFilePathTests.setUp(self)
         zipit(self.cmn, self.cmn + '.zip')
         self.path = ZipArchive(self.cmn + '.zip')
         self.root = self.path
diff --git twisted/test/iosim.py twisted/test/iosim.py
index d863d66..1fcfd48 100644
--- twisted/test/iosim.py
+++ twisted/test/iosim.py
@@ -1,4 +1,4 @@
-# -*- test-case-name: twisted.test.test_amp.TLSTest,twisted.test.test_iosim -*-
+# -*- test-case-name: twisted.test.test_amp.TLSTests,twisted.test.test_iosim -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
diff --git twisted/test/stdio_test_consumer.py twisted/test/stdio_test_consumer.py
index c0af9d4..6d7d4cb 100644
--- twisted/test/stdio_test_consumer.py
+++ twisted/test/stdio_test_consumer.py
@@ -1,10 +1,10 @@
-# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTestCase.test_consumer -*-
+# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTests.test_consumer -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Main program for the child process run by
-L{twisted.test.test_stdio.StandardInputOutputTestCase.test_consumer} to test
+L{twisted.test.test_stdio.StandardInputOutputTests.test_consumer} to test
 that process transports implement IConsumer properly.
 """
 
diff --git twisted/test/stdio_test_halfclose.py twisted/test/stdio_test_halfclose.py
index f7aa161..13f89d7 100644
--- twisted/test/stdio_test_halfclose.py
+++ twisted/test/stdio_test_halfclose.py
@@ -1,10 +1,10 @@
-# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTestCase.test_readConnectionLost -*-
+# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTests.test_readConnectionLost -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Main program for the child process run by
-L{twisted.test.test_stdio.StandardInputOutputTestCase.test_readConnectionLost}
+L{twisted.test.test_stdio.StandardInputOutputTests.test_readConnectionLost}
 to test that IHalfCloseableProtocol.readConnectionLost works for process
 transports.
 """
diff --git twisted/test/stdio_test_hostpeer.py twisted/test/stdio_test_hostpeer.py
index 69aa873..707e05b 100644
--- twisted/test/stdio_test_hostpeer.py
+++ twisted/test/stdio_test_hostpeer.py
@@ -1,10 +1,10 @@
-# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTestCase.test_hostAndPeer -*-
+# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTests.test_hostAndPeer -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Main program for the child process run by
-L{twisted.test.test_stdio.StandardInputOutputTestCase.test_hostAndPeer} to test
+L{twisted.test.test_stdio.StandardInputOutputTests.test_hostAndPeer} to test
 that ITransport.getHost() and ITransport.getPeer() work for process transports.
 """
 
diff --git twisted/test/stdio_test_lastwrite.py twisted/test/stdio_test_lastwrite.py
index ff72495..1449cac 100644
--- twisted/test/stdio_test_lastwrite.py
+++ twisted/test/stdio_test_lastwrite.py
@@ -1,10 +1,10 @@
-# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTestCase.test_lastWriteReceived -*-
+# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTests.test_lastWriteReceived -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Main program for the child process run by
-L{twisted.test.test_stdio.StandardInputOutputTestCase.test_lastWriteReceived}
+L{twisted.test.test_stdio.StandardInputOutputTests.test_lastWriteReceived}
 to test that L{os.write} can be reliably used after
 L{twisted.internet.stdio.StandardIO} has finished.
 """
diff --git twisted/test/stdio_test_loseconn.py twisted/test/stdio_test_loseconn.py
index 2a51e3e..c9fa2d0 100644
--- twisted/test/stdio_test_loseconn.py
+++ twisted/test/stdio_test_loseconn.py
@@ -1,10 +1,10 @@
-# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTestCase.test_loseConnection -*-
+# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTests.test_loseConnection -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Main program for the child process run by
-L{twisted.test.test_stdio.StandardInputOutputTestCase.test_loseConnection} to
+L{twisted.test.test_stdio.StandardInputOutputTests.test_loseConnection} to
 test that ITransport.loseConnection() works for process transports.
 """
 
diff --git twisted/test/stdio_test_producer.py twisted/test/stdio_test_producer.py
index 7ca72e7..6160772 100644
--- twisted/test/stdio_test_producer.py
+++ twisted/test/stdio_test_producer.py
@@ -1,10 +1,10 @@
-# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTestCase.test_producer -*-
+# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTests.test_producer -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Main program for the child process run by
-L{twisted.test.test_stdio.StandardInputOutputTestCase.test_producer} to test
+L{twisted.test.test_stdio.StandardInputOutputTests.test_producer} to test
 that process transports implement IProducer properly.
 """
 
diff --git twisted/test/stdio_test_write.py twisted/test/stdio_test_write.py
index 2b33109..b502452 100644
--- twisted/test/stdio_test_write.py
+++ twisted/test/stdio_test_write.py
@@ -1,10 +1,10 @@
-# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTestCase.test_write -*-
+# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTests.test_write -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Main program for the child process run by
-L{twisted.test.test_stdio.StandardInputOutputTestCase.test_write} to test that
+L{twisted.test.test_stdio.StandardInputOutputTests.test_write} to test that
 ITransport.write() works for process transports.
 """
 
diff --git twisted/test/stdio_test_writeseq.py twisted/test/stdio_test_writeseq.py
index 85c9f9d..6a92e9b 100644
--- twisted/test/stdio_test_writeseq.py
+++ twisted/test/stdio_test_writeseq.py
@@ -1,10 +1,10 @@
-# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTestCase.test_writeSequence -*-
+# -*- test-case-name: twisted.test.test_stdio.StandardInputOutputTests.test_writeSequence -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Main program for the child process run by
-L{twisted.test.test_stdio.StandardInputOutputTestCase.test_writeSequence} to test that
+L{twisted.test.test_stdio.StandardInputOutputTests.test_writeSequence} to test that
 ITransport.writeSequence() works for process transports.
 """
 
diff --git twisted/test/test_adbapi.py twisted/test/test_adbapi.py
index bc9a84d..843fa8e 100644
--- twisted/test/test_adbapi.py
+++ twisted/test/test_adbapi.py
@@ -561,13 +561,13 @@ def makeSQLTests(base, suffix, globals):
                                 base.__dict__)
         globals[name] = klass
 
-# GadflyADBAPITestCase SQLiteADBAPITestCase PyPgSQLADBAPITestCase
-# PsycopgADBAPITestCase MySQLADBAPITestCase FirebirdADBAPITestCase
-makeSQLTests(ADBAPITestBase, 'ADBAPITestCase', globals())
+# GadflyADBAPITests SQLiteADBAPITests PyPgSQLADBAPITests
+# PsycopgADBAPITests MySQLADBAPITests FirebirdADBAPITests
+makeSQLTests(ADBAPITestBase, 'ADBAPITests', globals())
 
-# GadflyReconnectTestCase SQLiteReconnectTestCase PyPgSQLReconnectTestCase
-# PsycopgReconnectTestCase MySQLReconnectTestCase FirebirdReconnectTestCase
-makeSQLTests(ReconnectTestBase, 'ReconnectTestCase', globals())
+# GadflyReconnectTests SQLiteReconnectTests PyPgSQLReconnectTests
+# PsycopgReconnectTests MySQLReconnectTests FirebirdReconnectTests
+makeSQLTests(ReconnectTestBase, 'ReconnectTests', globals())
 
 
 
@@ -600,7 +600,7 @@ class FakePool(object):
 
 
 
-class ConnectionTestCase(unittest.TestCase):
+class ConnectionTests(unittest.TestCase):
     """
     Tests for the L{Connection} class.
     """
@@ -623,7 +623,7 @@ class ConnectionTestCase(unittest.TestCase):
 
 
 
-class TransactionTestCase(unittest.TestCase):
+class TransactionTests(unittest.TestCase):
     """
     Tests for the L{Transaction} class.
     """
@@ -712,7 +712,7 @@ class EventReactor(object):
 
 
 
-class ConnectionPoolTestCase(unittest.TestCase):
+class ConnectionPoolTests(unittest.TestCase):
     """
     Unit tests for L{ConnectionPool}.
     """
diff --git twisted/test/test_amp.py twisted/test/test_amp.py
index 00266f7..05a2093 100644
--- twisted/test/test_amp.py
+++ twisted/test/test_amp.py
@@ -407,7 +407,7 @@ class AmpBoxTests(unittest.TestCase):
 
 
 
-class ParsingTest(unittest.TestCase):
+class ParsingTests(unittest.TestCase):
 
     def test_booleanValues(self):
         """
@@ -547,7 +547,7 @@ class CommandDispatchTests(unittest.TestCase):
     and responses using Command.responder decorator.
 
     Note: Originally, AMP's factoring was such that many tests for this
-    functionality are now implemented as full round-trip tests in L{AMPTest}.
+    functionality are now implemented as full round-trip tests in L{AMPTests}.
     Future tests should be written at this level instead, to ensure API
     compatibility and to provide more granular, readable units of test
     coverage.
@@ -1198,7 +1198,7 @@ class BinaryProtocolTests(unittest.TestCase):
 
 
 
-class AMPTest(unittest.TestCase):
+class AMPTests(unittest.TestCase):
 
     def test_interfaceDeclarations(self):
         """
@@ -1898,7 +1898,7 @@ class SecurableProto(FactoryNotifier):
 
 
 
-class TLSTest(unittest.TestCase):
+class TLSTests(unittest.TestCase):
     def test_startingTLS(self):
         """
         Verify that starting TLS and succeeding at handshaking sends all the
@@ -2005,7 +2005,7 @@ class TLSTest(unittest.TestCase):
 
 
 
-class TLSNotAvailableTest(unittest.TestCase):
+class TLSNotAvailableTests(unittest.TestCase):
     """
     Tests what happened when ssl is not available in current installation.
     """
@@ -2271,7 +2271,7 @@ if ssl is not None:
     tempcert = tempSelfSigned()
 
 
-class LiveFireTLSTestCase(LiveFireBase, unittest.TestCase):
+class LiveFireTLSTests(LiveFireBase, unittest.TestCase):
     clientProto = SecurableProto
     serverProto = SecurableProto
     def test_liveFireCustomTLS(self):
@@ -2323,7 +2323,7 @@ class SlightlySmartTLS(SimpleSymmetricCommandProtocol):
     amp.StartTLS.responder(getTLSVars)
 
 
-class PlainVanillaLiveFire(LiveFireBase, unittest.TestCase):
+class PlainVanillaLiveFireTests(LiveFireBase, unittest.TestCase):
 
     clientProto = SimpleSymmetricCommandProtocol
     serverProto = SimpleSymmetricCommandProtocol
@@ -2341,7 +2341,7 @@ class PlainVanillaLiveFire(LiveFireBase, unittest.TestCase):
 
 
 
-class WithServerTLSVerification(LiveFireBase, unittest.TestCase):
+class WithServerTLSVerificationTests(LiveFireBase, unittest.TestCase):
     clientProto = SimpleSymmetricCommandProtocol
     serverProto = SlightlySmartTLS
 
@@ -2480,7 +2480,7 @@ class ProtocolIncludingCommandWithDifferentCommandType(
 
 
 
-class CommandTestCase(unittest.TestCase):
+class CommandTests(unittest.TestCase):
     """
     Tests for L{amp.Argument} and L{amp.Command}.
     """
@@ -3164,7 +3164,7 @@ class UTCTests(unittest.TestCase):
 
 if not interfaces.IReactorSSL.providedBy(reactor):
     skipMsg = 'This test case requires SSL support in the reactor'
-    TLSTest.skip = skipMsg
-    LiveFireTLSTestCase.skip = skipMsg
-    PlainVanillaLiveFire.skip = skipMsg
-    WithServerTLSVerification.skip = skipMsg
+    TLSTests.skip = skipMsg
+    LiveFireTLSTests.skip = skipMsg
+    PlainVanillaLiveFireTests.skip = skipMsg
+    WithServerTLSVerificationTests.skip = skipMsg
diff --git twisted/test/test_application.py twisted/test/test_application.py
index acb684c..6f6bf36 100644
--- twisted/test/test_application.py
+++ twisted/test/test_application.py
@@ -24,7 +24,7 @@ from twisted.python.test.modules_helpers import TwistedModulesMixin
 class Dummy:
     processName=None
 
-class TestService(unittest.TestCase):
+class ServiceTests(unittest.TestCase):
 
     def testName(self):
         s = service.Service()
@@ -151,7 +151,7 @@ else:
     curuid = curgid = 0
 
 
-class TestProcess(unittest.TestCase):
+class ProcessTests(unittest.TestCase):
 
     def testID(self):
         p = service.Process(5, 6)
@@ -176,7 +176,7 @@ class TestProcess(unittest.TestCase):
         self.assertEqual(p.processName, 'hello')
 
 
-class TestInterfaces(unittest.TestCase):
+class InterfacesTests(unittest.TestCase):
 
     def testService(self):
         self.assert_(service.IService.providedBy(service.Service()))
@@ -189,7 +189,7 @@ class TestInterfaces(unittest.TestCase):
         self.assert_(service.IProcess.providedBy(service.Process()))
 
 
-class TestApplication(unittest.TestCase):
+class ApplicationTests(unittest.TestCase):
 
     def testConstructor(self):
         service.Application("hello")
@@ -220,7 +220,7 @@ class TestApplication(unittest.TestCase):
         self.assertEqual(p.name, 'hello')
         self.assert_(p.original is a)
 
-class TestLoading(unittest.TestCase):
+class LoadingTests(unittest.TestCase):
 
     def test_simpleStoreAndLoad(self):
         a = service.Application("hello")
@@ -241,7 +241,7 @@ class TestLoading(unittest.TestCase):
 
 
 
-class TestAppSupport(unittest.TestCase):
+class AppSupportTests(unittest.TestCase):
 
     def testPassphrase(self):
         self.assertEqual(app.getPassphrase(0), None)
@@ -316,7 +316,7 @@ class TestEcho(wire.Echo):
     def connectionLost(self, reason):
         self.d.callback(True)
 
-class TestInternet2(unittest.TestCase):
+class InternetTests(unittest.TestCase):
 
     def testTCP(self):
         s = service.MultiService()
@@ -592,7 +592,7 @@ class TestInternet2(unittest.TestCase):
 
 
 
-class TestTimerBasic(unittest.TestCase):
+class TimerBasicTests(unittest.TestCase):
 
     def testTimerRuns(self):
         d = defer.Deferred()
@@ -660,7 +660,7 @@ class FakeReactor(reactors.Reactor):
 
 
 
-class PluggableReactorTestCase(TwistedModulesMixin, unittest.TestCase):
+class PluggableReactorTests(TwistedModulesMixin, unittest.TestCase):
     """
     Tests for the reactor discovery/inspection APIs.
     """
diff --git twisted/test/test_banana.py twisted/test/test_banana.py
index 048dc29..2274bfc 100644
--- twisted/test/test_banana.py
+++ twisted/test/test_banana.py
@@ -13,7 +13,7 @@ from twisted.internet import protocol, main
 from twisted.test.proto_helpers import StringTransport
 
 
-class MathTestCase(unittest.TestCase):
+class MathTests(unittest.TestCase):
     def test_int2b128(self):
         funkylist = range(0,100) + range(1000,1100) + range(1000000,1000100) + [1024 **10l]
         for i in funkylist:
@@ -96,7 +96,7 @@ class BananaTestBase(unittest.TestCase):
 
 
 
-class BananaTestCase(BananaTestBase):
+class BananaTests(BananaTestBase):
     """
     General banana tests.
     """
@@ -131,7 +131,7 @@ class BananaTestCase(BananaTestBase):
         defined with the ``class`` statement).  ``Banana.sendEncoded`` raises
         ``BananaError`` if called with an instance of such a type.
         """
-        self._unsupportedTypeTest(MathTestCase(), __name__ + ".MathTestCase")
+        self._unsupportedTypeTest(MathTests(), __name__ + ".MathTests")
 
 
     def _unsupportedTypeTest(self, obj, name):
diff --git twisted/test/test_compat.py twisted/test/test_compat.py
index 5075339..02135fa 100644
--- twisted/test/test_compat.py
+++ twisted/test/test_compat.py
@@ -125,7 +125,7 @@ class IOTypeTests(unittest.SynchronousTestCase):
 
 
 
-class CompatTestCase(unittest.SynchronousTestCase):
+class CompatTests(unittest.SynchronousTestCase):
     """
     Various utility functions in C{twisted.python.compat} provide same
     functionality as modern Python variants.
@@ -241,7 +241,7 @@ if _PY3:
 
 
 
-class ExecfileCompatTestCase(unittest.SynchronousTestCase):
+class ExecfileCompatTests(unittest.SynchronousTestCase):
     """
     Tests for the Python 3-friendly L{execfile} implementation.
     """
diff --git twisted/test/test_context.py twisted/test/test_context.py
index e17fcf7..0b5bc65 100644
--- twisted/test/test_context.py
+++ twisted/test/test_context.py
@@ -11,7 +11,7 @@ from twisted.trial.unittest import SynchronousTestCase
 
 from twisted.python import context
 
-class ContextTest(SynchronousTestCase):
+class ContextTests(SynchronousTestCase):
     """
     Tests for the module-scope APIs for L{twisted.python.context}.
     """
diff --git twisted/test/test_cooperator.py twisted/test/test_cooperator.py
index b273b1d..f87c083 100644
--- twisted/test/test_cooperator.py
+++ twisted/test/test_cooperator.py
@@ -64,7 +64,7 @@ class FakeScheduler(object):
 
 
 
-class TestCooperator(unittest.TestCase):
+class CooperatorTests(unittest.TestCase):
     RESULT = 'done'
 
     def ebIter(self, err):
diff --git twisted/test/test_defer.py twisted/test/test_defer.py
index 1ee3417..ab6d9fe 100644
--- twisted/test/test_defer.py
+++ twisted/test/test_defer.py
@@ -116,7 +116,7 @@ class UtilTests(unittest.TestCase):
 
 
 
-class DeferredTestCase(unittest.SynchronousTestCase, ImmediateFailureMixin):
+class DeferredTests(unittest.SynchronousTestCase, ImmediateFailureMixin):
 
     def setUp(self):
         self.callbackResults = None
@@ -1490,7 +1490,7 @@ class FirstErrorTests(unittest.SynchronousTestCase):
 
 
 
-class AlreadyCalledTestCase(unittest.SynchronousTestCase):
+class AlreadyCalledTests(unittest.SynchronousTestCase):
     def setUp(self):
         self._deferredWasDebugging = defer.getDebugging()
         defer.setDebugging(True)
@@ -1633,7 +1633,7 @@ class AlreadyCalledTestCase(unittest.SynchronousTestCase):
 
 
 
-class DeferredCancellerTest(unittest.SynchronousTestCase):
+class DeferredCancellerTests(unittest.SynchronousTestCase):
     def setUp(self):
         self.callbackResults = None
         self.errbackResults = None
@@ -1896,7 +1896,7 @@ class DeferredCancellerTest(unittest.SynchronousTestCase):
 
 
 
-class LogTestCase(unittest.SynchronousTestCase):
+class LogTests(unittest.SynchronousTestCase):
     """
     Test logging of unhandled errors.
     """
@@ -2056,7 +2056,7 @@ class LogTestCase(unittest.SynchronousTestCase):
 
 
 
-class DeferredTestCaseII(unittest.SynchronousTestCase):
+class DeferredListEmptyTests(unittest.SynchronousTestCase):
     def setUp(self):
         self.callbackRan = 0
 
@@ -2074,7 +2074,7 @@ class DeferredTestCaseII(unittest.SynchronousTestCase):
 
 
 
-class OtherPrimitives(unittest.SynchronousTestCase, ImmediateFailureMixin):
+class OtherPrimitivesTests(unittest.SynchronousTestCase, ImmediateFailureMixin):
     def _incr(self, result):
         self.counter += 1
 
@@ -2316,7 +2316,7 @@ class OtherPrimitives(unittest.SynchronousTestCase, ImmediateFailureMixin):
 
 
 
-class DeferredFilesystemLockTestCase(unittest.TestCase):
+class DeferredFilesystemLockTests(unittest.TestCase):
     """
     Test the behavior of L{DeferredFilesystemLock}
     """
diff --git twisted/test/test_defgen.py twisted/test/test_defgen.py
index 94e1541..71d9a0c 100644
--- twisted/test/test_defgen.py
+++ twisted/test/test_defgen.py
@@ -323,7 +323,7 @@ class InlineCallbacksTests(BaseDefgenTests, unittest.TestCase):
 
 
 
-class DeprecateDeferredGenerator(unittest.SynchronousTestCase):
+class DeprecateDeferredGeneratorTests(unittest.SynchronousTestCase):
     """
     Tests that L{DeferredGeneratorTests} and L{waitForDeferred} are
     deprecated.
diff --git twisted/test/test_dict.py twisted/test/test_dict.py
index 3ebb67e..bb87267 100644
--- twisted/test/test_dict.py
+++ twisted/test/test_dict.py
@@ -9,7 +9,7 @@ from twisted.protocols import dict
 paramString = "\"This is a dqstring \\w\\i\\t\\h boring stuff like: \\\"\" and t\\hes\\\"e are a\\to\\ms"
 goodparams = ["This is a dqstring with boring stuff like: \"", "and", "thes\"e", "are", "atoms"]
 
-class ParamTest(unittest.TestCase):
+class ParamTests(unittest.TestCase):
     def testParseParam(self):
         """Testing command response handling"""
         params = []
diff --git twisted/test/test_dirdbm.py twisted/test/test_dirdbm.py
index 8bd240f..f3d1f3f 100644
--- twisted/test/test_dirdbm.py
+++ twisted/test/test_dirdbm.py
@@ -12,7 +12,7 @@ from twisted.persisted import dirdbm
 
 
 
-class DirDbmTestCase(unittest.TestCase):
+class DirDbmTests(unittest.TestCase):
 
     def setUp(self):
         self.path = self.mktemp()
@@ -158,7 +158,7 @@ class DirDbmTestCase(unittest.TestCase):
 
 
 
-class ShelfTestCase(DirDbmTestCase):
+class ShelfTests(DirDbmTests):
 
     def setUp(self):
         self.path = self.mktemp()
@@ -167,4 +167,4 @@ class ShelfTestCase(DirDbmTestCase):
                       ('int', 12), ('float', 12.0), ('tuple', (None, 12)))
 
 
-testCases = [DirDbmTestCase, ShelfTestCase]
+testCases = [DirDbmTests, ShelfTests]
diff --git twisted/test/test_doc.py twisted/test/test_doc.py
index f63416c..14be5a8 100644
--- twisted/test/test_doc.py
+++ twisted/test/test_doc.py
@@ -21,7 +21,7 @@ def errorInFile(f, line=17, name=''):
     # return 'File "%s", line %d, in %s' % (f, line, name)
 
 
-class DocCoverage(unittest.TestCase):
+class DocCoverageTests(unittest.TestCase):
     """
     Looking for docstrings in all modules and packages.
     """
diff --git twisted/test/test_error.py twisted/test/test_error.py
index ad6b16b..9918d36 100644
--- twisted/test/test_error.py
+++ twisted/test/test_error.py
@@ -9,7 +9,7 @@ from twisted.internet import error
 from twisted.python.runtime import platformType
 
 
-class TestStringification(unittest.SynchronousTestCase):
+class StringificationTests(unittest.SynchronousTestCase):
     """Test that the exceptions have useful stringifications.
     """
 
diff --git twisted/test/test_explorer.py twisted/test/test_explorer.py
index d4549f3..afa61db 100644
--- twisted/test/test_explorer.py
+++ twisted/test/test_explorer.py
@@ -34,7 +34,7 @@ class SomeDohickey:
         return self.args
 
 
-class TestBrowser(unittest.TestCase):
+class BrowserTests(unittest.TestCase):
     def setUp(self):
         self.pool = explorer.explorerPool
         self.pool.clear()
@@ -145,7 +145,7 @@ def function_crazy((alpha, beta), c, d=range(4), **kw):
     "A function with a mad crazy signature."
     return alpha, beta, c, d, kw
 
-class TestBrowseFunction(unittest.TestCase):
+class BrowseFunctionTests(unittest.TestCase):
 
     def setUp(self):
         self.pool = explorer.explorerPool
diff --git twisted/test/test_factories.py twisted/test/test_factories.py
index dffaf5a..9e0eb41 100644
--- twisted/test/test_factories.py
+++ twisted/test/test_factories.py
@@ -29,7 +29,7 @@ class FakeConnector(object):
 
 
 
-class ReconnectingFactoryTestCase(TestCase):
+class ReconnectingFactoryTests(TestCase):
     """
     Tests for L{ReconnectingClientFactory}.
     """
diff --git twisted/test/test_failure.py twisted/test/test_failure.py
index 1f30109..bfb42c5 100644
--- twisted/test/test_failure.py
+++ twisted/test/test_failure.py
@@ -41,7 +41,7 @@ def getDivisionFailure(*args, **kwargs):
     return f
 
 
-class FailureTestCase(SynchronousTestCase):
+class FailureTests(SynchronousTestCase):
     """
     Tests for L{failure.Failure}.
     """
@@ -738,7 +738,7 @@ class FindFailureTests(SynchronousTestCase):
 
 
 
-class TestFormattableTraceback(SynchronousTestCase):
+class FormattableTracebackTests(SynchronousTestCase):
     """
     Whitebox tests that show that L{failure._Traceback} constructs objects that
     can be used by L{traceback.extract_tb}.
@@ -776,7 +776,7 @@ class TestFormattableTraceback(SynchronousTestCase):
 
 
 
-class TestFrameAttributes(SynchronousTestCase):
+class FrameAttributesTests(SynchronousTestCase):
     """
     _Frame objects should possess some basic attributes that qualify them as
     fake python Frame objects.
@@ -795,7 +795,7 @@ class TestFrameAttributes(SynchronousTestCase):
 
 
 
-class TestDebugMode(SynchronousTestCase):
+class DebugModeTests(SynchronousTestCase):
     """
     Failure's debug mode should allow jumping into the debugger.
     """
diff --git twisted/test/test_fdesc.py twisted/test/test_fdesc.py
index bb78421..272d50c 100644
--- twisted/test/test_fdesc.py
+++ twisted/test/test_fdesc.py
@@ -20,7 +20,7 @@ from twisted.trial import unittest
 
 
 
-class NonBlockingTestCase(unittest.SynchronousTestCase):
+class NonBlockingTests(unittest.SynchronousTestCase):
     """
     Tests for L{fdesc.setNonBlocking} and L{fdesc.setBlocking}.
     """
@@ -50,7 +50,7 @@ class NonBlockingTestCase(unittest.SynchronousTestCase):
 
 
 
-class ReadWriteTestCase(unittest.SynchronousTestCase):
+class ReadWriteTests(unittest.SynchronousTestCase):
     """
     Tests for L{fdesc.readFromFD}, L{fdesc.writeToFD}.
     """
diff --git twisted/test/test_finger.py twisted/test/test_finger.py
index c0c2e09..bcf9fcd 100644
--- twisted/test/test_finger.py
+++ twisted/test/test_finger.py
@@ -10,7 +10,7 @@ from twisted.protocols import finger
 from twisted.test.proto_helpers import StringTransport
 
 
-class FingerTestCase(unittest.TestCase):
+class FingerTests(unittest.TestCase):
     """
     Tests for L{finger.Finger}.
     """
diff --git twisted/test/test_formmethod.py twisted/test/test_formmethod.py
index 845c4e2..41d3601 100644
--- twisted/test/test_formmethod.py
+++ twisted/test/test_formmethod.py
@@ -11,7 +11,7 @@ from twisted.trial import unittest
 from twisted.python import formmethod
 
 
-class ArgumentTestCase(unittest.TestCase):
+class ArgumentTests(unittest.TestCase):
 
     def argTest(self, argKlass, testPairs, badValues, *args, **kwargs):
         arg = argKlass("name", *args, **kwargs)
diff --git twisted/test/test_ftp.py twisted/test/test_ftp.py
index f1e5b46..bbfaf40 100644
--- twisted/test/test_ftp.py
+++ twisted/test/test_ftp.py
@@ -176,7 +176,7 @@ class FTPServerTestCase(unittest.TestCase):
 
 
 
-class FTPAnonymousTestCase(FTPServerTestCase):
+class FTPAnonymousTests(FTPServerTestCase):
     """
     Simple tests for an FTP server with different anonymous username.
     The new anonymous username used in this test case is "guest"
@@ -200,7 +200,7 @@ class FTPAnonymousTestCase(FTPServerTestCase):
 
 
 
-class BasicFTPServerTestCase(FTPServerTestCase):
+class BasicFTPServerTests(FTPServerTestCase):
     def testNotLoggedInReply(self):
         """
         When not logged in, most commands other than USER and PASS should
@@ -603,7 +603,7 @@ class BasicFTPServerTestCase(FTPServerTestCase):
 
 
 
-class FTPServerTestCaseAdvancedClient(FTPServerTestCase):
+class FTPServerAdvancedClientTests(FTPServerTestCase):
     """
     Test FTP server with the L{ftp.FTPClient} class.
     """
@@ -715,7 +715,7 @@ class FTPServerTestCaseAdvancedClient(FTPServerTestCase):
 
 
 
-class FTPServerPasvDataConnectionTestCase(FTPServerTestCase):
+class FTPServerPasvDataConnectionTests(FTPServerTestCase):
     def _makeDataConnection(self, ignored=None):
         # Establish a passive data connection (i.e. client connecting to
         # server).
@@ -1024,10 +1024,10 @@ class FTPServerPasvDataConnectionTestCase(FTPServerTestCase):
 
 
 
-class FTPServerPortDataConnectionTestCase(FTPServerPasvDataConnectionTestCase):
+class FTPServerPortDataConnectionTests(FTPServerPasvDataConnectionTests):
     def setUp(self):
         self.dataPorts = []
-        return FTPServerPasvDataConnectionTestCase.setUp(self)
+        return FTPServerPasvDataConnectionTests.setUp(self)
 
     def _makeDataConnection(self, ignored=None):
         # Establish an active data connection (i.e. server connecting to
@@ -1048,7 +1048,7 @@ class FTPServerPortDataConnectionTestCase(FTPServerPasvDataConnectionTestCase):
     def tearDown(self):
         l = [defer.maybeDeferred(port.stopListening) for port in self.dataPorts]
         d = defer.maybeDeferred(
-            FTPServerPasvDataConnectionTestCase.tearDown, self)
+            FTPServerPasvDataConnectionTests.tearDown, self)
         l.append(d)
         return defer.DeferredList(l, fireOnOneErrback=True)
 
@@ -1419,7 +1419,7 @@ class FTPFileListingTests(unittest.TestCase):
 
 
 
-class FTPClientTests(unittest.TestCase):
+class FTPClientFailedRETRAndErrbacksUponDisconnectTests(unittest.TestCase):
 
     def testFailedRETR(self):
         f = protocol.Factory()
@@ -1472,7 +1472,7 @@ class FTPClientTests(unittest.TestCase):
 
 
 
-class FTPClientTestCase(unittest.TestCase):
+class FTPClientTests(unittest.TestCase):
     """
     Test advanced FTP client commands.
     """
@@ -2519,7 +2519,7 @@ class FTPClientBasicTests(unittest.TestCase):
 
 
 
-class PathHandling(unittest.TestCase):
+class PathHandlingTests(unittest.TestCase):
     def testNormalizer(self):
         for inp, outp in [('a', ['a']),
                           ('/a', ['a']),
@@ -2667,7 +2667,7 @@ class BaseFTPRealmTests(unittest.TestCase):
 
 
 
-class FTPRealmTestCase(unittest.TestCase):
+class FTPRealmTests(unittest.TestCase):
     """
     Tests for L{ftp.FTPRealm}.
     """
@@ -2733,7 +2733,7 @@ class SystemFTPRealmTests(unittest.TestCase):
 
 
 
-class ErrnoToFailureTestCase(unittest.TestCase):
+class ErrnoToFailureTests(unittest.TestCase):
     """
     Tests for L{ftp.errnoToFailure} errno checking.
     """
@@ -2799,7 +2799,7 @@ class ErrnoToFailureTestCase(unittest.TestCase):
 
 
 
-class AnonymousFTPShellTestCase(unittest.TestCase):
+class AnonymousFTPShellTests(unittest.TestCase):
     """
     Test anonymous shell properties.
     """
@@ -3244,7 +3244,7 @@ class IFTPShellTestsMixin:
 
 
 
-class FTPShellTestCase(unittest.TestCase, IFTPShellTestsMixin):
+class FTPShellTests(unittest.TestCase, IFTPShellTestsMixin):
     """
     Tests for the C{ftp.FTPShell} object.
     """
@@ -3413,7 +3413,7 @@ class IReadWriteTestsMixin:
 
 
 
-class FTPReadWriteTestCase(unittest.TestCase, IReadWriteTestsMixin):
+class FTPReadWriteTests(unittest.TestCase, IReadWriteTestsMixin):
     """
     Tests for C{ftp._FileReader} and C{ftp._FileWriter}, the objects returned
     by the shell in C{openForReading}/C{openForWriting}.
@@ -3471,7 +3471,7 @@ class CloseTestShell:
 
 
 
-class FTPCloseTest(unittest.TestCase):
+class FTPCloseTests(unittest.TestCase):
     """Tests that the server invokes IWriteFile.close"""
 
     def test_write(self):
diff --git twisted/test/test_ftp_options.py twisted/test/test_ftp_options.py
index e668502..b5e02e4 100644
--- twisted/test/test_ftp_options.py
+++ twisted/test/test_ftp_options.py
@@ -14,7 +14,7 @@ from twisted.python.filepath import FilePath
 
 
 
-class FTPOptionsTestCase(TestCase):
+class FTPOptionsTests(TestCase):
     """
     Tests for the command line option parser used for C{twistd ftp}.
     """
diff --git twisted/test/test_hook.py twisted/test/test_hook.py
index 7d17f76..12f3d2b 100644
--- twisted/test/test_hook.py
+++ twisted/test/test_hook.py
@@ -80,7 +80,7 @@ def subPost(sub, a, b):
     """
     sub.calledSubPost = sub.calledSubPost + 1
 
-class HookTestCase(unittest.TestCase):
+class HookTests(unittest.TestCase):
     """
     test case to make sure hooks are called
     """
@@ -147,4 +147,4 @@ class HookTestCase(unittest.TestCase):
         self.assertEqual(sub.calledSubPre, 2)
         self.assertEqual(sub.calledSub, 3)
 
-testCases = [HookTestCase]
+testCases = [HookTests]
diff --git twisted/test/test_htb.py twisted/test/test_htb.py
index f499a8f..5b2e4bf 100644
--- twisted/test/test_htb.py
+++ twisted/test/test_htb.py
@@ -26,7 +26,7 @@ class TestBucketBase(unittest.TestCase):
     def tearDown(self):
         htb.time = self._realTimeFunc
 
-class TestBucket(TestBucketBase):
+class BucketTests(TestBucketBase):
     def testBucketSize(self):
         """Testing the size of the bucket."""
         b = SomeBucket()
@@ -54,7 +54,7 @@ class TestBucket(TestBucketBase):
         empty = b.drip()
         self.assertTrue(empty)
 
-class TestBucketNesting(TestBucketBase):
+class BucketNestingTests(TestBucketBase):
     def setUp(self):
         TestBucketBase.setUp(self)
         self.parent = SomeBucket()
@@ -85,7 +85,7 @@ class TestBucketNesting(TestBucketBase):
 
 from test_pcp import DummyConsumer
 
-class ConsumerShaperTest(TestBucketBase):
+class ConsumerShaperTests(TestBucketBase):
     def setUp(self):
         TestBucketBase.setUp(self)
         self.underlying = DummyConsumer()
diff --git twisted/test/test_ident.py twisted/test/test_ident.py
index 9f69322..8c71b52 100644
--- twisted/test/test_ident.py
+++ twisted/test/test_ident.py
@@ -18,7 +18,7 @@ from twisted.test.proto_helpers import StringTransport
 
 
 
-class ClassParserTestCase(unittest.TestCase):
+class ClassParserTests(unittest.TestCase):
     """
     Test parsing of ident responses.
     """
@@ -96,7 +96,7 @@ class NewException(RuntimeError):
     pass
 
 
-class ServerParserTestCase(unittest.TestCase):
+class ServerParserTests(unittest.TestCase):
     def testErrors(self):
         p = TestErrorIdentServer()
         p.makeConnection(StringTransport())
@@ -152,7 +152,7 @@ else:
     _addr2 = '01020304'
 
 
-class ProcMixinTestCase(unittest.TestCase):
+class ProcMixinTests(unittest.TestCase):
     line = ('4: %s:0019 %s:02FA 0A 00000000:00000000 '
             '00:00000000 00000000     0        0 10927 1 f72a5b80 '
             '3000 0 0 2 -1') % (_addr1, _addr2)
diff --git twisted/test/test_internet.py twisted/test/test_internet.py
index eb5bfad..4cc9dae 100644
--- twisted/test/test_internet.py
+++ twisted/test/test_internet.py
@@ -345,7 +345,7 @@ class ThreePhaseEventTests(unittest.TestCase):
 
 
 
-class SystemEventTestCase(unittest.TestCase):
+class SystemEventTests(unittest.TestCase):
     """
     Tests for the reactor's implementation of the C{fireSystemEvent},
     C{addSystemEventTrigger}, and C{removeSystemEventTrigger} methods of the
@@ -649,7 +649,7 @@ class SystemEventTestCase(unittest.TestCase):
 
 
 
-class TimeTestCase(unittest.TestCase):
+class TimeTests(unittest.TestCase):
     """
     Tests for the IReactorTime part of the reactor.
     """
@@ -828,7 +828,7 @@ class TimeTestCase(unittest.TestCase):
         self.assertEqual(dc.getTime(), 13)
 
 
-class CallFromThreadTests(unittest.TestCase):
+class CallFromThreadStopsAndWakeUpTests(unittest.TestCase):
     def testWakeUp(self):
         # Make sure other threads can wake up the reactor
         d = Deferred()
@@ -870,7 +870,7 @@ class CallFromThreadTests(unittest.TestCase):
         return d
 
 
-class DelayedTestCase(unittest.TestCase):
+class DelayedTests(unittest.TestCase):
     def setUp(self):
         self.finished = 0
         self.counter = 0
@@ -997,7 +997,7 @@ class ChildResolveProtocol(protocol.ProcessProtocol):
         self.onCompletion = None
 
 
-class Resolve(unittest.TestCase):
+class ResolveTests(unittest.TestCase):
     def testChildResolve(self):
         # I've seen problems with reactor.run under gtk2reactor. Spawn a
         # child which just does reactor.resolve after the reactor has
@@ -1039,7 +1039,7 @@ if not interfaces.IReactorProcess(reactor, None):
 
 
 
-class CallFromThreadTestCase(unittest.TestCase):
+class CallFromThreadTests(unittest.TestCase):
     """
     Task scheduling from threads tests.
     """
@@ -1121,7 +1121,7 @@ class MyFactory(protocol.Factory):
     protocol = MyProtocol
 
 
-class ProtocolTestCase(unittest.TestCase):
+class ProtocolTests(unittest.TestCase):
 
     def testFactory(self):
         factory = MyFactory()
@@ -1212,7 +1212,7 @@ class ReentrantProducer(DummyProducer):
 
 
 
-class TestProducer(unittest.TestCase):
+class ProducerTests(unittest.TestCase):
     """
     Test abstract.FileDescriptor's consumer interface.
     """
@@ -1341,7 +1341,7 @@ class TestProducer(unittest.TestCase):
 
 
 
-class PortStringification(unittest.TestCase):
+class PortStringificationTests(unittest.TestCase):
     if interfaces.IReactorTCP(reactor, None) is not None:
         def testTCP(self):
             p = reactor.listenTCP(0, protocol.ServerFactory())
diff --git twisted/test/test_jelly.py twisted/test/test_jelly.py
index 3a21c21..f11fd55 100644
--- twisted/test/test_jelly.py
+++ twisted/test/test_jelly.py
@@ -112,7 +112,7 @@ class SimpleJellyTest:
 
 
 
-class JellyTestCase(unittest.TestCase):
+class JellyTests(unittest.TestCase):
     """
     Testcases for L{jelly} module serialization.
 
@@ -627,7 +627,7 @@ class ClassB(pb.Copyable, pb.RemoteCopy):
 
 
 
-class CircularReferenceTestCase(unittest.TestCase):
+class CircularReferenceTests(unittest.TestCase):
     """
     Tests for circular references handling in the jelly/unjelly process.
     """
diff --git twisted/test/test_lockfile.py twisted/test/test_lockfile.py
index 1e4cc20..59e0e8d 100644
--- twisted/test/test_lockfile.py
+++ twisted/test/test_lockfile.py
@@ -121,7 +121,7 @@ class UtilTests(unittest.TestCase):
 
 
 
-class LockingTestCase(unittest.TestCase):
+class LockingTests(unittest.TestCase):
     def _symlinkErrorTest(self, errno):
         def fakeSymlink(source, dest):
             raise OSError(errno, None)
diff --git twisted/test/test_log.py twisted/test/test_log.py
index dfeaf06..964adf5 100644
--- twisted/test/test_log.py
+++ twisted/test/test_log.py
@@ -36,7 +36,7 @@ class FakeWarning(Warning):
 
 
 
-class TextFromEventDictTest(unittest.SynchronousTestCase):
+class TextFromEventDictTests(unittest.SynchronousTestCase):
     """
     Tests for L{textFromEventDict}.
     """
@@ -113,7 +113,7 @@ class TextFromEventDictTest(unittest.SynchronousTestCase):
 
 
 
-class LogTest(unittest.SynchronousTestCase):
+class LogTests(unittest.SynchronousTestCase):
 
     def setUp(self):
         self.catcher = []
@@ -373,8 +373,8 @@ class LogPublisherTestCaseMixin:
 
 
 
-class LogPublisherTestCase(LogPublisherTestCaseMixin,
-                           unittest.SynchronousTestCase):
+class LogPublisherTests(LogPublisherTestCaseMixin,
+                        unittest.SynchronousTestCase):
     def testSingleString(self):
         self.lp.msg("Hello, world.")
         self.assertEqual(len(self.out), 1)
@@ -407,8 +407,8 @@ class LogPublisherTestCase(LogPublisherTestCaseMixin,
 
 
 
-class FileObserverTestCase(LogPublisherTestCaseMixin,
-                           unittest.SynchronousTestCase):
+class FileObserverTests(LogPublisherTestCaseMixin,
+                        unittest.SynchronousTestCase):
     """
     Tests for L{log.FileObserver}.
     """
@@ -790,7 +790,7 @@ class FileObserverTestCase(LogPublisherTestCaseMixin,
 
 
 
-class PythonLoggingObserverTestCase(unittest.SynchronousTestCase):
+class PythonLoggingObserverTests(unittest.SynchronousTestCase):
     """
     Test the bridge with python logging module.
     """
@@ -870,7 +870,7 @@ class PythonLoggingObserverTestCase(unittest.SynchronousTestCase):
 
 
 
-class PythonLoggingIntegrationTestCase(unittest.SynchronousTestCase):
+class PythonLoggingIntegrationTests(unittest.SynchronousTestCase):
     """
     Test integration of python logging bridge.
     """
@@ -917,7 +917,7 @@ class PythonLoggingIntegrationTestCase(unittest.SynchronousTestCase):
 
 
 
-class DefaultObserverTestCase(unittest.SynchronousTestCase):
+class DefaultObserverTests(unittest.SynchronousTestCase):
     """
     Test the default observer.
     """
@@ -965,7 +965,7 @@ class DefaultObserverTestCase(unittest.SynchronousTestCase):
 
 
 
-class StdioOnnaStickTestCase(unittest.SynchronousTestCase):
+class StdioOnnaStickTests(unittest.SynchronousTestCase):
     """
     StdioOnnaStick should act like the normal sys.stdout object.
     """
diff --git twisted/test/test_logfile.py twisted/test/test_logfile.py
index b5b9e8f..3d84389 100644
--- twisted/test/test_logfile.py
+++ twisted/test/test_logfile.py
@@ -7,7 +7,7 @@ from twisted.trial import unittest
 from twisted.python import logfile, runtime
 
 
-class LogFileTestCase(unittest.TestCase):
+class LogFileTests(unittest.TestCase):
     """
     Test the rotating log file.
     """
@@ -271,7 +271,7 @@ class RiggedDailyLogFile(logfile.DailyLogFile):
             return time.gmtime(*args)[:3]
         return time.gmtime(self._clock)[:3]
 
-class DailyLogFileTestCase(unittest.TestCase):
+class DailyLogFileTests(unittest.TestCase):
     """
     Test rotating log file.
     """
diff --git twisted/test/test_loopback.py twisted/test/test_loopback.py
index cdd4dab..9e757d3 100644
--- twisted/test/test_loopback.py
+++ twisted/test/test_loopback.py
@@ -86,7 +86,7 @@ class LoopbackTestCaseMixin:
 
 
 
-class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
+class LoopbackAsyncTests(LoopbackTestCaseMixin, unittest.TestCase):
     loopbackFunc = staticmethod(loopback.loopbackAsync)
 
 
@@ -417,11 +417,11 @@ class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
 
 
 
-class LoopbackTCPTestCase(LoopbackTestCaseMixin, unittest.TestCase):
+class LoopbackTCPTests(LoopbackTestCaseMixin, unittest.TestCase):
     loopbackFunc = staticmethod(loopback.loopbackTCP)
 
 
-class LoopbackUNIXTestCase(LoopbackTestCaseMixin, unittest.TestCase):
+class LoopbackUNIXTests(LoopbackTestCaseMixin, unittest.TestCase):
     loopbackFunc = staticmethod(loopback.loopbackUNIX)
 
     if interfaces.IReactorUNIX(reactor, None) is None:
diff --git twisted/test/test_manhole.py twisted/test/test_manhole.py
index 0d8f316..9a9832e 100644
--- twisted/test/test_manhole.py
+++ twisted/test/test_manhole.py
@@ -40,7 +40,7 @@ class DummyManholeClient(LocalAsRemote):
     sync_setZero = setZero
     sync_getMessages = getMessages
 
-class ManholeTest(unittest.TestCase):
+class ManholeTests(unittest.TestCase):
     """Various tests for the manhole service.
 
     Both the importIdentity and importMain tests are known to fail
diff --git twisted/test/test_memcache.py twisted/test/test_memcache.py
index f961a04..732feba 100644
--- twisted/test/test_memcache.py
+++ twisted/test/test_memcache.py
@@ -230,7 +230,7 @@ class CommandMixin:
 
 
 
-class MemCacheTestCase(CommandMixin, TestCase):
+class MemCacheTests(CommandMixin, TestCase):
     """
     Test client protocol class L{MemCacheProtocol}.
     """
diff --git twisted/test/test_modules.py twisted/test/test_modules.py
index 78d2f94..ddca25d 100644
--- twisted/test/test_modules.py
+++ twisted/test/test_modules.py
@@ -321,7 +321,7 @@ class BasicTests(TwistedModulesTestCase):
 
 
 
-class PathModificationTest(TwistedModulesTestCase):
+class PathModificationTests(TwistedModulesTestCase):
     """
     These tests share setup/cleanup behavior of creating a dummy package and
     stuffing some code in it.
@@ -412,7 +412,7 @@ class PathModificationTest(TwistedModulesTestCase):
 
 
 
-class RebindingTest(PathModificationTest):
+class RebindingTests(PathModificationTests):
     """
     These tests verify that the default path interrogation API works properly
     even when sys.path has been rebound to a different object.
@@ -434,16 +434,16 @@ class RebindingTest(PathModificationTest):
 
 
 
-class ZipPathModificationTest(PathModificationTest):
+class ZipPathModificationTests(PathModificationTests):
     def _setupSysPath(self):
         assert not self.pathSetUp
         zipit(self.pathExtensionName, self.pathExtensionName+'.zip')
         self.pathExtensionName += '.zip'
         assert zipfile.is_zipfile(self.pathExtensionName)
-        PathModificationTest._setupSysPath(self)
+        PathModificationTests._setupSysPath(self)
 
 
-class PythonPathTestCase(TestCase):
+class PythonPathTests(TestCase):
     """
     Tests for the class which provides the implementation for all of the
     public API of L{twisted.python.modules}, L{PythonPath}.
@@ -511,12 +511,12 @@ class PythonPathTestCase(TestCase):
         self.assertNotIn('bogusModule', thePath)
 
 
-__all__ = ["BasicTests", "PathModificationTest", "RebindingTest",
-           "ZipPathModificationTest", "PythonPathTestCase"]
+__all__ = ["BasicTests", "PathModificationTests", "RebindingTests",
+           "ZipPathModificationTests", "PythonPathTests"]
 
 if _PY3:
-    __all3__ = ["BasicTests", "PathModificationTest", "RebindingTest",
-                "PythonPathTestCase"]
+    __all3__ = ["BasicTests", "PathModificationTests", "RebindingTests",
+                "PythonPathTests"]
     for name in __all__[:]:
         if name not in __all3__:
             __all__.remove(name)
diff --git twisted/test/test_monkey.py twisted/test/test_monkey.py
index d289df4..245dbe5 100644
--- twisted/test/test_monkey.py
+++ twisted/test/test_monkey.py
@@ -19,7 +19,7 @@ class TestObj:
 
 
 
-class MonkeyPatcherTest(unittest.SynchronousTestCase):
+class MonkeyPatcherTests(unittest.SynchronousTestCase):
     """
     Tests for L{MonkeyPatcher} monkey-patching class.
     """
diff --git twisted/test/test_newcred.py twisted/test/test_newcred.py
index bf9f325..5f093c2 100644
--- twisted/test/test_newcred.py
+++ twisted/test/test_newcred.py
@@ -77,7 +77,7 @@ class TestRealm:
         return (interfaces[0], interfaces[0](avatar),
                 avatar.logout)
 
-class NewCredTest(unittest.TestCase):
+class NewCredTests(unittest.TestCase):
     def setUp(self):
         r = self.realm = TestRealm()
         p = self.portal = portal.Portal(r)
@@ -151,7 +151,7 @@ class NewCredTest(unittest.TestCase):
         self.assertEqual(error.UnauthorizedLogin, l[0])
 
 
-class CramMD5CredentialsTestCase(unittest.TestCase):
+class CramMD5CredentialsTests(unittest.TestCase):
     def testIdempotentChallenge(self):
         c = credentials.CramMD5Credentials()
         chal = c.getChallenge()
@@ -167,7 +167,7 @@ class CramMD5CredentialsTestCase(unittest.TestCase):
         c = credentials.CramMD5Credentials()
         self.failIf(c.checkPassword('secret'))
 
-class OnDiskDatabaseTestCase(unittest.TestCase):
+class OnDiskDatabaseTests(unittest.TestCase):
     users = [
         ('user1', 'pass1'),
         ('user2', 'pass2'),
@@ -226,7 +226,7 @@ class OnDiskDatabaseTestCase(unittest.TestCase):
 
 
 
-class HashedPasswordOnDiskDatabaseTestCase(unittest.TestCase):
+class HashedPasswordOnDiskDatabaseTests(unittest.TestCase):
     users = [
         ('user1', 'pass1'),
         ('user2', 'pass2'),
@@ -287,7 +287,7 @@ class HashedPasswordOnDiskDatabaseTestCase(unittest.TestCase):
     if crypt is None:
         skip = "crypt module not available"
 
-class PluggableAuthenticationModulesTest(unittest.TestCase):
+class PluggableAuthenticationModulesTests(unittest.TestCase):
 
     def setUp(self):
         """
@@ -446,12 +446,12 @@ class NetworkHashedFilePasswordDBMixin(HashlessFilePasswordDBMixin):
         def checkPassword(self, password):
             return self.hashed.decode('hex') == password
 
-class HashlessFilePasswordDBCheckerTestCase(HashlessFilePasswordDBMixin, CheckersMixin, unittest.TestCase):
+class HashlessFilePasswordDBCheckerTests(HashlessFilePasswordDBMixin, CheckersMixin, unittest.TestCase):
     pass
 
-class LocallyHashedFilePasswordDBCheckerTestCase(LocallyHashedFilePasswordDBMixin, CheckersMixin, unittest.TestCase):
+class LocallyHashedFilePasswordDBCheckerTests(LocallyHashedFilePasswordDBMixin, CheckersMixin, unittest.TestCase):
     pass
 
-class NetworkHashedFilePasswordDBCheckerTestCase(NetworkHashedFilePasswordDBMixin, CheckersMixin, unittest.TestCase):
+class NetworkHashedFilePasswordDBCheckerTests(NetworkHashedFilePasswordDBMixin, CheckersMixin, unittest.TestCase):
     pass
 
diff --git twisted/test/test_nmea.py twisted/test/test_nmea.py
index 69e1f8a..35bb18d 100644
--- twisted/test/test_nmea.py
+++ twisted/test/test_nmea.py
@@ -43,7 +43,7 @@ class NMEATester(nmea.NMEAReceiver):
         for fn in reflect.prefixedMethodNames(self.__class__, 'decode_'):
             setattr(self, 'handle_' + fn, self.resultHarvester)
         
-class NMEAReceiverTestCase(unittest.TestCase):
+class NMEAReceiverTests(unittest.TestCase):
     messages = (
         # fix - signal acquired
         "$GPGGA,231713.0,3910.413,N,07641.994,W,1,05,1.35,00044,M,-033,M,,*69",
@@ -112,4 +112,4 @@ class NMEAReceiverTestCase(unittest.TestCase):
             else:
               self.assertEqual(expectedResult, actualResult, "\nInput:\n%s\nExpected: %r\nResults: %r\n" % (message, expectedResult, actualResult))
 
-testCases = [NMEAReceiverTestCase]
+testCases = [NMEAReceiverTests]
diff --git twisted/test/test_paths.py twisted/test/test_paths.py
index ddd17a4..2ff7046 100644
--- twisted/test/test_paths.py
+++ twisted/test/test_paths.py
@@ -33,7 +33,7 @@ class BytesTestCase(TestCase):
 
 
 
-class AbstractFilePathTestCase(BytesTestCase):
+class AbstractFilePathTests(BytesTestCase):
     """
     Tests for L{IFilePath} implementations.
     """
@@ -432,7 +432,7 @@ class ExplodingFilePath(filepath.FilePath):
 
 
 
-class PermissionsTestCase(BytesTestCase):
+class PermissionsTests(BytesTestCase):
     """
     Test Permissions and RWX classes
     """
@@ -579,7 +579,7 @@ class PermissionsTestCase(BytesTestCase):
 
 
 
-class FilePathTestCase(AbstractFilePathTestCase):
+class FilePathTests(AbstractFilePathTests):
     """
     Test various L{FilePath} path manipulations.
 
diff --git twisted/test/test_pb.py twisted/test/test_pb.py
index 4616708..9224d27 100644
--- twisted/test/test_pb.py
+++ twisted/test/test_pb.py
@@ -369,7 +369,7 @@ class CachedReturner(pb.Root):
         return self.cache
 
 
-class NewStyleTestCase(unittest.TestCase):
+class NewStyleTests(unittest.TestCase):
     def setUp(self):
         """
         Create a pb server using L{Echoer} protocol and connect a client to it.
@@ -466,7 +466,7 @@ class ConnectionNotifyServerFactory(pb.PBServerFactory):
 
 
 
-class NewStyleCachedTestCase(unittest.TestCase):
+class NewStyleCachedTests(unittest.TestCase):
     def setUp(self):
         """
         Create a pb server using L{CachedReturner} protocol and connect a
@@ -520,7 +520,7 @@ class NewStyleCachedTestCase(unittest.TestCase):
 
 
 
-class BrokerTestCase(unittest.TestCase):
+class BrokerTests(unittest.TestCase):
     thunkResult = None
 
     def tearDown(self):
@@ -832,7 +832,7 @@ class FilePagerizer(pb.Referenceable):
 
 
 
-class PagingTestCase(unittest.TestCase):
+class PagingTests(unittest.TestCase):
     """
     Test pb objects sending data by pages.
     """
@@ -966,7 +966,7 @@ class GetPublisher(pb.Referenceable):
 
 pb.setUnjellyableForClass(DumbPublishable, DumbPub)
 
-class DisconnectionTestCase(unittest.TestCase):
+class DisconnectionTests(unittest.TestCase):
     """
     Test disconnection callbacks.
     """
@@ -1213,7 +1213,7 @@ class NewCredLeakTests(unittest.TestCase):
 
 
 
-class NewCredTestCase(unittest.TestCase):
+class NewCredTests(unittest.TestCase):
     """
     Tests related to the L{twisted.cred} support in PB.
     """
@@ -1648,7 +1648,7 @@ class NonSubclassingPerspective:
 
 
 
-class NSPTestCase(unittest.TestCase):
+class NSPTests(unittest.TestCase):
     """
     Tests for authentication against a realm where the L{IPerspective}
     implementation is not a subclass of L{Avatar}.
@@ -1736,7 +1736,7 @@ class Forwarded:
         return succeed(True)
 
 
-class SpreadUtilTestCase(unittest.TestCase):
+class SpreadUtilTests(unittest.TestCase):
     """
     Tests for L{twisted.spread.util}.
     """
@@ -1799,7 +1799,7 @@ class SpreadUtilTestCase(unittest.TestCase):
 
 
 
-class PBWithSecurityOptionsTest(unittest.TestCase):
+class PBWithSecurityOptionsTests(unittest.TestCase):
     """
     Test security customization.
     """
diff --git twisted/test/test_pbfailure.py twisted/test/test_pbfailure.py
index 6beaf1b..4463c69 100644
--- twisted/test/test_pbfailure.py
+++ twisted/test/test_pbfailure.py
@@ -166,7 +166,7 @@ class PBConnTestCase(unittest.TestCase):
 
 
 
-class PBFailureTest(PBConnTestCase):
+class PBFailureTests(PBConnTestCase):
     compare = unittest.TestCase.assertEqual
 
 
@@ -394,7 +394,7 @@ class PBFailureTest(PBConnTestCase):
 
 
 
-class PBFailureTestUnsafe(PBFailureTest):
+class PBFailureUnsafeTests(PBFailureTests):
     compare = unittest.TestCase.failIfEquals
     unsafeTracebacks = 1
 
diff --git twisted/test/test_pcp.py twisted/test/test_pcp.py
index 06229c0..79e4591 100644
--- twisted/test/test_pcp.py
+++ twisted/test/test_pcp.py
@@ -76,7 +76,7 @@ class DummyConsumer(DummyTransport):
     def finish(self):
         self.finished = True
 
-class TransportInterfaceTest(unittest.TestCase):
+class TransportInterfaceTests(unittest.TestCase):
     proxyClass = pcp.BasicProducerConsumerProxy
 
     def setUp(self):
@@ -179,19 +179,19 @@ class ProducerInterfaceTest:
                     "Stopped producer should not have sent data.")
 
 
-class PCP_ConsumerInterfaceTest(ConsumerInterfaceTest, unittest.TestCase):
+class PCP_ConsumerInterfaceTests(ConsumerInterfaceTest, unittest.TestCase):
     proxyClass = pcp.BasicProducerConsumerProxy
 
-class PCPII_ConsumerInterfaceTest(ConsumerInterfaceTest, unittest.TestCase):
+class PCPII_ConsumerInterfaceTests(ConsumerInterfaceTest, unittest.TestCase):
     proxyClass = pcp.ProducerConsumerProxy
 
-class PCP_ProducerInterfaceTest(ProducerInterfaceTest, unittest.TestCase):
+class PCP_ProducerInterfaceTests(ProducerInterfaceTest, unittest.TestCase):
     proxyClass = pcp.BasicProducerConsumerProxy
 
-class PCPII_ProducerInterfaceTest(ProducerInterfaceTest, unittest.TestCase):
+class PCPII_ProducerInterfaceTests(ProducerInterfaceTest, unittest.TestCase):
     proxyClass = pcp.ProducerConsumerProxy
 
-class ProducerProxyTest(unittest.TestCase):
+class ProducerProxyTests(unittest.TestCase):
     """Producer methods on me should be relayed to the Producer I proxy.
     """
     proxyClass = pcp.BasicProducerConsumerProxy
@@ -206,7 +206,7 @@ class ProducerProxyTest(unittest.TestCase):
         self.failUnless(self.parentProducer.stopped)
 
 
-class ConsumerProxyTest(unittest.TestCase):
+class ConsumerProxyTests(unittest.TestCase):
     """Consumer methods on me should be relayed to the Consumer I proxy.
     """
     proxyClass = pcp.BasicProducerConsumerProxy
@@ -264,17 +264,17 @@ class PullProducerTest:
         # This data should answer that pull request.
         self.assertEqual(self.underlying.getvalue(), "data")
 
-class PCP_PullProducerTest(PullProducerTest, unittest.TestCase):
+class PCP_PullProducerTests(PullProducerTest, unittest.TestCase):
     class proxyClass(pcp.BasicProducerConsumerProxy):
         iAmStreaming = False
 
-class PCPII_PullProducerTest(PullProducerTest, unittest.TestCase):
+class PCPII_PullProducerTests(PullProducerTest, unittest.TestCase):
     class proxyClass(pcp.ProducerConsumerProxy):
         iAmStreaming = False
 
 # Buffering!
 
-class BufferedConsumerTest(unittest.TestCase):
+class BufferedConsumerTests(unittest.TestCase):
     """As a consumer, ask the producer to pause after too much data."""
 
     proxyClass = pcp.ProducerConsumerProxy
diff --git twisted/test/test_persisted.py twisted/test/test_persisted.py
index af549b0..3481f3a 100644
--- twisted/test/test_persisted.py
+++ twisted/test/test_persisted.py
@@ -22,7 +22,7 @@ except ImportError:
 from twisted.persisted import styles, aot, crefutil
 
 
-class VersionTestCase(unittest.TestCase):
+class VersionTests(unittest.TestCase):
     def test_nullVersionUpgrade(self):
         global NullVersioned
         class NullVersioned:
@@ -181,7 +181,7 @@ class MyEphemeral(styles.Ephemeral):
         self.x = x
 
 
-class EphemeralTestCase(unittest.TestCase):
+class EphemeralTests(unittest.TestCase):
 
     def test_ephemeral(self):
         o = MyEphemeral(3)
@@ -220,7 +220,7 @@ class B:
 def funktion():
     pass
 
-class PicklingTestCase(unittest.TestCase):
+class PicklingTests(unittest.TestCase):
     """Test pickling of extra object types."""
     
     def test_module(self):
@@ -261,7 +261,7 @@ class NonDictState:
     def __setstate__(self, state):
         self.state = state
 
-class AOTTestCase(unittest.TestCase):
+class AOTTests(unittest.TestCase):
     def test_simpleTypes(self):
         obj = (1, 2.0, 3j, True, slice(1, 2, 3), 'hello', u'world', sys.maxint + 1, None, Ellipsis)
         rtObj = aot.unjellyFromSource(aot.jellyToSource(obj))
@@ -350,7 +350,7 @@ class AOTTestCase(unittest.TestCase):
         assert oj.c is not oj.c.c
 
 
-class CrefUtilTestCase(unittest.TestCase):
+class CrefUtilTests(unittest.TestCase):
     """
     Tests for L{crefutil}.
     """
@@ -373,5 +373,5 @@ class CrefUtilTestCase(unittest.TestCase):
 
 
 
-testCases = [VersionTestCase, EphemeralTestCase, PicklingTestCase]
+testCases = [VersionTests, EphemeralTests, PicklingTests]
 
diff --git twisted/test/test_plugin.py twisted/test/test_plugin.py
index c33ecf1..aac4940 100644
--- twisted/test/test_plugin.py
+++ twisted/test/test_plugin.py
@@ -36,7 +36,7 @@ class ITestPlugin2(Interface):
 
 
 
-class PluginTestCase(unittest.TestCase):
+class PluginTests(unittest.TestCase):
     """
     Tests which verify the behavior of the current, active Twisted plugins
     directory.
diff --git twisted/test/test_policies.py twisted/test/test_policies.py
index 55831ec..47bc406 100644
--- twisted/test/test_policies.py
+++ twisted/test/test_policies.py
@@ -121,7 +121,7 @@ class TestableTimeoutFactory(policies.TimeoutFactory):
 
 
 
-class WrapperTestCase(unittest.TestCase):
+class WrapperTests(unittest.TestCase):
     """
     Tests for L{WrappingFactory} and L{ProtocolWrapper}.
     """
@@ -345,7 +345,7 @@ class WrappingFactory(policies.WrappingFactory):
 
 
 
-class ThrottlingTestCase(unittest.TestCase):
+class ThrottlingTests(unittest.TestCase):
     """
     Tests for L{policies.ThrottlingFactory}.
     """
@@ -498,7 +498,7 @@ class ThrottlingTestCase(unittest.TestCase):
 
 
 
-class TimeoutTestCase(unittest.TestCase):
+class TimeoutFactoryTests(unittest.TestCase):
     """
     Tests for L{policies.TimeoutFactory}.
     """
@@ -639,7 +639,7 @@ class TimeoutTester(protocol.Protocol, policies.TimeoutMixin):
 
 
 
-class TestTimeout(unittest.TestCase):
+class TimeoutMixinTests(unittest.TestCase):
     """
     Tests for L{policies.TimeoutMixin}.
     """
@@ -737,7 +737,7 @@ class TestTimeout(unittest.TestCase):
 
 
 
-class LimitTotalConnectionsFactoryTestCase(unittest.TestCase):
+class LimitTotalConnectionsFactoryTests(unittest.TestCase):
     """Tests for policies.LimitTotalConnectionsFactory"""
     def testConnectionCounting(self):
         # Make a basic factory
@@ -813,7 +813,7 @@ class TestLoggingFactory(policies.TrafficLoggingFactory):
 
 
 
-class LoggingFactoryTestCase(unittest.TestCase):
+class LoggingFactoryTests(unittest.TestCase):
     """
     Tests for L{policies.TrafficLoggingFactory}.
     """
diff --git twisted/test/test_postfix.py twisted/test/test_postfix.py
index 0f80a46..d121e44 100644
--- twisted/test/test_postfix.py
+++ twisted/test/test_postfix.py
@@ -10,7 +10,7 @@ from twisted.protocols import postfix
 from twisted.test.proto_helpers import StringTransport
 
 
-class PostfixTCPMapQuoteTestCase(unittest.TestCase):
+class PostfixTCPMapQuoteTests(unittest.TestCase):
     data = [
         # (raw, quoted, [aliasQuotedForms]),
         ('foo', 'foo'),
@@ -89,7 +89,7 @@ class PostfixTCPMapServerTestCase:
 
 
 
-class Valid(PostfixTCPMapServerTestCase, unittest.TestCase):
+class ValidTests(PostfixTCPMapServerTestCase, unittest.TestCase):
     data = {
         'foo': 'ThisIs Foo',
         'bar': ' bar really is found\r\n',
diff --git twisted/test/test_process.py twisted/test/test_process.py
index 07faa90..59d786e 100644
--- twisted/test/test_process.py
+++ twisted/test/test_process.py
@@ -485,7 +485,7 @@ class GetEnvironmentDictionary(UtilityProcessProtocol):
 
 
 
-class ProcessTestCase(unittest.TestCase):
+class ProcessTests(unittest.TestCase):
     """Test running a process."""
 
     usePTY = False
@@ -812,10 +812,10 @@ class TestTwoProcessesBase:
         reactor.callLater(2, self.close, 1)
         return self._onClose()
 
-class TestTwoProcessesNonPosix(TestTwoProcessesBase, unittest.TestCase):
+class TwoProcessesNonPosixTests(TestTwoProcessesBase, unittest.TestCase):
     pass
 
-class TestTwoProcessesPosix(TestTwoProcessesBase, unittest.TestCase):
+class TwoProcessesPosixTests(TestTwoProcessesBase, unittest.TestCase):
     def tearDown(self):
         for pp, pr in zip(self.pp, self.processes):
             if not pp.finished:
@@ -937,7 +937,7 @@ class FDChecker(protocol.ProcessProtocol):
         self.deferred.callback(None)
 
 
-class FDTest(unittest.TestCase):
+class FDTests(unittest.TestCase):
 
     def testFD(self):
         exe = sys.executable
@@ -1661,7 +1661,7 @@ if process is not None:
 
 
 
-class MockProcessTestCase(unittest.TestCase):
+class MockProcessTests(unittest.TestCase):
     """
     Mock a process runner to test forked child code path.
     """
@@ -2105,7 +2105,7 @@ class MockProcessTestCase(unittest.TestCase):
 
 
 
-class PosixProcessTestCase(unittest.TestCase, PosixProcessBase):
+class PosixProcessTests(unittest.TestCase, PosixProcessBase):
     # add two non-pty test cases
 
     def test_stderr(self):
@@ -2150,9 +2150,9 @@ class PosixProcessTestCase(unittest.TestCase, PosixProcessBase):
 
 
 
-class PosixProcessTestCasePTY(unittest.TestCase, PosixProcessBase):
+class PosixProcessPTYTests(unittest.TestCase, PosixProcessBase):
     """
-    Just like PosixProcessTestCase, but use ptys instead of pipes.
+    Just like PosixProcessTests, but use ptys instead of pipes.
     """
     usePTY = True
     # PTYs only offer one input and one output. What still makes sense?
@@ -2213,7 +2213,7 @@ class Win32SignalProtocol(SignalProtocol):
 
 
 
-class Win32ProcessTestCase(unittest.TestCase):
+class Win32ProcessTests(unittest.TestCase):
     """
     Test process programs that are packaged with twisted.
     """
@@ -2335,7 +2335,7 @@ class Win32ProcessTestCase(unittest.TestCase):
 
 
 
-class Win32UnicodeEnvironmentTest(unittest.TestCase):
+class Win32UnicodeEnvironmentTests(unittest.TestCase):
     """
     Tests for Unicode environment on Windows
     """
@@ -2361,7 +2361,7 @@ class Win32UnicodeEnvironmentTest(unittest.TestCase):
 
 
 
-class Dumbwin32procPidTest(unittest.TestCase):
+class Dumbwin32procPidTests(unittest.TestCase):
     """
     Simple test for the pid attribute of Process on win32.
     """
@@ -2397,7 +2397,7 @@ class Dumbwin32procPidTest(unittest.TestCase):
 
 
 
-class UtilTestCase(unittest.TestCase):
+class UtilTests(unittest.TestCase):
     """
     Tests for process-related helper functions (currently only
     L{procutils.which}.
@@ -2508,7 +2508,7 @@ class ClosingPipesProcessProtocol(protocol.ProcessProtocol):
 
 
 
-class ClosingPipes(unittest.TestCase):
+class ClosingPipesTests(unittest.TestCase):
 
     def doit(self, fd):
         """
@@ -2591,17 +2591,17 @@ class ClosingPipes(unittest.TestCase):
 
 skipMessage = "wrong platform or reactor doesn't support IReactorProcess"
 if (runtime.platform.getType() != 'posix') or (not interfaces.IReactorProcess(reactor, None)):
-    PosixProcessTestCase.skip = skipMessage
-    PosixProcessTestCasePTY.skip = skipMessage
-    TestTwoProcessesPosix.skip = skipMessage
-    FDTest.skip = skipMessage
+    PosixProcessTests.skip = skipMessage
+    PosixProcessPTYTests.skip = skipMessage
+    TwoProcessesPosixTests.skip = skipMessage
+    FDTests.skip = skipMessage
 
 if (runtime.platform.getType() != 'win32') or (not interfaces.IReactorProcess(reactor, None)):
-    Win32ProcessTestCase.skip = skipMessage
-    TestTwoProcessesNonPosix.skip = skipMessage
-    Dumbwin32procPidTest.skip = skipMessage
-    Win32UnicodeEnvironmentTest.skip = skipMessage
+    Win32ProcessTests.skip = skipMessage
+    TwoProcessesNonPosixTests.skip = skipMessage
+    Dumbwin32procPidTests.skip = skipMessage
+    Win32UnicodeEnvironmentTests.skip = skipMessage
 
 if not interfaces.IReactorProcess(reactor, None):
-    ProcessTestCase.skip = skipMessage
-    ClosingPipes.skip = skipMessage
+    ProcessTests.skip = skipMessage
+    ClosingPipesTests.skip = skipMessage
diff --git twisted/test/test_protocols.py twisted/test/test_protocols.py
index e2915d9..4e10b48 100644
--- twisted/test/test_protocols.py
+++ twisted/test/test_protocols.py
@@ -11,7 +11,7 @@ from twisted.internet import reactor, defer, address, protocol
 from twisted.test import proto_helpers
 
 
-class WireTestCase(unittest.TestCase):
+class WireTests(unittest.TestCase):
     """
     Test wire protocols.
     """
@@ -112,7 +112,7 @@ class TestableProxyFactory(portforward.ProxyFactory):
 
 
 
-class Portforwarding(unittest.TestCase):
+class PortforwardingTests(unittest.TestCase):
     """
     Test port forwarding.
     """
@@ -223,7 +223,7 @@ class Portforwarding(unittest.TestCase):
 
 
 
-class StringTransportTestCase(unittest.TestCase):
+class StringTransportTests(unittest.TestCase):
     """
     Test L{proto_helpers.StringTransport} helper behaviour.
     """
diff --git twisted/test/test_randbytes.py twisted/test/test_randbytes.py
index 6615f80..5e20da5 100644
--- twisted/test/test_randbytes.py
+++ twisted/test/test_randbytes.py
@@ -35,7 +35,7 @@ class SecureRandomTestCaseBase(object):
 
 
 
-class SecureRandomTestCase(SecureRandomTestCaseBase, unittest.TestCase):
+class SecureRandomTests(SecureRandomTestCaseBase, unittest.TestCase):
     """
     Test secureRandom under normal conditions.
     """
@@ -49,8 +49,8 @@ class SecureRandomTestCase(SecureRandomTestCaseBase, unittest.TestCase):
 
 
 
-class ConditionalSecureRandomTestCase(SecureRandomTestCaseBase,
-                                      unittest.SynchronousTestCase):
+class ConditionalSecureRandomTests(SecureRandomTestCaseBase,
+                                   unittest.SynchronousTestCase):
     """
     Test random sources one by one, then remove it to.
     """
@@ -97,7 +97,7 @@ class ConditionalSecureRandomTestCase(SecureRandomTestCaseBase,
 
 
 
-class RandomTestCaseBase(SecureRandomTestCaseBase, unittest.SynchronousTestCase):
+class RandomBaseTests(SecureRandomTestCaseBase, unittest.SynchronousTestCase):
     """
     'Normal' random test cases.
     """
diff --git twisted/test/test_rebuild.py twisted/test/test_rebuild.py
index aac8b81..7a6158f 100644
--- twisted/test/test_rebuild.py
+++ twisted/test/test_rebuild.py
@@ -36,7 +36,7 @@ unhashableObject = None # set in test_hashException
 
 
 
-class RebuildTestCase(unittest.TestCase):
+class RebuildTests(unittest.TestCase):
     """
     Simple testcase for rebuilding, to at least exercise the code.
     """
@@ -162,7 +162,7 @@ class RebuildTestCase(unittest.TestCase):
 
 
 
-class NewStyleTestCase(unittest.TestCase):
+class NewStyleTests(unittest.TestCase):
     """
     Tests for rebuilding new-style classes of various sorts.
     """
diff --git twisted/test/test_reflect.py twisted/test/test_reflect.py
index 328c4c6..2745629 100644
--- twisted/test/test_reflect.py
+++ twisted/test/test_reflect.py
@@ -177,7 +177,7 @@ class AddMethodNamesToDictTests(TestCase):
 
 class Summer(object):
     """
-    A class we look up as part of the LookupsTestCase.
+    A class we look up as part of the LookupsTests.
     """
 
     def reallySet(self):
@@ -187,7 +187,7 @@ class Summer(object):
 
 
 
-class LookupsTestCase(TestCase):
+class LookupsTests(TestCase):
     """
     Tests for L{namedClass}, L{namedModule}, and L{namedAny}.
     """
@@ -424,7 +424,7 @@ class NoClassAttr(Breakable):
 
 
 
-class SafeRepr(TestCase):
+class SafeReprTests(TestCase):
     """
     Tests for L{reflect.safe_repr} function.
     """
@@ -521,7 +521,7 @@ class SafeRepr(TestCase):
 
 
 
-class SafeStr(TestCase):
+class SafeStrTests(TestCase):
     """
     Tests for L{reflect.safe_str} function.
     """
@@ -632,7 +632,7 @@ class SafeStr(TestCase):
 
 
 
-class FilenameToModule(TestCase):
+class FilenameToModuleTests(TestCase):
     """
     Test L{filenameToModuleName} detection.
     """
@@ -750,7 +750,7 @@ class FullyQualifiedNameTests(TestCase):
             "%s.%s.test_unboundMethod" % (__name__, self.__class__.__name__))
 
 
-class ObjectGrep(unittest.TestCase):
+class ObjectGrepTests(unittest.TestCase):
     if _PY3:
         # This is to be removed when fixing #6986
         skip = "twisted.python.reflect.objgrep hasn't been ported to Python 3"
@@ -872,7 +872,7 @@ class ObjectGrep(unittest.TestCase):
         self.assertIn("[1]", reflect.objgrep(D, o, reflect.isSame))
 
 
-class GetClass(unittest.TestCase):
+class GetClassTests(unittest.TestCase):
     if _PY3:
         oldClassNames = ['type']
     else:
@@ -899,7 +899,7 @@ if not _PY3:
     # (hence the condition above) and will be removed as soon as no project used
     # by Twisted will depend on these functions. Also, have a look at the
     # comments related to those functions in twisted.python.reflect.
-    class DeprecationTestCase(unittest.TestCase):
+    class DeprecationTests(unittest.TestCase):
         """
         Test deprecations in twisted.python.reflect
         """
@@ -910,7 +910,7 @@ if not _PY3:
             """
             self.callDeprecated(
                 (Version("Twisted", 11, 0, 0), "inspect.getmro"),
-                reflect.allYourBase, DeprecationTestCase)
+                reflect.allYourBase, DeprecationTests)
 
 
         def test_accumulateBases(self):
@@ -920,7 +920,7 @@ if not _PY3:
             l = []
             self.callDeprecated(
                 (Version("Twisted", 11, 0, 0), "inspect.getmro"),
-                reflect.accumulateBases, DeprecationTestCase, l, None)
+                reflect.accumulateBases, DeprecationTests, l, None)
 
 
         def test_getcurrent(self):
diff --git twisted/test/test_roots.py twisted/test/test_roots.py
index c9fd39e..a73d86a 100644
--- twisted/test/test_roots.py
+++ twisted/test/test_roots.py
@@ -5,7 +5,7 @@ from twisted.trial import unittest
 from twisted.python import roots
 import types
 
-class RootsTest(unittest.TestCase):
+class RootsTests(unittest.TestCase):
 
     def testExceptions(self):
         request = roots.Request()
diff --git twisted/test/test_shortcut.py twisted/test/test_shortcut.py
index dafd081..7ded805 100644
--- twisted/test/test_shortcut.py
+++ twisted/test/test_shortcut.py
@@ -14,7 +14,7 @@ if os.name == 'nt':
                                 "available in the absence of win32com.")
     import os.path
 
-    class ShortcutTest(unittest.TestCase):
+    class ShortcutTests(unittest.TestCase):
         def testCreate(self):
             s1=shortcut.Shortcut("test_shortcut.py")
             tempname=self.mktemp() + '.lnk'
@@ -22,4 +22,4 @@ if os.name == 'nt':
             self.assert_(os.path.exists(tempname))
             sc=shortcut.open(tempname)
             self.assert_(sc.GetPath(0)[0].endswith('test_shortcut.py'))
-    ShortcutTest.skip = skipWindowsNopywin32
+    ShortcutTests.skip = skipWindowsNopywin32
diff --git twisted/test/test_sip.py twisted/test/test_sip.py
index 73894cc..b2c895c 100644
--- twisted/test/test_sip.py
+++ twisted/test/test_sip.py
@@ -106,7 +106,7 @@ class TestRealm:
     def requestAvatar(self, avatarId, mind, *interfaces):
         return sip.IContact, None, lambda: None
 
-class MessageParsingTestCase(unittest.TestCase):
+class MessageParsingTests(unittest.TestCase):
     def setUp(self):
         self.l = []
         self.parser = sip.MessagesParser(self.l.append)
@@ -218,7 +218,7 @@ class MessageParsingTestCase(unittest.TestCase):
 
 
 
-class MessageParsingTestCase2(MessageParsingTestCase):
+class MessageParsingFeedDataCharByCharTests(MessageParsingTests):
     """Same as base class, but feed data char by char."""
 
     def feedMessage(self, message):
@@ -227,7 +227,7 @@ class MessageParsingTestCase2(MessageParsingTestCase):
         self.parser.dataDone()
 
 
-class MakeMessageTestCase(unittest.TestCase):
+class MakeMessageTests(unittest.TestCase):
 
     def testRequest(self):
         r = sip.Request("INVITE", "sip:foo")
@@ -250,7 +250,7 @@ class MakeMessageTestCase(unittest.TestCase):
         self.assertEqual(r.toString(), "SIP/2.0 200 OK\r\n\r\n")
 
 
-class ViaTestCase(unittest.TestCase):
+class ViaTests(unittest.TestCase):
 
     def checkRoundtrip(self, v):
         s = v.toString()
@@ -377,7 +377,7 @@ class ViaTestCase(unittest.TestCase):
 
 
 
-class URLTestCase(unittest.TestCase):
+class URLTests(unittest.TestCase):
 
     def testRoundtrip(self):
         for url in [
@@ -401,7 +401,7 @@ class URLTestCase(unittest.TestCase):
             self.assertEqual(getattr(url, k), v)
 
 
-class ParseTestCase(unittest.TestCase):
+class ParseTests(unittest.TestCase):
 
     def testParseAddress(self):
         for address, name, urls, params in [
@@ -430,7 +430,7 @@ class FailingLocator:
         return defer.fail(LookupError())
 
 
-class ProxyTestCase(unittest.TestCase):
+class ProxyTests(unittest.TestCase):
 
     def setUp(self):
         self.proxy = sip.Proxy("127.0.0.1")
@@ -536,7 +536,7 @@ class ProxyTestCase(unittest.TestCase):
     #testCantForwardResponse.skip = "not implemented yet"
 
 
-class RegistrationTestCase(unittest.TestCase):
+class RegistrationTests(unittest.TestCase):
 
     def setUp(self):
         self.proxy = sip.RegisterProxy(host="127.0.0.1")
@@ -724,7 +724,7 @@ class Client(sip.Base):
         self.deferred.callback(self.received)
 
 
-class LiveTest(unittest.TestCase):
+class LiveTests(unittest.TestCase):
 
     def setUp(self):
         self.proxy = sip.RegisterProxy(host="127.0.0.1")
@@ -882,7 +882,7 @@ class FakeRegistry(sip.InMemoryRegistry):
             self, domainURL, logicalURL, physicalURL)
         return d.addCallback(self._cbReg)
 
-class AuthorizationTestCase(unittest.TestCase):
+class AuthorizationTests(unittest.TestCase):
     def setUp(self):
         self.proxy = sip.RegisterProxy(host="intarweb.us")
         self.proxy.authorizers = self.proxy.authorizers.copy()
diff --git twisted/test/test_sob.py twisted/test/test_sob.py
index 76c33a8..ac8c9b8 100644
--- twisted/test/test_sob.py
+++ twisted/test/test_sob.py
@@ -27,7 +27,7 @@ objects = [
 class FakeModule(object):
     pass
 
-class PersistTestCase(unittest.TestCase):
+class PersistTests(unittest.TestCase):
     def testStyles(self):
         for o in objects:
             p = sob.Persistent(o, '')
diff --git twisted/test/test_socks.py twisted/test/test_socks.py
index af0fc85..624ac19 100644
--- twisted/test/test_socks.py
+++ twisted/test/test_socks.py
@@ -81,7 +81,7 @@ class SOCKSv4Driver(socks.SOCKSv4):
 
 
 
-class Connect(unittest.TestCase):
+class ConnectTests(unittest.TestCase):
     """
     Tests for SOCKS and SOCKSv4a connect requests using the L{SOCKSv4} protocol.
     """
@@ -251,7 +251,7 @@ class Connect(unittest.TestCase):
 
 
 
-class Bind(unittest.TestCase):
+class BindTests(unittest.TestCase):
     """
     Tests for SOCKS and SOCKSv4a bind requests using the L{SOCKSv4} protocol.
     """
diff --git twisted/test/test_ssl.py twisted/test/test_ssl.py
index 8cc4a56..09c4337 100644
--- twisted/test/test_ssl.py
+++ twisted/test/test_ssl.py
@@ -272,7 +272,7 @@ if SSL is not None:
 
 
 
-class StolenTCPTestCase(ProperlyCloseFilesMixin, unittest.TestCase):
+class StolenTCPTests(ProperlyCloseFilesMixin, unittest.TestCase):
     """
     For SSL transports, test many of the same things which are tested for
     TCP transports.
@@ -335,7 +335,7 @@ class StolenTCPTestCase(ProperlyCloseFilesMixin, unittest.TestCase):
 
 
 
-class TLSTestCase(unittest.TestCase):
+class TLSTests(unittest.TestCase):
     """
     Tests for startTLS support.
 
@@ -440,7 +440,7 @@ class TLSTestCase(unittest.TestCase):
 
 
 
-class SpammyTLSTestCase(TLSTestCase):
+class SpammyTLSTests(TLSTests):
     """
     Test TLS features with bytes sitting in the out buffer.
     """
@@ -448,7 +448,7 @@ class SpammyTLSTestCase(TLSTestCase):
 
 
 
-class BufferingTestCase(unittest.TestCase):
+class BufferingTests(unittest.TestCase):
     serverProto = None
     clientProto = None
 
@@ -483,7 +483,7 @@ class BufferingTestCase(unittest.TestCase):
 
 
 
-class ConnectionLostTestCase(unittest.TestCase, ContextGeneratingMixin):
+class ConnectionLostTests(unittest.TestCase, ContextGeneratingMixin):
     """
     SSL connection closing tests.
     """
@@ -718,8 +718,8 @@ class ClientContextFactoryTests(unittest.TestCase):
 
 
 if interfaces.IReactorSSL(reactor, None) is None:
-    for tCase in [StolenTCPTestCase, TLSTestCase, SpammyTLSTestCase,
-                  BufferingTestCase, ConnectionLostTestCase,
+    for tCase in [StolenTCPTests, TLSTests, SpammyTLSTests,
+                  BufferingTests, ConnectionLostTests,
                   DefaultOpenSSLContextFactoryTests,
                   ClientContextFactoryTests]:
         tCase.skip = "Reactor does not support SSL, cannot run SSL tests"
diff --git twisted/test/test_sslverify.py twisted/test/test_sslverify.py
index ca534dc..89617bd 100644
--- twisted/test/test_sslverify.py
+++ twisted/test/test_sslverify.py
@@ -378,7 +378,7 @@ class FakeContext(object):
 
 
 
-class ClientOptions(unittest.SynchronousTestCase):
+class ClientOptionsTests(unittest.SynchronousTestCase):
     """
     Tests for L{sslverify.optionsForClientTLS}.
     """
@@ -420,7 +420,7 @@ class ClientOptions(unittest.SynchronousTestCase):
 
 
 
-class OpenSSLOptions(unittest.TestCase):
+class OpenSSLOptionsTests(unittest.TestCase):
     if skipSSL:
         skip = skipSSL
 
@@ -1749,7 +1749,7 @@ class _ActualSSLTransport:
 
 
 
-class Constructors(unittest.TestCase):
+class ConstructorsTests(unittest.TestCase):
     if skipSSL:
         skip = skipSSL
 
@@ -1820,7 +1820,7 @@ class Constructors(unittest.TestCase):
 
 
 
-class TestOpenSSLCipher(unittest.TestCase):
+class OpenSSLCipherTests(unittest.TestCase):
     """
     Tests for twisted.internet._sslverify.OpenSSLCipher.
     """
@@ -1874,7 +1874,7 @@ class TestOpenSSLCipher(unittest.TestCase):
 
 
 
-class TestExpandCipherString(unittest.TestCase):
+class ExpandCipherStringTests(unittest.TestCase):
     """
     Tests for twisted.internet._sslverify._expandCipherString.
     """
@@ -1925,7 +1925,7 @@ class TestExpandCipherString(unittest.TestCase):
 
 
 
-class TestAcceptableCiphers(unittest.TestCase):
+class AcceptableCiphersTests(unittest.TestCase):
     """
     Tests for twisted.internet._sslverify.OpenSSLAcceptableCiphers.
     """
@@ -1966,7 +1966,7 @@ class TestAcceptableCiphers(unittest.TestCase):
 
 
 
-class TestDiffieHellmanParameters(unittest.TestCase):
+class DiffieHellmanParametersTests(unittest.TestCase):
     """
     Tests for twisted.internet._sslverify.OpenSSLDHParameters.
     """
@@ -2078,7 +2078,7 @@ class FakeLib(object):
 
 
 
-class TestFakeLib(unittest.TestCase):
+class FakeLibTests(unittest.TestCase):
     """
     Tests for FakeLib
     """
@@ -2151,7 +2151,7 @@ class FakeBinding(object):
 
 
 
-class TestECCurve(unittest.TestCase):
+class ECCurveTests(unittest.TestCase):
     """
     Tests for twisted.internet._sslverify.OpenSSLECCurve.
     """
@@ -2236,7 +2236,7 @@ class TestECCurve(unittest.TestCase):
 
 
 
-class KeyPair(unittest.TestCase):
+class KeyPairTests(unittest.TestCase):
     """
     Tests for L{sslverify.KeyPair}.
     """
diff --git twisted/test/test_stateful.py twisted/test/test_stateful.py
index ce72474..85d5a65 100644
--- twisted/test/test_stateful.py
+++ twisted/test/test_stateful.py
@@ -65,7 +65,7 @@ class TestInt32(MyInt32StringReceiver):
         self.closed = 1
 
 
-class Int32TestCase(TestCase, test_basic.IntNTestCaseMixin):
+class Int32Tests(TestCase, test_basic.IntNTestCaseMixin):
     protocol = TestInt32
     strings = ["a", "b" * 16]
     illegalStrings = ["\x10\x00\x00\x00aaaaaa"]
diff --git twisted/test/test_stdio.py twisted/test/test_stdio.py
index 14371a0..f88b1a0 100644
--- twisted/test/test_stdio.py
+++ twisted/test/test_stdio.py
@@ -75,7 +75,7 @@ class StandardIOTestProcessProtocol(protocol.ProcessProtocol):
 
 
 
-class StandardInputOutputTestCase(unittest.TestCase):
+class StandardInputOutputTests(unittest.TestCase):
 
     skip = skipWindowsNopywin32
 
diff --git twisted/test/test_strcred.py twisted/test/test_strcred.py
index 9154c85..e0e044f 100644
--- twisted/test/test_strcred.py
+++ twisted/test/test_strcred.py
@@ -46,7 +46,7 @@ def getInvalidAuthType():
 
 
 
-class TestPublicAPI(unittest.TestCase):
+class PublicAPITests(unittest.TestCase):
 
     def test_emptyDescription(self):
         """
@@ -69,7 +69,7 @@ class TestPublicAPI(unittest.TestCase):
 
 
 
-class TestStrcredFunctions(unittest.TestCase):
+class StrcredFunctionsTests(unittest.TestCase):
 
     def test_findCheckerFactories(self):
         """
@@ -90,7 +90,7 @@ class TestStrcredFunctions(unittest.TestCase):
 
 
 
-class TestMemoryChecker(unittest.TestCase):
+class MemoryCheckerTests(unittest.TestCase):
 
     def setUp(self):
         self.admin = credentials.UsernamePassword('admin', 'asdf')
@@ -147,7 +147,7 @@ class TestMemoryChecker(unittest.TestCase):
 
 
 
-class TestAnonymousChecker(unittest.TestCase):
+class AnonymousCheckerTests(unittest.TestCase):
 
     def test_isChecker(self):
         """
@@ -171,7 +171,7 @@ class TestAnonymousChecker(unittest.TestCase):
 
 
 
-class TestUnixChecker(unittest.TestCase):
+class UnixCheckerTests(unittest.TestCase):
     users = {
         'admin': 'asdf',
         'alice': 'foo',
@@ -259,7 +259,7 @@ class TestUnixChecker(unittest.TestCase):
 
 
 
-class TestFileDBChecker(unittest.TestCase):
+class FileDBCheckerTests(unittest.TestCase):
     """
     Test for the --auth=file:... file checker.
     """
@@ -340,7 +340,7 @@ class TestFileDBChecker(unittest.TestCase):
 
 
 
-class TestSSHChecker(unittest.TestCase):
+class SSHCheckerTests(unittest.TestCase):
     """
     Tests for the --auth=sshkey:... checker.  The majority of the tests for the
     ssh public key database checker are in
@@ -375,7 +375,7 @@ class DummyOptions(usage.Options, strcred.AuthOptionMixin):
 
 
 
-class TestCheckerOptions(unittest.TestCase):
+class CheckerOptionsTests(unittest.TestCase):
 
     def test_createsList(self):
         """
@@ -512,7 +512,7 @@ class OptionsSupportsNoInterfaces(usage.Options, strcred.AuthOptionMixin):
 
 
 
-class TestLimitingInterfaces(unittest.TestCase):
+class LimitingInterfacesTests(unittest.TestCase):
     """
     Tests functionality that allows an application to limit the
     credential interfaces it can support. For the purposes of this
diff --git twisted/test/test_strerror.py twisted/test/test_strerror.py
index ce14051..41667d2 100644
--- twisted/test/test_strerror.py
+++ twisted/test/test_strerror.py
@@ -21,7 +21,7 @@ class _MyWindowsException(OSError):
 
 
 
-class ErrorFormatingTestCase(TestCase):
+class ErrorFormatingTests(TestCase):
     """
     Tests for C{_ErrorFormatter.formatError}.
     """
diff --git twisted/test/test_strports.py twisted/test/test_strports.py
index aabe73e..08e508e 100644
--- twisted/test/test_strports.py
+++ twisted/test/test_strports.py
@@ -14,7 +14,7 @@ from twisted.internet.endpoints import TCP4ServerEndpoint, UNIXServerEndpoint
 
 
 
-class DeprecatedParseTestCase(ParserTests):
+class DeprecatedParseTests(ParserTests):
     """
     L{strports.parse} is deprecated.  It's an alias for a method that is now
     private in L{twisted.internet.endpoints}.
@@ -49,7 +49,7 @@ class DeprecatedParseTestCase(ParserTests):
 
 
 
-class ServiceTestCase(TestCase):
+class ServiceTests(TestCase):
     """
     Tests for L{strports.service}.
     """
diff --git twisted/test/test_task.py twisted/test/test_task.py
index bd35545..e5b8bd1 100644
--- twisted/test/test_task.py
+++ twisted/test/test_task.py
@@ -31,7 +31,7 @@ class TestException(Exception):
 
 
 
-class ClockTestCase(unittest.TestCase):
+class ClockTests(unittest.TestCase):
     """
     Test the non-wallclock based clock implementation.
     """
@@ -251,7 +251,7 @@ class ClockTestCase(unittest.TestCase):
 
 
 
-class LoopTestCase(unittest.TestCase):
+class LoopTests(unittest.TestCase):
     """
     Tests for L{task.LoopingCall} based on a fake L{IReactorTime}
     implementation.
@@ -565,7 +565,7 @@ class LoopTestCase(unittest.TestCase):
 
 
 
-class ReactorLoopTestCase(unittest.TestCase):
+class ReactorLoopTests(unittest.TestCase):
     # Slightly inferior tests which exercise interactions with an actual
     # reactor.
     def testFailure(self):
diff --git twisted/test/test_tcp.py twisted/test/test_tcp.py
index bce885d..e381209 100644
--- twisted/test/test_tcp.py
+++ twisted/test/test_tcp.py
@@ -170,7 +170,7 @@ class MyClientFactory(MyProtocolFactoryMixin, protocol.ClientFactory):
 
 
 
-class ListeningTestCase(unittest.TestCase):
+class ListeningTests(unittest.TestCase):
 
     def test_listen(self):
         """
@@ -369,7 +369,7 @@ class ListeningTestCase(unittest.TestCase):
 
 
 
-class LoopbackTestCase(unittest.TestCase):
+class LoopbackTests(unittest.TestCase):
     """
     Test loopback connections.
     """
@@ -617,7 +617,7 @@ class ClientStartStopFactory(MyClientFactory):
         self.whenStopped.callback(True)
 
 
-class FactoryTestCase(unittest.TestCase):
+class FactoryTests(unittest.TestCase):
     """Tests for factories."""
 
     def test_serverStartStop(self):
@@ -681,7 +681,7 @@ class FactoryTestCase(unittest.TestCase):
 
 
 
-class CannotBindTestCase(unittest.TestCase):
+class CannotBindTests(unittest.TestCase):
     """
     Tests for correct behavior when a reactor cannot bind to the required TCP
     port.
@@ -798,7 +798,7 @@ class MyOtherClientFactory(protocol.ClientFactory):
 
 
 
-class LocalRemoteAddressTestCase(unittest.TestCase):
+class LocalRemoteAddressTests(unittest.TestCase):
     """
     Tests for correct getHost/getPeer values and that the correct address is
     passed to buildProtocol.
@@ -875,7 +875,7 @@ class WriterClientFactory(protocol.ClientFactory):
         self.protocol = p
         return p
 
-class WriteDataTestCase(unittest.TestCase):
+class WriteDataTests(unittest.TestCase):
     """
     Test that connected TCP sockets can actually write data. Try to exercise
     the entire ITransport interface.
@@ -1219,7 +1219,7 @@ class ProperlyCloseFilesMixin:
 
 
 
-class ProperlyCloseFilesTestCase(unittest.TestCase, ProperlyCloseFilesMixin):
+class ProperlyCloseFilesTests(unittest.TestCase, ProperlyCloseFilesMixin):
     """
     Test that the sockets created by L{IReactorTCP.connectTCP} are cleaned up
     when the connection they are associated with is closed.
@@ -1272,7 +1272,7 @@ class WiredFactory(policies.WrappingFactory):
 
 
 
-class AddressTestCase(unittest.TestCase):
+class AddressTests(unittest.TestCase):
     """
     Tests for address-related interactions with client and server protocols.
     """
@@ -1409,7 +1409,7 @@ class FireOnCloseFactory(policies.WrappingFactory):
         self.deferred = defer.Deferred()
 
 
-class LargeBufferTestCase(unittest.TestCase):
+class LargeBufferTests(unittest.TestCase):
     """Test that buffering large amounts of data works.
     """
 
@@ -1472,7 +1472,7 @@ class MyHCFactory(protocol.ServerFactory):
         return p
 
 
-class HalfCloseTestCase(unittest.TestCase):
+class HalfCloseTests(unittest.TestCase):
     """Test half-closing connections."""
 
     def setUp(self):
@@ -1554,7 +1554,7 @@ class HalfCloseTestCase(unittest.TestCase):
         return d
 
 
-class HalfClose2TestCase(unittest.TestCase):
+class HalfCloseNoNotificationAndShutdownExceptionTests(unittest.TestCase):
 
     def setUp(self):
         self.f = f = MyServerFactory()
@@ -1678,7 +1678,7 @@ class HalfCloseBuggyApplicationTests(unittest.TestCase):
 
 
 
-class LogTestCase(unittest.TestCase):
+class LogTests(unittest.TestCase):
     """
     Test logging facility of TCP base classes.
     """
@@ -1712,7 +1712,7 @@ class LogTestCase(unittest.TestCase):
 
 
 
-class PauseProducingTestCase(unittest.TestCase):
+class PauseProducingTests(unittest.TestCase):
     """
     Test some behaviors of pausing the production of a transport.
     """
@@ -1759,7 +1759,7 @@ class PauseProducingTestCase(unittest.TestCase):
 
 
 
-class CallBackOrderTestCase(unittest.TestCase):
+class CallBackOrderTests(unittest.TestCase):
     """
     Test the order of reactor callbacks
     """
@@ -1821,4 +1821,4 @@ except ImportError:
     pass
 else:
     numRounds = resource.getrlimit(resource.RLIMIT_NOFILE)[0] + 10
-    ProperlyCloseFilesTestCase.numberRounds = numRounds
+    ProperlyCloseFilesTests.numberRounds = numRounds
diff --git twisted/test/test_tcp_internals.py twisted/test/test_tcp_internals.py
index be4a77f..08a402d 100644
--- twisted/test/test_tcp_internals.py
+++ twisted/test/test_tcp_internals.py
@@ -25,7 +25,7 @@ from twisted.internet.defer import maybeDeferred, gatherResults
 from twisted.internet import reactor, interfaces
 
 
-class PlatformAssumptionsTestCase(TestCase):
+class PlatformAssumptionsTests(TestCase):
     """
     Test assumptions about platform behaviors.
     """
@@ -117,7 +117,7 @@ class PlatformAssumptionsTestCase(TestCase):
 
 
 
-class SelectReactorTestCase(TestCase):
+class SelectReactorTests(TestCase):
     """
     Tests for select-specific failure conditions.
     """
@@ -250,6 +250,6 @@ class SelectReactorTestCase(TestCase):
 
 if not interfaces.IReactorFDSet.providedBy(reactor):
     skipMsg = 'This test only applies to reactors that implement IReactorFDset'
-    PlatformAssumptionsTestCase.skip = skipMsg
-    SelectReactorTestCase.skip = skipMsg
+    PlatformAssumptionsTests.skip = skipMsg
+    SelectReactorTests.skip = skipMsg
 
diff --git twisted/test/test_text.py twisted/test/test_text.py
index 4b2d38c..7a0e914 100644
--- twisted/test/test_text.py
+++ twisted/test/test_text.py
@@ -23,7 +23,7 @@ science.
 """
 
 
-class WrapTest(unittest.TestCase):
+class WrapTests(unittest.TestCase):
     """
     Tests for L{text.greedyWrap}.
     """
@@ -83,7 +83,7 @@ class WrapTest(unittest.TestCase):
 
 
 
-class LineTest(unittest.TestCase):
+class LineTests(unittest.TestCase):
     """
     Tests for L{isMultiline} and L{endsInNewline}.
     """
@@ -114,7 +114,7 @@ class LineTest(unittest.TestCase):
 
 
 
-class StringyStringTest(unittest.TestCase):
+class StringyStringTests(unittest.TestCase):
     """
     Tests for L{text.stringyString}.
     """
@@ -146,7 +146,7 @@ class StringyStringTest(unittest.TestCase):
 
 
 
-class SplitTest(unittest.TestCase):
+class SplitTests(unittest.TestCase):
     """
     Tests for L{text.splitQuoted}.
     """
@@ -179,7 +179,7 @@ class SplitTest(unittest.TestCase):
 
 
 
-class StrFileTest(unittest.TestCase):
+class StrFileTests(unittest.TestCase):
     def setUp(self):
         self.io = StringIO("this is a test string")
 
diff --git twisted/test/test_threadable.py twisted/test/test_threadable.py
index 502aa85..5be5638 100644
--- twisted/test/test_threadable.py
+++ twisted/test/test_threadable.py
@@ -35,7 +35,7 @@ class TestObject:
 
 threadable.synchronize(TestObject)
 
-class SynchronizationTestCase(unittest.SynchronousTestCase):
+class SynchronizationTests(unittest.SynchronousTestCase):
     def setUp(self):
         """
         Reduce the CPython check interval so that thread switches happen much
@@ -113,7 +113,7 @@ class SynchronizationTestCase(unittest.SynchronousTestCase):
 
 
 
-class SerializationTestCase(unittest.SynchronousTestCase):
+class SerializationTests(unittest.SynchronousTestCase):
     def testPickling(self):
         lock = threadable.XLock()
         lockType = type(lock)
diff --git twisted/test/test_threadpool.py twisted/test/test_threadpool.py
index 8958830..fa871d0 100644
--- twisted/test/test_threadpool.py
+++ twisted/test/test_threadpool.py
@@ -56,7 +56,7 @@ threadable.synchronize(Synchronization)
 
 
 
-class ThreadPoolTestCase(unittest.SynchronousTestCase):
+class ThreadPoolTests(unittest.SynchronousTestCase):
     """
     Test threadpools.
     """
@@ -556,7 +556,7 @@ class ThreadPoolTestCase(unittest.SynchronousTestCase):
 
 
 
-class RaceConditionTestCase(unittest.SynchronousTestCase):
+class RaceConditionTests(unittest.SynchronousTestCase):
 
     def getTimeout(self):
         """
diff --git twisted/test/test_threads.py twisted/test/test_threads.py
index 69ee19d..9ebf40f 100644
--- twisted/test/test_threads.py
+++ twisted/test/test_threads.py
@@ -20,7 +20,7 @@ if _PY3:
     xrange = range
 
 
-class ReactorThreadsTestCase(unittest.TestCase):
+class ReactorThreadsTests(unittest.TestCase):
     """
     Tests for the reactor threading API.
     """
@@ -212,7 +212,7 @@ class Counter:
 
 
 
-class DeferredResultTestCase(unittest.TestCase):
+class DeferredResultTests(unittest.TestCase):
     """
     Test twisted.internet.threads.
     """
@@ -288,7 +288,7 @@ class DeferredResultTestCase(unittest.TestCase):
 
 
 
-class DeferToThreadPoolTestCase(unittest.TestCase):
+class DeferToThreadPoolTests(unittest.TestCase):
     """
     Test L{twisted.internet.threads.deferToThreadPool}.
     """
@@ -364,7 +364,7 @@ class ThreadStartupProcessProtocol(protocol.ProcessProtocol):
 
 
 
-class StartupBehaviorTestCase(unittest.TestCase):
+class StartupBehaviorTests(unittest.TestCase):
     """
     Test cases for the behavior of the reactor threadpool near startup
     boundary conditions.
@@ -409,13 +409,13 @@ class StartupBehaviorTestCase(unittest.TestCase):
 
 
 if interfaces.IReactorThreads(reactor, None) is None:
-    for cls in (ReactorThreadsTestCase,
-                DeferredResultTestCase,
-                StartupBehaviorTestCase):
+    for cls in (ReactorThreadsTests,
+                DeferredResultTests,
+                StartupBehaviorTests):
         cls.skip = "No thread support, nothing to test here."
 else:
     import threading
 
 if interfaces.IReactorProcess(reactor, None) is None:
-    for cls in (StartupBehaviorTestCase,):
+    for cls in (StartupBehaviorTests,):
         cls.skip = "No process support, cannot run subprocess thread tests."
diff --git twisted/test/test_tpfile.py twisted/test/test_tpfile.py
index 655a166..bba107e 100644
--- twisted/test/test_tpfile.py
+++ twisted/test/test_tpfile.py
@@ -24,7 +24,7 @@ class FileSendingClient(protocol.Protocol):
         d = s.beginFileTransfer(self.f, self.transport, lambda x: x)
         d.addCallback(lambda r: self.transport.loseConnection())
 
-class FileSenderTestCase(unittest.TestCase):
+class FileSenderTests(unittest.TestCase):
     def testSendingFile(self):
         testStr = 'xyz' * 100 + 'abc' * 100 + '123' * 100
         s = BufferingServer()
diff --git twisted/test/test_twistd.py twisted/test/test_twistd.py
index 934658b..9253e88 100644
--- twisted/test/test_twistd.py
+++ twisted/test/test_twistd.py
@@ -172,7 +172,7 @@ class CrippledApplicationRunner(twistd._SomeApplicationRunner):
 
 
 
-class ServerOptionsTest(unittest.TestCase):
+class ServerOptionsTests(unittest.TestCase):
     """
     Non-platform-specific tests for the pltaform-specific ServerOptions class.
     """
@@ -355,7 +355,7 @@ class ServerOptionsTest(unittest.TestCase):
 
 
 
-class TapFileTest(unittest.TestCase):
+class TapFileTests(unittest.TestCase):
     """
     Test twistd-related functionality that requires a tap file on disk.
     """
@@ -431,7 +431,7 @@ class TestApplicationRunner(app.ApplicationRunner):
 
 
 
-class ApplicationRunnerTest(unittest.TestCase):
+class ApplicationRunnerTests(unittest.TestCase):
     """
     Non-platform-specific tests for the platform-specific ApplicationRunner.
     """
@@ -793,7 +793,7 @@ class UnixApplicationRunnerStartApplicationTests(unittest.TestCase):
 
 
 
-class UnixApplicationRunnerRemovePID(unittest.TestCase):
+class UnixApplicationRunnerRemovePIDTests(unittest.TestCase):
     """
     Tests for L{UnixApplicationRunner.removePID}.
     """
@@ -889,7 +889,7 @@ class DummyReactor(object):
 
 
 
-class AppProfilingTestCase(unittest.TestCase):
+class AppProfilingTests(unittest.TestCase):
     """
     Tests for L{app.AppProfiler}.
     """
@@ -1218,7 +1218,7 @@ def _setupSyslog(testCase):
 
 
 
-class AppLoggerTestCase(unittest.TestCase):
+class AppLoggerTests(unittest.TestCase):
     """
     Tests for L{app.AppLogger}.
 
@@ -1423,7 +1423,7 @@ class AppLoggerTestCase(unittest.TestCase):
 
 
 
-class UnixAppLoggerTestCase(unittest.TestCase):
+class UnixAppLoggerTests(unittest.TestCase):
     """
     Tests for L{UnixAppLogger}.
 
diff --git twisted/test/test_udp.py twisted/test/test_udp.py
index 447889e..6cf4583 100644
--- twisted/test/test_udp.py
+++ twisted/test/test_udp.py
@@ -114,7 +114,7 @@ class BadClient(protocol.DatagramProtocol):
 
 
 
-class UDPTestCase(unittest.TestCase):
+class UDPTests(unittest.TestCase):
 
     def test_oldAddress(self):
         """
@@ -451,7 +451,7 @@ class UDPTestCase(unittest.TestCase):
 
 
 
-class ReactorShutdownInteraction(unittest.TestCase):
+class ReactorShutdownInteractionTests(unittest.TestCase):
     """Test reactor shutdown interaction"""
 
     def setUp(self):
@@ -500,7 +500,7 @@ class ReactorShutdownInteraction(unittest.TestCase):
 
 
 
-class MulticastTestCase(unittest.TestCase):
+class MulticastTests(unittest.TestCase):
 
     def setUp(self):
         self.server = Server()
@@ -695,7 +695,7 @@ class MulticastTestCase(unittest.TestCase):
 
 
 if not interfaces.IReactorUDP(reactor, None):
-    UDPTestCase.skip = "This reactor does not support UDP"
-    ReactorShutdownInteraction.skip = "This reactor does not support UDP"
+    UDPTests.skip = "This reactor does not support UDP"
+    ReactorShutdownInteractionTests.skip = "This reactor does not support UDP"
 if not interfaces.IReactorMulticast(reactor, None):
-    MulticastTestCase.skip = "This reactor does not support multicast"
+    MulticastTests.skip = "This reactor does not support multicast"
diff --git twisted/test/test_unix.py twisted/test/test_unix.py
index d96e7b0..c2f39ab 100644
--- twisted/test/test_unix.py
+++ twisted/test/test_unix.py
@@ -24,7 +24,7 @@ class FailedConnectionClientFactory(protocol.ClientFactory):
 
 
 
-class UnixSocketTestCase(unittest.TestCase):
+class UnixSocketTests(unittest.TestCase):
     """
     Test unix sockets.
     """
@@ -286,7 +286,7 @@ class ServerProto(protocol.DatagramProtocol):
 
 
 
-class DatagramUnixSocketTestCase(unittest.TestCase):
+class DatagramUnixSocketTests(unittest.TestCase):
     """
     Test datagram UNIX sockets.
     """
@@ -400,6 +400,6 @@ class DatagramUnixSocketTestCase(unittest.TestCase):
 
 
 if not interfaces.IReactorUNIX(reactor, None):
-    UnixSocketTestCase.skip = "This reactor does not support UNIX domain sockets"
+    UnixSocketTests.skip = "This reactor does not support UNIX domain sockets"
 if not interfaces.IReactorUNIXDatagram(reactor, None):
-    DatagramUnixSocketTestCase.skip = "This reactor does not support UNIX datagram sockets"
+    DatagramUnixSocketTests.skip = "This reactor does not support UNIX datagram sockets"
diff --git twisted/test/test_usage.py twisted/test/test_usage.py
index be136e8..28f2091 100644
--- twisted/test/test_usage.py
+++ twisted/test/test_usage.py
@@ -36,7 +36,7 @@ class WellBehaved(usage.Options):
 
 
 
-class ParseCorrectnessTest(unittest.TestCase):
+class ParseCorrectnessTests(unittest.TestCase):
     """
     Test L{usage.Options.parseOptions} for correct values under
     good conditions.
@@ -97,7 +97,7 @@ class TypedOptions(usage.Options):
 
 
 
-class TypedTestCase(unittest.TestCase):
+class TypedTests(unittest.TestCase):
     """
     Test L{usage.Options.parseOptions} for options with forced types.
     """
@@ -178,7 +178,7 @@ class WeirdCallableOptions(usage.Options):
     ]
 
 
-class WrongTypedTestCase(unittest.TestCase):
+class WrongTypedTests(unittest.TestCase):
     """
     Test L{usage.Options.parseOptions} for wrong coerce options.
     """
@@ -214,7 +214,7 @@ class WrongTypedTestCase(unittest.TestCase):
         self.assertRaises(RuntimeError, us.parseOptions, argV)
 
 
-class OutputTest(unittest.TestCase):
+class OutputTests(unittest.TestCase):
     def test_uppercasing(self):
         """
         Error output case adjustment does not mangle options
@@ -255,7 +255,7 @@ class SubCommandOptions(usage.Options):
         ]
 
 
-class SubCommandTest(unittest.TestCase):
+class SubCommandTests(unittest.TestCase):
     """
     Test L{usage.Options.parseOptions} for options with subcommands.
     """
@@ -374,7 +374,7 @@ class SubCommandTest(unittest.TestCase):
         self.failUnlessIdentical(oBar.subOptions.parent, oBar)
 
 
-class HelpStringTest(unittest.TestCase):
+class HelpStringTests(unittest.TestCase):
     """
     Test generated help strings.
     """
@@ -409,7 +409,7 @@ class HelpStringTest(unittest.TestCase):
         self.failUnless(lines[0].find("flagallicious") >= 0)
 
 
-class PortCoerceTestCase(unittest.TestCase):
+class PortCoerceTests(unittest.TestCase):
     """
     Test the behavior of L{usage.portCoerce}.
     """
@@ -432,7 +432,7 @@ class PortCoerceTestCase(unittest.TestCase):
 
 
 
-class ZshCompleterTestCase(unittest.TestCase):
+class ZshCompleterTests(unittest.TestCase):
     """
     Test the behavior of the various L{twisted.usage.Completer} classes
     for producing output usable by zsh tab-completion system.
@@ -590,7 +590,7 @@ class ZshCompleterTestCase(unittest.TestCase):
 
 
 
-class CompleterNotImplementedTestCase(unittest.TestCase):
+class CompleterNotImplementedTests(unittest.TestCase):
     """
     Using an unknown shell constant with the various Completer() classes
     should raise NotImplementedError
@@ -615,7 +615,7 @@ class CompleterNotImplementedTestCase(unittest.TestCase):
 
 
 
-class FlagFunctionTest(unittest.TestCase):
+class FlagFunctionTests(unittest.TestCase):
     """
     Tests for L{usage.flagFunction}.
     """
@@ -684,7 +684,7 @@ class FlagFunctionTest(unittest.TestCase):
 
 
 
-class OptionsInternalTest(unittest.TestCase):
+class OptionsInternalTests(unittest.TestCase):
     """
     Tests internal behavior of C{usage.Options}.
     """
diff --git twisted/topfiles/7872.misc twisted/topfiles/7872.misc
new file mode 100644
index 0000000..e69de29
