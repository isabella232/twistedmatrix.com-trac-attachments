diff --git twisted/python/modules.py twisted/python/modules.py
index 11455be..984fc1c 100644
--- twisted/python/modules.py
+++ twisted/python/modules.py
@@ -53,6 +53,8 @@ the modules outside the standard library's python-files directory::
                 modinfo.name, modinfo.filePath.path)
 """
 
+from __future__ import print_function,division,absolute_import
+
 __metaclass__ = type
 
 # let's try to keep path imports to a minimum...
@@ -62,7 +64,7 @@ import sys
 import zipimport
 import inspect
 import warnings
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 
 from twisted.python.components import registerAdapter
 from twisted.python.filepath import FilePath, UnlistableError
@@ -131,6 +133,7 @@ class _ModuleIteratorHelper:
             except UnlistableError:
                 continue
 
+            children = list(children) # Added for python3 porting.
             children.sort()
             for potentialTopLevel in children:
                 ext = potentialTopLevel.splitext()[1]
@@ -476,16 +479,16 @@ class IPathImportMapper(Interface):
         L{ZipPath}, but more might be added later).
         """
 
+@implementer(IPathImportMapper)
 class _DefaultMapImpl:
     """ Wrapper for the default importer, i.e. None.  """
-    implements(IPathImportMapper)
     def mapPath(self, fsPathString):
         return FilePath(fsPathString)
 _theDefaultMapper = _DefaultMapImpl()
 
+@implementer(IPathImportMapper)
 class _ZipMapImpl:
     """ IPathImportMapper implementation for zipimport.ZipImporter.  """
-    implements(IPathImportMapper)
     def __init__(self, importer):
         self.importer = importer
 
@@ -618,7 +621,7 @@ class PythonPath:
         while '.' in topPackageObj.__name__:
             topPackageObj = self.moduleDict['.'.join(
                     topPackageObj.__name__.split('.')[:-1])]
-        if _isPackagePath(FilePath(topPackageObj.__file__)):
+        if _isPackagePath(FilePath(topPackageObj.__file__.encode('utf-8'))):
             # if package 'foo' is on sys.path at /a/b/foo, package 'foo's
             # __file__ will be /a/b/foo/__init__.py, and we are looking for
             # /a/b here, the path-entry; so go up two steps.
@@ -693,9 +696,9 @@ class PythonPath:
             # we need 2 paths; one of the path entry and one for the module.
             pe = PathEntry(
                 self._smartPath(
-                    self._findEntryPathString(moduleObject)),
+                    self._findEntryPathString(moduleObject).encode('utf-8')),
                 self)
-            mp = self._smartPath(moduleObject.__file__)
+            mp = self._smartPath(moduleObject.__file__.encode('utf-8'))
             return PythonModule(modname, mp, pe)
 
         # Recurse if we're trying to get a submodule.
