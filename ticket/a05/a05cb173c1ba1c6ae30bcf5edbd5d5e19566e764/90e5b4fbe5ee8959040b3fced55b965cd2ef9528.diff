diff --git a/doc/core/howto/cred.xhtml b/doc/core/howto/cred.xhtml
index c0eedd4..46bedb6 100644
--- a/doc/core/howto/cred.xhtml
+++ b/doc/core/howto/cred.xhtml
@@ -218,7 +218,7 @@ the DELE command can only be used after you are logged in:</p>
    <h3>Application implementation</h3>
 
 <p>The application developer can implement realms and credential checkers. For example,
-she might implement a realm that returns IMailbox implementing avatars, using MySQL
+they might implement a realm that returns IMailbox implementing avatars, using MySQL
 for storage, or perhaps a credential checker that uses LDAP for authentication.
 In the following example, the Realm for a simple remote object service (using
 Twisted's Perspective Broker protocol) is implemented:</p>
diff --git a/doc/core/howto/options.xhtml b/doc/core/howto/options.xhtml
index 3ca8fbb..c34e1c8 100644
--- a/doc/core/howto/options.xhtml
+++ b/doc/core/howto/options.xhtml
@@ -25,12 +25,12 @@
     class="API">twisted.python.usage.Options</code>. It uses
     Python's reflection facilities to provide an easy to use yet
     flexible interface to the command line. While most command line
-    processors either force the application writer to write her own
+    processors either force the application writer to write their own
     loops, or have arbitrary limitations on the command line (the
     most common one being not being able to have more then one
     instance of a specific option, thus rendering the idiom
     <code class="shell">program -v -v -v</code> impossible), Twisted allows the
-    programmer to decide how much control she wants.</p>
+    programmer to decide how much control they want.</p>
 
     <p>The <code>Options</code> class is used by subclassing. Since
     a lot of time it will be used in the <code
diff --git a/doc/core/howto/trial.xhtml b/doc/core/howto/trial.xhtml
index f0a0cc2..6c07a6d 100644
--- a/doc/core/howto/trial.xhtml
+++ b/doc/core/howto/trial.xhtml
@@ -552,7 +552,7 @@ created.</p>
 <p>Currently, if you send an invalid command or invalid arguments to our
 server, it logs an exception and closes the connection. This is a perfectly
 valid behavior, but for the sake of this tutorial, we want to return an error
-to the user if he sends invalid operators, and log any errors on server side.
+to the user if they send invalid operators, and log any errors on server side.
 So we'll want a test like this:</p>
 
 <pre class="python">
diff --git a/doc/core/howto/tutorial/library.xhtml b/doc/core/howto/tutorial/library.xhtml
index 1cd4172..9fed2b9 100644
--- a/doc/core/howto/tutorial/library.xhtml
+++ b/doc/core/howto/tutorial/library.xhtml
@@ -65,9 +65,9 @@ method that will also help build .tap files later:</p>
 </pre>
 
 
-<p>Note: the finger <em>user</em> still has ultimate power: he can use
- <code>makeService</code>, or he can use the lower-level interface if he has
-specific needs (maybe an IRC server on some other port? Maybe we want the
+<p>Note: the finger <em>user</em> still has ultimate power: they can use
+<code>makeService</code>, or they can use the lower-level interface if they
+have specific needs (maybe an IRC server on some other port? Maybe we want the
 non-SSL webserver to listen only locally?  etc. etc.)  This is an important
 design principle: never force a layer of abstraction: allow usage of layers of
 abstractions.</p>
diff --git a/twisted/runner/inetdtap.py b/twisted/runner/inetdtap.py
index 3e62877..367f0e6 100644
--- a/twisted/runner/inetdtap.py
+++ b/twisted/runner/inetdtap.py
@@ -1,7 +1,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# 
+#
 
 """
 Twisted inetd TAP support
@@ -11,19 +11,15 @@ Maintainer: Andrew Bennetts
 Future Plans: more configurability.
 """
 
-import os, pwd, grp, socket
+import grp
+import pwd
+import socket
 
 from twisted.runner import inetd, inetdconf
 from twisted.python import log, usage
 from twisted.internet.protocol import ServerFactory
 from twisted.application import internet, service as appservice
 
-try:
-    import portmap
-    rpcOk = 1
-except ImportError:
-    rpcOk = 0
-
 
 # Protocol map
 protocolDict = {'tcp': socket.IPPROTO_TCP, 'udp': socket.IPPROTO_UDP}
@@ -42,24 +38,6 @@ class Options(usage.Options):
         optActions={"file": usage.CompleteFiles('*.conf')}
         )
 
-class RPCServer(internet.TCPServer):
-
-    def __init__(self, rpcVersions, rpcConf, proto, service):
-        internet.TCPServer.__init__(0, ServerFactory())
-        self.rpcConf = rpcConf
-        self.proto = proto
-        self.service = service
-
-    def startService(self):
-        internet.TCPServer.startService(self)
-        import portmap
-        portNo = self._port.getHost()[2]
-        service = self.service
-        for version in rpcVersions:
-            portmap.set(self.rpcConf.services[name], version, self.proto,
-                        portNo)
-            inetd.forkPassingFD(service.program, service.programArgs,
-                                os.environ, service.user, service.group, p)
 
 def makeService(config):
     s = appservice.MultiService()
@@ -72,13 +50,14 @@ def makeService(config):
     except:
         # We'll survive even if we can't read /etc/rpc
         log.deferr()
-    
+
     for service in conf.services:
         rpc = service.protocol.startswith('rpc/')
         protocol = service.protocol
 
-        if rpc and not rpcOk:
-            log.msg('Skipping rpc service due to lack of rpc support')
+        if rpc:
+            log.msg('Skipping rpc service due to the fact that RPC support has'
+                    ' been removed')
             continue
 
         if rpc:
@@ -87,7 +66,7 @@ def makeService(config):
             if not protocolDict.has_key(protocol):
                 log.msg('Bad protocol: ' + protocol)
                 continue
-            
+
             try:
                 name, rpcVersions = service.name.split('/')
             except ValueError:
@@ -107,7 +86,7 @@ def makeService(config):
             except ValueError:
                 log.msg('Bad RPC versions: ' + str(rpcVersions))
                 continue
-            
+
         if (protocol, service.socketType) not in [('tcp', 'stream'),
                                                   ('udp', 'dgram')]:
             log.msg('Skipping unsupported type/protocol: %s/%s'
@@ -148,10 +127,6 @@ def makeService(config):
                 continue
             factory = ServerFactory()
             factory.protocol = inetd.internalProtocols[service.name]
-        elif rpc:
-            i = RPCServer(rpcVersions, rpcConf, proto, service)
-            i.setServiceParent(s)
-            continue
         else:
             # Non-internal non-rpc services use InetdFactory
             factory = inetd.InetdFactory(service)
diff --git a/twisted/runner/portmap.c b/twisted/runner/portmap.c
deleted file mode 100644
index ca0c1c9..0000000
--- a/twisted/runner/portmap.c
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (c) 2001-2004 Twisted Matrix Laboratories.
- * See LICENSE for details.
-
- * 
- */
-
-/* portmap.c: A simple Python wrapper for pmap_set(3) and pmap_unset(3) */
-
-#include <Python.h>
-#include <rpc/rpc.h>
-#include <rpc/pmap_clnt.h>
-
-static PyObject * portmap_set(PyObject *self, PyObject *args)
-{
-	unsigned long program, version;
-	int protocol;
-	unsigned short port;
-	
-	if (!PyArg_ParseTuple(args, "llih:set", 
-			      &program, &version, &protocol, &port))
-		return NULL;
-
-	pmap_unset(program, version);
-	pmap_set(program, version, protocol, port);
-	
-	Py_INCREF(Py_None);
-	return Py_None;
-}
-
-static PyObject * portmap_unset(PyObject *self, PyObject *args)
-{
-	unsigned long program, version;
-	
-	if (!PyArg_ParseTuple(args, "ll:unset",
-			      &program, &version))
-		return NULL;
-
-	pmap_unset(program, version);
-	
-	Py_INCREF(Py_None);
-	return Py_None;
-}
-
-static PyMethodDef PortmapMethods[] = {
-	{"set", portmap_set, METH_VARARGS, 
-	 "Set an entry in the portmapper."},
-	{"unset", portmap_unset, METH_VARARGS,
-	 "Unset an entry in the portmapper."},
-	{NULL, NULL, 0, NULL}
-};
-
-void initportmap(void)
-{
-	(void) Py_InitModule("portmap", PortmapMethods);
-}
-
diff --git a/twisted/runner/topfiles/setup.py b/twisted/runner/topfiles/setup.py
index 27f65d3..7997beb 100644
--- a/twisted/runner/topfiles/setup.py
+++ b/twisted/runner/topfiles/setup.py
@@ -2,18 +2,12 @@
 # See LICENSE for details.
 
 try:
-    from twisted.python.dist import setup, ConditionalExtension as Extension
+    from twisted.python.dist import setup
 except ImportError:
     raise SystemExit("twisted.python.dist module not found.  Make sure you "
                      "have installed the Twisted core package before "
                      "attempting to install any other Twisted projects.")
 
-extensions = [
-    Extension("twisted.runner.portmap",
-              ["twisted/runner/portmap.c"],
-              condition=lambda builder: builder._check_header("rpc/rpc.h")),
-]
-
 if __name__ == '__main__':
     setup(
         twisted_subproject="runner",
@@ -30,6 +24,4 @@ if __name__ == '__main__':
 Twisted Runner contains code useful for persistent process management
 with Python and Twisted, and has an almost full replacement for inetd.
 """,
-        # build stuff
-        conditionalExtensions=extensions,
     )
