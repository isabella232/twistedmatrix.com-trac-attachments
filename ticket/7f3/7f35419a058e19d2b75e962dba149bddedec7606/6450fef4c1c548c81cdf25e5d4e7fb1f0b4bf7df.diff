--- doc/examples/pbbenchserver.py	2002-11-15 14:38:30.000000000 -0600
+++ ../Twisted.wip/doc/examples/pbbenchserver.py	2003-09-24 13:02:51.000000000 -0500
@@ -1,3 +1,4 @@
+
 # Twisted, the Framework of Your Internet
 # Copyright (C) 2001, 2002 Matthew W. Lefkowitz
 # 
@@ -16,12 +17,17 @@
 
 """Server for PB benchmark."""
 
+from twisted.internet import reactor
 from twisted.spread import pb
-from twisted.internet import reactor, app
-from twisted.cred import authorizer
+from twisted.cred.portal import Portal, IRealm
+from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse
 
 class PBBenchPerspective(pb.Perspective):
     callsPerSec = 0
+    def __init__(self, *args, **kw):
+        pb.Perspective.__init__(self, *args, **kw)
+        self.printCallsPerSec()
+        
     def perspective_simple(self):
         self.callsPerSec = self.callsPerSec + 1
         return None
@@ -34,14 +40,20 @@
     def perspective_complexTypes(self):
         return ['a', 1, 1l, 1.0, [], ()]
 
-class PBBenchService(pb.Service):
-    perspectiveClass = PBBenchPerspective
 
-a = app.Application("pbbench")
-auth = authorizer.DefaultAuthorizer(a)
-a.listenTCP(8787, pb.BrokerFactory(pb.AuthRoot(auth)))
-b = PBBenchService("benchmark", a, authorizer=auth)
-u = b.createPerspective("benchmark")
-u.makeIdentity("benchmark")
-u.printCallsPerSec()
-a.run()
+class SimpleRealm:
+    __implements__ = IRealm
+
+    def requestAvatar(self, avatarId, mind, *interfaces):
+        if pb.IPerspective in interfaces:
+            return pb.IPerspective, PBBenchPerspective("benchmark"), lambda : None
+        else:
+            raise NotImplementedError("no interface")
+
+
+portal = Portal(SimpleRealm())
+checker = InMemoryUsernamePasswordDatabaseDontUse()
+checker.addUser("benchmark", "benchmark")
+portal.registerChecker(checker)
+reactor.listenTCP(pb.portno, pb.PBServerFactory(portal))
+reactor.run()
