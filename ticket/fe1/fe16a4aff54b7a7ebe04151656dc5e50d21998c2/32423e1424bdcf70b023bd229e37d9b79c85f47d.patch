Index: twisted/scripts/trial.py
===================================================================
--- twisted/scripts/trial.py	(revision 38076)
+++ twisted/scripts/trial.py	(working copy)
@@ -4,7 +4,7 @@
 # See LICENSE for details.
 
 
-import sys, os, random, gc, pdb, time, warnings
+import sys, os, random, gc, pdb, time, warnings, multiprocessing
 
 from twisted.internet import defer
 from twisted.application import app
@@ -346,14 +346,23 @@
         """
         Number of local workers to run, a strictly positive integer.
         """
-        try:
-            number = int(number)
-        except ValueError:
-            raise usage.UsageError(
-                "Expecting integer argument to jobs, got '%s'" % number)
-        if number <= 0:
-            raise usage.UsageError(
-                "Argument to jobs must be a strictly positive integer")
+        # Case insensitive check if jobs was "auto"
+        if number.lower() == "auto":
+            try:
+                number = multiprocessing.cpu_count()
+            except NotImplementedError:
+                # Windows might raise NotImplementedError while accessing cpu_count
+                raise usage.UsageError(
+                    "-j AUTO option not supported for your system.")
+        else:
+            try:
+                number = int(number)
+            except ValueError:
+                raise usage.UsageError(
+                    "Expecting integer argument to jobs, got '%s'" % number)
+            if number <= 0:
+                raise usage.UsageError(
+                    "Argument to jobs must be a strictly positive integer")
         self["jobs"] = number
 
 
Index: twisted/trial/test/test_script.py
===================================================================
--- twisted/trial/test/test_script.py	(revision 38076)
+++ twisted/trial/test/test_script.py	(working copy)
@@ -537,6 +537,21 @@
         self.assertEqual(4, runner._workerNumber)
         self.assertEqual(["--force-gc"], runner._workerArguments)
 
+    def test_autoDetectAvailableCpusForJobs(self):
+        """
+        Check that C{--jobs} takes the correct number of CPUs with
+        auto option.
+        """
+        options = trial.Options()
+        options.parseOptions(["--jobs", "auto"])
+        runner = trial._makeRunner(options)
+        self.assertIsInstance(runner, TrialRunner)
+        import multiprocessing
+        try:
+            workers = multiprocessing.cpu_count()
+        except NotImplementedError:
+            return
+        self.assertEqual(workers, runner._workerNumber)
 
     def test_dryRunWithJobs(self):
         """
