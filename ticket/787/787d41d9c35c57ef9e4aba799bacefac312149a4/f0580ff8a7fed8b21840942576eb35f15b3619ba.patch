--- adbapi.py.old	2003-09-30 08:19:34.000000000 +0200
+++ adbapi.py	2003-09-30 08:21:59.000000000 +0200
@@ -177,6 +177,25 @@
 
         return self._deferToThread(self._runOperation, *args, **kw)
 
+    def runExecuteMany(self, *args, **kw):
+        """Execute an SQL query and return None.
+
+        A DB-API cursor will will be invoked with cursor.executemany(*args, **kw).
+        The exact nature of the arguments will depend on the specific flavor
+        of DB-API being used, but the first argument in *args will be an SQL
+        statement. This method will not attempt to fetch any results from the
+        query and is thus suitable for INSERT, DELETE, and other SQL statements
+        which do not return values. If the 'execute' method raises an exception,
+        the transaction will be rolled back and a Failure returned.
+
+        @param *args,**kw: arguments to be passed to a DB-API cursor's
+        'executemany' method.
+
+        @return: a Deferred which will fire None or a Failure.
+        """
+
+        return self._deferToThread(self._runExecuteMany, *args, **kw)
+
     def close(self):
         """Close all pool connections and shutdown the pool."""
 
@@ -234,6 +253,21 @@
             trans._connection.rollback()
             raise
 
+    def _runExecuteMany(self, *args, **kw):
+        conn = self.connect()
+        curs = conn.cursor()
+        try:
+            apply(curs.executemany, args, kw)
+            result = curs.fetchall()
+            curs.close()
+            conn.commit()
+            return result
+        except:
+            log.msg('Exception in SQL query. Rolling back.')
+            log.deferr()
+            conn.rollback()
+            raise
+
     def _runQuery(self, *args, **kw):
         conn = self.connect()
         curs = conn.cursor()
