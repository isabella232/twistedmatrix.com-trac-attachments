=== modified file 'twisted/internet/endpoints.py'
--- twisted/internet/endpoints.py	2011-02-14 04:45:15 +0000
+++ twisted/internet/endpoints.py	2011-03-15 12:32:14 +0000
@@ -999,7 +999,7 @@
     name = aname.upper()
     for plugin in getPlugins(IStreamClientEndpointStringParser):
         if plugin.prefix.upper() == name:
-            return plugin.parseStreamClient(*args, **kwargs)
+            return plugin.parseStreamClient(reactor, *args, **kwargs)
     if name not in _clientParsers:
         raise ValueError("Unknown endpoint type: %r" % (aname,))
     kwargs = _clientParsers[name](*args, **kwargs)

=== modified file 'twisted/internet/test/fakeendpoint.py'
--- twisted/internet/test/fakeendpoint.py	2011-02-14 04:45:15 +0000
+++ twisted/internet/test/fakeendpoint.py	2011-03-15 12:42:04 +0000
@@ -25,8 +25,8 @@
 
     implements(IStreamClientEndpointStringParser)
 
-    def parseStreamClient(self, *a, **kw):
-        return StreamClient(self, a, kw)
+    def parseStreamClient(self, reactor, *a, **kw):
+        return StreamClient(self, reactor, a, kw)
 
 
 
@@ -34,15 +34,16 @@
 
     implements(IStreamServerEndpointStringParser)
 
-    def parseStreamServer(self, *a, **kw):
-        return StreamServer(self, a, kw)
+    def parseStreamServer(self, reactor, *a, **kw):
+        return StreamServer(self, reactor, a, kw)
 
 
 
 class EndpointBase(object):
 
-    def __init__(self, parser, args, kwargs):
+    def __init__(self, parser, reactor, args, kwargs):
         self.parser = parser
+        self.reactor = reactor
         self.args = args
         self.kwargs = kwargs
 

=== modified file 'twisted/internet/test/test_endpoints.py'
--- twisted/internet/test/test_endpoints.py	2011-02-14 04:45:15 +0000
+++ twisted/internet/test/test_endpoints.py	2011-03-15 12:44:52 +0000
@@ -1025,7 +1025,8 @@
             notAReactor, "fake:hello:world:yes=no:up=down")
         from twisted.plugins.fakeendpoint import fake
         self.assertIdentical(fakeEndpoint.parser, fake)
-        self.assertEquals(fakeEndpoint.args, (notAReactor, 'hello', 'world'))
+        self.assertIdentical(fakeEndpoint.reactor, notAReactor)
+        self.assertEquals(fakeEndpoint.args, ('hello', 'world'))
         self.assertEquals(fakeEndpoint.kwargs, dict(yes='no', up='down'))
 
 

