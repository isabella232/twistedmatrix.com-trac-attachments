=== modified file 'twisted/names/test/test_names.py'
--- twisted/names/test/test_names.py	2013-06-18 20:03:31 +0000
+++ twisted/names/test/test_names.py	2013-06-18 23:00:57 +0000
@@ -585,6 +585,46 @@
 
 
 
+SOA_com = dns.Record_SOA(
+    mname='a.gtld.example.net',
+    rname='hostmaster.example.net',
+    serial=2013061801,
+    refresh=1000,
+    retry=2000,
+    expire=3000,
+    minimum=4000,
+    )
+
+
+
+ZONE_com = NoFileAuthority(
+    soa = ('com', SOA_com),
+    records = {
+        'com': [
+            SOA_com,
+            dns.Record_NS('a.gtld.example.net'),
+            dns.Record_NS('b.gtld.example.net'),],
+        'www.com': [
+            dns.Record_A('192.0.2.200'),
+            ],
+
+        # Delegation
+        'example.com': [
+            dns.Record_NS('ns1.example.com'),
+            dns.Record_NS('ns2.example.com'),
+            ],
+        # Glue records
+        'ns1.example.com': [
+            dns.Record_A('192.0.2.101'),
+            ],
+        'ns2.example.com': [
+            dns.Record_A('192.0.2.102'),
+            ],
+        },
+    )
+
+
+
 class AuthorityTests(unittest.TestCase):
     """
     Tests for the basic response record selection code in L{FileAuthority}
@@ -676,6 +716,40 @@
         self._referralTest('lookupAllRecords')
 
 
+    def test_referralForSubdomain(self):
+        """
+        L{FileAuthority._lookup} returns a referral for *subdomain*
+        names which are in a known child zone.
+        """
+        d = ZONE_com.lookupAddress(b'www.example.com')
+
+        result = []
+        d.addCallback(result.append)
+        answer, authority, additional = result[0]
+
+        self.assertEqual(answer, [])
+
+        self.assertEqual(
+            authority, [
+                dns.RRHeader(
+                    b'example.com', dns.NS, auth=False, ttl=4000,
+                    payload=dns.Record_NS('ns1.example.com')),
+                dns.RRHeader(
+                    b'example.com', dns.NS, auth=False, ttl=4000,
+                    payload=dns.Record_NS('ns2.example.com')),
+                ])
+
+        self.assertEqual(
+            additional, [
+                dns.RRHeader(
+                    b'ns1.example.com', dns.A, auth=False, ttl=4000,
+                    payload=dns.Record_A('192.0.2.101')),
+                dns.RRHeader(
+                    b'ns2.example.com', dns.A, auth=False, ttl=4000,
+                    payload=dns.Record_A('192.0.2.102')),
+                ])
+
+
 
 class NoInitialResponseTestCase(unittest.TestCase):
 

