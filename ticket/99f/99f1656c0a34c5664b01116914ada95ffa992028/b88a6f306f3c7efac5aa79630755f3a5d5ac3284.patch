diff --git twisted/test/crash_test_dummy.py twisted/test/crash_test_dummy.py
index 5a30bd4..74a7be1 100644
--- twisted/test/crash_test_dummy.py
+++ twisted/test/crash_test_dummy.py
@@ -2,6 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import print_function
 
 from twisted.python import components
 from zope.interface import implements, Interface
@@ -14,7 +15,7 @@ class X:
         self.x = x
 
     def do(self):
-        #print 'X',self.x,'doing!'
+        # print('X',self.x,'doing!')
         pass
 
 
diff --git twisted/test/iosim.py twisted/test/iosim.py
index afa80f9..a486526 100644
--- twisted/test/iosim.py
+++ twisted/test/iosim.py
@@ -6,6 +6,8 @@
 Utilities and helpers for simulating a network
 """
 
+from __future__ import print_function
+
 import itertools
 
 try:
@@ -182,8 +184,11 @@ def makeFakeServer(s):
     ft.protocol = s
     return ft
 
+
+
 class IOPump:
-    """Utility to pump data between clients and servers for protocol testing.
+    """
+    Utility to pump data between clients and servers for protocol testing.
 
     Perhaps this is a utility worthy of being in protocol.py?
     """
@@ -194,8 +199,10 @@ class IOPump:
         self.serverIO = serverIO
         self.debug = debug
 
+
     def flush(self, debug=False):
-        """Pump until there is no more input or output.
+        """
+        Pump until there is no more input or output.
 
         Returns whether any data was moved.
         """
@@ -211,23 +218,24 @@ class IOPump:
 
 
     def pump(self, debug=False):
-        """Move data back and forth.
+        """
+        Move data back and forth.
 
         Returns whether any data was moved.
         """
         if self.debug or debug:
-            print '-- GLUG --'
+            print('-- GLUG --')
         sData = self.serverIO.getOutBuffer()
         cData = self.clientIO.getOutBuffer()
         self.clientIO._checkProducer()
         self.serverIO._checkProducer()
         if self.debug or debug:
-            print '.'
+            print('.')
             # XXX slightly buggy in the face of incremental output
             if cData:
-                print 'C: '+repr(cData)
+                print('C: ' + repr(cData))
             if sData:
-                print 'S: '+repr(sData)
+                print('S: ' + repr(sData))
         if cData:
             self.serverIO.bufferReceived(cData)
         if sData:
@@ -237,14 +245,14 @@ class IOPump:
         if (self.serverIO.disconnecting and
             not self.serverIO.disconnected):
             if self.debug or debug:
-                print '* C'
+                print('* C')
             self.serverIO.disconnected = True
             self.clientIO.disconnecting = True
             self.clientIO.reportDisconnect()
             return True
         if self.clientIO.disconnecting and not self.clientIO.disconnected:
             if self.debug or debug:
-                print '* S'
+                print('* S')
             self.clientIO.disconnected = True
             self.serverIO.disconnecting = True
             self.serverIO.reportDisconnect()
diff --git twisted/test/process_cmdline.py twisted/test/process_cmdline.py
index bd250de..b7f5737 100644
--- twisted/test/process_cmdline.py
+++ twisted/test/process_cmdline.py
@@ -1,5 +1,9 @@
-"""Write to stdout the command line args it received, one per line."""
+"""
+Write to stdout the command line args it received, one per line.
+"""
+from __future__ import print_function
 
 import sys
+
 for x in sys.argv[1:]:
-    print x
+    print(x)
diff --git twisted/test/process_fds.py twisted/test/process_fds.py
index e2273c1..51c48d2 100644
--- twisted/test/process_fds.py
+++ twisted/test/process_fds.py
@@ -1,40 +1,51 @@
-
-"""Write to a handful of file descriptors, to test the childFDs= argument of
+"""
+Write to a handful of file descriptors, to test the childFDs= argument of
 reactor.spawnProcess()
 """
 
+from __future__ import print_function
+
 import os, sys
 
 debug = 0
 
-if debug: stderr = os.fdopen(2, "w")
+if debug:
+    stderr = os.fdopen(2, "w")
 
-if debug: print >>stderr, "this is stderr"
+if debug:
+    print("this is stderr", file=stderr)
 
 abcd = os.read(0, 4)
-if debug: print >>stderr, "read(0):", abcd
+if debug:
+    print("read(0):", abcd, file=stderr)
 if abcd != "abcd":
     sys.exit(1)
 
-if debug: print >>stderr, "os.write(1, righto)"
+if debug:
+    print("os.write(1, righto)", file=stderr)
 
 os.write(1, "righto")
 
 efgh = os.read(3, 4)
-if debug: print >>stderr, "read(3):", efgh
+if debug:
+    print("read(3):", efgh, file=stderr)
 if efgh != "efgh":
     sys.exit(2)
 
-if debug: print >>stderr, "os.close(4)"
+if debug:
+    print("os.close(4)", file=stderr)
 os.close(4)
 
 eof = os.read(5, 4)
-if debug: print >>stderr, "read(5):", eof
+if debug:
+    print("read(5):", eof, file=stderr)
 if eof != "":
     sys.exit(3)
 
-if debug: print >>stderr, "os.write(1, closed)"
+if debug:
+    print("os.write(1, closed)", file=stderr)
 os.write(1, "closed")
 
-if debug: print >>stderr, "sys.exit(0)"
+if debug:
+    print("sys.exit(0)", file=stderr)
 sys.exit(0)
diff --git twisted/test/process_linger.py twisted/test/process_linger.py
index a95a8d2..eca3edd 100644
--- twisted/test/process_linger.py
+++ twisted/test/process_linger.py
@@ -1,13 +1,15 @@
-
-"""Write to a file descriptor and then close it, waiting a few seconds before
+"""
+Write to a file descriptor and then close it, waiting a few seconds before
 quitting. This serves to make sure SIGCHLD is actually being noticed.
 """
 
+from __future__ import print_function
+
 import os, sys, time
 
-print "here is some text"
+print("here is some text")
 time.sleep(1)
-print "goodbye"
+print("goodbye")
 os.close(1)
 os.close(2)
 
diff --git twisted/test/process_signal.py twisted/test/process_signal.py
index f2ff108..99b6660 100644
--- twisted/test/process_signal.py
+++ twisted/test/process_signal.py
@@ -1,8 +1,9 @@
+from __future__ import print_function
 import sys, signal
 
 signal.signal(signal.SIGINT, signal.SIG_DFL)
 if getattr(signal, "SIGHUP", None) is not None:
     signal.signal(signal.SIGHUP, signal.SIG_DFL)
-print 'ok, signal us'
+print('ok, signal us')
 sys.stdin.read()
 sys.exit(1)
diff --git twisted/test/process_twisted.py twisted/test/process_twisted.py
index 2071090..7dd99d0 100644
--- twisted/test/process_twisted.py
+++ twisted/test/process_twisted.py
@@ -1,4 +1,8 @@
-"""A process that reads from stdin and out using Twisted."""
+"""
+A process that reads from stdin and out using Twisted.
+"""
+
+from __future__ import print_function
 
 ### Twisted Preamble
 # This makes sure that users don't have to set up their environment
@@ -24,19 +28,19 @@ class Echo(protocol.Protocol):
     implements(interfaces.IHalfCloseableProtocol)
     
     def connectionMade(self):
-        print "connection made"
+        print("connection made")
     
     def dataReceived(self, data):
         self.transport.write(data)
 
     def readConnectionLost(self):
-        print "readConnectionLost"
+        print("readConnectionLost")
         self.transport.loseConnection()
     def writeConnectionLost(self):
-        print "writeConnectionLost"
+        print("writeConnectionLost")
     
     def connectionLost(self, reason):
-        print "connectionLost", reason
+        print("connectionLost", reason)
         reactor.stop()
 
 stdio.StandardIO(Echo())
diff --git twisted/test/test_banana.py twisted/test/test_banana.py
index c4b69de..4eec5fe 100644
--- twisted/test/test_banana.py
+++ twisted/test/test_banana.py
@@ -1,6 +1,8 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import print_function
+
 import StringIO
 import sys
 
@@ -203,7 +205,7 @@ class BananaTestCase(unittest.TestCase):
         # This variant doesn't segfault straight out in my environment.
         # Instead, it takes up large amounts of CPU and memory...
         #crashString = '\x00\x00\x00\x00\x01\x80'
-        # print repr(crashString)
+        # print(repr(crashString))
         #self.failUnlessRaises(Exception, self.enc.dataReceived, crashString)
         try:
             # should now raise MemoryError
diff --git twisted/test/test_dirdbm.py twisted/test/test_dirdbm.py
index 8bd240f..b23d53f 100644
--- twisted/test/test_dirdbm.py
+++ twisted/test/test_dirdbm.py
@@ -5,6 +5,8 @@
 Test cases for dirdbm module.
 """
 
+from __future__ import print_function
+
 import os, shutil, glob
 
 from twisted.trial import unittest
@@ -34,7 +36,7 @@ class DirDbmTestCase(unittest.TestCase):
         s = dirdbm.Shelf('dirdbm.rebuild.test')
         s['key'] = 'value'
         rebuild.rebuild(dirdbm)
-        # print s['key']
+        # print(s['key'])
 
 
     def testDbm(self):
diff --git twisted/test/test_doc.py twisted/test/test_doc.py
index 795fd87..f39e237 100644
--- twisted/test/test_doc.py
+++ twisted/test/test_doc.py
@@ -1,6 +1,8 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import print_function
+
 import inspect, glob
 from os import path
 
@@ -47,7 +49,7 @@ class DocCoverage(unittest.TestCase):
                 # This is testing doc coverage, not importability.
                 # (Really, I don't want to deal with the fact that I don't
                 #  have pyserial installed.)
-                # print e
+                # print(e)
                 pass
             else:
                 docless.extend(self.modulesInPackage(packageName, package))
diff --git twisted/test/test_internet.py twisted/test/test_internet.py
index 516258f..acd4863 100644
--- twisted/test/test_internet.py
+++ twisted/test/test_internet.py
@@ -5,7 +5,7 @@
 Tests for lots of functionality provided by L{twisted.internet}.
 """
 
-from __future__ import division, absolute_import
+from __future__ import division, absolute_import, print_function
 
 import os
 import sys
@@ -1015,10 +1015,10 @@ class Foo:
     def start(self):
         reactor.resolve('localhost').addBoth(self.done)
     def done(self, res):
-        print 'done', res
+        print('done ' + res)
         reactor.stop()
     def failed(self):
-        print 'failed'
+        print('failed')
         self.timer = None
         reactor.stop()
 f = Foo()
diff --git twisted/test/test_newcred.py twisted/test/test_newcred.py
index 01660cd..a71bae7 100644
--- twisted/test/test_newcred.py
+++ twisted/test/test_newcred.py
@@ -5,6 +5,7 @@
 Tests for L{twisted.cred}, now with 30% more starch.
 """
 
+from __future__ import print_function
 
 import hmac
 from zope.interface import implements, Interface
@@ -102,7 +103,7 @@ class NewCredTest(unittest.TestCase):
             l.append).addErrback(f.append)
         if f:
             raise f[0]
-        # print l[0].getBriefTraceback()
+        # print(l[0].getBriefTraceback())
         iface, impl, logout = l[0]
         # whitebox
         self.assertEqual(iface, ITestable)
diff --git twisted/test/test_persisted.py twisted/test/test_persisted.py
index 4a80791..7197dda 100644
--- twisted/test/test_persisted.py
+++ twisted/test/test_persisted.py
@@ -2,6 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import print_function
 
 # System Imports
 import sys
@@ -337,7 +338,7 @@ class AOTTestCase(unittest.TestCase):
         sio = StringIO.StringIO()
         sio.write(s)
         uj = aot.unjellyFromSource(aot.jellyToSource(sio))
-        # print repr(uj.__dict__)
+        # print(repr(uj.__dict__))
         assert uj.getvalue() == s
 
     def testFunkyReferences(self):
diff --git twisted/test/test_process.py twisted/test/test_process.py
index 353db31..2f88b62 100644
--- twisted/test/test_process.py
+++ twisted/test/test_process.py
@@ -5,6 +5,8 @@
 Test running processes.
 """
 
+from __future__ import print_function
+
 import gzip
 import os
 import sys
@@ -765,6 +767,8 @@ class TwoProcessProtocol(protocol.ProcessProtocol):
         self.finished = 1
         self.deferred.callback(None)
 
+
+
 class TestTwoProcessesBase:
     def setUp(self):
         self.processes = [None, None]
@@ -772,6 +776,7 @@ class TestTwoProcessesBase:
         self.done = 0
         self.verbose = 0
 
+
     def createProcesses(self, usePTY=0):
         exe = sys.executable
         scriptPath = util.sibpath(__file__, "process_reader.py")
@@ -783,27 +788,34 @@ class TestTwoProcessesBase:
                                      usePTY=usePTY)
             self.processes[num] = p
 
+
     def close(self, num):
-        if self.verbose: print "closing stdin [%d]" % num
+        if self.verbose: print("closing stdin [%d]" % num)
         p = self.processes[num]
         pp = self.pp[num]
         self.failIf(pp.finished, "Process finished too early")
         p.loseConnection()
-        if self.verbose: print self.pp[0].finished, self.pp[1].finished
+        if self.verbose: print(self.pp[0].finished, self.pp[1].finished)
+
 
     def _onClose(self):
         return defer.gatherResults([ p.deferred for p in self.pp ])
 
-    def testClose(self):
-        if self.verbose: print "starting processes"
+
+    def test_close(self):
+        if self.verbose: print("starting processes")
         self.createProcesses()
         reactor.callLater(1, self.close, 0)
         reactor.callLater(2, self.close, 1)
         return self._onClose()
 
+
+
 class TestTwoProcessesNonPosix(TestTwoProcessesBase, unittest.TestCase):
     pass
 
+
+
 class TestTwoProcessesPosix(TestTwoProcessesBase, unittest.TestCase):
     def tearDown(self):
         for pp, pr in zip(self.pp, self.processes):
@@ -816,35 +828,40 @@ class TestTwoProcessesPosix(TestTwoProcessesBase, unittest.TestCase):
                     pass
         return self._onClose()
 
+
     def kill(self, num):
-        if self.verbose: print "kill [%d] with SIGTERM" % num
+        if self.verbose: print("kill [%d] with SIGTERM" % num)
         p = self.processes[num]
         pp = self.pp[num]
         self.failIf(pp.finished, "Process finished too early")
         os.kill(p.pid, signal.SIGTERM)
-        if self.verbose: print self.pp[0].finished, self.pp[1].finished
+        if self.verbose: print(self.pp[0].finished, self.pp[1].finished)
+
 
-    def testKill(self):
-        if self.verbose: print "starting processes"
+    def test_kill(self):
+        if self.verbose: print("starting processes")
         self.createProcesses(usePTY=0)
         reactor.callLater(1, self.kill, 0)
         reactor.callLater(2, self.kill, 1)
         return self._onClose()
 
-    def testClosePty(self):
-        if self.verbose: print "starting processes"
+    def test_closePty(self):
+        if self.verbose: print("starting processes")
         self.createProcesses(usePTY=1)
         reactor.callLater(1, self.close, 0)
         reactor.callLater(2, self.close, 1)
         return self._onClose()
 
-    def testKillPty(self):
-        if self.verbose: print "starting processes"
+
+    def test_killPty(self):
+        if self.verbose: print("starting processes")
         self.createProcesses(usePTY=1)
         reactor.callLater(1, self.kill, 0)
         reactor.callLater(2, self.kill, 1)
         return self._onClose()
 
+
+
 class FDChecker(protocol.ProcessProtocol):
     state = 0
     data = ""
@@ -868,7 +885,7 @@ class FDChecker(protocol.ProcessProtocol):
                           % (childFD, data))
                 return
             self.data += data
-            #print "len", len(self.data)
+            # print("len", len(self.data))
             if len(self.data) == 6:
                 if self.data != "righto":
                     self.fail("got '%s' on fd1, expected 'righto'" \
@@ -876,7 +893,7 @@ class FDChecker(protocol.ProcessProtocol):
                     return
                 self.data = ""
                 self.state = 2
-                #print "state2", self.state
+                # print("state2", self.state)
                 self.transport.writeToChild(3, "efgh")
                 return
         if self.state == 2:
@@ -2135,7 +2152,8 @@ class PosixProcessTestCasePTY(unittest.TestCase, PosixProcessBase):
 
     def testBadArgs(self):
         pyExe = sys.executable
-        pyArgs = [pyExe, "-u", "-c", "print 'hello'"]
+        pyArgs = [pyExe, "-u", "-c",
+                "from __future__ import print_function; print('hello')"]
         p = Accumulator()
         self.assertRaises(ValueError, reactor.spawnProcess, p, pyExe, pyArgs,
             usePTY=1, childFDs={1:'r'})
@@ -2188,7 +2206,8 @@ class Win32ProcessTestCase(unittest.TestCase):
 
     def testBadArgs(self):
         pyExe = sys.executable
-        pyArgs = [pyExe, "-u", "-c", "print 'hello'"]
+        pyArgs = [pyExe, "-u", "-c",
+                "from __future__ import print_function; print('hello')"]
         p = Accumulator()
         self.assertRaises(ValueError,
             reactor.spawnProcess, p, pyExe, pyArgs, uid=1)
@@ -2258,7 +2277,8 @@ class Win32ProcessTestCase(unittest.TestCase):
         p = SimpleProtocol()
 
         pyExe = sys.executable
-        pyArgs = [pyExe, "-u", "-c", "print 'hello'"]
+        pyArgs = [pyExe, "-u", "-c",
+                "from __future__ import print_function; print('hello')"]
         proc = reactor.spawnProcess(p, pyExe, pyArgs)
 
         def cbConnected(transport):
diff --git twisted/test/test_tcp.py twisted/test/test_tcp.py
index 23d6ce9..00f1eb4 100644
--- twisted/test/test_tcp.py
+++ twisted/test/test_tcp.py
@@ -5,7 +5,7 @@
 Tests for implementations of L{IReactorTCP}.
 """
 
-from __future__ import division, absolute_import
+from __future__ import division, absolute_import, print_function
 
 import socket, random, errno
 from functools import wraps
@@ -868,6 +868,8 @@ class WriterProtocol(protocol.Protocol):
 
         self.transport.loseConnection()
 
+
+
 class ReaderProtocol(protocol.Protocol):
     def dataReceived(self, data):
         self.factory.data += data
diff --git twisted/test/test_threads.py twisted/test/test_threads.py
index 69ee19d..7c85310 100644
--- twisted/test/test_threads.py
+++ twisted/test/test_threads.py
@@ -6,7 +6,7 @@
 Test methods in twisted.internet.threads and reactor thread APIs.
 """
 
-from __future__ import division, absolute_import
+from __future__ import division, absolute_import, print_function
 
 import sys, os, time
 
diff --git twisted/topfiles/5812.misc twisted/topfiles/5812.misc
new file mode 100644
index 0000000..e69de29
