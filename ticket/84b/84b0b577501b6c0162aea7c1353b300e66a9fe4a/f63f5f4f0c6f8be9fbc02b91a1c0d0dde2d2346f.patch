Index: twisted/python/compat.py
===================================================================
--- twisted/python/compat.py	(revision 11659)
+++ twisted/python/compat.py	(working copy)
@@ -90,6 +90,25 @@
 
 import types, socket, struct
 
+# tempfile.mkstemp compatibility:
+import tempfile
+if not hasattr(tempfile, "mkstemp"):
+    def _mkstemp(suffix, prefix, dir, text=False):
+        """Helper implementation of tempfile.mkstemp for Python 2.2
+        """
+        fh = -1
+        fn = None
+        while fh < 0:
+            fn = tempfile.mktemp(suffix, prefix, dir)
+            attr = os.O_RDWR | os.O_CREAT | os.O_EXCL | \
+                   getattr(os, "O_NOINHERIT", 0) | \
+                   getattr(os, "O_NOFOLLOW", 0)
+            if not text:
+                attr = attr | getattr(os, "O_BINARY", 0)
+                fh = os.open(fn, attr, 0600)
+        return (fh, fn)
+    tempfile.mkstemp = _mkstemp
+
 # Compatibility with compatibility
 # We want to get rid of these as quickly as we can
 # Unfortunately some code imports them by name
Index: twisted/test/test_compat.py
===================================================================
--- twisted/test/test_compat.py	(revision 11659)
+++ twisted/test/test_compat.py	(working copy)
@@ -4,7 +4,7 @@
 
 from twisted.trial import unittest
 
-import os, sys, types
+import os, sys, types, tempfile
 
 class IterableCounter:
     def __init__(self, lim=0):
@@ -101,3 +101,44 @@
         self.assertEquals(' \tx x'.strip('\t '), 'x x')
         self.assertEquals(' x\t '.strip(' \t'), 'x')
         self.assertEquals('x x \t'.strip(' \t'), 'x x')
+
+class MkstempTestCase(unittest.TestCase):
+    def test_IsExported(self):
+        self.failUnless(hasattr(tempfile, "mkstemp"))
+
+    def failWithException(self, func):
+        self.fail("%s raised %s: %s" % \
+                  (func, sys.exc_info()[0], sys.exc_info()[1]))
+        
+
+    def doOneNameTest(self, dir=None, prefix="", suffix=""):
+        if dir is None:
+            edir = tempfile.gettempdir()
+        else:
+            edir = dir
+        edir = os.path.abspath(edir)
+        try:
+            (fh, name) = tempfile.mkstemp(dir=dir,
+                                          prefix=prefix,
+                                          suffix=suffix)
+            (cdir, cbase) = os.path.split(name)
+            self.assertEqual(edir,
+                             cdir,
+                             "Directory %r incorreclty returned as %r" % \
+                             (edir, cdir))
+            if prefix:
+                self.assert_(cbase.startswith(prefix))
+            if suffix:
+                self.assert_(cbase.endswith(suffix))
+            # clean up
+            os.unlink(name)
+            os.close(fh)
+        except:
+            self.failWithException("compat.mkstemp")
+    def test_Names(self):
+        self.doOneNameTest()
+        self.doOneNameTest(prefix="yacc")
+        self.doOneNameTest(suffix="exarkun")
+        self.doOneNameTest(prefix="glyph", suffix="radix")
+        
+    
