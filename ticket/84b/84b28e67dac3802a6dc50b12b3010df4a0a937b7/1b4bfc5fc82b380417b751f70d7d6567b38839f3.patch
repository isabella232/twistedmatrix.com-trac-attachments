Index: misnamed-method/twisted/trial/test/test_loader.py
===================================================================
--- misnamed-method/twisted/trial/test/test_loader.py	(revision 27386)
+++ misnamed-method/twisted/trial/test/test_loader.py	(working copy)
@@ -149,11 +149,15 @@
 
 
 class LoaderTest(packages.SysPathManglingTest):
+    """
+    Tests for L{trial.TestLoader}.
+    """
 
     def setUp(self):
         self.loader = runner.TestLoader()
         packages.SysPathManglingTest.setUp(self)
 
+
     def test_sortCases(self):
         import sample
         suite = self.loader.loadClass(sample.AlphabetTest)
@@ -166,12 +170,14 @@
         self.failUnlessEqual(newOrder,
                              [test._testMethodName for test in suite._tests])
 
+
     def test_loadMethod(self):
         import sample
         suite = self.loader.loadMethod(sample.FooTest.test_foo)
         self.failUnlessEqual(1, suite.countTestCases())
         self.failUnlessEqual('test_foo', suite._testMethodName)
 
+
     def test_loadFailingMethod(self):
         # test added for issue1353
         import erroneous
@@ -181,6 +187,7 @@
         self.failUnlessEqual(result.testsRun, 1)
         self.failUnlessEqual(len(result.failures), 1)
 
+
     def test_loadNonMethod(self):
         import sample
         self.failUnlessRaises(TypeError, self.loader.loadMethod, sample)
@@ -190,6 +197,43 @@
         self.failUnlessRaises(TypeError,
                               self.loader.loadMethod, ('foo', 'bar'))
 
+
+    def test_loadBadDecorator(self):
+        """
+        Load a decorated test method for which the decorator has failed to set
+        the method's __name__ correctly.
+        """
+        import sample
+        suite = self.loader.loadMethod(sample.DecorationTest.test_bad_decorator)
+        self.failUnlessEqual(1, suite.countTestCases())
+        self.failUnlessEqual('test_bad_decorator', suite._testMethodName)
+
+
+    def test_loadGoodDecorator(self):
+        """
+        Load a decorated test method for which the decorator has set the 
+        method's __name__ correctly.
+        """
+        import sample
+        suite = self.loader.loadMethod(
+            sample.DecorationTest.test_good_decorator)
+        self.failUnlessEqual(1, suite.countTestCases())
+        self.failUnlessEqual('test_good_decorator', suite._testMethodName)
+
+
+    def test_loadRenamedDecorator(self):
+        """
+        Load a decorated method which has been copied to a new name inside the 
+        class.  Thus its __name__ and its key in the class's __dict__ no 
+        longer match.
+        """
+        import sample
+        suite = self.loader.loadMethod(
+            sample.DecorationTest.test_renamed_decorator)
+        self.failUnlessEqual(1, suite.countTestCases())
+        self.failUnlessEqual('test_renamed_decorator', suite._testMethodName)
+
+
     def test_loadClass(self):
         import sample
         suite = self.loader.loadClass(sample.FooTest)
@@ -207,16 +251,19 @@
         self.failUnlessRaises(TypeError,
                               self.loader.loadClass, ('foo', 'bar'))
 
+
     def test_loadNonTestCase(self):
         import sample
         self.failUnlessRaises(ValueError, self.loader.loadClass,
                               sample.NotATest)
 
+
     def test_loadModule(self):
         import sample
         suite = self.loader.loadModule(sample)
-        self.failUnlessEqual(7, suite.countTestCases())
+        self.failUnlessEqual(10, suite.countTestCases())
 
+
     def test_loadNonModule(self):
         import sample
         self.failUnlessRaises(TypeError,
@@ -227,11 +274,13 @@
         self.failUnlessRaises(TypeError,
                               self.loader.loadModule, ('foo', 'bar'))
 
+
     def test_loadPackage(self):
         import goodpackage
         suite = self.loader.loadPackage(goodpackage)
         self.failUnlessEqual(7, suite.countTestCases())
 
+
     def test_loadNonPackage(self):
         import sample
         self.failUnlessRaises(TypeError,
@@ -242,50 +291,59 @@
         self.failUnlessRaises(TypeError,
                               self.loader.loadPackage, ('foo', 'bar'))
 
+
     def test_loadModuleAsPackage(self):
         import sample
         ## XXX -- should this instead raise a ValueError? -- jml
         self.failUnlessRaises(TypeError, self.loader.loadPackage, sample)
 
+
     def test_loadPackageRecursive(self):
         import goodpackage
         suite = self.loader.loadPackage(goodpackage, recurse=True)
         self.failUnlessEqual(14, suite.countTestCases())
 
+
     def test_loadAnythingOnModule(self):
         import sample
         suite = self.loader.loadAnything(sample)
         self.failUnlessEqual(sample.__name__,
                              suite._tests[0]._tests[0].__class__.__module__)
 
+
     def test_loadAnythingOnClass(self):
         import sample
         suite = self.loader.loadAnything(sample.FooTest)
         self.failUnlessEqual(2, suite.countTestCases())
 
+
     def test_loadAnythingOnMethod(self):
         import sample
         suite = self.loader.loadAnything(sample.FooTest.test_foo)
         self.failUnlessEqual(1, suite.countTestCases())
 
+
     def test_loadAnythingOnPackage(self):
         import goodpackage
         suite = self.loader.loadAnything(goodpackage)
         self.failUnless(isinstance(suite, self.loader.suiteFactory))
         self.failUnlessEqual(7, suite.countTestCases())
 
+
     def test_loadAnythingOnPackageRecursive(self):
         import goodpackage
         suite = self.loader.loadAnything(goodpackage, recurse=True)
         self.failUnless(isinstance(suite, self.loader.suiteFactory))
         self.failUnlessEqual(14, suite.countTestCases())
 
+
     def test_loadAnythingOnString(self):
         # the important thing about this test is not the string-iness
         # but the non-handledness.
         self.failUnlessRaises(TypeError,
                               self.loader.loadAnything, "goodpackage")
 
+
     def test_importErrors(self):
         import package
         suite = self.loader.loadPackage(package, recurse=True)
@@ -357,6 +415,7 @@
         names2.sort()
         self.assertEqual(names1, names2)
 
+
     def test_loadByNamesDuplicate(self):
         """
         Check that loadByNames ignores duplicate names
@@ -366,6 +425,7 @@
         suite2 = self.loader.loadByName(module, True)
         self.assertSuitesEqual(suite1, suite2)
 
+
     def test_loadDifferentNames(self):
         """
         Check that loadByNames loads all the names that it is given
Index: misnamed-method/twisted/trial/test/sample.py
===================================================================
--- misnamed-method/twisted/trial/test/sample.py	(revision 27386)
+++ misnamed-method/twisted/trial/test/sample.py	(working copy)
@@ -5,6 +5,7 @@
 
 import unittest as pyunit
 from twisted.trial import unittest
+from twisted.python.util import mergeFunctionMetadata
 
 class FooTest(unittest.TestCase):
     def test_foo(self):
@@ -14,6 +15,36 @@
         pass
 
 
+def bad_decorator(fn):
+    def name_collision(*args, **kwargs):
+        return fn(*args, **kwargs)
+    return name_collision
+
+
+def good_decorator(fn):
+    def name_collision(*args, **kwargs):
+        return fn(*args, **kwargs)
+    return mergeFunctionMetadata(fn, name_collision)
+    
+
+class DecorationTest(unittest.TestCase):
+    def test_bad_decorator(self):
+        pass
+    test_bad_decorator = bad_decorator(test_bad_decorator)
+
+    def test_good_decorator(self):
+        pass
+    test_good_decorator = good_decorator(test_good_decorator)
+
+    def renamed_decorator(self):
+        pass
+    test_renamed_decorator = good_decorator(renamed_decorator)
+
+    def name_collision(self):
+        # not a test
+        pass
+
+
 class PyunitTest(pyunit.TestCase):
     def test_foo(self):
         pass
Index: misnamed-method/twisted/trial/test/test_runner.py
===================================================================
--- misnamed-method/twisted/trial/test/test_runner.py	(revision 27386)
+++ misnamed-method/twisted/trial/test/test_runner.py	(working copy)
@@ -297,6 +297,9 @@
                                'startTest', 'addSuccess', 'stopTest',
                                'startTest', 'addSuccess', 'stopTest',
                                'startTest', 'addSuccess', 'stopTest',
+                               'startTest', 'addSuccess', 'stopTest',
+                               'startTest', 'addSuccess', 'stopTest',
+                               'startTest', 'addSuccess', 'stopTest',
                                'startTest', 'addSuccess', 'stopTest']
 
 
Index: misnamed-method/twisted/trial/runner.py
===================================================================
--- misnamed-method/twisted/trial/runner.py	(revision 27386)
+++ misnamed-method/twisted/trial/runner.py	(working copy)
@@ -130,7 +130,22 @@
     return fn
 
 
+def _getMethodNameInClass(method):
+    """
+    Find the attribute name on the method's class which refers to the method.
 
+    For some methods, notably decorators which have not had __name__ set correctly:
+
+    getattr(method.im_class, method.__name__) != method
+    """
+    if getattr(method.im_class, method.__name__, object()) != method:
+        for alias in dir(method.im_class):
+            if (hasattr(method.im_class, alias) and
+                getattr(method.im_class, alias) == method):
+                return alias
+    return method.__name__
+
+
 class DestructiveTestSuite(TestSuite):
     """
     A test suite which remove the tests once run, to minimize memory usage.
@@ -521,7 +536,7 @@
         """
         if not isinstance(method, types.MethodType):
             raise TypeError("%r not a method" % (method,))
-        return self._makeCase(method.im_class, method.__name__)
+        return self._makeCase(method.im_class, _getMethodNameInClass(method))
 
     def _makeCase(self, klass, methodName):
         return klass(methodName)
