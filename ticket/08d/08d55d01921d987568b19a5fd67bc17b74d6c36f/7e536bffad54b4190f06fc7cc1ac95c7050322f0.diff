Index: twisted/web/soap.py
===================================================================
--- twisted/web/soap.py	(revision 18490)
+++ twisted/web/soap.py	(working copy)
@@ -42,16 +42,11 @@
         """Lookup published SOAP function.
 
         Override in subclasses. Default behaviour - publish methods
-        starting with soap_, if they have true attribute useKeywords
-        they are expected to accept keywords.
+        starting with soap_.
         
-        @return: tuple (callable, useKeywords), or (None, None) if not found.
+        @return: tuple callable or None if not found.
         """
-        function = getattr(self, "soap_%s" % functionName, None)
-        if function:
-            return function, getattr(function, "useKeywords", False)
-        else:
-            return None
+        return getattr(self, "soap_%s" % functionName, None)
     
     def render(self, request):
         """Handle a SOAP command."""
@@ -67,7 +62,7 @@
         if callable(kwargs):
             kwargs = kwargs()
 
-        function, useKeywords = self.lookupFunction(methodName)
+        function = self.lookupFunction(methodName)
         
         if not function:
             self._methodNotFound(request, methodName)
Index: twisted/web/test/test_soap.py
===================================================================
--- twisted/web/test/test_soap.py	(revision 18490)
+++ twisted/web/test/test_soap.py	(working copy)
@@ -6,8 +6,6 @@
 
 """Test SOAP support."""
 
-import time
-
 try:
     import SOAPpy
 except ImportError:
@@ -18,9 +16,8 @@
     SOAPPublisher = soap.SOAPPublisher
 
 from twisted.trial import unittest
-from twisted.web import server
+from twisted.web import server, error
 from twisted.internet import reactor, defer
-from twisted.python import log
 
 
 class Test(SOAPPublisher):
@@ -92,5 +89,16 @@
         # We now return to our regularly scheduled program, already in progress.
         return defer.DeferredList(dl, fireOnOneErrback=True)
 
+    def testMethodNotFound(self):
+        """
+        Check that a non existing method return error 500.
+        """
+        d = self.proxy().callRemote('doesntexist')
+        self.assertFailure(d, error.Error)
+        def cb(err):
+            self.assertEquals(int(err.status), 500)
+        d.addCallback(cb)
+        return d
+
 if not SOAPpy:
     SOAPTestCase.skip = "SOAPpy not installed"
