Index: twisted/web/http.py
===================================================================
--- twisted/web/http.py	(revision 37979)
+++ twisted/web/http.py	(working copy)
@@ -585,6 +585,9 @@
     content = None
     _forceSSL = 0
     _disconnected = False
+    _queuedRequests = 0 # number of total pipelined requests currently in queue
+    _maxQueuedRequests = 8
+    _pauseFlag = False
 
     def __init__(self, channel, queued):
         """
@@ -600,7 +603,16 @@
         self.responseHeaders = Headers()
         self.cookies = [] # outgoing cookies
 
+        if self._pauseFlag and self._queuedRequests < self._maxQueuedRequests:
+			_pauseFlag = False            
+			producer.resumeProducing()          
+        if not self._pauseFlag and self._queuedRequests >= self._maxQueuedRequests:
+			_pauseFlag = True            
+			producer.pauseProducing()
+            
+
         if queued:
+            self._queuedRequests += 1
             self.transport = StringTransport()
         else:
             self.transport = self.channel.transport
@@ -634,6 +646,8 @@
         """
         Called when have finished responding and are no longer queued.
         """
+        if self._queuedRequests > 0:
+            self._queuedRequests -= 1
         if self.producer:
             log.err(RuntimeError("Producer was not unregistered for %s" % self.uri))
             self.unregisterProducer()
Index: twisted/web/test/test_http.py
===================================================================
--- twisted/web/test/test_http.py	(revision 37979)
+++ twisted/web/test/test_http.py	(working copy)
@@ -1698,8 +1698,19 @@
             '<Otherwise at 0x%x method=(no method yet) uri=(no uri yet) '
             'clientproto=(no clientproto yet)>' % (id(request),))
 
+	def test_maxQueuedRequests(self):
+		"""
+		Creates 9 pipelined requests to check whether requests are limited to 8
+		"""
+		channel = DummyChannel()
+		req = [http.Request(channel, True) for i in xrange(8)]
+		self.assertTrue(Request._pauseFlag == False)	
+		req[0].noLongerQueued()
+		req[1].noLongerQueued()
+		self.assertTrue(Request._pauseFlag == False)
 
 
+
 class MultilineHeadersTestCase(unittest.TestCase):
     """
     Tests to exercise handling of multiline headers by L{HTTPClient}.  RFCs 1945
