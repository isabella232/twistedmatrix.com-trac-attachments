Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 22635)
+++ twisted/python/filepath.py	(working copy)
@@ -176,17 +176,24 @@
             raise UnlistableError(ose)
         return map(self.child, subnames)
 
-    def walk(self):
+    def walk(self, exclude=None):
         """
         Yield myself, then each of my children, and each of those children's
         children in turn.
 
+        @param exclude: optional list of directory base names to exclude in
+        traversal. (Note: the root directory is traversed regardless of
+        values in exclude)
+
         @return: a generator yielding FilePath-like objects.
         """
         yield self
+        exclude = exclude or []
         if self.isdir():
             for c in self.children():
-                for subc in c.walk():
+                if c.isdir() and c.basename() in exclude:
+                    continue
+                for subc in c.walk(exclude=exclude):
                     yield subc
 
     def sibling(self, path):
Index: twisted/test/test_paths.py
===================================================================
--- twisted/test/test_paths.py	(revision 22635)
+++ twisted/test/test_paths.py	(working copy)
@@ -73,6 +73,15 @@
         x.sort()
         self.assertEquals(x, self.all)
 
+    def test_walkExclusions(self):
+        """Verify that directories we declure for exclusion are actually excluded.
+        """
+        sub3 = self.path.child('sub3')
+        for p in self.path.walk(exclude=['sub3']):
+            if p == sub3 or p in sub3.children():
+                self.fail('Should not have encountered sub3 or children in walk')
+
+
     def test_validSubdir(self):
         """Verify that a valid subdirectory will show up as a directory, but not as a
         file, not as a symlink, and be listable.
