diff --git a/doc/core/man/trial.1 b/doc/core/man/trial.1
index 009c25d..8a2ebd6 100644
--- a/doc/core/man/trial.1
+++ b/doc/core/man/trial.1
@@ -116,6 +116,10 @@ the default, except it makes tests run about ten times slower.
 \fB-h\fR, \fB--help\fR
 Print a usage message to standard output, then exit.
 .TP
+\fB--help-order\fR
+Print a list of possible orders that TestCase test methods can be run in, then
+exit. The orders can be used with the --order option described below.
+.TP
 \fB--help-reporters\fR
 Print a list of valid reporters to standard output, then exit. Reporters can
 be selected with the --reporter option described below.
@@ -140,6 +144,11 @@ every subpackage.  Unless, that is, you specify this option.
 Don't automatically jump into debugger for post-mortem analysis of
 exceptions.  Only usable in conjunction with --debug.
 .TP
+\fB--order\fR \fIorder\fR
+Specify what order to run the individual test methods within the given
+TestCases. By default, they are run alphabetically. See --help-order for a list
+of other valid values.
+.TP
 \fB--profile\fR
 Run tests under the Python profiler.
 .TP
diff --git a/twisted/scripts/trial.py b/twisted/scripts/trial.py
index f317841..a5eea75 100644
--- a/twisted/scripts/trial.py
+++ b/twisted/scripts/trial.py
@@ -4,7 +4,8 @@
 # See LICENSE for details.
 
 
-import sys, os, random, gc, pdb, time, warnings
+from __future__ import print_function
+import sys, os, random, gc, pdb, time, warnings, inspect
 
 from twisted.internet import defer
 from twisted.application import app
@@ -95,6 +96,16 @@ def _reporterAction():
 
 
 
+# orders which can be passed to trial --order
+_run_orders = [
+    ("alphabetical",
+     "alphabetical order for test methods, arbitrary order for test cases"),
+    ("toptobottom",
+     "attempt to run test cases and methods in the order they were defined"),
+]
+
+
+
 class _BasicOptions(object):
     """
     Basic options shared between trial and its local workers.
@@ -107,6 +118,7 @@ class _BasicOptions(object):
 
     optFlags = [["help", "h"],
                 ["no-recurse", "N", "Don't recurse into packages"],
+                ['help-orders', None, "Help on available test running orders"],
                 ['help-reporters', None,
                  "Help on available output plugins (reporters)"],
                 ["rterrors", "e", "realtime errors, print out tracebacks as "
@@ -118,6 +130,8 @@ class _BasicOptions(object):
                 ]
 
     optParameters = [
+        ["order", "o", None, "Specify what order to run test cases and methods"
+         ". See --help-orders for more info."],
         ["random", "z", None,
          "Run tests in random order using the specified seed"],
         ['temp-directory', None, '_trial_temp',
@@ -127,7 +141,9 @@ class _BasicOptions(object):
          'more info.']]
 
     compData = usage.Completions(
-        optActions={"reporter": _reporterAction,
+        optActions={"order": usage.CompleteList(
+                        name for name, _ in _run_orders),
+                    "reporter": _reporterAction,
                     "logfile": usage.CompleteFiles(descr="log file name"),
                     "random": usage.Completer(descr="random seed")},
         extraActions=[usage.CompleteFiles(
@@ -150,7 +166,7 @@ class _BasicOptions(object):
         """
         coverdir = 'coverage'
         result = FilePath(self['temp-directory']).child(coverdir)
-        print "Setting coverage directory to %s." % (result.path,)
+        print("Setting coverage directory to %s." % (result.path,))
         return result
 
 
@@ -197,14 +213,24 @@ class _BasicOptions(object):
         sys.settrace(spewer)
 
 
+    def opt_help_orders(self):
+        synopsis = ("Trial can attempt to run test cases and their methods in "
+                    "a few different\n orders. You can select any of the "
+                    "following options using --order=<foo>.\n")
+
+        print(synopsis)
+        for name, description in _run_orders:
+            print('   ', name, '\t', description)
+        sys.exit(0)
+
+
     def opt_help_reporters(self):
         synopsis = ("Trial's output can be customized using plugins called "
                     "Reporters. You can\nselect any of the following "
                     "reporters using --reporter=<foo>\n")
-        print synopsis
+        print(synopsis)
         for p in plugin.getPlugins(itrial.IReporter):
-            print '   ', p.longOpt, '\t', p.description
-        print
+            print('   ', p.longOpt, '\t', p.description)
         sys.exit(0)
 
 
@@ -229,6 +255,21 @@ class _BasicOptions(object):
                 "tbformat must be 'plain', 'emacs', or 'cgitb'.")
 
 
+    def opt_order(self, order):
+        """
+        Run the tests in the given order.
+
+        """
+
+        if order == "toptobottom":
+            self['order'] = _maybeFindSourceLine
+        elif order == "alphabetical":
+            self['order'] = runner.name
+        else:
+            orders = ", ".join(repr(order) for order, _ in _run_orders)
+            raise usage.UsageError("order must be one of " + orders)
+
+
     def opt_recursionlimit(self, arg):
         """
         see sys.setrecursionlimit()
@@ -404,13 +445,34 @@ def _getSuite(config):
 
 
 
+def _maybeFindSourceLine(thing):
+    """
+    Try to find the source line of the given test thing.
+
+    """
+
+    method = getattr(thing, "_testMethodName", None)
+    if method is not None:
+        thing = getattr(thing, method)
+
+    try:
+        return inspect.getsourcelines(thing)[1]
+    except (IOError, TypeError):
+        # either thing is a module, which raised a TypeError, or the file
+        # couldn't be read
+        return -1
+
+
+
 def _getLoader(config):
     loader = runner.TestLoader()
     if config['random']:
         randomer = random.Random()
         randomer.seed(config['random'])
         loader.sorter = lambda x : randomer.random()
-        print 'Running tests shuffled with seed %d\n' % config['random']
+        print('Running tests shuffled with seed %d\n' % config['random'])
+    elif config['order']:
+        loader.sorter = config['order']
     if not config['until-failure']:
         loader.suiteFactory = runner.DestructiveTestSuite
     return loader
@@ -426,7 +488,7 @@ def _wrappedPdb():
     try:
         import readline
     except ImportError:
-        print "readline module not available"
+        print("readline module not available")
         sys.exc_clear()
     for path in ('.pdbrc', 'pdbrc'):
         if os.path.exists(path):
diff --git a/twisted/topfiles/5787.feature b/twisted/topfiles/5787.feature
new file mode 100644
index 0000000..7a7d97b
--- /dev/null
+++ b/twisted/topfiles/5787.feature
@@ -0,0 +1 @@
+trial now accepts a --order option that specifies what order to run TestCase methods in.
diff --git a/twisted/trial/test/ordertests.py b/twisted/trial/test/ordertests.py
new file mode 100644
index 0000000..09c6e0d
--- /dev/null
+++ b/twisted/trial/test/ordertests.py
@@ -0,0 +1,34 @@
+from twisted.trial import unittest
+
+
+class FooTest(unittest.TestCase):
+    """
+    Used to make assertions about the order its tests will be run in.
+    """
+
+    def test_first(self):
+        pass
+
+
+    def test_second(self):
+        pass
+
+
+    def test_third(self):
+        pass
+
+
+    def test_fourth(self):
+        pass
+
+
+
+class BazTest(unittest.TestCase):
+    def test_baz(self):
+        pass
+
+
+
+class BarTest(unittest.TestCase):
+    def test_bar(self):
+        pass
diff --git a/twisted/trial/test/test_script.py b/twisted/trial/test/test_script.py
index d92d9f8..5659a3b 100644
--- a/twisted/trial/test/test_script.py
+++ b/twisted/trial/test/test_script.py
@@ -594,3 +594,74 @@ class TestRun(unittest.TestCase):
             self.assertIn("foo", str(e))
         else:
             self.fail("Should have exited due to non-existent debugger!")
+
+
+
+class OrderTests(unittest.TestCase):
+    """
+    Tests for the --order option.
+    """
+
+
+    def setUp(self):
+        self.config = trial.Options()
+
+
+    def tearDown(self):
+        self.config = None
+
+
+    def test_alphabetical(self):
+        """
+        --alphabetical runs test methods alphabetically.
+        """
+
+        self.config.parseOptions([
+            "--order", "alphabetical",
+            "twisted.trial.test.ordertests.FooTest"])
+
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+        testCase, = suite._tests
+
+        self.assertEqual(
+            ['test_first', 'test_fourth', 'test_second', 'test_third'],
+            [test._testMethodName for test in testCase._tests])
+
+
+    def test_toptobottom(self):
+        """
+        --toptobottom runs test methods in the order defined in their source.
+        """
+
+        self.config.parseOptions([
+            "--order", "toptobottom",
+            "twisted.trial.test.ordertests.FooTest"])
+
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+        testCase, = suite._tests
+
+        self.assertEqual(
+            ['test_first', 'test_second', 'test_third', 'test_fourth'],
+            [test._testMethodName for test in testCase._tests])
+
+
+    def test_toptobottom_module(self):
+        """
+        --toptobottom sorts test cases in a module from top to bottom.
+        """
+
+        self.config.parseOptions([
+            "--order", "toptobottom", "twisted.trial.test.ordertests"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+
+        self.assertEqual(
+            testNames(suite), [
+            'twisted.trial.test.ordertests.FooTest.test_first',
+            'twisted.trial.test.ordertests.FooTest.test_second',
+            'twisted.trial.test.ordertests.FooTest.test_third',
+            'twisted.trial.test.ordertests.FooTest.test_fourth',
+            'twisted.trial.test.ordertests.BazTest.test_baz',
+            'twisted.trial.test.ordertests.BarTest.test_bar'])
