diff --git a/twisted/scripts/trial.py b/twisted/scripts/trial.py
index 349b0c6..2159a3e 100644
--- a/twisted/scripts/trial.py
+++ b/twisted/scripts/trial.py
@@ -4,7 +4,7 @@
 # See LICENSE for details.
 
 
-import sys, os, random, gc, time, warnings
+import sys, os, random, gc, time, warnings, inspect
 
 from twisted.internet import defer
 from twisted.application import app
@@ -93,6 +93,15 @@ def _reporterAction():
     return usage.CompleteList([p.longOpt for p in
                                plugin.getPlugins(itrial.IReporter)])
 
+
+# orders which can be passed to trial --order
+_run_orders = [
+    ("alphabetical", "alphabetical order (default)"),
+    ("toptobottom",
+     "attempt to run tests in the order they were defined on the test case"),
+]
+
+
 class Options(usage.Options, app.ReactorSelectionMixin):
     synopsis = """%s [options] [[file|package|module|TestCase|testmethod]...]
     """ % (os.path.basename(sys.argv[0]),)
@@ -117,12 +126,15 @@ class Options(usage.Options, app.ReactorSelectionMixin):
                  "Turn dirty reactor errors into warnings"],
                 ["until-failure", "u", "Repeat test until it fails"],
                 ["no-recurse", "N", "Don't recurse into packages"],
+                ['help-orders', None, "Help on available test running orders"],
                 ['help-reporters', None,
                  "Help on available output plugins (reporters)"]
                 ]
 
     optParameters = [
         ["logfile", "l", "test.log", "log file name"],
+        ["order", "o", None, "Specify what order to run tests "
+         "within each test case. See --help-orders for more info."],
         ["random", "z", None,
          "Run tests in random order using the specified seed"],
         ['temp-directory', None, '_trial_temp',
@@ -133,6 +145,8 @@ class Options(usage.Options, app.ReactorSelectionMixin):
 
     compData = usage.Completions(
         optActions={"tbformat": usage.CompleteList(["plain", "emacs", "cgitb"]),
+                    "order": usage.CompleteList(
+                        name for name, _ in _run_orders),
                     "reporter": _reporterAction,
                     "logfile": usage.CompleteFiles(descr="log file name"),
                     "random": usage.Completer(descr="random seed")},
@@ -203,6 +217,15 @@ class Options(usage.Options, app.ReactorSelectionMixin):
         sys.settrace(spewer)
 
 
+    def opt_help_orders(self):
+        synopsis = ("Trial can attempt to run the tests in each test case in a"
+                    " few different\n orders. You can select any of the "
+                    "following options using --order=<foo>\n.")
+
+        print synopsis
+        for name, description in _run_orders:
+            print '   ', name, '\t', description
+
     def opt_help_reporters(self):
         synopsis = ("Trial's output can be customized using plugins called "
                     "Reporters. You can\nselect any of the following "
@@ -249,6 +272,18 @@ class Options(usage.Options, app.ReactorSelectionMixin):
     opt_x = opt_extra
 
 
+    def opt_order(self, order):
+        """
+        Run the tests in the given order.
+
+        """
+
+        if order == "toptobottom":
+            self['order'] = _maybeFindSourceLine
+        else:
+            self['order'] = runner.name
+
+
     def opt_recursionlimit(self, arg):
         """
         see sys.setrecursionlimit()
@@ -333,6 +368,15 @@ def _getSuite(config):
     return loader.loadByNames(config['tests'], recurse)
 
 
+def _maybeFindSourceLine(test_case):
+    method = getattr(test_case, test_case._testMethodName)
+
+    try:
+        return inspect.getsourcelines(method)[1]
+    except IOError:
+        return -1
+
+
 
 def _getLoader(config):
     loader = runner.TestLoader()
@@ -341,6 +385,8 @@ def _getLoader(config):
         randomer.seed(config['random'])
         loader.sorter = lambda x : randomer.random()
         print 'Running tests shuffled with seed %d\n' % config['random']
+    elif config['order']:
+        loader.sorter = config['order']
     if not config['until-failure']:
         loader.suiteFactory = runner.DestructiveTestSuite
     return loader
diff --git a/twisted/trial/test/test_script.py b/twisted/trial/test/test_script.py
index 6c93ebe..5ff54e5 100644
--- a/twisted/trial/test/test_script.py
+++ b/twisted/trial/test/test_script.py
@@ -480,3 +480,62 @@ class ExtraTests(unittest.TestCase):
         self.assertDeprecationWarning(self.config.opt_extra,
                                       self.flushWarnings([self.test_xDeprecation]))
 
+
+
+class OrderTestCase(unittest.TestCase):
+    """
+    Test case used to make assertions about the order its tests will be run in.
+
+    """
+
+    def test_first(self):
+        pass
+
+    def test_second(self):
+        pass
+
+    def test_third(self):
+        pass
+
+    def test_fourth(self):
+        pass
+
+
+
+class OrderTests(unittest.TestCase):
+    """
+    Tests for the --order option.
+
+    """
+
+    def setUp(self):
+        self.config = trial.Options()
+
+    def tearDown(self):
+        self.config = None
+
+    def test_alphabetical(self):
+        """
+        Check for alphabetical test ordering.
+
+        """
+
+        self.config.parseOptions(["--order", "alphabetical"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadClass(OrderTestCase)
+        self.assertEqual(
+            ['test_first', 'test_fourth', 'test_second', 'test_third'],
+            [test._testMethodName for test in suite._tests])
+
+    def test_toptobottom(self):
+        """
+        Check that toptobottom runs tests in the order they were defined.
+
+        """
+
+        self.config.parseOptions(["--order", "toptobottom"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadClass(OrderTestCase)
+        self.assertEqual(
+            ['test_first', 'test_second', 'test_third', 'test_fourth'],
+            [test._testMethodName for test in suite._tests])
