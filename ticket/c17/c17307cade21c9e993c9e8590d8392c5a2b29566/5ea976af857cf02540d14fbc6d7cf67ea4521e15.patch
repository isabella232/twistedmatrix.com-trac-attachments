Index: twisted/scripts/trial.py
===================================================================
--- twisted/scripts/trial.py	(revision 35766)
+++ twisted/scripts/trial.py	(working copy)
@@ -4,7 +4,7 @@
 # See LICENSE for details.
 
 
-import sys, os, random, gc, time, warnings
+import sys, os, random, gc, time, warnings, inspect
 
 from twisted.internet import defer
 from twisted.application import app
@@ -95,6 +95,15 @@
 
 
 
+# orders which can be passed to trial --order
+_run_orders = [
+    ("alphabetical", "alphabetical order (default)"),
+    ("toptobottom",
+     "attempt to run tests in the order they were defined on the test case"),
+]
+
+
+
 class _BasicOptions(object):
     """
     Basic options shared between trial and its local workers.
@@ -107,6 +116,7 @@
 
     optFlags = [["help", "h"],
                 ["no-recurse", "N", "Don't recurse into packages"],
+                ['help-orders', None, "Help on available test running orders"],
                 ['help-reporters', None,
                  "Help on available output plugins (reporters)"],
                 ["rterrors", "e", "realtime errors, print out tracebacks as "
@@ -118,6 +128,8 @@
                 ]
 
     optParameters = [
+        ["order", "o", None, "Specify what order to run tests "
+         "within each test case. See --help-orders for more info."],
         ["random", "z", None,
          "Run tests in random order using the specified seed"],
         ['temp-directory', None, '_trial_temp',
@@ -127,7 +139,9 @@
          'more info.']]
 
     compData = usage.Completions(
-        optActions={"reporter": _reporterAction,
+        optActions={"order": usage.CompleteList(
+                        name for name, _ in _run_orders),
+                    "reporter": _reporterAction,
                     "logfile": usage.CompleteFiles(descr="log file name"),
                     "random": usage.Completer(descr="random seed")},
         extraActions=[usage.CompleteFiles(
@@ -197,6 +211,15 @@
         sys.settrace(spewer)
 
 
+    def opt_help_orders(self):
+        synopsis = ("Trial can attempt to run the tests in each test case in a"
+                    " few different\n orders. You can select any of the "
+                    "following options using --order=<foo>\n.")
+
+        print synopsis
+        for name, description in _run_orders:
+            print '   ', name, '\t', description
+
     def opt_help_reporters(self):
         synopsis = ("Trial's output can be customized using plugins called "
                     "Reporters. You can\nselect any of the following "
@@ -229,6 +252,18 @@
                 "tbformat must be 'plain', 'emacs', or 'cgitb'.")
 
 
+    def opt_order(self, order):
+        """
+        Run the tests in the given order.
+
+        """
+
+        if order == "toptobottom":
+            self['order'] = _maybeFindSourceLine
+        else:
+            self['order'] = runner.name
+
+
     def opt_recursionlimit(self, arg):
         """
         see sys.setrecursionlimit()
@@ -400,7 +435,16 @@
     return loader.loadByNames(config['tests'], recurse)
 
 
+def _maybeFindSourceLine(test_case):
+    method = getattr(test_case, test_case._testMethodName)
 
+    try:
+        return inspect.getsourcelines(method)[1]
+    except IOError:
+        return -1
+
+
+
 def _getLoader(config):
     loader = runner.TestLoader()
     if config['random']:
@@ -408,6 +452,8 @@
         randomer.seed(config['random'])
         loader.sorter = lambda x : randomer.random()
         print 'Running tests shuffled with seed %d\n' % config['random']
+    elif config['order']:
+        loader.sorter = config['order']
     if not config['until-failure']:
         loader.suiteFactory = runner.DestructiveTestSuite
     return loader
Index: twisted/trial/test/test_script.py
===================================================================
--- twisted/trial/test/test_script.py	(revision 35766)
+++ twisted/trial/test/test_script.py	(working copy)
@@ -549,3 +549,61 @@
         runner = trial._makeRunner(options)
         self.assertIsInstance(runner, TrialRunner)
         self.assertEqual(TrialRunner.DRY_RUN, runner.mode)
+
+
+
+
+
+class OrderTestCase(unittest.TestCase):
+    """
+    Test case used to make assertions about the order its tests will be run in.
+    """
+
+    def test_first(self):
+        pass
+
+    def test_second(self):
+        pass
+
+    def test_third(self):
+        pass
+
+    def test_fourth(self):
+        pass
+
+
+
+class OrderTests(unittest.TestCase):
+    """
+    Tests for the --order option.
+    """
+
+    def setUp(self):
+        self.config = trial.Options()
+
+    def tearDown(self):
+        self.config = None
+
+    def test_alphabetical(self):
+        """
+        Check for alphabetical test ordering.
+        """
+
+        self.config.parseOptions(["--order", "alphabetical"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadClass(OrderTestCase)
+        self.assertEqual(
+            ['test_first', 'test_fourth', 'test_second', 'test_third'],
+            [test._testMethodName for test in suite._tests])
+
+    def test_toptobottom(self):
+        """
+        Check that toptobottom runs tests in the order they were defined.
+        """
+
+        self.config.parseOptions(["--order", "toptobottom"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadClass(OrderTestCase)
+        self.assertEqual(
+            ['test_first', 'test_second', 'test_third', 'test_fourth'],
+            [test._testMethodName for test in suite._tests])
