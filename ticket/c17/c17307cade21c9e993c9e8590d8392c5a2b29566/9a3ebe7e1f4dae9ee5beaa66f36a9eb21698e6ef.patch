diff --git a/doc/core/man/trial.1 b/doc/core/man/trial.1
index 1bbdd58..00c491c 100644
--- a/doc/core/man/trial.1
+++ b/doc/core/man/trial.1
@@ -117,6 +117,10 @@ the default, except it makes tests run about ten times slower.
 \fB-h\fR, \fB--help\fR
 Print a usage message to standard output, then exit.
 .TP
+\fB--help-order\fR
+Print a list of possible orders that TestCase test methods can be run in, then
+exit. The orders can be used with the --order option described below.
+.TP
 \fB--help-reporters\fR
 Print a list of valid reporters to standard output, then exit. Reporters can
 be selected with the --reporter option described below.
@@ -141,6 +145,11 @@ every subpackage.  Unless, that is, you specify this option.
 Don't automatically jump into debugger for post-mortem analysis of
 exceptions.  Only usable in conjunction with --debug.
 .TP
+\fB--order\fR \fIorder\fR
+Specify what order to run the individual test methods within the given
+TestCases. By default, they are run alphabetically. See --help-order for a list
+of other valid values.
+.TP
 \fB--profile\fR
 Run tests under the Python profiler.
 .TP
@@ -204,7 +213,7 @@ Written by Jonathan M. Lange
 .SH "REPORTING BUGS"
 To report a bug, visit http://twistedmatrix.com/trac/newticket
 .SH COPYRIGHT
-Copyright \(co 2003-2011 Twisted Matrix Laboratories
+Copyright \(co 2003-2013 Twisted Matrix Laboratories
 .br
 This is free software; see the source for copying conditions.  There is NO
 warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
diff --git a/twisted/scripts/trial.py b/twisted/scripts/trial.py
index 46859d5..32a2835 100644
--- a/twisted/scripts/trial.py
+++ b/twisted/scripts/trial.py
@@ -4,7 +4,16 @@
 # See LICENSE for details.
 
 
-import sys, os, random, gc, pdb, time, warnings
+from __future__ import print_function
+import dis
+import gc
+import inspect
+import os
+import pdb
+import random
+import sys
+import time
+import warnings
 
 from twisted.internet import defer
 from twisted.application import app
@@ -94,6 +103,16 @@ def _reporterAction():
 
 
 
+# orders which can be passed to trial --order
+_runOrders = [
+    ("alphabetical",
+     "alphabetical order for test methods, arbitrary order for test cases"),
+    ("toptobottom",
+     "attempt to run test cases and methods in the order they were defined"),
+]
+
+
+
 class _BasicOptions(object):
     """
     Basic options shared between trial and its local workers.
@@ -106,6 +125,7 @@ class _BasicOptions(object):
 
     optFlags = [["help", "h"],
                 ["no-recurse", "N", "Don't recurse into packages"],
+                ['help-orders', None, "Help on available test running orders"],
                 ['help-reporters', None,
                  "Help on available output plugins (reporters)"],
                 ["rterrors", "e", "realtime errors, print out tracebacks as "
@@ -117,6 +137,8 @@ class _BasicOptions(object):
                 ]
 
     optParameters = [
+        ["order", "o", None, "Specify what order to run test cases and methods"
+         ". See --help-orders for more info."],
         ["random", "z", None,
          "Run tests in random order using the specified seed"],
         ['temp-directory', None, '_trial_temp',
@@ -126,7 +148,9 @@ class _BasicOptions(object):
          'more info.']]
 
     compData = usage.Completions(
-        optActions={"reporter": _reporterAction,
+        optActions={"order": usage.CompleteList(
+                        name for name, _ in _runOrders),
+                    "reporter": _reporterAction,
                     "logfile": usage.CompleteFiles(descr="log file name"),
                     "random": usage.Completer(descr="random seed")},
         extraActions=[usage.CompleteFiles(
@@ -149,7 +173,7 @@ class _BasicOptions(object):
         """
         coverdir = 'coverage'
         result = FilePath(self['temp-directory']).child(coverdir)
-        print "Setting coverage directory to %s." % (result.path,)
+        print("Setting coverage directory to %s." % (result.path,))
         return result
 
 
@@ -196,14 +220,24 @@ class _BasicOptions(object):
         sys.settrace(spewer)
 
 
+    def opt_help_orders(self):
+        synopsis = ("Trial can attempt to run test cases and their methods in "
+                    "a few different\n orders. You can select any of the "
+                    "following options using --order=<foo>.\n")
+
+        print(synopsis)
+        for name, description in _runOrders:
+            print('   ', name, '\t', description)
+        sys.exit(0)
+
+
     def opt_help_reporters(self):
         synopsis = ("Trial's output can be customized using plugins called "
                     "Reporters. You can\nselect any of the following "
                     "reporters using --reporter=<foo>\n")
-        print synopsis
+        print(synopsis)
         for p in plugin.getPlugins(itrial.IReporter):
-            print '   ', p.longOpt, '\t', p.description
-        print
+            print('   ', p.longOpt, '\t', p.description)
         sys.exit(0)
 
 
@@ -228,6 +262,22 @@ class _BasicOptions(object):
                 "tbformat must be 'plain', 'emacs', or 'cgitb'.")
 
 
+    def opt_order(self, order):
+        """
+        Run the tests in the given order.
+
+        @param order: a test ordering
+        """
+
+        if order == "toptobottom":
+            self['order'] = _maybeFindSourceLine
+        elif order == "alphabetical":
+            self['order'] = runner.name
+        else:
+            orders = ", ".join(repr(order) for order, _ in _runOrders)
+            raise usage.UsageError("order must be one of " + orders)
+
+
     def opt_recursionlimit(self, arg):
         """
         see sys.setrecursionlimit()
@@ -403,13 +453,45 @@ def _getSuite(config):
 
 
 
+def _maybeFindSourceLine(thing):
+    """
+    Try to find the source line of the given test thing.
+
+
+    @param testThing: a test method or class
+    @rtype: int
+    @return: the starting source line, or -1 if one couldn't be found
+    """
+
+    method = getattr(thing, "_testMethodName", None)
+    if method is not None:
+        thing = getattr(thing, method)
+
+    # If it's a function, we can get the line number even if the source file no
+    # longer exists
+    code = getattr(thing, "func_code", None)
+    if code is not None:
+        _, startLine = next(dis.findlinestarts(code))
+        return startLine
+
+    try:
+        return inspect.getsourcelines(thing)[1]
+    except (IOError, TypeError):
+        # either thing is a module, which raised a TypeError, or the file
+        # couldn't be read
+        return -1
+
+
+
 def _getLoader(config):
     loader = runner.TestLoader()
     if config['random']:
         randomer = random.Random()
         randomer.seed(config['random'])
         loader.sorter = lambda x : randomer.random()
-        print 'Running tests shuffled with seed %d\n' % config['random']
+        print('Running tests shuffled with seed %d\n' % config['random'])
+    elif config['order']:
+        loader.sorter = config['order']
     if not config['until-failure']:
         loader.suiteFactory = runner.DestructiveTestSuite
     return loader
@@ -425,7 +507,7 @@ def _wrappedPdb():
     try:
         import readline
     except ImportError:
-        print "readline module not available"
+        print("readline module not available")
         sys.exc_clear()
     for path in ('.pdbrc', 'pdbrc'):
         if os.path.exists(path):
diff --git a/twisted/topfiles/5787.feature b/twisted/topfiles/5787.feature
new file mode 100644
index 0000000..5a98086
--- /dev/null
+++ b/twisted/topfiles/5787.feature
@@ -0,0 +1 @@
+trial now accepts an --order option that specifies what order to run TestCase methods in.
diff --git a/twisted/trial/test/ordertests.py b/twisted/trial/test/ordertests.py
new file mode 100644
index 0000000..ee9c538
--- /dev/null
+++ b/twisted/trial/test/ordertests.py
@@ -0,0 +1,50 @@
+# -*- test-case-name: twisted.trial.test.test_script -*-
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for handling of trial's --order option.
+"""
+
+from twisted.trial import unittest
+
+
+class FooTest(unittest.TestCase):
+    """
+    Used to make assertions about the order its tests will be run in.
+    """
+
+    def test_first(self):
+        pass
+
+
+    def test_second(self):
+        pass
+
+
+    def test_third(self):
+        pass
+
+
+    def test_fourth(self):
+        pass
+
+
+
+class BazTest(unittest.TestCase):
+    """
+    Used to make assertions about the order the test cases in this module are
+    run in.
+    """
+    def test_baz(self):
+        pass
+
+
+
+class BarTest(unittest.TestCase):
+    """
+    Used to make assertions about the order the test cases in this module are
+    run in.
+    """
+    def test_bar(self):
+        pass
diff --git a/twisted/trial/test/test_script.py b/twisted/trial/test/test_script.py
index 45a254b..aa03550 100644
--- a/twisted/trial/test/test_script.py
+++ b/twisted/trial/test/test_script.py
@@ -1,8 +1,12 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+import StringIO
 import gc
-import StringIO, sys, types
+import re
+import sys
+import textwrap
+import types
 
 from twisted.trial import unittest
 from twisted.trial.runner import (
@@ -624,3 +628,187 @@ class TestArgumentOrderTests(unittest.TestCase):
         expectedNames = testNames(expectedSuite)
 
         self.assertEqual(names, expectedNames)
+
+
+
+class OrderTests(unittest.TestCase):
+    """
+    Tests for the --order option.
+    """
+    def setUp(self):
+        self.config = trial.Options()
+
+
+    def test_alphabetical(self):
+        """
+        --order=alphabetical causes trial to run tests alphabetically within
+        each test case.
+        """
+        self.config.parseOptions([
+            "--order", "alphabetical",
+            "twisted.trial.test.ordertests.FooTest"])
+
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+
+        self.assertEqual(
+            testNames(suite), [
+            'twisted.trial.test.ordertests.FooTest.test_first',
+            'twisted.trial.test.ordertests.FooTest.test_fourth',
+            'twisted.trial.test.ordertests.FooTest.test_second',
+            'twisted.trial.test.ordertests.FooTest.test_third'])
+
+
+    def test_alphabeticalModule(self):
+        """
+        --order=alphabetical causes trial to run test classes within a given
+        module alphabetically.
+        """
+        self.config.parseOptions([
+            "--order", "alphabetical", "twisted.trial.test.ordertests"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+
+        self.assertEqual(
+            testNames(suite), [
+            'twisted.trial.test.ordertests.BarTest.test_bar',
+            'twisted.trial.test.ordertests.BazTest.test_baz',
+            'twisted.trial.test.ordertests.FooTest.test_first',
+            'twisted.trial.test.ordertests.FooTest.test_fourth',
+            'twisted.trial.test.ordertests.FooTest.test_second',
+            'twisted.trial.test.ordertests.FooTest.test_third'])
+
+
+    def test_alphabeticalPackage(self):
+        """
+        --order=alphabetical causes trial to run test modules within a given
+        package alphabetically, with tests within each module alphabetized.
+        """
+        self.config.parseOptions([
+            "--order", "alphabetical", "twisted.trial.test"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+
+        names = testNames(suite)
+        self.assertTrue(names, msg="Failed to load any tests!")
+        self.assertEqual(names, sorted(names))
+
+
+    def test_toptobottom(self):
+        """
+        --order=toptobottom causes trial to run test methods within a given
+        test case from top to bottom as they are defined in the body of the
+        class.
+        """
+        self.config.parseOptions([
+            "--order", "toptobottom",
+            "twisted.trial.test.ordertests.FooTest"])
+
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+
+        self.assertEqual(
+            testNames(suite), [
+            'twisted.trial.test.ordertests.FooTest.test_first',
+            'twisted.trial.test.ordertests.FooTest.test_second',
+            'twisted.trial.test.ordertests.FooTest.test_third',
+            'twisted.trial.test.ordertests.FooTest.test_fourth'])
+
+
+    def test_toptobottomModule(self):
+        """
+        --order=toptobottom causes trial to run test classes within a given
+        module from top to bottom as they are defined in the module's source.
+        """
+        self.config.parseOptions([
+            "--order", "toptobottom", "twisted.trial.test.ordertests"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+
+        self.assertEqual(
+            testNames(suite), [
+            'twisted.trial.test.ordertests.FooTest.test_first',
+            'twisted.trial.test.ordertests.FooTest.test_second',
+            'twisted.trial.test.ordertests.FooTest.test_third',
+            'twisted.trial.test.ordertests.FooTest.test_fourth',
+            'twisted.trial.test.ordertests.BazTest.test_baz',
+            'twisted.trial.test.ordertests.BarTest.test_bar'])
+
+
+    def test_toptobottomPackage(self):
+        """
+        --order=toptobottom causes trial to run test modules within a given
+        package alphabetically, with tests within each module run top to
+        bottom.
+        """
+        self.config.parseOptions([
+            "--order", "toptobottom", "twisted.trial.test"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadByNames(self.config['tests'])
+
+        names = testNames(suite)
+        self.assertEqual(
+            names, sorted(names, key=lambda name : name.partition(".")[0]),
+        )
+
+
+    def test_toptobottomMissingSource(self):
+        """
+        --order=toptobottom detects the source line of methods from modules
+        whose source file is missing.
+        """
+        tempdir = self.mktemp().encode('utf-8')
+        package = FilePath(tempdir).child(b'twisted_toptobottom_temp')
+        package.makedirs()
+        package.child(b'__init__.py').setContent(b'')
+        package.child(b'test_missing.py').setContent(textwrap.dedent(b'''
+        from twisted.trial.unittest import TestCase
+        class TestMissing(TestCase):
+            def test_second(self): pass
+            def test_third(self): pass
+            def test_fourth(self): pass
+            def test_first(self): pass
+        '''))
+        pathEntry = package.parent().path.decode('utf-8')
+        sys.path.insert(0, pathEntry)
+        self.addCleanup(sys.path.remove, pathEntry)
+        from twisted_toptobottom_temp import test_missing
+        self.addCleanup(sys.modules.pop, 'twisted_toptobottom_temp')
+        self.addCleanup(sys.modules.pop, test_missing.__name__)
+        package.child(b'test_missing.py').remove()
+
+        self.config.parseOptions([
+            "--order", "toptobottom", "twisted.trial.test.ordertests"])
+        loader = trial._getLoader(self.config)
+        suite = loader.loadModule(test_missing)
+
+        self.assertEqual(
+            testNames(suite), [
+            'twisted_toptobottom_temp.test_missing.TestMissing.test_second',
+            'twisted_toptobottom_temp.test_missing.TestMissing.test_third',
+            'twisted_toptobottom_temp.test_missing.TestMissing.test_fourth',
+            'twisted_toptobottom_temp.test_missing.TestMissing.test_first'])
+
+
+
+class HelpOrderTests(unittest.TestCase):
+    """
+    Tests for the --help-orders flag.
+    """
+    def test_help_ordersPrintsSynopsisAndQuits(self):
+        """
+        --help-orders prints each of the available orders and then exits.
+        """
+        self.status = None
+        self.patch(
+            trial.sys, "exit", lambda status: setattr(self, "status", status))
+        self.patch(sys, "stdout", StringIO.StringIO())
+
+        trial.Options().parseOptions(["--help-orders"])
+
+        for orderName, orderDesc in trial._runOrders:
+            match = re.search(
+                "{0}.*{1}".format(orderName, orderDesc), sys.stdout.getvalue(),
+            )
+            self.assertTrue(match)
+        self.assertEqual(self.status, 0)
