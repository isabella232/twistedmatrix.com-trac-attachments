Index: twisted/python/logfile.py
===================================================================
--- twisted/python/logfile.py	(revision 42799)
+++ twisted/python/logfile.py	(working copy)
@@ -190,22 +190,34 @@
 
     def rotate(self):
         """
-        Rotate the file and create a new one.
+        First remove the oldest log files until we have exactly
+        self.maxRotatedFiles files or less. Rename the remaining files so we can
+        rotate. Finally rotate the current file and create a new one.
 
-        If it's not possible to open new logfile, this will fail silently,
-        and continue logging to old logfile.
+        The following operations might fail silently:
+            * removing/renaming an old logfile
+            * renaming the current logfile
+        In case the rotation of the current logfile fails, the current logfile
+        will be used for further logging.
         """
-        if not (os.access(self.directory, os.W_OK) and os.access(self.path, os.W_OK)):
-            return
         logs = self.listLogs()
         logs.reverse()
         for i in logs:
             if self.maxRotatedFiles is not None and i >= self.maxRotatedFiles:
-                os.remove("%s.%d" % (self.path, i))
+                try:
+                    os.remove("%s.%d" % (self.path, i))
+                except OSError:
+                    pass
             else:
-                os.rename("%s.%d" % (self.path, i), "%s.%d" % (self.path, i + 1))
+                try:
+                    os.rename("%s.%d" % (self.path, i), "%s.%d" % (self.path, i + 1))
+                except OSError:
+                    pass
         self._file.close()
-        os.rename(self.path, "%s.1" % self.path)
+        try:
+            os.rename(self.path, "%s.1" % self.path)
+        except OSError:
+            pass
         self._openFile()
 
     def listLogs(self):
@@ -232,18 +244,22 @@
 
 
 class DailyLogFile(BaseLogFile):
-    """A log file that is rotated daily (at or after midnight localtime)
     """
+    A log file that is rotated daily (at or after midnight localtime)
+    """
     def _openFile(self):
         BaseLogFile._openFile(self)
         self.lastDate = self.toDate(os.stat(self.path)[8])
 
     def shouldRotate(self):
-        """Rotate when the date has changed since last write"""
+        """
+        Rotate when the date has changed since last write
+        """
         return self.toDate() > self.lastDate
 
     def toDate(self, *args):
-        """Convert a unixtime to (year, month, day) localtime tuple,
+        """
+        Convert a unixtime to (year, month, day) localtime tuple,
         or return the current (year, month, day) localtime tuple.
 
         This function primarily exists so you may overload it with
@@ -253,7 +269,9 @@
         return time.localtime(*args)[:3]
 
     def suffix(self, tupledate):
-        """Return the suffix given a (year, month, day) tuple or unixtime"""
+        """
+        Return the suffix given a (year, month, day) tuple or unixtime
+        """
         try:
             return '_'.join(map(str, tupledate))
         except:
@@ -261,7 +279,9 @@
             return '_'.join(map(str, self.toDate(tupledate)))
 
     def getLog(self, identifier):
-        """Given a unix time, return a LogReader for an old log file."""
+        """
+        Given a unix time, return a LogReader for an old log file.
+        """
         if self.toDate(identifier) == self.lastDate:
             return self.getCurrentLog()
         filename = "%s.%s" % (self.path, self.suffix(identifier))
@@ -270,7 +290,9 @@
         return LogReader(filename)
 
     def write(self, data):
-        """Write some data to the log file"""
+        """
+        Write some data to the log file
+        """
         BaseLogFile.write(self, data)
         # Guard against a corner case where time.time()
         # could potentially run backwards to yesterday.
@@ -278,18 +300,21 @@
         self.lastDate = max(self.lastDate, self.toDate())
 
     def rotate(self):
-        """Rotate the file and create a new one.
+        """
+        Rotate the file and create a new one.
 
-        If it's not possible to open new logfile, this will fail silently,
-        and continue logging to old logfile.
+        This will fail silently if
+            * the new logfile is a directory (files will be overwritten)
+            * renaming fails
+        In all cases of the rotation failing, the "current" logfile will be used
+        for further logging.
         """
-        if not (os.access(self.directory, os.W_OK) and os.access(self.path, os.W_OK)):
-            return
         newpath = "%s.%s" % (self.path, self.suffix(self.lastDate))
-        if os.path.exists(newpath):
-            return
         self._file.close()
-        os.rename(self.path, newpath)
+        try:
+            os.rename(self.path, newpath)
+        except OSError:
+            pass
         self._openFile()
 
     def __getstate__(self):
@@ -301,13 +326,16 @@
 
 
 class LogReader:
-    """Read from a log file."""
+    """
+    Read from a log file.
+    """
 
     def __init__(self, name):
         self._file = file(name, "r")
 
     def readLines(self, lines=10):
-        """Read a list of lines from the log file.
+        """
+        Read a list of lines from the log file.
 
         This doesn't returns all of the files lines - call it multiple times.
         """
Index: twisted/test/test_logfile.py
===================================================================
--- twisted/test/test_logfile.py	(revision 42799)
+++ twisted/test/test_logfile.py	(working copy)
@@ -66,6 +66,30 @@
 
         self.assertEqual(log.listLogs(), [1, 2, 3])
 
+    def testRotationWithoutWritePermissionsOnFile(self):
+        log = logfile.LogFile(self.name, self.dir)
+        os.chmod(log.directory, 0777)  # user can write in directory
+        os.chmod(log.path, 0555)       # but not in the logfile
+
+        log.rotate()
+        self.assert_(os.path.exists("%s.1" % log.path))
+
+    def testRemovalOfOldFilesFailsSilently(self):
+        log = logfile.LogFile(self.name, self.dir, maxRotatedFiles=1)
+        log.rotate()
+        os.chmod(self.dir, 0555)
+
+        log.rotate()  # removing the old logfile will raise an OSError,
+                      # which should be caught
+
+    def testRotationOfOldFilesFailsSilently(self):
+        log = logfile.LogFile(self.name, self.dir)
+        log.rotate()
+        os.chmod(self.dir, 0555)
+
+        log.rotate()  # renaming the old logfile will raise an OSError,
+                      # which should be caught
+
     def testAppend(self):
         log = logfile.LogFile(self.name, self.dir)
         log.write("0123456789")
@@ -257,7 +281,6 @@
         self.assertEqual(e.errno, errno.ENOENT)
 
 
-
 class RiggedDailyLogFile(logfile.DailyLogFile):
     _clock = 0.0
 
@@ -271,9 +294,10 @@
             return time.gmtime(*args)[:3]
         return time.gmtime(self._clock)[:3]
 
+
 class DailyLogFileTestCase(unittest.TestCase):
     """
-    Test rotating log file.
+    Test rotating daily log files.
     """
 
     def setUp(self):
@@ -318,3 +342,20 @@
         log.write("3")
         self.assert_(not os.path.exists(days[2]))
 
+    def testRotationWithoutWritePermissionsOnFile(self):
+        log = RiggedDailyLogFile(self.name, self.dir)
+        os.chmod(log.directory, 0777)   # user can write in directory
+        os.chmod(log.path, 0555)        # but not in the logfile
+
+        log.rotate()
+        self.assert_(os.path.exists("%s.1970_1_1" % log.path))
+
+    def testRotationFailsSilentlyWhenRenamingFails(self):
+        log = RiggedDailyLogFile(self.name, self.dir)
+        os.mkdir("%s.1970_1_1" % log.path)
+
+        log.rotate()  # renaming the logfile will raise an OSError
+                      # because there is already a directory with the target
+                      # name
+        self.assert_(os.path.isdir("%s.1970_1_1" % log.path))
+        self.assert_(os.path.exists("%s" % log.path))
