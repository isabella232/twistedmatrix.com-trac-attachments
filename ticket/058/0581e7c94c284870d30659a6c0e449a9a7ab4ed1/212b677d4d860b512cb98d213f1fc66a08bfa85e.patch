Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 28787)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -284,7 +284,11 @@
 
 
 class IMAP4HelperTestCase(unittest.TestCase):
-    def testFileProducer(self):
+    """
+    Tests for various helper utilities in the IMAP4 module.
+    """
+
+    def test_fileProducer(self):
         b = (('x' * 1) + ('y' * 1) + ('z' * 1)) * 10
         c = BufferingConsumer()
         f = StringIO(b)
@@ -298,7 +302,8 @@
                 ''.join(c.buffer))
         return d.addCallback(cbProduced)
 
-    def testWildcard(self):
+
+    def test_wildcard(self):
         cases = [
             ['foo/%gum/bar',
                 ['foo/bar', 'oo/lalagum/bar', 'foo/gumx/bar', 'foo/gum/baz'],
@@ -319,7 +324,8 @@
             for x in succeed:
                 self.failUnless(wildcard.match(x))
 
-    def testWildcardNoDelim(self):
+
+    def test_wildcardNoDelim(self):
         cases = [
             ['foo/%gum/bar',
                 ['foo/bar', 'oo/lalagum/bar', 'foo/gumx/bar', 'foo/gum/baz'],
@@ -340,7 +346,8 @@
             for x in succeed:
                 self.failUnless(wildcard.match(x), x)
 
-    def testHeaderFormatter(self):
+
+    def test_headerFormatter(self):
         cases = [
             ({'Header1': 'Value1', 'Header2': 'Value2'}, 'Header2: Value2\r\nHeader1: Value1\r\n'),
         ]
@@ -348,7 +355,8 @@
         for (input, output) in cases:
             self.assertEquals(imap4._formatHeaders(input), output)
 
-    def testMessageSet(self):
+
+    def test_messageSet(self):
         m1 = MessageSet()
         m2 = MessageSet()
 
@@ -362,11 +370,20 @@
         self.assertEquals(m1, m2)
         self.assertEquals(list(m1 + m2), [1, 2, 3])
 
-    def testMessageSetStringRepresentation(self):
+
+    def test_messageSetStringRepresentation(self):
+        """
+        Test that a MessageSet string representation makes sense regardless of
+        wildcard presence.
+        """
         inputs = [
             MessageSet(imap4.parseIdList('*')),
             MessageSet(imap4.parseIdList('2:3')),
+            # 3:2 should display just like 2:3, because according to the RFC
+            # they have the same meaning
             MessageSet(imap4.parseIdList('3:2')),
+            # in the presence of wildcards, if the highest message id is known,
+            # the wildcard should get replaced by the appropriate value
             MessageSet(imap4.parseIdList('3:*', 6)),
             MessageSet(imap4.parseIdList('*:2', 6)),
         ]
@@ -382,7 +399,8 @@
         for i, o in zip(inputs, outputs):
             self.assertEquals(str(i), o)
 
-    def testQuotedSplitter(self):
+
+    def test_quotedSplitter(self):
         cases = [
             '''Hello World''',
             '''Hello "World!"''',
@@ -442,7 +460,7 @@
             self.assertEquals(imap4.splitQuoted(case), expected)
 
 
-    def testStringCollapser(self):
+    def test_stringCollapser(self):
         cases = [
             ['a', 'b', 'c', 'd', 'e'],
             ['a', ' ', '"', 'b', 'c', ' ', '"', ' ', 'd', 'e'],
@@ -466,7 +484,8 @@
         for (case, expected) in zip(cases, answers):
             self.assertEquals(imap4.collapseStrings(case), expected)
 
-    def testParenParser(self):
+
+    def test_parenParser(self):
         s = '\r\n'.join(['xx'] * 4)
         cases = [
             '(BODY.PEEK[HEADER.FIELDS.NOT (subject bcc cc)] {%d}\r\n%s)' % (len(s), s,),
@@ -542,7 +561,8 @@
 #        for (case, expected) in zip(answers, cases):
 #            self.assertEquals('(' + imap4.collapseNestedLists(case) + ')', expected)
 
-    def testFetchParserSimple(self):
+
+    def test_fetchParserSimple(self):
         cases = [
             ['ENVELOPE', 'Envelope'],
             ['FLAGS', 'Flags'],
@@ -561,7 +581,8 @@
             self.assertEquals(len(p.result), 1)
             self.failUnless(isinstance(p.result[0], getattr(p, outp)))
 
-    def testFetchParserMacros(self):
+
+    def test_fetchParserMacros(self):
         cases = [
             ['ALL', (4, ['flags', 'internaldate', 'rfc822.size', 'envelope'])],
             ['FULL', (5, ['flags', 'internaldate', 'rfc822.size', 'envelope', 'body'])],
@@ -577,7 +598,8 @@
             outp[1].sort()
             self.assertEquals(p, outp[1])
 
-    def testFetchParserBody(self):
+
+    def test_fetchParserBody(self):
         P = imap4._FetchParser
 
         p = P()
@@ -683,7 +705,7 @@
         self.assertEquals(str(p.result[0]), 'BODY[1.3.9.11.HEADER.FIELDS.NOT (Message-Id Date)]<103.69>')
 
 
-    def testFiles(self):
+    def test_files(self):
         inputStructure = [
             'foo', 'bar', 'baz', StringIO('this is a file\r\n'), 'buz'
         ]
@@ -692,7 +714,8 @@
 
         self.assertEquals(imap4.collapseNestedLists(inputStructure), output)
 
-    def testQuoteAvoider(self):
+
+    def test_quoteAvoider(self):
         input = [
             'foo', imap4.DontQuoteMe('bar'), "baz", StringIO('this is a file\r\n'),
             imap4.DontQuoteMe('buz'), ""
@@ -702,7 +725,8 @@
 
         self.assertEquals(imap4.collapseNestedLists(input), output)
 
-    def testLiterals(self):
+
+    def test_literals(self):
         cases = [
             ('({10}\r\n0123456789)', [['0123456789']]),
         ]
@@ -710,7 +734,8 @@
         for (case, expected) in cases:
             self.assertEquals(imap4.parseNestedParens(case), expected)
 
-    def testQueryBuilder(self):
+
+    def test_queryBuilder(self):
         inputs = [
             imap4.Query(flagged=1),
             imap4.Query(sorted=1, unflagged=1, deleted=1),
@@ -753,7 +778,12 @@
         for (query, expected) in zip(inputs, outputs):
             self.assertEquals(query, expected)
 
-    def testInvalidIdListParser(self):
+
+    def test_invalidIdListParser(self):
+        """
+        Test that trying to parse an invalid representation of a sequence range
+        raises an IllegalIdentifierError.
+        """
         inputs = [
             '*:*',
             'foo',
@@ -765,19 +795,34 @@
             self.assertRaises(imap4.IllegalIdentifierError,
                               imap4.parseIdList, input, 12345)
 
-    def testInvalidIdListParserTodo(self):
+
+    def test_invalidIdListParserNonPositive(self):
+        """
+        Test that zeroes and negative values are not accepted in id range
+        expressions. RFC 3501 states that sequence numbers and sequence ranges
+        consist of non-negative numbers (RFC 3501 section 9, the seq-number
+        grammar item)
+        """
         inputs = [
             '0:5',
             '0:0',
-            '*:0'
+            '*:0',
+            '0',
+            '-3:5',
+            '1:-2',
+            '-1'
         ]
 
         for input in inputs:
             self.assertRaises(imap4.IllegalIdentifierError,
                               imap4.parseIdList, input, 12345)
-    testInvalidIdListParserTodo.todo = "Not sure if these should fail"
 
-    def testIdListParser(self):
+
+    def test_idListParser(self):
+        """
+        Test that the function to parse sequence ranges yields correct
+        MessageSet objects.
+        """
         inputs = [
             '1:*',
             '5:*',
@@ -3734,8 +3779,8 @@
 
     def test_searchMessageSetWithStarFirst(self):
         """
-        If the search filter starts with a star, it should be identical to it
-        ending with a star.
+        If the search filter starts with a star, the result should be identical
+        as if the filter would end with a star.
         """
         return self._messageSetSearchTest('*:2', [2, 3])
 
@@ -3750,8 +3795,8 @@
 
     def test_searchMessageSetUIDWithStarFirst(self):
         """
-        If the search filter starts with a star, it should be identical to it
-        ending with a star (also for the SEARCH UID case).
+        If the search filter starts with a star, the result should be identical
+        as if the filter would end with a star (also for the SEARCH UID case).
         """
         return self._messageSetSearchTest('UID *:10000', [2, 3])
 
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 28787)
+++ twisted/mail/imap4.py	(working copy)
@@ -1437,6 +1437,31 @@
 
     def __cbManualSearch(self, result, tag, mbox, query, uid,
                          searchResults=None):
+        """
+        Apply the search filter to a set of messages. Send the response to the
+        client.
+
+        @type result: C{list} of C{tuple} of(C{int}, provider of
+            L{imap4.IMessage})
+        @param result: A list two tuples of messages with their sequence ids,
+            sorted by the ids in descending order.
+
+        @type tag: C{str}
+        @param tag: A command tag.
+
+        @type mbox: Provider of L{imap4.IMailbox}
+        @param mbox: The searched mailbox.
+
+        @type query: C{list}
+        @param query: A list representing the parsed form of the search query.
+
+        @param uid: A flag indicating whether the search is over message
+            sequence numbers or UIDs.
+
+        @type searchResults: C{list}
+        @param searchResults: The search results so far or C{None} if no
+            results yet.
+        """
         if searchResults is None:
             searchResults = []
         i = 0
@@ -1477,9 +1502,11 @@
 
         @param msg: The message being checked.
 
+        @type lastSequenceId: C{int}
         @param lastSequenceId: The highest sequence number of any message in
             the mailbox being searched.
 
+        @type lastMessageId: C{int}
         @param lastMessageId: The highest UID of any message in the mailbox
             being searched.
 
@@ -1525,7 +1552,6 @@
                 # below) or it may be a message sequence set.  Here we
                 # recognize a message sequence set "N:M".
                 messageSet = parseIdList(c, lastSequenceId)
-                #messageSet.last = lastSequenceId
                 return id in messageSet
             else:
                 f = getattr(self, 'search_' + c)
@@ -1540,12 +1566,45 @@
         return True
 
     def search_ALL(self, query, id, msg):
+        """
+        Returns C{True} if the message matches the ALL search key (always).
+
+        @type query: A C{list} of C{str}
+        @param query: A list representing the parsed query string.
+
+        @type id: C{int}
+        @param id: The sequence number of the message being checked.
+
+        @type msg: Provider of L{imap4.IMessage}
+        """
         return True
 
     def search_ANSWERED(self, query, id, msg):
+        """
+        Returns C{True} if the message has been answered.
+
+        @type query: A C{list} of C{str}
+        @param query: A list representing the parsed query string.
+
+        @type id: C{int}
+        @param id: The sequence number of the message being checked.
+
+        @type msg: Provider of L{imap4.IMessage}
+        """
         return '\\Answered' in msg.getFlags()
 
     def search_BCC(self, query, id, msg):
+        """
+        Returns C{True} if the message has a BCC address matching the query.
+
+        @type query: A C{list} of C{str}
+        @param query: A list whose first element is a BCC C{str}
+
+        @type id: C{int}
+        @param id: The sequence number of the message being checked.
+
+        @type msg: Provider of L{imap4.IMessage}
+        """
         bcc = msg.getHeaders(False, 'bcc').get('bcc', '')
         return bcc.lower().find(query.pop(0).lower()) != -1
 
@@ -1590,6 +1649,25 @@
         return '\\Recent' in msg.getFlags() and '\\Seen' not in msg.getFlags()
 
     def search_NOT(self, query, id, msg, (lastSequenceId, lastMessageId)):
+        """
+        Returns C{True} if the message does not match the query.
+
+        @type query: A C{list} of C{str}
+        @param query: A list representing the parsed form of the search query.
+
+        @type id: C{int}
+        @param id: The sequence number of the message being checked.
+
+        @type msg: Provider of L{imap4.IMessage}
+        @param msg: The message being checked.
+
+        @type lastSequenceId: C{int}
+        @param lastSequenceId: The highest sequence number of a message in the
+            mailbox.
+
+        @type lastMessageId: C{int}
+        @param lastMessageId: The highest UID of a message in the mailbox.
+        """
         return not self._singleSearchStep(query, id, msg,
                                           lastSequenceId, lastMessageId)
 
@@ -1601,6 +1679,26 @@
         return rfc822.parsedate(msg.getInternalDate()) == date
 
     def search_OR(self, query, id, msg, (lastSequenceId, lastMessageId)):
+        """
+        Returns C{True} if the message matches any of the first two query
+        items.
+
+        @type query: A C{list} of C{str}
+        @param query: A list representing the parsed form of the search query.
+
+        @type id: C{int}
+        @param id: The sequence number of the message being checked.
+
+        @type msg: Provider of L{imap4.IMessage}
+        @param msg: The message being checked.
+
+        @type lastSequenceId: C{int}
+        @param lastSequenceId: The highest sequence number of a message in the
+                               mailbox.
+
+        @type lastMessageId: C{int}
+        @param lastMessageId: The highest UID of a message in the mailbox.
+        """
         a = self._singleSearchStep(query, id, msg,
                                    lastSequenceId, lastMessageId)
         b = self._singleSearchStep(query, id, msg,
@@ -1622,6 +1720,9 @@
             that is a fragment of an L{imap4.Query()}. The date must be in the
             format 'DD-Mon-YYYY', for example '03-March-2003' or '03-Mar-2003'.
 
+        @type id: C{int}
+        @param id: The sequence number of the message being checked.
+
         @type msg: Provider of L{imap4.IMessage}
         """
         date = msg.getHeaders(False, 'date').get('date', '')
@@ -1679,6 +1780,28 @@
         return to.lower().find(query.pop(0).lower()) != -1
 
     def search_UID(self, query, id, msg, (lastSequenceId, lastMessageId)):
+        """
+        Returns C{True} if the message UID is in the range defined by the
+        search query.
+
+        @type query: A C{list} of C{str}
+        @param query: A list representing the parsed form of the search
+            query. Its first element should be a C{str} that can be interpreted
+            as a sequence range, for example '2:4,5:*'.
+
+        @type id: C{int}
+        @param id: The sequence number of the message being checked.
+
+        @type msg: Provider of L{imap4.IMessage}
+        @param msg: The message being checked.
+
+        @type lastSequenceId: C{int}
+        @param lastSequenceId: The highest sequence number of a message in the
+            mailbox.
+
+        @type lastMessageId: C{int}
+        @param lastMessageId: The highest UID of a message in the mailbox.
+        """
         c = query.pop(0)
         m = parseIdList(c, lastMessageId)
         return msg.getUID() in m
@@ -3792,8 +3915,8 @@
 
     @type lastMessageId: C{int}
     @param lastMessageId: The last message sequence id or UID, depending on
-    whether whe are parsing the list in UID or sequence id context. The caller
-    should pass in the corerct value.
+        whether whe are parsing the list in UID or sequence id context. The
+        caller should pass in the correct value.
 
     @rtype: C{MessageSet}
     @return: A C{MessageSet} that contains the ids defined in the list
@@ -3815,8 +3938,11 @@
                 if low is high is None:
                     # *:* does not make sense
                     raise IllegalIdentifierError(p)
+                # non-positive values are illegal according to RFC 3501
+                if ((low is not None and low <= 0) or
+                    (high is not None and high <= 0)):
+                    raise IllegalIdentifierError(p)
                 # star means "highest value of an id in the mailbox"
-                # TODO: what to do about 0:4 ? RFC not clear on that.
                 high = high or lastMessageId
                 low = low or lastMessageId
 
@@ -3832,6 +3958,8 @@
                     p = None
                 else:
                     p = long(p)
+                if p is not None and p <= 0:
+                    raise IllegalIdentifierError(p)
             except ValueError:
                 raise IllegalIdentifierError(p)
             else:
