Index: twisted/test/test_pbfailure.py
===================================================================
--- twisted/test/test_pbfailure.py	(revision 14333)
+++ twisted/test/test_pbfailure.py	(working copy)
@@ -40,9 +40,27 @@
         raise DieError("*gack*")
 
     def remote_jelly(self):
+        self.raiseJelly()
+
+    def remote_security(self):
+        self.raiseSecurity()
+
+    def remote_deferredJelly(self):
+        d = defer.Deferred()
+        d.addCallback(self.raiseJelly)
+        d.callback(None)
+        return d
+
+    def remote_deferredSecurity(self):
+        d = defer.Deferred()
+        d.addCallback(self.raiseSecurity)
+        d.callback(None)
+        return d
+
+    def raiseJelly(self, results=None):
         raise JellyError("I'm jellyable!")
 
-    def remote_security(self):
+    def raiseSecurity(self, results=None):
         raise SecurityError("I'm secure!")
 
 
@@ -103,10 +121,8 @@
         return d
 
 
-    def addFailingCallbacks(self, remoteCall, expectedResult):
-        for m in (self.failurePoop, self.failureFail, self.failureDie, self.failureNoSuch,
-                  self.failureJelly, self.failureSecurity, lambda x: x):
-            remoteCall.addCallbacks(self.success, m, callbackArgs=(expectedResult,))
+    def addFailingCallbacks(self, remoteCall, expectedResult, eb):
+        remoteCall.addCallbacks(self.success, eb, callbackArgs=(expectedResult,))
         return remoteCall
 
     ##
@@ -114,15 +130,18 @@
     ##
 
     def cleanupLoggedErrors(self, ignored):
-        errors = log.flushErrors(PoopError, FailError, DieError, AttributeError)
-        self.assertEquals(len(errors), 4)
+        errors = log.flushErrors(PoopError, FailError, DieError, AttributeError, JellyError, SecurityError)
+        self.assertEquals(len(errors), 6)
         return ignored
 
     def connected(self, persp):
-        methods = (('poop', 42), ('fail', 420), ('die', 4200), ('nosuch', 42000),
-                   ('jelly', 43), ('security', 430))
+        methods = (('poop', 42, self.failurePoop), ('fail', 420, self.failureFail),
+                   ('die', 4200, self.failureDie), ('nosuch', 42000, self.failureNoSuch),
+                   ('jelly', 43, self.failureJelly), ('security', 430, self.failureSecurity),
+                   ('deferredJelly', 4300, self.failureDeferredJelly),
+                   ('deferredSecurity', 43000, self.failureDeferredSecurity))
         return defer.gatherResults([
-            self.addFailingCallbacks(persp.callRemote(meth), result) for (meth, result) in methods])
+            self.addFailingCallbacks(persp.callRemote(meth), result, eb) for (meth, result, eb) in methods])
 
     def success(self, result, expectedResult):
         self.assertEquals(result, expectedResult)
@@ -160,7 +179,18 @@
         self.failUnless(isinstance(fail.value, fail.type))
         return 430
 
+    def failureDeferredJelly(self, fail):
+        fail.trap(JellyError)
+        self.failIf(isinstance(fail.type, str))
+        self.failUnless(isinstance(fail.value, fail.type))
+        return 4300
 
+    def failureDeferredSecurity(self, fail):
+        fail.trap(SecurityError)
+        self.failIf(isinstance(fail.type, str))
+        self.failUnless(isinstance(fail.value, fail.type))
+        return 43000
+
 class PBFailureTestUnsafe(PBFailureTest):
 
     compare = unittest.TestCase.failIfEquals
Index: twisted/spread/pb.py
===================================================================
--- twisted/spread/pb.py	(revision 14333)
+++ twisted/spread/pb.py	(working copy)
@@ -944,8 +944,12 @@
     def _sendError(self, fail, requestID):
         """(internal) Send an error for a previously sent message.
         """
-        if not isinstance(fail, CopyableFailure) and isinstance(fail, failure.Failure):
-            fail = failure2Copyable(fail, self.factory.unsafeTracebacks)
+        if isinstance(fail, failure.Failure):
+            # If the failures value is jellyable or allowed through security, send the value
+            if isinstance(fail.value, Jellyable) or self.security.isClassAllowed(fail.value.__class__):
+                fail = fail.value
+            elif not isinstance(fail, CopyableFailure):
+                fail = failure2Copyable(fail, self.factory.unsafeTracebacks)
         if isinstance(fail, CopyableFailure):
             fail.unsafeTracebacks = self.factory.unsafeTracebacks
         self.sendCall("error", requestID, self.serialize(fail))
