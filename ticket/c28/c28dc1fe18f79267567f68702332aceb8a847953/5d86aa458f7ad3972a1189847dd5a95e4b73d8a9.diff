Index: twisted/web/test/test_xml.py
===================================================================
--- twisted/web/test/test_xml.py	(revision 15286)
+++ twisted/web/test/test_xml.py	(working copy)
@@ -404,6 +404,13 @@
         actual = d.documentElement.toxml()
         self.assertEquals(expected, actual)
 
+    def testLaterCloserCaseInsensitive(self):
+        s = "<DL><p><DT>foo<DD>bar</DL>"
+        d = microdom.parseString(s, beExtremelyLenient=1)
+        expected = "<dl><p></p><dt>foo</dt><dd>bar</dd></dl>"
+        actual = d.documentElement.toxml()
+        self.assertEquals(expected, actual)
+
     def testLaterCloserTable(self):
         s = ("<table>"
              "<tr><th>name<th>value<th>comment"
Index: twisted/web/microdom.py
===================================================================
--- twisted/web/microdom.py	(revision 15286)
+++ twisted/web/microdom.py	(working copy)
@@ -561,7 +561,7 @@
     # TD, HEAD, BASE, META, HTML all have optional closing tags
 
     soonClosers = 'area link br img hr input base meta'.split()
-    laterClosers = {'p': ['p'],
+    laterClosers = {'p': ['p', 'dt'],
                     'dt': ['dt','dd'],
                     'dd': ['dt', 'dd'],
                     'li': ['li'],
@@ -648,11 +648,15 @@
         # print ' '*self.indentlevel, 'start tag',name
         # self.indentlevel += 1
         parent = self._getparent()
-        if (self.beExtremelyLenient and isinstance(parent, Element) and
-            self.laterClosers.has_key(parent.tagName) and
-            name in self.laterClosers[parent.tagName]):
-            self.gotTagEnd(parent.tagName)
-            parent = self._getparent()
+        if (self.beExtremelyLenient and isinstance(parent, Element)):
+            parentName = parent.tagName
+            myName = name
+            if self.caseInsensitive:
+                parentName = parentName.lower()
+                myName = myName.lower()
+            if myName in self.laterClosers.get(parentName, []):
+                self.gotTagEnd(parent.tagName)
+                parent = self._getparent()
         attributes = _unescapeDict(attributes)
         namespaces = self.nsstack[-1][0]
         newspaces = {}
