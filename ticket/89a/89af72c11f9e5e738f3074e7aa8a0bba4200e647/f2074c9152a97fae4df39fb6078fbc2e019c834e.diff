diff --git a/doc/core/benchmarks/banana.py b/doc/core/benchmarks/banana.py
index df0bc31..6103292 100644
--- a/doc/core/benchmarks/banana.py
+++ b/doc/core/benchmarks/banana.py
@@ -2,10 +2,10 @@
 
 from cStringIO import StringIO
 from timer import timeit
-from twisted.spread.banana import b1282int, Banana
+from twisted.spread import banana, _banana
 
-def dataReceived(data):
-    b = Banana()
+def dataReceived(cls, data):
+    b = cls()
     b.setPrefixLimit(64)
     b.currentDialect = "pb"
     retval = []
@@ -13,8 +13,8 @@ def dataReceived(data):
     b.dataReceived(data)
     return retval[0]
 
-def encode(data):
-    b = Banana()
+def encode(cls, data):
+    b = cls()
     b.setPrefixLimit(64)
     b.currentDialect = "pb"
     b.expressionReceived = lambda ign: None
@@ -26,11 +26,15 @@ def encode(data):
 ITERATIONS = 100000
 
 for length in (1, 5, 10, 50, 100):
-    elapsed = timeit(b1282int, ITERATIONS, "\xff" * length)
-    print "b1282int %3d byte string: %10d cps" % (length, ITERATIONS / elapsed)
+    elapsed = timeit(banana.b1282int, ITERATIONS, "\xff" * length)
+    c_elapsed = timeit(_banana.b1282int, ITERATIONS, "\xff" * length)
+    print "b1282int %3d byte string: py:%10d c:%10d cps" % \
+            (length, ITERATIONS / elapsed, ITERATIONS / c_elapsed)
 
 ITERATIONS = 10000
 for length in (1, 5, 10, 50, 100):
-    e = encode([(0,"\xff")] * length)
-    elapsed = timeit(dataReceived, ITERATIONS, e)
-    print "dataReceived %3d element list: %10d cps" % (length, ITERATIONS / elapsed)
+    e = encode(banana.Banana, [(0,"\xff")] * length)
+    elapsed = timeit(dataReceived, ITERATIONS, banana.Banana, e)
+    c_elapsed = timeit(dataReceived, ITERATIONS, _banana.Banana, e)
+    print "dataReceived %3d element list: py:%10d c:%10d cps" % \
+            (length, ITERATIONS / elapsed, ITERATIONS / c_elapsed)
diff --git a/doc/core/examples/bananabench.py b/doc/core/examples/bananabench.py
index 9d13f38..dbcfc90 100644
--- a/doc/core/examples/bananabench.py
+++ b/doc/core/examples/bananabench.py
@@ -11,6 +11,7 @@ except ImportError:
     
 # Twisted Imports
 from twisted.spread import banana
+from twisted.spread import _banana
 from twisted.internet import protocol
 
 iterationCount = 10000
@@ -60,6 +61,9 @@ class BananaBench:
         print '  Using Pure Python Banana:'
         self.performTest(self.testEncode, testData, banana.Banana)
         self.performTest(self.testDecode, testData, banana.Banana)
+        print '  Using Cython Banana:'
+        self.performTest(self.testEncode, testData, _banana.Banana)
+        self.performTest(self.testDecode, testData, _banana.Banana)
 
 bench = BananaBench()
 print 'Doing %s iterations of each test.' % iterationCount
diff --git a/twisted/spread/_banana.c b/twisted/spread/_banana.c
new file mode 100644
index 0000000..a464448
--- /dev/null
+++ b/twisted/spread/_banana.c
@@ -0,0 +1,6698 @@
+/* Generated by Cython 0.11.2 on Tue Feb 23 13:31:32 2010 */
+
+#define PY_SSIZE_T_CLEAN
+#include "Python.h"
+#include "structmember.h"
+#ifndef Py_PYTHON_H
+    #error Python headers needed to compile C extensions, please install development version of Python.
+#endif
+#ifndef PY_LONG_LONG
+  #define PY_LONG_LONG LONG_LONG
+#endif
+#ifndef DL_EXPORT
+  #define DL_EXPORT(t) t
+#endif
+#if PY_VERSION_HEX < 0x02040000
+  #define METH_COEXIST 0
+  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
+#endif
+#if PY_VERSION_HEX < 0x02050000
+  typedef int Py_ssize_t;
+  #define PY_SSIZE_T_MAX INT_MAX
+  #define PY_SSIZE_T_MIN INT_MIN
+  #define PY_FORMAT_SIZE_T ""
+  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
+  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
+  #define PyNumber_Index(o)    PyNumber_Int(o)
+  #define PyIndex_Check(o)     PyNumber_Check(o)
+#endif
+#if PY_VERSION_HEX < 0x02060000
+  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
+  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
+  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
+  #define PyVarObject_HEAD_INIT(type, size) \
+          PyObject_HEAD_INIT(type) size,
+  #define PyType_Modified(t)
+
+  typedef struct {
+       void *buf;
+       PyObject *obj;
+       Py_ssize_t len;
+       Py_ssize_t itemsize;
+       int readonly;
+       int ndim;
+       char *format;
+       Py_ssize_t *shape;
+       Py_ssize_t *strides;
+       Py_ssize_t *suboffsets;
+       void *internal;
+  } Py_buffer;
+
+  #define PyBUF_SIMPLE 0
+  #define PyBUF_WRITABLE 0x0001
+  #define PyBUF_FORMAT 0x0004
+  #define PyBUF_ND 0x0008
+  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
+  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
+  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
+  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
+  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
+
+#endif
+#if PY_MAJOR_VERSION < 3
+  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
+#else
+  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
+#endif
+#if PY_MAJOR_VERSION >= 3
+  #define Py_TPFLAGS_CHECKTYPES 0
+  #define Py_TPFLAGS_HAVE_INDEX 0
+#endif
+#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
+  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
+#endif
+#if PY_MAJOR_VERSION >= 3
+  #define PyBaseString_Type            PyUnicode_Type
+  #define PyString_Type                PyBytes_Type
+  #define PyString_CheckExact          PyBytes_CheckExact
+  #define PyInt_Type                   PyLong_Type
+  #define PyInt_Check(op)              PyLong_Check(op)
+  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
+  #define PyInt_FromString             PyLong_FromString
+  #define PyInt_FromUnicode            PyLong_FromUnicode
+  #define PyInt_FromLong               PyLong_FromLong
+  #define PyInt_FromSize_t             PyLong_FromSize_t
+  #define PyInt_FromSsize_t            PyLong_FromSsize_t
+  #define PyInt_AsLong                 PyLong_AsLong
+  #define PyInt_AS_LONG                PyLong_AS_LONG
+  #define PyInt_AsSsize_t              PyLong_AsSsize_t
+  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
+  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
+#else
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
+  #define PyBytes_Type                 PyString_Type
+#endif
+#if PY_MAJOR_VERSION >= 3
+  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
+#endif
+#if !defined(WIN32) && !defined(MS_WINDOWS)
+  #ifndef __stdcall
+    #define __stdcall
+  #endif
+  #ifndef __cdecl
+    #define __cdecl
+  #endif
+  #ifndef __fastcall
+    #define __fastcall
+  #endif
+#else
+  #define _USE_MATH_DEFINES
+#endif
+#if PY_VERSION_HEX < 0x02050000
+  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
+  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
+  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
+#else
+  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
+  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
+  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
+#endif
+#if PY_VERSION_HEX < 0x02050000
+  #define __Pyx_NAMESTR(n) ((char *)(n))
+  #define __Pyx_DOCSTR(n)  ((char *)(n))
+#else
+  #define __Pyx_NAMESTR(n) (n)
+  #define __Pyx_DOCSTR(n)  (n)
+#endif
+#ifdef __cplusplus
+#define __PYX_EXTERN_C extern "C"
+#else
+#define __PYX_EXTERN_C extern
+#endif
+#include <math.h>
+#define __PYX_HAVE_API__twisted__spread___banana
+#define __PYX_USE_C99_COMPLEX defined(_Complex_I)
+
+
+#ifdef __GNUC__
+#define INLINE __inline__
+#elif _WIN32
+#define INLINE __inline
+#else
+#define INLINE 
+#endif
+
+typedef struct {PyObject **p; char *s; long n; char is_unicode; char intern; char is_identifier;} __Pyx_StringTabEntry; /*proto*/
+
+
+
+static int __pyx_skip_dispatch = 0;
+
+
+/* Type Conversion Predeclarations */
+
+#if PY_MAJOR_VERSION < 3
+#define __Pyx_PyBytes_FromString          PyString_FromString
+#define __Pyx_PyBytes_FromStringAndSize   PyString_FromStringAndSize
+#define __Pyx_PyBytes_AsString            PyString_AsString
+#else
+#define __Pyx_PyBytes_FromString          PyBytes_FromString
+#define __Pyx_PyBytes_FromStringAndSize   PyBytes_FromStringAndSize
+#define __Pyx_PyBytes_AsString            PyBytes_AsString
+#endif
+
+#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
+static INLINE int __Pyx_PyObject_IsTrue(PyObject*);
+static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
+
+#if !defined(T_PYSSIZET)
+#if PY_VERSION_HEX < 0x02050000
+#define T_PYSSIZET T_INT
+#elif !defined(T_LONGLONG)
+#define T_PYSSIZET \
+        ((sizeof(Py_ssize_t) == sizeof(int))  ? T_INT  : \
+        ((sizeof(Py_ssize_t) == sizeof(long)) ? T_LONG : -1))
+#else
+#define T_PYSSIZET \
+        ((sizeof(Py_ssize_t) == sizeof(int))          ? T_INT      : \
+        ((sizeof(Py_ssize_t) == sizeof(long))         ? T_LONG     : \
+        ((sizeof(Py_ssize_t) == sizeof(PY_LONG_LONG)) ? T_LONGLONG : -1)))
+#endif
+#endif
+
+#if !defined(T_SIZET)
+#if !defined(T_ULONGLONG)
+#define T_SIZET \
+        ((sizeof(size_t) == sizeof(unsigned int))  ? T_UINT  : \
+        ((sizeof(size_t) == sizeof(unsigned long)) ? T_ULONG : -1))
+#else
+#define T_SIZET \
+        ((sizeof(size_t) == sizeof(unsigned int))          ? T_UINT      : \
+        ((sizeof(size_t) == sizeof(unsigned long))         ? T_ULONG     : \
+        ((sizeof(size_t) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))
+#endif
+#endif
+
+static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
+static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
+static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
+
+#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
+
+
+#ifdef __GNUC__
+/* Test for GCC > 2.95 */
+#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
+#define likely(x)   __builtin_expect(!!(x), 1)
+#define unlikely(x) __builtin_expect(!!(x), 0)
+#else /* __GNUC__ > 2 ... */
+#define likely(x)   (x)
+#define unlikely(x) (x)
+#endif /* __GNUC__ > 2 ... */
+#else /* __GNUC__ */
+#define likely(x)   (x)
+#define unlikely(x) (x)
+#endif /* __GNUC__ */
+    
+static PyObject *__pyx_m;
+static PyObject *__pyx_b;
+static PyObject *__pyx_empty_tuple;
+static int __pyx_lineno;
+static int __pyx_clineno = 0;
+static const char * __pyx_cfilenm= __FILE__;
+static const char *__pyx_filename;
+static const char **__pyx_f;
+
+static char __pyx_mdoc[] = "\nBanana -- s-exp based protocol.\n\nFuture Plans: This module is almost entirely stable.  The same caveat applies\nto it as applies to L{twisted.spread.jelly}, however.  Read its future plans\nfor more details.\n\n@author: Glyph Lefkowitz\n";
+
+
+#ifdef CYTHON_REFNANNY
+typedef struct {
+  void (*INCREF)(void*, PyObject*, int);
+  void (*DECREF)(void*, PyObject*, int);
+  void (*GOTREF)(void*, PyObject*, int);
+  void (*GIVEREF)(void*, PyObject*, int);
+  void* (*NewContext)(const char*, int, const char*);
+  void (*FinishContext)(void**);
+} __Pyx_RefnannyAPIStruct;
+static __Pyx_RefnannyAPIStruct *__Pyx_Refnanny = NULL;
+#define __Pyx_ImportRefcountAPI(name)   (__Pyx_RefnannyAPIStruct *) PyCObject_Import((char *)name, (char *)"RefnannyAPI")
+#define __Pyx_INCREF(r) __Pyx_Refnanny->INCREF(__pyx_refchk, (PyObject *)(r), __LINE__)
+#define __Pyx_DECREF(r) __Pyx_Refnanny->DECREF(__pyx_refchk, (PyObject *)(r), __LINE__)
+#define __Pyx_GOTREF(r) __Pyx_Refnanny->GOTREF(__pyx_refchk, (PyObject *)(r), __LINE__)
+#define __Pyx_GIVEREF(r) __Pyx_Refnanny->GIVEREF(__pyx_refchk, (PyObject *)(r), __LINE__)
+#define __Pyx_XDECREF(r) if((r) == NULL) ; else __Pyx_DECREF(r)
+#define __Pyx_SetupRefcountContext(name)   void* __pyx_refchk = __Pyx_Refnanny->NewContext((name), __LINE__, __FILE__)
+#define __Pyx_FinishRefcountContext()   __Pyx_Refnanny->FinishContext(&__pyx_refchk)
+#else
+#define __Pyx_INCREF(r) Py_INCREF(r)
+#define __Pyx_DECREF(r) Py_DECREF(r)
+#define __Pyx_GOTREF(r)
+#define __Pyx_GIVEREF(r)
+#define __Pyx_XDECREF(r) Py_XDECREF(r)
+#define __Pyx_SetupRefcountContext(name)
+#define __Pyx_FinishRefcountContext()
+#endif /* CYTHON_REFNANNY */
+#define __Pyx_XGIVEREF(r) if((r) == NULL) ; else __Pyx_GIVEREF(r)
+#define __Pyx_XGOTREF(r) if((r) == NULL) ; else __Pyx_GOTREF(r)
+
+static void __Pyx_RaiseDoubleKeywordsError(
+    const char* func_name, PyObject* kw_name); /*proto*/
+
+static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
+    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/
+
+static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/
+
+
+static INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
+    PyObject *r;
+    if (!j) return NULL;
+    r = PyObject_GetItem(o, j);
+    Py_DECREF(j);
+    return r;
+}
+
+
+#define __Pyx_GetItemInt_List(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
+                                                    __Pyx_GetItemInt_List_Fast(o, i, size <= sizeof(long)) : \
+                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
+
+static INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
+    if (likely(o != Py_None)) {
+        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
+            PyObject *r = PyList_GET_ITEM(o, i);
+            Py_INCREF(r);
+            return r;
+        }
+        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
+            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
+            Py_INCREF(r);
+            return r;
+        }
+    }
+    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
+}
+
+#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
+                                                    __Pyx_GetItemInt_Tuple_Fast(o, i, size <= sizeof(long)) : \
+                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
+
+static INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
+    if (likely(o != Py_None)) {
+        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
+            PyObject *r = PyTuple_GET_ITEM(o, i);
+            Py_INCREF(r);
+            return r;
+        }
+        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
+            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
+            Py_INCREF(r);
+            return r;
+        }
+    }
+    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
+}
+
+
+#define __Pyx_GetItemInt(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
+                                                    __Pyx_GetItemInt_Fast(o, i, size <= sizeof(long)) : \
+                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
+
+static INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
+    PyObject *r;
+    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
+        r = PyList_GET_ITEM(o, i);
+        Py_INCREF(r);
+    }
+    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
+        r = PyTuple_GET_ITEM(o, i);
+        Py_INCREF(r);
+    }
+    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
+        r = PySequence_GetItem(o, i);
+    }
+    else {
+        r = __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
+    }
+    return r;
+}
+
+static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
+static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
+
+static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/
+
+static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/
+
+static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name, const char *modname); /*proto*/
+
+static INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);
+
+static INLINE void __Pyx_RaiseTooManyValuesError(void);
+
+static PyObject *__Pyx_UnpackItem(PyObject *, Py_ssize_t index); /*proto*/
+static int __Pyx_EndUnpack(PyObject *); /*proto*/
+
+static INLINE long __Pyx_pow_long(long, long); /* proto */
+
+static INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
+    if (likely(PyList_CheckExact(L))) {
+        if (PyList_Append(L, x) < 0) return NULL;
+        Py_INCREF(Py_None);
+        return Py_None; /* this is just to have an accurate signature */
+    }
+    else {
+        PyObject *r, *m;
+        m = __Pyx_GetAttrString(L, "append");
+        if (!m) return NULL;
+        r = PyObject_CallFunctionObjArgs(m, x, NULL);
+        Py_DECREF(m);
+        return r;
+    }
+}
+
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
+
+static INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/
+
+static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);
+
+static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);
+
+static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);
+
+static INLINE char __Pyx_PyInt_AsChar(PyObject *);
+
+static INLINE short __Pyx_PyInt_AsShort(PyObject *);
+
+static INLINE int __Pyx_PyInt_AsInt(PyObject *);
+
+static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);
+
+static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);
+
+static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);
+
+static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);
+
+static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);
+
+static INLINE long __Pyx_PyInt_AsLong(PyObject *);
+
+static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);
+
+static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);
+
+static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);
+
+static void __Pyx_AddTraceback(const char *funcname); /*proto*/
+
+static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
+
+/* Type declarations */
+/* Module declarations from twisted.spread._banana */
+
+static unsigned char __pyx_v_7twisted_6spread_7_banana_LIST;
+static unsigned char __pyx_v_7twisted_6spread_7_banana_INT;
+static unsigned char __pyx_v_7twisted_6spread_7_banana_STRING;
+static unsigned char __pyx_v_7twisted_6spread_7_banana_NEG;
+static unsigned char __pyx_v_7twisted_6spread_7_banana_FLOAT;
+static unsigned char __pyx_v_7twisted_6spread_7_banana_LONGINT;
+static unsigned char __pyx_v_7twisted_6spread_7_banana_LONGNEG;
+static unsigned char __pyx_v_7twisted_6spread_7_banana_VOCAB;
+static unsigned char __pyx_v_7twisted_6spread_7_banana_HIGH_BIT_SET;
+static int __pyx_v_7twisted_6spread_7_banana_SIZE_LIMIT;
+static PyObject *__pyx_f_7twisted_6spread_7_banana__c_b1282int(unsigned char *, int, int); /*proto*/
+#define __Pyx_MODULE_NAME "twisted.spread._banana"
+int __pyx_module_is_main_twisted__spread___banana = 0;
+
+/* Implementation of twisted.spread._banana */
+static PyObject *__pyx_int_64;
+static PyObject *__pyx_int_1;
+static PyObject *__pyx_int_2;
+static PyObject *__pyx_int_3;
+static PyObject *__pyx_int_4;
+static PyObject *__pyx_int_5;
+static PyObject *__pyx_int_6;
+static PyObject *__pyx_int_7;
+static PyObject *__pyx_int_8;
+static PyObject *__pyx_int_9;
+static PyObject *__pyx_int_10;
+static PyObject *__pyx_int_11;
+static PyObject *__pyx_int_12;
+static PyObject *__pyx_int_13;
+static PyObject *__pyx_int_14;
+static PyObject *__pyx_int_15;
+static PyObject *__pyx_int_16;
+static PyObject *__pyx_int_17;
+static PyObject *__pyx_int_18;
+static PyObject *__pyx_int_19;
+static PyObject *__pyx_int_20;
+static PyObject *__pyx_int_21;
+static PyObject *__pyx_int_22;
+static PyObject *__pyx_int_23;
+static PyObject *__pyx_int_24;
+static PyObject *__pyx_int_25;
+static PyObject *__pyx_int_26;
+static PyObject *__pyx_int_27;
+static PyObject *__pyx_int_28;
+static PyObject *__pyx_int_29;
+static PyObject *__pyx_int_30;
+static PyObject *__pyx_int_31;
+static PyObject *__pyx_int_0;
+static PyObject *__pyx_int_0x7f;
+static char __pyx_k___main__[] = "__main__";
+static PyObject *__pyx_kp___main__;
+static char __pyx_k_integer[] = "integer";
+static PyObject *__pyx_kp_integer;
+static char __pyx_k_stream[] = "stream";
+static PyObject *__pyx_kp_stream;
+static char __pyx_k_buf[] = "buf";
+static PyObject *__pyx_kp_buf;
+static char __pyx_k_limit[] = "limit";
+static PyObject *__pyx_kp_limit;
+static char __pyx_k_self[] = "self";
+static PyObject *__pyx_kp_self;
+static char __pyx_k_isClient[] = "isClient";
+static PyObject *__pyx_kp_isClient;
+static char __pyx_k_dialect[] = "dialect";
+static PyObject *__pyx_kp_dialect;
+static char __pyx_k_obj[] = "obj";
+static PyObject *__pyx_kp_obj;
+static char __pyx_k_item[] = "item";
+static PyObject *__pyx_kp_item;
+static char __pyx_k_chunk[] = "chunk";
+static PyObject *__pyx_kp_chunk;
+static char __pyx_k_lst[] = "lst";
+static PyObject *__pyx_kp_lst;
+static char __pyx_k_write[] = "write";
+static PyObject *__pyx_kp_write;
+static char __pyx_k_st[] = "st";
+static PyObject *__pyx_kp_st;
+static char __pyx_k_copy[] = "copy";
+static PyObject *__pyx_kp_copy;
+static char __pyx_k_cStringIO[] = "cStringIO";
+static PyObject *__pyx_kp_cStringIO;
+static char __pyx_k_struct[] = "struct";
+static PyObject *__pyx_kp_struct;
+static char __pyx_k_1[] = "twisted.internet";
+static PyObject *__pyx_kp_1;
+static char __pyx_k_protocol[] = "protocol";
+static PyObject *__pyx_kp_protocol;
+static char __pyx_k_2[] = "twisted.persisted";
+static PyObject *__pyx_kp_2;
+static char __pyx_k_styles[] = "styles";
+static PyObject *__pyx_kp_styles;
+static char __pyx_k_3[] = "twisted.python";
+static PyObject *__pyx_kp_3;
+static char __pyx_k_log[] = "log";
+static PyObject *__pyx_kp_log;
+static char __pyx_k_BananaError[] = "BananaError";
+static PyObject *__pyx_kp_BananaError;
+static char __pyx_k_Exception[] = "Exception";
+static PyObject *__pyx_kp_Exception;
+static char __pyx_k_setPrefixLimit[] = "setPrefixLimit";
+static PyObject *__pyx_kp_setPrefixLimit;
+static char __pyx_k_Banana[] = "Banana";
+static PyObject *__pyx_kp_Banana;
+static char __pyx_k_Protocol[] = "Protocol";
+static PyObject *__pyx_kp_Protocol;
+static char __pyx_k_Ephemeral[] = "Ephemeral";
+static PyObject *__pyx_kp_Ephemeral;
+static char __pyx_k_object[] = "object";
+static PyObject *__pyx_kp_object;
+static char __pyx_k_4[] = "pb";
+static PyObject *__pyx_kp_4;
+static char __pyx_k_5[] = "none";
+static PyObject *__pyx_kp_5;
+static char __pyx_k_knownDialects[] = "knownDialects";
+static PyObject *__pyx_kp_knownDialects;
+static char __pyx_k_prefixLimit[] = "prefixLimit";
+static PyObject *__pyx_kp_prefixLimit;
+static char __pyx_k___init__[] = "__init__";
+static PyObject *__pyx_kp___init__;
+static char __pyx_k_connectionReady[] = "connectionReady";
+static PyObject *__pyx_kp_connectionReady;
+static char __pyx_k__selectDialect[] = "_selectDialect";
+static PyObject *__pyx_kp__selectDialect;
+static char __pyx_k_6[] = "callExpressionReceived";
+static PyObject *__pyx_kp_6;
+static char __pyx_k_connectionMade[] = "connectionMade";
+static PyObject *__pyx_kp_connectionMade;
+static char __pyx_k_gotItem[] = "gotItem";
+static PyObject *__pyx_kp_gotItem;
+static char __pyx_k_dataReceived[] = "dataReceived";
+static PyObject *__pyx_kp_dataReceived;
+static char __pyx_k_expressionReceived[] = "expressionReceived";
+static PyObject *__pyx_kp_expressionReceived;
+static char __pyx_k_7[] = "None";
+static PyObject *__pyx_kp_7;
+static char __pyx_k_8[] = "class";
+static PyObject *__pyx_kp_8;
+static char __pyx_k_9[] = "dereference";
+static PyObject *__pyx_kp_9;
+static char __pyx_k_10[] = "reference";
+static PyObject *__pyx_kp_10;
+static char __pyx_k_11[] = "dictionary";
+static PyObject *__pyx_kp_11;
+static char __pyx_k_12[] = "function";
+static PyObject *__pyx_kp_12;
+static char __pyx_k_13[] = "instance";
+static PyObject *__pyx_kp_13;
+static char __pyx_k_14[] = "list";
+static PyObject *__pyx_kp_14;
+static char __pyx_k_15[] = "module";
+static PyObject *__pyx_kp_15;
+static char __pyx_k_16[] = "persistent";
+static PyObject *__pyx_kp_16;
+static char __pyx_k_17[] = "tuple";
+static PyObject *__pyx_kp_17;
+static char __pyx_k_18[] = "unpersistable";
+static PyObject *__pyx_kp_18;
+static char __pyx_k_19[] = "copy";
+static PyObject *__pyx_kp_19;
+static char __pyx_k_20[] = "cache";
+static PyObject *__pyx_kp_20;
+static char __pyx_k_21[] = "cached";
+static PyObject *__pyx_kp_21;
+static char __pyx_k_22[] = "remote";
+static PyObject *__pyx_kp_22;
+static char __pyx_k_23[] = "local";
+static PyObject *__pyx_kp_23;
+static char __pyx_k_24[] = "lcache";
+static PyObject *__pyx_kp_24;
+static char __pyx_k_25[] = "version";
+static PyObject *__pyx_kp_25;
+static char __pyx_k_26[] = "login";
+static PyObject *__pyx_kp_26;
+static char __pyx_k_27[] = "password";
+static PyObject *__pyx_kp_27;
+static char __pyx_k_28[] = "challenge";
+static PyObject *__pyx_kp_28;
+static char __pyx_k_29[] = "logged_in";
+static PyObject *__pyx_kp_29;
+static char __pyx_k_30[] = "not_logged_in";
+static PyObject *__pyx_kp_30;
+static char __pyx_k_31[] = "cachemessage";
+static PyObject *__pyx_kp_31;
+static char __pyx_k_32[] = "message";
+static PyObject *__pyx_kp_32;
+static char __pyx_k_33[] = "answer";
+static PyObject *__pyx_kp_33;
+static char __pyx_k_34[] = "error";
+static PyObject *__pyx_kp_34;
+static char __pyx_k_35[] = "decref";
+static PyObject *__pyx_kp_35;
+static char __pyx_k_36[] = "decache";
+static PyObject *__pyx_kp_36;
+static char __pyx_k_37[] = "uncache";
+static PyObject *__pyx_kp_37;
+static char __pyx_k_outgoingVocabulary[] = "outgoingVocabulary";
+static PyObject *__pyx_kp_outgoingVocabulary;
+static char __pyx_k_incomingVocabulary[] = "incomingVocabulary";
+static PyObject *__pyx_kp_incomingVocabulary;
+static char __pyx_k_k[] = "k";
+static PyObject *__pyx_kp_k;
+static char __pyx_k_v[] = "v";
+static PyObject *__pyx_kp_v;
+static char __pyx_k_items[] = "items";
+static PyObject *__pyx_kp_items;
+static char __pyx_k_sendEncoded[] = "sendEncoded";
+static PyObject *__pyx_kp_sendEncoded;
+static char __pyx_k__encode[] = "_encode";
+static PyObject *__pyx_kp__encode;
+static char __pyx_k__i[] = "_i";
+static PyObject *__pyx_kp__i;
+static char __pyx_k_38[] = "none";
+static PyObject *__pyx_kp_38;
+static char __pyx_k_chr[] = "chr";
+static PyObject *__pyx_kp_chr;
+static char __pyx_k_range[] = "range";
+static PyObject *__pyx_kp_range;
+static char __pyx_k__PREFIX_LIMIT[] = "_PREFIX_LIMIT";
+static PyObject *__pyx_kp__PREFIX_LIMIT;
+static char __pyx_k_listStack[] = "listStack";
+static PyObject *__pyx_kp_listStack;
+static char __pyx_k_outgoingSymbols[] = "outgoingSymbols";
+static PyObject *__pyx_kp_outgoingSymbols;
+static char __pyx_k_outgoingSymbolCount[] = "outgoingSymbolCount";
+static PyObject *__pyx_kp_outgoingSymbolCount;
+static char __pyx_k__smallestLongInt[] = "_smallestLongInt";
+static PyObject *__pyx_kp__smallestLongInt;
+static char __pyx_k__smallestInt[] = "_smallestInt";
+static PyObject *__pyx_kp__smallestInt;
+static char __pyx_k__largestInt[] = "_largestInt";
+static PyObject *__pyx_kp__largestInt;
+static char __pyx_k__largestLongInt[] = "_largestLongInt";
+static PyObject *__pyx_kp__largestLongInt;
+static char __pyx_k_currentDialect[] = "currentDialect";
+static PyObject *__pyx_kp_currentDialect;
+static char __pyx_k_msg[] = "msg";
+static PyObject *__pyx_kp_msg;
+static char __pyx_k_transport[] = "transport";
+static PyObject *__pyx_kp_transport;
+static char __pyx_k_loseConnection[] = "loseConnection";
+static PyObject *__pyx_kp_loseConnection;
+static char __pyx_k_append[] = "append";
+static PyObject *__pyx_kp_append;
+static char __pyx_k_unpack[] = "unpack";
+static PyObject *__pyx_kp_unpack;
+static char __pyx_k_NotImplementedError[] = "NotImplementedError";
+static PyObject *__pyx_kp_NotImplementedError;
+static char __pyx_k_pop[] = "pop";
+static PyObject *__pyx_kp_pop;
+static char __pyx_k_StringIO[] = "StringIO";
+static PyObject *__pyx_kp_StringIO;
+static char __pyx_k_getvalue[] = "getvalue";
+static PyObject *__pyx_kp_getvalue;
+static char __pyx_k_51[] = "int2b128";
+static PyObject *__pyx_kp_51;
+static char __pyx_k_pack[] = "pack";
+static PyObject *__pyx_kp_pack;
+static char __pyx_k_54[] = "pb";
+static PyObject *__pyx_kp_54;
+static PyObject *__pyx_builtin_Exception;
+static PyObject *__pyx_builtin_object;
+static PyObject *__pyx_builtin_chr;
+static PyObject *__pyx_builtin_range;
+static PyObject *__pyx_builtin_NotImplementedError;
+static PyObject *__pyx_kp_39;
+static char __pyx_k_39[] = "can only encode positive integers";
+static PyObject *__pyx_kp_40;
+static char __pyx_k_40[] = "";
+static PyObject *__pyx_kp_41;
+static PyObject *__pyx_kp_42;
+static char __pyx_k_41[] = "The client doesn't speak any of the protocols offered by the server: disconnecting.";
+static char __pyx_k_42[] = "The client selected a protocol the server didn't suggest and doesn't know: disconnecting.";
+static PyObject *__pyx_kp_43;
+static PyObject *__pyx_kp_44;
+static PyObject *__pyx_kp_45;
+static PyObject *__pyx_kp_46;
+static PyObject *__pyx_kp_47;
+static PyObject *__pyx_kp_48;
+static PyObject *__pyx_kp_49;
+static char __pyx_k_43[] = "Security precaution: more than %d bytes of prefix";
+static char __pyx_k_44[] = "Security precaution: longer than %d bytes worth of prefix";
+static char __pyx_k_45[] = "Security precaution: List too long.";
+static char __pyx_k_46[] = "Security precaution: String too long.";
+static char __pyx_k_47[] = "!d";
+static char __pyx_k_48[] = "Invalid Type Byte %r";
+static char __pyx_k_49[] = "";
+static PyObject *__pyx_kp_50;
+static PyObject *__pyx_kp_52;
+static PyObject *__pyx_kp_53;
+static PyObject *__pyx_kp_55;
+static PyObject *__pyx_kp_56;
+static char __pyx_k_50[] = "list/tuple is too long to send (%d)";
+static char __pyx_k_52[] = "int/long is too large to send (%d)";
+static char __pyx_k_53[] = "!d";
+static char __pyx_k_55[] = "string is too long to send (%d)";
+static char __pyx_k_56[] = "could not send object: %r";
+static PyObject *__pyx_kp_57;
+static char __pyx_k_57[] = "";
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":24
+ *     pass
+ * 
+ * def int2b128(integer, stream):             # <<<<<<<<<<<<<<
+ *     if integer == 0:
+ *         stream(chr(0))
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_int2b128(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_int2b128(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_integer = 0;
+  PyObject *__pyx_v_stream = 0;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_t_1 = NULL;
+  int __pyx_t_2;
+  PyObject *__pyx_t_3 = NULL;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_integer,&__pyx_kp_stream,0};
+  __Pyx_SetupRefcountContext("int2b128");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_integer);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_stream);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("int2b128", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "int2b128") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_integer = values[0];
+    __pyx_v_stream = values[1];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_integer = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_stream = PyTuple_GET_ITEM(__pyx_args, 1);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("int2b128", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.int2b128");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __Pyx_INCREF(__pyx_v_integer);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":25
+ * 
+ * def int2b128(integer, stream):
+ *     if integer == 0:             # <<<<<<<<<<<<<<
+ *         stream(chr(0))
+ *         return
+ */
+  __pyx_t_1 = PyObject_RichCompare(__pyx_v_integer, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  if (__pyx_t_2) {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":26
+ * def int2b128(integer, stream):
+ *     if integer == 0:
+ *         stream(chr(0))             # <<<<<<<<<<<<<<
+ *         return
+ *     assert integer > 0, "can only encode positive integers"
+ */
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    __Pyx_INCREF(__pyx_int_0);
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
+    __Pyx_GIVEREF(__pyx_int_0);
+    __pyx_t_3 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
+    __Pyx_GIVEREF(__pyx_t_3);
+    __pyx_t_3 = 0;
+    __pyx_t_3 = PyObject_Call(__pyx_v_stream, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":27
+ *     if integer == 0:
+ *         stream(chr(0))
+ *         return             # <<<<<<<<<<<<<<
+ *     assert integer > 0, "can only encode positive integers"
+ *     while integer:
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+    goto __pyx_L0;
+    goto __pyx_L6;
+  }
+  __pyx_L6:;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":28
+ *         stream(chr(0))
+ *         return
+ *     assert integer > 0, "can only encode positive integers"             # <<<<<<<<<<<<<<
+ *     while integer:
+ *         stream(chr(integer & 0x7f))
+ */
+  #ifndef PYREX_WITHOUT_ASSERTIONS
+  __pyx_t_3 = PyObject_RichCompare(__pyx_v_integer, __pyx_int_0, Py_GT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (unlikely(!__pyx_t_2)) {
+    PyErr_SetObject(PyExc_AssertionError, __pyx_kp_39);
+    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  #endif
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":29
+ *         return
+ *     assert integer > 0, "can only encode positive integers"
+ *     while integer:             # <<<<<<<<<<<<<<
+ *         stream(chr(integer & 0x7f))
+ *         integer = integer >> 7
+ */
+  while (1) {
+    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_integer); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    if (!__pyx_t_2) break;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":30
+ *     assert integer > 0, "can only encode positive integers"
+ *     while integer:
+ *         stream(chr(integer & 0x7f))             # <<<<<<<<<<<<<<
+ *         integer = integer >> 7
+ * 
+ */
+    __pyx_t_3 = PyNumber_And(__pyx_v_integer, __pyx_int_0x7f); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
+    __Pyx_GIVEREF(__pyx_t_3);
+    __pyx_t_3 = 0;
+    __pyx_t_3 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
+    __Pyx_GIVEREF(__pyx_t_3);
+    __pyx_t_3 = 0;
+    __pyx_t_3 = PyObject_Call(__pyx_v_stream, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":31
+ *     while integer:
+ *         stream(chr(integer & 0x7f))
+ *         integer = integer >> 7             # <<<<<<<<<<<<<<
+ * 
+ * cdef _c_b1282int(unsigned char* st, int start, int l):
+ */
+    __pyx_t_3 = PyNumber_Rshift(__pyx_v_integer, __pyx_int_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_v_integer);
+    __pyx_v_integer = __pyx_t_3;
+    __pyx_t_3 = 0;
+  }
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana.int2b128");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_integer);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":33
+ *         integer = integer >> 7
+ * 
+ * cdef _c_b1282int(unsigned char* st, int start, int l):             # <<<<<<<<<<<<<<
+ *     e = 1
+ *     i = 0
+ */
+
+static  PyObject *__pyx_f_7twisted_6spread_7_banana__c_b1282int(unsigned char *__pyx_v_st, int __pyx_v_start, int __pyx_v_l) {
+  PyObject *__pyx_v_e;
+  PyObject *__pyx_v_i;
+  int __pyx_v_n;
+  int __pyx_v_j;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  __Pyx_SetupRefcountContext("_c_b1282int");
+  __pyx_v_e = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_i = Py_None; __Pyx_INCREF(Py_None);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":34
+ * 
+ * cdef _c_b1282int(unsigned char* st, int start, int l):
+ *     e = 1             # <<<<<<<<<<<<<<
+ *     i = 0
+ *     cdef int n
+ */
+  __Pyx_INCREF(__pyx_int_1);
+  __Pyx_DECREF(__pyx_v_e);
+  __pyx_v_e = __pyx_int_1;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":35
+ * cdef _c_b1282int(unsigned char* st, int start, int l):
+ *     e = 1
+ *     i = 0             # <<<<<<<<<<<<<<
+ *     cdef int n
+ *     cdef int j
+ */
+  __Pyx_INCREF(__pyx_int_0);
+  __Pyx_DECREF(__pyx_v_i);
+  __pyx_v_i = __pyx_int_0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":38
+ *     cdef int n
+ *     cdef int j
+ *     for j in range(l):             # <<<<<<<<<<<<<<
+ *         n = st[start+j]
+ *         i += (n * e)
+ */
+  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_v_l; __pyx_t_1+=1) {
+    __pyx_v_j = __pyx_t_1;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":39
+ *     cdef int j
+ *     for j in range(l):
+ *         n = st[start+j]             # <<<<<<<<<<<<<<
+ *         i += (n * e)
+ *         e <<= 7
+ */
+    __pyx_v_n = (__pyx_v_st[(__pyx_v_start + __pyx_v_j)]);
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":40
+ *     for j in range(l):
+ *         n = st[start+j]
+ *         i += (n * e)             # <<<<<<<<<<<<<<
+ *         e <<= 7
+ *     return i
+ */
+    __pyx_t_2 = PyInt_FromLong(__pyx_v_n); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_e); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __pyx_1 = PyNumber_InPlaceAdd(__pyx_v_i, __pyx_t_3); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_1);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __Pyx_DECREF(__pyx_v_i);
+    __pyx_v_i = __pyx_1;
+    __pyx_1 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":41
+ *         n = st[start+j]
+ *         i += (n * e)
+ *         e <<= 7             # <<<<<<<<<<<<<<
+ *     return i
+ * 
+ */
+    __pyx_1 = PyNumber_InPlaceLshift(__pyx_v_e, __pyx_int_7); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_1);
+    __Pyx_DECREF(__pyx_v_e);
+    __pyx_v_e = __pyx_1;
+    __pyx_1 = 0;
+  }
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":42
+ *         i += (n * e)
+ *         e <<= 7
+ *     return i             # <<<<<<<<<<<<<<
+ * 
+ * def b1282int(buf):
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __Pyx_INCREF(__pyx_v_i);
+  __pyx_r = __pyx_v_i;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana._c_b1282int");
+  __pyx_r = 0;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_e);
+  __Pyx_DECREF(__pyx_v_i);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":44
+ *     return i
+ * 
+ * def b1282int(buf):             # <<<<<<<<<<<<<<
+ *     """
+ *     Convert an integer represented as a base 128 string into an C{int} or
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_b1282int(PyObject *__pyx_self, PyObject *__pyx_v_buf); /*proto*/
+static char __pyx_doc_7twisted_6spread_7_banana_b1282int[] = "\n    Convert an integer represented as a base 128 string into an C{int} or\n    C{long}.\n\n    @param st: The integer encoded in a string.\n    @type st: C{str}\n\n    @return: The integer value extracted from the string.\n    @rtype: C{int} or C{long}\n    ";
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_b1282int(PyObject *__pyx_self, PyObject *__pyx_v_buf) {
+  unsigned char *__pyx_v_st;
+  PyObject *__pyx_r = NULL;
+  char *__pyx_t_1;
+  Py_ssize_t __pyx_t_2;
+  PyObject *__pyx_t_3 = NULL;
+  __Pyx_SetupRefcountContext("b1282int");
+  __pyx_self = __pyx_self;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":55
+ *     @rtype: C{int} or C{long}
+ *     """
+ *     cdef unsigned char* st = <unsigned char*><char*>buf             # <<<<<<<<<<<<<<
+ *     return _c_b1282int(st, 0, len(buf))
+ * 
+ */
+  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_buf); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_st = ((unsigned char *)((char *)__pyx_t_1));
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":56
+ *     """
+ *     cdef unsigned char* st = <unsigned char*><char*>buf
+ *     return _c_b1282int(st, 0, len(buf))             # <<<<<<<<<<<<<<
+ * 
+ * # delimiter characters.
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_2 = PyObject_Length(__pyx_v_buf); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_3 = __pyx_f_7twisted_6spread_7_banana__c_b1282int(__pyx_v_st, 0, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_r = __pyx_t_3;
+  __pyx_t_3 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana.b1282int");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":72
+ * cdef unsigned char HIGH_BIT_SET = 0x80
+ * 
+ * def setPrefixLimit(limit):             # <<<<<<<<<<<<<<
+ *     """
+ *     Set the limit on the prefix length for all Banana connections
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_setPrefixLimit(PyObject *__pyx_self, PyObject *__pyx_v_limit); /*proto*/
+static char __pyx_doc_7twisted_6spread_7_banana_setPrefixLimit[] = "\n    Set the limit on the prefix length for all Banana connections\n    established after this call.\n\n    The prefix length limit determines how many bytes of prefix a banana\n    decoder will allow before rejecting a potential object as too large.\n\n    @type limit: C{int}\n    @param limit: The number of bytes of prefix for banana to allow when\n    decoding.\n    ";
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_setPrefixLimit(PyObject *__pyx_self, PyObject *__pyx_v_limit) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_SetupRefcountContext("setPrefixLimit");
+  __pyx_self = __pyx_self;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":85
+ *     """
+ *     global _PREFIX_LIMIT
+ *     _PREFIX_LIMIT = limit             # <<<<<<<<<<<<<<
+ * setPrefixLimit(64)
+ * 
+ */
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp__PREFIX_LIMIT, __pyx_v_limit) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.setPrefixLimit");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":95
+ *     prefixLimit = None
+ * 
+ *     def __init__(self, isClient=1):             # <<<<<<<<<<<<<<
+ *         self.listStack = []
+ *         self.outgoingSymbols = copy.copy(self.outgoingVocabulary)
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_isClient = 0;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_isClient,0};
+  __Pyx_SetupRefcountContext("__init__");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    values[1] = __pyx_int_1;
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      if (kw_args > 0) {
+        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_isClient);
+        if (unlikely(value)) { values[1] = value; kw_args--; }
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_isClient = values[1];
+  } else {
+    __pyx_v_isClient = __pyx_int_1;
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: __pyx_v_isClient = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+      break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.__init__");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":96
+ * 
+ *     def __init__(self, isClient=1):
+ *         self.listStack = []             # <<<<<<<<<<<<<<
+ *         self.outgoingSymbols = copy.copy(self.outgoingVocabulary)
+ *         self.outgoingSymbolCount = 0
+ */
+  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_listStack, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":97
+ *     def __init__(self, isClient=1):
+ *         self.listStack = []
+ *         self.outgoingSymbols = copy.copy(self.outgoingVocabulary)             # <<<<<<<<<<<<<<
+ *         self.outgoingSymbolCount = 0
+ *         self.isClient = isClient
+ */
+  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_copy); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __pyx_t_1 = PyObject_GetAttr(__pyx_1, __pyx_kp_copy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_outgoingVocabulary); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_2);
+  __pyx_t_2 = 0;
+  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_outgoingSymbols, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":98
+ *         self.listStack = []
+ *         self.outgoingSymbols = copy.copy(self.outgoingVocabulary)
+ *         self.outgoingSymbolCount = 0             # <<<<<<<<<<<<<<
+ *         self.isClient = isClient
+ *         self.buf = ''
+ */
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_outgoingSymbolCount, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":99
+ *         self.outgoingSymbols = copy.copy(self.outgoingVocabulary)
+ *         self.outgoingSymbolCount = 0
+ *         self.isClient = isClient             # <<<<<<<<<<<<<<
+ *         self.buf = ''
+ * 
+ */
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_isClient, __pyx_v_isClient) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":100
+ *         self.outgoingSymbolCount = 0
+ *         self.isClient = isClient
+ *         self.buf = ''             # <<<<<<<<<<<<<<
+ * 
+ *     def setPrefixLimit(self, limit):
+ */
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_buf, __pyx_kp_40) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.__init__");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":102
+ *         self.buf = ''
+ * 
+ *     def setPrefixLimit(self, limit):             # <<<<<<<<<<<<<<
+ *         """
+ *         Set the prefix limit for decoding done by this protocol instance.
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_setPrefixLimit(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static char __pyx_doc_7twisted_6spread_7_banana_6Banana_setPrefixLimit[] = "\n        Set the prefix limit for decoding done by this protocol instance.\n\n        @see: L{setPrefixLimit}\n        ";
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana_setPrefixLimit = {__Pyx_NAMESTR("setPrefixLimit"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana_setPrefixLimit, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7twisted_6spread_7_banana_6Banana_setPrefixLimit)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_setPrefixLimit(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_limit = 0;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_limit,0};
+  __Pyx_SetupRefcountContext("setPrefixLimit");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_limit);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("setPrefixLimit", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setPrefixLimit") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_limit = values[1];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_limit = PyTuple_GET_ITEM(__pyx_args, 1);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("setPrefixLimit", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.setPrefixLimit");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":108
+ *         @see: L{setPrefixLimit}
+ *         """
+ *         self.prefixLimit = limit             # <<<<<<<<<<<<<<
+ *         self._smallestLongInt = -2 ** (limit * 7) + 1
+ *         self._smallestInt = -2 ** 31
+ */
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_prefixLimit, __pyx_v_limit) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":109
+ *         """
+ *         self.prefixLimit = limit
+ *         self._smallestLongInt = -2 ** (limit * 7) + 1             # <<<<<<<<<<<<<<
+ *         self._smallestInt = -2 ** 31
+ *         self._largestInt = 2 ** 31 - 1
+ */
+  __pyx_t_1 = PyNumber_Multiply(__pyx_v_limit, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = PyNumber_Power(__pyx_int_2, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_1 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = PyNumber_Add(__pyx_1, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp__smallestLongInt, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":110
+ *         self.prefixLimit = limit
+ *         self._smallestLongInt = -2 ** (limit * 7) + 1
+ *         self._smallestInt = -2 ** 31             # <<<<<<<<<<<<<<
+ *         self._largestInt = 2 ** 31 - 1
+ *         self._largestLongInt = 2 ** (limit * 7) - 1
+ */
+  __pyx_t_2 = PyInt_FromLong((-2147483648)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp__smallestInt, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":111
+ *         self._smallestLongInt = -2 ** (limit * 7) + 1
+ *         self._smallestInt = -2 ** 31
+ *         self._largestInt = 2 ** 31 - 1             # <<<<<<<<<<<<<<
+ *         self._largestLongInt = 2 ** (limit * 7) - 1
+ * 
+ */
+  __pyx_t_2 = PyInt_FromLong(2147483647); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp__largestInt, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":112
+ *         self._smallestInt = -2 ** 31
+ *         self._largestInt = 2 ** 31 - 1
+ *         self._largestLongInt = 2 ** (limit * 7) - 1             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  __pyx_t_2 = PyNumber_Multiply(__pyx_v_limit, __pyx_int_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_1 = PyNumber_Power(__pyx_int_2, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp__largestLongInt, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.setPrefixLimit");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":115
+ * 
+ * 
+ *     def connectionReady(self):             # <<<<<<<<<<<<<<
+ *         """Surrogate for connectionMade
+ *         Called after protocol negotiation.
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_connectionReady(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
+static char __pyx_doc_7twisted_6spread_7_banana_6Banana_connectionReady[] = "Surrogate for connectionMade\n        Called after protocol negotiation.\n        ";
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana_connectionReady = {__Pyx_NAMESTR("connectionReady"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana_connectionReady, METH_O, __Pyx_DOCSTR(__pyx_doc_7twisted_6spread_7_banana_6Banana_connectionReady)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_connectionReady(PyObject *__pyx_self, PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_SetupRefcountContext("connectionReady");
+  __pyx_self = __pyx_self;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":120
+ *         """
+ * 
+ *     def _selectDialect(self, dialect):             # <<<<<<<<<<<<<<
+ *         self.currentDialect = dialect
+ *         self.connectionReady()
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana__selectDialect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana__selectDialect = {__Pyx_NAMESTR("_selectDialect"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana__selectDialect, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana__selectDialect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_dialect = 0;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_dialect,0};
+  __Pyx_SetupRefcountContext("_selectDialect");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_dialect);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("_selectDialect", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_selectDialect") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_dialect = values[1];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_dialect = PyTuple_GET_ITEM(__pyx_args, 1);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("_selectDialect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana._selectDialect");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":121
+ * 
+ *     def _selectDialect(self, dialect):
+ *         self.currentDialect = dialect             # <<<<<<<<<<<<<<
+ *         self.connectionReady()
+ * 
+ */
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_currentDialect, __pyx_v_dialect) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":122
+ *     def _selectDialect(self, dialect):
+ *         self.currentDialect = dialect
+ *         self.connectionReady()             # <<<<<<<<<<<<<<
+ * 
+ *     def callExpressionReceived(self, obj):
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_connectionReady); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana._selectDialect");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":124
+ *         self.connectionReady()
+ * 
+ *     def callExpressionReceived(self, obj):             # <<<<<<<<<<<<<<
+ *         if self.currentDialect:
+ *             self.expressionReceived(obj)
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_callExpressionReceived(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana_callExpressionReceived = {__Pyx_NAMESTR("callExpressionReceived"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana_callExpressionReceived, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_callExpressionReceived(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_obj = 0;
+  PyObject *__pyx_v_serverVer;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  int __pyx_t_2;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  Py_ssize_t __pyx_t_5;
+  PyObject *__pyx_t_6 = NULL;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_obj,0};
+  __Pyx_SetupRefcountContext("callExpressionReceived");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_obj);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("callExpressionReceived", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "callExpressionReceived") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_obj = values[1];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 1);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("callExpressionReceived", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.callExpressionReceived");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __pyx_v_serverVer = Py_None; __Pyx_INCREF(Py_None);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":125
+ * 
+ *     def callExpressionReceived(self, obj):
+ *         if self.currentDialect:             # <<<<<<<<<<<<<<
+ *             self.expressionReceived(obj)
+ *         else:
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_currentDialect); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  if (__pyx_t_2) {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":126
+ *     def callExpressionReceived(self, obj):
+ *         if self.currentDialect:
+ *             self.expressionReceived(obj)             # <<<<<<<<<<<<<<
+ *         else:
+ *             # this is the first message we've received
+ */
+    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_expressionReceived); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+    __Pyx_INCREF(__pyx_v_obj);
+    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_obj);
+    __Pyx_GIVEREF(__pyx_v_obj);
+    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    goto __pyx_L6;
+  }
+  /*else*/ {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":129
+ *         else:
+ *             # this is the first message we've received
+ *             if self.isClient:             # <<<<<<<<<<<<<<
+ *                 # if I'm a client I have to respond
+ *                 for serverVer in obj:
+ */
+    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_isClient); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
+    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    if (__pyx_t_2) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":131
+ *             if self.isClient:
+ *                 # if I'm a client I have to respond
+ *                 for serverVer in obj:             # <<<<<<<<<<<<<<
+ *                     if serverVer in self.knownDialects:
+ *                         self.sendEncoded(serverVer)
+ */
+      if (PyList_CheckExact(__pyx_v_obj) || PyTuple_CheckExact(__pyx_v_obj)) {
+        __pyx_t_5 = 0; __pyx_t_4 = __pyx_v_obj; __Pyx_INCREF(__pyx_t_4);
+      } else {
+        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_4);
+      }
+      for (;;) {
+        if (likely(PyList_CheckExact(__pyx_t_4))) {
+          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
+          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++;
+        } else if (likely(PyTuple_CheckExact(__pyx_t_4))) {
+          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
+          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++;
+        } else {
+          __pyx_t_3 = PyIter_Next(__pyx_t_4);
+          if (!__pyx_t_3) {
+            if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+            break;
+          }
+          __Pyx_GOTREF(__pyx_t_3);
+        }
+        __Pyx_DECREF(__pyx_v_serverVer);
+        __pyx_v_serverVer = __pyx_t_3;
+        __pyx_t_3 = 0;
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":132
+ *                 # if I'm a client I have to respond
+ *                 for serverVer in obj:
+ *                     if serverVer in self.knownDialects:             # <<<<<<<<<<<<<<
+ *                         self.sendEncoded(serverVer)
+ *                         self._selectDialect(serverVer)
+ */
+        __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_knownDialects); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_3);
+        __pyx_t_2 = (PySequence_Contains(__pyx_t_3, __pyx_v_serverVer)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+        if (__pyx_t_2) {
+
+          /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":133
+ *                 for serverVer in obj:
+ *                     if serverVer in self.knownDialects:
+ *                         self.sendEncoded(serverVer)             # <<<<<<<<<<<<<<
+ *                         self._selectDialect(serverVer)
+ *                         break
+ */
+          __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_sendEncoded); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+          __Pyx_GOTREF(__pyx_t_3);
+          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+          __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+          __Pyx_INCREF(__pyx_v_serverVer);
+          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_serverVer);
+          __Pyx_GIVEREF(__pyx_v_serverVer);
+          __pyx_t_6 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+          __Pyx_GOTREF(__pyx_t_6);
+          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+          __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+
+          /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":134
+ *                     if serverVer in self.knownDialects:
+ *                         self.sendEncoded(serverVer)
+ *                         self._selectDialect(serverVer)             # <<<<<<<<<<<<<<
+ *                         break
+ *                 else:
+ */
+          __pyx_t_6 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__selectDialect); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+          __Pyx_GOTREF(__pyx_t_6);
+          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+          __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+          __Pyx_INCREF(__pyx_v_serverVer);
+          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_serverVer);
+          __Pyx_GIVEREF(__pyx_v_serverVer);
+          __pyx_t_3 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+          __Pyx_GOTREF(__pyx_t_3);
+          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+          __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+          /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":135
+ *                         self.sendEncoded(serverVer)
+ *                         self._selectDialect(serverVer)
+ *                         break             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     # I can't speak any of those dialects.
+ */
+          goto __pyx_L9_break;
+          goto __pyx_L10;
+        }
+        __pyx_L10:;
+      }
+      /*else*/ {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":138
+ *                 else:
+ *                     # I can't speak any of those dialects.
+ *                     log.msg("The client doesn't speak any of the protocols "             # <<<<<<<<<<<<<<
+ *                             "offered by the server: disconnecting.")
+ *                     self.transport.loseConnection()
+ */
+        __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_log); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __pyx_t_3 = PyObject_GetAttr(__pyx_1, __pyx_kp_msg); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_3);
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+        __Pyx_INCREF(__pyx_kp_41);
+        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_41);
+        __Pyx_GIVEREF(__pyx_kp_41);
+        __pyx_t_6 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_6);
+        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":140
+ *                     log.msg("The client doesn't speak any of the protocols "
+ *                             "offered by the server: disconnecting.")
+ *                     self.transport.loseConnection()             # <<<<<<<<<<<<<<
+ *             else:
+ *                 if obj in self.knownDialects:
+ */
+        __pyx_t_6 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_transport); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_6);
+        __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_kp_loseConnection); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+        __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_6);
+        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      }
+      __pyx_L9_break:;
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      goto __pyx_L7;
+    }
+    /*else*/ {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":142
+ *                     self.transport.loseConnection()
+ *             else:
+ *                 if obj in self.knownDialects:             # <<<<<<<<<<<<<<
+ *                     self._selectDialect(obj)
+ *                 else:
+ */
+      __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_knownDialects); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_t_2 = (PySequence_Contains(__pyx_t_4, __pyx_v_obj)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      if (__pyx_t_2) {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":143
+ *             else:
+ *                 if obj in self.knownDialects:
+ *                     self._selectDialect(obj)             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     # the client just selected a protocol that I did not suggest.
+ */
+        __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__selectDialect); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_4);
+        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+        __Pyx_INCREF(__pyx_v_obj);
+        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_obj);
+        __Pyx_GIVEREF(__pyx_v_obj);
+        __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+        goto __pyx_L11;
+      }
+      /*else*/ {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":146
+ *                 else:
+ *                     # the client just selected a protocol that I did not suggest.
+ *                     log.msg("The client selected a protocol the server didn't "             # <<<<<<<<<<<<<<
+ *                             "suggest and doesn't know: disconnecting.")
+ *                     self.transport.loseConnection()
+ */
+        __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_log); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __pyx_t_1 = PyObject_GetAttr(__pyx_1, __pyx_kp_msg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+        __Pyx_INCREF(__pyx_kp_42);
+        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_42);
+        __Pyx_GIVEREF(__pyx_kp_42);
+        __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_4);
+        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":148
+ *                     log.msg("The client selected a protocol the server didn't "
+ *                             "suggest and doesn't know: disconnecting.")
+ *                     self.transport.loseConnection()             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+        __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_transport); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_4);
+        __pyx_t_6 = PyObject_GetAttr(__pyx_t_4, __pyx_kp_loseConnection); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_6);
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+        __pyx_t_4 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_4);
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      }
+      __pyx_L11:;
+    }
+    __pyx_L7:;
+  }
+  __pyx_L6:;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.callExpressionReceived");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_serverVer);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":151
+ * 
+ * 
+ *     def connectionMade(self):             # <<<<<<<<<<<<<<
+ *         self.setPrefixLimit(_PREFIX_LIMIT)
+ *         self.currentDialect = None
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_connectionMade(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana_connectionMade = {__Pyx_NAMESTR("connectionMade"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana_connectionMade, METH_O, __Pyx_DOCSTR(0)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_connectionMade(PyObject *__pyx_self, PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  int __pyx_t_4;
+  int __pyx_t_5;
+  __Pyx_SetupRefcountContext("connectionMade");
+  __pyx_self = __pyx_self;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":152
+ * 
+ *     def connectionMade(self):
+ *         self.setPrefixLimit(_PREFIX_LIMIT)             # <<<<<<<<<<<<<<
+ *         self.currentDialect = None
+ *         if not self.isClient:
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_setPrefixLimit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp__PREFIX_LIMIT); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
+  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_1);
+  __Pyx_GIVEREF(__pyx_1);
+  __pyx_1 = 0;
+  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":153
+ *     def connectionMade(self):
+ *         self.setPrefixLimit(_PREFIX_LIMIT)
+ *         self.currentDialect = None             # <<<<<<<<<<<<<<
+ *         if not self.isClient:
+ *             self.sendEncoded(self.knownDialects)
+ */
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_currentDialect, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":154
+ *         self.setPrefixLimit(_PREFIX_LIMIT)
+ *         self.currentDialect = None
+ *         if not self.isClient:             # <<<<<<<<<<<<<<
+ *             self.sendEncoded(self.knownDialects)
+ * 
+ */
+  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_isClient); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_5 = (!__pyx_t_4);
+  if (__pyx_t_5) {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":155
+ *         self.currentDialect = None
+ *         if not self.isClient:
+ *             self.sendEncoded(self.knownDialects)             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_sendEncoded); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_knownDialects); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
+    __Pyx_GIVEREF(__pyx_t_2);
+    __pyx_t_2 = 0;
+    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    goto __pyx_L5;
+  }
+  __pyx_L5:;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.connectionMade");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":158
+ * 
+ * 
+ *     def gotItem(self, item):             # <<<<<<<<<<<<<<
+ *         l = self.listStack
+ *         if l:
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_gotItem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana_gotItem = {__Pyx_NAMESTR("gotItem"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana_gotItem, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_gotItem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_item = 0;
+  PyObject *__pyx_v_l;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_2 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  int __pyx_t_2;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_item,0};
+  __Pyx_SetupRefcountContext("gotItem");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_item);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("gotItem", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "gotItem") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_item = values[1];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_item = PyTuple_GET_ITEM(__pyx_args, 1);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("gotItem", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.gotItem");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __pyx_v_l = Py_None; __Pyx_INCREF(Py_None);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":159
+ * 
+ *     def gotItem(self, item):
+ *         l = self.listStack             # <<<<<<<<<<<<<<
+ *         if l:
+ *             l[-1][1].append(item)
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_listStack); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_v_l);
+  __pyx_v_l = __pyx_t_1;
+  __pyx_t_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":160
+ *     def gotItem(self, item):
+ *         l = self.listStack
+ *         if l:             # <<<<<<<<<<<<<<
+ *             l[-1][1].append(item)
+ *         else:
+ */
+  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_l); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (__pyx_t_2) {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":161
+ *         l = self.listStack
+ *         if l:
+ *             l[-1][1].append(item)             # <<<<<<<<<<<<<<
+ *         else:
+ *             self.callExpressionReceived(item)
+ */
+    __pyx_1 = __Pyx_GetItemInt(__pyx_v_l, -1, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_1);
+    __pyx_2 = __Pyx_GetItemInt(__pyx_1, 1, sizeof(long), PyInt_FromLong); if (!__pyx_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_2);
+    __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+    __pyx_t_1 = __Pyx_PyObject_Append(__pyx_2, __pyx_v_item); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    goto __pyx_L6;
+  }
+  /*else*/ {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":163
+ *             l[-1][1].append(item)
+ *         else:
+ *             self.callExpressionReceived(item)             # <<<<<<<<<<<<<<
+ * 
+ *     def dataReceived(self, chunk):
+ */
+    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+    __Pyx_INCREF(__pyx_v_item);
+    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_item);
+    __Pyx_GIVEREF(__pyx_v_item);
+    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  }
+  __pyx_L6:;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_2);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.gotItem");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_l);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":165
+ *             self.callExpressionReceived(item)
+ * 
+ *     def dataReceived(self, chunk):             # <<<<<<<<<<<<<<
+ *         self.buf += chunk
+ *         cdef unsigned char* buf = <unsigned char*><char*>self.buf
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_dataReceived(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana_dataReceived = {__Pyx_NAMESTR("dataReceived"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana_dataReceived, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_dataReceived(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_chunk = 0;
+  unsigned char *__pyx_v_buf;
+  PyObject *__pyx_v_listStack;
+  PyObject *__pyx_v_gotItem;
+  int __pyx_v_n;
+  int __pyx_v_i;
+  int __pyx_v_typebyte;
+  int __pyx_v_pos;
+  int __pyx_v_size_limit;
+  PyObject *__pyx_v_orig_i;
+  PyObject *__pyx_v_num;
+  PyObject *__pyx_v_item;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_2 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  char *__pyx_t_2;
+  Py_ssize_t __pyx_t_3;
+  int __pyx_t_4;
+  unsigned char __pyx_t_5;
+  PyObject *__pyx_t_6 = NULL;
+  PyObject *__pyx_t_7 = NULL;
+  int __pyx_t_8;
+  int __pyx_t_9;
+  int __pyx_t_10;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_chunk,0};
+  __Pyx_SetupRefcountContext("dataReceived");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_chunk);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("dataReceived", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "dataReceived") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_chunk = values[1];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_chunk = PyTuple_GET_ITEM(__pyx_args, 1);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("dataReceived", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.dataReceived");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __pyx_v_listStack = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_gotItem = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_orig_i = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_num = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_item = Py_None; __Pyx_INCREF(Py_None);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":166
+ * 
+ *     def dataReceived(self, chunk):
+ *         self.buf += chunk             # <<<<<<<<<<<<<<
+ *         cdef unsigned char* buf = <unsigned char*><char*>self.buf
+ *         listStack = self.listStack
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_buf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_1 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_v_chunk); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_buf, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":167
+ *     def dataReceived(self, chunk):
+ *         self.buf += chunk
+ *         cdef unsigned char* buf = <unsigned char*><char*>self.buf             # <<<<<<<<<<<<<<
+ *         listStack = self.listStack
+ *         gotItem = self.gotItem
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_buf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v_buf = ((unsigned char *)((char *)__pyx_t_2));
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":168
+ *         self.buf += chunk
+ *         cdef unsigned char* buf = <unsigned char*><char*>self.buf
+ *         listStack = self.listStack             # <<<<<<<<<<<<<<
+ *         gotItem = self.gotItem
+ *         cdef int n = len(self.buf)
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_listStack); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_v_listStack);
+  __pyx_v_listStack = __pyx_t_1;
+  __pyx_t_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":169
+ *         cdef unsigned char* buf = <unsigned char*><char*>self.buf
+ *         listStack = self.listStack
+ *         gotItem = self.gotItem             # <<<<<<<<<<<<<<
+ *         cdef int n = len(self.buf)
+ *         cdef int i = 0
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_gotItem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_v_gotItem);
+  __pyx_v_gotItem = __pyx_t_1;
+  __pyx_t_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":170
+ *         listStack = self.listStack
+ *         gotItem = self.gotItem
+ *         cdef int n = len(self.buf)             # <<<<<<<<<<<<<<
+ *         cdef int i = 0
+ *         cdef int typebyte
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_buf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v_n = __pyx_t_3;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":171
+ *         gotItem = self.gotItem
+ *         cdef int n = len(self.buf)
+ *         cdef int i = 0             # <<<<<<<<<<<<<<
+ *         cdef int typebyte
+ *         cdef int pos
+ */
+  __pyx_v_i = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":174
+ *         cdef int typebyte
+ *         cdef int pos
+ *         cdef int size_limit = SIZE_LIMIT             # <<<<<<<<<<<<<<
+ *         while i < n:
+ *             orig_i = i
+ */
+  __pyx_v_size_limit = __pyx_v_7twisted_6spread_7_banana_SIZE_LIMIT;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":175
+ *         cdef int pos
+ *         cdef int size_limit = SIZE_LIMIT
+ *         while i < n:             # <<<<<<<<<<<<<<
+ *             orig_i = i
+ *             pos = i
+ */
+  while (1) {
+    __pyx_t_4 = (__pyx_v_i < __pyx_v_n);
+    if (!__pyx_t_4) break;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":176
+ *         cdef int size_limit = SIZE_LIMIT
+ *         while i < n:
+ *             orig_i = i             # <<<<<<<<<<<<<<
+ *             pos = i
+ *             while pos < n:
+ */
+    __pyx_t_1 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_v_orig_i);
+    __pyx_v_orig_i = __pyx_t_1;
+    __pyx_t_1 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":177
+ *         while i < n:
+ *             orig_i = i
+ *             pos = i             # <<<<<<<<<<<<<<
+ *             while pos < n:
+ *                 if buf[pos] & HIGH_BIT_SET:
+ */
+    __pyx_v_pos = __pyx_v_i;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":178
+ *             orig_i = i
+ *             pos = i
+ *             while pos < n:             # <<<<<<<<<<<<<<
+ *                 if buf[pos] & HIGH_BIT_SET:
+ *                     break
+ */
+    while (1) {
+      __pyx_t_4 = (__pyx_v_pos < __pyx_v_n);
+      if (!__pyx_t_4) break;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":179
+ *             pos = i
+ *             while pos < n:
+ *                 if buf[pos] & HIGH_BIT_SET:             # <<<<<<<<<<<<<<
+ *                     break
+ *                 pos += 1
+ */
+      __pyx_t_5 = ((__pyx_v_buf[__pyx_v_pos]) & __pyx_v_7twisted_6spread_7_banana_HIGH_BIT_SET);
+      if (__pyx_t_5) {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":180
+ *             while pos < n:
+ *                 if buf[pos] & HIGH_BIT_SET:
+ *                     break             # <<<<<<<<<<<<<<
+ *                 pos += 1
+ *             else:
+ */
+        goto __pyx_L9_break;
+        goto __pyx_L10;
+      }
+      __pyx_L10:;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":181
+ *                 if buf[pos] & HIGH_BIT_SET:
+ *                     break
+ *                 pos += 1             # <<<<<<<<<<<<<<
+ *             else:
+ *                 if pos > self.prefixLimit:
+ */
+      __pyx_v_pos += 1;
+    }
+    /*else*/ {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":183
+ *                 pos += 1
+ *             else:
+ *                 if pos > self.prefixLimit:             # <<<<<<<<<<<<<<
+ *                     raise BananaError("Security precaution: more than %d bytes of prefix" % (self.prefixLimit,))
+ *                 self.buf = self.buf[orig_i:]
+ */
+      __pyx_t_1 = PyInt_FromLong(__pyx_v_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_6 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_prefixLimit); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_GT); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      if (__pyx_t_4) {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":184
+ *             else:
+ *                 if pos > self.prefixLimit:
+ *                     raise BananaError("Security precaution: more than %d bytes of prefix" % (self.prefixLimit,))             # <<<<<<<<<<<<<<
+ *                 self.buf = self.buf[orig_i:]
+ *                 return
+ */
+        __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_BananaError); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_prefixLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
+        __Pyx_GIVEREF(__pyx_t_7);
+        __pyx_t_7 = 0;
+        __pyx_t_7 = PyNumber_Remainder(__pyx_kp_43, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
+        __Pyx_GIVEREF(__pyx_t_7);
+        __pyx_t_7 = 0;
+        __pyx_t_7 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+        __Pyx_Raise(__pyx_t_7, 0, 0);
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        goto __pyx_L11;
+      }
+      __pyx_L11:;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":185
+ *                 if pos > self.prefixLimit:
+ *                     raise BananaError("Security precaution: more than %d bytes of prefix" % (self.prefixLimit,))
+ *                 self.buf = self.buf[orig_i:]             # <<<<<<<<<<<<<<
+ *                 return
+ *             typebyte = buf[pos]
+ */
+      __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_buf); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_orig_i); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_1 = PySequence_GetSlice(__pyx_t_7, __pyx_t_3, PY_SSIZE_T_MAX); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_buf, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":186
+ *                     raise BananaError("Security precaution: more than %d bytes of prefix" % (self.prefixLimit,))
+ *                 self.buf = self.buf[orig_i:]
+ *                 return             # <<<<<<<<<<<<<<
+ *             typebyte = buf[pos]
+ *             if pos-i > self.prefixLimit:
+ */
+      __Pyx_XDECREF(__pyx_r);
+      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+      goto __pyx_L0;
+    }
+    __pyx_L9_break:;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":187
+ *                 self.buf = self.buf[orig_i:]
+ *                 return
+ *             typebyte = buf[pos]             # <<<<<<<<<<<<<<
+ *             if pos-i > self.prefixLimit:
+ *                 raise BananaError("Security precaution: longer than %d bytes worth of prefix" % (self.prefixLimit,))
+ */
+    __pyx_v_typebyte = (__pyx_v_buf[__pyx_v_pos]);
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":188
+ *                 return
+ *             typebyte = buf[pos]
+ *             if pos-i > self.prefixLimit:             # <<<<<<<<<<<<<<
+ *                 raise BananaError("Security precaution: longer than %d bytes worth of prefix" % (self.prefixLimit,))
+ *             num = _c_b1282int(buf, i, pos-i)
+ */
+    __pyx_t_7 = PyInt_FromLong((__pyx_v_pos - __pyx_v_i)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_7);
+    __pyx_t_6 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_prefixLimit); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_GT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":189
+ *             typebyte = buf[pos]
+ *             if pos-i > self.prefixLimit:
+ *                 raise BananaError("Security precaution: longer than %d bytes worth of prefix" % (self.prefixLimit,))             # <<<<<<<<<<<<<<
+ *             num = _c_b1282int(buf, i, pos-i)
+ *             i = pos+1
+ */
+      __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_BananaError); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_prefixLimit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
+      __Pyx_GIVEREF(__pyx_t_1);
+      __pyx_t_1 = 0;
+      __pyx_t_1 = PyNumber_Remainder(__pyx_kp_44, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
+      __Pyx_GIVEREF(__pyx_t_1);
+      __pyx_t_1 = 0;
+      __pyx_t_1 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __Pyx_Raise(__pyx_t_1, 0, 0);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      goto __pyx_L12;
+    }
+    __pyx_L12:;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":190
+ *             if pos-i > self.prefixLimit:
+ *                 raise BananaError("Security precaution: longer than %d bytes worth of prefix" % (self.prefixLimit,))
+ *             num = _c_b1282int(buf, i, pos-i)             # <<<<<<<<<<<<<<
+ *             i = pos+1
+ *             if typebyte == LIST:
+ */
+    __pyx_t_1 = __pyx_f_7twisted_6spread_7_banana__c_b1282int(__pyx_v_buf, __pyx_v_i, (__pyx_v_pos - __pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_v_num);
+    __pyx_v_num = __pyx_t_1;
+    __pyx_t_1 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":191
+ *                 raise BananaError("Security precaution: longer than %d bytes worth of prefix" % (self.prefixLimit,))
+ *             num = _c_b1282int(buf, i, pos-i)
+ *             i = pos+1             # <<<<<<<<<<<<<<
+ *             if typebyte == LIST:
+ *                 if num > SIZE_LIMIT:
+ */
+    __pyx_v_i = (__pyx_v_pos + 1);
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":192
+ *             num = _c_b1282int(buf, i, pos-i)
+ *             i = pos+1
+ *             if typebyte == LIST:             # <<<<<<<<<<<<<<
+ *                 if num > SIZE_LIMIT:
+ *                     raise BananaError("Security precaution: List too long.")
+ */
+    __pyx_t_4 = (__pyx_v_typebyte == __pyx_v_7twisted_6spread_7_banana_LIST);
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":193
+ *             i = pos+1
+ *             if typebyte == LIST:
+ *                 if num > SIZE_LIMIT:             # <<<<<<<<<<<<<<
+ *                     raise BananaError("Security precaution: List too long.")
+ *                 listStack.append((num, []))
+ */
+      __pyx_t_1 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_SIZE_LIMIT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_6 = PyObject_RichCompare(__pyx_v_num, __pyx_t_1, Py_GT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      if (__pyx_t_4) {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":194
+ *             if typebyte == LIST:
+ *                 if num > SIZE_LIMIT:
+ *                     raise BananaError("Security precaution: List too long.")             # <<<<<<<<<<<<<<
+ *                 listStack.append((num, []))
+ *             elif typebyte == STRING:
+ */
+        __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_BananaError); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+        __Pyx_INCREF(__pyx_kp_45);
+        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_45);
+        __Pyx_GIVEREF(__pyx_kp_45);
+        __pyx_t_1 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+        __Pyx_Raise(__pyx_t_1, 0, 0);
+        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        goto __pyx_L14;
+      }
+      __pyx_L14:;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":195
+ *                 if num > SIZE_LIMIT:
+ *                     raise BananaError("Security precaution: List too long.")
+ *                 listStack.append((num, []))             # <<<<<<<<<<<<<<
+ *             elif typebyte == STRING:
+ *                 if num > SIZE_LIMIT:
+ */
+      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      __Pyx_INCREF(__pyx_v_num);
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_num);
+      __Pyx_GIVEREF(__pyx_v_num);
+      PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_t_1));
+      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
+      __pyx_t_1 = 0;
+      __pyx_t_1 = __Pyx_PyObject_Append(__pyx_v_listStack, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      goto __pyx_L13;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":196
+ *                     raise BananaError("Security precaution: List too long.")
+ *                 listStack.append((num, []))
+ *             elif typebyte == STRING:             # <<<<<<<<<<<<<<
+ *                 if num > SIZE_LIMIT:
+ *                     raise BananaError("Security precaution: String too long.")
+ */
+    __pyx_t_4 = (__pyx_v_typebyte == __pyx_v_7twisted_6spread_7_banana_STRING);
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":197
+ *                 listStack.append((num, []))
+ *             elif typebyte == STRING:
+ *                 if num > SIZE_LIMIT:             # <<<<<<<<<<<<<<
+ *                     raise BananaError("Security precaution: String too long.")
+ *                 if n-i >= num:
+ */
+      __pyx_t_1 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_SIZE_LIMIT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_6 = PyObject_RichCompare(__pyx_v_num, __pyx_t_1, Py_GT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      if (__pyx_t_4) {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":198
+ *             elif typebyte == STRING:
+ *                 if num > SIZE_LIMIT:
+ *                     raise BananaError("Security precaution: String too long.")             # <<<<<<<<<<<<<<
+ *                 if n-i >= num:
+ *                     gotItem(self.buf[i:i+num])
+ */
+        __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_BananaError); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+        __Pyx_INCREF(__pyx_kp_46);
+        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_46);
+        __Pyx_GIVEREF(__pyx_kp_46);
+        __pyx_t_1 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+        __Pyx_Raise(__pyx_t_1, 0, 0);
+        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        goto __pyx_L15;
+      }
+      __pyx_L15:;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":199
+ *                 if num > SIZE_LIMIT:
+ *                     raise BananaError("Security precaution: String too long.")
+ *                 if n-i >= num:             # <<<<<<<<<<<<<<
+ *                     gotItem(self.buf[i:i+num])
+ *                     i += num
+ */
+      __pyx_t_1 = PyInt_FromLong((__pyx_v_n - __pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_v_num, Py_GE); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      if (__pyx_t_4) {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":200
+ *                     raise BananaError("Security precaution: String too long.")
+ *                 if n-i >= num:
+ *                     gotItem(self.buf[i:i+num])             # <<<<<<<<<<<<<<
+ *                     i += num
+ *                 else:
+ */
+        __pyx_t_6 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_buf); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_6);
+        __pyx_t_1 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_v_num); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+        __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_7); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+        __pyx_1 = PySequence_GetSlice(__pyx_t_6, __pyx_v_i, __pyx_t_3); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_1);
+        __Pyx_GIVEREF(__pyx_1);
+        __pyx_1 = 0;
+        __pyx_t_7 = PyObject_Call(__pyx_v_gotItem, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":201
+ *                 if n-i >= num:
+ *                     gotItem(self.buf[i:i+num])
+ *                     i += num             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     self.buf = self.buf[orig_i:]
+ */
+        __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_v_num); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __pyx_v_i += __pyx_t_8;
+        goto __pyx_L16;
+      }
+      /*else*/ {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":203
+ *                     i += num
+ *                 else:
+ *                     self.buf = self.buf[orig_i:]             # <<<<<<<<<<<<<<
+ *                     return
+ *             elif typebyte == INT:
+ */
+        __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_buf); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_orig_i); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __pyx_1 = PySequence_GetSlice(__pyx_t_7, __pyx_t_3, PY_SSIZE_T_MAX); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+        if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_buf, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":204
+ *                 else:
+ *                     self.buf = self.buf[orig_i:]
+ *                     return             # <<<<<<<<<<<<<<
+ *             elif typebyte == INT:
+ *                 gotItem(num)
+ */
+        __Pyx_XDECREF(__pyx_r);
+        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+        goto __pyx_L0;
+      }
+      __pyx_L16:;
+      goto __pyx_L13;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":205
+ *                     self.buf = self.buf[orig_i:]
+ *                     return
+ *             elif typebyte == INT:             # <<<<<<<<<<<<<<
+ *                 gotItem(num)
+ *             elif typebyte == LONGINT:
+ */
+    __pyx_t_4 = (__pyx_v_typebyte == __pyx_v_7twisted_6spread_7_banana_INT);
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":206
+ *                     return
+ *             elif typebyte == INT:
+ *                 gotItem(num)             # <<<<<<<<<<<<<<
+ *             elif typebyte == LONGINT:
+ *                 gotItem(num)
+ */
+      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
+      __Pyx_INCREF(__pyx_v_num);
+      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_num);
+      __Pyx_GIVEREF(__pyx_v_num);
+      __pyx_t_6 = PyObject_Call(__pyx_v_gotItem, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      goto __pyx_L13;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":207
+ *             elif typebyte == INT:
+ *                 gotItem(num)
+ *             elif typebyte == LONGINT:             # <<<<<<<<<<<<<<
+ *                 gotItem(num)
+ *             elif typebyte == LONGNEG:
+ */
+    __pyx_t_4 = (__pyx_v_typebyte == __pyx_v_7twisted_6spread_7_banana_LONGINT);
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":208
+ *                 gotItem(num)
+ *             elif typebyte == LONGINT:
+ *                 gotItem(num)             # <<<<<<<<<<<<<<
+ *             elif typebyte == LONGNEG:
+ *                 gotItem(-num)
+ */
+      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      __Pyx_INCREF(__pyx_v_num);
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_num);
+      __Pyx_GIVEREF(__pyx_v_num);
+      __pyx_t_7 = PyObject_Call(__pyx_v_gotItem, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      goto __pyx_L13;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":209
+ *             elif typebyte == LONGINT:
+ *                 gotItem(num)
+ *             elif typebyte == LONGNEG:             # <<<<<<<<<<<<<<
+ *                 gotItem(-num)
+ *             elif typebyte == NEG:
+ */
+    __pyx_t_4 = (__pyx_v_typebyte == __pyx_v_7twisted_6spread_7_banana_LONGNEG);
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":210
+ *                 gotItem(num)
+ *             elif typebyte == LONGNEG:
+ *                 gotItem(-num)             # <<<<<<<<<<<<<<
+ *             elif typebyte == NEG:
+ *                 gotItem(-num)
+ */
+      __pyx_1 = PyNumber_Negative(__pyx_v_num); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
+      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_1);
+      __Pyx_GIVEREF(__pyx_1);
+      __pyx_1 = 0;
+      __pyx_t_6 = PyObject_Call(__pyx_v_gotItem, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      goto __pyx_L13;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":211
+ *             elif typebyte == LONGNEG:
+ *                 gotItem(-num)
+ *             elif typebyte == NEG:             # <<<<<<<<<<<<<<
+ *                 gotItem(-num)
+ *             elif typebyte == VOCAB:
+ */
+    __pyx_t_4 = (__pyx_v_typebyte == __pyx_v_7twisted_6spread_7_banana_NEG);
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":212
+ *                 gotItem(-num)
+ *             elif typebyte == NEG:
+ *                 gotItem(-num)             # <<<<<<<<<<<<<<
+ *             elif typebyte == VOCAB:
+ *                 gotItem(self.incomingVocabulary[num])
+ */
+      __pyx_1 = PyNumber_Negative(__pyx_v_num); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_1);
+      __Pyx_GIVEREF(__pyx_1);
+      __pyx_1 = 0;
+      __pyx_t_7 = PyObject_Call(__pyx_v_gotItem, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      goto __pyx_L13;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":213
+ *             elif typebyte == NEG:
+ *                 gotItem(-num)
+ *             elif typebyte == VOCAB:             # <<<<<<<<<<<<<<
+ *                 gotItem(self.incomingVocabulary[num])
+ *             elif typebyte == FLOAT:
+ */
+    __pyx_t_4 = (__pyx_v_typebyte == __pyx_v_7twisted_6spread_7_banana_VOCAB);
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":214
+ *                 gotItem(-num)
+ *             elif typebyte == VOCAB:
+ *                 gotItem(self.incomingVocabulary[num])             # <<<<<<<<<<<<<<
+ *             elif typebyte == FLOAT:
+ *                 if n-i >= 8:
+ */
+      __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_incomingVocabulary); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __pyx_1 = PyObject_GetItem(__pyx_t_7, __pyx_v_num); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
+      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_1);
+      __Pyx_GIVEREF(__pyx_1);
+      __pyx_1 = 0;
+      __pyx_t_6 = PyObject_Call(__pyx_v_gotItem, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      goto __pyx_L13;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":215
+ *             elif typebyte == VOCAB:
+ *                 gotItem(self.incomingVocabulary[num])
+ *             elif typebyte == FLOAT:             # <<<<<<<<<<<<<<
+ *                 if n-i >= 8:
+ *                     gotItem(struct.unpack("!d", self.buf[i:i+8])[0])
+ */
+    __pyx_t_4 = (__pyx_v_typebyte == __pyx_v_7twisted_6spread_7_banana_FLOAT);
+    if (__pyx_t_4) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":216
+ *                 gotItem(self.incomingVocabulary[num])
+ *             elif typebyte == FLOAT:
+ *                 if n-i >= 8:             # <<<<<<<<<<<<<<
+ *                     gotItem(struct.unpack("!d", self.buf[i:i+8])[0])
+ *                     i += 8
+ */
+      __pyx_t_4 = ((__pyx_v_n - __pyx_v_i) >= 8);
+      if (__pyx_t_4) {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":217
+ *             elif typebyte == FLOAT:
+ *                 if n-i >= 8:
+ *                     gotItem(struct.unpack("!d", self.buf[i:i+8])[0])             # <<<<<<<<<<<<<<
+ *                     i += 8
+ *                 else:
+ */
+        __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_struct); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __pyx_t_6 = PyObject_GetAttr(__pyx_1, __pyx_kp_unpack); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_6);
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+        __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_buf); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __pyx_1 = PySequence_GetSlice(__pyx_t_7, __pyx_v_i, (__pyx_v_i + 8)); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
+        __Pyx_INCREF(__pyx_kp_47);
+        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_47);
+        __Pyx_GIVEREF(__pyx_kp_47);
+        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_1);
+        __Pyx_GIVEREF(__pyx_1);
+        __pyx_1 = 0;
+        __pyx_t_1 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
+        __pyx_1 = __Pyx_GetItemInt(__pyx_t_1, 0, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_1);
+        __Pyx_GIVEREF(__pyx_1);
+        __pyx_1 = 0;
+        __pyx_t_7 = PyObject_Call(__pyx_v_gotItem, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":218
+ *                 if n-i >= 8:
+ *                     gotItem(struct.unpack("!d", self.buf[i:i+8])[0])
+ *                     i += 8             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     self.buf = self.buf[orig_i:]
+ */
+        __pyx_v_i += 8;
+        goto __pyx_L17;
+      }
+      /*else*/ {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":220
+ *                     i += 8
+ *                 else:
+ *                     self.buf = self.buf[orig_i:]             # <<<<<<<<<<<<<<
+ *                     return
+ *             else:
+ */
+        __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_buf); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_orig_i); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __pyx_1 = PySequence_GetSlice(__pyx_t_7, __pyx_t_3, PY_SSIZE_T_MAX); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+        if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_buf, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":221
+ *                 else:
+ *                     self.buf = self.buf[orig_i:]
+ *                     return             # <<<<<<<<<<<<<<
+ *             else:
+ *                 raise NotImplementedError(("Invalid Type Byte %r" % (typebyte,)))
+ */
+        __Pyx_XDECREF(__pyx_r);
+        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+        goto __pyx_L0;
+      }
+      __pyx_L17:;
+      goto __pyx_L13;
+    }
+    /*else*/ {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":223
+ *                     return
+ *             else:
+ *                 raise NotImplementedError(("Invalid Type Byte %r" % (typebyte,)))             # <<<<<<<<<<<<<<
+ *             while listStack and (len(listStack[-1][1]) == listStack[-1][0]):
+ *                 item = listStack.pop()[1]
+ */
+      __pyx_t_7 = PyInt_FromLong(__pyx_v_typebyte); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
+      __Pyx_GIVEREF(__pyx_t_7);
+      __pyx_t_7 = 0;
+      __pyx_t_7 = PyNumber_Remainder(__pyx_kp_48, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
+      __Pyx_GIVEREF(__pyx_t_7);
+      __pyx_t_7 = 0;
+      __pyx_t_7 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_Raise(__pyx_t_7, 0, 0);
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    }
+    __pyx_L13:;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":224
+ *             else:
+ *                 raise NotImplementedError(("Invalid Type Byte %r" % (typebyte,)))
+ *             while listStack and (len(listStack[-1][1]) == listStack[-1][0]):             # <<<<<<<<<<<<<<
+ *                 item = listStack.pop()[1]
+ *                 gotItem(item)
+ */
+    while (1) {
+      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_listStack); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      if (__pyx_t_4) {
+        __pyx_1 = __Pyx_GetItemInt(__pyx_v_listStack, -1, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __pyx_2 = __Pyx_GetItemInt(__pyx_1, 1, sizeof(long), PyInt_FromLong); if (!__pyx_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_2);
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+        __pyx_t_3 = PyObject_Length(__pyx_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+        __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_7);
+        __pyx_1 = __Pyx_GetItemInt(__pyx_v_listStack, -1, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_1);
+        __pyx_2 = __Pyx_GetItemInt(__pyx_1, 0, sizeof(long), PyInt_FromLong); if (!__pyx_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_2);
+        __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+        __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_2, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+        __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+        __pyx_t_10 = __pyx_t_9;
+      } else {
+        __pyx_t_10 = __pyx_t_4;
+      }
+      if (!__pyx_t_10) break;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":225
+ *                 raise NotImplementedError(("Invalid Type Byte %r" % (typebyte,)))
+ *             while listStack and (len(listStack[-1][1]) == listStack[-1][0]):
+ *                 item = listStack.pop()[1]             # <<<<<<<<<<<<<<
+ *                 gotItem(item)
+ *         self.buf = ''
+ */
+      __pyx_t_1 = PyObject_GetAttr(__pyx_v_listStack, __pyx_kp_pop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __pyx_1 = __Pyx_GetItemInt(__pyx_t_7, 1, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      __Pyx_DECREF(__pyx_v_item);
+      __pyx_v_item = __pyx_1;
+      __pyx_1 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":226
+ *             while listStack and (len(listStack[-1][1]) == listStack[-1][0]):
+ *                 item = listStack.pop()[1]
+ *                 gotItem(item)             # <<<<<<<<<<<<<<
+ *         self.buf = ''
+ * 
+ */
+      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
+      __Pyx_INCREF(__pyx_v_item);
+      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_item);
+      __Pyx_GIVEREF(__pyx_v_item);
+      __pyx_t_1 = PyObject_Call(__pyx_v_gotItem, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    }
+  }
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":227
+ *                 item = listStack.pop()[1]
+ *                 gotItem(item)
+ *         self.buf = ''             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_kp_buf, __pyx_kp_49) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_2);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_XDECREF(__pyx_t_7);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.dataReceived");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_listStack);
+  __Pyx_DECREF(__pyx_v_gotItem);
+  __Pyx_DECREF(__pyx_v_orig_i);
+  __Pyx_DECREF(__pyx_v_num);
+  __Pyx_DECREF(__pyx_v_item);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":230
+ * 
+ * 
+ *     def expressionReceived(self, lst):             # <<<<<<<<<<<<<<
+ *         """Called when an expression (list, string, or int) is received.
+ *         """
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_expressionReceived(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static char __pyx_doc_7twisted_6spread_7_banana_6Banana_expressionReceived[] = "Called when an expression (list, string, or int) is received.\n        ";
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana_expressionReceived = {__Pyx_NAMESTR("expressionReceived"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana_expressionReceived, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7twisted_6spread_7_banana_6Banana_expressionReceived)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_expressionReceived(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_lst = 0;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_t_1 = NULL;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_lst,0};
+  __Pyx_SetupRefcountContext("expressionReceived");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_lst);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("expressionReceived", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "expressionReceived") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_lst = values[1];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_lst = PyTuple_GET_ITEM(__pyx_args, 1);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("expressionReceived", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.expressionReceived");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":233
+ *         """Called when an expression (list, string, or int) is received.
+ *         """
+ *         raise NotImplementedError()             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.expressionReceived");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":279
+ *         incomingVocabulary[v] = k
+ * 
+ *     def sendEncoded(self, obj):             # <<<<<<<<<<<<<<
+ *         io = cStringIO.StringIO()
+ *         self._encode(obj, io.write)
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_sendEncoded(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana_sendEncoded = {__Pyx_NAMESTR("sendEncoded"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana_sendEncoded, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana_sendEncoded(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_obj = 0;
+  PyObject *__pyx_v_io;
+  PyObject *__pyx_v_value;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_obj,0};
+  __Pyx_SetupRefcountContext("sendEncoded");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[2] = {0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_obj);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("sendEncoded", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "sendEncoded") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_obj = values[1];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 1);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("sendEncoded", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.sendEncoded");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __pyx_v_io = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_value = Py_None; __Pyx_INCREF(Py_None);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":280
+ * 
+ *     def sendEncoded(self, obj):
+ *         io = cStringIO.StringIO()             # <<<<<<<<<<<<<<
+ *         self._encode(obj, io.write)
+ *         value = io.getvalue()
+ */
+  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_cStringIO); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __pyx_t_1 = PyObject_GetAttr(__pyx_1, __pyx_kp_StringIO); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_v_io);
+  __pyx_v_io = __pyx_t_2;
+  __pyx_t_2 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":281
+ *     def sendEncoded(self, obj):
+ *         io = cStringIO.StringIO()
+ *         self._encode(obj, io.write)             # <<<<<<<<<<<<<<
+ *         value = io.getvalue()
+ *         self.transport.write(value)
+ */
+  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_io, __pyx_kp_write); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+  __Pyx_INCREF(__pyx_v_obj);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_obj);
+  __Pyx_GIVEREF(__pyx_v_obj);
+  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_1);
+  __pyx_t_1 = 0;
+  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":282
+ *         io = cStringIO.StringIO()
+ *         self._encode(obj, io.write)
+ *         value = io.getvalue()             # <<<<<<<<<<<<<<
+ *         self.transport.write(value)
+ * 
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_io, __pyx_kp_getvalue); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_v_value);
+  __pyx_v_value = __pyx_t_3;
+  __pyx_t_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":283
+ *         self._encode(obj, io.write)
+ *         value = io.getvalue()
+ *         self.transport.write(value)             # <<<<<<<<<<<<<<
+ * 
+ *     def _encode(self, obj, write):
+ */
+  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_transport); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_kp_write); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+  __Pyx_INCREF(__pyx_v_value);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);
+  __Pyx_GIVEREF(__pyx_v_value);
+  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana.sendEncoded");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_io);
+  __Pyx_DECREF(__pyx_v_value);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":285
+ *         self.transport.write(value)
+ * 
+ *     def _encode(self, obj, write):             # <<<<<<<<<<<<<<
+ *         if isinstance(obj, (list, tuple)):
+ *             if len(obj) > SIZE_LIMIT:
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana__encode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_7twisted_6spread_7_banana_6Banana__encode = {__Pyx_NAMESTR("_encode"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_6Banana__encode, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_6Banana__encode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_self = 0;
+  PyObject *__pyx_v_obj = 0;
+  PyObject *__pyx_v_write = 0;
+  PyObject *__pyx_v_elem;
+  PyObject *__pyx_v_symbolID;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_2 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  int __pyx_t_2;
+  Py_ssize_t __pyx_t_3;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  PyObject *__pyx_t_6 = NULL;
+  int __pyx_t_7;
+  int __pyx_t_8;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_self,&__pyx_kp_obj,&__pyx_kp_write,0};
+  __Pyx_SetupRefcountContext("_encode");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[3] = {0,0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_self);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_obj);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("_encode", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+      case  2:
+      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_kp_write);
+      if (likely(values[2])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("_encode", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_encode") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_self = values[0];
+    __pyx_v_obj = values[1];
+    __pyx_v_write = values[2];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
+    __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 1);
+    __pyx_v_write = PyTuple_GET_ITEM(__pyx_args, 2);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("_encode", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("twisted.spread._banana.Banana._encode");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __pyx_v_elem = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_symbolID = Py_None; __Pyx_INCREF(Py_None);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":286
+ * 
+ *     def _encode(self, obj, write):
+ *         if isinstance(obj, (list, tuple)):             # <<<<<<<<<<<<<<
+ *             if len(obj) > SIZE_LIMIT:
+ *                 raise BananaError(
+ */
+  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_INCREF(((PyObject *)((PyObject*)&PyList_Type)));
+  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)&PyList_Type)));
+  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyList_Type)));
+  __Pyx_INCREF(((PyObject *)((PyObject*)&PyTuple_Type)));
+  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)((PyObject*)&PyTuple_Type)));
+  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyTuple_Type)));
+  __pyx_t_2 = PyObject_IsInstance(__pyx_v_obj, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  if (__pyx_t_2) {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":287
+ *     def _encode(self, obj, write):
+ *         if isinstance(obj, (list, tuple)):
+ *             if len(obj) > SIZE_LIMIT:             # <<<<<<<<<<<<<<
+ *                 raise BananaError(
+ *                     "list/tuple is too long to send (%d)" % (len(obj),))
+ */
+    __pyx_t_3 = PyObject_Length(__pyx_v_obj); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = (__pyx_t_3 > __pyx_v_7twisted_6spread_7_banana_SIZE_LIMIT);
+    if (__pyx_t_2) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":288
+ *         if isinstance(obj, (list, tuple)):
+ *             if len(obj) > SIZE_LIMIT:
+ *                 raise BananaError(             # <<<<<<<<<<<<<<
+ *                     "list/tuple is too long to send (%d)" % (len(obj),))
+ *             int2b128(len(obj), write)
+ */
+      __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_BananaError); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":289
+ *             if len(obj) > SIZE_LIMIT:
+ *                 raise BananaError(
+ *                     "list/tuple is too long to send (%d)" % (len(obj),))             # <<<<<<<<<<<<<<
+ *             int2b128(len(obj), write)
+ *             write(chr(LIST))
+ */
+      __pyx_t_3 = PyObject_Length(__pyx_v_obj); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
+      __Pyx_GIVEREF(__pyx_t_1);
+      __pyx_t_1 = 0;
+      __pyx_t_1 = PyNumber_Remainder(__pyx_kp_50, ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
+      __Pyx_GIVEREF(__pyx_t_1);
+      __pyx_t_1 = 0;
+      __pyx_t_1 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+      __Pyx_Raise(__pyx_t_1, 0, 0);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      goto __pyx_L7;
+    }
+    __pyx_L7:;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":290
+ *                 raise BananaError(
+ *                     "list/tuple is too long to send (%d)" % (len(obj),))
+ *             int2b128(len(obj), write)             # <<<<<<<<<<<<<<
+ *             write(chr(LIST))
+ *             for elem in obj:
+ */
+    __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_51); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_1);
+    __pyx_t_3 = PyObject_Length(__pyx_v_obj); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
+    __Pyx_GIVEREF(__pyx_t_1);
+    __Pyx_INCREF(__pyx_v_write);
+    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_write);
+    __Pyx_GIVEREF(__pyx_v_write);
+    __pyx_t_1 = 0;
+    __pyx_t_1 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":291
+ *                     "list/tuple is too long to send (%d)" % (len(obj),))
+ *             int2b128(len(obj), write)
+ *             write(chr(LIST))             # <<<<<<<<<<<<<<
+ *             for elem in obj:
+ *                 self._encode(elem, write)
+ */
+    __pyx_t_1 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_LIST); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
+    __Pyx_GIVEREF(__pyx_t_1);
+    __pyx_t_1 = 0;
+    __pyx_t_1 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
+    __Pyx_GIVEREF(__pyx_t_1);
+    __pyx_t_1 = 0;
+    __pyx_t_1 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":292
+ *             int2b128(len(obj), write)
+ *             write(chr(LIST))
+ *             for elem in obj:             # <<<<<<<<<<<<<<
+ *                 self._encode(elem, write)
+ *         elif isinstance(obj, (int, long)):
+ */
+    if (PyList_CheckExact(__pyx_v_obj) || PyTuple_CheckExact(__pyx_v_obj)) {
+      __pyx_t_3 = 0; __pyx_t_1 = __pyx_v_obj; __Pyx_INCREF(__pyx_t_1);
+    } else {
+      __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_obj); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+    }
+    for (;;) {
+      if (likely(PyList_CheckExact(__pyx_t_1))) {
+        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
+        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++;
+      } else if (likely(PyTuple_CheckExact(__pyx_t_1))) {
+        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
+        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++;
+      } else {
+        __pyx_t_4 = PyIter_Next(__pyx_t_1);
+        if (!__pyx_t_4) {
+          if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+          break;
+        }
+        __Pyx_GOTREF(__pyx_t_4);
+      }
+      __Pyx_DECREF(__pyx_v_elem);
+      __pyx_v_elem = __pyx_t_4;
+      __pyx_t_4 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":293
+ *             write(chr(LIST))
+ *             for elem in obj:
+ *                 self._encode(elem, write)             # <<<<<<<<<<<<<<
+ *         elif isinstance(obj, (int, long)):
+ *             if obj < self._smallestLongInt or obj > self._largestLongInt:
+ */
+      __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__encode); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
+      __Pyx_INCREF(__pyx_v_elem);
+      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_elem);
+      __Pyx_GIVEREF(__pyx_v_elem);
+      __Pyx_INCREF(__pyx_v_write);
+      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_write);
+      __Pyx_GIVEREF(__pyx_v_write);
+      __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    }
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    goto __pyx_L6;
+  }
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":294
+ *             for elem in obj:
+ *                 self._encode(elem, write)
+ *         elif isinstance(obj, (int, long)):             # <<<<<<<<<<<<<<
+ *             if obj < self._smallestLongInt or obj > self._largestLongInt:
+ *                 raise BananaError(
+ */
+  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_INCREF(((PyObject *)((PyObject*)&PyInt_Type)));
+  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)&PyInt_Type)));
+  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyInt_Type)));
+  __Pyx_INCREF(((PyObject *)((PyObject*)&PyLong_Type)));
+  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)((PyObject*)&PyLong_Type)));
+  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyLong_Type)));
+  __pyx_t_2 = PyObject_IsInstance(__pyx_v_obj, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  if (__pyx_t_2) {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":295
+ *                 self._encode(elem, write)
+ *         elif isinstance(obj, (int, long)):
+ *             if obj < self._smallestLongInt or obj > self._largestLongInt:             # <<<<<<<<<<<<<<
+ *                 raise BananaError(
+ *                     "int/long is too large to send (%d)" % (obj,))
+ */
+    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__smallestLongInt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_6 = PyObject_RichCompare(__pyx_v_obj, __pyx_t_1, Py_LT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    if (!__pyx_t_2) {
+      __pyx_t_6 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__largestLongInt); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __pyx_t_1 = PyObject_RichCompare(__pyx_v_obj, __pyx_t_6, Py_GT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __pyx_t_8 = __pyx_t_7;
+    } else {
+      __pyx_t_8 = __pyx_t_2;
+    }
+    if (__pyx_t_8) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":296
+ *         elif isinstance(obj, (int, long)):
+ *             if obj < self._smallestLongInt or obj > self._largestLongInt:
+ *                 raise BananaError(             # <<<<<<<<<<<<<<
+ *                     "int/long is too large to send (%d)" % (obj,))
+ *             if obj < self._smallestInt:
+ */
+      __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_BananaError); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":297
+ *             if obj < self._smallestLongInt or obj > self._largestLongInt:
+ *                 raise BananaError(
+ *                     "int/long is too large to send (%d)" % (obj,))             # <<<<<<<<<<<<<<
+ *             if obj < self._smallestInt:
+ *                 int2b128(-obj, write)
+ */
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      __Pyx_INCREF(__pyx_v_obj);
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_obj);
+      __Pyx_GIVEREF(__pyx_v_obj);
+      __pyx_t_6 = PyNumber_Remainder(__pyx_kp_52, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
+      __Pyx_GIVEREF(__pyx_t_6);
+      __pyx_t_6 = 0;
+      __pyx_t_6 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_Raise(__pyx_t_6, 0, 0);
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      goto __pyx_L10;
+    }
+    __pyx_L10:;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":298
+ *                 raise BananaError(
+ *                     "int/long is too large to send (%d)" % (obj,))
+ *             if obj < self._smallestInt:             # <<<<<<<<<<<<<<
+ *                 int2b128(-obj, write)
+ *                 write(chr(LONGNEG))
+ */
+    __pyx_t_6 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__smallestInt); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __pyx_t_1 = PyObject_RichCompare(__pyx_v_obj, __pyx_t_6, Py_LT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    if (__pyx_t_8) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":299
+ *                     "int/long is too large to send (%d)" % (obj,))
+ *             if obj < self._smallestInt:
+ *                 int2b128(-obj, write)             # <<<<<<<<<<<<<<
+ *                 write(chr(LONGNEG))
+ *             elif obj < 0:
+ */
+      __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_51); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __pyx_2 = PyNumber_Negative(__pyx_v_obj); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_2);
+      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_2);
+      __Pyx_GIVEREF(__pyx_2);
+      __Pyx_INCREF(__pyx_v_write);
+      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_write);
+      __Pyx_GIVEREF(__pyx_v_write);
+      __pyx_2 = 0;
+      __pyx_t_6 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":300
+ *             if obj < self._smallestInt:
+ *                 int2b128(-obj, write)
+ *                 write(chr(LONGNEG))             # <<<<<<<<<<<<<<
+ *             elif obj < 0:
+ *                 int2b128(-obj, write)
+ */
+      __pyx_t_6 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_LONGNEG); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
+      __Pyx_GIVEREF(__pyx_t_6);
+      __pyx_t_6 = 0;
+      __pyx_t_6 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
+      __Pyx_GIVEREF(__pyx_t_6);
+      __pyx_t_6 = 0;
+      __pyx_t_6 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      goto __pyx_L11;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":301
+ *                 int2b128(-obj, write)
+ *                 write(chr(LONGNEG))
+ *             elif obj < 0:             # <<<<<<<<<<<<<<
+ *                 int2b128(-obj, write)
+ *                 write(chr(NEG))
+ */
+    __pyx_t_6 = PyObject_RichCompare(__pyx_v_obj, __pyx_int_0, Py_LT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    if (__pyx_t_8) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":302
+ *                 write(chr(LONGNEG))
+ *             elif obj < 0:
+ *                 int2b128(-obj, write)             # <<<<<<<<<<<<<<
+ *                 write(chr(NEG))
+ *             elif obj <= self._largestInt:
+ */
+      __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_51); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_2);
+      __pyx_1 = PyNumber_Negative(__pyx_v_obj); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_1);
+      __Pyx_GIVEREF(__pyx_1);
+      __Pyx_INCREF(__pyx_v_write);
+      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_write);
+      __Pyx_GIVEREF(__pyx_v_write);
+      __pyx_1 = 0;
+      __pyx_t_1 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":303
+ *             elif obj < 0:
+ *                 int2b128(-obj, write)
+ *                 write(chr(NEG))             # <<<<<<<<<<<<<<
+ *             elif obj <= self._largestInt:
+ *                 int2b128(obj, write)
+ */
+      __pyx_t_1 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_NEG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
+      __Pyx_GIVEREF(__pyx_t_1);
+      __pyx_t_1 = 0;
+      __pyx_t_1 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
+      __Pyx_GIVEREF(__pyx_t_1);
+      __pyx_t_1 = 0;
+      __pyx_t_1 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      goto __pyx_L11;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":304
+ *                 int2b128(-obj, write)
+ *                 write(chr(NEG))
+ *             elif obj <= self._largestInt:             # <<<<<<<<<<<<<<
+ *                 int2b128(obj, write)
+ *                 write(chr(INT))
+ */
+    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__largestInt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_6 = PyObject_RichCompare(__pyx_v_obj, __pyx_t_1, Py_LE); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    if (__pyx_t_8) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":305
+ *                 write(chr(NEG))
+ *             elif obj <= self._largestInt:
+ *                 int2b128(obj, write)             # <<<<<<<<<<<<<<
+ *                 write(chr(INT))
+ *             else:
+ */
+      __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_51); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      __Pyx_INCREF(__pyx_v_obj);
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_obj);
+      __Pyx_GIVEREF(__pyx_v_obj);
+      __Pyx_INCREF(__pyx_v_write);
+      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_write);
+      __Pyx_GIVEREF(__pyx_v_write);
+      __pyx_t_1 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":306
+ *             elif obj <= self._largestInt:
+ *                 int2b128(obj, write)
+ *                 write(chr(INT))             # <<<<<<<<<<<<<<
+ *             else:
+ *                 int2b128(obj, write)
+ */
+      __pyx_t_1 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_INT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
+      __Pyx_GIVEREF(__pyx_t_1);
+      __pyx_t_1 = 0;
+      __pyx_t_1 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
+      __Pyx_GIVEREF(__pyx_t_1);
+      __pyx_t_1 = 0;
+      __pyx_t_1 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      goto __pyx_L11;
+    }
+    /*else*/ {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":308
+ *                 write(chr(INT))
+ *             else:
+ *                 int2b128(obj, write)             # <<<<<<<<<<<<<<
+ *                 write(chr(LONGINT))
+ *         elif isinstance(obj, float):
+ */
+      __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_51); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_2);
+      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      __Pyx_INCREF(__pyx_v_obj);
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_obj);
+      __Pyx_GIVEREF(__pyx_v_obj);
+      __Pyx_INCREF(__pyx_v_write);
+      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_write);
+      __Pyx_GIVEREF(__pyx_v_write);
+      __pyx_t_6 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":309
+ *             else:
+ *                 int2b128(obj, write)
+ *                 write(chr(LONGINT))             # <<<<<<<<<<<<<<
+ *         elif isinstance(obj, float):
+ *             write(chr(FLOAT))
+ */
+      __pyx_t_6 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_LONGINT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
+      __Pyx_GIVEREF(__pyx_t_6);
+      __pyx_t_6 = 0;
+      __pyx_t_6 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
+      __Pyx_GIVEREF(__pyx_t_6);
+      __pyx_t_6 = 0;
+      __pyx_t_6 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    }
+    __pyx_L11:;
+    goto __pyx_L6;
+  }
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":310
+ *                 int2b128(obj, write)
+ *                 write(chr(LONGINT))
+ *         elif isinstance(obj, float):             # <<<<<<<<<<<<<<
+ *             write(chr(FLOAT))
+ *             write(struct.pack("!d", obj))
+ */
+  __pyx_t_8 = PyObject_TypeCheck(__pyx_v_obj, ((PyTypeObject *)((PyObject*)&PyFloat_Type))); 
+  if (__pyx_t_8) {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":311
+ *                 write(chr(LONGINT))
+ *         elif isinstance(obj, float):
+ *             write(chr(FLOAT))             # <<<<<<<<<<<<<<
+ *             write(struct.pack("!d", obj))
+ *         elif isinstance(obj, str):
+ */
+    __pyx_t_6 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_FLOAT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
+    __Pyx_GIVEREF(__pyx_t_6);
+    __pyx_t_6 = 0;
+    __pyx_t_6 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
+    __Pyx_GIVEREF(__pyx_t_6);
+    __pyx_t_6 = 0;
+    __pyx_t_6 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":312
+ *         elif isinstance(obj, float):
+ *             write(chr(FLOAT))
+ *             write(struct.pack("!d", obj))             # <<<<<<<<<<<<<<
+ *         elif isinstance(obj, str):
+ *             # TODO: an API for extending banana...
+ */
+    __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_struct); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_1);
+    __pyx_t_6 = PyObject_GetAttr(__pyx_1, __pyx_kp_pack); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    __Pyx_INCREF(__pyx_kp_53);
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_53);
+    __Pyx_GIVEREF(__pyx_kp_53);
+    __Pyx_INCREF(__pyx_v_obj);
+    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_obj);
+    __Pyx_GIVEREF(__pyx_v_obj);
+    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+    __Pyx_GIVEREF(__pyx_t_5);
+    __pyx_t_5 = 0;
+    __pyx_t_5 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    goto __pyx_L6;
+  }
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":313
+ *             write(chr(FLOAT))
+ *             write(struct.pack("!d", obj))
+ *         elif isinstance(obj, str):             # <<<<<<<<<<<<<<
+ *             # TODO: an API for extending banana...
+ *             if self.currentDialect == "pb" and obj in self.outgoingSymbols:
+ */
+  __pyx_t_8 = PyObject_TypeCheck(__pyx_v_obj, ((PyTypeObject *)((PyObject*)&PyString_Type))); 
+  if (__pyx_t_8) {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":315
+ *         elif isinstance(obj, str):
+ *             # TODO: an API for extending banana...
+ *             if self.currentDialect == "pb" and obj in self.outgoingSymbols:             # <<<<<<<<<<<<<<
+ *                 symbolID = self.outgoingSymbols[obj]
+ *                 int2b128(symbolID, write)
+ */
+    __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_currentDialect); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_5);
+    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_kp_54, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    if (__pyx_t_8) {
+      __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_outgoingSymbols); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_2 = (PySequence_Contains(__pyx_t_1, __pyx_v_obj)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __pyx_t_7 = __pyx_t_2;
+    } else {
+      __pyx_t_7 = __pyx_t_8;
+    }
+    if (__pyx_t_7) {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":316
+ *             # TODO: an API for extending banana...
+ *             if self.currentDialect == "pb" and obj in self.outgoingSymbols:
+ *                 symbolID = self.outgoingSymbols[obj]             # <<<<<<<<<<<<<<
+ *                 int2b128(symbolID, write)
+ *                 write(chr(VOCAB))
+ */
+      __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_outgoingSymbols); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_obj); if (!__pyx_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_2);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_v_symbolID);
+      __pyx_v_symbolID = __pyx_2;
+      __pyx_2 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":317
+ *             if self.currentDialect == "pb" and obj in self.outgoingSymbols:
+ *                 symbolID = self.outgoingSymbols[obj]
+ *                 int2b128(symbolID, write)             # <<<<<<<<<<<<<<
+ *                 write(chr(VOCAB))
+ *             else:
+ */
+      __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_51); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      __Pyx_INCREF(__pyx_v_symbolID);
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_symbolID);
+      __Pyx_GIVEREF(__pyx_v_symbolID);
+      __Pyx_INCREF(__pyx_v_write);
+      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_write);
+      __Pyx_GIVEREF(__pyx_v_write);
+      __pyx_t_5 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":318
+ *                 symbolID = self.outgoingSymbols[obj]
+ *                 int2b128(symbolID, write)
+ *                 write(chr(VOCAB))             # <<<<<<<<<<<<<<
+ *             else:
+ *                 if len(obj) > SIZE_LIMIT:
+ */
+      __pyx_t_5 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_VOCAB); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+      __Pyx_GIVEREF(__pyx_t_5);
+      __pyx_t_5 = 0;
+      __pyx_t_5 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+      __Pyx_GIVEREF(__pyx_t_5);
+      __pyx_t_5 = 0;
+      __pyx_t_5 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+      goto __pyx_L12;
+    }
+    /*else*/ {
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":320
+ *                 write(chr(VOCAB))
+ *             else:
+ *                 if len(obj) > SIZE_LIMIT:             # <<<<<<<<<<<<<<
+ *                     raise BananaError(
+ *                         "string is too long to send (%d)" % (len(obj),))
+ */
+      __pyx_t_3 = PyObject_Length(__pyx_v_obj); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_7 = (__pyx_t_3 > __pyx_v_7twisted_6spread_7_banana_SIZE_LIMIT);
+      if (__pyx_t_7) {
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":321
+ *             else:
+ *                 if len(obj) > SIZE_LIMIT:
+ *                     raise BananaError(             # <<<<<<<<<<<<<<
+ *                         "string is too long to send (%d)" % (len(obj),))
+ *                 int2b128(len(obj), write)
+ */
+        __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_BananaError); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_2);
+
+        /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":322
+ *                 if len(obj) > SIZE_LIMIT:
+ *                     raise BananaError(
+ *                         "string is too long to send (%d)" % (len(obj),))             # <<<<<<<<<<<<<<
+ *                 int2b128(len(obj), write)
+ *                 write(chr(STRING))
+ */
+        __pyx_t_3 = PyObject_Length(__pyx_v_obj); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_5);
+        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+        __Pyx_GIVEREF(__pyx_t_5);
+        __pyx_t_5 = 0;
+        __pyx_t_5 = PyNumber_Remainder(__pyx_kp_55, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_5);
+        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+        __Pyx_GIVEREF(__pyx_t_5);
+        __pyx_t_5 = 0;
+        __pyx_t_5 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_5);
+        __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+        __Pyx_Raise(__pyx_t_5, 0, 0);
+        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        goto __pyx_L13;
+      }
+      __pyx_L13:;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":323
+ *                     raise BananaError(
+ *                         "string is too long to send (%d)" % (len(obj),))
+ *                 int2b128(len(obj), write)             # <<<<<<<<<<<<<<
+ *                 write(chr(STRING))
+ *                 write(obj)
+ */
+      __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_51); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_1);
+      __pyx_t_3 = PyObject_Length(__pyx_v_obj); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+      __Pyx_GIVEREF(__pyx_t_5);
+      __Pyx_INCREF(__pyx_v_write);
+      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_write);
+      __Pyx_GIVEREF(__pyx_v_write);
+      __pyx_t_5 = 0;
+      __pyx_t_5 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":324
+ *                         "string is too long to send (%d)" % (len(obj),))
+ *                 int2b128(len(obj), write)
+ *                 write(chr(STRING))             # <<<<<<<<<<<<<<
+ *                 write(obj)
+ *         else:
+ */
+      __pyx_t_5 = PyInt_FromLong(__pyx_v_7twisted_6spread_7_banana_STRING); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+      __Pyx_GIVEREF(__pyx_t_5);
+      __pyx_t_5 = 0;
+      __pyx_t_5 = PyObject_Call(__pyx_builtin_chr, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+      __Pyx_GIVEREF(__pyx_t_5);
+      __pyx_t_5 = 0;
+      __pyx_t_5 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+
+      /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":325
+ *                 int2b128(len(obj), write)
+ *                 write(chr(STRING))
+ *                 write(obj)             # <<<<<<<<<<<<<<
+ *         else:
+ *             raise BananaError("could not send object: %r" % (obj,))
+ */
+      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
+      __Pyx_INCREF(__pyx_v_obj);
+      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_obj);
+      __Pyx_GIVEREF(__pyx_v_obj);
+      __pyx_t_1 = PyObject_Call(__pyx_v_write, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    }
+    __pyx_L12:;
+    goto __pyx_L6;
+  }
+  /*else*/ {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":327
+ *                 write(obj)
+ *         else:
+ *             raise BananaError("could not send object: %r" % (obj,))             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+    __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_BananaError); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_2);
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    __Pyx_INCREF(__pyx_v_obj);
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_obj);
+    __Pyx_GIVEREF(__pyx_v_obj);
+    __pyx_t_5 = PyNumber_Remainder(__pyx_kp_56, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+    __Pyx_GIVEREF(__pyx_t_5);
+    __pyx_t_5 = 0;
+    __pyx_t_5 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+    __Pyx_Raise(__pyx_t_5, 0, 0);
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_L6:;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_2);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_AddTraceback("twisted.spread._banana.Banana._encode");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_elem);
+  __Pyx_DECREF(__pyx_v_symbolID);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":336
+ * 
+ * 
+ * def encode(lst):             # <<<<<<<<<<<<<<
+ *     """Encode a list s-expression."""
+ *     io = cStringIO.StringIO()
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_encode(PyObject *__pyx_self, PyObject *__pyx_v_lst); /*proto*/
+static char __pyx_doc_7twisted_6spread_7_banana_encode[] = "Encode a list s-expression.";
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_encode(PyObject *__pyx_self, PyObject *__pyx_v_lst) {
+  PyObject *__pyx_v_io;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  __Pyx_SetupRefcountContext("encode");
+  __pyx_self = __pyx_self;
+  __pyx_v_io = Py_None; __Pyx_INCREF(Py_None);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":338
+ * def encode(lst):
+ *     """Encode a list s-expression."""
+ *     io = cStringIO.StringIO()             # <<<<<<<<<<<<<<
+ *     _i.transport = io
+ *     _i.sendEncoded(lst)
+ */
+  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_cStringIO); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __pyx_t_1 = PyObject_GetAttr(__pyx_1, __pyx_kp_StringIO); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_v_io);
+  __pyx_v_io = __pyx_t_2;
+  __pyx_t_2 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":339
+ *     """Encode a list s-expression."""
+ *     io = cStringIO.StringIO()
+ *     _i.transport = io             # <<<<<<<<<<<<<<
+ *     _i.sendEncoded(lst)
+ *     return io.getvalue()
+ */
+  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp__i); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  if (PyObject_SetAttr(__pyx_1, __pyx_kp_transport, __pyx_v_io) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":340
+ *     io = cStringIO.StringIO()
+ *     _i.transport = io
+ *     _i.sendEncoded(lst)             # <<<<<<<<<<<<<<
+ *     return io.getvalue()
+ * 
+ */
+  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp__i); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __pyx_t_2 = PyObject_GetAttr(__pyx_1, __pyx_kp_sendEncoded); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_INCREF(__pyx_v_lst);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_lst);
+  __Pyx_GIVEREF(__pyx_v_lst);
+  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":341
+ *     _i.transport = io
+ *     _i.sendEncoded(lst)
+ *     return io.getvalue()             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_3 = PyObject_GetAttr(__pyx_v_io, __pyx_kp_getvalue); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana.encode");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_io);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+/* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":344
+ * 
+ * 
+ * def decode(st):             # <<<<<<<<<<<<<<
+ *     """
+ *     Decode a banana-encoded string.
+ */
+
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_decode(PyObject *__pyx_self, PyObject *__pyx_v_st); /*proto*/
+static char __pyx_doc_7twisted_6spread_7_banana_decode[] = "\n    Decode a banana-encoded string.\n    ";
+static PyObject *__pyx_pf_7twisted_6spread_7_banana_decode(PyObject *__pyx_self, PyObject *__pyx_v_st) {
+  PyObject *__pyx_v_l;
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  __Pyx_SetupRefcountContext("decode");
+  __pyx_self = __pyx_self;
+  __pyx_v_l = Py_None; __Pyx_INCREF(Py_None);
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":348
+ *     Decode a banana-encoded string.
+ *     """
+ *     l = []             # <<<<<<<<<<<<<<
+ *     _i.expressionReceived = l.append
+ *     try:
+ */
+  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_DECREF(__pyx_v_l);
+  __pyx_v_l = ((PyObject *)__pyx_t_1);
+  __pyx_t_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":349
+ *     """
+ *     l = []
+ *     _i.expressionReceived = l.append             # <<<<<<<<<<<<<<
+ *     try:
+ *         _i.dataReceived(st)
+ */
+  __pyx_t_1 = PyObject_GetAttr(__pyx_v_l, __pyx_kp_append); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp__i); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  if (PyObject_SetAttr(__pyx_1, __pyx_kp_expressionReceived, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":350
+ *     l = []
+ *     _i.expressionReceived = l.append
+ *     try:             # <<<<<<<<<<<<<<
+ *         _i.dataReceived(st)
+ *     finally:
+ */
+  /*try:*/ {
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":351
+ *     _i.expressionReceived = l.append
+ *     try:
+ *         _i.dataReceived(st)             # <<<<<<<<<<<<<<
+ *     finally:
+ *         _i.buf = ''
+ */
+    __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp__i); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L6;}
+    __Pyx_GOTREF(__pyx_1);
+    __pyx_t_1 = PyObject_GetAttr(__pyx_1, __pyx_kp_dataReceived); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L6;}
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L6;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
+    __Pyx_INCREF(__pyx_v_st);
+    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_st);
+    __Pyx_GIVEREF(__pyx_v_st);
+    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L6;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  }
+  /*finally:*/ {
+    int __pyx_why;
+    PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
+    int __pyx_exc_lineno;
+    __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
+    __pyx_why = 0; goto __pyx_L7;
+    __pyx_L6: {
+      __pyx_why = 4;
+      __Pyx_XDECREF(__pyx_1); __pyx_1 = 0;
+      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
+      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
+      __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
+      __pyx_exc_lineno = __pyx_lineno;
+      goto __pyx_L7;
+    }
+    __pyx_L7:;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":353
+ *         _i.dataReceived(st)
+ *     finally:
+ *         _i.buf = ''             # <<<<<<<<<<<<<<
+ *         del _i.expressionReceived
+ *     return l[0]
+ */
+    __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp__i); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
+    __Pyx_GOTREF(__pyx_1);
+    if (PyObject_SetAttr(__pyx_1, __pyx_kp_buf, __pyx_kp_57) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
+    __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":354
+ *     finally:
+ *         _i.buf = ''
+ *         del _i.expressionReceived             # <<<<<<<<<<<<<<
+ *     return l[0]
+ */
+    __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp__i); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
+    __Pyx_GOTREF(__pyx_1);
+    if (PyObject_DelAttr(__pyx_1, __pyx_kp_expressionReceived) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
+    __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+    goto __pyx_L9;
+    __pyx_L8_error:;
+    if (__pyx_why == 4) {
+      Py_XDECREF(__pyx_exc_type);
+      Py_XDECREF(__pyx_exc_value);
+      Py_XDECREF(__pyx_exc_tb);
+    }
+    goto __pyx_L1_error;
+    __pyx_L9:;
+    switch (__pyx_why) {
+      case 4: {
+        __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
+        __pyx_lineno = __pyx_exc_lineno;
+        __pyx_exc_type = 0;
+        __pyx_exc_value = 0;
+        __pyx_exc_tb = 0;
+        goto __pyx_L1_error;
+      }
+    }
+  }
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":355
+ *         _i.buf = ''
+ *         del _i.expressionReceived
+ *     return l[0]             # <<<<<<<<<<<<<<
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_1 = __Pyx_GetItemInt(__pyx_v_l, 0, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __pyx_r = __pyx_1;
+  __pyx_1 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana.decode");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_l);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_FinishRefcountContext();
+  return __pyx_r;
+}
+
+static struct PyMethodDef __pyx_methods[] = {
+  {__Pyx_NAMESTR("int2b128"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_int2b128, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
+  {__Pyx_NAMESTR("b1282int"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_b1282int, METH_O, __Pyx_DOCSTR(__pyx_doc_7twisted_6spread_7_banana_b1282int)},
+  {__Pyx_NAMESTR("setPrefixLimit"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_setPrefixLimit, METH_O, __Pyx_DOCSTR(__pyx_doc_7twisted_6spread_7_banana_setPrefixLimit)},
+  {__Pyx_NAMESTR("encode"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_encode, METH_O, __Pyx_DOCSTR(__pyx_doc_7twisted_6spread_7_banana_encode)},
+  {__Pyx_NAMESTR("decode"), (PyCFunction)__pyx_pf_7twisted_6spread_7_banana_decode, METH_O, __Pyx_DOCSTR(__pyx_doc_7twisted_6spread_7_banana_decode)},
+  {0, 0, 0, 0}
+};
+
+static void __pyx_init_filenames(void); /*proto*/
+
+#if PY_MAJOR_VERSION >= 3
+static struct PyModuleDef __pyx_moduledef = {
+    PyModuleDef_HEAD_INIT,
+    __Pyx_NAMESTR("_banana"),
+    __Pyx_DOCSTR(__pyx_mdoc), /* m_doc */
+    -1, /* m_size */
+    __pyx_methods /* m_methods */,
+    NULL, /* m_reload */
+    NULL, /* m_traverse */
+    NULL, /* m_clear */
+    NULL /* m_free */
+};
+#endif
+
+static __Pyx_StringTabEntry __pyx_string_tab[] = {
+  {&__pyx_kp___main__, __pyx_k___main__, sizeof(__pyx_k___main__), 1, 1, 1},
+  {&__pyx_kp_integer, __pyx_k_integer, sizeof(__pyx_k_integer), 1, 1, 1},
+  {&__pyx_kp_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 1, 1, 1},
+  {&__pyx_kp_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 1, 1, 1},
+  {&__pyx_kp_limit, __pyx_k_limit, sizeof(__pyx_k_limit), 1, 1, 1},
+  {&__pyx_kp_self, __pyx_k_self, sizeof(__pyx_k_self), 1, 1, 1},
+  {&__pyx_kp_isClient, __pyx_k_isClient, sizeof(__pyx_k_isClient), 1, 1, 1},
+  {&__pyx_kp_dialect, __pyx_k_dialect, sizeof(__pyx_k_dialect), 1, 1, 1},
+  {&__pyx_kp_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 1, 1, 1},
+  {&__pyx_kp_item, __pyx_k_item, sizeof(__pyx_k_item), 1, 1, 1},
+  {&__pyx_kp_chunk, __pyx_k_chunk, sizeof(__pyx_k_chunk), 1, 1, 1},
+  {&__pyx_kp_lst, __pyx_k_lst, sizeof(__pyx_k_lst), 1, 1, 1},
+  {&__pyx_kp_write, __pyx_k_write, sizeof(__pyx_k_write), 1, 1, 1},
+  {&__pyx_kp_st, __pyx_k_st, sizeof(__pyx_k_st), 1, 1, 1},
+  {&__pyx_kp_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 1, 1, 1},
+  {&__pyx_kp_cStringIO, __pyx_k_cStringIO, sizeof(__pyx_k_cStringIO), 1, 1, 1},
+  {&__pyx_kp_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 1, 1, 1},
+  {&__pyx_kp_1, __pyx_k_1, sizeof(__pyx_k_1), 1, 1, 1},
+  {&__pyx_kp_protocol, __pyx_k_protocol, sizeof(__pyx_k_protocol), 1, 1, 1},
+  {&__pyx_kp_2, __pyx_k_2, sizeof(__pyx_k_2), 1, 1, 1},
+  {&__pyx_kp_styles, __pyx_k_styles, sizeof(__pyx_k_styles), 1, 1, 1},
+  {&__pyx_kp_3, __pyx_k_3, sizeof(__pyx_k_3), 1, 1, 1},
+  {&__pyx_kp_log, __pyx_k_log, sizeof(__pyx_k_log), 1, 1, 1},
+  {&__pyx_kp_BananaError, __pyx_k_BananaError, sizeof(__pyx_k_BananaError), 0, 1, 1},
+  {&__pyx_kp_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 1, 1, 1},
+  {&__pyx_kp_setPrefixLimit, __pyx_k_setPrefixLimit, sizeof(__pyx_k_setPrefixLimit), 1, 1, 1},
+  {&__pyx_kp_Banana, __pyx_k_Banana, sizeof(__pyx_k_Banana), 0, 1, 1},
+  {&__pyx_kp_Protocol, __pyx_k_Protocol, sizeof(__pyx_k_Protocol), 1, 1, 1},
+  {&__pyx_kp_Ephemeral, __pyx_k_Ephemeral, sizeof(__pyx_k_Ephemeral), 1, 1, 1},
+  {&__pyx_kp_object, __pyx_k_object, sizeof(__pyx_k_object), 1, 1, 1},
+  {&__pyx_kp_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 1, 0},
+  {&__pyx_kp_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0},
+  {&__pyx_kp_knownDialects, __pyx_k_knownDialects, sizeof(__pyx_k_knownDialects), 1, 1, 1},
+  {&__pyx_kp_prefixLimit, __pyx_k_prefixLimit, sizeof(__pyx_k_prefixLimit), 1, 1, 1},
+  {&__pyx_kp___init__, __pyx_k___init__, sizeof(__pyx_k___init__), 1, 1, 1},
+  {&__pyx_kp_connectionReady, __pyx_k_connectionReady, sizeof(__pyx_k_connectionReady), 1, 1, 1},
+  {&__pyx_kp__selectDialect, __pyx_k__selectDialect, sizeof(__pyx_k__selectDialect), 1, 1, 1},
+  {&__pyx_kp_6, __pyx_k_6, sizeof(__pyx_k_6), 1, 1, 1},
+  {&__pyx_kp_connectionMade, __pyx_k_connectionMade, sizeof(__pyx_k_connectionMade), 1, 1, 1},
+  {&__pyx_kp_gotItem, __pyx_k_gotItem, sizeof(__pyx_k_gotItem), 1, 1, 1},
+  {&__pyx_kp_dataReceived, __pyx_k_dataReceived, sizeof(__pyx_k_dataReceived), 1, 1, 1},
+  {&__pyx_kp_expressionReceived, __pyx_k_expressionReceived, sizeof(__pyx_k_expressionReceived), 1, 1, 1},
+  {&__pyx_kp_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 1, 0},
+  {&__pyx_kp_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0},
+  {&__pyx_kp_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 1, 0},
+  {&__pyx_kp_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 1, 0},
+  {&__pyx_kp_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 1, 0},
+  {&__pyx_kp_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 1, 0},
+  {&__pyx_kp_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0},
+  {&__pyx_kp_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 1, 0},
+  {&__pyx_kp_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 1, 0},
+  {&__pyx_kp_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 1, 0},
+  {&__pyx_kp_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 1, 0},
+  {&__pyx_kp_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 1, 0},
+  {&__pyx_kp_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 1, 0},
+  {&__pyx_kp_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 1, 0},
+  {&__pyx_kp_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 1, 0},
+  {&__pyx_kp_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 1, 0},
+  {&__pyx_kp_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 1, 0},
+  {&__pyx_kp_24, __pyx_k_24, sizeof(__pyx_k_24), 0, 1, 0},
+  {&__pyx_kp_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 1, 0},
+  {&__pyx_kp_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 1, 0},
+  {&__pyx_kp_27, __pyx_k_27, sizeof(__pyx_k_27), 0, 1, 0},
+  {&__pyx_kp_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 1, 0},
+  {&__pyx_kp_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 1, 0},
+  {&__pyx_kp_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 1, 0},
+  {&__pyx_kp_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 1, 0},
+  {&__pyx_kp_32, __pyx_k_32, sizeof(__pyx_k_32), 0, 1, 0},
+  {&__pyx_kp_33, __pyx_k_33, sizeof(__pyx_k_33), 0, 1, 0},
+  {&__pyx_kp_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 1, 0},
+  {&__pyx_kp_35, __pyx_k_35, sizeof(__pyx_k_35), 0, 1, 0},
+  {&__pyx_kp_36, __pyx_k_36, sizeof(__pyx_k_36), 0, 1, 0},
+  {&__pyx_kp_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 1, 0},
+  {&__pyx_kp_outgoingVocabulary, __pyx_k_outgoingVocabulary, sizeof(__pyx_k_outgoingVocabulary), 1, 1, 1},
+  {&__pyx_kp_incomingVocabulary, __pyx_k_incomingVocabulary, sizeof(__pyx_k_incomingVocabulary), 1, 1, 1},
+  {&__pyx_kp_k, __pyx_k_k, sizeof(__pyx_k_k), 1, 1, 1},
+  {&__pyx_kp_v, __pyx_k_v, sizeof(__pyx_k_v), 1, 1, 1},
+  {&__pyx_kp_items, __pyx_k_items, sizeof(__pyx_k_items), 1, 1, 1},
+  {&__pyx_kp_sendEncoded, __pyx_k_sendEncoded, sizeof(__pyx_k_sendEncoded), 1, 1, 1},
+  {&__pyx_kp__encode, __pyx_k__encode, sizeof(__pyx_k__encode), 1, 1, 1},
+  {&__pyx_kp__i, __pyx_k__i, sizeof(__pyx_k__i), 1, 1, 1},
+  {&__pyx_kp_38, __pyx_k_38, sizeof(__pyx_k_38), 0, 1, 0},
+  {&__pyx_kp_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 1, 1, 1},
+  {&__pyx_kp_range, __pyx_k_range, sizeof(__pyx_k_range), 1, 1, 1},
+  {&__pyx_kp__PREFIX_LIMIT, __pyx_k__PREFIX_LIMIT, sizeof(__pyx_k__PREFIX_LIMIT), 0, 1, 1},
+  {&__pyx_kp_listStack, __pyx_k_listStack, sizeof(__pyx_k_listStack), 1, 1, 1},
+  {&__pyx_kp_outgoingSymbols, __pyx_k_outgoingSymbols, sizeof(__pyx_k_outgoingSymbols), 1, 1, 1},
+  {&__pyx_kp_outgoingSymbolCount, __pyx_k_outgoingSymbolCount, sizeof(__pyx_k_outgoingSymbolCount), 1, 1, 1},
+  {&__pyx_kp__smallestLongInt, __pyx_k__smallestLongInt, sizeof(__pyx_k__smallestLongInt), 1, 1, 1},
+  {&__pyx_kp__smallestInt, __pyx_k__smallestInt, sizeof(__pyx_k__smallestInt), 1, 1, 1},
+  {&__pyx_kp__largestInt, __pyx_k__largestInt, sizeof(__pyx_k__largestInt), 1, 1, 1},
+  {&__pyx_kp__largestLongInt, __pyx_k__largestLongInt, sizeof(__pyx_k__largestLongInt), 1, 1, 1},
+  {&__pyx_kp_currentDialect, __pyx_k_currentDialect, sizeof(__pyx_k_currentDialect), 1, 1, 1},
+  {&__pyx_kp_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 1, 1, 1},
+  {&__pyx_kp_transport, __pyx_k_transport, sizeof(__pyx_k_transport), 1, 1, 1},
+  {&__pyx_kp_loseConnection, __pyx_k_loseConnection, sizeof(__pyx_k_loseConnection), 1, 1, 1},
+  {&__pyx_kp_append, __pyx_k_append, sizeof(__pyx_k_append), 1, 1, 1},
+  {&__pyx_kp_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 1, 1, 1},
+  {&__pyx_kp_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 1, 1, 1},
+  {&__pyx_kp_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 1, 1, 1},
+  {&__pyx_kp_StringIO, __pyx_k_StringIO, sizeof(__pyx_k_StringIO), 1, 1, 1},
+  {&__pyx_kp_getvalue, __pyx_k_getvalue, sizeof(__pyx_k_getvalue), 1, 1, 1},
+  {&__pyx_kp_51, __pyx_k_51, sizeof(__pyx_k_51), 1, 1, 1},
+  {&__pyx_kp_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 1, 1, 1},
+  {&__pyx_kp_54, __pyx_k_54, sizeof(__pyx_k_54), 0, 1, 0},
+  {&__pyx_kp_39, __pyx_k_39, sizeof(__pyx_k_39), 0, 0, 0},
+  {&__pyx_kp_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 0},
+  {&__pyx_kp_41, __pyx_k_41, sizeof(__pyx_k_41), 0, 0, 0},
+  {&__pyx_kp_42, __pyx_k_42, sizeof(__pyx_k_42), 0, 0, 0},
+  {&__pyx_kp_43, __pyx_k_43, sizeof(__pyx_k_43), 0, 0, 0},
+  {&__pyx_kp_44, __pyx_k_44, sizeof(__pyx_k_44), 0, 0, 0},
+  {&__pyx_kp_45, __pyx_k_45, sizeof(__pyx_k_45), 0, 0, 0},
+  {&__pyx_kp_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 0, 0},
+  {&__pyx_kp_47, __pyx_k_47, sizeof(__pyx_k_47), 0, 0, 0},
+  {&__pyx_kp_48, __pyx_k_48, sizeof(__pyx_k_48), 0, 0, 0},
+  {&__pyx_kp_49, __pyx_k_49, sizeof(__pyx_k_49), 0, 0, 0},
+  {&__pyx_kp_50, __pyx_k_50, sizeof(__pyx_k_50), 0, 0, 0},
+  {&__pyx_kp_52, __pyx_k_52, sizeof(__pyx_k_52), 0, 0, 0},
+  {&__pyx_kp_53, __pyx_k_53, sizeof(__pyx_k_53), 0, 0, 0},
+  {&__pyx_kp_55, __pyx_k_55, sizeof(__pyx_k_55), 0, 0, 0},
+  {&__pyx_kp_56, __pyx_k_56, sizeof(__pyx_k_56), 0, 0, 0},
+  {&__pyx_kp_57, __pyx_k_57, sizeof(__pyx_k_57), 0, 0, 0},
+  {0, 0, 0, 0, 0, 0}
+};
+static int __Pyx_InitCachedBuiltins(void) {
+  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_kp_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_builtin_object = __Pyx_GetName(__pyx_b, __pyx_kp_object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_builtin_chr = __Pyx_GetName(__pyx_b, __pyx_kp_chr); if (!__pyx_builtin_chr) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_kp_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_builtin_NotImplementedError = __Pyx_GetName(__pyx_b, __pyx_kp_NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  return 0;
+  __pyx_L1_error:;
+  return -1;
+}
+
+static int __Pyx_InitGlobals(void) {
+  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_17 = PyInt_FromLong(17); if (unlikely(!__pyx_int_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_18 = PyInt_FromLong(18); if (unlikely(!__pyx_int_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_19 = PyInt_FromLong(19); if (unlikely(!__pyx_int_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_21 = PyInt_FromLong(21); if (unlikely(!__pyx_int_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_22 = PyInt_FromLong(22); if (unlikely(!__pyx_int_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_23 = PyInt_FromLong(23); if (unlikely(!__pyx_int_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_24 = PyInt_FromLong(24); if (unlikely(!__pyx_int_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_25 = PyInt_FromLong(25); if (unlikely(!__pyx_int_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_26 = PyInt_FromLong(26); if (unlikely(!__pyx_int_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_27 = PyInt_FromLong(27); if (unlikely(!__pyx_int_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_28 = PyInt_FromLong(28); if (unlikely(!__pyx_int_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_29 = PyInt_FromLong(29); if (unlikely(!__pyx_int_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_31 = PyInt_FromLong(31); if (unlikely(!__pyx_int_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  __pyx_int_0x7f = PyInt_FromLong(0x7f); if (unlikely(!__pyx_int_0x7f)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  return 0;
+  __pyx_L1_error:;
+  return -1;
+}
+
+#if PY_MAJOR_VERSION < 3
+PyMODINIT_FUNC init_banana(void); /*proto*/
+PyMODINIT_FUNC init_banana(void)
+#else
+PyMODINIT_FUNC PyInit__banana(void); /*proto*/
+PyMODINIT_FUNC PyInit__banana(void)
+#endif
+{
+  PyObject *__pyx_1 = 0;
+  PyObject *__pyx_2 = 0;
+  PyObject *__pyx_3 = 0;
+  PyObject *__pyx_4 = 0;
+  PyObject *__pyx_5 = 0;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  Py_ssize_t __pyx_t_4;
+  #ifdef CYTHON_REFNANNY
+  void* __pyx_refchk = NULL;
+  __Pyx_Refnanny = __Pyx_ImportRefcountAPI("refnanny");
+  if (!__Pyx_Refnanny) {
+      PyErr_Clear();
+      __Pyx_Refnanny = __Pyx_ImportRefcountAPI("Cython.Runtime.refnanny");
+      if (!__Pyx_Refnanny)
+          Py_FatalError("failed to import refnanny module");
+  }
+  __pyx_refchk = __Pyx_Refnanny->NewContext("PyMODINIT_FUNC PyInit__banana(void)", __LINE__, __FILE__);
+  #endif
+  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  /*--- Library function declarations ---*/
+  __pyx_init_filenames();
+  /*--- Threads initialization code ---*/
+  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
+  #ifdef WITH_THREAD /* Python build with threading support? */
+  PyEval_InitThreads();
+  #endif
+  #endif
+  /*--- Initialize various global constants etc. ---*/
+  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  /*--- Module creation code ---*/
+  #if PY_MAJOR_VERSION < 3
+  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_banana"), __pyx_methods, __pyx_mdoc, 0, PYTHON_API_VERSION);
+  #else
+  __pyx_m = PyModule_Create(&__pyx_moduledef);
+  #endif
+  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  #if PY_MAJOR_VERSION < 3
+  Py_INCREF(__pyx_m);
+  #endif
+  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
+  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  if (__pyx_module_is_main_twisted__spread___banana) {
+    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_kp___main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  }
+  /*--- Builtin init code ---*/
+  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_skip_dispatch = 0;
+  /*--- Global init code ---*/
+  /*--- Function export code ---*/
+  /*--- Type init code ---*/
+  /*--- Type import code ---*/
+  /*--- Function import code ---*/
+  /*--- Execution code ---*/
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":15
+ * """
+ * 
+ * import copy, cStringIO, struct             # <<<<<<<<<<<<<<
+ * 
+ * from twisted.internet import protocol
+ */
+  __pyx_1 = __Pyx_Import(__pyx_kp_copy, 0); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp_copy, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+  __pyx_1 = __Pyx_Import(__pyx_kp_cStringIO, 0); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp_cStringIO, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+  __pyx_1 = __Pyx_Import(__pyx_kp_struct, 0); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp_struct, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":17
+ * import copy, cStringIO, struct
+ * 
+ * from twisted.internet import protocol             # <<<<<<<<<<<<<<
+ * from twisted.persisted import styles
+ * from twisted.python import log
+ */
+  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_INCREF(__pyx_kp_protocol);
+  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_protocol);
+  __Pyx_GIVEREF(__pyx_kp_protocol);
+  __pyx_1 = __Pyx_Import(__pyx_kp_1, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  __pyx_2 = PyObject_GetAttr(__pyx_1, __pyx_kp_protocol); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_2);
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp_protocol, __pyx_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":18
+ * 
+ * from twisted.internet import protocol
+ * from twisted.persisted import styles             # <<<<<<<<<<<<<<
+ * from twisted.python import log
+ * 
+ */
+  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_INCREF(__pyx_kp_styles);
+  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_styles);
+  __Pyx_GIVEREF(__pyx_kp_styles);
+  __pyx_1 = __Pyx_Import(__pyx_kp_2, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  __pyx_2 = PyObject_GetAttr(__pyx_1, __pyx_kp_styles); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_2);
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp_styles, __pyx_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":19
+ * from twisted.internet import protocol
+ * from twisted.persisted import styles
+ * from twisted.python import log             # <<<<<<<<<<<<<<
+ * 
+ * class BananaError(Exception):
+ */
+  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_INCREF(__pyx_kp_log);
+  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_log);
+  __Pyx_GIVEREF(__pyx_kp_log);
+  __pyx_1 = __Pyx_Import(__pyx_kp_3, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_1);
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  __pyx_2 = PyObject_GetAttr(__pyx_1, __pyx_kp_log); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_2);
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp_log, __pyx_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":21
+ * from twisted.python import log
+ * 
+ * class BananaError(Exception):             # <<<<<<<<<<<<<<
+ *     pass
+ * 
+ */
+  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_1));
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_INCREF(__pyx_builtin_Exception);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_Exception);
+  __Pyx_GIVEREF(__pyx_builtin_Exception);
+  __pyx_2 = __Pyx_CreateClass(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_1), __pyx_kp_BananaError, "twisted.spread._banana"); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_2);
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp_BananaError, __pyx_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":59
+ * 
+ * # delimiter characters.
+ * cdef unsigned char LIST     = 0x80             # <<<<<<<<<<<<<<
+ * cdef unsigned char INT      = 0x81
+ * cdef unsigned char STRING   = 0x82
+ */
+  __pyx_v_7twisted_6spread_7_banana_LIST = 0x80;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":60
+ * # delimiter characters.
+ * cdef unsigned char LIST     = 0x80
+ * cdef unsigned char INT      = 0x81             # <<<<<<<<<<<<<<
+ * cdef unsigned char STRING   = 0x82
+ * cdef unsigned char NEG      = 0x83
+ */
+  __pyx_v_7twisted_6spread_7_banana_INT = 0x81;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":61
+ * cdef unsigned char LIST     = 0x80
+ * cdef unsigned char INT      = 0x81
+ * cdef unsigned char STRING   = 0x82             # <<<<<<<<<<<<<<
+ * cdef unsigned char NEG      = 0x83
+ * cdef unsigned char FLOAT    = 0x84
+ */
+  __pyx_v_7twisted_6spread_7_banana_STRING = 0x82;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":62
+ * cdef unsigned char INT      = 0x81
+ * cdef unsigned char STRING   = 0x82
+ * cdef unsigned char NEG      = 0x83             # <<<<<<<<<<<<<<
+ * cdef unsigned char FLOAT    = 0x84
+ * # "optional" -- these might be refused by a low-level implementation.
+ */
+  __pyx_v_7twisted_6spread_7_banana_NEG = 0x83;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":63
+ * cdef unsigned char STRING   = 0x82
+ * cdef unsigned char NEG      = 0x83
+ * cdef unsigned char FLOAT    = 0x84             # <<<<<<<<<<<<<<
+ * # "optional" -- these might be refused by a low-level implementation.
+ * cdef unsigned char LONGINT  = 0x85
+ */
+  __pyx_v_7twisted_6spread_7_banana_FLOAT = 0x84;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":65
+ * cdef unsigned char FLOAT    = 0x84
+ * # "optional" -- these might be refused by a low-level implementation.
+ * cdef unsigned char LONGINT  = 0x85             # <<<<<<<<<<<<<<
+ * cdef unsigned char LONGNEG  = 0x86
+ * # really optional; this is is part of the 'pb' vocabulary
+ */
+  __pyx_v_7twisted_6spread_7_banana_LONGINT = 0x85;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":66
+ * # "optional" -- these might be refused by a low-level implementation.
+ * cdef unsigned char LONGINT  = 0x85
+ * cdef unsigned char LONGNEG  = 0x86             # <<<<<<<<<<<<<<
+ * # really optional; this is is part of the 'pb' vocabulary
+ * cdef unsigned char VOCAB    = 0x87
+ */
+  __pyx_v_7twisted_6spread_7_banana_LONGNEG = 0x86;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":68
+ * cdef unsigned char LONGNEG  = 0x86
+ * # really optional; this is is part of the 'pb' vocabulary
+ * cdef unsigned char VOCAB    = 0x87             # <<<<<<<<<<<<<<
+ * 
+ * cdef unsigned char HIGH_BIT_SET = 0x80
+ */
+  __pyx_v_7twisted_6spread_7_banana_VOCAB = 0x87;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":70
+ * cdef unsigned char VOCAB    = 0x87
+ * 
+ * cdef unsigned char HIGH_BIT_SET = 0x80             # <<<<<<<<<<<<<<
+ * 
+ * def setPrefixLimit(limit):
+ */
+  __pyx_v_7twisted_6spread_7_banana_HIGH_BIT_SET = 0x80;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":86
+ *     global _PREFIX_LIMIT
+ *     _PREFIX_LIMIT = limit
+ * setPrefixLimit(64)             # <<<<<<<<<<<<<<
+ * 
+ * cdef int SIZE_LIMIT = 640 * 1024   # 640k is all you'll ever need :-)
+ */
+  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_setPrefixLimit); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_2);
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  __Pyx_INCREF(__pyx_int_64);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_64);
+  __Pyx_GIVEREF(__pyx_int_64);
+  __pyx_t_2 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":88
+ * setPrefixLimit(64)
+ * 
+ * cdef int SIZE_LIMIT = 640 * 1024   # 640k is all you'll ever need :-)             # <<<<<<<<<<<<<<
+ * 
+ * class Banana(protocol.Protocol, styles.Ephemeral, object):
+ */
+  __pyx_v_7twisted_6spread_7_banana_SIZE_LIMIT = 655360;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":90
+ * cdef int SIZE_LIMIT = 640 * 1024   # 640k is all you'll ever need :-)
+ * 
+ * class Banana(protocol.Protocol, styles.Ephemeral, object):             # <<<<<<<<<<<<<<
+ *     knownDialects = ["pb", "none"]
+ * 
+ */
+  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_1));
+  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_protocol); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_2);
+  __pyx_t_2 = PyObject_GetAttr(__pyx_2, __pyx_kp_Protocol); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_styles); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_2);
+  __pyx_t_1 = PyObject_GetAttr(__pyx_2, __pyx_kp_Ephemeral); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_2);
+  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_1);
+  __Pyx_INCREF(__pyx_builtin_object);
+  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_builtin_object);
+  __Pyx_GIVEREF(__pyx_builtin_object);
+  __pyx_t_2 = 0;
+  __pyx_t_1 = 0;
+  __pyx_2 = __Pyx_CreateClass(((PyObject *)__pyx_t_3), ((PyObject *)__pyx_1), __pyx_kp_Banana, "twisted.spread._banana"); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_2);
+  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":91
+ * 
+ * class Banana(protocol.Protocol, styles.Ephemeral, object):
+ *     knownDialects = ["pb", "none"]             # <<<<<<<<<<<<<<
+ * 
+ *     prefixLimit = None
+ */
+  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+  __Pyx_INCREF(__pyx_kp_4);
+  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_kp_4);
+  __Pyx_GIVEREF(__pyx_kp_4);
+  __Pyx_INCREF(__pyx_kp_5);
+  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_kp_5);
+  __Pyx_GIVEREF(__pyx_kp_5);
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_knownDialects, ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":93
+ *     knownDialects = ["pb", "none"]
+ * 
+ *     prefixLimit = None             # <<<<<<<<<<<<<<
+ * 
+ *     def __init__(self, isClient=1):
+ */
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_prefixLimit, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":95
+ *     prefixLimit = None
+ * 
+ *     def __init__(self, isClient=1):             # <<<<<<<<<<<<<<
+ *         self.listStack = []
+ *         self.outgoingSymbols = copy.copy(self.outgoingVocabulary)
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana___init__, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp___init__, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":102
+ *         self.buf = ''
+ * 
+ *     def setPrefixLimit(self, limit):             # <<<<<<<<<<<<<<
+ *         """
+ *         Set the prefix limit for decoding done by this protocol instance.
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana_setPrefixLimit, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_setPrefixLimit, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":115
+ * 
+ * 
+ *     def connectionReady(self):             # <<<<<<<<<<<<<<
+ *         """Surrogate for connectionMade
+ *         Called after protocol negotiation.
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana_connectionReady, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_connectionReady, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":120
+ *         """
+ * 
+ *     def _selectDialect(self, dialect):             # <<<<<<<<<<<<<<
+ *         self.currentDialect = dialect
+ *         self.connectionReady()
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana__selectDialect, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp__selectDialect, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":124
+ *         self.connectionReady()
+ * 
+ *     def callExpressionReceived(self, obj):             # <<<<<<<<<<<<<<
+ *         if self.currentDialect:
+ *             self.expressionReceived(obj)
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana_callExpressionReceived, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_6, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":151
+ * 
+ * 
+ *     def connectionMade(self):             # <<<<<<<<<<<<<<
+ *         self.setPrefixLimit(_PREFIX_LIMIT)
+ *         self.currentDialect = None
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana_connectionMade, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_connectionMade, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":158
+ * 
+ * 
+ *     def gotItem(self, item):             # <<<<<<<<<<<<<<
+ *         l = self.listStack
+ *         if l:
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana_gotItem, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_gotItem, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":165
+ *             self.callExpressionReceived(item)
+ * 
+ *     def dataReceived(self, chunk):             # <<<<<<<<<<<<<<
+ *         self.buf += chunk
+ *         cdef unsigned char* buf = <unsigned char*><char*>self.buf
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana_dataReceived, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_dataReceived, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":230
+ * 
+ * 
+ *     def expressionReceived(self, lst):             # <<<<<<<<<<<<<<
+ *         """Called when an expression (list, string, or int) is received.
+ *         """
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana_expressionReceived, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_expressionReceived, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":236
+ * 
+ * 
+ *     outgoingVocabulary = {             # <<<<<<<<<<<<<<
+ *         # Jelly Data Types
+ *         'None'           :  1,
+ */
+  __pyx_3 = PyDict_New(); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_3));
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":238
+ *     outgoingVocabulary = {
+ *         # Jelly Data Types
+ *         'None'           :  1,             # <<<<<<<<<<<<<<
+ *         'class'          :  2,
+ *         'dereference'    :  3,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_7, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":239
+ *         # Jelly Data Types
+ *         'None'           :  1,
+ *         'class'          :  2,             # <<<<<<<<<<<<<<
+ *         'dereference'    :  3,
+ *         'reference'      :  4,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_8, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":240
+ *         'None'           :  1,
+ *         'class'          :  2,
+ *         'dereference'    :  3,             # <<<<<<<<<<<<<<
+ *         'reference'      :  4,
+ *         'dictionary'     :  5,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_9, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":241
+ *         'class'          :  2,
+ *         'dereference'    :  3,
+ *         'reference'      :  4,             # <<<<<<<<<<<<<<
+ *         'dictionary'     :  5,
+ *         'function'       :  6,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_10, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":242
+ *         'dereference'    :  3,
+ *         'reference'      :  4,
+ *         'dictionary'     :  5,             # <<<<<<<<<<<<<<
+ *         'function'       :  6,
+ *         'instance'       :  7,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_11, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":243
+ *         'reference'      :  4,
+ *         'dictionary'     :  5,
+ *         'function'       :  6,             # <<<<<<<<<<<<<<
+ *         'instance'       :  7,
+ *         'list'           :  8,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_12, __pyx_int_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":244
+ *         'dictionary'     :  5,
+ *         'function'       :  6,
+ *         'instance'       :  7,             # <<<<<<<<<<<<<<
+ *         'list'           :  8,
+ *         'module'         :  9,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_13, __pyx_int_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":245
+ *         'function'       :  6,
+ *         'instance'       :  7,
+ *         'list'           :  8,             # <<<<<<<<<<<<<<
+ *         'module'         :  9,
+ *         'persistent'     : 10,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_14, __pyx_int_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":246
+ *         'instance'       :  7,
+ *         'list'           :  8,
+ *         'module'         :  9,             # <<<<<<<<<<<<<<
+ *         'persistent'     : 10,
+ *         'tuple'          : 11,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_15, __pyx_int_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":247
+ *         'list'           :  8,
+ *         'module'         :  9,
+ *         'persistent'     : 10,             # <<<<<<<<<<<<<<
+ *         'tuple'          : 11,
+ *         'unpersistable'  : 12,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_16, __pyx_int_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":248
+ *         'module'         :  9,
+ *         'persistent'     : 10,
+ *         'tuple'          : 11,             # <<<<<<<<<<<<<<
+ *         'unpersistable'  : 12,
+ * 
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_17, __pyx_int_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":249
+ *         'persistent'     : 10,
+ *         'tuple'          : 11,
+ *         'unpersistable'  : 12,             # <<<<<<<<<<<<<<
+ * 
+ *         # PB Data Types
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_18, __pyx_int_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":252
+ * 
+ *         # PB Data Types
+ *         'copy'           : 13,             # <<<<<<<<<<<<<<
+ *         'cache'          : 14,
+ *         'cached'         : 15,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_19, __pyx_int_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":253
+ *         # PB Data Types
+ *         'copy'           : 13,
+ *         'cache'          : 14,             # <<<<<<<<<<<<<<
+ *         'cached'         : 15,
+ *         'remote'         : 16,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_20, __pyx_int_14) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":254
+ *         'copy'           : 13,
+ *         'cache'          : 14,
+ *         'cached'         : 15,             # <<<<<<<<<<<<<<
+ *         'remote'         : 16,
+ *         'local'          : 17,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_21, __pyx_int_15) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":255
+ *         'cache'          : 14,
+ *         'cached'         : 15,
+ *         'remote'         : 16,             # <<<<<<<<<<<<<<
+ *         'local'          : 17,
+ *         'lcache'         : 18,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_22, __pyx_int_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":256
+ *         'cached'         : 15,
+ *         'remote'         : 16,
+ *         'local'          : 17,             # <<<<<<<<<<<<<<
+ *         'lcache'         : 18,
+ * 
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_23, __pyx_int_17) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":257
+ *         'remote'         : 16,
+ *         'local'          : 17,
+ *         'lcache'         : 18,             # <<<<<<<<<<<<<<
+ * 
+ *         # PB Protocol Messages
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_24, __pyx_int_18) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":260
+ * 
+ *         # PB Protocol Messages
+ *         'version'        : 19,             # <<<<<<<<<<<<<<
+ *         'login'          : 20,
+ *         'password'       : 21,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_25, __pyx_int_19) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":261
+ *         # PB Protocol Messages
+ *         'version'        : 19,
+ *         'login'          : 20,             # <<<<<<<<<<<<<<
+ *         'password'       : 21,
+ *         'challenge'      : 22,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_26, __pyx_int_20) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":262
+ *         'version'        : 19,
+ *         'login'          : 20,
+ *         'password'       : 21,             # <<<<<<<<<<<<<<
+ *         'challenge'      : 22,
+ *         'logged_in'      : 23,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_27, __pyx_int_21) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":263
+ *         'login'          : 20,
+ *         'password'       : 21,
+ *         'challenge'      : 22,             # <<<<<<<<<<<<<<
+ *         'logged_in'      : 23,
+ *         'not_logged_in'  : 24,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_28, __pyx_int_22) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":264
+ *         'password'       : 21,
+ *         'challenge'      : 22,
+ *         'logged_in'      : 23,             # <<<<<<<<<<<<<<
+ *         'not_logged_in'  : 24,
+ *         'cachemessage'   : 25,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_29, __pyx_int_23) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":265
+ *         'challenge'      : 22,
+ *         'logged_in'      : 23,
+ *         'not_logged_in'  : 24,             # <<<<<<<<<<<<<<
+ *         'cachemessage'   : 25,
+ *         'message'        : 26,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_30, __pyx_int_24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":266
+ *         'logged_in'      : 23,
+ *         'not_logged_in'  : 24,
+ *         'cachemessage'   : 25,             # <<<<<<<<<<<<<<
+ *         'message'        : 26,
+ *         'answer'         : 27,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_31, __pyx_int_25) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":267
+ *         'not_logged_in'  : 24,
+ *         'cachemessage'   : 25,
+ *         'message'        : 26,             # <<<<<<<<<<<<<<
+ *         'answer'         : 27,
+ *         'error'          : 28,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_32, __pyx_int_26) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":268
+ *         'cachemessage'   : 25,
+ *         'message'        : 26,
+ *         'answer'         : 27,             # <<<<<<<<<<<<<<
+ *         'error'          : 28,
+ *         'decref'         : 29,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_33, __pyx_int_27) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":269
+ *         'message'        : 26,
+ *         'answer'         : 27,
+ *         'error'          : 28,             # <<<<<<<<<<<<<<
+ *         'decref'         : 29,
+ *         'decache'        : 30,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_34, __pyx_int_28) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":270
+ *         'answer'         : 27,
+ *         'error'          : 28,
+ *         'decref'         : 29,             # <<<<<<<<<<<<<<
+ *         'decache'        : 30,
+ *         'uncache'        : 31,
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_35, __pyx_int_29) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":271
+ *         'error'          : 28,
+ *         'decref'         : 29,
+ *         'decache'        : 30,             # <<<<<<<<<<<<<<
+ *         'uncache'        : 31,
+ *         }
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_36, __pyx_int_30) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":272
+ *         'decref'         : 29,
+ *         'decache'        : 30,
+ *         'uncache'        : 31,             # <<<<<<<<<<<<<<
+ *         }
+ * 
+ */
+  if (PyDict_SetItem(__pyx_3, __pyx_kp_37, __pyx_int_31) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_outgoingVocabulary, ((PyObject *)__pyx_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(((PyObject *)__pyx_3)); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":275
+ *         }
+ * 
+ *     incomingVocabulary = {}             # <<<<<<<<<<<<<<
+ *     for k, v in outgoingVocabulary.items():
+ *         incomingVocabulary[v] = k
+ */
+  __pyx_3 = PyDict_New(); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_3));
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_incomingVocabulary, ((PyObject *)__pyx_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(((PyObject *)__pyx_3)); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":276
+ * 
+ *     incomingVocabulary = {}
+ *     for k, v in outgoingVocabulary.items():             # <<<<<<<<<<<<<<
+ *         incomingVocabulary[v] = k
+ * 
+ */
+  __pyx_3 = __Pyx_GetName(__pyx_2, __pyx_kp_outgoingVocabulary); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __pyx_t_3 = PyObject_GetAttr(__pyx_3, __pyx_kp_items); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
+    __pyx_t_4 = 0; __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
+  } else {
+    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+  }
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  for (;;) {
+    if (likely(PyList_CheckExact(__pyx_t_3))) {
+      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
+      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++;
+    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
+      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
+      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++;
+    } else {
+      __pyx_t_1 = PyIter_Next(__pyx_t_3);
+      if (!__pyx_t_1) {
+        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        break;
+      }
+      __Pyx_GOTREF(__pyx_t_1);
+    }
+    if (PyTuple_CheckExact(__pyx_t_1) && likely(PyTuple_GET_SIZE(__pyx_t_1) == 2)) {
+      PyObject* tuple = __pyx_t_1;
+      __pyx_4 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_4);
+      __pyx_5 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_5);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      if (PyObject_SetAttr(__pyx_2, __pyx_kp_k, __pyx_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_4); __pyx_4 = 0;
+      if (PyObject_SetAttr(__pyx_2, __pyx_kp_v, __pyx_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_5); __pyx_5 = 0;
+    } else {
+      __pyx_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_3);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __pyx_4 = __Pyx_UnpackItem(__pyx_3, 0); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_4);
+      __pyx_5 = __Pyx_UnpackItem(__pyx_3, 1); if (unlikely(!__pyx_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_5);
+      if (__Pyx_EndUnpack(__pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+      if (PyObject_SetAttr(__pyx_2, __pyx_kp_k, __pyx_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_4); __pyx_4 = 0;
+      if (PyObject_SetAttr(__pyx_2, __pyx_kp_v, __pyx_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_5); __pyx_5 = 0;
+    }
+
+    /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":277
+ *     incomingVocabulary = {}
+ *     for k, v in outgoingVocabulary.items():
+ *         incomingVocabulary[v] = k             # <<<<<<<<<<<<<<
+ * 
+ *     def sendEncoded(self, obj):
+ */
+    __pyx_3 = __Pyx_GetName(__pyx_2, __pyx_kp_k); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_3);
+    __pyx_4 = __Pyx_GetName(__pyx_2, __pyx_kp_incomingVocabulary); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_4);
+    __pyx_5 = __Pyx_GetName(__pyx_2, __pyx_kp_v); if (unlikely(!__pyx_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_5);
+    if (PyObject_SetItem(__pyx_4, __pyx_5, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_4); __pyx_4 = 0;
+    __Pyx_DECREF(__pyx_5); __pyx_5 = 0;
+    __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+  }
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":279
+ *         incomingVocabulary[v] = k
+ * 
+ *     def sendEncoded(self, obj):             # <<<<<<<<<<<<<<
+ *         io = cStringIO.StringIO()
+ *         self._encode(obj, io.write)
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana_sendEncoded, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_3 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp_sendEncoded, __pyx_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":285
+ *         self.transport.write(value)
+ * 
+ *     def _encode(self, obj, write):             # <<<<<<<<<<<<<<
+ *         if isinstance(obj, (list, tuple)):
+ *             if len(obj) > SIZE_LIMIT:
+ */
+  __pyx_t_3 = PyCFunction_New(&__pyx_mdef_7twisted_6spread_7_banana_6Banana__encode, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_4 = PyMethod_New(__pyx_t_3, 0, __pyx_2); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_4);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyObject_SetAttr(__pyx_2, __pyx_kp__encode, __pyx_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_4); __pyx_4 = 0;
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp_Banana, __pyx_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":331
+ * 
+ * # For use from the interactive interpreter
+ * _i = Banana()             # <<<<<<<<<<<<<<
+ * _i.connectionMade()
+ * _i._selectDialect("none")
+ */
+  __pyx_5 = __Pyx_GetName(__pyx_m, __pyx_kp_Banana); if (unlikely(!__pyx_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_5);
+  __pyx_t_3 = PyObject_Call(__pyx_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_5); __pyx_5 = 0;
+  if (PyObject_SetAttr(__pyx_m, __pyx_kp__i, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":332
+ * # For use from the interactive interpreter
+ * _i = Banana()
+ * _i.connectionMade()             # <<<<<<<<<<<<<<
+ * _i._selectDialect("none")
+ * 
+ */
+  __pyx_3 = __Pyx_GetName(__pyx_m, __pyx_kp__i); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_3);
+  __pyx_t_3 = PyObject_GetAttr(__pyx_3, __pyx_kp_connectionMade); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_3); __pyx_3 = 0;
+  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":333
+ * _i = Banana()
+ * _i.connectionMade()
+ * _i._selectDialect("none")             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  __pyx_4 = __Pyx_GetName(__pyx_m, __pyx_kp__i); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_4);
+  __pyx_t_1 = PyObject_GetAttr(__pyx_4, __pyx_kp__selectDialect); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_4); __pyx_4 = 0;
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+  __Pyx_INCREF(__pyx_kp_38);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_38);
+  __Pyx_GIVEREF(__pyx_kp_38);
+  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  /* "/home/catlee/src/twisted-git/twisted/spread/_banana.pyx":344
+ * 
+ * 
+ * def decode(st):             # <<<<<<<<<<<<<<
+ *     """
+ *     Decode a banana-encoded string.
+ */
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_1);
+  __Pyx_XDECREF(__pyx_2);
+  __Pyx_XDECREF(__pyx_3);
+  __Pyx_XDECREF(__pyx_4);
+  __Pyx_XDECREF(__pyx_5);
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("twisted.spread._banana");
+  Py_DECREF(__pyx_m); __pyx_m = 0;
+  __pyx_L0:;
+  __Pyx_FinishRefcountContext();
+  #if PY_MAJOR_VERSION < 3
+  return;
+  #else
+  return __pyx_m;
+  #endif
+}
+
+static const char *__pyx_filenames[] = {
+  "_banana.pyx",
+};
+
+/* Runtime support code */
+
+static void __pyx_init_filenames(void) {
+  __pyx_f = __pyx_filenames;
+}
+
+static void __Pyx_RaiseDoubleKeywordsError(
+    const char* func_name,
+    PyObject* kw_name)
+{
+    PyErr_Format(PyExc_TypeError,
+        #if PY_MAJOR_VERSION >= 3
+        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
+        #else
+        "%s() got multiple values for keyword argument '%s'", func_name,
+        PyString_AS_STRING(kw_name));
+        #endif
+}
+
+static void __Pyx_RaiseArgtupleInvalid(
+    const char* func_name,
+    int exact,
+    Py_ssize_t num_min,
+    Py_ssize_t num_max,
+    Py_ssize_t num_found)
+{
+    Py_ssize_t num_expected;
+    const char *number, *more_or_less;
+
+    if (num_found < num_min) {
+        num_expected = num_min;
+        more_or_less = "at least";
+    } else {
+        num_expected = num_max;
+        more_or_less = "at most";
+    }
+    if (exact) {
+        more_or_less = "exactly";
+    }
+    number = (num_expected == 1) ? "" : "s";
+    PyErr_Format(PyExc_TypeError,
+        #if PY_VERSION_HEX < 0x02050000
+            "%s() takes %s %d positional argument%s (%d given)",
+        #else
+            "%s() takes %s %zd positional argument%s (%zd given)",
+        #endif
+        func_name, more_or_less, num_expected, number, num_found);
+}
+
+static int __Pyx_ParseOptionalKeywords(
+    PyObject *kwds,
+    PyObject **argnames[],
+    PyObject *kwds2,
+    PyObject *values[],
+    Py_ssize_t num_pos_args,
+    const char* function_name)
+{
+    PyObject *key = 0, *value = 0;
+    Py_ssize_t pos = 0;
+    PyObject*** name;
+    PyObject*** first_kw_arg = argnames + num_pos_args;
+
+    while (PyDict_Next(kwds, &pos, &key, &value)) {
+        name = first_kw_arg;
+        while (*name && (**name != key)) name++;
+        if (*name) {
+            values[name-argnames] = value;
+        } else {
+            #if PY_MAJOR_VERSION < 3
+            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
+            #else
+            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
+            #endif
+                goto invalid_keyword_type;
+            } else {
+                for (name = first_kw_arg; *name; name++) {
+                    #if PY_MAJOR_VERSION >= 3
+                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
+                        PyUnicode_Compare(**name, key) == 0) break;
+                    #else
+                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
+                        _PyString_Eq(**name, key)) break;
+                    #endif
+                }
+                if (*name) {
+                    values[name-argnames] = value;
+                } else {
+                    /* unexpected keyword found */
+                    for (name=argnames; name != first_kw_arg; name++) {
+                        if (**name == key) goto arg_passed_twice;
+                        #if PY_MAJOR_VERSION >= 3
+                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
+                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
+                        #else
+                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
+                            _PyString_Eq(**name, key)) goto arg_passed_twice;
+                        #endif
+                    }
+                    if (kwds2) {
+                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
+                    } else {
+                        goto invalid_keyword;
+                    }
+                }
+            }
+        }
+    }
+    return 0;
+arg_passed_twice:
+    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
+    goto bad;
+invalid_keyword_type:
+    PyErr_Format(PyExc_TypeError,
+        "%s() keywords must be strings", function_name);
+    goto bad;
+invalid_keyword:
+    PyErr_Format(PyExc_TypeError,
+    #if PY_MAJOR_VERSION < 3
+        "%s() got an unexpected keyword argument '%s'",
+        function_name, PyString_AsString(key));
+    #else
+        "%s() got an unexpected keyword argument '%U'",
+        function_name, key);
+    #endif
+bad:
+    return -1;
+}
+
+
+static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
+    PyObject *tmp_type, *tmp_value, *tmp_tb;
+    PyThreadState *tstate = PyThreadState_GET();
+
+#if PY_MAJOR_VERSION >= 3
+    /* Note: this is a temporary work-around to prevent crashes in Python 3.0 */
+    if ((tstate->exc_type != NULL) & (tstate->exc_type != Py_None)) {
+        tmp_type = tstate->exc_type;
+        tmp_value = tstate->exc_value;
+        tmp_tb = tstate->exc_traceback;
+        PyErr_NormalizeException(&type, &value, &tb);
+        PyErr_NormalizeException(&tmp_type, &tmp_value, &tmp_tb);
+        tstate->exc_type = 0;
+        tstate->exc_value = 0;
+        tstate->exc_traceback = 0;
+        PyException_SetContext(value, tmp_value);
+        Py_DECREF(tmp_type);
+        Py_XDECREF(tmp_tb);
+    }
+#endif
+
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = type;
+    tstate->curexc_value = value;
+    tstate->curexc_traceback = tb;
+    Py_XDECREF(tmp_type);
+    Py_XDECREF(tmp_value);
+    Py_XDECREF(tmp_tb);
+}
+
+static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
+    PyThreadState *tstate = PyThreadState_GET();
+    *type = tstate->curexc_type;
+    *value = tstate->curexc_value;
+    *tb = tstate->curexc_traceback;
+
+    tstate->curexc_type = 0;
+    tstate->curexc_value = 0;
+    tstate->curexc_traceback = 0;
+}
+
+
+static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
+    PyObject *__import__ = 0;
+    PyObject *empty_list = 0;
+    PyObject *module = 0;
+    PyObject *global_dict = 0;
+    PyObject *empty_dict = 0;
+    PyObject *list;
+    __import__ = __Pyx_GetAttrString(__pyx_b, "__import__");
+    if (!__import__)
+        goto bad;
+    if (from_list)
+        list = from_list;
+    else {
+        empty_list = PyList_New(0);
+        if (!empty_list)
+            goto bad;
+        list = empty_list;
+    }
+    global_dict = PyModule_GetDict(__pyx_m);
+    if (!global_dict)
+        goto bad;
+    empty_dict = PyDict_New();
+    if (!empty_dict)
+        goto bad;
+    module = PyObject_CallFunctionObjArgs(__import__,
+        name, global_dict, empty_dict, list, NULL);
+bad:
+    Py_XDECREF(empty_list);
+    Py_XDECREF(__import__);
+    Py_XDECREF(empty_dict);
+    return module;
+}
+
+static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
+    PyObject *result;
+    result = PyObject_GetAttr(dict, name);
+    if (!result)
+        PyErr_SetObject(PyExc_NameError, name);
+    return result;
+}
+
+static PyObject *__Pyx_CreateClass(
+    PyObject *bases, PyObject *dict, PyObject *name, const char *modname)
+{
+    PyObject *py_modname;
+    PyObject *result = 0;
+
+    #if PY_MAJOR_VERSION < 3
+    py_modname = PyString_FromString(modname);
+    #else
+    py_modname = PyUnicode_FromString(modname);
+    #endif
+    if (!py_modname)
+        goto bad;
+    if (PyDict_SetItemString(dict, "__module__", py_modname) < 0)
+        goto bad;
+    #if PY_MAJOR_VERSION < 3
+    result = PyClass_New(bases, dict, name);
+    #else
+    result = PyObject_CallFunctionObjArgs((PyObject *)&PyType_Type, name, bases, dict, NULL);
+    #endif
+bad:
+    Py_XDECREF(py_modname);
+    return result;
+}
+
+static INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
+    PyErr_Format(PyExc_ValueError,
+        #if PY_VERSION_HEX < 0x02050000
+                 "need more than %d value%s to unpack", (int)index,
+        #else
+                 "need more than %zd value%s to unpack", index,
+        #endif
+                 (index == 1) ? "" : "s");
+}
+
+static INLINE void __Pyx_RaiseTooManyValuesError(void) {
+    PyErr_SetString(PyExc_ValueError, "too many values to unpack");
+}
+
+static PyObject *__Pyx_UnpackItem(PyObject *iter, Py_ssize_t index) {
+    PyObject *item;
+    if (!(item = PyIter_Next(iter))) {
+        if (!PyErr_Occurred()) {
+            __Pyx_RaiseNeedMoreValuesError(index);
+        }
+    }
+    return item;
+}
+
+static int __Pyx_EndUnpack(PyObject *iter) {
+    PyObject *item;
+    if ((item = PyIter_Next(iter))) {
+        Py_DECREF(item);
+        __Pyx_RaiseTooManyValuesError();
+        return -1;
+    }
+    else if (!PyErr_Occurred())
+        return 0;
+    else
+        return -1;
+}
+
+static INLINE long __Pyx_pow_long(long b, long e) {
+    long t = b;
+    switch (e) {
+        case 3:
+            t *= b;
+        case 2:
+            t *= b;
+        case 1:
+            return t;
+        case 0:
+            return 1;
+    }
+    if (unlikely(e<0)) return 0;
+    t = 1;
+    while (likely(e)) {
+        t *= (b * (e&1)) | ((~e)&1);    /* 1 or b */
+        b *= b;
+        e >>= 1;
+    }
+    return t;
+}
+
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
+    Py_XINCREF(type);
+    Py_XINCREF(value);
+    Py_XINCREF(tb);
+    /* First, check the traceback argument, replacing None with NULL. */
+    if (tb == Py_None) {
+        Py_DECREF(tb);
+        tb = 0;
+    }
+    else if (tb != NULL && !PyTraceBack_Check(tb)) {
+        PyErr_SetString(PyExc_TypeError,
+            "raise: arg 3 must be a traceback or None");
+        goto raise_error;
+    }
+    /* Next, replace a missing value with None */
+    if (value == NULL) {
+        value = Py_None;
+        Py_INCREF(value);
+    }
+    #if PY_VERSION_HEX < 0x02050000
+    if (!PyClass_Check(type))
+    #else
+    if (!PyType_Check(type))
+    #endif
+    {
+        /* Raising an instance.  The value should be a dummy. */
+        if (value != Py_None) {
+            PyErr_SetString(PyExc_TypeError,
+                "instance exception may not have a separate value");
+            goto raise_error;
+        }
+        /* Normalize to raise <class>, <instance> */
+        Py_DECREF(value);
+        value = type;
+        #if PY_VERSION_HEX < 0x02050000
+            if (PyInstance_Check(type)) {
+                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
+                Py_INCREF(type);
+            }
+            else {
+                type = 0;
+                PyErr_SetString(PyExc_TypeError,
+                    "raise: exception must be an old-style class or instance");
+                goto raise_error;
+            }
+        #else
+            type = (PyObject*) Py_TYPE(type);
+            Py_INCREF(type);
+            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
+                PyErr_SetString(PyExc_TypeError,
+                    "raise: exception class must be a subclass of BaseException");
+                goto raise_error;
+            }
+        #endif
+    }
+    __Pyx_ErrRestore(type, value, tb);
+    return;
+raise_error:
+    Py_XDECREF(value);
+    Py_XDECREF(type);
+    Py_XDECREF(tb);
+    return;
+}
+
+static INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
+     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
+     return *s1 == *s2;
+}
+
+static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
+    if (sizeof(unsigned char) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(unsigned char)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (unsigned char)-1;
+            if (unlikely(val < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to unsigned char");
+                return (unsigned char)-1;
+            }
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to unsigned char");
+            return (unsigned char)-1;
+        }
+        return (unsigned char)val;
+    }
+    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
+}
+
+static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
+    if (sizeof(unsigned short) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(unsigned short)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (unsigned short)-1;
+            if (unlikely(val < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to unsigned short");
+                return (unsigned short)-1;
+            }
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to unsigned short");
+            return (unsigned short)-1;
+        }
+        return (unsigned short)val;
+    }
+    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
+}
+
+static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
+    if (sizeof(unsigned int) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(unsigned int)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (unsigned int)-1;
+            if (unlikely(val < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to unsigned int");
+                return (unsigned int)-1;
+            }
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to unsigned int");
+            return (unsigned int)-1;
+        }
+        return (unsigned int)val;
+    }
+    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
+}
+
+static INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
+    if (sizeof(char) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(char)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (char)-1;
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to char");
+            return (char)-1;
+        }
+        return (char)val;
+    }
+    return (char)__Pyx_PyInt_AsLong(x);
+}
+
+static INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
+    if (sizeof(short) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(short)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (short)-1;
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to short");
+            return (short)-1;
+        }
+        return (short)val;
+    }
+    return (short)__Pyx_PyInt_AsLong(x);
+}
+
+static INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
+    if (sizeof(int) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(int)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (int)-1;
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to int");
+            return (int)-1;
+        }
+        return (int)val;
+    }
+    return (int)__Pyx_PyInt_AsLong(x);
+}
+
+static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
+    if (sizeof(signed char) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(signed char)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (signed char)-1;
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to signed char");
+            return (signed char)-1;
+        }
+        return (signed char)val;
+    }
+    return (signed char)__Pyx_PyInt_AsSignedLong(x);
+}
+
+static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
+    if (sizeof(signed short) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(signed short)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (signed short)-1;
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to signed short");
+            return (signed short)-1;
+        }
+        return (signed short)val;
+    }
+    return (signed short)__Pyx_PyInt_AsSignedLong(x);
+}
+
+static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
+    if (sizeof(signed int) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(signed int)val)) {
+            if (unlikely(val == -1 && PyErr_Occurred()))
+                return (signed int)-1;
+            PyErr_SetString(PyExc_OverflowError,
+                           "value too large to convert to signed int");
+            return (signed int)-1;
+        }
+        return (signed int)val;
+    }
+    return (signed int)__Pyx_PyInt_AsSignedLong(x);
+}
+
+static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        if (unlikely(val < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to unsigned long");
+            return (unsigned long)-1;
+        }
+        return (unsigned long)val;
+    } else
+#endif
+    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
+        if (unlikely(Py_SIZE(x) < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to unsigned long");
+            return (unsigned long)-1;
+        }
+        return PyLong_AsUnsignedLong(x);
+    } else {
+        unsigned long val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (unsigned long)-1;
+        val = __Pyx_PyInt_AsUnsignedLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        if (unlikely(val < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to unsigned PY_LONG_LONG");
+            return (unsigned PY_LONG_LONG)-1;
+        }
+        return (unsigned PY_LONG_LONG)val;
+    } else
+#endif
+    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
+        if (unlikely(Py_SIZE(x) < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to unsigned PY_LONG_LONG");
+            return (unsigned PY_LONG_LONG)-1;
+        }
+        return PyLong_AsUnsignedLongLong(x);
+    } else {
+        unsigned PY_LONG_LONG val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (unsigned PY_LONG_LONG)-1;
+        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        return (long)val;
+    } else
+#endif
+    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
+        return PyLong_AsLong(x);
+    } else {
+        long val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (long)-1;
+        val = __Pyx_PyInt_AsLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        return (PY_LONG_LONG)val;
+    } else
+#endif
+    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
+        return PyLong_AsLongLong(x);
+    } else {
+        PY_LONG_LONG val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (PY_LONG_LONG)-1;
+        val = __Pyx_PyInt_AsLongLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        return (signed long)val;
+    } else
+#endif
+    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
+        return PyLong_AsLong(x);
+    } else {
+        signed long val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (signed long)-1;
+        val = __Pyx_PyInt_AsSignedLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        return (signed PY_LONG_LONG)val;
+    } else
+#endif
+    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
+        return PyLong_AsLongLong(x);
+    } else {
+        signed PY_LONG_LONG val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (signed PY_LONG_LONG)-1;
+        val = __Pyx_PyInt_AsSignedLongLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+#include "compile.h"
+#include "frameobject.h"
+#include "traceback.h"
+
+static void __Pyx_AddTraceback(const char *funcname) {
+    PyObject *py_srcfile = 0;
+    PyObject *py_funcname = 0;
+    PyObject *py_globals = 0;
+    PyObject *empty_string = 0;
+    PyCodeObject *py_code = 0;
+    PyFrameObject *py_frame = 0;
+
+    #if PY_MAJOR_VERSION < 3
+    py_srcfile = PyString_FromString(__pyx_filename);
+    #else
+    py_srcfile = PyUnicode_FromString(__pyx_filename);
+    #endif
+    if (!py_srcfile) goto bad;
+    if (__pyx_clineno) {
+        #if PY_MAJOR_VERSION < 3
+        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
+        #else
+        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
+        #endif
+    }
+    else {
+        #if PY_MAJOR_VERSION < 3
+        py_funcname = PyString_FromString(funcname);
+        #else
+        py_funcname = PyUnicode_FromString(funcname);
+        #endif
+    }
+    if (!py_funcname) goto bad;
+    py_globals = PyModule_GetDict(__pyx_m);
+    if (!py_globals) goto bad;
+    #if PY_MAJOR_VERSION < 3
+    empty_string = PyString_FromStringAndSize("", 0);
+    #else
+    empty_string = PyBytes_FromStringAndSize("", 0);
+    #endif
+    if (!empty_string) goto bad;
+    py_code = PyCode_New(
+        0,            /*int argcount,*/
+        #if PY_MAJOR_VERSION >= 3
+        0,            /*int kwonlyargcount,*/
+        #endif
+        0,            /*int nlocals,*/
+        0,            /*int stacksize,*/
+        0,            /*int flags,*/
+        empty_string, /*PyObject *code,*/
+        __pyx_empty_tuple,  /*PyObject *consts,*/
+        __pyx_empty_tuple,  /*PyObject *names,*/
+        __pyx_empty_tuple,  /*PyObject *varnames,*/
+        __pyx_empty_tuple,  /*PyObject *freevars,*/
+        __pyx_empty_tuple,  /*PyObject *cellvars,*/
+        py_srcfile,   /*PyObject *filename,*/
+        py_funcname,  /*PyObject *name,*/
+        __pyx_lineno,   /*int firstlineno,*/
+        empty_string  /*PyObject *lnotab*/
+    );
+    if (!py_code) goto bad;
+    py_frame = PyFrame_New(
+        PyThreadState_GET(), /*PyThreadState *tstate,*/
+        py_code,             /*PyCodeObject *code,*/
+        py_globals,          /*PyObject *globals,*/
+        0                    /*PyObject *locals*/
+    );
+    if (!py_frame) goto bad;
+    py_frame->f_lineno = __pyx_lineno;
+    PyTraceBack_Here(py_frame);
+bad:
+    Py_XDECREF(py_srcfile);
+    Py_XDECREF(py_funcname);
+    Py_XDECREF(empty_string);
+    Py_XDECREF(py_code);
+    Py_XDECREF(py_frame);
+}
+
+static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
+    while (t->p) {
+        #if PY_MAJOR_VERSION < 3
+        if (t->is_unicode && (!t->is_identifier)) {
+            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
+        } else if (t->intern) {
+            *t->p = PyString_InternFromString(t->s);
+        } else {
+            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
+        }
+        #else  /* Python 3+ has unicode identifiers */
+        if (t->is_identifier || (t->is_unicode && t->intern)) {
+            *t->p = PyUnicode_InternFromString(t->s);
+        } else if (t->is_unicode) {
+            *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
+        } else {
+            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
+        }
+        #endif
+        if (!*t->p)
+            return -1;
+        ++t;
+    }
+    return 0;
+}
+
+/* Type Conversion Functions */
+
+static INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
+   if (x == Py_True) return 1;
+   else if ((x == Py_False) | (x == Py_None)) return 0;
+   else return PyObject_IsTrue(x);
+}
+
+static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
+  PyNumberMethods *m;
+  const char *name = NULL;
+  PyObject *res = NULL;
+#if PY_VERSION_HEX < 0x03000000
+  if (PyInt_Check(x) || PyLong_Check(x))
+#else
+  if (PyLong_Check(x))
+#endif
+    return Py_INCREF(x), x;
+  m = Py_TYPE(x)->tp_as_number;
+#if PY_VERSION_HEX < 0x03000000
+  if (m && m->nb_int) {
+    name = "int";
+    res = PyNumber_Int(x);
+  }
+  else if (m && m->nb_long) {
+    name = "long";
+    res = PyNumber_Long(x);
+  }
+#else
+  if (m && m->nb_int) {
+    name = "int";
+    res = PyNumber_Long(x);
+  }
+#endif
+  if (res) {
+#if PY_VERSION_HEX < 0x03000000
+    if (!PyInt_Check(res) && !PyLong_Check(res)) {
+#else
+    if (!PyLong_Check(res)) {
+#endif
+      PyErr_Format(PyExc_TypeError,
+                   "__%s__ returned non-%s (type %.200s)",
+                   name, name, Py_TYPE(res)->tp_name);
+      Py_DECREF(res);
+      return NULL;
+    }
+  }
+  else if (!PyErr_Occurred()) {
+    PyErr_SetString(PyExc_TypeError,
+                    "an integer is required");
+  }
+  return res;
+}
+
+static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
+  Py_ssize_t ival;
+  PyObject* x = PyNumber_Index(b);
+  if (!x) return -1;
+  ival = PyInt_AsSsize_t(x);
+  Py_DECREF(x);
+  return ival;
+}
+
+static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
+#if PY_VERSION_HEX < 0x02050000
+   if (ival <= LONG_MAX)
+       return PyInt_FromLong((long)ival);
+   else {
+       unsigned char *bytes = (unsigned char *) &ival;
+       int one = 1; int little = (int)*(unsigned char*)&one;
+       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
+   }
+#else
+   return PyInt_FromSize_t(ival);
+#endif
+}
+
+static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
+   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
+   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
+       return (size_t)-1;
+   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
+       PyErr_SetString(PyExc_OverflowError,
+                       "value too large to convert to size_t");
+       return (size_t)-1;
+   }
+   return (size_t)val;
+}
+
+
diff --git a/twisted/spread/_banana.pyx b/twisted/spread/_banana.pyx
new file mode 100644
index 0000000..62bac43
--- /dev/null
+++ b/twisted/spread/_banana.pyx
@@ -0,0 +1,355 @@
+# -*- test-case-name: twisted.test.test_banana -*-
+# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Banana -- s-exp based protocol.
+
+Future Plans: This module is almost entirely stable.  The same caveat applies
+to it as applies to L{twisted.spread.jelly}, however.  Read its future plans
+for more details.
+
+@author: Glyph Lefkowitz
+"""
+
+import copy, cStringIO, struct
+
+from twisted.internet import protocol
+from twisted.persisted import styles
+from twisted.python import log
+
+class BananaError(Exception):
+    pass
+
+def int2b128(integer, stream):
+    if integer == 0:
+        stream(chr(0))
+        return
+    assert integer > 0, "can only encode positive integers"
+    while integer:
+        stream(chr(integer & 0x7f))
+        integer = integer >> 7
+
+cdef _c_b1282int(unsigned char* st, int start, int l):
+    e = 1
+    i = 0
+    cdef int n
+    cdef int j
+    for j in range(l):
+        n = st[start+j]
+        i += (n * e)
+        e <<= 7
+    return i
+
+def b1282int(buf):
+    """
+    Convert an integer represented as a base 128 string into an C{int} or
+    C{long}.
+
+    @param st: The integer encoded in a string.
+    @type st: C{str}
+
+    @return: The integer value extracted from the string.
+    @rtype: C{int} or C{long}
+    """
+    cdef unsigned char* st = <unsigned char*><char*>buf
+    return _c_b1282int(st, 0, len(buf))
+
+# delimiter characters.
+cdef unsigned char LIST     = 0x80
+cdef unsigned char INT      = 0x81
+cdef unsigned char STRING   = 0x82
+cdef unsigned char NEG      = 0x83
+cdef unsigned char FLOAT    = 0x84
+# "optional" -- these might be refused by a low-level implementation.
+cdef unsigned char LONGINT  = 0x85
+cdef unsigned char LONGNEG  = 0x86
+# really optional; this is is part of the 'pb' vocabulary
+cdef unsigned char VOCAB    = 0x87
+
+cdef unsigned char HIGH_BIT_SET = 0x80
+
+def setPrefixLimit(limit):
+    """
+    Set the limit on the prefix length for all Banana connections
+    established after this call.
+
+    The prefix length limit determines how many bytes of prefix a banana
+    decoder will allow before rejecting a potential object as too large.
+
+    @type limit: C{int}
+    @param limit: The number of bytes of prefix for banana to allow when
+    decoding.
+    """
+    global _PREFIX_LIMIT
+    _PREFIX_LIMIT = limit
+setPrefixLimit(64)
+
+cdef int SIZE_LIMIT = 640 * 1024   # 640k is all you'll ever need :-)
+
+class Banana(protocol.Protocol, styles.Ephemeral, object):
+    knownDialects = ["pb", "none"]
+
+    prefixLimit = None
+
+    def __init__(self, isClient=1):
+        self.listStack = []
+        self.outgoingSymbols = copy.copy(self.outgoingVocabulary)
+        self.outgoingSymbolCount = 0
+        self.isClient = isClient
+        self.buf = ''
+
+    def setPrefixLimit(self, limit):
+        """
+        Set the prefix limit for decoding done by this protocol instance.
+
+        @see: L{setPrefixLimit}
+        """
+        self.prefixLimit = limit
+        self._smallestLongInt = -2 ** (limit * 7) + 1
+        self._smallestInt = -2 ** 31
+        self._largestInt = 2 ** 31 - 1
+        self._largestLongInt = 2 ** (limit * 7) - 1
+
+
+    def connectionReady(self):
+        """Surrogate for connectionMade
+        Called after protocol negotiation.
+        """
+
+    def _selectDialect(self, dialect):
+        self.currentDialect = dialect
+        self.connectionReady()
+
+    def callExpressionReceived(self, obj):
+        if self.currentDialect:
+            self.expressionReceived(obj)
+        else:
+            # this is the first message we've received
+            if self.isClient:
+                # if I'm a client I have to respond
+                for serverVer in obj:
+                    if serverVer in self.knownDialects:
+                        self.sendEncoded(serverVer)
+                        self._selectDialect(serverVer)
+                        break
+                else:
+                    # I can't speak any of those dialects.
+                    log.msg("The client doesn't speak any of the protocols "
+                            "offered by the server: disconnecting.")
+                    self.transport.loseConnection()
+            else:
+                if obj in self.knownDialects:
+                    self._selectDialect(obj)
+                else:
+                    # the client just selected a protocol that I did not suggest.
+                    log.msg("The client selected a protocol the server didn't "
+                            "suggest and doesn't know: disconnecting.")
+                    self.transport.loseConnection()
+
+
+    def connectionMade(self):
+        self.setPrefixLimit(_PREFIX_LIMIT)
+        self.currentDialect = None
+        if not self.isClient:
+            self.sendEncoded(self.knownDialects)
+
+
+    def gotItem(self, item):
+        l = self.listStack
+        if l:
+            l[-1][1].append(item)
+        else:
+            self.callExpressionReceived(item)
+
+    def dataReceived(self, chunk):
+        self.buf += chunk
+        cdef unsigned char* buf = <unsigned char*><char*>self.buf
+        listStack = self.listStack
+        gotItem = self.gotItem
+        cdef int n = len(self.buf)
+        cdef int i = 0
+        cdef int typebyte
+        cdef int pos
+        cdef int size_limit = SIZE_LIMIT
+        while i < n:
+            orig_i = i
+            pos = i
+            while pos < n:
+                if buf[pos] & HIGH_BIT_SET:
+                    break
+                pos += 1
+            else:
+                if pos > self.prefixLimit:
+                    raise BananaError("Security precaution: more than %d bytes of prefix" % (self.prefixLimit,))
+                self.buf = self.buf[orig_i:]
+                return
+            typebyte = buf[pos]
+            if pos-i > self.prefixLimit:
+                raise BananaError("Security precaution: longer than %d bytes worth of prefix" % (self.prefixLimit,))
+            num = _c_b1282int(buf, i, pos-i)
+            i = pos+1
+            if typebyte == LIST:
+                if num > SIZE_LIMIT:
+                    raise BananaError("Security precaution: List too long.")
+                listStack.append((num, []))
+            elif typebyte == STRING:
+                if num > SIZE_LIMIT:
+                    raise BananaError("Security precaution: String too long.")
+                if n-i >= num:
+                    gotItem(self.buf[i:i+num])
+                    i += num
+                else:
+                    self.buf = self.buf[orig_i:]
+                    return
+            elif typebyte == INT:
+                gotItem(num)
+            elif typebyte == LONGINT:
+                gotItem(num)
+            elif typebyte == LONGNEG:
+                gotItem(-num)
+            elif typebyte == NEG:
+                gotItem(-num)
+            elif typebyte == VOCAB:
+                gotItem(self.incomingVocabulary[num])
+            elif typebyte == FLOAT:
+                if n-i >= 8:
+                    gotItem(struct.unpack("!d", self.buf[i:i+8])[0])
+                    i += 8
+                else:
+                    self.buf = self.buf[orig_i:]
+                    return
+            else:
+                raise NotImplementedError(("Invalid Type Byte %r" % (typebyte,)))
+            while listStack and (len(listStack[-1][1]) == listStack[-1][0]):
+                item = listStack.pop()[1]
+                gotItem(item)
+        self.buf = ''
+
+
+    def expressionReceived(self, lst):
+        """Called when an expression (list, string, or int) is received.
+        """
+        raise NotImplementedError()
+
+
+    outgoingVocabulary = {
+        # Jelly Data Types
+        'None'           :  1,
+        'class'          :  2,
+        'dereference'    :  3,
+        'reference'      :  4,
+        'dictionary'     :  5,
+        'function'       :  6,
+        'instance'       :  7,
+        'list'           :  8,
+        'module'         :  9,
+        'persistent'     : 10,
+        'tuple'          : 11,
+        'unpersistable'  : 12,
+
+        # PB Data Types
+        'copy'           : 13,
+        'cache'          : 14,
+        'cached'         : 15,
+        'remote'         : 16,
+        'local'          : 17,
+        'lcache'         : 18,
+
+        # PB Protocol Messages
+        'version'        : 19,
+        'login'          : 20,
+        'password'       : 21,
+        'challenge'      : 22,
+        'logged_in'      : 23,
+        'not_logged_in'  : 24,
+        'cachemessage'   : 25,
+        'message'        : 26,
+        'answer'         : 27,
+        'error'          : 28,
+        'decref'         : 29,
+        'decache'        : 30,
+        'uncache'        : 31,
+        }
+
+    incomingVocabulary = {}
+    for k, v in outgoingVocabulary.items():
+        incomingVocabulary[v] = k
+
+    def sendEncoded(self, obj):
+        io = cStringIO.StringIO()
+        self._encode(obj, io.write)
+        value = io.getvalue()
+        self.transport.write(value)
+
+    def _encode(self, obj, write):
+        if isinstance(obj, (list, tuple)):
+            if len(obj) > SIZE_LIMIT:
+                raise BananaError(
+                    "list/tuple is too long to send (%d)" % (len(obj),))
+            int2b128(len(obj), write)
+            write(chr(LIST))
+            for elem in obj:
+                self._encode(elem, write)
+        elif isinstance(obj, (int, long)):
+            if obj < self._smallestLongInt or obj > self._largestLongInt:
+                raise BananaError(
+                    "int/long is too large to send (%d)" % (obj,))
+            if obj < self._smallestInt:
+                int2b128(-obj, write)
+                write(chr(LONGNEG))
+            elif obj < 0:
+                int2b128(-obj, write)
+                write(chr(NEG))
+            elif obj <= self._largestInt:
+                int2b128(obj, write)
+                write(chr(INT))
+            else:
+                int2b128(obj, write)
+                write(chr(LONGINT))
+        elif isinstance(obj, float):
+            write(chr(FLOAT))
+            write(struct.pack("!d", obj))
+        elif isinstance(obj, str):
+            # TODO: an API for extending banana...
+            if self.currentDialect == "pb" and obj in self.outgoingSymbols:
+                symbolID = self.outgoingSymbols[obj]
+                int2b128(symbolID, write)
+                write(chr(VOCAB))
+            else:
+                if len(obj) > SIZE_LIMIT:
+                    raise BananaError(
+                        "string is too long to send (%d)" % (len(obj),))
+                int2b128(len(obj), write)
+                write(chr(STRING))
+                write(obj)
+        else:
+            raise BananaError("could not send object: %r" % (obj,))
+
+
+# For use from the interactive interpreter
+_i = Banana()
+_i.connectionMade()
+_i._selectDialect("none")
+
+
+def encode(lst):
+    """Encode a list s-expression."""
+    io = cStringIO.StringIO()
+    _i.transport = io
+    _i.sendEncoded(lst)
+    return io.getvalue()
+
+
+def decode(st):
+    """
+    Decode a banana-encoded string.
+    """
+    l = []
+    _i.expressionReceived = l.append
+    try:
+        _i.dataReceived(st)
+    finally:
+        _i.buf = ''
+        del _i.expressionReceived
+    return l[0]
diff --git a/twisted/spread/pb.py b/twisted/spread/pb.py
index 0ccee9e..c06ecda 100644
--- a/twisted/spread/pb.py
+++ b/twisted/spread/pb.py
@@ -47,7 +47,10 @@ from twisted.python.components import registerAdapter
 
 from twisted.spread.interfaces import IJellyable, IUnjellyable
 from twisted.spread.jelly import jelly, unjelly, globalSecurity
-from twisted.spread import banana
+try:
+    from twisted.spread import _banana as banana
+except ImportError:
+    from twisted.spread import banana
 
 from twisted.spread.flavors import Serializable
 from twisted.spread.flavors import Referenceable, NoSuchMethod
diff --git a/twisted/spread/publish.py b/twisted/spread/publish.py
index 08908fd..52ad856 100644
--- a/twisted/spread/publish.py
+++ b/twisted/spread/publish.py
@@ -13,7 +13,11 @@ Future Plans: None known.
 import time
 
 from twisted.internet import defer
-from twisted.spread import banana, jelly, flavors
+from twisted.spread import jelly, flavors
+try:
+    from twisted.spread import _banana as banana
+except ImportError:
+    from twisted.spread import banana
 
 
 class Publishable(flavors.Cacheable):
diff --git a/twisted/test/test_banana.py b/twisted/test/test_banana.py
index 7edcaac..d8ebcc5 100644
--- a/twisted/test/test_banana.py
+++ b/twisted/test/test_banana.py
@@ -6,7 +6,7 @@ import sys
 
 # Twisted Imports
 from twisted.trial import unittest
-from twisted.spread import banana
+from twisted.spread import _banana as banana
 from twisted.python import failure
 from twisted.internet import protocol, main
 
diff --git a/twisted/test/test_import.py b/twisted/test/test_import.py
index 82f11f9..4326204 100644
--- a/twisted/test/test_import.py
+++ b/twisted/test/test_import.py
@@ -50,6 +50,7 @@ class AtLeastImportTestCase(unittest.TestCase):
         from twisted.spread import pb
         from twisted.spread import jelly
         from twisted.spread import banana
+        from twisted.spread import _banana
         from twisted.spread import flavors
     
     def test_twistedPython(self):
diff --git a/twisted/topfiles/setup.py b/twisted/topfiles/setup.py
index 90ba244..0fe1d58 100644
--- a/twisted/topfiles/setup.py
+++ b/twisted/topfiles/setup.py
@@ -50,6 +50,8 @@ extensions = [
     Extension("twisted.internet._sigchld",
               ["twisted/internet/_sigchld.c"],
               condition=lambda builder: sys.platform != "win32"),
+    Extension("twisted.spread._banana",
+              ["twisted/spread/_banana.c"]),
 ]
 
 # Figure out which plugins to include: all plugins except subproject ones
