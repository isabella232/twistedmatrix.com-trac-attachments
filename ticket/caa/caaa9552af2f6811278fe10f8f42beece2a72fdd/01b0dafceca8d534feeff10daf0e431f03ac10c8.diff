=== modified file 'twisted/conch/ssh/session.py'
--- twisted/conch/ssh/session.py	2011-02-14 04:45:15 +0000
+++ twisted/conch/ssh/session.py	2011-03-15 14:31:23 +0000
@@ -13,8 +13,9 @@
 import signal
 import sys
 import os
+from zope.interface import implements
 
-from twisted.internet import protocol
+from twisted.internet import interfaces, protocol
 from twisted.python import log
 from twisted.conch.interfaces import ISession
 from twisted.conch.ssh import common, channel
@@ -181,6 +182,13 @@
 
 
 class SSHSessionProcessProtocol(protocol.ProcessProtocol):
+    """I am both an L{IProcessProtocol} and an L{ITransport}.
+
+    I am a transport to the remote endpoint and a process protocol to the
+    local subsystem.
+    """
+
+    implements(interfaces.ITransport)
 
     # once initialized, a dictionary mapping signal values to strings
     # that follow RFC 4254.
@@ -267,17 +275,34 @@
                         struct.pack('>L', err.exitCode))
         self.session.loseConnection()
 
-    # transport stuff (we are also a transport!)
+
+    def getHost(self):
+        """
+        Return the host from my session's transport.
+        """
+        return self.session.conn.transport.getHost()
+
+
+    def getPeer(self):
+        """
+        Return the peer from my session's transport.
+        """
+        return self.session.conn.transport.getPeer()
+
 
     def write(self, data):
         self.session.write(data)
 
+
     def writeSequence(self, seq):
         self.session.write(''.join(seq))
 
+
     def loseConnection(self):
         self.session.loseConnection()
 
+
+
 class SSHSessionClient(protocol.Protocol):
 
     def dataReceived(self, data):

=== modified file 'twisted/conch/test/test_session.py'
--- twisted/conch/test/test_session.py	2011-02-14 04:45:15 +0000
+++ twisted/conch/test/test_session.py	2011-03-15 14:12:24 +0000
@@ -11,6 +11,7 @@
 
 from zope.interface import implements
 
+from twisted.internet.address import IPv4Address
 from twisted.internet.error import ProcessTerminated, ProcessDone
 from twisted.python.failure import Failure
 from twisted.conch.ssh import common, session, connection
@@ -361,7 +362,7 @@
     """
 
 
-    def __init__(self):
+    def __init__(self, transport=None):
         """
         Initialize our instance variables.
         """
@@ -370,6 +371,7 @@
         self.requests = {}
         self.eofs = {}
         self.closes = {}
+        self.transport = transport
 
 
     def logPrefix(self):
@@ -418,9 +420,6 @@
 
 
 
-
-
-
 class StubTransport:
     """
     A stub transport which records the data written.
@@ -436,6 +435,20 @@
     close = False
 
 
+    def getPeer(self):
+        """
+        Return an arbitrary L{IAddress}.
+        """
+        return IPv4Address('TCP', 'remotehost', '8888')
+
+
+    def getHost(self):
+        """
+        Return an arbitrary L{IAddress}.
+        """
+        return IPv4Address('TCP', 'localhost', '9999')
+
+
     def write(self, data):
         """
         Record data in the buffer.
@@ -1002,9 +1015,10 @@
     """
 
     def setUp(self):
+        self.transport = StubTransport()
         self.session = session.SSHSession(
-            conn=StubConnection(), remoteWindow=500, remoteMaxPacket=100)
-        self.transport = StubTransport()
+            conn=StubConnection(self.transport), remoteWindow=500,
+            remoteMaxPacket=100)
         self.pp = session.SSHSessionProcessProtocol(self.session)
         self.pp.makeConnection(self.transport)
 
@@ -1033,6 +1047,24 @@
         self.assertEquals(self.pp.session, self.session)
 
 
+    def test_getHost(self):
+        """
+        SSHSessionProcessProtocol.getHost() just delegates to its
+        session.conn.transport.getHost().
+        """
+        self.assertEqual(
+            self.session.conn.transport.getHost(), self.pp.getHost())
+
+
+    def test_getPeer(self):
+        """
+        SSHSessionProcessProtocol.getPeer() just delegates to its
+        session.conn.transport.getPeer().
+        """
+        self.assertEqual(
+            self.session.conn.transport.getPeer(), self.pp.getPeer())
+
+
     def test_connectionMade(self):
         """
         SSHSessionProcessProtocol.connectionMade() should check if there's a

