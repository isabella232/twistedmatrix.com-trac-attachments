=== modified file 'twisted/conch/ssh/factory.py'
--- twisted/conch/ssh/factory.py	2011-02-14 04:45:15 +0000
+++ twisted/conch/ssh/factory.py	2011-05-10 20:09:13 +0000
@@ -124,7 +124,7 @@
         @rtype:     C{tuple}
         """
         primesKeys = self.primes.keys()
-        primesKeys.sort(lambda x, y: cmp(abs(x - bits), abs(y - bits)))
+        primesKeys.sort(key=lambda x: abs(x - bits))
         realBits = primesKeys[0]
         return random.choice(self.primes[realBits])
 

=== modified file 'twisted/internet/defer.py'
--- twisted/internet/defer.py	2011-04-27 07:26:51 +0000
+++ twisted/internet/defer.py	2011-05-10 20:35:57 +0000
@@ -682,7 +682,7 @@
         return 'FirstError[#%d, %s]' % (self.index, self.subFailure)
 
 
-    def __cmp__(self, other):
+    def __eq__(self, other):
         """
         Comparison between L{FirstError} and other L{FirstError} instances
         is defined as the comparison of the index and sub-failure of each
@@ -692,10 +692,21 @@
         @since: 8.2
         """
         if isinstance(other, FirstError):
-            return cmp(
-                (self.index, self.subFailure),
-                (other.index, other.subFailure))
-        return -1
+            return ((self.index, self.subFailure) ==
+                    (other.index, other.subFailure))
+        return False
+
+
+    def __ne__(self, other):
+        """
+        Comparison between L{FirstError} and other L{FirstError} instances
+        is defined as the comparison of the index and sub-failure of each
+        instance.  L{FirstError} instances don't compare equal to anything
+        that isn't a L{FirstError} instance.
+
+        @since: 8.2
+        """
+        return not self.__eq__(other)
 
 
 

=== modified file 'twisted/internet/task.py'
--- twisted/internet/task.py	2011-02-14 04:45:15 +0000
+++ twisted/internet/task.py	2011-05-10 20:16:42 +0000
@@ -669,7 +669,7 @@
         """
         Sort the pending calls according to the time they are scheduled.
         """
-        self.calls.sort(lambda a, b: cmp(a.getTime(), b.getTime()))
+        self.calls.sort(key=lambda x: x.getTime())
 
 
     def callLater(self, when, what, *a, **kw):

