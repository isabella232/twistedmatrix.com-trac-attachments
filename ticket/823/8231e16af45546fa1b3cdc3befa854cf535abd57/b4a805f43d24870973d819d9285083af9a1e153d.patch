=== modified file 'twisted/application/internet.py'
--- twisted/application/internet.py	2011-02-14 04:45:15 +0000
+++ twisted/application/internet.py	2011-03-14 15:17:20 +0000
@@ -202,7 +202,7 @@
 """,
 }
 
-import new
+import types
 for tran in 'TCP UNIX SSL UDP UNIXDatagram Multicast'.split():
     for side in 'Server Client'.split():
         if tran == "Multicast" and side == "Client":
@@ -210,8 +210,8 @@
         base = globals()['_Abstract'+side]
         method = {'Generic': 'With'}.get(tran, tran)
         doc = _doc[side]%vars()
-        klass = new.classobj(tran+side, (base,),
-                             {'method': method, '__doc__': doc})
+        klass = types.ClassType(tran+side, (base,),
+                                {'method': method, '__doc__': doc})
         globals()[tran+side] = klass
 
 

=== modified file 'twisted/manhole/explorer.py'
--- twisted/manhole/explorer.py	2011-02-14 04:45:15 +0000
+++ twisted/manhole/explorer.py	2011-03-26 02:50:09 +0000
@@ -15,7 +15,7 @@
 """
 
 # System Imports
-import inspect, new, string, sys, types
+import inspect, string, sys, types
 import UserDict
 
 # Twisted Imports
@@ -35,7 +35,7 @@
             return self.data[oid]
         else:
             klass = typeTable.get(type(object), ExplorerGeneric)
-            e = new.instance(klass, {})
+            e = types.InstanceType(klass, {})
             self.data[oid] = e
             klass.__init__(e, object, identifier)
             return e
@@ -549,12 +549,12 @@
         members = dct.keys()
 
         clazzNS = {}
-        clazz = new.classobj('Watching%s%X' %
-                             (object.__class__.__name__, id(object)),
-                             (_MonkeysSetattrMixin, object.__class__,),
-                             clazzNS)
+        clazz = types.ClassType('Watching%s%X' %
+                                (object.__class__.__name__, id(object)),
+                                (_MonkeysSetattrMixin, object.__class__,),
+                                clazzNS)
 
-        clazzNS['_watchEmitChanged'] = new.instancemethod(
+        clazzNS['_watchEmitChanged'] = types.MethodType(
             lambda slf, i=identifier, b=self, cb=callback:
             cb(b.browseObject(slf, i)),
             None, clazz)
@@ -604,9 +604,8 @@
         # XXX: this conditional probably isn't effective.
         if oldMethod is not self:
             # avoid triggering __setattr__
-            self.instance.__dict__[methodIdentifier] = (
-                new.instancemethod(self, self.instance,
-                                   self.instance.__class__))
+            self.instance.__dict__[methodIdentifier] = types.MethodType(
+                                self, self.instance, self.instance.__class__)
             self.oldMethod = (methodIdentifier, oldMethod)
 
     def uninstall(self):

=== added directory 'twisted/manhole/test'
=== added file 'twisted/manhole/test/__init__.py'
--- twisted/manhole/test/__init__.py	1970-01-01 00:00:00 +0000
+++ twisted/manhole/test/__init__.py	2011-03-25 21:21:26 +0000
@@ -0,0 +1,6 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for L{twisted.manhole}.
+"""

=== added file 'twisted/manhole/test/test_explorer.py'
--- twisted/manhole/test/test_explorer.py	1970-01-01 00:00:00 +0000
+++ twisted/manhole/test/test_explorer.py	2011-03-26 00:04:40 +0000
@@ -0,0 +1,94 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+from twisted.trial import unittest
+from twisted.manhole.explorer import (
+    CRUFT_WatchyThingie,
+    ExplorerImmutable,
+    Pool,
+    _WatchMonkey,
+)
+
+
+class Foo:
+    """
+    Test helper.
+    """
+
+
+class PoolTestCase(unittest.TestCase):
+    """
+    Tests for the Pool class.
+    """
+
+    def test_instanceBuilding(self):
+        """
+        If the object is not in the pool a new instance is created
+        and returned.
+        """
+        p = Pool()
+        e = p.getExplorer(123, 'id')
+        self.assertTrue(isinstance(e, ExplorerImmutable))
+        self.assertEqual(e.value, 123)
+        self.assertEqual(e.identifier, 'id')
+
+
+
+class CRUFTWatchyThingieTestCase(unittest.TestCase):
+    """
+    Tests for the CRUFT_WatchyThingie class.
+    """
+    def test_watchObjectConstructedClass(self):
+        """
+        Build class correctly.
+        """
+        foo = Foo()
+        cwt = CRUFT_WatchyThingie()
+        cwt.watchObject(foo, 'id', 'cback')
+
+        # check new constructed class
+        new_class_name = foo.__class__.__name__
+        self.assertEqual(new_class_name, "WatchingFoo%X" % id(foo))
+
+
+    def test_watchObjectConstructedInstanceMethod(self):
+        """
+        Build instance method correctly.
+        """
+        foo = Foo()
+        cwt = CRUFT_WatchyThingie()
+        cwt.watchObject(foo, 'id', 'cback')
+
+        # check new constructed instance method
+        self.assertTrue(foo._watchEmitChanged.im_self is foo)
+
+
+
+class WatchMonkeyTestCase(unittest.TestCase):
+    """
+    Tests for the _WatchMonkey class.
+    """
+    def test_install(self):
+        """
+        Install the _WatchMonkey on a method.
+        """
+        class Foo:
+            """
+            Helper.
+            """
+            def someMethod(self):
+                """
+                Just a method.
+                """
+
+        foo = Foo()
+        wm = _WatchMonkey(foo)
+        wm.install('someMethod')
+
+        # patch wm's method to check that the method was exchanged
+        called = []
+        wm.__call__ = lambda s: called.append(True)
+
+        # call and check
+        foo.someMethod()
+        self.assertTrue(called)

=== modified file 'twisted/persisted/aot.py'
--- twisted/persisted/aot.py	2011-02-14 04:45:15 +0000
+++ twisted/persisted/aot.py	2011-03-14 15:17:20 +0000
@@ -11,7 +11,7 @@
 this side of Marmalade!
 """
 
-import types, new, string, copy_reg, tokenize, re
+import types, string, copy_reg, tokenize, re
 
 from twisted.python import reflect, log
 from twisted.persisted import crefutil
@@ -120,7 +120,7 @@
         if self.refnum:
             return "Ref(%d, \n\0%s)" % (self.refnum, prettify(self.obj))
         return prettify(self.obj)
- 
+
 
 class Deref:
     def __init__(self, num):
@@ -306,7 +306,7 @@
     def unjellyAttribute(self, instance, attrName, ao):
         #XXX this is unused????
         """Utility method for unjellying into instances of attributes.
-        
+
         Use this rather than unjellyAO unless you like surprising bugs!
         Alternatively, you can use unjellyInto on your instance's __dict__.
         """
@@ -337,7 +337,7 @@
                     elif isinstance(im_self, crefutil.NotKnown):
                         return crefutil._InstanceMethod(im_name, im_self, im_class)
                     else:
-                        return new.instancemethod(im_class.__dict__[im_name],
+                        return types.MethodType(im_class.__dict__[im_name],
                                                   im_self,
                                                   im_class)
                 else:
@@ -347,10 +347,10 @@
                 klass = reflect.namedObject(ao.klass)
                 state = self.unjellyAO(ao.state)
                 if hasattr(klass, "__setstate__"):
-                    inst = new.instance(klass, {})
+                    inst = types.InstanceType(klass, {})
                     self.callAfter(inst.__setstate__, state)
                 else:
-                    inst = new.instance(klass, state)
+                    inst = types.InstanceType(klass, state)
                 return inst
 
             elif c is Ref:
@@ -385,17 +385,17 @@
                 return d
 
         #Types
-                
+
         elif t in _SIMPLE_BUILTINS:
             return ao
-            
+
         elif t is types.ListType:
             l = []
             for x in ao:
                 l.append(None)
                 self.unjellyInto(l, len(l)-1, x)
             return l
-        
+
         elif t is types.TupleType:
             l = []
             tuple_ = tuple
@@ -418,7 +418,7 @@
 
         del self.stack[-1]
 
-        
+
     def unjelly(self, ao):
         try:
             l = [None]
@@ -451,7 +451,7 @@
         file.write(getSource(aot))
     else:
         return getSource(aot)
-        
+
 
 class AOTJellier:
     def __init__(self):
@@ -473,26 +473,26 @@
         #immutable: We don't care if these have multiple refs!
         if objType in _SIMPLE_BUILTINS:
             retval = obj
-            
+
         elif objType is types.MethodType:
             # TODO: make methods 'prefer' not to jelly the object internally,
             # so that the object will show up where it's referenced first NOT
             # by a method.
             retval = InstanceMethod(obj.im_func.__name__, reflect.qual(obj.im_class),
                                     self.jellyToAO(obj.im_self))
-            
+
         elif objType is types.ModuleType:
             retval = Module(obj.__name__)
-            
+
         elif objType is types.ClassType:
             retval = Class(reflect.qual(obj))
 
         elif issubclass(objType, type):
             retval = Class(reflect.qual(obj))
-            
+
         elif objType is types.FunctionType:
             retval = Function(reflect.fullFuncName(obj))
-            
+
         else: #mutable! gotta watch for refs.
 
 #Marmalade had the nicety of being able to just stick a 'reference' attribute
@@ -518,10 +518,10 @@
 
             retval = Ref()
             self.prepareForRef(retval, obj)
-            
+
             if objType is types.ListType:
                 retval.setObj(map(self.jellyToAO, obj)) #hah!
-                
+
             elif objType is types.TupleType:
                 retval.setObj(tuple(map(self.jellyToAO, obj)))
 
@@ -540,10 +540,10 @@
 
             elif copy_reg.dispatch_table.has_key(objType):
                 unpickleFunc, state = copy_reg.dispatch_table[objType](obj)
-                
+
                 retval.setObj(Copyreg( reflect.fullFuncName(unpickleFunc),
                                        self.jellyToAO(state)))
-                
+
             else:
                 raise TypeError("Unsupported type: %s" % objType.__name__)
 

=== modified file 'twisted/persisted/crefutil.py'
--- twisted/persisted/crefutil.py	2011-02-14 04:45:15 +0000
+++ twisted/persisted/crefutil.py	2011-03-14 15:17:20 +0000
@@ -8,14 +8,10 @@
 Utility classes for dealing with circular references.
 """
 
+import types
+
 from twisted.python import log, reflect
 
-try:
-    from new import instancemethod
-except:
-    from org.python.core import PyMethod
-    instancemethod = PyMethod
-
 
 class NotKnown:
     def __init__(self):
@@ -113,9 +109,9 @@
     def __setitem__(self, n, obj):
         assert n == 0, "only zero index allowed"
         if not isinstance(obj, NotKnown):
-            self.resolveDependants(instancemethod(self.my_class.__dict__[self.name],
-                                                  obj,
-                                                  self.my_class))
+            method = types.MethodType(self.my_class.__dict__[self.name],
+                                      obj, self.my_class)
+            self.resolveDependants(method)
 
 class _DictKeyAndValue:
     def __init__(self, dict):

=== modified file 'twisted/persisted/styles.py'
--- twisted/persisted/styles.py	2011-02-14 04:45:15 +0000
+++ twisted/persisted/styles.py	2011-03-26 03:52:19 +0000
@@ -21,12 +21,6 @@
 # Twisted Imports
 from twisted.python import log
 
-try:
-    from new import instancemethod
-except:
-    from org.python.core import PyMethod
-    instancemethod = PyMethod
-
 oldModules = {}
 
 ## First, let's register support for some stuff that really ought to
@@ -46,9 +40,7 @@
         unbound = getattr(im_class,im_name)
         if im_self is None:
             return unbound
-        bound=instancemethod(unbound.im_func,
-                                 im_self,
-                                 im_class)
+        bound = types.MethodType(unbound.im_func, im_self, im_class)
         return bound
     except AttributeError:
         log.msg("Method",im_name,"not on class",im_class)
@@ -60,9 +52,7 @@
         log.msg("Attempting fixup with",unbound)
         if im_self is None:
             return unbound
-        bound=instancemethod(unbound.im_func,
-                                 im_self,
-                                 im_self.__class__)
+        bound = types.MethodType(unbound.im_func, im_self, im_self.__class__)
         return bound
 
 copy_reg.pickle(types.MethodType,
@@ -215,7 +205,7 @@
         bases.append(self.__class__) # don't forget me!!
         # first let's look for old-skool versioned's
         if self.__dict__.has_key("persistenceVersion"):
-            
+
             # Hacky heuristic: if more than one class subclasses Versioned,
             # we'll assume that the higher version number wins for the older
             # class, so we'll consider the attribute the version of the older
@@ -223,7 +213,7 @@
             # eventually be an incorrect assumption, but hopefully old-school
             # persistenceVersion stuff won't make it that far into multiple
             # classes inheriting from Versioned.
-            
+
             pver = self.__dict__['persistenceVersion']
             del self.__dict__['persistenceVersion']
             highestVersion = 0

=== added directory 'twisted/persisted/test'
=== added file 'twisted/persisted/test/__init__.py'
--- twisted/persisted/test/__init__.py	1970-01-01 00:00:00 +0000
+++ twisted/persisted/test/__init__.py	2011-03-26 00:07:47 +0000
@@ -0,0 +1,6 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for L{twisted.persisted}.
+"""

=== added file 'twisted/persisted/test/test_styles.py'
--- twisted/persisted/test/test_styles.py	1970-01-01 00:00:00 +0000
+++ twisted/persisted/test/test_styles.py	2011-03-26 03:51:41 +0000
@@ -0,0 +1,49 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+from twisted.trial import unittest
+from twisted.persisted.styles import unpickleMethod
+
+
+class Foo:
+    """
+    Helper class.
+    """
+    def method(self):
+        """
+        Helper method.
+        """
+
+
+
+class Bar:
+    """
+    Helper class.
+    """
+
+
+
+class UnpickleMethodTestCase(unittest.TestCase):
+    """
+    Tests for the unpickleMethod function.
+    """
+
+    def test_instanceBuildingNamePresent(self):
+        """
+        Test the instance creation when the name is present in the class.
+        """
+        foo = Foo()
+        m = unpickleMethod('method', foo, Foo)
+        self.assertEqual(m, foo.method)
+        self.assertFalse(m is foo.method)
+
+
+    def test_instanceBuildingNameNotPresent(self):
+        """
+        Test the instance creation when the name is not present in the class.
+        """
+        foo = Foo()
+        m = unpickleMethod('method', foo, Bar)
+        self.assertEqual(m, foo.method)
+        self.assertFalse(m is foo.method)
+

=== modified file 'twisted/python/reflect.py'
--- twisted/python/reflect.py	2011-03-14 20:05:29 +0000
+++ twisted/python/reflect.py	2011-03-26 04:10:40 +0000
@@ -15,7 +15,7 @@
 import weakref
 import re
 import warnings
-import new
+
 try:
     from collections import deque
 except ImportError:
@@ -493,14 +493,14 @@
     sm = sys.modules
     tprm = "twisted.python.reflect.macros"
     if not sm.has_key(tprm):
-        macros = new.module(tprm)
+        macros = types.ModuleType(tprm)
         sm[tprm] = macros
         macros.count = 0
     macros = sm[tprm]
     macros.count += 1
     macroname = 'macro_' + str(macros.count)
     tprmm = tprm + '.' + macroname
-    mymod = new.module(tprmm)
+    mymod = types.ModuleType(tprmm)
     sys.modules[tprmm] = mymod
     setattr(macros, macroname, mymod)
     dict = mymod.__dict__

=== modified file 'twisted/python/util.py'
--- twisted/python/util.py	2011-02-14 04:45:15 +0000
+++ twisted/python/util.py	2011-03-14 15:17:20 +0000
@@ -2,7 +2,8 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-import os, sys, hmac, errno, new, inspect, warnings
+import os, sys, hmac, errno, inspect, warnings
+import types
 try:
     import pwd, grp
 except ImportError:
@@ -624,7 +625,7 @@
 
         If the C extension is present, we're calling it, which in turn calls
         initgroups(3).
-        
+
         If not, this is done by reading the group database /etc/group and using
         all groups of which C{uid} is a member.  The additional group
         C{primaryGid} is also added to the list.
@@ -675,18 +676,18 @@
 def switchUID(uid, gid, euid=False):
     """
     Attempts to switch the uid/euid and gid/egid for the current process.
-    
+
     If C{uid} is the same value as L{os.getuid} (or L{os.geteuid}),
     this function will issue a L{UserWarning} and not raise an exception.
-    
+
     @type uid: C{int} or C{NoneType}
     @param uid: the UID (or EUID) to switch the current process to. This
                 parameter will be ignored if the value is C{None}.
-    
+
     @type gid: C{int} or C{NoneType}
     @param gid: the GID (or EGID) to switch the current process to. This
                 parameter will be ignored if the value is C{None}.
-                
+
     @type euid: C{bool}
     @param euid: if True, set only effective user-id rather than real user-id.
                  (This option has no effect unless the process is running
@@ -840,7 +841,7 @@
         g.__name__ = f.__name__
     except TypeError:
         try:
-            merged = new.function(
+            merged = types.FunctionType(
                 g.func_code, g.func_globals,
                 f.__name__, inspect.getargspec(g)[-1],
                 g.func_closure)

=== modified file 'twisted/spread/jelly.py'
--- twisted/spread/jelly.py	2011-02-14 04:45:15 +0000
+++ twisted/spread/jelly.py	2011-03-14 15:17:20 +0000
@@ -104,8 +104,6 @@
     warnings.filters.pop()
 
 
-from new import instance
-from new import instancemethod
 from zope.interface import implements
 
 # Twisted Imports
@@ -151,7 +149,7 @@
 
 def _newInstance(cls, state=_NO_STATE):
     """
-    Make a new instance of a class without calling its __init__ method. 
+    Make a new instance of a class without calling its __init__ method.
     Supports both new- and old-style classes.
 
     @param state: A C{dict} used to update C{inst.__dict__} or C{_NO_STATE}
@@ -167,9 +165,9 @@
             inst.__dict__.update(state) # Copy 'instance' behaviour
     else:
         if state is not _NO_STATE:
-            inst = instance(cls, state)
-        else:   
-            inst = instance(cls)
+            inst = InstanceType(cls, state)
+        else:
+            inst = InstanceType(cls)
     return inst
 
 
@@ -930,9 +928,7 @@
             elif isinstance(im_self, NotKnown):
                 im = _InstanceMethod(im_name, im_self, im_class)
             else:
-                im = instancemethod(im_class.__dict__[im_name],
-                                    im_self,
-                                    im_class)
+                im = MethodType(im_class.__dict__[im_name], im_self, im_class)
         else:
             raise TypeError('instance method changed')
         return im

=== modified file 'twisted/spread/pb.py'
--- twisted/spread/pb.py	2011-03-15 00:19:55 +0000
+++ twisted/spread/pb.py	2011-03-26 04:10:40 +0000
@@ -28,7 +28,6 @@
 """
 
 import random
-import new
 import types
 
 from zope.interface import implements, Interface
@@ -429,7 +428,7 @@
 setUnjellyableForClass(CopyableFailure, CopiedFailure)
 
 def failure2Copyable(fail, unsafeTracebacks=0):
-    f = new.instance(CopyableFailure, fail.__dict__)
+    f = types.InstanceType(CopyableFailure, fail.__dict__)
     f.unsafeTracebacks = unsafeTracebacks
     return f
 

=== modified file 'twisted/test/test_adbapi.py'
--- twisted/test/test_adbapi.py	2011-02-14 04:45:15 +0000
+++ twisted/test/test_adbapi.py	2011-03-14 15:17:20 +0000
@@ -8,7 +8,8 @@
 
 from twisted.trial import unittest
 
-import os, stat, new
+import os, stat
+import types
 
 from twisted.enterprise.adbapi import ConnectionPool, ConnectionLost, safe
 from twisted.enterprise.adbapi import Connection, Transaction
@@ -555,7 +556,8 @@
                   PsycopgConnector, MySQLConnector, FirebirdConnector]
     for connclass in connectors:
         name = connclass.TEST_PREFIX + suffix
-        klass = new.classobj(name, (connclass, base, unittest.TestCase), base.__dict__)
+        klass = types.ClassType(name, (connclass, base, unittest.TestCase),
+                                base.__dict__)
         globals[name] = klass
 
 # GadflyADBAPITestCase SQLiteADBAPITestCase PyPgSQLADBAPITestCase

=== modified file 'twisted/test/test_rebuild.py'
--- twisted/test/test_rebuild.py	2011-02-14 04:45:15 +0000
+++ twisted/test/test_rebuild.py	2011-03-14 15:17:20 +0000
@@ -3,7 +3,7 @@
 
 
 import sys, os
-import new
+import types
 
 from twisted.trial import unittest
 from twisted.python import rebuild
@@ -167,7 +167,7 @@
     Tests for rebuilding new-style classes of various sorts.
     """
     def setUp(self):
-        self.m = new.module('whipping')
+        self.m = types.ModuleType('whipping')
         sys.modules['whipping'] = self.m
 
 

