diff --git twisted/conch/ssh/_kex.py twisted/conch/ssh/_kex.py
new file mode 100644
index 0000000..2cb68d5
--- /dev/null
+++ twisted/conch/ssh/_kex.py
@@ -0,0 +1,174 @@
+# -*- test-case-name: twisted.conch.test.test_transport -*-
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+SSH key exchange handling.
+"""
+
+from zope.interface import Attribute, implementer, Interface
+
+from twisted.conch import error
+
+
+class _IKexAlgorithm(Interface):
+    """
+    An L{_IKexAlgorithm} describes a key exchange algorithm.
+    """
+
+    preference = Attribute(
+        "An C{int} giving the preference of the algorithm when negotiating "
+        "key exchange.  Algorithms with lower precedence values are more "
+        "preferred.")
+
+
+
+class _IFixedGroupKexAlgorithm(_IKexAlgorithm):
+    """
+    An L{_IFixedGroupKexAlgorithm} describes a key exchange algorithm with a
+    fixed prime / generator group.
+    """
+
+    prime = Attribute(
+        "A C{long} giving the prime number used in Diffie-Hellman key "
+        "exchange, or C{None} if not applicable.")
+
+    generator = Attribute(
+        "A C{long} giving the generator number used in Diffie-Hellman key "
+        "exchange, or C{None} if not applicable.  (This is not related to "
+        "Python generator functions.)")
+
+
+
+class _IGroupExchangeKexAlgorithm(_IKexAlgorithm):
+    """
+    An L{_IGroupExchangeAlgorithm} describes a key exchange algorithm that
+    uses group exchange between the client and server.
+
+    A prime / generator group should be chosen at run time based on the
+    requested size.  See RFC 4419.
+    """
+
+
+
+@implementer(_IGroupExchangeKexAlgorithm)
+class _DHGroupExchangeSHA1(object):
+    """
+    Diffie-Hellman Group and Key Exchange with SHA-1 as HASH.  Defined in
+    RFC 4419, 4.1.
+    """
+
+    preference = 1
+
+
+
+@implementer(_IFixedGroupKexAlgorithm)
+class _DHGroup1SHA1(object):
+    """
+    Diffie-Hellman key exchange with SHA-1 as HASH, and Oakley Group 2
+    (1024-bit MODP Group).  Defined in RFC 4253, 8.1.
+    """
+
+    preference = 2
+    # Diffie-Hellman primes from Oakley Group 2 (RFC 2409, 6.2).
+    prime = long('17976931348623159077083915679378745319786029604875601170644'
+        '44236841971802161585193689478337958649255415021805654859805036464405'
+        '48199239100050792877003355816639229553136239076508735759914822574862'
+        '57500742530207744771258955095793777842444242661733472762929938766870'
+        '9205606050270810842907692932019128194467627007L')
+    generator = 2L
+
+
+
+@implementer(_IFixedGroupKexAlgorithm)
+class _DHGroup14SHA1(object):
+    """
+    Diffie-Hellman key exchange with SHA-1 as HASH and Oakley Group 14
+    (2048-bit MODP Group).  Defined in RFC 4253, 8.2.
+    """
+
+    preference = 3
+    # Diffie-Hellman primes from Oakley Group 14 (RFC 3526, 3).
+    prime = long('32317006071311007300338913926423828248817941241140239112842'
+        '00975140074170663435422261968941736356934711790173790970419175460587'
+        '32091950288537589861856221532121754125149017745202702357960782362488'
+        '84246189477587641105928646099411723245426622522193230540919037680524'
+        '23551912567971587011700105805587765103886184728025797605490356973256'
+        '15261670813393617995413364765591603683178967290731783845896806396719'
+        '00977202194168647225871031411336429319536193471636533209717077448227'
+        '98858856536920864529663607725026895550592836275112117409697299806841'
+        '05543595848665832916421362182310789909994486524682624169720359118525'
+        '07045361090559L')
+    generator = 2L
+
+
+
+_kexAlgorithms = {
+    "diffie-hellman-group-exchange-sha1": _DHGroupExchangeSHA1(),
+    "diffie-hellman-group1-sha1": _DHGroup1SHA1(),
+    "diffie-hellman-group14-sha1": _DHGroup14SHA1(),
+    }
+
+
+
+def _getKex(kexAlgo):
+    """
+    Get a description of a named key exchange algorithm.
+
+    @type kexAlgo: C{str}
+    @param kexAlgo: The key exchange algorithm name.
+
+    @rtype: L{_IKexAlgorithm}
+    @return: A description of the key exchange algorithm named by C{kexAlgo}.
+
+    @raises ConchError: if the key exchange algorithm is not found.
+    """
+    if kexAlgo not in _kexAlgorithms:
+        raise error.ConchError(
+            "Unsupported key exchange algorithm: %s" % (kexAlgo,))
+    return _kexAlgorithms[kexAlgo]
+
+
+
+def isFixedGroup(kexAlgo):
+    """
+    Returns C{True} if C{kexAlgo} has a fixed prime / generator group.  Used
+    to determine the correct key exchange logic to perform.
+
+    @type kexAlgo: C{str}
+    @param kexAlgo: The key exchange algorithm name.
+
+    @rtype: C{bool}
+    @return: C{True} if C{kexAlgo} has a fixed prime / generator group,
+        otherwise C{False}.
+    """
+    return _IFixedGroupKexAlgorithm.providedBy(_getKex(kexAlgo))
+
+
+
+def getDHPrime(kexAlgo):
+    """
+    Get the prime and generator to use in key exchange.
+
+    @type kexAlgo: C{str}
+    @param kexAlgo: The key exchange algorithm name.
+
+    @rtype: C{tuple}
+    @return: A C{tuple} containing C{long} generator and C{long} prime.
+    """
+    kex = _getKex(kexAlgo)
+    return kex.generator, kex.prime
+
+
+
+def getSupportedKeyExchanges():
+    """
+    Get a list of supported key exchange algorithm names in order of
+    preference.
+
+    @rtype: C{list} of L{str}
+    @return: A C{list} of supported key exchange algorithm names.
+    """
+    return sorted(
+        _kexAlgorithms,
+        key = lambda kexAlgo: _kexAlgorithms[kexAlgo].preference)
diff --git twisted/conch/ssh/transport.py twisted/conch/ssh/transport.py
index 71c33ce..ecab130 100644
--- twisted/conch/ssh/transport.py
+++ twisted/conch/ssh/transport.py
@@ -24,12 +24,11 @@ from Crypto import Util
 # twisted imports
 from twisted.internet import protocol, defer
 
-from twisted.conch import error
 from twisted.python import log, randbytes
 
 
 # sibling imports
-from twisted.conch.ssh import address, keys
+from twisted.conch.ssh import address, _kex, keys
 from twisted.conch.ssh.common import NS, getNS, MP, getMP, _MPpow, ffs
 
 
@@ -88,7 +87,6 @@ class _MACParams(tuple):
     """
 
 
-
 class SSHTransportBase(protocol.Protocol):
     """
     Protocol supporting basic SSH functionality: sending/receiving packets
@@ -218,8 +216,7 @@ class SSHTransportBase(protocol.Protocol):
     # both of the above support 'none', but for security are disabled by
     # default.  to enable them, subclass this class and add it, or do:
     #   SSHTransportBase.supportedCiphers.append('none')
-    supportedKeyExchanges = ['diffie-hellman-group-exchange-sha1',
-                             'diffie-hellman-group1-sha1']
+    supportedKeyExchanges = _kex.getSupportedKeyExchanges()
     supportedPublicKeys = ['ssh-rsa', 'ssh-dss']
     supportedCompressions = ['none', 'zlib']
     supportedLanguages = ()
@@ -904,24 +901,24 @@ class SSHServerTransport(SSHTransportBase):
 
     def _ssh_KEXDH_INIT(self, packet):
         """
-        Called to handle the beginning of a diffie-hellman-group1-sha1 key
-        exchange.
+        Called to handle the beginning of a non-group key exchange.
 
         Unlike other message types, this is not dispatched automatically.  It
         is called from C{ssh_KEX_DH_GEX_REQUEST_OLD} because an extra check is
         required to determine if this is really a KEXDH_INIT message or if it
         is a KEX_DH_GEX_REQUEST_OLD message.
 
-        The KEXDH_INIT (for diffie-hellman-group1-sha1 exchanges) payload::
+        The KEXDH_INIT payload::
 
                 integer e (the client's Diffie-Hellman public key)
 
-            We send the KEXDH_REPLY with our host key and signature.
+        We send the KEXDH_REPLY with our host key and signature.
         """
         clientDHpublicKey, foo = getMP(packet)
         y = _getRandomNumber(randbytes.secureRandom, 512)
-        serverDHpublicKey = _MPpow(DH_GENERATOR, y, DH_PRIME)
-        sharedSecret = _MPpow(clientDHpublicKey, y, DH_PRIME)
+        self.g, self.p = _kex.getDHPrime(self.kexAlg)
+        serverDHpublicKey = _MPpow(self.g, y, self.p)
+        sharedSecret = _MPpow(clientDHpublicKey, y, self.p)
         h = sha1()
         h.update(NS(self.otherVersionString))
         h.update(NS(self.ourVersionString))
@@ -942,11 +939,10 @@ class SSHServerTransport(SSHTransportBase):
 
     def ssh_KEX_DH_GEX_REQUEST_OLD(self, packet):
         """
-        This represents two different key exchange methods that share the same
+        This represents different key exchange methods that share the same
         integer value.  If the message is determined to be a KEXDH_INIT,
         C{_ssh_KEXDH_INIT} is called to handle it.  Otherwise, for
-        KEX_DH_GEX_REQUEST_OLD (for diffie-hellman-group-exchange-sha1)
-        payload::
+        KEX_DH_GEX_REQUEST_OLD payload::
 
                 integer ideal (ideal size for the Diffie-Hellman prime)
 
@@ -962,15 +958,13 @@ class SSHServerTransport(SSHTransportBase):
 
         # KEXDH_INIT and KEX_DH_GEX_REQUEST_OLD have the same value, so use
         # another cue to decide what kind of message the peer sent us.
-        if self.kexAlg == 'diffie-hellman-group1-sha1':
+        if _kex.isFixedGroup(self.kexAlg):
             return self._ssh_KEXDH_INIT(packet)
-        elif self.kexAlg == 'diffie-hellman-group-exchange-sha1':
+        else:
             self.dhGexRequest = packet
             ideal = struct.unpack('>L', packet)[0]
             self.g, self.p = self.factory.getDHPrime(ideal)
             self.sendPacket(MSG_KEX_DH_GEX_GROUP, MP(self.p) + MP(self.g))
-        else:
-            raise error.ConchError('bad kexalg: %s' % self.kexAlg)
 
 
     def ssh_KEX_DH_GEX_REQUEST(self, packet):
@@ -1108,33 +1102,29 @@ class SSHClientTransport(SSHTransportBase):
         Called when we receive a MSG_KEXINIT message.  For a description
         of the packet, see SSHTransportBase.ssh_KEXINIT().  Additionally,
         this method sends the first key exchange packet.  If the agreed-upon
-        exchange is diffie-hellman-group1-sha1, generate a public key
-        and send it in a MSG_KEXDH_INIT message.  If the exchange is
-        diffie-hellman-group-exchange-sha1, ask for a 2048 bit group with a
-        MSG_KEX_DH_GEX_REQUEST_OLD message.
+        exchange has a fixed prime/generator group, generate a public key
+        and send it in a MSG_KEXDH_INIT message. Otherwise, ask for a 2048
+        bit group with a MSG_KEX_DH_GEX_REQUEST_OLD message.
         """
         if SSHTransportBase.ssh_KEXINIT(self, packet) is None:
             return # we disconnected
-        if self.kexAlg == 'diffie-hellman-group1-sha1':
+        if _kex.isFixedGroup(self.kexAlg):
             self.x = _generateX(randbytes.secureRandom, 512)
-            self.e = _MPpow(DH_GENERATOR, self.x, DH_PRIME)
+            self.g, self.p = _kex.getDHPrime(self.kexAlg)
+            self.e = _MPpow(self.g, self.x, self.p)
             self.sendPacket(MSG_KEXDH_INIT, self.e)
-        elif self.kexAlg == 'diffie-hellman-group-exchange-sha1':
-            self.sendPacket(MSG_KEX_DH_GEX_REQUEST_OLD, '\x00\x00\x08\x00')
         else:
-            raise error.ConchError("somehow, the kexAlg has been set "
-                                   "to something we don't support")
+            self.sendPacket(MSG_KEX_DH_GEX_REQUEST_OLD, '\x00\x00\x08\x00')
 
 
     def _ssh_KEXDH_REPLY(self, packet):
         """
-        Called to handle a reply to a diffie-hellman-group1-sha1 key exchange
-        message (KEXDH_INIT).
+        Called to handle a reply to a non-group key exchange message
+        (KEXDH_INIT).
         
         Like the handler for I{KEXDH_INIT}, this message type has an
         overlapping value.  This method is called from C{ssh_KEX_DH_GEX_GROUP}
-        if that method detects a diffie-hellman-group1-sha1 key exchange is in
-        progress.
+        if that method detects a non-group key exchange is in progress.
 
         Payload::
 
@@ -1160,17 +1150,17 @@ class SSHClientTransport(SSHTransportBase):
 
     def ssh_KEX_DH_GEX_GROUP(self, packet):
         """
-        This handles two different message which share an integer value.
+        This handles different messages which share an integer value.
+
+        If the key exchange does not have a fixed prime/generator group,
+        we generate a Diffie-Hellman public key and send it in a
+        MSG_KEX_DH_GEX_INIT message.
 
-        If the key exchange is diffie-hellman-group-exchange-sha1, this is
-        MSG_KEX_DH_GEX_GROUP.  Payload::
+        Payload::
             string g (group generator)
             string p (group prime)
-
-        We generate a Diffie-Hellman public key and send it in a
-        MSG_KEX_DH_GEX_INIT message.
         """
-        if self.kexAlg == 'diffie-hellman-group1-sha1':
+        if _kex.isFixedGroup(self.kexAlg):
             return self._ssh_KEXDH_REPLY(packet)
         else:
             self.p, rest = getMP(packet)
@@ -1193,7 +1183,7 @@ class SSHClientTransport(SSHTransportBase):
         @type signature: C{str}
         """
         serverKey = keys.Key.fromString(pubKey)
-        sharedSecret = _MPpow(f, self.x, DH_PRIME)
+        sharedSecret = _MPpow(f, self.x, self.p)
         h = sha1()
         h.update(NS(self.ourVersionString))
         h.update(NS(self.otherVersionString))
@@ -1582,14 +1572,7 @@ class _Counter:
 
 
 
-# Diffie-Hellman primes from Oakley Group 2 [RFC 2409]
-DH_PRIME = long('17976931348623159077083915679378745319786029604875601170644'
-'442368419718021615851936894783379586492554150218056548598050364644054819923'
-'910005079287700335581663922955313623907650873575991482257486257500742530207'
-'744771258955095793777842444242661733472762929938766870920560605027081084290'
-'7692932019128194467627007L')
-DH_GENERATOR = 2L
-
+DH_GENERATOR, DH_PRIME = _kex.getDHPrime("diffie-hellman-group1-sha1")
 
 
 MSG_DISCONNECT = 1
diff --git twisted/conch/test/test_conch.py twisted/conch/test/test_conch.py
index b2db6da..7e2e90a 100644
--- twisted/conch/test/test_conch.py
+++ twisted/conch/test/test_conch.py
@@ -517,6 +517,57 @@ class OpenSSHClientMixin:
 
 
 
+class OpenSSHKeyExchangeTestCase(ConchServerSetupMixin, OpenSSHClientMixin,
+                                 unittest.TestCase):
+    """
+    Tests L{SSHTransportBase}'s key exchange algorithm compatibility with
+    OpenSSH.
+    """
+
+    def assertExecuteWithKexAlgorithm(self, keyExchangeAlgo):
+        """
+        Call execute() method of L{OpenSSHClientMixin} with an ssh option that
+        forces the exclusive use of the key exchange algorithm specified by
+        keyExchangeAlgo
+
+        @type keyExchangeAlgo: C{str}
+        @param keyExchangeAlgo: The key exchange algorithm to use
+
+        @return: L{defer.Deferred}
+        """
+        d = self.execute('echo hello', ConchTestOpenSSHProcess(),
+                         '-oKexAlgorithms=' + keyExchangeAlgo)
+        return d.addCallback(self.assertEqual, 'hello\n')
+
+
+    def test_DH_GROUP1(self):
+        """
+        The diffie-hellman-group1-sha1 key exchange algorithm is compatible
+        with OpenSSH.
+        """
+        return self.assertExecuteWithKexAlgorithm(
+            'diffie-hellman-group1-sha1')
+
+
+    def test_DH_GROUP14(self):
+        """
+        The diffie-hellman-group14-sha1 key exchange algorithm is compatible
+        with OpenSSH.
+        """
+        return self.assertExecuteWithKexAlgorithm(
+            'diffie-hellman-group14-sha1')
+
+
+    def test_DH_GROUP_EXCHANGE_SHA1(self):
+        """
+        The diffie-hellman-group-exchange-sha1 key exchange algorithm is
+        compatible with OpenSSH.
+        """
+        return self.assertExecuteWithKexAlgorithm(
+            'diffie-hellman-group-exchange-sha1')
+
+
+
 class OpenSSHClientForwardingTestCase(ForwardingMixin, OpenSSHClientMixin,
                                       unittest.TestCase):
     """
diff --git twisted/conch/test/test_ssh.py twisted/conch/test/test_ssh.py
index cb6c295..c599afe 100644
--- twisted/conch/test/test_ssh.py
+++ twisted/conch/test/test_ssh.py
@@ -17,7 +17,7 @@ try:
 except ImportError:
     pyasn1 = None
 
-from twisted.conch.ssh import common, session, forwarding
+from twisted.conch.ssh import common, session, forwarding, _kex
 from twisted.conch import avatar, error
 from twisted.conch.test.keydata import publicRSA_openssh, privateRSA_openssh
 from twisted.conch.test.keydata import publicDSA_openssh, privateDSA_openssh
@@ -365,8 +365,16 @@ if Crypto is not None and pyasn1 is not None:
             }
 
         def getPrimes(self):
+            """
+            Return the Diffie-Hellman primes that can be used for the
+            diffie-hellman-group-exchange-sha1 key exchange. In these tests,
+            we hardwire the prime values to those defined by the
+            diffie-hellman-group1-sha1 key exchange algorithm, to avoid
+            requiring a moduli file when running tests. See
+            OpenSSHFactory.getPrimes.
+            """
             return {
-                2048:[(transport.DH_GENERATOR, transport.DH_PRIME)]
+                2048:[_kex.getDHPrime('diffie-hellman-group1-sha1')]
             }
 
         def getService(self, trans, name):
diff --git twisted/conch/test/test_transport.py twisted/conch/test/test_transport.py
index ba05794..dc03fc0 100644
--- twisted/conch/test/test_transport.py
+++ twisted/conch/test/test_transport.py
@@ -42,7 +42,7 @@ from twisted.internet import defer
 from twisted.protocols import loopback
 from twisted.python import randbytes
 from twisted.python.reflect import getClass
-from twisted.conch.ssh import address, service, common
+from twisted.conch.ssh import address, service, common, _kex
 from twisted.test import proto_helpers
 
 from twisted.conch.error import ConchError
@@ -274,11 +274,14 @@ class MockFactory(factory.SSHFactory):
     def getPrimes(self):
         """
         Return the Diffie-Hellman primes that can be used for the
-        diffie-hellman-group-exchange-sha1 key exchange.
+        diffie-hellman-group-exchange-sha1 key exchange. In these tests, we
+        hardwire the prime values to those defined by the
+        diffie-hellman-group1-sha1 key exchange algorithm, to avoid requiring a
+        moduli file when running tests. See OpenSSHFactory.getPrimes.
         """
         return {
-            1024: ((2, transport.DH_PRIME),),
-            2048: ((3, transport.DH_PRIME),),
+            1024: ((2, _kex.getDHPrime('diffie-hellman-group1-sha1')[1]),),
+            2048: ((3, _kex.getDHPrime('diffie-hellman-group1-sha1')[1]),),
             4096: ((5, 7),)}
 
 
@@ -611,11 +614,11 @@ class BaseSSHTransportTestCase(TransportTestCase):
         packet = self.proto.getPacket()
         self.assertEqual(packet[0], chr(transport.MSG_KEXINIT))
         self.assertEqual(packet[1:17], '\x99' * 16)
-        (kex, pubkeys, ciphers1, ciphers2, macs1, macs2, compressions1,
+        (kexes, pubkeys, ciphers1, ciphers2, macs1, macs2, compressions1,
          compressions2, languages1, languages2,
          buf) = common.getNS(packet[17:], 10)
 
-        self.assertEqual(kex, ','.join(self.proto.supportedKeyExchanges))
+        self.assertEqual(kexes, ','.join(self.proto.supportedKeyExchanges))
         self.assertEqual(pubkeys, ','.join(self.proto.supportedPublicKeys))
         self.assertEqual(ciphers1, ','.join(self.proto.supportedCiphers))
         self.assertEqual(ciphers2, ','.join(self.proto.supportedCiphers))
@@ -1297,22 +1300,25 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.assertFalse(self.proto.ignoreNextPacket)
         self.assertEqual(self.packets, [])
 
-
-    def test_KEXDH_INIT(self):
+    def assertKexDHInitResponse(self, kexAlgorithm):
         """
         Test that the KEXDH_INIT packet causes the server to send a
         KEXDH_REPLY with the server's public key and a signature.
+
+        @type kexAlgorithm: C{str}
+        @param kexAlgorithm: The key exchange algorithm to use
         """
-        self.proto.supportedKeyExchanges = ['diffie-hellman-group1-sha1']
+        self.proto.supportedKeyExchanges = [kexAlgorithm]
         self.proto.supportedPublicKeys = ['ssh-rsa']
         self.proto.dataReceived(self.transport.value())
-        e = pow(transport.DH_GENERATOR, 5000,
-                transport.DH_PRIME)
+
+        g, p = _kex.getDHPrime(kexAlgorithm)
+        e = pow(g, 5000, p)
 
         self.proto.ssh_KEX_DH_GEX_REQUEST_OLD(common.MP(e))
         y = common.getMP('\x00\x00\x00\x40' + '\x99' * 64)[0]
-        f = common._MPpow(transport.DH_GENERATOR, y, transport.DH_PRIME)
-        sharedSecret = common._MPpow(e, y, transport.DH_PRIME)
+        f = common._MPpow(self.proto.g, y, self.proto.p)
+        sharedSecret = common._MPpow(e, y, self.proto.p)
 
         h = sha1()
         h.update(common.NS(self.proto.ourVersionString) * 2)
@@ -1334,6 +1340,22 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
              (transport.MSG_NEWKEYS, '')])
 
 
+    def test_KEXDH_INIT_GROUP1(self):
+        """
+        KEXDH_INIT messages are processed when the
+        diffie-hellman-group1-sha1 key exchange algorithm is requested.
+        """
+        self.assertKexDHInitResponse('diffie-hellman-group1-sha1')
+
+
+    def test_KEXDH_INIT_GROUP14(self):
+        """
+        KEXDH_INIT messages are processed when the
+        diffie-hellman-group14-sha1 key exchange algorithm is requested.
+        """
+        self.assertKexDHInitResponse('diffie-hellman-group14-sha1')
+
+
     def test_KEX_DH_GEX_REQUEST_OLD(self):
         """
         Test that the KEX_DH_GEX_REQUEST_OLD message causes the server
@@ -1345,19 +1367,19 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.proto.supportedPublicKeys = ['ssh-rsa']
         self.proto.dataReceived(self.transport.value())
         self.proto.ssh_KEX_DH_GEX_REQUEST_OLD('\x00\x00\x04\x00')
+        dh_generator, dh_prime = self.proto.factory.getPrimes().get(1024)[0]
         self.assertEqual(
             self.packets,
             [(transport.MSG_KEX_DH_GEX_GROUP,
-              common.MP(transport.DH_PRIME) + '\x00\x00\x00\x01\x02')])
+              common.MP(dh_prime) + '\x00\x00\x00\x01\x02')])
         self.assertEqual(self.proto.g, 2)
-        self.assertEqual(self.proto.p, transport.DH_PRIME)
+        self.assertEqual(self.proto.p, dh_prime)
 
 
     def test_KEX_DH_GEX_REQUEST_OLD_badKexAlg(self):
         """
         Test that if the server receives a KEX_DH_GEX_REQUEST_OLD message
-        and the key exchange algorithm is not 'diffie-hellman-group1-sha1' or
-        'diffie-hellman-group-exchange-sha1', we raise a ConchError.
+        and the key exchange algorithm is not set, we raise a ConchError.
         """
         self.proto.kexAlg = None
         self.assertRaises(ConchError, self.proto.ssh_KEX_DH_GEX_REQUEST_OLD,
@@ -1376,12 +1398,13 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.proto.dataReceived(self.transport.value())
         self.proto.ssh_KEX_DH_GEX_REQUEST('\x00\x00\x04\x00\x00\x00\x08\x00' +
                                           '\x00\x00\x0c\x00')
+        dh_generator, dh_prime = self.proto.factory.getPrimes().get(1024)[0]
         self.assertEqual(
             self.packets,
             [(transport.MSG_KEX_DH_GEX_GROUP,
-              common.MP(transport.DH_PRIME) + '\x00\x00\x00\x01\x03')])
+              common.MP(dh_prime) + '\x00\x00\x00\x01\x03')])
         self.assertEqual(self.proto.g, 3)
-        self.assertEqual(self.proto.p, transport.DH_PRIME)
+        self.assertEqual(self.proto.p, dh_prime)
 
 
     def test_KEX_DH_GEX_INIT_after_REQUEST(self):
@@ -1595,7 +1618,7 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
     def test_KEXINIT_groupexchange(self):
         """
         Test that a KEXINIT packet with a group-exchange key exchange results
-        in a KEX_DH_GEX_REQUEST_OLD message..
+        in a KEX_DH_GEX_REQUEST_OLD message.
         """
         self.proto.supportedKeyExchanges = [
             'diffie-hellman-group-exchange-sha1']
@@ -1604,21 +1627,48 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
                                           '\x00\x00\x08\x00')])
 
 
-    def test_KEXINIT_group1(self):
+    def assertKexInitResponseForDH(self, kexAlgorithm):
         """
-        Like test_KEXINIT_groupexchange, but for the group-1 key exchange.
+        Test that a KEXINIT packet with a group1 or group14 key exchange
+        results in a correct KEXDH_INIT response.
+
+        @type kexAlgorithm: C{str}
+        @param kexAlgorithm: The key exchange algorithm to use
         """
-        self.proto.supportedKeyExchanges = ['diffie-hellman-group1-sha1']
+        self.proto.supportedKeyExchanges = [kexAlgorithm]
+
+        # Imitate reception of server key exchange request contained
+        # in data returned by self.transport.value()
         self.proto.dataReceived(self.transport.value())
+
         self.assertEqual(common.MP(self.proto.x)[5:], '\x99' * 64)
+
+        # Data sent to server should be a transport.MSG_KEXDH_INIT
+        # message containing our public key
         self.assertEqual(self.packets,
                           [(transport.MSG_KEXDH_INIT, self.proto.e)])
 
 
+    def test_KEXINIT_group14(self):
+        """
+        KEXINIT messages requesting diffie-hellman-group14-sha1 result in
+        KEXDH_INIT responses.
+        """
+        self.assertKexInitResponseForDH('diffie-hellman-group14-sha1')
+
+
+    def test_KEXINIT_group1(self):
+        """
+        KEXINIT messages requesting diffie-hellman-group1-sha1 result in
+        KEXDH_INIT responses.
+        """
+        self.assertKexInitResponseForDH('diffie-hellman-group1-sha1')
+
+
     def test_KEXINIT_badKexAlg(self):
         """
         Test that the client raises a ConchError if it receives a
-        KEXINIT message bug doesn't have a key exchange algorithm that we
+        KEXINIT message but doesn't have a key exchange algorithm that we
         understand.
         """
         self.proto.supportedKeyExchanges = ['diffie-hellman-group2-sha1']
@@ -1632,8 +1682,8 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         """
         self.test_KEXINIT_group1()
 
-        sharedSecret = common._MPpow(transport.DH_GENERATOR,
-                                     self.proto.x, transport.DH_PRIME)
+        sharedSecret = common._MPpow(self.proto.g, self.proto.x,
+                                        self.proto.p)
         h = sha1()
         h.update(common.NS(self.proto.ourVersionString) * 2)
         h.update(common.NS(self.proto.ourKexInitPayload) * 2)
@@ -1680,7 +1730,6 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         Test that the KEX_DH_GEX_REPLY message results in a verified
         server.
         """
-
         self.test_KEX_DH_GEX_GROUP()
         sharedSecret = common._MPpow(3, self.proto.x, self.proto.p)
         h = sha1()
@@ -2113,9 +2162,9 @@ class TransportLoopbackTestCase(unittest.TestCase):
         Like test_ciphers, but for the various key exchanges.
         """
         deferreds = []
-        for kex in transport.SSHTransportBase.supportedKeyExchanges:
+        for kexAlgo in transport.SSHTransportBase.supportedKeyExchanges:
             def setKeyExchange(proto):
-                proto.supportedKeyExchanges = [kex]
+                proto.supportedKeyExchanges = [kexAlgo]
                 return proto
             deferreds.append(self._runClientServer(setKeyExchange))
         return defer.DeferredList(deferreds, fireOnOneErrback=True)
diff --git twisted/conch/topfiles/7717.feature twisted/conch/topfiles/7717.feature
new file mode 100644
index 0000000..b1fd6ef
--- /dev/null
+++ twisted/conch/topfiles/7717.feature
@@ -0,0 +1 @@
+twisted.conch.ssh now supports the diffie-hellman-group14-sha1 key exchange algorithm.
