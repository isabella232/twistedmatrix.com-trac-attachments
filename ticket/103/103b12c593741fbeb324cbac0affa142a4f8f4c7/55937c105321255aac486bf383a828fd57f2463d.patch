diff --git twisted/conch/ssh/_kex.py twisted/conch/ssh/_kex.py
index 2cb68d5..2b532e4 100644
--- twisted/conch/ssh/_kex.py
+++ twisted/conch/ssh/_kex.py
@@ -42,8 +42,8 @@ class _IFixedGroupKexAlgorithm(_IKexAlgorithm):
 
 class _IGroupExchangeKexAlgorithm(_IKexAlgorithm):
     """
-    An L{_IGroupExchangeAlgorithm} describes a key exchange algorithm that
-    uses group exchange between the client and server.
+    An L{_IGroupExchangeKexAlgorithm} describes a key exchange algorithm
+    that uses group exchange between the client and server.
 
     A prime / generator group should be chosen at run time based on the
     requested size.  See RFC 4419.
@@ -111,52 +111,53 @@ _kexAlgorithms = {
 
 
 
-def _getKex(kexAlgo):
+def getKex(kexAlgorithm):
     """
     Get a description of a named key exchange algorithm.
 
-    @type kexAlgo: C{str}
-    @param kexAlgo: The key exchange algorithm name.
+    @type kexAlgorithm: C{str}
+    @param kexAlgorithm: The key exchange algorithm name.
 
     @rtype: L{_IKexAlgorithm}
-    @return: A description of the key exchange algorithm named by C{kexAlgo}.
+    @return: A description of the key exchange algorithm named by
+        C{kexAlgorithm}.
 
     @raises ConchError: if the key exchange algorithm is not found.
     """
-    if kexAlgo not in _kexAlgorithms:
+    if kexAlgorithm not in _kexAlgorithms:
         raise error.ConchError(
-            "Unsupported key exchange algorithm: %s" % (kexAlgo,))
-    return _kexAlgorithms[kexAlgo]
+            "Unsupported key exchange algorithm: %s" % (kexAlgorithm,))
+    return _kexAlgorithms[kexAlgorithm]
 
 
 
-def isFixedGroup(kexAlgo):
+def isFixedGroup(kexAlgorithm):
     """
-    Returns C{True} if C{kexAlgo} has a fixed prime / generator group.  Used
-    to determine the correct key exchange logic to perform.
+    Returns C{True} if C{kexAlgorithm} has a fixed prime / generator group.
+    Used to determine the correct key exchange logic to perform.
 
-    @type kexAlgo: C{str}
-    @param kexAlgo: The key exchange algorithm name.
+    @type kexAlgorithm: C{str}
+    @param kexAlgorithm: The key exchange algorithm name.
 
     @rtype: C{bool}
-    @return: C{True} if C{kexAlgo} has a fixed prime / generator group,
+    @return: C{True} if C{kexAlgorithm} has a fixed prime / generator group,
         otherwise C{False}.
     """
-    return _IFixedGroupKexAlgorithm.providedBy(_getKex(kexAlgo))
+    return _IFixedGroupKexAlgorithm.providedBy(getKex(kexAlgorithm))
 
 
 
-def getDHPrime(kexAlgo):
+def getDHPrime(kexAlgorithm):
     """
     Get the prime and generator to use in key exchange.
 
-    @type kexAlgo: C{str}
-    @param kexAlgo: The key exchange algorithm name.
+    @type kexAlgorithm: C{str}
+    @param kexAlgorithm: The key exchange algorithm name.
 
     @rtype: C{tuple}
     @return: A C{tuple} containing C{long} generator and C{long} prime.
     """
-    kex = _getKex(kexAlgo)
+    kex = getKex(kexAlgorithm)
     return kex.generator, kex.prime
 
 
@@ -171,4 +172,4 @@ def getSupportedKeyExchanges():
     """
     return sorted(
         _kexAlgorithms,
-        key = lambda kexAlgo: _kexAlgorithms[kexAlgo].preference)
+        key = lambda kexAlgorithm: _kexAlgorithms[kexAlgorithm].preference)
diff --git twisted/conch/ssh/transport.py twisted/conch/ssh/transport.py
index ecab130..e50bcf4 100644
--- twisted/conch/ssh/transport.py
+++ twisted/conch/ssh/transport.py
@@ -506,6 +506,26 @@ class SSHTransportBase(protocol.Protocol):
         return address.SSHTransportAddress(self.transport.getHost())
 
 
+    @property
+    def kexAlg(self):
+        """
+        The key exchange algorithm name agreed between client and server.
+        """
+        return self._kexAlg
+
+
+    @kexAlg.setter
+    def kexAlg(self, value):
+        """
+        Set the key exchange algorithm name.
+
+        @raises ConchError: if the key exchange algorithm is not found.
+        """
+        # Check for supportedness.
+        _kex.getKex(value)
+        self._kexAlg = value
+
+
     # Client-initiated rekeying looks like this:
     #
     #  C> MSG_KEXINIT
diff --git twisted/conch/test/test_conch.py twisted/conch/test/test_conch.py
index 146fe9e..f08a096 100644
--- twisted/conch/test/test_conch.py
+++ twisted/conch/test/test_conch.py
@@ -519,6 +519,7 @@ class OpenSSHClientMixin:
         return process.deferred
 
 
+
 class OpenSSHKeyExchangeTestCase(ConchServerSetupMixin, OpenSSHClientMixin,
                                  unittest.TestCase):
     """
diff --git twisted/conch/test/test_transport.py twisted/conch/test/test_transport.py
index 6b5fdf2..9941b4a 100644
--- twisted/conch/test/test_transport.py
+++ twisted/conch/test/test_transport.py
@@ -614,11 +614,12 @@ class BaseSSHTransportTests(TransportTestCase):
         packet = self.proto.getPacket()
         self.assertEqual(packet[0], chr(transport.MSG_KEXINIT))
         self.assertEqual(packet[1:17], '\x99' * 16)
-        (kexes, pubkeys, ciphers1, ciphers2, macs1, macs2, compressions1,
-         compressions2, languages1, languages2,
+        (keyExchanges, pubkeys, ciphers1, ciphers2, macs1, macs2,
+         compressions1, compressions2, languages1, languages2,
          buf) = common.getNS(packet[17:], 10)
 
-        self.assertEqual(kexes, ','.join(self.proto.supportedKeyExchanges))
+        self.assertEqual(
+            keyExchanges, ','.join(self.proto.supportedKeyExchanges))
         self.assertEqual(pubkeys, ','.join(self.proto.supportedPublicKeys))
         self.assertEqual(ciphers1, ','.join(self.proto.supportedCiphers))
         self.assertEqual(ciphers2, ','.join(self.proto.supportedCiphers))
@@ -1367,13 +1368,13 @@ class ServerSSHTransportTests(ServerAndClientSSHTransportBaseCase,
         self.proto.supportedPublicKeys = ['ssh-rsa']
         self.proto.dataReceived(self.transport.value())
         self.proto.ssh_KEX_DH_GEX_REQUEST_OLD('\x00\x00\x04\x00')
-        dh_generator, dh_prime = self.proto.factory.getPrimes().get(1024)[0]
+        dhGenerator, dhPrime = self.proto.factory.getPrimes().get(1024)[0]
         self.assertEqual(
             self.packets,
             [(transport.MSG_KEX_DH_GEX_GROUP,
-              common.MP(dh_prime) + '\x00\x00\x00\x01\x02')])
+              common.MP(dhPrime) + '\x00\x00\x00\x01\x02')])
         self.assertEqual(self.proto.g, 2)
-        self.assertEqual(self.proto.p, dh_prime)
+        self.assertEqual(self.proto.p, dhPrime)
 
 
     def test_KEX_DH_GEX_REQUEST_OLD_badKexAlg(self):
@@ -1398,13 +1399,13 @@ class ServerSSHTransportTests(ServerAndClientSSHTransportBaseCase,
         self.proto.dataReceived(self.transport.value())
         self.proto.ssh_KEX_DH_GEX_REQUEST('\x00\x00\x04\x00\x00\x00\x08\x00' +
                                           '\x00\x00\x0c\x00')
-        dh_generator, dh_prime = self.proto.factory.getPrimes().get(1024)[0]
+        dhGenerator, dhPrime = self.proto.factory.getPrimes().get(1024)[0]
         self.assertEqual(
             self.packets,
             [(transport.MSG_KEX_DH_GEX_GROUP,
-              common.MP(dh_prime) + '\x00\x00\x00\x01\x03')])
+              common.MP(dhPrime) + '\x00\x00\x00\x01\x03')])
         self.assertEqual(self.proto.g, 3)
-        self.assertEqual(self.proto.p, dh_prime)
+        self.assertEqual(self.proto.p, dhPrime)
 
 
     def test_KEX_DH_GEX_INIT_after_REQUEST(self):
@@ -2162,9 +2163,9 @@ class TransportLoopbackTests(unittest.TestCase):
         Like test_ciphers, but for the various key exchanges.
         """
         deferreds = []
-        for kexAlgo in transport.SSHTransportBase.supportedKeyExchanges:
+        for kexAlgorithm in transport.SSHTransportBase.supportedKeyExchanges:
             def setKeyExchange(proto):
-                proto.supportedKeyExchanges = [kexAlgo]
+                proto.supportedKeyExchanges = [kexAlgorithm]
                 return proto
             deferreds.append(self._runClientServer(setKeyExchange))
         return defer.DeferredList(deferreds, fireOnOneErrback=True)
