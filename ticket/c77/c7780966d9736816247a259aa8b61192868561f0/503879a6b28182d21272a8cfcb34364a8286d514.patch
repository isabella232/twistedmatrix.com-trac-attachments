diff --git a/twisted/test/test_adbapi.py b/twisted/test/test_adbapi.py
index 92ff601..5fa5136 100644
--- a/twisted/test/test_adbapi.py
+++ b/twisted/test/test_adbapi.py
@@ -52,9 +52,9 @@ class ADBAPITestBase:
 
     def checkOpenfunCalled(self, conn=None):
         if not conn:
-            self.failUnless(self.openfun_called)
+            self.assertTrue(self.openfun_called)
         else:
-            self.failUnless(self.openfun_called.has_key(conn))
+            self.assertTrue(self.openfun_called.has_key(conn))
 
     def testPool(self):
         d = self.dbpool.runOperation(simple_table_schema)
@@ -106,7 +106,7 @@ class ADBAPITestBase:
         sql = "select count(1) from simple"
         d = self.dbpool.runQuery(sql)
         def _check(row):
-            self.failUnless(int(row[0][0]) == 0, "Interaction not rolled back")
+            self.assertTrue(int(row[0][0]) == 0, "Interaction not rolled back")
             self.checkOpenfunCalled()
         d.addCallback(_check)
         return d
@@ -128,11 +128,11 @@ class ADBAPITestBase:
         d.addCallback(_select)
 
         def _check(rows):
-            self.failUnless(len(rows) == self.num_iterations,
+            self.assertTrue(len(rows) == self.num_iterations,
                             "Wrong number of rows")
             for i in range(self.num_iterations):
-                self.failUnless(len(rows[i]) == 1, "Wrong size row")
-                self.failUnless(rows[i][0] == i, "Values not returned.")
+                self.assertTrue(len(rows[i]) == 1, "Wrong size row")
+                self.assertTrue(rows[i][0] == i, "Values not returned.")
         d.addCallback(_check)
 
         return d
@@ -163,7 +163,7 @@ class ADBAPITestBase:
         dlist = defer.DeferredList(ds, fireOnOneErrback=True)
         def _check(result):
             for i in range(self.num_iterations):
-                self.failUnless(result[i][1][0][0] == i, "Value not returned")
+                self.assertTrue(result[i][1][0][0] == i, "Value not returned")
         dlist.addCallback(_check)
         return dlist
 
@@ -181,7 +181,7 @@ class ADBAPITestBase:
         sql = "select count(1) from simple"
         d = self.dbpool.runQuery(sql)
         def _check(row):
-            self.failUnless(int(row[0][0]) == 0,
+            self.assertTrue(int(row[0][0]) == 0,
                             "Didn't successfully delete table contents")
             self.checkConnect()
         d.addCallback(_check)
@@ -208,10 +208,10 @@ class ADBAPITestBase:
         transaction.execute("select x from simple order by x")
         for i in range(self.num_iterations):
             row = transaction.fetchone()
-            self.failUnless(len(row) == 1, "Wrong size row")
-            self.failUnless(row[0] == i, "Value not returned.")
+            self.assertTrue(len(row) == 1, "Wrong size row")
+            self.assertTrue(row[0] == i, "Value not returned.")
         # should test this, but gadfly throws an exception instead
-        #self.failUnless(transaction.fetchone() is None, "Too many rows")
+        #self.assertTrue(transaction.fetchone() is None, "Too many rows")
         return "done"
 
     def bad_interaction(self, transaction):
@@ -226,10 +226,10 @@ class ADBAPITestBase:
             curs.execute("select x from simple order by x")
             for i in range(self.num_iterations):
                 row = curs.fetchone()
-                self.failUnless(len(row) == 1, "Wrong size row")
-                self.failUnless(row[0] == i, "Value not returned.")
+                self.assertTrue(len(row) == 1, "Wrong size row")
+                self.assertTrue(row[0] == i, "Value not returned.")
             # should test this, but gadfly throws an exception instead
-            #self.failUnless(transaction.fetchone() is None, "Too many rows")
+            #self.assertTrue(transaction.fetchone() is None, "Too many rows")
         finally:
             curs.close()
         return "done"
@@ -286,7 +286,7 @@ class ReconnectTestBase:
         sql = "select count(1) from simple"
         d = self.dbpool.runQuery(sql)
         def _check(row):
-            self.failUnless(int(row[0][0]) == 0, "Table not empty")
+            self.assertTrue(int(row[0][0]) == 0, "Table not empty")
         d.addCallback(_check)
         return d
 
@@ -305,7 +305,7 @@ class ReconnectTestBase:
         sql = "select count(1) from simple"
         d = self.dbpool.runQuery(sql)
         def _check(row):
-            self.failUnless(int(row[0][0]) == 0, "Table not empty")
+            self.assertTrue(int(row[0][0]) == 0, "Table not empty")
         d.addCallback(_check)
         return d
 
@@ -314,7 +314,7 @@ class ReconnectTestBase:
         sql = "select * from NOTABLE" # bad sql
         d = defer.maybeDeferred(self.dbpool.runQuery, sql)
         d.addCallbacks(lambda res: self.fail('no exception'),
-                       lambda f: self.failIf(f.check(ConnectionLost)))
+                       lambda f: self.assertFalse(f.check(ConnectionLost)))
         return d
 
 
diff --git a/twisted/test/test_amp.py b/twisted/test/test_amp.py
index 325af40..f511fc4 100644
--- a/twisted/test/test_amp.py
+++ b/twisted/test/test_amp.py
@@ -1207,7 +1207,7 @@ class AMPTest(unittest.TestCase):
                                           (amp.IBoxSender, amp.AMP),
                                           (amp.IBoxReceiver, amp.AMP),
                                           (amp.IResponderLocator, amp.AMP)]:
-            self.failUnless(interface.implementedBy(implementation),
+            self.assertTrue(interface.implementedBy(implementation),
                             "%s does not implements(%s)" % (implementation, interface))
 
 
@@ -1319,7 +1319,7 @@ class AMPTest(unittest.TestCase):
         SimpleSymmetricCommandProtocol().dispatchCommand(
             amp.AmpBox(_command=BrokenReturn.commandName)).addErrback(L.append)
         L[0].trap(amp.BadLocalReturn)
-        self.failUnlessIn('None', repr(L[0].value))
+        self.assertIn('None', repr(L[0].value))
 
 
     def test_unknownArgument(self):
@@ -1348,7 +1348,7 @@ class AMPTest(unittest.TestCase):
         self.assertEqual(type(repr(amp._SwitchBox('a'))), str)
         self.assertEqual(type(repr(amp.QuitBox())), str)
         self.assertEqual(type(repr(amp.AmpBox())), str)
-        self.failUnless("AmpBox" in repr(amp.AmpBox()))
+        self.assertTrue("AmpBox" in repr(amp.AmpBox()))
 
 
     def test_innerProtocolInRepr(self):
@@ -1415,13 +1415,13 @@ class AMPTest(unittest.TestCase):
         x = "H" * (0xffff+1)
         tl = self.assertRaises(amp.TooLong, c.sendHello, x)
         p.flush()
-        self.failIf(tl.isKey)
-        self.failUnless(tl.isLocal)
+        self.assertFalse(tl.isKey)
+        self.assertTrue(tl.isLocal)
         self.assertEqual(tl.keyName, 'hello')
-        self.failUnlessIdentical(tl.value, x)
-        self.failUnless(str(len(x)) in repr(tl))
-        self.failUnless("value" in repr(tl))
-        self.failUnless('hello' in repr(tl))
+        self.assertIs(tl.value, x)
+        self.assertTrue(str(len(x)) in repr(tl))
+        self.assertTrue("value" in repr(tl))
+        self.assertTrue('hello' in repr(tl))
 
 
     def test_helloWorldCommand(self):
@@ -1496,7 +1496,7 @@ class AMPTest(unittest.TestCase):
         cl = L.pop()
         cl.trap(error.ConnectionDone)
         # The exception should have been logged.
-        self.failUnless(self.flushLoggedErrors(ThingIDontUnderstandError))
+        self.assertTrue(self.flushLoggedErrors(ThingIDontUnderstandError))
 
 
 
@@ -1530,7 +1530,7 @@ class AMPTest(unittest.TestCase):
         HELLO = 'world'
         c.callRemote(NoAnswerHello, hello=HELLO)
         p.flush()
-        self.failUnless(s.greeted)
+        self.assertTrue(s.greeted)
 
 
     def test_requiresNoAnswerFail(self):
@@ -1545,12 +1545,12 @@ class AMPTest(unittest.TestCase):
         c.callRemote(NoAnswerHello, hello=HELLO)
         p.flush()
         # This should be logged locally.
-        self.failUnless(self.flushLoggedErrors(amp.RemoteAmpError))
+        self.assertTrue(self.flushLoggedErrors(amp.RemoteAmpError))
         HELLO = 'world'
         c.callRemote(Hello, hello=HELLO).addErrback(L.append)
         p.flush()
         L.pop().trap(error.ConnectionDone)
-        self.failIf(s.greeted)
+        self.assertFalse(s.greeted)
 
 
     def test_noAnswerResponderBadAnswer(self):
@@ -1657,7 +1657,7 @@ class AMPTest(unittest.TestCase):
             self.testSucceeded = True
         c.switchToTestProtocol().addCallback(switched)
         p.flush()
-        self.failUnless(self.testSucceeded)
+        self.assertTrue(self.testSucceeded)
 
 
     def test_protocolSwitch(self, switcher=SimpleSymmetricCommandProtocol,
@@ -1685,8 +1685,8 @@ class AMPTest(unittest.TestCase):
 
         def cbConnsLost(((serverSuccess, serverData),
                          (clientSuccess, clientData))):
-            self.failUnless(serverSuccess)
-            self.failUnless(clientSuccess)
+            self.assertTrue(serverSuccess)
+            self.assertTrue(clientSuccess)
             self.assertEqual(''.join(serverData), SWITCH_CLIENT_DATA)
             self.assertEqual(''.join(clientData), SWITCH_SERVER_DATA)
             self.testSucceeded = True
@@ -1712,7 +1712,7 @@ class AMPTest(unittest.TestCase):
             p.flush()
         c.transport.loseConnection() # close it
         p.flush()
-        self.failUnless(self.testSucceeded)
+        self.assertTrue(self.testSucceeded)
 
 
     def test_protocolSwitchDeferred(self):
@@ -1740,7 +1740,7 @@ class AMPTest(unittest.TestCase):
         c.switchToTestProtocol(fail=True).addErrback(L.append)
         p.flush()
         L.pop().trap(UnknownProtocol)
-        self.failIf(self.testSucceeded)
+        self.assertFalse(self.testSucceeded)
         # It's a known error, so let's send a "hello" on the same connection;
         # it should work.
         c.sendHello('world').addCallback(L.append)
@@ -2157,7 +2157,7 @@ class CommandInheritanceTests(unittest.TestCase):
         c, s, p = connectedServerAndClient(ServerClass=proto,
                                            ClientClass=proto)
         d = c.callRemote(cmd, **kw)
-        d2 = self.failUnlessFailure(d, err)
+        d2 = self.assertFailure(d, err)
         p.flush()
         return d2
 
diff --git a/twisted/test/test_application.py b/twisted/test/test_application.py
index a5f9c28..ccc674b 100644
--- a/twisted/test/test_application.py
+++ b/twisted/test/test_application.py
@@ -58,7 +58,7 @@ class TestService(unittest.TestCase):
         p = service.MultiService()
         s.setName("hello")
         s.setServiceParent(p)
-        self.failUnlessRaises(RuntimeError, s.setName, "lala")
+        self.assertRaises(RuntimeError, s.setName, "lala")
 
     def testDuplicateNamedChild(self):
         s = service.Service()
@@ -67,7 +67,7 @@ class TestService(unittest.TestCase):
         s.setServiceParent(p)
         s = service.Service()
         s.setName("hello")
-        self.failUnlessRaises(RuntimeError, s.setServiceParent, p)
+        self.assertRaises(RuntimeError, s.setServiceParent, p)
 
     def testDisowning(self):
         s = service.Service()
@@ -81,29 +81,29 @@ class TestService(unittest.TestCase):
 
     def testRunning(self):
         s = service.Service()
-        self.assert_(not s.running)
+        self.assertTrue(not s.running)
         s.startService()
-        self.assert_(s.running)
+        self.assertTrue(s.running)
         s.stopService()
-        self.assert_(not s.running)
+        self.assertTrue(not s.running)
 
     def testRunningChildren1(self):
         s = service.Service()
         p = service.MultiService()
         s.setServiceParent(p)
-        self.assert_(not s.running)
-        self.assert_(not p.running)
+        self.assertTrue(not s.running)
+        self.assertTrue(not p.running)
         p.startService()
-        self.assert_(s.running)
-        self.assert_(p.running)
+        self.assertTrue(s.running)
+        self.assertTrue(p.running)
         p.stopService()
-        self.assert_(not s.running)
-        self.assert_(not p.running)
+        self.assertTrue(not s.running)
+        self.assertTrue(not p.running)
 
     def testRunningChildren2(self):
         s = service.Service()
         def checkRunning():
-            self.assert_(s.running)
+            self.assertTrue(s.running)
         t = service.Service()
         t.stopService = checkRunning
         t.startService = checkRunning
@@ -117,11 +117,11 @@ class TestService(unittest.TestCase):
         p = service.MultiService()
         p.startService()
         s = service.Service()
-        self.assert_(not s.running)
+        self.assertTrue(not s.running)
         s.setServiceParent(p)
-        self.assert_(s.running)
+        self.assertTrue(s.running)
         s.disownServiceParent()
-        self.assert_(not s.running)
+        self.assertTrue(not s.running)
 
     def testPrivileged(self):
         s = service.Service()
@@ -133,14 +133,14 @@ class TestService(unittest.TestCase):
         s.setServiceParent(p)
         s1.setServiceParent(p)
         p.privilegedStartService()
-        self.assert_(s.privilegedStarted)
+        self.assertTrue(s.privilegedStarted)
 
     def testCopying(self):
         s = service.Service()
         s.startService()
         s1 = copy.copy(s)
-        self.assert_(not s1.running)
-        self.assert_(s.running)
+        self.assertTrue(not s1.running)
+        self.assertTrue(s.running)
 
 
 if hasattr(os, "getuid"):
@@ -178,14 +178,14 @@ class TestProcess(unittest.TestCase):
 class TestInterfaces(unittest.TestCase):
 
     def testService(self):
-        self.assert_(service.IService.providedBy(service.Service()))
+        self.assertTrue(service.IService.providedBy(service.Service()))
 
     def testMultiService(self):
-        self.assert_(service.IService.providedBy(service.MultiService()))
-        self.assert_(service.IServiceCollection.providedBy(service.MultiService()))
+        self.assertTrue(service.IService.providedBy(service.MultiService()))
+        self.assertTrue(service.IServiceCollection.providedBy(service.MultiService()))
 
     def testProcess(self):
-        self.assert_(service.IProcess.providedBy(service.Process()))
+        self.assertTrue(service.IProcess.providedBy(service.Process()))
 
 
 class TestApplication(unittest.TestCase):
@@ -208,7 +208,7 @@ class TestApplication(unittest.TestCase):
 
     def testServiceComponent(self):
         a = service.Application("hello")
-        self.assert_(service.IService(a) is service.IServiceCollection(a))
+        self.assertTrue(service.IService(a) is service.IServiceCollection(a))
         self.assertEqual(service.IService(a).name, "hello")
         self.assertEqual(service.IService(a).parent, None)
 
@@ -217,7 +217,7 @@ class TestApplication(unittest.TestCase):
         p = sob.IPersistable(a)
         self.assertEqual(p.style, 'pickle')
         self.assertEqual(p.name, 'hello')
-        self.assert_(p.original is a)
+        self.assertTrue(p.original is a)
 
 class TestLoading(unittest.TestCase):
 
@@ -284,7 +284,7 @@ class TestAppSupport(unittest.TestCase):
     def test_startApplication(self):
         appl = service.Application("lala")
         app.startApplication(appl, 0)
-        self.assert_(service.IService(appl).running)
+        self.assertTrue(service.IService(appl).running)
 
 
 class Foo(basic.LineReceiver):
@@ -431,23 +431,23 @@ class TestInternet2(unittest.TestCase):
         factory.protocol = wire.Echo
         t = internet.UNIXServer('echo.skt', factory)
         t.startService()
-        self.failIfIdentical(t._port, None)
+        self.assertIsNot(t._port, None)
         t1 = copy.copy(t)
         self.assertIdentical(t1._port, None)
         t.stopService()
         self.assertIdentical(t._port, None)
-        self.failIf(t.running)
+        self.assertFalse(t.running)
 
         factory = protocol.ClientFactory()
         factory.protocol = wire.Echo
         t = internet.UNIXClient('echo.skt', factory)
         t.startService()
-        self.failIfIdentical(t._connection, None)
+        self.assertIsNot(t._connection, None)
         t1 = copy.copy(t)
         self.assertIdentical(t1._connection, None)
         t.stopService()
         self.assertIdentical(t._connection, None)
-        self.failIf(t.running)
+        self.assertFalse(t.running)
 
     def testStoppingServer(self):
         if not interfaces.IReactorUNIX(reactor, None):
@@ -457,7 +457,7 @@ class TestInternet2(unittest.TestCase):
         t = internet.UNIXServer('echo.skt', factory)
         t.startService()
         t.stopService()
-        self.failIf(t.running)
+        self.assertFalse(t.running)
         factory = protocol.ClientFactory()
         d = defer.Deferred()
         factory.clientConnectionFailed = lambda *args: d.callback(None)
@@ -472,7 +472,7 @@ class TestInternet2(unittest.TestCase):
         t0.stopService()
 
         t = pickle.loads(s)
-        self.failIf(t.running)
+        self.assertFalse(t.running)
 
     def testBrokenTimer(self):
         d = defer.Deferred()
@@ -597,7 +597,7 @@ class TestTimerBasic(unittest.TestCase):
         self.t.startService()
         d.addCallback(self.assertEqual, 'hello')
         d.addCallback(lambda x : self.t.stopService())
-        d.addCallback(lambda x : self.failIf(self.t.running))
+        d.addCallback(lambda x : self.assertFalse(self.t.running))
         return d
 
     def tearDown(self):
@@ -617,7 +617,7 @@ class TestTimerBasic(unittest.TestCase):
             self.assertEqual(result, 'foo')
             return self.t.stopService()
         def onFirstStop(ignored):
-            self.failIf(self.t.running)
+            self.assertFalse(self.t.running)
             self.t.startService()
             return d2
         def onSecondResult(result):
diff --git a/twisted/test/test_banana.py b/twisted/test/test_banana.py
index c4b69de..45449d6 100644
--- a/twisted/test/test_banana.py
+++ b/twisted/test/test_banana.py
@@ -186,11 +186,11 @@ class BananaTestCase(unittest.TestCase):
     def testOversizedList(self):
         data = '\x02\x01\x01\x01\x01\x80'
         # list(size=0x0101010102, about 4.3e9)
-        self.failUnlessRaises(banana.BananaError, self.feed, data)
+        self.assertRaises(banana.BananaError, self.feed, data)
     def testOversizedString(self):
         data = '\x02\x01\x01\x01\x01\x82'
         # string(size=0x0101010102, about 4.3e9)
-        self.failUnlessRaises(banana.BananaError, self.feed, data)
+        self.assertRaises(banana.BananaError, self.feed, data)
 
     def testCrashString(self):
         crashString = '\x00\x00\x00\x00\x04\x80'
@@ -204,7 +204,7 @@ class BananaTestCase(unittest.TestCase):
         # Instead, it takes up large amounts of CPU and memory...
         #crashString = '\x00\x00\x00\x00\x01\x80'
         # print repr(crashString)
-        #self.failUnlessRaises(Exception, self.enc.dataReceived, crashString)
+        #self.assertRaises(Exception, self.enc.dataReceived, crashString)
         try:
             # should now raise MemoryError
             self.enc.dataReceived(crashString)
diff --git a/twisted/test/test_cooperator.py b/twisted/test/test_cooperator.py
index 4bf41ef..ff83029 100644
--- a/twisted/test/test_cooperator.py
+++ b/twisted/test/test_cooperator.py
@@ -208,7 +208,7 @@ class TestCooperator(unittest.TestCase):
         # about this, so we have to carefully clean up after ourselves.
         c._tick()
         c.stop()
-        self.failUnless(_TPF.stopped)
+        self.assertTrue(_TPF.stopped)
         self.assertEqual(output, list(range(10)))
 
 
@@ -229,7 +229,7 @@ class TestCooperator(unittest.TestCase):
                 return '<FakeCall %r>' % (self.func,)
 
         def sched(f):
-            self.failIf(calls, repr(calls))
+            self.assertFalse(calls, repr(calls))
             calls.append(FakeCall(f))
             return calls[-1]
 
@@ -469,7 +469,7 @@ class RunStateTests(unittest.TestCase):
         self.deferNext()
         self.scheduler.pump()
         self.assertEqual(len(self.work), 1)
-        self.failUnless(isinstance(self.work[0], defer.Deferred))
+        self.assertTrue(isinstance(self.work[0], defer.Deferred))
         self.scheduler.pump()
         self.assertEqual(len(self.work), 1)
         self.task.pause()
diff --git a/twisted/test/test_defer.py b/twisted/test/test_defer.py
index c0691cc..38126e3 100644
--- a/twisted/test/test_defer.py
+++ b/twisted/test/test_defer.py
@@ -162,7 +162,7 @@ class DeferredTestCase(unittest.SynchronousTestCase, ImmediateFailureMixin):
         aFailure = result[0]
 
         # the type of the failure is a FirstError
-        self.failUnless(issubclass(aFailure.type, defer.FirstError),
+        self.assertTrue(issubclass(aFailure.type, defer.FirstError),
             'issubclass(aFailure.type, defer.FirstError) failed: '
             "failure's type is %r" % (aFailure.type,)
         )
@@ -264,12 +264,12 @@ class DeferredTestCase(unittest.SynchronousTestCase, ImmediateFailureMixin):
         l = []
         d = defer.Deferred().addCallback(lambda _: 1 // 0).addErrback(l.append)
         d.callback(1)
-        self.assert_(isinstance(l[0].value, ZeroDivisionError))
+        self.assertTrue(isinstance(l[0].value, ZeroDivisionError))
         l = []
         d = defer.Deferred().addCallback(
             lambda _: failure.Failure(ZeroDivisionError())).addErrback(l.append)
         d.callback(1)
-        self.assert_(isinstance(l[0].value, ZeroDivisionError))
+        self.assertTrue(isinstance(l[0].value, ZeroDivisionError))
 
     def testUnpauseBeforeCallback(self):
         d = defer.Deferred()
@@ -339,7 +339,7 @@ class DeferredTestCase(unittest.SynchronousTestCase, ImmediateFailureMixin):
         dl = [defer.succeed(1), defer.fail(ValueError())]
         defer.gatherResults(dl).addErrback(l.append)
         self.assertEqual(len(l), 1)
-        self.assert_(isinstance(l[0], failure.Failure))
+        self.assertTrue(isinstance(l[0], failure.Failure))
         # get rid of error
         dl[1].addErrback(lambda e: 1)
 
@@ -1166,25 +1166,25 @@ class AlreadyCalledTestCase(unittest.SynchronousTestCase):
         d = defer.Deferred()
         d.addCallbacks(self._callback, self._errback)
         self._call_1(d)
-        self.failUnlessRaises(defer.AlreadyCalledError, self._call_2, d)
+        self.assertRaises(defer.AlreadyCalledError, self._call_2, d)
 
     def testAlreadyCalled_CE(self):
         d = defer.Deferred()
         d.addCallbacks(self._callback, self._errback)
         self._call_1(d)
-        self.failUnlessRaises(defer.AlreadyCalledError, self._err_2, d)
+        self.assertRaises(defer.AlreadyCalledError, self._err_2, d)
 
     def testAlreadyCalled_EE(self):
         d = defer.Deferred()
         d.addCallbacks(self._callback, self._errback)
         self._err_1(d)
-        self.failUnlessRaises(defer.AlreadyCalledError, self._err_2, d)
+        self.assertRaises(defer.AlreadyCalledError, self._err_2, d)
 
     def testAlreadyCalled_EC(self):
         d = defer.Deferred()
         d.addCallbacks(self._callback, self._errback)
         self._err_1(d)
-        self.failUnlessRaises(defer.AlreadyCalledError, self._call_2, d)
+        self.assertRaises(defer.AlreadyCalledError, self._call_2, d)
 
 
     def _count(self, linetype, func, lines, expected):
@@ -1193,7 +1193,7 @@ class AlreadyCalledTestCase(unittest.SynchronousTestCase):
             if (line.startswith(' %s:' % linetype) and
                 line.endswith(' %s' % func)):
                 count += 1
-        self.failUnless(count == expected)
+        self.assertTrue(count == expected)
 
     def _check(self, e, caller, invoker1, invoker2):
         # make sure the debugging information is vaguely correct
@@ -1261,7 +1261,7 @@ class AlreadyCalledTestCase(unittest.SynchronousTestCase):
         try:
             self._call_2(d)
         except defer.AlreadyCalledError as e:
-            self.failIf(e.args)
+            self.assertFalse(e.args)
         else:
             self.fail("second callback failed to raise AlreadyCalledError")
 
@@ -1530,7 +1530,7 @@ class DeferredCancellerTest(unittest.SynchronousTestCase):
         def innerCancel(d):
             self.cancellerCallCount += 1
         def cancel(d):
-            self.assert_(False)
+            self.assertTrue(False)
 
         b = defer.Deferred(canceller=innerCancel)
         a = defer.Deferred(canceller=cancel)
@@ -1678,7 +1678,7 @@ class DeferredTestCaseII(unittest.SynchronousTestCase):
         self.assertEqual([], res)
 
     def tearDown(self):
-        self.failUnless(self.callbackRan, "Callback was never run.")
+        self.assertTrue(self.callbackRan, "Callback was never run.")
 
 
 
@@ -1692,19 +1692,19 @@ class OtherPrimitives(unittest.SynchronousTestCase, ImmediateFailureMixin):
     def testLock(self):
         lock = defer.DeferredLock()
         lock.acquire().addCallback(self._incr)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 1)
 
         lock.acquire().addCallback(self._incr)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 1)
 
         lock.release()
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 2)
 
         lock.release()
-        self.failIf(lock.locked)
+        self.assertFalse(lock.locked)
         self.assertEqual(self.counter, 2)
 
         self.assertRaises(TypeError, lock.run)
@@ -1718,18 +1718,18 @@ class OtherPrimitives(unittest.SynchronousTestCase, ImmediateFailureMixin):
             return controlDeferred
 
         resultDeferred = lock.run(helper, self=self, b=firstUnique)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.b, firstUnique)
 
         resultDeferred.addCallback(lambda x: setattr(self, 'result', x))
 
         lock.acquire().addCallback(self._incr)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 2)
 
         controlDeferred.callback(secondUnique)
         self.assertEqual(self.result, secondUnique)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 3)
 
         d = lock.acquire().addBoth(lambda x: setattr(self, 'result', x))
@@ -1737,7 +1737,7 @@ class OtherPrimitives(unittest.SynchronousTestCase, ImmediateFailureMixin):
         self.assertEqual(self.result.type, defer.CancelledError)
 
         lock.release()
-        self.failIf(lock.locked)
+        self.assertFalse(lock.locked)
 
 
     def test_cancelLockAfterAcquired(self):
@@ -1953,7 +1953,7 @@ if not _PY3:
             Test that the lock can not be acquired when the lock is held
             for longer than the timeout.
             """
-            self.failUnless(self.lock.lock())
+            self.assertTrue(self.lock.lock())
 
             d = self.lock.deferUntilLocked(timeout=5.5)
             self.assertFailure(d, defer.TimeoutError)
@@ -1972,7 +1972,7 @@ if not _PY3:
                 f.trap(defer.TimeoutError)
                 self.fail("Should not have timed out")
 
-            self.failUnless(self.lock.lock())
+            self.assertTrue(self.lock.lock())
 
             self.clock.callLater(1, self.lock.unlock)
             d = self.lock.deferUntilLocked(timeout=10)
