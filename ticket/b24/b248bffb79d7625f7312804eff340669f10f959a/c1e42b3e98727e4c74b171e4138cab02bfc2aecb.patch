Index: twisted/test/test_udp.py
===================================================================
--- twisted/test/test_udp.py	(revision 28077)
+++ twisted/test/test_udp.py	(working copy)
@@ -1,12 +1,12 @@
 # -*- test-case-name: twisted.test.test_udp -*-
-# Copyright (c) 2001-2009 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
 Tests for implementations of L{IReactorUDP} and L{IReactorMulticast}.
 """
 
-from twisted.trial import unittest, util
+from twisted.trial import unittest
 
 from twisted.internet.defer import Deferred, gatherResults, maybeDeferred
 from twisted.internet import protocol, reactor, error, defer, interfaces
@@ -113,20 +113,6 @@
 
 class UDPTestCase(unittest.TestCase):
 
-    def testOldAddress(self):
-        server = Server()
-        d = server.startedDeferred = defer.Deferred()
-        p = reactor.listenUDP(0, server, interface="127.0.0.1")
-        def cbStarted(ignored):
-            addr = p.getHost()
-            self.assertEquals(addr, ('INET_UDP', addr.host, addr.port))
-            return p.stopListening()
-        return d.addCallback(cbStarted)
-    testOldAddress.suppress = [
-        util.suppress(message='IPv4Address.__getitem__',
-                      category=DeprecationWarning)]
-
-
     def testStartStop(self):
         server = Server()
         d = server.startedDeferred = defer.Deferred()
Index: twisted/internet/address.py
===================================================================
--- twisted/internet/address.py	(revision 28077)
+++ twisted/internet/address.py	(working copy)
@@ -1,11 +1,15 @@
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
-"""Address objects for network connections."""
+"""
+Address objects for network connections.
+"""
 
 import warnings, os
+
 from zope.interface import implements
+
 from twisted.internet.interfaces import IAddress
 
 
@@ -34,16 +38,6 @@
         self.port = port
         self._bwHack = _bwHack
 
-    def __getitem__(self, index):
-        warnings.warn("IPv4Address.__getitem__ is deprecated.  Use attributes instead.",
-                      category=DeprecationWarning, stacklevel=2)
-        return (self._bwHack or self.type, self.host, self.port).__getitem__(index)
-
-    def __getslice__(self, start, stop):
-        warnings.warn("IPv4Address.__getitem__ is deprecated.  Use attributes instead.",
-                      category=DeprecationWarning, stacklevel=2)
-        return (self._bwHack or self.type, self.host, self.port)[start:stop]
-
     def __eq__(self, other):
         if isinstance(other, tuple):
             return tuple(self) == other
@@ -70,17 +64,7 @@
     def __init__(self, name, _bwHack='UNIX'):
         self.name = name
         self._bwHack = _bwHack
-    
-    def __getitem__(self, index):
-        warnings.warn("UNIXAddress.__getitem__ is deprecated.  Use attributes instead.",
-                      category=DeprecationWarning, stacklevel=2)
-        return (self._bwHack, self.name).__getitem__(index)
 
-    def __getslice__(self, start, stop):
-        warnings.warn("UNIXAddress.__getitem__ is deprecated.  Use attributes instead.",
-                      category=DeprecationWarning, stacklevel=2)
-        return (self._bwHack, self.name)[start:stop]
-
     def __eq__(self, other):
         if isinstance(other, tuple):
             return tuple(self) == other
