--- twisted/web2/auth/wrapper.py        (revision 17180)
+++ twisted/web2/auth/wrapper.py        (working copy)
@@ -11,6 +11,22 @@
 from twisted.web2 import http
 from twisted.web2 import iweb
 
+class UnauthorizedResponse(http.StatusResponse):
+    code = responsecode.UNAUTHORIZED
+
+    def __init__(self, factories, remoteAddr=None):
+        super(UnauthorizedResponse, self).__init__(
+            responsecode.UNAUTHORIZED,
+            "You are not authorized to access this resource.")
+        
+        authHeaders = []
+        for factory in factories.itervalues():
+            authHeaders.append((factory.scheme,
+                                factory.getChallenge(remoteAddr)))
+
+        self.headers.setHeader('www-authenticate', authHeaders)
+
+
 class UnauthorizedResource(resource.LeafResource):
     """Returned by locateChild or render to generate an http Unauthorized
        response.
@@ -24,19 +40,9 @@
         self.factories = factories
         
     def render(self, req):
-        resp = http.Response(responsecode.UNAUTHORIZED)
+        return UnauthorizedResponse(self.factories, req.remoteAddr)
 
-        authHeaders = []
-        for factory in self.factories.itervalues():
-            authHeaders.append((factory.scheme, 
-                                factory.getChallenge(req.remoteAddr)))
 
-
-        resp.headers.setHeader('www-authenticate', authHeaders)
-        
-        return resp
-
-
 class HTTPAuthResource(object):
     """I wrap a resource to prevent it being accessed unless the authentication
        can be completed using the credential factory, portal, and interfaces
