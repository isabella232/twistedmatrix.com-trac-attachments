diff --git twisted/web/static.py twisted/web/static.py
index 7348a90..0ba16d9 100644
--- twisted/web/static.py
+++ twisted/web/static.py
@@ -166,6 +166,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
     return the contents of /tmp/foo/bar.html .
 
     @cvar childNotFound: L{Resource} used to render 404 Not Found error pages.
+    @ivar forbidden: L{Resource} used to render 403 Forbidden error pages.
     """
 
     contentTypes = loadMimeTypes()
@@ -257,6 +258,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
         else:
             self.ignoredExts = list(ignoredExts)
         self.registry = registry or Registry()
+        self.forbidden = resource.ForbiddenResource()
 
 
     def ignoreExt(self, ext):
@@ -615,7 +617,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
         except IOError, e:
             import errno
             if e[0] == errno.EACCES:
-                return resource.ForbiddenResource().render(request)
+                return self.forbidden.render(request)
             else:
                 raise
 
diff --git twisted/web/test/test_static.py twisted/web/test/test_static.py
index bb32857..b3dfaa7 100644
--- twisted/web/test/test_static.py
+++ twisted/web/test/test_static.py
@@ -4,6 +4,7 @@
 """
 Tests for L{twisted.web.static}.
 """
+import errno
 import inspect
 import mimetypes
 import os
@@ -153,6 +154,36 @@ class StaticFileTests(TestCase):
         test_forbiddenResource.skip = "Cannot remove read permission on Windows"
 
 
+    def test_forbiddenResourceCustomize(self):
+        """
+        The resource rendered for forbidden requests is stored as an instance
+        member so that users can customize it.
+        """
+        base = FilePath(self.mktemp())
+        base.setContent('')
+        markerResponse = 'custom-forbidden-response'
+
+        def failingOpenForReading():
+            raise IOError(errno.EACCES)
+
+        class CustomForbiddenResource(resource.Resource):
+            def render(self, request):
+                return markerResponse
+
+        class CustomStaticFile(static.File):
+            def __init__(self, *args, **kwargs):
+                super(CustomStaticFile, self).__init__(*args, **kwargs)
+                self.forbidden = CustomForbiddenResource()
+
+        fileResource = CustomStaticFile(base.path)
+        fileResource.openForReading = failingOpenForReading
+        request = DummyRequest([''])
+
+        result = fileResource.render(request)
+
+        self.assertEqual(markerResponse, result)
+
+
     def test_indexNames(self):
         """
         If a request is made which encounters a L{File} before a final empty
diff --git twisted/web/topfiles/6951.misc twisted/web/topfiles/6951.misc
new file mode 100644
index 0000000..e69de29
