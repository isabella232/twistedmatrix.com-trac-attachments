Index: twisted/web/http.py
===================================================================
--- twisted/web/http.py	(revision 35841)
+++ twisted/web/http.py	(working copy)
@@ -1583,7 +1583,12 @@
         header = header.lower()
         data = data.strip()
         if header == 'content-length':
-            self.length = int(data)
+            try:
+                self.length = int(data)
+            except ValueError:
+                self.transport.write("HTTP/1.1 400 Bad Request\r\n\r\n")
+                self.transport.loseConnection()
+                return
             self._transferDecoder = _IdentityTransferDecoder(
                 self.length, self.requests[-1].handleContentChunk, self._finishRequestBody)
         elif header == 'transfer-encoding' and data.lower() == 'chunked':
Index: twisted/web/test/test_http.py
===================================================================
--- twisted/web/test/test_http.py	(revision 35841)
+++ twisted/web/test/test_http.py	(working copy)
@@ -692,7 +692,18 @@
             channel.transport.value(),
             "HTTP/1.1 400 Bad Request\r\n\r\n")
 
+    def test_invalidHeaders(self):
+        """
+        Tests against a correct parsing of L{HTTPChannel}'s headers.
+        """
+        requestLines = ["GET / HTTP/1.0", "Content-Length: x", "", ""]
+        channel = self.runRequest("\n".join(requestLines), http.Request, 0)
+        self.assertEqual(
+            channel.transport.value(),
+            "HTTP/1.1 400 Bad Request\r\n\r\n")
+        self.assert_(channel.transport.disconnecting)
 
+
     def test_headerLimitPerRequest(self):
         """
         L{HTTPChannel} enforces the limit of C{HTTPChannel.maxHeaders} per
@@ -864,7 +875,7 @@
                 # The tempfile API used to create content returns an
                 # instance of a different type depending on what platform
                 # we're running on.  The point here is to verify that the
-                # request body is in a file that's on the filesystem. 
+                # request body is in a file that's on the filesystem.
                 # Having a fileno method that returns an int is a somewhat
                 # close approximation of this. -exarkun
                 testcase.assertIsInstance(self.content.fileno(), int)
