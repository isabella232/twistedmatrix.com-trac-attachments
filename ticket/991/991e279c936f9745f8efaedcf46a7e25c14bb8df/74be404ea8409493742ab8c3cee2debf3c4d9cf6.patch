Index: twisted/words/protocols/jabber/client.py
===================================================================
--- twisted/words/protocols/jabber/client.py	(revision 13214)
+++ twisted/words/protocols/jabber/client.py	(working copy)
@@ -1,11 +1,10 @@
 # -*- test-case-name: twisted.words.test.test_jabbercomponent -*-
 #
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
-from twisted.xish import domish, xpath, utility
-from twisted.protocols import xmlstream
+from twisted.xish import domish, xpath, utility, xmlstream
 
 DigestAuthQry = xpath.internQuery("/iq/query/digest")
 PlaintextAuthQry = xpath.internQuery("/iq/query/password")
@@ -17,21 +16,20 @@
 class IQ(domish.Element):
     """ Wrapper for a Info/Query packet
 
-    This provides the necessary functionality to send IQs and get notified
-    when a result comes back. It's a subclass from domish.Element, so you can
-    use the standard DOM manipulation calls to add data to the outbound
-    request.
+    This provides the necessary functionality to send IQs and get notified when
+    a result comes back. It's a subclass from L{domish.Element}, so you can use
+    the standard DOM manipulation calls to add data to the outbound request.
 
-    @type callbacks: C{hemp.utility.CallbackList}
+    @type callbacks: L{utility.CallbackList}
     @cvar callbacks: Callback list to be notified when response comes back
     
     """    
     def __init__(self, xmlstream, type = "set"):
         """
-        @type xmlstream: C{XmlStream}
+        @type xmlstream: L{xmlstream.XmlStream}
         @param xmlstream: XmlStream to use for transmission of this IQ
 
-        @type type: C{str}
+        @type type: L{str}
         @param type: IQ type identifier ('get' or 'set')
 
         """
@@ -53,16 +51,16 @@
         """
         Call this method to send this IQ request via the associated XmlStream
 
-        @type to: C{str}
-        @type to: Jabber ID of the entity to send the request to
+        @param to: Jabber ID of the entity to send the request to
+        @type to: L{str}
 
-        @returns: Callback list for this IQ. Any callbacks added to this list will
-                  be fired when the result comes back.
+        @returns: Callback list for this IQ. Any callbacks added to this list
+                  will be fired when the result comes back.
         """
         if to != None:
             self["to"] = to
         self._xmlstream.addOnetimeObserver("/iq[@id='%s']" % self["id"], \
-                                    self._resultEvent)
+                                                             self._resultEvent)
         self._xmlstream.send(self.toXml())
 
     def _resultEvent(self, iq):
@@ -73,20 +71,21 @@
     """ Authenticates an XmlStream against a Jabber server as a Client
 
     This only implements non-SASL authentication, per
-    U{JEP 78<http://www.jabber.org/jeps/jep-0078.html>}. Additionally, this
+    U{JEP-0078<http://www.jabber.org/jeps/jep-0078.html>}. Additionally, this
     authenticator provides the ability to perform inline registration, per
-    U{JEP 77<http://www.jabber.org/jeps/jep-0077.html>}.
+    U{JEP-0077<http://www.jabber.org/jeps/jep-0077.html>}.
 
-    Under normal circumstances, the BasicAuthenticator generates the L{STREAM_AUTHD_EVENT}
-    once the stream has authenticated. However, it can also generate other events, such
-    as:
+    Under normal circumstances, the BasicAuthenticator generates the
+    L{xmlstream.STREAM_AUTHD_EVENT} once the stream has authenticated. However,
+    it can also generate other events, such as:
       - L{INVALID_USER_EVENT} : Authentication failed, due to invalid username
       - L{AUTH_FAILED_EVENT} : Authentication failed, due to invalid password
       - L{REGISTER_FAILED_EVENT} : Registration failed
 
-    If authentication fails for any reason, you can attempt to register by calling
-    the L{registerAccount} method. If the registration succeeds, a L{STREAM_AUTHD_EVENT}
-    will be fired. Otherwise, one of the above errors will be generated (again).
+    If authentication fails for any reason, you can attempt to register by
+    calling the L{registerAccount} method. If the registration succeeds, a
+    L{xmlstream.STREAM_AUTHD_EVENT} will be fired. Otherwise, one of the above
+    errors will be generated (again).
     
     """
     namespace = "jabber:client"
@@ -118,7 +117,8 @@
         
             # Prefer digest over plaintext
             if DigestAuthQry.matches(iq):
-                digest = xmlstream.hashPassword(self.xmlstream.sid, self.password)
+                digest = xmlstream.hashPassword(self.xmlstream.sid,
+                                                self.password)
                 reply.query.addElement("digest", content = digest)
             else:
                 reply.query.addElement("password", content = self.password)
@@ -134,7 +134,8 @@
 
     def _authResultEvent(self, iq):
         if iq["type"] == "result":
-            self.xmlstream.dispatch(self.xmlstream, xmlstream.STREAM_AUTHD_EVENT)
+            self.xmlstream.dispatch(self.xmlstream,
+                                    xmlstream.STREAM_AUTHD_EVENT)
         else:
             self.xmlstream.dispatch(iq, self.AUTH_FAILED_EVENT)
 
Index: twisted/words/protocols/jabber/component.py
===================================================================
--- twisted/words/protocols/jabber/component.py	(revision 13214)
+++ twisted/words/protocols/jabber/component.py	(working copy)
@@ -1,6 +1,6 @@
 # -*- test-case-name: twisted.test.test_jabbercomponent -*-
 #
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
@@ -26,10 +26,10 @@
 
     def __init__(self, componentjid, password):
         """
-        @type componentjid: C{str}
+        @type componentjid: L{str}
         @param componentjid: Jabber ID that this component wishes to bind to.
 
-        @type password: C{str}
+        @type password: L{str}
         @param password: Password/secret this component uses to authenticate.
         """
         xmlstream.ConnectAuthenticator.__init__(self, componentjid)
@@ -156,7 +156,8 @@
 
 
 def buildServiceManager(jid, password, strport):
-    """ Constructs a pre-built C{component.ServiceManager}, using the specified strport string.    
+    """ Constructs a pre-built L{ServiceManager}, using the specified strport
+        string.    
     """
     svc = ServiceManager(jid, password)
     client_svc = jstrports.client(strport, svc.getFactory())
Index: twisted/xish/xmlstream.py
===================================================================
--- twisted/xish/xmlstream.py	(revision 13214)
+++ twisted/xish/xmlstream.py	(working copy)
@@ -1,9 +1,8 @@
 # -*- test-case-name: twisted.test.test_xmlstream -*-
 #
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
 from twisted.internet import protocol
 from twisted.xish import domish, utility
 
@@ -27,26 +26,26 @@
     types of stream hosts (such as clients, components, etc.).
 
     Rules:
-      1. The Authenticator MUST dispatch a L{STREAM_AUTHD_EVENT} when the stream
-         has been completely authenticated.
+      1. The Authenticator MUST dispatch a L{STREAM_AUTHD_EVENT} when the
+         stream has been completely authenticated.
       2. The Authenticator SHOULD reset all state information when
          L{associateWithStream} is called.
       3. The Authenticator SHOULD override L{streamStarted}, and start
          authentication there.
 
 
-    @type namespace: C{str}
+    @type namespace: L{str}
     @cvar namespace: Default namespace for the XmlStream
 
-    @type version: C{int}
+    @type version: L{int}
     @cvar version: Version attribute for XmlStream. 0.0 will cause the
                    XmlStream to not include a C{version} attribute in the
                    header.
 
-    @type streamHost: C{str}
+    @type streamHost: L{str}
     @ivar streamHost: Target host for this stream (used as the 'to' attribute)
 
-    @type xmlstream: C{XmlStream}
+    @type xmlstream: L{XmlStream}
     @ivar xmlstream: The XmlStream that needs authentication
     """
 
@@ -73,7 +72,7 @@
         Called by the XmlStream when it has received a root element from
         the connected peer. 
         
-        @type rootelem: C{Element}
+        @type rootelem: L{domish.Element}
         @param rootelem: The root element of the XmlStream received from
                          the streamHost
         """
@@ -87,7 +86,7 @@
         The default implementation just saves a handle to the new
         XmlStream.
 
-        @type xmlstream: C{XmlStream}
+        @type xmlstream: L{XmlStream}
         @param xmlstream: The XmlStream that will be passing events to this
                           Authenticator.
         
@@ -159,7 +158,7 @@
     ### --------------------------------------------------------------
     def onDocumentStart(self, rootelem):
         if rootelem.hasAttribute("id"):
-            self.sid = rootelem["id"]                  # Extract stream identifier
+            self.sid = rootelem["id"]              # Extract stream identifier
         self.authenticator.streamStarted(rootelem) # Notify authenticator
         self.dispatch(self, STREAM_START_EVENT)    
 
@@ -204,7 +203,3 @@
     def removeBootstrap(self, event, fn):
         self.bootstraps.remove((event, fn))
 
-
-
-
-        
Index: twisted/xish/xpathparser.py
===================================================================
--- twisted/xish/xpathparser.py	(revision 13214)
+++ twisted/xish/xpathparser.py	(working copy)
@@ -54,17 +54,16 @@
     """
     
     def __init__(self, patterns, ignore, input):
-        """Initialize the scanner.
+        """ Initialize the scanner.
 
-        Parameters:
-          patterns : [(terminal, uncompiled regex), ...] or None
-          ignore : [terminal,...]
-          input : string
+        @param patterns: [(terminal, uncompiled regex), ...] or C{None}
+        @param ignore: [terminal,...]
+        @param input: string
 
-        If patterns is None, we assume that the subclass has
-        defined self.patterns : [(terminal, compiled regex), ...].
-        Note that the patterns parameter expects uncompiled regexes,
-        whereas the self.patterns field expects compiled regexes.
+        If patterns is C{None}, we assume that the subclass has defined
+        C{self.patterns} : [(terminal, compiled regex), ...]. Note that the
+        patterns parameter expects uncompiled regexes, whereas the
+        C{self.patterns} field expects compiled regexes.
         """
         self.tokens = [] # [(begin char pos, end char pos, token name, matched text), ...]
         self.restrictions = []
@@ -115,15 +114,15 @@
     def token(self, i, restrict=None):
         """Get the i'th token in the input.
 
-        If i is one past the end, then scan for another token.
-        
-        Args:
 
-        restrict : [token, ...] or None; if restrict is None, then any
-        token is allowed.  You may call token(i) more than once.
-        However, the restrict set may never be larger than what was
-        passed in on the first call to token(i).
-        
+        If L{i} is one past the end, then scan for another token.
+       
+        @param i: token index
+        @param restrict: [token, ...] or C{None}; if restrict is C{None},
+                         then any token is allowed. You may call token(i) more
+                         than once.  However, the restrict set may never be
+                         larger than what was passed in on the first call to
+                         token(i).
         """
         if i == len(self.tokens):
             self.scan(restrict)
@@ -221,12 +220,13 @@
     def __init__(self, parent, scanner, tokenpos, rule, args=()):
         """Create a new context.
 
-        Args:
-        parent: Context object or None
-        scanner: Scanner object
-        pos: integer (scanner token position)
-        rule: string (name of the rule)
-        args: tuple listing parameters to the rule
+        @param parent: Context object or C{None}
+        @param scanner: Scanner object
+        @param tokenpos: scanner token position
+        @type tokenpos: L{int}
+        @param rule: name of the rule
+        @type rule: L{str}
+        @param args: tuple listing parameters to the rule
 
         """
         self.parent = parent
Index: twisted/xish/utility.py
===================================================================
--- twisted/xish/utility.py	(revision 13214)
+++ twisted/xish/utility.py	(working copy)
@@ -1,15 +1,14 @@
 # -*- test-case-name: twisted.xish.test.test_xishutil -*-
 #
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
 def _isStr(s):
-    """Internal method to determine if an object is a string """
+    """ Internal method to determine if an object is a string """
     return isinstance(s, type('')) or isinstance(s, type(u''))
 
 class _MethodWrapper(object):
-    """Internal class for tracking method calls """
+    """ Internal class for tracking method calls """
     def __init__(self, method, *args, **kwargs):
         self.method = method
         self.args = args
Index: twisted/xish/domish.py
===================================================================
--- twisted/xish/domish.py	(revision 13214)
+++ twisted/xish/domish.py	(working copy)
@@ -1,9 +1,8 @@
 # -*- test-case-name: twisted.test.test_domish -*-
 #
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
 from __future__ import generators
 
 import types
@@ -14,7 +13,8 @@
     import StringIO
 
 def _splitPrefix(name):
-    """Internal method for splitting a prefixed Element name into its respective parts """
+    """ Internal method for splitting a prefixed Element name into its
+        respective parts """
     ntok = name.split(":", 1)
     if len(ntok) == 2:
         return ntok
@@ -186,13 +186,14 @@
 SerializerClass = _Serializer
 
 def escapeToXml(text, isattrib = 0):
-    """Escape text to proper XML form, per section 2.3 in the XML specification.
+    """ Escape text to proper XML form, per section 2.3 in the XML specification.
 
-     @type text: L{str}
-     @param text: Text to escape
+    @type text: L{str}
+    @param text: Text to escape
 
-     @type isattrib: L{Boolean}
-     @param isattrib: Triggers escaping of characters necessary for use as attribute values
+    @type isattrib: L{bool}
+    @param isattrib: Triggers escaping of characters necessary for use as
+                     attribute values
     """
     text = text.replace("&", "&amp;")
     text = text.replace("<", "&lt;")
@@ -218,14 +219,13 @@
             yield n
 
 def generateElementsQNamed(list, name, uri):
-    """ Filters Element items in a list with matching name and URI
-    """
+    """ Filters Element items in a list with matching name and URI. """
     for n in list:
         if n.__class__ == Element and n.name == name and n.uri == uri:
             yield n
 
 def generateElementsNamed(list, name):
-    """ Filters Element items in a list with matching name, regardless of URI
+    """ Filters Element items in a list with matching name, regardless of URI.
     """
     for n in list:
         if n.__class__ == Element and n.name == name:
@@ -233,13 +233,12 @@
 
 
 class SerializedXML(str):
-    """ Marker class for pre-serialized XML in the DOM """
+    """ Marker class for pre-serialized XML in the DOM. """
     pass
 
         
 class Namespace:
-    """ Convenience object for tracking namespace declarations
-    """
+    """ Convenience object for tracking namespace declarations. """
     def __init__(self, uri):
         self._uri = uri
     def __getattr__(self, n):
@@ -249,28 +248,28 @@
 
 
 class Element(object):
-    """Object representing a container (a.k.a. tag or element) in an HTML or XML document.
+    """ Object representing a container (a.k.a. tag or element) in an HTML or XML document.
 
-    An Element contains a series of attributes (name/value pairs),
-    content (character data), and other child Element objects. When building a document
+    An Element contains a series of attributes (name/value pairs), content
+    (character data), and other child Element objects. When building a document
     with markup (such as HTML or XML), use this object as the starting point.
 
-    @type uri: C{str}
+    @type uri: L{str}
     @ivar uri: URI of this Element's name
 
-    @type defaultUri: C{str}
+    @type defaultUri: L{str}
     @ivar defaultUri: URI this Element exists within
 
-    @type name: C{str}
+    @type name: L{str}
     @ivar name: Name of this Element
 
-    @type children: C{list}
+    @type children: L{list}
     @ivar children: List of child Elements and content
 
-    @type parent: C{Element}
+    @type parent: L{Element}
     @ivar parent: Reference to the parent Element, if any.
 
-    @type attributes: C{dict}
+    @type attributes: L{dict}
     @ivar attributes: Dictionary of attributes associated with this Element.
 
     """
@@ -278,7 +277,8 @@
     def __init__(self, qname, defaultUri = None, attribs = None):
         """
         @param qname: Tuple of (uri, name)
-        @param defaultUri: The default URI of the element; defaults to the URI specified in L{qname}
+        @param defaultUri: The default URI of the element; defaults to the URI
+                           specified in L{qname}
         @param attribs: Dictionary of attributes
         """
         self.uri, self.name = qname
@@ -314,40 +314,43 @@
         return ""
 
     def _dqa(self, attr):
-        """Dequalify an attribute key as needed"""
+        """ Dequalify an attribute key as needed """
         if isinstance(attr, types.TupleType) and attr[0] == self.uri:
             return attr[1]
         else:
             return attr
 
     def getAttribute(self, attribname, default = None):
-        """Retrieve the value of attribname, if it exists """
+        """ Retrieve the value of attribname, if it exists """
         return self.attributes.get(attribname, default)
 
     def hasAttribute(self, attrib):
-        """Determine if the specified attribute exists """
+        """ Determine if the specified attribute exists """
         return self.attributes.has_key(self._dqa(attrib))
     
     def compareAttribute(self, attrib, value):
-        """Safely compare the value of an attribute against a provided value; None-safe. """
+        """ Safely compare the value of an attribute against a provided value.
+        
+        C{None}-safe.
+        """
         return self.attributes.get(self._dqa(attrib), None) == value
 
     def swapAttributeValues(self, left, right):
-        """Swap the values of two attribute"""
+        """ Swap the values of two attribute. """
         d = self.attributes
         l = d[left]
         d[left] = d[right]
         d[right] = l
 
     def addChild(self, node):
-        """Add a child to this Element"""
+        """ Add a child to this Element. """
         if node.__class__ == Element:
             node.parent = self
         self.children.append(node)
         return self.children[-1]
 
     def addContent(self, text):
-        """Add some text data to this element"""
+        """ Add some text data to this Element. """
         c = self.children
         if len(c) > 0 and isinstance(c[-1], types.StringTypes):
             c[-1] = c[-1] + text
@@ -356,7 +359,9 @@
         return c[-1]
 
     def addElement(self, name, defaultUri = None, content = None):
-        """Add a new child Element to this Element; preferred method
+        """ Add a new child Element to this Element.
+        
+        Preferred method.
         """
         result = None
         if isinstance(name, type(())):
@@ -375,21 +380,22 @@
         return result
 
     def addRawXml(self, rawxmlstring):
-        """Add a pre-serialized chunk o' XML as a child of this Element.
-        """
+        """ Add a pre-serialized chunk o' XML as a child of this Element. """
         self.children.append(SerializedXML(rawxmlstring))
 
     def addUniqueId(self):
-        """Add a unique (across a given Python session) id attribute to this Element"""
+        """ Add a unique (across a given Python session) id attribute to this
+            Element.
+        """
         self.attributes["id"] = "H_%d" % Element._idCounter
         Element._idCounter = Element._idCounter + 1
 
     def elements(self):
-        """Iterate across all children of this Element that are Elements"""
+        """ Iterate across all children of this Element that are Elements. """
         return generateOnlyKlass(self.children, Element)
 
     def toXml(self, prefixes = None, closeElement = 1):
-        """Serialize this Element and all children to a string """
+        """ Serialize this Element and all children to a string. """
         s = SerializerClass(prefixes)
         s.serialize(self, closeElement)
         return s.getValue()
Index: twisted/xish/xpath.py
===================================================================
--- twisted/xish/xpath.py	(revision 13214)
+++ twisted/xish/xpath.py	(working copy)
@@ -1,6 +1,6 @@
 # -*- test-case-name: twisted.xish.test.test_xpath -*-
 #
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
@@ -155,7 +155,8 @@
         parentlist.append(elem.name)
 
     def isRootMatch(self, elem):
-        if (self.elementName == None or self.elementName == elem.name) and self.matchesPredicates(elem):
+        if (self.elementName == None or self.elementName == elem.name) and \
+           self.matchesPredicates(elem):
             if self.childLocation != None:
                 for c in elem.elements():
                     if self.childLocation.matches(c):
@@ -165,7 +166,8 @@
         return False
 
     def findFirstRootMatch(self, elem):
-        if (self.elementName == None or self.elementName == elem.name) and self.matchesPredicates(elem):
+        if (self.elementName == None or self.elementName == elem.name) and \
+           self.matchesPredicates(elem):
             # Thus far, the name matches and the predicates match,
             # now check into the children and find the first one
             # that matches the rest of the structure
