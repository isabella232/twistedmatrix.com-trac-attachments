diff --git twisted/python/_reflectpy3.py twisted/python/_reflectpy3.py
index f3e98d4..91ba5ae 100644
--- twisted/python/_reflectpy3.py
+++ twisted/python/_reflectpy3.py
@@ -142,7 +142,6 @@ def namedModule(name):
     return m
 
 
-
 def namedObject(name):
     """
     Get a fully named module-global object.
@@ -154,6 +153,24 @@ def namedObject(name):
 namedClass = namedObject # backwards compat
 
 
+def requireModule(name, default=None):
+    """
+    Try to import a module given its name, returning C{default} value if
+    C{ImportError} is raised during import.
+
+    @param name: Module name as it would have been passed to C{import}.
+    @type name: C{str}.
+
+    @param default: Value returned in case C{import} case raises
+        C{ImportError}.
+
+    @return: Module or default value.
+    """
+    try:
+        return namedModule(name)
+    except ImportError:
+        return default
+
 
 class _NoModuleFound(Exception):
     """
diff --git twisted/python/reflect.py twisted/python/reflect.py
index 7740867..dd41e27 100644
--- twisted/python/reflect.py
+++ twisted/python/reflect.py
@@ -29,7 +29,8 @@ from twisted.python.versions import Version
 from twisted.python._reflectpy3 import (
     prefixedMethods, accumulateMethods, prefixedMethodNames,
     addMethodNamesToDict)
-from twisted.python._reflectpy3 import namedModule, namedObject, namedClass
+from twisted.python._reflectpy3 import (
+    namedModule, namedObject, namedClass, requireModule)
 from twisted.python._reflectpy3 import InvalidName, ModuleNotFound
 from twisted.python._reflectpy3 import ObjectNotFound, namedAny
 from twisted.python._reflectpy3 import filenameToModuleName
@@ -307,7 +308,7 @@ __all__ = [
     'QueueMethod',
 
     'funcinfo', 'fullFuncName', 'qual', 'getcurrent', 'getClass', 'isinst',
-    'namedModule', 'namedObject', 'namedClass', 'namedAny',
+    'namedModule', 'namedObject', 'namedClass', 'namedAny', 'requireModule',
     'safe_repr', 'safe_str', 'allYourBase', 'accumulateBases',
     'prefixedMethodNames', 'addMethodNamesToDict', 'prefixedMethods',
     'accumulateMethods',
diff --git twisted/python/test/test_reflectpy3.py twisted/python/test/test_reflectpy3.py
index 03c1178..548a857 100644
--- twisted/python/test/test_reflectpy3.py
+++ twisted/python/test/test_reflectpy3.py
@@ -347,6 +347,54 @@ class LookupsTestCase(TestCase):
                 "identifiers, not %r" % (invalidName,))
 
 
+    def test_requireModuleImportError(self):
+        """
+        When module import fails with ImportError, it return the default
+        value.
+        """
+        for name in ['nosuchmtopodule', 'no.such.module']:
+            default = object()
+
+            result = reflect.requireModule(name, default=default)
+
+            self.assertIs(result, default)
+
+
+    def test_requireModuleOtherError(self):
+        """
+        When module import fails with error, other than ImportError, it
+        raises that error.
+        """
+        self.assertRaises(
+            ValueError,
+            reflect.requireModule, 'twisted..python',
+            )
+
+
+    def test_requireModuleDefaultNone(self):
+        """
+        When module import fails, by default it returns C{None}.
+        """
+        result = reflect.requireModule('no.such.module')
+
+        self.assertIs(None, result)
+
+
+
+    def test_requireModuleRequestedImport(self):
+        """
+        When module import succeed, it return module and not the default
+        value.
+        """
+        from twisted.python import monkey
+        default = object()
+
+        self.assertIs(
+            reflect.requireModule('twisted.python.monkey', default=default),
+            monkey,
+            )
+
+
 
 class Breakable(object):
 
