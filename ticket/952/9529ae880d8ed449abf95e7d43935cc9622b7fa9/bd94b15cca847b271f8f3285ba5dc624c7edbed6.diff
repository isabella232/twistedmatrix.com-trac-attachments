diff --git twisted/python/test/test_dist.py twisted/python/test/test_dist.py
index 34c6789..0e9997d 100644
--- twisted/python/test/test_dist.py
+++ twisted/python/test/test_dist.py
@@ -198,6 +198,66 @@ version = versions.Version("twisted.blat", 9, 8, 10)
 
 
 
+class GetAllScriptsTest(TestCase):
+    """
+    Tests for L{dist.getAllScripts} which returns all the scripts that should be
+    included in a complete distribution of Twisted, with its subprojects.
+    """
+
+    # getAllScripts relies on the list twisted.python.dist.twisted_subprojects 
+    # to tell it what subprojects might have scripts it needs to get. It 
+    # searches recursively in bin/, at the root of the Twisted distribution. 
+    # Thus testing it relies on manipulating the contents of that list and
+    # directory.
+
+    def setUp(self):
+        # A mock up of twisted's root directory.
+        basedir = self.mktemp()
+        os.mkdir(basedir)
+        os.mkdir(os.path.join(basedir, 'bin'))
+
+        # getAllScripts uses a hardcoded relative path.
+        self.old_cwd = os.getcwd()
+        os.chdir(basedir)
+
+    def tearDown(self):
+        os.chdir(self.old_cwd)
+        # The temporary directories will be deleted by Trial.
+
+    def test_getsCorrectScripts(self):
+        """
+        getAllScripts should return exactly the scripts in Twisted and its
+        subprojects that should be included in a distribution. It may encounter 
+        additional scripts, but no script should be included unless it is part
+        of a subproject listed in twisted_subprojects. 
+        """
+        import os
+        from twisted.python import dist
+
+        # Assuming getScripts works, all we need to test for is that 
+        # getAllScripts calls getScripts for every subproject and "" (bin/).
+        directories_queried = list()
+        def mock_getScripts(projname, basedir=''):
+            directories_queried.append(projname)
+            return ["dummy_script", "dummy_script_2"]
+        self.patch(dist, "getScripts", mock_getScripts)
+
+        # Create some dummy subprojects for getAllScripts to look at.
+        dummy_subprojects = ["random", "project", "names", "kitty_kat"]
+        # Also create some more directories that LOOK like subprojects but
+        # aren't listed as subprojects. getAllScripts should ignore them.
+        red_herrings = ["kitten", "cat"]
+        for name in dummy_subprojects + red_herrings:
+            os.mkdir(os.path.join("bin", name))
+        self.patch(dist, "twisted_subprojects", dummy_subprojects)
+    
+        scripts = dist.getAllScripts()
+
+        # Order doesn't matter. Duplication does.
+        self.assertEqual(sorted(directories_queried),
+                         sorted(dummy_subprojects + ['']))
+        self.assertEqual(scripts, ["dummy_script", "dummy_script_2"]*5)
+
 class GetScriptsTest(TestCase):
     """
     Tests for L{dist.getScripts} which returns the scripts which should be
diff --git twisted/topfiles/6137.misc twisted/topfiles/6137.misc
new file mode 100644
index 0000000..e69de29
