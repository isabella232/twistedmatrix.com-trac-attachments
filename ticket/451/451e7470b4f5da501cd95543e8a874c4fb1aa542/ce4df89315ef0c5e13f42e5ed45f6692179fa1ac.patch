=== modified file 'twisted/web/_flatten.py'
--- twisted/web/_flatten.py	2011-03-21 18:45:11 +0000
+++ twisted/web/_flatten.py	2011-09-26 18:10:08 +0000
@@ -75,7 +75,7 @@
     """
     if isinstance(data, unicode):
         data = data.encode('utf-8')
-    return data.replace('--', '- -')
+    return data.replace('--', '- - ').replace('>', '&gt;')
 
 
 def _getSlotValue(name, slotData, default=None):

=== modified file 'twisted/web/test/test_flatten.py'
--- twisted/web/test/test_flatten.py	2011-03-21 13:17:42 +0000
+++ twisted/web/test/test_flatten.py	2011-09-26 18:17:30 +0000
@@ -10,6 +10,7 @@
 from twisted.trial.unittest import TestCase
 from twisted.internet.defer import succeed, gatherResults
 from twisted.web._stan import Tag
+from twisted.web._flatten import flattenString
 from twisted.web.error import UnfilledSlot, UnsupportedType, FlattenerError
 from twisted.web.template import tags, Comment, CDATA, slot
 from twisted.web.iweb import IRenderable
@@ -50,11 +51,36 @@
         """
         Test that comments are correctly flattened and escaped.
         """
-        return gatherResults([
-            self.assertFlattensTo(Comment('foo bar'), '<!--foo bar-->'),
-            self.assertFlattensTo(Comment('foo -- bar'), '<!--foo - - bar-->'),
-        ])
-
+        return self.assertFlattensTo(Comment('foo bar'), '<!--foo bar-->'),
+
+    def test_CommentEscaping(self):
+        """
+        Test obscure comment escaping cases.
+
+        SGML comment syntax is complicated and hard to use. This rule is more
+        restrictive, and more compatible:
+
+        Comments start with <!-- and end with --> and never contain -- or >.
+        """
+        def verifyComment(c):
+            self.assertTrue(c.startswith('<!--'))
+            self.assertTrue(c.endswith('-->'))
+            self.assertTrue(len(c) >= 7)
+            content = c[4:-3]
+            self.assertNotIn('--', content)
+            self.assertNotIn('>', content)
+
+        results = []
+        for c in [
+            'foo---bar',
+            'foo>bar',
+            'foo-->bar',
+            '----------------',
+        ]:
+            d = flattenString(None, Comment(c))
+            d.addCallback(verifyComment)
+            results.append(d)
+        return gatherResults(results)
 
     def test_serializeCDATA(self):
         """

