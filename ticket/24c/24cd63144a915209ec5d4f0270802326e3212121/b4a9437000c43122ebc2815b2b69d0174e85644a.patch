Index: twisted/python/log.py
===================================================================
--- twisted/python/log.py	(revision 32317)
+++ twisted/python/log.py	(working copy)
@@ -291,7 +291,7 @@
                 observer = self.observers[i]
                 self.observers[i] = lambda event: None
                 try:
-                    err(failure.Failure(),
+                    self._err(failure.Failure(),
                         "Log observer %s failed." % (observer,))
                 except:
                     # Sometimes err() will throw an exception,
@@ -301,6 +301,24 @@
                 self.observers[i] = observer
 
 
+    def _err(self, failure, why):
+        """
+        Log a failure.
+
+        Similar in functionality to the global {err} function, but the failure
+        gets published only to observers attached to this publisher.
+
+        @param failure: The failure to log.
+        @type failure: L{Failure}.
+
+        @param why: The source of this failure.  This will be logged along with
+            the C{failure} and should describe the context in which the failure
+            occurred.
+        @type why: C{str}
+        """
+        self.msg(failure=failure, why=why, isError=1)
+
+
     def showwarning(self, message, category, filename, lineno, file=None,
                     line=None):
         """
Index: twisted/test/test_log.py
===================================================================
--- twisted/test/test_log.py	(revision 32317)
+++ twisted/test/test_log.py	(working copy)
@@ -97,11 +97,7 @@
             # Send out the event which will break one of the observers.
             log.msg("Howdy, y'all.")
 
-            # The broken observer should have caused this to be logged.  There
-            # is a slight bug with LogPublisher - when it logs an error from an
-            # observer, it uses the global "err", which is not necessarily
-            # associated with it, but which may be associated with a different
-            # LogPublisher!  See #3307.
+            # The broken observer should have caused this to be logged.
             excs = self.flushLoggedErrors(ZeroDivisionError)
             self.assertEqual(len(excs), 1)
 
@@ -231,6 +227,30 @@
                                        line))
 
 
+    def test_publisherReportsBrokenObserversPrivately(self):
+        """
+        Log publisher does not use the global L{log.err} when reporting broken
+        observers.
+        """
+        errors = []
+        def logError(eventDict):
+            if eventDict.get("isError"):
+                errors.append(eventDict["failure"].value)
+
+        def fail(eventDict):
+            raise RuntimeError("test_publisherLocalyReportsBrokenObservers")
+
+        publisher = log.LogPublisher()
+        publisher.addObserver(logError)
+        publisher.addObserver(fail)
+
+        publisher.msg("Hello!")
+        self.assertEqual(publisher.observers, [logError, fail])
+        self.assertEqual(len(errors), 1)
+        self.assertIsInstance(errors[0], RuntimeError)
+
+
+
 class FakeFile(list):
     def write(self, bytes):
         self.append(bytes)
Index: twisted/topfiles/3307.bugfix
===================================================================
--- twisted/topfiles/3307.bugfix	(revision 0)
+++ twisted/topfiles/3307.bugfix	(revision 0)
@@ -0,0 +1 @@
+LogPublishers don't use the global log publisher for reporting broken observers anymore.
