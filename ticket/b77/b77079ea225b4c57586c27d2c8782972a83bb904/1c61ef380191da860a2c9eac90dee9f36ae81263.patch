Index: twisted/names/test/test_dns.py
===================================================================
--- twisted/names/test/test_dns.py	(revision 36436)
+++ twisted/names/test/test_dns.py	(working copy)
@@ -103,7 +103,15 @@
         """
         self.assertEqual(6 * 31536000, dns.str2time("6Y"))
 
+    def test_combo(self):
+        """
+        Like L{test_seconds}, but for a combination of C{"Y"}, C{"W"}, C{"D"},
+        C{"H"}, C{"M"}, and C{"S"}. Tests for the combination
+        C{"6Y5W4D3H2M1S"} which equals C{192596521}.
+        """
+        self.assertEqual(192596521, dns.str2time("6Y5W4D3H2M1S"))
 
+
     def test_invalidPrefix(self):
         """
         If a non-integer prefix is given, L{dns.str2time} raises L{ValueError}.
Index: twisted/names/dns.py
===================================================================
--- twisted/names/dns.py	(revision 36436)
+++ twisted/names/dns.py	(working copy)
@@ -44,6 +44,7 @@
 
 # System imports
 import warnings
+import re
 
 import struct, random, types, socket
 from itertools import chain
@@ -209,12 +210,13 @@
     Parse a string description of an interval into an integer number of seconds.
 
     @param s: An interval definition constructed as an interval duration
-        followed by an interval unit.  An interval duration is a base ten
-        representation of an integer.  An interval unit is one of the following
+        followed by an interval unit. An interval duration is a base ten
+        representation of an integer. An interval unit is one of the following
         letters: S (seconds), M (minutes), H (hours), D (days), W (weeks), or Y
         (years).  For example: C{"3S"} indicates an interval of three seconds;
-        C{"5D"} indicates an interval of five days.  Alternatively, C{s} may be
-        any non-string and it will be returned unmodified.
+        C{"5D6H"} indicates an interval of five days and six hours.
+        Alternatively, C{s} may be any non-string and it will returned
+        unmodified.
     @type s: text string (C{str}) for parsing; anything else for passthrough.
 
     @return: an C{int} giving the interval represented by the string C{s}, or
@@ -226,9 +228,21 @@
     )
     if isinstance(s, str):
         s = s.upper().strip()
+
+        n = re.compile('\d+')
+        l = re.compile('[SMHDWY]')
+        interval = zip(l.findall(s), n.findall(s))
+        intervalSum = 0
+
+        if not interval:
+            raise ValueError("Invalid time interval specifier: " + s)
+
         for (suff, mult) in suffixes:
-            if s.endswith(suff):
-                return int(float(s[:-1]) * mult)
+            for (letter, number) in interval:
+                if letter == suff:
+                    intervalSum += int(float(number) * mult)
+        return intervalSum
+
         try:
             s = int(s)
         except ValueError:
