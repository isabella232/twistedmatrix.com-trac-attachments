Index: twisted/names/dns.py
===================================================================
--- twisted/names/dns.py	(revision 36772)
+++ twisted/names/dns.py	(working copy)
@@ -44,6 +44,7 @@
 
 # System imports
 import warnings
+import re
 
 import struct, random, types, socket
 from itertools import chain
@@ -209,33 +210,46 @@
     Parse a string description of an interval into an integer number of seconds.
 
     @param s: An interval definition constructed as an interval duration
-        followed by an interval unit.  An interval duration is a base ten
-        representation of an integer.  An interval unit is one of the following
+        followed by an interval unit. An interval duration is a base ten
+        representation of an integer. An interval unit is one of the following
         letters: S (seconds), M (minutes), H (hours), D (days), W (weeks), or Y
         (years).  For example: C{"3S"} indicates an interval of three seconds;
-        C{"5D"} indicates an interval of five days.  Alternatively, C{s} may be
-        any non-string and it will be returned unmodified.
+        C{"5D6H"} indicates an interval of five days and six hours.
+        Alternatively, C{s} may be any non-string and it will returned
+        unmodified.
     @type s: text string (C{str}) for parsing; anything else for passthrough.
 
     @return: an C{int} giving the interval represented by the string C{s}, or
         whatever C{s} is if it is not a string.
     """
-    suffixes = (
-        ('S', 1), ('M', 60), ('H', 60 * 60), ('D', 60 * 60 * 24),
-        ('W', 60 * 60 * 24 * 7), ('Y', 60 * 60 * 24 * 365)
-    )
+    suffixes = {
+        'S' : 1, 
+        'M' : 60, 
+        'H' : 60 * 60, 
+        'D' : 60 * 60 * 24,
+        'W' : 60 * 60 * 24 * 7, 
+        'Y' : 60 * 60 * 24 * 365
+    }
+
     if isinstance(s, str):
         s = s.upper().strip()
-        for (suff, mult) in suffixes:
-            if s.endswith(suff):
-                return int(float(s[:-1]) * mult)
-        try:
-            s = int(s)
-        except ValueError:
+
+        badMatch = re.compile('[^\d|S|M|H|D|W|Y]')
+        if badMatch.findall(s):
             raise ValueError("Invalid time interval specifier: " + s)
-    return s
 
+        parsedInterval = re.compile('(\d+)([S|M|H|D|W|Y])')
+        interval = {key : value for (value, key) in parsedInterval.findall(s)}
+        intervalSum = 0
 
+        for suff in suffixes.iterkeys():
+            if suff in interval:
+                intervalSum += int(float(interval[suff]) * suffixes[suff])
+        return intervalSum
+    else:
+        return s
+
+
 def readPrecisely(file, l):
     buff = file.read(l)
     if len(buff) < l:
Index: twisted/names/test/test_dns.py
===================================================================
--- twisted/names/test/test_dns.py	(revision 36772)
+++ twisted/names/test/test_dns.py	(working copy)
@@ -103,7 +103,15 @@
         """
         self.assertEqual(6 * 31536000, dns.str2time("6Y"))
 
+    def test_combo(self): 
+        """ 
+        Like L{test_seconds}, but for a combination of C{"Y"}, C{"W"}, C{"D"}, 
+        C{"H"}, C{"M"}, and C{"S"}. Tests for the combination 
+        C{"6Y5W4D3H2M1S"} which equals C{192596521}. 
+        """ 
+        self.assertEqual(192596521, dns.str2time("6Y5W4D3H2M1S"))
 
+
     def test_invalidPrefix(self):
         """
         If a non-integer prefix is given, L{dns.str2time} raises L{ValueError}.
