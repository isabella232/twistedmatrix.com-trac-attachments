Index: twisted/words/xish/xpathparser.py
===================================================================
--- twisted/words/xish/xpathparser.py	(revision 19736)
+++ twisted/words/xish/xpathparser.py	(working copy)
@@ -327,9 +327,9 @@
         ('\\s+', re.compile('\\s+')),
         ('INDEX', re.compile('[0-9]+')),
         ('WILDCARD', re.compile('\\*')),
-        ('IDENTIFIER', re.compile('[a-zA-Z][a-zA-Z0-9_\\-]*')),
-        ('ATTRIBUTE', re.compile('\\@[a-zA-Z][a-zA-Z0-9_\\-]*')),
-        ('FUNCNAME', re.compile('[a-zA-Z][a-zA-Z0-9_]*')),
+        ('IDENTIFIER', re.compile('\w+', re.U)),
+        ('ATTRIBUTE', re.compile('\\@\w+', re.U)),
+        ('FUNCNAME', re.compile('\w+', re.U)),
         ('CMP_EQ', re.compile('\\=')),
         ('CMP_NE', re.compile('\\!\\=')),
         ('STR_DQ', re.compile('"([^"]|(\\"))*?"')),
Index: twisted/words/xish/xpath.py
===================================================================
--- twisted/words/xish/xpath.py	(revision 19736)
+++ twisted/words/xish/xpath.py	(working copy)
@@ -4,10 +4,7 @@
 # See LICENSE for details.
 
 
-try:
-    import cStringIO as StringIO
-except ImportError:
-    import StringIO
+import StringIO
 
 def _isStr(s):
     """ Internal method to determine if an object is a string """
@@ -113,8 +110,8 @@
         if self.childLocation != None:
             for c in elem.elements():
                 self.childLocation.queryForString(c, resultbuf)
-        else:            
-            resultbuf.write(str(elem))
+        else:
+            resultbuf.write(unicode(elem))
 
     def queryForNodes(self, elem, resultlist):
         if not self.matchesPredicates(elem):
