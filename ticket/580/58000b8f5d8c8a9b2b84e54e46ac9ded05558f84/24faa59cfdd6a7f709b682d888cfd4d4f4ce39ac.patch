Index: twisted/web2/test/test_static.py
===================================================================
--- twisted/web2/test/test_static.py	(revision 17716)
+++ twisted/web2/test/test_static.py	(working copy)
@@ -7,20 +7,47 @@
 from twisted.web2 import iweb
 
 class TestData(BaseCase):
-    def test_data(self):
-        text = "Hello, World\n"
-        data = static.Data(text, "text/plain")
+    def setUp(self):
+        self.text = "Hello, World\n"
+        self.data = static.Data(self.text, "text/plain")
 
-        self.assertEquals(data.data, text)
-        self.assertEquals(data.type, http_headers.MimeType("text", "plain"))
-        self.assertEquals(data.contentType(), http_headers.MimeType("text", "plain"))
-        self.failUnless(data.etag())
 
+    def test_data_state(self):
+        """
+        Test the internal state of the Data object
+        """
+        self.assert_(hasattr(self.data, "created_time"))
+        self.assertEquals(self.data.data, self.text)
+        self.assertEquals(self.data.type, http_headers.MimeType("text", "plain"))
+        self.assertEquals(self.data.contentType(), http_headers.MimeType("text", "plain"))
+
+
+    def test_etag(self):
+        """
+        Test that we can get an ETag
+        """
+        self.failUnless(self.data.etag())
+
+
+    def test_render(self):
+        """
+        Test that the result from Data.render is acceptable, including the
+        response code, the content-type header, and the actual response body
+        itself.
+        """
+        response = iweb.IResponse(self.data.render(None))
+        self.assertEqual(response.code, 200)
+        self.assert_(response.headers.hasHeader("content-type"))
+        self.assertEqual(response.headers.getHeader("content-type"),
+                         http_headers.MimeType("text", "plain"))
         def checkStream(data):
-            self.assertEquals(str(data), text)
+            self.assertEquals(str(data), self.text)
 
-        return stream.readStream(iweb.IResponse(data.render(None)).stream, checkStream)
+        return stream.readStream(iweb.IResponse(self.data.render(None)).stream,
+                                 checkStream)
 
+
+
 class TestFileSaver(BaseCase):
     def setUpClass(self):
         self.tempdir = self.mktemp()
Index: twisted/web2/static.py
===================================================================
--- twisted/web2/static.py	(revision 17716)
+++ twisted/web2/static.py	(working copy)
@@ -149,8 +149,12 @@
         return self.type
 
     def render(self, req):
-        return http.Response(responsecode.OK, stream=self.data)
+        return http.Response(
+            responsecode.OK,
+            http_headers.Headers({'content-type': self.contentType()}),
+            stream=self.data)
 
+
 class File(StaticRenderMixin):
     """
     File is a resource that represents a plain non-interpreted file
