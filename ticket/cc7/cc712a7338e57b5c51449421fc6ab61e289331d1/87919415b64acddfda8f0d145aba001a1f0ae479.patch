Index: docs/core/howto/pb-usage.rst
===================================================================
--- docs/core/howto/pb-usage.rst	(revision 42613)
+++ docs/core/howto/pb-usage.rst	(working copy)
@@ -17,7 +17,7 @@
 
 
 
-The first example to look at is a complete (although somewhat trivial)
+The first example to look at is a complete, yet trivial, 
 application. It uses ``PBServerFactory()`` on the server side, and 
 ``PBClientFactory()`` on the client side.
 
@@ -36,32 +36,31 @@
 .. literalinclude:: ../examples/pbsimpleclient.py
 
 
-First we look at the server. This defines an Echoer class (derived from 
-:api:`twisted.spread.pb.Root <pb.Root>` ), with a method called 
+The server module defines an Echoer class (derived from 
+:api:`twisted.spread.pb.Root <pb.Root>`), with a method called 
 ``remote_echo()`` . 
-:api:`twisted.spread.pb.Root <pb.Root>` objects (because of
-their inheritance of 
-:api:`twisted.spread.pb.Referenceable <pb.Referenceable>` , described
-later) can define methods with names of the form ``remote_*`` ; a
-client which obtains a remote reference to that 
+:api:`twisted.spread.pb.Root <pb.Root>` objects, because they inherit from
+:api:`twisted.spread.pb.Referenceable <pb.Referenceable>`, (described
+later) can define methods with names of the form ``remote_*`` , and a
+client which obtains a remote reference to a 
 :api:`twisted.spread.pb.Root <pb.Root>` object will be able to
-invoke those methods.
+invoke those methods remotely.
 
 
 
 
-The :api:`twisted.spread.pb.Root <pb.Root>` -ish object is
-given to a :api:`twisted.spread.pb.PBServerFactory <pb.PBServerFactory>` ``()`` . This is a 
+The :api:`twisted.spread.pb.Root <pb.Root>`-ish object is
+given to a :api:`twisted.spread.pb.PBServerFactory <pb.PBServerFactory>`. This is a 
 :api:`twisted.internet.protocol.Factory <Factory>` object like
 any other: the :api:`twisted.internet.protocol.Protocol <Protocol>` objects it creates for new
 connections know how to speak the PB protocol. The object you give to 
 ``pb.PBServerFactory()`` becomes the "root object" , which
 simply makes it available for the client to retrieve. The client may only
-request references to the objects you want to provide it: this helps you
+request references to the objects you want to provide it. This helps you
 implement your security model. Because it is so common to export just a
 single object (and because a ``remote_*`` method on that one can
 return a reference to any other object you might want to give out), the
-simplest example is one where the :api:`twisted.spread.pb.PBServerFactory <PBServerFactory>` is given the root object, and
+simplest program is one where the :api:`twisted.spread.pb.PBServerFactory <PBServerFactory>` is given the root object, and
 the client retrieves it.
 
 
@@ -71,20 +70,23 @@
 :api:`twisted.spread.pb.PBClientFactory <pb.PBClientFactory>` to make a
 connection to a given port. This is a two-step process involving opening
 a TCP connection to a given host and port and requesting the root object
-using ``.getRootObject()`` .
+using ``.getRootObject()``. :api:`twisted.spread.pb.PBClientFactory.getRootObject <pb.PBClientFactor>` handles all the details of waiting for the creation of a connection.
+It returns a :api:`twisted.internet.defer.Deferred <Deferred>`.
+This :api:`twisted.internet.defer.Deferred <Deferred>` will have its callback called if the reactor connects to the remote server and :api:`twisted.spread.pb.PBClientFactory <PBClientFactory>` gets the root.
+It will have its errback called if the object connection fails for any reason, whether it was host lookup failure, connection refusal, or some server side error.
 
 
 
 
 Because ``.getRootObject()`` has to wait until a network
-connection has been made and exchange some data, it may take a while,
-so it returns a Deferred, to which the gotObject() callback is
-attached. (See the documentation on :doc:`Deferring Execution <defer>` for a complete explanation of :api:`twisted.internet.defer.Deferred <Deferred>` s). If and when the
+connection has been made and some data has been exchanged, it may take a while,
+so it returns a :api:`twisted.internet.Defer.Deferred <Deferred>`, to which the `gotRootObject` callback is
+attached. See the documentation on :doc:`Deferring Execution <defer>` for a complete explanation of :api:`twisted.internet.defer.Deferred <Deferred>`s. If and when the
 connection succeeds and a reference to the remote root object is
 obtained, this callback is run. The first argument passed to the
-callback is a remote reference to the distant root object.  (you can
-give other arguments to the callback too, see the other parameters for 
-``.addCallback()`` and ``.addCallbacks()`` ).
+callback is a remote reference to the distant root object. Note that you can
+give other arguments to the callback too; see the other parameters for 
+``.addCallback()`` and ``.addCallbacks()``.
 
 
 
@@ -98,26 +100,26 @@
 .. code-block:: python
 
     
-    object.callRemote("echo", "hello network")
+    remoteRefToRoot.callRemote("echo", "hello network")
 
 
 
 
 which causes the server's ``.remote_echo()`` method to be invoked.
-(running ``.callRemote("boom")`` would cause 
-``.remote_boom()`` to be run, etc). Again because of the delay
+Running ``.callRemote("boom")`` would cause 
+``.remote_boom()`` to be run, etc. Because of the delay
 involved, ``callRemote()`` returns a 
 :api:`twisted.internet.defer.Deferred <Deferred>` . Assuming the
 remote method was run without causing an exception (including an attempt to
 invoke an unknown method), the callback attached to that 
 :api:`twisted.internet.defer.Deferred <Deferred>` will be
-invoked with any objects that were returned by the remote method call.
+invoked with whatever is returned by the remote method call.
 
 
 
 
 In this example, the server's ``Echoer`` object has a method
-invoked, *exactly* as if some code on the server side had done:
+invoked *exactly* as if some code on the server side had done:
 
 
 
@@ -126,7 +128,7 @@
 .. code-block:: python
 
     
-    echoer_object.remote_echo("hello network")
+    echoerObject.remote_echo("hello network")
 
 
 
@@ -140,28 +142,28 @@
 From the client's point of view, the remote call gets another :api:`twisted.internet.defer.Deferred <Deferred>` object instead of
 that string. ``callRemote()`` *always* returns a :api:`twisted.internet.defer.Deferred <Deferred>` . This is why PB is
 described as a system for "translucent" remote method calls instead of "transparent" ones: you cannot pretend that the remote object is really
-local. Trying to do so (as some other RPC mechanisms do, coughCORBAcough)
+local. Trying to do so, as some other RPC mechanisms (such as CORBA) do,
 breaks down when faced with the asynchronous nature of the network. Using
 Deferreds turns out to be a very clean way to deal with the whole thing.
 
 
 
 
-The remote reference object (the one given to 
-``getRootObject()`` 's success callback) is an instance the :api:`twisted.spread.pb.RemoteReference <RemoteReference>` class. This means
-you can use it to invoke methods on the remote object that it refers to. Only
+The remote reference object, ie. the one given to 
+``getRootObject()``'s success callback `gotRootObject` is an instance the :api:`twisted.spread.pb.RemoteReference <RemoteReference>` class. This means
+you can use it to invoke methods on the remote object to which it refers. Only
 instances of :api:`twisted.spread.pb.RemoteReference <RemoteReference>` are eligible for 
-``.callRemote()`` . The :api:`twisted.spread.pb.RemoteReference <RemoteReference>` object is the one that lives
+``.callRemote()``. The :api:`twisted.spread.pb.RemoteReference <RemoteReference>` object is the one that lives
 on the remote side (the client, in this case), not the local side (where the
-actual object is defined).
+original object was created).
 
 
 
 
-In our example, the local object is that ``Echoer()`` instance,
-which inherits from :api:`twisted.spread.pb.Root <pb.Root>` ,
+In our example, the local object is that ``Echoer`` instance,
+which inherits from :api:`twisted.spread.pb.Root <pb.Root>`,
 which inherits from 
-:api:`twisted.spread.pb.Referenceable <pb.Referenceable>` . It is that 
+:api:`twisted.spread.pb.Referenceable <pb.Referenceable>`. It is that 
 ``Referenceable`` class that makes the object eligible to be available
 for remote method calls [#]_ . If you have
 an object that is Referenceable, then any client that manages to get a
@@ -179,16 +181,16 @@
    
    
    
-   Also note: the other classes like 
+   The other classes like 
    :api:`twisted.spread.pb.Referenceable <Referenceable>` allow access to
-   other methods, in particular ``perspective_*`` and ``view_*`` 
+   other methods. In particular ``perspective_*`` and ``view_*`` 
    may be accessed.  Don't write local-only methods with these names, because then
    remote callers will be able to do more than you intended.
    
    
    
    
-   Also also note: the other classes like 
+   The other classes like 
    :api:`twisted.spread.pb.Copyable <pb.Copyable>` *do* allow
    access to attributes, but you control which ones they can see.
    
@@ -200,12 +202,12 @@
 You don't have to be a 
 :api:`twisted.spread.pb.Root <pb.Root>` to be remotely callable,
 but you do have to be 
-:api:`twisted.spread.pb.Referenceable <pb.Referenceable>` .  (Objects that
+:api:`twisted.spread.pb.Referenceable <pb.Referenceable>`. Objects that
 inherit from :api:`twisted.spread.pb.Referenceable <pb.Referenceable>` 
 but not from :api:`twisted.spread.pb.Root <pb.Root>` can be
 remotely called, but only 
-:api:`twisted.spread.pb.Root <pb.Root>` -ish objects can be given
-to the :api:`twisted.spread.pb.PBServerFactory <PBServerFactory>` .)
+:api:`twisted.spread.pb.Root <pb.Root>`-ish objects can be given
+to the :api:`twisted.spread.pb.PBServerFactory <PBServerFactory>`.
 
 
 
@@ -237,33 +239,21 @@
 .. literalinclude:: listings/pb/pb1client.py
 
 
-:api:`twisted.spread.pb.PBClientFactory.getRootObject <pb.PBClientFactory.getRootObject>` will
-handle all the details of waiting for the creation of a connection.
-It returns a :api:`twisted.internet.defer.Deferred <Deferred>` , which will have its
-callback called when the reactor connects to the remote server and 
-:api:`twisted.spread.pb.PBClientFactory <pb.PBClientFactory>` gets the
-root, and have its ``errback`` called when the
-object-connection fails for any reason, whether it was host lookup
-failure, connection refusal, or some server-side error.
-
-
-
-
 The root object has a method called ``remote_getTwo`` , which
-returns the ``Two()`` instance. On the client end, the callback gets
+returns the ``Two`` instance. On the client end, the callback gets
 a :api:`twisted.spread.pb.RemoteReference <RemoteReference>` to that
-instance. The client can then invoke two's ``.remote_three()`` 
+instance. The client can then invoke two's ``.remote_foo()`` 
 method.
 
 
 
 
 :api:`twisted.spread.pb.RemoteReference <RemoteReference>` 
-objects have one method which is their purpose for being: ``callRemote`` .  This method allows you to call a
+objects have one method which is their purpose for being: ``callRemote``.  This method allows you to call a
 remote method on the object being referred to by the Reference.  :api:`twisted.spread.pb.RemoteReference.callRemote <RemoteReference.callRemote>` , like :api:`twisted.spread.pb.PBClientFactory.getRootObject <pb.PBClientFactory.getRootObject>` , returns
-a :api:`twisted.internet.defer.Deferred <Deferred>` .
-When a response to the method-call being sent arrives, the :api:`twisted.internet.defer.Deferred <Deferred>` 's ``callback`` or ``errback`` 
-will be made, depending on whether an error occurred in processing the
+a :api:`twisted.internet.defer.Deferred <Deferred>`.
+When a response to the method-call being sent arrives, the :api:`twisted.internet.defer.Deferred <Deferred>`'s ``callback`` or ``errback`` 
+is made, depending on whether an error occurred in processing the
 method call.
 
 
@@ -273,7 +263,7 @@
 Just remember that any object that might get passed "over the wire" must
 inherit from :api:`twisted.spread.pb.Referenceable <Referenceable>` 
 (or one of the other flavors). If you try to pass a non-Referenceable object
-(say, by returning one from a ``remote_*`` method), you'll get an 
+(for example, by returning one from a ``remote_*`` method), you'll get an 
 :api:`twisted.spread.jelly.InsecureJelly <InsecureJelly>` 
 exception [#]_ .
 
@@ -310,20 +300,18 @@
 .. literalinclude:: listings/pb/pb2client.py
 
 
-The server gives a ``Two()`` instance to the client, who then
-returns the reference back to the server. The server compares the "two" 
-given with the "two" received and shows that they are the same, and that
-both are real objects instead of remote references.
+The server makes a ``Two``, which is a :api:'twisted.spread.pb.Referenceable <Referenceable>`.
+When the client calls `callRemote("getTwo")`, `getTwo` is invoked on the server's `One` and returns the `Referenceable` `Two` object.
+On the client side, this is received and unserialized into a :api:`twisted.spread.pb.RemoteReference <RemoteReference>`.
+When the client sends this :api:`twisted.sread.pb.RemoteReference <RemoteReference>` to the server, the server identifies it as the :api:`twisted.spread.pb.Referenceable <Referenceable>` it previously sent to the client.
+Therefore, when the server compares the "two" it got from the client with its original "two", it finds that they are the same, and that they are both :api:`twisted.spread.pb.Referenceable <Referenceable>` objects.
 
 
 
 
-A few other techniques are demonstrated in ``pb2client.py`` . One
-is that the callbacks are are added with ``.addCallback`` instead
-of ``.addCallbacks`` . As you can tell from the :doc:`Deferred <defer>` documentation, ``.addCallback`` is a
-simplified form which only adds a success callback. The other is that to
-keep track of state from one callback to the next (the remote reference to
-the main One() object), we create a simple class, store the reference in an
+A new technique is demonstrated in ``pb2client.py``.
+To
+keep track of state from one callback to the next, we create a simple class, store the reference to the `One` in an
 instance thereof, and point the callbacks at a sequence of bound methods.
 This is a convenient way to encapsulate a state machine. Each response kicks
 off the next method, and any data that needs to be carried from one state to
@@ -336,10 +324,10 @@
 given them. Don't base your zillion-dollar stock-trading clearinghouse
 server on the idea that you trust the client to give you back the right
 reference. The security model inherent in PB means that they can *only* 
-give you back a reference that you've given them for the current connection
-(not one you've given to someone else instead, nor one you gave them last
-time before the TCP session went down, nor one you haven't yet given to the
-client), but just like with URLs and HTTP cookies, the particular reference
+give you back a reference that you've given them for the current connection.
+They cannot give you one you've given to someone else instead, nor one you gave them last time before the TCP session went down,
+nor one you haven't yet given to the client.
+However, just like with URLs and HTTP cookies, the particular reference
 they give you is entirely under their control.
 
 
@@ -395,11 +383,11 @@
 
 
 The only special thing you do is to define your ``Exception`` 
-subclass by deriving it from :api:`twisted.spread.pb.Error <pb.Error>` . When any remotely-invokable method
+subclass by deriving it from :api:`twisted.spread.pb.Error <pb.Error>`. When any remotely-invokable method
 (like ``remote_*`` or ``perspective_*`` ) raises a 
 ``pb.Error`` -derived exception, a serialized form of that Exception
 object will be sent back over the wire [#]_ . The other side (which
-did ``callRemote`` ) will have the "``errback``" 
+did ``callRemote``) will have the "``errback``" 
 callback run with a :api:`twisted.python.failure.Failure <Failure>` object that contains a copy of
 the exception object. This ``Failure`` object can be queried to
 retrieve the error message and a stack traceback.
@@ -456,8 +444,8 @@
 
 
 
-Oh, and what happens if you raise some other kind of exception? Something
-that *isn't* subclassed from ``pb.Error`` ? Well, those are
+What happens if you raise some other kind of exception, something
+that *isn't* subclassed from ``pb.Error`` ? Those are
 called "unexpected exceptions" , which make Twisted think that something
 has *really* gone wrong. These will raise an exception on the 
 *server* side. This won't break the connection (the exception is
@@ -540,9 +528,9 @@
      stale reference: the client disconnected or crashed
 
 
+(XXX The next two paragraphs should be ignored, as the code does not work as advertised)
 
 
-
 In this example, ``callTwo`` tries to send an instance of a
 locally-defined class through ``callRemote`` . The default security
 model implemented by :api:`twisted.spread.jelly <jelly>` 
