Index: docs/core/examples/pbsimpleclient.py
===================================================================
--- docs/core/examples/pbsimpleclient.py	(revision 42594)
+++ docs/core/examples/pbsimpleclient.py	(working copy)
@@ -5,14 +5,32 @@
 
 from twisted.spread import pb
 from twisted.internet import reactor
-from twisted.python import util
 
+def gotRootObject(remoteRefToRoot):
+    """Remotely invoke the 'echo' method on the remote object"""
+    return remoteRefToRoot.callRemote("echo", "hello network")
+
+def handleEchoReceived(response):
+    """Handle data coming back from the remote object's echo method"""
+    return "server echoed: %s"%(response,)
+
+def handleFailure(reason):
+    """
+    Handle the case in which we fail to get a remote reference to the root
+    object.
+    """
+    return "error: %s"%str(reason.value)
+
+def output(message):
+    """Display a success or failure message"""
+    print(message)
+
 factory = pb.PBClientFactory()
 reactor.connectTCP("localhost", 8789, factory)
-d = factory.getRootObject()
-d.addCallback(lambda object: object.callRemote("echo", "hello network"))
-d.addCallback(lambda echo: 'server echoed: '+echo)
-d.addErrback(lambda reason: 'error: '+str(reason.value))
-d.addCallback(util.println)
-d.addCallback(lambda _: reactor.stop())
+d = factory.getRootObject() #Get a remote reference to server-side root object
+d.addCallback(gotRootObject) #and ask that object to echo some data.
+d.addCallback(handleEchoReceived) #Prepare a message indicating the echo worked,
+d.addErrback(handleFailure) #or, prepare a message indicating something failed.
+d.addCallback(output) #Display the message.
+d.addCallback(lambda _: reactor.stop())  #Finally, stop the reactor.
 reactor.run()
Index: docs/core/howto/listings/pb/exc_client.py
===================================================================
--- docs/core/howto/listings/pb/exc_client.py	(revision 42594)
+++ docs/core/howto/listings/pb/exc_client.py	(working copy)
@@ -10,19 +10,22 @@
     factory = pb.PBClientFactory()
     reactor.connectTCP("localhost", 8800, factory)
     d = factory.getRootObject()
-    d.addCallbacks(got_obj)
+    d.addCallbacks(gotRoot)
     reactor.run()
 
-def got_obj(obj):
+def gotRoot(obj):
+    """Invoke a remote method on the root"""
     # change "broken" into "broken2" to demonstrate an unhandled exception
     d2 = obj.callRemote("broken")
     d2.addCallback(working)
     d2.addErrback(broken)
 
 def working():
+    """Handle the case in which the remote method succeeds"""
     print "erm, it wasn't *supposed* to work.."
     
 def broken(reason):
+    """Handle the case in which the remote method raises an exception"""
     print "got remote Exception"
     # reason should be a Failure (or subclass) holding the MyError exception
     print " .__class__ =", reason.__class__
Index: docs/core/howto/listings/pb/exc_server.py
===================================================================
--- docs/core/howto/listings/pb/exc_server.py	(revision 42594)
+++ docs/core/howto/listings/pb/exc_server.py	(working copy)
@@ -14,13 +14,17 @@
     """This is an Unexpected Exception. Something really bad happened."""
     pass
 
+
 class One(pb.Root):
     def remote_broken(self):
-        msg = "fall down go boom"
+        """Raise a pb.Error"""
+        msg = "An error occurred."
         print "raising a MyError exception with data '%s'" % msg
         raise MyError(msg)
+
     def remote_broken2(self):
-        msg = "hadda owie"
+        """Raise a normal Exception"""
+        msg = "An upexpected error occurred."
         print "raising a MyError2 exception with data '%s'" % msg
         raise MyError2(msg)
 
Index: docs/core/howto/listings/pb/pb1client.py
===================================================================
--- docs/core/howto/listings/pb/pb1client.py	(revision 42594)
+++ docs/core/howto/listings/pb/pb1client.py	(working copy)
@@ -25,7 +25,7 @@
 
 def got_obj2(obj2):
     print "got second object:", obj2
-    print "telling it to do three(12)"
-    obj2.callRemote("three", 12)
+    print "telling it to do foo(12)"
+    obj2.callRemote("foo", 12)
 
 main()
Index: docs/core/howto/listings/pb/pb1server.py
===================================================================
--- docs/core/howto/listings/pb/pb1server.py	(revision 42594)
+++ docs/core/howto/listings/pb/pb1server.py	(working copy)
@@ -6,8 +6,8 @@
 from twisted.spread import pb
 
 class Two(pb.Referenceable):
-    def remote_three(self, arg):
-        print "Two.three was given", arg
+    def remote_foo(self, arg):
+        print "Two.foo called with argument: ", arg
         
 class One(pb.Root):
     def remote_getTwo(self):
Index: docs/core/howto/listings/pb/pb2client.py
===================================================================
--- docs/core/howto/listings/pb/pb2client.py	(revision 42594)
+++ docs/core/howto/listings/pb/pb2client.py	(working copy)
@@ -22,13 +22,13 @@
         self.oneRef = None
 
     def step1(self, obj):
-        print "got one object:", obj
+        print "got One object:", obj
         self.oneRef = obj
         print "asking it to getTwo"
         self.oneRef.callRemote("getTwo").addCallback(self.step2)
 
     def step2(self, two):
-        print "got two object:", two
+        print "got Two object:", two
         print "giving it back to one"
         print "one is", self.oneRef
         self.oneRef.callRemote("checkTwo", two)
Index: docs/core/howto/listings/pb/pb2server.py
===================================================================
--- docs/core/howto/listings/pb/pb2server.py	(revision 42594)
+++ docs/core/howto/listings/pb/pb2server.py	(working copy)
@@ -9,18 +9,23 @@
 class Two(pb.Referenceable):
     def remote_print(self, arg):
         print "two.print was given", arg
-        
+
+
 class One(pb.Root):
     def __init__(self, two):
         #pb.Root.__init__(self)   # pb.Root doesn't implement __init__
         self.two = two
+
     def remote_getTwo(self):
+        """Return my two object"""
         print "One.getTwo(), returning my two called", self.two
         return self.two
+
     def remote_checkTwo(self, newtwo):
+        """Compare a Two received over the network with my own Two"""
         print "One.checkTwo(): comparing my two", self.two
         print "One.checkTwo(): against your two", newtwo
-        if self.two == newtwo:
+        if self.two is newtwo:
             print "One.checkTwo(): our twos are the same"
         
 
