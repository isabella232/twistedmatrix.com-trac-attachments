Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 23670)
+++ twisted/internet/defer.py	(working copy)
@@ -121,20 +121,23 @@
 def passthru(arg):
     return arg
 
+deferred_debug = False
+
 def setDebugging(on):
     """Enable or disable Deferred debugging.
 
     When debugging is on, the call stacks from creation and invocation are
     recorded, and added to any AlreadyCalledErrors we raise.
     """
-    Deferred.debug=bool(on)
+    global deferred_debug
+    deferred_debug = bool(on)
 
 def getDebugging():
     """Determine whether Deferred debugging is enabled.
     """
-    return Deferred.debug
+    return deferred_debug
 
-class Deferred:
+class Deferred(object):
     """This is a callback which will be put off until later.
 
     Why do we want this? Well, in cases where a function in a threaded
@@ -149,23 +152,23 @@
     For more information about Deferreds, see doc/howto/defer.html or
     U{http://twistedmatrix.com/projects/core/documentation/howto/defer.html}
     """
-    called = 0
-    paused = 0
-    timeoutCall = None
-    _debugInfo = None
 
-    # Are we currently running a user-installed callback?  Meant to prevent
-    # recursive running of callbacks when a reentrant call to add a callback is
-    # used.
-    _runningCallbacks = False
+    __slots__ = ['called', 'paused', 'timeoutCall', '_debugInfo', 'result',
+                 '_runningCallbacks', 'callbacks']
 
-    # Keep this class attribute for now, for compatibility with code that
-    # sets it directly.
-    debug = False
+    def __init__(self):
+        self.called = 0
+        self.paused = 0
+        self.timeoutCall = None
+        self._debugInfo = None
 
-    def __init__(self):
+        # Are we currently running a user-installed callback? Meant to
+        # prevent recursive running of callbacks when a reentrant call
+        # to add a callback is used.
+        self._runningCallbacks = False
+
         self.callbacks = []
-        if self.debug:
+        if deferred_debug:
             self._debugInfo = DebugInfo()
             self._debugInfo.creator = traceback.format_stack()[:-1]
 
@@ -290,13 +293,13 @@
 
     def _startRunCallbacks(self, result):
         if self.called:
-            if self.debug:
+            if deferred_debug:
                 if self._debugInfo is None:
                     self._debugInfo = DebugInfo()
                 extra = "\n" + self._debugInfo._getDebugTracebacks()
                 raise AlreadyCalledError(extra)
             raise AlreadyCalledError
-        if self.debug:
+        if deferred_debug:
             if self._debugInfo is None:
                 self._debugInfo = DebugInfo()
             self._debugInfo.invoker = traceback.format_stack()[:-2]
