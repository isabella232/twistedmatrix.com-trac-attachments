Index: twisted/internet/_pollingfile.py
===================================================================
--- twisted/internet/_pollingfile.py	(revision 38381)
+++ twisted/internet/_pollingfile.py	(working copy)
@@ -191,7 +192,7 @@
     def bufferEmpty(self):
         if self.producer is not None and ((not self.streamingProducer) or
                                           self.producerPaused):
-            self.producer.producerPaused = 0
+            self.producerPaused = 0
             self.producer.resumeProducing()
             return True
         return False
Index: twisted/internet/test/test_pollingfile.py
===================================================================
--- twisted/internet/test/test_pollingfile.py	(revision 38381)
+++ twisted/internet/test/test_pollingfile.py	(working copy)
@@ -4,17 +4,99 @@
 """
 Tests for L{twisted.internet._pollingfile}.
 """
+import os
 
 from twisted.python.runtime import platform
 from twisted.trial.unittest import TestCase
+from twisted.protocols import basic
+from twisted.internet.test.reactormixins import ReactorBuilder
 
+
+
 if platform.isWindows():
+    import win32pipe
+    import win32security
+
     from twisted.internet import _pollingfile
+
+    from twisted.internet._pollingfile import _PollingTimer
+    _skipNotWindows = None
 else:
-    _pollingfile = None
+    _skipNotWindows = "Test will run only on Windows."
+    _PollingTimer = object
+ 
 
+ 
+class PipeRunner(_PollingTimer):
+    """
+    Builds, initializes and runs a pair of read/write pipes.
+    """
+    def __init__(self, pipeSize, doneReadCB, doneWriteCB, receivedCB, reactor):
+        _PollingTimer.__init__(self, reactor)
+        sAttrs = win32security.SECURITY_ATTRIBUTES()
+        sAttrs.bInheritHandle = 1
+        hRead, hWrite = win32pipe.CreatePipe(sAttrs, pipeSize)
+        self.reader = _pollingfile._PollableReadPipe(hRead, receivedCB, doneReadCB)
+        self.writer = _pollingfile._PollableWritePipe(hWrite, doneWriteCB)
+        self._addPollableResource(self.reader)
+        self._addPollableResource(self.writer)
 
 
+
+class TestPollablePipes(ReactorBuilder):
+    """
+    Tests for L{_pollingfile._PollableWritePipe} and
+    L{_pollingfile._PollableReadPipe}.
+    """
+    def setUp(self):
+        self._oldBufferSize = _pollingfile.FULL_BUFFER_SIZE
+
+
+    def tearDown(self):
+        _pollingfile.FULL_BUFFER_SIZE = self._oldBufferSize
+
+
+    def test_pushProducerPausedAttribute(self):
+        """
+        Test write pipe as a consumer using a push producer.
+
+        See Ticket #6492: bufferEmpty sets producerPaused attribute on the
+        producer instead of on itself.
+        """
+        pipeSize = 512  # set a small pipe buffer size
+        _pollingfile.FULL_BUFFER_SIZE = 1024
+        testMessage = '0' * 2048
+
+        class TestProtocol(basic.LineReceiver):
+            def lineReceived(self, line):
+                self.testResponse = line
+                transport.writer.close()
+
+        class TestProducer(object):
+            def resumeProducing(self):
+                transport.writer.write(testMessage+"\r\n")
+
+            def pauseProducing(self):
+                pass
+
+            def stopProducing(self):
+                pass
+
+        reactor = self.buildReactor()
+        r, w = lambda: reactor.stop(), lambda: None
+        protocol, producer = TestProtocol(), TestProducer()
+        pre_producer_attribs = set(dir(producer))
+        transport = PipeRunner(pipeSize, r, w, protocol.dataReceived, reactor)
+        transport.writer.registerProducer(producer, True)
+        producer.resumeProducing()
+        self.runReactor(reactor)
+        self.assertEqual(testMessage, protocol.testResponse)
+        difference = set(dir(producer)).difference(pre_producer_attribs)
+        self.assertEqual(difference, set())
+
+globals().update(TestPollablePipes.makeTestCaseClasses())
+
+
 class TestPollableWritePipe(TestCase):
     """
     Tests for L{_pollingfile._PollableWritePipe}.
@@ -41,6 +123,7 @@
 
 
 
+if _skipNotWindows:
+    TestPollablePipes.skip = skipMessage
+    TestPollableWritePipeUnicode.skip = skipMessage
 
-if _pollingfile is None:
-    TestPollableWritePipe.skip = "Test will run only on Windows."
