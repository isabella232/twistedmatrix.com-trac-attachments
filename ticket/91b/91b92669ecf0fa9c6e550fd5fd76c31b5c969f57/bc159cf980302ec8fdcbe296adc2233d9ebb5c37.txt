Index: twisted/python/dist.py
===================================================================
--- twisted/python/dist.py	(revision 22422)
+++ twisted/python/dist.py	(working copy)
@@ -9,7 +9,7 @@
 import sys, os
 from distutils.command import build_scripts, install_data, build_ext, build_py
 from distutils.errors import CompileError
-from distutils import core
+import setuptools
 
 twisted_subprojects = ["conch", "flow", "lore", "mail", "names",
                        "news", "pair", "runner", "web", "web2",
@@ -62,15 +62,12 @@
             kw['cmdclass']['build_py'] = build_py_twisted
 
     if 'detectExtensions' in kw:
-        if 'ext_modules' not in kw:
-            kw['ext_modules'] = [True] # distutils is so lame
-
         dE = kw['detectExtensions']
         del kw['detectExtensions']
         class my_build_ext(build_ext_twisted):
             detectExtensions = dE
         kw.setdefault('cmdclass', {})['build_ext'] = my_build_ext
-    return core.setup(**kw)
+    return setuptools.setup(**kw)
 
 def getVersion(proj, base="twisted"):
     """
Index: twisted/__init__.py
===================================================================
--- twisted/__init__.py	(revision 22422)
+++ twisted/__init__.py	(working copy)
@@ -14,14 +14,6 @@
     raise RuntimeError("Twisted requires Python 2.3 or later.")
 del sys
 
-# Ensure zope.interface is installed
-try:
-    from zope.interface import Interface
-    del Interface
-except ImportError:
-    raise ImportError("you need zope.interface installed "
-                      "(http://zope.org/Products/ZopeInterface/)")
-
 # Ensure compat gets imported
 from twisted.python import compat
 del compat
Index: twisted/topfiles/setup.py
===================================================================
--- twisted/topfiles/setup.py	(revision 22422)
+++ twisted/topfiles/setup.py	(working copy)
@@ -12,7 +12,6 @@
     print >>sys.stderr, "You must use at least Python 2.3 for Twisted"
     sys.exit(3)
 
-import distutils
 from distutils.core import Extension
 
 if os.path.exists('twisted'):
@@ -80,6 +79,7 @@
     maintainer_email="glyph@twistedmatrix.com",
     url="http://twistedmatrix.com/",
     license="MIT",
+    install_requires=['zope.interface'],
     long_description="""\
 An extensible framework for Python programming, with special focus
 on event-based network programming and multiprotocol integration.
@@ -96,11 +96,15 @@
              'twisted_trial', 'twisted_reactors'],
     data_files=dist.getDataFiles('twisted', ignore=dist.twisted_subprojects),
     detectExtensions=detectExtensions,
-    scripts= [
-        'bin/manhole', 'bin/mktap', 'bin/twistd',
-        'bin/tap2deb', 'bin/tap2rpm', 'bin/tapconvert',
-        'bin/trial',
-    ],
+    entry_points={ 'console_scripts': [
+            'manhole = twisted.scripts.manhole:run',
+            'mktap = twisted.scripts.mktap:run',
+            'twistd = twisted.scripts.twistd:run',
+            'tap2deb = twisted.scripts.tap2deb:run',
+            'tap2rpm = twisted.scripts.tap2rpm:run',
+            'tapconvert = twisted.scripts.tapconvert:run',
+            'trial = twisted.scripts.trial:run',
+            ] }
 )
 
 
Index: setup.py
===================================================================
--- setup.py	(revision 22422)
+++ setup.py	(working copy)
@@ -1,134 +0,0 @@
-#!/usr/bin/env python
-
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
-# See LICENSE for details.
-
-"""
-Distutils-launcher for Twisted projects.
-
-This is a script which emulates a distutils-style setup.py, by delegating its
-invocation arguments to actual distutils setup.py scripts for each Twisted
-subproject in turn.
-
-It locates other setup.py scripts by detecting whether it is run in a 'sumo'
-configuration, which is the structure of the released tarballs, or a 'non-sumo'
-(development) configuration, which is the structure of the SVN repository.
-"""
-
-import sys, os, glob
-
-sumoSubprojects = ['core', 'conch', 'lore', 'mail', 'names',
-                   'runner', 'web', 'words', 'news']
-
-specialPaths = {'core': 'twisted/topfiles/setup.py'}
-
-
-def runInDir(dir, f, *args, **kw):
-    """
-    Run a function after chdiring to a directory, and chdir back to
-    the original directory afterwards, even if the function fails.
-    """
-    origdir = os.path.abspath('.')
-    os.chdir(dir)
-    try:
-        return f(*args, **kw)
-    finally:
-        os.chdir(origdir)
-
-
-def getSumoProjDir(proj):
-    """
-    Return the existing directory which contains the specified
-    subproject. If no applicable directory is found, None is returned
-    (which may be because we are not running from a Sumo tarball). If
-    more than one appropriate directory is found, an AssertionError is
-    raised.
-    """
-    globst = 'Twisted%s-*' % proj.capitalize()
-    gl = glob.glob(globst)
-    assert not len(gl) > 1, 'Wrong number of %s directories found!?' % (proj,)
-    if gl:
-        return gl[0]
-
-
-def findSetupPy(project):
-    """
-    Try to find a setup.py file, and quit the process if none is found.
-    @returns: tuple of (setup.py path,  sumoMode), where sumoMode is a boolean.
-    """
-    tried = []
-
-    setupPy = specialPaths.get(project)
-    tried.append(setupPy)
-    if setupPy and os.path.exists(setupPy):
-        return (setupPy, False)
-
-    setupPy = os.path.join('twisted', project, 'topfiles', 'setup.py')
-    tried.append(setupPy)
-    if os.path.exists(setupPy):
-        return (setupPy, False)
-
-    projdir = getSumoProjDir(project)
-    if projdir:
-        setupPy = os.path.join(projdir, 'setup.py')
-        tried.append(setupPy)
-        if os.path.exists(setupPy):
-            return (setupPy, True)
-
-    sys.stderr.write("Error: No such project '%s'.\n" % (project,))
-    sys.stderr.write(" (%s not found)\n" % (tried,))
-    sys.exit(1)
-
-def runSetup(project, args):
-    setupPy, sumoMode = findSetupPy(project)
-
-    # Packaged setup.py files want to be run in the root directory of
-    # their source, whereas out of SVN they should be run from the
-    # root directory of the entire tree.
-    if sumoMode:
-        result = runInDir(os.path.dirname(setupPy), os.spawnv,
-                          os.P_WAIT, sys.executable,
-                          [sys.executable, 'setup.py'] + args)
-    else:
-        result = os.spawnv(os.P_WAIT, sys.executable,
-                           [sys.executable, setupPy] + args)
-
-    if result != 0:
-        sys.stderr.write(
-            "Error: Subprocess exited with result %d for project %s\n" %
-            (result, project))
-        sys.exit(1)
-
-
-def main(args):
-    """
-    Delegate setup.py functionality to individual subproject setup.py scripts.
-
-    If we are running from a Sumo tarball, the TwistedCore-* directory
-    will be added to PYTHONPATH so setup.py scripts can use
-    functionality from Twisted.
-    """
-    os.environ["PYTHONPATH"] = "." + os.pathsep + os.getenv("PYTHONPATH", "")
-    if len(args) == 0 or args[0] in ('-h', '--help'):
-        sys.stdout.write(
-"""Twisted: The Framework Of Your Internet.
-Usage: setup.py <distutils args..>
-""")
-        runSetup('core', ['-h'])
-        sys.exit(0)
-
-    # If we've got a sumo ball, we should insert the Core directory
-    # into sys.path because setup.py files try to import
-    # twisted.python.dist.
-    coredir = getSumoProjDir("core")
-    if coredir and os.path.exists(coredir):
-        os.environ["PYTHONPATH"] += os.pathsep + os.path.abspath(coredir)
-
-    for project in sumoSubprojects:
-        runSetup(project, args)
-
-if __name__ == "__main__":
-    try:
-        main(sys.argv[1:])
-    except KeyboardInterrupt:
-        sys.exit(1)
