Index: twisted/python/dist.py
===================================================================
--- twisted/python/dist.py	(revision 21904)
+++ twisted/python/dist.py	(working copy)
@@ -321,6 +321,6 @@
         try:
             build_ext.build_ext.build_extension(self, ext)
         except CCompilerError, x:
-            print '*'*70+'\n'
+            print '*' * 70 + '\n'
             print "Failed to build extension, continue"
-            print '*'*70+'\n'
+            print '*' * 70 + '\n'
Index: setup.py
===================================================================
--- setup.py	(revision 21904)
+++ setup.py	(working copy)
@@ -3,6 +3,10 @@
 # Copyright (c) 2001-2007 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+Distutils installer for Twisted.
+"""
+
 import sys, os
 
 
@@ -19,38 +23,23 @@
     scripts = []
     for i in projects:
         scripts.extend(dist.getScripts(i))
-    setup_args = dict(
-        # metadata
-        name="Twisted",
-        version=copyright.version,
-        description="An asynchronous networking framework written in Python",
-        author="Twisted Matrix Laboratories",
-        author_email="twisted-python@twistedmatrix.com",
-        maintainer="Glyph Lefkowitz",
-        maintainer_email="glyph@twistedmatrix.com",
-        url="http://twistedmatrix.com/",
-        license="MIT",
-        long_description="""\
-    An extensible framework for Python programming, with special focus
-    on event-based network programming and multiprotocol integration.
 
-    It is expected that one day the project will expanded to the point
-    that the framework will seamlessly integrate with mail, web, DNS,
-    netnews, IRC, RDBMSs, desktop environments, and your toaster.
-    """,
+    setup_args = topsetup.setup_args.copy()
+    setup_args['packages'] = dist.getPackages('twisted')
+    setup_args['ext_modules'] = topsetup.extensions
+    setup_args['cmdclass'] = {'build_ext': dist.build_ext_no_fail}
+    setup_args['scripts'] = scripts
 
-        packages=dist.getPackages('twisted'),
-        data_files=dist.getDataFiles('twisted'),
-        ext_modules=topsetup.extensions,
-        cmdclass={'build_ext': dist.build_ext_no_fail},
-        scripts=scripts,
-    )
     if 'setuptools' in sys.modules:
-        setup_args['install_requires'] = ['zope.interface']
+        setup_args['install_requires']=['zope.interface']
     dist.setup(**setup_args)
 
 
 if __name__ == "__main__":
+    """
+    I invoke twisted.python.dist with the appropriate metadata about the
+    Twisted package.
+    """
     try:
         main(sys.argv[1:])
     except KeyboardInterrupt:
Index: setupdist.py
===================================================================
--- setupdist.py	(revision 21904)
+++ setupdist.py	(working copy)
@@ -1,134 +0,0 @@
-#!/usr/bin/env python
-
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
-# See LICENSE for details.
-
-"""
-Distutils-launcher for Twisted projects.
-
-This is a script which emulates a distutils-style setup.py, by delegating its
-invocation arguments to actual distutils setup.py scripts for each Twisted
-subproject in turn.
-
-It locates other setup.py scripts by detecting whether it is run in a 'sumo'
-configuration, which is the structure of the released tarballs, or a 'non-sumo'
-(development) configuration, which is the structure of the SVN repository.
-"""
-
-import sys, os, glob
-
-sumoSubprojects = ['core', 'conch', 'lore', 'mail', 'names',
-                   'runner', 'web', 'words', 'news']
-
-specialPaths = {'core': 'twisted/topfiles/setup.py'}
-
-
-def runInDir(dir, f, *args, **kw):
-    """
-    Run a function after chdiring to a directory, and chdir back to
-    the original directory afterwards, even if the function fails.
-    """
-    origdir = os.path.abspath('.')
-    os.chdir(dir)
-    try:
-        return f(*args, **kw)
-    finally:
-        os.chdir(origdir)
-
-
-def getSumoProjDir(proj):
-    """
-    Return the existing directory which contains the specified
-    subproject. If no applicable directory is found, None is returned
-    (which may be because we are not running from a Sumo tarball). If
-    more than one appropriate directory is found, an AssertionError is
-    raised.
-    """
-    globst = 'Twisted%s-*' % proj.capitalize()
-    gl = glob.glob(globst)
-    assert not len(gl) > 1, 'Wrong number of %s directories found!?' % (proj,)
-    if gl:
-        return gl[0]
-
-
-def findSetupPy(project):
-    """
-    Try to find a setup.py file, and quit the process if none is found.
-    @returns: tuple of (setup.py path,  sumoMode), where sumoMode is a boolean.
-    """
-    tried = []
-
-    setupPy = specialPaths.get(project)
-    tried.append(setupPy)
-    if setupPy and os.path.exists(setupPy):
-        return (setupPy, False)
-
-    setupPy = os.path.join('twisted', project, 'topfiles', 'setup.py')
-    tried.append(setupPy)
-    if os.path.exists(setupPy):
-        return (setupPy, False)
-
-    projdir = getSumoProjDir(project)
-    if projdir:
-        setupPy = os.path.join(projdir, 'setup.py')
-        tried.append(setupPy)
-        if os.path.exists(setupPy):
-            return (setupPy, True)
-
-    sys.stderr.write("Error: No such project '%s'.\n" % (project,))
-    sys.stderr.write(" (%s not found)\n" % (tried,))
-    sys.exit(1)
-
-def runSetup(project, args):
-    setupPy, sumoMode = findSetupPy(project)
-
-    # Packaged setup.py files want to be run in the root directory of
-    # their source, whereas out of SVN they should be run from the
-    # root directory of the entire tree.
-    if sumoMode:
-        result = runInDir(os.path.dirname(setupPy), os.spawnv,
-                          os.P_WAIT, sys.executable,
-                          [sys.executable, 'setup.py'] + args)
-    else:
-        result = os.spawnv(os.P_WAIT, sys.executable,
-                           [sys.executable, setupPy] + args)
-
-    if result != 0:
-        sys.stderr.write(
-            "Error: Subprocess exited with result %d for project %s\n" %
-            (result, project))
-        sys.exit(1)
-
-
-def main(args):
-    """
-    Delegate setup.py functionality to individual subproject setup.py scripts.
-
-    If we are running from a Sumo tarball, the TwistedCore-* directory
-    will be added to PYTHONPATH so setup.py scripts can use
-    functionality from Twisted.
-    """
-    os.environ["PYTHONPATH"] = "." + os.pathsep + os.getenv("PYTHONPATH", "")
-    if len(args) == 0 or args[0] in ('-h', '--help'):
-        sys.stdout.write(
-"""Twisted: The Framework Of Your Internet.
-Usage: setup.py <distutils args..>
-""")
-        runSetup('core', ['-h'])
-        sys.exit(0)
-
-    # If we've got a sumo ball, we should insert the Core directory
-    # into sys.path because setup.py files try to import
-    # twisted.python.dist.
-    coredir = getSumoProjDir("core")
-    if coredir and os.path.exists(coredir):
-        os.environ["PYTHONPATH"] += os.pathsep + os.path.abspath(coredir)
-
-    for project in sumoSubprojects:
-        runSetup(project, args)
-
-if __name__ == "__main__":
-    try:
-        main(sys.argv[1:])
-    except KeyboardInterrupt:
-        sys.exit(1)
