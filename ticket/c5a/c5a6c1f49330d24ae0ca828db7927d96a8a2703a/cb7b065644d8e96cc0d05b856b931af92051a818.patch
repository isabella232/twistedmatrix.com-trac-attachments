diff --git a/twisted/web/test/test_wsgi.py b/twisted/web/test/test_wsgi.py
index 6705572..0ee17ab 100644
--- a/twisted/web/test/test_wsgi.py
+++ b/twisted/web/test/test_wsgi.py
@@ -798,33 +798,49 @@ class EnvironTests(WSGITestsMixin, TestCase):
 
 
     @inlineCallbacks
-    def test_wsgiErrorsAcceptsOnlyNativeStrings(self):
+    def test_wsgiErrorsExpectsOnlyNativeStringsInPython2(self):
         """
-        The C{'wsgi.errors'} file-like object from the C{environ} C{dict} will
-        permit writes of only native strings in Python 3, and will warn
-        against the use of non-native strings in Python 2.
+        The C{'wsgi.errors'} file-like object from the C{environ} C{dict}
+        expects writes of only native strings in Python 2. Some existing WSGI
+        applications may write non-native (i.e. C{unicode}) strings so, for
+        compatibility, these elicit only a warning in Python 2.
         """
+        if _PY3:
+            raise SkipTest("Not relevant in Python 3")
+
         request, result = self.prepareRequest()
         request.requestReceived()
         environ, _ = yield result
         errors = environ["wsgi.errors"]
 
-        if _PY3:
-            # In Python 3, TypeError is raised.
-            error = self.assertRaises(TypeError, errors.write, b"fred")
-            self.assertEqual(
-                "write() argument must be str, not b'fred' (bytes)",
-                str(error))
-        else:
-            # In Python 2, only a warning is issued; existing WSGI
-            # applications may rely on this non-compliant behaviour.
-            with warnings.catch_warnings(record=True) as caught:
-                errors.write(u"fred")
-            self.assertEqual(1, len(caught))
-            self.assertEqual(UnicodeWarning, caught[0].category)
-            self.assertEqual(
-                "write() argument should be str, not u'fred' (unicode)",
-                str(caught[0].message))
+        with warnings.catch_warnings(record=True) as caught:
+            errors.write(u"fred")
+        self.assertEqual(1, len(caught))
+        self.assertEqual(UnicodeWarning, caught[0].category)
+        self.assertEqual(
+            "write() argument should be str, not u'fred' (unicode)",
+            str(caught[0].message))
+
+
+    @inlineCallbacks
+    def test_wsgiErrorsAcceptsOnlyNativeStringsInPython3(self):
+        """
+        The C{'wsgi.errors'} file-like object from the C{environ} C{dict}
+        permits writes of only native strings in Python 3, and raises
+        C{TypeError} for writes of non-native strings.
+        """
+        if not _PY3:
+            raise SkipTest("Relevant only in Python 3")
+
+        request, result = self.prepareRequest()
+        request.requestReceived()
+        environ, _ = yield result
+        errors = environ["wsgi.errors"]
+
+        error = self.assertRaises(TypeError, errors.write, b"fred")
+        self.assertEqual(
+            "write() argument must be str, not b'fred' (bytes)",
+            str(error))
 
 
 
@@ -1314,8 +1330,15 @@ class StartResponseTests(WSGITestsMixin, TestCase):
     @inlineCallbacks
     def test_headersShouldBePlainList(self):
         """
-        The headers passed to the I{start_response} callable SHOULD be a plain
-        list.
+        According to PEP-3333, the headers passed to the I{start_response}
+        callable MUST be a plain list:
+
+          The response_headers argument ... must be a Python list; i.e.
+          type(response_headers) is ListType
+
+        However, for bug-compatiblity, any sequence is accepted. In both
+        Python 2 and Python 3, only a warning is issued when a sequence other
+        than a list is encountered.
         """
         def application(environ, startResponse):
             startResponse("200 OK", (("not", "list"),))
@@ -1323,9 +1346,6 @@ class StartResponseTests(WSGITestsMixin, TestCase):
 
         request, result = self.prepareRequest(application)
 
-        # In both Python 2 and Python 3, only a warning is issued; existing
-        # WSGI applications may rely on this non-compliant behaviour, and we
-        # can actually work with any sequence type.
         with warnings.catch_warnings(record=True) as caught:
             request.requestReceived()
             yield result
@@ -1361,8 +1381,15 @@ class StartResponseTests(WSGITestsMixin, TestCase):
     @inlineCallbacks
     def test_headersShouldEachBeTuple(self):
         """
-        Each header passed to the I{start_response} callable SHOULD be a
-        tuple.
+        According to PEP-3333, each header passed to the I{start_response}
+        callable should be a tuple:
+
+          The response_headers argument is a list of (header_name,
+          header_value) tuples
+
+        However, for bug-compatiblity, any 2 element sequence is also
+        accepted. In both Python 2 and Python 3, only a warning is issued when
+        a sequence other than a tuple is encountered.
         """
         def application(environ, startResponse):
             startResponse("200 OK", [["not", "tuple"]])
@@ -1370,9 +1397,6 @@ class StartResponseTests(WSGITestsMixin, TestCase):
 
         request, result = self.prepareRequest(application)
 
-        # In both Python 2 and Python 3, only a warning is issued; existing
-        # WSGI applications may rely on this non-compliant behaviour, and we
-        # can actually work with any sequence type.
         with warnings.catch_warnings(record=True) as caught:
             request.requestReceived()
             yield result
