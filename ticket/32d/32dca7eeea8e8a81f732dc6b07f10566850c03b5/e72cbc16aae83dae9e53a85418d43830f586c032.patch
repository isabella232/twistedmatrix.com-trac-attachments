diff --git a/twisted/web/test/requesthelper.py b/twisted/web/test/requesthelper.py
index cf608f3..21239ee 100644
--- a/twisted/web/test/requesthelper.py
+++ b/twisted/web/test/requesthelper.py
@@ -119,7 +119,7 @@ class DummyRequest(object):
         self.requestHeaders = Headers()
         self.responseHeaders = Headers()
         self.responseCode = None
-        self.headers = {}
+        self._headers = {}
         self._finishedDeferreds = []
         self._serverName = b"dummy"
         self.clientproto = b"HTTP/1.0"
@@ -135,22 +135,27 @@ class DummyRequest(object):
         @rtype: C{bytes} or L{NoneType}
         @return: The value of the specified request header.
         """
-        return self.headers.get(name.lower(), None)
+        return self.requestHeaders.getRawHeaders(name.lower(), [None])[0]
 
 
     def getAllHeaders(self):
         """
-        Retrieve all the values of the request headers as a dictionary.
+        Return dictionary mapping the names of all received headers to the last
+        value received for each.
 
-        @return: The entire C{headers} L{dict}.
+        Since this method does not return all header information,
+        C{self.requestHeaders.getAllRawHeaders()} may be preferred.
         """
-        return self.headers
+        headers = {}
+        for k, v in self.requestHeaders.getAllRawHeaders():
+            headers[k.lower()] = v[-1]
+        return headers
 
 
     def setHeader(self, name, value):
         """TODO: make this assert on write() if the header is content-length
         """
-        self.outgoingHeaders[name.lower()] = value
+        self.responseHeaders.addRawHeader(name, value)
 
     def getSession(self):
         if self.session:
diff --git a/twisted/web/test/test_httpauth.py b/twisted/web/test/test_httpauth.py
index c26510b..7a8a6e6 100644
--- a/twisted/web/test/test_httpauth.py
+++ b/twisted/web/test/test_httpauth.py
@@ -356,7 +356,8 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         L{IResource}.
         """
         authorization = b64encode(self.username + b':' + self.password)
-        request.headers[b'authorization'] = b'Basic ' + authorization
+        request.requestHeaders.addRawHeader(b'authorization',
+                                            b'Basic ' + authorization)
         return getChildForRequest(self.wrapper, request)
 
 
@@ -385,7 +386,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         """
         self.credentialFactories.append(BasicCredentialFactory('example.com'))
         request = self.makeRequest([self.childName])
-        request.headers['authorization'] = response
+        request.requestHeaders.addRawHeader(b'authorization', response)
         child = getChildForRequest(self.wrapper, request)
         d = request.notifyFinish()
         def cbFinished(result):
@@ -543,7 +544,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         """
         self.credentialFactories.append(BasicCredentialFactory('example.com'))
         request = self.makeRequest([self.childName])
-        request.headers[b'authorization'] = b'Basic decode should fail'
+        request.requestHeaders.addRawHeader(b'authorization', b'Basic decode should fail')
         child = getChildForRequest(self.wrapper, request)
         self.assertIsInstance(child, UnauthorizedResource)
 
@@ -585,7 +586,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
 
         self.credentialFactories.append(BadFactory())
         request = self.makeRequest([self.childName])
-        request.headers[b'authorization'] = b'Bad abc'
+        request.requestHeaders.addRawHeader(b'authorization', b'Bad abc')
         child = getChildForRequest(self.wrapper, request)
         request.render(child)
         self.assertEqual(request.responseCode, 500)
diff --git a/twisted/web/test/test_resource.py b/twisted/web/test/test_resource.py
index 38cbe59..9529705 100644
--- a/twisted/web/test/test_resource.py
+++ b/twisted/web/test/test_resource.py
@@ -11,6 +11,7 @@ from twisted.web.error import UnsupportedMethod
 from twisted.web.resource import (
     NOT_FOUND, FORBIDDEN, Resource, ErrorPage, NoResource, ForbiddenResource,
     getChildForRequest)
+from twisted.web.http_headers import Headers
 from twisted.web.test.requesthelper import DummyRequest
 
 
@@ -48,8 +49,8 @@ class ErrorPageTests(TestCase):
             page.render(request), expected.encode('utf-8'))
         self.assertEqual(request.responseCode, code)
         self.assertEqual(
-            request.outgoingHeaders,
-            {b'content-type': b'text/html; charset=utf-8'})
+            request.responseHeaders,
+            Headers({b'content-type': [b'text/html; charset=utf-8']}))
 
 
     def test_errorPageRendering(self):
diff --git a/twisted/web/test/test_static.py b/twisted/web/test/test_static.py
index 30917e7..4e79536 100644
--- a/twisted/web/test/test_static.py
+++ b/twisted/web/test/test_static.py
@@ -212,7 +212,9 @@ class StaticFileTests(TestCase):
         d = self._render(child, request)
         def cbRendered(ignored):
             self.assertEqual(b''.join(request.written), b'baz')
-            self.assertEqual(request.outgoingHeaders[b'content-length'], b'3')
+            self.assertEqual(
+                request.responseHeaders.getRawHeaders(b'content-length')[0],
+                b'3')
         d.addCallback(cbRendered)
         return d
 
@@ -234,7 +236,9 @@ class StaticFileTests(TestCase):
         d = self._render(child, request)
         def cbRendered(ignored):
             self.assertEqual(b''.join(request.written), b'baz')
-            self.assertEqual(request.outgoingHeaders[b'content-length'], b'3')
+            self.assertEqual(
+                request.responseHeaders.getRawHeaders(b'content-length')[0],
+                b'3')
         d.addCallback(cbRendered)
         return d
 
@@ -333,7 +337,9 @@ class StaticFileTests(TestCase):
         d = self._render(child, request)
         def cbRendered(ignored):
             self.assertEqual(b''.join(request.written), b'dynamic world')
-            self.assertEqual(request.outgoingHeaders[b'content-length'], b'13')
+            self.assertEqual(
+                request.responseHeaders.getRawHeaders(b'content-length')[0],
+                b'13')
         d.addCallback(cbRendered)
         return d
 
@@ -449,9 +455,9 @@ class StaticMakeProducerTests(TestCase):
         start with 'content-'.
         """
         contentHeaders = {}
-        for k, v in iteritems(request.outgoingHeaders):
-            if k.startswith(b'content-'):
-                contentHeaders[k] = v
+        for k, v in request.responseHeaders.getAllRawHeaders():
+            if k.lower().startswith(b'content-'):
+                contentHeaders[k.lower()] = v[0]
         return contentHeaders
 
 
@@ -504,7 +510,7 @@ class StaticMakeProducerTests(TestCase):
         returns an instance of SingleRangeStaticProducer.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=1-3'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=1-3')
         resource = self.makeResourceWithContent(b'abcdef')
         with resource.openForReading() as file:
             producer = resource.makeProducer(request, file)
@@ -517,7 +523,7 @@ class StaticMakeProducerTests(TestCase):
         range sets the response code on the request to 'Partial Content'.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=1-3'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=1-3')
         resource = self.makeResourceWithContent(b'abcdef')
         with resource.openForReading() as file:
             resource.makeProducer(request, file)
@@ -531,7 +537,7 @@ class StaticMakeProducerTests(TestCase):
         range sets the Content-* headers appropriately.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=1-3'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=1-3')
         contentType = "text/plain"
         contentEncoding = 'gzip'
         resource = self.makeResourceWithContent(b'abcdef', type=contentType, encoding=contentEncoding)
@@ -550,7 +556,7 @@ class StaticMakeProducerTests(TestCase):
         when the Range header requests a single unsatisfiable byte range.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=4-10'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=4-10')
         resource = self.makeResourceWithContent(b'abc')
         with resource.openForReading() as file:
             producer = resource.makeProducer(request, file)
@@ -564,7 +570,7 @@ class StaticMakeProducerTests(TestCase):
         unsatisfiable byte range.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=4-10'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=4-10')
         resource = self.makeResourceWithContent(b'abc')
         with resource.openForReading() as file:
             resource.makeProducer(request, file)
@@ -578,7 +584,7 @@ class StaticMakeProducerTests(TestCase):
         byte range sets the Content-* headers appropriately.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=4-10'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=4-10')
         contentType = "text/plain"
         resource = self.makeResourceWithContent(b'abc', type=contentType)
         with resource.openForReading() as file:
@@ -595,7 +601,7 @@ class StaticMakeProducerTests(TestCase):
         partly overlaps the resource sets the Content-* headers appropriately.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=2-10'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=2-10')
         contentType = "text/plain"
         resource = self.makeResourceWithContent(b'abc', type=contentType)
         with resource.openForReading() as file:
@@ -612,7 +618,7 @@ class StaticMakeProducerTests(TestCase):
         returns an instance of MultipleRangeStaticProducer.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=1-3,5-6'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=1-3,5-6')
         resource = self.makeResourceWithContent(b'abcdef')
         with resource.openForReading() as file:
             producer = resource.makeProducer(request, file)
@@ -626,7 +632,7 @@ class StaticMakeProducerTests(TestCase):
         Content'.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=1-3,5-6'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=1-3,5-6')
         resource = self.makeResourceWithContent(b'abcdef')
         with resource.openForReading() as file:
             resource.makeProducer(request, file)
@@ -641,7 +647,7 @@ class StaticMakeProducerTests(TestCase):
         range sets the Content-* headers appropriately.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=1-3,5-6'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=1-3,5-6')
         resource = self.makeResourceWithContent(
             b'abcdefghijkl', encoding='gzip')
         with resource.openForReading() as file:
@@ -676,7 +682,7 @@ class StaticMakeProducerTests(TestCase):
         satisfiable.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=10-12,15-20'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=10-12,15-20')
         resource = self.makeResourceWithContent(b'abc')
         with resource.openForReading() as file:
             producer = resource.makeProducer(request, file)
@@ -690,7 +696,7 @@ class StaticMakeProducerTests(TestCase):
         none of which are satisfiable.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=10-12,15-20'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=10-12,15-20')
         resource = self.makeResourceWithContent(b'abc')
         with resource.openForReading() as file:
             resource.makeProducer(request, file)
@@ -704,14 +710,16 @@ class StaticMakeProducerTests(TestCase):
         which are satisfiable, sets the Content-* headers appropriately.
         """
         request = DummyRequest([])
-        request.headers['range'] = b'bytes=4-10'
-        contentType = "text/plain"
-        request.headers[b'range'] = b'bytes=10-12,15-20'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=4-10')
+        contentType = b"text/plain"
+        request.requestHeaders.addRawHeader(b'range', b'bytes=10-12,15-20')
         resource = self.makeResourceWithContent(b'abc', type=contentType)
         with resource.openForReading() as file:
             resource.makeProducer(request, file)
             self.assertEqual(
-                {b'content-length': b'0', b'content-range': b'bytes */3'},
+                {b'content-length': b'0',
+                 b'content-range': b'bytes */3',
+                 b'content-type': b'text/plain'},
                 self.contentHeaders(request))
 
 
@@ -721,7 +729,7 @@ class StaticMakeProducerTests(TestCase):
         one of which matches, sets the response code to 'Partial Content'.
         """
         request = DummyRequest([])
-        request.headers[b'range'] = b'bytes=1-3,100-200'
+        request.requestHeaders.addRawHeader(b'range', b'bytes=1-3,100-200')
         resource = self.makeResourceWithContent(b'abcdef')
         with resource.openForReading() as file:
             resource.makeProducer(request, file)
@@ -1136,7 +1144,7 @@ class RangeTests(TestCase):
         A correct response to a range request is as long as the length of the
         requested range.
         """
-        self.request.headers[b'range'] = b'bytes=0-43'
+        self.request.requestHeaders.addRawHeader(b'range', b'bytes=0-43')
         self.resource.render(self.request)
         self.assertEqual(len(b''.join(self.request.written)), 44)
 
@@ -1148,14 +1156,15 @@ class RangeTests(TestCase):
         Only 'bytes' is defined) results in the range header value being logged
         and a normal 200 response being sent.
         """
-        self.request.headers[b'range'] = range = b'foobar=0-43'
+        range = b'foobar=0-43'
+        self.request.requestHeaders.addRawHeader(b'range', range)
         self.resource.render(self.request)
         expected = "Ignoring malformed Range header %r" % (range.decode(),)
         self._assertLogged(expected)
         self.assertEqual(b''.join(self.request.written), self.payload)
         self.assertEqual(self.request.responseCode, http.OK)
         self.assertEqual(
-            self.request.outgoingHeaders[b'content-length'],
+            self.request.responseHeaders.getRawHeaders(b'content-length')[0],
             intToBytes(len(self.payload)))
 
 
@@ -1195,12 +1204,13 @@ class RangeTests(TestCase):
         """
         startEnds = [(0, 2), (20, 30), (40, 50)]
         rangeHeaderValue = b','.join([networkString("%s-%s" % (s,e)) for (s, e) in startEnds])
-        self.request.headers[b'range'] = b'bytes=' + rangeHeaderValue
+        self.request.requestHeaders.addRawHeader(b'range',
+                                                 b'bytes=' + rangeHeaderValue)
         self.resource.render(self.request)
         self.assertEqual(self.request.responseCode, http.PARTIAL_CONTENT)
         boundary = re.match(
             b'^multipart/byteranges; boundary="(.*)"$',
-            self.request.outgoingHeaders[b'content-type']).group(1)
+            self.request.responseHeaders.getRawHeaders(b'content-type')[0]).group(1)
         parts = self.parseMultipartBody(b''.join(self.request.written), boundary)
         self.assertEqual(len(startEnds), len(parts))
         for part, (s, e) in zip(parts, startEnds):
@@ -1221,12 +1231,13 @@ class RangeTests(TestCase):
         """
         startEnds = [(0, 2), (40, len(self.payload) + 10)]
         rangeHeaderValue = b','.join([networkString("%s-%s" % (s,e)) for (s, e) in startEnds])
-        self.request.headers[b'range'] = b'bytes=' + rangeHeaderValue
+        self.request.requestHeaders.addRawHeader(b'range',
+                                                 b'bytes=' + rangeHeaderValue)
         self.resource.render(self.request)
         self.assertEqual(self.request.responseCode, http.PARTIAL_CONTENT)
         boundary = re.match(
             b'^multipart/byteranges; boundary="(.*)"$',
-            self.request.outgoingHeaders[b'content-type']).group(1)
+            self.request.responseHeaders.getRawHeaders(b'content-type')[0]).group(1)
         parts = self.parseMultipartBody(b''.join(self.request.written), boundary)
         self.assertEqual(len(startEnds), len(parts))
         for part, (s, e) in zip(parts, startEnds):
@@ -1244,14 +1255,17 @@ class RangeTests(TestCase):
         If the end byte position is omitted, then it is treated as if the
         length of the resource was specified by the end byte position.
         """
-        self.request.headers[b'range'] = b'bytes=23-'
+        self.request.requestHeaders.addRawHeader(b'range', b'bytes=23-')
         self.resource.render(self.request)
         self.assertEqual(b''.join(self.request.written), self.payload[23:])
         self.assertEqual(len(b''.join(self.request.written)), 41)
         self.assertEqual(self.request.responseCode, http.PARTIAL_CONTENT)
         self.assertEqual(
-            self.request.outgoingHeaders[b'content-range'], b'bytes 23-63/64')
-        self.assertEqual(self.request.outgoingHeaders[b'content-length'], b'41')
+            self.request.responseHeaders.getRawHeaders(b'content-range')[0],
+            b'bytes 23-63/64')
+        self.assertEqual(
+            self.request.responseHeaders.getRawHeaders(b'content-length')[0],
+            b'41')
 
 
     def test_implicitStart(self):
@@ -1260,14 +1274,17 @@ class RangeTests(TestCase):
         supplied, then the range is treated as requesting the last -N bytes of
         the resource, where N is the end byte position.
         """
-        self.request.headers[b'range'] = b'bytes=-17'
+        self.request.requestHeaders.addRawHeader(b'range', b'bytes=-17')
         self.resource.render(self.request)
         self.assertEqual(b''.join(self.request.written), self.payload[-17:])
         self.assertEqual(len(b''.join(self.request.written)), 17)
         self.assertEqual(self.request.responseCode, http.PARTIAL_CONTENT)
         self.assertEqual(
-            self.request.outgoingHeaders[b'content-range'], b'bytes 47-63/64')
-        self.assertEqual(self.request.outgoingHeaders[b'content-length'], b'17')
+            self.request.responseHeaders.getRawHeaders(b'content-range')[0],
+            b'bytes 47-63/64')
+        self.assertEqual(
+            self.request.responseHeaders.getRawHeaders(b'content-length')[0],
+            b'17')
 
 
     def test_explicitRange(self):
@@ -1276,15 +1293,17 @@ class RangeTests(TestCase):
         with the A'th byte and ends with (including) the B'th byte. The first
         byte of a page is numbered with 0.
         """
-        self.request.headers[b'range'] = b'bytes=3-43'
+        self.request.requestHeaders.addRawHeader(b'range', b'bytes=3-43')
         self.resource.render(self.request)
         written = b''.join(self.request.written)
         self.assertEqual(written, self.payload[3:44])
         self.assertEqual(self.request.responseCode, http.PARTIAL_CONTENT)
         self.assertEqual(
-            self.request.outgoingHeaders[b'content-range'], b'bytes 3-43/64')
+            self.request.responseHeaders.getRawHeaders(b'content-range')[0],
+            b'bytes 3-43/64')
         self.assertEqual(
-            intToBytes(len(written)), self.request.outgoingHeaders[b'content-length'])
+            intToBytes(len(written)),
+            self.request.responseHeaders.getRawHeaders(b'content-length')[0])
 
 
     def test_explicitRangeOverlappingEnd(self):
@@ -1294,15 +1313,17 @@ class RangeTests(TestCase):
         with the last byte of the resource. The first byte of a page is
         numbered with 0.
         """
-        self.request.headers[b'range'] = b'bytes=40-100'
+        self.request.requestHeaders.addRawHeader(b'range', b'bytes=40-100')
         self.resource.render(self.request)
         written = b''.join(self.request.written)
         self.assertEqual(written, self.payload[40:])
         self.assertEqual(self.request.responseCode, http.PARTIAL_CONTENT)
         self.assertEqual(
-            self.request.outgoingHeaders[b'content-range'], b'bytes 40-63/64')
+            self.request.responseHeaders.getRawHeaders(b'content-range')[0],
+            b'bytes 40-63/64')
         self.assertEqual(
-            intToBytes(len(written)), self.request.outgoingHeaders[b'content-length'])
+            intToBytes(len(written)),
+            self.request.responseHeaders.getRawHeaders(b'content-length')[0])
 
 
     def test_statusCodeRequestedRangeNotSatisfiable(self):
@@ -1311,12 +1332,12 @@ class RangeTests(TestCase):
         the end, the range header is ignored (the request is responded to as if
         it were not present).
         """
-        self.request.headers[b'range'] = b'bytes=20-13'
+        self.request.requestHeaders.addRawHeader(b'range', b'bytes=20-13')
         self.resource.render(self.request)
         self.assertEqual(self.request.responseCode, http.OK)
         self.assertEqual(b''.join(self.request.written), self.payload)
         self.assertEqual(
-            self.request.outgoingHeaders[b'content-length'],
+            self.request.responseHeaders.getRawHeaders(b'content-length')[0],
             intToBytes(len(self.payload)))
 
 
@@ -1327,15 +1348,17 @@ class RangeTests(TestCase):
         satisfiable) and no data is written to the response body (RFC 2616,
         section 14.35.1).
         """
-        self.request.headers[b'range'] = b'bytes=67-108'
+        self.request.requestHeaders.addRawHeader(b'range', b'bytes=67-108')
         self.resource.render(self.request)
         self.assertEqual(
             self.request.responseCode, http.REQUESTED_RANGE_NOT_SATISFIABLE)
         self.assertEqual(b''.join(self.request.written), b'')
-        self.assertEqual(self.request.outgoingHeaders[b'content-length'], b'0')
+        self.assertEqual(
+            self.request.responseHeaders.getRawHeaders(b'content-length')[0],
+            b'0')
         # Sections 10.4.17 and 14.16
         self.assertEqual(
-            self.request.outgoingHeaders[b'content-range'],
+            self.request.responseHeaders.getRawHeaders(b'content-range')[0],
             networkString('bytes */%d' % (len(self.payload),)))
 
 
@@ -1500,7 +1523,7 @@ class DirectoryListerTests(TestCase):
         lister = static.DirectoryLister(path.path)
         req = self._request(b'')
         lister.render(req)
-        self.assertEqual(req.outgoingHeaders[b'content-type'],
+        self.assertEqual(req.responseHeaders.getRawHeaders(b'content-type')[0],
                           b"text/html; charset=utf-8")
 
 
diff --git a/twisted/web/test/test_vhost.py b/twisted/web/test/test_vhost.py
index 13e6357..f1b9ae5 100644
--- a/twisted/web/test/test_vhost.py
+++ b/twisted/web/test/test_vhost.py
@@ -52,10 +52,10 @@ class NameVirtualHostTests(TestCase):
         to the key indicated by the value of the I{Host} header in the request.
         """
         virtualHostResource = NameVirtualHost()
-        virtualHostResource.addHost('example.org', Data("winner", ""))
+        virtualHostResource.addHost(b'example.org', Data("winner", ""))
 
-        request = DummyRequest([''])
-        request.headers['host'] = 'example.org'
+        request = DummyRequest([b''])
+        request.requestHeaders.addRawHeader(b'host', b'example.org')
         d = _render(virtualHostResource, request)
         def cbRendered(ignored, request):
             self.assertEqual(''.join(request.written), "winner")
@@ -63,7 +63,7 @@ class NameVirtualHostTests(TestCase):
 
         # The port portion of the Host header should not be considered.
         requestWithPort = DummyRequest([''])
-        requestWithPort.headers['host'] = 'example.org:8000'
+        requestWithPort.requestHeaders.addRawHeader(b'host', b'example.org:8000')
         dWithPort = _render(virtualHostResource, requestWithPort)
         def cbRendered(ignored, requestWithPort):
             self.assertEqual(''.join(requestWithPort.written), "winner")
@@ -80,8 +80,8 @@ class NameVirtualHostTests(TestCase):
         """
         virtualHostResource = NameVirtualHost()
         virtualHostResource.default = Data("correct data", "")
-        request = DummyRequest([''])
-        request.headers['host'] = 'example.com'
+        request = DummyRequest([b''])
+        request.requestHeaders.addRawHeader(b'host', b'example.com')
         d = _render(virtualHostResource, request)
         def cbRendered(ignored):
             self.assertEqual(''.join(request.written), "correct data")
@@ -97,7 +97,7 @@ class NameVirtualHostTests(TestCase):
         """
         virtualHostResource = NameVirtualHost()
         request = DummyRequest([''])
-        request.headers['host'] = 'example.com'
+        request.requestHeaders.addRawHeader(b'host', b'example.com')
         d = _render(virtualHostResource, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
diff --git a/twisted/web/test/test_web.py b/twisted/web/test/test_web.py
index ae5a946..ab6201c 100644
--- a/twisted/web/test/test_web.py
+++ b/twisted/web/test/test_web.py
@@ -1102,8 +1102,8 @@ class CombinedLogFormatterTests(unittest.TestCase):
         request.client = IPv4Address("TCP", b"evil x-forwarded-for \x80", 12345)
         request.method = b"POS\x81"
         request.protocol = b"HTTP/1.\x82"
-        request.headers[b"referer"] = b"evil \x83"
-        request.headers[b"user-agent"] = b"evil \x84"
+        request.requestHeaders.addRawHeader(b"referer", b"evil \x83")
+        request.requestHeaders.addRawHeader(b"user-agent", b"evil \x84")
 
         line = http.combinedLogFormatter(timestamp, request)
         self.assertEqual(
@@ -1246,8 +1246,8 @@ class LogEscapingTests(unittest.TestCase):
         """
         self.site._logDateTime = "[%02d/%3s/%4d:%02d:%02d:%02d +0000]" % (
             25, 'Oct', 2004, 12, 31, 59)
-        self.request.headers[b'referer'] = (
-            b'http://malicious" ".website.invalid')
+        self.request.requestHeaders.addRawHeader(b'referer',
+                               b'http://malicious" ".website.invalid')
         self.assertLogs(
             b'"1.2.3.4" - - [25/Oct/2004:12:31:59 +0000] '
             b'"GET /dummy HTTP/1.0" 123 - '
@@ -1261,7 +1261,8 @@ class LogEscapingTests(unittest.TestCase):
         """
         self.site._logDateTime = "[%02d/%3s/%4d:%02d:%02d:%02d +0000]" % (
             25, 'Oct', 2004, 12, 31, 59)
-        self.request.headers[b'user-agent'] = b'Malicious Web" Evil'
+        self.request.requestHeaders.addRawHeader(b'user-agent', 
+                                                 b'Malicious Web" Evil')
         self.assertLogs(
             b'"1.2.3.4" - - [25/Oct/2004:12:31:59 +0000] '
             b'"GET /dummy HTTP/1.0" 123 - "-" "Malicious Web\\" Evil"\n')
