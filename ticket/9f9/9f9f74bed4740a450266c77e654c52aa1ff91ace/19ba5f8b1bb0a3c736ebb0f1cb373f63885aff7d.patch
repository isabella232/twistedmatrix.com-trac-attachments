Index: twisted/conch/client/default.py
===================================================================
--- twisted/conch/client/default.py	(revision 40912)
+++ twisted/conch/client/default.py	(working copy)
@@ -13,6 +13,7 @@
 
 from twisted.python import log
 from twisted.python.filepath import FilePath
+from twisted.python.compat import input
 
 from twisted.conch.error import ConchError
 from twisted.conch.ssh import common, keys, userauth
@@ -252,7 +253,7 @@
                 print instruction
             for prompt, echo in prompts:
                 if echo:
-                    responses.append(raw_input(prompt))
+                    responses.append(input(prompt))
                 else:
                     responses.append(getpass.getpass(prompt))
         finally:
Index: twisted/conch/scripts/ckeygen.py
===================================================================
--- twisted/conch/scripts/ckeygen.py	(revision 40912)
+++ twisted/conch/scripts/ckeygen.py	(working copy)
@@ -17,6 +17,7 @@
 
 from twisted.conch.ssh import keys
 from twisted.python import filepath, log, usage, randbytes
+from twisted.python.compat import input
 
 
 
@@ -102,7 +103,7 @@
 def printFingerprint(options):
     if not options['filename']:
         filename = os.path.expanduser('~/.ssh/id_rsa')
-        options['filename'] = raw_input('Enter file in which the key is (%s): ' % filename)
+        options['filename'] = input('Enter file in which the key is (%s): ' % filename)
     if os.path.exists(options['filename']+'.pub'):
         options['filename'] += '.pub'
     try:
@@ -121,7 +122,7 @@
 def changePassPhrase(options):
     if not options['filename']:
         filename = os.path.expanduser('~/.ssh/id_rsa')
-        options['filename'] = raw_input(
+        options['filename'] = input(
             'Enter file in which the key is (%s): ' % filename)
     try:
         key = keys.Key.fromFile(options['filename']).keyObject
@@ -171,7 +172,7 @@
 def displayPublicKey(options):
     if not options['filename']:
         filename = os.path.expanduser('~/.ssh/id_rsa')
-        options['filename'] = raw_input('Enter file in which the key is (%s): ' % filename)
+        options['filename'] = input('Enter file in which the key is (%s): ' % filename)
     try:
         key = keys.Key.fromFile(options['filename']).keyObject
     except keys.EncryptedKeyError:
@@ -188,10 +189,10 @@
         kind = keys.objectType(key)
         kind = {'ssh-rsa':'rsa','ssh-dss':'dsa'}[kind]
         filename = os.path.expanduser('~/.ssh/id_%s'%kind)
-        options['filename'] = raw_input('Enter file in which to save the key (%s): '%filename).strip() or filename
+        options['filename'] = input('Enter file in which to save the key (%s): '%filename).strip() or filename
     if os.path.exists(options['filename']):
         print '%s already exists.' % options['filename']
-        yn = raw_input('Overwrite (y/n)? ')
+        yn = input('Overwrite (y/n)? ')
         if yn[0].lower() != 'y':
             sys.exit()
     if options.get('no-passphrase'):
Index: twisted/cred/pamauth.py
===================================================================
--- twisted/cred/pamauth.py	(revision 40912)
+++ twisted/cred/pamauth.py	(working copy)
@@ -10,6 +10,8 @@
 
 import getpass, threading, os
 
+from twisted.python.compat import input
+
 from twisted.internet import threads, defer
 
 def pamAuthenticateThread(service, user, conv):
@@ -65,7 +67,7 @@
             p = getpass.getpass(message)
             resp.append((p, 0))
         elif kind == 2: # text
-            p = raw_input(message)
+            p = input(message)
             resp.append((p, 0))
         elif kind in (3,4):
             print message
Index: twisted/python/compat.py
===================================================================
--- twisted/python/compat.py	(revision 40912)
+++ twisted/python/compat.py	(working copy)
@@ -404,6 +404,8 @@
 @rtype: C{bytes}
 """
 
+if not _PY3:
+    input = raw_input
 
 __all__ = [
     "reraise",
@@ -420,4 +422,5 @@
     "iterbytes",
     "intToBytes",
     "lazyByteSlice",
+    "input",
     ]
Index: twisted/python/release.py
===================================================================
--- twisted/python/release.py	(revision 40912)
+++ twisted/python/release.py	(working copy)
@@ -11,7 +11,9 @@
 
 import os
 
+from twisted.python.compat import input
 
+
 # errors
 
 class DirectoryExists(OSError):
@@ -46,7 +48,7 @@
     print "--$", command
 
     if prompt:
-        if raw_input("run ?? ").startswith('n'):
+        if input("run ?? ").startswith('n'):
             return
     if null:
         command = "%s > /dev/null" % command
Index: twisted/test/test_process.py
===================================================================
--- twisted/test/test_process.py	(revision 40912)
+++ twisted/test/test_process.py	(working copy)
@@ -2512,8 +2512,9 @@
         reactor.spawnProcess(
             p, sys.executable, [
                 sys.executable, '-u', '-c',
-                'raw_input()\n'
                 'import sys, os, time\n'
+                # Same as raw_input [Python 2] or input [Python 3]
+                'sys.stdin.readline()\n'
                 # Give the system a bit of time to notice the closed
                 # descriptor.  Another option would be to poll() for HUP
                 # instead of relying on an os.write to fail with SIGPIPE.
