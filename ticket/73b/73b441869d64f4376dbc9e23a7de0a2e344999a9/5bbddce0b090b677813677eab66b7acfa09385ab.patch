Index: twisted/topfiles/4708.bugfix
===================================================================
--- twisted/topfiles/4708.bugfix	(revision 0)
+++ twisted/topfiles/4708.bugfix	(revision 0)
@@ -0,0 +1 @@
+Fixed a bug where Inotify will fail to add a filepatch to watchlist after it has been added/ignored previously.
Index: twisted/internet/inotify.py
===================================================================
--- twisted/internet/inotify.py	(revision 30630)
+++ twisted/internet/inotify.py	(working copy)
@@ -383,12 +383,12 @@
     def _isWatched(self, path):
         """
         Helper function that checks if the path is already monitored
-        and returns its watchdescriptor if so.
+        and returns its watchdescriptor if so or None otherwise.
 
         @param path: The path that should be checked
         @type path: L{FilePath}
         """
-        return path in self._watchpaths
+        return self._watchpaths.get(path, None)
 
 
 INotifyError = _inotify.INotifyError
Index: twisted/internet/test/test_inotify.py
===================================================================
--- twisted/internet/test/test_inotify.py	(revision 30630)
+++ twisted/internet/test/test_inotify.py	(working copy)
@@ -379,6 +379,45 @@
         return d
 
 
+    def test_seriesOfWatchAndIgnore(self):
+        """
+        L{inotify.INotify} will correctly watch a filepath for events
+        even if the same path is repeatedly added/removed/readded
+        to the watchpoints.
+        """
+        expectedPath = self.dirname.child("foo.bar2")
+        expectedPath.touch()
+        
+        def _ignore(_ignored1, fp, mask):
+            pass
+
+        self.assertTrue(self.inotify.watch(expectedPath,
+                        callbacks=[_ignore]))
+        self.inotify.ignore(expectedPath)
+        self.assertTrue(self.inotify.watch(expectedPath,
+                        callbacks=[_ignore]))
+        self.inotify.ignore(expectedPath)
+
+        notified = defer.Deferred()
+        def cbNotified((_ignored, filename, events)):
+            self.assertEquals(filename, expectedPath)
+            self.assertTrue(events & inotify.IN_MODIFY)
+
+        def operation(path):
+            fObj = path.open("w")
+            fObj.write('foo')
+            fObj.close()
+
+        notified.addCallback(cbNotified)
+
+        self.assertTrue(self.inotify.watch(expectedPath,
+                        inotify.IN_MODIFY,
+                        callbacks=[lambda *args: notified.callback(args)]))
+        operation(expectedPath)
+
+        return notified
+
+
     def test_complexSubdirectoryAutoAdd(self):
         """
         L{inotify.INotify} with autoAdd==True for a watched path
