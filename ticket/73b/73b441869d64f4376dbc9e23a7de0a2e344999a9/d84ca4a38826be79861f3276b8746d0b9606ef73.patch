Index: twisted/internet/test/test_inotify.py
===================================================================
--- twisted/internet/test/test_inotify.py	(revision 30699)
+++ twisted/internet/test/test_inotify.py	(working copy)
@@ -387,37 +387,87 @@
         """
         expectedPath = self.dirname.child("foo.bar2")
         expectedPath.touch()
-        
-        def _ignore(ignored1, fp, mask):
-            pass
 
+        notified = defer.Deferred()
+        def cbNotified((ignored, filename, events)):
+            self.assertEquals(filename, expectedPath)
+            self.assertTrue(events & inotify.IN_MODIFY)
+
+        def callIt(*args):
+            notified.callback(args)
+
+        def operation(path, text='foo'):
+            fObj = path.open("w")
+            fObj.write(text)
+            fObj.close()
+
+        #Multiple ignores/addition to watchpoint is handled correctly.
         self.assertTrue(self.inotify.watch(expectedPath,
-                        callbacks=[_ignore]))
+                        callbacks=[callIt]))
         self.inotify.ignore(expectedPath)
         self.assertTrue(self.inotify.watch(expectedPath,
-                        callbacks=[_ignore]))
-        self.inotify.ignore(expectedPath)
+                        callbacks=[callIt]))
 
+        notified.addCallback(cbNotified)
+
+        operation(expectedPath)
+
+        return notified
+
+
+    def test_ignoreFilePath(self):
+        """
+        L{inotify.INotify} will correctly ignore a filepath
+        after it has been removed from the watch list.
+        """
+        expectedPath = self.dirname.child("foo.bar2")
+        expectedPath.touch()
+        expectedPath2 = self.dirname.child("foo.bar3")
+        expectedPath2.touch()
+
         notified = defer.Deferred()
         def cbNotified((ignored, filename, events)):
-            self.assertEquals(filename, expectedPath)
+            self.assertEquals(filename, expectedPath2)
             self.assertTrue(events & inotify.IN_MODIFY)
 
+        def callIt(*args):
+            notified.callback(args)
+
         def operation(path):
             fObj = path.open("w")
             fObj.write('foo')
             fObj.close()
 
+        self.assertTrue(self.inotify.watch(expectedPath,
+                        callbacks=[callIt]))
         notified.addCallback(cbNotified)
 
-        self.assertTrue(self.inotify.watch(expectedPath,
+        self.assertTrue(self.inotify.watch(expectedPath2,
                         inotify.IN_MODIFY,
-                        callbacks=[lambda *args: notified.callback(args)]))
+                        callbacks=[callIt]))
+
+        self.inotify.ignore(expectedPath)
+
         operation(expectedPath)
+        operation(expectedPath2)
 
         return notified
 
 
+    def test_ignoreNonWatchedFile(self):
+        """
+        L{inotify.INotify} will raise KeyError if a non-watched filepath
+        is ignored.
+
+
+        #XXX: Maybe KeyError is not the right exception.
+        """
+        expectedPath = self.dirname.child("foo.ignored")
+        expectedPath.touch()
+
+        self.assertRaises(KeyError, self.inotify.ignore, expectedPath)
+
+
     def test_complexSubdirectoryAutoAdd(self):
         """
         L{inotify.INotify} with autoAdd==True for a watched path
