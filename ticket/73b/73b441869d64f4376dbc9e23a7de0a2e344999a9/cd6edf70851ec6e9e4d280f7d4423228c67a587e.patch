Index: twisted/internet/test/test_inotify.py
===================================================================
--- twisted/internet/test/test_inotify.py	(revision 30839)
+++ twisted/internet/test/test_inotify.py	(working copy)
@@ -384,6 +384,11 @@
         L{inotify.INotify} will correctly watch a filepath for events
         even if the same path is repeatedly added/removed/readded
         to the watchpoints.
+
+        #XXX: Apparantly in kernel version < 2.6.25, inofify has a bug
+        with coalescing similar events. So for test, we generate different
+        events. IN_MODIFY which is issues with filepath.touch() and 
+        IN_DELETE_SELF.
         """
         expectedPath = self.dirname.child("foo.bar2")
         expectedPath.touch()
@@ -391,26 +396,21 @@
         notified = defer.Deferred()
         def cbNotified((ignored, filename, events)):
             self.assertEquals(filename, expectedPath)
-            self.assertTrue(events & inotify.IN_MODIFY)
+            self.assertTrue(events & inotify.IN_DELETE_SELF)
 
         def callIt(*args):
             notified.callback(args)
 
-        def operation(path, text='foo'):
-            fObj = path.open("w")
-            fObj.write(text)
-            fObj.close()
-
         #Multiple ignores/addition to watchpoint is handled correctly.
-        self.assertTrue(self.inotify.watch(expectedPath,
-                        callbacks=[callIt]))
+        self.assertTrue(self.inotify.watch(expectedPath, callbacks=[callIt]))
         self.inotify.ignore(expectedPath)
         self.assertTrue(self.inotify.watch(expectedPath,
+                        mask=inotify.IN_DELETE_SELF,
                         callbacks=[callIt]))
 
         notified.addCallback(cbNotified)
 
-        operation(expectedPath)
+        expectedPath.remove()
 
         return notified
 
@@ -428,28 +428,24 @@
         notified = defer.Deferred()
         def cbNotified((ignored, filename, events)):
             self.assertEquals(filename, expectedPath2)
-            self.assertTrue(events & inotify.IN_MODIFY)
+            self.assertTrue(events & inotify.IN_DELETE_SELF)
 
         def callIt(*args):
             notified.callback(args)
 
-        def operation(path):
-            fObj = path.open("w")
-            fObj.write('foo')
-            fObj.close()
-
         self.assertTrue(self.inotify.watch(expectedPath,
+                        inotify.IN_DELETE_SELF,
                         callbacks=[callIt]))
         notified.addCallback(cbNotified)
 
         self.assertTrue(self.inotify.watch(expectedPath2,
-                        inotify.IN_MODIFY,
+                        inotify.IN_DELETE_SELF,
                         callbacks=[callIt]))
 
         self.inotify.ignore(expectedPath)
 
-        operation(expectedPath)
-        operation(expectedPath2)
+        expectedPath.remove()
+        expectedPath2.remove()
 
         return notified
 
