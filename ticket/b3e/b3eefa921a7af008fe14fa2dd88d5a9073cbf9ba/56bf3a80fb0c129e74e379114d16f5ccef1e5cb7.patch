Index: twisted/test/test_task.py
===================================================================
--- twisted/test/test_task.py	(revision 30568)
+++ twisted/test/test_task.py	(working copy)
@@ -171,6 +171,40 @@
                         "Clock does not provide IReactorTime")
 
 
+    def testCallLaterKeepsCallsOrdered(self):
+        """
+        Test that the order of calls is honored when adding a new call.
+        """
+        result = []
+        expected = [('b', 2.0), ('a', 3.0)]
+        clock = task.Clock()
+        logtime = lambda n: result.append((n, clock.seconds()))
+
+        call_a = clock.callLater(1.0, logtime, "a")
+        call_a.reset(3.0)
+        call_b = clock.callLater(2.0, logtime, "b")
+
+        clock.pump([1]*3)
+        self.assertEqual(result, expected)
+
+    def testCallResetKeepsCallsOrdered(self):
+        """
+        Test that the order of calls is honored when resetting an
+        existing call.
+        """
+        result = []
+        expected = [('b', 2.0), ('a', 3.0)]
+        clock = task.Clock()
+        logtime = lambda n: result.append((n, clock.seconds()))
+
+        call_a = clock.callLater(1.0, logtime, "a")
+        call_b = clock.callLater(2.0, logtime, "b")
+        call_a.reset(3.0)
+
+        clock.pump([1]*3)
+        self.assertEqual(result, expected)
+
+
 class LoopTestCase(unittest.TestCase):
     """
     Tests for L{task.LoopingCall} based on a fake L{IReactorTime}
Index: twisted/internet/task.py
===================================================================
--- twisted/internet/task.py	(revision 30568)
+++ twisted/internet/task.py	(working copy)
@@ -694,6 +694,7 @@
         time.
         """
         self.rightNow += amount
+        self.calls.sort(lambda a, b: cmp(a.getTime(), b.getTime()))
         while self.calls and self.calls[0].getTime() <= self.seconds():
             call = self.calls.pop(0)
             call.called = 1
