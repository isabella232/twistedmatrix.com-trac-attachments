Index: twisted/test/test_task.py
===================================================================
--- twisted/test/test_task.py	(revision 30646)
+++ twisted/test/test_task.py	(working copy)
@@ -171,6 +171,60 @@
                         "Clock does not provide IReactorTime")
 
 
+    def test_callLaterKeepsCallsOrdered(self):
+        """
+        Test that the order of calls is honored when adding a new call.
+        """
+        result = []
+        expected = [('b', 2.0), ('a', 3.0)]
+        clock = task.Clock()
+        logtime = lambda n: result.append((n, clock.seconds()))
+
+        call_a = clock.callLater(1.0, logtime, "a")
+        call_a.reset(3.0)
+        call_b = clock.callLater(2.0, logtime, "b")
+
+        clock.pump([1]*3)
+        self.assertEqual(result, expected)
+
+    def test_callLaterResetKeepsCallsOrdered(self):
+        """
+        Test that the order of calls is honored when resetting an
+        existing call.
+        """
+        result = []
+        expected = [('b', 2.0), ('a', 3.0)]
+        clock = task.Clock()
+        logtime = lambda n: result.append((n, clock.seconds()))
+
+        call_a = clock.callLater(1.0, logtime, "a")
+        call_b = clock.callLater(2.0, logtime, "b")
+        call_a.reset(3.0)
+
+        clock.pump([1]*3)
+        self.assertEqual(result, expected)
+
+    def test_callLaterResetInsideCallKeepsCallsOrdered(self):
+        """
+        The order of calls is still honored if reset is called in
+        the callLater itself.
+        """
+        result = []
+        expected = [('c', 3.0)]
+        clock = task.Clock()
+        logtime = lambda n: result.append((n, clock.seconds()))
+
+        def a():
+            call_b.reset(3.0)
+
+        call_a = clock.callLater(1.0, a)
+        call_b = clock.callLater(2.0, logtime, "b")
+        call_c = clock.callLater(3.0, logtime, "c")
+
+        clock.advance(3)
+        self.assertEqual(result, expected)
+
+
 class LoopTestCase(unittest.TestCase):
     """
     Tests for L{task.LoopingCall} based on a fake L{IReactorTime}
Index: twisted/topfiles/4823.bugfix
===================================================================
--- twisted/topfiles/4823.bugfix	(revision 0)
+++ twisted/topfiles/4823.bugfix	(revision 0)
@@ -0,0 +1 @@
+twisted.internet.task.Clock now sorts the list of pending calls before and after processing each call
Index: twisted/internet/task.py
===================================================================
--- twisted/internet/task.py	(revision 30646)
+++ twisted/internet/task.py	(working copy)
@@ -664,6 +664,11 @@
         """
         return self.rightNow
 
+    def _sortCalls(self):
+        """
+        Sort the pending calls according to the time they are scheduled.
+        """
+        self.calls.sort(lambda a, b: cmp(a.getTime(), b.getTime()))
 
     def callLater(self, when, what, *a, **kw):
         """
@@ -675,7 +680,7 @@
                                lambda c: None,
                                self.seconds)
         self.calls.append(dc)
-        self.calls.sort(lambda a, b: cmp(a.getTime(), b.getTime()))
+        self._sortCalls()
         return dc
 
     def getDelayedCalls(self):
@@ -694,10 +699,12 @@
         time.
         """
         self.rightNow += amount
+        self._sortCalls()
         while self.calls and self.calls[0].getTime() <= self.seconds():
             call = self.calls.pop(0)
             call.called = 1
             call.func(*call.args, **call.kw)
+            self._sortCalls()
 
 
     def pump(self, timings):
