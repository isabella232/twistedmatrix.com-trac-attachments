diff --git twisted/python/compat.py twisted/python/compat.py
index 20ff72f..e90c484 100644
--- twisted/python/compat.py
+++ twisted/python/compat.py
@@ -496,10 +496,6 @@ interpolation.  For example, this is safe on Python 2 and Python 3:
 @rtype: C{bytes}
 """
 
-if _PY3:
-    long = int
-else:
-    long = long
 
 try:
     StringType = basestring
diff --git twisted/python/dist3.py twisted/python/dist3.py
index d4389ed..dbe217e 100644
--- twisted/python/dist3.py
+++ twisted/python/dist3.py
@@ -156,7 +156,6 @@ modules = [
     "twisted.python.usage",
     "twisted.python.util",
     "twisted.python.versions",
-    "twisted.spread.banana",
     "twisted.test",
     "twisted.test.iosim",
     "twisted.test.proto_helpers",
@@ -270,7 +269,6 @@ testModules = [
     "twisted.test.testutils",
     "twisted.test.test_abstract",
     "twisted.test.test_application",
-    "twisted.test.test_banana",
     "twisted.test.test_compat",
     "twisted.test.test_context",
     "twisted.test.test_cooperator",
diff --git twisted/spread/banana.py twisted/spread/banana.py
index 645742d..7dc2259 100644
--- twisted/spread/banana.py
+++ twisted/spread/banana.py
@@ -11,31 +11,24 @@ for more details.
 
 @author: Glyph Lefkowitz
 """
-import copy, struct
-import io
+
+import copy, cStringIO, struct
 
 from twisted.internet import protocol
 from twisted.persisted import styles
 from twisted.python import log
 from twisted.python.reflect import fullyQualifiedName
-from twisted.python.compat import long, iterbytes, _PY3, unicode
 
 class BananaError(Exception):
     pass
 
 def int2b128(integer, stream):
     if integer == 0:
-        if _PY3:
-            bytes([0])
-        else:
-            stream(chr(0))
+        stream(chr(0))
         return
     assert integer > 0, "can only encode positive integers"
     while integer:
-        if _PY3:
-            stream(bytes([integer & 0x7f]))
-        else:
-            stream(chr(integer & 0x7f))
+        stream(chr(integer & 0x7f))
         integer = integer >> 7
 
 
@@ -52,39 +45,26 @@ def b1282int(st):
     """
     e = 1
     i = 0
-    for char in iterbytes(st):
+    for char in st:
         n = ord(char)
         i += (n * e)
         e <<= 7
     return i
 
-if _PY3:
-    LIST     = bytes([0x80])
-    INT      = bytes([0x81])
-    STRING   = bytes([0x82])
-    NEG      = bytes([0x83])
-    FLOAT    = bytes([0x84])
-    # "optional" -- these might be refused by a low-level implementation.
-    LONGINT  = bytes([0x85])
-    LONGNEG  = bytes([0x86])
-    # really optional; this is part of the 'pb' vocabulary
-    VOCAB    = bytes([0x87])
-
-    HIGH_BIT_SET = bytes([0x80])
-else:
-    # delimiter characters.
-    LIST     = chr(0x80)
-    INT      = chr(0x81)
-    STRING   = chr(0x82)
-    NEG      = chr(0x83)
-    FLOAT    = chr(0x84)
-    # "optional" -- these might be refused by a low-level implementation.
-    LONGINT  = chr(0x85)
-    LONGNEG  = chr(0x86)
-    # really optional; this is part of the 'pb' vocabulary
-    VOCAB    = chr(0x87)
-
-    HIGH_BIT_SET = chr(0x80)
+
+# delimiter characters.
+LIST     = chr(0x80)
+INT      = chr(0x81)
+STRING   = chr(0x82)
+NEG      = chr(0x83)
+FLOAT    = chr(0x84)
+# "optional" -- these might be refused by a low-level implementation.
+LONGINT  = chr(0x85)
+LONGNEG  = chr(0x86)
+# really optional; this is part of the 'pb' vocabulary
+VOCAB    = chr(0x87)
+
+HIGH_BIT_SET = chr(0x80)
 
 def setPrefixLimit(limit):
     """
@@ -186,7 +166,7 @@ class Banana(protocol.Protocol, styles.Ephemeral):
         else:
             self.callExpressionReceived(item)
 
-    buffer = b''
+    buffer = ''
 
     def dataReceived(self, chunk):
         buffer = self.buffer + chunk
@@ -196,7 +176,7 @@ class Banana(protocol.Protocol, styles.Ephemeral):
             assert self.buffer != buffer, "This ain't right: %s %s" % (repr(self.buffer), repr(buffer))
             self.buffer = buffer
             pos = 0
-            for ch in iterbytes(buffer):
+            for ch in buffer:
                 if ch >= HIGH_BIT_SET:
                     break
                 pos = pos + 1
@@ -206,8 +186,6 @@ class Banana(protocol.Protocol, styles.Ephemeral):
                 return
             num = buffer[:pos]
             typebyte = buffer[pos]
-            if isinstance(typebyte, int):
-                typebyte = bytes([typebyte])
             rest = buffer[pos+1:]
             if len(num) > self.prefixLimit:
                 raise BananaError("Security precaution: longer than %d bytes worth of prefix" % (self.prefixLimit,))
@@ -245,7 +223,6 @@ class Banana(protocol.Protocol, styles.Ephemeral):
             elif typebyte == VOCAB:
                 buffer = rest
                 num = b1282int(num)
-
                 item = self.incomingVocabulary[num]
                 if self.currentDialect == b'pb':
                     # the sender issues VOCAB only for dialect pb
@@ -264,7 +241,7 @@ class Banana(protocol.Protocol, styles.Ephemeral):
             while listStack and (len(listStack[-1][1]) == listStack[-1][0]):
                 item = listStack.pop()[1]
                 gotItem(item)
-        self.buffer = b''
+        self.buffer = ''
 
 
     def expressionReceived(self, lst):
@@ -275,41 +252,41 @@ class Banana(protocol.Protocol, styles.Ephemeral):
 
     outgoingVocabulary = {
         # Jelly Data Types
-        b'None'           :  1,
-        b'class'          :  2,
-        b'dereference'    :  3,
-        b'reference'      :  4,
-        b'dictionary'     :  5,
-        b'function'       :  6,
-        b'instance'       :  7,
-        b'list'           :  8,
-        b'module'         :  9,
-        b'persistent'     : 10,
-        b'tuple'          : 11,
-        b'unpersistable'  : 12,
+        'None'           :  1,
+        'class'          :  2,
+        'dereference'    :  3,
+        'reference'      :  4,
+        'dictionary'     :  5,
+        'function'       :  6,
+        'instance'       :  7,
+        'list'           :  8,
+        'module'         :  9,
+        'persistent'     : 10,
+        'tuple'          : 11,
+        'unpersistable'  : 12,
 
         # PB Data Types
-        b'copy'           : 13,
-        b'cache'          : 14,
-        b'cached'         : 15,
-        b'remote'         : 16,
-        b'local'          : 17,
-        b'lcache'         : 18,
+        'copy'           : 13,
+        'cache'          : 14,
+        'cached'         : 15,
+        'remote'         : 16,
+        'local'          : 17,
+        'lcache'         : 18,
 
         # PB Protocol Messages
-        b'version'        : 19,
-        b'login'          : 20,
-        b'password'       : 21,
-        b'challenge'      : 22,
-        b'logged_in'      : 23,
-        b'not_logged_in'  : 24,
-        b'cachemessage'   : 25,
-        b'message'        : 26,
-        b'answer'         : 27,
-        b'error'          : 28,
-        b'decref'         : 29,
-        b'decache'        : 30,
-        b'uncache'        : 31,
+        'version'        : 19,
+        'login'          : 20,
+        'password'       : 21,
+        'challenge'      : 22,
+        'logged_in'      : 23,
+        'not_logged_in'  : 24,
+        'cachemessage'   : 25,
+        'message'        : 26,
+        'answer'         : 27,
+        'error'          : 28,
+        'decref'         : 29,
+        'decache'        : 30,
+        'uncache'        : 31,
         }
 
     incomingVocabulary = {}
@@ -333,9 +310,9 @@ class Banana(protocol.Protocol, styles.Ephemeral):
 
         @return: C{None}
         """
-        stream = io.BytesIO()
-        self._encode(obj, stream.write)
-        value = stream.getvalue()
+        io = cStringIO.StringIO()
+        self._encode(obj, io.write)
+        value = io.getvalue()
         self.transport.write(value)
 
     def _encode(self, obj, write):
@@ -366,10 +343,7 @@ class Banana(protocol.Protocol, styles.Ephemeral):
         elif isinstance(obj, float):
             write(FLOAT)
             write(struct.pack("!d", obj))
-        elif isinstance(obj, unicode):
-            raise BananaError("Banana cannot send {0} objects: {1!r}".format(
-                fullyQualifiedName(type(obj)), obj))
-        elif isinstance(obj, bytes):
+        elif isinstance(obj, str):
             # TODO: an API for extending banana...
             if self.currentDialect == "pb" and obj in self.outgoingSymbols:
                 symbolID = self.outgoingSymbols[obj]
@@ -395,10 +369,10 @@ _i._selectDialect("none")
 
 def encode(lst):
     """Encode a list s-expression."""
-    stream = io.BytesIO()
-    _i.transport = stream
+    io = cStringIO.StringIO()
+    _i.transport = io
     _i.sendEncoded(lst)
-    return stream.getvalue()
+    return io.getvalue()
 
 
 def decode(st):
@@ -410,6 +384,6 @@ def decode(st):
     try:
         _i.dataReceived(st)
     finally:
-        _i.buffer = b''
+        _i.buffer = ''
         del _i.expressionReceived
     return l[0]
diff --git twisted/test/test_banana.py twisted/test/test_banana.py
index b0b91b3..2274bfc 100644
--- twisted/test/test_banana.py
+++ twisted/test/test_banana.py
@@ -1,7 +1,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
+import StringIO
 import sys
 from functools import partial
 
@@ -9,17 +9,15 @@ from functools import partial
 from twisted.trial import unittest
 from twisted.spread import banana
 from twisted.python import failure
-from twisted.python.compat import iterbytes, xrange
 from twisted.internet import protocol, main
 from twisted.test.proto_helpers import StringTransport
-from twisted.python.compat import long, _PY3
-import io
+
 
 class MathTests(unittest.TestCase):
     def test_int2b128(self):
-        funkylist = list(xrange(0,100)) + list(xrange(1000,1100)) + list(xrange(1000000,1000100)) + [1024 ** long(10)]
+        funkylist = range(0,100) + range(1000,1100) + range(1000000,1000100) + [1024 **10l]
         for i in funkylist:
-            x = io.BytesIO()
+            x = StringIO.StringIO()
             banana.int2b128(i, x.write)
             v = x.getvalue()
             y = banana.b1282int(v)
@@ -74,7 +72,7 @@ class BananaTestBase(unittest.TestCase):
     encClass = banana.Banana
 
     def setUp(self):
-        self.io = io.BytesIO()
+        self.io = StringIO.StringIO()
         self.enc = self.encClass()
         self.enc.makeConnection(protocol.FileWrapper(self.io))
         selectDialect(self.enc, b"none")
@@ -104,9 +102,9 @@ class BananaTests(BananaTestBase):
     """
 
     def test_string(self):
-        self.enc.sendEncoded(b"hello")
+        self.enc.sendEncoded("hello")
         self.enc.dataReceived(self.io.getvalue())
-        assert self.result == b'hello'
+        assert self.result == 'hello'
 
 
     def test_unsupportedUnicode(self):
@@ -114,10 +112,7 @@ class BananaTests(BananaTestBase):
         Banana does not support unicode.  ``Banana.sendEncoded`` raises
         ``BananaError`` if called with an instance of ``unicode``.
         """
-        if _PY3:
-            self._unsupportedTypeTest(u"hello", "builtins.str")
-        else:
-            self._unsupportedTypeTest(u"hello", "__builtin__.unicode")
+        self._unsupportedTypeTest(u"hello", "__builtin__.unicode")
 
 
     def test_unsupportedBuiltinType(self):
@@ -127,10 +122,7 @@ class BananaTests(BananaTestBase):
         with an instance of L{type}.
         """
         # type is an instance of type
-        if _PY3:
-            self._unsupportedTypeTest(type, "builtins.type")
-        else:
-            self._unsupportedTypeTest(type, "__builtin__.type")
+        self._unsupportedTypeTest(type, "__builtin__.type")
 
 
     def test_unsupportedUserType(self):
@@ -165,7 +157,7 @@ class BananaTests(BananaTestBase):
         banana without changing value and should come out represented
         as an C{int} (regardless of the type which was encoded).
         """
-        for value in (10151, long(10151)):
+        for value in (10151, 10151L):
             self.enc.sendEncoded(value)
             self.enc.dataReceived(self.io.getvalue())
             self.assertEqual(self.result, 10151)
@@ -185,12 +177,12 @@ class BananaTests(BananaTestBase):
                 for n in (m, -m-1):
                     self.enc.dataReceived(self.encode(n))
                     self.assertEqual(self.result, n)
-                    if n > sys.maxsize or n < -sys.maxsize - 1:
+                    if n > sys.maxint or n < -sys.maxint - 1:
                         self.assertIsInstance(self.result, long)
                     else:
                         self.assertIsInstance(self.result, int)
-    if _PY3:
-        test_largeLong.skip = "Long does not exist in Py3"
+
+
     def _getSmallest(self):
         # How many bytes of prefix our implementation allows
         bytes = self.enc.prefixLimit
@@ -257,12 +249,10 @@ class BananaTests(BananaTestBase):
 
 
     def test_negativeLong(self):
-        self.enc.sendEncoded(long(-1015))
+        self.enc.sendEncoded(-1015l)
         self.enc.dataReceived(self.io.getvalue())
-        assert self.result == long(-1015), "should be -1015l, got %s" % self.result
+        assert self.result == -1015l, "should be -1015l, got %s" % self.result
 
-    if _PY3:
-        test_negativeLong.skip = "Long does not exist in Py3"
 
     def test_integer(self):
         self.enc.sendEncoded(1015)
@@ -283,7 +273,7 @@ class BananaTests(BananaTestBase):
 
 
     def test_list(self):
-        foo = [1, 2, [3, 4], [30.5, 40.2], 5, [b"six", b"seven", [b"eight", 9]], [10], []]
+        foo = [1, 2, [3, 4], [30.5, 40.2], 5, ["six", "seven", ["eight", 9]], [10], []]
         self.enc.sendEncoded(foo)
         self.enc.dataReceived(self.io.getvalue())
         assert self.result == foo, "%s!=%s" % (repr(self.result), repr(foo))
@@ -295,9 +285,9 @@ class BananaTests(BananaTestBase):
         data is not split.
         """
         foo = [1, 2, [3, 4], [30.5, 40.2], 5,
-               [b"six", b"seven", [b"eight", 9]], [10],
+               ["six", "seven", ["eight", 9]], [10],
                # TODO: currently the C implementation's a bit buggy...
-               sys.maxsize * long(3), sys.maxsize * long(2), sys.maxsize * long(-2)]
+               sys.maxint * 3l, sys.maxint * 2l, sys.maxint * -2l]
         self.enc.sendEncoded(foo)
         self.feed(self.io.getvalue())
         assert self.result == foo, "%s!=%s" % (repr(self.result), repr(foo))
@@ -310,24 +300,24 @@ class BananaTests(BananaTestBase):
         @param data: The bytes to deliver.
         @type data: L{bytes}
         """
-        for byte in iterbytes(data):
+        for byte in data:
             self.enc.dataReceived(byte)
 
 
     def test_oversizedList(self):
-        data = b'\x02\x01\x01\x01\x01\x80'
+        data = '\x02\x01\x01\x01\x01\x80'
         # list(size=0x0101010102, about 4.3e9)
         self.failUnlessRaises(banana.BananaError, self.feed, data)
 
 
     def test_oversizedString(self):
-        data = b'\x02\x01\x01\x01\x01\x82'
+        data = '\x02\x01\x01\x01\x01\x82'
         # string(size=0x0101010102, about 4.3e9)
         self.failUnlessRaises(banana.BananaError, self.feed, data)
 
 
     def test_crashString(self):
-        crashString = b'\x00\x00\x00\x00\x04\x80'
+        crashString = '\x00\x00\x00\x00\x04\x80'
         # string(size=0x0400000000, about 17.2e9)
 
         #  cBanana would fold that into a 32-bit 'int', then try to allocate
@@ -367,25 +357,25 @@ class BananaTests(BananaTestBase):
         baseIntIn = +2147483647
         baseNegIn = -2147483648
 
-        baseIntOut = b'\x7f\x7f\x7f\x07\x81'
-        self.assertEqual(self.encode(baseIntIn - 2), b'\x7d' + baseIntOut)
-        self.assertEqual(self.encode(baseIntIn - 1), b'\x7e' + baseIntOut)
-        self.assertEqual(self.encode(baseIntIn - 0), b'\x7f' + baseIntOut)
+        baseIntOut = '\x7f\x7f\x7f\x07\x81'
+        self.assertEqual(self.encode(baseIntIn - 2), '\x7d' + baseIntOut)
+        self.assertEqual(self.encode(baseIntIn - 1), '\x7e' + baseIntOut)
+        self.assertEqual(self.encode(baseIntIn - 0), '\x7f' + baseIntOut)
 
-        baseLongIntOut = b'\x00\x00\x00\x08\x85'
-        self.assertEqual(self.encode(baseIntIn + 1), b'\x00' + baseLongIntOut)
-        self.assertEqual(self.encode(baseIntIn + 2), b'\x01' + baseLongIntOut)
-        self.assertEqual(self.encode(baseIntIn + 3), b'\x02' + baseLongIntOut)
+        baseLongIntOut = '\x00\x00\x00\x08\x85'
+        self.assertEqual(self.encode(baseIntIn + 1), '\x00' + baseLongIntOut)
+        self.assertEqual(self.encode(baseIntIn + 2), '\x01' + baseLongIntOut)
+        self.assertEqual(self.encode(baseIntIn + 3), '\x02' + baseLongIntOut)
 
-        baseNegOut = b'\x7f\x7f\x7f\x07\x83'
-        self.assertEqual(self.encode(baseNegIn + 2), b'\x7e' + baseNegOut)
-        self.assertEqual(self.encode(baseNegIn + 1), b'\x7f' + baseNegOut)
-        self.assertEqual(self.encode(baseNegIn + 0), b'\x00\x00\x00\x00\x08\x83')
+        baseNegOut = '\x7f\x7f\x7f\x07\x83'
+        self.assertEqual(self.encode(baseNegIn + 2), '\x7e' + baseNegOut)
+        self.assertEqual(self.encode(baseNegIn + 1), '\x7f' + baseNegOut)
+        self.assertEqual(self.encode(baseNegIn + 0), '\x00\x00\x00\x00\x08\x83')
 
-        baseLongNegOut = b'\x00\x00\x00\x08\x86'
-        self.assertEqual(self.encode(baseNegIn - 1), b'\x01' + baseLongNegOut)
-        self.assertEqual(self.encode(baseNegIn - 2), b'\x02' + baseLongNegOut)
-        self.assertEqual(self.encode(baseNegIn - 3), b'\x03' + baseLongNegOut)
+        baseLongNegOut = '\x00\x00\x00\x08\x86'
+        self.assertEqual(self.encode(baseNegIn - 1), '\x01' + baseLongNegOut)
+        self.assertEqual(self.encode(baseNegIn - 2), '\x02' + baseLongNegOut)
+        self.assertEqual(self.encode(baseNegIn - 3), '\x03' + baseLongNegOut)
 
 
 
@@ -394,12 +384,8 @@ class DialectTests(BananaTestBase):
     Tests for Banana's handling of dialects.
     """
     vocab = b'remote'
-    if _PY3:
-        legalPbItem = bytes([banana.Banana.outgoingVocabulary[vocab]]) + banana.VOCAB
-    else:
-
-        legalPbItem = chr(banana.Banana.outgoingVocabulary[vocab]).encode("latin-1") + banana.VOCAB
-    illegalPbItem = chr(122).encode("latin-1") + banana.VOCAB
+    legalPbItem = chr(banana.Banana.outgoingVocabulary[vocab]) + banana.VOCAB
+    illegalPbItem = chr(122) + banana.VOCAB
 
     def test_dialectNotSet(self):
         """
