diff --git twisted/python/compat.py twisted/python/compat.py
index ace366d..d0abc8b 100644
--- twisted/python/compat.py
+++ twisted/python/compat.py
@@ -539,6 +539,11 @@ else:
 
     xrange = xrange
 
+# Long does not exist in py3
+if _PY3:
+    long = int
+else:
+    long = long
 
 iteritems.__doc__ = """
 Return an iterable of the items of C{d}.
diff --git twisted/test/test_banana.py twisted/test/test_banana.py
index 2274bfc..f5050cf 100644
--- twisted/test/test_banana.py
+++ twisted/test/test_banana.py
@@ -1,11 +1,12 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-import StringIO
+
 import sys
 from functools import partial
 
 # Twisted Imports
+from twisted.python.compat import long, _PY3, NativeStringIO
 from twisted.trial import unittest
 from twisted.spread import banana
 from twisted.python import failure
@@ -15,9 +16,9 @@ from twisted.test.proto_helpers import StringTransport
 
 class MathTests(unittest.TestCase):
     def test_int2b128(self):
-        funkylist = range(0,100) + range(1000,1100) + range(1000000,1000100) + [1024 **10l]
+        funkylist = range(0,100) + range(1000,1100) + range(1000000,1000100) + [1024 ** long(10)]
         for i in funkylist:
-            x = StringIO.StringIO()
+            x = NativeStringIO()
             banana.int2b128(i, x.write)
             v = x.getvalue()
             y = banana.b1282int(v)
@@ -72,7 +73,7 @@ class BananaTestBase(unittest.TestCase):
     encClass = banana.Banana
 
     def setUp(self):
-        self.io = StringIO.StringIO()
+        self.io = NativeStringIO()
         self.enc = self.encClass()
         self.enc.makeConnection(protocol.FileWrapper(self.io))
         selectDialect(self.enc, b"none")
@@ -102,9 +103,9 @@ class BananaTests(BananaTestBase):
     """
 
     def test_string(self):
-        self.enc.sendEncoded("hello")
+        self.enc.sendEncoded(b"hello")
         self.enc.dataReceived(self.io.getvalue())
-        assert self.result == 'hello'
+        assert self.result == b'hello'
 
 
     def test_unsupportedUnicode(self):
@@ -157,7 +158,7 @@ class BananaTests(BananaTestBase):
         banana without changing value and should come out represented
         as an C{int} (regardless of the type which was encoded).
         """
-        for value in (10151, 10151L):
+        for value in (10151, long(10151)):
             self.enc.sendEncoded(value)
             self.enc.dataReceived(self.io.getvalue())
             self.assertEqual(self.result, 10151)
@@ -249,9 +250,9 @@ class BananaTests(BananaTestBase):
 
 
     def test_negativeLong(self):
-        self.enc.sendEncoded(-1015l)
+        self.enc.sendEncoded(long(-1015))
         self.enc.dataReceived(self.io.getvalue())
-        assert self.result == -1015l, "should be -1015l, got %s" % self.result
+        assert self.result == long(-1015), "should be -1015l, got %s" % self.result
 
 
     def test_integer(self):
@@ -273,7 +274,7 @@ class BananaTests(BananaTestBase):
 
 
     def test_list(self):
-        foo = [1, 2, [3, 4], [30.5, 40.2], 5, ["six", "seven", ["eight", 9]], [10], []]
+        foo = [1, 2, [3, 4], [30.5, 40.2], 5, [b"six", b"seven", [b"eight", 9]], [10], []]
         self.enc.sendEncoded(foo)
         self.enc.dataReceived(self.io.getvalue())
         assert self.result == foo, "%s!=%s" % (repr(self.result), repr(foo))
@@ -285,9 +286,9 @@ class BananaTests(BananaTestBase):
         data is not split.
         """
         foo = [1, 2, [3, 4], [30.5, 40.2], 5,
-               ["six", "seven", ["eight", 9]], [10],
+               [b"six", b"seven", [b"eight", 9]], [10],
                # TODO: currently the C implementation's a bit buggy...
-               sys.maxint * 3l, sys.maxint * 2l, sys.maxint * -2l]
+               sys.maxint * long(3), sys.maxint * long(2), sys.maxint * long(-2)]
         self.enc.sendEncoded(foo)
         self.feed(self.io.getvalue())
         assert self.result == foo, "%s!=%s" % (repr(self.result), repr(foo))
@@ -377,7 +378,9 @@ class BananaTests(BananaTestBase):
         self.assertEqual(self.encode(baseNegIn - 2), '\x02' + baseLongNegOut)
         self.assertEqual(self.encode(baseNegIn - 3), '\x03' + baseLongNegOut)
 
-
+    if _PY3:
+        test_negativeLong.skip = "There is no long on py3"
+        test_largeLong.skip = "There is no long on py3"
 
 class DialectTests(BananaTestBase):
     """
