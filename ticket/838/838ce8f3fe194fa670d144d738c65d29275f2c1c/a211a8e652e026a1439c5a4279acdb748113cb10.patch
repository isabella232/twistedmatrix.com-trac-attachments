diff --git twisted/logger/test/_assertionhelpers.py twisted/logger/test/_assertionhelpers.py
new file mode 100644
index 0000000..6b02e98
--- /dev/null
+++ twisted/logger/test/_assertionhelpers.py
@@ -0,0 +1,104 @@
+# -*- test-case-name: twisted.logger.test.test_assertionhelpers -*-
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+General assertion helpers for testing log events.
+"""
+
+
+
+def assertLogEvent(testCase, event, logger, level, namespace,
+                   source=None, format=None, **kwargs):
+    """
+    Assertion helper for testing a single log event.
+
+    @param testCase: The L{TestCase} object that wants to test some
+        log events using L{assertLogEvent}.
+    @type testCase: L{TestCase}
+
+    @param event: The emitted event, which is a L{dict}.
+    @type event: L{dict}
+
+    @param logger: L{Logger} object that the event was emitted to.
+    @type logger: L{Logger}
+
+    @param level: A L{LogLevel}.
+    @type level: L{LogLevel}
+
+    @param namespace: The namespace associated with the L{Logger}.
+    @type namespace: L{str} (native string)
+
+    @param source: The source object that emitted the event. This
+        will be L{None} if the L{Logger} is not accessed as an
+        attribute of an instance or class.
+    @type source: L{object} or L{None}
+
+    @param format: The format string provided for use by observers
+        that wish to render the event as text. The format string uses
+        new-style PEP 3101 formatting and is rendered using the log
+        event (which is a L{dict}). This may be L{None}, if no format
+        string was provided. The format string is optional, except when
+        a failure is being logged using L{Logger.failure}, in which
+        case a format string describing the failure must be provided.
+    @type format: L{str} or L{None}
+
+    @param kwargs: Additional key/value pairs that we expect to see
+        in the event being tested. This L{dict} may contain key/value
+        pairs needed to effectively render the format string.
+    @type kwargs: L{dict}
+    """
+    expectedEvent = {
+        'log_logger': logger, 'log_level': level, 'log_namespace': namespace,
+        'log_source': source, 'log_format': format
+    }
+    expectedEvent.update(kwargs)
+    expectedEvent.update(log_time=event['log_time'])
+    if 'log_failure' in event:
+        expectedEvent.update(log_failure=event['log_failure'])
+
+    testCase.maxDiff = None
+
+    testCase.assertEqual(event, expectedEvent)
+
+
+
+def assertLogEvents(testCase, actualEvents, expectedEvents,
+                    numOfExpectedEvents=None):
+    """
+    Assertion helper for testing multiple log events.
+
+    @param testCase: The L{TestCase} object that wants to test some
+        log events using L{assertLogEvents}.
+    @type testCase: L{TestCase}
+
+    @param actualEvents: A L{list} of L{dict} where each L{dict} is a
+        logged event emitted to a L{Logger} that appends events
+        to a L{list}.
+    @type actualEvents: L{list} of L{dict}
+
+    @param expectedEvents: A L{list} of L{dict} where each L{dict}
+        consists of key/value pairs that the testing code expects
+        to see in the C{actualEvents} being tested.
+    @type expectedEvents: L{list} of L{dict}
+
+    @param numOfExpectedEvents: The expected number of logged C{actualEvents},
+        which is L{None} by default.
+    @type numOfExpectedEvents: L{int} or L{None}
+    """
+    if numOfExpectedEvents is not None:
+        testCase.assertEqual(len(actualEvents), numOfExpectedEvents)
+    testCase.assertEqual(len(actualEvents), len(expectedEvents))
+
+    for actualEvent, expectedEvent in zip(actualEvents, expectedEvents):
+        expectedDict = expectedEvent.copy()
+        for key, value in expectedDict.iteritems():
+            if key.startswith('log_'):
+                newKeyName = key.split('_')[1]
+                del expectedDict[key]
+                expectedDict[newKeyName] = value
+        assertLogEvent(testCase, actualEvent, **expectedDict)
+
+
+
+__all__ = ['assertLogEvent', 'assertLogEvents']
diff --git twisted/logger/test/test_assertionhelpers.py twisted/logger/test/test_assertionhelpers.py
new file mode 100644
index 0000000..4a2a406
--- /dev/null
+++ twisted/logger/test/test_assertionhelpers.py
@@ -0,0 +1,287 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for L{twisted.logger.test._assertionhelpers}.
+"""
+
+from twisted.trial.unittest import TestCase
+from twisted.logger.test._assertionhelpers import (
+    assertLogEvent, assertLogEvents)
+from twisted.logger import Logger, LogLevel
+
+
+
+def _getNamespace(obj):
+    """
+    Returns the fully qualified (module name + object name)
+    dot-separated name of the given object.
+
+    @param obj: The object to return the fully qualified name
+        for.
+    @type obj: L{object}
+
+    @return: The fully qualified dot-separated name of obj.
+    @rtype: L{str}
+    """
+    return obj.__class__.__module__ + '.' + obj.__class__.__name__
+
+
+
+class ThingThatLogs(object):
+    """
+    Simple object that logs events.
+    """
+    _log = Logger()
+
+    def logInfo(self):
+        """
+        Log event at log level L{LogLevel.info}.
+        """
+        self._log.info('INFO: {quote} {obj!r}', obj=self,
+                       quote='Twisted is amazing!')
+
+
+    def logFailure(self):
+        """
+        Log a captured L{Failure}.
+        """
+        try:
+            1/0
+        except:
+            self._log.failure('Math is hard!')
+
+
+    def logEventWithNoFormatString(self):
+        """
+        Log an event at log level L{LogLevel.info} without
+        a format string.
+        """
+        self._log.info(obj=self)
+
+
+    def logMultipleEvents(self):
+        """
+        Log multiple events by calling all the log* methods
+        defined so far.
+        """
+        self.logInfo()
+        self.logFailure()
+        self.logEventWithNoFormatString()
+
+
+
+class AssertLogEventTests(TestCase):
+    """
+    Tests for L{twisted.logger.test._assertionhelpers.assertLogEvent}.
+    """
+    def setUp(self):
+        """
+        Sets up an instance of an object that emits log events
+        and accumulates all the emitted events in a list.
+        """
+        self.thingThatLogs = ThingThatLogs()
+        self.logger = self.thingThatLogs._log
+        self.events = []
+        self.logger.observer = self.events.append
+        self.thingThatLogs._log = self.logger
+
+
+    def test_assertInfoLogEvent(self):
+        """
+        Test a true condition of L{assertLogEvent} when some log event
+        is emitted.
+        """
+        self.thingThatLogs.logInfo()
+
+        assertLogEvent(
+            self, self.events[0], self.logger, LogLevel.info,
+            _getNamespace(self.thingThatLogs), source=self.thingThatLogs,
+            format='INFO: {quote} {obj!r}', obj=self.thingThatLogs,
+            quote='Twisted is amazing!'
+        )
+
+
+    def test_assertFailureLogEvent(self):
+        """
+        Test a true condition of L{assertLogEvent} when a failure is
+        logged using L{Logger.failure}.
+        """
+        self.thingThatLogs.logFailure()
+
+        assertLogEvent(
+            self, self.events[0], self.logger, LogLevel.critical,
+            _getNamespace(self.thingThatLogs), source=self.thingThatLogs,
+            format='Math is hard!'
+        )
+
+
+    def test_assertLogEventWithNoFormatString(self):
+        """
+        Test a true condition of L{assertLogEvent} when an emitted
+        event has no format string, C{log_format}.
+        """
+        self.thingThatLogs.logEventWithNoFormatString()
+
+        assertLogEvent(
+            self, self.events[0], self.logger, LogLevel.info,
+            _getNamespace(self.thingThatLogs), source=self.thingThatLogs,
+            obj=self.thingThatLogs
+        )
+
+
+    def test_assertLogEventWithNoSource(self):
+        """
+        Test a true condition of L{assertLogEvent} when an emitted
+        event has no source object (C{log_source} is L{None}, i.e. the
+        L{Logger} that the event was emitted to cannot be accessed
+        as an attribute of an instance or class).
+        """
+        events = []
+        log = Logger(observer=events.append)
+
+        log.info(home='Twisted Matrix Labs')
+
+        assertLogEvent(self, events[0], log, LogLevel.info, __name__,
+                       home='Twisted Matrix Labs')
+
+
+    def test_assertLogEventError(self):
+        """
+        Test an error with L{assertLogEvent}.
+        """
+        events = []
+        log = Logger(observer=events.append)
+
+        log.info('Twisted rocks!')
+
+        self.assertRaises(
+            self.failureException, assertLogEvent, self, events[0],
+            self.logger, LogLevel.warn, _getNamespace(self.thingThatLogs),
+            source=self.thingThatLogs, universalTruth='TWISTED PREVAILS!'
+        )
+
+
+
+class AssertLogEventsTests(TestCase):
+    """
+    Tests for L{twisted.logger.test._assertionhelpers.assertLogEvents}.
+    """
+    def setUp(self):
+        """
+        Sets up an instance of an object that emits log events
+        and accumulates all the emitted events in a list.
+        """
+        self.thingThatLogs = ThingThatLogs()
+        self.logger = self.thingThatLogs._log
+        self.events = []
+        self.logger.observer = self.events.append
+        self.thingThatLogs._log = self.logger
+
+
+    def test_assertMultipleLogEvents(self):
+        """
+        Test a true condition of L{assertLogEvents} when multiple
+        events are logged.
+        """
+        self.thingThatLogs.logMultipleEvents()
+
+        assertLogEvents(self, self.events, [
+            {
+                'log_logger': self.logger, 'log_level': LogLevel.info,
+                'log_namespace': _getNamespace(self.thingThatLogs),
+                'log_source': self.thingThatLogs, 'obj': self.thingThatLogs,
+                'log_format': 'INFO: {quote} {obj!r}',
+                'quote': 'Twisted is amazing!'
+            },
+            {
+                'log_logger': self.logger, 'log_level': LogLevel.critical,
+                'log_namespace': _getNamespace(self.thingThatLogs),
+                'log_source': self.thingThatLogs, 'log_format': 'Math is hard!'
+            },
+            {
+                'log_logger': self.logger, 'log_level': LogLevel.info,
+                'log_namespace': _getNamespace(self.thingThatLogs),
+                'log_source': self.thingThatLogs, 'obj': self.thingThatLogs
+            },
+
+        ], numOfExpectedEvents=3)
+
+
+    def test_withoutNumOfLoggedEvents(self):
+        """
+        Test a true condition of L{assertLogEvents} when the
+        C{numOfExpectedEvents} is not passed to L{assertLogEvents}.
+        """
+        self.thingThatLogs.logEventWithNoFormatString()
+
+        assertLogEvents(self, self.events, [
+            {
+                'log_logger': self.logger, 'log_level': LogLevel.info,
+                'log_namespace': _getNamespace(self.thingThatLogs),
+                'log_source': self.thingThatLogs, 'obj': self.thingThatLogs
+            }
+        ])
+
+
+    def test_numOfExpectedEventsIsNotEqualToLenOfActualEvents(self):
+        """
+        Test an error of L{assertLogEvents} when C{numOfExpectedEvents}
+        is not equal to the length of C{actualEvents} passed to
+        L{assertLogEvents}.
+        """
+        self.thingThatLogs.logMultipleEvents()
+
+        self.assertRaises(
+            self.failureException, assertLogEvents, self, self.events,
+            [
+                {
+                    'log_logger': self.logger, 'log_level': LogLevel.info,
+                    'log_namespace': _getNamespace(self.thingThatLogs),
+                    'log_source': self.thingThatLogs, 'obj': self.thingThatLogs
+                }
+            ], numOfExpectedEvents=1
+        )
+
+
+    def test_lenOfActualEventsIsNotEqualToLenOfExpectedEvents(self):
+        """
+        Test an error of L{assertLogEvents} when C{numOfExpectedEvents}
+        is not passed to L{assertLogEvents} and when the length of
+        C{actualEvents} is not equal to the length of L{expectedEvents}.
+        """
+        self.thingThatLogs.logMultipleEvents()
+
+        self.assertRaises(
+            self.failureException, assertLogEvents, self, self.events,
+            [
+                {
+                    'log_logger': self.logger, 'log_level': LogLevel.info,
+                    'log_namespace': _getNamespace(self.thingThatLogs),
+                    'log_source': self.thingThatLogs, 'obj': self.thingThatLogs
+                }
+            ]
+        )
+
+
+    def test_expectedEventsAreNotActualEvents(self):
+        """
+        Test an error of L{assertLogEvents} when the expected events
+        are not the actual events that have been logged.
+        """
+        events = []
+        log = Logger(observer=events.append)
+
+        log.info('Twisted rocks!')
+
+        self.assertRaises(
+            self.failureException, assertLogEvents, self, events,
+            [
+                {
+                    'log_logger': self.logger, 'log_level': LogLevel.warn,
+                    'log_namespace': _getNamespace(self.thingThatLogs),
+                    'log_source': self.thingThatLogs,
+                    'universalTruth': 'TWISTED PREVAILS!'
+                }
+            ], numOfExpectedEvents=1
+        )
diff --git twisted/topfiles/7934.feature twisted/topfiles/7934.feature
new file mode 100644
index 0000000..86d7a99
--- /dev/null
+++ twisted/topfiles/7934.feature
@@ -0,0 +1 @@
+The new module twisted.logger.test._assertionhelpers provides assertion helpers (assertLogEvent and assertLogEvents) for testing log events emitted by a twisted.logger.Logger.
