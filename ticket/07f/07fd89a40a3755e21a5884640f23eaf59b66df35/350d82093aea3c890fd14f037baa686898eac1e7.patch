--- /usr/lib/python2.3/site-packages/twisted/web/xmlrpc.py	2004-01-04 14:09:27.000000000 +0100
+++ xmlrpc.py	2004-01-04 14:13:57.000000000 +0100
@@ -316,12 +316,13 @@
     """A Proxy for making remote XML-RPC calls.
 
     Pass the URL of the remote XML-RPC server to the constructor.
+    Optionally a HTTP proxy hostname and port are supplied.
 
     Use proxy.callRemote('foobar', *args) to call remote method
     'foobar' with *args.
     """
 
-    def __init__(self, url):
+    def __init__(self, url, http_proxyhost=None, http_proxyport=None):
         parts = urlparse.urlparse(url)
         self.url = urlparse.urlunparse(('', '')+parts[2:])
         if self.url == "":
@@ -332,6 +333,13 @@
         else:
             self.host, self.port = parts[1], None
         self.secure = parts[0] == 'https'
+        self.http_proxyhost=http_proxyhost
+        self.http_proxyport=http_proxyport
+        if self.http_proxyhost:
+            if self.port:
+                self.url='http://'+self.host+':'+str(self.port)+self.url
+            else:
+                self.url='http://'+self.host+self.url
 
     def callRemote(self, method, *args):
         factory = QueryFactory(self.url, self.host, method, *args)
@@ -340,7 +348,11 @@
             reactor.connectSSL(self.host, self.port or 443,
                                factory, ssl.ClientContextFactory())
         else:
-            reactor.connectTCP(self.host, self.port or 80, factory)
+            if self.http_proxyhost:
+                reactor.connectTCP(self.http_proxyhost,
+                                   self.http_proxyport or 8080, factory)
+            else:
+                reactor.connectTCP(self.host, self.port or 80, factory)
         return factory.deferred
 
 __all__ = ["XMLRPC", "Handler", "NoSuchFunction", "Fault", "Proxy"]
