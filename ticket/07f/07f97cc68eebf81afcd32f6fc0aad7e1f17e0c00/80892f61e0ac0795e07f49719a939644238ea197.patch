Index: twisted/protocols/basic.py
===================================================================
--- twisted/protocols/basic.py	(revision 13912)
+++ twisted/protocols/basic.py	(working copy)
@@ -214,35 +214,33 @@
         Translates bytes into lines, and calls lineReceived (or
         rawDataReceived, depending on mode.)
         """
-        self.__buffer = self.__buffer+data
-        lastoffset=0
+        tmpbuffer = self.__buffer + data
+        self.__buffer = ''
+        lastoffset = 0
         while self.line_mode and not self.paused:
-            offset=self.__buffer.find(self.delimiter, lastoffset)
+            offset = tmpbuffer.find(self.delimiter, lastoffset)
             if offset == -1:
-                self.__buffer=self.__buffer[lastoffset:]
-                if len(self.__buffer) > self.MAX_LENGTH:
-                    line=self.__buffer
-                    self.__buffer=''
-                    return self.lineLengthExceeded(line)
+                tmpbuffer = tmpbuffer[lastoffset:]
+                if len(tmpbuffer) > self.MAX_LENGTH:
+                    return self.lineLengthExceeded(tmpbuffer)
+                self.__buffer = tmpbuffer
                 break
             
-            line=self.__buffer[lastoffset:offset]
-            lastoffset=offset+len(self.delimiter)
+            line = tmpbuffer[lastoffset:offset]
+            lastoffset = offset + len(self.delimiter)
             
             if len(line) > self.MAX_LENGTH:
-                line=self.__buffer[lastoffset:]
-                self.__buffer=''
+                line = tmpbuffer[lastoffset:]
                 return self.lineLengthExceeded(line)
             why = self.lineReceived(line)
             if why or self.transport and self.transport.disconnecting:
-                self.__buffer = self.__buffer[lastoffset:]
+                self.__buffer = tmpbuffer[lastoffset:]
                 return why
         else:
             if self.paused:
-                self.__buffer=self.__buffer[lastoffset:]
+                self.__buffer = tmpbuffer[lastoffset:]
             else:
-                data=self.__buffer[lastoffset:]
-                self.__buffer=''
+                data = tmpbuffer[lastoffset:]
                 if data:
                     return self.rawDataReceived(data)
 
Index: twisted/test/test_protocols.py
===================================================================
--- twisted/test/test_protocols.py	(revision 13997)
+++ twisted/test/test_protocols.py	(working copy)
@@ -41,6 +41,10 @@
             self.stopProducing()
         elif line[:4] == 'len ':
             self.length = int(line[4:])
+        elif line.startswith('produce'):
+            self.transport.registerProducer(self, False)
+        elif line.startswith('unproduce'):
+            self.transport.unregisterProducer()
 
     def rawDataReceived(self, data):
         data, rest = data[:self.length], data[self.length:]
@@ -183,6 +187,14 @@
                 s = self.stop_buf[i*packet_size:(i+1)*packet_size]
                 a.dataReceived(s)
             self.failUnlessEqual(self.stop_output, a.received)
+
+
+    def testLineReceiverAsProducer(self):
+        a = LineTester()
+        t = StringIOWithoutClosing()
+        a.makeConnection(protocol.FileWrapper(t))
+        a.dataReceived('produce\nhello world\nunproduce\ngoodbye\n')
+        self.assertEquals(a.received, ['produce', 'hello world', 'unproduce', 'goodbye'])
         
 
 class LineOnlyReceiverTestCase(unittest.TestCase):
