diff --git a/twisted/test/test_dirdbm.py b/twisted/test/test_dirdbm.py
index 8bd240f..b9710dd 100644
--- a/twisted/test/test_dirdbm.py
+++ b/twisted/test/test_dirdbm.py
@@ -109,7 +109,7 @@ class DirDbmTestCase(unittest.TestCase):
         # of this test. Thus we keep the range of acceptability to 3 seconds time.
         # -warner
         self.dbm["k"] = "v"
-        self.assert_(abs(time.time() - self.dbm.getModificationTime("k")) <= 3)
+        self.assertTrue(abs(time.time() - self.dbm.getModificationTime("k")) <= 3)
 
 
     def testRecovery(self):
diff --git a/twisted/test/test_doc.py b/twisted/test/test_doc.py
index 795fd87..f4902f9 100644
--- a/twisted/test/test_doc.py
+++ b/twisted/test/test_doc.py
@@ -51,7 +51,7 @@ class DocCoverage(unittest.TestCase):
                 pass
             else:
                 docless.extend(self.modulesInPackage(packageName, package))
-        self.failIf(docless, "No docstrings in module files:\n"
+        self.assertFalse(docless, "No docstrings in module files:\n"
                     "%s" % ('\n'.join(map(errorInFile, docless)),))
 
 
@@ -96,7 +96,7 @@ class DocCoverage(unittest.TestCase):
             else:
                 if not inspect.getdoc(package):
                     docless.append(package.__file__.replace('.pyc','.py'))
-        self.failIf(docless, "No docstrings for package files\n"
+        self.assertFalse(docless, "No docstrings for package files\n"
                     "%s" % ('\n'.join(map(errorInFile, docless),)))
 
 
diff --git a/twisted/test/test_epoll.py b/twisted/test/test_epoll.py
index b96e06f..2fa83b2 100644
--- a/twisted/test/test_epoll.py
+++ b/twisted/test/test_epoll.py
@@ -112,7 +112,7 @@ class EPoll(unittest.TestCase):
         now = time.time()
         events = untilConcludes(p.wait, 4, 1000)
         then = time.time()
-        self.failIf(then - now > 0.01)
+        self.assertFalse(then - now > 0.01)
 
         events.sort()
         expected = [(client.fileno(), _epoll.OUT),
@@ -124,8 +124,8 @@ class EPoll(unittest.TestCase):
         now = time.time()
         events = untilConcludes(p.wait, 4, 200)
         then = time.time()
-        self.failUnless(then - now > 0.1)
-        self.failIf(events)
+        self.assertTrue(then - now > 0.1)
+        self.assertFalse(events)
 
         client.send("Hello!")
         server.send("world!!!")
@@ -133,7 +133,7 @@ class EPoll(unittest.TestCase):
         now = time.time()
         events = untilConcludes(p.wait, 4, 1000)
         then = time.time()
-        self.failIf(then - now > 0.01)
+        self.assertFalse(then - now > 0.01)
 
         events.sort()
         expected = [(client.fileno(), _epoll.IN | _epoll.OUT),
diff --git a/twisted/test/test_explorer.py b/twisted/test/test_explorer.py
index 2b8fcf0..5e28111 100644
--- a/twisted/test/test_explorer.py
+++ b/twisted/test/test_explorer.py
@@ -95,7 +95,7 @@ class FIXME_Watch:
         testThing.someAttr = 'someValue'
 
         self.assertEqual(testThing.someAttr, 'someValue')
-        self.failUnless(self.watcher.len())
+        self.assertTrue(self.watcher.len())
         olink = self.watcher.links[-1]
         self.assertEqual(olink.id, id(testThing))
 
@@ -110,7 +110,7 @@ class FIXME_Watch:
         testThing.someAttr = 'ZORT'
 
         self.assertEqual(testThing.someAttr, 'TROZ')
-        self.failUnless(self.watcher.len())
+        self.assertTrue(self.watcher.len())
         olink = self.watcher.links[-1]
         self.assertEqual(olink.id, id(testThing))
 
@@ -126,7 +126,7 @@ class FIXME_Watch:
             rval = testThing.bip()
             self.assertEqual(rval, ('pencil',))
 
-            self.failUnless(self.watcher.len())
+            self.assertTrue(self.watcher.len())
             olink = self.watcher.links[-1]
             self.assertEqual(olink.id, id(testThing))
 
@@ -166,7 +166,7 @@ class TestBrowseFunction(unittest.TestCase):
 
             self.assertEqual(xplorer.id, id(f))
 
-            self.failUnless(isinstance(xplorer, explorer.ExplorerFunction))
+            self.assertTrue(isinstance(xplorer, explorer.ExplorerFunction))
 
             self.assertEqual(xplorer.name, f_name)
 
@@ -199,8 +199,8 @@ class TestBrowseFunction(unittest.TestCase):
         signature = xplorer.signature
 
         self.assertEqual(signature.name, expected_names)
-        self.failUnless(signature.is_varlist(0))
-        self.failUnless(signature.is_keyword(1))
+        self.assertTrue(signature.is_varlist(0))
+        self.assertTrue(signature.is_keyword(1))
 
     def test_signature_crazy(self):
         """Testing function with crazy signature.
@@ -217,8 +217,8 @@ class TestBrowseFunction(unittest.TestCase):
 
         # The name of the first argument seems to be indecipherable,
         # but make sure it has one (and no default).
-        self.failUnless(signature.get_name(0))
-        self.failUnless(not signature.get_default(0)[0])
+        self.assertTrue(signature.get_name(0))
+        self.assertTrue(not signature.get_default(0)[0])
 
         self.assertEqual(signature.get_name(1), 'c')
 
@@ -230,7 +230,7 @@ class TestBrowseFunction(unittest.TestCase):
         self.assertEqual(arg_2_default, range(4))
 
         self.assertEqual(signature.get_name(3), 'kw')
-        self.failUnless(signature.is_keyword(3))
+        self.assertTrue(signature.is_keyword(3))
 
 if __name__ == '__main__':
     unittest.main()
diff --git a/twisted/test/test_fdesc.py b/twisted/test/test_fdesc.py
index 0198e8d..d96825e 100644
--- a/twisted/test/test_fdesc.py
+++ b/twisted/test/test_fdesc.py
@@ -106,7 +106,7 @@ class ReadWriteTestCase(unittest.SynchronousTestCase):
         with its return value are seen by L{fdesc.readFromFD}.
         """
         n = self.write(b"hello")
-        self.failUnless(n > 0)
+        self.assertTrue(n > 0)
         s = self.read()
         self.assertEqual(len(s), n)
         self.assertEqual(b"hello"[:n], s)
@@ -119,7 +119,7 @@ class ReadWriteTestCase(unittest.SynchronousTestCase):
         """
         orig = b"0123456879" * 10000
         written = self.write(orig)
-        self.failUnless(written > 0)
+        self.assertTrue(written > 0)
         result = []
         resultlength = 0
         i = 0
diff --git a/twisted/test/test_ftp.py b/twisted/test/test_ftp.py
index 03208bb..89cf4e9 100644
--- a/twisted/test/test_ftp.py
+++ b/twisted/test/test_ftp.py
@@ -216,13 +216,13 @@ class BasicFTPServerTestCase(FTPServerTestCase):
         # Issue commands, check responses
         def checkFailResponse(exception, command):
             failureResponseLines = exception.args[0]
-            self.failUnless(failureResponseLines[-1].startswith("530"),
+            self.assertTrue(failureResponseLines[-1].startswith("530"),
                             "%s - Response didn't start with 530: %r"
                             % (command, failureResponseLines[-1],))
 
         def checkPassResponse(result, command):
             result = result[0]
-            self.failIf(result.startswith("530"),
+            self.assertFalse(result.startswith("530"),
                             "%s - Response start with 530: %r"
                             % (command, result,))
 
@@ -997,16 +997,16 @@ class FTPFileListingTests(unittest.TestCase):
         # This example line taken from the docstring for FTPFileListProtocol
         line = '-rw-r--r--   1 root     other        531 Jan 29 03:26 README'
         def check(((file,), other)):
-            self.failIf(other, 'unexpect unparsable lines: %s' % repr(other))
-            self.failUnless(file['filetype'] == '-', 'misparsed fileitem')
-            self.failUnless(file['perms'] == 'rw-r--r--', 'misparsed perms')
-            self.failUnless(file['owner'] == 'root', 'misparsed fileitem')
-            self.failUnless(file['group'] == 'other', 'misparsed fileitem')
-            self.failUnless(file['size'] == 531, 'misparsed fileitem')
-            self.failUnless(file['date'] == 'Jan 29 03:26', 'misparsed fileitem')
-            self.failUnless(file['filename'] == 'README', 'misparsed fileitem')
-            self.failUnless(file['nlinks'] == 1, 'misparsed nlinks')
-            self.failIf(file['linktarget'], 'misparsed linktarget')
+            self.assertFalse(other, 'unexpect unparsable lines: %s' % repr(other))
+            self.assertTrue(file['filetype'] == '-', 'misparsed fileitem')
+            self.assertTrue(file['perms'] == 'rw-r--r--', 'misparsed perms')
+            self.assertTrue(file['owner'] == 'root', 'misparsed fileitem')
+            self.assertTrue(file['group'] == 'other', 'misparsed fileitem')
+            self.assertTrue(file['size'] == 531, 'misparsed fileitem')
+            self.assertTrue(file['date'] == 'Jan 29 03:26', 'misparsed fileitem')
+            self.assertTrue(file['filename'] == 'README', 'misparsed fileitem')
+            self.assertTrue(file['nlinks'] == 1, 'misparsed nlinks')
+            self.assertFalse(file['linktarget'], 'misparsed linktarget')
         return self.getFilesForLines([line]).addCallback(check)
 
     def testVariantLines(self):
@@ -1014,33 +1014,33 @@ class FTPFileListingTests(unittest.TestCase):
         line2 = 'lrw-r--r--   1 root     other          1 Jan 29 03:26 B -> A'
         line3 = 'woohoo! '
         def check(((file1, file2), (other,))):
-            self.failUnless(other == 'woohoo! \r', 'incorrect other line')
+            self.assertTrue(other == 'woohoo! \r', 'incorrect other line')
             # file 1
-            self.failUnless(file1['filetype'] == 'd', 'misparsed fileitem')
-            self.failUnless(file1['perms'] == 'rw-r--r--', 'misparsed perms')
-            self.failUnless(file1['owner'] == 'root', 'misparsed owner')
-            self.failUnless(file1['group'] == 'other', 'misparsed group')
-            self.failUnless(file1['size'] == 531, 'misparsed size')
-            self.failUnless(file1['date'] == 'Jan  9  2003', 'misparsed date')
-            self.failUnless(file1['filename'] == 'A', 'misparsed filename')
-            self.failUnless(file1['nlinks'] == 2, 'misparsed nlinks')
-            self.failIf(file1['linktarget'], 'misparsed linktarget')
+            self.assertTrue(file1['filetype'] == 'd', 'misparsed fileitem')
+            self.assertTrue(file1['perms'] == 'rw-r--r--', 'misparsed perms')
+            self.assertTrue(file1['owner'] == 'root', 'misparsed owner')
+            self.assertTrue(file1['group'] == 'other', 'misparsed group')
+            self.assertTrue(file1['size'] == 531, 'misparsed size')
+            self.assertTrue(file1['date'] == 'Jan  9  2003', 'misparsed date')
+            self.assertTrue(file1['filename'] == 'A', 'misparsed filename')
+            self.assertTrue(file1['nlinks'] == 2, 'misparsed nlinks')
+            self.assertFalse(file1['linktarget'], 'misparsed linktarget')
             # file 2
-            self.failUnless(file2['filetype'] == 'l', 'misparsed fileitem')
-            self.failUnless(file2['perms'] == 'rw-r--r--', 'misparsed perms')
-            self.failUnless(file2['owner'] == 'root', 'misparsed owner')
-            self.failUnless(file2['group'] == 'other', 'misparsed group')
-            self.failUnless(file2['size'] == 1, 'misparsed size')
-            self.failUnless(file2['date'] == 'Jan 29 03:26', 'misparsed date')
-            self.failUnless(file2['filename'] == 'B', 'misparsed filename')
-            self.failUnless(file2['nlinks'] == 1, 'misparsed nlinks')
-            self.failUnless(file2['linktarget'] == 'A', 'misparsed linktarget')
+            self.assertTrue(file2['filetype'] == 'l', 'misparsed fileitem')
+            self.assertTrue(file2['perms'] == 'rw-r--r--', 'misparsed perms')
+            self.assertTrue(file2['owner'] == 'root', 'misparsed owner')
+            self.assertTrue(file2['group'] == 'other', 'misparsed group')
+            self.assertTrue(file2['size'] == 1, 'misparsed size')
+            self.assertTrue(file2['date'] == 'Jan 29 03:26', 'misparsed date')
+            self.assertTrue(file2['filename'] == 'B', 'misparsed filename')
+            self.assertTrue(file2['nlinks'] == 1, 'misparsed nlinks')
+            self.assertTrue(file2['linktarget'] == 'A', 'misparsed linktarget')
         return self.getFilesForLines([line1, line2, line3]).addCallback(check)
 
     def testUnknownLine(self):
         def check((files, others)):
-            self.failIf(files, 'unexpected file entries')
-            self.failUnless(others == ['ABC\r', 'not a file\r'],
+            self.assertFalse(files, 'unexpected file entries')
+            self.assertTrue(others == ['ABC\r', 'not a file\r'],
                             'incorrect unparsable lines: %s' % repr(others))
         return self.getFilesForLines(['ABC', 'not a file']).addCallback(check)
 
@@ -1098,9 +1098,9 @@ class FTPFileListingTests(unittest.TestCase):
 
         def check(ignored):
             file = fileList.files[0]
-            self.failUnless(file['size'] == 531, 'misparsed fileitem')
-            self.failUnless(file['date'] == 'Jan 29 2003', 'misparsed fileitem')
-            self.failUnless(file['filename'] == 'README', 'misparsed fileitem')
+            self.assertTrue(file['size'] == 531, 'misparsed fileitem')
+            self.assertTrue(file['date'] == 'Jan 29 2003', 'misparsed fileitem')
+            self.assertTrue(file['filename'] == 'README', 'misparsed fileitem')
 
         d = loopback.loopbackAsync(PrintLine(), fileList)
         return d.addCallback(check)
@@ -1155,7 +1155,7 @@ class FTPClientTests(unittest.TestCase):
         d.addErrback(_eb)
         from twisted.internet.main import CONNECTION_LOST
         ftpClient.connectionLost(failure.Failure(CONNECTION_LOST))
-        self.failUnless(m, m)
+        self.assertTrue(m, m)
         return d
 
 
@@ -1438,7 +1438,7 @@ class FTPClientTestCase(unittest.TestCase):
         self.client.lineReceived('200 PORT OK')
         self.assertEqual(self.transport.value(), 'RETR spam\r\n')
 
-        self.assert_(l)
+        self.assertTrue(l)
         l[0].loseConnection()
         self.transport.loseConnection()
         self.assertFailure(d, ftp.ConnectionLost)
diff --git a/twisted/test/test_internet.py b/twisted/test/test_internet.py
index 516258f..61ff6fe 100644
--- a/twisted/test/test_internet.py
+++ b/twisted/test/test_internet.py
@@ -787,7 +787,7 @@ class TimeTestCase(unittest.TestCase):
     def testCallLaterTime(self):
         d = reactor.callLater(10, lambda: None)
         try:
-            self.failUnless(d.getTime() - (time.time() + 10) < 1)
+            self.assertTrue(d.getTime() - (time.time() + 10) < 1)
         finally:
             d.cancel()
 
@@ -898,7 +898,7 @@ class CallFromThreadTests(unittest.TestCase):
 
     def _callFromThreadCallback2(self, d):
         try:
-            self.assert_(self.stopped)
+            self.assertTrue(self.stopped)
         except:
             # Send the error to the deferred
             d.errback()
@@ -942,7 +942,7 @@ class DelayedTestCase(unittest.TestCase):
                 missing.append(dc)
         if missing:
             self.finished = 1
-        self.failIf(missing, "Should have been missing no calls, instead was missing " + repr(missing))
+        self.assertFalse(missing, "Should have been missing no calls, instead was missing " + repr(missing))
 
     def callback(self, tag):
         del self.timers[tag]
@@ -1174,7 +1174,7 @@ class ProtocolTestCase(unittest.TestCase):
         factory = MyFactory()
         protocol = factory.buildProtocol(None)
         self.assertEqual(protocol.factory, factory)
-        self.assert_( isinstance(protocol, factory.protocol) )
+        self.assertTrue( isinstance(protocol, factory.protocol) )
 
 
 class DummyProducer(object):
diff --git a/twisted/test/test_jelly.py b/twisted/test/test_jelly.py
index 132e05f..009ecf8 100644
--- a/twisted/test/test_jelly.py
+++ b/twisted/test/test_jelly.py
@@ -396,12 +396,12 @@ class JellyTestCase(unittest.TestCase):
         """
         Simplest test case.
         """
-        self.failUnless(SimpleJellyTest('a', 'b').isTheSameAs(
+        self.assertTrue(SimpleJellyTest('a', 'b').isTheSameAs(
                         SimpleJellyTest('a', 'b')))
         a = SimpleJellyTest(1, 2)
         cereal = jelly.jelly(a)
         b = jelly.unjelly(cereal)
-        self.failUnless(a.isTheSameAs(b))
+        self.assertTrue(a.isTheSameAs(b))
 
 
     def test_identity(self):
@@ -561,7 +561,7 @@ class JellyTestCase(unittest.TestCase):
         x = jelly.unjelly(jel, persistentLoad = persistentLoad)
 
         self.assertIdentical(x.b, x.c.b)
-        self.failUnless(perst[0], "persistentStore was not called.")
+        self.assertTrue(perst[0], "persistentStore was not called.")
         self.assertIdentical(x.b, a.b, "Persistent storage identity failure.")
 
 
@@ -641,7 +641,7 @@ class CircularReferenceTestCase(unittest.TestCase):
         jelly.setUnjellyableForClass(ClassB, ClassB)
         j = jelly.jelly(a0, invoker=dummyInvoker)
         a1 = jelly.unjelly(j)
-        self.failUnlessIdentical(a1.ref.ref, a1,
+        self.assertIs(a1.ref.ref, a1,
             "Identity not preserved in circular reference")
 
 
diff --git a/twisted/test/test_log.py b/twisted/test/test_log.py
index 75aa08b..c72036a 100644
--- a/twisted/test/test_log.py
+++ b/twisted/test/test_log.py
@@ -314,7 +314,7 @@ class LogPublisherTestCaseMixin:
         setting, if it was modified by L{setUp}.
         """
         for chunk in self.out:
-            self.failUnless(isinstance(chunk, str), "%r was not a string" % (chunk,))
+            self.assertTrue(isinstance(chunk, str), "%r was not a string" % (chunk,))
 
         if self._origEncoding is not None:
             sys.setdefaultencoding(self._origEncoding)
diff --git a/twisted/test/test_logfile.py b/twisted/test/test_logfile.py
index e7db238..9509ce4 100644
--- a/twisted/test/test_logfile.py
+++ b/twisted/test/test_logfile.py
@@ -49,19 +49,19 @@ class LogFileTestCase(unittest.TestCase):
         log.write("123")
         log.write("4567890")
         log.write("1" * 11)
-        self.assert_(os.path.exists("%s.1" % self.path))
-        self.assert_(not os.path.exists("%s.2" % self.path))
+        self.assertTrue(os.path.exists("%s.1" % self.path))
+        self.assertTrue(not os.path.exists("%s.2" % self.path))
         log.write('')
-        self.assert_(os.path.exists("%s.1" % self.path))
-        self.assert_(os.path.exists("%s.2" % self.path))
-        self.assert_(not os.path.exists("%s.3" % self.path))
+        self.assertTrue(os.path.exists("%s.1" % self.path))
+        self.assertTrue(os.path.exists("%s.2" % self.path))
+        self.assertTrue(not os.path.exists("%s.3" % self.path))
         log.write("3")
-        self.assert_(not os.path.exists("%s.3" % self.path))
+        self.assertTrue(not os.path.exists("%s.3" % self.path))
 
         # test manual rotation
         log.rotate()
-        self.assert_(os.path.exists("%s.3" % self.path))
-        self.assert_(not os.path.exists("%s.4" % self.path))
+        self.assertTrue(os.path.exists("%s.3" % self.path))
+        self.assertTrue(not os.path.exists("%s.4" % self.path))
         log.close()
 
         self.assertEqual(log.listLogs(), [1, 2, 3])
@@ -173,18 +173,18 @@ class LogFileTestCase(unittest.TestCase):
                               maxRotatedFiles=3)
         log.write("1" * 11)
         log.write("2" * 11)
-        self.failUnless(os.path.exists("%s.1" % self.path))
+        self.assertTrue(os.path.exists("%s.1" % self.path))
 
         log.write("3" * 11)
-        self.failUnless(os.path.exists("%s.2" % self.path))
+        self.assertTrue(os.path.exists("%s.2" % self.path))
 
         log.write("4" * 11)
-        self.failUnless(os.path.exists("%s.3" % self.path))
+        self.assertTrue(os.path.exists("%s.3" % self.path))
         self.assertEqual(file("%s.3" % self.path).read(), "1" * 11)
 
         log.write("5" * 11)
         self.assertEqual(file("%s.3" % self.path).read(), "2" * 11)
-        self.failUnless(not os.path.exists("%s.4" % self.path))
+        self.assertTrue(not os.path.exists("%s.4" % self.path))
 
     def test_fromFullPath(self):
         """
@@ -307,14 +307,14 @@ class DailyLogFileTestCase(unittest.TestCase):
         log.write("4567890")
         log._clock = 86400  # 1970/01/02 00:00.00
         log.write("1" * 11)
-        self.assert_(os.path.exists(days[0]))
-        self.assert_(not os.path.exists(days[1]))
+        self.assertTrue(os.path.exists(days[0]))
+        self.assertTrue(not os.path.exists(days[1]))
         log._clock = 172800 # 1970/01/03 00:00.00
         log.write('')
-        self.assert_(os.path.exists(days[0]))
-        self.assert_(os.path.exists(days[1]))
-        self.assert_(not os.path.exists(days[2]))
+        self.assertTrue(os.path.exists(days[0]))
+        self.assertTrue(os.path.exists(days[1]))
+        self.assertTrue(not os.path.exists(days[2]))
         log._clock = 259199 # 1970/01/03 23:59.59
         log.write("3")
-        self.assert_(not os.path.exists(days[2]))
+        self.assertTrue(not os.path.exists(days[2]))
 
diff --git a/twisted/test/test_loopback.py b/twisted/test/test_loopback.py
index 21a93b5..64a78f0 100644
--- a/twisted/test/test_loopback.py
+++ b/twisted/test/test_loopback.py
@@ -104,8 +104,8 @@ class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
         server = TestProtocol()
         client = TestProtocol()
         loopback.loopbackAsync(server, client)
-        self.failIfEqual(client.transport, None)
-        self.failIfEqual(server.transport, None)
+        self.assertNotEqual(client.transport, None)
+        self.assertNotEqual(server.transport, None)
 
 
     def _hostpeertest(self, get, testServer):
@@ -130,7 +130,7 @@ class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
 
         def connected(transport):
             host = getattr(transport, get)()
-            self.failUnless(IAddress.providedBy(host))
+            self.assertTrue(IAddress.providedBy(host))
 
         return d.addCallback(connected)
 
diff --git a/twisted/test/test_modules.py b/twisted/test/test_modules.py
index 9af5d14..42c4670 100644
--- a/twisted/test/test_modules.py
+++ b/twisted/test/test_modules.py
@@ -161,7 +161,7 @@ class BasicTests(TwistedModulesTestCase):
         existentPath = self.pathEntryWithOnePackage()
 
         nonexistentPath = FilePath(self.mktemp())
-        self.failIf(nonexistentPath.exists())
+        self.assertFalse(nonexistentPath.exists())
 
         self.replaceSysPath([existentPath.path])
 
@@ -183,7 +183,7 @@ class BasicTests(TwistedModulesTestCase):
         existentPath = self.pathEntryWithOnePackage()
 
         nonDirectoryPath = FilePath(self.mktemp())
-        self.failIf(nonDirectoryPath.exists())
+        self.assertFalse(nonDirectoryPath.exists())
         nonDirectoryPath.setContent("zip file or whatever\n")
 
         self.replaceSysPath([existentPath.path])
@@ -222,7 +222,7 @@ class BasicTests(TwistedModulesTestCase):
         packages, not submodules or subpackages.
         """
         for module in modules.iterModules():
-            self.failIf(
+            self.assertFalse(
                 '.' in module.name,
                 "no nested modules should be returned from iterModules: %r"
                 % (module.filePath))
@@ -238,10 +238,10 @@ class BasicTests(TwistedModulesTestCase):
                   'twisted.python',
                   'twisted.python.reflect']:
             m = namedAny(n)
-            self.failUnlessIdentical(
+            self.assertIs(
                 modules.getModule(n).load(),
                 m)
-            self.failUnlessIdentical(
+            self.assertIs(
                 self.findByIteration(n).load(),
                 m)
 
@@ -255,7 +255,7 @@ class BasicTests(TwistedModulesTestCase):
                   'twisted',
                   'twisted.python',
                   'twisted.python.reflect']:
-            self.failUnlessIn(
+            self.assertIn(
                 modules.getModule(n).pathEntry.filePath.path,
                 sys.path)
 
diff --git a/twisted/test/test_newcred.py b/twisted/test/test_newcred.py
index 01660cd..47c790a 100644
--- a/twisted/test/test_newcred.py
+++ b/twisted/test/test_newcred.py
@@ -106,13 +106,13 @@ class NewCredTest(unittest.TestCase):
         iface, impl, logout = l[0]
         # whitebox
         self.assertEqual(iface, ITestable)
-        self.failUnless(iface.providedBy(impl),
+        self.assertTrue(iface.providedBy(impl),
                         "%s does not implement %s" % (impl, iface))
         # greybox
-        self.failUnless(impl.original.loggedIn)
-        self.failUnless(not impl.original.loggedOut)
+        self.assertTrue(impl.original.loggedIn)
+        self.assertTrue(not impl.original.loggedOut)
         logout()
-        self.failUnless(impl.original.loggedOut)
+        self.assertTrue(impl.original.loggedOut)
 
     def test_derivedInterface(self):
         """
@@ -129,20 +129,20 @@ class NewCredTest(unittest.TestCase):
         iface, impl, logout = l[0]
         # whitebox
         self.assertEqual(iface, ITestable)
-        self.failUnless(iface.providedBy(impl),
+        self.assertTrue(iface.providedBy(impl),
                         "%s does not implement %s" % (impl, iface))
         # greybox
-        self.failUnless(impl.original.loggedIn)
-        self.failUnless(not impl.original.loggedOut)
+        self.assertTrue(impl.original.loggedIn)
+        self.assertTrue(not impl.original.loggedOut)
         logout()
-        self.failUnless(impl.original.loggedOut)
+        self.assertTrue(impl.original.loggedOut)
 
     def testFailedLogin(self):
         l = []
         self.portal.login(credentials.UsernamePassword("bob", "h3llo"),
                           self, ITestable).addErrback(
             lambda x: x.trap(error.UnauthorizedLogin)).addCallback(l.append)
-        self.failUnless(l)
+        self.assertTrue(l)
         self.assertEqual(error.UnauthorizedLogin, l[0])
 
     def testFailedLoginName(self):
@@ -150,7 +150,7 @@ class NewCredTest(unittest.TestCase):
         self.portal.login(credentials.UsernamePassword("jay", "hello"),
                           self, ITestable).addErrback(
             lambda x: x.trap(error.UnauthorizedLogin)).addCallback(l.append)
-        self.failUnless(l)
+        self.assertTrue(l)
         self.assertEqual(error.UnauthorizedLogin, l[0])
 
 
@@ -164,11 +164,11 @@ class CramMD5CredentialsTestCase(unittest.TestCase):
         c = credentials.CramMD5Credentials()
         chal = c.getChallenge()
         c.response = hmac.HMAC('secret', chal).hexdigest()
-        self.failUnless(c.checkPassword('secret'))
+        self.assertTrue(c.checkPassword('secret'))
 
     def testWrongPassword(self):
         c = credentials.CramMD5Credentials()
-        self.failIf(c.checkPassword('secret'))
+        self.assertFalse(c.checkPassword('secret'))
 
 class OnDiskDatabaseTestCase(unittest.TestCase):
     users = [
@@ -187,7 +187,7 @@ class OnDiskDatabaseTestCase(unittest.TestCase):
         f.close()
 
         for (u, p) in self.users:
-            self.failUnlessRaises(KeyError, db.getUser, u.upper())
+            self.assertRaises(KeyError, db.getUser, u.upper())
             self.assertEqual(db.getUser(u), (u, p))
 
     def testCaseInSensitivity(self):
