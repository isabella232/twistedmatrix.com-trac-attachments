diff --git a/twisted/test/test_rebuild.py b/twisted/test/test_rebuild.py
index dfeca9d..2978868 100644
--- a/twisted/test/test_rebuild.py
+++ b/twisted/test/test_rebuild.py
@@ -104,9 +104,9 @@ class RebuildTestCase(unittest.TestCase):
         rebuild.rebuild(crash_test_dummy, doLog=False)
         # Instance rebuilding is triggered by attribute access.
         x.do()
-        self.failUnlessIdentical(x.__class__, crash_test_dummy.X)
+        self.assertIs(x.__class__, crash_test_dummy.X)
 
-        self.failUnlessIdentical(f, crash_test_dummy.foo)
+        self.assertIs(f, crash_test_dummy.foo)
 
     def testComponentInteraction(self):
         x = crash_test_dummy.XComponent()
@@ -121,7 +121,7 @@ class RebuildTestCase(unittest.TestCase):
 
         # Test that a duplicate registerAdapter is not allowed
         from twisted.python import components
-        self.failUnlessRaises(ValueError, components.registerAdapter,
+        self.assertRaises(ValueError, components.registerAdapter,
                               crash_test_dummy.XA, crash_test_dummy.X,
                               crash_test_dummy.IX)
 
diff --git a/twisted/test/test_roots.py b/twisted/test/test_roots.py
index c9fd39e..32aba9d 100644
--- a/twisted/test/test_roots.py
+++ b/twisted/test/test_roots.py
@@ -49,7 +49,7 @@ class RootsTest(unittest.TestCase):
                 return (name == 'x')
         c = const()
         self.assertEqual(c.putEntity('x', 'test'), None)
-        self.failUnlessRaises(roots.ConstraintViolation,
+        self.assertRaises(roots.ConstraintViolation,
                               c.putEntity, 'y', 'test')
 
 
@@ -58,6 +58,6 @@ class RootsTest(unittest.TestCase):
         h.entityType = types.IntType
         h.putEntity('a', 1)
         self.assertEqual(h.getStaticEntity('a'),1 )
-        self.failUnlessRaises(roots.ConstraintViolation,
+        self.assertRaises(roots.ConstraintViolation,
                               h.putEntity, 'x', 'y')
 
diff --git a/twisted/test/test_shortcut.py b/twisted/test/test_shortcut.py
index fdcb775..0368870 100644
--- a/twisted/test/test_shortcut.py
+++ b/twisted/test/test_shortcut.py
@@ -20,7 +20,7 @@ if os.name == 'nt':
             s1=shortcut.Shortcut("test_shortcut.py")
             tempname=self.mktemp() + '.lnk'
             s1.save(tempname)
-            self.assert_(os.path.exists(tempname))
+            self.assertTrue(os.path.exists(tempname))
             sc=shortcut.open(tempname)
-            self.assert_(sc.GetPath(0)[0].endswith('test_shortcut.py'))
+            self.assertTrue(sc.GetPath(0)[0].endswith('test_shortcut.py'))
     ShortcutTest.skip = skipWindowsNopywin32
diff --git a/twisted/test/test_sip.py b/twisted/test/test_sip.py
index 73f09d4..6bf93de 100644
--- a/twisted/test/test_sip.py
+++ b/twisted/test/test_sip.py
@@ -203,17 +203,17 @@ class MessageParsingTestCase(unittest.TestCase):
         """
         l = self.l
         self.feedMessage(response_multiline)
-        self.assertEquals(len(l), 1)
+        self.assertEqual(len(l), 1)
         m = l[0]
-        self.assertEquals(
+        self.assertEqual(
             m.headers['via'][0],
             "SIP/2.0/UDP server10.biloxi.com;"
             "branch=z9hG4bKnashds8;received=192.0.2.3")
-        self.assertEquals(
+        self.assertEqual(
             m.headers['via'][1],
             "SIP/2.0/UDP bigbox3.site3.atlanta.com;"
             "branch=z9hG4bK77ef4c2312983.1;received=192.0.2.2")
-        self.assertEquals(
+        self.assertEqual(
             m.headers['via'][2],
             "SIP/2.0/UDP pc33.atlanta.com;"
             "branch=z9hG4bK776asdhds ;received=192.0.2.1")
@@ -578,7 +578,7 @@ class RegistrationTestCase(unittest.TestCase):
         self.assertEqual(m.headers["via"], ["SIP/2.0/UDP client.com:5060"])
         self.assertEqual(m.headers["to"], ["sip:joe@bell.example.com"])
         self.assertEqual(m.headers["contact"], ["sip:joe@client.com:5060"])
-        self.failUnless(
+        self.assertTrue(
             int(m.headers["expires"][0]) in (3600, 3601, 3599, 3598))
         self.assertEqual(len(self.registry.users), 1)
         dc, uri = self.registry.users["joe"]
diff --git a/twisted/test/test_socks.py b/twisted/test/test_socks.py
index ebcb843..c95654c 100644
--- a/twisted/test/test_socks.py
+++ b/twisted/test/test_socks.py
@@ -95,7 +95,7 @@ class Connect(unittest.TestCase):
     def tearDown(self):
         outgoing = self.sock.driver_outgoing
         if outgoing is not None:
-            self.assert_(outgoing.transport.stringTCPTransport_closing,
+            self.assertTrue(outgoing.transport.stringTCPTransport_closing,
                          "Outgoing SOCKS connections need to be closed.")
 
 
@@ -110,8 +110,8 @@ class Connect(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 34)
                          + socket.inet_aton('1.2.3.4'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
-        self.assert_(self.sock.driver_outgoing is not None)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(self.sock.driver_outgoing is not None)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
@@ -211,7 +211,7 @@ class Connect(unittest.TestCase):
         self.assertEqual(self.sock.transport.value(),
                          struct.pack('!BBH', 0, 91, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(self.sock.transport.stringTCPTransport_closing)
         self.assertIdentical(self.sock.driver_outgoing, None)
 
 
@@ -267,7 +267,7 @@ class Bind(unittest.TestCase):
 ##         # TODO ensure the listen port is closed
 ##         listen = self.sock.driver_listen
 ##         if listen is not None:
-##             self.assert_(incoming.transport.stringTCPTransport_closing,
+##             self.assertTrue(incoming.transport.stringTCPTransport_closing,
 ##                     "Incoming SOCKS connections need to be closed.")
 
     def test_simple(self):
@@ -281,8 +281,8 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 1234)
                          + socket.inet_aton('6.7.8.9'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
-        self.assert_(self.sock.driver_listen is not None)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(self.sock.driver_listen is not None)
 
         # connect
         incoming = self.sock.driver_listen.buildProtocol(('1.2.3.4', 5345))
@@ -296,7 +296,7 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
@@ -409,7 +409,7 @@ class Bind(unittest.TestCase):
         self.assertEqual(self.sock.transport.value(),
                          struct.pack('!BBH', 0, 91, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(self.sock.transport.stringTCPTransport_closing)
         self.assertIdentical(self.sock.driver_listen, None)
 
     def test_eofRemote(self):
@@ -433,7 +433,7 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
@@ -465,7 +465,7 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
@@ -495,4 +495,4 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 91, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(self.sock.transport.stringTCPTransport_closing)
diff --git a/twisted/test/test_ssl.py b/twisted/test/test_ssl.py
index 136bc2d..160c17e 100644
--- a/twisted/test/test_ssl.py
+++ b/twisted/test/test_ssl.py
@@ -419,7 +419,7 @@ class TLSTestCase(unittest.TestCase):
                 self.serverFactory.lines,
                 UnintelligentProtocol.pretext
             )
-            self.failUnless(self.serverFactory.rawdata,
+            self.assertTrue(self.serverFactory.rawdata,
                             "No encrypted bytes received")
         d = self._runTest(UnintelligentProtocol(),
                           LineCollector(False, self.fillBuffer))
@@ -599,8 +599,8 @@ class ConnectionLostTestCase(unittest.TestCase, ContextGeneratingMixin):
     def _cbLostConns(self, results):
         (sSuccess, sResult), (cSuccess, cResult) = results
 
-        self.failIf(sSuccess)
-        self.failIf(cSuccess)
+        self.assertFalse(sSuccess)
+        self.assertFalse(cSuccess)
 
         acceptableErrors = [SSL.Error]
 
diff --git a/twisted/test/test_sslverify.py b/twisted/test/test_sslverify.py
index 65bef5c..5aa9c3d 100644
--- a/twisted/test/test_sslverify.py
+++ b/twisted/test/test_sslverify.py
@@ -356,8 +356,8 @@ class OpenSSLOptions(unittest.TestCase):
 
         def afterLost(result):
             ((cSuccess, cResult), (sSuccess, sResult)) = result
-            self.failIf(cSuccess)
-            self.failIf(sSuccess)
+            self.assertFalse(cSuccess)
+            self.assertFalse(sSuccess)
             # Win32 fails to report the SSL Error, and report a connection lost
             # instead: there is a race condition so that's not totally
             # surprising (see ticket #2877 in the tracker)
@@ -385,8 +385,8 @@ class OpenSSLOptions(unittest.TestCase):
                                consumeErrors=True)
         def afterLost(result):
             ((cSuccess, cResult), (sSuccess, sResult)) = result
-            self.failIf(cSuccess)
-            self.failIf(sSuccess)
+            self.assertFalse(cSuccess)
+            self.assertFalse(sSuccess)
 
         return d.addCallback(afterLost)
 
@@ -507,7 +507,7 @@ class Constructors(unittest.TestCase):
         x = self.assertRaises(CertificateError,
                               sslverify.Certificate.peerFromTransport,
                               _NotSSLTransport())
-        self.failUnless(str(x).startswith("non-TLS"))
+        self.assertTrue(str(x).startswith("non-TLS"))
 
     def test_peerFromBlankSSLTransport(self):
         """
@@ -517,7 +517,7 @@ class Constructors(unittest.TestCase):
         x = self.assertRaises(CertificateError,
                               sslverify.Certificate.peerFromTransport,
                               _MaybeSSLTransport())
-        self.failUnless(str(x).startswith("TLS"))
+        self.assertTrue(str(x).startswith("TLS"))
 
     def test_hostFromNonSSLTransport(self):
         """
@@ -527,7 +527,7 @@ class Constructors(unittest.TestCase):
         x = self.assertRaises(CertificateError,
                               sslverify.Certificate.hostFromTransport,
                               _NotSSLTransport())
-        self.failUnless(str(x).startswith("non-TLS"))
+        self.assertTrue(str(x).startswith("non-TLS"))
 
     def test_hostFromBlankSSLTransport(self):
         """
@@ -537,7 +537,7 @@ class Constructors(unittest.TestCase):
         x = self.assertRaises(CertificateError,
                               sslverify.Certificate.hostFromTransport,
                               _MaybeSSLTransport())
-        self.failUnless(str(x).startswith("TLS"))
+        self.assertTrue(str(x).startswith("TLS"))
 
 
     def test_hostFromSSLTransport(self):
diff --git a/twisted/test/test_stdio.py b/twisted/test/test_stdio.py
index 3da754c..86849aa 100644
--- a/twisted/test/test_stdio.py
+++ b/twisted/test/test_stdio.py
@@ -140,7 +140,7 @@ class StandardInputOutputTestCase(unittest.TestCase):
             for line in file(errorLogFile):
                 log.msg("Child logged: " + line.rstrip())
 
-            self.failIfIn(1, p.data)
+            self.assertNotIn(1, p.data)
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
 
@@ -221,8 +221,8 @@ class StandardInputOutputTestCase(unittest.TestCase):
 
         def processEnded(reason):
             host, peer = p.data[1].splitlines()
-            self.failUnless(host)
-            self.failUnless(peer)
+            self.assertTrue(host)
+            self.assertTrue(peer)
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
 
@@ -291,7 +291,7 @@ class StandardInputOutputTestCase(unittest.TestCase):
 
         def processEnded(reason):
             self.assertEqual(p.data[1], ''.join(written))
-            self.failIf(toWrite, "Connection lost with %d writes left to go." % (len(toWrite),))
+            self.assertFalse(toWrite, "Connection lost with %d writes left to go." % (len(toWrite),))
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
 
diff --git a/twisted/test/test_task.py b/twisted/test/test_task.py
index d7edf40..6e906a1 100644
--- a/twisted/test/test_task.py
+++ b/twisted/test/test_task.py
@@ -52,9 +52,9 @@ class ClockTestCase(unittest.TestCase):
         """
         c = task.Clock()
         call = c.callLater(1, lambda a, b: None, 1, b=2)
-        self.failUnless(interfaces.IDelayedCall.providedBy(call))
+        self.assertTrue(interfaces.IDelayedCall.providedBy(call))
         self.assertEqual(call.getTime(), 1)
-        self.failUnless(call.active())
+        self.assertTrue(call.active())
 
 
     def testCallLaterCancelled(self):
@@ -64,7 +64,7 @@ class ClockTestCase(unittest.TestCase):
         c = task.Clock()
         call = c.callLater(1, lambda a, b: None, 1, b=2)
         call.cancel()
-        self.failIf(call.active())
+        self.assertFalse(call.active())
 
 
     def test_callLaterOrdering(self):
@@ -75,7 +75,7 @@ class ClockTestCase(unittest.TestCase):
         c = task.Clock()
         call1 = c.callLater(10, lambda a, b: None, 1, b=2)
         call2 = c.callLater(1, lambda a, b: None, 3, b=4)
-        self.failIf(call1 is call2)
+        self.assertFalse(call1 is call2)
 
 
     def testAdvance(self):
@@ -89,7 +89,7 @@ class ClockTestCase(unittest.TestCase):
         self.assertEqual(events, [])
         c.advance(1)
         self.assertEqual(events, [None])
-        self.failIf(call.active())
+        self.assertFalse(call.active())
 
 
     def testAdvanceCancel(self):
@@ -175,7 +175,7 @@ class ClockTestCase(unittest.TestCase):
 
     def test_providesIReactorTime(self):
         c = task.Clock()
-        self.failUnless(interfaces.IReactorTime.providedBy(c),
+        self.assertTrue(interfaces.IReactorTime.providedBy(c),
                         "Clock does not provide IReactorTime")
 
 
@@ -476,7 +476,7 @@ class LoopTestCase(unittest.TestCase):
         self.assertIdentical(theResult[0], lc)
 
         # Make sure it isn't planning to do anything further.
-        self.failIf(clock.calls)
+        self.assertFalse(clock.calls)
 
 
     def testDelayedStart(self):
@@ -500,7 +500,7 @@ class LoopTestCase(unittest.TestCase):
         lc.stop()
         self.assertIdentical(theResult[0], lc)
 
-        self.failIf(clock.calls)
+        self.assertFalse(clock.calls)
 
 
     def testBadDelay(self):
@@ -518,8 +518,8 @@ class LoopTestCase(unittest.TestCase):
         lc = TestableLoopingCall(clock, foo)
         lc.start(delay, now=False)
         lc.stop()
-        self.failIf(ran)
-        self.failIf(clock.calls)
+        self.assertFalse(ran)
+        self.assertFalse(clock.calls)
 
 
     def testStopAtOnce(self):
@@ -634,7 +634,7 @@ class ReactorLoopTestCase(unittest.TestCase):
         lc = TestableLoopingCall(clock, foo)
         lc.start(0.2)
         clock.pump(timings)
-        self.failIf(clock.calls)
+        self.assertFalse(clock.calls)
 
     def testFailurePropagation(self):
         # Tests if the failure of the errback of the deferred returned by the
@@ -656,7 +656,7 @@ class ReactorLoopTestCase(unittest.TestCase):
         self.assertFailure(d, TestException)
 
         clock.pump(timings)
-        self.failIf(clock.calls)
+        self.assertFalse(clock.calls)
         return d
 
 
diff --git a/twisted/test/test_tcp.py b/twisted/test/test_tcp.py
index 23d6ce9..a46f94e 100644
--- a/twisted/test/test_tcp.py
+++ b/twisted/test/test_tcp.py
@@ -180,7 +180,7 @@ class ListeningTestCase(unittest.TestCase):
         f = MyServerFactory()
         p1 = reactor.listenTCP(0, f, interface="127.0.0.1")
         self.addCleanup(p1.stopListening)
-        self.failUnless(interfaces.IListeningPort.providedBy(p1))
+        self.assertTrue(interfaces.IListeningPort.providedBy(p1))
 
 
     def testStopListening(self):
@@ -214,9 +214,9 @@ class ListeningTestCase(unittest.TestCase):
         f = MyServerFactory()
         p = reactor.listenTCP(0, f)
         portNo = str(p.getHost().port)
-        self.failIf(repr(p).find(portNo) == -1)
+        self.assertFalse(repr(p).find(portNo) == -1)
         def stoppedListening(ign):
-            self.failIf(repr(p).find(portNo) != -1)
+            self.assertFalse(repr(p).find(portNo) != -1)
         d = defer.maybeDeferred(p.stopListening)
         return d.addCallback(stoppedListening)
 
@@ -908,13 +908,13 @@ class WriteDataTestCase(unittest.TestCase):
         reactor.connectTCP("127.0.0.1", n, wrappedClientF)
 
         def check(ignored):
-            self.failUnless(f.done, "writer didn't finish, it probably died")
-            self.failUnless(f.problem == 0, "writer indicated an error")
-            self.failUnless(clientF.done,
+            self.assertTrue(f.done, "writer didn't finish, it probably died")
+            self.assertTrue(f.problem == 0, "writer indicated an error")
+            self.assertTrue(clientF.done,
                             "client didn't see connection dropped")
             expected = b"".join([b"Hello Cleveland!\n",
                                 b"Goodbye", b" cruel", b" world", b"\n"])
-            self.failUnless(clientF.data == expected,
+            self.assertTrue(clientF.data == expected,
                             "client didn't receive all the data it expected")
         d = defer.gatherResults([wrappedF.onDisconnect,
                                  wrappedClientF.onDisconnect])
@@ -1435,11 +1435,11 @@ class LargeBufferTestCase(unittest.TestCase):
 
         d = defer.gatherResults([wrappedF.deferred, wrappedClientF.deferred])
         def check(ignored):
-            self.failUnless(f.done, "writer didn't finish, it probably died")
-            self.failUnless(clientF.len == self.datalen,
+            self.assertTrue(f.done, "writer didn't finish, it probably died")
+            self.assertTrue(clientF.len == self.datalen,
                             "client didn't receive all the data it expected "
                             "(%d != %d)" % (clientF.len, self.datalen))
-            self.failUnless(clientF.done,
+            self.assertTrue(clientF.done,
                             "client didn't see connection dropped")
         return d.addCallback(check)
 
diff --git a/twisted/test/test_text.py b/twisted/test/test_text.py
index 4b2d38c..dfc38f0 100644
--- a/twisted/test/test_text.py
+++ b/twisted/test/test_text.py
@@ -56,7 +56,7 @@ class WrapTest(unittest.TestCase):
 
         # Using assertEqual here prints out some
         # rather too long lists.
-        self.failUnless(self.sampleSplitText == words)
+        self.assertTrue(self.sampleSplitText == words)
 
 
     def test_lineLength(self):
diff --git a/twisted/test/test_threadpool.py b/twisted/test/test_threadpool.py
index bc02049..77f583a 100644
--- a/twisted/test/test_threadpool.py
+++ b/twisted/test/test_threadpool.py
@@ -261,7 +261,7 @@ class ThreadPoolTestCase(unittest.SynchronousTestCase):
 
         self._waitForLock(waiting)
 
-        self.failIf(actor.failures, "run() re-entered %d times" %
+        self.assertFalse(actor.failures, "run() re-entered %d times" %
                                     (actor.failures,))
 
 
diff --git a/twisted/test/test_threads.py b/twisted/test/test_threads.py
index 69ee19d..0ac6555 100644
--- a/twisted/test/test_threads.py
+++ b/twisted/test/test_threads.py
@@ -172,7 +172,7 @@ class ReactorThreadsTestCase(unittest.TestCase):
         def reactorFunc():
             return defer.fail(RuntimeError("bar"))
         def cb(res):
-            self.assert_(isinstance(res[1][0], RuntimeError))
+            self.assertTrue(isinstance(res[1][0], RuntimeError))
             self.assertEqual(res[1][0].args[0], "bar")
 
         return self._testBlockingCallFromThread(reactorFunc).addCallback(cb)
@@ -187,7 +187,7 @@ class ReactorThreadsTestCase(unittest.TestCase):
             reactor.callLater(0.1, d.errback, RuntimeError("spam"))
             return d
         def cb(res):
-            self.assert_(isinstance(res[1][0], RuntimeError))
+            self.assertTrue(isinstance(res[1][0], RuntimeError))
             self.assertEqual(res[1][0].args[0], "spam")
 
         return self._testBlockingCallFromThread(reactorFunc).addCallback(cb)
@@ -392,7 +392,7 @@ class StartupBehaviorTestCase(unittest.TestCase):
 
             if err:
                 log.msg("Unexpected output on standard error: %s" % (err,))
-            self.failIf(out, "Expected no output, instead received:\n%s" % (out,))
+            self.assertFalse(out, "Expected no output, instead received:\n%s" % (out,))
 
         def programTimeout(err):
             err.trap(error.TimeoutError)
diff --git a/twisted/test/test_tpfile.py b/twisted/test/test_tpfile.py
index 655a166..46c8b9f 100644
--- a/twisted/test/test_tpfile.py
+++ b/twisted/test/test_tpfile.py
@@ -47,6 +47,6 @@ class FileSenderTestCase(unittest.TestCase):
         self.assertEqual(consumer.producer, None)
 
         # Which means the Deferred from FileSender should have been called
-        self.failUnless(d.called, 
+        self.assertTrue(d.called, 
                         'producer unregistered with deferred being called')
 
diff --git a/twisted/test/test_udp.py b/twisted/test/test_udp.py
index 21d145c..4e3aa75 100644
--- a/twisted/test/test_udp.py
+++ b/twisted/test/test_udp.py
@@ -382,7 +382,7 @@ class UDPTestCase(unittest.TestCase):
                 except:
                     finalDeferred.errback()
 
-            self.failIfIdentical(client.transport, None, "UDP Protocol lost its transport")
+            self.assertIsNot(client.transport, None, "UDP Protocol lost its transport")
 
             packet = intToBytes(attempts.pop(0))
             packetDeferred = defer.Deferred()
diff --git a/twisted/test/test_unix.py b/twisted/test/test_unix.py
index 863f665..3cfd38f 100644
--- a/twisted/test/test_unix.py
+++ b/twisted/test/test_unix.py
@@ -116,7 +116,7 @@ class UnixSocketTestCase(unittest.TestCase):
         d.addCallback(_portStuff)
 
         def _check(ignored):
-            self.failIf(lockfile.isLocked(filename + ".lock"), 'locked')
+            self.assertFalse(lockfile.isLocked(filename + ".lock"), 'locked')
         d.addCallback(_check)
         return d
 
@@ -329,7 +329,7 @@ class DatagramUnixSocketTestCase(unittest.TestCase):
         addr = self.mktemp()
         p = ServerProto()
         s = reactor.listenUNIXDatagram(addr, p)
-        self.failUnlessRaises(error.CannotListenError, reactor.listenUNIXDatagram, addr, p)
+        self.assertRaises(error.CannotListenError, reactor.listenUNIXDatagram, addr, p)
         s.stopListening()
         os.unlink(addr)
 
diff --git a/twisted/test/test_usage.py b/twisted/test/test_usage.py
index 5a20f01..ff0a59d 100644
--- a/twisted/test/test_usage.py
+++ b/twisted/test/test_usage.py
@@ -108,9 +108,9 @@ class TypedTestCase(unittest.TestCase):
         argV = []
         self.usage.parseOptions(argV)
         self.assertEqual(self.usage.opts['fooint'], 392)
-        self.assert_(isinstance(self.usage.opts['fooint'], int))
+        self.assertTrue(isinstance(self.usage.opts['fooint'], int))
         self.assertEqual(self.usage.opts['foofloat'], 4.23)
-        self.assert_(isinstance(self.usage.opts['foofloat'], float))
+        self.assertTrue(isinstance(self.usage.opts['foofloat'], float))
         self.assertEqual(self.usage.opts['eggint'], None)
         self.assertEqual(self.usage.opts['eggfloat'], None)
 
@@ -123,13 +123,13 @@ class TypedTestCase(unittest.TestCase):
                 "--eggint 32 --eggfloat 21").split()
         self.usage.parseOptions(argV)
         self.assertEqual(self.usage.opts['fooint'], 912)
-        self.assert_(isinstance(self.usage.opts['fooint'], int))
+        self.assertTrue(isinstance(self.usage.opts['fooint'], int))
         self.assertEqual(self.usage.opts['foofloat'], -823.1)
-        self.assert_(isinstance(self.usage.opts['foofloat'], float))
+        self.assertTrue(isinstance(self.usage.opts['foofloat'], float))
         self.assertEqual(self.usage.opts['eggint'], 32)
-        self.assert_(isinstance(self.usage.opts['eggint'], int))
+        self.assertTrue(isinstance(self.usage.opts['eggint'], int))
         self.assertEqual(self.usage.opts['eggfloat'], 21.)
-        self.assert_(isinstance(self.usage.opts['eggfloat'], float))
+        self.assertTrue(isinstance(self.usage.opts['eggfloat'], float))
 
 
     def test_underscoreOption(self):
@@ -260,7 +260,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['--europian-swallow', 'inquisition'])
         self.assertEqual(o['europian-swallow'], True)
         self.assertEqual(o.subCommand, 'inquisition')
-        self.failUnless(isinstance(o.subOptions, InquisitionOptions))
+        self.assertTrue(isinstance(o.subOptions, InquisitionOptions))
         self.assertEqual(o.subOptions['expect'], False)
         self.assertEqual(o.subOptions['torture-device'], 'comfy-chair')
 
@@ -269,7 +269,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['inquisition', '--expect', '--torture-device=feather'])
         self.assertEqual(o['europian-swallow'], False)
         self.assertEqual(o.subCommand, 'inquisition')
-        self.failUnless(isinstance(o.subOptions, InquisitionOptions))
+        self.assertTrue(isinstance(o.subOptions, InquisitionOptions))
         self.assertEqual(o.subOptions['expect'], True)
         self.assertEqual(o.subOptions['torture-device'], 'feather')
 
@@ -278,7 +278,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['inquest', '--expect', '--torture-device=feather'])
         self.assertEqual(o['europian-swallow'], False)
         self.assertEqual(o.subCommand, 'inquisition')
-        self.failUnless(isinstance(o.subOptions, InquisitionOptions))
+        self.assertTrue(isinstance(o.subOptions, InquisitionOptions))
         self.assertEqual(o.subOptions['expect'], True)
         self.assertEqual(o.subOptions['torture-device'], 'feather')
 
@@ -287,7 +287,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['holyquest', '--for-grail'])
         self.assertEqual(o['europian-swallow'], False)
         self.assertEqual(o.subCommand, 'holyquest')
-        self.failUnless(isinstance(o.subOptions, HolyQuestOptions))
+        self.assertTrue(isinstance(o.subOptions, HolyQuestOptions))
         self.assertEqual(o.subOptions['horseback'], False)
         self.assertEqual(o.subOptions['for-grail'], True)
 
@@ -296,7 +296,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['--europian-swallow'])
         self.assertEqual(o['europian-swallow'], True)
         self.assertEqual(o.subCommand, None)
-        self.failIf(hasattr(o, 'subOptions'))
+        self.assertFalse(hasattr(o, 'subOptions'))
 
     def test_defaultSubcommand(self):
         o = SubCommandOptions()
@@ -304,7 +304,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['--europian-swallow'])
         self.assertEqual(o['europian-swallow'], True)
         self.assertEqual(o.subCommand, 'inquisition')
-        self.failUnless(isinstance(o.subOptions, InquisitionOptions))
+        self.assertTrue(isinstance(o.subOptions, InquisitionOptions))
         self.assertEqual(o.subOptions['expect'], False)
         self.assertEqual(o.subOptions['torture-device'], 'comfy-chair')
 
@@ -319,7 +319,7 @@ class SubCommandTest(unittest.TestCase):
                 ]
         o = Opt()
         o.parseOptions(['foo'])
-        self.failUnless(hasattr(o.subOptions, 'sawParent'))
+        self.assertTrue(hasattr(o.subOptions, 'sawParent'))
         self.assertEqual(o.subOptions.sawParent , o)
 
     def test_subCommandInTwoPlaces(self):
@@ -341,10 +341,10 @@ class SubCommandTest(unittest.TestCase):
         oFoo.parseOptions(['foo'])
         oBar=OptBar()
         oBar.parseOptions(['bar'])
-        self.failUnless(hasattr(oFoo.subOptions, 'parent'))
-        self.failUnless(hasattr(oBar.subOptions, 'parent'))
-        self.failUnlessIdentical(oFoo.subOptions.parent, oFoo)
-        self.failUnlessIdentical(oBar.subOptions.parent, oBar)
+        self.assertTrue(hasattr(oFoo.subOptions, 'parent'))
+        self.assertTrue(hasattr(oBar.subOptions, 'parent'))
+        self.assertIs(oFoo.subOptions.parent, oFoo)
+        self.assertIs(oBar.subOptions.parent, oBar)
 
 
 class HelpStringTest(unittest.TestCase):
@@ -375,8 +375,8 @@ class HelpStringTest(unittest.TestCase):
         # We test this by making sure aflag and it's help string are on the
         # same line.
         lines = [s for s in str(self.nice).splitlines() if s.find("aflag")>=0]
-        self.failUnless(len(lines) > 0)
-        self.failUnless(lines[0].find("flagallicious") >= 0)
+        self.assertTrue(len(lines) > 0)
+        self.assertTrue(lines[0].find("flagallicious") >= 0)
 
 
 class PortCoerceTestCase(unittest.TestCase):
