diff --git twisted/trial/runner.py twisted/trial/runner.py
index 24f5d13..e8a8a64 100644
--- twisted/trial/runner.py
+++ twisted/trial/runner.py
@@ -9,7 +9,7 @@ Maintainer: Jonathan Lange
 """
 
 __all__ = [
-    'suiteVisit', 'TestSuite',
+    'TestSuite',
 
     'DestructiveTestSuite', 'DocTestCase', 'DryRunVisitor',
     'ErrorHolder', 'LoggedSuite', 'PyUnitTestCase',
@@ -32,7 +32,7 @@ from twisted.trial.itrial import ITestCase
 from twisted.trial.reporter import UncleanWarningsReporterWrapper
 
 # These are imported so that they remain in the public API for t.trial.runner
-from twisted.trial.unittest import suiteVisit, TestSuite
+from twisted.trial.unittest import TestSuite
 
 from zope.interface import implements
 
diff --git twisted/trial/test/moduletest.py twisted/trial/test/moduletest.py
index c5e1d70..2a8cc69 100644
--- twisted/trial/test/moduletest.py
+++ twisted/trial/test/moduletest.py
@@ -1,8 +1,8 @@
-# -*- test-case-name: twisted.trial.test.test_test_visitor -*-
+# -*- test-case-name: twisted.trial.test.test_log -*-
 
 # fodder for test_script, which parses files for emacs local variable
 # declarations.  This one is supposed to have:
-#    test-case-name: twisted.trial.test.test_test_visitor.
+#    test-case-name: twisted.trial.test.test_log.
 # in the first line
 # The class declaration is irrelevant
 
diff --git twisted/trial/test/scripttest.py twisted/trial/test/scripttest.py
index 267c189..3a2bf47 100644
--- twisted/trial/test/scripttest.py
+++ twisted/trial/test/scripttest.py
@@ -1,12 +1,12 @@
 #!/usr/bin/env python
-# -*- test-case-name: twisted.trial.test.test_test_visitor,twisted.trial.test.test_class -*-
+# -*- test-case-name: twisted.trial.test.test_log,twisted.trial.test.test_class -*-
 
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 # fodder for test_script, which parses files for emacs local variable
 # declarations.  This one is supposed to have:
-#    test-case-name: twisted.trial.test.test_test_visitor
+#    test-case-name: twisted.trial.test.test_log
 # in the second line
 # The class declaration is irrelevant
 
diff --git twisted/trial/test/test_loader.py twisted/trial/test/test_loader.py
index f08588e..151f3a9 100644
--- twisted/trial/test/test_loader.py
+++ twisted/trial/test/test_loader.py
@@ -471,7 +471,7 @@ class LoaderTest(packages.SysPathManglingTest):
         """
         Check that loadByNames ignores duplicate names
         """
-        module = 'twisted.trial.test.test_test_visitor'
+        module = 'twisted.trial.test.test_log'
         suite1 = self.loader.loadByNames([module, module], True)
         suite2 = self.loader.loadByName(module, True)
         self.assertSuitesEqual(suite1, suite2)
diff --git twisted/trial/test/test_pyunitcompat.py twisted/trial/test/test_pyunitcompat.py
index 72e7f11..ee0f9c8 100644
--- twisted/trial/test/test_pyunitcompat.py
+++ twisted/trial/test/test_pyunitcompat.py
@@ -32,20 +32,6 @@ class TestPyUnitTestCase(TestCase):
         self.test = ITestCase(self.original)
 
 
-    def test_visit(self):
-        """
-        Trial assumes that test cases implement visit().
-        """
-        log = []
-        def visitor(test):
-            log.append(test)
-        self.test.visit(visitor)
-        self.assertEqual(log, [self.test])
-    test_visit.suppress = [
-        util.suppress(category=DeprecationWarning,
-                      message="Test visitors deprecated in Twisted 8.0")]
-
-
     def test_callable(self):
         """
         Tests must be callable in order to be used with Python's unittest.py.
diff --git twisted/trial/test/test_script.py twisted/trial/test/test_script.py
index a8d489d..83d3398 100644
--- twisted/trial/test/test_script.py
+++ twisted/trial/test/test_script.py
@@ -146,7 +146,7 @@ class TestModuleTest(unittest.TestCase):
         """
         self.config.opt_testmodule(sibpath('moduletest.py'))
         self.assertSuitesEqual(trial._getSuite(self.config),
-                               ['twisted.trial.test.test_test_visitor'])
+                               ['twisted.trial.test.test_log'])
 
     def test_testmoduleTwice(self):
         """
@@ -156,7 +156,7 @@ class TestModuleTest(unittest.TestCase):
         self.config.opt_testmodule(sibpath('moduletest.py'))
         self.config.opt_testmodule(sibpath('moduletest.py'))
         self.assertSuitesEqual(trial._getSuite(self.config),
-                               ['twisted.trial.test.test_test_visitor'])
+                               ['twisted.trial.test.test_log'])
 
     def test_testmoduleOnSourceAndTarget(self):
         """
@@ -165,9 +165,9 @@ class TestModuleTest(unittest.TestCase):
         added once.
         """
         self.config.opt_testmodule(sibpath('moduletest.py'))
-        self.config.opt_testmodule(sibpath('test_test_visitor.py'))
+        self.config.opt_testmodule(sibpath('test_log.py'))
         self.assertSuitesEqual(trial._getSuite(self.config),
-                               ['twisted.trial.test.test_test_visitor'])
+                               ['twisted.trial.test.test_log'])
 
     def test_testmoduleOnSelfModule(self):
         """
@@ -185,7 +185,7 @@ class TestModuleTest(unittest.TestCase):
         """
         self.config.opt_testmodule(sibpath('scripttest.py'))
         self.assertSuitesEqual(trial._getSuite(self.config),
-                               ['twisted.trial.test.test_test_visitor',
+                               ['twisted.trial.test.test_log',
                                 'twisted.trial.test.test_class'])
 
     def test_testmoduleOnNonexistentFile(self):
@@ -274,7 +274,7 @@ class TestModuleTest(unittest.TestCase):
     def test_variablesFromFile(self):
         localVars = trial.loadLocalVariables(sibpath('moduletest.py'))
         self.assertEqual({'test-case-name':
-                              'twisted.trial.test.test_test_visitor'},
+                              'twisted.trial.test.test_log'},
                              localVars)
 
     def test_noVariablesInFile(self):
@@ -284,13 +284,13 @@ class TestModuleTest(unittest.TestCase):
     def test_variablesFromScript(self):
         localVars = trial.loadLocalVariables(sibpath('scripttest.py'))
         self.assertEqual(
-            {'test-case-name': ('twisted.trial.test.test_test_visitor,'
+            {'test-case-name': ('twisted.trial.test.test_log,'
                                 'twisted.trial.test.test_class')},
             localVars)
 
     def test_getTestModules(self):
         modules = trial.getTestModules(sibpath('moduletest.py'))
-        self.assertEqual(modules, ['twisted.trial.test.test_test_visitor'])
+        self.assertEqual(modules, ['twisted.trial.test.test_log'])
 
     def test_getTestModules_noVars(self):
         modules = trial.getTestModules(sibpath('novars.py'))
@@ -299,7 +299,7 @@ class TestModuleTest(unittest.TestCase):
     def test_getTestModules_multiple(self):
         modules = trial.getTestModules(sibpath('scripttest.py'))
         self.assertEqual(set(modules),
-                             set(['twisted.trial.test.test_test_visitor',
+                             set(['twisted.trial.test.test_log',
                                   'twisted.trial.test.test_class']))
 
     def test_looksLikeTestModule(self):
diff --git twisted/trial/test/test_test_visitor.py twisted/trial/test/test_test_visitor.py
deleted file mode 100644
index b5c3484..0000000
--- twisted/trial/test/test_test_visitor.py
+++ /dev/null
@@ -1,82 +0,0 @@
-from twisted.trial import unittest
-from twisted.trial.runner import TestSuite, suiteVisit
-
-pyunit = __import__('unittest')
-
-
-
-class MockVisitor(object):
-    def __init__(self):
-        self.calls = []
-
-
-    def __call__(self, testCase):
-        self.calls.append(testCase)
-
-
-
-class TestTestVisitor(unittest.TestCase):
-    def setUp(self):
-        self.visitor = MockVisitor()
-
-
-    def test_visitCase(self):
-        """
-        Test that C{visit} works for a single test case.
-        """
-        testCase = TestTestVisitor('test_visitCase')
-        testCase.visit(self.visitor)
-        self.assertEqual(self.visitor.calls, [testCase])
-
-
-    def test_visitSuite(self):
-        """
-        Test that C{visit} hits all tests in a suite.
-        """
-        tests = [TestTestVisitor('test_visitCase'),
-                 TestTestVisitor('test_visitSuite')]
-        testSuite = TestSuite(tests)
-        testSuite.visit(self.visitor)
-        self.assertEqual(self.visitor.calls, tests)
-
-
-    def test_visitEmptySuite(self):
-        """
-        Test that C{visit} on an empty suite hits nothing.
-        """
-        TestSuite().visit(self.visitor)
-        self.assertEqual(self.visitor.calls, [])
-
-
-    def test_visitNestedSuite(self):
-        """
-        Test that C{visit} recurses through suites.
-        """
-        tests = [TestTestVisitor('test_visitCase'),
-                 TestTestVisitor('test_visitSuite')]
-        testSuite = TestSuite([TestSuite([test]) for test in tests])
-        testSuite.visit(self.visitor)
-        self.assertEqual(self.visitor.calls, tests)
-
-
-    def test_visitPyunitSuite(self):
-        """
-        Test that C{suiteVisit} visits stdlib unittest suites
-        """
-        test = TestTestVisitor('test_visitPyunitSuite')
-        suite = pyunit.TestSuite([test])
-        suiteVisit(suite, self.visitor)
-        self.assertEqual(self.visitor.calls, [test])
-
-
-    def test_visitPyunitCase(self):
-        """
-        Test that a stdlib test case in a suite gets visited.
-        """
-        class PyunitCase(pyunit.TestCase):
-            def test_foo(self):
-                pass
-        test = PyunitCase('test_foo')
-        TestSuite([test]).visit(self.visitor)
-        self.assertEqual(
-            [call.id() for call in self.visitor.calls], [test.id()])
diff --git twisted/trial/unittest.py twisted/trial/unittest.py
index c6522fe..79e723d 100644
--- twisted/trial/unittest.py
+++ twisted/trial/unittest.py
@@ -1201,22 +1201,6 @@ class TestCase(_Assertions):
         return util.acquireAttribute(self._parents, 'suppress', [])
 
 
-    def visit(self, visitor):
-        """
-        Visit this test case. Call C{visitor} with C{self} as a parameter.
-
-        Deprecated in Twisted 8.0.
-
-        @param visitor: A callable which expects a single parameter: a test
-        case.
-
-        @return: None
-        """
-        warnings.warn("Test visitors deprecated in Twisted 8.0",
-                      category=DeprecationWarning)
-        visitor(self)
-
-
     def mktemp(self):
         """Returns a unique name that may be used as either a temporary
         directory or filename.
@@ -1363,40 +1347,12 @@ class PyUnitResultAdapter(object):
 
 
 
-def suiteVisit(suite, visitor):
-    """
-    Visit each test in C{suite} with C{visitor}.
-
-    Deprecated in Twisted 8.0.
-
-    @param visitor: A callable which takes a single argument, the L{TestCase}
-    instance to visit.
-    @return: None
-    """
-    warnings.warn("Test visitors deprecated in Twisted 8.0",
-                  category=DeprecationWarning)
-    for case in suite._tests:
-        visit = getattr(case, 'visit', None)
-        if visit is not None:
-            visit(visitor)
-        elif isinstance(case, pyunit.TestCase):
-            case = itrial.ITestCase(case)
-            case.visit(visitor)
-        elif isinstance(case, pyunit.TestSuite):
-            suiteVisit(case, visitor)
-        else:
-            case.visit(visitor)
-
-
-
 class TestSuite(pyunit.TestSuite):
     """
-    Extend the standard library's C{TestSuite} with support for the visitor
-    pattern and a consistently overrideable C{run} method.
+    Extend the standard library's C{TestSuite} with a consistently overrideable
+    C{run} method.
     """
 
-    visit = suiteVisit
-
     def __call__(self, result):
         return self.run(result)
 
@@ -1496,15 +1452,6 @@ class _PyUnitTestCaseAdapter(TestDecorator):
     """
 
 
-    def visit(self, visitor):
-        """
-        Deprecated in Twisted 8.0.
-        """
-        warnings.warn("Test visitors deprecated in Twisted 8.0",
-                      category=DeprecationWarning)
-        visitor(self)
-
-
 
 class _BrokenIDTestCaseAdapter(_PyUnitTestCaseAdapter):
     """
