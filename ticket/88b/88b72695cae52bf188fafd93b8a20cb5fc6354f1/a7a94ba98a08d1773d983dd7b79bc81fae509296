Auto-merging (0, 21063) /branches/twisted-web2-flash to /mirror/twisted/trunk (base /mirror/twisted/trunk:21062).
Patching locally against mirror source svn://svn.twistedmatrix.com/svn/Twisted.
U   twisted/web2/test/test_fileupload.py
U   twisted/web2/fileupload.py
==== Patch <-> level 1
Source: e3c0e7b8-6901-0410-b62d-a6081d6f05f7:/branches/twisted-web2-flash:21063
Target: bbbe8e31-12d6-0310-92fd-ac37d47ddeeb:/trunk:18210
        (svn://svn.twistedmatrix.com/svn/Twisted)
Log:
 r20353@andi-lap:  andreas | 2006-07-11 23:01:49 +0200
 Allow twisted.web2 handle broken uploads.
 r20354@andi-lap:  andreas | 2006-07-12 15:03:21 +0200
 accept broken Flash POSTs.
 r20563@andi-lap:  andreas | 2006-07-28 20:16:23 +0200
 test flash uploads.
 r20626@andi-lap:  andreas | 2006-07-31 16:38:38 +0200
 minimize patch

=== twisted/web2/test/test_fileupload.py
==================================================================
--- twisted/web2/test/test_fileupload.py	(revision 18210)
+++ twisted/web2/test/test_fileupload.py	(patch - level 1)
@@ -75,7 +75,54 @@
         #e=time.time()
         #print "CGI: %.2g"%(e-t)
     doTest = deferredGenerator(doTest)
-    
+
+    def testFlashUploadNewline(self):
+        "FlashPlayer: superflous newline at the top"
+        return self.doTest(
+            '---------------------------155781040421463194511908194298',
+            """\n-----------------------------155781040421463194511908194298\r
+Content-Disposition: form-data; name="foo"\r
+\r
+Foo Bar\r
+-----------------------------155781040421463194511908194298\r
+Content-Disposition: form-data; name="file"; filename="filename"\r
+Content-Type: text/html\r
+\r
+Contents of a file
+blah
+blah\r
+-----------------------------155781040421463194511908194298--\r
+""",
+            {'foo':['Foo Bar']},
+            {'file':[('filename', MimeType('text', 'html'),
+                      "Contents of a file\nblah\nblah")]})
+            
+
+    def testFlashUploadBrokenPartEnd(self):
+        "FlashPlayer: superflous newline at the top"
+        return self.doTest(
+            '---------------------------155781040421463194511908194298',
+            """\n-----------------------------155781040421463194511908194298\r
+Content-Disposition: form-data; name="foo"\r
+\r
+Foo Bar\r
+-----------------------------155781040421463194511908194298\r
+Content-Disposition: form-data; name="file"; filename="filename"\r
+Content-Type: text/html\r
+\r
+Contents of a file
+blah
+blah\r
+-----------------------------155781040421463194511908194298--\r
+Content-Disposition: form-data; name="Upload"\r
+Submit Query\r
+-----------------------------155781040421463194511908194298--\r
+""",
+            {'foo':['Foo Bar']},
+            {'file':[('filename', MimeType('text', 'html'),
+                      "Contents of a file\nblah\nblah")]})
+            
+
     def testNormalUpload(self):
         return self.doTest(
             '---------------------------155781040421463194511908194298',
=== twisted/web2/fileupload.py
==================================================================
--- twisted/web2/fileupload.py	(revision 18210)
+++ twisted/web2/fileupload.py	(patch - level 1)
@@ -51,8 +51,9 @@
             line = defer.waitForDeferred(line)
             yield line
             line = line.getResult()
-        #print "GOT", line
-        if line == "":
+        if line == "" or line == "Submit Query":
+            if line == "Submit Query":
+                stream.brokenpart = True
             break # End of headers
         
         parts = line.split(':', 1)
@@ -70,7 +71,10 @@
     if ctype is None:
         ctype == http_headers.MimeType('application', 'octet-stream')
     if fieldname is None:
-        raise MimeFormatError('Content-disposition invalid or omitted.')
+        if getattr(stream, "brokenpart", False):
+            return
+        else:
+            raise MimeFormatError('Content-disposition invalid or omitted.')
 
     # End of headers, return (field name, content-type, filename)
     yield fieldname, filename, ctype
@@ -100,6 +104,8 @@
 
     def _gotRead(self, newdata):
         if not newdata:
+            if getattr(self.stream, "brokenpart", False):
+                return None
             raise MimeFormatError("Unexpected EOF")
         # BLECH, converting buffer back into string.
         self.data += str(newdata)
@@ -170,8 +176,9 @@
             line = defer.waitForDeferred(line)
             yield line
             line = line.getResult()
+        line = line.lstrip("\n")        # flash seems to generate sometimes an superfluous \n
         if line != self.boundary:
-            raise MimeFormatError("Extra data before first boundary: %r"% line)
+            raise MimeFormatError("Extra data before first boundary: %r,%r"% (line, self.boundary))
         
         self.boundary = "\r\n"+self.boundary
         yield True

==== BEGIN SVK PATCH BLOCK ====
Version: svk 1.07 (linux)

eJzVlt9v3TQUx/PcJ8QrPFiXdGtF08Z24vyYenWBrQghdYV1vDDp4sQna7bcJHKcdUWRaAeIl/EA
D9MGfwI87A+A/wSJfwXHabpeWNu9Yl1dOfbx55xjf3XsHbl/Y4a76dTtbOx2d774NI73uEoPVrHX
2awDkatK2n5XwCMobNoV1X3b60q+AD3bVK1M+47i8j6ovpOnD0FNp1jjwgF3yyBGrKEmXFVlY0cG
P1cSwMYdmwXdjPa/uY2jrgE9Y7BzCY/yJq9KHQbBLqPaRNtjvb6qoZzLqlJ6Cod6ckb61W6XFlUD
8x6vR2Z+b09snZJZIHIJqY7pyA46dZg3CoThjQwTgX/KeGWsTc5g9DUwTEba1iEkxLi8Ekn6lA3S
ex0yWEJuKWiU8T5yzUo27kSWF2ATtrymH2zrouJisz5aWnxhUPQsT38JTdl/wzF/83878a524g1O
zCyv6+JoruCxElAobhxT0mVpSoOIuhCELveyxPNTmmKPZF4UuZ7Q28s8LbJdy3op/vx47TvLeuZZ
xyefW/A8sr51nl87PgHTf/LW82t/WCdfvWh+tH7ZeBauIN0EZKgPfqfgzcFdE/wuHBZ5CWsNFNl6
bKz6NjEmewU/Ahmjpq1BZkXVNqgc7BFXSB0AUlU9OVskQbWyRD1qU1T72tHa2VzfrjsXN+z7QYhd
z/UI9hjFkedjHLmh7pAovL6xBJpMJvfK8wMrF6X3oaweQrnHpbpViv9hkh9VpYJSOTfzpq6aXOma
EKOskgtHcMVvoL4sbU+GXCf35MqdNlnkCn3Wgjxa2qCZd75MGG2fSk5kOHA9HmCXskS4PCEsJJmf
YpfwiIjkUtGynuAFAUtDz4uES8OMBX4oGAPKwyDiURKB7WkjI9q/kr9vrz75xnr6jnX82Pr+7ac3
j3etH778aff4E+vn1RfvHt+1HvwW/mq9jH5fzzNkDmF7W28FquSrr/NJTuKlTTu/6BKzvjW6CvPF
ZmIUUmuFoG20L1vQCF2CuVJybTDZQJNXRpMNtMOLBtaXgYMqzoZAWwwG52m9ZN4ceU5su1UJQ1om
u81CU/J6Tetjsj6avoeyXs1amLBotGS12xIkV4CaagEqX0CDeDmqvO1lfq/cWJWTVbTWQzcGSSdV
Wwouj9ZfKxhz3CGJfB98CLiggfASiBgWDFOfkCCgLDA3CyVhhyRxqU9nvBS5U/A6RjoCofNvUIeI
6zLHDRyMEaGxi2MvQu+7enQFfVAU1SE6rbubfd1FB3phAWjYNDTU3WZzZfDgXeGBIOzHLo0JHj3w
NIVajThTBtDe7Tv7p0ifXRE0CXU3xiwmdET2hef0CJbCY4RdzqIYaRAN9W9kLfIyX+RfA6r7F8SK
3lBnOiWdTcjwwNg3r4Q4vlvmj0A2vFhlnX6jaOsD/WDRjwf90ba5sPUhbCWSl+kBNFunG+r0G+qY
SMfnRX/NAU31rZOEDotc7Lgedp2EEeFwpuuTYJnrZ8F0nXQXuWLdlpJt+XC8BntmkiQQAsX6CITO
lWpmRDLNTHvhBEIAJHaA38h3fFkisUnjH7XG+P4=
==== END SVK PATCH BLOCK ====
