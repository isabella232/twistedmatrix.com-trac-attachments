=== modified file 'doc/names/examples/gethostbyname.py'
--- doc/names/examples/gethostbyname.py	2012-04-02 15:26:04 +0000
+++ doc/names/examples/gethostbyname.py	2012-09-14 02:35:21 +0000
@@ -4,25 +4,79 @@
 # See LICENSE for details.
 
 """
-Returns the IP address for a given hostname.
-To run this script:
-$ python gethostbyname.py <hostname>
-e.g.:
-$ python gethostbyname.py www.google.com
+USAGE: python gethostbyname.py HOSTNAME
+
+Returns the IP address for a given hostname. eg
+
+$ python gethostbyname.py www.google.com
+2a00:1450:400c:c05::67
+$ python gethostbyname.py www.google.com
+173.194.67.104
+$ python gethostbyname.py localhost
+127.0.0.1
+$ python gethostbyname.py com
+ERROR: No IP adresses found for hostname 'com'
+$ python gethostbyname.py does.not.exist
+ERROR: hostname not found 'does.not.exist'
+
+This script does a host lookup using the default Twisted Names
+resolver.
+
+The default Twisted Names resolver is a chained resolver, which
+attempts to lookup a name using:
+ * local hosts file
+ * memory cache of previous lookup results
+ * system wide recursive DNS servers
+
+The hosts file lookup is synchronous, which means that the deferred
+response can run its callbacks before the reactor is started.
+
+To ensure that the reactor is started and stopped in the correct
+order, we use reactor.callWhenRunning to postpone the host lookup
+until after the reactor has started.
 """
 import sys
-from twisted.names import client
+from twisted.names import client, error
 from twisted.internet import reactor
 
-def gotResult(result):
-    print result
-    reactor.stop()
-
-def gotFailure(failure):
-    failure.printTraceback()
-    reactor.stop()
-
-d = client.getHostByName(sys.argv[1])
-d.addCallbacks(gotResult, gotFailure)
-
+
+def gotResult(result, hostname):
+    """
+    Print the IP address or an error message if an IP address was not
+    found.
+    """
+    if result:
+        print result
+    else:
+        sys.stderr.write(
+            'ERROR: No IP adresses found for hostname %r\n' % (hostname,))
+
+
+def gotFailure(failure, hostname):
+    """
+    Print a friendly error message if the hostname could not be
+    resolved.
+    """
+    errorClass = failure.trap(error.DNSNameError)
+    sys.stderr.write('ERROR: hostname not found %r\n' % (hostname,))
+
+
+def startLookup(hostname):
+    d = client.getHostByName(hostname)
+    d.addCallback(gotResult, hostname)
+    d.addErrback(gotFailure, hostname)
+    # Print full traceback for any uncaught errors before shutting
+    # down the reactor
+    d.addErrback(lambda failure: failure.printTraceback())
+    d.addBoth(lambda ign: reactor.stop())
+
+try:
+    hostname = sys.argv[1]
+except IndexError:
+    sys.stderr.write(
+        __doc__ + '\n' +
+        'ERROR: Missing HOSTNAME argument\n')
+    raise SystemExit(1)
+
+reactor.callWhenRunning(startLookup, hostname)
 reactor.run()

=== added file 'twisted/names/topfiles/5596.misc'

