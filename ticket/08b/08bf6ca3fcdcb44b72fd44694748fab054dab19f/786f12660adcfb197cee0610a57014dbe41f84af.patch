=== modified file 'doc/names/examples/dns-service.py'
--- doc/names/examples/dns-service.py	2012-04-02 15:26:04 +0000
+++ doc/names/examples/dns-service.py	2012-09-15 19:42:07 +0000
@@ -4,42 +4,65 @@
 # See LICENSE for details.
 
 """
-Sample app to lookup SRV records in DNS.
-To run this script:
-$ python dns-service.py <service> <proto> <domain>
-where,
-service = the symbolic name of the desired service.
-proto = the transport protocol of the desired service; this is usually either TCP or UDP.
-domain =  the domain name for which this record is valid.
-e.g.:
-$ python dns-service.py sip udp yahoo.com
-$ python dns-service.py xmpp-client tcp gmail.com
+USAGE: python dns-service.py SERVICE PROTO DOMAINNAME
+
+Print the SRV records for a given DOMAINNAME eg
+
+ python dns-service.py xmpp-client tcp gmail.com
+
+SERVICE: the symbolic name of the desired service.
+
+PROTO: the transport protocol of the desired service; this is usually
+       either TCP or UDP.
+
+DOMAINNAME: the domain name for which this record is valid.
 """
-
-from twisted.names import client
-from twisted.internet import reactor
 import sys
 
-def printAnswer((answers, auth, add)):
-    if not len(answers):
-        print 'No answers'
+from twisted.names import client, error
+from twisted.internet.task import react
+
+
+def printResult(records, domainname):
+    """
+    Print the SRV records for the domainname or an error message if no
+    SRV records were found.
+    """
+    answers, authority, additional = records
+    if answers:
+        sys.stdout.write(
+            domainname + ' IN \n ' +
+            '\n '.join(str(x.payload) for x in answers) + 
+            '\n')
     else:
-        print '\n'.join([str(x.payload) for x in answers])
-    reactor.stop()
-
-def printFailure(arg):
-    print "error: could not resolve:", arg
-    reactor.stop()
-
-try:
-    service, proto, domain = sys.argv[1:]
-except ValueError:
-    sys.stderr.write('%s: usage:\n' % sys.argv[0] +
-                     '  %s SERVICE PROTO DOMAIN\n' % sys.argv[0])
-    sys.exit(1)
-
-resolver = client.Resolver('/etc/resolv.conf')
-d = resolver.lookupService('_%s._%s.%s' % (service, proto, domain), [1])
-d.addCallbacks(printAnswer, printFailure)
-
-reactor.run()
+        sys.stderr.write(
+            'ERROR: No SRV records found for name %r\n' % (domainname,))
+
+
+def printError(failure, domainname):
+    """
+    Print a friendly error message if the domainname could not be
+    resolved.
+    """
+    failure.trap(error.DNSNameError)
+    sys.stderr.write('ERROR: domain name not found %r\n' % (domainname,))
+
+
+def main(reactor, *argv):
+    try:
+        service, proto, domainname = sys.argv[1:]
+    except ValueError:
+        sys.stderr.write(
+            __doc__.lstrip() + '\n'
+            'ERROR: incorrect command line arguments\n')
+        raise SystemExit(1)
+
+    resolver = client.Resolver('/etc/resolv.conf')
+    domainname = '_%s._%s.%s' % (service, proto, domainname)
+    d = resolver.lookupService(domainname)
+    d.addCallback(printResult, domainname)
+    d.addErrback(printError, domainname)
+    return d
+
+if __name__ == '__main__':
+    react(main, sys.argv[1:])

=== modified file 'doc/names/examples/gethostbyname.py'
--- doc/names/examples/gethostbyname.py	2012-04-02 15:26:04 +0000
+++ doc/names/examples/gethostbyname.py	2012-09-15 19:02:59 +0000
@@ -4,25 +4,58 @@
 # See LICENSE for details.
 
 """
-Returns the IP address for a given hostname.
-To run this script:
-$ python gethostbyname.py <hostname>
-e.g.:
-$ python gethostbyname.py www.google.com
+USAGE: python gethostbyname.py HOSTNAME
+
+Print the IP address for a given hostname. eg
+
+ python gethostbyname.py www.google.com
+
+This script does a host lookup using the default Twisted Names
+resolver, a chained resolver, which attempts to lookup a name from:
+ * local hosts file
+ * memory cache of previous lookup results
+ * system recursive DNS servers
 """
 import sys
-from twisted.names import client
-from twisted.internet import reactor
-
-def gotResult(result):
-    print result
-    reactor.stop()
-
-def gotFailure(failure):
-    failure.printTraceback()
-    reactor.stop()
-
-d = client.getHostByName(sys.argv[1])
-d.addCallbacks(gotResult, gotFailure)
-
-reactor.run()
+
+from twisted.names import client, error
+from twisted.internet.task import react
+
+
+def printResult(address, hostname):
+    """
+    Print the IP address or an error message if an IP address was not
+    found.
+    """
+    if address:
+        sys.stdout.write(address + '\n')
+    else:
+        sys.stderr.write(
+            'ERROR: No IP adresses found for name %r\n' % (hostname,))
+
+
+def printError(failure, hostname):
+    """
+    Print a friendly error message if the hostname could not be
+    resolved.
+    """
+    failure.trap(error.DNSNameError)
+    sys.stderr.write('ERROR: hostname not found %r\n' % (hostname,))
+
+
+def main(reactor, *argv):
+    try:
+        hostname = argv[0]
+    except IndexError:
+        sys.stderr.write(
+            __doc__.lstrip() + '\n'
+            'ERROR: missing HOSTNAME argument\n')
+        raise SystemExit(1)
+
+    d = client.getHostByName(hostname)
+    d.addCallback(printResult, hostname)
+    d.addErrback(printError, hostname)
+    return d
+
+if __name__ == '__main__':
+    react(main, sys.argv[1:])

=== modified file 'doc/names/examples/index.xhtml'
--- doc/names/examples/index.xhtml	2012-04-02 15:26:04 +0000
+++ doc/names/examples/index.xhtml	2012-09-15 19:44:44 +0000
@@ -12,10 +12,9 @@
 
     <h2>DNS (Twisted Names)</h2>
     <ul>
-        <li><a href="testdns.py">testdns.py</a> - Prints the results of an Address record lookup, Mail-Exchanger record lookup, and Nameserver record lookup for the given hostname for a given hostname.</li>
+        <li><a href="testdns.py">testdns.py</a> - Prints the results of an Address record lookup, Mail-Exchanger record lookup, and Nameserver record lookup for the given domain name.</li>
         <li><a href="dns-service.py">dns-service.py</a> - Searches for SRV records in DNS.</li>
         <li><a href="gethostbyname.py">gethostbyname.py</a> - Returns the IP address for a given hostname.</li>
     </ul>
 </body>
 </html>
-

=== modified file 'doc/names/examples/testdns.py'
--- doc/names/examples/testdns.py	2012-09-08 21:43:43 +0000
+++ doc/names/examples/testdns.py	2012-09-15 19:31:58 +0000
@@ -4,29 +4,28 @@
 # See LICENSE for details.
 
 """
-Prints the results of an Address record lookup, Mail-Exchanger record
-lookup, and Nameserver record lookup for the given hostname for a
-given hostname.
-
-To run this script:
-$ python testdns.py <hostname>
-e.g.:
-$ python testdns.py www.google.com
+USAGE: python testdns.py DOMAINNAME
+
+Print the Address records, Mail-Exchanger records and the Nameserver
+records for the given domain name. eg
+
+ python testdns.py google.com
 """
 import sys
 
-from twisted.names import client
-from twisted.internet import defer, reactor
-from twisted.names import dns, error
-
-
-r = client.Resolver('/etc/resolv.conf')
-
-
-def formatResult(a, heading):
-    answer, authority, additional = a
+from twisted.internet import defer
+from twisted.internet.task import react
+from twisted.names import client, dns, error
+
+
+def formatRecords(records, heading):
+    """
+    Extract only the answer records and return them as a neatly
+    formatted string beneath the given heading.
+    """
+    answers, authority, additional = records
     lines = ['# ' + heading]
-    for a in answer:
+    for a in answers:
         line = [
             a.name,
             dns.QUERY_CLASSES.get(a.cls, 'UNKNOWN (%d)' % (a.cls,)),
@@ -36,33 +35,48 @@
     return '\n'.join(line for line in lines)
 
 
-def printError(f):
-    f.trap(defer.FirstError)
-    f = f.value.subFailure
-    f.trap(error.DomainError)
-    print f.value.__class__.__name__, f.value.message.queries
-
-
-def printResults(res):
-    for r in res:
-        print r
-        print
-
-
-if __name__ == '__main__':
-    domainname = sys.argv[1]
-
+def printResults(results, domainname):
+    """
+    Print the formatted results for each DNS record type.
+    """
+    sys.stdout.write('# Domain Summary for %r\n' % (domainname,))
+    sys.stdout.write('\n\n'.join(results) + '\n')
+
+
+def printError(failure, domainname):
+    """
+    Print a friendly error message if the hostname could not be
+    resolved.
+    """
+    failure.trap(defer.FirstError)
+    failure = failure.value.subFailure
+    failure.trap(error.DNSNameError)
+    sys.stderr.write('ERROR: domain name not found %r\n' % (domainname,))
+
+
+def main(reactor, *argv):
+    try:
+        domainname = argv[0]
+    except IndexError:
+        sys.stderr.write(
+            __doc__.lstrip() + '\n'
+            'ERROR: missing DOMAINNAME argument\n')
+        raise SystemExit(1)
+
+    r = client.Resolver('/etc/resolv.conf')
     d = defer.gatherResults([
             r.lookupAddress(domainname).addCallback(
-                formatResult, 'Addresses'),
+                formatRecords, 'Addresses'),
             r.lookupMailExchange(domainname).addCallback(
-                formatResult, 'Mail Exchangers'),
+                formatRecords, 'Mail Exchangers'),
             r.lookupNameservers(domainname).addCallback(
-                formatResult, 'Nameservers'),
+                formatRecords, 'Nameservers'),
             ], consumeErrors=True)
 
-    d.addCallbacks(printResults, printError)
-
-    d.addBoth(lambda ign: reactor.stop())
-
-    reactor.run()
+    d.addCallback(printResults, domainname)
+    d.addErrback(printError, domainname)
+    return d
+
+
+if __name__ == '__main__':
+    react(main, sys.argv[1:])

=== added file 'twisted/names/topfiles/5596.misc'
=== added file 'twisted/names/topfiles/5989.misc'
