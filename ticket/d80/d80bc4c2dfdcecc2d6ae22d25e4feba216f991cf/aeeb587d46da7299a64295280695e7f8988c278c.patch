Index: twisted/web/test/test_static.py
===================================================================
--- twisted/web/test/test_static.py	(revision 43411)
+++ twisted/web/test/test_static.py	(working copy)
@@ -1212,7 +1212,7 @@
 
 
 
-class DirectoryListerTest(TestCase):
+class DirectoryListerTests(TestCase):
     """
     Tests for L{static.DirectoryLister}.
     """
Index: twisted/web/test/test_newclient.py
===================================================================
--- twisted/web/test/test_newclient.py	(revision 43411)
+++ twisted/web/test/test_newclient.py	(working copy)
@@ -323,7 +323,7 @@
 
 
 
-class HTTPParserTestsRFCComplaintDelimeter(_HTTPParserTests, TestCase):
+class HTTPParserRFCComplaintDelimeterTests(_HTTPParserTests, TestCase):
     """
     L{_HTTPParserTests} using standard CR LF newlines.
     """
@@ -331,7 +331,7 @@
 
 
 
-class HTTPParserTestsNonRFCComplaintDelimeter(_HTTPParserTests, TestCase):
+class HTTPParserNonRFCComplaintDelimeterTests(_HTTPParserTests, TestCase):
     """
     L{_HTTPParserTests} using bare LF newlines.
     """
Index: twisted/web/test/test_error.py
===================================================================
--- twisted/web/test/test_error.py	(revision 43411)
+++ twisted/web/test/test_error.py	(working copy)
@@ -8,7 +8,7 @@
 from twisted.trial import unittest
 from twisted.web import error
 
-class ErrorTestCase(unittest.TestCase):
+class ErrorTests(unittest.TestCase):
     """
     Tests for how L{Error} attributes are initialized.
     """
@@ -41,7 +41,7 @@
 
 
 
-class PageRedirectTestCase(unittest.TestCase):
+class PageRedirectTests(unittest.TestCase):
     """
     Tests for how L{PageRedirect} attributes are initialized.
     """
@@ -95,7 +95,7 @@
 
 
 
-class InfiniteRedirectionTestCase(unittest.TestCase):
+class InfiniteRedirectionTests(unittest.TestCase):
     """
     Tests for how L{InfiniteRedirection} attributes are initialized.
     """
Index: twisted/web/test/test_flatten.py
===================================================================
--- twisted/web/test/test_flatten.py	(revision 43411)
+++ twisted/web/test/test_flatten.py	(working copy)
@@ -53,7 +53,7 @@
 
 
 
-class TestSerialization(FlattenTestCase, XMLAssertionMixin):
+class SerializationTests(FlattenTestCase, XMLAssertionMixin):
     """
     Tests for flattening various things.
     """
Index: twisted/web/test/test_distrib.py
===================================================================
--- twisted/web/test/test_distrib.py	(revision 43411)
+++ twisted/web/test/test_distrib.py	(working copy)
@@ -45,7 +45,7 @@
 
 
 
-class DistribTest(unittest.TestCase):
+class DistribTests(unittest.TestCase):
     port1 = None
     port2 = None
     sub = None
Index: twisted/web/test/test_xml.py
===================================================================
--- twisted/web/test/test_xml.py	(revision 43411)
+++ twisted/web/test/test_xml.py	(working copy)
@@ -25,7 +25,7 @@
     def gotText(self, text):
         self.tokens.append(("text", text))
 
-class SUXTest(TestCase):
+class SUXTests(TestCase):
 
     def testBork(self):
         s = "<bork><bork><bork>"
@@ -35,7 +35,7 @@
         self.assertEqual(len(ms.getTagStarts()),3)
 
 
-class MicroDOMTest(TestCase):
+class MicroDOMTests(TestCase):
 
     def test_leadingTextDropping(self):
         """
@@ -787,7 +787,7 @@
 
 
 
-class TestBrokenHTML(TestCase):
+class BrokenHTMLTests(TestCase):
     """
     Tests for when microdom encounters very bad HTML and C{beExtremelyLenient}
     is enabled. These tests are inspired by some HTML generated in by a mailer,
Index: twisted/web/test/test_httpauth.py
===================================================================
--- twisted/web/test/test_httpauth.py	(revision 43411)
+++ twisted/web/test/test_httpauth.py	(working copy)
@@ -131,14 +131,14 @@
 
 
 
-class BasicAuthTestCase(RequestMixin, BasicAuthTestsMixin, unittest.TestCase):
+class BasicAuthTests(RequestMixin, BasicAuthTestsMixin, unittest.TestCase):
     """
     Basic authentication tests which use L{twisted.web.http.Request}.
     """
 
 
 
-class DigestAuthTestCase(RequestMixin, unittest.TestCase):
+class DigestAuthTests(RequestMixin, unittest.TestCase):
     """
     Digest authentication tests which use L{twisted.web.http.Request}.
     """
Index: twisted/web/test/test_cgi.py
===================================================================
--- twisted/web/test/test_cgi.py	(revision 43411)
+++ twisted/web/test/test_cgi.py	(working copy)
@@ -76,7 +76,7 @@
 class PythonScript(twcgi.FilteredScript):
     filter = sys.executable
 
-class CGI(unittest.TestCase):
+class CGITests(unittest.TestCase):
     """
     Tests for L{twcgi.FilteredScript}.
     """
Index: twisted/web/test/test_soap.py
===================================================================
--- twisted/web/test/test_soap.py	(revision 43411)
+++ twisted/web/test/test_soap.py	(working copy)
@@ -53,7 +53,7 @@
         return map[key]
 
 
-class SOAPTestCase(unittest.TestCase):
+class SOAPTests(unittest.TestCase):
 
     def setUp(self):
         self.publisher = Test()
@@ -110,5 +110,5 @@
         self.assertFalse(self.publisher.lookupFunction("foobar"))
 
 if not SOAPpy:
-    SOAPTestCase.skip = "SOAPpy not installed"
+    SOAPTests.skip = "SOAPpy not installed"
 
Index: twisted/web/test/test_stan.py
===================================================================
--- twisted/web/test/test_stan.py	(revision 43411)
+++ twisted/web/test/test_stan.py	(working copy)
@@ -17,7 +17,7 @@
     return Tag('hello')(*a, **kw)
 
 
-class TestTag(TestCase):
+class TagTests(TestCase):
     """
     Tests for L{Tag}.
     """
Index: twisted/web/test/test_xmlrpc.py
===================================================================
--- twisted/web/test/test_xmlrpc.py	(revision 43411)
+++ twisted/web/test/test_xmlrpc.py	(working copy)
@@ -254,7 +254,7 @@
         self.connector = connector
 
 
-class XMLRPCTestCase(unittest.TestCase):
+class XMLRPCTests(unittest.TestCase):
 
     def setUp(self):
         self.p = reactor.listenTCP(0, server.Site(Test()),
@@ -445,7 +445,7 @@
 
 
 
-class XMLRPCTestCase2(XMLRPCTestCase):
+class XMLRPCProxyWithoutSlashTests(XMLRPCTests):
     """
     Test with proxy that doesn't add a slash.
     """
@@ -460,7 +460,7 @@
 
 
 
-class XMLRPCTestPublicLookupProcedure(unittest.TestCase):
+class XMLRPCPublicLookupProcedureTests(unittest.TestCase):
     """
     Tests for L{XMLRPC}'s support of subclasses which override
     C{lookupProcedure} and C{listProcedures}.
@@ -566,7 +566,7 @@
 
 
 
-class XMLRPCAllowNoneTestCase(SerializationConfigMixin, unittest.TestCase):
+class XMLRPCAllowNoneTests(SerializationConfigMixin, unittest.TestCase):
     """
     Tests for passing C{None} when the C{allowNone} flag is set.
     """
@@ -574,7 +574,7 @@
     value = None
 
 
-class XMLRPCUseDateTimeTestCase(SerializationConfigMixin, unittest.TestCase):
+class XMLRPCUseDateTimeTests(SerializationConfigMixin, unittest.TestCase):
     """
     Tests for passing a C{datetime.datetime} instance when the C{useDateTime}
     flag is set.
@@ -583,7 +583,7 @@
     value = datetime.datetime(2000, 12, 28, 3, 45, 59)
 
 
-class XMLRPCTestAuthenticated(XMLRPCTestCase):
+class XMLRPCAuthenticatedTests(XMLRPCTests):
     """
     Test with authenticated proxy. We run this with the same inout/ouput as
     above.
@@ -636,7 +636,7 @@
         return d
 
 
-class XMLRPCTestIntrospection(XMLRPCTestCase):
+class XMLRPCIntrospectionTests(XMLRPCTests):
 
     def setUp(self):
         xmlrpc = Test()
@@ -689,7 +689,7 @@
         return defer.DeferredList(dl, fireOnOneErrback=True)
 
 
-class XMLRPCClientErrorHandling(unittest.TestCase):
+class XMLRPCClientErrorHandlingTests(unittest.TestCase):
     """
     Test error handling on the xmlrpc client.
     """
@@ -715,7 +715,7 @@
 
 
 
-class TestQueryFactoryParseResponse(unittest.TestCase):
+class QueryFactoryParseResponseTests(unittest.TestCase):
     """
     Test the behaviour of L{_QueryFactory.parseResponse}.
     """
@@ -795,7 +795,7 @@
 
 
 
-class XMLRPCTestWithRequest(unittest.TestCase):
+class XMLRPCWithRequestTests(unittest.TestCase):
 
     def setUp(self):
         self.resource = Test()
Index: twisted/web/test/test_template.py
===================================================================
--- twisted/web/test/test_template.py	(revision 43411)
+++ twisted/web/test/test_template.py	(working copy)
@@ -678,7 +678,7 @@
 
 
 
-class TestRenderElement(TestCase):
+class RenderElementTests(TestCase):
     """
     Test L{renderElement}
     """
Index: twisted/web/test/test_webclient.py
===================================================================
--- twisted/web/test/test_webclient.py	(revision 43411)
+++ twisted/web/test/test_webclient.py	(working copy)
@@ -301,7 +301,7 @@
 
 
 
-class WebClientTestCase(unittest.TestCase):
+class WebClientTests(unittest.TestCase):
     def _listen(self, site):
         return reactor.listenTCP(0, site, interface="127.0.0.1")
 
@@ -878,7 +878,7 @@
 
 
 
-class WebClientSSLTestCase(WebClientTestCase):
+class WebClientSSLTests(WebClientTests):
     def _listen(self, site):
         return reactor.listenSSL(
             0, site,
@@ -900,7 +900,7 @@
 
 
 
-class WebClientRedirectBetweenSSLandPlainText(unittest.TestCase):
+class WebClientRedirectBetweenSSLandPlainTextTests(unittest.TestCase):
     def getHTTPS(self, path):
         return networkString("https://127.0.0.1:%d/%s" % (self.tlsPortno, path))
 
@@ -941,7 +941,7 @@
             )
 
 
-class CookieTestCase(unittest.TestCase):
+class CookieTests(unittest.TestCase):
     def _listen(self, site):
         return reactor.listenTCP(0, site, interface="127.0.0.1")
 
@@ -1013,7 +1013,7 @@
 
 
 
-class TestHostHeader(unittest.TestCase):
+class HostHeaderTests(unittest.TestCase):
     """
     Test that L{HTTPClientFactory} includes the port in the host header
     if needed.
@@ -1106,11 +1106,11 @@
 
 
 if ssl is None or not hasattr(ssl, 'DefaultOpenSSLContextFactory'):
-    for case in [WebClientSSLTestCase, WebClientRedirectBetweenSSLandPlainText]:
+    for case in [WebClientSSLTests, WebClientRedirectBetweenSSLandPlainTextTests]:
         case.skip = "OpenSSL not present"
 
 if not interfaces.IReactorSSL(reactor, None):
-    for case in [WebClientSSLTestCase, WebClientRedirectBetweenSSLandPlainText]:
+    for case in [WebClientSSLTests, WebClientRedirectBetweenSSLandPlainTextTests]:
         case.skip = "Reactor doesn't support SSL"
 
 
Index: twisted/web/test/test_web.py
===================================================================
--- twisted/web/test/test_web.py	(revision 43411)
+++ twisted/web/test/test_web.py	(working copy)
@@ -40,7 +40,7 @@
     from twisted.web.static import Data
 
 
-class ResourceTestCase(unittest.TestCase):
+class ResourceTests(unittest.TestCase):
     def testListEntities(self):
         r = resource.Resource()
         self.assertEqual([], r.listEntities())
@@ -69,7 +69,7 @@
             return b"correct"
 
 
-class SiteTest(unittest.TestCase):
+class SiteTests(unittest.TestCase):
     def test_simplestSite(self):
         """
         L{Site.getResourceFor} returns the C{b""} child of the root resource it
@@ -85,7 +85,7 @@
 
 
 
-class SessionTest(unittest.TestCase):
+class SessionTests(unittest.TestCase):
     """
     Tests for L{server.Session}.
     """
@@ -209,7 +209,7 @@
     l1 = whole.split(b'\r\n', 1)[0]
     return int(l1.split()[1])
 
-class ConditionalTest(unittest.TestCase):
+class ConditionalTests(unittest.TestCase):
     """
     web.server's handling of conditional requests for cache validation.
     """
@@ -604,7 +604,7 @@
     def render(self, request):
         return ''
 
-class RememberURLTest(unittest.TestCase):
+class RememberURLTests(unittest.TestCase):
     def createServer(self, r):
         chan = DummyChannel()
         chan.site = server.Site(r)
@@ -667,7 +667,7 @@
 
 
 
-class NewRenderTestCase(unittest.TestCase):
+class NewRenderTests(unittest.TestCase):
     """
     Tests for L{server.Request.render}.
     """
@@ -728,7 +728,7 @@
 
 class GettableResource(resource.Resource):
     """
-    Used by AllowedMethodsTest to simulate an allowed method.
+    Used by AllowedMethodsTests to simulate an allowed method.
     """
     def render_GET(self):
         pass
@@ -742,7 +742,7 @@
 
 
 
-class AllowedMethodsTest(unittest.TestCase):
+class AllowedMethodsTests(unittest.TestCase):
     """
     'C{twisted.web.resource._computeAllowedMethods} is provided by a
     default should the subclass not provide the method.
@@ -1032,7 +1032,7 @@
 
 
 
-class TestLogEscaping(unittest.TestCase):
+class LogEscapingTests(unittest.TestCase):
     def setUp(self):
         self.logPath = self.mktemp()
         self.site = http.HTTPFactory(self.logPath)
@@ -1135,7 +1135,7 @@
 
 
 
-class ServerAttributesTestCase(unittest.TestCase):
+class ServerAttributesTests(unittest.TestCase):
     """
     Tests that deprecated twisted.web.server attributes raise the appropriate
     deprecation warnings when used.
Index: twisted/web/test/test_util.py
===================================================================
--- twisted/web/test/test_util.py	(revision 43411)
+++ twisted/web/test/test_util.py	(working copy)
@@ -22,7 +22,7 @@
 from twisted.web.test.requesthelper import DummyChannel, DummyRequest
 
 
-class RedirectToTestCase(TestCase):
+class RedirectToTests(TestCase):
     """
     Tests for L{redirectTo}.
     """
@@ -284,7 +284,7 @@
 
 
 
-class DeprecatedHTMLHelpers(TestCase):
+class DeprecatedHTMLHelpersTests(TestCase):
     """
     The various HTML generation helper APIs in L{twisted.web.util} are
     deprecated.
Index: twisted/web/test/test_http.py
===================================================================
--- twisted/web/test/test_http.py	(revision 43411)
+++ twisted/web/test/test_http.py	(working copy)
@@ -30,7 +30,7 @@
 
 
 
-class DateTimeTest(unittest.TestCase):
+class DateTimeTests(unittest.TestCase):
     """Test date parsing functions."""
 
     def testRoundtrip(self):
@@ -105,7 +105,7 @@
 
 
 
-class HTTP1_0TestCase(unittest.TestCase, ResponseTestMixin):
+class HTTP1_0Tests(unittest.TestCase, ResponseTestMixin):
     requests = (
         b"GET / HTTP/1.0\r\n"
         b"\r\n"
@@ -159,7 +159,7 @@
 
 
 
-class HTTP1_1TestCase(HTTP1_0TestCase):
+class HTTP1_1Tests(HTTP1_0Tests):
 
     requests = (
         b"GET / HTTP/1.1\r\n"
@@ -202,7 +202,7 @@
 
 
 
-class HTTP1_1_close_TestCase(HTTP1_0TestCase):
+class HTTP1_1_close_Tests(HTTP1_0Tests):
 
     requests = (
         b"GET / HTTP/1.1\r\n"
@@ -223,7 +223,7 @@
 
 
 
-class HTTP0_9TestCase(HTTP1_0TestCase):
+class HTTP0_9Tests(HTTP1_0Tests):
 
     requests = (
         b"GET /\r\n")
@@ -235,7 +235,7 @@
         self.assertEqual(response, expectedResponse)
 
 
-class HTTPLoopbackTestCase(unittest.TestCase):
+class HTTPLoopbackTests(unittest.TestCase):
 
     expectedHeaders = {b'request': b'/foo/bar',
                        b'command': b'GET',
@@ -298,7 +298,7 @@
 
 
 
-class PersistenceTestCase(unittest.TestCase):
+class PersistenceTests(unittest.TestCase):
     """
     Tests for persistent HTTP connections.
     """
@@ -626,7 +626,7 @@
 
 
 
-class ChunkingTestCase(unittest.TestCase):
+class ChunkingTests(unittest.TestCase):
 
     strings = [b"abcv", b"", b"fdfsd423", b"Ffasfas\r\n",
                b"523523\n\rfsdf", b"4234"]
@@ -652,7 +652,7 @@
 
 
 
-class ParsingTestCase(unittest.TestCase):
+class ParsingTests(unittest.TestCase):
     """
     Tests for protocol parsing in L{HTTPChannel}.
     """
@@ -1020,7 +1020,7 @@
 
 
 
-class QueryArgumentsTestCase(unittest.TestCase):
+class QueryArgumentsTests(unittest.TestCase):
     def testParseqs(self):
         self.assertEqual(
             cgi.parse_qs(b"a=b&d=c;+=f"),
@@ -1124,7 +1124,7 @@
         self.status = status
         self.message = message
 
-class ClientStatusParsing(unittest.TestCase):
+class ClientStatusParsingTests(unittest.TestCase):
     def testBaseline(self):
         c = ClientDriver()
         c.lineReceived(b'HTTP/1.0 201 foo')
@@ -1849,7 +1849,7 @@
 
 
 
-class MultilineHeadersTestCase(unittest.TestCase):
+class MultilineHeadersTests(unittest.TestCase):
     """
     Tests to exercise handling of multiline headers by L{HTTPClient}.  RFCs 1945
     (HTTP 1.0) and 2616 (HTTP 1.1) state that HTTP message header fields can
Index: twisted/web/test/test_proxy.py
===================================================================
--- twisted/web/test/test_proxy.py	(revision 43411)
+++ twisted/web/test/test_proxy.py	(working copy)
@@ -16,7 +16,7 @@
 from twisted.web.test.test_web import DummyRequest
 
 
-class ReverseProxyResourceTestCase(TestCase):
+class ReverseProxyResourceTests(TestCase):
     """
     Tests for L{ReverseProxyResource}.
     """
@@ -123,7 +123,7 @@
 
 
 
-class ProxyClientTestCase(TestCase):
+class ProxyClientTests(TestCase):
     """
     Tests for L{ProxyClient}.
     """
@@ -374,7 +374,7 @@
 
 
 
-class ProxyClientFactoryTestCase(TestCase):
+class ProxyClientFactoryTests(TestCase):
     """
     Tests for L{ProxyClientFactory}.
     """
@@ -418,7 +418,7 @@
 
 
 
-class ProxyRequestTestCase(TestCase):
+class ProxyRequestTests(TestCase):
     """
     Tests for L{ProxyRequest}.
     """
@@ -513,7 +513,7 @@
 
 
 
-class ReverseProxyRequestTestCase(TestCase):
+class ReverseProxyRequestTests(TestCase):
     """
     Tests for L{ReverseProxyRequest}.
     """
