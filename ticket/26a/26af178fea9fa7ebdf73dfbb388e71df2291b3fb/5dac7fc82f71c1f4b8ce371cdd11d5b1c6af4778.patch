diff --git a/doc/core/howto/application.xhtml b/doc/core/howto/application.xhtml
index 79f19db..3b6601a 100644
--- a/doc/core/howto/application.xhtml
+++ b/doc/core/howto/application.xhtml
@@ -95,37 +95,40 @@ Client service. </p>
 
 <h3>twistd and tac</h3><a name="twistd" />
 
-<p>To handle start-up and configuration of your Twisted application, the
-Twisted Application infrastructure uses <code>.tac</code> files.
-<code>.tac</code> are Python files which configure an <code class="API"
-base="twisted.application.service">Application</code> object and assign this
-object to the top-level variable <q><code>application</code></q>.</p>
+<p>To handle start-up and configuration of your Twisted application,
+the Twisted Application infrastructure uses <code>.tac</code>
+files. <code>.tac</code> are Python files which configure
+an <code class="API"
+base="twisted.application.service">Application</code> object and
+assign this object to the top-level
+variable <q><code>application</code></q>.</p>
 
 <p>The following is a simple example of a <code>.tac</code> file:</p>
 
 <a href="listings/application/service.tac" class="py-listing">service.tac</a>
 
-<p><code>twistd</code> is a program that runs Twisted applications using a
-<code>.tac</code> file. In its most simple form, it takes a single argument
-<code>-y</code> and a tac file name. For example, you can run the above server
-with the command <code class="shell">twistd -y service.tac</code>.</p>
+<p><code>twistd</code> is a program that runs Twisted applications
+using a <code>.tac</code> file. In its most simple form, it takes a
+single argument <code>-y</code> and a tac file name. For example, you
+can run the above server with the command <code class="shell">twistd
+-y service.tac</code>.</p>
 
-<p>By default, <code>twistd</code> daemonizes and logs to a file called
-<code>twistd.log</code>. More usually, when debugging, you will want your
-application to run in the foreground and log to the command line. To run the
-above file like this, use the command <code class="shell">twistd -noy
-service.tac</code></p>
+<p>By default, <code>twistd</code> daemonizes and logs to a file
+called <code>twistd.log</code>. More usually, when debugging, you will
+want your application to run in the foreground and log to the command
+line. To run the above file like this, use the
+command <code class="shell">twistd -noy service.tac</code></p>
 
 <p>For more information, see the <code>twistd</code> man page.</p>
 
 <h3>Customizing <code>twistd</code> logging in a .tac application</h3>
 
 <p>
-The logging behavior can be customized through an API
-accessible from <code>.tac</code> files.  The <code class="API"
-base="twisted.python.log">ILogObserver</code> component can be
-set on an Application in order to customize the default log observer that
-<code>twistd</code> will use.
+The logging behavior can be customized through an API accessible
+from <code>.tac</code> files.  The <code class="API"
+base="twisted.python.log">ILogObserver</code> component can be set on
+an Application in order to customize the default log observer
+that <code>twistd</code> will use.
 </p>
 
 <p>
@@ -146,7 +149,7 @@ application.setComponent(ILogObserver, FileLogObserver(logfile).emit)
 
 <p>
 invoking <code class="shell">twistd -y my.tac</code> will create a log file
-at<code>/tmp/my.log</code>.
+at <code>/tmp/my.log</code>.
 </p>
 
 <h3>Services provided by Twisted</h3>
@@ -253,11 +256,13 @@ corresponds to reactor.connectTCP.  </p>
 <h3>Service Collection</h3>
 
 <p><code class="API"
-base="twisted.application.service">IServiceCollection</code> objects contain
-<code class="API" base="twisted.application.service">IService</code> objects.
-IService objects can be added to IServiceCollection by calling <code class="API"
-base="twisted.application.service.IService">setServiceParent</code> and detached
-by using <code class="API"
+base="twisted.application.service">IServiceCollection</code> objects
+contain <code class="API"
+base="twisted.application.service">IService</code> objects.  IService
+objects can be added to IServiceCollection by
+calling <code class="API"
+base="twisted.application.service.IService">setServiceParent</code>
+and detached by using <code class="API"
 base="twisted.application.service.IService">disownServiceParent</code>.</p>
 
 <p>The standard implementation of IServiceCollection is <code class="API"
diff --git a/doc/core/howto/basics.xhtml b/doc/core/howto/basics.xhtml
index df27fba..20b00ed 100644
--- a/doc/core/howto/basics.xhtml
+++ b/doc/core/howto/basics.xhtml
@@ -12,13 +12,13 @@
 
 <h2>Application</h2>
 
-<p>Twisted programs usually work with
-<code class="API">twisted.application.service.Application</code>.
-This class usually holds all persistent configuration of
-a running server -- ports to bind to, places where connections
-to must be kept or attempted, periodic actions to do and almost
-everything else. It is the root object in a tree of services implementing
-<code class="API" base="twisted.application.service">IService</code>.</p>
+<p>Twisted programs usually work
+with <code class="API">twisted.application.service.Application</code>.
+This class usually holds all persistent configuration of a running
+server -- ports to bind to, places where connections to must be kept
+or attempted, periodic actions to do and almost everything else. It is
+the root object in a tree of services implementing <code class="API"
+base="twisted.application.service">IService</code>.</p>
 
 <p>Other HOWTOs describe how to write custom code for Applications,
 but this one describes how to use already written code (which can be
@@ -52,10 +52,11 @@ directory. When a straight Python file which defines an <code>Application</code>
 object called <code>application</code> is used, use the <code class="shell">-y</code>
 option.</p>
 
-<p>When <code class="shell">twistd</code> runs, it records its process id in a
-<code>twistd.pid</code> file (this can be configured via a command line
-switch). In order to shutdown the <code class="shell">twistd</code> process, kill that
-pid (usually you would do <code class="shell">kill `cat twistd.pid`</code>).
+<p>When <code class="shell">twistd</code> runs, it records its process
+id in a <code>twistd.pid</code> file (this can be configured via a
+command line switch). In order to shutdown
+the <code class="shell">twistd</code> process, kill that pid (usually
+you would do <code class="shell">kill `cat twistd.pid`</code>).
 </p>
 
 <p>As always, the gory details are in the manual page.</p>
@@ -63,25 +64,26 @@ pid (usually you would do <code class="shell">kill `cat twistd.pid`</code>).
 <h2>OS Integration</h2>
 
 <p>
-If you have an Application that runs with <code class="shell">twistd</code>,
-you can easily deploy it on RedHat Linux or Debian GNU/Linux based systems
-using the <code class="shell">tap2deb</code> or <code
-class="shell">tap2rpm</code> tools. These take a Twisted Application file (of
-any of the supported formats — Python source, XML or pickle), and build a
-Debian or RPM package (respectively) that installs the Application as a system
-service. The package includes the Application file, a default
-<code>/etc/init.d/</code> script that starts and stops the process with twistd,
-and post-installation scripts that configure the Application to be run in the
-appropriate init levels.
+If you have an Application that runs
+with <code class="shell">twistd</code>, you can easily deploy it on
+RedHat Linux or Debian GNU/Linux based systems using
+the <code class="shell">tap2deb</code>
+or <code class="shell">tap2rpm</code> tools. These take a Twisted
+Application file (of any of the supported formats — Python source, XML
+or pickle), and build a Debian or RPM package (respectively) that
+installs the Application as a system service. The package includes the
+Application file, a default <code>/etc/init.d/</code> script that
+starts and stops the process with twistd, and post-installation
+scripts that configure the Application to be run in the appropriate
+init levels.
 </p>
 
 <!-- Is "note" really the right class to be using here? -->
-<div class="note">
-<code class="shell">tap2rpm</code> and <code class="shell">tap2deb</code> do
-not package your entire application and dependent code, just the Twisted
-Application file. You will need to find some other way to package your Python
-code, such as <code class="API">distutils</code>' <code>bdist_rpm</code>
-command.
+<div class="note"> <code class="shell">tap2rpm</code>
+and <code class="shell">tap2deb</code> do not package your entire
+application and dependent code, just the Twisted Application file. You
+will need to find some other way to package your Python code, such
+as <code class="API">distutils</code>' <code>bdist_rpm</code> command.
 </div>
 
 <p>
diff --git a/doc/core/howto/components.xhtml b/doc/core/howto/components.xhtml
index 3567d6e..135e4ef 100644
--- a/doc/core/howto/components.xhtml
+++ b/doc/core/howto/components.xhtml
@@ -8,18 +8,21 @@
 <body>
 <h1>Components: Interfaces and Adapters</h1>
 
-<p>Object oriented programming languages allow programmers to reuse portions of
-existing code by creating new <q>classes</q> of objects which subclass another
-class.  When a class subclasses another, it is said to <em>inherit</em> all of its
-behaviour.  The subclass can then <q>override</q> and <q>extend</q> the behavior
-provided to it by the superclass. Inheritance is very useful in many situations,
-but because it is so convenient to use, often becomes abused in large software
-systems, especially when multiple inheritance is involved. One solution is to
-use <em>delegation</em> instead of <q>inheritance</q> where appropriate.
-Delegation is simply the act of asking <em>another</em> object to perform a task
-for an object. To support this design pattern, which is often referred to as the
-<em>components</em> pattern because it involves many small interacting components,
-<em>interfaces</em> and <em>adapters</em> were created by the Zope 3 team.</p>
+<p>Object oriented programming languages allow programmers to reuse
+portions of existing code by creating new <q>classes</q> of objects
+which subclass another class.  When a class subclasses another, it is
+said to <em>inherit</em> all of its behaviour.  The subclass can
+then <q>override</q> and <q>extend</q> the behavior provided to it by
+the superclass. Inheritance is very useful in many situations, but
+because it is so convenient to use, often becomes abused in large
+software systems, especially when multiple inheritance is
+involved. One solution is to use <em>delegation</em> instead
+of <q>inheritance</q> where appropriate.  Delegation is simply the act
+of asking <em>another</em> object to perform a task for an object. To
+support this design pattern, which is often referred to as
+the <em>components</em> pattern because it involves many small
+interacting components, <em>interfaces</em> and <em>adapters</em> were
+created by the Zope 3 team.</p>
 
 <p><q>Interfaces</q> are simply markers which objects can use to say <q>I
 implement this interface</q>. Other objects may then make requests like
@@ -100,16 +103,18 @@ technique called <em>composition</em>, which relies on delegation rather than
 inheritance to break code into small reusable chunks. Let us continue with the
 Multiple Inheritance example, though, because it is often used in practice.</p>
 
-<p>What if both the Color and the Area base class defined the same method,
-perhaps <code>calculate</code>? Where would the implementation come from? The
-implementation that is located for <code>Square().calculate()</code> depends on
-the method resolution order, or MRO, and can change when programmers change
-seemingly unrelated things by refactoring classes in other parts of the system,
-causing obscure bugs. Our first thought might be to change the calculate method
-name to avoid name clashes, to perhaps <code>calculateArea</code> and
-<code>calculateColor</code>.  While explicit, this change could potentially
-require a large number of changes throughout a system, and is error-prone,
-especially when attempting to integrate two systems which you didn't write.</p>
+<p>What if both the Color and the Area base class defined the same
+method, perhaps <code>calculate</code>? Where would the implementation
+come from? The implementation that is located
+for <code>Square().calculate()</code> depends on the method resolution
+order, or MRO, and can change when programmers change seemingly
+unrelated things by refactoring classes in other parts of the system,
+causing obscure bugs. Our first thought might be to change the
+calculate method name to avoid name clashes, to
+perhaps <code>calculateArea</code> and <code>calculateColor</code>.
+While explicit, this change could potentially require a large number
+of changes throughout a system, and is error-prone, especially when
+attempting to integrate two systems which you didn't write.</p>
 
 <p>Let's imagine another example. We have an electric appliance, say a hair
 dryer. The hair dryer is american voltage. We have two electric sockets, one of
@@ -151,11 +156,12 @@ I was plugged in improperly and
 now you have no hair dryer any more.
 </pre>
 
-<p>We are going to attempt to solve this problem by writing an Adapter for the
-<code>ForeignSocket</code> which converts the voltage for use with an American
-hair dryer. An Adapter is a class which is constructed with one and only one
-argument, the <q>adaptee</q> or <q>original</q> object. In this example, we
-will show all code involved for clarity:</p>
+<p>We are going to attempt to solve this problem by writing an Adapter
+for the <code>ForeignSocket</code> which converts the voltage for use
+with an American hair dryer. An Adapter is a class which is
+constructed with one and only one argument, the <q>adaptee</q>
+or <q>original</q> object. In this example, we will show all code
+involved for clarity:</p>
 
 <pre class="python">
 class AdaptToAmericanSocket:
@@ -213,13 +219,14 @@ the class block do not have any method body! Since Python does not have any
 native language-level support for Interfaces like Java does, this is what
 distinguishes an Interface definition from a Class.</p>
 
-<p>Now that we have a defined Interface, we can talk about objects using terms
-like this: <q>The <code>AmericanSocket</code> class implements the
-<code>IAmericanSocket</code> interface</q> and <q>Please give me an object which
+<p>Now that we have a defined Interface, we can talk about objects
+using terms like this: <q>The <code>AmericanSocket</code> class
+implements the <code>IAmericanSocket</code> interface</q>
+and <q>Please give me an object which
 adapts <code>ForeignSocket</code> to the <code>IAmericanSocket</code>
-interface</q>. We can make <em>declarations</em> about what interfaces a certain
-class implements, and we can request adapters which implement a certain
-interface for a specific class.</p>
+interface</q>. We can make <em>declarations</em> about what interfaces
+a certain class implements, and we can request adapters which
+implement a certain interface for a specific class.</p>
 
 <p>Let's look at how we declare that a class implements an interface:</p>
 
@@ -234,12 +241,13 @@ class AmericanSocket:
         return 110
 </pre>
 
-<p>So, to declare that a class implements an interface, we simply call
-<code>zope.interface.implements</code> at the class level.</p>
+<p>So, to declare that a class implements an interface, we simply
+call <code>zope.interface.implements</code> at the class level.</p>
 
-<p>Now, let's say we want to rewrite the <code>AdaptToAmericanSocket</code>
-class as a real adapter. In this case we also specify it as implementing
-<code>IAmericanSocket</code>:</p>
+<p>Now, let's say we want to rewrite
+the <code>AdaptToAmericanSocket</code> class as a real adapter. In
+this case we also specify it as
+implementing <code>IAmericanSocket</code>:</p>
 
 <pre class="python">
 from zope.interface import implements
@@ -258,15 +266,17 @@ class AdaptToAmericanSocket:
         return self.original.voltage() / 2
 </pre>
 
-<p>Notice how we placed the implements declaration on this adapter class. So
-far, we have not achieved anything by using components other than requiring us
-to type more. In order for components to be useful, we must use the
-<em>component registry</em>. Since <code>AdaptToAmericanSocket</code> implements
-<code>IAmericanSocket</code> and regulates the voltage of a
-<code>ForeignSocket</code> object, we can <em>register
-<code>AdaptToAmericanSocket</code> as an <code>IAmericanSocket</code> adapter
-for the <code>ForeignSocket</code> class</em>. It is easier to see how this is
-done in code than to describe it:</p>
+<p>Notice how we placed the implements declaration on this adapter
+class. So far, we have not achieved anything by using components other
+than requiring us to type more. In order for components to be useful,
+we must use the <em>component
+registry</em>. Since <code>AdaptToAmericanSocket</code>
+implements <code>IAmericanSocket</code> and regulates the voltage of
+a <code>ForeignSocket</code> object, we
+can <em>register </em> <code>AdaptToAmericanSocket</code> <em> as
+an </em> <code>IAmericanSocket</code> <em> adapter for
+the </em> <code>ForeignSocket</code> <em>class</em>. It is easier to see how
+this is done in code than to describe it:</p>
 
 <pre class="python">
 from zope.interface import Interface, implements
@@ -321,27 +331,29 @@ False
 </pre>
 
 <p>As you can see, the <code>AmericanSocket</code> instance claims to
-implement <code>IAmericanSocket</code>, but the <code>ForeignSocket</code>
-does not. If we wanted to use the <code>HairDryer</code> with the
-<code>AmericanSocket</code>, we could know that it would be safe to do so by
-checking whether it implements <code>IAmericanSocket</code>. However, if we
-decide we want to use <code>HairDryer</code> with a <code>ForeignSocket</code>
-instance, we must <em>adapt</em> it to <code>IAmericanSocket</code> before
-doing so.  We use the interface object to do this:</p>
+implement <code>IAmericanSocket</code>, but
+the <code>ForeignSocket</code> does not. If we wanted to use
+the <code>HairDryer</code> with the <code>AmericanSocket</code>, we
+could know that it would be safe to do so by checking whether it
+implements <code>IAmericanSocket</code>. However, if we decide we want
+to use <code>HairDryer</code> with a <code>ForeignSocket</code>
+instance, we must <em>adapt</em> it to <code>IAmericanSocket</code>
+before doing so.  We use the interface object to do this:</p>
 
 <pre class="python-interpreter">
 &gt;&gt;&gt; IAmericanSocket(fs)
 &lt;__main__.AdaptToAmericanSocket instance at 0x1a5120&gt;
 </pre>
 
-<p>When calling an interface with an object as an argument, the interface
-looks in the adapter registry for an adapter which implements the interface for
-the given instance's class. If it finds one, it constructs an instance of the
-Adapter class, passing the constructor the original instance, and returns it.
-Now the <code>HairDryer</code> can safely be used with the adapted
-<code>ForeignSocket</code>. But what happens if we attempt to adapt an object
-which already implements <code>IAmericanSocket</code>? We simply get back the
-original instance:</p>
+<p>When calling an interface with an object as an argument, the
+interface looks in the adapter registry for an adapter which
+implements the interface for the given instance's class. If it finds
+one, it constructs an instance of the Adapter class, passing the
+constructor the original instance, and returns it.  Now
+the <code>HairDryer</code> can safely be used with the
+adapted <code>ForeignSocket</code>. But what happens if we attempt to
+adapt an object which already implements <code>IAmericanSocket</code>?
+We simply get back the original instance:</p>
 
 <pre class="python-interpreter">
 &gt;&gt;&gt; IAmericanSocket(am)
@@ -395,8 +407,8 @@ class Root(Referenceable):
     implements(IPBRoot)
 </pre>
 
-<p>Suppose you have your own class which implements your
-<code>IMyInterface</code> interface:</p>
+<p>Suppose you have your own class which implements
+your <code>IMyInterface</code> interface:</p>
 
 <pre class="python">
 from zope.interface import implements, Interface
@@ -408,9 +420,9 @@ class MyThing:
     implements(IMyInterface)
 </pre>
 
-<p>Now if you want to make this class inherit from <code>pb.Root</code>, 
-the interfaces code will automatically determine that it also implements
-<code>IPBRoot</code>:</p>
+<p>Now if you want to make this class inherit
+from <code>pb.Root</code>, the interfaces code will automatically
+determine that it also implements <code>IPBRoot</code>:</p>
 
 <pre class="python">
 from twisted.spread import pb
@@ -429,8 +441,9 @@ class MyThing(pb.Root):
 True
 </pre>
 
-<p>If you want <code>MyThing</code> to inherit from <code>pb.Root</code> but
-<em>not</em> implement <code>IPBRoot</code> like <code>pb.Root</code> does,
+<p>If you want <code>MyThing</code> to inherit
+from <code>pb.Root</code> but <em>not</em>
+implement <code>IPBRoot</code> like <code>pb.Root</code> does,
 use <code>implementOnly</code>:</p>
 
 <pre class="python">
diff --git a/doc/core/howto/cred.xhtml b/doc/core/howto/cred.xhtml
index f16080b..dae222b 100644
--- a/doc/core/howto/cred.xhtml
+++ b/doc/core/howto/cred.xhtml
@@ -65,12 +65,13 @@ This has only 2 methods -</p>
 <ul>
 <li><code class="API" base="twisted.cred.portal.Portal">login</code><code>(credentials, mind, *interfaces)</code>
 
-<p>The docstring is quite expansive (see <code class="API">twisted.cred.portal</code>), but in
-brief, this is what you call when you need to call in order to connect
-a user to the system.  Typically you only pass in one interface, and the mind is
-<code class="python">None</code>. The interfaces are the possible interfaces the returned
-avatar is expected to implement, in order of preference.
-The result is a deferred which fires a tuple of:</p>
+<p>The docstring is quite expansive
+(see <code class="API">twisted.cred.portal</code>), but in brief, this
+is what you call when you need to call in order to connect a user to
+the system.  Typically you only pass in one interface, and the mind
+is <code class="python">None</code>. The interfaces are the possible
+interfaces the returned avatar is expected to implement, in order of
+preference.  The result is a deferred which fires a tuple of:</p>
     <ul>
 	<li>interface the avatar implements (which was one of the interfaces passed in the *interfaces
 tuple)</li>
@@ -343,11 +344,11 @@ href="tap.xhtml">Writing a twistd plugin</a> document.</p>
 
    <h3>Building a cred plugin</h3>
 
-<p> To build a plugin for cred, you should first define an <code
-class="python">authType</code>, a short one-word string that defines
-your plugin to the command-line. Once you have this, the convention is
-to create a file named <code>myapp_plugins.py</code> in the
-<code class="API">twisted.plugins</code> module path. </p>
+<p> To build a plugin for cred, you should first define
+an <code class="python">authType</code>, a short one-word string that
+defines your plugin to the command-line. Once you have this, the
+convention is to create a file named <code>myapp_plugins.py</code> in
+the <code class="API">twisted.plugins</code> module path. </p>
 
 <p> Below is an example file structure for an application that defines
 such a plugin: </p>
