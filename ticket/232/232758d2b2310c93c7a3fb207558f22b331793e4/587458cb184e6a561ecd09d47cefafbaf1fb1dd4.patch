diff --cc doc/core/howto/tutorial/intro.xhtml
index b53c3ae,49101f7..0000000
--- a/doc/core/howto/tutorial/intro.xhtml
+++ b/doc/core/howto/tutorial/intro.xhtml
@@@ -279,21 -286,21 +286,22 @@@ Configuration</a> file).</p
  
  <a href="listings/finger/finger11.tac" class="py-listing">finger11.tac</a>
  
- <p>Instead of using <code>reactor.listenTCP</code> as in the above examples,
- here we are using its application-aware counterpart,
- <code>internet.TCPServer</code>.  Notice that when it is instantiated, the
- application object itself does not reference either the protocol or the factory.
- Any services (such as <code>TCPServer</code>) which have the application as
- their parent will be started when the application is started by twistd.  The
- application object is more useful for returning an object that supports the
- <code class="API"
++
+ <p>Instead of using <code>reactor.listenTCP</code> as in the above
+ examples, here we are using its application-aware
+ counterpart, <code>internet.TCPServer</code>.  Notice that when it is
+ instantiated, the application object itself does not reference either
+ the protocol or the factory.  Any services (such as TCPServer) which
+ have the application as their parent will be started when the
+ application is started by twistd.  The application object is more
+ useful for returning an object that supports the <code class="API"
  base="twisted.application.service">IService</code>, <code class="API"
  base="twisted.application.service">IServiceCollection</code>, <code class="API"
- base="twisted.application.service">IProcess</code>, and <code class="API"
- base="twisted.persisted">sob.IPersistable</code> interfaces with the given
- parameters; we'll be seeing these in the next part of the tutorial. As the
- parent of the <code>TCPServer</code> we opened, the application lets us manage
- the <code>TCPServer</code>.</p>
+ base="twisted.application.service">IProcess</code>,
+ and <code class="API" base="twisted.persisted">sob.IPersistable</code>
+ interfaces with the given parameters; we'll be seeing these in the
+ next part of the tutorial. As the parent of the TCPServer we opened,
+ the application lets us manage the TCPServer.</p>
  
  <p>With the daemon running on the standard finger port, you can test it with
  the standard finger command: <code>finger moshez</code>.</p>
diff --cc doc/core/howto/tutorial/protocol.xhtml
index 3fed88d,f6a98ab..0000000
--- a/doc/core/howto/tutorial/protocol.xhtml
+++ b/doc/core/howto/tutorial/protocol.xhtml
@@@ -40,26 -40,27 +40,28 @@@ Giving a tutorial now, sorry
  
  <a href="listings/finger/finger12.tac" class="py-listing">finger12.tac</a>
  
- <p>This program has two protocol-factory-TCPServer pairs, which are both child
- services of the application.  Specifically, the
- <code base="API" class="twisted.application.service.Service">setServiceParent</code>
- method is used to define the two TCPServer services as children of
- <code>application</code>, which implements
- <code base="API" class="twisted.application.servce">IServiceCollection</code>.
- Both services are thus started with the application.</p>
+ <p>This program has two protocol-factory-TCPServer pairs, which are
+ both child services of the application.  Specifically,
+ the <code base="API"
+ class="twisted.application.service.Service">setServiceParent</code>
+ method is used to define the two TCPServer services as children
+ of <code>application</code>, which implements <code base="API"
+ class="twisted.application.servce">IServiceCollection</code>.  Both
+ services are thus started with the application.</p>
+ 
 +
  <h2>Use Services to Make Dependencies Sane</h2>
  
  <p>The previous version had the setter poke at the innards of the
  finger factory. This strategy is usually not a good idea: this version makes
  both factories symmetric by making them both look at a single
  object. Services are useful for when an object is needed which is
 -not related to a specific network server. Here, we define a common service 
 -class with methods that will create factories on the fly. The service 
 +not related to a specific network server. Here, we define a common service
 +class with methods that will create factories on the fly. The service
  also contains methods the factories will depend on.</p>
  
- <p>The factory-creation methods, <code>getFingerFactory</code> and
- <code>getFingerSetterFactory</code>, follow this pattern:</p>
+ <p>The factory-creation methods, <code>getFingerFactory</code>
+ and <code>getFingerSetterFactory</code>, follow this pattern:</p>
  
  <ol>
  
@@@ -69,24 -70,25 +71,26 @@@ factory, <code>twisted.internet.protoco
  <li>Set the protocol class, just like our factory class would have.</li>
  
  <li>Copy a service method to the factory as a function attribute.  The
- function won't have access to the factory's <code>self</code>, but that's OK
- because as a bound method it has access to the service's <code>self</code>,
- which is what it needs.  For <code>getUser</code>, a custom method defined in
- the service gets copied.  For <code>setUser</code>, a standard method of the
- <code>users</code> dictionary is copied.</li>
+ function won't have access to the factory's <code>self</code>, but
+ that's OK because as a bound method it has access to the
+ service's <code>self</code>, which is what it needs.
+ For <code>getUser</code>, a custom method defined in the service gets
+ copied.  For <code>setUser</code>, a standard method of
+ the <code>users</code> dictionary is copied.</li>
+ 
 +
  </ol>
  
 -<p>Thus, we stopped subclassing: the service simply puts useful methods and 
 +<p>Thus, we stopped subclassing: the service simply puts useful methods and
  attributes inside the factories. We are getting better at protocol design:
 -none of our protocol classes had to be changed, and neither will have to 
 +none of our protocol classes had to be changed, and neither will have to
  change until the end of the tutorial.</p>
  
- <p>As an application
- <code class="API" base="twisted.application.service">Service</code> , this new
- finger service implements the
- <code class="API" base="twisted.application.service">IService</code> interface
- and can be started and stopped in a standardized manner.  We'll make use of
+ <p>As an application <code class="API"
+ base="twisted.application.service">service</code> , this new finger
+ service implements the <code class="API"
+ base="twisted.application.service">IService</code> interface and can
+ be started and stopped in a standardized manner.  We'll make use of
  this in the next example.</p>
  
  <a href="listings/finger/finger13.tac" class="py-listing">finger13.tac</a>
diff --cc doc/core/howto/tutorial/web.xhtml
index 0efb9c3,9da8870..0000000
--- a/doc/core/howto/tutorial/web.xhtml
+++ b/doc/core/howto/tutorial/web.xhtml
