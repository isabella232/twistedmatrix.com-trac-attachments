Index: twisted/lore/test/test_man2lore.py
===================================================================
--- twisted/lore/test/test_man2lore.py	(revision 22818)
+++ twisted/lore/test/test_man2lore.py	(working copy)
@@ -139,3 +139,24 @@
                   "<dt>on two lines\n</dt><dd>Another option\non two lines\n"
                   "</dd></dl>\n\n</body>\n</html>\n")
         self.assertConvert(inputLines, output)
+
+
+    def test_interactiveCommand(self):
+        """
+        Test management of interactive command tag.
+        """
+        inputLines = ['.TH BAR "1" "Oct 2007" "" ""',
+                ".SH HEADER",
+                ".BL",
+                ".IT IC foo AR bar",
+                "option 1",
+                ".IT IC egg AR spam OP AR stuff",
+                "option 2",
+                ".EL"
+                ]
+        output = ("<html><head>\n<title>BAR.1</title></head>\n<body>\n\n"
+                  "<h1>BAR.1</h1>\n\n<h2>HEADER</h2>\n\n<dl>"
+                  "<dt>foo <u>bar</u></dt><dd>option 1\n</dd><dt>egg "
+                  "<u>spam</u> [<u>stuff</u>]</dt><dd>option 2\n</dd></dl>"
+                  "\n\n</body>\n</html>\n")
+        self.assertConvert(inputLines, output)
Index: twisted/lore/man2lore.py
===================================================================
--- twisted/lore/man2lore.py	(revision 22818)
+++ twisted/lore/man2lore.py	(working copy)
@@ -183,6 +183,22 @@
         self.closeTags()
 
 
+    def macro_IC(self, line):
+        cmd = line.split(' ', 1)[0]
+        args = line[line.index(cmd) + len(cmd):]
+        args = args.split(' ')
+        text = cmd
+        while args:
+            arg = args.pop(0)
+            if arg.lower() == "ar":
+                text += " \\fU%s\\fR" % (args.pop(0),)
+            elif arg.lower() == "op":
+                ign = args.pop(0)
+                text += " [\\fU%s\\fR]" % (args.pop(0),)
+
+        self.text(text)
+
+
     def macro_TP(self, line):
         """
         Handle C{TP} token: start a definition list if it's first token, or
@@ -240,6 +256,11 @@
                 self.write('</%s>' % self.state)
                 self.write(escape(bit[2:]))
                 self.state = 'regular'
+            elif bit[:2] == 'fU':
+                # fU doesn't really exist, but it helps us to manage underlined
+                # text.
+                self.write('<u>' + escape(bit[2:]))
+                self.state = 'u'
             elif bit[:3] == '(co':
                 self.write('&copy;' + escape(bit[3:]))
             else:
