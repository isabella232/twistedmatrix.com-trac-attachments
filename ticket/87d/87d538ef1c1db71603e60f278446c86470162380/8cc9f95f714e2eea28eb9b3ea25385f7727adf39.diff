Index: adbapi.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/adbapi.py,v
retrieving revision 1.54
diff -u -r1.54 adbapi.py
--- adbapi.py	12 Aug 2003 14:40:31 -0000	1.54
+++ adbapi.py	12 Aug 2003 21:00:24 -0000
@@ -17,6 +17,8 @@
 An asynchronous mapping to U{DB-API 2.0<http://www.python.org/topics/database/DatabaseAPI-2.0.html>}.
 """
 
+import warnings
+
 from twisted.spread import pb
 from twisted.internet import defer
 from twisted.internet import threads
@@ -132,7 +134,9 @@
         @return: a Deferred which will fire the return value of
         'interaction(Transaction(...))', or a Failure.
         """
-        return self._deferToThread(self._runInteraction, interaction, *args, **kw)
+
+        return self._deferToThread(self._runInteraction,
+                                   interaction, *args, **kw)
 
     def runQuery(self, *args, **kw):
         """Execute an SQL query and return the result.
@@ -152,9 +156,7 @@
         cursor's 'fetchall' method, or a Failure.
         """
 
-        d = defer.Deferred()
-        apply(self.query, (d.callback, d.errback)+args, kw)
-        return d
+        return self._deferToThread(self._runQuery, *args, **kw)
 
     def runOperation(self, *args, **kw):
         """Execute an SQL query and return None.
@@ -173,9 +175,7 @@
         @return: a Deferred which will fire None or a Failure.
         """
 
-        d = defer.Deferred()
-        apply(self.operation, (d.callback, d.errback)+args, kw)
-        return d
+        return self._deferToThread(self._runOperation, *args, **kw)
 
     def close(self):
         """Close all pool connections and shutdown the pool."""
@@ -234,7 +234,7 @@
             trans._connection.rollback()
             raise
 
-    def _runQuery(self, args, kw):
+    def _runQuery(self, *args, **kw):
         conn = self.connect()
         curs = conn.cursor()
         try:
@@ -249,7 +249,7 @@
             conn.rollback()
             raise
 
-    def _runOperation(self, args, kw):
+    def _runOperation(self, *args, **kw):
         conn = self.connect()
         curs = conn.cursor()
         try:
@@ -286,20 +286,21 @@
         return d
 
     def query(self, callback, errback, *args, **kw):
-        # this will be deprecated ASAP
-        self._deferToThread(self._runQuery, args, kw).addCallbacks(
+        warnings.warn("This is deprecated. Use runQuery.", DeprecationWarning)
+        self._deferToThread(self._runQuery, *args, **kw).addCallbacks(
             callback, errback)
 
     def operation(self, callback, errback, *args, **kw):
-        # this will be deprecated ASAP
-        self._deferToThread(self._runOperation, args, kw).addCallbacks(
+        warnings.warn("This is deprecated. Use runOperation", DeprecationWarning)
+        self._deferToThread(self._runOperation, *args, **kw).addCallbacks(
             callback, errback)
 
     def synchronousOperation(self, *args, **kw):
-        self._runOperation(args, kw)
+        warnings.warn("This is deprecated. Use DB-API directly.", DeprecationWarning)
+        self._runOperation(*args, **kw)
 
     def interaction(self, interaction, callback, errback, *args, **kw):
-        # this will be deprecated ASAP
+        warnings.warn("This is deprecated. Use runInteraction", DeprecationWarning)
         apply(self._deferToThread,
               (self._runInteraction, interaction) + args, kw).addCallbacks(
             callback, errback)
@@ -308,6 +309,8 @@
 class Augmentation:
     '''A class which augments a database connector with some functionality.
 
+    This class is now deprecated. Just use the ConnectionPool directly.
+
     Conventional usage of me is to write methods that look like
 
       >>>  def getSomeData(self, critereon):
@@ -316,6 +319,7 @@
     '''
 
     def __init__(self, dbpool):
+        warnings.warn("This is deprecated. Use ConnectionPool.", DeprecationWarning)
         self.dbpool = dbpool
 
     def __setstate__(self, state):
@@ -326,6 +330,7 @@
 
         Override this, and/or define your own callbacks.
         """
+        warnings.warn("This is deprecated. Roll your own.", DeprecationWarning)
         log.msg("%s Operation Done: %s" % (reflect.qual(self.__class__), done))
 
     def operationError(self, error):
@@ -333,31 +338,41 @@
 
         Override this, and/or define your own callbacks.
         """
+        warnings.warn("This is deprecated. Roll your own.", DeprecationWarning)
         log.msg("%s Operation Failed: %s" % (reflect.qual(self.__class__), error))
         log.err(error)
 
     schema = ''' Insert your SQL database schema here. '''
 
     def createSchema(self):
+        warnings.warn("This is deprecated. Roll your own.", DeprecationWarning)
         return self.runOperation(self.schema).addCallbacks(self.schemaCreated, self.schemaNotCreated)
 
     def schemaCreated(self, result):
+        warnings.warn("This is deprecated. Roll your own.", DeprecationWarning)
         log.msg("Successfully created schema for %s." % reflect.qual(self.__class__))
 
     def schemaNotCreated(self, error):
+        warnings.warn("This is deprecated. Roll your own.", DeprecationWarning)
         log.msg("Schema already exists for %s." % reflect.qual(self.__class__))
 
     def runQuery(self, *args, **kw):
+        warnings.warn("This is deprecated. Use the ConnectionPool.",
+                      DeprecationWarning)
         d = defer.Deferred()
         apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
         return d
 
     def runOperation(self, *args, **kw):
+        warnings.warn("This is deprecated. Use the ConnectionPool.",
+                      DeprecationWarning)
         d = defer.Deferred()
         apply(self.dbpool.operation, (d.callback,d.errback)+args, kw)
         return d
 
     def runInteraction(self, interaction, *args, **kw):
+        warnings.warn("This is deprecated. Use the ConnectionPool.",
+                      DeprecationWarning)
         d = defer.Deferred()
         apply(self.dbpool.interaction, (interaction,d.callback,d.errback,)+args, kw)
         return d
Index: dbcred.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/dbcred.py,v
retrieving revision 1.11
diff -u -r1.11 dbcred.py
--- dbcred.py	29 Jan 2003 04:51:19 -0000	1.11
+++ dbcred.py	12 Aug 2003 21:00:24 -0000
@@ -17,11 +17,15 @@
 Database backend for L{twisted.cred}.
 """
 
-from twisted.enterprise import adbapi, row, reflector
-from twisted.cred import authorizer, identity
 import base64
 import string
+import warnings
+
+from twisted.enterprise import adbapi, row, reflector
+from twisted.cred import authorizer, identity
 
+warnings.warn("This is deprecated. The Cred API has changed.",
+              DeprecationWarning)
 
 class IdentityRow(row.RowObject):
     rowColumns     = [
Index: dbgadgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/dbgadgets.py,v
retrieving revision 1.5
diff -u -r1.5 dbgadgets.py
--- dbgadgets.py	14 Sep 2002 08:08:31 -0000	1.5
+++ dbgadgets.py	12 Aug 2003 21:00:25 -0000
@@ -37,8 +37,12 @@
 """
 
 import md5
+import warnings
 
 from twisted.web import widgets
+
+warnings.warn("This is deprecated. You should be using Woven.",
+              DeprecationWarning)
 
 class IdentitiesGadget(widgets.Gadget, widgets.StreamWidget):
     title = "Database Identities"
Index: dbpassport.py
===================================================================
RCS file: dbpassport.py
diff -N dbpassport.py
--- dbpassport.py	20 Sep 2002 20:09:17 -0000	1.15
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,22 +0,0 @@
-# Twisted, the Framework of Your Internet
-# Copyright (C) 2001 Matthew W. Lefkowitz
-# 
-# This library is free software; you can redistribute it and/or
-# modify it under the terms of version 2.1 of the GNU Lesser General Public
-# License as published by the Free Software Foundation.
-# 
-# This library is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-# Lesser General Public License for more details.
-# 
-# You should have received a copy of the GNU Lesser General Public
-# License along with this library; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
-Deprecated database backend for L{twisted.cred}; use L{dbcred} instead.
-"""
-from dbcred import *
-from twisted.python import log
-
-log.msg("dbpassport now obsolete (use dbcred instead)")
Index: row.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/row.py,v
retrieving revision 1.20
diff -u -r1.20 row.py
--- row.py	4 Jul 2003 21:50:17 -0000	1.20
+++ row.py	12 Aug 2003 21:00:25 -0000
@@ -21,6 +21,7 @@
 """
 
 import string
+import warnings
 
 from twisted.enterprise.util import DBError, NOQUOTE, getKeyColumn, dbTypeMap
 
@@ -129,6 +130,7 @@
     (NOTE: not thread safe....)
     """
     def __init__(self, minimum, pool):
+        warnings.warn("This is deprecated. Use the underlying database to generate keys, or just roll your own.", DeprecationWarning)
         self.min = minimum
         self.pool = minimum + pool
         self.current = self.min
@@ -145,6 +147,7 @@
     """A keep a set of SQL statements to be executed in a single batch.
     """
     def __init__(self):
+        warnings.warn("This is deprecated. Just use ';'.join(statements)", DeprecationWarning)
         self.statements = []
 
     def addStatement(self, statement):
@@ -157,5 +160,3 @@
 
     def getSize(self):
         return len(self.statements)
-
-
Index: sqlreflector.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/sqlreflector.py,v
retrieving revision 1.17
diff -u -r1.17 sqlreflector.py
--- sqlreflector.py	12 Aug 2003 06:36:17 -0000	1.17
+++ sqlreflector.py	12 Aug 2003 21:00:26 -0000
@@ -38,8 +38,8 @@
     def __init__(self, dbpool, rowClasses):
         """Initialize me against a database.
         """
-        adbapi.Augmentation.__init__(self, dbpool)
-        reflector.Reflector.__init__(self, rowClasses)        
+        reflector.Reflector.__init__(self, rowClasses)
+        self.dbpool = dbpool
 
     def _populate(self):
         self._transPopulateSchema()
@@ -120,8 +120,9 @@
             pass
         else:
             whereClause = []
-        return self.runInteraction(self._rowLoader, tableName, parentRow,
-                                   data, whereClause, forceChildren)
+        return self.dbpool.runInteraction(self._rowLoader, tableName,
+                                          parentRow, data, whereClause,
+                                          forceChildren)
 
     def _rowLoader(self, transaction, tableName, parentRow, data,
                    whereClause, forceChildren):
@@ -291,7 +292,7 @@
         """
         sql = self.updateRowSQL(rowObject)
         rowObject.setDirty(0)
-        return self.runOperation(sql)
+        return self.dbpool.runOperation(sql)
 
     def insertRowSQL(self, rowObject):
         """Build SQL to insert the contents of rowObject.
@@ -308,7 +309,7 @@
         """
         rowObject.setDirty(0)
         sql = self.insertRowSQL(rowObject)
-        return self.runOperation(sql)
+        return self.dbpool.runOperation(sql)
 
     def deleteRowSQL(self, rowObject):
         """Build SQL to delete rowObject from the database.
@@ -327,4 +328,4 @@
         """
         sql = self.deleteRowSQL(rowObject)
         self.removeFromCache(rowObject)
-        return self.runOperation(sql)
+        return self.dbpool.runOperation(sql)
