Index: adbapi.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/adbapi.py,v
retrieving revision 1.53
diff -u -r1.53 adbapi.py
--- adbapi.py	27 Jul 2003 21:28:32 -0000	1.53
+++ adbapi.py	8 Aug 2003 08:33:27 -0000
@@ -17,6 +17,8 @@
 An asynchronous mapping to U{DB-API 2.0<http://www.python.org/topics/database/DatabaseAPI-2.0.html>}.
 """
 
+import warnings
+
 from twisted.spread import pb
 from twisted.internet import defer
 from twisted.internet import threads
@@ -133,9 +135,8 @@
         'interaction(Transaction(...))', or a Failure.
         """
 
-        d = defer.Deferred()
-        apply(self.interaction, (interaction,d.callback,d.errback,)+args, kw)
-        return d
+        return self._deferToThread(self._runInteraction,
+                                   interaction, *args, **kw)
 
     def runQuery(self, *args, **kw):
         """Execute an SQL query and return the result.
@@ -155,9 +156,7 @@
         cursor's 'fetchall' method, or a Failure.
         """
 
-        d = defer.Deferred()
-        apply(self.query, (d.callback, d.errback)+args, kw)
-        return d
+        return self._deferToThread(self._runQuery, *args, **kw)
 
     def runOperation(self, *args, **kw):
         """Execute an SQL query and return None.
@@ -176,9 +175,7 @@
         @return: a Deferred which will fire None or a Failure.
         """
 
-        d = defer.Deferred()
-        apply(self.operation, (d.callback, d.errback)+args, kw)
-        return d
+        return self._deferToThread(self._runOperation, *args, **kw)
 
     def close(self):
         """Close all pool connections and shutdown the pool."""
@@ -237,7 +234,7 @@
             trans._connection.rollback()
             raise
 
-    def _runQuery(self, args, kw):
+    def _runQuery(self, *args, **kw):
         conn = self.connect()
         curs = conn.cursor()
         try:
@@ -252,7 +249,7 @@
             conn.rollback()
             raise
 
-    def _runOperation(self, args, kw):
+    def _runOperation(self, *args, **kw):
         conn = self.connect()
         curs = conn.cursor()
         try:
@@ -289,20 +286,21 @@
         return d
 
     def query(self, callback, errback, *args, **kw):
-        # this will be deprecated ASAP
-        self._deferToThread(self._runQuery, args, kw).addCallbacks(
+        warnings.warn("This is deprecated.", DeprecationWarning)
+        self._deferToThread(self._runQuery, *args, **kw).addCallbacks(
             callback, errback)
 
     def operation(self, callback, errback, *args, **kw):
-        # this will be deprecated ASAP
-        self._deferToThread(self._runOperation, args, kw).addCallbacks(
+        warnings.warn("This is deprecated.", DeprecationWarning)
+        self._deferToThread(self._runOperation, *args, **kw).addCallbacks(
             callback, errback)
 
     def synchronousOperation(self, *args, **kw):
-        self._runOperation(args, kw)
+        warnings.warn("This is deprecated.", DeprecationWarning)
+        self._runOperation(*args, **kw)
 
     def interaction(self, interaction, callback, errback, *args, **kw):
-        # this will be deprecated ASAP
+        warnings.warn("This is deprecated.", DeprecationWarning)
         apply(self._deferToThread,
               (self._runInteraction, interaction) + args, kw).addCallbacks(
             callback, errback)
@@ -311,6 +309,8 @@
 class Augmentation:
     '''A class which augments a database connector with some functionality.
 
+    This class is now deprecated. Just use the ConnectionPool directly.
+
     Conventional usage of me is to write methods that look like
 
       >>>  def getSomeData(self, critereon):
@@ -319,6 +319,7 @@
     '''
 
     def __init__(self, dbpool):
+        warnings.warn("This is deprecated.", DeprecationWarning)
         self.dbpool = dbpool
 
     def __setstate__(self, state):
@@ -329,6 +330,7 @@
 
         Override this, and/or define your own callbacks.
         """
+        warnings.warn("This is deprecated.", DeprecationWarning)
         log.msg("%s Operation Done: %s" % (reflect.qual(self.__class__), done))
 
     def operationError(self, error):
@@ -336,31 +338,41 @@
 
         Override this, and/or define your own callbacks.
         """
+        warnings.warn("This is deprecated.", DeprecationWarning)
         log.msg("%s Operation Failed: %s" % (reflect.qual(self.__class__), error))
         log.err(error)
 
     schema = ''' Insert your SQL database schema here. '''
 
     def createSchema(self):
+        warnings.warn("This is deprecated.", DeprecationWarning)
         return self.runOperation(self.schema).addCallbacks(self.schemaCreated, self.schemaNotCreated)
 
     def schemaCreated(self, result):
+        warnings.warn("This is deprecated.", DeprecationWarning)
         log.msg("Successfully created schema for %s." % reflect.qual(self.__class__))
 
     def schemaNotCreated(self, error):
+        warnings.warn("This is deprecated.", DeprecationWarning)
         log.msg("Schema already exists for %s." % reflect.qual(self.__class__))
 
     def runQuery(self, *args, **kw):
+        warnings.warn("This is deprecated. Use the ConnectionPool.",
+                      DeprecationWarning)
         d = defer.Deferred()
         apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
         return d
 
     def runOperation(self, *args, **kw):
+        warnings.warn("This is deprecated. Use the ConnectionPool.",
+                      DeprecationWarning)
         d = defer.Deferred()
         apply(self.dbpool.operation, (d.callback,d.errback)+args, kw)
         return d
 
     def runInteraction(self, interaction, *args, **kw):
+        warnings.warn("This is deprecated. Use the ConnectionPool.",
+                      DeprecationWarning)
         d = defer.Deferred()
         apply(self.dbpool.interaction, (interaction,d.callback,d.errback,)+args, kw)
         return d
Index: row.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/row.py,v
retrieving revision 1.20
diff -u -r1.20 row.py
--- row.py	4 Jul 2003 21:50:17 -0000	1.20
+++ row.py	8 Aug 2003 08:33:28 -0000
@@ -21,6 +21,7 @@
 """
 
 import string
+import warnings
 
 from twisted.enterprise.util import DBError, NOQUOTE, getKeyColumn, dbTypeMap
 
@@ -129,6 +130,7 @@
     (NOTE: not thread safe....)
     """
     def __init__(self, minimum, pool):
+        warnings.warn("This is deprecated.", DeprecationWarning)
         self.min = minimum
         self.pool = minimum + pool
         self.current = self.min
@@ -145,6 +147,7 @@
     """A keep a set of SQL statements to be executed in a single batch.
     """
     def __init__(self):
+        warnings.warn("This is deprecated.", DeprecationWarning)
         self.statements = []
 
     def addStatement(self, statement):
@@ -157,5 +160,3 @@
 
     def getSize(self):
         return len(self.statements)
-
-
Index: sqlreflector.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/sqlreflector.py,v
retrieving revision 1.16
diff -u -r1.16 sqlreflector.py
--- sqlreflector.py	4 Jul 2003 21:50:17 -0000	1.16
+++ sqlreflector.py	8 Aug 2003 08:33:28 -0000
@@ -36,11 +36,10 @@
         }
 
     def __init__(self, dbpool, rowClasses):
+        """Initialize me against a database.
         """
-        Initialize me against a database.
-        """
-        adbapi.Augmentation.__init__(self, dbpool)
         reflector.Reflector.__init__(self, rowClasses)        
+        self.dbpool = dbpool
 
     def _populate(self):
         self._transPopulateSchema()
@@ -56,8 +55,8 @@
         self.populated = 1
 
     def _populateSchemaFor(self, rc):
-        """construct all the SQL for database operations on <tableName> and
-        populate the class <rowClass> with that info.
+        """Construct all the SQL templates for database operations on
+        <tableName> and populate the class <rowClass> with that info.
         """
         attributes = ("rowColumns", "rowKeyColumns", "rowTableName" )
         for att in attributes:
@@ -121,8 +120,9 @@
             pass
         else:
             whereClause = []
-        return self.runInteraction(self._rowLoader, tableName, parentRow,
-                                   data, whereClause, forceChildren)
+        return self.dbpool.runInteraction(self._rowLoader, tableName,
+                                          parentRow, data, whereClause,
+                                          forceChildren)
 
     def _rowLoader(self, transaction, tableName, parentRow, data,
                    whereClause, forceChildren):
@@ -203,7 +203,7 @@
                 return type
 
     def buildUpdateSQL(self, tableInfo):
-        """(Internal) Build SQL to update a RowObject.
+        """(Internal) Build SQL template to update a RowObject.
 
         Returns: SQL that is used to contruct a rowObject class.
         """
@@ -229,7 +229,7 @@
         return sql
 
     def buildInsertSQL(self, tableInfo):
-        """(Internal) Build SQL to insert a new row.
+        """(Internal) Build SQL template to insert a new row.
 
         Returns: SQL that is used to insert a new row for a rowObject
         instance not created from the database.
@@ -257,7 +257,7 @@
         return sql
 
     def buildDeleteSQL(self, tableInfo):
-        """Build the SQL to delete a row from the table.
+        """Build the SQL template to delete a row from the table.
         """
         sql = "DELETE FROM %s " % tableInfo.rowTableName
         # build where clause
@@ -271,7 +271,7 @@
         return sql
 
     def updateRowSQL(self, rowObject):
-        """build SQL to update my current state.
+        """Build SQL to update the contents of rowObject.
         """
         args = []
         tableInfo = self.schema[rowObject.rowTableName]
@@ -288,31 +288,31 @@
         return self.getTableInfo(rowObject).updateSQL % tuple(args)
 
     def updateRow(self, rowObject):
-        """update my contents to the database.
+        """Update the contents of rowObject to the database.
         """
         sql = self.updateRowSQL(rowObject)
         rowObject.setDirty(0)
-        return self.runOperation(sql)
+        return self.dbpool.runOperation(sql)
 
     def insertRowSQL(self, rowObject):
-        """build SQL to insert my current state.
+        """Build SQL to insert the content of rowObject.
         """
         args = []
         tableInfo = self.schema[rowObject.rowTableName]        
         # build values
         for column, type in tableInfo.rowColumns:
-            args.append(self.quote_value(rowObject.findAttribute(column), type))
+            args.append(self.quote_value(rowObject.findAttribute(column),type))
         return self.getTableInfo(rowObject).insertSQL % tuple(args)
 
     def insertRow(self, rowObject):
-        """insert a new row for this object instance.
+        """Insert a new row for rowObject.
         """
         rowObject.setDirty(0)
         sql = self.insertRowSQL(rowObject)
-        return self.runOperation(sql)
+        return self.dbpool.runOperation(sql)
 
     def deleteRowSQL(self, rowObject):
-        """build SQL to delete me from the db.
+        """Build SQL to delete rowObject from the db.
         """
         args = []
         tableInfo = self.schema[rowObject.rowTableName]        
@@ -324,8 +324,8 @@
         return self.getTableInfo(rowObject).deleteSQL % tuple(args)
 
     def deleteRow(self, rowObject):
-        """delete the row for this object from the database.
+        """Delete the row for rowObject from the database.
         """
         sql = self.deleteRowSQL(rowObject)
         self.removeFromCache(rowObject)
-        return self.runOperation(sql)
+        return self.dbpool.runOperation(sql)
