diff --git a/src/twisted/internet/interfaces.py b/src/twisted/internet/interfaces.py
index f6fa958..1427251 100644
--- a/src/twisted/internet/interfaces.py
+++ b/src/twisted/internet/interfaces.py
@@ -1911,6 +1911,13 @@ class IProcessProtocol(Interface):
             L{twisted.internet.error.ProcessTerminated}.
         """
 
+class ILoggingProcessProtocol(IProcessProtocol):
+    """
+    Interface for process-related logging handlers.
+    """
+    service = Attribute("blah")
+    name = Attribute("blah")
+
 
 
 class IHalfCloseableProtocol(Interface):
diff --git a/src/twisted/runner/procmon.py b/src/twisted/runner/procmon.py
index c003913..6a05a90 100644
--- a/src/twisted/runner/procmon.py
+++ b/src/twisted/runner/procmon.py
@@ -5,10 +5,13 @@
 """
 Support for starting, monitoring, and restarting child process.
 """
+from zope.interface import implementer
+
 from twisted.python import log
 from twisted.internet import error, protocol, reactor as _reactor
 from twisted.application import service
 from twisted.protocols import basic
+from twisted.internet import interfaces
 
 class DummyTransport:
 
@@ -25,6 +28,7 @@ class LineLogger(basic.LineReceiver):
         log.msg('[%s] %s' % (self.tag, line))
 
 
+@implementer(interfaces.ILoggingProcessProtocol)
 class LoggingProtocol(protocol.ProcessProtocol):
 
     service = None
@@ -230,9 +234,10 @@ class ProcessMonitor(service.Service):
                                                          name)
 
 
-    def startProcess(self, name):
+    def startProcess(self, name, proto = None):
         """
         @param name: The name of the process to be started
+        @param proto: A custom L{twisted.internet.interfaces.ILoggingProcessProtocol} object
         """
         # If a protocol instance already exists, it means the process is
         # already running
@@ -241,7 +246,8 @@ class ProcessMonitor(service.Service):
 
         args, uid, gid, env = self.processes[name]
 
-        proto = LoggingProtocol()
+        if proto is None:
+            proto = LoggingProtocol()
         proto.service = self
         proto.name = name
         self.protocols[name] = proto
diff --git a/src/twisted/runner/test/test_procmon.py b/src/twisted/runner/test/test_procmon.py
index 6f4cb41..94b001e 100644
--- a/src/twisted/runner/test/test_procmon.py
+++ b/src/twisted/runner/test/test_procmon.py
@@ -5,11 +5,16 @@
 Tests for L{twisted.runner.procmon}.
 """
 
+from zope.interface.verify import verifyObject
+from zope.interface import implementer
+
 from twisted.trial import unittest
+from twisted.internet.protocol import ProcessProtocol
 from twisted.runner.procmon import LoggingProtocol, ProcessMonitor
 from twisted.internet.error import (ProcessDone, ProcessTerminated,
                                     ProcessExitedAlready)
 from twisted.internet.task import Clock
+from twisted.internet import interfaces
 from twisted.python.failure import Failure
 from twisted.test.proto_helpers import MemoryReactor
 
@@ -207,6 +212,9 @@ class ProcmonTests(unittest.TestCase):
         self.assertRaises(KeyError, self.pm.removeProcess, "foo")
 
 
+    def test_interface_LoggingProtocol(self):
+        self.assertTrue(verifyObject(interfaces.ILoggingProcessProtocol, LoggingProtocol()))
+
     def test_startProcess(self):
         """
         When a process has been started, an instance of L{LoggingProtocol} will
@@ -219,6 +227,19 @@ class ProcmonTests(unittest.TestCase):
         self.assertIsInstance(self.pm.protocols["foo"], LoggingProtocol)
         self.assertIn("foo", self.pm.timeStarted.keys())
 
+    def test_startProcessAlternateLoggingProtocol(self):
+        """
+        Allow starting a process with a custom
+        L{twisted.internet.interfaces.ILoggingProcessProtocol}.
+        """
+        @implementer(interfaces.ILoggingProcessProtocol)
+        class DummyProtocol(ProcessProtocol): pass
+
+        self.pm.addProcess("foo", ["foo"])
+        self.pm.startProcess("foo", DummyProtocol())
+        self.assertIsInstance(self.pm.protocols["foo"], DummyProtocol)
+        self.assertIn("foo", self.pm.timeStarted.keys())
+
 
     def test_startProcessAlreadyStarted(self):
         """
