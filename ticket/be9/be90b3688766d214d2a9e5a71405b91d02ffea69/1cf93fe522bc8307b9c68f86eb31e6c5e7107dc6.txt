Index: twisted/python/_reflectpy3.py
===================================================================
--- twisted/python/_reflectpy3.py	(revision 35819)
+++ twisted/python/_reflectpy3.py	(working copy)
@@ -16,7 +16,8 @@
 
 def prefixedMethods(obj, prefix=''):
     """
-    A list of methods with a given prefix on a given instance.
+    Given an object 'obj', returns a list of object methods that match the 
+    string in 'prefix'.
     """
     dct = {}
     accumulateMethods(obj, dct, prefix)
@@ -25,10 +26,10 @@
 
 def accumulateMethods(obj, dict, prefix='', curClass=None):
     """
-    accumulateMethods(instance, dict, prefix)
-    I recurse through the bases of instance.__class__, and add methods
-    beginning with 'prefix' to 'dict', in the form of
-    {'methodname':*instance*method_object}.
+    Recurses through the bases of obj.__class__ and adds any class methods 
+    prefixed with the string 'prefix'. Adds key/value pairs to dictionary 
+    'dict' in the form {'unprefixed_method_name': *instance*method_object}. 
+    curClass should be treated as a private argument 
     """
     if not curClass:
         curClass = obj.__class__
