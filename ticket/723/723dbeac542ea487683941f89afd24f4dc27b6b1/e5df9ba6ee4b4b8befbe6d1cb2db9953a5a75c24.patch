Index: doc/mail/tutorial/smtpclient/smtpclient-11.tac
===================================================================
--- doc/mail/tutorial/smtpclient/smtpclient-11.tac	(revision 39006)
+++ doc/mail/tutorial/smtpclient/smtpclient-11.tac	(working copy)
@@ -6,7 +6,6 @@
 
 from twisted.application import internet
 from twisted.internet import protocol
-from twisted.internet import defer
 from twisted.mail import smtp, relaymanager
 from twisted.names.client import createResolver
 
Index: doc/mail/tutorial/smtpclient/smtpclient-11a.tac
===================================================================
--- doc/mail/tutorial/smtpclient/smtpclient-11a.tac	(revision 39006)
+++ doc/mail/tutorial/smtpclient/smtpclient-11a.tac	(working copy)
@@ -6,10 +6,13 @@
 
 from twisted.application import internet
 from twisted.internet import protocol
-from twisted.internet import defer
 from twisted.mail import smtp, relaymanager
-from twisted.names.client import createResolver
 
+# Two changes are needed for this program to successfully send mail to 
+# an external server.  Change the mailTo attribute of SMTPTutorialClient 
+# to an actual email address and change the parameter to getMailExchange 
+# to the domain of that email address 
+
 class SMTPTutorialClient(smtp.ESMTPClient):
     mailFrom = "tutorial_sender@example.com"
     mailTo = "tutorial_recipient@example.net"
@@ -56,4 +59,5 @@
     smtpClientService = internet.TCPClient(exchange, 25, smtpClientFactory)
     smtpClientService.setServiceParent(application)
 
+# Replace 'example.net' with the domain of the address you are sending mail to
 getMailExchange('example.net').addCallback(cbMailExchange)
Index: doc/mail/tutorial/smtpclient/smtpclient.xhtml
===================================================================
--- doc/mail/tutorial/smtpclient/smtpclient.xhtml	(revision 39006)
+++ doc/mail/tutorial/smtpclient/smtpclient.xhtml	(working copy)
@@ -11,19 +11,17 @@
 
 <h1>Twisted Mail Tutorial: Building an SMTP Client from Scratch</h1>
 
-<h2>Introduction</h2>
-
 <p>This tutorial will walk you through the creation of an extremely
 simple SMTP client application.  By the time the tutorial is complete,
 you will understand how to create and start a TCP client speaking the
 SMTP protocol, have it connect to an appropriate mail exchange server,
 and transmit a message for delivery.</p>
 
-<p>This tutorial uses <code>twistd</code>
-to launch the client and server applications.  Make
-sure that you have <code>twistd</code> installed and conveniently
-accessible for use in running each of the example <code>.tac</code>
-files.</p>
+<p>
+This tutorial uses <code>twistd</code> to launch the client and server applications.  
+Make sure that you have <code>twistd</code> installed and conveniently accessible for use in running each of the example <code>.tac</code> files.
+If you have checked out the Twisted code, you can find <code>twistd</code> in the <code>bin</code> directory.
+</p>
 
 <h2>SMTP Client 1</h2>
 
@@ -47,19 +45,21 @@
 application = service.Application("SMTP Client Tutorial")
 </pre>
 
-<p>The second line of the <code>.tac</code> file creates a
-new <em>application service</em> and binds it to the local
-name <code>application</code>.  <code>twistd</code> requires this
-local name in each <code>.tac</code> file it runs.  It uses various
-pieces of configuration on the object to determine its behavior.  For
-example, <code>"SMTP Client Tutorial"</code> will be used as the name
+<p>
+The second line of the <code>.tac</code> file creates a new <em>application service</em> and binds it to the local name <code>application</code>.  
+This local name is required by <code>twistd</code> in each <code>.tac</code> file it runs.  
+It uses various pieces of configuration on the object to determine its behavior.
+For example, <code>"SMTP Client Tutorial"</code> will be used as the name
 of the <code>.tap</code> file into which to serialize application
-state, should it be necessary to do so.</p>
+state, should it be necessary to do so.
+</p>
 
-<p>That does it for the first example.  We now have enough of
-a <code>.tac</code> file to pass to <code>twistd</code>.  If we
-run <a href="smtpclient-1.tac">smtpclient-1.tac</a> using
-the <code>twistd</code> command line:</p>
+<p>
+That does it for the first example.  
+We now have enough of a <code>.tac</code> file to pass to <code>twistd</code>.  
+If we run <a href="smtpclient-1.tac"><code>smtpclient-1.tac</code></a> using
+the <code>twistd</code> command line:
+</p>
 
 <pre class="shell">
 twistd -ny smtpclient-1.tac
@@ -69,7 +69,6 @@
 release and platform):</p>
 
 <pre class="shell">
-exarkun@boson:~/mail/tutorial/smtpclient$ twistd -ny smtpclient-1.tac
 18:31 EST [-] Log opened.
 18:31 EST [-] twistd 2.0.0 (/usr/bin/python2.4 2.4.1) starting up
 18:31 EST [-] reactor class: twisted.internet.selectreactor.SelectReactor
@@ -84,7 +83,6 @@
 18:34 EST [-] Received SIGINT, shutting down.
 18:34 EST [-] Main loop terminated.
 18:34 EST [-] Server Shut Down.
-exarkun@boson:~/mail/tutorial/smtpclient$
 </pre>
 
 <h2>SMTP Client 2</h2>
@@ -108,8 +106,9 @@
 implementations of many of the core Twisted concepts, such
 as <em>factories</em> and <em>protocols</em>.</p>
 
-<p>The next line of <a href="smtpclient-2.tac">smtpclient-2.tac</a>
-instantiates a new <em>client factory</em>.</p>
+<p>
+The next line of <a href="smtpclient-2.tac"><code>smtpclient-2.tac</code></a> instantiates a new <em>client factory</em>, <code class="API">twisted.internet.protocol.ClientFactory</code>:
+</p>
 
 <pre class="python">
 smtpClientFactory = protocol.ClientFactory()
@@ -122,28 +121,27 @@
 may never be required to create one at all, if no connection ever
 manages to be established.</p>
 
-<p>Now that we have a client factory, we'll need to hook it up to the
-network somehow.  The next line of <code>smtpclient-2.tac</code> does
-just that:</p>
+<p>
+Now that we have a <em>client factory</em>, we'll need to hook it up to the network somehow.  
+The next line of <code>smtpclient-2.tac</code> does just that:
+</p>
 
 <pre class="python">
 smtpClientService = internet.TCPClient(None, None, smtpClientFactory)
 </pre>
 
-<p>We'll ignore the first two arguments
-to <code>internet.TCPClient</code> for the moment and instead focus on
-the third.  <code>TCPClient</code> is one of those <em>application
-service</em> classes.  It creates TCP connections to a specified
-address and then uses its third argument, a <em>client factory</em>,
-to get a <em>protocol instance</em>.  It then associates the TCP
-connection with the protocol instance and gets out of the way.</p>
+<p>
+We'll ignore the first two arguments to <code>TCPClient</code> for the moment and instead focus on the third.  
+<code>TCPClient</code> is another of those <em>application service</em> classes.  
+It creates TCP connections to a specified address and then uses its third argument, a <em>client factory</em>, to get a <em>protocol instance</em>.  
+It then associates the TCP connection with the protocol instance and gets out of the way.
+</p>
 
 <p>We can try to run <code>smtpclient-2.tac</code> the same way we
 ran <code>smtpclient-1.tac</code>, but the results might be a little
 disappointing:</p>
 
 <pre class="shell">
-exarkun@boson:~/mail/tutorial/smtpclient$ twistd -ny smtpclient-2.tac
 18:55 EST [-] Log opened.
 18:55 EST [-] twistd SVN-Trunk (/usr/bin/python2.4 2.4.1) starting up
 18:55 EST [-] reactor class: twisted.internet.selectreactor.SelectReactor
@@ -170,11 +168,6 @@
           File "/usr/lib/python2.4/string.py", line 292, in split
             return s.split(sep, maxsplit)
         exceptions.AttributeError: 'NoneType' object has no attribute 'split'
-
-18:55 EST [-] Received SIGINT, shutting down.
-18:55 EST [-] Main loop terminated.
-18:55 EST [-] Server Shut Down.
-exarkun@boson:~/mail/tutorial/smtpclient$
 </pre>
 
 <p>What happened?  Those first two arguments to <code>TCPClient</code>
@@ -207,16 +200,16 @@
 <code>tutorial_recipient@localhost</code>, stores the
 email in <code>/tmp/emails</code>, and stores the process id in the
 <code>server.pid</code> file:
+</p>
 <pre class="shell">
 twistd --pidfile=server.pid mail -H localhost -s 8025 \
        -d localhost=/tmp/emails -u tutorial_recipient=pwd
 </pre>
-Now, we can
-run <a href="smtpclient-3.tac">smtpclient-3.tac</a> and see what this
-change gets us:</p>
+<p>
+Now, we can run <a href="smtpclient-3.tac"><code>smtpclient-3.tac</code></a> and see what this change gets us:
+</p>
 
 <pre class="shell">
-exarkun@boson:~/mail/tutorial/smtpclient$ twistd -ny smtpclient-3.tac
 19:10 EST [-] Log opened.
 19:10 EST [-] twistd SVN-Trunk (/usr/bin/python2.4 2.4.1) starting up
 19:10 EST [-] reactor class: twisted.internet.selectreactor.SelectReactor
@@ -250,28 +243,22 @@
 19:10 EST [Uninitialized] Stopping factory
           &lt;twisted.internet.protocol.ClientFactory instance at
           0xb791e48c&gt;
-19:10 EST [-] Received SIGINT, shutting down.
-19:10 EST [-] Main loop terminated.
-19:10 EST [-] Server Shut Down.
-exarkun@boson:~/mail/tutorial/smtpclient$
 </pre>
 
-<p>A meagre amount of progress, but the service still raises an
-exception.  This time, it's because we haven't specified
-a <em>protocol class</em> for the factory to use.  We'll do that in
-the next example.</p>
+<p>
+A meager amount of progress, but the service still raises an exception.  
+This time, it's because we haven't specified a <em>protocol class</em> for the factory to use.  
+We'll do that in the next example.
+</p>
 
 <h2>SMTP Client 4</h2>
 
-<p>In the previous example, we ran into a problem because we hadn't
-set up our <em>client factory's</em> <em>protocol</em> attribute
-correctly (or at all).  <code>ClientFactory.buildProtocol</code> is
-the method responsible for creating a <em>protocol instance</em>.  The
-default implementation calls the factory's <code>protocol</code> attribute,
-adds itself as an attribute named <code>factory</code> to the
-resulting instance, and returns it.  In <a
-href="smtpclient-4.tac">smtpclient-4.tac</a>, we'll correct the
-oversight that caused the traceback in smtpclient-3.tac:</p>
+<p>
+In the previous example, we ran into a problem because we hadn't set up our <em>client factory's</em> <em>protocol</em> attribute correctly (or at all).  
+<code class="API">twisted.internet.protocol.ClientFactory</code>'s <code>buildProtocol</code> method is responsible for creating a <em>protocol instance</em>.
+The default implementation calls the factory's <code>protocol</code> attribute, adds itself as an attribute named <code>factory</code> to the resulting instance, and returns it.  
+In <a href="smtpclient-4.tac"><code>smtpclient-4.tac</code></a>, we'll correct the oversight that caused the traceback in <code>smtpclient-3.tac</code>:
+</p>
 
 <pre class="python">
 smtpClientFactory.protocol = protocol.Protocol
@@ -281,7 +268,6 @@
 again traceback-free:</p>
 
 <pre class="shell">
-exarkun@boson:~/doc/mail/tutorial/smtpclient$ twistd -ny smtpclient-4.tac
 19:29 EST [-] Log opened.
 19:29 EST [-] twistd SVN-Trunk (/usr/bin/python2.4 2.4.1) starting up
 19:29 EST [-] reactor class: twisted.internet.selectreactor.SelectReactor
@@ -290,13 +276,6 @@
 19:29 EST [-] Starting factory &lt;twisted.internet.protocol.ClientFactory
               instance at 0xb791e4ac&gt;
 19:29 EST [-] Enabling Multithreading.
-19:29 EST [-] Received SIGINT, shutting down.
-19:29 EST [Protocol,client] Stopping factory
-          &lt;twisted.internet.protocol.ClientFactory instance at
-          0xb791e4ac&gt;
-19:29 EST [-] Main loop terminated.
-19:29 EST [-] Server Shut Down.
-exarkun@boson:~/doc/mail/tutorial/smtpclient$
 </pre>
 
 <p>But what does this
@@ -310,28 +289,30 @@
 
 <h2>SMTP Client 5</h2>
 
-<p>In <a href="smtpclient-5.tac">smtpclient-5.tac</a>, we will
-use Twisted's SMTP protocol implementation for the first time.
-We'll make the obvious change, simply swapping
-out <code>twisted.internet.protocol.Protocol</code> in favor
-of <code class="API">twisted.mail.smtp.ESMTPClient</code>.  Don't worry about
-the <em>E</em> in <em>ESMTP</em>.  It indicates we're actually using a
-newer version of the SMTP protocol.  There is
-an <code>SMTPClient</code> in Twisted, but there's essentially no
+<p>
+In <a href="smtpclient-5.tac"><code>smtpclient-5.tac</code></a>, we will use Twisted's SMTP protocol implementation for the first time.
+We'll make the obvious change, simply swapping out <code>twisted.internet.protocol.Protocol</code> in favor of <code class="API">twisted.mail.smtp.ESMTPClient</code>.  
+Don't worry about the <em>E</em> in <em>ESMTP</em>.  
+It indicates we're actually using a newer version of the SMTP protocol.  
+There is an <code>SMTPClient</code> in Twisted, but there's essentially no
 reason to ever use it.</p>
 
-<p>smtpclient-5.tac adds a new import:</p>
+<p>
+<code>smtpclient-5.tac</code> adds a new import:
+</p>
 
 <pre class="python">
 from twisted.mail import smtp
 </pre>
 
-<p>All of the mail related code in Twisted exists beneath the
-<code class="API">twisted.mail</code> package.  More specifically, everything
-having to do with the SMTP protocol implementation is defined in
-the <code class="API">twisted.mail.smtp</code> module.</p>
+<p>
+All of the mail-related code in Twisted exists beneath the <code class="API">twisted.mail</code> package.  
+More specifically, everything having to do with the SMTP protocol implementation is defined in the <code class="API">twisted.mail.smtp</code> module.
+</p>
 
-<p>Next we remove a line we added in smtpclient-4.tac:</p>
+<p>
+Next we remove a line we added in <code>smtpclient-4.tac</code>:
+</p>
 
 <pre class="python">
 smtpClientFactory.protocol = protocol.Protocol
@@ -348,7 +329,6 @@
 version?</p>
 
 <pre class="shell">
-exarkun@boson:~/doc/mail/tutorial/smtpclient$ twistd -ny smtpclient-5.tac
 19:42 EST [-] Log opened.
 19:42 EST [-] twistd SVN-Trunk (/usr/bin/python2.4 2.4.1) starting up
 19:42 EST [-] reactor class: twisted.internet.selectreactor.SelectReactor
@@ -382,10 +362,6 @@
 19:42 EST [Uninitialized] Stopping factory
           &lt;twisted.internet.protocol.ClientFactory instance at
           0xb791e54c&gt;
-19:43 EST [-] Received SIGINT, shutting down.
-19:43 EST [-] Main loop terminated.
-19:43 EST [-] Server Shut Down.
-exarkun@boson:~/doc/mail/tutorial/smtpclient$
 </pre>
 
 
@@ -398,10 +374,9 @@
 
 <h2>SMTP Client 6</h2>
 
-<p><a href="smtpclient-6.tac">smtpclient-6.tac</a> introduces
-a <code class="API">twisted.internet.protocol.ClientFactory</code> subclass with
-an overridden <code>buildProtocol</code> method to overcome the
-problem encountered in the previous example.</p>
+<p>
+<a href="smtpclient-6.tac"><code>smtpclient-6.tac</code></a> introduces a <code>ClientFactory</code> subclass with an overridden <code>buildProtocol</code> method to overcome the problem encountered in the previous example.
+</p>
 
 <pre class="python">
 class SMTPClientFactory(protocol.ClientFactory):
@@ -411,23 +386,19 @@
         return self.protocol(secret=None, identity='example.com')
 </pre>
 
-<p>The overridden method does almost the same thing as the base
-implementation: the only change is that it passes values for two
-arguments to <code>twisted.mail.smtp.ESMTPClient</code>'s initializer.
-The <code>secret</code> argument is used for SMTP authentication
-(which we will not attempt yet).  The <code>identity</code> argument
-is used to identify ourselves. Another minor change to note is
-that the <code>protocol</code> attribute is now defined in the class
-definition, rather than tacked onto an instance after one is created.
-This means it is a class attribute, rather than an instance attribute,
-now, which makes no difference as far as this example is concerned.
-There are circumstances in which the difference is important: be sure
-you understand the implications of each approach when creating your
-own factories.</p>
+<p>
+The overridden method does almost the same thing as the base implementation: the only change is that it passes values for two arguments to <code class="API">twisted.mail.smtp.ESMTPClient</code>'s initializer.
+The <code>secret</code> argument is used for SMTP authentication (which we will not attempt here).  
+The <code>identity</code> argument is used to identify ourselves. 
+Another minor change to note is that the <code>protocol</code> attribute is now defined in the class definition, rather than tacked onto an instance after one is created.
+This means it is a class attribute, rather than an instance attribute, now, which makes no difference as far as this example is concerned.
+There are circumstances in which the difference is important: be sure you understand the implications of each approach when creating your own factories.
+</p>
 
-<p>One other change is required.  Instead of
-instantiating <code>twisted.internet.protocol.ClientFactory</code>, we
-will now instantiate <code>SMTPClientFactory</code>:</p>
+<p>
+One other change is required.  
+Instead of instantiating <code>ClientFactory</code>, we will now instantiate <code>SMTPClientFactory</code>:
+</p>
 
 <pre class="python">
 smtpClientFactory = SMTPClientFactory()
@@ -437,7 +408,6 @@
 code <strong>still</strong> isn't quite traceback-free.</p>
 
 <pre class="shell">
-exarkun@boson:~/doc/mail/tutorial/smtpclient$ twistd -ny smtpclient-6.tac
 21:17 EST [-] Log opened.
 21:17 EST [-] twistd SVN-Trunk (/usr/bin/python2.4 2.4.1) starting up
 21:17 EST [-] reactor class: twisted.internet.selectreactor.SelectReactor
@@ -478,10 +448,6 @@
 
 21:17 EST [ESMTPClient,client] Stopping factory
           &lt;__builtin__.SMTPClientFactory instance at 0xb77fd68c&gt;
-21:17 EST [-] Received SIGINT, shutting down.
-21:17 EST [-] Main loop terminated.
-21:17 EST [-] Server Shut Down.
-exarkun@boson:~/doc/mail/tutorial/smtpclient$
 </pre>
 
 <p>What we have accomplished with this iteration of the example is to
@@ -492,15 +458,12 @@
 
 <h2>SMTP Client 7</h2>
 
-<p>SMTP Client 7 is the first version of our SMTP client which
-actually includes message data to transmit.  For simplicity's sake,
-the message is defined as part of a new class.  In a useful program
-which sent email, message data might be pulled in from the filesystem,
-a database, or be generated based on
-user-input.  <a href="smtpclient-7.tac">smtpclient-7.tac</a>, however,
-defines a new class, <code>SMTPTutorialClient</code>, with three class
-attributes (<code>mailFrom</code>, <code>mailTo</code>,
-and <code>mailData</code>):</p>
+<p>
+SMTP Client 7 is the first version of our SMTP client which actually includes message data to transmit.  
+For simplicity's sake, the message is defined as part of a new class.  
+In a useful program which sent email, message data might be pulled in from the filesystem, a database, or be generated based on user input.  
+<a href="smtpclient-7.tac"><code>smtpclient-7.tac</code></a>, however, defines a new class, <code>SMTPTutorialClient</code>, with three class attributes (<code>mailFrom</code>, <code>mailTo</code>, and <code>mailData</code>):
+</p>
 
 <pre class="python">
 class SMTPTutorialClient(smtp.ESMTPClient):
@@ -516,11 +479,10 @@
 '''
 </pre>
 
-<p>This statically defined data is accessed later in the class
-definition by three of the methods which are part of the
- <em>SMTPClient callback API</em>.  Twisted expects each of the three
-methods below to be defined and to return an object with a particular
-meaning.  First, <code>getMailFrom</code>:</p>
+<p>
+This statically defined data is accessed later in the class definition by three methods which are defined by the base class <code class="API">twisted.mail.smtp.SMTP</code> and are expected to be overridden in subclasses. 
+The first method is <code>getMailFrom</code>:
+ </p>
 
 <pre class="python">
     def getMailFrom(self):
@@ -529,17 +491,15 @@
         return result
 </pre>
 
-<p>This method is called to determine the <em>reverse-path</em>,
-otherwise known as the <em>envelope from</em>, of the message.  This
-value will be used when sending the <code>MAIL FROM</code> SMTP
-command.  The method must return a string which conforms to the <a
+<p>
+This method is called to determine the <em>reverse-path</em>, otherwise known as the <em>envelope from</em>, of the message.  
+This value will be used when sending the <code>MAIL FROM</code> SMTP
+command.  
+The method must return a string which conforms to the <a
 href="http://www.faqs.org/rfcs/rfc2821.html">RFC 2821</a> definition
-of a <em>reverse-path</em>.  In simpler terms, it should be a string
-like <code>"alice@example.com"</code>.  Only one <em>envelope
-from</em> is allowed by the SMTP protocol, so it cannot be a list of
-strings or a comma separated list of addresses.  Our implementation
-of <code>getMailFrom</code> does a little bit more than just return a
-string; we'll get back to this in a little bit.</p>
+of a <em>reverse-path</em>.  
+In simpler terms, it should be a string like <code>"alice@example.com"</code>.  Only one <em>envelope from</em> is allowed by the SMTP protocol, so it cannot be a list of strings or a comma separated list of addresses.  
+</p>
 
 <p>The next method is <code>getMailTo</code>:</p>
 
@@ -563,17 +523,15 @@
         return StringIO.StringIO(self.mailData)
 </pre>
 
-<p>This one is quite simple as well: it returns a file or a file-like
-object which contains the message contents.  In our case, we return
-a <code>StringIO</code> since we already have a string containing our
-message.  If the contents of the file returned
-by <code>getMailData</code> span multiple lines (as email messages
-often do), the lines should be <code>\n</code> delimited (as they
-would be when opening a text file in the <code>"rt"</code> mode).
-Necessary newline translation will be performed
-by <code>SMTPClient</code> automatically.</p>
+<p>
+This one is quite simple as well: it returns a file or a file-like object which contains the message contents.  
+In our case, we return a <code>StringIO</code> object since we already have a string containing our message.  
+If the contents of the file returned by <code>getMailData</code> span multiple lines (as email messages often do), the lines should be <code>\n</code> delimited (as they would be when opening a text file in the <code>"rt"</code> mode).
+Necessary newline translation will be performed by <code>SMTPClient</code> automatically.
+</p>
 
-<p>There is one more new callback method defined in smtpclient-7.tac.
+<p>
+There is one more new callback method defined in <code>smtpclient-7.tac</code>.
 This one isn't for providing information about the messages to
 Twisted, but for Twisted to provide information about the success or
 failure of the message transmission to the application:</p>
@@ -599,27 +557,26 @@
 
 <h2>SMTP Client 8</h2>
 
-<p>Thus far we have succeeded in creating a Twisted client application
-which starts up, connects to a (possibly) remote host, transmits some
-data, and disconnects.  Notably missing, however, is application
-shutdown.  Hitting <code>^C</code> is fine during development,
-but it's not exactly
-a long-term solution.  Fortunately, programmatic shutdown is extremely
-simple.  <a href="smtpclient-8.tac">smtpclient-8.tac</a>
-extends <code>sentMail</code> with these two lines:</p>
+<p>
+Thus far we have succeeded in creating a Twisted client application which starts up, connects to a server, transmits some data, and disconnects.  
+Notably missing, however, is application shutdown.  
+Hitting <code>^C</code> is fine during development, but it's not exactly a long-term solution.  
+Fortunately, programmatic shutdown is extremely simple.  
+<a href="smtpclient-8.tac"><code>smtpclient-8.tac</code></a> extends <code>sentMail</code> with these two lines:
+</p>
 
 <pre class="python">
         from twisted.internet import reactor
         reactor.stop()
 </pre>
 
-<p>The <code>stop</code> method of the reactor causes the main event
-loop to exit, allowing a Twisted server to shut down.  With this
-version of the example, we see that the program actually terminates
-after sending the message, without user-intervention:</p>
+<p>
+The <code>stop</code> method of the <code>reactor</code> causes the main event loop to exit, allowing a Twisted server to shut down.
+With this version of the example, we see that the program actually terminates
+after sending the message, without user intervention:
+</p>
 
 <pre class="shell">
-exarkun@boson:~/doc/mail/tutorial/smtpclient$ twistd -ny smtpclient-8.tac
 19:52 EST [-] Log opened.
 19:52 EST [-] twistd SVN-Trunk (/usr/bin/python2.4 2.4.1) starting up
 19:52 EST [-] reactor class: twisted.internet.selectreactor.SelectReactor
@@ -633,7 +590,6 @@
           &lt;__builtin__.SMTPClientFactory instance at 0xb791beec&gt;
 19:52 EST [-] Main loop terminated.
 19:52 EST [-] Server Shut Down.
-exarkun@boson:~/doc/mail/tutorial/smtpclient$
 </pre>
 
 <h2>SMTP Client 9</h2>
@@ -660,9 +616,9 @@
 twistd --pidfile=server.pid mail -H example.net -s 8025 \
        -d example.net=/tmp/emails -u tutorial_recipient=pwd
 </pre>
-<p>In <a href="smtpclient-9.tac">smtpclient-9.tac</a>, we'll take the
-first step towards this feature by defining a function which returns
-the mail exchange host for a particular domain:</p>
+<p>
+In <a href="smtpclient-9.tac"><code>smtpclient-9.tac</code></a>, we'll take the first step towards this feature by defining a function which returns the mail exchange host for a particular domain:
+</p>
 
 <pre class="python">
 def getMailExchange(host):
@@ -686,27 +642,30 @@
 
 <h2>SMTP Client 10</h2>
 
-<p>In the previous example we defined <code>getMailExchange</code> to
-return a string representing the mail exchange host for a particular
-domain.  While this was a step in the right direction, it turns out
-not to be a very big one.  Determining the mail exchange host for a
-particular domain is going to involve network traffic (specifically,
-some DNS requests).  These might take an arbitrarily large amount of
-time, so we need to introduce a <code>Deferred</code> to represent the
-result of <code>getMailExchange</code>.  <a
-href="smtpclient-10.tac">smtpclient-10.tac</a> redefines it
-thusly:</p>
+<p>
+In the previous example we defined <code>getMailExchange</code> to return a string representing the mail exchange host for a particular domain.  
+While this was a step in the right direction, it turns out not to be a very big one.  
+Determining the mail exchange host for a particular domain is going to involve network traffic (specifically, some DNS requests).  
+This might take an arbitrarily large amount of time. 
+To address this issue, Twisted provides <code>Deferred</code>s, a mechanism for delaying action until an asynchronous request is complete.  
+An in-depth exploration of <code>Deferred</code>s is beyond the scope of this document.  
+For more information, see the <a href="../../../core/howto/defer.html">Deferred Reference</a>.
+</p>
 
+<p>
+We can use a <code class="API">twisted.internet.defer.Deferred</code> to represent the result of <code>getMailExchange</code>.  
+<a href="smtpclient-10.tac"><code>smtpclient-10.tac</code></a> redefines it thusly:
+</p>
+
 <pre class="python">
 def getMailExchange(host):
     return defer.succeed('localhost')
 </pre>
 
-<p><code>defer.succeed</code> is a function which creates a
-new <code>Deferred</code> which already has a result, in this
-case <code>'localhost'</code>.  Now we need to adjust
-our <code>TCPClient</code>-constructing code to expect and properly
-handle this <code>Deferred</code>:</p>
+<p>
+Since we're not using DNS to get the mail exchange, we use <code>defer.succeed</code> to return a <code>Deferred</code> which already has a result, in this case <code>'localhost'</code>.  
+Now we need to adjust our <code>TCPClient</code>-constructing code to expect and properly handle this <code>Deferred</code>:
+</p>
 
 <pre class="python">
 def cbMailExchange(exchange):
@@ -718,16 +677,12 @@
 getMailExchange('example.net').addCallback(cbMailExchange)
 </pre>
 
-<p>An in-depth exploration of <code>Deferred</code>s is beyond the
-scope of this document.  For such a look, see
-the <a href="../../../core/howto/defer.html">Deferred Reference</a>.
-However, in brief, what this version of the code does is to delay the
-creation of the <code>TCPClient</code> until the <code>Deferred</code>
-returned by <code>getMailExchange</code> fires.  Once it does, we
-proceed normally through the creation of
-our <code>SMTPClientFactory</code> and <code>TCPClient</code>, as well
-as set the <code>TCPClient</code>'s service parent, just as we did in
-the previous examples.</p>
+<p>
+The new function, <code>cbMailExchange</code>, is set as a callback on the 
+<code>Deferred</code> returned by <code>getMailExchange</code>.  
+When the asynchronous request initiated by <code>getMailExchange</code> is successfully completed, <code>cbMailExchange</code> will be called.  
+Then, we proceed normally through the creation of our <code>SMTPClientFactory</code> and <code>TCPClient</code>, as well as set the <code>TCPClient</code>'s service parent, just as we did in the previous examples.
+</p>
 
 <h2>SMTP Client 11</h2>
 
@@ -746,8 +701,7 @@
 </p>
 
 <p>
-The following modification in <a href="smtpclient-11.tac">smtpclient-11.tac</a>
-creates such an <code>MXCalculator</code>:
+The following modification in <a href="smtpclient-11.tac"><code>smtpclient-11.tac</code></a> creates such an <code>MXCalculator</code>:
 </p>
 <pre class="python">
 def getMailExchange(host):
@@ -765,15 +719,12 @@
 required.  </p>
 
 <p>
-In case your ISP does not block port 25 and you'd like to try sending mail
-to port 25 on <code>example.net</code>, try running
-<a href="smtpclient-11a.tac">smtpclient-11a.tac</a>.  It configures the
-<code>MXCalculator</code> to contact a DNS server to get the address of
-<code>example.net</code> and sends the message to its port 25.
+In case your ISP does not block port 25 and you'd like to try to send mail to an external server, <a href="smtpclient-11a.tac"><code>smtpclient-11a.tac</code></a> configures the <code>MXCalculator</code> to contact a DNS server to get the address of the mail server and sends the message to its port 25.
+Since <code>example.net</code> does not accept email, you'll need to make two changes to the file to supply an actual email address for the recipient and to look up the recipient's domain.
 </p>
 
 
-<h2>Summary</h2>
+<h2>Conclusion</h2>
 <p>
 This tutorial has worked its way from the skeleton of a Twisted application,
 through an SMTP client which sends a message to a recipient on an SMTP server
