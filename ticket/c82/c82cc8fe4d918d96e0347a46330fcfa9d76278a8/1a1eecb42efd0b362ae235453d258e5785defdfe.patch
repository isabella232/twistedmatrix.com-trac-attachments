Index: twisted/topfiles/5692.misc
===================================================================
Index: twisted/internet/endpoints.py
===================================================================
--- twisted/internet/endpoints.py	(revision 34463)
+++ twisted/internet/endpoints.py	(working copy)
@@ -127,7 +127,7 @@
     @ivar _onConnection: An L{Deferred} that fires when the protocol is
         connected
 
-    @ivar _connector: A L{connector <twisted.internet.interfaces.IConnector>}
+    @ivar _connector: An L{connector <twisted.internet.interfaces.IConnector>}
         that is managing the current or previous connection attempt.
     """
     protocol = _WrappingProtocol
@@ -144,7 +144,7 @@
 
     def startedConnecting(self, connector):
         """
-        A connection attempt was started.  Remember the connector which started
+        A connection attempt was started. Remember the connector which started
         said attempt, for use later.
         """
         self._connector = connector
@@ -153,7 +153,7 @@
     def _canceller(self, deferred):
         """
         The outgoing connection attempt was cancelled.  Fail that L{Deferred}
-        with a L{error.ConnectingCancelledError}.
+        with an L{error.ConnectingCancelledError}.
 
         @param deferred: The L{Deferred <defer.Deferred>} that was cancelled;
             should be the same as C{self._onConnection}.
@@ -221,22 +221,22 @@
     @ivar _reactor: An L{IReactorTCP} provider.
 
     @type _port: int
-    @ivar _port: The port number on which to listen for incoming connections.
+    @ivar _port: The port number used for listening to incoming connections
 
     @type _backlog: int
-    @ivar _backlog: size of the listen queue
+    @ivar _backlog: Size of the listen queue
 
     @type _interface: str
-    @ivar _interface: the hostname to bind to, defaults to '' (all)
+    @ivar _interface: The hostname to bind to, defaults to '' (all)
     """
     implements(interfaces.IStreamServerEndpoint)
 
     def __init__(self, reactor, port, backlog=50, interface=''):
         """
-        @param reactor: An L{IReactorTCP} provider.
-        @param port: The port number used listening
-        @param backlog: size of the listen queue
-        @param interface: the hostname to bind to, defaults to '' (all)
+        @param reactor: An L{IReactorTCP} provider
+        @param port: The port number used for listening
+        @param backlog: Size of the listen queue
+        @param interface: The hostname to bind to, defaults to '' (all)
         """
         self._reactor = reactor
         self._port = port
@@ -261,7 +261,7 @@
     """
     TCP client endpoint with an IPv4 configuration.
 
-    @ivar _reactor: An L{IReactorTCP} provider.
+    @ivar _reactor: An L{IReactorTCP} provider
 
     @type _host: str
     @ivar _host: The hostname to connect to as a C{str}
@@ -270,11 +270,11 @@
     @ivar _port: The port to connect to as C{int}
 
     @type _timeout: int
-    @ivar _timeout: number of seconds to wait before assuming the
+    @ivar _timeout: Number of seconds to wait before assuming the
         connection has failed.
 
     @type _bindAddress: tuple
-    @type _bindAddress: a (host, port) tuple of local address to bind
+    @type _bindAddress: A (host, port) tuple of local address to bind
         to, or None.
     """
     implements(interfaces.IStreamClientEndpoint)
@@ -284,9 +284,9 @@
         @param reactor: An L{IReactorTCP} provider
         @param host: A hostname, used when connecting
         @param port: The port number, used when connecting
-        @param timeout: number of seconds to wait before assuming the
+        @param timeout: Number of seconds to wait before assuming the
             connection has failed.
-        @param bindAddress: a (host, port tuple of local address to bind to,
+        @param bindAddress: A (host, port) tuple of local address to bind to,
             or None.
         """
         self._reactor = reactor
@@ -328,10 +328,10 @@
         L{OpenSSLCertificateOptions}
 
     @type _backlog: int
-    @ivar _backlog: size of the listen queue
+    @ivar _backlog: Size of the listen queue
 
     @type _interface: str
-    @ivar _interface: the hostname to bind to, defaults to '' (all)
+    @ivar _interface: The hostname to bind to, defaults to '' (all)
     """
     implements(interfaces.IStreamServerEndpoint)
 
@@ -339,12 +339,12 @@
                  backlog=50, interface=''):
         """
         @param reactor: An L{IReactorSSL} provider.
-        @param port: The port number used listening
+        @param port: The port number used for listening
         @param sslContextFactory: An instance of
             L{twisted.internet._sslverify.OpenSSLCertificateOptions}.
-        @param timeout: number of seconds to wait before assuming the
+        @param timeout: Number of seconds to wait before assuming the
             connection has failed.
-        @param bindAddress: a (host, port tuple of local address to bind to,
+        @param bindAddress: A (host, port) tuple of local address to bind to,
             or None.
         """
         self._reactor = reactor
@@ -384,11 +384,11 @@
         L{OpenSSLCertificateOptions}
 
     @type _timeout: int
-    @ivar _timeout: number of seconds to wait before assuming the
+    @ivar _timeout: Number of seconds to wait before assuming the
         connection has failed.
 
     @type _bindAddress: tuple
-    @ivar _bindAddress: a (host, port) tuple of local address to bind
+    @ivar _bindAddress: A (host, port) tuple of local address to bind
         to, or None.
     """
     implements(interfaces.IStreamClientEndpoint)
@@ -401,9 +401,9 @@
         @param port: The port number, used when connecting
         @param sslContextFactory: SSL Configuration information as An instance
             of L{OpenSSLCertificateOptions}.
-        @param timeout: number of seconds to wait before assuming the
+        @param timeout: Number of seconds to wait before assuming the
             connection has failed.
-        @param bindAddress: a (host, port tuple of local address to bind to,
+        @param bindAddress: A (host, port) tuple of local address to bind to,
             or None.
         """
         self._reactor = reactor
@@ -435,7 +435,7 @@
     UnixSocket server endpoint.
 
     @type path: str
-    @ivar path: a path to a unix socket on the filesystem.
+    @ivar path: A path to a unix socket on the filesystem.
 
     @type _listenArgs: dict
     @ivar _listenArgs: A C{dict} of keyword args that will be passed
@@ -451,11 +451,11 @@
         @param address: The path to the Unix socket file, used when listening
         @param listenArgs: An optional dict of keyword args that will be
             passed to L{IReactorUNIX.listenUNIX}
-        @param backlog: number of connections to allow in backlog.
-        @param mode: mode to set on the unix socket.  This parameter is
+        @param backlog: Number of connections to allow in backlog.
+        @param mode: Mode to set on the unix socket.  This parameter is
             deprecated.  Permissions should be set on the directory which
             contains the UNIX socket.
-        @param wantPID: if True, create a pidfile for the socket.
+        @param wantPID: If True, create a pidfile for the socket.
         """
         self._reactor = reactor
         self._address = address
@@ -481,14 +481,14 @@
     UnixSocket client endpoint.
 
     @type _path: str
-    @ivar _path: a path to a unix socket on the filesystem.
+    @ivar _path: A path to a unix socket on the filesystem.
 
     @type _timeout: int
-    @ivar _timeout: number of seconds to wait before assuming the connection
+    @ivar _timeout: Number of seconds to wait before assuming the connection
         has failed.
 
     @type _checkPID: bool
-    @ivar _checkPID: if True, check for a pid file to verify that a server
+    @ivar _checkPID: If True, check for a pid file to verify that a server
         is listening.
 
     @var _reactor: An L{IReactorUNIX} provider.
@@ -499,9 +499,9 @@
         """
         @param reactor: An L{IReactorUNIX} provider.
         @param path: The path to the Unix socket file, used when connecting
-        @param timeout: number of seconds to wait before assuming the
+        @param timeout: Number of seconds to wait before assuming the
             connection has failed.
-        @param checkPID: if True, check for a pid file to verify that a server
+        @param checkPID: If True, check for a pid file to verify that a server
             is listening.
         """
         self._reactor = reactor
@@ -579,20 +579,20 @@
     Internal parser function for L{_parseServer} to convert the string
     arguments for a TCP(IPv4) stream endpoint into the structured arguments.
 
-    @param factory: the protocol factory being parsed, or C{None}.  (This was a
+    @param factory: The protocol factory being parsed, or C{None}.  (This was a
         leftover argument from when this code was in C{strports}, and is now
         mostly None and unused.)
 
     @type factory: L{IProtocolFactory} or C{NoneType}
 
-    @param port: the integer port number to bind
+    @param port: The integer port number to bind
     @type port: C{str}
 
-    @param interface: the interface IP to listen on
-    @param backlog: the length of the listen queue
+    @param interface: The interface IP to listen on
+    @param backlog: The length of the listen queue
     @type backlog: C{str}
 
-    @return: a 2-tuple of (args, kwargs), describing  the parameters to
+    @return: A 2-tuple of (args, kwargs), describing  the parameters to
         L{IReactorTCP.listenTCP} (or, modulo argument 2, the factory, arguments
         to L{TCP4ServerEndpoint}.
     """
@@ -607,22 +607,22 @@
     arguments for a UNIX (AF_UNIX/SOCK_STREAM) stream endpoint into the
     structured arguments.
 
-    @param factory: the protocol factory being parsed, or C{None}.  (This was a
+    @param factory: The protocol factory being parsed, or C{None}.  (This was a
         leftover argument from when this code was in C{strports}, and is now
         mostly None and unused.)
 
     @type factory: L{IProtocolFactory} or C{NoneType}
 
-    @param address: the pathname of the unix socket
+    @param address: The pathname of the unix socket
     @type address: C{str}
 
-    @param backlog: the length of the listen queue
+    @param backlog: The length of the listen queue
     @type backlog: C{str}
 
     @param lockfile: A string '0' or '1', mapping to True and False
-        respectively.  See the C{wantPID} argument to C{listenUNIX}
+        respectively. See the C{wantPID} argument to C{listenUNIX}
 
-    @return: a 2-tuple of (args, kwargs), describing  the parameters to
+    @return: A 2-tuple of (args, kwargs), describing  the parameters to
         L{IReactorTCP.listenUNIX} (or, modulo argument 2, the factory,
         arguments to L{UNIXServerEndpoint}.
     """
@@ -640,17 +640,17 @@
     arguments for an SSL (over TCP/IPv4) stream endpoint into the structured
     arguments.
 
-    @param factory: the protocol factory being parsed, or C{None}.  (This was a
+    @param factory: The protocol factory being parsed, or C{None}.  (This was a
         leftover argument from when this code was in C{strports}, and is now
         mostly None and unused.)
 
     @type factory: L{IProtocolFactory} or C{NoneType}
 
-    @param port: the integer port number to bind
+    @param port: The integer port number to bind
     @type port: C{str}
 
-    @param interface: the interface IP to listen on
-    @param backlog: the length of the listen queue
+    @param interface: The interface IP to listen on
+    @param backlog: The length of the listen queue
     @type backlog: C{str}
 
     @param privateKey: The file name of a PEM format private key file.
@@ -660,11 +660,11 @@
     @type certKey: C{str}
 
     @param sslmethod: The string name of an SSL method, based on the name of a
-        constant in C{OpenSSL.SSL}.  Must be one of: "SSLv23_METHOD",
+        constant in C{OpenSSL.SSL}. Must be one of: "SSLv23_METHOD",
         "SSLv2_METHOD", "SSLv3_METHOD", "TLSv1_METHOD".
     @type sslmethod: C{str}
 
-    @return: a 2-tuple of (args, kwargs), describing  the parameters to
+    @return: A 2-tuple of (args, kwargs), describing  the parameters to
         L{IReactorSSL.listenSSL} (or, modulo argument 2, the factory, arguments
         to L{SSL4ServerEndpoint}.
     """
@@ -703,7 +703,7 @@
         @param reactor: An L{IReactorSocket} provider.
 
         @param domain: The domain (or address family) of the socket inherited
-            from systemd.  This is a string like C{"INET"} or C{"UNIX"}, ie the
+            from systemd. This is a string like C{"INET"} or C{"UNIX"}, ie the
             name of an address family from the L{socket} module, without the
             C{"AF_"} prefix.
         @type domain: C{str}
@@ -713,8 +713,8 @@
         @type index: C{str}
 
         @return: A two-tuple of parsed positional arguments and parsed keyword
-            arguments (a tuple and a dictionary).  These can be used to
-            construct a L{AdoptedStreamServerEndpoint}.
+            arguments (a tuple and a dictionary). These can be used to
+            construct an L{AdoptedStreamServerEndpoint}.
         """
         index = int(index)
         fileno = self._sddaemon.inheritedDescriptors()[index]
@@ -723,7 +723,7 @@
 
 
     def parseStreamServer(self, reactor, *args, **kwargs):
-        # Delegate to another function with a sane signature.  This function has
+        # Delegate to another function with a sane signature. This function has
         # an insane signature to trick zope.interface into believing the
         # interface is correctly implemented.
         return self._parseServer(reactor, *args, **kwargs)
@@ -741,10 +741,10 @@
     """
     Tokenize a strports string and yield each token.
 
-    @param description: a string as described by L{serverFromString} or
+    @param description: A string as described by L{serverFromString} or
         L{clientFromString}.
 
-    @return: an iterable of 2-tuples of (L{_OP} or L{_STRING}, string).  Tuples
+    @return: An iterable of 2-tuples of (L{_OP} or L{_STRING}, string).  Tuples
         starting with L{_OP} will contain a second element of either ':' (i.e.
         'next parameter') or '=' (i.e. 'assign parameter value').  For example,
         the string 'hello:greet\=ing=world' would result in a generator
@@ -779,10 +779,10 @@
     Convert a description string into a list of positional and keyword
     parameters, using logic vaguely like what Python does.
 
-    @param description: a string as described by L{serverFromString} or
+    @param description: A string as described by L{serverFromString} or
         L{clientFromString}.
 
-    @return: a 2-tuple of C{(args, kwargs)}, where 'args' is a list of all
+    @return: A 2-tuple of C{(args, kwargs)}, where 'args' is a list of all
         ':'-separated C{str}s not containing an '=' and 'kwargs' is a map of
         all C{str}s which do contain an '='.  For example, the result of
         C{_parse('a:b:d=1:c')} would be C{(['a', 'b', 'c'], {'d': '1'})}.
@@ -938,7 +938,7 @@
 
     @rtype: L{IStreamServerEndpoint<twisted.internet.interfaces.IStreamServerEndpoint>}
 
-    @raise ValueError: when the 'description' string cannot be parsed.
+    @raise ValueError: When the 'description' string cannot be parsed.
 
     @since: 10.2
     """
@@ -1017,10 +1017,10 @@
     """
     Load certificate-authority certificate objects in a given directory.
 
-    @param directoryPath: a L{FilePath} pointing at a directory to load .pem
+    @param directoryPath: An L{FilePath} pointing at a directory to load .pem
         files from.
 
-    @return: a C{list} of L{OpenSSL.crypto.X509} objects.
+    @return: An C{list} of L{OpenSSL.crypto.X509} objects.
     """
     from twisted.internet import ssl
 
@@ -1186,6 +1186,7 @@
 
     @return: A new endpoint which can be used to connect with the parameters
         given by by C{description}.
+
     @rtype: L{IStreamClientEndpoint<twisted.internet.interfaces.IStreamClientEndpoint>}
 
     @since: 10.2
