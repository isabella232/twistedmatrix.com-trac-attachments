diff --git twisted/internet/_posixserialport.py twisted/internet/_posixserialport.py
index cc165a3..c4926be 100644
--- twisted/internet/_posixserialport.py
+++ twisted/internet/_posixserialport.py
@@ -6,20 +6,17 @@
 Serial Port Protocol
 """
 
-# system imports
-import os, errno
-
 # dependent on pyserial ( http://pyserial.sf.net/ )
 # only tested w/ 1.18 (5 Dec 2002)
-import serial
-from serial import PARITY_NONE, PARITY_EVEN, PARITY_ODD
-from serial import STOPBITS_ONE, STOPBITS_TWO
-from serial import FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS
+from serial import PARITY_NONE
+from serial import STOPBITS_ONE
+from serial import EIGHTBITS
 
 from serialport import BaseSerialPort
 
-# twisted imports
-from twisted.internet import abstract, fdesc, main
+from twisted.internet import abstract, fdesc
+
+
 
 class SerialPort(BaseSerialPort, abstract.FileDescriptor):
     """
diff --git twisted/internet/_sslverify.py twisted/internet/_sslverify.py
index cc63675..6d81b53 100644
--- twisted/internet/_sslverify.py
+++ twisted/internet/_sslverify.py
@@ -191,7 +191,7 @@ class DistinguishedName(dict):
     bytes. For example::
 
         >>> dn = DistinguishedName(commonName=b'www.example.com',
-                                   C='US')
+        ...                        C='US')
         >>> dn.C
         b'US'
         >>> dn.countryName
diff --git twisted/internet/_threadedselect.py twisted/internet/_threadedselect.py
index 8a1b722..b88a569 100644
--- twisted/internet/_threadedselect.py
+++ twisted/internet/_threadedselect.py
@@ -52,18 +52,14 @@ with wxPython, or the PyObjCTools.AppHelper.stopEventLoop function.
 
 from threading import Thread
 from Queue import Queue, Empty
-from time import sleep
 import sys
 
 from zope.interface import implements
 
 from twisted.internet.interfaces import IReactorFDSet
-from twisted.internet import error
 from twisted.internet import posixbase
 from twisted.internet.posixbase import _NO_FILENO, _NO_FILEDESC
 from twisted.python import log, failure, threadable
-from twisted.persisted import styles
-from twisted.python.runtime import platformType
 
 import select
 from errno import EINTR, EBADF
@@ -157,11 +153,11 @@ class ThreadedSelectReactor(posixbase.PosixReactorBase):
                                         writes.keys(),
                                         [], timeout)
                 break
-            except ValueError, ve:
+            except ValueError:
                 # Possibly a file descriptor has gone negative?
                 log.err()
                 self._preenDescriptorsInThread()
-            except TypeError, te:
+            except TypeError:
                 # Something *totally* invalid (object w/o fileno, non-integral
                 # result) was passed
                 log.err()
diff --git twisted/internet/_win32serialport.py twisted/internet/_win32serialport.py
index 1a77236..6b229bd 100644
--- twisted/internet/_win32serialport.py
+++ twisted/internet/_win32serialport.py
@@ -8,10 +8,9 @@ Requires PySerial and pywin32.
 """
 
 # system imports
-import serial
-from serial import PARITY_NONE, PARITY_EVEN, PARITY_ODD
-from serial import STOPBITS_ONE, STOPBITS_TWO
-from serial import FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS
+from serial import PARITY_NONE
+from serial import STOPBITS_ONE
+from serial import EIGHTBITS
 import win32file, win32event
 
 # twisted imports
diff --git twisted/internet/gtk2reactor.py twisted/internet/gtk2reactor.py
index 2509b6d..4f34d38 100644
--- twisted/internet/gtk2reactor.py
+++ twisted/internet/gtk2reactor.py
@@ -89,7 +89,7 @@ class PortableGtkReactor(_glibbase.PortableGlibReactorBase):
                                                    useGtk=useGtk)
 
 
-def install(useGtk=True):
+def posixInstall(useGtk=True):
     """
     Configure the twisted mainloop to be run inside the gtk mainloop.
 
@@ -112,7 +112,9 @@ def portableInstall(useGtk=True):
     return reactor
 
 
-if runtime.platform.getType() != 'posix':
+if runtime.platform.getType() == 'posix':
+    install = posixInstall
+else:
     install = portableInstall
 
 
diff --git twisted/internet/gtkreactor.py twisted/internet/gtkreactor.py
index 6b1855e..6346beb 100644
--- twisted/internet/gtkreactor.py
+++ twisted/internet/gtkreactor.py
@@ -220,7 +220,7 @@ class PortableGtkReactor(selectreactor.SelectReactor):
 
 
 
-def install():
+def posixInstall():
     """Configure the twisted mainloop to be run inside the gtk mainloop.
     """
     reactor = GtkReactor()
@@ -244,7 +244,9 @@ deprecate.deprecatedModuleAttribute(deprecatedSince, deprecationMessage,
                                     __name__, "portableInstall")
 
 
-if runtime.platform.getType() != 'posix':
+if runtime.platform.getType() == 'posix':
+    install = posixInstall
+else:
     install = portableInstall
 
 __all__ = ['install']
diff --git twisted/internet/iocpreactor/tcp.py twisted/internet/iocpreactor/tcp.py
index 5363a52..e0038fc 100644
--- twisted/internet/iocpreactor/tcp.py
+++ twisted/internet/iocpreactor/tcp.py
@@ -10,10 +10,10 @@ import socket, operator, errno, struct
 from zope.interface import implements, classImplements
 
 from twisted.internet import interfaces, error, address, main, defer
-from twisted.internet.abstract import _LogOwner, isIPAddress, isIPv6Address
+from twisted.internet.abstract import _LogOwner, isIPv6Address
 from twisted.internet.tcp import _SocketCloser, Connector as TCPConnector
 from twisted.internet.tcp import _AbortingMixin, _BaseBaseClient, _BaseTCPClient
-from twisted.python import log, failure, reflect, util
+from twisted.python import log, failure, reflect
 
 from twisted.internet.iocpreactor import iocpsupport as _iocp, abstract
 from twisted.internet.iocpreactor.interfaces import IReadWriteHandle
diff --git twisted/internet/process.py twisted/internet/process.py
index 7509b98..e933024 100644
--- twisted/internet/process.py
+++ twisted/internet/process.py
@@ -87,20 +87,22 @@ def detectLinuxBrokenPipeBehavior():
 
     See L{ProcessWriter.doRead} for a more detailed explanation.
     """
-    global brokenLinuxPipeBehavior
     r, w = os.pipe()
     os.write(w, 'a')
     reads, writes, exes = select.select([w], [], [], 0)
     if reads:
         # Linux < 2.6.11 says a write-only pipe is readable.
-        brokenLinuxPipeBehavior = True
+        brokenPipeBehavior = True
     else:
-        brokenLinuxPipeBehavior = False
+        brokenPipeBehavior = False
     os.close(r)
     os.close(w)
+    return brokenPipeBehavior
+
+
+
+brokenLinuxPipeBehavior = detectLinuxBrokenPipeBehavior()
 
-# Call at import time
-detectLinuxBrokenPipeBehavior()
 
 
 class ProcessWriter(abstract.FileDescriptor):
@@ -944,10 +946,9 @@ class PTYProcess(abstract.FileDescriptor, _BaseProcess):
         _BaseProcess.__init__(self, proto)
 
         if isinstance(usePTY, (tuple, list)):
-            masterfd, slavefd, ttyname = usePTY
+            masterfd, slavefd, ignore = usePTY
         else:
             masterfd, slavefd = pty.openpty()
-            ttyname = os.ttyname(slavefd)
 
         try:
             self._fork(path, uid, gid, executable, args, environment,
diff --git twisted/internet/serialport.py twisted/internet/serialport.py
index 500d8ba..2b3fb25 100644
--- twisted/internet/serialport.py
+++ twisted/internet/serialport.py
@@ -77,11 +77,11 @@ class BaseSerialPort:
     def setRTS(self, on = 1):
         self._serial.setRTS(on)
 
-class SerialPort(BaseSerialPort):
-    pass
 
-# replace SerialPort with appropriate serial port
+
 if os.name == 'posix':
     from twisted.internet._posixserialport import SerialPort
 elif sys.platform == 'win32':
     from twisted.internet._win32serialport import SerialPort
+else:
+    raise NotImplementedError('OS not supported.')
diff --git twisted/internet/tcp.py twisted/internet/tcp.py
index 508fcb0..2009ffd 100644
--- twisted/internet/tcp.py
+++ twisted/internet/tcp.py
@@ -51,10 +51,7 @@ if platformType == 'win32':
     from errno import WSAEWOULDBLOCK as EWOULDBLOCK
     from errno import WSAEINPROGRESS as EINPROGRESS
     from errno import WSAEALREADY as EALREADY
-    from errno import WSAECONNRESET as ECONNRESET
     from errno import WSAEISCONN as EISCONN
-    from errno import WSAENOTCONN as ENOTCONN
-    from errno import WSAEINTR as EINTR
     from errno import WSAENOBUFS as ENOBUFS
     from errno import WSAEMFILE as EMFILE
     # No such thing as WSAENFILE, either.
@@ -71,10 +68,7 @@ else:
     from errno import EWOULDBLOCK
     from errno import EINPROGRESS
     from errno import EALREADY
-    from errno import ECONNRESET
     from errno import EISCONN
-    from errno import ENOTCONN
-    from errno import EINTR
     from errno import ENOBUFS
     from errno import EMFILE
     from errno import ENFILE
diff --git twisted/internet/test/_win32ifaces.py twisted/internet/test/_win32ifaces.py
index 4a1e82b..5055e01 100644
--- twisted/internet/test/_win32ifaces.py
+++ twisted/internet/test/_win32ifaces.py
@@ -109,9 +109,9 @@ def win32GetLinkLocalIPv6Addresses():
     retList = []
     for i in range(addrList[0].iAddressCount):
         retBytes.value = addressStringBufLength
-        addr = addrList[0].Address[i]
+        address = addrList[0].Address[i]
         ret = WSAAddressToString(
-            addr.lpSockaddr, addr.iSockaddrLength, 0, addressStringBuf,
+            address.lpSockaddr, address.iSockaddrLength, 0, addressStringBuf,
             byref(retBytes))
         if ret:
             raise RuntimeError("WSAAddressToString failure")
diff --git twisted/internet/test/test_default.py twisted/internet/test/test_default.py
index fdf2a6a..29d0121 100644
--- twisted/internet/test/test_default.py
+++ twisted/internet/test/test_default.py
@@ -10,6 +10,7 @@ from __future__ import division, absolute_import
 import select, sys
 from twisted.trial.unittest import SynchronousTestCase
 from twisted.python.runtime import Platform
+from twisted.python.reflect import requireModule
 from twisted.internet import default
 from twisted.internet.default import _getInstallFunction, install
 from twisted.internet.test.test_main import NoReactor
@@ -55,9 +56,7 @@ class PollReactorTests(SynchronousTestCase):
         epoll is unavailable.
         """
         install = _getInstallFunction(linux)
-        try:
-            from twisted.internet import epollreactor
-        except ImportError:
+        if requireModule('twisted.internet.epollreactor') is None:
             self.assertIsPoll(install)
         else:
             self.assertEqual(
diff --git twisted/internet/test/test_endpoints.py twisted/internet/test/test_endpoints.py
index 0b2ef41..c7b7128 100644
--- twisted/internet/test/test_endpoints.py
+++ twisted/internet/test/test_endpoints.py
@@ -653,7 +653,6 @@ class StandardIOEndpointsTestCase(unittest.TestCase):
         d = self.ep.listen(StdioFactory())
 
         def checkProtocol(stdioOb):
-            from twisted.python.runtime import platform
             if platform.isWindows():
                 self.assertIsInstance(stdioOb.proto, basic.LineReceiver)
             else:
@@ -2459,7 +2458,7 @@ class ServerStringTests(unittest.TestCase):
         test_ssl.skip = test_sslWithDefaults.skip = skipSSL
         test_sslChainLoads.skip = skipSSL
         test_sslChainFileMustContainCert.skip = skipSSL
-        test_sslDHparameters = skipSSL
+        test_sslDHparameters.skip = skipSSL
 
 
     def test_unix(self):
diff --git twisted/internet/test/test_inotify.py twisted/internet/test/test_inotify.py
index a003562..4b89857 100644
--- twisted/internet/test/test_inotify.py
+++ twisted/internet/test/test_inotify.py
@@ -7,14 +7,13 @@ Tests for the inotify wrapper in L{twisted.internet.inotify}.
 
 from twisted.internet import defer, reactor
 from twisted.python import filepath, runtime
+from twisted.python.reflect import requireModule
 from twisted.trial import unittest
 
-try:
-    from twisted.python import _inotify
-except ImportError:
-    inotify = None
-else:
+if requireModule('twisted.python._inotify'):
     from twisted.internet import inotify
+else:
+    inotify = None
 
 
 
diff --git twisted/internet/test/test_qtreactor.py twisted/internet/test/test_qtreactor.py
index e87b74f..7e707d6 100644
--- twisted/internet/test/test_qtreactor.py
+++ twisted/internet/test/test_qtreactor.py
@@ -4,18 +4,8 @@
 import sys
 
 from twisted.trial import unittest
-from twisted.python.runtime import platform
-from twisted.python.util import sibpath
-from twisted.internet.utils import getProcessOutputAndValue
 
 
-skipWindowsNopywin32 = None
-if platform.isWindows():
-    try:
-        import win32process
-    except ImportError:
-        skipWindowsNopywin32 = ("On windows, spawnProcess is not available "
-                                "in the absence of win32process.")
 
 class QtreactorTestCase(unittest.TestCase):
     """
@@ -30,6 +20,7 @@ class QtreactorTestCase(unittest.TestCase):
         sys.modules["qtreactor"] = None
         from twisted.plugins.twisted_qtstub import errorMessage
         try:
-            import twisted.internet.qtreactor
+            from twisted.internet import qtreactor
+            qtreactor  # It is imported only for raising the error.
         except ImportError, e:
             self.assertEqual(str(e), errorMessage)
diff --git twisted/internet/test/test_udp_internals.py twisted/internet/test/test_udp_internals.py
index 7a17a6f..6e720ec 100644
--- twisted/internet/test/test_udp_internals.py
+++ twisted/internet/test/test_udp_internals.py
@@ -16,10 +16,8 @@ from twisted.python.runtime import platformType
 
 if platformType == 'win32':
     from errno import WSAEWOULDBLOCK as EWOULDBLOCK
-    from errno import WSAECONNREFUSED as ECONNREFUSED
 else:
     from errno import EWOULDBLOCK
-    from errno import ECONNREFUSED
 
 
 
diff --git twisted/internet/test/test_unix.py twisted/internet/test/test_unix.py
index ff4dd78..2a40c71 100644
--- twisted/internet/test/test_unix.py
+++ twisted/internet/test/test_unix.py
@@ -21,6 +21,7 @@ from zope.interface import implements
 
 from twisted.python.log import addObserver, removeObserver, err
 from twisted.python.failure import Failure
+from twisted.python.reflect import requireModule
 from twisted.python.runtime import platform
 from twisted.internet.interfaces import IFileDescriptorReceiver, IReactorUNIX
 from twisted.internet.error import ConnectionClosed, FileDescriptorOverrun
@@ -38,13 +39,12 @@ from twisted.internet.test.connectionmixins import (
     ConnectionTestsMixin, StreamClientTestsMixin)
 from twisted.internet.test.reactormixins import ReactorBuilder
 
-try:
-    from twisted.python import sendmsg
-except ImportError:
+if requireModule('twisted.python.sendmsg') is None:
     sendmsgSkip = (
         "sendmsg extension unavailable, extended UNIX features disabled")
 else:
-    sendmsgSkip = None
+    sendmsgSkip = False
+
 
 
 class UNIXFamilyMixin:
@@ -302,8 +302,7 @@ class UNIXTestsBuilder(UNIXFamilyMixin, ReactorBuilder, ConnectionTestsMixin):
         d.addBoth(lambda ignored: server.transport.loseConnection())
 
         runProtocolsWithReactor(self, server, client, self.endpoints)
-    if sendmsgSkip is not None:
-        test_sendFileDescriptor.skip = sendmsgSkip
+    test_sendFileDescriptor.skip = sendmsgSkip
 
 
     def test_sendFileDescriptorTriggersPauseProducing(self):
@@ -351,8 +350,7 @@ class UNIXTestsBuilder(UNIXFamilyMixin, ReactorBuilder, ConnectionTestsMixin):
 
         self.assertTrue(
             server.paused, "sendFileDescriptor producer was not paused")
-    if sendmsgSkip is not None:
-        test_sendFileDescriptorTriggersPauseProducing.skip = sendmsgSkip
+    test_sendFileDescriptorTriggersPauseProducing.skip = sendmsgSkip
 
 
     def test_fileDescriptorOverrun(self):
@@ -377,8 +375,7 @@ class UNIXTestsBuilder(UNIXFamilyMixin, ReactorBuilder, ConnectionTestsMixin):
         self.assertIsInstance(result[0], Failure)
         result[0].trap(ConnectionClosed)
         self.assertIsInstance(server.reason.value, FileDescriptorOverrun)
-    if sendmsgSkip is not None:
-        test_fileDescriptorOverrun.skip = sendmsgSkip
+    test_fileDescriptorOverrun.skip = sendmsgSkip
 
 
     def test_avoidLeakingFileDescriptors(self):
@@ -445,8 +442,7 @@ class UNIXTestsBuilder(UNIXFamilyMixin, ReactorBuilder, ConnectionTestsMixin):
             self.fail(
                 "Expected event (%s) not found in logged events (%s)" % (
                     expectedEvent, pformat(events,)))
-    if sendmsgSkip is not None:
-        test_avoidLeakingFileDescriptors.skip = sendmsgSkip
+    test_avoidLeakingFileDescriptors.skip = sendmsgSkip
 
 
     def test_descriptorDeliveredBeforeBytes(self):
@@ -475,8 +471,7 @@ class UNIXTestsBuilder(UNIXFamilyMixin, ReactorBuilder, ConnectionTestsMixin):
         runProtocolsWithReactor(self, server, client, self.endpoints)
 
         self.assertEqual([int, "j", "u", "n", "k"], client.events)
-    if sendmsgSkip is not None:
-        test_descriptorDeliveredBeforeBytes.skip = sendmsgSkip
+    test_descriptorDeliveredBeforeBytes.skip = sendmsgSkip
 
 
 
diff --git twisted/internet/tksupport.py twisted/internet/tksupport.py
index ddec55e..fb189df 100644
--- twisted/internet/tksupport.py
+++ twisted/internet/tksupport.py
@@ -29,11 +29,8 @@ fix::
 @see: U{Tcl/TkAqua FAQ for more info<http://wiki.tcl.tk/12987>}
 """
 
-# system imports
-import Tkinter, tkSimpleDialog, tkMessageBox
+import tkSimpleDialog, tkMessageBox
 
-# twisted imports
-from twisted.python import log
 from twisted.internet import task
 
 
diff --git twisted/internet/unix.py twisted/internet/unix.py
index 77b87cd..ceaf5a0 100644
--- twisted/internet/unix.py
+++ twisted/internet/unix.py
@@ -182,12 +182,19 @@ class _SendmsgMixin(object):
 
         return self._dataReceived(data)
 
-if sendmsg is None:
-    class _SendmsgMixin(object):
-        """
-        Behaviorless placeholder used when L{twisted.python.sendmsg} is not
-        available, preventing L{IUNIXTransport} from being supported.
-        """
+class _UnsuportedSendmsgMixin(object):
+    """
+    Behaviorless placeholder used when L{twisted.python.sendmsg} is not
+    available, preventing L{IUNIXTransport} from being supported.
+    """
+
+
+
+
+if sendmsg:
+    _SendmsgMixin = _SendmsgMixin
+else:
+    _SendmsgMixin = _UnsuportedSendmsgMixin
 
 
 
diff --git twisted/internet/win32eventreactor.py twisted/internet/win32eventreactor.py
index 3c0e09c..932d61a 100644
--- twisted/internet/win32eventreactor.py
+++ twisted/internet/win32eventreactor.py
@@ -66,7 +66,7 @@ except ImportError:
         return set([FD_READ])
 
 from win32event import CreateEvent, MsgWaitForMultipleObjects
-from win32event import WAIT_OBJECT_0, WAIT_TIMEOUT, QS_ALLINPUT, QS_ALLEVENTS
+from win32event import WAIT_OBJECT_0, WAIT_TIMEOUT, QS_ALLINPUT
 
 import win32gui
 
diff --git twisted/internet/wxsupport.py twisted/internet/wxsupport.py
index d17c666..53e7835 100644
--- twisted/internet/wxsupport.py
+++ twisted/internet/wxsupport.py
@@ -24,12 +24,8 @@ Maintainer: Itamar Shtull-Trauring
 import warnings
 warnings.warn("wxsupport is not fully functional on Windows, wxreactor is better.")
 
-# wxPython imports
-from wxPython.wx import wxApp
-
-# twisted imports
 from twisted.internet import reactor
-from twisted.python.runtime import platformType
+
 
 
 class wxRunner:
