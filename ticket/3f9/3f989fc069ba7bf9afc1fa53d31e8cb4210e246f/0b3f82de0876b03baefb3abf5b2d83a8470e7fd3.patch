Index: twisted/words/test/test_jabberjid.py
===================================================================
--- twisted/words/test/test_jabberjid.py	(revision 13178)
+++ twisted/words/test/test_jabberjid.py	(working copy)
@@ -1,9 +1,7 @@
 #
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
-import sys, os
 from twisted.trial import unittest
 
 from twisted.words.protocols.jabber import jid
@@ -55,8 +53,20 @@
             assert 0
         except jid.InvalidFormat:
             assert 1
+
+    def testPrep(self):
+        # case map of user
+        self.assertEquals(jid.prep("UsEr", "host", "resource"),
+                          ("user", "host", "resource"))
             
+        # case map of host
+        self.assertEquals(jid.prep("user", "hoST", "resource"),
+                          ("user", "host", "resource"))
 
+        # no case map of resource
+        self.assertNotEquals(jid.prep("user", "host", "Resource"),
+                             ("user", "host", "resource"))
+
 class JIDClassTest(unittest.TestCase):
     def testBasic(self):
         j = jid.internJID("user@host")
Index: twisted/words/protocols/jabber/jid.py
===================================================================
--- twisted/words/protocols/jabber/jid.py	(revision 13178)
+++ twisted/words/protocols/jabber/jid.py	(working copy)
@@ -1,11 +1,11 @@
 # -*- test-case-name: twisted.words.test.test_jabberjid -*-
 #
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2005 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
 from twisted.internet import reactor, protocol, defer
 from twisted.xish import domish, utility
+from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep, resourceprep, nameprep
 import string
 
 class InvalidFormat(Exception):
@@ -27,44 +27,62 @@
         else:
             # host/resource
             server = jidstring[0:res_sep]
-            resource = jidstring[res_sep + 1:]
+            resource = jidstring[res_sep + 1:] or None
     else:
         if res_sep == -1:
             # user@host
-            user = jidstring[0:user_sep]
+            user = jidstring[0:user_sep] or None
             server = jidstring[user_sep + 1:]
         else:
             if user_sep < res_sep:
                 # user@host/resource
-                user = jidstring[0:user_sep]
+                user = jidstring[0:user_sep] or None
                 server = jidstring[user_sep + 1:user_sep + (res_sep - user_sep)]
-                resource = jidstring[res_sep + 1:]
+                resource = jidstring[res_sep + 1:] or None
             else:
                 # server/resource (with an @ in resource)
                 server = jidstring[0:res_sep]
-                resource = jidstring[res_sep + 1:]
+                resource = jidstring[res_sep + 1:] or None
 
-    # Check for misc. invalid cases
-    if user and (user.find("@") != -1 or user.find("/") != -1):
-        raise InvalidFormat, "Invalid character in username"
-    if not server or len(server) == 0:
+    return prep(user, server, resource)
+
+def prep(user, server, resource):
+    """ Perform stringprep on all JID fragments """
+
+    if user:
+        try:
+            user = nodeprep.prepare(unicode(user))
+        except UnicodeError:
+            raise InvalidFormat, "Invalid character in username"
+    else:
+        user = None
+
+    if not server:
         raise InvalidFormat, "Server address required."
-    if server and (server.find("@") != -1 or server.find("/") != -1):
-        raise InvalidFormat, "Invalid character in hostname"
+    else:
+        try:
+            server = nameprep.prepare(unicode(server))
+        except UnicodeError:
+            raise InvalidFormat, "Invalid character in hostname"
 
-    # Treat empty resource as NULL resource
-    if resource and len(resource) == 0:
+    if resource:
+        try:
+            resource = resourceprep.prepare(unicode(resource))
+        except UnicodeError:
+            raise InvalidFormat, "Invalid character in resource"
+    else:
         resource = None
 
-    # XXX: Do string prep here!
-
-    # Return the tuple
     return (user, server, resource)
 
 __internJIDs = {}
 
 def internJID(str):
-    # XXX: Ensure that stringprep'd jids map to same JID
+    """ Return interned JID.
+
+    Assumes C{str} is stringprep'd.
+    """
+
     if str in __internJIDs:
         return __internJIDs[str]
     else:
@@ -73,13 +91,19 @@
         return j
 
 class JID:
+    """ Represents a stringprep'd Jabber ID.
+
+    Note that it is assumed that the attributes C{host}, C{user} and
+    C{resource}, when set individually, have been properly stringprep'd.
+    """
+
     def __init__(self, str = None, tuple = None):
         assert (str or tuple)
         
         if str:
             user, host, res = parse(str)
         else:
-            user, host, res = tuple
+            user, host, res = prep(*tuple)
 
         self.host = host
         self.user = user
