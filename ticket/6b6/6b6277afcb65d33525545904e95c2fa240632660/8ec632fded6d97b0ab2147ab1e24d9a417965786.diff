? .DS_Store
? replaceChild.patch
? web.tap
? widgets.py.patch
? wovenSpeedup.diff
? doc/howto/.DS_Store
? doc/howto/listings/PicturePile/.DS_Store
? doc/howto/listings/PicturePile/ImagePool-shutdown.tap
? sandbox/.DS_Store
? sandbox/build
? sandbox/Twisted.pbproj/Icon
? sandbox/dp/.DS_Store
? sandbox/dp/web.log
? sandbox/dp/web.tap
? sandbox/dp/webform.pyc
? sandbox/glyph/.DS_Store
? twisted/.DS_Store
? twisted/test/_trial_temp
? twisted/test/test_wovenform.py
? twisted/web/woven/.DS_Store
? twisted/web/woven/_trial_temp
? twisted/web/woven/bugfixes.patch
? twisted/web/woven/javascriptcleanup.path
Index: twisted/web/microdom.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/microdom.py,v
retrieving revision 1.98
diff -u -r1.98 microdom.py
--- twisted/web/microdom.py	5 Aug 2003 06:50:06 -0000	1.98
+++ twisted/web/microdom.py	5 Aug 2003 17:53:21 -0000
@@ -114,10 +114,10 @@
         self.parentNode = parentNode
         self.childNodes = []
 
-    def __eq__(self, n):
-        if not isinstance(n, Node):
-            return 0
-        return self.isEqualToNode(n)
+#    def __eq__(self, n):
+#        if not isinstance(n, Node):
+#            return 0
+#        return self.isEqualToNode(n)
 
     def __hash__(self):
         return id(self)
@@ -217,10 +217,10 @@
 
     doctype = None
 
-    def __eq__(self, n):
-        if not isinstance(n, Document):
-            return 0
-        return self.isEqualToDocument(n) and self.isEqualToNode(n)
+#    def __eq__(self, n):
+#        if not isinstance(n, Document):
+#            return 0
+#        return self.isEqualToDocument(n) and self.isEqualToNode(n)
 
     def isEqualToDocument(self, n):
         return (self.doctype == n.doctype)
@@ -271,8 +271,8 @@
         self.eref = eref
         self.nodeValue = self.data = "&" + eref + ";"
 
-    def __eq__(self, n):
-        return self.isEqualToEntityReference(n) and self.isEqualToNode(n)
+#    def __eq__(self, n):
+#        return self.isEqualToEntityReference(n) and self.isEqualToNode(n)
 
     def isEqualToEntityReference(self, n):
         if not isinstance(n, EntityReference):
@@ -292,10 +292,10 @@
         Node.__init__(self, parentNode)
         self.value = self.data = self.nodeValue = data
 
-    def __eq__(self, n):
-        if not isinstance(n, CharacterData):
-            return 0
-        return self.isEqualToCharacterData(n) and self.isEqualToNode(n)
+#    def __eq__(self, n):
+#        if not isinstance(n, CharacterData):
+#            return 0
+#        return self.isEqualToCharacterData(n) and self.isEqualToNode(n)
 
     def isEqualToCharacterData(self, n):
         return self.value == n.value
@@ -392,8 +392,8 @@
             for k, v in self.attributes.items():
                 self.attributes[k] = unescape(v)
 
-        self.attributes=_selectDict(self.attributes, caseInsensitive, 
-                                    preserveCase)
+        #self.attributes={}#_selectDict(self.attributes, caseInsensitive, 
+                                    #preserveCase)
 
         self.endTagName = self.nodeName = self.tagName = tagName
         self._filename = filename
@@ -406,10 +406,10 @@
         else:
             self.nsprefixes.update(kw)
 
-    def __eq__(self, n):
-        if not isinstance(n, Element):
-            return 0
-        return self.isEqualToElement(n) and self.isEqualToNode(n)
+#    def __eq__(self, n):
+#        if not isinstance(n, Element):
+#            return 0
+#        return self.isEqualToElement(n) and self.isEqualToNode(n)
 
     def endTag(self, endTagName):
         if not self.preserveCase:
Index: twisted/web/woven/view.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/view.py,v
retrieving revision 1.84
diff -u -r1.84 view.py
--- twisted/web/woven/view.py	26 Jul 2003 09:27:17 -0000	1.84
+++ twisted/web/woven/view.py	5 Aug 2003 17:53:27 -0000
@@ -254,16 +254,17 @@
                     controller, self.controllerStack = self.controllerStack
                     if controller is not None:
                         controller.exit(request)
-            if (hasattr(node, 'getAttribute') and 
-            (node.getAttribute('model') or node.getAttribute('view') or node.getAttribute('controller'))):
+            attrs = getattr(node, 'attributes', None)
+            if (attrs is not None and 
+            (attrs.get('model') or attrs.get('view') or attrs.get('controller'))):
                 self.outstandingNodes.append(1)
                 self.handleNode(request, node)
             else:
-                if hasattr(node, 'getAttribute') and (node.getAttribute('view') or node.getAttribute('controller')):
+                if attrs is not None and (attrs.get('view') or attrs.get('controller')):
                     self.outstandingNodes.append(node)
                 if hasattr(node, 'childNodes') and node.childNodes:
                     self.recurseChildren(request, node)
-        
+
     def recurseChildren(self, request, node):
         """If this node has children, handle them.
         """
@@ -360,7 +361,7 @@
         controller= attribute, first check to see if there is an IController
         adapter for our model.
         """
-        controllerName = node.getAttribute('controller')
+        controllerName = node.attributes.get('controller')
         controller = None
 
         if model is None:
@@ -386,7 +387,7 @@
                                         controllerName,
                                         filterStack(self.controllerStack)
                                         ))
-        elif node.getAttribute("model"):
+        elif node.attributes.get("model"):
             # If no "controller" attribute was specified on the node, see if
             # there is a IController adapter registerred for the model.
             controller = components.getAdapter(
@@ -433,7 +434,7 @@
 
     def getNodeView(self, request, node, submodel, model):
         view = None
-        viewName = node.getAttribute('view')
+        viewName = node.attributes.get('view')
 
         if model is None:
             model = peek(self.modelStack)
@@ -466,7 +467,7 @@
                     "found but they returned None.)" % (
                     viewName, node, viewName,
                     filterStack(self.viewStack)))
-        elif node.getAttribute("model"):
+        elif node.attributes.get("model"):
             # If no "view" attribute was specified on the node, see if there
             # is a IView adapter registerred for the model.
             # First, see if the model is Componentized.
@@ -481,7 +482,7 @@
         return view
 
     def handleNode(self, request, node):
-        submodelName = node.getAttribute('model')
+        submodelName = node.attributes.get('model')
         if submodelName is None:
             submodelName = ""
         model = self.getNodeModel(request, node, submodelName)
@@ -504,7 +505,7 @@
             if not getattr(view, 'submodel', None):
                 view.submodel = submodelName
 
-            theId = node.getAttribute("id")
+            theId = node.attributes.get("id")
             if self.livePage and not theId:
                 #curId = getattr(request, 'currentId', 0)
                 curId = id(view)
@@ -657,10 +658,10 @@
         #print "updating flash thingie"
         uid = request.getSession().uid
         n = wid.templateNode
-        if n.hasAttribute('src'):
-            n.setAttribute('src', n.getAttribute('src') + '?twisted_session=' + str(uid))
+        if n.attributes.has_key('src'):
+            n['src'] = n.attributes.get('src') + '?twisted_session=' + str(uid)
         else:
-            n.setAttribute('value', n.getAttribute('value') + '?twisted_session=' + str(uid))
+            n['value'] = n.attributes.get('value') + '?twisted_session=' + str(uid)
         #print wid.templateNode.toxml()
 
 
Index: twisted/web/woven/widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/widgets.py,v
retrieving revision 1.97
diff -u -r1.97 widgets.py
--- twisted/web/woven/widgets.py	26 Jul 2003 09:27:17 -0000	1.97
+++ twisted/web/woven/widgets.py	5 Aug 2003 17:53:34 -0000
@@ -187,12 +187,12 @@
         """
         Do your part, prevent infinite recursion!
         """
-        if node.hasAttribute('model'):
-            node.removeAttribute('model')
-        if node.hasAttribute('controller'):
-            node.removeAttribute('controller')
-        if node.hasAttribute('view'):
-            node.removeAttribute('view')
+        if node.attributes.has_key('model'):
+            del node.attributes['model']
+        if node.attributes.has_key('view'):
+            del node.attributes['view']
+        if node.attributes.has_key('controller'):
+            del node.attributes['controller']
         return node
 
     def generate(self, request, node):
@@ -231,7 +231,7 @@
         # isinstance(Element) added because I was having problems with
         # this code trying to call setAttribute on my RawTexts -radix 2003-5-28
         if hasattr(self, 'outgoingId') and isinstance(returnNode, Element):
-            returnNode.setAttribute('id', self.outgoingId)
+            returnNode.attributes['id'] = self.outgoingId
         self.handleNewNode(request, returnNode)
         self.handleOutstanding(request)
         if self.subviews:
@@ -276,7 +276,7 @@
             gen = become.generateDOM(request, node)
             if old.attributes.has_key('model'):
                 del old.attributes['model']
-            old.removeAttribute('controller')
+            del old.attributes['controller']
             gen.appendChild(old)
             self.node = gen
             return gen
@@ -299,8 +299,7 @@
             node.parentNode = parentNode
             node = self.cleanNode(new)
         #print "NICE CLEAN NODE", node.toxml(), self._children
-        for key, value in self.attributes.items():
-            node.setAttribute(key, value)
+        node.attributes.update(self.attributes)
         for item in self._children:
             if hasattr(item, 'generate'):
                 parentNode = node.parentNode
@@ -408,10 +407,10 @@
             parentNode = slot.parentNode
             slot.parentNode = None
             clone = slot.cloneNode(deep)
-            if clone.hasAttribute('pattern'):
-                clone.removeAttribute('pattern')
-            elif clone.hasAttribute(name + 'Of'):
-                clone.removeAttribute(name + 'Of')
+            if clone.attributes.has_key('pattern'):
+                del clone.attributes['pattern']
+            elif clone.attributes.has_key(name + 'Of'):
+                del clone.attributes[name + 'Of']
             slot.parentNode = parentNode
             return clone
         return slot
@@ -543,8 +542,8 @@
     tagName = 'img'
     border = '0'
     def setUp(self, request, node, data):
-        self.setAttribute('border', self.border)
-        node.setAttribute('src', data)
+        self['border'] = self.border
+        self['src'] = data
 
 
 class Error(Widget):
@@ -578,11 +577,11 @@
         self['name'] = submodel
 
     def setUp(self, request, node, data):
-        if not self.attributes.has_key('name') and not node.getAttribute('name'):
+        if not self.attributes.has_key('name') and not node.attributes.get('name'):
             if self.submodel:
                 id = self.submodel
             else:
-                id = self.attributes.get('id', node.getAttribute('id'))
+                id = self.attributes.get('id', node.attributes.get('id'))
             self['name'] = id
         if data is None:
             data = ''
@@ -705,12 +704,12 @@
 
 def appendModel(newNode, modelName):
     if newNode is None: return
-    curModel = newNode.getAttribute('model')
+    curModel = newNode.attributes.get('model')
     if curModel is None:
         newModel = str(modelName)
     else:
         newModel = str(modelName) + '/' + curModel
-    newNode.setAttribute('model', newModel)
+    newNode.attributes['model'] = newModel
 
 
 class List(Widget):
@@ -772,8 +771,8 @@
 
             newNode = self.getPattern('listItem')
             appendModel(newNode, itemNum)
-            if not newNode.getAttribute("view"):
-                newNode.setAttribute("view", self.defaultItemView)
+            if not newNode.attributes.get("view"):
+                newNode.attributes["view"] = self.defaultItemView
             retVal[itemNum] = newNode
             newNode.parentNode = parentNode
 #            parentNode.appendChild(newNode)
@@ -814,8 +813,8 @@
                                         DeprecationWarning)
 
             appendModel(newNode, key)
-            if not newNode.getAttribute("view"):
-                newNode.setAttribute("view", "DefaultWidget")
+            if not newNode.attributes.get("view"):
+                newNode.attributes["view"] = "DefaultWidget"
             parentNode.appendChild(newNode)
 
 
@@ -852,8 +851,8 @@
             newNode = self.getPattern('columnListItem')
 
             appendModel(newNode, itemNum + self.start)
-            if not newNode.getAttribute("view"):
-                newNode.setAttribute("view", "DefaultWidget")
+            if not newNode.attributes.get("view"):
+                newNode.attributes["view"] = "DefaultWidget"
             row.appendChild(newNode)
         node.removeChild(pattern)
         return node
@@ -890,7 +889,7 @@
         # TODO: we ought to support Deferreds here for both text and href!
         if isinstance(data, StringType):
             node.tagName = self.tagName
-            node.setAttribute("href", data)
+            node.attributes["href"] = data
         else:
             data = self.model
             txt = data.getSubmodel("text").getData(request)
@@ -969,19 +968,18 @@
             "one macro named %s found." % self.macroName)
 
         macro = macrolist[0]
-        macro.removeAttribute('macro')
+        del macro.attributes['macro']
         slots = domhelpers.findElementsWithAttributeShallow(macro, "slot")
         for slot in slots:
-            slotName = slot.getAttribute("slot")
+            slotName = slot.attributes.get("slot")
             fillerlist = domhelpers.locateNodes(node.childNodes, "fill-slot", slotName)
             assert len(fillerlist) <= 1, "More than one fill-slot found with name %s" % slotName
             if len(fillerlist):
                 filler = fillerlist[0]
                 filler.tagName = filler.endTagName = slot.tagName
-                filler.removeAttribute('fill-slot')
-                slot.removeAttribute('slot')
-                for k, v in slot.attributes.items():
-                    filler.setAttribute(k, v)
+                del filler.attributes['fill-slot']
+                del slot.attributes['slot']
+                filler.attributes.update(slot.attributes)
                 slot.parentNode.replaceChild(filler, slot)
 
         return macro

