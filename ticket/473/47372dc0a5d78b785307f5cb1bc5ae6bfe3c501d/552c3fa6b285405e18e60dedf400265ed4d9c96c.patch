Don't call win32 event handlers after the handle is removed from the reactor.

The added test is a bit contrieved. A more realistical scenario is:
* a manual reset event is added to the reactor
* the first time it is signaled, the handler removes it from the reactor.

Before this change, the handler could get called for the second time.

Index: twisted/internet/test/test_win32events.py
===================================================================
--- twisted/internet/test/test_win32events.py	(patch test-cleanup)
+++ twisted/internet/test/test_win32events.py	(patch add-remove-race)
@@ -5,6 +5,8 @@
 Tests for implementations of L{IReactorWin32Events}.
 """
 
+import time
+
 from thread import get_ident
 
 try:
@@ -180,4 +182,28 @@
         self.runReactor(reactor)
         self.assertIdentical(None, listener.connLostThreadID)
 
+
+    def test_addRemoveRace(self):
+        """
+        The reactor does not fire event callbacks after the event has been
+        removed by L{IReactorWin32Events.removeEvent}.
+        """
+        reactor = self.buildReactor()
+        event = win32event.CreateEvent(None, False, True, None)
+        finished = Deferred()
+        listener = Listener(finished)
+
+        def run():
+            reactor.addEvent(event, listener, 'occurred')
+            # Try to force a thread switch to simulate the race.
+            time.sleep(0.1)
+            reactor.removeEvent(event)
+            reactor.stop()
+
+        reactor.callWhenRunning(run)
+        self.runReactor(reactor)
+        self.assertFalse(listener.success, listener.success)
+
+
+
 globals().update(Win32EventsTestsBuilder.makeTestCaseClasses())
Index: twisted/internet/win32eventreactor.py
===================================================================
--- twisted/internet/win32eventreactor.py	(patch test-cleanup)
+++ twisted/internet/win32eventreactor.py	(patch add-remove-race)
@@ -255,12 +255,16 @@
 
     @ivar _logPrefix: The pre-fetched log prefix string for C{_fd}, so that
         C{_fd.logPrefix} does not need to be called in a non-main thread.
+
+    @ivar _removed: a flag indicating if the win32 event associated with this
+        wrapper has been removed from the reactor.
     """
     def __init__(self, reactor, fd, action, logPrefix):
         self._reactor = reactor
         self._fd = fd
         self._action = action
         self._logPrefix = logPrefix
+        self._removed = False
 
 
     def logPrefix(self):
@@ -278,8 +282,16 @@
         or return whatever it raises or returns to cause this event handler to
         be removed from C{self._reactor} if appropriate.
         """
-        return blockingCallFromThread(
-            self._reactor, lambda: getattr(self._fd, self._action)())
+        return blockingCallFromThread(self._reactor, self._executeAction)
+
+
+    def _executeAction(self):
+        """
+        If the win32 event is still monitored by the main reactor, run the
+        wrapped descriptor's callback named C{self._action}.
+        """
+        if not self._removed:
+            return getattr(self._fd, self._action)()
 
 
     def connectionLost(self, reason):
@@ -287,7 +299,16 @@
         Pass through to the wrapped descriptor, but in the main reactor thread
         instead of the helper C{Win32Reactor} thread.
         """
-        self._reactor.callFromThread(self._fd.connectionLost, reason)
+        self._reactor.callFromThread(self._connectionLost, reason)
+
+
+    def _connectionLost(self, reason):
+        """
+        If the win32 event is still monitored by the main reactor, run the
+        wrapped descriptor's C{connectionLost} callback.
+        """
+        if not self._removed:
+            return self._fd.connectionLost(reason)
 
 
 
@@ -301,6 +322,9 @@
 
     @ivar _reactorThread: The L{threading.Thread} which is running the
         L{Win32Reactor}.  This is C{None} until it is actually needed.
+
+    @ivar _events: A dictionary mapping win32 event handles added by
+        L{addEvent} to their L{_ThreadFDWrapper} descriptors.
     """
     implements(IReactorWin32Events)
 
@@ -325,6 +349,7 @@
         # This is a helper reactor, it is not the global reactor and its thread
         # is not "the" I/O thread.  Prevent it from registering it as such.
         self._reactor._registerAsIOThread = False
+        self._events = {}
         self._reactorThread = Thread(
             target=self._reactor.run, args=(False,))
         self.addSystemEventTrigger(
@@ -338,16 +363,19 @@
         """
         if self._reactor is None:
             self._makeHelperReactor()
+        wrapper = _ThreadFDWrapper(self, fd, action, fd.logPrefix())
+        self._events[event] = wrapper
         self._reactor.callFromThread(
-            self._reactor.addEvent,
-            event, _ThreadFDWrapper(self, fd, action, fd.logPrefix()),
-            "_execute")
+            self._reactor.addEvent, event, wrapper, "_execute")
 
 
     def removeEvent(self, event):
         """
         @see: L{IReactorWin32Events}
         """
+        wrapper = self._events.pop(event, None)
+        if wrapper is not None:
+            wrapper._removed = True
         self._reactor.callFromThread(self._reactor.removeEvent, event)
 
 
