Refactor common test code into a separate helper method.

Index: twisted/internet/test/test_win32events.py
===================================================================
--- twisted/internet/test/test_win32events.py	(revision 32184)
+++ twisted/internet/test/test_win32events.py	(patch test-cleanup)
@@ -88,20 +88,38 @@
         verifyObject(IReactorWin32Events, reactor)
 
 
+    def _runListener(self, action, finishedDeferred):
+        """
+        Create a L{Listener} and its associated win32 event, add it to a newly
+        created reactor, set the event and run the reactor until the
+        C{finishedDeferred} is fired.
+
+        @param action: The name of the C{Listener} method that should be called
+            when the win32 event is signaled.
+
+        @param finishedDeferred: The deferred which will be passed to the
+            C{Listener}'s constructor.
+
+        @return: The C{Listener} that was added to the reactor.
+        """
+        reactor = self.buildReactor()
+        event = win32event.CreateEvent(None, False, False, None)
+        listener = Listener(finishedDeferred)
+        finishedDeferred.addCallback(lambda ignored: reactor.stop())
+        reactor.addEvent(event, listener, action)
+        reactor.callWhenRunning(win32event.SetEvent, event)
+        self.runReactor(reactor)
+        return listener
+
+
     def test_addEvent(self):
         """
         When an event which has been added to the reactor is set, the action
         associated with the event is invoked in the reactor thread.
         """
         reactorThreadID = get_ident()
-        reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
         finished = Deferred()
-        finished.addCallback(lambda ignored: reactor.stop())
-        listener = Listener(finished)
-        reactor.addEvent(event, listener, 'occurred')
-        reactor.callWhenRunning(win32event.SetEvent, event)
-        self.runReactor(reactor)
+        listener = self._runListener('occurred', finished)
         self.assertTrue(listener.success)
         self.assertEqual(reactorThreadID, listener.logThreadID)
         self.assertEqual(reactorThreadID, listener.eventThreadID)
@@ -115,15 +133,9 @@
         results = []
         def check(ignored):
             results.append(isInIOThread())
-            reactor.stop()
-        reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
         finished = Deferred()
-        listener = Listener(finished)
         finished.addCallback(check)
-        reactor.addEvent(event, listener, 'occurred')
-        reactor.callWhenRunning(win32event.SetEvent, event)
-        self.runReactor(reactor)
+        listener = self._runListener('occurred', finished)
         self.assertTrue(listener.success)
         self.assertEqual([True], results)
 
@@ -135,14 +147,8 @@
         thread and the exception is logged.
         """
         reactorThreadID = get_ident()
-        reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
         finished = self.assertFailure(Deferred(), RuntimeError)
-        finished.addCallback(lambda ignored: reactor.stop())
-        listener = Listener(finished)
-        reactor.addEvent(event, listener, 'brokenOccurred')
-        reactor.callWhenRunning(win32event.SetEvent, event)
-        self.runReactor(reactor)
+        listener = self._runListener('brokenOccurred', finished)
         self.assertEqual(reactorThreadID, listener.connLostThreadID)
         self.assertEqual(1, len(self.flushLoggedErrors(RuntimeError)))
 
@@ -154,14 +160,8 @@
         thread.
         """
         reactorThreadID = get_ident()
-        reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
         finished = self.assertFailure(Deferred(), EnvironmentError)
-        finished.addCallback(lambda ignored: reactor.stop())
-        listener = Listener(finished)
-        reactor.addEvent(event, listener, 'returnValueOccurred')
-        reactor.callWhenRunning(win32event.SetEvent, event)
-        self.runReactor(reactor)
+        listener = self._runListener('returnValueOccurred', finished)
         self.assertEqual(reactorThreadID, listener.connLostThreadID)
 
 
