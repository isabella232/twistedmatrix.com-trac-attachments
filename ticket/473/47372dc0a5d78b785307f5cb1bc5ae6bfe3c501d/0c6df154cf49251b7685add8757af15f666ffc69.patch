Close the events after the test runs, now that this doesn't crash the helper.

The underlying bug is still there, but that is for a separate patch.

At the same time, introduce assert*Signaled methods and use them where
appropriate.

Index: twisted/internet/test/test_win32events.py
===================================================================
--- twisted/internet/test/test_win32events.py	(patch delay-helper-start)
+++ twisted/internet/test/test_win32events.py	(patch further-test-cleanup)
@@ -81,6 +81,39 @@
     """
     requiredInterfaces = [IReactorWin32Events]
 
+
+    def createEvent(self, manualReset, initialState):
+        """
+        Shorthand for win32event.CreateEvent, with irrelevant parameters
+        omitted and automatic closing at the end of the test run.
+        """
+        event = win32event.CreateEvent(None, manualReset, initialState, None)
+        self.addCleanup(event.close)
+        return event
+
+
+    def _assertWaitEqual(self, event, result):
+        """
+        Check that waiting for a synchronization handle for 0 seconds returns
+        the expected result.
+        """
+        self.assertEqual(win32event.WaitForSingleObject(event, 0), result)
+
+
+    def assertSignaled(self, event):
+        """
+        Check that the event handle is signaled.
+        """
+        self._assertWaitEqual(event, win32event.WAIT_OBJECT_0)
+
+
+    def assertNotSignaled(self, event):
+        """
+        Check that the event handle is not signaled.
+        """
+        self._assertWaitEqual(event, win32event.WAIT_TIMEOUT)
+
+
     def test_interface(self):
         """
         An instance of the reactor has all of the methods defined on
@@ -105,19 +138,21 @@
         @return: The C{Listener} that was added to the reactor.
         """
         reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
+        event = self.createEvent(manualReset=False, initialState=False)
         listener = Listener(finishedDeferred)
         finishedDeferred.addCallback(lambda ignored: reactor.stop())
         reactor.addEvent(event, listener, action)
         reactor.callWhenRunning(win32event.SetEvent, event)
         self.runReactor(reactor)
+        self.assertNotSignaled(event)
         return listener
 
 
     def test_addEvent(self):
         """
-        When an event which has been added to the reactor is set, the action
-        associated with the event is invoked in the reactor thread.
+        When an auto reset event which has been added to the reactor is set,
+        the action associated with the event is invoked in the reactor thread
+        and the event is reset.
         """
         reactorThreadID = get_ident()
         finished = Deferred()
@@ -174,7 +209,7 @@
         reactor shuts down.
         """
         reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
+        event = self.createEvent(manualReset=False, initialState=False)
         finished = Deferred()
         listener = Listener(finished)
         reactor.addEvent(event, listener, 'occurred')
@@ -189,7 +224,7 @@
         removed by L{IReactorWin32Events.removeEvent}.
         """
         reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, True, None)
+        event = self.createEvent(manualReset=False, initialState=True)
         finished = Deferred()
         listener = Listener(finished)
 
@@ -218,7 +253,7 @@
            waiting for the main reactor to process its thread queue.
         """
         reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
+        event = self.createEvent(manualReset=False, initialState=False)
         finished = Deferred()
         listener = Listener(finished)
 
@@ -274,7 +309,7 @@
         for signal state change until the reactor is started.
         """
         reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
+        event = self.createEvent(manualReset=False, initialState=False)
         finished = Deferred()
         listener = Listener(finished)
         win32event.SetEvent(event)
@@ -284,8 +319,7 @@
         # threads. The worst thing that can happen is the test passing instead
         # of failing.
         time.sleep(0.1)
-        waitResult = win32event.WaitForSingleObject(event, 0)
-        self.assertEqual(waitResult, win32event.WAIT_OBJECT_0)
+        self.assertSignaled(event)
 
 
 
