Index: twisted/internet/test/test_win32events.py
===================================================================
--- twisted/internet/test/test_win32events.py	(revision 32184)
+++ twisted/internet/test/test_win32events.py	(working copy)
@@ -5,6 +5,8 @@
 Tests for implementations of L{IReactorWin32Events}.
 """
 
+import time
+
 from thread import get_ident
 
 try:
@@ -79,6 +81,39 @@
     """
     requiredInterfaces = [IReactorWin32Events]
 
+
+    def createEvent(self, manualReset, initialState):
+        """
+        Shorthand for win32event.CreateEvent, with irrelevant parameters
+        omitted and automatic closing at the end of the test run.
+        """
+        event = win32event.CreateEvent(None, manualReset, initialState, None)
+        self.addCleanup(event.close)
+        return event
+
+
+    def _assertWaitEqual(self, event, result):
+        """
+        Check that waiting for a synchronization handle for 0 seconds returns
+        the expected result.
+        """
+        self.assertEqual(win32event.WaitForSingleObject(event, 0), result)
+
+
+    def assertSignaled(self, event):
+        """
+        Check that the event handle is signaled.
+        """
+        self._assertWaitEqual(event, win32event.WAIT_OBJECT_0)
+
+
+    def assertNotSignaled(self, event):
+        """
+        Check that the event handle is not signaled.
+        """
+        self._assertWaitEqual(event, win32event.WAIT_TIMEOUT)
+
+
     def test_interface(self):
         """
         An instance of the reactor has all of the methods defined on
@@ -88,20 +123,40 @@
         verifyObject(IReactorWin32Events, reactor)
 
 
+    def _runListener(self, action, finishedDeferred):
+        """
+        Create a L{Listener} and its associated win32 event, add it to a newly
+        created reactor, set the event and run the reactor until the
+        C{finishedDeferred} is fired.
+
+        @param action: The name of the C{Listener} method that should be called
+            when the win32 event is signaled.
+
+        @param finishedDeferred: The deferred which will be passed to the
+            C{Listener}'s constructor.
+
+        @return: The C{Listener} that was added to the reactor.
+        """
+        reactor = self.buildReactor()
+        event = self.createEvent(manualReset=False, initialState=False)
+        listener = Listener(finishedDeferred)
+        finishedDeferred.addCallback(lambda ignored: reactor.stop())
+        reactor.addEvent(event, listener, action)
+        reactor.callWhenRunning(win32event.SetEvent, event)
+        self.runReactor(reactor)
+        self.assertNotSignaled(event)
+        return listener
+
+
     def test_addEvent(self):
         """
-        When an event which has been added to the reactor is set, the action
-        associated with the event is invoked in the reactor thread.
+        When an auto reset event which has been added to the reactor is set,
+        the action associated with the event is invoked in the reactor thread
+        and the event is reset.
         """
         reactorThreadID = get_ident()
-        reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
         finished = Deferred()
-        finished.addCallback(lambda ignored: reactor.stop())
-        listener = Listener(finished)
-        reactor.addEvent(event, listener, 'occurred')
-        reactor.callWhenRunning(win32event.SetEvent, event)
-        self.runReactor(reactor)
+        listener = self._runListener('occurred', finished)
         self.assertTrue(listener.success)
         self.assertEqual(reactorThreadID, listener.logThreadID)
         self.assertEqual(reactorThreadID, listener.eventThreadID)
@@ -115,15 +170,9 @@
         results = []
         def check(ignored):
             results.append(isInIOThread())
-            reactor.stop()
-        reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
         finished = Deferred()
-        listener = Listener(finished)
         finished.addCallback(check)
-        reactor.addEvent(event, listener, 'occurred')
-        reactor.callWhenRunning(win32event.SetEvent, event)
-        self.runReactor(reactor)
+        listener = self._runListener('occurred', finished)
         self.assertTrue(listener.success)
         self.assertEqual([True], results)
 
@@ -135,14 +184,8 @@
         thread and the exception is logged.
         """
         reactorThreadID = get_ident()
-        reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
         finished = self.assertFailure(Deferred(), RuntimeError)
-        finished.addCallback(lambda ignored: reactor.stop())
-        listener = Listener(finished)
-        reactor.addEvent(event, listener, 'brokenOccurred')
-        reactor.callWhenRunning(win32event.SetEvent, event)
-        self.runReactor(reactor)
+        listener = self._runListener('brokenOccurred', finished)
         self.assertEqual(reactorThreadID, listener.connLostThreadID)
         self.assertEqual(1, len(self.flushLoggedErrors(RuntimeError)))
 
@@ -154,14 +197,8 @@
         thread.
         """
         reactorThreadID = get_ident()
-        reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
         finished = self.assertFailure(Deferred(), EnvironmentError)
-        finished.addCallback(lambda ignored: reactor.stop())
-        listener = Listener(finished)
-        reactor.addEvent(event, listener, 'returnValueOccurred')
-        reactor.callWhenRunning(win32event.SetEvent, event)
-        self.runReactor(reactor)
+        listener = self._runListener('returnValueOccurred', finished)
         self.assertEqual(reactorThreadID, listener.connLostThreadID)
 
 
@@ -172,7 +209,7 @@
         reactor shuts down.
         """
         reactor = self.buildReactor()
-        event = win32event.CreateEvent(None, False, False, None)
+        event = self.createEvent(manualReset=False, initialState=False)
         finished = Deferred()
         listener = Listener(finished)
         reactor.addEvent(event, listener, 'occurred')
@@ -180,4 +217,131 @@
         self.runReactor(reactor)
         self.assertIdentical(None, listener.connLostThreadID)
 
+
+    def test_addRemoveRace(self):
+        """
+        The reactor does not fire event callbacks after the event has been
+        removed by L{IReactorWin32Events.removeEvent}.
+        """
+        reactor = self.buildReactor()
+        event = self.createEvent(manualReset=False, initialState=True)
+        finished = Deferred()
+        listener = Listener(finished)
+
+        def run():
+            reactor.addEvent(event, listener, 'occurred')
+            # Try to force a thread switch to simulate the race.
+            time.sleep(0.1)
+            reactor.removeEvent(event)
+            reactor.stop()
+
+        reactor.callWhenRunning(run)
+        self.runReactor(reactor)
+        self.assertFalse(listener.success, listener.success)
+
+
+    def _testEventSignaledWhileStopping(self, stage):
+        """
+        If a win32 event added with L{IReactorWin32Events.addEvent} is signaled
+        while the reactor is stopping, no deadlocked threads are left lying
+        around.
+
+        This test was added in response to the following deadlock:
+         - win32 event gets signaled
+         - main reactor's main loop terminated during shutdown event
+         - helper reactor blocked forever in C{_ThreadFDWrapper._execute},
+           waiting for the main reactor to process its thread queue.
+        """
+        reactor = self.buildReactor()
+        event = self.createEvent(manualReset=False, initialState=False)
+        finished = Deferred()
+        listener = Listener(finished)
+
+        def setup():
+            reactor.addEvent(event, listener, 'occurred')
+            reactor.addSystemEventTrigger(
+                stage, 'shutdown', win32event.SetEvent, event)
+            reactor.stop()
+
+        reactor.callWhenRunning(setup)
+        self.runReactor(reactor)
+        helperThread = getattr(reactor, '_reactorThread', None)
+        if helperThread is not None:
+            self.assertFalse(helperThread.isAlive())
+        # TODO: decide up to which shutdown phase the event callback should
+        # still get called. I assume that events signaled during before
+        # shutdown should have their callback called, while those signaled
+        # after shutdown should not. For events signaled during shutdown, the
+        # behaviour can be left undefined.
+        # The current situation is a bit messy, Win32Reactor fires callbacks
+        # during all shutdown phases, while other reactors fire callbacks
+        # during none of the shutdown phases.
+        return listener
+
+
+    def test_eventSignaledBeforeShutdown(self):
+        """
+        A win32 event becoming signaled during "before" stage of the main
+        reactor shutdown has no ill effect on the shutdown process.
+        """
+        self._testEventSignaledWhileStopping('before')
+
+
+    def test_eventSignaledDuringShutdown(self):
+        """
+        A win32 event becoming signaled during "during" stage of the main
+        reactor shutdown has no ill effect on the shutdown process.
+        """
+        self._testEventSignaledWhileStopping('during')
+
+
+    def test_eventSignaledAfterShutdown(self):
+        """
+        A win32 event becoming signaled during "after" stage of the main
+        reactor shutdown has no ill effect on the shutdown process.
+        """
+        self._testEventSignaledWhileStopping('after')
+
+
+    def test_eventsNotMonitoredBeforeReactorRunning(self):
+        """
+        An event added with L{IReactorWin32Events.addEvent} is not monitored
+        for signal state change until the reactor is started.
+        """
+        reactor = self.buildReactor()
+        event = self.createEvent(manualReset=False, initialState=False)
+        finished = Deferred()
+        listener = Listener(finished)
+        win32event.SetEvent(event)
+        reactor.addEvent(event, listener, 'ocurred')
+        # Try to switch to the helper reactor thread, in case the helper
+        # reactor was started too early. This is not reliable, but such are
+        # threads. The worst thing that can happen is the test passing instead
+        # of failing.
+        time.sleep(0.1)
+        self.assertSignaled(event)
+
+
+    def test_addManualResetEvent(self):
+        """
+        When a manual reset event which has been added to the reactor is set,
+        the action associated with the event is invoked but its state is
+        left unchanged.
+        """
+        reactor = self.buildReactor()
+        event = self.createEvent(manualReset=True, initialState=True)
+
+        def cleanup(ignored):
+            reactor.removeEvent(event)
+            reactor.stop()
+
+        finished = Deferred().addCallback(cleanup)
+        listener = Listener(finished)
+        reactor.addEvent(event, listener, 'occurred')
+        self.runReactor(reactor)
+        self.assertTrue(listener.success)
+        self.assertSignaled(event)
+
+
+
 globals().update(Win32EventsTestsBuilder.makeTestCaseClasses())
Index: twisted/internet/win32eventreactor.py
===================================================================
--- twisted/internet/win32eventreactor.py	(revision 32184)
+++ twisted/internet/win32eventreactor.py	(working copy)
@@ -59,7 +59,7 @@
 import win32gui
 
 # Twisted imports
-from twisted.internet import posixbase
+from twisted.internet import posixbase, defer
 from twisted.python import log, threadable, failure
 from twisted.internet.interfaces import IReactorFDSet, IReactorProcess
 from twisted.internet.interfaces import IReactorWin32Events
@@ -255,12 +255,16 @@
 
     @ivar _logPrefix: The pre-fetched log prefix string for C{_fd}, so that
         C{_fd.logPrefix} does not need to be called in a non-main thread.
+
+    @ivar _removed: a flag indicating if the win32 event associated with this
+        wrapper has been removed from the reactor.
     """
     def __init__(self, reactor, fd, action, logPrefix):
         self._reactor = reactor
         self._fd = fd
         self._action = action
         self._logPrefix = logPrefix
+        self._removed = False
 
 
     def logPrefix(self):
@@ -278,8 +282,16 @@
         or return whatever it raises or returns to cause this event handler to
         be removed from C{self._reactor} if appropriate.
         """
-        return blockingCallFromThread(
-            self._reactor, lambda: getattr(self._fd, self._action)())
+        return blockingCallFromThread(self._reactor, self._executeAction)
+
+
+    def _executeAction(self):
+        """
+        If the win32 event is still monitored by the main reactor, run the
+        wrapped descriptor's callback named C{self._action}.
+        """
+        if not self._removed:
+            return getattr(self._fd, self._action)()
 
 
     def connectionLost(self, reason):
@@ -287,7 +299,16 @@
         Pass through to the wrapped descriptor, but in the main reactor thread
         instead of the helper C{Win32Reactor} thread.
         """
-        self._reactor.callFromThread(self._fd.connectionLost, reason)
+        self._reactor.callFromThread(self._connectionLost, reason)
+
+
+    def _connectionLost(self, reason):
+        """
+        If the win32 event is still monitored by the main reactor, run the
+        wrapped descriptor's C{connectionLost} callback.
+        """
+        if not self._removed:
+            return self._fd.connectionLost(reason)
 
 
 
@@ -301,6 +322,9 @@
 
     @ivar _reactorThread: The L{threading.Thread} which is running the
         L{Win32Reactor}.  This is C{None} until it is actually needed.
+
+    @ivar _events: A dictionary mapping win32 event handles added by
+        L{addEvent} to their L{_ThreadFDWrapper} descriptors.
     """
     implements(IReactorWin32Events)
 
@@ -310,25 +334,66 @@
 
     def _unmakeHelperReactor(self):
         """
-        Stop and discard the reactor started by C{_makeHelperReactor}.
+        Discard the reactor started by C{_makeHelperReactor} and wait until it
+        stops.
+
+        @return: A deferred which will fire when the helper reactor has
+            stopped.
         """
-        self._reactor.callFromThread(self._reactor.stop)
-        self._reactor = None
+        deferred = defer.Deferred()
+        reactor, self._reactor = self._reactor, None
+        reactor.callFromThread(self._stopHelperReactor, reactor, deferred)
+        return deferred.addCallback(self._helperReactorStopped)
+
+
+    def _stopHelperReactor(self, reactor, deferred):
+        """
+        Stop the helper reactor. Runs in the helper reactor's thread.
+
+        @param reactor: The reactor to stop.
+
+        @param deferred: The deferred that will be fired in the main reactor
+            thread once the helper reactor has stopped.
+        """
+        reactor.addSystemEventTrigger(
+            'after', 'shutdown', self.callFromThread, deferred.callback, None)
+        reactor.stop()
+
+
+    def _helperReactorStopped(self, ignored):
+        """
+        Called when the helper reactor has stopped.
+
+        Wait for the helper reactor's thread to terminate before allowing the
+        main reactor to move to the "during" stage of shutdown.
+        """
+        self._reactorThread.join()
 
 
     def _makeHelperReactor(self):
         """
-        Create and (in a new thread) start a L{Win32Reactor} instance to use for
+        Create and schedule the start of a L{Win32Reactor} instance to use for
         the implementation of L{IReactorWin32Events}.
         """
         self._reactor = Win32Reactor()
         # This is a helper reactor, it is not the global reactor and its thread
         # is not "the" I/O thread.  Prevent it from registering it as such.
         self._reactor._registerAsIOThread = False
+        self._events = {}
+        self.addSystemEventTrigger(
+            'before', 'shutdown', self._unmakeHelperReactor)
+        # Don't start the helper before the main reactor is running. If the
+        # main reactor doesn't get started, the helper will never be stopped
+        # otherwise.
+        self.callWhenRunning(self._startHelperReactor)
+
+
+    def _startHelperReactor(self):
+        """
+        Start the L{Win32Reactor} helper reactor in a new thread.
+        """
         self._reactorThread = Thread(
             target=self._reactor.run, args=(False,))
-        self.addSystemEventTrigger(
-            'after', 'shutdown', self._unmakeHelperReactor)
         self._reactorThread.start()
 
 
@@ -338,16 +403,19 @@
         """
         if self._reactor is None:
             self._makeHelperReactor()
+        wrapper = _ThreadFDWrapper(self, fd, action, fd.logPrefix())
+        self._events[event] = wrapper
         self._reactor.callFromThread(
-            self._reactor.addEvent,
-            event, _ThreadFDWrapper(self, fd, action, fd.logPrefix()),
-            "_execute")
+            self._reactor.addEvent, event, wrapper, "_execute")
 
 
     def removeEvent(self, event):
         """
         @see: L{IReactorWin32Events}
         """
+        wrapper = self._events.pop(event, None)
+        if wrapper is not None:
+            wrapper._removed = True
         self._reactor.callFromThread(self._reactor.removeEvent, event)
 
 
