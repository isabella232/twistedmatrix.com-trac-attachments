=== modified file 'twisted/names/dns.py'
--- twisted/names/dns.py	2011-04-24 19:34:58 +0000
+++ twisted/names/dns.py	2011-06-30 00:45:38 +0000
@@ -419,12 +419,35 @@
     def __hash__(self):
         return hash((str(self.name).lower(), self.type, self.cls))
 
-
-    def __cmp__(self, other):
-        return isinstance(other, Query) and cmp(
-            (str(self.name).lower(), self.type, self.cls),
-            (str(other.name).lower(), other.type, other.cls)
-        ) or cmp(self.__class__, other.__class__)
+    def _comparable(self):
+        """
+        Return the internals to provide comparison.
+        """
+        return str(self.name).lower(), self.type, self.cls
+
+    def __lt__(self, other):
+        if isinstance(other, Query):
+            return self._comparable() < other._comparable()
+        else:
+            return self.__class__ < other.__class__
+
+
+    def __le__(self, other):
+        if isinstance(other, Query):
+            return self._comparable() <= other._comparable()
+        else:
+            return self.__class__ < other.__class__
+
+
+    def __eq__(self, other):
+        if isinstance(other, Query):
+            return self._comparable() == other._comparable()
+        else:
+            return self.__class__ == other.__class__
+
+
+    def __ne__(self, other):
+        return not self.__eq__(other)
 
 
     def __str__(self):
@@ -1429,7 +1452,7 @@
 
     @type data: C{list} of C{str}
     @ivar data: Freeform text which makes up this record.
-    
+
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be cached.
     """
@@ -1475,10 +1498,10 @@
     """
     Structurally, freeform text. Semantically, a policy definition, formatted
     as defined in U{rfc 4408<http://www.faqs.org/rfcs/rfc4408.html>}.
-    
+
     @type data: C{list} of C{str}
     @ivar data: Freeform text which makes up this record.
-    
+
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be cached.
     """

=== modified file 'twisted/names/srvconnect.py'
--- twisted/names/srvconnect.py	2011-02-14 04:45:15 +0000
+++ twisted/names/srvconnect.py	2011-05-28 13:11:06 +0000
@@ -102,12 +102,6 @@
             self.orderedServers.append((a.payload.priority, a.payload.weight,
                                         str(a.payload.target), a.payload.port))
 
-    def _serverCmp(self, a, b):
-        if a[0]!=b[0]:
-            return cmp(a[0], b[0])
-        else:
-            return cmp(a[1], b[1])
-
     def pickServer(self):
         assert self.servers is not None
         assert self.orderedServers is not None
@@ -123,12 +117,12 @@
 
         assert self.servers
 
-        self.servers.sort(self._serverCmp)
+        self.servers.sort(key=lambda s: (s[0], s[1]))
         minPriority=self.servers[0][0]
 
         weightIndex = zip(xrange(len(self.servers)), [x[1] for x in self.servers
                                                       if x[0]==minPriority])
-        weightSum = reduce(lambda x, y: (None, x[1]+y[1]), weightIndex, (None, 0))[1]
+        weightSum = sum([x[1] for x in weightIndex])
         rand = random.randint(0, weightSum)
 
         for index, weight in weightIndex:

=== modified file 'twisted/names/test/test_dns.py'
--- twisted/names/test/test_dns.py	2011-04-24 19:34:58 +0000
+++ twisted/names/test/test_dns.py	2011-06-30 00:26:52 +0000
@@ -1326,7 +1326,7 @@
     def test_spf(self):
         """
         L{dns.Record_SPF} records are structurally similar to L{dns.Record_TXT}
-        records, so they are equal if and only if they have the same data and ttl. 
+        records, so they are equal if and only if they have the same data and ttl.
         """
         # Vary the length of the data
         self._equalityTest(
@@ -1343,3 +1343,133 @@
             dns.Record_SPF('foo', 'bar', ttl=10),
             dns.Record_SPF('foo', 'bar', ttl=10),
             dns.Record_SPF('foo', 'bar', ttl=100))
+
+
+
+class QueryTests(unittest.TestCase):
+    """
+    Tests for the Query class.
+    """
+
+    def test_compareEqualOtherClass(self):
+        """
+        Compare Query to other class.
+        """
+        q = dns.Query()
+        self.assertFalse(q == 'notaquery')
+
+
+    def test_compareLessThanOtherClass(self):
+        """
+        Compare Query to other class.
+        """
+        q = dns.Query()
+        self.assertTrue(q < 'notaquery')
+        self.assertTrue(q <= 'notaquery')
+
+
+    def test_compareGreaterThanOtherClass(self):
+        """
+        Compare Query to other class.
+        """
+        q = dns.Query()
+        self.assertFalse(q > 'notaquery')
+        self.assertFalse(q >= 'notaquery')
+
+
+    def test_compareEqual(self):
+        """
+        Compare Query to other equal Query.
+        """
+        q1 = dns.Query()
+        q2 = dns.Query()
+        self.assertTrue(q1 == q2)
+        self.assertTrue(q1 >= q2)
+        self.assertTrue(q1 <= q2)
+        self.assertFalse(q1 != q2)
+
+    def test_compareDifferentName(self):
+        """
+        Queries with different name are different.
+        """
+        q1 = dns.Query(name='a')
+        q2 = dns.Query(name='b')
+        self.assertNotEqual(q1, q2)
+
+
+    def test_compareDifferentType(self):
+        """
+        Queries with different type are different.
+        """
+        q1 = dns.Query(type='a')
+        q2 = dns.Query(type='b')
+        self.assertNotEqual(q1, q2)
+
+
+    def test_compareDifferentCls(self):
+        """
+        Queries with different cls are different.
+        """
+        q1 = dns.Query(cls='a')
+        q2 = dns.Query(cls='b')
+        self.assertNotEqual(q1, q2)
+
+
+    def test_compareLessThanName(self):
+        """
+        Queries are ordered first with name
+        """
+        q1 = dns.Query(name='a', type=2, cls=2)
+        q2 = dns.Query(name='b', type=1, cls=1)
+        self.assertTrue(q1 < q2)
+        self.assertTrue(q1 <= q2)
+
+
+    def test_compareGreaterThanName(self):
+        """
+        Queries are ordered first with name
+        """
+        q1 = dns.Query(name='a', type=2, cls=2)
+        q2 = dns.Query(name='b', type=1, cls=1)
+        self.assertTrue(q2 > q1)
+        self.assertTrue(q2 >= q1)
+
+
+    def test_compareLessThanType(self):
+        """
+        Queries are ordered second with type
+        """
+        q1 = dns.Query(name='a', type=1, cls=2)
+        q2 = dns.Query(name='a', type=2, cls=1)
+        self.assertTrue(q1 < q2)
+        self.assertTrue(q1 <= q2)
+
+
+    def test_compareGreaterThanType(self):
+        """
+        Queries are ordered second with type
+        """
+        q1 = dns.Query(name='a', type=1, cls=2)
+        q2 = dns.Query(name='a', type=2, cls=1)
+        self.assertTrue(q2 > q1)
+        self.assertTrue(q2 >= q1)
+
+
+    def test_compareLessThanCls(self):
+        """
+        Queries are ordered third with the cls
+        """
+        q1 = dns.Query(name='a', type=1, cls=1)
+        q2 = dns.Query(name='a', type=1, cls=2)
+        self.assertTrue(q1 < q2)
+        self.assertTrue(q1 <= q2)
+
+
+    def test_compareGreaterThanCls(self):
+        """
+        Queries are ordered third with the cls
+        """
+        q1 = dns.Query(name='a', type=1, cls=1)
+        q2 = dns.Query(name='a', type=1, cls=2)
+        self.assertTrue(q2 > q1)
+        self.assertTrue(q2 >= q1)

=== modified file 'twisted/names/test/test_srvconnect.py'
--- twisted/names/test/test_srvconnect.py	2011-02-14 04:45:15 +0000
+++ twisted/names/test/test_srvconnect.py	2011-05-28 13:02:57 +0000
@@ -78,6 +78,46 @@
             self.reactor.tcpClients.pop()[:2], ('host.example.org', 6269))
 
 
+    def test_SRVSeveralPresentDifferentPriorities(self):
+        """
+        Test connectTCP gets called with several addresses from the SRV record.
+        """
+        payload1 = dns.Record_SRV(port=6269, target='host.example.org',
+                                  ttl=60, priority=1)
+        r1 = dns.RRHeader(name='example.org', type=dns.SRV, cls=dns.IN,
+                          ttl=60, payload=payload1)
+        payload2 = dns.Record_SRV(port=6269, target='other.example.org',
+                                  ttl=60, priority=2)
+        r2 = dns.RRHeader(name='example.org', type=dns.SRV, cls=dns.IN,
+                          ttl=60, payload=payload2)
+        client.theResolver.results = [r1, r2]
+        self.connector.connect()
+
+        self.assertIdentical(None, self.factory.reason)
+        self.assertEquals(
+                self.reactor.tcpClients.pop()[:2], ('host.example.org', 6269))
+
+
+    def test_SRVSeveralPresentDifferentWeights(self):
+        """
+        Test connectTCP gets called with several addresses from the SRV record.
+        """
+        payload1 = dns.Record_SRV(port=6269, target='host.example.org',
+                                  ttl=60, priority=1, weight=1)
+        r1 = dns.RRHeader(name='example.org', type=dns.SRV, cls=dns.IN,
+                          ttl=60, payload=payload1)
+        payload2 = dns.Record_SRV(port=6269, target='other.example.org',
+                                  ttl=60, priority=1, weight=2)
+        r2 = dns.RRHeader(name='example.org', type=dns.SRV, cls=dns.IN,
+                          ttl=60, payload=payload2)
+        client.theResolver.results = [r1, r2]
+        self.connector.connect()
+
+        self.assertIdentical(None, self.factory.reason)
+        self.assertEquals(
+                self.reactor.tcpClients.pop()[:2], ('other.example.org', 6269))
+
+
     def test_SRVNotPresent(self):
         """
         Test connectTCP gets called with fallback parameters on NXDOMAIN.

