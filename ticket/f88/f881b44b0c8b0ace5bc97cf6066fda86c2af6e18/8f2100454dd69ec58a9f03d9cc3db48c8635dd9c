#!/usr/bin/env python
'''Demonstrate callLater bug.
This calls reactor.callLater from a thread nloops times.
Output is a list of numbers that were not called exactly once.
'''

from twisted.internet import reactor, threads

nloops = 10000

call_dict = {}

# this function records its being called
def callCounter(n):
    call_dict[n] += 1

# this function reschedules itself so it runs nloops times
def doCallLaters(n):
    global nloops
    n += 1
    if n <= nloops:
        # callLater from thread and reschedule
        call_dict[n] = 0
        reactor.callLater(0, callCounter, n)
        threads.deferToThread(doCallLaters, n)
        return
    nb_pend = len(reactor._pendingTimedCalls)
    nb_new = len(reactor._newTimedCalls)
    print 'pending: %d,  new: %d' % (nb_pend, nb_new)
    if nb_pend + nb_new > 0:
        # keep rescheduling until the reactor's queues are empty
        threads.deferToThread(doCallLaters, n)
        return
    # the reactor has now done all it's going to do
    reactor.stop()
    print [(n,count) for n,count in call_dict.items() if count != 1]

threads.deferToThread(doCallLaters, 0)

reactor.run()
