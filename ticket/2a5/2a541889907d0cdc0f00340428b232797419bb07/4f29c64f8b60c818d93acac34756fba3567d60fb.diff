diff --git twisted/test/process_stdinreader.py twisted/test/process_stdinreader.py
index f060db4..b8ff0bc 100644
--- twisted/test/process_stdinreader.py
+++ twisted/test/process_stdinreader.py
@@ -3,7 +3,7 @@
 
 """Script used by twisted.test.test_process on win32."""
 
-import sys, time, os, msvcrt
+import sys, os, msvcrt
 msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
 msvcrt.setmode(sys.stderr.fileno(), os.O_BINARY)
 
diff --git twisted/test/reflect_helper_IE.py twisted/test/reflect_helper_IE.py
index 614d948..a50f723 100644
--- twisted/test/reflect_helper_IE.py
+++ twisted/test/reflect_helper_IE.py
@@ -2,3 +2,4 @@
 # Helper for a test_reflect test
 
 import idonotexist
+idonotexist  # Silence the linter.
diff --git twisted/test/stdio_test_consumer.py twisted/test/stdio_test_consumer.py
index 8254387..eb140c8 100644
--- twisted/test/stdio_test_consumer.py
+++ twisted/test/stdio_test_consumer.py
@@ -9,6 +9,7 @@ that process transports implement IConsumer properly.
 """
 
 import sys, _preamble
+_preamble  # Silence the linter (`_preamble` has import-time side-effect).
 
 from twisted.python import log, reflect
 from twisted.internet import stdio, protocol
diff --git twisted/test/stdio_test_halfclose.py twisted/test/stdio_test_halfclose.py
index b80a8f9..8c03b80 100644
--- twisted/test/stdio_test_halfclose.py
+++ twisted/test/stdio_test_halfclose.py
@@ -10,6 +10,7 @@ transports.
 """
 
 import sys, _preamble
+_preamble  # Silence the linter (`_preamble` has import-time side-effect).
 
 from zope.interface import implements
 
diff --git twisted/test/stdio_test_hostpeer.py twisted/test/stdio_test_hostpeer.py
index 1e6f014..12ded6f 100644
--- twisted/test/stdio_test_hostpeer.py
+++ twisted/test/stdio_test_hostpeer.py
@@ -9,6 +9,7 @@ that ITransport.getHost() and ITransport.getPeer() work for process transports.
 """
 
 import sys, _preamble
+_preamble  # Silence the linter (`_preamble` has import-time side-effect).
 
 from twisted.internet import stdio, protocol
 from twisted.python import reflect
diff --git twisted/test/stdio_test_lastwrite.py twisted/test/stdio_test_lastwrite.py
index 2b70514..1644f47 100644
--- twisted/test/stdio_test_lastwrite.py
+++ twisted/test/stdio_test_lastwrite.py
@@ -10,6 +10,7 @@ L{twisted.internet.stdio.StandardIO} has finished.
 """
 
 import sys, _preamble
+_preamble  # Silence the linter (`_preamble` has import-time side-effect).
 
 from twisted.internet.protocol import Protocol
 from twisted.internet.stdio import StandardIO
diff --git twisted/test/stdio_test_loseconn.py twisted/test/stdio_test_loseconn.py
index 7f95a01..0020252 100644
--- twisted/test/stdio_test_loseconn.py
+++ twisted/test/stdio_test_loseconn.py
@@ -9,6 +9,7 @@ test that ITransport.loseConnection() works for process transports.
 """
 
 import sys, _preamble
+_preamble  # Silence the linter (`_preamble` has import-time side-effect).
 
 from twisted.internet.error import ConnectionDone
 from twisted.internet import stdio, protocol
diff --git twisted/test/stdio_test_producer.py twisted/test/stdio_test_producer.py
index 5c0b501..2893c63 100644
--- twisted/test/stdio_test_producer.py
+++ twisted/test/stdio_test_producer.py
@@ -9,6 +9,7 @@ that process transports implement IProducer properly.
 """
 
 import sys, _preamble
+_preamble  # Silence the linter (`_preamble` has import-time side-effect).
 
 from twisted.internet import stdio, protocol
 from twisted.python import log, reflect
diff --git twisted/test/stdio_test_write.py twisted/test/stdio_test_write.py
index 9f92c94..90e455c 100644
--- twisted/test/stdio_test_write.py
+++ twisted/test/stdio_test_write.py
@@ -9,6 +9,7 @@ ITransport.write() works for process transports.
 """
 
 import sys, _preamble
+_preamble  # Silence the linter (`_preamble` has import-time side-effect).
 
 from twisted.internet import stdio, protocol
 from twisted.python import reflect
diff --git twisted/test/stdio_test_writeseq.py twisted/test/stdio_test_writeseq.py
index aeab716..5c8f9ae 100644
--- twisted/test/stdio_test_writeseq.py
+++ twisted/test/stdio_test_writeseq.py
@@ -9,6 +9,7 @@ ITransport.writeSequence() works for process transports.
 """
 
 import sys, _preamble
+_preamble  # Silence the linter (`_preamble` has import-time side-effect).
 
 from twisted.internet import stdio, protocol
 from twisted.python import reflect
diff --git twisted/test/test_adbapi.py twisted/test/test_adbapi.py
index 92ff601..bc9a84d 100644
--- twisted/test/test_adbapi.py
+++ twisted/test/test_adbapi.py
@@ -1,7 +1,6 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
 """
 Tests for twisted.enterprise.adbapi.
 """
@@ -15,7 +14,7 @@ from twisted.enterprise.adbapi import ConnectionPool, ConnectionLost
 from twisted.enterprise.adbapi import Connection, Transaction
 from twisted.internet import reactor, defer, interfaces
 from twisted.python.failure import Failure
-
+from twisted.python.reflect import requireModule
 
 simple_table_schema = """
 CREATE TABLE simple (
@@ -24,6 +23,7 @@ CREATE TABLE simple (
 """
 
 
+
 class ADBAPITestBase:
     """Test the asynchronous DB-API code."""
 
@@ -421,9 +421,10 @@ class SQLiteConnector(DBTestConnector):
     num_iterations = 1 # slow
 
     def can_connect(self):
-        try: import sqlite
-        except: return False
-        return True
+        if requireModule('sqlite') is None:
+            return False
+        else:
+            return True
 
     def startDB(self):
         self.database = os.path.join(self.DB_DIR, self.DB_NAME)
@@ -508,9 +509,10 @@ class FirebirdConnector(DBTestConnector):
 
     num_iterations = 5 # slow
 
+
     def can_connect(self):
-        try: import kinterbasdb
-        except: return False
+        if requireModule('kinterbasdb') is None:
+            return False
         try:
             self.startDB()
             self.stopDB()
@@ -656,7 +658,7 @@ class NonThreadPool(object):
         success = True
         try:
             result = f(*a, **kw)
-        except Exception, e:
+        except Exception:
             success = False
             result = Failure()
         onResult(success, result)
diff --git twisted/test/test_amp.py twisted/test/test_amp.py
index c28f359..00266f7 100644
--- twisted/test/test_amp.py
+++ twisted/test/test_amp.py
@@ -16,7 +16,8 @@ from twisted.python import filepath
 from twisted.python.failure import Failure
 from twisted.protocols import amp
 from twisted.trial import unittest
-from twisted.internet import protocol, defer, error, reactor, interfaces
+from twisted.internet import (
+    address, protocol, defer, error, reactor, interfaces)
 from twisted.test import iosim
 from twisted.test.proto_helpers import StringTransport
 
@@ -2973,15 +2974,15 @@ class UNIXStringTransport(object):
 
 
     def loseConnection(self):
-        self._queue.append(('connectionLost', Failure(ConnectionLost())))
+        self._queue.append(('connectionLost', Failure(error.ConnectionLost())))
 
 
     def getHost(self):
-        return UNIXAddress('/tmp/some-path')
+        return address.UNIXAddress('/tmp/some-path')
 
 
     def getPeer(self):
-        return UNIXAddress('/tmp/another-path')
+        return address.UNIXAddress('/tmp/another-path')
 
 # Minimal evidence that we got the signatures right
 verifyClass(interfaces.ITransport, UNIXStringTransport)
diff --git twisted/test/test_banana.py twisted/test/test_banana.py
index 64c43b0..fdadd56 100644
--- twisted/test/test_banana.py
+++ twisted/test/test_banana.py
@@ -103,7 +103,6 @@ class BananaTestCase(BananaTestBase):
 
     def testString(self):
         self.enc.sendEncoded("hello")
-        l = []
         self.enc.dataReceived(self.io.getvalue())
         assert self.result == 'hello'
 
diff --git twisted/test/test_defgen.py twisted/test/test_defgen.py
index 7675a07..4556ac9 100644
--- twisted/test/test_defgen.py
+++ twisted/test/test_defgen.py
@@ -212,7 +212,7 @@ class InlineCallbacksTests(BaseDefgenTests, unittest.TestCase):
         self.assertEqual(x, "hi")
 
         try:
-            ow = yield getOwie()
+            yield getOwie()
         except ZeroDivisionError as e:
             self.assertEqual(str(e), 'OMG')
         returnValue("WOOSH")
@@ -231,7 +231,7 @@ class InlineCallbacksTests(BaseDefgenTests, unittest.TestCase):
 
     def _genHandledTerminalFailure(self):
         try:
-            x = yield defer.fail(TerminalException("Handled Terminal Failure"))
+            yield defer.fail(TerminalException("Handled Terminal Failure"))
         except TerminalException:
             pass
     _genHandledTerminalFailure = inlineCallbacks(_genHandledTerminalFailure)
@@ -239,7 +239,7 @@ class InlineCallbacksTests(BaseDefgenTests, unittest.TestCase):
 
     def _genHandledTerminalAsyncFailure(self, d):
         try:
-            x = yield d
+            yield d
         except TerminalException:
             pass
     _genHandledTerminalAsyncFailure = inlineCallbacks(
@@ -249,7 +249,7 @@ class InlineCallbacksTests(BaseDefgenTests, unittest.TestCase):
     def _genStackUsage(self):
         for x in range(5000):
             # Test with yielding a deferred
-            x = yield defer.succeed(1)
+            yield defer.succeed(1)
         returnValue(0)
     _genStackUsage = inlineCallbacks(_genStackUsage)
 
@@ -268,7 +268,7 @@ class InlineCallbacksTests(BaseDefgenTests, unittest.TestCase):
         result of the yield expression.
         """
         def _test():
-            x = yield 5
+            yield 5
             returnValue(5)
         _test = inlineCallbacks(_test)
 
diff --git twisted/test/test_doc.py twisted/test/test_doc.py
index 795fd87..f63416c 100644
--- twisted/test/test_doc.py
+++ twisted/test/test_doc.py
@@ -43,7 +43,7 @@ class DocCoverage(unittest.TestCase):
                 continue
             try:
                 package = reflect.namedModule(packageName)
-            except ImportError, e:
+            except ImportError:
                 # This is testing doc coverage, not importability.
                 # (Really, I don't want to deal with the fact that I don't
                 #  have pyserial installed.)
@@ -70,7 +70,7 @@ class DocCoverage(unittest.TestCase):
             try:
                 module = reflect.namedModule('.'.join([packageName,
                                                        moduleName]))
-            except Exception, e:
+            except Exception:
                 # print moduleName, "misbehaved:", e
                 pass
             else:
@@ -87,7 +87,7 @@ class DocCoverage(unittest.TestCase):
         for packageName in self.packageNames:
             try:
                 package = reflect.namedModule(packageName)
-            except Exception, e:
+            except Exception:
                 # This is testing doc coverage, not importability.
                 # (Really, I don't want to deal with the fact that I don't
                 #  have pyserial installed.)
diff --git twisted/test/test_explorer.py twisted/test/test_explorer.py
index 2b8fcf0..d4549f3 100644
--- twisted/test/test_explorer.py
+++ twisted/test/test_explorer.py
@@ -11,8 +11,6 @@ from twisted.trial import unittest
 
 from twisted.manhole import explorer
 
-import types
-
 """
 # Tests:
 
@@ -209,12 +207,6 @@ class TestBrowseFunction(unittest.TestCase):
 
         signature = xplorer.signature
 
-        expected_signature = [{'name': 'c'},
-                              {'name': 'd',
-                               'default': range(4)},
-                              {'name': 'kw',
-                               'keywords': 1}]
-
         # The name of the first argument seems to be indecipherable,
         # but make sure it has one (and no default).
         self.failUnless(signature.get_name(0))
diff --git twisted/test/test_failure.py twisted/test/test_failure.py
index 2debd9d..b7a1929 100644
--- twisted/test/test_failure.py
+++ twisted/test/test_failure.py
@@ -217,6 +217,9 @@ class FailureTestCase(SynchronousTestCase):
         """
         if captureVars:
             exampleLocalVar = 'xyz'
+            # Silence the linter as this variable is checked via
+            # the traceback.
+            exampleLocalVar
 
         f = getDivisionFailure(captureVars=captureVars)
         out = NativeStringIO()
@@ -272,6 +275,9 @@ class FailureTestCase(SynchronousTestCase):
         """
         if captureVars:
             exampleLocalVar = 'abcde'
+            # Silence the linter as this variable is checked via
+            # the traceback.
+            exampleLocalVar
 
         f = getDivisionFailure()
         out = NativeStringIO()
@@ -319,6 +325,9 @@ class FailureTestCase(SynchronousTestCase):
         """
         if captureVars:
             exampleLocalVar = 'xyzzy'
+            # Silence the linter as this variable is checked via
+            # the traceback.
+            exampleLocalVar
 
         f = getDivisionFailure(captureVars=captureVars)
         out = NativeStringIO()
diff --git twisted/test/test_ftp.py twisted/test/test_ftp.py
index 3d36463..f79628a 100644
--- twisted/test/test_ftp.py
+++ twisted/test/test_ftp.py
@@ -1442,7 +1442,6 @@ class FTPClientTests(unittest.TestCase):
                      '550 Failed to open file.']
         f.buildProtocol = lambda addr: PrintLines(responses)
 
-        client = ftp.FTPClient(passive=1)
         cc = protocol.ClientCreator(reactor, ftp.FTPClient, passive=1)
         d = cc.connectTCP('127.0.0.1', portNum)
         def gotClient(client):
diff --git twisted/test/test_iutils.py twisted/test/test_iutils.py
index 6f707f4..d5fa0f6 100644
--- twisted/test/test_iutils.py
+++ twisted/test/test_iutils.py
@@ -112,7 +112,6 @@ class ProcessUtilsTests(unittest.TestCase):
         stdout, the data written to the child's stderr, and the exit status of
         the child.
         """
-        exe = sys.executable
         scriptFile = self.makeSourceFile([
             "import sys",
             "sys.stdout.write('hello world!\\n')",
diff --git twisted/test/test_jelly.py twisted/test/test_jelly.py
index 35ab6ba..4fb6447 100644
--- twisted/test/test_jelly.py
+++ twisted/test/test_jelly.py
@@ -425,7 +425,6 @@ class JellyTestCase(unittest.TestCase):
 
 
     def test_newStyleClasses(self):
-        j = jelly.jelly(D)
         uj = jelly.unjelly(D)
         self.assertIdentical(D, uj)
 
@@ -537,8 +536,8 @@ class JellyTestCase(unittest.TestCase):
     def test_newStyleClassesAttributes(self):
         n = TestNode()
         n1 = TestNode(n)
-        n11 = TestNode(n1)
-        n2 = TestNode(n)
+        TestNode(n1)
+        TestNode(n)
         # Jelly it
         jel = jelly.jelly(n)
         m = jelly.unjelly(jel)
diff --git twisted/test/test_lockfile.py twisted/test/test_lockfile.py
index 41cfb65..1e4cc20 100644
--- twisted/test/test_lockfile.py
+++ twisted/test/test_lockfile.py
@@ -10,14 +10,14 @@ import os, errno
 
 from twisted.trial import unittest
 from twisted.python import lockfile
+from twisted.python.reflect import requireModule
 from twisted.python.runtime import platform
 
 skipKill = None
 if platform.isWindows():
-    try:
-        from win32api import OpenProcess
-        import pywintypes
-    except ImportError:
+    if(requireModule('win32api.OpenProcess') is None and
+        requireModule('pywintypes') is None
+            ):
         skipKill = ("On windows, lockfile.kill is not implemented in the "
                     "absence of win32api and/or pywintypes.")
 
@@ -290,7 +290,7 @@ class LockingTestCase(unittest.TestCase):
             # Windows implementation of rmlink does, a readlink call
             # will fail with EACCES.
             raise IOError(errno.EACCES, None)
-        readlinkPatch = self.patch(lockfile, 'readlink', fakeReadlink)
+        self.patch(lockfile, 'readlink', fakeReadlink)
 
         lockf = self.mktemp()
         lock = lockfile.FilesystemLock(lockf)
diff --git twisted/test/test_logfile.py twisted/test/test_logfile.py
index e7db238..b5b9e8f 100644
--- twisted/test/test_logfile.py
+++ twisted/test/test_logfile.py
@@ -123,7 +123,7 @@ class LogFileTestCase(unittest.TestCase):
         """
         Check rotated files have same permissions as original.
         """
-        f = open(self.path, "w").close()
+        open(self.path, "w").close()
         os.chmod(self.path, 0707)
         mode = os.stat(self.path)[stat.ST_MODE]
         log = logfile.LogFile(self.name, self.dir)
@@ -206,7 +206,7 @@ class LogFileTestCase(unittest.TestCase):
         os.chmod(self.path, 0707)
         currentMode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
         f.close()
-        log1 = logfile.LogFile(self.name, self.dir)
+        logfile.LogFile(self.name, self.dir)
         self.assertEqual(stat.S_IMODE(os.stat(self.path)[stat.ST_MODE]),
                           currentMode)
 
@@ -215,7 +215,7 @@ class LogFileTestCase(unittest.TestCase):
         """
         Test specifying the permissions used on the log file.
         """
-        log1 = logfile.LogFile(self.name, self.dir, defaultMode=0066)
+        logfile.LogFile(self.name, self.dir, defaultMode=0066)
         mode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
         if runtime.platform.isWindows():
             # The only thing we can get here is global read-only
diff --git twisted/test/test_loopback.py twisted/test/test_loopback.py
index 21a93b5..cdd4dab 100644
--- twisted/test/test_loopback.py
+++ twisted/test/test_loopback.py
@@ -11,7 +11,6 @@ from zope.interface import implementer
 
 from twisted.python.compat import _PY3, intToBytes
 from twisted.trial import unittest
-from twisted.trial.util import suppress as SUPPRESS
 from twisted.protocols import basic, loopback
 from twisted.internet import defer
 from twisted.internet.protocol import Protocol
diff --git twisted/test/test_nmea.py twisted/test/test_nmea.py
index 9c4afbc..69e1f8a 100644
--- twisted/test/test_nmea.py
+++ twisted/test/test_nmea.py
@@ -7,7 +7,7 @@
 import StringIO
 
 from twisted.trial import unittest
-from twisted.internet import reactor, protocol
+from twisted.internet import protocol
 from twisted.python import reflect
 
 from twisted.protocols.gps import nmea
diff --git twisted/test/test_pcp.py twisted/test/test_pcp.py
index 71de8bb..06229c0 100644
--- twisted/test/test_pcp.py
+++ twisted/test/test_pcp.py
@@ -5,7 +5,6 @@
 
 __version__ = '$Revision: 1.5 $'[11:-2]
 
-from StringIO import StringIO
 from twisted.trial import unittest
 from twisted.protocols import pcp
 
diff --git twisted/test/test_policies.py twisted/test/test_policies.py
index 56416f0..55831ec 100644
--- twisted/test/test_policies.py
+++ twisted/test/test_policies.py
@@ -9,7 +9,7 @@ from __future__ import division, absolute_import
 
 from zope.interface import Interface, implementer, implementedBy
 
-from twisted.python.compat import NativeStringIO, _PY3
+from twisted.python.compat import NativeStringIO
 from twisted.trial import unittest
 from twisted.test.proto_helpers import StringTransport
 from twisted.test.proto_helpers import StringTransportWithDisconnection
diff --git twisted/test/test_randbytes.py twisted/test/test_randbytes.py
index ff3ae00..6615f80 100644
--- twisted/test/test_randbytes.py
+++ twisted/test/test_randbytes.py
@@ -7,8 +7,6 @@ Test cases for L{twisted.python.randbytes}.
 
 from __future__ import division, absolute_import
 
-import os
-
 from twisted.trial import unittest
 from twisted.python import randbytes
 
diff --git twisted/test/test_rebuild.py twisted/test/test_rebuild.py
index dfeca9d..aac8b81 100644
--- twisted/test/test_rebuild.py
+++ twisted/test/test_rebuild.py
@@ -68,7 +68,7 @@ class RebuildTestCase(unittest.TestCase):
             class C(myrebuilder.B):
                 pass
             test_rebuild.C = C
-            c = C()
+            C()
         i = myrebuilder.Inherit()
         self.assertEqual(a.a(), 'a')
         # necessary because the file has not "changed" if a second has not gone
@@ -111,7 +111,7 @@ class RebuildTestCase(unittest.TestCase):
     def testComponentInteraction(self):
         x = crash_test_dummy.XComponent()
         x.setAdapter(crash_test_dummy.IX, crash_test_dummy.XA)
-        oldComponent = x.getComponent(crash_test_dummy.IX)
+        x.getComponent(crash_test_dummy.IX)
         rebuild.rebuild(crash_test_dummy, 0)
         newComponent = x.getComponent(crash_test_dummy.IX)
 
diff --git twisted/test/test_shortcut.py twisted/test/test_shortcut.py
index fdcb775..dafd081 100644
--- twisted/test/test_shortcut.py
+++ twisted/test/test_shortcut.py
@@ -13,7 +13,6 @@ if os.name == 'nt':
         skipWindowsNopywin32 = ("On windows, twisted.python.shortcut is not "
                                 "available in the absence of win32com.")
     import os.path
-    import sys
 
     class ShortcutTest(unittest.TestCase):
         def testCreate(self):
diff --git twisted/test/test_sip.py twisted/test/test_sip.py
index 73f09d4..e7290bb 100644
--- twisted/test/test_sip.py
+++ twisted/test/test_sip.py
@@ -13,8 +13,6 @@ from twisted.python.versions import Version
 from twisted.test import proto_helpers
 
 from twisted import cred
-import twisted.cred.portal
-import twisted.cred.checkers
 
 from zope.interface import implements
 
diff --git twisted/test/test_socks.py twisted/test/test_socks.py
index ebcb843..af0fc85 100644
--- twisted/test/test_socks.py
+++ twisted/test/test_socks.py
@@ -10,7 +10,7 @@ import struct, socket
 
 from twisted.trial import unittest
 from twisted.test import proto_helpers
-from twisted.internet import defer, address, reactor
+from twisted.internet import defer, address
 from twisted.internet.error import DNSLookupError
 from twisted.protocols import socks
 
@@ -221,7 +221,6 @@ class Connect(unittest.TestCase):
             + socket.inet_aton('1.2.3.4')
             + 'fooBAR'
             + '\0')
-        sent = self.sock.transport.value()
         self.sock.transport.clear()
 
         # pass some data through
@@ -240,7 +239,6 @@ class Connect(unittest.TestCase):
             + socket.inet_aton('1.2.3.4')
             + 'fooBAR'
             + '\0')
-        sent = self.sock.transport.value()
         self.sock.transport.clear()
 
         # pass some data through
diff --git twisted/test/test_ssl.py twisted/test/test_ssl.py
index 136bc2d..8cc4a56 100644
--- twisted/test/test_ssl.py
+++ twisted/test/test_ssl.py
@@ -11,6 +11,7 @@ from twisted.trial import unittest
 from twisted.internet import protocol, reactor, interfaces, defer
 from twisted.internet.error import ConnectionDone
 from twisted.protocols import basic
+from twisted.python.reflect import requireModule
 from twisted.python.runtime import platform
 from twisted.test.test_tcp import ProperlyCloseFilesMixin
 
@@ -323,9 +324,7 @@ class StolenTCPTestCase(ProperlyCloseFilesMixin, unittest.TestCase):
 
         # So figure out if twisted.protocols.tls is in use.  If it can be
         # imported, it should be.
-        try:
-            import twisted.protocols.tls
-        except ImportError:
+        if requireModule('twisted.protocols.tls') is None:
             # It isn't available, so we expect WSAENOTSOCK if we're on Windows.
             if platform.getType() == 'win32':
                 return errno.WSAENOTSOCK
@@ -505,7 +504,7 @@ class ConnectionLostTestCase(unittest.TestCase, ContextGeneratingMixin):
         clientProtocolFactory = protocol.ClientFactory()
         clientProtocolFactory.protocol = ImmediatelyDisconnectingProtocol
         clientProtocolFactory.connectionDisconnected = defer.Deferred()
-        clientConnector = reactor.connectSSL('127.0.0.1',
+        reactor.connectSSL('127.0.0.1',
             serverPort.getHost().port, clientProtocolFactory, self.clientCtxFactory)
 
         return clientProtocolFactory.connectionDisconnected.addCallback(
@@ -553,7 +552,7 @@ class ConnectionLostTestCase(unittest.TestCase, ContextGeneratingMixin):
         clientProtocol = CloseAfterHandshake()
         clientProtocolFactory = protocol.ClientFactory()
         clientProtocolFactory.protocol = lambda: clientProtocol
-        clientConnector = reactor.connectSSL('127.0.0.1',
+        reactor.connectSSL('127.0.0.1',
             serverPort.getHost().port, clientProtocolFactory, self.clientCtxFactory)
 
         def checkResult(failure):
@@ -589,7 +588,7 @@ class ConnectionLostTestCase(unittest.TestCase, ContextGeneratingMixin):
         clientProtocol.connectionLost = clientConnLost.callback
         clientProtocolFactory = protocol.ClientFactory()
         clientProtocolFactory.protocol = lambda: clientProtocol
-        clientConnector = reactor.connectSSL('127.0.0.1',
+        reactor.connectSSL('127.0.0.1',
             serverPort.getHost().port, clientProtocolFactory, self.clientCtxFactory)
 
         dl = defer.DeferredList([serverConnLost, clientConnLost], consumeErrors=True)
diff --git twisted/test/test_stdio.py twisted/test/test_stdio.py
index 3da754c..14371a0 100644
--- twisted/test/test_stdio.py
+++ twisted/test/test_stdio.py
@@ -9,6 +9,7 @@ import os, sys, itertools
 
 from twisted.trial import unittest
 from twisted.python import filepath, log
+from twisted.python.reflect import requireModule
 from twisted.python.runtime import platform
 from twisted.internet import error, defer, protocol, stdio, reactor
 from twisted.test.test_tcp import ConnectionLostNotifyingProtocol
@@ -23,9 +24,7 @@ UNIQUE_LAST_WRITE_STRING = 'xyz123abc Twisted is great!'
 
 skipWindowsNopywin32 = None
 if platform.isWindows():
-    try:
-        import win32process
-    except ImportError:
+    if requireModule('win32process') is None:
         skipWindowsNopywin32 = ("On windows, spawnProcess is not available "
                                 "in the absence of win32process.")
 
diff --git twisted/test/test_strcred.py twisted/test/test_strcred.py
index 95f75c2..9154c85 100644
--- twisted/test/test_strcred.py
+++ twisted/test/test_strcred.py
@@ -15,6 +15,7 @@ from twisted.plugins import cred_file, cred_anonymous
 from twisted.python import usage
 from twisted.python.filepath import FilePath
 from twisted.python.fakepwd import UserDatabase
+from twisted.python.reflect import requireModule
 
 try:
     import crypt
@@ -333,7 +334,7 @@ class TestFileDBChecker(unittest.TestCase):
         oldOutput = cred_file.theFileCheckerFactory.errorOutput
         newOutput = StringIO.StringIO()
         cred_file.theFileCheckerFactory.errorOutput = newOutput
-        checker = strcred.makeChecker('file:' + self._fakeFilename())
+        strcred.makeChecker('file:' + self._fakeFilename())
         cred_file.theFileCheckerFactory.errorOutput = oldOutput
         self.assertIn(cred_file.invalidFileWarning, newOutput.getvalue())
 
@@ -346,11 +347,13 @@ class TestSSHChecker(unittest.TestCase):
     L{twisted.conch.test.test_checkers.SSHPublicKeyCheckerTestCase}.
     """
 
-    try:
-        import Crypto
-        import pyasn1
-    except ImportError:
-        skip = "PyCrypto is not available"
+    skip = None
+
+    if requireModule('Crypto') is None:
+        skip = 'PyCrypto is not available'
+
+    if requireModule('pyasn1') is None:
+        skip = 'pyasn1 is not available'
 
 
     def test_isChecker(self):
diff --git twisted/test/test_threadable.py twisted/test/test_threadable.py
index 1227bc7..502aa85 100644
--- twisted/test/test_threadable.py
+++ twisted/test/test_threadable.py
@@ -129,4 +129,4 @@ class SerializationTestCase(unittest.SynchronousTestCase):
         lockPickle = b'ctwisted.python.threadable\nunpickle_lock\np0\n(tp1\nRp2\n.'
         lock = pickle.loads(lockPickle)
         newPickle = pickle.dumps(lock, 2)
-        newLock = pickle.loads(newPickle)
+        pickle.loads(newPickle)
diff --git twisted/test/test_twisted.py twisted/test/test_twisted.py
index f279a2b..aed323f 100644
--- twisted/test/test_twisted.py
+++ twisted/test/test_twisted.py
@@ -8,6 +8,7 @@ the code in C{twisted/__init__.py}.
 
 from __future__ import division, absolute_import
 
+import re
 import sys
 from types import ModuleType, FunctionType
 
@@ -36,10 +37,11 @@ class SetAsideModule(object):
         C{sys.modules}, remove them from it, and return whatever was found.
         """
         modules = dict([
-                (name, module)
-                for (name, module)
+                (moduleName, module)
+                for (moduleName, module)
                 in list(sys.modules.items())
-                if name == self.name or name.startswith(self.name + ".")])
+                if (moduleName == self.name or
+                    moduleName.startswith(self.name + "."))])
         for name in modules:
             del sys.modules[name]
         return modules
@@ -589,6 +591,9 @@ class ZopeInterfaceTestsMixin(object):
                 self.install((3, 8))
                 try:
                     from zope import interface
+                    # It is imported just to check errors at import so we
+                    # silence the linter.
+                    interface
                 except Exception as exc:
                     self.assertEqual(
                         "zope.interface.exceptions.InvalidInterface: "
diff --git twisted/test/test_unix.py twisted/test/test_unix.py
index 863f665..d96e7b0 100644
--- twisted/test/test_unix.py
+++ twisted/test/test_unix.py
@@ -5,7 +5,7 @@
 Tests for implementations of L{IReactorUNIX} and L{IReactorUNIXDatagram}.
 """
 
-import stat, os, sys, types
+import os, sys, types
 import socket
 
 from twisted.internet import interfaces, reactor, protocol, error, address, defer, utils
@@ -66,7 +66,7 @@ class UnixSocketTestCase(unittest.TestCase):
         clientFactory = MyClientFactory()
         clientConnMade = defer.Deferred()
         clientFactory.protocolConnectionMade = clientConnMade
-        c = reactor.connectUNIX(filename, clientFactory)
+        reactor.connectUNIX(filename, clientFactory)
         d = defer.gatherResults([serverConnMade, clientConnMade])
         def allConnected((serverProtocol, clientProtocol)):
 
@@ -100,7 +100,7 @@ class UnixSocketTestCase(unittest.TestCase):
         clientFactory = MyClientFactory()
         clientConnMade = defer.Deferred()
         clientFactory.protocolConnectionMade = clientConnMade
-        c = reactor.connectUNIX(filename, clientFactory, checkPID=1)
+        reactor.connectUNIX(filename, clientFactory, checkPID=1)
 
         d = defer.gatherResults([serverConnMade, clientConnMade])
         def _portStuff((serverProtocol, clientProto)):
@@ -175,7 +175,7 @@ class UnixSocketTestCase(unittest.TestCase):
         def ranStupidChild(ign):
             d = defer.Deferred()
             f = FailedConnectionClientFactory(d)
-            c = reactor.connectUNIX(self.filename, f, checkPID=True)
+            reactor.connectUNIX(self.filename, f, checkPID=True)
             return self.assertFailure(d, error.BadFileError)
         return self._uncleanSocketTest(ranStupidChild)
 
