Index: twisted/python/zshcomp.py
===================================================================
--- twisted/python/zshcomp.py	(revision 13538)
+++ twisted/python/zshcomp.py	(working copy)
@@ -156,7 +156,7 @@
         self.file.write('_mktap_subcmds=(\n')
         from twisted import plugin as newplugin
         from twisted.scripts.mktap import IServiceMaker
-        plugins = newplugin.getPlugIns(IServiceMaker)
+        plugins = newplugin.getPlugins(IServiceMaker)
 
         for p in plugins:
             self.file.write('"%s:%s"\n' % (p.tapname, p.description))
@@ -175,7 +175,7 @@
 
 case $service in\n""")
 
-        plugins = newplugin.getPlugIns(IServiceMaker)
+        plugins = newplugin.getPlugins(IServiceMaker)
         for p in plugins:
             self.file.write(p.tapname + ")\n")
             gen = ArgumentsGenerator(p.tapname, p.options, self.file)
Index: twisted/plugin.py
===================================================================
--- twisted/plugin.py	(revision 13538)
+++ twisted/plugin.py	(working copy)
@@ -41,7 +41,7 @@
     """Interface that must be implemented by all plugins.
 
     Only objects which implement this interface will be considered for
-    return by C{getPlugIns}.  To be useful, plugins should also
+    return by C{getPlugins}.  To be useful, plugins should also
     implement some other application-specific interface.
     """
 
@@ -189,18 +189,18 @@
     return topcache
 
 import twisted.plugins
-def getPlugIns(interface, module=twisted.plugins):
+def getPlugins(interface, package=twisted.plugins):
     """Retrieve all plugins implementing the given interface beneath the given module.
 
     @param interface: An interface class.  Only plugins which
     implement this interface will be returned.
 
-    @param module: A package beneath which plugins are installed.  For
+    @param package: A package beneath which plugins are installed.  For
     most uses, the default value is correct.
 
     @return: An iterator of plugins.
     """
-    allDropins = getCache(module)
+    allDropins = getCache(package)
     for dropin in allDropins.itervalues():
         for plugin in dropin.plugins:
             try:
@@ -211,5 +211,9 @@
                 if adapted is not None:
                     yield adapted
 
+                    
+# This should probably be deprecated, rather than aliased.
+getPlugIns = getPlugins
 
-__all__ = ['getPlugIns']
+
+__all__ = ['getPlugIns', 'getPlugins']
Index: twisted/scripts/trial.py
===================================================================
--- twisted/scripts/trial.py	(revision 13538)
+++ twisted/scripts/trial.py	(working copy)
@@ -129,7 +129,7 @@
 
     def _loadReporters(self):
         self.pluginFlags, self.optToQual = [], {}
-        self.plugins = plugin.getPlugIns(itrial.IReporter)
+        self.plugins = plugin.getPlugins(itrial.IReporter)
         for p in self.plugins:
             self.pluginFlags.append([p.longOpt, p.shortOpt, p.description])
             qual = "%s.%s" % (p.module, p.klass)
Index: twisted/scripts/mktap.py
===================================================================
--- twisted/scripts/mktap.py	(revision 13538)
+++ twisted/scripts/mktap.py	(working copy)
@@ -71,7 +71,7 @@
             shortTapName = plug.module.split('.')[-1]
         tapLookup[shortTapName] = plug
 
-    plugins = newplugin.getPlugIns(IServiceMaker)
+    plugins = newplugin.getPlugins(IServiceMaker)
     for plug in plugins:
         tapLookup[plug.tapname] = plug
 
Index: twisted/words/botbot.py
===================================================================
--- twisted/words/botbot.py	(revision 13538)
+++ twisted/words/botbot.py	(working copy)
@@ -58,7 +58,7 @@
     def loadBotList(self):
         botTypes = {}
 
-        botTypeList = newplugin.getPlugIns(IBotBot)
+        botTypeList = newplugin.getPlugins(IBotBot)
         for bott in botTypeList:
             botTypes[bott.botType] = bott
 
Index: twisted/test/test_plugin.py
===================================================================
--- twisted/test/test_plugin.py	(revision 13538)
+++ twisted/test/test_plugin.py	(working copy)
@@ -108,7 +108,7 @@
         self._testWithCacheness(self._testCache)
 
     def _testPlugins(self):
-        plugins = list(plugin.getPlugIns(plugin.ITestPlugin2))
+        plugins = list(plugin.getPlugins(plugin.ITestPlugin2))
 
         self.assertEquals(len(plugins), 2)
 
@@ -139,7 +139,7 @@
                 self.failIf(hasattr(sys.modules['twisted.plugins'], 'pluginextra'),
                             "plugins package still has pluginextra module")
 
-                plgs = list(plugin.getPlugIns(plugin.ITestPlugin))
+                plgs = list(plugin.getPlugins(plugin.ITestPlugin))
 
                 self.assertEquals(
                     len(plgs), 2,
@@ -172,7 +172,7 @@
         try:
             writeFile.write(begintest)
             writeFile.flush()
-            plgs = list(plugin.getPlugIns(plugin.ITestPlugin))
+            plgs = list(plugin.getPlugins(plugin.ITestPlugin))
             # Sanity check
             self.assertEquals(
                 len(plgs), 2,
@@ -186,7 +186,7 @@
             self._unimportPythonModule(sys.modules['twisted.plugins.pluginextra'])
 
             # Make sure additions are noticed
-            plgs = list(plugin.getPlugIns(plugin.ITestPlugin))
+            plgs = list(plugin.getPlugins(plugin.ITestPlugin))
 
             self.assertEquals(len(plgs), 3, "Unexpected plugins found: %r" % (
                     [p.__name__ for p in plgs]))
Index: twisted/lore/scripts/lore.py
===================================================================
--- twisted/lore/scripts/lore.py	(revision 13538)
+++ twisted/lore/scripts/lore.py	(working copy)
@@ -64,7 +64,7 @@
             module = plug.load()
             break
     else:
-        plugins = newplugin.getPlugIns(IProcessor)
+        plugins = newplugin.getPlugins(IProcessor)
         for plug in plugins:
             if plug.name == input:
                 module = reflect.namedModule(plug.moduleName)
