diff --git twisted/internet/address.py twisted/internet/address.py
index f017f55..f559763 100644
--- twisted/internet/address.py
+++ twisted/internet/address.py
@@ -116,6 +116,14 @@ class HostnameAddress(FancyEqMixin, object):
 
 
 @implementer(IAddress)
+class SerialAddress(object):
+    """
+    An L{interfaces.IAddress} provider for serial port connections.
+    """
+
+
+
+@implementer(IAddress)
 class UNIXAddress(FancyEqMixin, object):
     """
     Object representing a UNIX socket endpoint.
diff --git twisted/internet/endpoints.py twisted/internet/endpoints.py
index 7ba25db..3257cc0 100644
--- twisted/internet/endpoints.py
+++ twisted/internet/endpoints.py
@@ -35,7 +35,7 @@ from twisted.python.systemd import ListenFDs
 from twisted.internet.abstract import isIPv6Address
 from twisted.python.failure import Failure
 from twisted.python import log
-from twisted.internet.address import _ProcessAddress, HostnameAddress
+from twisted.internet.address import _ProcessAddress, HostnameAddress, SerialAddress
 from twisted.python.components import proxyForInterface
 from twisted.internet.task import LoopingCall
 
@@ -58,6 +58,7 @@ __all__ = ["clientFromString", "serverFromString",
            "SSL4ServerEndpoint", "SSL4ClientEndpoint",
            "AdoptedStreamServerEndpoint", "StandardIOEndpoint",
            "ProcessEndpoint", "HostnameEndpoint",
+           "SerialPortEndpoint",
            "StandardErrorBehavior", "connectProtocol"]
 
 __all3__ = ["TCP4ServerEndpoint", "TCP6ServerEndpoint",
@@ -875,6 +876,65 @@ class SSL4ClientEndpoint(object):
             return defer.fail()
 
 
+@implementer(interfaces.IStreamClientEndpoint)
+class SerialPortEndpoint(object):
+    """
+    A Serial Port endpoint.
+
+    @ivar _serialport: A hook used for testing availability of serial port
+        support.
+    """
+    try:
+        from twisted.internet.serialport import (
+            EIGHTBITS, PARITY_NONE, STOPBITS_ONE)
+        from twisted.internet import serialport as _serialport
+    except ImportError:
+        _serialport = None
+        EIGHTBITS = None
+        PARITY_NONE = None
+        STOPBITS_ONE = None
+
+
+    def __init__(self, deviceNameOrPortNumber, reactor,
+                 baudrate=9600, bytesize=EIGHTBITS,
+                 parity=PARITY_NONE, stopbits=STOPBITS_ONE,
+                 timeout=0, xonxoff=False, rtscts=False):
+        """
+        @see: L{serialport.SerialPort}
+        """
+        self._deviceNameOrPortNumber = deviceNameOrPortNumber
+        self._reactor = reactor
+        self._baudrate = baudrate
+        self._bytesize = bytesize
+        self._parity = parity
+        self._stopbits = stopbits
+        self._timeout = timeout
+        self._xonxoff = xonxoff
+        self._rtscts = rtscts
+
+
+    def connect(self, serialFactory):
+        """
+        Implement L{IStreamClientEndpoint.connect} to connect to serial ports
+
+        @param serialFactory: The protocol factory which will build protocols
+            for connections to this service.
+        @type serialFactory: L{twisted.internet.interfaces.IProtocolFactory}
+        """
+        try:
+            if self._serialport == None:
+                raise ImportError
+            else:
+                proto = serialFactory.buildProtocol(SerialAddress())
+                self._serialport.SerialPort(proto, self._deviceNameOrPortNumber,
+                        self._reactor, self._baudrate, self._bytesize,
+                        self._parity, self._stopbits, self._timeout,
+                        self._xonxoff, self._rtscts)
+                return defer.succeed(proto)
+        except:
+            return defer.fail()
+
+
 
 @implementer(interfaces.IStreamServerEndpoint)
 class UNIXServerEndpoint(object):
diff --git twisted/internet/test/test_endpoints.py twisted/internet/test/test_endpoints.py
index 0b2ef41..7791501 100644
--- twisted/internet/test/test_endpoints.py
+++ twisted/internet/test/test_endpoints.py
@@ -20,7 +20,8 @@ from twisted.trial import unittest
 from twisted.internet import (
     error, interfaces, defer, endpoints, protocol, reactor, threads)
 from twisted.internet.address import (
-    IPv4Address, IPv6Address, UNIXAddress, _ProcessAddress, HostnameAddress)
+    IPv4Address, IPv6Address, UNIXAddress, _ProcessAddress, HostnameAddress,
+    SerialAddress)
 from twisted.internet.protocol import ClientFactory, Protocol
 from twisted.test.proto_helpers import RaisingMemoryReactor, StringTransport
 from twisted.python.failure import Failure
@@ -34,6 +35,11 @@ from twisted.test.proto_helpers import (MemoryReactorClock as MemoryReactor)
 from twisted.test import __file__ as testInitPath
 pemPath = FilePath(testInitPath.encode("utf-8")).sibling(b"server.pem")
 
+try:
+    from twisted.internet import serialport
+except ImportError:
+    serialport = None
+
 if not _PY3:
     from twisted.plugin import getPlugins
     from twisted import plugins
@@ -628,7 +634,7 @@ class StandardIOEndpointsTestCase(unittest.TestCase):
 
     def test_standardIOInstance(self):
         """
-        The endpoint creates an L{endpoints.StandardIO} instance.
+        The endpoint creates an L{stdio.StandardIO} instance.
         """
         d = self.ep.listen(StdioFactory())
 
@@ -2091,6 +2097,218 @@ class SSL4EndpointsTestCase(EndpointTestCaseMixin,
 
 
 
+class SerialFactory(StdioFactory):
+    pass
+
+
+
+class SerialPortEndpointFailureTestCase(unittest.TestCase):
+    """
+    Test Case for Serial Port Endpoints when serial port support is not
+    available.
+    """
+    def test_importError(self):
+        """
+        Serial port support is not available, i.e., pyserial is not installed.
+        """
+        endpoint = endpoints.SerialPortEndpoint('/dev/ttyS0', reactor)
+        endpoint._serialport = None
+        d = endpoint.connect(SerialFactory())
+        self.assertIsInstance(self.failureResultOf(d).value, ImportError)
+
+
+
+class SerialPortEndpointsTestCase(unittest.TestCase):
+    """
+    Tests for Serial Port Endpoints
+    """
+    if serialport is None:
+        skip = "Serial port support is not available."
+    else:
+        deviceNameOrPortNumber = '/dev/ttyS0'
+
+    def setUp(self):
+        self.ep = endpoints.SerialPortEndpoint(self.deviceNameOrPortNumber,
+                                reactor)
+
+
+    def test_constructorDefaultArgs(self):
+        """
+        The parameters passed to the endpoints are stored in it, while
+        the optional arguments get their respective default values.
+        """
+        endpoint = endpoints.SerialPortEndpoint('/dev/ttyS0', reactor)
+        self.assertEqual(endpoint._reactor, reactor)
+        self.assertEqual(endpoint._baudrate, 9600)
+        self.assertEqual(endpoint._bytesize, serialport.EIGHTBITS)
+        self.assertEqual(endpoint._parity, serialport.PARITY_NONE)
+        self.assertEqual(endpoint._stopbits, serialport.STOPBITS_ONE)
+        self.assertEqual(endpoint._timeout, 0)
+        self.assertEqual(endpoint._xonxoff, False)
+        self.assertEqual(endpoint._rtscts, False)
+
+
+    def test_serialPortInstanceParameters(self):
+        """
+        The endpoint creates a L{serialport.SerialPort} instance and
+        passes the required arguments to its constructor.
+        """
+        baudrate = 4800
+        bytesize = serialport.SEVENBITS
+        parity = serialport.PARITY_EVEN
+        stopbits = serialport.STOPBITS_TWO
+        timeout = 3
+        xonxoff = True
+        rtscts = True
+        expectedArgs = [(self.deviceNameOrPortNumber, baudrate, bytesize, parity,
+            stopbits, timeout, xonxoff, rtscts)]
+        portArgs = []
+        class _DummySerialPort(object):
+            def __init__(self, protocol, deviceNameOrPortNumber, reactor,
+                         baudrate, bytesize, parity, stopbits, timeout,
+                         xonxoff, rtscts):
+                self.protocol = protocol
+                self.protocol.makeConnection(self)
+                portArgs.append((deviceNameOrPortNumber, baudrate, bytesize,
+                    parity, stopbits, timeout, xonxoff, rtscts))
+
+        self.patch(serialport, 'SerialPort', _DummySerialPort)
+        argep = endpoints.SerialPortEndpoint(self.deviceNameOrPortNumber,
+                                             reactor, baudrate, bytesize,
+                                             parity, stopbits, timeout,
+                                             xonxoff, rtscts)
+        d = argep.connect(SerialFactory())
+
+        def checkArgs(proto):
+            self.assertIsInstance(proto, basic.LineReceiver)
+            self.assertIsInstance(proto.transport, serialport.SerialPort)
+            self.assertEqual(expectedArgs, portArgs)
+
+        d.addCallback(checkArgs)
+        return d
+
+
+    def test_xonxoff(self):
+        """
+        The value of xonxoff that is stored in the endpoint is passed
+        on to the L{SerialPort} instance.
+        """
+        expectedValue = True
+        endpoint = endpoints.SerialPortEndpoint(self.deviceNameOrPortNumber,
+                                reactor, xonxoff=expectedValue)
+        xonxoffVal = []
+        class _DummySerialPort(object):
+            def __init__(self, protocol, deviceNameOrPortNumber, reactor,
+                         baudrate, bytesize, parity, stopbits, timeout,
+                         xonxoff, rtscts):
+                xonxoffVal.append(xonxoff)
+
+        self.patch(serialport, 'SerialPort', _DummySerialPort)
+        d = endpoint.connect(SerialFactory())
+
+        def checkArg(proto):
+            self.assertEqual(xonxoffVal.pop(), expectedValue)
+
+        d.addCallback(checkArg)
+        return d
+
+
+    def test_rtscts(self):
+        """
+        The value of rtscts stored in the endpoint is passed on to the
+        L{SerialPort} instance.
+        """
+        expectedValue = True
+        endpoint = endpoints.SerialPortEndpoint(self.deviceNameOrPortNumber,
+                                reactor, rtscts=expectedValue)
+        rtsctsVal = []
+        class _DummySerialPort(object):
+            def __init__(self, protocol, deviceNameOrPortNumber, reactor,
+                         baudrate, bytesize, parity, stopbits, timeout,
+                         xonxoff, rtscts):
+                rtsctsVal.append(rtscts)
+
+        self.patch(serialport, 'SerialPort', _DummySerialPort)
+        d = endpoint.connect(SerialFactory())
+
+        def checkArg(proto):
+            self.assertEqual(rtsctsVal.pop(), expectedValue)
+
+        d.addCallback(checkArg)
+        return d
+
+
+    def test_address(self):
+        """
+        The address passed to the factory's buildProtocol in the
+        endpoint is a SerialAddress instance.
+        """
+        class TestAddrFactory(protocol.Factory):
+            protocol = basic.LineReceiver
+            _address = None
+            def buildProtocol(self, addr):
+                self._address = addr
+                p = self.protocol()
+                p.factory = self
+                return p
+            def getAddress(self):
+                return self._address
+
+        f = TestAddrFactory()
+
+        class _DummySerialPort(object):
+            def __init__(self, protocol, deviceNameOrPortNumber, reactor,
+                         baudrate, bytesize, parity, stopbits, timeout,
+                         xonxoff, rtscts):
+                self.protocol = protocol
+                self.protocol.makeConnection(self)
+
+        self.patch(serialport, 'SerialPort', _DummySerialPort)
+        d = self.ep.connect(f)
+
+        def checkAddress(proto):
+            self.assertIsInstance(f.getAddress(), SerialAddress)
+
+        d.addCallback(checkAddress)
+        return d
+
+
+    def test_connectFailure(self):
+        """
+        In case of failure, L{SerialPortEndpoint.connect} returns a
+        Deferred that fails.
+        """
+        class _DummySerialPortThatFails(object):
+            def __init__(self, *args):
+                raise Exception
+
+        receivedExceptions = []
+        self.patch(serialport, 'SerialPort', _DummySerialPortThatFails)
+        d = self.ep.connect(SerialFactory())
+        self.assertIsInstance(self.failureResultOf(d).value, Exception)
+
+
+    def test_buildProtocolFailure(self):
+        """
+        In case of failure, L{SerialPortEndpoint.connect} returns a
+        Deferred that fires with a failure.
+        """
+        class FailingSerialFactory(SerialFactory):
+            def buildProtocol(self, addr):
+                raise Exception
+
+        receivedExceptions = []
+        d = self.ep.connect(FailingSerialFactory())
+
+        def checkFailure(failure):
+            receivedExceptions.append(failure.value)
+
+        d.addErrback(checkFailure)
+        self.assertEqual(len(receivedExceptions), 1)
+        self.assertIsInstance(receivedExceptions.pop(), Exception)
+
+
+
 class UNIXEndpointsTestCase(EndpointTestCaseMixin,
                             unittest.TestCase):
     """
diff --git twisted/topfiles/4847.feature twisted/topfiles/4847.feature
new file mode 100644
index 0000000..640baf4
--- /dev/null
+++ twisted/topfiles/4847.feature
@@ -0,0 +1 @@
+twisted.internet.endpoints now provides SerialPortEndpoint, a Serial Port endpoint.
