# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: andrew@puzzling.org-20080728100203-6juqjyzumo2inzwh
# target_branch: bzr+ssh://spiv@bazaar.launchpad.net/%7Emwhudson\
#   /pyflakes/support-lazy-imports/
# testament_sha1: c349ebae13f0052189510bbb1897d91bdbccc23b
# timestamp: 2008-07-28 20:02:20 +1000
# base_revision_id: michael.hudson@canonical.com-20080724010558-\
#   axqthjawnvl27gk3
# 
# Begin patch
=== modified file 'pyflakes/checker.py'
--- pyflakes/checker.py	2008-07-24 01:05:58 +0000
+++ pyflakes/checker.py	2008-07-28 10:02:03 +0000
@@ -4,6 +4,7 @@
 
 import __builtin__
 from compiler import ast
+import re
 
 from pyflakes import messages
 from compiler import ast, transformer
@@ -246,6 +247,17 @@
         if isinstance(self.scope, FunctionScope):
             self.scope.globals.update(dict.fromkeys(node.names))
 
+    def MOD(self, node):
+        if (isinstance(node.left, ast.Const) and 
+            isinstance(node.left.value, basestring) and
+            isinstance(node.right, ast.Tuple)
+            ):
+                argsNeeded = countFormats(node.left.value)
+                argsProvided = len(node.right.nodes)
+                if argsNeeded != argsProvided:
+                    self.report(messages.DoomedFormatString, 
+                                node.lineno, argsNeeded, argsProvided)
+
     def LISTCOMP(self, node):
         for qual in node.quals:
             self.handleNode(qual)
@@ -431,3 +443,14 @@
             self.handleNode(m.node)
             self.walking_lazy_import = False
         self.handleChildren(node)
+
+
+def countFormats(s):
+    pattern = (
+        '%' # percent sign
+        '(?:\\(.*?\\))?' # optional name in parens
+        '[diouxXeEfFgGcrs%]' # conversion type
+        )
+    return len(re.findall(pattern, s))
+
+

=== modified file 'pyflakes/messages.py'
--- pyflakes/messages.py	2008-07-24 01:05:58 +0000
+++ pyflakes/messages.py	2008-07-28 10:02:03 +0000
@@ -83,3 +83,12 @@
     def __init__(self, filename, lineno, name):
         Message.__init__(self, filename, lineno)
         self.message_args = (name,)
+
+
+class DoomedFormatString(Message):
+    message = "format string argument count (%d) doesn't match arguments (%d)"
+    def __init__(self, filename, lineno, args_needed, args_provided):
+        Message.__init__(self, filename, lineno)
+        self.message_args = (args_needed, args_provided)
+
+

# Begin bundle
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
Cd6XuenQuESNapSITEWCKUj/4u5IpwoSEvvhRmA=

