Index: twisted/topfiles/4540.bugfix
===================================================================
--- twisted/topfiles/4540.bugfix	(revision 0)
+++ twisted/topfiles/4540.bugfix	(revision 0)
@@ -0,0 +1 @@
+twisted.names.hosts.searchFileFor has been fixed against refcounting dependency.
\ No newline at end of file
Index: twisted/names/test/test_names.py
===================================================================
--- twisted/names/test/test_names.py	(revision 29567)
+++ twisted/names/test/test_names.py	(working copy)
@@ -599,7 +599,22 @@
         return self.assertFailure(self.resolver.lookupAddress('foueoa'),
                                   dns.DomainError)
 
+    def test_searchFileFor(self):
+        """
+        Tests that searchFileFor parses hosts(5) files.
+        """
+        tmp = self.mktemp()
+        f = open(tmp, 'w')
+        f.write('127.0.1.1	helmut.example.org	helmut\n')
+        f.write('# a comment\n')
+        f.write('::1     localhost ip6-localhost ip6-loopback\n')
+        f.close()
+        self.assertEquals(hosts.searchFileFor(tmp, 'helmut'), '127.0.1.1')
+        self.assertEquals(hosts.searchFileFor(tmp, 'ip6-localhost'), '::1')
+        self.assert_(hosts.searchFileFor(tmp, 'blah') is None)
 
+
+
 class FakeDNSDatagramProtocol(object):
     def __init__(self):
         self.queries = []
Index: twisted/names/hosts.py
===================================================================
--- twisted/names/hosts.py	(revision 29567)
+++ twisted/names/hosts.py	(working copy)
@@ -10,12 +10,18 @@
 from twisted.names import common
 
 def searchFileFor(file, name):
+    """
+    Grep given file, which is in hosts(5) standard for a DNS entry with
+    a given name.
+    """
     try:
         fp = open(file)
     except:
         return None
-
-    lines = fp.readlines()
+    try:
+        lines = fp.readlines()
+    finally:
+        fp.close()
     for line in lines:
         idx = line.find('#')
         if idx != -1:
@@ -27,8 +33,6 @@
             return parts[0]
     return None
 
-
-
 class Resolver(common.ResolverBase, styles.Versioned):
     """A resolver that services hosts(5) format files."""
     #TODO: IPv6 support
