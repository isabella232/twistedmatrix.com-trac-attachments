Index: twisted/python/deprecate.py
===================================================================
--- twisted/python/deprecate.py	(revision 29921)
+++ twisted/python/deprecate.py	(working copy)
@@ -7,12 +7,15 @@
 
 To mark a method or function as being deprecated do this::
 
+    from twisted.python.versions import Version
+    from twisted.python.deprecate import deprecated
+
+    @deprecated(Version("Twisted", 8, 0, 0))
     def badAPI(self, first, second):
         '''
         Docstring for badAPI.
         '''
         ...
-    badAPI = deprecate(Version("Twisted", 8, 0, 0))(badAPI)
 
 The newly-decorated badAPI will issue a warning when called. It will also have
 a deprecation notice appended to its docstring.
Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 29921)
+++ twisted/internet/defer.py	(working copy)
@@ -819,12 +819,12 @@
     There are two important functions involved: L{waitForDeferred}, and
     L{deferredGenerator}.  They are used together, like this::
 
+        @deferredGenerator
         def thingummy():
             thing = waitForDeferred(makeSomeRequestResultingInDeferred())
             yield thing
             thing = thing.getResult()
             print thing #the result! hoorj!
-        thingummy = deferredGenerator(thingummy)
 
     L{waitForDeferred} returns something that you should immediately yield; when
     your generator is resumed, calling C{thing.getResult()} will either give you
@@ -847,6 +847,7 @@
     The L{Deferred} returned from your deferred generator may also errback if your
     generator raised an exception.  For example::
 
+        @deferredGenerator
         def thingummy():
             thing = waitForDeferred(makeSomeRequestResultingInDeferred())
             yield thing
@@ -858,7 +859,6 @@
             else:
                 # will trigger an errback
                 raise Exception('DESTROY ALL LIFE')
-        thingummy = deferredGenerator(thingummy)
 
     Put succinctly, these functions connect deferred-using code with this 'fake
     blocking' style in both directions: L{waitForDeferred} converts from a
@@ -1013,10 +1013,10 @@
     the L{deferredGenerator} function instead, which accomplishes the same
     thing, but with somewhat more boilerplate.  For example::
 
+        @inlineCallBacks
         def thingummy():
             thing = yield makeSomeRequestResultingInDeferred()
             print thing #the result! hoorj!
-        thingummy = inlineCallbacks(thingummy)
 
     When you call anything that results in a L{Deferred}, you can simply yield it;
     your generator will automatically be resumed when the Deferred's result is
@@ -1033,6 +1033,7 @@
     The L{Deferred} returned from your deferred generator may errback if your
     generator raised an exception::
 
+        @inlineCallbacks
         def thingummy():
             thing = yield makeSomeRequestResultingInDeferred()
             if thing == 'I love Twisted':
@@ -1041,7 +1042,6 @@
             else:
                 # will trigger an errback
                 raise Exception('DESTROY ALL LIFE')
-        thingummy = inlineCallbacks(thingummy)
     """
     def unwindGenerator(*args, **kwargs):
         return _inlineCallbacks(None, f(*args, **kwargs), Deferred())
