--- jelly.py-old	2005-02-16 10:16:35.777802392 -0600
+++ jelly.py	2005-02-16 12:28:36.253707032 -0600
@@ -90,7 +90,7 @@
 from types import InstanceType
 from types import NoneType
 from types import ClassType
-import copy
+import copy, datetime
 
 try:
     from types import BooleanType
@@ -433,6 +433,18 @@
                 return ['module', obj.__name__]
             elif objType is BooleanType:
                 return ['boolean', obj and 'true' or 'false']
+            elif objType is datetime.datetime:
+                if obj.tzinfo:
+                    raise NotImplementedError, "Currently can't jelly datetime objects with tzinfo"
+                return ['datetime', '%s %s %s %s %s %s %s' % (obj.year, obj.month, obj.day, obj.hour, obj.minute, obj.second, obj.microsecond)]
+            elif objType is datetime.time:
+                if obj.tzinfo:
+                    raise NotImplementedError, "Currently can't jelly datetime objects with tzinfo"
+                return ['time', '%s %s %s %s' % (obj.hour, obj.minute, obj.second, obj.microsecond)]
+            elif objType is datetime.date:
+                return ['date', '%s %s %s' % (obj.year, obj.month, obj.day)]
+            elif objType is datetime.timedelta:
+                return ['timedelta', '%s %s %s' % (obj.days, obj.seconds, obj.microseconds)]
             elif objType is ClassType or issubclass(type, objType):
                 return ['class', qual(obj)]
             else:
@@ -571,6 +583,19 @@
         else:
             return Unpersistable(exp[0])
 
+    def _unjelly_datetime(self, exp):
+        return datetime.datetime(*map(int, exp[0].split()))
+
+    def _unjelly_date(self, exp):
+        return datetime.date(*map(int, exp[0].split()))
+
+    def _unjelly_time(self, exp):
+        return datetime.time(*map(int, exp[0].split()))
+
+    def _unjelly_timedelta(self, exp):
+        days, seconds, microseconds = map(int, exp[0].split())
+        return datetime.timedelta(days=days, seconds=seconds, microseconds=microseconds)
+
     def unjellyInto(self, obj, loc, jel):
         o = self.unjelly(jel)
         if isinstance(o, NotKnown):
