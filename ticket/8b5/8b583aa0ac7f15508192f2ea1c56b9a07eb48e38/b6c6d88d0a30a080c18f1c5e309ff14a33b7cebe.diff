Index: twisted/trial/test/test_pyunitcompat.py
===================================================================
--- twisted/trial/test/test_pyunitcompat.py	(revision 0)
+++ twisted/trial/test/test_pyunitcompat.py	(revision 0)
@@ -0,0 +1,70 @@
+# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# See LICENSE for details.
+#
+# Maintainer: Jonathan Lange <jml@twistedmatrix.com>
+
+from twisted.trial.unittest import TestCase
+
+pyunit = __import__('unittest')
+
+class TestPyUnitResult(TestCase):
+
+    def test_success(self):
+        class SuccessTest(TestCase):
+            ran = False
+            def test_foo(s):
+                s.ran = True
+        test = SuccessTest('test_foo')
+        result = pyunit.TestResult()
+        test.run(result)
+
+        self.failUnless(test.ran)
+        self.assertEqual(1, result.testsRun)
+        self.failUnless(result.wasSuccessful())
+
+    def test_failure(self):
+        class FailureTest(TestCase):
+            ran = False
+            def test_foo(s):
+                s.ran = True
+                s.fail('boom!')
+        test = FailureTest('test_foo')
+        result = pyunit.TestResult()
+        test.run(result)
+
+        self.failUnless(test.ran)
+        self.assertEqual(1, result.testsRun)
+        self.assertEqual(1, len(result.failures))
+        self.failIf(result.wasSuccessful())
+
+    def test_error(self):
+        class ErrorTest(TestCase):
+            ran = False
+            def test_foo(s):
+                s.ran = True
+                1/0
+        test = ErrorTest('test_foo')
+        result = pyunit.TestResult()
+        test.run(result)
+
+        self.failUnless(test.ran)
+        self.assertEqual(1, result.testsRun)
+        self.assertEqual(1, len(result.errors))
+        self.failIf(result.wasSuccessful())
+
+    def test_setUpError(self):
+        class ErrorTest(TestCase):
+            ran = False
+            def setUp(self):
+                1/0
+            def test_foo(s):
+                s.ran = True
+        test = ErrorTest('test_foo')
+        result = pyunit.TestResult()
+        test.run(result)
+
+        self.failIf(test.ran)
+        self.assertEqual(1, result.testsRun)
+        self.assertEqual(1, len(result.errors))
+        self.failIf(result.wasSuccessful())
+
Index: twisted/trial/unittest.py
===================================================================
--- twisted/trial/unittest.py	(revision 16383)
+++ twisted/trial/unittest.py	(working copy)
@@ -455,6 +455,9 @@
 
     def run(self, result):
         log.msg("--> %s <--" % (self.id()))
+        from twisted.trial import reporter
+        if not isinstance(result, reporter.TestResult):
+            result = PyUnitResultAdapter(result)
         self._timedOut = False
         if self._shared and self not in self.__class__._instances:
             self.__class__._instances.add(self)
@@ -595,6 +598,64 @@
             running.pop()
 
 
+class UnsupportedTrialFeature(Exception):
+    """A feature of twisted.trial was used that pyunit cannot support."""
+
+
+class PyUnitResultAdapter(object):
+    def __init__(self, original):
+        self.original = original
+
+    def _exc_info(self, err):
+        from twisted.trial import reporter
+        if isinstance(err, failure.Failure):
+            # Unwrap the Failure into a exc_info tuple.
+            # XXX: if err.tb is a real traceback and not stringified, we should
+            #      use that.
+            err = (err.type, err.value, None)
+        return err
+
+    def startTest(self, method):
+        self.original.startTest(method)
+
+    def stopTest(self, method):
+        self.original.stopTest(method)
+
+    def addFailure(self, test, fail):
+        self.original.addFailure(test, self._exc_info(fail))
+
+    def addError(self, test, error):
+        self.original.addError(test, self._exc_info(error))
+
+    def _unsupported(self, test, feature, info):
+        self.original.addFailure(
+            test, 
+            (UnsupportedTrialFeature, 
+             UnsupportedTrialFeature(feature, info), 
+             None))
+
+    def addSkip(self, test, reason):
+        self._unsupported(test, 'skip', reason)
+
+    def addUnexpectedSuccess(self, test, todo):
+        self._unsupported(test, 'unexpected success', todo)
+        
+    def addExpectedFailure(self, test, error):
+        self._unsupported(test, 'expected failure', error)
+
+    def addSuccess(self, test):
+        self.original.addSuccess(test)
+
+    def upDownError(self, method, error, warn, printStatus):
+        pass
+
+    def cleanupErrors(self, errs):
+        pass
+    
+    def startSuite(self, name):
+        pass
+
+
 class TestVisitor(object):
     
     def visitCase(self, testCase):
