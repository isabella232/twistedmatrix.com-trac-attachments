Index: twisted/protocols/ftp.py
===================================================================
--- twisted/protocols/ftp.py	(revision 14243)
+++ twisted/protocols/ftp.py	(working copy)
@@ -1802,14 +1802,38 @@
             return None
 
     def queueLogin(self, username, password):
-        """Login: send the username, send the password."""
-        for command in ('USER ' + username,
-                        'PASS ' + password):
-            d = self.queueStringCommand(command, public=0)
+        """Login: send the username, send the password.
+        
+        If the password is C{None}, the PASS command won't be sent.  Also, if
+        the response to the USER command has a response code of 230 (User logged
+        in), then PASS won't be sent either.
+        """
+        # Prepare the USER command
+        deferreds = []
+        userDeferred = self.queueStringCommand('USER ' + username, public=0)
+        deferreds.append(userDeferred)
+        
+        # Prepare the PASS command (if a password is given)
+        if password is not None:
+            passwordCmd = FTPCommand('PASS ' + password, public=0)
+            self.queueCommand(passwordCmd)
+            deferreds.append(passwordCmd.deferred)
+
+            # Avoid sending PASS if the response to USER is 230.
+            # (ref: http://cr.yp.to/ftp/user.html#user)
+            def cancelPasswordIfNotNeeded(response):
+                if response[0].startswith('230'):
+                    # No password needed!
+                    self.actionQueue.remove(passwordCmd)
+                return response
+            userDeferred.addCallback(cancelPasswordIfNotNeeded)
+
+        # Error handling.
+        for deferred in deferreds:
             # If something goes wrong, call fail
-            d.addErrback(self.fail)
+            deferred.addErrback(self.fail)
             # But also swallow the error, so we don't cause spurious errors
-            d.addErrback(lambda x: None)
+            deferred.addErrback(lambda x: None)
 
     def lineReceived(self, line):
         """(Private) Parses the response messages from the FTP server."""
Index: twisted/test/test_ftp.py
===================================================================
--- twisted/test/test_ftp.py	(revision 14243)
+++ twisted/test/test_ftp.py	(working copy)
@@ -530,7 +530,12 @@
     def write(self, bytes):
         pass
 
+class BufferingTransport:
+    buffer = ''
+    def write(self, bytes):
+        self.buffer += bytes
 
+
 class FTPClientBasicTests(unittest.TestCase):
 
     def testGreeting(self):
@@ -586,7 +591,46 @@
              '321',
              '210 Done.'], result[0])
 
+    def testNoPasswordGiven(self):
+        """Passing None as the password avoids sending the PASS command."""
+        # Create a client, and give it a greeting.
+        ftpClient = ftp.FTPClientBasic()
+        ftpClient.transport = BufferingTransport()
+        ftpClient.lineReceived('220 Welcome to Imaginary FTP.')
 
+        # Queue a login with no password
+        ftpClient.queueLogin('bob', None)
+        self.failUnlessEqual('USER bob\r\n', ftpClient.transport.buffer)
+
+        # Clear the test buffer, acknowledge the USER command.
+        ftpClient.transport.buffer = ''
+        ftpClient.lineReceived('200 Hello bob.')
+
+        # The client shouldn't have sent anything more (i.e. it shouldn't have
+        # sent a PASS command).
+        self.failUnlessEqual('', ftpClient.transport.buffer)
+
+    def testNoPasswordNeeded(self):
+        """Receiving a 230 response to USER prevents PASS from being sent."""
+        # Create a client, and give it a greeting.
+        ftpClient = ftp.FTPClientBasic()
+        ftpClient.transport = BufferingTransport()
+        ftpClient.lineReceived('220 Welcome to Imaginary FTP.')
+
+        # Queue a login with no password
+        ftpClient.queueLogin('bob', 'secret')
+        self.failUnlessEqual('USER bob\r\n', ftpClient.transport.buffer)
+
+        # Clear the test buffer, acknowledge the USER command with a 230
+        # response code.
+        ftpClient.transport.buffer = ''
+        ftpClient.lineReceived('230 Hello bob.  No password needed.')
+
+        # The client shouldn't have sent anything more (i.e. it shouldn't have
+        # sent a PASS command).
+        self.failUnlessEqual('', ftpClient.transport.buffer)
+
+
 class PathHandling(unittest.TestCase):
     def testNormalizer(self):
         for inp, outp in [('a', ['a']),
