=== modified file 'twisted/web/soap.py'
--- twisted/web/soap.py	2010-11-05 07:59:48 +0000
+++ twisted/web/soap.py	2010-11-05 12:45:40 +0000
@@ -22,6 +22,20 @@
 from twisted.web import server, resource, client
 from twisted.internet import defer
 
+def withRequest(f, *args, **kwargs):
+    """
+    Pass the request as the first argument to the method.
+    If a method is wrapped with C{withRequest}, the request object is
+    passed as the first argument to that method.
+
+    Example:
+    @withRequest
+    def soap_echo(self, request, s):
+        return s
+    """
+    f.withRequest = True
+    return f
+
 
 class SOAPPublisher(resource.Resource):
     """Publish SOAP methods.
@@ -66,6 +80,9 @@
             self._methodNotFound(request, methodName)
             return server.NOT_DONE_YET
         else:
+            if hasattr(function, "withRequest"):
+                kwargs['request'] = request
+                args.insert(0, request)
             if hasattr(function, "useKeywords"):
                 keywords = {}
                 for k, v in kwargs.items():

=== modified file 'twisted/web/test/test_soap.py'
--- twisted/web/test/test_soap.py	2010-11-05 07:59:48 +0000
+++ twisted/web/test/test_soap.py	2010-11-05 12:45:34 +0000
@@ -14,8 +14,12 @@
     from twisted.web import soap
     SOAPPublisher = soap.SOAPPublisher
 
+from StringIO import StringIO
+
 from twisted.trial import unittest
 from twisted.web import server, error
+from twisted.web.soap import withRequest
+from twisted.web.test.test_web import DummyRequest
 from twisted.internet import reactor, defer
 
 
@@ -52,6 +56,11 @@
     def soap_dict(self, map, key):
         return map[key]
 
+    @withRequest
+    def soap_withRequest(self, request):
+        return request.method # as a proof that request is a request
+
+
 
 class SOAPTestCase(unittest.TestCase):
 
@@ -109,6 +118,24 @@
         self.assertTrue(self.publisher.lookupFunction("fail"))
         self.assertFalse(self.publisher.lookupFunction("foobar"))
 
+class SOAPTestCaseWithRequest(unittest.TestCase):
+
+    def setUp(self):
+        self.resource = Test()
+
+    def test_withRequest(self):
+        request = DummyRequest('/RPC2')
+        request.method = "POST"
+        payload = SOAPpy.SOAPBuilder(method="withRequest").build()
+        request.content = StringIO(payload)
+        def valid(n, request):
+            data = SOAPpy.parseSOAP(request.written[0])
+            result = data.withRequestResponse.Result
+            self.assertEquals(result, 'POST')
+        request.notifyFinish().addCallback(valid, request)
+
+        self.resource.render(request)
+
 if not SOAPpy:
     SOAPTestCase.skip = "SOAPpy not installed"
 

