Index: twisted/internet/endpoints.py
===================================================================
--- twisted/internet/endpoints.py	(revision 41197)
+++ twisted/internet/endpoints.py	(working copy)
@@ -998,66 +998,253 @@
         return defer.succeed(port)
 
 
+@implementer(IPlugin, IStreamClientEndpointStringParser)
+class _TCP4ClientParser(object):
+    """
+    Stream client endpoint string parser for the TCP4ClientEndpoint type.
 
-def _parseTCP(factory, port, interface="", backlog=50):
+    @ivar prefix: See L{IStreamClientEndpointStringParser.prefix}.
     """
-    Internal parser function for L{_parseServer} to convert the string
-    arguments for a TCP(IPv4) stream endpoint into the structured arguments.
+    prefix = "tcp"
 
-    @param factory: the protocol factory being parsed, or C{None}.  (This was a
-        leftover argument from when this code was in C{strports}, and is now
-        mostly None and unused.)
+    def _parseClient(self, reactor, host, port, timeout=30, bindAddress=None):
+        """
+        Internal parser function for L{_parseClient} to convert the string
+        arguments into structured arguments for the L{TCP4ClientEndpoint}
 
-    @type factory: L{IProtocolFactory} or C{NoneType}
+        @param reactor: An L{IReactorTCP} provider.
 
-    @param port: the integer port number to bind
-    @type port: C{str}
+        @param host: A hostname, used when connecting
+        @type host: str
 
-    @param interface: the interface IP to listen on
-    @param backlog: the length of the listen queue
-    @type backlog: C{str}
+        @param port: The port number, used when connecting
+        @type port: int
 
-    @return: a 2-tuple of (args, kwargs), describing  the parameters to
-        L{IReactorTCP.listenTCP} (or, modulo argument 2, the factory, arguments
-        to L{TCP4ServerEndpoint}.
+        @param timeout: The number of seconds to wait before assuming the
+            connection has failed.
+        @type timeout: int
+
+        @param bindAddress: A (host, port) tuple of local address to bind to,
+            or None.
+        @type bindAddress: tuple
+        """
+        return TCP4ClientEndpoint(reactor, host, port, timeout, bindAddress)
+
+
+    def parseStreamClient(self, reactor, *args, **kwargs):
+        # Redirects to another function (self._parseClient), tricks zope.interface
+        # into believing the interface is correctly implemented.
+        kwargs = _parseClientTCP(*args, **kwargs)
+        host = kwargs.pop('host', None)
+        port = kwargs.pop('port', None)
+        timeout = kwargs.pop('timeout', 30)
+        bindAddress = kwargs.pop('bindAddress', None)
+
+        return self._parseClient(reactor, host, port, timeout, bindAddress)
+
+
+
+@implementer(IPlugin, IStreamServerEndpointStringParser)
+class _TCP4ServerParser(object):
     """
-    return (int(port), factory), {'interface': interface,
-                                  'backlog': int(backlog)}
+    Stream server endpoint string parser for the TCP4ServerEndpoint type.
 
+    @ivar prefix: See L{IStreamServerEndpointStringParser.prefix}.
+    """
+    prefix = "tcp"
 
+    def _parseServer(self, reactor, port, backlog=50, interface=''):
+        """
+        Internal parser function for L{_parseServer} to convert the string
+        arguments into structured arguments for the L{TCP4ServerEndpoint}
 
-def _parseUNIX(factory, address, mode='666', backlog=50, lockfile=True):
+        @param reactor: An L{IReactorTCP} provider.
+
+        @param port: The port number used for listening
+        @type port: int
+
+        @param backlog: Size of the listen queue
+        @type backlog: int
+
+        @param interface: The hostname to bind to
+        @type interface: str
+        """
+        port = int(port)
+        backlog = int(backlog)
+        return TCP4ServerEndpoint(reactor, port, backlog, interface)
+
+
+    def parseStreamServer(self, reactor, *args, **kwargs):
+        # Redirects to another function (self._parseServer), tricks zope.interface
+        # into believing the interface is correctly implemented.
+        return self._parseServer(reactor, *args, **kwargs)
+
+
+
+@implementer(IPlugin, IStreamServerEndpointStringParser)
+class _UNIXServerParser(object):
     """
-    Internal parser function for L{_parseServer} to convert the string
-    arguments for a UNIX (AF_UNIX/SOCK_STREAM) stream endpoint into the
-    structured arguments.
+    Stream server endpoint string parser for the UNIXServerEndpoint type.
 
-    @param factory: the protocol factory being parsed, or C{None}.  (This was a
-        leftover argument from when this code was in C{strports}, and is now
-        mostly None and unused.)
+    @ivar prefix: See L{IStreamServerEndpointStringParser.prefix}.
+    """
+    prefix = "unix"
 
-    @type factory: L{IProtocolFactory} or C{NoneType}
+    def _parseServer(self, reactor, address, mode='666', backlog=50, lockfile=True):
+        """
+        Internal parser function for L{_parseServer} to convert the string
+        arguments for a UNIX (AF_UNIX/SOCK_STREAM) stream endpoint into the
+        structured arguments.
 
-    @param address: the pathname of the unix socket
-    @type address: C{str}
+        @param reactor: An L{IReactorUNIX} provider.
 
-    @param backlog: the length of the listen queue
-    @type backlog: C{str}
+        @param address: the pathname of the unix socket
+        @type address: C{str}
 
-    @param lockfile: A string '0' or '1', mapping to True and False
-        respectively.  See the C{wantPID} argument to C{listenUNIX}
+        @param mode: mode to set on the unix socket.  This parameter is
+            deprecated.  Permissions should be set on the directory which
+            contains the UNIX socket.
+        @type mode: C{str}
 
-    @return: a 2-tuple of (args, kwargs), describing  the parameters to
-        L{IReactorTCP.listenUNIX} (or, modulo argument 2, the factory,
-        arguments to L{UNIXServerEndpoint}.
+        @param backlog: the length of the listen queue
+        @type backlog: C{str}
+
+        @param lockfile: A string '0' or '1', mapping to True and False
+            respectively.  See the C{wantPID} argument to C{listenUNIX}
+        """
+        backlog = int(backlog)
+        mode = int(mode, 8)
+        wantPID = bool(int(lockfile))
+        return UNIXServerEndpoint(reactor, address, backlog, mode, wantPID)
+
+
+    def parseStreamServer(self, reactor, *args, **kwargs):
+        # Redirects to another function (self._parseServer), tricks zope.interface
+        # into believing the interface is correctly implemented.
+        return self._parseServer(reactor, *args, **kwargs)
+
+
+
+@implementer(IPlugin, IStreamClientEndpointStringParser)
+class _UNIXClientParser(object):
     """
-    return (
-        (address, factory),
-        {'mode': int(mode, 8), 'backlog': int(backlog),
-         'wantPID': bool(int(lockfile))})
+    Stream client endpoint string parser for the UNIXClientEndpoint type.
 
+    @ivar prefix: See L{IStreamClientEndpointStringParser.prefix}.
+    """
+    prefix = "unix"
 
+    def _parseClient(self, reactor, path, timeout=30, checkPID=0):
+        """
+        @param reactor: An L{IReactorUNIX} provider.
 
+        @param path: The path to the Unix socket file, used when connecting
+        @type path: str
+
+        @param timeout: Number of seconds to wait before assuming the
+            connection has failed.
+        @type timeout: int
+
+        @param checkPID: If True, check for a pid file to verify that a server
+            is listening.
+        @type checkPID: bool
+        """
+        return UNIXClientEndpoint(reactor, path, timeout, checkPID)
+
+
+    def parseStreamClient(self, reactor, *args, **kwargs):
+        # Redirects to another function (self._parseClient), tricks zope.interface
+        # into believing the interface is correctly implemented.
+        kwargs = _parseClientUNIX(*args, **kwargs)
+        path = kwargs.pop('path', None)
+        return self._parseClient(reactor, path, **kwargs)
+
+
+
+@implementer(IPlugin, IStreamServerEndpointStringParser)
+class _SSL4ServerParser(object):
+    """
+    Stream server endpoint string parser for the SSL4ServerEndpoint type.
+
+    @ivar prefix: See L{IStreamServerEndpointStringParser.prefix}.
+    """
+    prefix = "ssl"
+
+    def _parseServer(self, reactor, port, sslContextFactory, backlog=50, interface=''):
+        """
+        @param reactor: An L{IReactorSSL} provider.
+
+        @param port: The port number used for listening
+        @type port: int
+
+        @param sslContextFactory: An instance of
+            L{twisted.internet.ssl.ContextFactory}.
+
+        @param backlog: Size of the listen queue
+        @type backlog: int
+
+        @param interface: The hostname to bind to, defaults to '' (all)
+        @type interface: str
+        """
+        return SSL4ServerEndpoint(reactor, port, sslContextFactory, backlog, interface)
+
+
+    def parseStreamServer(self, reactor, *args, **kwargs):
+        # Redirects to another function (self._parseServer), tricks zope.interface
+        # into believing the interface is correctly implemented.
+        (args, kwargs) = _parseSSL(None, *args, **kwargs)
+        port = args[0]
+        cf = args[2]
+
+        return self._parseServer(reactor, port, cf, **kwargs)
+
+
+
+@implementer(IPlugin, IStreamClientEndpointStringParser)
+class _SSL4ClientParser(object):
+    """
+    Stream client endpoint string parser for the SSL4ClientEndpoint type.
+
+    @ivar prefix: See L{IStreamClientEndpointStringParser.prefix}.
+    """
+    prefix = "ssl"
+
+    def _parseClient(self, reactor, host, port, cf, timeout=30, bindAddress=None):
+        """
+        @param reactor: An L{IReactorSSL} provider.
+
+        @param host: A hostname, used when connecting
+        @type host: str
+
+        @param port: The port number, used when connecting
+        @type port: int
+
+        @param cf: SSL Configuration information as an instance
+            of L{twisted.internet.ssl.ContextFactory}.
+
+        @param timeout: Number of seconds to wait before assuming the
+            connection has failed.
+        @type timeout: int
+
+        @param bindAddress: A (host, port) tuple of local address to bind to,
+            or None.
+        @type bindAddress: tuple
+
+        """
+        return SSL4ClientEndpoint(reactor, host, port, cf, timeout, bindAddress)
+
+    def parseStreamClient(self, reactor, *args, **kwargs):
+        # Redirects to another function (self._parseClient), tricks zope.interface
+        # into believing the interface is correctly implemented.
+        kwargs = _parseClientSSL(*args, **kwargs)
+        host = kwargs.pop('host', None)
+        cf = kwargs.pop('sslContextFactory', None)
+        port = kwargs.pop('port', None)
+        timeout = kwargs.pop('timeout', 30)
+        bindAddress = kwargs.pop('bindAddress', None)
+        return self._parseClient(reactor, host, port, cf, timeout, bindAddress)
+
+
 def _parseSSL(factory, port, privateKey="server.pem", certKey=None,
               sslmethod=None, interface='', backlog=50, extraCertChain=None):
     """
@@ -1248,11 +1435,6 @@
 
 
 
-_serverParsers = {"tcp": _parseTCP,
-                  "unix": _parseUNIX,
-                  "ssl": _parseSSL,
-                  }
-
 _OP, _STRING = range(2)
 
 def _tokenize(description):
@@ -1322,20 +1504,7 @@
     return args, kw
 
 
-# Mappings from description "names" to endpoint constructors.
-_endpointServerFactories = {
-    'TCP': TCP4ServerEndpoint,
-    'SSL': SSL4ServerEndpoint,
-    'UNIX': UNIXServerEndpoint,
-    }
 
-_endpointClientFactories = {
-    'TCP': TCP4ClientEndpoint,
-    'SSL': SSL4ClientEndpoint,
-    'UNIX': UNIXClientEndpoint,
-    }
-
-
 _NO_DEFAULT = object()
 
 def _parseServer(description, factory, default=None):
@@ -1359,6 +1528,9 @@
     @return: a 3-tuple of (plugin or name, arguments, keyword arguments)
     """
     args, kw = _parse(description)
+
+    if 'backlog' in kw:
+        kw['backlog'] = int(kw['backlog'])
     if not args or (len(args) == 1 and not kw):
         deprecationMessage = (
             "Unqualified strport description passed to 'service'."
@@ -1374,32 +1546,22 @@
         # been warned.
         args[0:0] = [default]
     endpointType = args[0]
-    parser = _serverParsers.get(endpointType)
-    if parser is None:
-        # If the required parser is not found in _server, check if
-        # a plugin exists for the endpointType
-        for plugin in getPlugins(IStreamServerEndpointStringParser):
-            if plugin.prefix == endpointType:
-                return (plugin, args[1:], kw)
-        raise ValueError("Unknown endpoint type: '%s'" % (endpointType,))
-    return (endpointType.upper(),) + parser(factory, *args[1:], **kw)
 
+    for plugin in getPlugins(IStreamServerEndpointStringParser):
+        if plugin.prefix == endpointType:
+            return (plugin, args[1:], kw)
 
+    raise ValueError("Unknown endpoint type: '%s'" % (endpointType,))
 
+
+
 def _serverFromStringLegacy(reactor, description, default):
     """
     Underlying implementation of L{serverFromString} which avoids exposing the
     deprecated 'default' argument to anything but L{strports.service}.
     """
-    nameOrPlugin, args, kw = _parseServer(description, None, default)
-    if type(nameOrPlugin) is not str:
-        plugin = nameOrPlugin
-        return plugin.parseStreamServer(reactor, *args, **kw)
-    else:
-        name = nameOrPlugin
-    # Chop out the factory.
-    args = args[:1] + args[2:]
-    return _endpointServerFactories[name](reactor, *args, **kw)
+    plugin, args, kw = _parseServer(description, None, default)
+    return plugin.parseStreamServer(reactor, *args, **kw)
 
 
 
@@ -1511,13 +1673,12 @@
 
     @return: The coerced values as a C{dict}.
     """
-
     if len(args) == 2:
-        kwargs['port'] = int(args[1])
+        kwargs['port'] = args[1]
         kwargs['host'] = args[0]
     elif len(args) == 1:
-        if 'host' in kwargs:
-            kwargs['port'] = int(args[0])
+        if 'host' in kwargs and 'port' not in kwargs:
+            kwargs['port'] = args[0]
         else:
             kwargs['host'] = args[0]
 
@@ -1637,7 +1798,7 @@
 
     @return: The coerced values as a C{dict}.
     """
-    if len(args) == 1:
+    if len(args) == 1 and 'path' not in kwargs:
         kwargs['path'] = args[0]
 
     try:
@@ -1650,14 +1811,8 @@
         pass
     return kwargs
 
-_clientParsers = {
-    'TCP': _parseClientTCP,
-    'SSL': _parseClientSSL,
-    'UNIX': _parseClientUNIX,
-    }
 
 
-
 def clientFromString(reactor, description):
     """
     Construct a client endpoint from a description string.
@@ -1731,16 +1886,15 @@
     args, kwargs = _parse(description)
     aname = args.pop(0)
     name = aname.upper()
+
     for plugin in getPlugins(IStreamClientEndpointStringParser):
         if plugin.prefix.upper() == name:
-            return plugin.parseStreamClient(*args, **kwargs)
-    if name not in _clientParsers:
-        raise ValueError("Unknown endpoint type: %r" % (aname,))
-    kwargs = _clientParsers[name](*args, **kwargs)
-    return _endpointClientFactories[name](reactor, **kwargs)
+            return plugin.parseStreamClient(reactor, *args, **kwargs)
 
+    raise ValueError("Unknown endpoint type: %r" % (aname,))
 
 
+
 def connectProtocol(endpoint, protocol):
     """
     Connect a protocol instance to an endpoint.
Index: twisted/internet/interfaces.py
===================================================================
--- twisted/internet/interfaces.py	(revision 41197)
+++ twisted/internet/interfaces.py	(working copy)
@@ -2480,12 +2480,14 @@
     )
 
 
-    def parseStreamClient(*args, **kwargs):
+    def parseStreamClient(reactor, *args, **kwargs):
         """
         This method is invoked by L{endpoints.clientFromString}, if the type of
         endpoint matches the return value from this
         L{IStreamClientEndpointStringParser}'s C{prefix} method.
 
+        @param reactor: The client endpoint will be constructed with this reactor.
+
         @param args: The string arguments, minus the endpoint type, in the
             endpoint description string, parsed according to the rules
             described in L{endpoints.quoteStringArgument}.  For example, if the
Index: twisted/internet/test/fakeendpoint.py
===================================================================
--- twisted/internet/test/fakeendpoint.py	(revision 41197)
+++ twisted/internet/test/fakeendpoint.py	(working copy)
@@ -25,7 +25,7 @@
 
     implements(IStreamClientEndpointStringParser)
 
-    def parseStreamClient(self, *a, **kw):
+    def parseStreamClient(self, reactor, *a, **kw):
         return StreamClient(self, a, kw)
 
 
@@ -34,7 +34,7 @@
 
     implements(IStreamServerEndpointStringParser)
 
-    def parseStreamServer(self, *a, **kw):
+    def parseStreamServer(self, reactor, *a, **kw):
         return StreamServer(self, a, kw)
 
 
Index: twisted/internet/test/test_endpoints.py
===================================================================
--- twisted/internet/test/test_endpoints.py	(revision 41197)
+++ twisted/internet/test/test_endpoints.py	(working copy)
@@ -2206,6 +2206,7 @@
 
     f = "Factory"
 
+
     def parse(self, *a, **kw):
         """
         Provide a hook for test_strports to substitute the deprecated API.
@@ -2213,31 +2214,53 @@
         return endpoints._parseServer(*a, **kw)
 
 
+    def _lookupParserClass(self, endpointParser):
+        """Provide a way for test methods to lookup a parser class
+           based on input type
+        """
+        parsers = list(getPlugins(
+            interfaces.IStreamServerEndpointStringParser))
+
+        for p in parsers:
+            if isinstance(p, endpointParser):
+                break
+        else:
+            self.fail("Did not find %s server parser in %r" % (endpointParser.prefix, parsers))
+
+        return p
+
+
     def test_simpleTCP(self):
         """
         Simple strings with a 'tcp:' prefix should be parsed as TCP.
         """
+        p = self._lookupParserClass(endpoints._TCP4ServerParser)
+
         self.assertEqual(
             self.parse('tcp:80', self.f),
-            ('TCP', (80, self.f), {'interface': '', 'backlog': 50}))
+            (p, ['80'], {}))
 
 
     def test_interfaceTCP(self):
         """
         TCP port descriptions parse their 'interface' argument as a string.
         """
+        p = self._lookupParserClass(endpoints._TCP4ServerParser)
+
         self.assertEqual(
             self.parse('tcp:80:interface=127.0.0.1', self.f),
-            ('TCP', (80, self.f), {'interface': '127.0.0.1', 'backlog': 50}))
+            (p, ['80'], {'interface': '127.0.0.1' }))
 
 
     def test_backlogTCP(self):
         """
         TCP port descriptions parse their 'backlog' argument as an integer.
         """
+        p = self._lookupParserClass(endpoints._TCP4ServerParser)
+
         self.assertEqual(
             self.parse('tcp:80:backlog=6', self.f),
-            ('TCP', (80, self.f), {'interface': '', 'backlog': 6}))
+            (p, ['80'], {'backlog': 6}))
 
 
     def test_simpleUNIX(self):
@@ -2246,30 +2269,33 @@
         defaults for C{'mode'}, C{'backlog'}, and C{'wantPID'} when passed a
         string with the C{'unix:'} prefix and no other parameter values.
         """
+        p = self._lookupParserClass(endpoints._UNIXServerParser)
+
         self.assertEqual(
             self.parse('unix:/var/run/finger', self.f),
-            ('UNIX', ('/var/run/finger', self.f),
-             {'mode': 0o666, 'backlog': 50, 'wantPID': True}))
+            (p, ['/var/run/finger'], {}))
 
 
     def test_modeUNIX(self):
         """
         C{mode} can be set by including C{"mode=<some integer>"}.
         """
+        p = self._lookupParserClass(endpoints._UNIXServerParser)
+
         self.assertEqual(
             self.parse('unix:/var/run/finger:mode=0660', self.f),
-            ('UNIX', ('/var/run/finger', self.f),
-             {'mode': 0o660, 'backlog': 50, 'wantPID': True}))
+            (p, ['/var/run/finger'], {'mode': '0660'}))
 
 
     def test_wantPIDUNIX(self):
         """
         C{wantPID} can be set to false by included C{"lockfile=0"}.
         """
+        p = self._lookupParserClass(endpoints._UNIXServerParser)
+
         self.assertEqual(
             self.parse('unix:/var/run/finger:lockfile=0', self.f),
-            ('UNIX', ('/var/run/finger', self.f),
-             {'mode': 0o666, 'backlog': 50, 'wantPID': False}))
+            (p, ['/var/run/finger'], {'lockfile': '0'}))
 
 
     def test_escape(self):
@@ -2277,10 +2303,11 @@
         Backslash can be used to escape colons and backslashes in port
         descriptions.
         """
+        p = self._lookupParserClass(endpoints._UNIXServerParser)
+
         self.assertEqual(
             self.parse(r'unix:foo\:bar\=baz\:qux\\', self.f),
-            ('UNIX', ('foo:bar=baz:qux\\', self.f),
-             {'mode': 0o666, 'backlog': 50, 'wantPID': True}))
+            (p, ['foo:bar=baz:qux\\'], {}))
 
 
     def test_quoteStringArgument(self):
@@ -2298,10 +2325,11 @@
         In strports descriptions, '=' in a parameter value does not need to be
         quoted; it will simply be parsed as part of the value.
         """
+        p = self._lookupParserClass(endpoints._UNIXServerParser)
+
         self.assertEqual(
             self.parse(r'unix:address=foo=bar', self.f),
-            ('UNIX', ('foo=bar', self.f),
-             {'mode': 0o666, 'backlog': 50, 'wantPID': True}))
+            (p, [], {'address':'foo=bar'} ))
 
 
     def test_nonstandardDefault(self):
@@ -2310,10 +2338,11 @@
         the third 'mode' argument may be specified to L{endpoints.parse} to
         indicate a default other than TCP.
         """
+        p = self._lookupParserClass(endpoints._UNIXServerParser)
+
         self.assertEqual(
             self.parse('filename', self.f, 'unix'),
-            ('UNIX', ('filename', self.f),
-             {'mode': 0o666, 'backlog': 50, 'wantPID': True}))
+            (p, ['filename'], {}))
 
 
     def test_unknownType(self):
@@ -2506,7 +2535,7 @@
             notAReactor, "fake:hello:world:yes=no:up=down")
         from twisted.plugins.fakeendpoint import fake
         self.assertIs(fakeEndpoint.parser, fake)
-        self.assertEqual(fakeEndpoint.args, (notAReactor, 'hello', 'world'))
+        self.assertEqual(fakeEndpoint.args, ('hello', 'world'))
         self.assertEqual(fakeEndpoint.kwargs, dict(yes='no', up='down'))
 
 
@@ -3024,6 +3053,52 @@
 
 
 
+class TCP4ServerEndpointPluginTests(unittest.TestCase):
+    """
+    Unit tests for the TCP IPv4 stream server endpoint string description
+    parser.
+    """
+    _parserClass = endpoints._TCP4ServerParser
+
+    def test_pluginDiscovery(self):
+        """
+        L{endpoints._TCP4ServerParser} is found as a plugin for
+        L{interfaces.IStreamServerEndpointStringParser} interface.
+        """
+        parsers = list(getPlugins(
+            interfaces.IStreamServerEndpointStringParser))
+        for p in parsers:
+            if isinstance(p, self._parserClass):
+                break
+        else:
+            self.fail(
+                "Did not find TCP4ServerEndpoint parser in %r" % (parsers,))
+
+
+    def test_interface(self):
+        """
+        L{endpoints._TCP4ServerParser} instances provide
+        L{interfaces.IStreamServerEndpointStringParser}.
+        """
+        parser = self._parserClass()
+        self.assertTrue(verifyObject(
+            interfaces.IStreamServerEndpointStringParser, parser))
+
+    def test_stringDescription(self):
+        """
+        L{serverFromString} returns a L{TCP4ServerEndpoint} instance with a
+        'tcp' endpoint string description.
+        """
+        ep = endpoints.serverFromString(
+            MemoryReactor(), "tcp:80:backlog=50:interface=")
+        self.assertIsInstance(ep, endpoints.TCP4ServerEndpoint)
+        self.assertIsInstance(ep._reactor, MemoryReactor)
+        self.assertEqual(ep._port, 80)
+        self.assertEqual(ep._backlog, 50)
+        self.assertEqual(ep._interface, '')
+
+
+
 class TCP6ServerEndpointPluginTests(unittest.TestCase):
     """
     Unit tests for the TCP IPv6 stream server endpoint string description
@@ -3071,6 +3146,103 @@
 
 
 
+class UNIXServerEndpointPluginTests(unittest.TestCase):
+    """
+    Unit tests for the UNIX stream server endpoint string description
+    parser.
+    """
+    _parserClass = endpoints._UNIXServerParser
+
+    def test_pluginDiscovery(self):
+        """
+        L{endpoints._UNIXServerParser} is found as a plugin for
+        L{interfaces.IStreamServerEndpointStringParser} interface.
+        """
+        parsers = list(getPlugins(
+            interfaces.IStreamServerEndpointStringParser))
+        for p in parsers:
+            if isinstance(p, self._parserClass):
+                break
+        else:
+            self.fail(
+                "Did not find UNIXServerEndpoint parser in %r" % (parsers,))
+
+    def test_interface(self):
+        """
+        L{endpoints._UNIXServerParser} instances provide
+        L{interfaces.IStreamServerEndpointStringParser}.
+        """
+        parser = self._parserClass()
+        self.assertTrue(verifyObject(
+            interfaces.IStreamServerEndpointStringParser, parser))
+
+    def test_stringDescription(self):
+        """
+        L{serverFromString} returns a L{UNIXServerEndpoint} instance with a
+        'unix' endpoint string description.
+        """
+        ep = endpoints.serverFromString(
+            MemoryReactor(), "unix:/var/foo/bar:backlog=7:mode=0123:lockfile=1")
+        self.assertIsInstance(ep, endpoints.UNIXServerEndpoint)
+        self.assertIsInstance(ep._reactor, MemoryReactor)
+        self.assertEqual(ep._address, "/var/foo/bar")
+        self.assertEqual(ep._backlog, 7)
+        self.assertEqual(ep._mode, 0o123)
+        self.assertEqual(ep._wantPID, True)
+
+
+
+class SSL4ServerEndpointPluginTests(unittest.TestCase):
+    """
+    Unit tests for the SSL stream server endpoint string description
+    parser.
+    """
+    _parserClass = endpoints._SSL4ServerParser
+
+    def test_pluginDiscovery(self):
+        """
+        L{endpoints._SSL4ServerParser} is found as a plugin for
+        L{interfaces.IStreamServerEndpointStringParser} interface.
+        """
+        parsers = list(getPlugins(
+            interfaces.IStreamServerEndpointStringParser))
+        for p in parsers:
+            if isinstance(p, self._parserClass):
+                break
+        else:
+            self.fail(
+                "Did not find SSL4ServerEndpoint parser in %r" % (parsers,))
+
+    def test_interface(self):
+        """
+        L{endpoints._SSL4ServerParser} instances provide
+        L{interfaces.IStreamServerEndpointStringParser}.
+        """
+        parser = self._parserClass()
+        self.assertTrue(verifyObject(
+            interfaces.IStreamServerEndpointStringParser, parser))
+
+    def test_stringDescription(self):
+        """
+        L{serverFromString} returns a L{SSL4ServerEndpoint} instance with a
+        'ssl' endpoint string description.
+        """
+        reactor = MemoryReactor()
+        ep = endpoints.serverFromString(
+            reactor, "ssl:4321:privateKey=%s" % (escapedPEMPathName,))
+        self.assertIsInstance(ep, endpoints.SSL4ServerEndpoint)
+        self.assertIs(ep._reactor, reactor)
+        self.assertEqual(ep._port, 4321)
+        self.assertEqual(ep._backlog, 50)
+        self.assertEqual(ep._interface, "")
+        self.assertEqual(ep._sslContextFactory.method, SSLv23_METHOD)
+        ctx = ep._sslContextFactory.getContext()
+        self.assertIsInstance(ctx, ContextType)
+        self.assertIsInstance(ep, endpoints.SSL4ServerEndpoint)
+        self.assertIsInstance(ep._reactor, MemoryReactor)
+
+
+
 class StandardIOEndpointPluginTests(unittest.TestCase):
     """
     Unit tests for the Standard I/O endpoint string description parser.
Index: twisted/plugins/twisted_core.py
===================================================================
--- twisted/plugins/twisted_core.py	(revision 41197)
+++ twisted/plugins/twisted_core.py	(working copy)
@@ -2,8 +2,17 @@
 # See LICENSE for details.
 
 
-from twisted.internet.endpoints import _SystemdParser, _TCP6ServerParser, _StandardIOParser
+from twisted.internet.endpoints import (_SystemdParser, _TCP6ServerParser, _StandardIOParser,
+                                        _TCP4ServerParser, _TCP4ClientParser, _UNIXServerParser,
+                                        _UNIXClientParser, _SSL4ServerParser, _SSL4ClientParser)
 
 systemdEndpointParser = _SystemdParser()
+tcp4ServerEndpointParser = _TCP4ServerParser()
 tcp6ServerEndpointParser = _TCP6ServerParser()
 stdioEndpointParser = _StandardIOParser()
+tcp4ClientParser = _TCP4ClientParser()
+unixServerEndpointParser = _UNIXServerParser()
+unixClientEndpointParser = _UNIXClientParser()
+ssl4ServerEndpointParser = _SSL4ServerParser()
+ssl4ClientEndpointParser = _SSL4ClientParser()
+
Index: twisted/test/test_strports.py
===================================================================
--- twisted/test/test_strports.py	(revision 41197)
+++ twisted/test/test_strports.py	(working copy)
@@ -9,10 +9,14 @@
 from twisted.application import strports
 from twisted.application import internet
 from twisted.internet.test.test_endpoints import ParserTestCase
+from twisted.internet import endpoints, interfaces
 from twisted.internet.protocol import Factory
 from twisted.internet.endpoints import TCP4ServerEndpoint, UNIXServerEndpoint
 
+from twisted.python.compat import _PY3
 
+if not _PY3:
+    from twisted.plugin import getPlugins
 
 class DeprecatedParseTestCase(ParserTestCase):
     """
@@ -35,20 +39,45 @@
         """
         Base numeric ports should be parsed as TCP.
         """
-        self.assertEqual(self.parse('80', self.f),
-                         ('TCP', (80, self.f), {'interface':'', 'backlog':50}))
+        _parserClass = endpoints._TCP4ServerParser
 
+        parsers = list(getPlugins(
+            interfaces.IStreamServerEndpointStringParser))
 
+        for p in parsers:
+            if isinstance(p, _parserClass):
+                break
+        else:
+            self.fail("Did not find tcp4 server parser in %r" % (parsers,))
+
+        self.assertEqual(
+            self.parse('80', self.f),
+            (p, ['80'], {}))
+
+
+
     def test_allKeywords(self):
         """
         A collection of keyword arguments with no prefixed type, like 'port=80',
         will be parsed as keyword arguments to 'tcp'.
         """
-        self.assertEqual(self.parse('port=80', self.f),
-                         ('TCP', (80, self.f), {'interface':'', 'backlog':50}))
+        _parserClass = endpoints._TCP4ServerParser
 
+        parsers = list(getPlugins(
+            interfaces.IStreamServerEndpointStringParser))
 
+        for p in parsers:
+            if isinstance(p, _parserClass):
+                break
+        else:
+            self.fail("Did not find tcp4 server parser in %r" % (parsers,))
 
+        self.assertEqual(
+            self.parse('port=80', self.f),
+            (p, [], {'port': '80'}))
+
+
+
 class ServiceTestCase(TestCase):
     """
     Tests for L{strports.service}.
@@ -131,3 +160,5 @@
         self.assertEqual(len(warnings), 1)
 
 
+if _PY3:
+    del (DeprecatedParseTestCase.test_simpleNumeric, DeprecatedParseTestCase.test_allKeywords,)
\ No newline at end of file
Index: twisted/web/test/test_tap.py
===================================================================
--- twisted/web/test/test_tap.py	(revision 41197)
+++ twisted/web/test/test_tap.py	(working copy)
@@ -10,7 +10,7 @@
 from twisted.python.usage import UsageError
 from twisted.python.filepath import FilePath
 from twisted.internet.interfaces import IReactorUNIX
-from twisted.internet import reactor
+from twisted.internet import reactor, endpoints, interfaces
 from twisted.python.threadpool import ThreadPool
 from twisted.trial.unittest import TestCase
 from twisted.application import strports
@@ -23,7 +23,12 @@
 from twisted.web.twcgi import CGIScript
 from twisted.web.script import PythonScript
 
+from twisted.python.compat import _PY3
 
+if not _PY3:
+    from twisted.plugin import getPlugins
+
+
 from twisted.spread.pb import PBServerFactory
 
 application = object()
@@ -140,9 +145,19 @@
         options.parseOptions(['--personal'])
         path = os.path.expanduser(
             os.path.join('~', UserDirectory.userSocketName))
+
+        parsers = list(getPlugins(
+            interfaces.IStreamServerEndpointStringParser))
+
+        for p in parsers:
+            if isinstance(p, endpoints._UNIXServerParser):
+                break
+        else:
+            self.fail("Did not find unix server parser in %r" % (parsers,))
+
         self.assertEqual(
             strports.parse(options['port'], None)[:2],
-            ('UNIX', (path, None)))
+            (p, [path]))
 
     if not IReactorUNIX.providedBy(reactor):
         test_defaultPersonalPath.skip = (
@@ -154,11 +169,22 @@
         If the I{--port} option is not specified, L{Options} defaults the port
         to C{8080}.
         """
+        _parserClass = endpoints._TCP4ServerParser
+
+        parsers = list(getPlugins(
+            interfaces.IStreamServerEndpointStringParser))
+
+        for p in parsers:
+            if isinstance(p, _parserClass):
+                break
+        else:
+            self.fail("Did not find tcp4 server parser in %r" % (parsers,))
+
         options = Options()
         options.parseOptions([])
         self.assertEqual(
             strports.parse(options['port'], None)[:2],
-            ('TCP', (8080, None)))
+            (p, ['8080']))
 
 
     def test_wsgi(self):
@@ -194,3 +220,6 @@
             exc = self.assertRaises(
                 UsageError, options.parseOptions, ['--wsgi', name])
             self.assertEqual(str(exc), "No such WSGI application: %r" % (name,))
+
+if _PY3:
+    del (ServiceTests.test_defaultPersonalPath,)
\ No newline at end of file
