diff -r 2c7f34418f4c twisted/cred/digest.py
--- a/twisted/cred/digest.py	Fri Mar 16 18:12:07 2007 +0100
+++ b/twisted/cred/digest.py	Wed May 30 13:59:23 2007 +0200
@@ -11,11 +11,6 @@ http://tools.ietf.org/html/rfc2831
 http://tools.ietf.org/html/rfc2831
 http://tools.ietf.org/html/rfc2069
 """
-
-from twisted.cred import credentials, sasl
-from twisted.internet import reactor
-
-from zope.interface import implements, Interface, Attribute
 
 import time
 import os
@@ -23,6 +18,12 @@ import sha
 import sha
 import random
 import weakref
+
+from zope.interface import implements, Interface, Attribute
+
+from twisted.cred import credentials, sasl
+from twisted.internet import reactor
+
 try:
     set
 except NameError:
@@ -43,7 +44,8 @@ def secureRandom(nbytes):
     @rtype: C{str}.
     """
     try:
-        # NOTE: os.urandom is slow on some platforms (10x slower than getrandbits here)
+        # NOTE: os.urandom is slow on some platforms (10x slower than
+        # getrandbits here on an Ubuntu box)
         bytes = os.urandom(nbytes)
     except (AttributeError, NotImplementedError):
         # Why getrandbits() doesn't simply return bytes is beyond me...
@@ -101,7 +103,7 @@ def parseChallenge(challenge):
     """
     Parses a digest challenge.
 
-    @param challenge: the string representation of the digest challenge or response.
+    @param challenge: the string representation of the digest challenge.
     @type challenge: C{str}.
     @return: dictionary of parsed fields.
     @rtype: C{dict}.
@@ -118,7 +120,7 @@ def parseResponse(response):
     """
     Parses a digest response.
 
-    @param response: the string representation of the digest challenge or response.
+    @param response: the string representation of the digest response.
     @type response: C{str}.
     @return: dictionary of parsed fields.
     @rtype: C{dict}.
@@ -470,10 +472,7 @@ class DigestedCredentials(object):
     Credentials from a SASL Digest response.
     """
 
-    implements(credentials.IUsernameHashedPassword, sasl.IAuthzID,
-               IUsernameDigestHash)
-    # Needs fixing cred.portal bug with inherited interfaces first
-    #implements(sasl.ISASLCredentials, IUsernameDigestHash)
+    implements(sasl.ISASLCredentials, IUsernameDigestHash)
 
     def __init__(self, mechanism, response, method=None, bodyHash=None):
         self.mechanism = mechanism
diff -r 2c7f34418f4c twisted/cred/plain.py
--- a/twisted/cred/plain.py	Fri Mar 16 18:12:07 2007 +0100
+++ b/twisted/cred/plain.py	Wed May 30 13:52:16 2007 +0200
@@ -9,9 +9,9 @@ http://tools.ietf.org/html/rfc4616
 """
 
 
+from zope.interface import implements
+
 from twisted.cred import credentials, sasl
-
-from zope.interface import implements
 
 
 def _encode(s, charset):
@@ -25,9 +25,7 @@ class PlainCredentials(object):
     Credentials from a SASL PLAIN response.
     """
 
-    implements(credentials.IUsernamePassword, sasl.IAuthzID)
-    # Needs fixing cred.portal bug with inherited interfaces first
-    #implements(credentials.IUsernamePassword, sasl.ISASLCredentials)
+    implements(credentials.IUsernamePassword, sasl.ISASLCredentials)
 
     def __init__(self, username, password, authzid=None):
         self.username = username
@@ -42,6 +40,10 @@ class SASLPlainResponder(object):
 class SASLPlainResponder(object):
     """
     An SASL PLAIN authentication responder.
+
+    @cvar charset: the charset for conversion to/from unicode (should be
+        'utf-8')
+    @type charset: C{str}
     """
     implements(sasl.ISASLResponder)
 
@@ -111,7 +113,8 @@ class SASLPlainChallenger(object):
             authzid, username, password = map(lambda s: s.decode(self.charset),
                 [authzid, username, password])
         except UnicodeDecodeError:
-            raise sasl.InvalidResponse("Cannot decode SASL PLAIN response to %s." % self.charset)
+            raise sasl.InvalidResponse(
+                "Cannot decode SASL PLAIN response to %s." % self.charset)
         return PlainCredentials(username, password, authzid)
 
     def getChallenge(self):
diff -r 2c7f34418f4c twisted/cred/sasl.py
--- a/twisted/cred/sasl.py	Fri Mar 16 18:12:07 2007 +0100
+++ b/twisted/cred/sasl.py	Wed May 30 13:40:22 2007 +0200
@@ -1,12 +1,14 @@
 # Copyright (c) 2007 Twisted Matrix Laboratories.
 # See LICENSE for details.
 """
-Interfaces for SASL mechanisms.
+Interfaces for SASL mechanisms as described in RFC 4422.
+
+http://tools.ietf.org/html/rfc4422
 """
 
+from zope.interface import Interface
+
 from twisted.cred import credentials, error
-
-from zope.interface import Interface
 
 
 class SASLError(error.LoginFailed):
@@ -40,9 +42,10 @@ class IAuthzID(Interface):
     """
     I encapsulate an authorization ID.
 
-    This credential is used when an authentication mechanism optionally provides
-    an authorization ID as part as the authentication process. This authorization
-    ID can be checked and used so as to decide which identity is requested.
+    This credential is used when an authentication mechanism optionally
+    provides an authorization ID as part as the authentication process.
+    This authorization ID can be checked and used so as to decide which
+    identity is requested.
 
     @type authzid: C{str} or None
     @ivar authzid: optional authorization ID.
@@ -84,17 +87,16 @@ class FinalChallenge(ChallengeType):
 
 class ISASLResponder(Interface):
     """
-    An SASL responder responds to challenges sent by an auth server.
-
-    Note: the "method" and "body" parameters for response-getting methods
-    are optional, they are only useful for certain pre-SASL authentication
-    mechanisms (e.g. HTTP Digest).
+    An SASL responder responds to challenges sent by an SASL challenger speaking
+    to us via an SASL-enabled protocol.
     """
 
     def getInitialResponse(uri):
         """
         Get the initial client response, if defined for this mechanism.
 
+        @param uri: the protocol-dependent URI to authenticate against.
+        @type uri: C{str}.
         @return: initial client response string, or None.
         @rtype: C{str}.
         """
@@ -102,7 +104,8 @@ class ISASLResponder(Interface):
     def getResponse(challenge, uri):
         """
         Process a server challenge.
-        Returns a tuple of the challenge type and the response to be sent (if any).
+        Returns a tuple of the challenge type and the response to be sent
+        (if any).
         The challenge type gives the protocol a hint as to what policy to adopt:
         - if instance of InitialChallenge, there was no previous successful
           authentication. If it is the second InitialChallenge in a row, then
@@ -115,7 +118,7 @@ class ISASLResponder(Interface):
 
         @param challenge: server challenge.
         @type challenge: C{str}.
-        @param uri: the URI to authenticate against.
+        @param uri: the protocol-dependent URI to authenticate against.
         @type uri: C{str}.
         @return: tuple of L{ChallengeType}, (C{str} or None).
         """
@@ -123,7 +126,8 @@ class ISASLResponder(Interface):
 
 class ISASLChallenger(Interface):
     """
-    An SASL challenger generates challenges and processes responses from a client.
+    An SASL challenger generates challenges and processes responses from a
+    client.
     """
 
     def processResponse(response):
@@ -149,8 +153,8 @@ class ISASLChallenger(Interface):
 
     def getRenewedChallenge(response):
         """
-        Get a renewed challenge to send the client (i.e. when received a response
-        to an expired challenge).
+        Get a renewed challenge to send the client (i.e. when received a
+        response to an expired challenge).
 
         @param response: response received to the previous challenge.
         @type response: C{str}.
@@ -158,15 +162,16 @@ class ISASLChallenger(Interface):
         @rtype: C{str}.
         """
 
-    def getSuccessfulChallenge(self, response, credentials):
+    def getSuccessfulChallenge(response, credentials):
         """
         Get the final challenge, i.e. when auth when successful.
-        Returns None if the particular SASL mechanism doesn't define a final challenge.
+        Returns None if the particular SASL mechanism doesn't define a final
+        challenge.
 
         @param response: latest successful response.
         @type response: C{str}.
-        @param credentials: credentials of the successful response (as returned by
-            processResponse()).
+        @param credentials: credentials of the successful response (as returned
+            by processResponse()).
         @type credentials: L{ISASLCredentials}.
         @return: server challenge.
         @rtype: C{str}.
diff -r 2c7f34418f4c twisted/test/test_digest.py
--- a/twisted/test/test_digest.py	Fri Mar 16 18:12:07 2007 +0100
+++ b/twisted/test/test_digest.py	Wed May 30 14:26:10 2007 +0200
@@ -1,19 +1,23 @@
 # Copyright (c) 2007 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from twisted.internet import task
-from twisted.trial import unittest
-from twisted.cred import error, sasl, digest
+"""
+Test cases for twisted.cred.digest
+"""
 
 import os
 import random
 import time
 
+from twisted.internet import task
+from twisted.trial import unittest
+from twisted.cred import sasl, digest
+
 # XXX see http://jakarta.apache.org/commons/httpclient/xref-test/org/apache/commons/httpclient/auth/TestDigestAuth.html
 # for inspiration?
 
 
-# From http://rfc.net/rfc2617.html#p6
+# From http://tools.ietf.org/html/rfc2617#section-3.5
 quotedWWWChallenge = """realm="testrealm@host.com", \
 qop="auth,auth-int", \
 nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093", \
@@ -58,20 +62,27 @@ opaque="00e04875776e15b" """
 
 # an SASL challenge with qop=auth-int
 # inspired from http://www.sendmail.org/~ca/email/authrealms.html
-# XXX there was no realm in the original example challenge...
 chal4 = """nonce="AJRUc5Jx0UQbv5SJ9FoyUnaZpqZIHDhLTU+Awn/K0Uw=",\
 qop="auth-int,auth-conf",charset=utf-8,algorithm=md5-sess"""
 
 resp4 = """username="test",realm="wiz.example.com",\
 nonce="AJRUc5Jx0UQbv5SJ9FoyUnaZpqZIHDhLTU+Awn/K0Uw=",\
 cnonce="AJRUc5Jx0UQbv5SJ9FoyUnaZpqZIHDhLTU+Awn/K0Uw=",\
-nc=00000001,qop=auth-int,charset=utf-8,digest-uri="smtp/localhost.sendmail.com.",
+nc=00000001,qop=auth-int,charset=utf-8,\
+digest-uri="smtp/localhost.sendmail.com.",\
 response=0e7cfcae717eeac972fc9d5606a1083d"""
 
 
 
 class SecureRandomTestCase(unittest.TestCase):
+    """
+    Test secure random number generation.
+    """
+
     def _check(self):
+        """
+        Check secureRandom behaviour.
+        """
         for nbytes in range(17, 25):
             s = digest.secureRandom(nbytes)
             self.assertEquals(len(s), nbytes)
@@ -135,7 +146,14 @@ class SecureRandomTestCase(unittest.Test
 
 
 class ChallengeParseTestCase(unittest.TestCase):
+    """
+    Test cases for the parseChallenge function.
+    """
+
     def _roundTrip(self, fields):
+        """
+        Do an unparse/parse roundtrip and check equality.
+        """
         chal = digest.unparseChallenge(**fields)
         f = digest.parseChallenge(chal)
         self.assertEquals(f, fields)
@@ -234,7 +252,14 @@ class ChallengeParseTestCase(unittest.Te
         })
 
 class ResponseParseTestCase(unittest.TestCase):
+    """
+    Test cases for the parseResponse function.
+    """
+
     def _roundTrip(self, fields):
+        """
+        Do an unparse/parse roundtrip and check equality.
+        """
         resp = digest.unparseResponse(**fields)
         f = digest.parseResponse(resp)
         self.assertEquals(f, fields)
@@ -277,6 +302,10 @@ class ResponseParseTestCase(unittest.Tes
 
 
 class HTTPMechanismTestCase(unittest.TestCase):
+    """
+    Test cases for the HTTPDigestMechanism class.
+    """
+
     def test_responseFromPassword(self):
         """
         Generate digest response from password.
@@ -288,12 +317,17 @@ class HTTPMechanismTestCase(unittest.Tes
         self.assertEquals(r, "6629fae49393a05397450978507c4ef1")
 
 class SASLMechanismTestCase(unittest.TestCase):
+    """
+    Test cases for the SASLDigestMechanism class.
+    """
+
     def test_responseFromPassword(self):
         """
         Generate digest response from password.
         """
         fields = digest.parseChallenge(chal1)
-        mech = digest.SASLDigestMechanism("chris", "imap/elwood.innosoft.com", fields)
+        mech = digest.SASLDigestMechanism(
+            "chris", "imap/elwood.innosoft.com", fields)
         mech.setClientParams("OA6MHXh6VqTrRk", "00000001", "auth")
         r = mech.getResponseFromPassword("secret")
         self.assertEquals(r, "d388dad90d4bbd760a152321f2143af7")
@@ -307,7 +341,15 @@ class SASLMechanismTestCase(unittest.Tes
 #
 
 class _BaseResponderTestCase(object):
+    """
+    Base class for {SASL,HTTP}DigestResponder classes.
+    """
+
     def _checkResponseToChallenge(self, resp, chal, checkDict):
+        """
+        Given a responder and a challenge, checks its response contains the
+        expected field values.
+        """
         f2 = digest.parseResponse(resp)
         f = digest.parseChallenge(chal)
         for s in 'nonce', 'realm', 'opaque':
@@ -322,6 +364,10 @@ class _BaseResponderTestCase(object):
 
 
 class HTTPResponderTestCase(_BaseResponderTestCase, unittest.TestCase):
+    """
+    Test cases for the HTTPDigestResponder class.
+    """
+
     def test_latinUsername(self):
         """
         Username with non-ASCII characters and no charset parameter.
@@ -334,13 +380,15 @@ class HTTPResponderTestCase(_BaseRespond
         responder = digest.HTTPDigestResponder(
             username=u"andr\u00e9", password="Circle Of Life")
         responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(chal2, uri="/dir/index.html", method="GET")
+        chalType, unparsed = responder.getResponse(chal2,
+            uri="/dir/index.html", method="GET")
         f = self._checkResponseToChallenge(unparsed, chal2, checkDict)
         # Already encoded username
         responder = digest.HTTPDigestResponder(
             username="andr\xe9", password="Circle Of Life")
         responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(chal2, uri="/dir/index.html", method="GET")
+        chalType, unparsed = responder.getResponse(chal2,
+            uri="/dir/index.html", method="GET")
         f2 = self._checkResponseToChallenge(unparsed, chal2, checkDict)
         self.assertEquals(f['response'], f2['response'])
 
@@ -361,11 +409,13 @@ class HTTPResponderTestCase(_BaseRespond
         responder = digest.HTTPDigestResponder(
             username="Mufasa", password="Circle Of Life")
         responder.cnonce = "0a4f113b"
-        chalType, unparsed = responder.getResponse(chal2, uri="/dir/index.html", method="GET")
+        chalType, unparsed = responder.getResponse(chal2,
+            uri="/dir/index.html", method="GET")
         self.assertTrue(isinstance(chalType, sasl.InitialChallenge))
         self._checkResponseToChallenge(unparsed, chal2, checkDict)
         # Subsequent auth increments nc
-        chalType, unparsed = responder.getResponse(chal2, uri="/dir/index.html", method="GET")
+        chalType, unparsed = responder.getResponse(chal2,
+            uri="/dir/index.html", method="GET")
         self.assertTrue(isinstance(chalType, sasl.InitialChallenge))
         checkDict['nc'] = "00000002"
         del checkDict['response']
@@ -388,20 +438,27 @@ class HTTPResponderTestCase(_BaseRespond
         }
         responder = digest.HTTPDigestResponder(
             username="robobob5003", password="spameggs")
-        chalType, unparsed = responder.getResponse(chal3, uri="sip:voip.wengo.fr", method="REGISTER")
+        chalType, unparsed = responder.getResponse(chal3,
+            uri="sip:voip.wengo.fr", method="REGISTER")
         self.assertTrue(isinstance(chalType, sasl.InitialChallenge))
         self._checkResponseToChallenge(unparsed, chal3, checkDict)
         # Subsequent auth returns same response
-        chalType, unparsed = responder.getResponse(chal3, uri="sip:voip.wengo.fr", method="REGISTER")
+        chalType, unparsed = responder.getResponse(chal3,
+            uri="sip:voip.wengo.fr", method="REGISTER")
         self.assertTrue(isinstance(chalType, sasl.InitialChallenge))
         self._checkResponseToChallenge(unparsed, chal3, checkDict)
 
 class SASLResponderTestCase(_BaseResponderTestCase, unittest.TestCase):
+    """
+    Test cases for the SASLDigestResponder class.
+    """
+
     def test_noAuthzid(self):
         """
         No authzid in response by default.
         """
-        responder = digest.SASLDigestResponder(username="chris", password="secret")
+        responder = digest.SASLDigestResponder(
+            username="chris", password="secret")
         chalType, unparsed = responder.getResponse(chal1, uri="/")
         f = digest.parseResponse(unparsed)
         self.assertEquals(f.get('authzid'), None)
@@ -410,17 +467,17 @@ class SASLResponderTestCase(_BaseRespond
         """
         Authzid in response if specified.
         """
-        responder = digest.SASLDigestResponder(username="chris", password="secret",
-            authzid="paul")
+        responder = digest.SASLDigestResponder(
+            username="chris", password="secret", authzid="paul")
         chalType, unparsed = responder.getResponse(chal1, uri="/")
         f = digest.parseResponse(unparsed)
         self.assertEquals(f.get('authzid'), "paul")
 
     def test_latinUsernameAndPassword(self):
         """
-        Username/password with iso-8859-1 characters and charset=utf-8 parameter.
-        The username will be encoded in utf-8 in the response, but its hash will
-        be taken in iso-8859-1 form. Weird :-)
+        Username/password with iso-8859-1 characters and charset=utf-8 param.
+        The username will be encoded in utf-8 in the response, but its hash
+        will be taken in iso-8859-1 form. Weird :-)
         """
         checkDict = {
             'charset': 'utf-8',
@@ -430,19 +487,22 @@ class SASLResponderTestCase(_BaseRespond
         responder = digest.SASLDigestResponder(
             username=u"andr\u00e9", password=u"h\u00e9")
         responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(chal1, uri="/dir/index.html")
+        chalType, unparsed = responder.getResponse(
+            chal1, uri="/dir/index.html")
         f = self._checkResponseToChallenge(unparsed, chal1, checkDict)
         # ISO-8859-1 encoded username and password
         responder = digest.SASLDigestResponder(
             username="andr\xe9", password="h\xe9")
         responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(chal1, uri="/dir/index.html")
+        chalType, unparsed = responder.getResponse(
+            chal1, uri="/dir/index.html")
         f2 = digest.parseResponse(unparsed)
         self.assertEquals(f['response'], f2['response'])
 
     def test_unicodeUsernameAndPassword(self):
         """
-        Username/password with non iso-8859-1 characters and charset=utf-8 parameter.
+        Username/password with non iso-8859-1 characters and charset=utf-8
+        parameter.
         """
         checkDict = {
             'charset': 'utf-8',
@@ -452,13 +512,15 @@ class SASLResponderTestCase(_BaseRespond
         responder = digest.SASLDigestResponder(
             username=u"andr\u00e9", password=u"\u0101")
         responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(chal1, uri="/dir/index.html")
+        chalType, unparsed = responder.getResponse(
+            chal1, uri="/dir/index.html")
         f = self._checkResponseToChallenge(unparsed, chal1, checkDict)
         # Already encoded username and password (UTF-8)
         responder = digest.SASLDigestResponder(
             username="andr\xc3\xa9", password="\xc4\x81")
         responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(chal1, uri="/dir/index.html")
+        chalType, unparsed = responder.getResponse(
+            chal1, uri="/dir/index.html")
         f2 = self._checkResponseToChallenge(unparsed, chal1, checkDict)
         self.assertEquals(f['response'], f2['response'])
 
@@ -476,13 +538,16 @@ class SASLResponderTestCase(_BaseRespond
             'username': "chris",
             'response': "d388dad90d4bbd760a152321f2143af7",
         }
-        responder = digest.SASLDigestResponder(username="chris", password="secret")
+        responder = digest.SASLDigestResponder(
+            username="chris", password="secret")
         responder.cnonce = "OA6MHXh6VqTrRk"
-        chalType, unparsed = responder.getResponse(chal1, uri="imap/elwood.innosoft.com")
+        chalType, unparsed = responder.getResponse(chal1,
+            uri="imap/elwood.innosoft.com")
         self.assertTrue(isinstance(chalType, sasl.InitialChallenge))
         self._checkResponseToChallenge(unparsed, chal1, checkDict)
         # Subsequent auth increments nc
-        chalType, unparsed = responder.getResponse(chal1, uri="imap/elwood.innosoft.com")
+        chalType, unparsed = responder.getResponse(chal1,
+            uri="imap/elwood.innosoft.com")
         self.assertTrue(isinstance(chalType, sasl.InitialChallenge))
         checkDict['nc'] = "00000002"
         del checkDict['response']
@@ -493,19 +558,22 @@ class SASLResponderTestCase(_BaseRespond
         """
         Generate rspauth for algorithm=md5-sess and qop=auth.
         """
-        responder = digest.SASLDigestResponder(username="chris", password="secret")
+        responder = digest.SASLDigestResponder(username="chris",
+            password="secret")
         responder.cnonce = "OA6MHXh6VqTrRk"
         responder.getResponse(chal1, uri="imap/elwood.innosoft.com")
-        chalType, unparsed = responder.getResponse(final1, uri="imap/elwood.innosoft.com")
+        chalType, unparsed = responder.getResponse(final1,
+            uri="imap/elwood.innosoft.com")
         self.assertTrue(isinstance(chalType, sasl.FinalChallenge))
         self.assertTrue(unparsed is None)
         # Bad rspauth
-        self.assertRaises(error.LoginFailed, responder.getResponse,
+        self.assertRaises(sasl.FailedChallenge, responder.getResponse,
             "rspauth=0", uri="imap/elwood.innosoft.com")
 
     def test_respondMD5SessAuthInt(self):
         """
-        Generate response for algorithm=md5-sess, qop=auth-int, and without realm.
+        Generate response for algorithm=md5-sess, qop=auth-int, and
+        without realm.
         """
         checkDict = {
             'charset': "utf-8",
@@ -517,14 +585,16 @@ class SASLResponderTestCase(_BaseRespond
             'username': "test",
             'response': "780c0451303666e1ea9a24de7b5eb08b",
         }
-        responder = digest.SASLDigestResponder(username="test", password="tEst42",
-            realm="wiz.example.com")
+        responder = digest.SASLDigestResponder(username="test",
+            password="tEst42", realm="wiz.example.com")
         responder.cnonce = "AJRUc5Jx0UQbv5SJ9FoyUnaZpqZIHDhLTU+Awn/K0Uw="
-        chalType, unparsed = responder.getResponse(chal4, uri="smtp/localhost.sendmail.com.")
+        chalType, unparsed = responder.getResponse(chal4,
+            uri="smtp/localhost.sendmail.com.")
         self.assertTrue(isinstance(chalType, sasl.InitialChallenge))
         self._checkResponseToChallenge(unparsed, chal4, checkDict)
         # Subsequent auth increments nc
-        chalType, unparsed = responder.getResponse(chal4, uri="smtp/localhost.sendmail.com.")
+        chalType, unparsed = responder.getResponse(chal4,
+            uri="smtp/localhost.sendmail.com.")
         self.assertTrue(isinstance(chalType, sasl.InitialChallenge))
         checkDict['nc'] = "00000002"
         del checkDict['response']
@@ -535,18 +605,20 @@ class SASLResponderTestCase(_BaseRespond
         """
         Default responder realm overriden by realm in challenge.
         """
-        responder = digest.SASLDigestResponder(username="chris", password="secret",
-            realm="example.org")
+        responder = digest.SASLDigestResponder(username="chris",
+            password="secret", realm="example.org")
         responder.cnonce = "OA6MHXh6VqTrRk"
-        chalType, unparsed = responder.getResponse(chal1, uri="imap/elwood.innosoft.com")
+        chalType, unparsed = responder.getResponse(chal1,
+            uri="imap/elwood.innosoft.com")
         self._checkResponseToChallenge(unparsed, chal1, {})
 
     def test_noRealm(self):
         """
         No realm in challenge and no default realm in responder either.
         """
-        responder = digest.SASLDigestResponder(username="test", password="tEst42")
-        self.assertRaises(error.LoginFailed, responder.getResponse,
+        responder = digest.SASLDigestResponder(username="test",
+            password="tEst42")
+        self.assertRaises(sasl.InvalidChallenge, responder.getResponse,
             chal4, uri="smtp/localhost.sendmail.com.")
 
 
@@ -556,6 +628,10 @@ class SASLResponderTestCase(_BaseRespond
 #
 
 class StaticTimeSASLChallenger(digest.SASLDigestChallenger):
+    """
+    An SASLDigestChallenger which is bound to a deterministic clock.
+    """
+
     def __init__(self, *args, **kargs):
         digest.SASLDigestChallenger.__init__(self, *args, **kargs)
         self._clock = task.Clock()
@@ -564,6 +640,10 @@ class StaticTimeSASLChallenger(digest.SA
         return self._clock.seconds()
 
 class StaticTimeHTTPChallenger(digest.HTTPDigestChallenger):
+    """
+    An HTTPDigestChallenger which is bound to a deterministic clock.
+    """
+
     def __init__(self, *args, **kargs):
         digest.HTTPDigestChallenger.__init__(self, *args, **kargs)
         self._clock = task.Clock()
@@ -572,6 +652,10 @@ class StaticTimeHTTPChallenger(digest.HT
         return self._clock.seconds()
 
 class _BaseChallengerTestCase(object):
+    """
+    Base class for {HTTP,SASL}DigestChallenger test cases.
+    """
+
     def test_freshNonce(self):
         """
         Accept a fresh nonce.
@@ -605,7 +689,8 @@ class _BaseChallengerTestCase(object):
         c._clock.advance(time.time())
         nonce = c.generateNonce()
         c._clock.advance(- c.CHALLENGE_LIFETIME_SECS * 0.5)
-        self.assertRaises(error.LoginFailed, c.acceptNonce, nonce, "00000001")
+        self.assertRaises(sasl.InvalidResponse,
+            c.acceptNonce, nonce, "00000001")
 
     def test_fakeNonce(self):
         """
@@ -613,8 +698,10 @@ class _BaseChallengerTestCase(object):
         """
         c = self.challengerClass("example.com")
         nonce = c.generateNonce()
-        self.assertRaises(error.LoginFailed, c.acceptNonce, nonce + "1", "00000001")
-        self.assertRaises(error.LoginFailed, c.acceptNonce, "1" + nonce, "00000001")
+        self.assertRaises(sasl.InvalidResponse,
+            c.acceptNonce, nonce + "1", "00000001")
+        self.assertRaises(sasl.InvalidResponse,
+            c.acceptNonce, "1" + nonce, "00000001")
 
     def test_nonceReplay(self):
         """
@@ -626,9 +713,12 @@ class _BaseChallengerTestCase(object):
         self.assertNotEquals(nonce, nonce2)
         self.assertEquals(c.acceptNonce(nonce, "00000001"), True)
         self.assertEquals(c.acceptNonce(nonce, "00000002"), True)
-        self.assertRaises(error.LoginFailed, c.acceptNonce, nonce, "00000001")
-        self.assertRaises(error.LoginFailed, c.acceptNonce, nonce, "00000002")
-        self.assertRaises(error.LoginFailed, c.acceptNonce, nonce, "00000004")
+        self.assertRaises(sasl.InvalidResponse,
+            c.acceptNonce, nonce, "00000001")
+        self.assertRaises(sasl.InvalidResponse,
+            c.acceptNonce, nonce, "00000002")
+        self.assertRaises(sasl.InvalidResponse,
+            c.acceptNonce, nonce, "00000004")
         self.assertEquals(c.acceptNonce(nonce, "00000003"), True)
 
     def test_getChallenge(self):
@@ -660,7 +750,12 @@ class _BaseChallengerTestCase(object):
         self.assertEquals(f['stale'], True)
         self._check_getRenewedChallenge(f)
 
-    def _check_processResponseOk(self, realm, uri, username, password, method=None, body=None):
+    def _check_processResponseOk(self, realm, uri, username, password,
+            method=None, body=None):
+        """
+        Given some challenge parameters and an username/password, check the
+        challenger's response is accepted by the corresponding responder.
+        """
         c = self.challengerClass(realm)
         r = self.responderClass(username, password)
         # Initial auth
@@ -680,7 +775,12 @@ class _BaseChallengerTestCase(object):
         self.assertTrue(credentials.checkPassword(password))
         self.assertFalse(credentials.checkPassword(password + "a"))
 
-    def _check_multipleRoundTrip(self, realm, uri, username, password, method=None, body=None):
+    def _check_multipleRoundTrip(self, realm, uri, username, password,
+            method=None, body=None):
+        """
+        Check multiple roundtrips between single challenger and responder
+        instances.
+        """
         c = self.challengerClass(realm)
         r = self.responderClass(username, password)
         # Roundtrips with new challenge each time
@@ -707,6 +807,9 @@ class _BaseChallengerTestCase(object):
         self.assertFalse(credentials.checkPassword(password + "a"))
 
     def _check_getSuccessfulChallenge(self, response, uri, password, rspauth):
+        """
+        Check the getSuccessfulChallenge method of the responder.
+        """
         f = digest.parseResponse(response)
         c = self.challengerClass(f['realm'])
         mech = digest.SASLDigestMechanism(f['username'], uri, f)
@@ -720,23 +823,34 @@ class _BaseChallengerTestCase(object):
 
 
 class SASLChallengerTestCase(unittest.TestCase, _BaseChallengerTestCase):
+    """
+    Test cases for the SASLDigestChallenger class.
+    """
+
     challengerClass = digest.SASLDigestChallenger
     responderClass = digest.SASLDigestResponder
     staticTimeChallengerClass = StaticTimeSASLChallenger
 
     def _check_getChallenge(self, f):
+        """
+        Callback for basic checking of initial challenge fields.
+        """
         self.assertTrue('opaque' not in f)
         self.assertEquals(f['charset'], "utf-8")
         self.assertEquals(f['algorithm'], "md5-sess")
 
     def _check_getRenewedChallenge(self, f):
+        """
+        Callback for basic checking of renewed challenge fields.
+        """
         self.assertTrue('opaque' not in f)
         self.assertEquals(f['charset'], "utf-8")
         self.assertEquals(f['algorithm'], "md5-sess")
 
     def test_processResponseOk(self):
         """
-        Full challenger -> responder -> challenger roundtrip, with credentials check.
+        Full challenger -> responder -> challenger roundtrip,
+        with credentials check.
         """
         self._check_processResponseOk("example.com", "/", "chris", "secret")
 
@@ -755,35 +869,50 @@ class SASLChallengerTestCase(unittest.Te
 
 
 class HTTPChallengerTestCase(unittest.TestCase, _BaseChallengerTestCase):
+    """
+    Test cases for the HTTPDigestChallenger class.
+    """
+
     challengerClass = digest.HTTPDigestChallenger
     responderClass = digest.HTTPDigestResponder
     staticTimeChallengerClass = StaticTimeHTTPChallenger
 
     def _check_getChallenge(self, f):
+        """
+        Callback for basic checking of initial challenge fields.
+        """
         self.assertTrue('opaque' in f)
         self.assertTrue('charset' not in f)
         self.assertEquals(f['algorithm'], "md5")
 
     def _check_getRenewedChallenge(self, f):
+        """
+        Callback for basic checking of renewed challenge fields.
+        """
         self.assertTrue('opaque' in f)
         self.assertTrue('charset' not in f)
         self.assertEquals(f['algorithm'], "md5")
 
     def test_processResponseOk(self):
         """
-        Full challenger -> responder -> challenger roundtrip, with credentials check.
+        Full challenger -> responder -> challenger roundtrip,
+        with credentials check.
         """
         self._check_processResponseOk("example.com", "/", "chris", "secret")
-        self._check_processResponseOk("example.com", "/", "chris", "secret", "GET")
-        self._check_processResponseOk("example.com", "/", "chris", "secret", "GET", "blah")
+        self._check_processResponseOk("example.com", "/", "chris", "secret",
+            "GET")
+        self._check_processResponseOk("example.com", "/", "chris", "secret",
+            "GET", "blah")
 
     def test_multipleRoundTrip(self):
         """
         Multiple roundtrip with same challenger and responder.
         """
         self._check_multipleRoundTrip("example.com", "/", "chris", "secret")
-        self._check_multipleRoundTrip("example.com", "/", "chris", "secret", "GET")
-        self._check_multipleRoundTrip("example.com", "/", "chris", "secret", "GET", "blah")
+        self._check_multipleRoundTrip("example.com", "/", "chris", "secret",
+            "GET")
+        self._check_multipleRoundTrip("example.com", "/", "chris", "secret",
+            "GET", "blah")
 
     def test_weakDigest(self):
         """
diff -r 2c7f34418f4c twisted/test/test_plain.py
--- a/twisted/test/test_plain.py	Fri Mar 16 18:12:07 2007 +0100
+++ b/twisted/test/test_plain.py	Wed May 30 14:36:15 2007 +0200
@@ -1,14 +1,22 @@
 # Copyright (c) 2007 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+Test cases for twisted.cred.plain
+"""
+
 from twisted.trial import unittest
-from twisted.cred import error, sasl, plain
+from twisted.cred import sasl, plain
 
 
 class CredentialsTestCase(unittest.TestCase):
+    """
+    Test cases for the PlainCredentials class.
+    """
+
     def test_password(self):
         """
-        Password checking.
+        Check password.
         """
         c = plain.PlainCredentials("chris", "secret")
         self.assertTrue(c.checkPassword("secret"))
@@ -16,20 +24,28 @@ class CredentialsTestCase(unittest.TestC
 
     def test_noAuthzid(self):
         """
-        Credentials without authzid, or empty string.
+        Check credentials without an authzid.
         """
         c = plain.PlainCredentials("chris", "secret", "")
         self.assertTrue(c.authzid is None)
 
     def test_authzid(self):
         """
-        Credentials with provided authzid.
+        Check credentials with a provided authzid.
         """
         c = plain.PlainCredentials("chris", "secret", "paul")
         self.assertEquals(c.authzid, "paul")
 
 class ResponderTestCase(unittest.TestCase):
+    """
+    Test cases for the SASLPlainResponder class.
+    """
+
     def _check_responses(self, responder, uri, expected):
+        """
+        Given a responder and an URI, check the responder gives the expected
+        response.
+        """
         resp = responder.getInitialResponse(uri)
         self.assertEquals(resp, expected)
         # Accept any challenge
@@ -50,35 +66,40 @@ class ResponderTestCase(unittest.TestCas
         """
         r = plain.SASLPlainResponder(username="chris", password="secret",
             authzid="paul")
-        self._check_responses(r, "imap/elwood.innosoft.com", "paul\0chris\0secret")
+        self._check_responses(r,
+            "imap/elwood.innosoft.com", "paul\0chris\0secret")
 
     def test_nonASCII(self):
         """
-        Non-ASCII username/password/authzid.
+        Generate responses for non-ASCII username/password/authzid.
         """
-        r = plain.SASLPlainResponder(username=u'andr\xe9', password=u'h\xe9h\xe9',
-            authzid=u"gis\xe8le")
+        r = plain.SASLPlainResponder(username=u'andr\xe9',
+            password=u'h\xe9h\xe9', authzid=u"gis\xe8le")
         self._check_responses(r, "imap/elwood.innosoft.com",
             "gis\xc3\xa8le\0andr\xc3\xa9\0h\xc3\xa9h\xc3\xa9")
 
 class ChallengerTestCase(unittest.TestCase):
+    """
+    Test cases for the SASLPlainChallenger class.
+    """
+
     def test_getChallenge(self):
         """
-        Empty (initial) challenge.
+        Generate an empty (initial) challenge.
         """
         c = plain.SASLPlainChallenger()
         self.assertTrue(c.getChallenge() is None)
 
     def test_getRenewedChallenge(self):
         """
-        Empty renewed challenge.
+        Generate an empty renewed challenge.
         """
         c = plain.SASLPlainChallenger()
         self.assertTrue(c.getRenewedChallenge("\0chris\0secret") is None)
 
     def test_getSuccessfulChallenge(self):
         """
-        Empty successful challenge.
+        Generate an empty successful challenge.
         """
         c = plain.SASLPlainChallenger()
         self.assertTrue(c.getSuccessfulChallenge("\0chris\0secret",
@@ -86,44 +107,45 @@ class ChallengerTestCase(unittest.TestCa
 
     def test_InvalidResponse(self):
         """
-        Response can't be parsed.
+        Raise an error when a response can't be parsed.
         """
         c = plain.SASLPlainChallenger()
         # Not the right number of \0's
-        self.assertRaises(error.LoginFailed,
+        self.assertRaises(sasl.InvalidResponse,
             c.processResponse, "chris")
-        self.assertRaises(error.LoginFailed,
+        self.assertRaises(sasl.InvalidResponse,
             c.processResponse, "chris\0secret")
-        self.assertRaises(error.LoginFailed,
+        self.assertRaises(sasl.InvalidResponse,
             c.processResponse, "\0chris\0secret\0")
         # No username
-        self.assertRaises(error.LoginFailed,
+        self.assertRaises(sasl.InvalidResponse,
             c.processResponse, "paul\0\0secret")
         # No password
-        self.assertRaises(error.LoginFailed,
+        self.assertRaises(sasl.InvalidResponse,
             c.processResponse, "paul\0chris\0")
 
     def test_nonUTF8Response(self):
         """
-        Response can't be decoded with UTF-8.
+        Raise an error when a response can't be decoded with UTF-8.
         """
         c = plain.SASLPlainChallenger()
-        self.assertRaises(error.LoginFailed,
+        self.assertRaises(sasl.InvalidResponse,
             c.processResponse, "andr\xe9\0chris\0secret")
 
     def test_UTF8Response(self):
         """
-        UTF-8 response.
+        Properly parse an UTF-8 response.
         """
         c = plain.SASLPlainChallenger()
-        cred = c.processResponse("gis\xc3\xa8le\0andr\xc3\xa9\0h\xc3\xa9h\xc3\xa9")
+        cred = c.processResponse(
+            "gis\xc3\xa8le\0andr\xc3\xa9\0h\xc3\xa9h\xc3\xa9")
         self.assertEquals(cred.username, u'andr\xe9')
         self.assertTrue(cred.checkPassword(u'h\xe9h\xe9'))
         self.assertEquals(cred.authzid, u"gis\xe8le")
 
     def test_emptyAuthzid(self):
         """
-        Empty authzid.
+        Properly parse an empty authzid.
         """
         c = plain.SASLPlainChallenger()
         cred = c.processResponse("\0chris\0secret")
