diff -r 82e30bc971d7 twisted/cred/digest.py
--- a/twisted/cred/digest.py	Wed May 30 14:36:35 2007 +0200
+++ b/twisted/cred/digest.py	Wed May 30 15:38:11 2007 +0200
@@ -302,7 +302,8 @@ class IDigestMechanism(Interface):
         @type nc: C{str}.
         @param qop: the qop parameter (can be None for old-school Digest auth).
         @type qop: C{str}.
-        @param realm: the realm parameter (can be None if the server supplies one).
+        @param realm: the realm parameter (can be None if the server supplies
+            one).
         @type realm: C{str}.
         """
 
@@ -311,7 +312,7 @@ class IDigestMechanism(Interface):
         Get the digest hash from a clear-text password.
 
         @param password: the clear-text password.
-        @type password: C{str}.
+        @type password: C{unicode}.
         @return: the digest hash, in hexadecimal form.
         @rtype: C{str}.
         """
@@ -321,10 +322,11 @@ class IDigestMechanism(Interface):
         Get the digest response from a clear-text password.
 
         @param password: the clear-text password.
-        @type password: C{str}.
+        @type password: C{unicode}.
         @param method: optional method name for integrity checking.
         @type method: C{str}.
-        @param bodyHash: optional hash of the message body for integrity checking.
+        @param bodyHash: optional hash of the message body for integrity
+            checking.
         @type bodyHash: C{str}.
         @return: digest response in hexadecimal form.
         @rtype: C{str}.
@@ -339,7 +341,8 @@ class IDigestMechanism(Interface):
         @type digestHash: C{str}.
         @param method: optional method name for integrity checking.
         @type method: C{str}.
-        @param bodyHash: optional hash of the message body for integrity checking.
+        @param bodyHash: optional hash of the message body for integrity
+            checking.
         @type bodyHash: C{str}.
         @return: digest response in hexadecimal form.
         @rtype: C{str}.
@@ -350,9 +353,15 @@ class BaseDigestMechanism(object):
 class BaseDigestMechanism(object):
     def __init__(self, username, uri, fields, authzid=None, algorithm=None):
         self.charset = 'charset' in fields and 'utf-8' or 'iso-8859-1'
-        self.username = username
+        if isinstance(username, str):
+            self.username = self.decode(username)
+        else:
+            self.username = username
         self.uri = uri
-        self.authzid = authzid
+        if isinstance(authzid, str):
+            self.authzid = self.decode(authzid)
+        else:
+            self.authzid = authzid
 
         self.nonce = fields.get('nonce')
         self.realm = fields.get('realm')
@@ -396,39 +405,49 @@ class BaseDigestMechanism(object):
 
     def encode(self, s):
         """
-        If the argument is an unicode string, encode it according to the stored
+        Encode the given (unicode) string according to the stored
         charset parameter.
 
         @param s: string to be encoded.
-        @type s: C{str} or C{unicode}.
+        @type s: C{unicode}.
         @return: encoded string.
         @rtype: C{str}.
         """
-        if isinstance(s, unicode):
-            return s.encode(self.charset)
-        return s
+        return s.encode(self.charset)
+
+    def decode(self, s):
+        """
+        Decode the given (bytes) string according to the stored
+        charset parameter.
+
+        @param s: string to be decoded.
+        @type s: C{str}.
+        @return: decoded string.
+        @rtype: C{unicode}.
+        """
+        return s.decode(self.charset)
 
     def specialEncode(self, *strings):
         """
         Apply the special encoding algorithm as defined in RFC 2831 to the
-        given strings: if the stored charset parameter is utf-8 and all the
-        strings can be encoded to iso-8859-1, then encode them into iso-8859-1.
+        given unicode strings: if the stored charset parameter is utf-8 and
+        all the strings can be encoded to iso-8859-1, then encode them into
+        iso-8859-1.
         Otherwise, encode them according to the stored charset parameter.
 
         @param strings: strings to be encoded.
-        @type strings: sequence of C{unicode} or C{str}.
+        @type strings: sequence of C{unicode}.
         @return: list of encoded strings.
         @rtype: sequence of C{str}.
         """
-        def _encode(charset):
-            return [isinstance(s, unicode) and s.encode(charset) or s
-                for s in strings]
+        def _encode_strings(charset):
+            return [s.encode(charset) for s in strings]
         if self.charset == 'utf-8':
             try:
-                return _encode('iso-8859-1')
+                return _encode_strings('iso-8859-1')
             except UnicodeEncodeError:
                 pass
-        return _encode(self.charset)
+        return _encode_strings(self.charset)
 
 
 class SASLDigestMechanism(BaseDigestMechanism):
@@ -462,6 +481,7 @@ class IUsernameDigestHash(Interface):
     def checkHash(digestHash):
         """
         @param digestHash: The hashed username:realm:password to check against.
+        @type digestHash: C{str}
 
         @return: a deferred which becomes, or a boolean indicating if the
             hash matches.
@@ -503,6 +523,10 @@ class DigestedCredentials(object):
 
 
 class BaseDigestResponder(object):
+    """
+    Base class for {HTTP,SASL}DigestResponder.
+    """
+
     def __init__(self, username, password, realm=None, authzid=None):
         """
         Construct a digest responder. You can pass an optional default realm
@@ -510,13 +534,13 @@ class BaseDigestResponder(object):
         doesn't specify one.
 
         @param username: username to authenticate with.
-        @type username: C{str} or C{unicode}.
+        @type username: C{unicode}.
         @param password: password to authenticate with.
-        @type password: C{str} or C{unicode}.
+        @type password: C{unicode}.
         @param realm: optional realm.
         @type realm: C{str}.
         @param authzid: optional authorization ID.
-        @type authzid: C{str}.
+        @type authzid: C{unicode}.
         """
         self.username = username
         self.password = password
@@ -530,7 +554,8 @@ class BaseDigestResponder(object):
     def getResponse(self, challenge, uri, method=None, body=None):
         """
         Process a server challenge.
-        Returns a tuple of the challenge type and the response to be sent (if any).
+        Returns a tuple of the challenge type and the response to be sent
+        (if any).
         The challenge type gives the protocol a hint as to what policy to adopt:
         - if instance of InitialChallenge, there was no previous successful
           authentication. If it is the second InitialChallenge in a row, then
@@ -560,7 +585,8 @@ class BaseDigestResponder(object):
             method = ""
             mechanism = self.lastMechanism
             if not mechanism:
-                raise sasl.UnexpectedFinalChallenge("Unexpected final challenge.")
+                raise sasl.UnexpectedFinalChallenge(
+                    "Unexpected final challenge.")
         else:
             # Non-final challenge: extract parameters and build mechanism
             realm = f.get('realm') or self.realm
@@ -596,11 +622,13 @@ class BaseDigestResponder(object):
             self.lastMechanism = mechanism
 
         bodyHash = mechanism.getBodyHash(body)
-        digestResponse = mechanism.getResponseFromPassword(self.password, method, bodyHash)
+        digestResponse = mechanism.getResponseFromPassword(
+            self.password, method, bodyHash)
 
         if rspauth:
             if rspauth != digestResponse:
-                raise sasl.FailedChallenge("Invalid final challenge: wrong rspauth value.")
+                raise sasl.FailedChallenge(
+                    "Invalid final challenge: wrong rspauth value.")
             return chalType, None
 
         respFields = {
@@ -617,12 +645,13 @@ class BaseDigestResponder(object):
             if s in f:
                 respFields[s] = f[s]
         if self.authzid:
-            respFields['authzid'] = self.authzid
+            respFields['authzid'] = mechanism.encode(self.authzid)
         return chalType, unparseResponse(**respFields)
 
     def _chooseQop(self, chalQops, method=None, body=None):
         # XXX factor out choice of qop in concrete mechanism?
-        if "auth-int" in chalQops and (body is not None or "auth" not in chalQops):
+        if "auth-int" in chalQops and (
+            body is not None or "auth" not in chalQops):
             return "auth-int"
         elif "auth" in chalQops:
             return "auth"
@@ -664,6 +693,10 @@ class NonceSlot(object):
 
 
 class BaseDigestChallenger(object):
+    """
+    Base class for {HTTP,SASL}DigestChallenger.
+    """
+
     CHALLENGE_LIFETIME_SECS = 15 * 60    # 15 minutes
 
     _callLater = reactor.callLater
@@ -746,7 +779,8 @@ class BaseDigestChallenger(object):
     def getSuccessfulChallenge(self, response, cred):
         """
         Get the final challenge, i.e. when auth when successful.
-        Returns None if the particular SASL mechanism doesn't define a final challenge.
+        Returns None if the particular SASL mechanism doesn't define a final
+        challenge.
 
         @param response: latest successful response.
         @type response: C{str}.
@@ -766,8 +800,8 @@ class BaseDigestChallenger(object):
 
     def getRenewedChallenge(self, response):
         """
-        Get a renewed challenge to send the client (i.e. when received a response
-        to an expired challenge).
+        Get a renewed challenge to send the client (i.e. when received a
+        response to an expired challenge).
 
         @param response: response received to the previous challenge.
         @type response: C{str}.
@@ -788,7 +822,8 @@ class BaseDigestChallenger(object):
         @rtype: C{str}.
         """
         while True:
-            nonce = "%d.%s" % (self._getTime(), sha.new(secureRandom(20)).hexdigest())
+            nonce = "%d.%s" % (self._getTime(),
+                sha.new(secureRandom(20)).hexdigest())
             if nonce not in self.nonces:
                 break
         # The following function object must not contain any reference to self
@@ -803,8 +838,9 @@ class BaseDigestChallenger(object):
         """
         Given the nonce from the client response, verify that the nonce is
         fresh enough and that the nonce-count is appropriate.
-        Returns True if the nonce is accepted, False if the challenge is not fresh enough,
-        raises an error if the nonce or nonce-count is invalid (e.g. faked).
+        Returns True if the nonce is accepted, False if the challenge is not
+        fresh enough, raises an error if the nonce or nonce-count is invalid
+        (e.g. faked).
         If True is returned, the nc value is eaten and trying to reuse it will
         raise an error (protection against replays).
 
@@ -864,7 +900,8 @@ class BaseDigestChallenger(object):
 
 class SASLDigestChallenger(BaseDigestChallenger):
     """
-    An SASL Digest challenger generates challenges and processes responses from a client.
+    An SASL Digest challenger generates challenges and processes responses
+    from a client using an SASL-enabled protocol.
     """
     implements(sasl.ISASLChallenger)
     mechanismClass = SASLDigestMechanism
@@ -881,7 +918,9 @@ class SASLDigestChallenger(BaseDigestCha
 
 class HTTPDigestChallenger(BaseDigestChallenger):
     """
-    An HTTP Digest challenger generates challenges and processes responses from a client.
+    An HTTP Digest challenger generates challenges and processes responses
+    from a client using HTTP or another protocol using the same authentication
+    mechanisms (e.g. SIP).
     """
     mechanismClass = HTTPDigestMechanism
     # Required to support RFC 2069-only clients
diff -r 82e30bc971d7 twisted/cred/plain.py
--- a/twisted/cred/plain.py	Wed May 30 14:36:35 2007 +0200
+++ b/twisted/cred/plain.py	Wed May 30 14:54:02 2007 +0200
@@ -12,12 +12,6 @@ from zope.interface import implements
 from zope.interface import implements
 
 from twisted.cred import credentials, sasl
-
-
-def _encode(s, charset):
-    if isinstance(s, unicode):
-        return s.encode(charset)
-    return s
 
 
 class PlainCredentials(object):
@@ -56,11 +50,11 @@ class SASLPlainResponder(object):
         doesn't specify one.
 
         @param username: username to authenticate with.
-        @type username: C{str} or C{unicode}.
+        @type username: C{unicode}.
         @param password: password to authenticate with.
-        @type password: C{str} or C{unicode}.
+        @type password: C{unicode}.
         @param authzid: optional authorization ID.
-        @type authzid: C{str}.
+        @type authzid: C{unicode}.
         """
         self.username = username
         self.password = password
@@ -82,7 +76,7 @@ class SASLPlainResponder(object):
         """
         # XXX add support for authentication without authzid?
         # (seen in twisted.mail.smtp)
-        resp = "\0".join(map(lambda s: _encode(s, self.charset),
+        resp = "\0".join(map(lambda s: s.encode(self.charset),
             [self.authzid or "", self.username, self.password]))
         return resp
 
@@ -126,4 +120,3 @@ class SASLPlainChallenger(object):
     def getRenewedChallenge(self, response):
         return None
 
-
diff -r 82e30bc971d7 twisted/test/test_digest.py
--- a/twisted/test/test_digest.py	Wed May 30 14:36:35 2007 +0200
+++ b/twisted/test/test_digest.py	Wed May 30 15:40:07 2007 +0200
@@ -383,14 +383,6 @@ class HTTPResponderTestCase(_BaseRespond
         chalType, unparsed = responder.getResponse(chal2,
             uri="/dir/index.html", method="GET")
         f = self._checkResponseToChallenge(unparsed, chal2, checkDict)
-        # Already encoded username
-        responder = digest.HTTPDigestResponder(
-            username="andr\xe9", password="Circle Of Life")
-        responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(chal2,
-            uri="/dir/index.html", method="GET")
-        f2 = self._checkResponseToChallenge(unparsed, chal2, checkDict)
-        self.assertEquals(f['response'], f2['response'])
 
     def test_respondMD5Auth(self):
         """
@@ -490,14 +482,6 @@ class SASLResponderTestCase(_BaseRespond
         chalType, unparsed = responder.getResponse(
             chal1, uri="/dir/index.html")
         f = self._checkResponseToChallenge(unparsed, chal1, checkDict)
-        # ISO-8859-1 encoded username and password
-        responder = digest.SASLDigestResponder(
-            username="andr\xe9", password="h\xe9")
-        responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(
-            chal1, uri="/dir/index.html")
-        f2 = digest.parseResponse(unparsed)
-        self.assertEquals(f['response'], f2['response'])
 
     def test_unicodeUsernameAndPassword(self):
         """
@@ -515,14 +499,6 @@ class SASLResponderTestCase(_BaseRespond
         chalType, unparsed = responder.getResponse(
             chal1, uri="/dir/index.html")
         f = self._checkResponseToChallenge(unparsed, chal1, checkDict)
-        # Already encoded username and password (UTF-8)
-        responder = digest.SASLDigestResponder(
-            username="andr\xc3\xa9", password="\xc4\x81")
-        responder.cnonce = "1234"
-        chalType, unparsed = responder.getResponse(
-            chal1, uri="/dir/index.html")
-        f2 = self._checkResponseToChallenge(unparsed, chal1, checkDict)
-        self.assertEquals(f['response'], f2['response'])
 
     def test_respondMD5SessAuth(self):
         """
@@ -854,6 +830,22 @@ class SASLChallengerTestCase(unittest.Te
         """
         self._check_processResponseOk("example.com", "/", "chris", "secret")
 
+    def test_processResponseWithLatinUsername(self):
+        """
+        Full challenger -> responder -> challenger roundtrip,
+        with credentials check on an ISO-8859-1 username.
+        """
+        self._check_processResponseOk(
+            "example.com", "/", u"andr\u00e9", "secret")
+
+    def test_processResponseWithUTF8Password(self):
+        """
+        Full challenger -> responder -> challenger roundtrip,
+        with credentials check on an unicode (non ISO-8859-1) password.
+        """
+        self._check_processResponseOk(
+            "example.com", "/", u"andr\u00e9", u"\u0101")
+
     def test_multipleRoundTrip(self):
         """
         Multiple roundtrip with same challenger and responder.
@@ -903,6 +895,18 @@ class HTTPChallengerTestCase(unittest.Te
             "GET")
         self._check_processResponseOk("example.com", "/", "chris", "secret",
             "GET", "blah")
+
+    def test_processResponseWithLatinUsername(self):
+        """
+        Full challenger -> responder -> challenger roundtrip,
+        with credentials check on an ISO-8859-1 username.
+        """
+        self._check_processResponseOk(
+            "example.com", "/", u"andr\u00e9", "secret")
+        self._check_processResponseOk(
+            "example.com", "/", u"andr\u00e9", "secret", "GET")
+        self._check_processResponseOk(
+            "example.com", "/", u"andr\u00e9", "secret", "GET", "blah")
 
     def test_multipleRoundTrip(self):
         """
