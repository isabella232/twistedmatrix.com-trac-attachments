Index: names/authority.py
===================================================================
--- names/authority.py	(revision 1)
+++ names/authority.py	(working copy)
@@ -208,9 +208,8 @@
 
     def stripComments(self, lines):
         return [
-            a.find(';') == -1 and a or a[:a.find(';')] for a in [
-                b.strip() for b in lines
-            ]
+            #leading whitespace is significant - don't strip it!
+            a.find(';') == -1 and a or a[:a.find(';')] for a in lines
         ]
 
 
@@ -233,7 +232,13 @@
         lines = L
         L = []
         for line in lines:
-            L.append(line.split())
+            if not line:
+                continue
+            
+            if line[0] in [' ', '\t']:
+                L.append([''] + line.split())
+            else:
+                L.append(line.split())
         return filter(None, L)
 
 
@@ -242,6 +247,7 @@
         ORIGIN = self.origin
 
         self.records = {}
+        self.previousDomain = self.previousOwner = None
 
         for (line, index) in zip(lines, range(len(lines))):
             if line[0] == '$TTL':
@@ -257,9 +263,11 @@
 
 
     def addRecord(self, owner, ttl, type, domain, cls, rdata):
-        if not domain.endswith('.'):
+        if not domain:
+            domain = owner
+        elif not domain.endswith('.'):
             domain = domain + '.' + owner
-        else:
+        if domain.endswith('.'):
             domain = domain[:-1]
         f = getattr(self, 'class_%s' % cls, None)
         if f:
@@ -275,7 +283,7 @@
             r.ttl = ttl
             self.records.setdefault(domain.lower(), []).append(r)
 
-            print 'Adding IN Record', domain, ttl, r
+            #print 'Adding IN Record', domain, ttl, r
             if type == 'SOA':
                 self.soa = (domain, r)
         else:
@@ -283,51 +291,50 @@
 
 
     #
-    # This file ends here.  Read no further.
+    # parse a bind format line.
     #
     def parseRecordLine(self, origin, ttl, line):
-        MARKERS = dns.QUERY_CLASSES.values() + dns.QUERY_TYPES.values()
         cls = 'IN'
-        owner = origin
+        
 
         if line[0] == '@':
-            line = line[1:]
             owner = origin
-#            print 'default owner'
-        elif not line[0].isdigit() and line[0] not in MARKERS:
-            owner = line[0]
-            line = line[1:]
-#            print 'owner is ', owner
-
-        if line[0].isdigit() or line[0] in MARKERS:
-            domain = owner
-            owner = origin
-#            print 'woops, owner is ', owner, ' domain is ', domain
+            domain = ''
+        elif not line[0]:
+            owner = self.previousOwner
+            domain = self.previousDomain
         else:
+            owner = self.previousOwner
             domain = line[0]
+
+        line = line[1:]
+        
+        if line[0].isdigit():
+            ttl = int(line[0])
             line = line[1:]
-#            print 'domain is ', domain
-
+            
         if line[0] in dns.QUERY_CLASSES.values():
             cls = line[0]
             line = line[1:]
-#            print 'cls is ', cls
-            if line[0].isdigit():
-                ttl = int(line[0])
-                line = line[1:]
-#                print 'ttl is ', ttl
-        elif line[0].isdigit():
-            ttl = int(line[0])
+            
+        if line[0] in dns.QUERY_TYPES.values():
+            type = line[0]
             line = line[1:]
-#            print 'ttl is ', ttl
-            if line[0] in dns.QUERY_CLASSES.values():
-                cls = line[0]
-                line = line[1:]
-#                print 'cls is ', cls
-
-        type = line[0]
-#        print 'type is ', type
-        rdata = line[1:]
-#        print 'rdata is ', rdata
-
+        
+        #tbd - remember to uncomment this code when DNSSEC changes are approved ...rgn
+        #if type == dns.QUERY_TYPES[dns.RRSIG] and len(line) > 9:
+            #line[8] = ''.join(line[8:])
+            #line = line[0:9]
+        #elif type == dns.QUERY_TYPES[dns.DS] and len(line) > 4:
+            #line[3] = ''.join(line[3:])
+            #line = line[0:3]
+        #elif type == dns.QUERY_TYPES[dns.DNSKEY] and len(line) > 4:
+            #line[3] = ''.join(line[3:])
+            #line = line[0:3]
+            
+        rdata = line
+        
         self.addRecord(owner, ttl, type, domain, cls, rdata)
+        
+        self.previousDomain = domain
+        self.previousOwner = owner
Index: names/test/test_names.py
===================================================================
--- names/test/test_names.py	(revision 1)
+++ names/test/test_names.py	(working copy)
@@ -830,3 +830,160 @@
         messages.append(m)
         return self.assertFailure(
             resolver.getHostByName("fooby.com"), socket.gaierror)
+
+class BindAuthorityTestCase(unittest.TestCase):
+    """
+    Test L{twisted.names.authority.BindAuthority}'s handling of a 
+    bind format zone file with dots at the end of a domain name.
+    """
+    tmpFile = 'tmp.zone'
+    
+    def setUp(self):
+        """
+        Create a zone file with absolute names (e.g., that end in "."'s) 
+        """
+        
+        bindFormatZoneFile = \
+"""
+;check this "file" by copying the text below to a file
+;and using named-checkconf to check the syntax:
+; $ named-checkzone example-domain.com <filename>
+; $ named-checkzone xyz <filename>
+;
+$TTL 1W
+$ORIGIN         example-domain.com.
+@               IN SOA          example-domain.com.   admin.example-domain.com. (
+                                42              ; serial (d. adams)
+                                2D              ; refresh
+                                4H              ; retry
+                                6W              ; expiry
+                                1W )            ; minimum
+
+                IN NS           example-domain.com.
+                IN A            192.168.168.24
+
+demo1           IN A            192.168.168.25
+demo2           IN A            192.168.168.26
+
+$ORIGIN         xyz.
+@		IN SOA	        a.xyz.biz.com. admin.xyz.biz.com. (
+                                    42          ; serial (TATLUE)
+                                  1800          ; refresh (30 minutes)
+                                   900          ; retry (15 minutes)
+                                604800          ; expire (1 week)
+                                 86400 )        ; minimum (1 day)
+
+$TTL 3600	; 1 hour
+                   NS          NS1.xyz.
+                   NS          NS2.xyz.
+ns1                A           99.98.9.50
+ns2                A           99.98.9.51
+
+$TTL 86400	; 1 day
+name1		   A           99.99.9.100
+                   A	       99.99.9.101
+name2		   A	       99.99.9.102
+                   A           99.99.9.103
+name3		   A           99.99.9.104
+                   A           99.99.9.105
+                   A           99.99.9.106
+                   A           99.99.9.107
+"""
+
+        fp = open(self.tmpFile, 'w')
+        fp.write(bindFormatZoneFile)
+        fp.close()
+    
+    def test_bindAuthorityDottedName(self):
+        """
+        Test that you can lookup an A record from the bind format zone file. 
+        """
+        from twisted.names.authority import BindAuthority
+        bindAuthority = BindAuthority(self.tmpFile)
+        d = bindAuthority.lookupAddress('demo1.example-domain.com')    
+        result = []
+        d.addCallback(result.append)
+        answer, authority, additional = result[0]
+        self.assertEqual(answer[0], dns.RRHeader('demo1.example-domain.com',
+                         type=dns.A, cls=dns.IN, ttl=604800, auth=True,
+                         payload=dns.Record_A(address='192.168.168.25', ttl=604800)))
+        self.assertEqual(authority, [])
+        self.assertEqual(additional, [])
+        
+    def test_multipleNSRRs(self):
+        """
+        Test that you get all the data associated with a zone 
+        that has multiple NS RRs with no explicit name
+        """
+        from twisted.names.authority import BindAuthority
+        bindAuthority = BindAuthority(self.tmpFile)
+        d = bindAuthority.lookupNameservers('xyz')    
+        result = []
+        d.addCallback(result.append)
+        answer, authority, additional = result[0]
+        for i in range(2):
+            self.assertEqual(answer[i], dns.RRHeader('xyz',
+                             type=dns.NS, cls=dns.IN, ttl=3600, auth=True,
+                             payload=dns.Record_NS(name='NS%d.xyz.'%(i+1), ttl=3600)))
+            self.assertEqual(authority, [])
+            self.assertEqual(additional, [])
+        
+    def test_multipleARRs(self):
+        """
+        Test that you get all the data associated with a domain that 
+        has multiple RRs with only one named
+        """
+        from twisted.names.authority import BindAuthority
+        bindAuthority = BindAuthority(self.tmpFile)
+        d = bindAuthority.lookupAddress('name3.xyz')    
+        result = []
+        d.addCallback(result.append)
+        answer, authority, additional = result[0]
+        for i in range(4):
+            self.assertEqual(answer[i], dns.RRHeader('name3.xyz',
+                             type=dns.A, cls=dns.IN, ttl=86400, auth=True,
+                             payload=dns.Record_A(address='99.99.9.10%d'%(i+4), ttl=86400)))
+            self.assertEqual(authority, [])
+            self.assertEqual(additional, [])
+        
+    def tearDown(self):
+        """
+        Remove the temporary file created in setUp.
+        """
+        import os
+        os.remove(self.tmpFile)
+            
+from twisted.names.secondary import SecondaryAuthority
+class SecondaryAuthorityTestCase(unittest.TestCase):
+    """
+    Test L{twisted.names.secondary.SecondaryAuthority}'s handling of an
+    ipaddress with a port in the format ipaddr:port.
+    """
+    def test_secondaryAuthorityWithoutPort(self):
+        """
+        Test that a SecondaryAuthority is created with dns.PORT by default
+        """
+        secondaryAuthority = SecondaryAuthority('192.168.1.1', ['inside.com'])
+        d = secondaryAuthority.transfer()
+        self.assertEqual(d.callbacks[0][0][1][0].host, '192.168.1.1')
+        self.assertEqual(d.callbacks[0][0][1][0].port, 53)
+        self._cancelDelayedCalls()
+    
+    def test_secondaryAuthorityWithPort(self):
+        """
+        Test that you can create a SecondaryAuthority with an alternate port
+        """
+        secondaryAuthority = SecondaryAuthority('192.168.1.1:5353', ['inside.com'])
+        d = secondaryAuthority.transfer()
+        self.assertEqual(d.callbacks[0][0][1][0].host, '192.168.1.1')
+        self.assertEqual(d.callbacks[0][0][1][0].port, 5353)
+        self._cancelDelayedCalls()
+        
+    def _cancelDelayedCalls(self):
+        """
+        Cancel outstanding delayed calls or the reactor is "dirty"
+        """
+        dcs = reactor.getDelayedCalls()
+        for dc in dcs:
+            dc.cancel()
+        
