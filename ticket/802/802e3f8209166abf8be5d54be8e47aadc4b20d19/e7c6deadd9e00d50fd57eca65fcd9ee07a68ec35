Index: test_process.py
===================================================================
--- test_process.py	(revision 22498)
+++ test_process.py	(working copy)
@@ -73,8 +73,8 @@
         p = OutProtocol()
         p.childDataReceived(1, bytes)
         self.assertEqual(received, [bytes])
+ 
 
-
     def test_errReceived(self):
         """
         Similar to L{test_outReceived}, but for stderr.
@@ -1702,7 +1702,7 @@
     """
     Test process programs that are packaged with twisted.
     """
-
+ 
     def testStdinReader(self):
         pyExe = sys.executable
         scriptPath = util.sibpath(__file__, "process_stdinreader.py")
@@ -1731,8 +1731,86 @@
             reactor.spawnProcess, p, pyExe, pyArgs, usePTY=1)
         self.assertRaises(ValueError,
             reactor.spawnProcess, p, pyExe, pyArgs, childFDs={1:'r'})
+        
+    def test_verifyProcessImplementsInterfaces(self):
+        """
+        Verify that Windows Dumb Process implments all functions
+        in for the Zope interfaces that it implements
+        
+        """
+        from twisted.internet._dumbwin32proc import Process   
+        from zope.interface.verify  import verifyClass          
+        
+        for shouldImplement in list(Process.__implemented__):
+            self.assertTrue(verifyClass( shouldImplement, Process))
+        
+    def test_getHost(self):
+        """
+        process.getHost() should raise not implemented exception
+        """
+        
+        from twisted.internet._dumbwin32proc import Process
+        class DummyWin32Proc(Process):
+            def __init__(self):
+                pass
+            
+        proc = DummyWin32Proc()
+        
+        self.assertRaises(NotImplementedError,
+                         proc.getHost)
+        
 
+    def test_getPeer(self):
+        """
+        should raise not implmented
+        """
+        from twisted.internet._dumbwin32proc import Process
+        
+        class DummyWin32Proc(Process):
+            def __init__(self):
+                pass
+        proc = DummyWin32Proc()
+           
+        self.assertRaises(NotImplementedError,
+                         proc.getPeer)
+        
 
+        
+    def test_writeToChild(self):
+        """
+        Windows select reactor only test
+        
+        FD = 1,2 - valid
+        FD = 0 verify exception is rasied
+        
+        """
+        from twisted.internet._dumbwin32proc import Process
+        class DummyFd(object):
+            def __init__(self):
+                self._data = ""
+            def write(self, data):
+                self._data = data
+    
+        
+        class DummyWin32Proc(Process):
+            def __init__(self):
+                self.stdout = DummyFd()
+                self.stderr = DummyFd()
+        proc = DummyWin32Proc()
+        
+        stdOutText = "write to stdout"
+        proc.writeToChild(1, stdOutText)
+        self.assertEqual(stdOutText, proc.stdout._data)
+        
+        stdErrText = "write to stderr"
+        proc.writeToChild(2, stdErrText)
+        self.assertEqual(stdErrText, proc.stderr._data)
+        
+        self.assertRaises(NotImplementedError,
+                         proc.writeToChild, 0, "Dumb Windows Process writeToChild should throw exception ")
+        
+
+
 class UtilTestCase(unittest.TestCase):
     """
     Tests for process-related helper functions (currently only
