Index: twisted/logger/_flatten.py
===================================================================
--- twisted/logger/_flatten.py	(revision 45557)
+++ twisted/logger/_flatten.py	(working copy)
@@ -170,6 +170,8 @@
     keyFlattener = KeyFlattener()
     formatFields = aFormatter.parse(event["log_format"])
     for literalText, fieldName, formatSpec, conversion in formatFields:
-        key = keyFlattener.flatKey(fieldName, formatSpec, conversion or "s")
-        s.extend([literalText, unicode(fieldValues[key])])
+        s.append(literalText)
+        if fieldName is not None:
+            key = keyFlattener.flatKey(fieldName, formatSpec, conversion or "s")
+            s.append(unicode(fieldValues[key]))
     return u"".join(s)
Index: twisted/logger/test/test_flatten.py
===================================================================
--- twisted/logger/test/test_flatten.py	(revision 45557)
+++ twisted/logger/test/test_flatten.py	(working copy)
@@ -220,6 +220,16 @@
         event = self._test_formatFlatEvent_fieldNamesSame()
         self._test_formatFlatEvent_fieldNamesSame(event)
 
+    def test_formatFlatEventTrailingText(self):
+        """
+        L{flatFormat} will handle tailing text after a field.
+        """
+        event = dict(
+            log_format="test {x} trailing",
+            x='x',
+        )
+        flattenEvent(event)
+        self.assertEqual(formatEvent(event), u"test x trailing")
 
     def test_extractField(self, flattenFirst=lambda x: x):
         """
