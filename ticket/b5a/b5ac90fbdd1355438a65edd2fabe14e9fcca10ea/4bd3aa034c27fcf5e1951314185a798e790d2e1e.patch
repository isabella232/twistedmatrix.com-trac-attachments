Index: twisted/logger/_flatten.py
===================================================================
--- twisted/logger/_flatten.py	(revision 45565)
+++ twisted/logger/_flatten.py	(working copy)
@@ -172,6 +172,7 @@
     for literalText, fieldName, formatSpec, conversion in formatFields:
         s.append(literalText)
         if fieldName is not None:
-            key = keyFlattener.flatKey(fieldName, formatSpec, conversion or "s")
+            key = keyFlattener.flatKey(
+                    fieldName, formatSpec, conversion or "s")
             s.append(unicode(fieldValues[key]))
     return u"".join(s)
Index: twisted/logger/test/test_flatten.py
===================================================================
--- twisted/logger/test/test_flatten.py	(revision 45565)
+++ twisted/logger/test/test_flatten.py	(working copy)
@@ -220,9 +220,11 @@
         event = self._test_formatFlatEvent_fieldNamesSame()
         self._test_formatFlatEvent_fieldNamesSame(event)
 
+
     def test_formatFlatEventTrailingText(self):
         """
-        L{flatFormat} will handle tailing text after a field.
+        L{formatEvent} will handle a flattened event with tailing text after
+        a replacement field.
         """
         event = dict(
             log_format="test {x} trailing",
@@ -231,6 +233,7 @@
         flattenEvent(event)
         self.assertEqual(formatEvent(event), u"test x trailing")
 
+
     def test_extractField(self, flattenFirst=lambda x: x):
         """
         L{extractField} will extract a field used in the format string.
Index: twisted/topfiles/8003.bugfix
===================================================================
--- twisted/topfiles/8003.bugfix	(revision 45565)
+++ twisted/topfiles/8003.bugfix	(working copy)
@@ -1 +1 @@
-twisted.logger.SOME_MODULE.SOME_CLASS.SOME_METHOD now flatten an event if if CONDITION
\ No newline at end of file
+twisted.logger.formatEvent now can format an event if it was flattened (twisted.logger.eventAsJSON does this) and has text after the last replacement field.
