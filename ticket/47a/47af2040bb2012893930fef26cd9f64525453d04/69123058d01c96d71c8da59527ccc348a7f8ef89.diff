diff --git twisted/words/im/basesupport.py twisted/words/im/basesupport.py
index 5c8b424..43b4c1a 100644
--- twisted/words/im/basesupport.py
+++ twisted/words/im/basesupport.py
@@ -10,8 +10,7 @@ You will find these useful if you're adding a new protocol to IM.
 
 # Abstract representation of chat "model" classes
 
-from twisted.words.im.locals import ONLINE, OFFLINE, OfflineError
-from twisted.words.im import interfaces
+from twisted.words.im.locals import OFFLINE, OfflineError
 
 from twisted.internet.protocol import Protocol
 
diff --git twisted/words/im/interfaces.py twisted/words/im/interfaces.py
index 8f34fb1..b1d48cd 100644
--- twisted/words/im/interfaces.py
+++ twisted/words/im/interfaces.py
@@ -8,8 +8,6 @@ Pan-protocol chat client.
 
 from zope.interface import Interface, Attribute
 
-from twisted.words.im import locals
-
 # (Random musings, may not reflect on current state of code:)
 #
 # Accounts have Protocol components (clients)
diff --git twisted/words/iwords.py twisted/words/iwords.py
index c8ce09f..c4728d0 100644
--- twisted/words/iwords.py
+++ twisted/words/iwords.py
@@ -2,7 +2,8 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import Interface, Attribute, implements
+from zope.interface import Interface, Attribute
+
 
 class IProtocolPlugin(Interface):
     """Interface for plugins providing an interface to a Words service
@@ -262,5 +263,5 @@ class IChatService(Interface):
         """
 
 __all__ = [
-    'IChatInterface', 'IGroup', 'IChatClient', 'IUser', 'IChatService',
+    'IGroup', 'IChatClient', 'IUser', 'IChatService',
     ]
diff --git twisted/words/protocols/irc.py twisted/words/protocols/irc.py
index 6a35ae6..8fbe46f 100644
--- twisted/words/protocols/irc.py
+++ twisted/words/protocols/irc.py
@@ -1760,6 +1760,7 @@ class IRCClient(basic.LineReceiver):
             "XXX!!! Help!  I need to bind a socket, have it listen, and tell me its address.  "
             "(and stop accepting once we've made a single connection.)")
 
+        my_address = None
         my_address = struct.pack("!I", my_address)
 
         args = ['SEND', name, my_address, str(port)]
diff --git twisted/words/protocols/jabber/client.py twisted/words/protocols/jabber/client.py
index 2a37bcb..93d0851 100644
--- twisted/words/protocols/jabber/client.py
+++ twisted/words/protocols/jabber/client.py
@@ -275,7 +275,7 @@ class SessionInitializer(xmlstream.BaseFeatureInitiatingInitializer):
 
     def start(self):
         iq = xmlstream.IQ(self.xmlstream, 'set')
-        session = iq.addElement((NS_XMPP_SESSION, 'session'))
+        iq.addElement((NS_XMPP_SESSION, 'session'))
         return iq.send()
 
 
diff --git twisted/words/protocols/oscar.py twisted/words/protocols/oscar.py
index 14908c6..f9ee9bc 100644
--- twisted/words/protocols/oscar.py
+++ twisted/words/protocols/oscar.py
@@ -1092,12 +1092,11 @@ class ChatService(OSCARService):
                 self.members.remove(u)
         self.bos.chatMemberLeft(self,user)
 
-    def oscar_0E_06(self,snac):
-        data = snac[3]
-        user,rest=self.bos.parseUser(snac[3][14:],1)
+    def oscar_0E_06(self, snac):
+        user, rest = self.bos.parseUser(snac[3][14:], 1)
         tlvs = readTLVs(rest[8:])
-        message=tlvs[1]
-        self.bos.chatReceiveMessage(self,user,message)
+        message = tlvs[1]
+        self.bos.chatReceiveMessage(self, user, message)
 
     def sendMessage(self,message):
         tlvs=TLV(0x02,"us-ascii")+TLV(0x03,"en")+TLV(0x01,message)
diff --git twisted/words/test/test_domish.py twisted/words/test/test_domish.py
index 275afb7..da15496 100644
--- twisted/words/test/test_domish.py
+++ twisted/words/test/test_domish.py
@@ -258,6 +258,7 @@ class DomishExpatStreamTestCase(DomishStreamTestsMixin, unittest.TestCase):
 
     try:
         import pyexpat
+        pyexpat  # Silence the linter.
     except ImportError:
         skip = "pyexpat is required for ExpatElementStream tests."
 
diff --git twisted/words/test/test_jabberxmlstream.py twisted/words/test/test_jabberxmlstream.py
index caa2ba6..482c757 100644
--- twisted/words/test/test_jabberxmlstream.py
+++ twisted/words/test/test_jabberxmlstream.py
@@ -1141,7 +1141,7 @@ class StreamManagerTest(unittest.TestCase):
         sm = self.streamManager
         handler = FailureReasonXMPPHandler()
         handler.setHandlerParent(sm)
-        xs = xmlstream.XmlStream(xmlstream.Authenticator())
+        xmlstream.XmlStream(xmlstream.Authenticator())
         sm._disconnected(failure.Failure(Exception("no reason")))
         self.assertEqual(True, handler.gotFailureReason)
 
diff --git twisted/words/test/test_msn.py twisted/words/test/test_msn.py
index 669c9aa..66f1c8b 100644
--- twisted/words/test/test_msn.py
+++ twisted/words/test/test_msn.py
@@ -17,6 +17,7 @@ try:
     # from t.w.p.msn so that other problems which cause that module to fail
     # to import don't cause the tests to be skipped.
     from twisted.web import client
+    client  # Silence the linter.
 except ImportError:
     # If there isn't one, we're going to skip all the tests.
     msn = None
diff --git twisted/words/test/test_xpath.py twisted/words/test/test_xpath.py
index 9dbda0f..ed37af8 100644
--- twisted/words/test/test_xpath.py
+++ twisted/words/test/test_xpath.py
@@ -3,7 +3,6 @@
 
 
 from twisted.trial import unittest
-import sys, os
 
 from twisted.words.xish.domish import Element
 from twisted.words.xish.xpath import XPathQuery
diff --git twisted/words/xish/xpathparser.py twisted/words/xish/xpathparser.py
index 312f6ec..e3a37cb 100644
--- twisted/words/xish/xpathparser.py
+++ twisted/words/xish/xpathparser.py
@@ -322,9 +322,6 @@ from twisted.words.xish.xpath import Function, IndexValue, LiteralValue
 from twisted.words.xish.xpath import _AnyLocation, _Location
 
 
-# Begin -- grammar generated by Yapps
-import sys, re
-
 class XPathParserScanner(Scanner):
     patterns = [
         ('","', re.compile(',')),
@@ -363,7 +360,7 @@ class XPathParser(Parser):
             current.childLocation = PATH; current = current.childLocation
         if self._peek() not in ['END', '"/"', '"//"']:
             raise SyntaxError(charpos=self._scanner.get_prev_char_pos(), context=_context, msg='Need one of ' + ', '.join(['END', '"/"', '"//"']))
-        END = self._scan('END')
+        self._scan('END')
         return  result
 
     def PATH(self, _parent=None):
@@ -380,7 +377,7 @@ class XPathParser(Parser):
             IDENTIFIER = self._scan('IDENTIFIER')
             result.elementName = IDENTIFIER
         else: # == 'WILDCARD'
-            WILDCARD = self._scan('WILDCARD')
+            self._scan('WILDCARD')
             result.elementName = None
         while self._peek('"\\["', 'END', '"/"', '"//"') == '"\\["':
             self._scan('"\\["')
@@ -414,7 +411,7 @@ class XPathParser(Parser):
         return e
 
     def BOOLOP(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'BOOLOP', [])
+        self.Context(_parent, self._scanner, self._pos, 'BOOLOP', [])
         _token = self._peek('OP_AND', 'OP_OR')
         if _token == 'OP_AND':
             OP_AND = self._scan('OP_AND')
@@ -472,7 +469,7 @@ class XPathParser(Parser):
             return LiteralValue(STR[1:len(STR)-1])
 
     def CMP(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'CMP', [])
+        self.Context(_parent, self._scanner, self._pos, 'CMP', [])
         _token = self._peek('CMP_EQ', 'CMP_NE')
         if _token == 'CMP_EQ':
             CMP_EQ = self._scan('CMP_EQ')
@@ -482,7 +479,7 @@ class XPathParser(Parser):
             return CMP_NE
 
     def STR(self, _parent=None):
-        _context = self.Context(_parent, self._scanner, self._pos, 'STR', [])
+        self.Context(_parent, self._scanner, self._pos, 'STR', [])
         _token = self._peek('STR_DQ', 'STR_SQ')
         if _token == 'STR_DQ':
             STR_DQ = self._scan('STR_DQ')
