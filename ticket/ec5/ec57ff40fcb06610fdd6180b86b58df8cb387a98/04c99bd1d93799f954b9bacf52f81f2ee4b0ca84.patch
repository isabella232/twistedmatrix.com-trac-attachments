commit 8c91c72ce54036c9d1ccb635d123711aef47dd96
Author: Wolfgang Rohdewald <wolfgang@rohdewald.de>
Date:   Fri Sep 26 15:41:15 2014 +0200

    Ticket 7666: test.test_{failure,banana,persisted,reflect}: consistently name all test methods test_*

diff --git twisted/spread/7666.misc twisted/spread/7666.misc
new file mode 100644
index 0000000..657c4e4
--- /dev/null
+++ twisted/spread/7666.misc
@@ -0,0 +1 @@
+twisted.test_{failure,banana,persisted,reflect}: consistently name all test methods test_*
diff --git twisted/test/test_banana.py twisted/test/test_banana.py
index d9f5393..c57bbdd 100644
--- twisted/test/test_banana.py
+++ twisted/test/test_banana.py
@@ -12,7 +12,7 @@ from twisted.internet import protocol, main
 
 
 class MathTestCase(unittest.TestCase):
-    def testInt2b128(self):
+    def test_int2b128(self):
         funkylist = range(0,100) + range(1000,1100) + range(1000000,1000100) + [1024 **10l]
         for i in funkylist:
             x = StringIO.StringIO()
@@ -48,7 +48,7 @@ class BananaTestCase(unittest.TestCase):
         self.enc.sendEncoded(n)
         return self.io.getvalue()
 
-    def testString(self):
+    def test_string(self):
         self.enc.sendEncoded("hello")
         l = []
         self.enc.dataReceived(self.io.getvalue())
@@ -304,33 +304,33 @@ class BananaTestCase(unittest.TestCase):
         self.assertRaises(banana.BananaError, self.enc.dataReceived, encoded)
 
 
-    def testNegativeLong(self):
+    def test_negativeLong(self):
         self.enc.sendEncoded(-1015l)
         self.enc.dataReceived(self.io.getvalue())
         assert self.result == -1015l, "should be -1015l, got %s" % self.result
 
-    def testInteger(self):
+    def test_integer(self):
         self.enc.sendEncoded(1015)
         self.enc.dataReceived(self.io.getvalue())
         assert self.result == 1015, "should be 1015, got %s" % self.result
 
-    def testNegative(self):
+    def test_negative(self):
         self.enc.sendEncoded(-1015)
         self.enc.dataReceived(self.io.getvalue())
         assert self.result == -1015, "should be -1015, got %s" % self.result
 
-    def testFloat(self):
+    def test_float(self):
         self.enc.sendEncoded(1015.)
         self.enc.dataReceived(self.io.getvalue())
         assert self.result == 1015.
 
-    def testList(self):
+    def test_list(self):
         foo = [1, 2, [3, 4], [30.5, 40.2], 5, ["six", "seven", ["eight", 9]], [10], []]
         self.enc.sendEncoded(foo)
         self.enc.dataReceived(self.io.getvalue())
         assert self.result == foo, "%s!=%s" % (repr(self.result), repr(foo))
 
-    def testPartial(self):
+    def test_partial(self):
         foo = [1, 2, [3, 4], [30.5, 40.2], 5,
                ["six", "seven", ["eight", 9]], [10],
                # TODO: currently the C implementation's a bit buggy...
@@ -342,16 +342,17 @@ class BananaTestCase(unittest.TestCase):
     def feed(self, data):
         for byte in data:
             self.enc.dataReceived(byte)
-    def testOversizedList(self):
+
+    def test_oversizedList(self):
         data = '\x02\x01\x01\x01\x01\x80'
         # list(size=0x0101010102, about 4.3e9)
         self.failUnlessRaises(banana.BananaError, self.feed, data)
-    def testOversizedString(self):
+    def test_oversizedString(self):
         data = '\x02\x01\x01\x01\x01\x82'
         # string(size=0x0101010102, about 4.3e9)
         self.failUnlessRaises(banana.BananaError, self.feed, data)
 
-    def testCrashString(self):
+    def test_crashString(self):
         crashString = '\x00\x00\x00\x00\x04\x80'
         # string(size=0x0400000000, about 17.2e9)
 
@@ -370,7 +371,7 @@ class BananaTestCase(unittest.TestCase):
         except banana.BananaError:
             pass
 
-    def testCrashNegativeLong(self):
+    def test_crashNegativeLong(self):
         # There was a bug in cBanana which relied on negating a negative integer
         # always giving a postive result, but for the lowest possible number in
         # 2s-complement arithmetic, that's not true, i.e.
diff --git twisted/test/test_failure.py twisted/test/test_failure.py
index 2debd9d..16502c4 100644
--- twisted/test/test_failure.py
+++ twisted/test/test_failure.py
@@ -410,7 +410,7 @@ class FailureTestCase(SynchronousTestCase):
             detail='noisia')
 
 
-    def testExplictPass(self):
+    def test_ExplictPass(self):
         e = RuntimeError()
         f = failure.Failure(e)
         f.trap(RuntimeError)
@@ -428,21 +428,21 @@ class FailureTestCase(SynchronousTestCase):
                 "f.raiseException() didn't raise ZeroDivisionError!?")
 
 
-    def testRaiseExceptionWithTB(self):
+    def test_RaiseExceptionWithTB(self):
         f = getDivisionFailure()
         innerline = self._getInnermostFrameLine(f)
         self.assertEqual(innerline, '1/0')
 
 
-    def testLackOfTB(self):
+    def test_LackOfTB(self):
         f = getDivisionFailure()
         f.cleanFailure()
         innerline = self._getInnermostFrameLine(f)
         self.assertEqual(innerline, '1/0')
 
-    testLackOfTB.todo = "the traceback is not preserved, exarkun said he'll try to fix this! god knows how"
+    test_LackOfTB.todo = "the traceback is not preserved, exarkun said he'll try to fix this! god knows how"
     if _PY3:
-        del testLackOfTB # fix in ticket #6008
+        del test_LackOfTB # fix in ticket #6008
 
 
     def test_stringExceptionConstruction(self):
@@ -454,7 +454,7 @@ class FailureTestCase(SynchronousTestCase):
         self.assertIn("Strings are not supported by Failure", str(exc))
 
 
-    def testConstructionFails(self):
+    def test_ConstructionFails(self):
         """
         Creating a Failure with no arguments causes it to try to discover the
         current interpreter exception state.  If no such state exists, creating
diff --git twisted/test/test_persisted.py twisted/test/test_persisted.py
index 4a80791..af549b0 100644
--- twisted/test/test_persisted.py
+++ twisted/test/test_persisted.py
@@ -23,7 +23,7 @@ from twisted.persisted import styles, aot, crefutil
 
 
 class VersionTestCase(unittest.TestCase):
-    def testNullVersionUpgrade(self):
+    def test_nullVersionUpgrade(self):
         global NullVersioned
         class NullVersioned:
             ok = 0
@@ -36,7 +36,7 @@ class VersionTestCase(unittest.TestCase):
         styles.doUpgrade()
         assert mnv.ok, "initial upgrade not run!"
 
-    def testVersionUpgrade(self):
+    def test_versionUpgrade(self):
         global MyVersioned
         class MyVersioned(styles.Versioned):
             persistenceVersion = 2
@@ -67,7 +67,7 @@ class VersionTestCase(unittest.TestCase):
         assert obj.v3 == 1, "upgraded unnecessarily"
         assert obj.v4 == 1, "upgraded unnecessarily"
     
-    def testNonIdentityHash(self):
+    def test_nonIdentityHash(self):
         global ClassWithCustomHash
         class ClassWithCustomHash(styles.Versioned):
             def __init__(self, unique, hash):
@@ -90,7 +90,7 @@ class VersionTestCase(unittest.TestCase):
         self.failUnless(v1.upgraded)
         self.failUnless(v2.upgraded)
     
-    def testUpgradeDeserializesObjectsRequiringUpgrade(self):
+    def test_upgradeDeserializesObjectsRequiringUpgrade(self):
         global ToyClassA, ToyClassB
         class ToyClassA(styles.Versioned):
             pass
@@ -183,7 +183,7 @@ class MyEphemeral(styles.Ephemeral):
 
 class EphemeralTestCase(unittest.TestCase):
 
-    def testEphemeral(self):
+    def test_ephemeral(self):
         o = MyEphemeral(3)
         self.assertEqual(o.__class__, MyEphemeral)
         self.assertEqual(o.x, 3)
@@ -223,24 +223,24 @@ def funktion():
 class PicklingTestCase(unittest.TestCase):
     """Test pickling of extra object types."""
     
-    def testModule(self):
+    def test_module(self):
         pickl = pickle.dumps(styles)
         o = pickle.loads(pickl)
         self.assertEqual(o, styles)
     
-    def testClassMethod(self):
+    def test_classMethod(self):
         pickl = pickle.dumps(Pickleable.getX)
         o = pickle.loads(pickl)
         self.assertEqual(o, Pickleable.getX)
     
-    def testInstanceMethod(self):
+    def test_instanceMethod(self):
         obj = Pickleable(4)
         pickl = pickle.dumps(obj.getX)
         o = pickle.loads(pickl)
         self.assertEqual(o(), 4)
         self.assertEqual(type(o), type(obj.getX))
     
-    def testStringIO(self):
+    def test_stringIO(self):
         f = StringIO.StringIO()
         f.write("abc")
         pickl = pickle.dumps(f)
@@ -262,12 +262,12 @@ class NonDictState:
         self.state = state
 
 class AOTTestCase(unittest.TestCase):
-    def testSimpleTypes(self):
+    def test_simpleTypes(self):
         obj = (1, 2.0, 3j, True, slice(1, 2, 3), 'hello', u'world', sys.maxint + 1, None, Ellipsis)
         rtObj = aot.unjellyFromSource(aot.jellyToSource(obj))
         self.assertEqual(obj, rtObj)
 
-    def testMethodSelfIdentity(self):
+    def test_methodSelfIdentity(self):
         a = A()
         b = B()
         a.bmethod = b.bmethod
@@ -307,7 +307,7 @@ class AOTTestCase(unittest.TestCase):
         self.assertRaises(TypeError, aot.jellyToSource, set())
 
 
-    def testBasicIdentity(self):
+    def test_basicIdentity(self):
         # Anyone wanting to make this datastructure more complex, and thus this
         # test more comprehensive, is welcome to do so.
         aj = aot.AOTJellier().jellyToAO
@@ -327,12 +327,12 @@ class AOTTestCase(unittest.TestCase):
         assert uj[1][0:5] == l[0:5]
 
 
-    def testNonDictState(self):
+    def test_nonDictState(self):
         a = NonDictState()
         a.state = "meringue!"
         assert aot.unjellyFromSource(aot.jellyToSource(a)).state == a.state
 
-    def testCopyReg(self):
+    def test_copyReg(self):
         s = "foo_bar"
         sio = StringIO.StringIO()
         sio.write(s)
@@ -340,7 +340,7 @@ class AOTTestCase(unittest.TestCase):
         # print repr(uj.__dict__)
         assert uj.getvalue() == s
 
-    def testFunkyReferences(self):
+    def test_funkyReferences(self):
         o = EvilSourceror(EvilSourceror([]))
         j1 = aot.jellyToAOT(o)
         oj = aot.unjellyFromAOT(j1)
diff --git twisted/test/test_reflect.py twisted/test/test_reflect.py
index db9dfaf..2b3e4b5 100644
--- twisted/test/test_reflect.py
+++ twisted/test/test_reflect.py
@@ -871,14 +871,14 @@ class GetClass(unittest.TestCase):
     else:
         oldClassNames = ['class', 'classobj']
 
-    def testOld(self):
+    def test_old(self):
         class OldClass:
             pass
         old = OldClass()
         self.assertIn(reflect.getClass(OldClass).__name__, self.oldClassNames)
         self.assertEqual(reflect.getClass(old).__name__, 'OldClass')
 
-    def testNew(self):
+    def test_new(self):
         class NewClass(object):
             pass
         new = NewClass()
