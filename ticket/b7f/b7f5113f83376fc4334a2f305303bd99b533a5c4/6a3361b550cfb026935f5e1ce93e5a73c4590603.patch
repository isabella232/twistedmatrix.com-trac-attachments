Index: strports.py
===================================================================
--- strports.py	(revision 12101)
+++ strports.py	(working copy)
@@ -38,25 +38,44 @@
     return (int(port), factory), {'interface': interface,
                                   'backlog': int(backlog)}
 
+def _parseClientTCP(factory, host, port, timeout=30, bindAddress=None): 
+    return (host, int(port), factory), {'bindAddress': bindAddress,
+                                        'timeout': int(timeout)}
+
 def _parseUNIX(factory, address, mode='666', backlog=5):
     return (address, factory), {'mode': int(mode, 8), 'backlog': int(backlog)}
 
-def _parseSSL(factory, port, privateKey="server.pem", certKey=None,
-              sslmethod=None, interface='', backlog=5):
+def _parseClientUNIX(factory, address, timeout=30):
+    return (address, factory), {'timeout': int(timeout)}
+
+def _parseSSLKeys(privateKey, certKey, sslmethod):
     from twisted.internet import ssl
     if certKey is None:
         certKey = privateKey
     kw = {}
     if sslmethod is not None:
         kw['sslmethod'] = getattr(ssl.SSL, sslmethod)
-    cf = ssl.DefaultOpenSSLContextFactory(privateKey, certKey, **kw)
+    return ssl.DefaultOpenSSLContextFactory(privateKey, certKey, **kw)
+
+def _parseSSL(factory, port, privateKey="server.pem", certKey=None,
+              sslmethod=None, interface='', backlog=5):
+    cf = _parseSSLKeys(privateKey, certKey, sslmethod)
     return ((int(port), factory, cf),
             {'interface': interface, 'backlog': int(backlog)})
 
-_funcs = {"tcp": _parseTCP,
-          "unix": _parseUNIX,
-          "ssl": _parseSSL}
+def _parseClientSSL(factory, host, port, privateKey="server.pem", certKey=None,
+              sslmethod=None, timeout=30, bindAddress=None): 
+    cf = _parseSSLKeys(privateKey, certKey, sslmethod)
+    return ((host, int(port), factory, cf),
+            {'bindAddress': bindAddress, 'timeout': int(timeout)})
 
+_funcs = {'client': {"tcp": _parseClientTCP,
+                     "unix": _parseClientUNIX,
+                     "ssl": _parseClientSSL},
+          'server': {"tcp": _parseTCP,
+                     "unix": _parseUNIX,
+                     "ssl": _parseSSL}}
+
 _OP, _STRING = range(2)
 def _tokenize(description):
     current = ''
@@ -92,12 +111,13 @@
     add(sofar)
     return args, kw 
 
-def parse(description, factory, default=None):
+def parse(description, factory, default=None, functype='server'):
     """Parse a description of a reliable virtual circuit server
 
     @type description: C{str}
     @type factory: C{twisted.internet.interfaces.IProtocolFactory}
     @type default: C{str} or C{None}
+    @type functype: C{str} 'server' or 'client'
     @rtype: C{tuple}
     @return: a tuple of string, tuple and dictionary. The string
     is the name of the method (sans C{'listen'}) to call, and
@@ -135,10 +155,14 @@
     backlog (how many clients to keep in the backlog).
     """
     args, kw = _parse(description)
-    if not args or (len(args)==1 and not kw):
+#    if not args or (len(args)==1 and not kw):
+    if not args or args[0] not in _funcs[functype]:
         args[0:0] = [default or 'tcp']
-    return (args[0].upper(),)+_funcs[args[0]](factory, *args[1:], **kw)
+    if functype == 'client' and len(args)==2 and args[0] == 'tcp':
+        args[1:1] = ['localhost']
 
+    return (args[0].upper(),)+_funcs[functype][args[0]](factory, *args[1:], **kw)
+
 def service(description, factory, default=None):
     """Return the service corresponding to a description
 
@@ -173,4 +197,21 @@
     name, args, kw = parse(description, factory, default)
     return getattr(reactor, 'listen'+name)(*args, **kw)
 
-__all__ = ['parse', 'service', 'listen']
+def connect(description, factory, default=None):
+    """Connect to a port corresponding to a description
+
+    @type description: C{str}
+    @type factory: C{twisted.internet.interfaces.IProtocolFactory}
+    @type default: C{str} or C{None}
+    @rtype: C{twisted.internet.interfaces.IConnector
+    @return: the connection corresponding to a description of a reliable
+    virtual circuit server.
+
+    See the documentation of the C{parse} function for description
+    of the semantics of the arguments.
+    """
+    from twisted.internet import reactor
+    name, args, kw = parse(description, factory, default, functype='client')
+    return getattr(reactor, 'connect'+name)(*args, **kw)
+
+__all__ = ['parse', 'service', 'listen', 'connect']
