diff --git a/twisted/mail/imap4.py b/twisted/mail/imap4.py
--- a/twisted/mail/imap4.py
+++ b/twisted/mail/imap4.py
@@ -4821,7 +4821,7 @@ def getBodyStructure(msg, extended=False
     # XXX - This does not properly handle multipart messages
     # BODYSTRUCTURE is obscenely complex and criminally under-documented.
 
-    attrs = {}
+    attrs = []
     headers = 'content-type', 'content-id', 'content-description', 'content-transfer-encoding'
     headers = msg.getHeaders(False, *headers)
     mm = headers.get('content-type')
@@ -4837,7 +4837,7 @@ def getBodyStructure(msg, extended=False
                 major, minor = type
             else:
                 major = minor = None
-            attrs = dict([x.strip().lower().split('=', 1) for x in mimetype[1:]])
+            attrs = [x.strip().lower().split('=', 1) for x in mimetype[1:]]
         else:
             major = minor = None
     else:
@@ -4845,7 +4845,7 @@ def getBodyStructure(msg, extended=False
 
 
     size = str(msg.getSize())
-    unquotedAttrs = [(k, unquote(v)) for (k, v) in attrs.iteritems()]
+    unquotedAttrs = [(k, unquote(v)) for (k, v) in attrs]
     result = [
         major, minor,                       # Main and Sub MIME types
         unquotedAttrs,                      # content-type parameter list
@@ -4893,7 +4893,7 @@ def getBodyStructure(msg, extended=False
                 i += 1
         except IndexError:
             result.append(minor)
-            result.append(attrs.items())
+            result.append(attrs)
 
             # XXX - I dunno if this is really right
             headers = msg.getHeaders(False, 'content-disposition', 'content-language')
diff --git a/twisted/mail/test/test_imap.py b/twisted/mail/test/test_imap.py
--- a/twisted/mail/test/test_imap.py
+++ b/twisted/mail/test/test_imap.py
@@ -353,8 +353,10 @@ class IMAP4HelperTestCase(unittest.TestC
             ({'Header1': 'Value1', 'Header2': 'Value2'}, 'Header2: Value2\r\nHeader1: Value1\r\n'),
         ]
 
-        for (input, output) in cases:
-            self.assertEqual(imap4._formatHeaders(input), output)
+        for (input, expected) in cases:
+            output = imap4._formatHeaders(input)
+            self.assertEqual(sorted(output.splitlines(True)),
+                             sorted(expected.splitlines(True)))
 
 
     def test_messageSet(self):
