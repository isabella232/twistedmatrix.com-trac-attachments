Index: twisted/protocols/amp.py
===================================================================
--- twisted/protocols/amp.py	(revision 26600)
+++ twisted/protocols/amp.py	(working copy)
@@ -2187,9 +2187,12 @@
         A verbose string representation which gives us information about this
         AMP connection.
         """
-        return '<%s %s at 0x%x>' % (
-            self.__class__.__name__,
-            self.innerProtocol, id(self))
+        if self.innerProtocol:
+            innerRepr = ' inner %r' % (self.innerProtocol,)
+        else:
+            innerRepr = ''
+        return '<%s%s at 0x%x>' % (
+            self.__class__.__name__, innerRepr, id(self))
 
 
     def makeConnection(self, transport):
Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(revision 26600)
+++ twisted/test/test_amp.py	(working copy)
@@ -30,9 +30,13 @@
 
 
 class TestProto(protocol.Protocol):
+    instanceCount = 0
+    
     def __init__(self, onConnLost, dataToSend):
         self.onConnLost = onConnLost
         self.dataToSend = dataToSend
+        self.instanceId = TestProto.instanceCount
+        TestProto.instanceCount = TestProto.instanceCount + 1
 
     def connectionMade(self):
         self.data = []
@@ -46,7 +50,11 @@
         self.onConnLost.callback(self.data)
 
 
+    def __repr__(self):
+        return "<TestProto #%d>" % (self.instanceId,)
 
+
+
 class SimpleSymmetricProtocol(amp.AMP):
 
     def sendHello(self, text):
@@ -1124,6 +1132,30 @@
         self.failUnless("AmpBox" in repr(amp.AmpBox()))
 
 
+    def test_innerProtocolInRepr(self):
+        """
+        Verify that L{AMP} objects output their innerProtocol when set.
+        """
+        otherProto = TestProto(None, "outgoing data")
+        a = amp.AMP()
+        a.innerProtocol = otherProto
+
+        self.assertEquals(repr(a), "<AMP inner <TestProto #%d> at 0x%x>" % (
+            otherProto.instanceId,
+            id(a)))
+
+
+    def test_innerProtocolNotInRepr(self):
+        """
+        Verify that L{AMP} objects do not output 'inner' when no innerProtocol
+        is set
+        """
+        a = amp.AMP()
+
+        self.assertEquals(repr(a), "<AMP at 0x%x>" % (
+            id(a)))
+
+
     def test_simpleSSLRepr(self):
         """
         L{amp._TLSBox.__repr__} returns a string.
