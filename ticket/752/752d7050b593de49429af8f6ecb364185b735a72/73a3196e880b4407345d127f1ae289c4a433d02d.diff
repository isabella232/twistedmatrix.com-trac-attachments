Index: twisted/application/service.py
===================================================================
--- twisted/application/service.py	(revision 41027)
+++ twisted/application/service.py	(working copy)
@@ -309,9 +309,9 @@
             service.startService()
 
     def removeService(self, service):
+        self.services.remove(service)
         if service.name:
             del self.namedServices[service.name]
-        self.services.remove(service)
         if self.running:
             # Returning this so as not to lose information from the
             # MultiService.stopService deferred.
Index: twisted/test/test_application.py
===================================================================
--- twisted/test/test_application.py	(revision 41027)
+++ twisted/test/test_application.py	(working copy)
@@ -80,6 +80,49 @@
         self.assertEqual(list(p), [])
         self.assertEqual(s.parent, None)
 
+    def test_disowningNamedChild(self):
+        s = service.Service()
+        p = service.MultiService()
+        s.setName("hello")
+        s.setServiceParent(p)
+        self.assertEqual(list(p), [s])
+        self.assertEqual(s.parent, p)
+        self.assertEqual(p.getServiceNamed("hello"), s)
+        s.disownServiceParent()
+        self.assertEqual(list(p), [])
+        self.assertEqual(s.parent, None)
+        self.assertRaises(KeyError, p.getServiceNamed, "hello")
+
+    def test_removingNonChild(self):
+        s = service.Service()
+        p = service.MultiService()
+        self.assertEqual(list(p), [])
+        self.assertEqual(s.parent, None)
+        self.assertRaises(ValueError, p.removeService, s)
+
+    def test_removingNamedNonChild(self):
+        s = service.Service()
+        p = service.MultiService()
+        s.setName("hello")
+        self.assertEqual(list(p), [])
+        self.assertEqual(s.parent, None)
+        self.assertRaises(ValueError, p.removeService, s)
+
+    def test_removingDuplicateNamedNonChild(self):
+        s = service.Service()
+        t = service.Service()
+        p = service.MultiService()
+        s.setName("hello")
+        s.setServiceParent(p)
+        self.assertEqual(list(p), [s])
+        self.assertEqual(s.parent, p)
+        self.assertEqual(p.getServiceNamed("hello"), s)
+        t.setName("hello")
+        self.assertRaises(ValueError, p.removeService, t)
+        self.assertEqual(list(p), [s])
+        self.assertEqual(s.parent, p)
+        self.assertEqual(p.getServiceNamed("hello"), s)
+
     def testRunning(self):
         s = service.Service()
         self.assert_(not s.running)
