Index: twisted/web/proxy.py
===================================================================
--- twisted/web/proxy.py	(revision 40189)
+++ twisted/web/proxy.py	(working copy)
@@ -49,10 +49,10 @@
         headers.pop('keep-alive', None)
         self.headers = headers
         self.data = data
-        father.notifyFinish().addErrback(self.fatherFailed)
 
 
     def connectionMade(self):
+        self.father.notifyFinish().addErrback(self.__fatherFailed)
         self.sendCommand(self.command, self.rest)
         for header, value in self.headers.items():
             self.sendHeader(header, value)
@@ -90,10 +90,14 @@
             self.transport.loseConnection()
 
 
-    def fatherFailed(self, failure):
-        if not self._finished:
-            self.transport.loseConnection()
-            self._finished = True
+    def __fatherFailed(self, failure):
+        """
+        This is called when the proxy's client disconnects or otherwise aborts.
+        We want to abort, too, so that we don't tie up resources on the
+        server we're connecting to.
+        """
+        self._finished = True
+        self.transport.loseConnection()
 
 
 
Index: twisted/web/test/test_proxy.py
===================================================================
--- twisted/web/test/test_proxy.py	(revision 40189)
+++ twisted/web/test/test_proxy.py	(working copy)
@@ -375,6 +375,7 @@
         self.assertForwardsResponse(
             request, 200, 'OK', headers.items(), '')
 
+
     def test_parentDisconnected(self):
         """
         Check that the client disconnects if the parent request is dropped.
@@ -391,7 +392,39 @@
         self.assertFalse(client.transport.connected)
 
 
+    def test_parentDisconnectedEarly(self):
+        """
+        Check that the proxy survives a parent disconnection before the client
+        connects.
+        """
+        request = self.makeRequest('foo')
+        client = self.makeProxyClient(request, headers={"accept": "text/html"})
+        request.processingFailed(main.CONNECTION_LOST)
 
+
+    def test_parentDisconnectedLate(self):
+        """
+        Check that the proxy survives a parent disconnection after the request
+        is done.
+        """
+        request = self.makeRequest('foo')
+        client = self.makeProxyClient(request, headers={"accept": "text/html"})
+        self.connectProxy(client)
+        headers = {
+            'Server': ['bar'],
+            'Date': ['2010-01-01'],
+            'Content-Type': ['application/x-baz'],
+            }
+        client.dataReceived(
+            self.makeResponseBytes(200, "OK", headers.items(), ''))
+        self.assertForwardsResponse(
+            request, 200, 'OK', headers.items(), '')
+
+        client.transport.loseConnection()
+        request.processingFailed(main.CONNECTION_LOST)
+
+
+
 class ProxyClientFactoryTestCase(TestCase):
     """
     Tests for L{ProxyClientFactory}.
Index: twisted/web/topfiles/6768.feature
===================================================================
--- twisted/web/topfiles/6768.feature	(revision 0)
+++ twisted/web/topfiles/6768.feature	(working copy)
@@ -0,0 +1 @@
+twisted.web.proxy.ProxyClient (and all of its users in twisted.web.proxy) will now close HTTP connections that they initiate if the incoming connection to the proxy dies before receiving a response.
\ No newline at end of file
