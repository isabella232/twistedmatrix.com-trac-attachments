diff --git a/twisted/conch/ssh/factory.py b/twisted/conch/ssh/factory.py
index d020bc5..fd43d4c 100644
--- a/twisted/conch/ssh/factory.py
+++ b/twisted/conch/ssh/factory.py
@@ -58,6 +58,7 @@ class SSHFactory(protocol.Factory):
                     'cannot find moduli file')
             ske = t.supportedKeyExchanges[:]
             ske.remove('diffie-hellman-group-exchange-sha1')
+            ske.remove('diffie-hellman-group-exchange-sha256')
             t.supportedKeyExchanges = ske
         return t
 
diff --git a/twisted/conch/ssh/transport.py b/twisted/conch/ssh/transport.py
index 843a6de..c7edf06 100644
--- a/twisted/conch/ssh/transport.py
+++ b/twisted/conch/ssh/transport.py
@@ -14,7 +14,7 @@ Maintainer: Paul Swartz
 import struct
 import zlib
 import array
-from hashlib import md5, sha1
+from hashlib import md5, sha1, sha256
 import string
 import hmac
 
@@ -218,7 +218,8 @@ class SSHTransportBase(protocol.Protocol):
     # both of the above support 'none', but for security are disabled by
     # default.  to enable them, subclass this class and add it, or do:
     #   SSHTransportBase.supportedCiphers.append('none')
-    supportedKeyExchanges = ['diffie-hellman-group-exchange-sha1',
+    supportedKeyExchanges = ['diffie-hellman-group-exchange-sha256',
+                             'diffie-hellman-group-exchange-sha1',
                              'diffie-hellman-group1-sha1']
     supportedPublicKeys = ['ssh-rsa', 'ssh-dss']
     supportedCompressions = ['none', 'zlib']
@@ -721,9 +722,13 @@ class SSHTransportBase(protocol.Protocol):
         @type sharedSecret: C{str}
         @type exchangeHash: C{str}
         """
-        k1 = sha1(sharedSecret + exchangeHash + c + self.sessionID)
+        if self.kexAlg == 'diffie-hellman-group-exchange-sha256':
+            h = sha256
+        else:
+            h = sha1
+        k1 = h(sharedSecret + exchangeHash + c + self.sessionID)
         k1 = k1.digest()
-        k2 = sha1(sharedSecret + exchangeHash + k1).digest()
+        k2 = h(sharedSecret + exchangeHash + k1).digest()
         return k1 + k2
 
 
@@ -945,8 +950,8 @@ class SSHServerTransport(SSHTransportBase):
         This represents two different key exchange methods that share the same
         integer value.  If the message is determined to be a KEXDH_INIT,
         C{_ssh_KEXDH_INIT} is called to handle it.  Otherwise, for
-        KEX_DH_GEX_REQUEST_OLD (for diffie-hellman-group-exchange-sha1)
-        payload::
+        KEX_DH_GEX_REQUEST_OLD (for diffie-hellman-group-exchange-sha1 or
+        diffie-hellman-group-exchange-sha256) payload::
 
                 integer ideal (ideal size for the Diffie-Hellman prime)
 
@@ -964,7 +969,8 @@ class SSHServerTransport(SSHTransportBase):
         # another cue to decide what kind of message the peer sent us.
         if self.kexAlg == 'diffie-hellman-group1-sha1':
             return self._ssh_KEXDH_INIT(packet)
-        elif self.kexAlg == 'diffie-hellman-group-exchange-sha1':
+        elif self.kexAlg in ('diffie-hellman-group-exchange-sha1',
+                             'diffie-hellman-group-exchange-sha256'):
             self.dhGexRequest = packet
             ideal = struct.unpack('>L', packet)[0]
             self.g, self.p = self.factory.getDHPrime(ideal)
@@ -1017,7 +1023,10 @@ class SSHServerTransport(SSHTransportBase):
 
         serverDHpublicKey = _MPpow(self.g, y, self.p)
         sharedSecret = _MPpow(clientDHpublicKey, y, self.p)
-        h = sha1()
+        if self.kexAlg == 'diffie-hellman-group-exchange-sha256':
+            h = sha256()
+        else:
+            h = sha1()
         h.update(NS(self.otherVersionString))
         h.update(NS(self.ourVersionString))
         h.update(NS(self.otherKexInitPayload))
@@ -1110,7 +1119,8 @@ class SSHClientTransport(SSHTransportBase):
         this method sends the first key exchange packet.  If the agreed-upon
         exchange is diffie-hellman-group1-sha1, generate a public key
         and send it in a MSG_KEXDH_INIT message.  If the exchange is
-        diffie-hellman-group-exchange-sha1, ask for a 2048 bit group with a
+        diffie-hellman-group-exchange-sha1 or
+        diffie-hellman-group-exchange-sha256, ask for a 2048 bit group with a
         MSG_KEX_DH_GEX_REQUEST_OLD message.
         """
         if SSHTransportBase.ssh_KEXINIT(self, packet) is None:
@@ -1119,7 +1129,8 @@ class SSHClientTransport(SSHTransportBase):
             self.x = _generateX(randbytes.secureRandom, 512)
             self.e = _MPpow(DH_GENERATOR, self.x, DH_PRIME)
             self.sendPacket(MSG_KEXDH_INIT, self.e)
-        elif self.kexAlg == 'diffie-hellman-group-exchange-sha1':
+        elif self.kexAlg in ('diffie-hellman-group-exchange-sha1',
+                             'diffie-hellman-group-exchange-sha256'):
             self.sendPacket(MSG_KEX_DH_GEX_REQUEST_OLD, '\x00\x00\x08\x00')
         else:
             raise error.ConchError("somehow, the kexAlg has been set "
@@ -1162,8 +1173,9 @@ class SSHClientTransport(SSHTransportBase):
         """
         This handles two different message which share an integer value.
 
-        If the key exchange is diffie-hellman-group-exchange-sha1, this is
-        MSG_KEX_DH_GEX_GROUP.  Payload::
+        If the key exchange is diffie-hellman-group-exchange-sha1 or
+        diffie-hellman-group-exchange-sha256, this is MSG_KEX_DH_GEX_GROUP.
+        Payload::
             string g (group generator)
             string p (group prime)
 
@@ -1247,7 +1259,10 @@ class SSHClientTransport(SSHTransportBase):
         """
         serverKey = keys.Key.fromString(pubKey)
         sharedSecret = _MPpow(f, self.x, self.p)
-        h = sha1()
+        if self.kexAlg == 'diffie-hellman-group-exchange-sha256':
+            h = sha256()
+        else:
+            h = sha1()
         h.update(NS(self.ourVersionString))
         h.update(NS(self.otherVersionString))
         h.update(NS(self.ourKexInitPayload))
diff --git a/twisted/conch/test/test_ssh.py b/twisted/conch/test/test_ssh.py
index d1d3cea..8448a93 100644
--- a/twisted/conch/test/test_ssh.py
+++ b/twisted/conch/test/test_ssh.py
@@ -872,8 +872,12 @@ class TestSSHFactory(unittest.TestCase):
         p2 = f2.buildProtocol(None)
         self.assertNotIn(
             'diffie-hellman-group-exchange-sha1', p1.supportedKeyExchanges)
+        self.assertNotIn(
+            'diffie-hellman-group-exchange-sha256', p1.supportedKeyExchanges)
         self.assertIn(
             'diffie-hellman-group-exchange-sha1', p2.supportedKeyExchanges)
+        self.assertIn(
+            'diffie-hellman-group-exchange-sha256', p2.supportedKeyExchanges)
 
 
 
diff --git a/twisted/conch/test/test_transport.py b/twisted/conch/test/test_transport.py
index 70e116c..76d3b52 100644
--- a/twisted/conch/test/test_transport.py
+++ b/twisted/conch/test/test_transport.py
@@ -35,7 +35,7 @@ else:
         class SSHFactory:
             pass
 
-from hashlib import md5, sha1
+from hashlib import md5, sha1, sha256
 
 from twisted.trial import unittest
 from twisted.internet import defer
@@ -274,7 +274,8 @@ class MockFactory(factory.SSHFactory):
     def getPrimes(self):
         """
         Return the Diffie-Hellman primes that can be used for the
-        diffie-hellman-group-exchange-sha1 key exchange.
+        diffie-hellman-group-exchange-sha1 or
+        diffie-hellman-group-exchange-sha256 key exchange.
         """
         return {
             1024: ((2, transport.DH_PRIME),),
@@ -1042,6 +1043,7 @@ here's some other stuff
         """
         Test that _getKey generates the correct keys.
         """
+        self.proto.kexAlg = 'diffie-hellman-group-exchange-sha1'
         self.proto.sessionID = 'EF'
 
         k1 = sha1('AB' + 'CD' + 'K' + self.proto.sessionID).digest()
@@ -1049,6 +1051,18 @@ here's some other stuff
         self.assertEqual(self.proto._getKey('K', 'AB', 'CD'), k1 + k2)
 
 
+    def test_getKey_sha256(self):
+        """
+        Like test_getKey, but for 'diffie-hellman-group-exchange-sha256'.
+        """
+        self.proto.kexAlg = 'diffie-hellman-group-exchange-sha256'
+        self.proto.sessionID = 'EF'
+
+        k1 = sha256('AB' + 'CD' + 'K' + self.proto.sessionID).digest()
+        k2 = sha256('ABCD' + k1).digest()
+        self.assertEqual(self.proto._getKey('K', 'AB', 'CD'), k1 + k2)
+
+
     def test_multipleClasses(self):
         """
         Test that multiple instances have distinct states.
@@ -1198,19 +1212,19 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         Test that receiving a KEXINIT packet sets up the correct values on the
         server.
         """
-        self.proto.dataReceived( 'SSH-2.0-Twisted\r\n\x00\x00\x01\xd4\t\x14'
+        self.proto.dataReceived( 'SSH-2.0-Twisted\r\n\x00\x00\x01\xf4\x04\x14'
                 '\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99'
-                '\x99\x00\x00\x00=diffie-hellman-group1-sha1,diffie-hellman-g'
-                'roup-exchange-sha1\x00\x00\x00\x0fssh-dss,ssh-rsa\x00\x00\x00'
-                '\x85aes128-ctr,aes128-cbc,aes192-ctr,aes192-cbc,aes256-ctr,ae'
-                's256-cbc,cast128-ctr,cast128-cbc,blowfish-ctr,blowfish-cbc,3d'
-                'es-ctr,3des-cbc\x00\x00\x00\x85aes128-ctr,aes128-cbc,aes192-c'
-                'tr,aes192-cbc,aes256-ctr,aes256-cbc,cast128-ctr,cast128-cbc,b'
-                'lowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc\x00\x00\x00\x12hma'
-                'c-md5,hmac-sha1\x00\x00\x00\x12hmac-md5,hmac-sha1\x00\x00\x00'
-                '\tnone,zlib\x00\x00\x00\tnone,zlib\x00\x00\x00\x00\x00\x00'
-                '\x00\x00\x00\x00\x00\x00\x00\x99\x99\x99\x99\x99\x99\x99\x99'
-                '\x99')
+                '\x99\x00\x00\x00bdiffie-hellman-group1-sha1,diffie-hellman-g'
+                'roup-exchange-sha1,diffie-hellman-group-exchange-sha256\x00'
+                '\x00\x00\x0fssh-dss,ssh-rsa\x00\x00\x00\x85aes128-ctr,aes128-'
+                'cbc,aes192-ctr,aes192-cbc,aes256-ctr,aes256-cbc,cast128-ctr,c'
+                'ast128-cbc,blowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc\x00'
+                '\x00\x00\x85aes128-ctr,aes128-cbc,aes192-ctr,aes192-cbc,aes25'
+                '6-ctr,aes256-cbc,cast128-ctr,cast128-cbc,blowfish-ctr,blowfis'
+                'h-cbc,3des-ctr,3des-cbc\x00\x00\x00\x12hmac-md5,hmac-sha1\x00'
+                '\x00\x00\x12hmac-md5,hmac-sha1\x00\x00\x00\tnone,zlib\x00\x00'
+                '\x00\tnone,zlib\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
+                '\x00\x00\x99\x99\x99\x99')
         self.assertEqual(self.proto.kexAlg,
                           'diffie-hellman-group1-sha1')
         self.assertEqual(self.proto.keyAlg,
@@ -1353,11 +1367,30 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.assertEqual(self.proto.p, transport.DH_PRIME)
 
 
+    def test_KEX_DH_GEX_REQUEST_OLD_sha256(self):
+        """
+        Like test_KEX_DH_GEX_REQUEST_OLD, but for
+        'diffie-hellman-group-exchange-sha256'.
+        """
+        self.proto.supportedKeyExchanges = [
+                'diffie-hellman-group-exchange-sha256']
+        self.proto.supportedPublicKeys = ['ssh-rsa']
+        self.proto.dataReceived(self.transport.value())
+        self.proto.ssh_KEX_DH_GEX_REQUEST_OLD('\x00\x00\x04\x00')
+        self.assertEqual(
+            self.packets,
+            [(transport.MSG_KEX_DH_GEX_GROUP,
+              common.MP(transport.DH_PRIME) + '\x00\x00\x00\x01\x02')])
+        self.assertEqual(self.proto.g, 2)
+        self.assertEqual(self.proto.p, transport.DH_PRIME)
+
+
     def test_KEX_DH_GEX_REQUEST_OLD_badKexAlg(self):
         """
         Test that if the server recieves a KEX_DH_GEX_REQUEST_OLD message
-        and the key exchange algorithm is not 'diffie-hellman-group1-sha1' or
-        'diffie-hellman-group-exchange-sha1', we raise a ConchError.
+        and the key exchange algorithm is not 'diffie-hellman-group1-sha1',
+        'diffie-hellman-group-exchange-sha1', or
+        'diffie-hellman-group-exchange-sha256', we raise a ConchError.
         """
         self.proto.kexAlg = None
         self.assertRaises(ConchError, self.proto.ssh_KEX_DH_GEX_REQUEST_OLD,
@@ -1384,6 +1417,25 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.assertEqual(self.proto.p, transport.DH_PRIME)
 
 
+    def test_KEX_DH_GEX_REQUEST_sha256(self):
+        """
+        Like test_KEX_DH_GEX_REQUEST, but for
+        'diffie-hellman-group-exchange-sha256'.
+        """
+        self.proto.supportedKeyExchanges = [
+            'diffie-hellman-group-exchange-sha256']
+        self.proto.supportedPublicKeys = ['ssh-rsa']
+        self.proto.dataReceived(self.transport.value())
+        self.proto.ssh_KEX_DH_GEX_REQUEST('\x00\x00\x04\x00\x00\x00\x08\x00' +
+                                          '\x00\x00\x0c\x00')
+        self.assertEqual(
+            self.packets,
+            [(transport.MSG_KEX_DH_GEX_GROUP,
+              common.MP(transport.DH_PRIME) + '\x00\x00\x00\x01\x03')])
+        self.assertEqual(self.proto.g, 3)
+        self.assertEqual(self.proto.p, transport.DH_PRIME)
+
+
     def test_KEX_DH_GEX_INIT_after_REQUEST(self):
         """
         Test that the KEX_DH_GEX_INIT message after the client sends
@@ -1415,6 +1467,36 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
                         exchangeHash))))
 
 
+    def test_KEX_DH_GEX_INIT_after_REQUEST_sha256(self):
+        """
+        Like test_KEX_DH_GEX_INIT_after_REQUEST, but for
+        'diffie-hellman-group-exchange-sha256'.
+        """
+        self.test_KEX_DH_GEX_REQUEST_sha256()
+        e = pow(self.proto.g, 3, self.proto.p)
+        y = common.getMP('\x00\x00\x00\x80' + '\x99' * 128)[0]
+        f = common._MPpow(self.proto.g, y, self.proto.p)
+        sharedSecret = common._MPpow(e, y, self.proto.p)
+        h = sha256()
+        h.update(common.NS(self.proto.ourVersionString) * 2)
+        h.update(common.NS(self.proto.ourKexInitPayload) * 2)
+        h.update(common.NS(self.proto.factory.publicKeys['ssh-rsa'].blob()))
+        h.update('\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00\x0c\x00')
+        h.update(common.MP(self.proto.p))
+        h.update(common.MP(self.proto.g))
+        h.update(common.MP(e))
+        h.update(f)
+        h.update(sharedSecret)
+        exchangeHash = h.digest()
+        self.proto.ssh_KEX_DH_GEX_INIT(common.MP(e))
+        self.assertEqual(
+            self.packets[1],
+            (transport.MSG_KEX_DH_GEX_REPLY,
+             common.NS(self.proto.factory.publicKeys['ssh-rsa'].blob()) +
+             f + common.NS(self.proto.factory.privateKeys['ssh-rsa'].sign(
+                        exchangeHash))))
+
+
     def test_KEX_DH_GEX_INIT_after_REQUEST_OLD(self):
         """
         Test that the KEX_DH_GEX_INIT message after the client sends
@@ -1447,10 +1529,42 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
              (transport.MSG_NEWKEYS, '')])
 
 
+    def test_KEX_DH_GEX_INIT_after_REQUEST_OLD_sha256(self):
+        """
+        Like test_KEX_DH_GEX_INIT_after_REQUEST_OLD, but for
+        'diffie-hellman-group-exchange-sha256'.
+        """
+        self.test_KEX_DH_GEX_REQUEST_OLD_sha256()
+        e = pow(self.proto.g, 3, self.proto.p)
+        y = common.getMP('\x00\x00\x00\x80' + '\x99' * 128)[0]
+        f = common._MPpow(self.proto.g, y, self.proto.p)
+        sharedSecret = common._MPpow(e, y, self.proto.p)
+        h = sha256()
+        h.update(common.NS(self.proto.ourVersionString) * 2)
+        h.update(common.NS(self.proto.ourKexInitPayload) * 2)
+        h.update(common.NS(self.proto.factory.publicKeys['ssh-rsa'].blob()))
+        h.update('\x00\x00\x04\x00')
+        h.update(common.MP(self.proto.p))
+        h.update(common.MP(self.proto.g))
+        h.update(common.MP(e))
+        h.update(f)
+        h.update(sharedSecret)
+        exchangeHash = h.digest()
+        self.proto.ssh_KEX_DH_GEX_INIT(common.MP(e))
+        self.assertEqual(
+            self.packets[1:],
+            [(transport.MSG_KEX_DH_GEX_REPLY,
+              common.NS(self.proto.factory.publicKeys['ssh-rsa'].blob()) +
+              f + common.NS(self.proto.factory.privateKeys['ssh-rsa'].sign(
+                            exchangeHash))),
+             (transport.MSG_NEWKEYS, '')])
+
+
     def test_keySetup(self):
         """
         Test that _keySetup sets up the next encryption keys.
         """
+        self.proto.kexAlg = 'diffie-hellman-group1-sha1'
         self.proto.nextEncryptions = MockCipher()
         self.simulateKeyExchange('AB', 'CD')
         self.assertEqual(self.proto.sessionID, 'CD')
@@ -1532,21 +1646,21 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         client.  The way algorithms are picks is that the first item in the
         client's list that is also in the server's list is chosen.
         """
-        self.proto.dataReceived( 'SSH-2.0-Twisted\r\n\x00\x00\x01\xd4\t\x14'
+        self.proto.dataReceived( 'SSH-2.0-Twisted\r\n\x00\x00\x01\xf4\x04\x14'
                 '\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99'
-                '\x99\x00\x00\x00=diffie-hellman-group1-sha1,diffie-hellman-g'
-                'roup-exchange-sha1\x00\x00\x00\x0fssh-dss,ssh-rsa\x00\x00\x00'
-                '\x85aes128-ctr,aes128-cbc,aes192-ctr,aes192-cbc,aes256-ctr,ae'
-                's256-cbc,cast128-ctr,cast128-cbc,blowfish-ctr,blowfish-cbc,3d'
-                'es-ctr,3des-cbc\x00\x00\x00\x85aes128-ctr,aes128-cbc,aes192-c'
-                'tr,aes192-cbc,aes256-ctr,aes256-cbc,cast128-ctr,cast128-cbc,b'
-                'lowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc\x00\x00\x00\x12hma'
-                'c-md5,hmac-sha1\x00\x00\x00\x12hmac-md5,hmac-sha1\x00\x00\x00'
-                '\tzlib,none\x00\x00\x00\tzlib,none\x00\x00\x00\x00\x00\x00'
-                '\x00\x00\x00\x00\x00\x00\x00\x99\x99\x99\x99\x99\x99\x99\x99'
-                '\x99')
+                '\x99\x00\x00\x00bdiffie-hellman-group1-sha1,diffie-hellman-g'
+                'roup-exchange-sha1,diffie-hellman-group-exchange-sha256\x00'
+                '\x00\x00\x0fssh-dss,ssh-rsa\x00\x00\x00\x85aes128-ctr,aes128-'
+                'cbc,aes192-ctr,aes192-cbc,aes256-ctr,aes256-cbc,cast128-ctr,c'
+                'ast128-cbc,blowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc\x00'
+                '\x00\x00\x85aes128-ctr,aes128-cbc,aes192-ctr,aes192-cbc,aes25'
+                '6-ctr,aes256-cbc,cast128-ctr,cast128-cbc,blowfish-ctr,blowfis'
+                'h-cbc,3des-ctr,3des-cbc\x00\x00\x00\x12hmac-md5,hmac-sha1\x00'
+                '\x00\x00\x12hmac-md5,hmac-sha1\x00\x00\x00\tzlib,none\x00\x00'
+                '\x00\tzlib,none\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
+                '\x00\x00\x99\x99\x99\x99')
         self.assertEqual(self.proto.kexAlg,
-                          'diffie-hellman-group-exchange-sha1')
+                          'diffie-hellman-group-exchange-sha256')
         self.assertEqual(self.proto.keyAlg,
                           'ssh-rsa')
         self.assertEqual(self.proto.outgoingCompressionType,
@@ -1604,6 +1718,18 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
                                           '\x00\x00\x08\x00')])
 
 
+    def test_KEXINIT_groupexchange_sha256(self):
+        """
+        Like test_KEXINIT_groupexchange, but for
+        'diffie-hellman-group-exchange-sha256'.
+        """
+        self.proto.supportedKeyExchanges = [
+            'diffie-hellman-group-exchange-sha256']
+        self.proto.dataReceived(self.transport.value())
+        self.assertEqual(self.packets, [(transport.MSG_KEX_DH_GEX_REQUEST_OLD,
+                                          '\x00\x00\x08\x00')])
+
+
     def test_KEXINIT_group1(self):
         """
         Like test_KEXINIT_groupexchange, but for the group-1 key exchange.
@@ -1675,6 +1801,23 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
                                               self.proto.e)])
 
 
+    def test_KEX_DH_GEX_GROUP_sha256(self):
+        """
+        Like test_KEX_DH_GEX_GROUP, but for
+        'diffie-hellman-group-exchange-sha256'.
+        """
+        self.test_KEXINIT_groupexchange_sha256()
+        self.proto.ssh_KEX_DH_GEX_GROUP(
+            '\x00\x00\x00\x01\x0f\x00\x00\x00\x01\x02')
+        self.assertEqual(self.proto.p, 15)
+        self.assertEqual(self.proto.g, 2)
+        self.assertEqual(common.MP(self.proto.x)[5:], '\x99' * 40)
+        self.assertEqual(self.proto.e,
+                          common.MP(pow(2, self.proto.x, 15)))
+        self.assertEqual(self.packets[1:], [(transport.MSG_KEX_DH_GEX_INIT,
+                                              self.proto.e)])
+
+
     def test_KEX_DH_GEX_REPLY(self):
         """
         Test that the KEX_DH_GEX_REPLY message results in a verified
@@ -1708,10 +1851,44 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         return d
 
 
+    def test_KEX_DH_GEX_REPLY_sha256(self):
+        """
+        Like test_KEX_DH_GEX_REPLY, but for
+        'diffie-hellman-group-exchange-sha256'.
+        """
+
+        self.test_KEX_DH_GEX_GROUP_sha256()
+        sharedSecret = common._MPpow(3, self.proto.x, self.proto.p)
+        h = sha256()
+        h.update(common.NS(self.proto.ourVersionString) * 2)
+        h.update(common.NS(self.proto.ourKexInitPayload) * 2)
+        h.update(common.NS(self.blob))
+        h.update('\x00\x00\x08\x00\x00\x00\x00\x01\x0f\x00\x00\x00\x01\x02')
+        h.update(self.proto.e)
+        h.update('\x00\x00\x00\x01\x03') # f
+        h.update(sharedSecret)
+        exchangeHash = h.digest()
+
+        def _cbTestKEX_DH_GEX_REPLY(value):
+            self.assertIs(value, None)
+            self.assertEqual(self.calledVerifyHostKey, True)
+            self.assertEqual(self.proto.sessionID, exchangeHash)
+
+        signature = self.privObj.sign(exchangeHash)
+
+        d = self.proto.ssh_KEX_DH_GEX_REPLY(
+            common.NS(self.blob) +
+            '\x00\x00\x00\x01\x03' +
+            common.NS(signature))
+        d.addCallback(_cbTestKEX_DH_GEX_REPLY)
+        return d
+
+
     def test_keySetup(self):
         """
         Test that _keySetup sets up the next encryption keys.
         """
+        self.proto.kexAlg = 'diffie-hellman-group1-sha1'
         self.proto.nextEncryptions = MockCipher()
         self.simulateKeyExchange('AB', 'CD')
         self.assertEqual(self.proto.sessionID, 'CD')
