--- twisted/protocols/shoutcast.py	2003-01-11 20:03:47.000000000 -0600
+++ ../Twisted.WiP/twisted/protocols/shoutcast.py	2003-09-19 03:15:25.000000000 -0500
@@ -14,7 +14,7 @@
 # License along with this library; if not, write to the Free Software
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
-"""Chop up shoutcast stream into MP3s and metadata."""
+"""Chop up shoutcast stream into MP3s and metadata, if available."""
 
 from twisted.protocols import http
 
@@ -28,14 +28,18 @@
     for details on the protocol.
     """
 
-    def __init__(self, path="/"):
+    def __init__(self, path="/", request_metadata=True):
         self.path = path
+        self.request_metadata = request_metadata
+        self.got_metadata = False
+        self.metaint = None
         self.metamode = "mp3"
         self.databuffer = ""
-    
+        
     def connectionMade(self):
         self.sendCommand("GET", self.path)
-        self.sendHeader("Icy-MetaData", "1")
+        if self.request_metadata:
+            self.sendHeader("Icy-MetaData", "1")
         self.endHeaders()
         
     def lineReceived(self, line):
@@ -48,8 +52,20 @@
     def handleHeader(self, key, value):
         if key.lower() == 'icy-metaint':
             self.metaint = int(value)
-    
-    def handleResponsePart(self, data):
+            self.got_metadata = True
+
+    def handleEndHeaders(self):
+        # Lets check if we got metadata, and set the
+        # appropriate handleResponsePart method.
+        # (This might not match what we requested.)
+        if self.got_metadata:
+            # if we have metadata, then it has to be parsed out of the data stream
+            self.handleResponsePart = self.handleResponsePart_with_metadata
+        else:
+            # otherwise, all the data is MP3 data
+            self.handleResponsePart = self.gotMP3Data
+
+    def handleResponsePart_with_metadata(self, data):
         self.databuffer += data
         while self.databuffer:
             stop = getattr(self, "handle_%s" % self.metamode)()
@@ -92,11 +108,14 @@
         return meta
     
     def gotMetaData(self, metadata):
-        """Called with a list of (key, value) pairs of metadata.
+        """Implement this method if needed.
+        
+        Called with a list of (key, value) pairs of metadata,
+        if metadata is available on the server.
 
         Will only be called on non-empty metadata.
         """
-        raise NotImplementedError, "implement in subclass"
+        pass
     
     def gotMP3Data(self, data):
         """Called with chunk of MP3 data."""
