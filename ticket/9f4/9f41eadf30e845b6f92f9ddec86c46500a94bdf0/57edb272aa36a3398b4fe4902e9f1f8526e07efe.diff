=== modified file 'twisted/web/_newclient.py'
--- twisted/web/_newclient.py	2010-10-01 15:41:16 +0000
+++ twisted/web/_newclient.py	2010-10-08 15:37:26 +0000
@@ -740,8 +740,8 @@
         self._length = producer.length
         self._producer = producer
         self._finished = finished
-
-
+   
+ 
     def _allowNoMoreWrites(self):
         """
         Indicate that no additional writes are allowed.  Attempts to write
@@ -756,6 +756,8 @@
         C{_noMoreWritesExpected} has been called or there are/have been too
         many bytes.
         """
+        if self._consumer.producer is not None:
+            self._producer = self._consumer.producer
         if self._finished is None:
             # No writes are supposed to happen any more.  Try to convince the
             # calling code to stop calling this method by calling its

=== modified file 'twisted/web/test/test_newclient.py'
--- twisted/web/test/test_newclient.py	2010-10-01 15:41:16 +0000
+++ twisted/web/test/test_newclient.py	2010-10-08 15:37:47 +0000
@@ -1716,6 +1716,21 @@
         self.enforcer.write('def')
         self.assertEqual(self.transport.value(), 'def')
 
+    def test_alternateProducerRegistration(self):
+        """
+        L{LengthEnforcingConsumer.write} keeps track of the current producer
+        registered with the proxied L{IConsumer}.
+        """
+        producer = StringProducer(10)
+        self.enforcer.registerProducer(self.producer, 1)
+        self.enforcer.unregisterProducer()
+        self.enforcer.registerProducer(producer, 1)
+        self.enforcer.write('x' * 10)
+        self.assertEqual(self.transport.value(), 'x' * 10)
+        self.assertFalse(producer.stopped)
+        self.enforcer.write('x')
+        self.assertTrue(producer.stopped)
+        self.assertFalse(self.producer.stopped)
 
     def test_finishedEarly(self):
         """

