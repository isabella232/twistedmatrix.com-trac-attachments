=== modified file 'twisted/web/_newclient.py'
--- twisted/web/_newclient.py	2010-02-25 03:48:17 +0000
+++ twisted/web/_newclient.py	2010-10-01 15:15:15 +0000
@@ -34,6 +34,7 @@
 from twisted.python.reflect import fullyQualifiedName
 from twisted.python.failure import Failure
 from twisted.python.compat import set
+from twisted.python.components import proxyForInterface
 from twisted.internet.interfaces import IConsumer, IPushProducer
 from twisted.internet.error import ConnectionDone
 from twisted.internet.defer import Deferred, succeed, fail, maybeDeferred
@@ -718,7 +719,7 @@
 
 
 
-class LengthEnforcingConsumer:
+class LengthEnforcingConsumer(proxyForInterface(IConsumer, '_consumer')):
     """
     An L{IConsumer} proxy which enforces an exact length requirement on the
     total data written to it.
@@ -735,9 +736,9 @@
         many bytes are written to this consumer.
     """
     def __init__(self, producer, consumer, finished):
+        super(LengthEnforcingConsumer, self).__init__(consumer)
         self._length = producer.length
         self._producer = producer
-        self._consumer = consumer
         self._finished = finished
 
 

=== modified file 'twisted/web/test/test_newclient.py'
--- twisted/web/test/test_newclient.py	2010-02-25 03:48:17 +0000
+++ twisted/web/test/test_newclient.py	2010-10-01 15:15:02 +0000
@@ -1795,6 +1795,16 @@
         d.addCallback(cbFinished)
         return d
 
+    def test_proxiesIConsumer(self):
+        """
+        Instances of L{LengthEnforcingConsumer} should proxy attribute on the
+        proxied L{IConsumer} instance.
+        """
+        consumer = self.enforcer._consumer
+        self.assertEquals(self.enforcer.registerProducer,
+                          consumer.registerProducer)
+        self.assertEquals(self.enforcer.unregisterProducer,
+                          consumer.unregisterProducer)        
 
 
 class RequestBodyConsumerTests(TestCase):

