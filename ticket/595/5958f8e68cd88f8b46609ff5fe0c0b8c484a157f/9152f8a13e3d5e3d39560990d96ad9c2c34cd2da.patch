Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(revision 29147)
+++ twisted/test/test_amp.py	(working copy)
@@ -2781,6 +2781,63 @@
 
 
 
+class ListOfOptionalTests(unittest.TestCase):
+    """
+    Tests to ensure L{ListOf} AMP arguments can be omitted from AMP commands
+    via the 'optional' flag.
+    """
+    def test_requiredArgumentWithNoneValueRaisesTypeError(self):
+        """
+        L{ListOf.toBox} raises C{TypeError} when passed a value of C{None}
+        for the argument.
+        """
+        stringList = amp.ListOf(amp.Integer())
+        self.assertRaises(TypeError, stringList.toBox, 'omitted', amp.AmpBox(),
+            {'omitted': None}, None)
+
+
+    def test_optionalArgumentWithNoneValueOmitted(self):
+        """
+        L{ListOf.toBox} silently omits serializing any argument with a
+        value of C{None} that is designated as optional for the protocol.
+        """
+        stringList = amp.ListOf(amp.Integer(), optional=True)
+        strings = amp.AmpBox()
+        stringList.toBox('omitted', strings, {'omitted': None}, None)
+        self.assertEquals(strings, {})
+
+
+    def test_requiredArgumentWithKeyMissingRaisesKeyError(self):
+        """
+        L{ListOf.toBox} raises C{KeyError} if the argument's key is not
+        present in the objects dictionary.
+        """
+        stringList = amp.ListOf(amp.Integer())
+        self.assertRaises(KeyError, stringList.toBox, 'ommited', amp.AmpBox(),
+            {'someOtherKey': 0}, None) #
+
+
+    def test_optionalArgumentWithKeyMissingOmitted(self):
+        """
+        L{ListOf.toBox} silently omits serializing any argument designated
+        as optional whose key is not present in the objects dictionary.
+        """
+        stringList = amp.ListOf(amp.Integer(), optional=True)
+        stringList.toBox('ommited', amp.AmpBox(), {'someOtherKey': 0}, None)
+
+
+    def test_omittedOptionalArgumentDeserializesAsNone(self):
+        """
+        L{ListOf.fromBox} correctly reverses the operation performed by
+        L{ListOf.toBox} for optional arguments.
+        """
+        stringList = amp.ListOf(amp.Integer(), optional=True)
+        objects = {}
+        stringList.fromBox('omitted', {}, objects, None)
+        self.assertEquals(objects, {'omitted': None})
+
+
+
 class DateTimeTests(unittest.TestCase):
     """
     Tests for L{amp.DateTime}, L{amp._FixedOffsetTZInfo}, and L{amp.utc}.
Index: twisted/protocols/amp.py
===================================================================
--- twisted/protocols/amp.py	(revision 29147)
+++ twisted/protocols/amp.py	(working copy)
@@ -1394,10 +1394,14 @@
         arguments must be implemented using only the C{fromString} and
         C{toString} methods, not the C{fromBox} and C{toBox} methods).
 
+    @param optional: a boolean indicating whether this argument can be
+        omitted in the protocol.
+
     @since: 10.0
     """
-    def __init__(self, elementType):
+    def __init__(self, elementType, optional=False):
         self.elementType = elementType
+        Argument.__init__(self, optional)
 
 
     def fromString(self, inString):
