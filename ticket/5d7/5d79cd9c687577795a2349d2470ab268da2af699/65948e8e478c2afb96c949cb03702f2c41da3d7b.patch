Index: twisted/test/test_usage.py
===================================================================
--- twisted/test/test_usage.py	(revision 38346)
+++ twisted/test/test_usage.py	(working copy)
@@ -36,7 +36,8 @@
 
 class ParseCorrectnessTest(unittest.TestCase):
     """
-    Test Options.parseArgs for correct values under good conditions.
+    Test L{usage.Options.parseOptions} for correct values under
+    good conditions.
     """
     def setUp(self):
         """
@@ -53,7 +54,7 @@
 
     def test_checkParameters(self):
         """
-        Checking that parameters have correct values.
+        Parameters have correct values.
         """
         self.assertEqual(self.nice.opts['long'], "Alpha")
         self.assertEqual(self.nice.opts['another'], "Beta")
@@ -62,14 +63,14 @@
 
     def test_checkFlags(self):
         """
-        Checking that flags have correct values.
+        Flags have correct values.
         """
         self.assertEqual(self.nice.opts['aflag'], 1)
         self.assertEqual(self.nice.opts['flout'], 0)
 
     def test_checkCustoms(self):
         """
-        Checking that custom flags and parameters have correct values.
+        Custom flags and parameters have correct values.
         """
         self.assertEqual(self.nice.opts['myflag'], "PONY!")
         self.assertEqual(self.nice.opts['myparam'], "Tofu WITH A PONY!")
@@ -96,14 +97,14 @@
 
 class TypedTestCase(unittest.TestCase):
     """
-    Test Options.parseArgs for options with forced types.
+    Test L{usage.Options.parseOptions} for options with forced types.
     """
     def setUp(self):
         self.usage = TypedOptions()
 
     def test_defaultValues(self):
         """
-        Test parsing of default values.
+        Default values are parsed.
         """
         argV = []
         self.usage.parseOptions(argV)
@@ -117,7 +118,7 @@
 
     def test_parsingValues(self):
         """
-        Test basic parsing of int and float values.
+        int and float values are parsed.
         """
         argV = ("--fooint 912 --foofloat -823.1 "
                 "--eggint 32 --eggfloat 21").split()
@@ -151,7 +152,7 @@
 
     def test_invalidValues(self):
         """
-        Check that passing wrong values raises an error.
+        Passing wrong values raises an error.
         """
         argV = "--fooint egg".split()
         self.assertRaises(usage.UsageError, self.usage.parseOptions, argV)
@@ -177,11 +178,11 @@
 
 class WrongTypedTestCase(unittest.TestCase):
     """
-    Test Options.parseArgs for wrong coerce options.
+    Test L{usage.Options.parseOptions} for wrong coerce options.
     """
     def test_nonCallable(self):
         """
-        Check that using a non callable type fails.
+        Using a non-callable type fails.
         """
         us =  WrongTypedOptions()
         argV = "--barwrong egg".split()
@@ -189,8 +190,7 @@
 
     def test_notCalledInDefault(self):
         """
-        Test that the coerce functions are not called if no values are
-        provided.
+        The coerce functions are not called if no values are provided.
         """
         us = WeirdCallableOptions()
         argV = []
@@ -198,7 +198,7 @@
 
     def test_weirdCallable(self):
         """
-        Test what happens when coerce functions raise errors.
+        Errors raised by coerce functions are handled properly.
         """
         us = WeirdCallableOptions()
         argV = "--foowrong blah".split()
@@ -254,8 +254,13 @@
 
 
 class SubCommandTest(unittest.TestCase):
-
+    """
+    Test L{usage.Options.parseOptions} for options with subcommands.
+    """
     def test_simpleSubcommand(self):
+        """
+        A subcommand is recognized.
+        """
         o = SubCommandOptions()
         o.parseOptions(['--europian-swallow', 'inquisition'])
         self.assertEqual(o['europian-swallow'], True)
@@ -265,6 +270,9 @@
         self.assertEqual(o.subOptions['torture-device'], 'comfy-chair')
 
     def test_subcommandWithFlagsAndOptions(self):
+        """
+        Flags and options of a subcommand are assigned.
+        """
         o = SubCommandOptions()
         o.parseOptions(['inquisition', '--expect', '--torture-device=feather'])
         self.assertEqual(o['europian-swallow'], False)
@@ -274,6 +282,9 @@
         self.assertEqual(o.subOptions['torture-device'], 'feather')
 
     def test_subcommandAliasWithFlagsAndOptions(self):
+        """
+        Flags and options of a subcommand alias are assigned.
+        """
         o = SubCommandOptions()
         o.parseOptions(['inquest', '--expect', '--torture-device=feather'])
         self.assertEqual(o['europian-swallow'], False)
@@ -283,6 +294,9 @@
         self.assertEqual(o.subOptions['torture-device'], 'feather')
 
     def test_anotherSubcommandWithFlagsAndOptions(self):
+        """
+        Flags and options of another subcommand are assigned.
+        """
         o = SubCommandOptions()
         o.parseOptions(['holyquest', '--for-grail'])
         self.assertEqual(o['europian-swallow'], False)
@@ -292,6 +306,10 @@
         self.assertEqual(o.subOptions['for-grail'], True)
 
     def test_noSubcommand(self):
+        """
+        If no subcommand is specified and no default subcommand is assigned,
+        a subcommand will not be implied.
+        """
         o = SubCommandOptions()
         o.parseOptions(['--europian-swallow'])
         self.assertEqual(o['europian-swallow'], True)
@@ -299,6 +317,9 @@
         self.failIf(hasattr(o, 'subOptions'))
 
     def test_defaultSubcommand(self):
+        """
+        Flags and options in the default subcommand are assigned.
+        """
         o = SubCommandOptions()
         o.defaultSubCommand = 'inquest'
         o.parseOptions(['--europian-swallow'])
@@ -309,6 +330,10 @@
         self.assertEqual(o.subOptions['torture-device'], 'comfy-chair')
 
     def test_subCommandParseOptionsHasParent(self):
+        """
+        The parseOptions method from the Options object specified for the
+        given subcommand is called.
+        """
         class SubOpt(usage.Options):
             def parseOptions(self, *a, **kw):
                 self.sawParent = self.parent
@@ -348,6 +373,9 @@
 
 
 class HelpStringTest(unittest.TestCase):
+    """
+    Test generated help strings.
+    """
     def setUp(self):
         """
         Instantiate a well-behaved Options class.
Index: twisted/topfiles/6444.doc
===================================================================
--- twisted/topfiles/6444.doc	(revision 0)
+++ twisted/topfiles/6444.doc	(revision 0)
@@ -0,0 +1 @@
+twisted.test.test_usage now has more accurate and correct docstrings.
