Here's a few things that might make Twisted easier to get into for new people:

- Answer the question; 'What's the point of going to all this trouble for an
  async design when 'regular' coding is so much easier?' Even a simple link to
the C10k page would help ('Why Use Twisted' is a good spot for it).  Lots of
people hear that Twisted is a great networking toolkit, but come expecting
something more akin to Net::X modules on CPAN and not a plunge into learning
about asynchronous design.

- On this note, an analogy describing async operation would be *really* useful.
Here's an (admittedly poor) example:

On blocking
-----------
 Let's say your DSL breaks, and you have to call your ISP to get them to fix
it. Unfortunately, everyone else's is broken too, and you sit with the phone
glued to your ear for an hour waiting for a tech to help you out. Now you have
to waste an hour of your day when you could be out biking because you're 
waiting for your ISP to pick up the dang phone.

 In programming terms, you are "blocking". You're waiting on some external 
resource to answer you before you can go do something more interesting.
Function calls that potentially block (wait) on the called function are known
as
synchronous calls. You will sometimes see poorly coded GUIs appear to freeze
when they are doing something like getting info from a database. This is 
because the GUI program has made a blocking call and is waiting for it to 
return before it can do something else (like respond to you clicking furiously
on "Cancel").

 Now let's say instead of waiting around on the phone all day for a tech to 
pick up, your ISP's phone system lets you leave your cell phone number so a 
tech can call you back when they are available. This is asynchronous
communication. Instead of blocking (waiting), you've told the ISP how to get
back to you when you're ready and have gone on to ride around the Arizona
desert. Method calls that give the called function a way to get back to them 
(usually it's another function known as a 'callback') when it's ready are 
known as asynchronous calls. The called method does this by returning 
immediately, and then calling the provided callback with the information 
needed at some later time.

in coding terms:

data = getSomethingFromTheDatabase(arg)

probably blocks, whereas

data = getBackToMeWithThatData(arg, onDataReceived)
def onDataReceived(data):
    # do something with data

does not.

 So what do you do if you need to do something like query a database in a 
handler? You could just accept callbacks and call them with the results, but
Twisted provides a nicer way to do it: the Deferred object.


- Put a quick overview of what the different packages in the 2.0 split are for.
  on the front page. There's no way to know which of the 'documentation' links 
you need without delving pretty deep.

- I'd have understood Deferreds a lot sooner if they had been presented as
callbacks on crack. Show the reader a simple callback design, then ask
'But what if you wanted to do x (set a different callback for error condition,
chain callbacks, etc)' and showing how deferreds solve that problem.
"Deferreds are beautiful!" kind of races through the how, and you're left 
wondering about the why. 

- Use a different service than Finger for 'Twisted from Scratch'. New users
care way more about a bot for AIM or MSN, and will thus pay closer
attention to figuring it out.

- twistd is awesomely useful and talked about very little. Rework 'Twisted from
Scratch' to take that AIM bot and magically turn it into a runnable server
*much* earlier in the example; I would seriously consider showing all of the 
examples this way. It's the right thing to do and it will get the people who 
are interested in building servers excited very early in the game.

- Twisted from Scratch gets confusing early on because so much is presented in
the first three sections. I would rework it so:

- In the very first page as you explain what each line does, explain that

  - A reactor is not magical and scary, it's just the event loop like
    Mainloop() in Tk. It selects (polls, kqueues) so you don't have to.

  - A Protocol defines what you want to do in response to those events, and
    you get a new one for every connection.

  - A Factory spits out new Protocol instances (more or less), and is the 
    proper place for data that you want all the protocol instances to have 
    access to, since they die when the connection is closed.


- Make sure each line of the .tac file is explained clearly. I still don't
totally get why I need or don't need an IServiceCollection, I just messed
with stuff until it ran.

- Eradicate all mention of tap in the documentation; I've seen several 
people (including myself) ask if .tac was deprecated because of the confusion.

- The Start page for each of the documentation portions is spare and leaves one
wondering what to look at, and the default (first) choice -- HOWTOs -- are not
the best place to start figuring Twisted out.

Predictive

