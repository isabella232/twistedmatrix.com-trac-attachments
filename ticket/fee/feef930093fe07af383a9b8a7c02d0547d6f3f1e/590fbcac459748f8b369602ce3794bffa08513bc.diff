Index: hook.py
===================================================================
--- hook.py	(revision 15436)
+++ hook.py	(working copy)
@@ -35,9 +35,6 @@
 
 """
 
-# System Imports
-import string
-
 ### Public Interface
 
 class HookError(Exception):
@@ -99,7 +96,7 @@
 
 def _XXX(k,n,s):
     "string manipulation garbage"
-    x = s % (string.replace(k.__module__,'.','_'), k.__name__, n)
+    x = s % (k.__module__.replace('.', '_'), k.__name__, n)
     return x
 
 def PRE(k,n):
Index: otp.py
===================================================================
--- otp.py	(revision 15436)
+++ otp.py	(working copy)
@@ -19,7 +19,6 @@
 Todo: RFC2444, SASL (perhaps), parsing hex-responses
 """
 
-import string
 import random
 
 def stringToLong(s):
@@ -126,7 +125,7 @@
     def generateOTP(self, seed, passwd, sequence):
         """Return a 64 bit OTP based on inputs
         Run through makeReadable to get a 6 word pass-phrase"""
-        seed = string.lower(seed)
+        seed = seed.lower()
         otp = self.hashUpdate(seed + passwd)
         for a in xrange(sequence):
             otp = self.hashUpdate(otp)
@@ -148,7 +147,7 @@
         for i in xrange(4,-1, -1):
             list.append(dict[(digest >> (i * 11 + 9)) & 0x7FF])
         list.append(dict[(digest << 2) & 0x7FC | (parity & 0x03)])
-        return string.join(list)
+        return ' '.join(list)
 
     def challenge(self, seed, sequence):
         """Return a challenge in the format otp-<hash> <sequence> <seed>"""  
@@ -158,9 +157,9 @@
         """Decode the phrase, and return a 64bit OTP
         I will raise Unauthorized if the parity is wrong
         TODO: Add support for hex (MUST) and the '2nd scheme'(SHOULD)"""
-        words = string.split(phrase)
+        words = phrase.split()
         for i in xrange(len(words)):
-            words[i] = string.upper(words[i])
+            words[i] = words[i].upper()
         b = 0L
         for i in xrange(0,5):
             b = b | ((long(dict.index(words[i])) << ((4-i)*11L+9L)))
Index: usage.py
===================================================================
--- usage.py	(revision 15436)
+++ usage.py	(working copy)
@@ -13,7 +13,6 @@
 """
 
 # System Imports
-import string
 import os
 import sys
 import getopt
@@ -166,7 +165,7 @@
 
             optMangled = opt
             if not self.synonyms.has_key(optMangled):
-                optMangled = string.replace(opt, "-", "_")
+                optMangled = opt.replace("-", "_")
                 if not self.synonyms.has_key(optMangled):
                     raise UsageError, "No such option '%s'" % (opt,)
 
@@ -312,7 +311,7 @@
 
             takesArg = not flagFunction(method, name)
 
-            prettyName = string.replace(name, '_', '-')
+            prettyName = name.replace('_', '-')
             doc = getattr(method, '__doc__', None)
             if doc:
                 ## Only use the first line.
@@ -452,12 +451,12 @@
 
         if longdesc:
             longdesc = ('\n' +
-                        string.join(text.wordWrap(longdesc, width), '\n').strip()
+                        '\n'.join(text.wordWrap(longdesc, width)).strip()
                         + '\n')
 
         if optDicts:
             chunks = docMakeChunks(optDicts, width)
-            s = "Options:\n%s" % (string.join(chunks, ''))
+            s = "Options:\n%s" % (''.join(chunks))
         else:
             s = "Options: None\n"
 
@@ -550,7 +549,7 @@
         for line in column2_l:
             optLines.append("%s%s\n" % (colFiller1, line))
 
-        optChunks.append(string.join(optLines, ''))
+        optChunks.append(''.join(optLines))
 
     return optChunks
 
Index: logfile.py
===================================================================
--- logfile.py	(revision 15436)
+++ logfile.py	(working copy)
@@ -9,7 +9,7 @@
 """
 
 # System Imports
-import os, glob, string, time
+import os, glob, time
 
 # sibling imports
 
@@ -136,7 +136,7 @@
         result = []
         for name in glob.glob("%s.*" % self.path):
             try:
-                counter = int(string.split(name, '.')[-1])
+                counter = int(name.split('.')[-1])
                 if counter:
                     result.append(counter)
             except ValueError:
Index: reflect.py
===================================================================
--- reflect.py	(revision 15436)
+++ reflect.py	(working copy)
@@ -16,7 +16,6 @@
 import sys
 import os
 import types
-import string
 import pickle
 import new
 import traceback
@@ -334,8 +333,8 @@
 def namedObject(name):
     """Get a fully named module-global object.
     """
-    classSplit = string.split(name, '.')
-    module = namedModule(string.join(classSplit[:-1], '.'))
+    classSplit = name.split('.')
+    module = namedModule('.'.join(classSplit[:-1]))
     return getattr(module, classSplit[-1])
 
 namedClass = namedObject # backwards compat
Index: failure.py
===================================================================
--- failure.py	(revision 15436)
+++ failure.py	(working copy)
@@ -13,7 +13,6 @@
 # System Imports
 import sys
 import linecache
-import string
 from cStringIO import StringIO
 import types
 
@@ -45,7 +44,7 @@
     elif detail == "default":
         for method, filename, lineno, localVars, globalVars in frames:
             w( '  File "%s", line %s, in %s\n' % (filename, lineno, method))
-            w( '    %s\n' % string.strip(linecache.getline(filename, lineno)))
+            w( '    %s\n' % linecache.getline(filename, lineno)).strip()
     elif detail == "verbose":
         for method, filename, lineno, localVars, globalVars in frames:
             w("%s:%d: %s(...)\n" % (filename, lineno, method))
Index: text.py
===================================================================
--- text.py	(revision 15436)
+++ text.py	(working copy)
@@ -7,7 +7,7 @@
 """Miscellany of text-munging functions.
 """
 
-import string, types
+import types
 
 def stringyString(object, indentation=''):
     """Expansive string formatting for sequence types.
@@ -43,10 +43,10 @@
 
         for element in object:
             element = stringyString(element, indentation + ' ')
-            sl.append(string.rstrip(element) + ',')
+            sl.append(element.rstrip() + ',')
     else:
         sl[:] = map(lambda s, i=indentation: i+s,
-                    string.split(str(object),'\n'))
+                    str(object).split('\n'))
 
     if not sl:
         sl.append(indentation)
@@ -55,7 +55,7 @@
         sl[0] = indentation + braces[0] + sl[0][len(indentation) + 1:]
         sl[-1] = sl[-1] + braces[-1]
 
-    s = string.join(sl, "\n")
+    s = '\n'.join(sl)
 
     if isMultiline(s) and not endsInNewline(s):
         s = s + '\n'
@@ -64,7 +64,7 @@
 
 def isMultiline(s):
     """Returns True if this string has a newline in it."""
-    return (string.find(s, '\n') != -1)
+    return (s.find('\n') != -1)
 
 def endsInNewline(s):
     """Returns True if this string ends in a newline."""
@@ -83,13 +83,13 @@
     if not docstring:
         return docstring
 
-    docstring = string.replace(docstring, '\t', ' ' * 8)
-    lines = string.split(docstring,'\n')
+    docstring = docstring.replace('\t', ' ' * 8)
+    lines = docstring.split('\n')
 
     leading = 0
     for l in xrange(1,len(lines)):
         line = lines[l]
-        if string.strip(line):
+        if line.strip():
             while 1:
                 if line[leading] == ' ':
                     leading = leading + 1
@@ -102,7 +102,7 @@
     for l in xrange(1,len(lines)):
         outlines.append(lines[l][leading:])
 
-    return string.join(outlines, '\n')
+    return '\n'.join(outlines)
 
 def greedyWrap(inString, width=80):
     """Given a string and a column width, return a list of lines.
@@ -117,11 +117,11 @@
 
     #eww, evil hacks to allow paragraphs delimited by two \ns :(
     if inString.find('\n\n') >= 0:
-        paragraphs = string.split(inString, '\n\n')
+        paragraphs = inString.split('\n\n')
         for para in paragraphs:
             outLines.extend(greedyWrap(para) + [''])
         return outLines
-    inWords = string.split(inString)
+    inWords = inString.split()
 
     column = 0
     ptr_line = 0
@@ -137,13 +137,13 @@
                 # We've gone too far, stop the line one word back.
                 ptr_line = ptr_line - 1
             (l, inWords) = (inWords[0:ptr_line], inWords[ptr_line:])
-            outLines.append(string.join(l,' '))
+            outLines.append(' '.join(l))
 
             ptr_line = 0
             column = 0
         elif not (len(inWords) > ptr_line):
             # Clean up the last bit.
-            outLines.append(string.join(inWords, ' '))
+            outLines.append(' '.join(inWords))
             del inWords[:]
         else:
             # Space
