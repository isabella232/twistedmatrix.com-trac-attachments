diff --git twisted/internet/abstract.py twisted/internet/abstract.py
index aaae4a6..d23bd35 100644
--- twisted/internet/abstract.py
+++ twisted/internet/abstract.py
@@ -483,9 +483,9 @@ class FileDescriptor(_ConsumerMixin, _LogOwner):
 
 def isIPAddress(addr):
     """
-    Determine whether the given string represents an IPv4 address.
+    Determine whether the given string (or bytes) represents an IPv4 address.
 
-    @type addr: C{str}
+    @type addr: C{bytes} or C{unicode}
     @param addr: A string which may or may not be the decimal dotted
     representation of an IPv4 address.
 
@@ -493,7 +493,11 @@ def isIPAddress(addr):
     @return: C{True} if C{addr} represents an IPv4 address, C{False}
     otherwise.
     """
-    dottedParts = addr.split('.')
+    if isinstance(addr, unicode):
+        sep = u'.'
+    else:
+        sep = b'.'
+    dottedParts = addr.split(sep)
     if len(dottedParts) == 4:
         for octet in dottedParts:
             try:
@@ -509,16 +513,24 @@ def isIPAddress(addr):
 
 def isIPv6Address(addr):
     """
-    Determine whether the given string represents an IPv6 address.
+    Determine whether the given string (or bytes) represents an IPv6 address.
 
     @param addr: A string which may or may not be the hex
         representation of an IPv6 address.
-    @type addr: C{str}
+    @type addr: C{bytes} or C{unicode}
 
     @return: C{True} if C{addr} represents an IPv6 address, C{False}
         otherwise.
     @rtype: C{bool}
     """
+    if not isinstance(addr, unicode):
+        # In python 2 C{inet_pton} accepts both unicode strings and bytes, in
+        # Python 3 -- only unicode. To have similar behavior on Python 2 and 3
+        # decode bytes.
+        try:
+            addr = addr.decode('ascii')
+        except UnicodeDecodeError:
+            return False
     if '%' in addr:
         addr = addr.split('%', 1)[0]
     if not addr:
diff --git twisted/internet/test/test_abstract.py twisted/internet/test/test_abstract.py
index 05e105b..2bcec1a 100644
--- twisted/internet/test/test_abstract.py
+++ twisted/internet/test/test_abstract.py
@@ -9,33 +9,150 @@ reactors.
 from __future__ import division, absolute_import
 
 from twisted.trial.unittest import SynchronousTestCase
+from twisted.python.compat import unicode
+from twisted.internet.abstract import isIPv6Address, isIPAddress
 
-from twisted.internet.abstract import isIPv6Address
 
-class IPv6AddressTests(SynchronousTestCase):
+def argToBytes(fun):
+    """
+    Decorator that wraps C{fun}. C{addr} is encoded to C{bytes} when
+    appropriate and passed as a sole argument to C{fun}.
+    """
+    def wrapped(inst, addr):
+        if isinstance(addr, bytes):
+            return fun(addr)
+        return fun(addr.encode('ascii'))
+    return wrapped
+
+
+
+def argToUnicode(fun):
+    """
+    Decorator that wraps C{fun}. C{addr} is converted to
+    C{twisted.python.compat.unicode} when appropriate and passed as a sole
+    argument to C{fun}.
+    """
+    def wrapped(inst, addr):
+        if isinstance(addr, unicode):
+            return fun(addr)
+        return fun(unicode(addr, 'ascii'))
+    return wrapped
+
+
+
+class IsIPAddressTestsMixin(object):
+    """
+    Tests for L{isIPAddress}, a function for determining if a particular
+    string (or bytes) is an IPv4 address literal.
+    """
+
+    def isIPAddress(self, addr):
+        raise NotImplementedError()
+
+
+    def test_empty(self):
+        """
+        The empty literal is not an IPv4 address.
+        """
+        self.assertFalse(self.isIPAddress(b""))
+
+
+    def test_fourParts(self):
+        """
+        An IPv4 address literal consists of four parts, separated by dots.
+        """
+        self.assertTrue(self.isIPAddress(b"1.2.3.4"))
+        self.assertFalse(self.isIPAddress(b"1"))
+        self.assertFalse(self.isIPAddress(b"1.2.3.4.5"))
+
+
+    def test_decimalNotation(self):
+        """
+        Each part of an IPv4 address literal consists of a decimal number.
+        """
+        self.assertTrue(self.isIPAddress(b"0.0.0.0"))
+        self.assertFalse(self.isIPAddress(b"a.b.c.d"))
+
+
+    def test_eachPartIsEightBitValue(self):
+        """
+        In dot-decimal notation, the value of each part is permitted to be in
+        range from 0 to 255.
+        """
+        self.assertFalse(self.isIPAddress(b"0.300.0.0"))
+        self.assertTrue(self.isIPAddress(b"0.0.0.0"))
+        self.assertTrue(self.isIPAddress(b"255.255.255.255"))
+
+
+
+class IsIPAddressBytesTests(SynchronousTestCase, IsIPAddressTestsMixin):
+
+    isIPAddress = argToBytes(isIPAddress)
+
+    def test_nonAscii(self):
+        """
+        If an IP address literal contains byte values outside of the ASCII
+        range, no error should be raised and the function should return
+        C{False}.
+        """
+        nonAscii = b'\x80' # 0x80 == 128
+        try:
+            result = isIPAddress(nonAscii + b".0.0.0")
+        except:
+            self.fail("isIPAddress shouldn't raise if addr contains values "
+                "outside of the ASCII range")
+        self.assertFalse(result)
+
+
+
+class IsIPAddressUnicodeTests(SynchronousTestCase, IsIPAddressTestsMixin):
+
+    isIPAddress = argToUnicode(isIPAddress)
+
+    def test_nonAscii(self):
+        """
+        If an IP address literal contains non-ASCII unicode code points no
+        error should be raised and the function should return C{False}.
+        """
+        umlaut = u"\u00FC" # non-ASCII code point
+        try:
+            result = isIPAddress(umlaut + u".0.0.0")
+        except:
+            self.fail("isIPAddress shouldn't raise if addr contains non-ASCII"
+                " code points")
+        self.assertFalse(result)
+
+
+
+class IPv6AddressTestsMixin(object):
     """
     Tests for L{isIPv6Address}, a function for determining if a particular
-    string is an IPv6 address literal.
+    string (or bytes) is an IPv6 address literal.
     """
+
+    def isIPv6Address(self, addr):
+        raise NotImplementedError()
+
+
     def test_empty(self):
         """
         The empty string is not an IPv6 address literal.
         """
-        self.assertFalse(isIPv6Address(""))
+        self.assertFalse(self.isIPv6Address(b""))
 
 
     def test_colon(self):
         """
         A single C{":"} is not an IPv6 address literal.
         """
-        self.assertFalse(isIPv6Address(":"))
+        self.assertFalse(self.isIPv6Address(b":"))
 
 
     def test_loopback(self):
         """
         C{"::1"} is the IPv6 loopback address literal.
         """
-        self.assertTrue(isIPv6Address("::1"))
+        self.assertTrue(self.isIPv6Address(b"::1"))
 
 
     def test_scopeID(self):
@@ -43,9 +160,9 @@ class IPv6AddressTests(SynchronousTestCase):
         An otherwise valid IPv6 address literal may also include a C{"%"}
         followed by an arbitrary scope identifier.
         """
-        self.assertTrue(isIPv6Address("fe80::1%eth0"))
-        self.assertTrue(isIPv6Address("fe80::2%1"))
-        self.assertTrue(isIPv6Address("fe80::3%en2"))
+        self.assertTrue(self.isIPv6Address(b"fe80::1%eth0"))
+        self.assertTrue(self.isIPv6Address(b"fe80::2%1"))
+        self.assertTrue(self.isIPv6Address(b"fe80::3%en2"))
 
 
     def test_invalidWithScopeID(self):
@@ -53,6 +170,45 @@ class IPv6AddressTests(SynchronousTestCase):
         An otherwise invalid IPv6 address literal is still invalid with a
         trailing scope identifier.
         """
-        self.assertFalse(isIPv6Address("%eth0"))
-        self.assertFalse(isIPv6Address(":%eth0"))
-        self.assertFalse(isIPv6Address("hello%eth0"))
+        self.assertFalse(self.isIPv6Address(b"%eth0"))
+        self.assertFalse(self.isIPv6Address(b":%eth0"))
+        self.assertFalse(self.isIPv6Address(b"hello%eth0"))
+
+
+
+class IPv6AddressBytesTests(SynchronousTestCase, IPv6AddressTestsMixin):
+
+    isIPv6Address = argToBytes(isIPv6Address)
+
+    def test_nonAscii(self):
+        """
+        If an IPv6 address literal contains byte values outside of the ASCII
+        range, no error should be raised and the function should return
+        C{False}.
+        """
+        nonAscii = b'\x80' # 0x80 == 128
+        try:
+            result = isIPv6Address(nonAscii + b"e80::1")
+        except:
+            self.fail("isIPv6Address shouldn't raise if addr contains values "
+                "outside of the ASCII range")
+        self.assertFalse(result)
+
+
+
+class IPv6AddressUnicodeTests(SynchronousTestCase, IPv6AddressTestsMixin):
+
+    isIPv6Address = argToUnicode(isIPv6Address)
+
+    def test_nonAscii(self):
+        """
+        If an IPv6 address literal contains non-ASCII unicode code points no
+        error should be raised and the function should return C{False}.
+        """
+        umlaut = u"\u00FC" # non-ASCII code point
+        try:
+            result = isIPv6Address(umlaut + u"e80::1")
+        except:
+            self.fail("isIPv6Address shouldn't raise if addr contains non-ASCII"
+                " code points")
+        self.assertFalse(result)
diff --git twisted/topfiles/7417.misc twisted/topfiles/7417.misc
new file mode 100644
index 0000000..c8cb0a5
--- /dev/null
+++ twisted/topfiles/7417.misc
@@ -0,0 +1,2 @@
+Port `twisted.internet.abstract.isIPAddress` and
+`twisted.internet.abstract.isIPv6Address` to Python 3.
