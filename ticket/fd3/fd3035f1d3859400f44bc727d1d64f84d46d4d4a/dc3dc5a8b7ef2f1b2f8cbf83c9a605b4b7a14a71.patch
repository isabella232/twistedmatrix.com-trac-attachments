Index: twisted/topfiles/4836.feature
===================================================================
--- twisted/topfiles/4836.feature	(revision 0)
+++ twisted/topfiles/4836.feature	(revision 0)
@@ -0,0 +1 @@
+getFunction in xmlrpc.XMLRPC is now a public method.
Index: twisted/web/test/test_xmlrpc.py
===================================================================
--- twisted/web/test/test_xmlrpc.py	(revision 30642)
+++ twisted/web/test/test_xmlrpc.py	(working copy)
@@ -150,9 +150,9 @@
             ' ' + other)
 
 
-    def _getFunction(self, functionPath):
+    def getFunction(self, functionPath):
         try:
-            return XMLRPC._getFunction(self, functionPath)
+            return XMLRPC.getFunction(self, functionPath)
         except xmlrpc.NoSuchFunction:
             if functionPath.startswith("SESSION"):
                 raise xmlrpc.Fault(self.SESSION_EXPIRED,
@@ -161,6 +161,33 @@
                 raise
 
 
+
+class TestGetFunction(XMLRPC):
+
+    def echo(self, x):
+        return x
+
+
+    def getFunction(self, functionName):
+
+        x = {
+            'echo':self.echo,
+            'system.listMethods':self.listFunctions
+        }
+
+        try:
+            return x[functionName]
+        except KeyError, e:
+            raise xmlrpc.NoSuchFunction(self.NOT_FOUND, 
+                        'function %s not found' % functionName)
+
+        return self.echo
+
+    def listFunctions(self):
+        return ['echo']
+
+
+
 class TestAuthHeader(Test):
     """
     This is used to get the header info so that we can test
@@ -388,8 +415,63 @@
         else:
             p.queryFactory = factory
         return p
+    
 
 
+class XMLRPCTestPublicGetFunction(unittest.TestCase):
+    """
+    Test to make sure that a overridden getFunction is correctly
+    called.
+    """
+    
+    def setUp(self):
+        x = TestGetFunction()
+        addIntrospection(x)
+        self.p = reactor.listenTCP(0, server.Site(x),
+                                   interface="127.0.0.1")
+        self.port = self.p.getHost().port
+        self.proxy = xmlrpc.Proxy('http://127.0.0.1:%d' % self.port)
+
+
+    def tearDown(self):
+        return self.p.stopListening()
+
+
+    def test_getFunction(self):
+        """
+        The overridden only implements one method
+        and it will return whatever is passed.
+        """        
+        what = "hello"
+        d = self.proxy.callRemote("echo", what)
+        d.addCallback(self.assertEqual, what)
+        return d
+
+
+    def test_errors(self):
+        """
+        The overridden method raises 
+        xmlrpc.NoSuchFunction on invalid method call
+        """
+        d = self.proxy.callRemote("xxxx", "hello")
+        d = self.assertFailure(d, xmlrpc.Fault)
+        return d
+
+
+    def test_listMethods(self):
+        """
+        Overriding listFunctions
+        should prevent introspection from being broken.
+        """
+        def cbMethods(meths):
+            self.assertEqual(meths, ['echo'])
+
+        d = self.proxy.callRemote("system.listMethods")
+        d.addCallback(cbMethods)
+        return d
+
+
+
 class SerializationConfigMixin:
     """
     Mixin which defines a couple tests which should pass when a particular flag
Index: twisted/web/xmlrpc.py
===================================================================
--- twisted/web/xmlrpc.py	(revision 30642)
+++ twisted/web/xmlrpc.py	(working copy)
@@ -155,7 +155,7 @@
             self._cbRender(f, request)
         else:
             try:
-                function = self._getFunction(functionPath)
+                function = self.getFunction(functionPath)
             except Fault, f:
                 self._cbRender(f, request)
             else:
@@ -204,7 +204,7 @@
         log.err(failure)
         return Fault(self.FAILURE, "error")
 
-    def _getFunction(self, functionPath):
+    def getFunction(self, functionPath):
         """
         Given a string, return a function, or raise NoSuchFunction.
 
@@ -216,6 +216,10 @@
         self.xmlrpc_foo, i.e. getattr(self, "xmlrpc_" + functionPath).
         If functionPath contains self.separator, the sub-handler for
         the initial prefix is used to search for the remaining path.
+
+        Its suggested that you also override L{XMLRPC.listFunctions}
+        if you are overriding getFunction, otherwise introspection
+        will be broken.
         """
         if functionPath.find(self.separator) != -1:
             prefix, functionPath = functionPath.split(self.separator, 1)
@@ -223,7 +227,7 @@
             if handler is None:
                 raise NoSuchFunction(self.NOT_FOUND,
                     "no such subHandler %s" % prefix)
-            return handler._getFunction(functionPath)
+            return handler.getFunction(functionPath)
 
         f = getattr(self, "xmlrpc_%s" % functionPath, None)
         if not f:
@@ -235,7 +239,7 @@
         else:
             return f
 
-    def _listFunctions(self):
+    def listFunctions(self):
         """
         Return a list of the names of all xmlrpc methods.
         """
@@ -273,7 +277,7 @@
         todo = [(self._xmlrpc_parent, '')]
         while todo:
             obj, prefix = todo.pop(0)
-            functions.extend([prefix + name for name in obj._listFunctions()])
+            functions.extend([prefix + name for name in obj.listFunctions()])
             todo.extend([ (obj.getSubHandler(name),
                            prefix + name + obj.separator)
                           for name in obj.getSubHandlerPrefixes() ])
@@ -285,7 +289,7 @@
         """
         Return a documentation string describing the use of the given method.
         """
-        method = self._xmlrpc_parent._getFunction(method)
+        method = self._xmlrpc_parent.getFunction(method)
         return (getattr(method, 'help', None)
                 or getattr(method, '__doc__', None) or '')
 
@@ -300,7 +304,7 @@
         argument. If no signature information is available, the empty
         string is returned.
         """
-        method = self._xmlrpc_parent._getFunction(method)
+        method = self._xmlrpc_parent.getFunction(method)
         return getattr(method, 'signature', None) or ''
 
     xmlrpc_methodSignature.signature = [['array', 'string'],
Index: doc/web/howto/xmlrpc.xhtml
===================================================================
--- doc/web/howto/xmlrpc.xhtml	(revision 30642)
+++ doc/web/howto/xmlrpc.xhtml	(working copy)
@@ -141,6 +141,73 @@
 XML-RPC server. XML-RPC servers may be nested to arbitrary depths
 using this method.</p>
 
+<h3>Using your own Function getter</h3>
+
+<p>Sometimes, you want to implement your own policy of getting the end implementation. 
+E.g. just like sub-handlers you want to divide the implementations into separate classes but
+may not want to introduce <code class="python">XMLRPC.separator</code> in the function name. 
+In such cases just override the <code class="python">getFunction(self, functionPath)</code>
+method and return the correct callable. 
+Raise <code class="API">twisted.web.xmlrpc.NoSuchFunction</code> otherwise.</p>
+
+<pre class="python">
+from twisted.web import xmlrpc, server
+
+class EchoHandler:
+
+    def echo(self, x):
+        """ Return all passed args """
+        return x
+
+
+
+class AddHandler:
+
+    def add(self, a, b):
+        """Return sum of arguments."""
+        return a + b
+
+
+
+class Example(xmlrpc.XMLRPC):
+    """An example of using you own policy
+    to fetch the handler"""
+
+    def __init__(self):
+        xmlrpc.XMLRPC.__init__(self)
+        self._addHandler = AddHandler()
+        self._echoHandler = EchoHandler()
+
+        #We keep a dict of all relevant
+        #function names and callable.
+        self._functionToCallable = {
+            'add':self._addHandler.add,
+            'echo':self._echoHandler.echo
+        }
+
+    def getFunction(self, functionPath):
+        try:
+            return self._functionToCallable[functionPath]
+        except KeyError, e:
+            raise xmlrpc.NoSuchFunction(self.NOT_FOUND,
+                        "function %s not found" % functionPath)
+
+    def listFunctions(self):
+        """
+        Since we override getFunction, its suggested
+        to override listFunctions too.
+        """
+        return ['add', 'echo']
+
+
+
+if __name__ == '__main__':
+    from twisted.internet import reactor
+    r = Example()
+    reactor.listenTCP(7080, server.Site(r))
+    reactor.run()
+</pre>
+
 <h3>Adding XML-RPC Introspection support</h3>
 
 <p>XML-RPC has an
