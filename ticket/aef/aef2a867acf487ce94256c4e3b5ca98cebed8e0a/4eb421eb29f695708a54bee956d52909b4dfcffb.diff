Index: process.py
===================================================================
--- process.py	(revision 27948)
+++ process.py	(working copy)
@@ -264,6 +264,7 @@
     """
     status = None
     pid = None
+    signals = []
 
     def reapProcess(self):
         """
@@ -296,6 +297,27 @@
             unregisterReapProcessHandler(pid, self)
 
 
+    def _listSignalNames(self):
+        """
+        Get a list of the process signals that are understood and supported on
+        the current system
+
+        Signals have different names/numbers on different Unix systems, so we
+        need to build a list of the signals whose handlers we can safely modify
+        on this system.
+        """
+        if len(self.signals) > 0:
+            return self.signals
+        for name in dir(signal):
+            # 'default' and 'ignore' aren't actual signals
+            if name in ('SIG_DFL', 'SIG_IGN'):
+                continue
+            if name.startswith('SIG'):
+                self.signals.append(name)
+
+        return self.signals
+
+
     def _getReason(self, status):
         exitCode = sig = None
         if os.WIFEXITED(status):
@@ -665,6 +687,27 @@
         for fd in old:
             os.close(fd)
 
+        # The Python interpreter ignores or catches some signals, and our child
+        # process will inherit that behaviour. To have a child process that
+        # responds to signals normally, we need to strip out all of this parent
+        # process's signal handling (just) before we fork.
+        for signalName in self._listSignalNames():
+            signalID = getattr(signal, signalName)
+            if signalName in ('SIGKILL', 'SIGSTOP'):
+                # These two signals (commonly 9 & 19) can't be caught or ignored
+                continue
+
+            if signal.getsignal(signalID) is None:
+                # Skip signals that we haven't modified
+                continue
+
+            try:
+                # Reset signal handling to the default (SIG_DFL)
+                signal.signal(getattr(signal, signalName), signal.SIG_DFL)
+            except RuntimeError:
+                # Your system may have another signal that cannot be 'handled'
+                pass
+
     def writeToChild(self, childFD, data):
         self.pipes[childFD].write(data)
 
