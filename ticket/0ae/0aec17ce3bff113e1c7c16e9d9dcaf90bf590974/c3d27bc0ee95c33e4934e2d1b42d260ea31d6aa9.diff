Index: twisted/internet/task.py
===================================================================
--- twisted/internet/task.py	(revision 18384)
+++ twisted/internet/task.py	(working copy)
@@ -344,6 +344,7 @@
         self.rightNow += amount
         while self.calls and self.calls[0].getTime() <= self.seconds():
             call = self.calls.pop(0)
+            call.called = 1
             call.func(*call.args, **call.kw)
 
 
Index: twisted/protocols/policies.py
===================================================================
--- twisted/protocols/policies.py	(revision 18384)
+++ twisted/protocols/policies.py	(working copy)
@@ -177,6 +177,9 @@
         self.unthrottleWritesID = None
         self.checkWriteBandwidthID = None
 
+    def callLater(self, period, func):
+        return reactor.callLater(period, func)
+
     def registerWritten(self, length):
         """Called by protocol to tell us more bytes were written."""
         self.writtenThisSecond += length
@@ -190,20 +193,20 @@
         if self.readThisSecond > self.readLimit:
             self.throttleReads()
             throttleTime = (float(self.readThisSecond) / self.readLimit) - 1.0
-            self.unthrottleReadsID = reactor.callLater(throttleTime,
-                                                       self.unthrottleReads)
+            self.unthrottleReadsID = self.callLater(throttleTime,
+                                                    self.unthrottleReads)
         self.readThisSecond = 0
-        self.checkReadBandwidthID = reactor.callLater(1, self.checkReadBandwidth)
+        self.checkReadBandwidthID = self.callLater(1, self.checkReadBandwidth)
 
     def checkWriteBandwidth(self):
         if self.writtenThisSecond > self.writeLimit:
             self.throttleWrites()
             throttleTime = (float(self.writtenThisSecond) / self.writeLimit) - 1.0
-            self.unthrottleWritesID = reactor.callLater(throttleTime,
+            self.unthrottleWritesID = self.callLater(throttleTime,
                                                         self.unthrottleWrites)
         # reset for next round
         self.writtenThisSecond = 0
-        self.checkWriteBandwidthID = reactor.callLater(1, self.checkWriteBandwidth)
+        self.checkWriteBandwidthID = self.callLater(1, self.checkWriteBandwidth)
 
     def throttleReads(self):
         """Throttle reads on all protocols."""
@@ -365,7 +368,7 @@
         self.cancelTimeout()
         if timeoutPeriod is not None:
             self.timeoutPeriod = timeoutPeriod
-        self.timeoutCall = reactor.callLater(self.timeoutPeriod, self.timeoutFunc)
+        self.timeoutCall = self.factory.callLater(self.timeoutPeriod, self.timeoutFunc)
 
     def cancelTimeout(self):
         """Cancel the timeout.
@@ -424,7 +427,10 @@
         return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
                              timeoutPeriod=self.timeoutPeriod)
 
+    def callLater(self, period, func):
+        return reactor.callLater(period, func)
 
+
 class TrafficLoggingProtocol(ProtocolWrapper):
     _counter = 0
 
@@ -504,7 +510,6 @@
     def callLater(self, period, func):
         return reactor.callLater(period, func)
 
-
     def resetTimeout(self):
         """Reset the timeout count down"""
         if self.__timeoutCall is not None and self.timeOut is not None:
Index: twisted/test/test_policies.py
===================================================================
--- twisted/test/test_policies.py	(revision 18384)
+++ twisted/test/test_policies.py	(working copy)
@@ -9,11 +9,10 @@
 
 from twisted.trial import unittest
 from twisted.test.proto_helpers import StringTransportWithDisconnection
-from twisted.test.time_helpers import Clock
 
 import time
 
-from twisted.internet import protocol, reactor, address, defer
+from twisted.internet import protocol, reactor, address, defer, task
 from twisted.protocols import policies
 
 class StringIOWithoutClosing(StringIO):
@@ -50,12 +49,13 @@
 
 
 class EchoProtocol(protocol.Protocol):
+    paused = False
 
     def pauseProducing(self):
-        self.paused = time.time()
+        self.paused = True
 
     def resumeProducing(self):
-        self.resume = time.time()
+        self.paused = False
 
     def stopProducing(self):
         pass
@@ -95,6 +95,34 @@
         self.data += data
 
 
+class TestableThrottlingFactory(policies.ThrottlingFactory):
+    def __init__(self, clock, *args, **kwargs):
+        policies.ThrottlingFactory.__init__(self, *args, **kwargs)
+        self.clock = clock
+
+    def callLater(self, period, func):
+        return self.clock.callLater(period, func)
+
+
+class TestableTimeoutFactory(policies.TimeoutFactory):
+    def __init__(self, clock, *args, **kwargs):
+        policies.TimeoutFactory.__init__(self, *args, **kwargs)
+        self.clock = clock
+
+    def callLater(self, period, func):
+        return self.clock.callLater(period, func)
+    
+
+class PausableStringTransport(StringTransportWithDisconnection):
+    paused = False
+
+    def pauseProducing(self):
+        self.paused = True
+
+    def resumeProducing(self):
+        self.paused = False
+
+
 class WrapperTestCase(unittest.TestCase):
     def testProtocolFactoryAttribute(self):
         # Make sure protocol.factory is the wrapped factory, not the wrapping factory
@@ -114,10 +142,6 @@
 
 class ThrottlingTestCase(unittest.TestCase):
 
-    def doIterations(self, count=5):
-        for i in range(count):
-            reactor.iterate()
-
     def testLimit(self):
         server = Server()
         c1, c2, c3, c4 = [SimpleProtocol() for i in range(4)]
@@ -173,131 +197,79 @@
 
     def testWriteLimit(self):
         server = Server()
-        c1, c2 = SimpleProtocol(), SimpleProtocol()
+        tServer = TestableThrottlingFactory(task.Clock(), server, writeLimit=10)
+        port = tServer.buildProtocol(address.IPv4Address('TCP', '127.0.0.1', 0))
+        tr = PausableStringTransport()
+        tr.protocol = port
+        port.makeConnection(tr)
 
-        # The throttling factory starts checking bandwidth immediately
-        now = time.time()
+        port.producer = port.wrappedProtocol
 
-        tServer = policies.ThrottlingFactory(server, writeLimit=10)
-        port = reactor.listenTCP(0, tServer, interface="127.0.0.1")
-        n = port.getHost()[2]
-        reactor.iterate(); reactor.iterate()
-        for c in c1, c2:
-            reactor.connectTCP("127.0.0.1", n, SillyFactory(c))
-            self.doIterations()
-
-        for p in tServer.protocols.keys():
-            p = p.wrappedProtocol
-            self.assert_(isinstance(p, EchoProtocol))
-            p.transport.registerProducer(p, 1)
-
-        c1.transport.write("0123456789")
-        c2.transport.write("abcdefghij")
-        self.doIterations()
-
-        self.assertEquals(c1.buffer, "0123456789")
-        self.assertEquals(c2.buffer, "abcdefghij")
+        port.dataReceived("0123456789")
+        port.dataReceived("abcdefghij")
+        self.assertEquals(tr.value(), "0123456789abcdefghij")
         self.assertEquals(tServer.writtenThisSecond, 20)
+        self.assertFalse(port.wrappedProtocol.paused)
 
         # at this point server should've written 20 bytes, 10 bytes
         # above the limit so writing should be paused around 1 second
         # from 'now', and resumed a second after that
+        tServer.clock.advance(1.05)
+        self.assertEquals(tServer.writtenThisSecond, 0)
+        self.assertTrue(port.wrappedProtocol.paused)
 
-        for p in tServer.protocols.keys():
-            self.assert_(not hasattr(p.wrappedProtocol, "paused"))
-            self.assert_(not hasattr(p.wrappedProtocol, "resume"))
-
-        while not hasattr(p.wrappedProtocol, "paused"):
-            reactor.iterate()
-
+        tServer.clock.advance(1.05)
         self.assertEquals(tServer.writtenThisSecond, 0)
+        self.assertFalse(port.wrappedProtocol.paused)
 
-        for p in tServer.protocols.keys():
-            self.assert_(hasattr(p.wrappedProtocol, "paused"))
-            self.assert_(not hasattr(p.wrappedProtocol, "resume"))
-            self.assert_(abs(p.wrappedProtocol.paused - now - 1.0) < 0.1)
-
-        while not hasattr(p.wrappedProtocol, "resume"):
-            reactor.iterate()
-
-        for p in tServer.protocols.keys():
-            self.assert_(hasattr(p.wrappedProtocol, "resume"))
-            self.assert_(abs(p.wrappedProtocol.resume -
-                             p.wrappedProtocol.paused - 1.0) < 0.1)
-
-        c1.transport.loseConnection()
-        c2.transport.loseConnection()
-        port.stopListening()
-        for p in tServer.protocols.keys():
-            p.loseConnection()
-        self.doIterations()
-
     def testReadLimit(self):
         server = Server()
-        c1, c2 = SimpleProtocol(), SimpleProtocol()
-        now = time.time()
-        tServer = policies.ThrottlingFactory(server, readLimit=10)
-        port = reactor.listenTCP(0, tServer, interface="127.0.0.1")
-        n = port.getHost()[2]
-        self.doIterations()
-        for c in c1, c2:
-            reactor.connectTCP("127.0.0.1", n, SillyFactory(c))
-            self.doIterations()
+        tServer = TestableThrottlingFactory(task.Clock(), server, readLimit=10)
+        port = tServer.buildProtocol(address.IPv4Address('TCP', '127.0.0.1', 0))
+        tr = PausableStringTransport()
+        tr.protocol = port
+        port.makeConnection(tr)
 
-        c1.transport.write("0123456789")
-        c2.transport.write("abcdefghij")
-        self.doIterations()
-        self.assertEquals(c1.buffer, "0123456789")
-        self.assertEquals(c2.buffer, "abcdefghij")
+        port.dataReceived("0123456789")
+        port.dataReceived("abcdefghij")
+        self.assertEquals(tr.value(), "0123456789abcdefghij")
         self.assertEquals(tServer.readThisSecond, 20)
 
-        # we wrote 20 bytes, so after one second it should stop reading
-        # and then a second later start reading again
-        while time.time() - now < 1.05:
-            reactor.iterate()
+        tServer.clock.advance(1.05)
         self.assertEquals(tServer.readThisSecond, 0)
+        self.assertTrue(tr.paused)
 
-        # write some more - data should *not* get written for another second
-        c1.transport.write("0123456789")
-        c2.transport.write("abcdefghij")
-        self.doIterations()
-        self.assertEquals(c1.buffer, "0123456789")
-        self.assertEquals(c2.buffer, "abcdefghij")
+        tServer.clock.advance(1.05)
         self.assertEquals(tServer.readThisSecond, 0)
+        self.assertFalse(tr.paused)
 
-        while time.time() - now < 2.05:
-            reactor.iterate()
-        self.assertEquals(c1.buffer, "01234567890123456789")
-        self.assertEquals(c2.buffer, "abcdefghijabcdefghij")
-        c1.transport.loseConnection()
-        c2.transport.loseConnection()
-        port.stopListening()
-        for p in tServer.protocols.keys():
-            p.loseConnection()
-        self.doIterations()
+        tr.clear()
+        port.dataReceived("0123456789")
+        port.dataReceived("abcdefghij")
+        self.assertEquals(tr.value(), "0123456789abcdefghij")
+        self.assertEquals(tServer.readThisSecond, 20)
 
-    # These fail intermittently.
-    testReadLimit.skip = "Inaccurate tests are worse than no tests."
-    testWriteLimit.skip = "Inaccurate tests are worse than no tests."
+        tServer.clock.advance(1.05)
+        self.assertEquals(tServer.readThisSecond, 0)
+        self.assertTrue(tr.paused)
 
+        tServer.clock.advance(1.05)
+        self.assertEquals(tServer.readThisSecond, 0)
+        self.assertFalse(tr.paused)
 
+
 class TimeoutTestCase(unittest.TestCase):
-    def setUpClass(self):
-        self.clock = Clock()
-        self.clock.install()
+    def setUp(self):
+        self.clock = task.Clock()
 
-
-    def tearDownClass(self):
-        self.clock.uninstall()
-
-
     def _serverSetup(self):
         # Create a server factory, get a protocol from it, connect it to a
         # transport, and return all three.
         wrappedFactory = protocol.ServerFactory()
         wrappedFactory.protocol = SimpleProtocol
-        factory = policies.TimeoutFactory(wrappedFactory, 3)
+        factory = TestableTimeoutFactory(self.clock, wrappedFactory, 3)
         proto = factory.buildProtocol(address.IPv4Address('TCP', '127.0.0.1', 12345))
+        proto.callLater = self.clock.callLater
         transport = StringTransportWithDisconnection()
         transport.protocol = proto
         proto.makeConnection(transport)
@@ -313,11 +285,11 @@
         factory, proto, transport = self._serverSetup()
 
         # Let almost 3 time units pass
-        self.clock.pump(reactor, [0.0, 0.5, 1.0, 1.0, 0.4])
+        self.clock.pump([0.0, 0.5, 1.0, 1.0, 0.4])
         self.failIf(proto.wrappedProtocol.disconnected)
 
         # Now let the timer elapse
-        self.clock.pump(reactor, [0.0, 0.2])
+        self.clock.pump([0.0, 0.2])
         self.failUnless(proto.wrappedProtocol.disconnected)
 
 
@@ -329,7 +301,7 @@
         factory, proto, transport = self._serverSetup()
 
         # Let half the countdown period elapse
-        self.clock.pump(reactor, [0.0, 0.5, 1.0])
+        self.clock.pump([0.0, 0.5, 1.0])
         self.failIf(proto.wrappedProtocol.disconnected)
 
         # Send some data (proto is the /real/ proto's transport, so this is
@@ -337,18 +309,18 @@
         proto.write('bytes bytes bytes')
 
         # More time passes, putting us past the original timeout
-        self.clock.pump(reactor, [0.0, 1.0, 1.0])
+        self.clock.pump([0.0, 1.0, 1.0])
         self.failIf(proto.wrappedProtocol.disconnected)
 
         # Make sure writeSequence delays timeout as well
         proto.writeSequence(['bytes'] * 3)
 
         # Tick tock
-        self.clock.pump(reactor, [0.0, 1.0, 1.0])
+        self.clock.pump([0.0, 1.0, 1.0])
         self.failIf(proto.wrappedProtocol.disconnected)
 
         # Don't write anything more, just let the timeout expire
-        self.clock.pump(reactor, [0.0, 2.0])
+        self.clock.pump([0.0, 2.0])
         self.failUnless(proto.wrappedProtocol.disconnected)
 
 
@@ -359,19 +331,19 @@
         factory, proto, transport = self._serverSetup()
 
         # Let half the countdown period elapse
-        self.clock.pump(reactor, [0.0, 1.0, 0.5])
+        self.clock.pump([0.0, 1.0, 0.5])
         self.failIf(proto.wrappedProtocol.disconnected)
 
         # Some bytes arrive, they should reset the counter
         proto.dataReceived('bytes bytes bytes')
 
         # We pass the original timeout
-        self.clock.pump(reactor, [0.0, 1.0, 1.0])
+        self.clock.pump([0.0, 1.0, 1.0])
         self.failIf(proto.wrappedProtocol.disconnected)
 
         # Nothing more arrives though, the new timeout deadline is passed,
         # the connection should be dropped.
-        self.clock.pump(reactor, [0.0, 1.0, 1.0])
+        self.clock.pump([0.0, 1.0, 1.0])
         self.failUnless(proto.wrappedProtocol.disconnected)
 
 
@@ -392,17 +364,11 @@
     def timeoutConnection(self):
         self.timedOut = 1
 
-
 class TestTimeout(unittest.TestCase):
 
     def setUpClass(self):
-        self.clock = Clock()
-        self.clock.install()
+        self.clock = task.Clock()
 
-    def tearDownClass(self):
-        self.clock.uninstall()
-
-
     def testOverriddenCallLater(self):
         """
         Test that setting callLater on a subclass of TimeoutMixin causes the
@@ -417,29 +383,32 @@
 
     def testTimeout(self):
         p = TimeoutTester()
+        p.callLater = self.clock.callLater
         s = StringIOWithoutClosing()
         p.makeConnection(protocol.FileWrapper(s))
 
-        self.clock.pump(reactor, [0, 0.5, 1.0, 1.0])
+        self.clock.pump([0, 0.5, 1.0, 1.0])
         self.failIf(p.timedOut)
-        self.clock.pump(reactor, [0, 1.0])
+        self.clock.pump([0, 1.0])
         self.failUnless(p.timedOut)
 
     def testNoTimeout(self):
         p = TimeoutTester()
+        p.callLater = self.clock.callLater
         s = StringIOWithoutClosing()
         p.makeConnection(protocol.FileWrapper(s))
 
-        self.clock.pump(reactor, [0, 0.5, 1.0, 1.0])
+        self.clock.pump([0, 0.5, 1.0, 1.0])
         self.failIf(p.timedOut)
         p.dataReceived('hello there')
-        self.clock.pump(reactor, [0, 1.0, 1.0, 0.5])
+        self.clock.pump([0, 1.0, 1.0, 0.5])
         self.failIf(p.timedOut)
-        self.clock.pump(reactor, [0, 1.0])
+        self.clock.pump([0, 1.0])
         self.failUnless(p.timedOut)
 
     def testResetTimeout(self):
         p = TimeoutTester()
+        p.callLater = self.clock.callLater
         p.timeOut = None
         s = StringIOWithoutClosing()
         p.makeConnection(protocol.FileWrapper(s))
@@ -447,13 +416,14 @@
         p.setTimeout(1)
         self.assertEquals(p.timeOut, 1)
 
-        self.clock.pump(reactor, [0, 0.9])
+        self.clock.pump([0, 0.9])
         self.failIf(p.timedOut)
-        self.clock.pump(reactor, [0, 0.2])
+        self.clock.pump([0, 0.2])
         self.failUnless(p.timedOut)
 
     def testCancelTimeout(self):
         p = TimeoutTester()
+        p.callLater = self.clock.callLater
         p.timeOut = 5
         s = StringIOWithoutClosing()
         p.makeConnection(protocol.FileWrapper(s))
@@ -461,7 +431,7 @@
         p.setTimeout(None)
         self.assertEquals(p.timeOut, None)
 
-        self.clock.pump(reactor, [0, 5, 5, 5])
+        self.clock.pump([0, 5, 5, 5])
         self.failIf(p.timedOut)
 
     def testReturn(self):
