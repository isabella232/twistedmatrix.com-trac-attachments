Index: twisted/internet/_posixserialport.py
===================================================================
--- twisted/internet/_posixserialport.py	(revision 29472)
+++ twisted/internet/_posixserialport.py	(working copy)
@@ -3,19 +3,20 @@
 
 """
 Serial Port Protocol
+
+Requires:
+pySerial - http://pyserial.sourceforge.net/
 """
 
-# dependent on pyserial ( http://pyserial.sf.net/ )
 # only tested w/ 1.18 (5 Dec 2002)
-from serial import PARITY_NONE
-from serial import STOPBITS_ONE
-from serial import EIGHTBITS
+from serial import PARITY_NONE, STOPBITS_ONE, EIGHTBITS
 
-from serialport import BaseSerialPort
-
 # twisted imports
 from twisted.internet import abstract, fdesc
+from twisted.internet.serialport import BaseSerialPort
 
+
+
 class SerialPort(BaseSerialPort, abstract.FileDescriptor):
     """
     A select()able serial device, acting as a transport.
@@ -26,16 +27,14 @@
     def __init__(self, protocol, deviceNameOrPortNumber, reactor, 
         baudrate=9600, bytesize=EIGHTBITS, parity=PARITY_NONE,
         stopbits=STOPBITS_ONE, timeout=None, xonxoff=0, rtscts=0):
+        
         abstract.FileDescriptor.__init__(self, reactor)
         BaseSerialPort.__init__(
-                self, deviceNameOrPortNumber,
+                self, protocol, deviceNameOrPortNumber, reactor,
                 baudrate=baudrate, bytesize=bytesize,
                 parity=parity, stopbits=stopbits,
                 xonxoff=xonxoff, rtscts=rtscts)
-        self.reactor = reactor
-        self.flushInput()
-        self.flushOutput()
-        self.protocol = protocol
+        
         self.protocol.makeConnection(self)
         self.startReading()
 
Index: twisted/internet/_win32serialport.py
===================================================================
--- twisted/internet/_win32serialport.py	(revision 29472)
+++ twisted/internet/_win32serialport.py	(working copy)
@@ -4,8 +4,13 @@
 """
 Serial port support for Windows.
 
-Requires PySerial and win32all, and needs to be used with win32event
-reactor.
+Requires:
+pySerial - http://pyserial.sourceforge.net/
+pywin32 (previously win32all) - http://pywin32.sourceforge.net/
+
+Also, needs to be used with a reactor that implements
+L{twisted.internet.interfaces.IReactorWin32Events}
+e.g. L{twisted.internet.win32eventreactor} win32eventreactor.
 """
 
 # system imports
@@ -14,11 +19,10 @@
 
 # twisted imports
 from twisted.internet import abstract
-
-# sibling imports
 from twisted.internet.serialport import BaseSerialPort
 
 
+
 class SerialPort(BaseSerialPort, abstract.FileDescriptor):
     """
     A select()able serial device, acting as a transport.
@@ -29,22 +33,19 @@
     def __init__(self, protocol, deviceNameOrPortNumber, reactor,
         baudrate=9600, bytesize=EIGHTBITS, parity=PARITY_NONE,
         stopbits=STOPBITS_ONE, xonxoff=0, rtscts=0):
+
+        abstract.FileDescriptor.__init__(self, reactor)
         BaseSerialPort.__init__(
-            self, deviceNameOrPortNumber,
+            self, protocol, deviceNameOrPortNumber, reactor,
             baudrate=baudrate, bytesize=bytesize,
             parity=parity, stopbits=stopbits,
             xonxoff=xonxoff, rtscts=rtscts)
 
-        self.flushInput()
-        self.flushOutput()
-        self.reactor = reactor
-        self.protocol = protocol
         self.outQueue = []
         self.closed = 0
         self.closedNotifies = 0
         self.writeInProgress = 0
 
-        self.protocol = protocol
         self._overlappedRead = win32file.OVERLAPPED()
         self._overlappedRead.hEvent = win32event.CreateEvent(None, 1, 0, None)
         self._overlappedWrite = win32file.OVERLAPPED()
Index: twisted/internet/serialport.py
===================================================================
--- twisted/internet/serialport.py	(revision 29472)
+++ twisted/internet/serialport.py	(working copy)
@@ -28,7 +28,7 @@
     def __init__(
         self, protocol, deviceNameOrPortNumber, reactor, 
         baudrate=9600, bytesize=EIGHTBITS, parity=PARITY_NONE,
-        stopbits=STOPBITS_ONE, timeout=0, xonxoff=0, rtscts=0):
+        stopbits=STOPBITS_ONE, timeout=None, xonxoff=0, rtscts=0):
         """
         Initialize this serial transport.
 
@@ -70,21 +70,30 @@
         @param rtscts: enable RTS/CTS flow control (0/1)
         @type rtscts: C{int}
         
+        @raise ValueError: on Windows, if the reactor does not support
+                           L{twisted.internet.interfaces.IReactorWin32Events}
+                           e.g. L{twisted.internet.win32eventreactor}
+        
         @raise ValueError: Will be raised when serial parameters are out of range,
             e.g baudrate, bytesize, etc.
-
+        
         @raise SerialException: In case the device can not be found or can
             not be configured.
         """
-        # Only initialize the underlying Serial instance.  Error checking
+        self.protocol = protocol
+        self.reactor = reactor
+
+        # Initialize the underlying Serial instance.  Error checking
         # and other initialization is done in the subclasses.
         self._serial = serial.Serial(
             deviceNameOrPortNumber, baudrate=baudrate,
             bytesize=bytesize, parity=parity,
             stopbits=stopbits, timeout=None,
             xonxoff=xonxoff, rtscts=rtscts)
-
-
+        
+        self.flushInput()
+        self.flushOutput()
+        
     def setBaudRate(self, baudrate):
         if hasattr(self._serial, "setBaudrate"):
             self._serial.setBaudrate(baudrate)
