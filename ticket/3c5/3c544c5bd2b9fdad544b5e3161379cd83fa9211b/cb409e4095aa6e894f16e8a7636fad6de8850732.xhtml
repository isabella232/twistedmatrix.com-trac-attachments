<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Guide to twisted.internet.defer</title>
</head>
<body>

<h1>Guide to twisted.internet.defer</h1>

<p>This document discusses asynchronous programming and Twisted's
implementation of Deferred objects in
<code class="API">twisted.internet.defer.Deferred</code>.  The
first section is a tutorial-ish primer on asynchronous programming;
the later sections are more references of features, from basic
to advanced.</p>

<p>Describing how to <em>make</em> code asynchronous and how
to <em>use</em> asynchronous code are very different; the former
requires you to know about polling or threading or other parallel
execution mechanisms, whereas the latter does not.  This document
covers the latter.</p>

<h2>Synchronous to Asynchronous, the Method to the Madness</h2>

<p>Most of the programs you write in Python are <strong>synchronous</strong>
programs.  You write down a list of instructions in your source code,
and Python executes them in step.</p>

<pre class="python">
contents = get_web_page()
dom = parse_web_page(contents)
save_element(dom.getElementById('interesting-field'))
</pre>

<p>Straightforward.  Python gets the web page, and then parses the
page, and then saves the page somewhere else.  If your network is
reasonably fast, this will also be pretty quick set of three steps
to go through.</p>

<p>But what if <code>get_web_page()</code> was slow; on order of
several seconds?  What if you were getting lots of resources from
the web&mdash;your browser certainly doesn't wait for each image on
a page to finish loading before loading the next one.  You don't
want to <em>wait</em>.</p>

<p>Through the magic of <strong>asynchronous</strong> programming,
you don't have to wait.  Instead, you say to Python: "I would like
this webpage to be downloaded on the web, but I'm not going to
wait for you to do it."  Code
wise, this is equivalent to making a call to an asynchronous function (i.e.
<code>promise_to_get_web_page()</code>).</p>

<pre class="python">
promise_to_get_web_page()
# dom = parse_web_page(???)
# save_element(dom.getElementById('interesting-field'))
</pre>

<p>Notice, however, that the code that followed <code>get_web_page()</code>,
the parsing and saving code, is now in a tough spot.  We didn't wait
for the result, so we don't <em>have</em> a result.  At some point,
Python will have the result, but you have no way of knowing that;
for all you know, you could be many files away in another module
calculating digits of pi.</p>

<p>Let's rephrase our request to Python. "I would like this webpage
to be downloaded on the web, but I'm not going to wait for you to do
it. <em>When you finish, please run this set of code with the result.</em>"
In order to make the "this set of code" something you can pass around,
you'll need to put it in a function.</p>

<pre class="python">
promise_to_get_web_page()
def what_to_do_after_you_got_it(result):
    dom = parse_web_page(result)
    save_element(dom.getElementById('interesting-field'))
</pre>

<p>There is one last question: how do we tell Python that
<code>what_to_do_after_you_got_it()</code> is what we want to be
called when we're done getting the web page.  There <em>could</em> have
been some magic keyword argument that you passed to the asynchronous
argument to be your callback.  Twisted, however, uses a much
more flexible and standardized system: <strong>Deferred</strong> objects.</p>

<pre class="python">
defer = promise_to_get_web_page()
def what_to_do_after_you_got_it(result):
    dom = parse_web_page(result)
    save_element(dom.getElementById('interesting-field'))
defer.addCallback(what_to_do_after_you_got_it)
</pre>

<p>The variable <code>defer</code> is a Deferred object, a representation of the promise;
it doesn't actually contain the web page.  We then add extra behavior
to the promise with <code>addCallback</code>, saying "When you
get the web page, <em>call back</em> this function with the result."</p>

<p>Asynchronous programming is centered around this notion that:</p>

<ul>
    <li>Some function calls are expensive, so <em>don't wait for them</em></li>
    <li><em>Don't call; Twisted will call you.</em> When they are done, give me the results by <em>calling back</em> a function of my choice.  Return values of asynchronous functions are Deferred objects, which I use to register these callbacks.</li>
    <li>Sometimes I want code to happen during an event, but the event firing is distinct from my program flow (time-based or external stimulus based).  When it does happen, <em>call back</em> a function of my choice.</li>
</ul>

<p>This stands in contrast to synchronous programming, where:</p>

<ul>
    <li>Function calls are cheap enough, so we can wait for them to finish</li>
    <li><em>You make the calls.</em> If I want a sub-result, I call a function and use its return value</li>
    <li>Events? What are events?</li>
</ul>

<p>Expensive functions that deal with input/output will
commonly have a synchronous version (found in the Python standard
library) and an asynchronous version (found in Twisted).  You can tell
if a function is asynchronous if it returns a <code>Deferred</code>
object. Functions that are asynchronous include:</p>

<ul>
    <li>Communication over the network</li>
    <li>Interprocess communication</li>
    <li>User interfaces</li>
    <li>To a lesser extent, hard drive and database access</li>
</ul>

<p>Any code that uses the
synchronous version of a function can be converted to use the asynchronous version.  The goal
of this document is to show you how.</p>

</body>
</html>
