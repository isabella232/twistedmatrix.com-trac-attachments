Index: twisted/internet/endpoints.py
===================================================================
--- twisted/internet/endpoints.py	(revision 42586)
+++ twisted/internet/endpoints.py	(working copy)
@@ -38,6 +38,7 @@
 from twisted.internet.address import _ProcessAddress, HostnameAddress
 from twisted.python.components import proxyForInterface
 from twisted.internet.task import LoopingCall
+from twisted.python.util import FancyStrMixin
 
 if not _PY3:
     from twisted.plugin import IPlugin, getPlugins
@@ -378,7 +379,7 @@
 
 
 @implementer(interfaces.IStreamClientEndpoint)
-class ProcessEndpoint(object):
+class ProcessEndpoint(FancyStrMixin, object):
     """
     An endpoint for child processes
 
@@ -386,6 +387,13 @@
 
     @since: 13.1
     """
+    showAttributes = (('_env', 'env', '%r'),
+                      ('_path', 'path', '%r'), ('_uid', 'uid', '%r'),
+                      ('_gid', 'gid', '%r'),
+                      ('_executable', 'executable', '%r'),
+                      ('_args', 'args', '%r'), ('_usePTY', 'usePTY', '%r'),
+                      ('_childFDs', 'childFDs', '%r'))
+
     def __init__(self, reactor, executable, args=(), env={}, path=None,
                  uid=None, gid=None, usePTY=0, childFDs=None,
                  errFlag=StandardErrorBehavior.LOG):
@@ -430,10 +438,13 @@
 
 
 @implementer(interfaces.IStreamServerEndpoint)
-class _TCPServerEndpoint(object):
+class _TCPServerEndpoint(FancyStrMixin, object):
     """
     A TCP server endpoint interface
     """
+    showAttributes = (('_port', 'port', '%r'),
+                      ('_backlog', 'backlog', '%r'),
+                      ('_interface', 'interface', '%r'))
 
     def __init__(self, reactor, port, backlog, interface):
         """
@@ -510,10 +521,13 @@
 
 
 @implementer(interfaces.IStreamClientEndpoint)
-class TCP4ClientEndpoint(object):
+class TCP4ClientEndpoint(FancyStrMixin, object):
     """
     TCP client endpoint with an IPv4 configuration.
     """
+    showAttributes = (('_host', 'host', '%r'),
+                      ('_port', 'port', '%r'), ('_timeout', 'timeout', '%r'),
+                      ('_bindAddress', 'bindAddress', '%r'))
 
     def __init__(self, reactor, host, port, timeout=30, bindAddress=None):
         """
@@ -556,7 +570,7 @@
 
 
 @implementer(interfaces.IStreamClientEndpoint)
-class TCP6ClientEndpoint(object):
+class TCP6ClientEndpoint(FancyStrMixin, object):
     """
     TCP client endpoint with an IPv6 configuration.
 
@@ -570,6 +584,9 @@
     @ivar _GAI_ADDRESS_HOST: Index of the actual host-address in the
         5-tuple L{_GAI_ADDRESS}.
     """
+    showAttributes = (('_host', 'host', '%r'),
+                      ('_port', 'port', '%r'), ('_timeout', 'timeout', '%r'),
+                      ('_bindAddress', 'bindAddress', '%r'))
 
     _getaddrinfo = socket.getaddrinfo
     _deferToThread = staticmethod(threads.deferToThread)
@@ -629,7 +646,7 @@
 
 
 @implementer(interfaces.IStreamClientEndpoint)
-class HostnameEndpoint(object):
+class HostnameEndpoint(FancyStrMixin, object):
     """
     A name-based endpoint that connects to the fastest amongst the
     resolved host addresses.
@@ -638,6 +655,10 @@
 
     @ivar _deferToThread: A hook used for testing deferToThread.
     """
+    showAttributes = (('_host', 'host', '%r'),
+                      ('_port', 'port', '%r'), ('_timeout', 'timeout', '%r'),
+                      ('_bindAddress', 'bindAddress', '%r'))
+
     _getaddrinfo = socket.getaddrinfo
     _deferToThread = staticmethod(threads.deferToThread)
 
@@ -782,10 +803,13 @@
 
 
 @implementer(interfaces.IStreamServerEndpoint)
-class SSL4ServerEndpoint(object):
+class SSL4ServerEndpoint(FancyStrMixin, object):
     """
     SSL secured TCP server endpoint with an IPv4 configuration.
     """
+    showAttributes = (('_port', 'port', '%r'),
+                      ('_backlog', 'backlog', '%r'),
+                      ('_interface', 'interface', '%r'))
 
     def __init__(self, reactor, port, sslContextFactory,
                  backlog=50, interface=''):
@@ -825,10 +849,13 @@
 
 
 @implementer(interfaces.IStreamClientEndpoint)
-class SSL4ClientEndpoint(object):
+class SSL4ClientEndpoint(FancyStrMixin, object):
     """
     SSL secured TCP client endpoint with an IPv4 configuration
     """
+    showAttributes = (('_host', 'host', '%r'),
+                      ('_port', 'port', '%r'), ('_timeout', 'timeout', '%r'),
+                      ('_bindAddress', 'bindAddress', '%r'))
 
     def __init__(self, reactor, host, port, sslContextFactory,
                  timeout=30, bindAddress=None):
@@ -877,10 +904,14 @@
 
 
 @implementer(interfaces.IStreamServerEndpoint)
-class UNIXServerEndpoint(object):
+class UNIXServerEndpoint(FancyStrMixin, object):
     """
     UnixSocket server endpoint.
     """
+    showAttributes = (('_address', 'address', '%r'),
+                      ('_backlog', 'backlog', '%r'), ('_mode', 'mode', '%o'),
+                      ('_wantPID', 'wantPID', '%r'))
+
     def __init__(self, reactor, address, backlog=50, mode=0o666, wantPID=0):
         """
         @param reactor: An L{IReactorUNIX} provider.
@@ -911,10 +942,13 @@
 
 
 @implementer(interfaces.IStreamClientEndpoint)
-class UNIXClientEndpoint(object):
+class UNIXClientEndpoint(FancyStrMixin, object):
     """
     UnixSocket client endpoint.
     """
+    showAttributes = (('_path', 'path', '%r'), ('_timeout', 'timeout', '%r'),
+                      ('_checkPID', 'checkPID', '%r'))
+
     def __init__(self, reactor, path, timeout=30, checkPID=0):
         """
         @param reactor: An L{IReactorUNIX} provider.
@@ -954,7 +988,7 @@
 
 
 @implementer(interfaces.IStreamServerEndpoint)
-class AdoptedStreamServerEndpoint(object):
+class AdoptedStreamServerEndpoint(FancyStrMixin, object):
     """
     An endpoint for listening on a file descriptor initialized outside of
     Twisted.
@@ -962,6 +996,9 @@
     @ivar _used: A C{bool} indicating whether this endpoint has been used to
         listen with a factory yet.  C{True} if so.
     """
+    showAttributes = (('fileno', 'fileno', '%r'),
+                      ('addressFamily', 'addressFamily', '%r'),
+                      ('_used', 'used', '%r'),)
     _close = os.close
     _setNonBlocking = staticmethod(fdesc.setNonBlocking)
 
Index: twisted/internet/test/test_endpoints.py
===================================================================
--- twisted/internet/test/test_endpoints.py	(revision 42586)
+++ twisted/internet/test/test_endpoints.py	(working copy)
@@ -30,6 +30,7 @@
 from twisted.python import log
 from twisted.protocols import basic
 from twisted.internet.task import Clock
+from twisted.internet.test.test_core import ObjectModelIntegrationMixin
 from twisted.test.proto_helpers import (MemoryReactorClock as MemoryReactor)
 from twisted.test import __file__ as testInitPath
 pemPath = FilePath(testInitPath.encode("utf-8")).sibling(b"server.pem")
@@ -663,6 +664,7 @@
         return d.addCallback(checkProtocol)
 
 
+
     def test_address(self):
         """
         The address passed to the factory's buildProtocol in the endpoint
@@ -923,7 +925,26 @@
         error.trap(Exception)
 
 
+    def test_repr(self):
+        """
+        repr of L{endpoints.ProcessEndpoint} shows the attributes of the
+        endpoint.
+        """
+        environ = {'HOME': None}
+        ep = endpoints.ProcessEndpoint(
+            reactor, '/bin/executable',
+            ['/bin/executable'], {'HOME': environ['HOME']},
+            '/runProcessHere/', 1, 2, True, {3: 'w', 4: 'r', 5: 'r'})
+        self.assertEqual(repr(ep),
+                         ("<ProcessEndpoint env={'HOME': None} "
+                          "path='/runProcessHere/' uid=1 gid=2 "
+                          "executable='/bin/executable' "
+                          "args=['/bin/executable'] "
+                          "usePTY=True "
+                          "childFDs={3: 'w', 4: 'r', 5: 'r'}>"))
 
+
+
 class ProcessEndpointTransportTests(unittest.TestCase):
     """
     Test the behaviour of the implementation detail
@@ -1220,7 +1241,28 @@
                 address)
 
 
+    def test_reprServer(self):
+        """
+        repr() of L{endpoints.TCP4ServerEndpoint} shows the attributes
+        of the endpoint
+        """
+        serverEndpoint = endpoints.TCP4ServerEndpoint(reactor, 0)
+        self.assertEqual(repr(serverEndpoint),
+                         "<TCP4ServerEndpoint port=0 backlog=50 interface=''>")
 
+
+    def test_reprClient(self):
+        """
+        repr() of L{endpoints.TCP4ClientEndpoint} shows the attributes
+        of the endpoint
+        """
+        clientEndpoint = endpoints.TCP4ClientEndpoint(reactor, "localhost", 80)
+        self.assertEqual(repr(clientEndpoint),
+                         ("<TCP4ClientEndpoint host='localhost' port=80 "
+                         "timeout=30 bindAddress=None>"))
+
+
+
 class TCP6EndpointsTestCase(EndpointTestCaseMixin, unittest.TestCase):
     """
     Tests for TCP IPv6 Endpoints.
@@ -1329,7 +1371,29 @@
                 address)
 
 
+    def test_reprServer(self):
+        """
+        repr() of L{endpoints.TCP6ServerEndpoint} shows the attributes
+        of the endpoint
+        """
+        serverEndpoint = endpoints.TCP6ServerEndpoint(reactor, 0)
+        self.assertEqual(repr(serverEndpoint),
+                         ("<TCP6ServerEndpoint port=0 backlog=50 "
+                          "interface='::'>"))
 
+
+    def test_reprClient(self):
+        """
+        repr() of L{endpoints.TCP6ClientEndpoint} shows the attributes
+        of the endpoint
+        """
+        clientEndpoint = endpoints.TCP6ClientEndpoint(reactor, "localhost", 80)
+        self.assertEqual(repr(clientEndpoint),
+                         ("<TCP6ClientEndpoint host='localhost' port=80 "
+                          "timeout=30 bindAddress=None>"))
+
+
+
 class TCP6EndpointNameResolutionTestCase(ClientEndpointTestCaseMixin,
                                          unittest.TestCase):
     """
@@ -1674,7 +1738,19 @@
                 {})], calls)
 
 
+    def test_repr(self):
+        """
+        repr() of L{endpoints.HostnameEndpoint} shows the attributes of the
+        endpoint.
+        """
+        endpoint = endpoints.HostnameEndpoint(reactor, b'ipv4.example.com',
+            1234)
+        self.assertEqual(repr(endpoint),
+                         ("<HostnameEndpoint host='ipv4.example.com' "
+                          "port=1234 timeout=30 bindAddress=None>"))
 
+
+
 class HostnameEndpointsOneIPv6TestCase(ClientEndpointTestCaseMixin,
                                 unittest.TestCase):
     """
@@ -2090,7 +2166,31 @@
                 address)
 
 
+    def test_reprServer(self):
+        """
+        repr() of L{endpoints.SSL4ServerEndpoint} shows the attributes
+        of the endpoint
+        """
+        serverEndpoint = endpoints.SSL4ServerEndpoint(reactor, 0,
+                                                      self.serverSSLContext)
+        self.assertEqual(repr(serverEndpoint),
+                         "<SSL4ServerEndpoint port=0 backlog=50 interface=''>")
 
+
+    def test_reprClient(self):
+        """
+        repr() of L{endpoints.SSL4ClientEndpoint} shows the attributes
+        of the endpoint
+        """
+        clientEndpoint = endpoints.SSL4ClientEndpoint(reactor, "localhost",
+                                                      80,
+                                                      self.serverSSLContext)
+        self.assertEqual(repr(clientEndpoint),
+                         ("<SSL4ClientEndpoint host='localhost' port=80 "
+                          "timeout=30 bindAddress=None>"))
+
+
+
 class UNIXEndpointsTestCase(EndpointTestCaseMixin,
                             unittest.TestCase):
     """
@@ -2199,7 +2299,31 @@
                 address)
 
 
+    def test_reprServer(self):
+        """
+        repr() of L{endpoints.UNIXServerEndpoint} shows the attributes
+        of the endpoint
+        """
+        serverEndpoint = endpoints.UNIXServerEndpoint(reactor,
+            UNIXAddress(self.mktemp()).name)
+        self.assertEqual(repr(serverEndpoint),
+            ("<UNIXServerEndpoint address=%r backlog=50 mode=%o "
+             "wantPID=0>" % (serverEndpoint._address, serverEndpoint._mode)))
 
+
+    def test_reprClient(self):
+        """
+        repr() of L{endpoints.UNIXClientEndpoint} shows the attributes
+        of the endpoint
+        """
+        clientEndpoint = endpoints.UNIXClientEndpoint(reactor,
+            UNIXAddress(self.mktemp()).name)
+        self.assertEqual(repr(clientEndpoint),
+            "<UNIXClientEndpoint path=%r timeout=30 checkPID=0>" %
+            (clientEndpoint._path))
+
+
+
 class ParserTestCase(unittest.TestCase):
     """
     Tests for L{endpoints._parseServer}, the low-level parsing logic.
@@ -2995,7 +3119,21 @@
         return d
 
 
+    def test_repr(self):
+        """
+        repr() of L{endpoints.AdoptedStreamServerEndpoint} shows the attributes
+        of the endpoint.
+        """
+        fileno = 12
+        addressFamily = AF_INET
+        endpoint = self._createStubbedAdoptedEndpoint(
+            reactor, fileno, addressFamily)
+        self.assertEqual(repr(endpoint),
+                         ('<AdoptedStreamServerEndpoint fileno=12 '
+                          'addressFamily=2 used=False>'))
 
+
+
 class SystemdEndpointPluginTests(unittest.TestCase):
     """
     Unit tests for the systemd stream server endpoint and endpoint string
Index: twisted/topfiles/5633.bugfix
===================================================================
--- twisted/topfiles/5633.bugfix	(revision 0)
+++ twisted/topfiles/5633.bugfix	(working copy)
@@ -0,0 +1 @@
+The endpoints in twisted.internet.endpoints now show attribute details through their respective repr() methods.
