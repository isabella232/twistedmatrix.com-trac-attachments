=== modified file 'twisted/protocols/policies.py'
--- old/twisted/protocols/policies.py	2011-02-14 03:45:15 +0000
+++ new/twisted/protocols/policies.py	2011-08-19 03:42:53 +0000
@@ -114,7 +114,10 @@
         self.wrappedFactory.clientConnectionLost(connector, reason)
 
     def buildProtocol(self, addr):
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr))
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p)
+        return p
 
     def registerProtocol(self, p):
         """Called by protocol to register itself."""
@@ -485,8 +488,10 @@
 
 
     def buildProtocol(self, addr):
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
-                             timeoutPeriod=self.timeoutPeriod)
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p, timeoutPeriod=self.timeoutPeriod)
+        return p
 
 
     def callLater(self, period, func):
@@ -582,8 +587,11 @@
     def buildProtocol(self, addr):
         self._counter += 1
         logfile = self.open(self.logfilePrefix + '-' + str(self._counter))
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
-                             logfile, self.lengthLimit, self._counter)
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p, logfile, self.lengthLimit, 
+                self._counter)
+        return p
 
 
     def resetCounter(self):

=== modified file 'twisted/test/test_policies.py'
--- old/twisted/test/test_policies.py	2011-07-14 19:05:14 +0000
+++ new/twisted/test/test_policies.py	2011-08-19 03:42:53 +0000
@@ -681,3 +681,69 @@
         f.resetCounter()
         self.assertEqual(f._counter, 0)
 
+
+class RejectingFactory(protocol.Factory):
+    """
+    A factory that rejects all incoming connections by returnung None
+    from within buildProtocol
+    """
+
+    def buildProtocol(self, addr):
+        """Reject all connections."""
+        return None
+
+class WrappedFactoryRejectionTestCase(unittest.TestCase):
+    """
+    Test that wrapped factories returning None from buildProtocol work as
+    expected.
+    """
+
+    def runFactoryTest(self, FactoryCls, *args, **kwargs):
+        fact = FactoryCls(*args, **kwargs)
+        fact.startFactory()
+        self.assert_(fact.buildProtocol('127.0.0.1') is None)
+        fact.stopFactory()
+
+    def test_wrappedRejectingFactory(self):
+        """
+        WrappingFactory should return None from buildProtocol
+        when the wrapped factory does the same.
+        """
+        self.runFactoryTest(policies.WrappingFactory, RejectingFactory())
+
+    def test_wrappedThrottlingFactory(self):
+        """
+        ThrottlingFactory should return None from buildProtocol
+        when the wrapped factory does the same.
+        """
+        self.runFactoryTest(policies.ThrottlingFactory, RejectingFactory())
+
+    def test_wrappedSpewingFactory(self):
+        """
+        SpewingFactory should return None from buildProtocol
+        when the wrapped factory does the same.
+        """
+        self.runFactoryTest(policies.SpewingFactory, RejectingFactory())
+
+    def test_wrappedLimitConnectionsByPeerFactory(self):
+        """
+        LimitConnectionsByPeer should return None from buildProtocol
+        when the wrapped factory does the same.
+        """
+        self.runFactoryTest(policies.LimitConnectionsByPeer, RejectingFactory())
+
+    def test_wrappedTimeoutFactory(self):
+        """
+        TimeoutFactory should return None from buildProtocol
+        when the wrapped factory does the same.
+        """
+        self.runFactoryTest(policies.TimeoutFactory, RejectingFactory())
+
+    def test_wrappedTrafficLoggingFactory(self):
+        """
+        TrafficLoggingFactory should return None from buildProtocol
+        when the wrapped factory does the same.
+        """
+        self.runFactoryTest(policies.TrafficLoggingFactory,
+            RejectingFactory(), 'foo')
+

