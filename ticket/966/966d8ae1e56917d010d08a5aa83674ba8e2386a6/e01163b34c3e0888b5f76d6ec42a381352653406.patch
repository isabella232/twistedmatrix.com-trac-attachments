=== modified file 'twisted/protocols/policies.py'
--- old/twisted/protocols/policies.py	2011-02-14 03:45:15 +0000
+++ new/twisted/protocols/policies.py	2011-08-14 00:12:23 +0000
@@ -114,7 +114,10 @@
         self.wrappedFactory.clientConnectionLost(connector, reason)
 
     def buildProtocol(self, addr):
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr))
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p)
+        return p
 
     def registerProtocol(self, p):
         """Called by protocol to register itself."""
@@ -177,7 +180,7 @@
     protocol = ThrottlingProtocol
 
     def __init__(self, wrappedFactory, maxConnectionCount=sys.maxint,
-                 readLimit=None, writeLimit=None):
+                readLimit=None, writeLimit=None):
         WrappingFactory.__init__(self, wrappedFactory)
         self.connectionCount = 0
         self.maxConnectionCount = maxConnectionCount
@@ -485,8 +488,10 @@
 
 
     def buildProtocol(self, addr):
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
-                             timeoutPeriod=self.timeoutPeriod)
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p, timeoutPeriod=self.timeoutPeriod)
+        return p
 
 
     def callLater(self, period, func):
@@ -501,7 +506,7 @@
 class TrafficLoggingProtocol(ProtocolWrapper):
 
     def __init__(self, factory, wrappedProtocol, logfile, lengthLimit=None,
-                 number=0):
+                number=0):
         """
         @param factory: factory which created this protocol.
         @type factory: C{protocol.Factory}.
@@ -582,8 +587,11 @@
     def buildProtocol(self, addr):
         self._counter += 1
         logfile = self.open(self.logfilePrefix + '-' + str(self._counter))
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
-                             logfile, self.lengthLimit, self._counter)
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p, logfile, self.lengthLimit, 
+                self._counter)
+        return p
 
 
     def resetCounter(self):

=== modified file 'twisted/test/test_policies.py'
--- old/twisted/test/test_policies.py	2011-07-14 19:05:14 +0000
+++ new/twisted/test/test_policies.py	2011-08-14 00:12:23 +0000
@@ -681,3 +681,50 @@
         f.resetCounter()
         self.assertEqual(f._counter, 0)
 
+
+class RejectingFactory(protocol.Factory):
+    """
+    A factory that rejects all incoming connections by returnung None
+    from within buildProtocol
+    """
+
+    def buildProtocol(self, addr):
+        """Reject all connections."""
+        return None
+
+class WrappedFactoryRejectionTestCase(unittest.TestCase):
+    """
+    Test that wrapped factories returning None from buildProtocol work as
+    expected.
+    """
+
+    def factory_test(self, FactoryCls, *args, **kwargs):
+        fact = FactoryCls(*args, **kwargs)
+        fact.startFactory()
+        self.assert_(fact.buildProtocol('127.0.0.1') is None)
+        fact.stopFactory()
+
+    def test_wrapped_rejections(self):
+        """
+        Test that wrapping factories return None from buildProtocol
+        when the childFactory does the same.
+        """
+        self.factory_test(policies.WrappingFactory,
+                RejectingFactory())
+        self.factory_test(policies.ThrottlingFactory,
+                RejectingFactory())
+        self.factory_test(policies.SpewingFactory,
+                RejectingFactory())
+        self.factory_test(policies.LimitConnectionsByPeer,
+                RejectingFactory())
+
+        # Cannot test LimitTotalConnectionsFactory, since it does not
+        # wrap another factory, only other protocols:
+        #self.factory_test(policies.LimitTotalConnectionsFactory,
+        #		RejectingFactory())
+
+        self.factory_test(policies.TimeoutFactory,
+                RejectingFactory())
+        self.factory_test(policies.TrafficLoggingFactory,
+                RejectingFactory(), 'foo')
+

