Index: twisted/test/test_policies.py
===================================================================
--- twisted/test/test_policies.py	(revision 32478)
+++ twisted/test/test_policies.py	(working copy)
@@ -681,3 +681,74 @@
         f.resetCounter()
         self.assertEqual(f._counter, 0)
 
+
+class RejectingFactory(protocol.Factory):
+    """
+    A factory that rejects all incoming connections by returnung None
+    from within buildProtocol.
+    """
+
+    def buildProtocol(self, addr):
+        """Reject all connections."""
+        return None
+
+class WrappedFactoryRejectionTestCase(unittest.TestCase):
+    """
+    Factories that wrap other factories return None from buildProtocol when
+    the wrapped factory does the same.
+    """
+
+    def assertFactoryClassPropagatesRejection(self, FactoryCls, *args):
+        """
+        Assert that C{FactoryCls} propagates the return of None from
+        buildProtocol correctly.
+        """
+        fact = FactoryCls(RejectingFactory(), *args)
+        fact.startFactory()
+        self.assertIdentical(fact.buildProtocol('127.0.0.1'), None)
+        fact.stopFactory()
+
+    def test_wrappedRejectingFactory(self):
+        """
+        WrappingFactory returns None from buildProtocol when the wrapped
+        factory does the same.
+        """
+        self.assertFactoryClassPropagatesRejection(policies.WrappingFactory)
+
+    def test_wrappedThrottlingFactory(self):
+        """
+        ThrottlingFactory returns None from buildProtocol when the wrapped
+        factory does the same.
+        """
+        self.assertFactoryClassPropagatesRejection(policies.ThrottlingFactory)
+
+    def test_wrappedSpewingFactory(self):
+        """
+        SpewingFactory returns None from buildProtocol when the wrapped
+        factory does the same.
+        """
+        self.assertFactoryClassPropagatesRejection(policies.SpewingFactory)
+
+    def test_wrappedLimitConnectionsByPeerFactory(self):
+        """
+        LimitConnectionsByPeer returns None from buildProtocol when the
+        wrapped factory does the same.
+        """
+        self.assertFactoryClassPropagatesRejection(
+            policies.LimitConnectionsByPeer)
+
+    def test_wrappedTimeoutFactory(self):
+        """
+        TimeoutFactory returns None from buildProtocol when the wrapped
+        factory does the same.
+        """
+        self.assertFactoryClassPropagatesRejection(policies.TimeoutFactory)
+
+    def test_wrappedTrafficLoggingFactory(self):
+        """
+        TrafficLoggingFactory returns None from buildProtocol when the wrapped
+        factory does the same.
+        """
+        self.assertFactoryClassPropagatesRejection(
+            policies.TrafficLoggingFactory, 'foo')
+
Index: twisted/protocols/policies.py
===================================================================
--- twisted/protocols/policies.py	(revision 32478)
+++ twisted/protocols/policies.py	(working copy)
@@ -114,7 +114,10 @@
         self.wrappedFactory.clientConnectionLost(connector, reason)
 
     def buildProtocol(self, addr):
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr))
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p)
+        return p
 
     def registerProtocol(self, p):
         """Called by protocol to register itself."""
@@ -485,8 +488,10 @@
 
 
     def buildProtocol(self, addr):
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
-                             timeoutPeriod=self.timeoutPeriod)
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p, timeoutPeriod=self.timeoutPeriod)
+        return p
 
 
     def callLater(self, period, func):
@@ -582,8 +587,11 @@
     def buildProtocol(self, addr):
         self._counter += 1
         logfile = self.open(self.logfilePrefix + '-' + str(self._counter))
-        return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
-                             logfile, self.lengthLimit, self._counter)
+        p = self.wrappedFactory.buildProtocol(addr)
+        if p is not None:
+            p = self.protocol(self, p, logfile, self.lengthLimit, 
+                self._counter)
+        return p
 
 
     def resetCounter(self):
