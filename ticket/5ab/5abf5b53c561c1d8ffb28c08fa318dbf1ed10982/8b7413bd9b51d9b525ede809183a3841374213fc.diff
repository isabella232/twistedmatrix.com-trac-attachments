diff --git a/twisted/internet/endpoints.py b/twisted/internet/endpoints.py
index b68ac75..cd5a6af 100644
--- a/twisted/internet/endpoints.py
+++ b/twisted/internet/endpoints.py
@@ -760,7 +760,6 @@ class HostnameEndpoint(object):
                 if endpoint is None:
                     # The list of endpoints ends.
                     checkDone.endpointsLeft = False
-                    iterateEndpoint.stop()
                     checkDone()
                     return
 
@@ -772,8 +771,6 @@ class HostnameEndpoint(object):
                     return result
                 @eachAttempt.addCallback
                 def succeeded(result):
-                    if iterateEndpoint.running:
-                        iterateEndpoint.stop()
                     winner.callback(result)
                 @eachAttempt.addErrback
                 def failed(reason):
@@ -788,6 +785,8 @@ class HostnameEndpoint(object):
                 checkDone.completed = True
                 for remaining in pending[:]:
                     remaining.cancel()
+                if iterateEndpoint.running:
+                    iterateEndpoint.stop()
                 return result
             return winner
 
diff --git a/twisted/internet/test/test_endpoints.py b/twisted/internet/test/test_endpoints.py
index 66b38f3..fbf1ffb 100644
--- a/twisted/internet/test/test_endpoints.py
+++ b/twisted/internet/test/test_endpoints.py
@@ -1689,6 +1689,7 @@ class HostnameEndpointsOneIPv4Tests(ClientEndpointTestCaseMixin,
         self.assertIsInstance(failure.value, error.ConnectingCancelledError)
         self.assertEqual(failure.value.address, address)
         self.assertTrue(mreactor.tcpClients[0][2]._connector.stoppedConnecting)
+        self.assertEqual([], mreactor.getDelayedCalls())
 
 
     def test_endpointConnectingCancelledAfterAllAttemptsStarted(self):
@@ -1722,6 +1723,7 @@ class HostnameEndpointsOneIPv4Tests(ClientEndpointTestCaseMixin,
         d = ep.connect(clientFactory)
         mreactor.advance(endpoints.HostnameEndpoint._DEFAULT_ATTEMPT_DELAY)
         self.assertEqual(self.failureResultOf(d).value, expectedError)
+        self.assertEqual([], mreactor.getDelayedCalls())
 
 
     def test_endpointConnectFailureAfterIteration(self):
@@ -1746,6 +1748,7 @@ class HostnameEndpointsOneIPv4Tests(ClientEndpointTestCaseMixin,
         host, port, factory, timeout, bindAddress = mreactor.tcpClients[0]
         factory.clientConnectionFailed(mreactor.connectors[0], expectedError)
         self.assertEqual(self.failureResultOf(d).value, expectedError)
+        self.assertEqual([], mreactor.getDelayedCalls())
 
 
     def test_endpointConnectSuccessAfterIteration(self):
@@ -1905,6 +1908,7 @@ class HostnameEndpointsOneIPv6Tests(ClientEndpointTestCaseMixin,
         self.assertIsInstance(failure.value, error.ConnectingCancelledError)
         self.assertEqual(failure.value.address, address)
         self.assertTrue(mreactor.tcpClients[0][2]._connector.stoppedConnecting)
+        self.assertEqual([], mreactor.getDelayedCalls())
 
 
     def test_endpointConnectFailure(self):
@@ -1922,6 +1926,7 @@ class HostnameEndpointsOneIPv6Tests(ClientEndpointTestCaseMixin,
         d = ep.connect(clientFactory)
         mreactor.advance(0.3)
         self.assertEqual(self.failureResultOf(d).value, expectedError)
+        self.assertEqual([], mreactor.getDelayedCalls())
 
 
 
@@ -2030,6 +2035,7 @@ class HostnameEndpointsFasterConnectionTests(unittest.TestCase):
 
         self.assertEqual(len(results), 1)
         self.assertEqual(results[0].factory, clientFactory)
+        self.assertEqual([], self.mreactor.getDelayedCalls())
 
 
     def test_IPv6IsFaster(self):
@@ -2063,6 +2069,7 @@ class HostnameEndpointsFasterConnectionTests(unittest.TestCase):
 
         self.assertEqual(len(results), 1)
         self.assertEqual(results[0].factory, clientFactory)
+        self.assertEqual([], self.mreactor.getDelayedCalls())
 
 
     def test_otherConnectionsCancelled(self):
@@ -2090,6 +2097,7 @@ class HostnameEndpointsFasterConnectionTests(unittest.TestCase):
 
         self.assertEqual(True,
                 self.mreactor.tcpClients[0][2]._connector.stoppedConnecting)
+        self.assertEqual([], self.mreactor.getDelayedCalls())
 
 
 
