From ac8953b397664aef3efef3aedbe3c3cf60340c98 Mon Sep 17 00:00:00 2001
Message-Id: <ac8953b397664aef3efef3aedbe3c3cf60340c98.1384213241.git.luto@amacapital.net>
From: Andy Lutomirski <luto@amacapital.net>
Date: Mon, 11 Nov 2013 15:21:02 -0800
Subject: [PATCH 1/2] Fix comments from review.

---
 twisted/internet/interfaces.py     |  2 +-
 twisted/protocols/test/test_tls.py | 14 +++++++-------
 twisted/protocols/tls.py           | 20 +++++++++++---------
 twisted/web/topfiles/6204.feature  |  2 +-
 4 files changed, 20 insertions(+), 18 deletions(-)

diff --git a/twisted/internet/interfaces.py b/twisted/internet/interfaces.py
index 1c12c73..43762d7 100644
--- a/twisted/internet/interfaces.py
+++ b/twisted/internet/interfaces.py
@@ -2152,7 +2152,7 @@ class ISSLTransport(ITCPTransport):
         Return an object with the peer's certificate info.
         """
 
-    def notifyHandshakeDone():
+    def whenHandshakeDone():
         """
         Returns a Deferred that will complete when the initial handshake
         is done and will errback if the handshake fails.  (Connection
diff --git a/twisted/protocols/test/test_tls.py b/twisted/protocols/test/test_tls.py
index 4545713..b170846 100644
--- a/twisted/protocols/test/test_tls.py
+++ b/twisted/protocols/test/test_tls.py
@@ -295,7 +295,7 @@ class TLSMemoryBIOTests(TestCase):
         wrapperFactory = TLSMemoryBIOFactory(
             clientContextFactory, True, clientFactory)
         sslClientProtocol = wrapperFactory.buildProtocol(None)
-        handshakeDeferred = sslClientProtocol.notifyHandshakeDone()
+        handshakeDeferred = sslClientProtocol.whenHandshakeDone()
 
         serverFactory = ServerFactory()
         serverFactory.protocol = Protocol
@@ -374,7 +374,7 @@ class TLSMemoryBIOTests(TestCase):
 
     def test_notifyAfterSuccessfulHandshake(self):
         """
-        Calling L{TLSMemoryBIOProtocol.notifyHandshakeDone} after a
+        Calling L{TLSMemoryBIOProtocol.whenHandshakeDone} after a
         successful handshake should work.
         """
         tlsClient, tlsServer, handshakeDeferred, _ = self.handshakeProtocols()
@@ -382,7 +382,7 @@ class TLSMemoryBIOTests(TestCase):
         result = Deferred()
 
         def check(_):
-            d = tlsClient.notifyHandshakeDone()
+            d = tlsClient.whenHandshakeDone()
             d.addCallback(result.callback)
             d.addErrback(result.errback)
 
@@ -392,7 +392,7 @@ class TLSMemoryBIOTests(TestCase):
 
     def test_notifyAfterFailedHandshake(self):
         """
-        Calling L{TLSMemoryBIOProtocol.notifyHandshakeDone} after a
+        Calling L{TLSMemoryBIOProtocol.whenHandshakeDone} after a
         failed handshake should work.
         """
         clientConnectionLost = Deferred()
@@ -425,14 +425,14 @@ class TLSMemoryBIOTests(TestCase):
             result.errback(False)
 
         def check(reason):
-            d = sslClientProtocol.notifyHandshakeDone()
+            d = sslClientProtocol.whenHandshakeDone()
             if not d.called:
                 result.errback(Exception('notification should be called'))
                 return
             d.addCallback(fail)
             d.addErrback(lambda _: result.callback(None))
 
-        sslClientProtocol.notifyHandshakeDone().addCallbacks(fail, check)
+        sslClientProtocol.whenHandshakeDone().addCallbacks(fail, check)
 
         return gatherResults([connectionDeferred, result])
 
@@ -468,7 +468,7 @@ class TLSMemoryBIOTests(TestCase):
         result = Deferred()
 
         def checkSide(side):
-            return self.assertFailure(side.notifyHandshakeDone(), Error)
+            return self.assertFailure(side.whenHandshakeDone(), Error)
 
         return gatherResults([connectionDeferred, checkSide(sslClientProtocol),
                               checkSide(sslServerProtocol)])
diff --git a/twisted/protocols/tls.py b/twisted/protocols/tls.py
index dd17ab3..57a38b5 100644
--- a/twisted/protocols/tls.py
+++ b/twisted/protocols/tls.py
@@ -248,11 +248,13 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
         complete (C{True}) or not (C{False}).
 
     @ivar _handshakeError: If the handshake failed, then this will store
-        the reason.  Otherwise it will be C{None}.
+        the reason (a L{twisted.python.failure.Failure} object).
+        Otherwise it will be C{None}.
 
     @ivar _handshakeDeferreds: If the handshake is not done, then this
         is a list of L{twisted.internet.defer.Deferred} instances to
-        be completed when the handshake finishes.
+        be completed when the handshake finishes.  Once the handshake
+        is done, this is C{None}.
 
     @ivar _reason: If an unexpected L{OpenSSL.SSL.Error} occurs which causes
         the connection to be lost, it is saved here.  If appropriate, this may
@@ -319,10 +321,10 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
         # Now that we ourselves have a transport (initialized by the
         # ProtocolWrapper.makeConnection call above), kick off the TLS
         # handshake.
-        self.__tryHandshake()
+        self._tryHandshake()
 
 
-    def notifyHandshakeDone(self):
+    def whenHandshakeDone(self):
         d = defer.Deferred()
         if self._handshakeDone:
             if self._handshakeError is None:
@@ -334,7 +336,7 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
         return d
 
 
-    def __tryHandshake(self):
+    def _tryHandshake(self):
         """
         Attempts to handshake.  OpenSSL wants us to keep trying to
         handshake until either it works or fails (as opposed to needing
@@ -353,11 +355,11 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
                 self._tlsShutdownFinished(Failure())
                 return
             else:
-                self.__handshakeSucceeded()
+                self._handshakeSucceeded()
                 return
 
 
-    def __handshakeSucceeded(self):
+    def _handshakeSucceeded(self):
         """
         Mark the handshake done and notify everyone.  It's okay to call
         this more than once.
@@ -396,7 +398,7 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
         # rely on it: if the handshake is done but there's no application
         # data, then SSL_read won't tell us.
         if not self._handshakeDone:
-            self.__tryHandshake()
+            self._tryHandshake()
         if not self._handshakeDone:
             return  # Save some effort: SSL_read can't possibly work
 
@@ -599,7 +601,7 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
             else:
                 # SSL_write can transparently complete a handshake.  If we
                 # get here, then we're done handshaking.
-                self.__handshakeSucceeded()
+                self._handshakeSucceeded()
                 self._flushSendBIO()
                 alreadySent += sent
 
diff --git a/twisted/web/topfiles/6204.feature b/twisted/web/topfiles/6204.feature
index 1aed481..46cfabb 100644
--- a/twisted/web/topfiles/6204.feature
+++ b/twisted/web/topfiles/6204.feature
@@ -1 +1 @@
-twisted.internet.interfaces.ISSLTransport now has a notifyHandshakeDone method to request notification when the handshake succeeds or fails.
+twisted.internet.interfaces.ISSLTransport now has a whenHandshakeDone method to request notification when the handshake succeeds or fails.
-- 
1.8.3.1

