diff --git doc/core/howto/ssl.xhtml doc/core/howto/ssl.xhtml
index 3d6450a..f60e764 100644
--- doc/core/howto/ssl.xhtml
+++ doc/core/howto/ssl.xhtml
@@ -350,6 +350,57 @@ if __name__ == '__main__':
       certificate to the server for validation.
     </p>
 
+    <h2>Detecting handshake completion</h2>
+
+    <p>
+      You can detect a completed handshake using the
+      <code class="API">twisted.internet.interfaces.ISSLTransport.whenHandshakeDone</code>.
+      This can be used to identify clients at the beginning of a connection,
+      for example.
+    </p>
+
+    <pre class="python">
+from twisted.internet import ssl, reactor
+from twisted.internet.interfaces import ISSLTransport
+from twisted.internet.protocol import Factory, Protocol
+
+class WhoAreYou(Protocol):
+    def connectionMade(self):
+        if ISSLTransport.providedBy(self.transport):
+            self.transport.whenHandshakeDone().addCallbacks(self._handshakeDone,
+                                                            self._handshakeFail)
+        else:
+            print 'Client is not using SSL'
+            self.transport.loseConnection()
+
+    def _handshakeDone(self, _):
+        print 'Client handshake succeeded: %r' % \
+            (self.transport.getPeerCertificate().get_subject())
+        self.transport.loseConnection()
+
+    def _handshakeFail(self, reason):
+        print 'Client handshake failed: %r' % reason.value
+        self.transport.loseConnection()
+
+if __name__ == '__main__':
+    factory = Factory()
+    factory.protocol = WhoAreYou
+
+    with open("keys/ca.pem") as certAuthCertFile:
+        certAuthCert = ssl.Certificate.loadPEM(certAuthCertFile.read())
+
+    with open("keys/server.key") as keyFile:
+        with open("keys/server.crt") as certFile:
+            serverCert = ssl.PrivateCertificate.loadPEM(
+                keyFile.read() + certFile.read())
+
+    contextFactory = serverCert.options(certAuthCert)
+
+    reactor.listenTCP(8000, factory)
+    reactor.listenSSL(8001, factory, contextFactory)
+    reactor.run()
+    </pre>
+
     <h2>Other facilities</h2>
 
     <p><code class="API">twisted.protocols.amp</code> supports encrypted
diff --git twisted/protocols/test/test_tls.py twisted/protocols/test/test_tls.py
index c5651d6..9a35400 100644
--- twisted/protocols/test/test_tls.py
+++ twisted/protocols/test/test_tls.py
@@ -334,6 +334,29 @@ class TLSMemoryBIOTests(TestCase):
                 connectionDeferred])
 
 
+    def test_handshakeInterrupted(self):
+        """
+        L{TLSMemoryBIOProtocol.whenHandshakeDone} should correctly handle
+        a failure in the middle of a handshake.
+        """
+        clientConnectionLost = Deferred()
+        clientFactory = ClientFactory()
+        clientFactory.protocol = Protocol
+
+        clientContextFactory = TestContextFactory()
+        wrapperFactory = TLSMemoryBIOFactory(
+            clientContextFactory, True, clientFactory)
+        sslClientProtocol = wrapperFactory.buildProtocol(None)
+        handshakeDeferred = sslClientProtocol.whenHandshakeDone()
+
+        # The server will disconnect as soon as it receives some data.
+        sslServerProtocol = AccumulatingProtocol(1)
+
+        loopbackAsync(sslServerProtocol, sslClientProtocol)
+
+        return self.assertFailure(handshakeDeferred, Error)
+
+
     def test_notifyAfterSuccessfulHandshake(self):
         """
         Calling L{TLSMemoryBIOProtocol.whenHandshakeDone} after a
@@ -357,7 +380,6 @@ class TLSMemoryBIOTests(TestCase):
         Calling L{TLSMemoryBIOProtocol.whenHandshakeDone} after a
         failed handshake should work.
         """
-        clientConnectionLost = Deferred()
         clientFactory = ClientFactory()
         clientFactory.protocol = Protocol
 
@@ -366,7 +388,6 @@ class TLSMemoryBIOTests(TestCase):
             clientContextFactory, True, clientFactory)
         sslClientProtocol = wrapperFactory.buildProtocol(None)
 
-        serverConnectionLost = Deferred()
         serverFactory = ServerFactory()
         serverFactory.protocol = Protocol
 
@@ -427,7 +448,6 @@ class TLSMemoryBIOTests(TestCase):
         sslServerProtocol = wrapperFactory.buildProtocol(None)
 
         connectionDeferred = loopbackAsync(sslServerProtocol, sslClientProtocol)
-        result = Deferred()
 
         def checkSide(side):
             return self.assertFailure(side.whenHandshakeDone(), Error)
@@ -532,7 +552,6 @@ class TLSMemoryBIOTests(TestCase):
         wrapperFactory = TLSMemoryBIOFactory(
             clientContextFactory, True, clientFactory)
         sslClientProtocol = wrapperFactory.buildProtocol(None)
-        handshakeDeferred = sslClientProtocol.whenHandshakeDone()
 
         serverProtocol = AccumulatingProtocol(len(bytes))
         serverFactory = ServerFactory()
@@ -801,10 +820,13 @@ class TLSMemoryBIOTests(TestCase):
         return handshakeDeferred
 
 
-    def test_connectionLostOnlyAfterUnderlyingCloses(self):
+    def _test_connectionLostOnlyAfterUnderlyingCloses(self, handshake_ok):
         """
         The user protocol's connectionLost is only called when transport
         underlying TLS is disconnected.
+
+        @param handshake_ok: L{True} if the handshake should succeed; else
+                             L{False}.
         """
         class LostProtocol(Protocol):
             disconnected = None
@@ -820,7 +842,12 @@ class TLSMemoryBIOTests(TestCase):
         # Pretend TLS shutdown finished cleanly; the underlying transport
         # should be told to close, but the user protocol should not yet be
         # notified:
-        tlsProtocol._tlsShutdownFinished(None)
+        if handshake_ok:
+            errmsg = "ono"
+            tlsProtocol._tlsShutdownFinished(None)
+        else:
+            errmsg = "handshake error"
+            tlsProtocol._tlsShutdownFinished(Failure(ConnectionLost(errmsg)))
         self.assertEqual(transport.disconnecting, True)
         self.assertEqual(protocol.disconnected, None)
 
@@ -828,7 +855,19 @@ class TLSMemoryBIOTests(TestCase):
         # notified with the given reason (since TLS closed cleanly):
         tlsProtocol.connectionLost(Failure(ConnectionLost("ono")))
         self.assertTrue(protocol.disconnected.check(ConnectionLost))
-        self.assertEqual(protocol.disconnected.value.args, ("ono",))
+        self.assertEqual(protocol.disconnected.value.args, (errmsg,))
+
+
+    def test_connectionLostOnlyAfterUnderlyingClosesHandshakeOK(self):
+        """
+        If the handshake succeeds and then the underlying connection closes,
+        the underlying failure should be propagated.
+        """
+        return self._test_connectionLostOnlyAfterUnderlyingCloses(True)
+
+
+    def test_connectionLostOnlyAfterUnderlyingClosesHandshakeFailed(self):
+        return self._test_connectionLostOnlyAfterUnderlyingCloses(False)
 
 
     def test_loseConnectionTwice(self):
diff --git twisted/protocols/tls.py twisted/protocols/tls.py
index 57a38b5..face561 100644
--- twisted/protocols/tls.py
+++ twisted/protocols/tls.py
@@ -325,6 +325,9 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
 
 
     def whenHandshakeDone(self):
+        """
+        See L{twisted.internet.interfaces.ISSLTransport.whenHandshakeDone}.
+        """
         d = defer.Deferred()
         if self._handshakeDone:
             if self._handshakeError is None:
@@ -351,25 +354,32 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
             except WantWriteError:
                 self._flushSendBIO()
                 # And try again immediately
-            except Error as e:
+            except Error:
                 self._tlsShutdownFinished(Failure())
                 return
             else:
-                self._handshakeSucceeded()
+                self._handshakeFinished(None)
                 return
 
 
-    def _handshakeSucceeded(self):
+    def _handshakeFinished(self, error):
         """
         Mark the handshake done and notify everyone.  It's okay to call
         this more than once.
+
+        @param error: A L{twisted.python.failure.Failure} object to indicate
+                      failure or None to indicate success.
         """
         if not self._handshakeDone:
             self._handshakeDone = True
+            self._handshakeError = error
             deferreds = self._handshakeDeferreds
             self._handshakeDeferreds = None
             for d in deferreds:
-                d.callback(None)
+                if error is None:
+                    d.callback(None)
+                else:
+                    d.errback(error)
 
 
     def _flushSendBIO(self):
@@ -487,24 +497,7 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
         Called when TLS connection has gone away; tell underlying transport to
         disconnect.
         """
-        if not self._handshakeDone:
-            # This is a handshake failure (either an explicit failure from
-            # OpenSSL or an implicit failure due to a dropped transport
-            # connection).
-            #
-            # Note: Some testcases evilly call _tlsShutdownFinished(None)
-            # before the handshake finishes.  This can't happen in real life
-            # (none of the call sites allow it), so it's okay that we'll
-            # crash if there's actually anyone waiting for notification
-            # of the handshake result.
-            self._handshakeDone = True
-            self._handshakeError = reason
-
-            deferreds = self._handshakeDeferreds
-            self._handshakeDeferreds = None
-            for d in deferreds:
-                d.errback(reason)
-
+        self._handshakeFinished(reason)
         self._reason = reason
         self._lostTLSConnection = True
         # Using loseConnection causes the application protocol's
@@ -601,7 +594,7 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
             else:
                 # SSL_write can transparently complete a handshake.  If we
                 # get here, then we're done handshaking.
-                self._handshakeSucceeded()
+                self._handshakeFinished(None)
                 self._flushSendBIO()
                 alreadySent += sent
 
diff --git twisted/topfiles/6204.feature twisted/topfiles/6204.feature
index 46cfabb..ec6dc14 100644
--- twisted/topfiles/6204.feature
+++ twisted/topfiles/6204.feature
@@ -1 +1 @@
-twisted.internet.interfaces.ISSLTransport now has a whenHandshakeDone method to request notification when the handshake succeeds or fails.
+twisted.internet.interfaces.ISSLTransport now has a whenHandshakeDone method to request notification when the SSL handshake succeeds or fails.
