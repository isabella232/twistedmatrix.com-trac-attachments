Index: twisted/python/monkey.py
===================================================================
--- twisted/python/monkey.py	(révision 23196)
+++ twisted/python/monkey.py	(copie de travail)
@@ -1,14 +1,20 @@
 # -*- test-case-name: twisted.test.test_monkey -*-
 
-# Copyright (c) 2007 Twisted Matrix Laboratories.
+# Copyright (c) 2007-2008 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
+
 class MonkeyPatcher(object):
     """
     Cover up attributes with new objects. Neat for monkey-patching things for
     unit-testing purposes.
+
+    @cvar _NOT_PRESENT: identifier indicating that a patched attribute was not
+        originally present in the object patched.
+    @type _NOT_PRESENT: C{object}
     """
+    _NOT_PRESENT = object()
 
     def __init__(self, *patches):
         # List of patches to apply in (obj, name, value).
@@ -48,7 +54,8 @@
         """
         for obj, name, value in self._patchesToApply:
             if not self._alreadyPatched(obj, name):
-                self._originals.append((obj, name, getattr(obj, name)))
+                self._originals.append((obj, name,
+                                        getattr(obj, name, self._NOT_PRESENT)))
             setattr(obj, name, value)
 
 
@@ -58,7 +65,10 @@
         """
         while self._originals:
             obj, name, value = self._originals.pop()
-            setattr(obj, name, value)
+            if value is self._NOT_PRESENT:
+                delattr(obj, name)
+            else:
+                setattr(obj, name, value)
 
 
     def runWithPatches(self, f, *args, **kw):
Index: twisted/test/test_monkey.py
===================================================================
--- twisted/test/test_monkey.py	(révision 23196)
+++ twisted/test/test_monkey.py	(copie de travail)
@@ -1,4 +1,4 @@
-# Copyright (c) 2007 Twisted Matrix Laboratories.
+# Copyright (c) 2007-2008 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
@@ -6,9 +6,11 @@
 """
 
 from twisted.trial import unittest
+
 from twisted.python.monkey import MonkeyPatcher
 
 
+
 class TestObj:
     def __init__(self):
         self.foo = 'foo value'
@@ -16,6 +18,7 @@
         self.baz = 'baz value'
 
 
+
 class MonkeyPatcherTest(unittest.TestCase):
     """
     Tests for L{MonkeyPatcher} monkey-patching class.
@@ -63,15 +66,6 @@
         self.assertEquals(self.testObject.foo, 'haha')
 
 
-    def test_patchNonExisting(self):
-        """
-        Patching a non-existing attribute fails with an C{AttributeError}.
-        """
-        self.monkeyPatcher.addPatch(self.testObject, 'nowhere',
-                                    'blow up please')
-        self.assertRaises(AttributeError, self.monkeyPatcher.patch)
-
-
     def test_patchAlreadyPatched(self):
         """
         Adding a patch for an object and attribute that already have a patch
@@ -159,3 +153,15 @@
         self.assertRaises(RuntimeError, self.monkeyPatcher.runWithPatches, _)
         self.assertEquals(self.testObject.foo, self.originalObject.foo)
         self.assertEquals(self.testObject.bar, self.originalObject.bar)
+
+
+    def test_attributeNotPresent(self):
+        """
+        L{MonkeyPatcher.patch} should be able to patch an attribute not present
+        in the class, and L{MonkeyPatcher.restore} should delete it afterwards.
+        """
+        self.monkeyPatcher.addPatch(self.testObject, 'egg', 'spam')
+        self.monkeyPatcher.patch()
+        self.assertEquals(self.testObject.egg, 'spam')
+        self.monkeyPatcher.restore()
+        self.assertRaises(AttributeError, getattr, self.testObject, "egg")
