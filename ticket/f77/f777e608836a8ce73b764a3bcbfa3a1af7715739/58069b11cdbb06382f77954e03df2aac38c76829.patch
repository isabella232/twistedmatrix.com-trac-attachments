diff --git a/twisted/conch/ssh/userauth.py b/twisted/conch/ssh/userauth.py
index ea013ba..939ea9f 100644
--- a/twisted/conch/ssh/userauth.py
+++ b/twisted/conch/ssh/userauth.py
@@ -16,7 +16,7 @@ from twisted.conch.ssh.common import NS, getNS
 from twisted.cred import credentials
 from twisted.cred.error import UnauthorizedLogin
 from twisted.internet import defer, reactor
-from twisted.python import failure, log, util
+from twisted.python import failure, log
 
 
 
@@ -519,9 +519,9 @@ class SSHUserAuthClient(service.SSHService):
                 # put the element at the end of the list.
                 return len(self.preferredOrder)
 
-        canContinue = util.dsu([meth for meth in canContinue.split(',')
-                                if meth not in self.authenticatedWith],
-                               orderByPreference)
+        canContinue = sorted([meth for meth in canContinue.split(',')
+                              if meth not in self.authenticatedWith],
+                             key=orderByPreference)
 
         log.msg('can continue with: %s' % canContinue)
         return self._cbUserauthFailure(None, iter(canContinue))
diff --git a/twisted/python/test/test_release.py b/twisted/python/test/test_release.py
index 2cb73d6..fce4875 100644
--- a/twisted/python/test/test_release.py
+++ b/twisted/python/test/test_release.py
@@ -24,7 +24,6 @@ from twisted.python.compat import set
 from twisted.python.procutils import which
 from twisted.python import release
 from twisted.python.filepath import FilePath
-from twisted.python.util import dsu
 from twisted.python.versions import Version
 from twisted.python._release import _changeVersionInFile, getNextVersion
 from twisted.python._release import findTwistedProjects, replaceInFile
@@ -295,10 +294,10 @@ class ProjectTest(TestCase):
         Assert that two lists of L{Project}s are equal.
         """
         self.assertEqual(len(observedProjects), len(expectedProjects))
-        observedProjects = dsu(observedProjects,
-                               key=operator.attrgetter('directory'))
-        expectedProjects = dsu(expectedProjects,
-                               key=operator.attrgetter('directory'))
+        observedProjects = sorted(observedProjects,
+                                  key=operator.attrgetter('directory'))
+        expectedProjects = sorted(expectedProjects,
+                                  key=operator.attrgetter('directory'))
         for observed, expected in zip(observedProjects, expectedProjects):
             self.assertEqual(observed.directory, expected.directory)
 
@@ -979,7 +978,7 @@ class APIBuilderTestCase(TestCase):
         self.assertEqual(stdout.getvalue(), '')
 
 
-    def test_apiBuilderScriptMainRequiresTwoArguments(self):
+    def test_apiBuilderScriptMainRequiresTwoArguments(self):
         """
         SystemExit is raised when the incorrect number of command line
         arguments are passed to the API building script.
diff --git a/twisted/python/test/test_util.py b/twisted/python/test/test_util.py
index 51c6b2c..7b59bec 100644
--- a/twisted/python/test/test_util.py
+++ b/twisted/python/test/test_util.py
@@ -359,11 +359,23 @@ class Foo:
         self.x = x
 
 class DSU(unittest.TestCase):
-    def testDSU(self):
+    """
+    Tests for L{util.dsu}
+    """
+    def test_dsu(self):
         L = [Foo(x) for x in range(20, 9, -1)]
         L2 = util.dsu(L, lambda o: o.x)
         self.assertEquals(range(10, 21), [o.x for o in L2])
 
+
+    def test_deprecation(self):
+        self.assertWarns(DeprecationWarning,
+                         ("dsu is deprecated since Twisted 10.1. "
+                          "Use the built-in sorted() instead."),
+                         __file__, lambda: util.dsu([], lambda: 0))
+
+
+
 class IntervalDifferentialTestCase(unittest.TestCase):
     def testDefault(self):
         d = iter(util.IntervalDifferential([], 10))
diff --git a/twisted/python/util.py b/twisted/python/util.py
index a937ad6..428428b 100644
--- a/twisted/python/util.py
+++ b/twisted/python/util.py
@@ -565,10 +565,18 @@ class FancyEqMixin:
 
 
 def dsu(list, key):
+    """
+    decorate-sort-undecorate (aka "Schwartzian transform")
+
+    DEPRECATED. Use the built-in C{sorted()} instead.
+    """
+    warnings.warn(("dsu is deprecated since Twisted 10.1. "
+        "Use the built-in sorted() instead."), DeprecationWarning, stacklevel=2)
     L2 = [(key(e), i, e) for (i, e) in zip(range(len(list)), list)]
     L2.sort()
     return [e[2] for e in L2]
 
+
 try:
     from twisted.python._initgroups import initgroups as _c_initgroups
 except ImportError:
diff --git a/twisted/topfiles/4339.removal b/twisted/topfiles/4339.removal
new file mode 100644
index 0000000..331d1a2
--- /dev/null
+++ b/twisted/topfiles/4339.removal
@@ -0,0 +1 @@
+twisted.python.util.dsu is now deprecated.
diff --git a/twisted/trial/runner.py b/twisted/trial/runner.py
index be2ff82..aeeac49 100644
--- a/twisted/trial/runner.py
+++ b/twisted/trial/runner.py
@@ -14,7 +14,6 @@ import os, types, warnings, sys, inspect, imp
 import random, doctest, time
 
 from twisted.python import reflect, log, failure, modules, filepath
-from twisted.python.util import dsu
 from twisted.python.compat import set
 from twisted.python.lockfile import FilesystemLock
 
@@ -436,7 +435,7 @@ class TestLoader(object):
 
         @param xs: A list of test cases, class or modules.
         """
-        return dsu(xs, self.sorter)
+        return sorted(xs, key=self.sorter)
 
     def findTestClasses(self, module):
         """Given a module, return all Trial test classes"""
diff --git a/twisted/trial/test/test_assertions.py b/twisted/trial/test/test_assertions.py
index 5ca0f10..68236bb 100644
--- a/twisted/trial/test/test_assertions.py
+++ b/twisted/trial/test/test_assertions.py
@@ -11,7 +11,6 @@ from pprint import pformat
 from twisted.python import reflect, failure
 from twisted.python.deprecate import deprecated, getVersionString
 from twisted.python.versions import Version
-from twisted.python.util import dsu
 from twisted.internet import defer
 from twisted.trial import unittest, runner, reporter
 
@@ -633,14 +632,14 @@ class TestAssertionNames(unittest.TestCase):
     def test_failUnless_matches_assert(self):
         asserts = self._getAsserts()
         failUnlesses = reflect.prefixedMethods(self, 'failUnless')
-        self.failUnlessEqual(dsu(asserts, self._name),
-                             dsu(failUnlesses, self._name))
+        self.failUnlessEqual(sorted(asserts, key=self._name),
+                             sorted(failUnlesses, key=self._name))
 
     def test_failIf_matches_assertNot(self):
         asserts = reflect.prefixedMethods(unittest.TestCase, 'assertNot')
         failIfs = reflect.prefixedMethods(unittest.TestCase, 'failIf')
-        self.failUnlessEqual(dsu(asserts, self._name),
-                             dsu(failIfs, self._name))
+        self.failUnlessEqual(sorted(asserts, key=self._name),
+                             sorted(failIfs, key=self._name))
 
     def test_equalSpelling(self):
         for name, value in vars(self).items():
diff --git a/twisted/trial/test/test_loader.py b/twisted/trial/test/test_loader.py
index 703d06b..c436d83 100644
--- a/twisted/trial/test/test_loader.py
+++ b/twisted/trial/test/test_loader.py
@@ -480,7 +480,7 @@ class PackageOrderingTest(packages.SysPathManglingTest):
         for testModule in pkg.walkModules():
             if testModule.name.split(".")[-1].startswith("test_"):
                 testModules.append(testModule)
-        sortedModules = util.dsu(testModules, sorter) # ONE
+        sortedModules = sorted(testModules, key=sorter) # ONE
         for modinfo in sortedModules:
             # Now let's find all the classes.
             module = modinfo.load(None)
@@ -491,13 +491,13 @@ class PackageOrderingTest(packages.SysPathManglingTest):
                 for attrib in modinfo.iterAttributes():
                     if runner.isTestCase(attrib.load()):
                         testClasses.append(attrib)
-                sortedClasses = util.dsu(testClasses, sorter) # TWO
+                sortedClasses = sorted(testClasses, key=sorter) # TWO
                 for clsinfo in sortedClasses:
                     testMethods = []
                     for attr in clsinfo.iterAttributes():
                         if attr.name.split(".")[-1].startswith('test'):
                             testMethods.append(attr)
-                    sortedMethods = util.dsu(testMethods, sorter) # THREE
+                    sortedMethods = sorted(testMethods, key=sorter) # THREE
                     for methinfo in sortedMethods:
                         yield methinfo
 
