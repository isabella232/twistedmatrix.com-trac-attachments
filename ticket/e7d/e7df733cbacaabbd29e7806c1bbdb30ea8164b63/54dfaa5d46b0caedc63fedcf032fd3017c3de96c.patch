diff --git twisted/conch/checkers.py twisted/conch/checkers.py
index 7855fc9..d62436f 100644
--- twisted/conch/checkers.py
+++ twisted/conch/checkers.py
@@ -127,19 +127,31 @@ class SSHPublicKeyDatabase:
                 return failure.Failure(UnauthorizedLogin('error while verifying key'))
         return failure.Failure(UnauthorizedLogin("unable to verify key"))
 
+    def getAuthorizedKeysFiles(self, credentials):
+        """
+        On OpenSSH servers, the default location of the file containing the
+        list of authorized public keys is "$HOME/.ssh/authorized_keys"[1].
+
+        Note: do we want to include authorized_keys2?  It's been deprecated
+        since 2001[2].
+
+        [1] http://www.openbsd.org/cgi-bin/man.cgi?query=sshd_config
+        [2] http://marc.info/?m=100508718416162
+
+        @return: A list of absolute paths to files with the authorized keys.
+        """
+        root = os.path.join(pwd.getpwnam(credentials.username).pw_dir, '.ssh')
+        files = ['authorized_keys', 'authorized_keys2']
+        return [os.path.join(root, f) for f in files]
+
     def checkKey(self, credentials):
         """
-        Retrieve the keys of the user specified by the credentials, and check
-        if one matches the blob in the credentials.
+        Retrieve files containing authorized keys and check against user
+        credentials.
         """
-        sshDir = os.path.expanduser(
-            os.path.join("~", credentials.username, ".ssh"))
-        if sshDir.startswith('~'): # didn't expand
-            return False
         uid, gid = os.geteuid(), os.getegid()
         ouid, ogid = pwd.getpwnam(credentials.username)[2:4]
-        for name in ['authorized_keys2', 'authorized_keys']:
-            filename = os.path.join(sshDir, name)
+        for filename in self.getAuthorizedKeysFiles(credentials):
             if not os.path.exists(filename):
                 continue
             try:
diff --git twisted/conch/test/test_checkers.py twisted/conch/test/test_checkers.py
index 945a063..4052b30 100644
--- twisted/conch/test/test_checkers.py
+++ twisted/conch/test/test_checkers.py
@@ -18,6 +18,7 @@ from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse
 from twisted.cred.credentials import UsernamePassword, IUsernamePassword, \
     SSHPrivateKey, ISSHPrivateKey
 from twisted.cred.error import UnhandledCredentials, UnauthorizedLogin
+from twisted.python.fakepwd import UserDatabase
 from twisted.test.test_process import MockOS
 
 try:
@@ -44,17 +45,21 @@ class SSHPublicKeyDatabaseTestCase(TestCase):
 
     def setUp(self):
         self.checker = SSHPublicKeyDatabase()
-        self.sshDir = FilePath(self.mktemp())
-        self.sshDir.makedirs()
-
         self.key1 = base64.encodestring("foobar")
         self.key2 = base64.encodestring("eggspam")
         self.content = "t1 %s foo\nt2 %s egg\n" % (self.key1, self.key2)
 
         self.mockos = MockOS()
-        self.mockos.path = self.sshDir.path
-        self.patch(os.path, "expanduser", self.mockos.expanduser)
-        self.patch(pwd, "getpwnam", self.mockos.getpwnam)
+        self.mockos.path = FilePath(self.mktemp())
+        self.mockos.path.makedirs()
+        self.sshDir = self.mockos.path.child('.ssh')
+        self.sshDir.makedirs()
+
+        userdb = UserDatabase()
+        userdb.addUser('user', 'password', 1, 2, 'first last',
+                self.mockos.path.path, '/bin/shell')
+
+        self.patch(pwd, "getpwnam", userdb.getpwnam)
         self.patch(os, "seteuid", self.mockos.seteuid)
         self.patch(os, "setegid", self.mockos.setegid)
 
