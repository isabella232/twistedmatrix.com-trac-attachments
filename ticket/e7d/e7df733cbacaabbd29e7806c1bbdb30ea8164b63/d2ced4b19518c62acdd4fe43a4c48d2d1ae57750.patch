# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: esteve@fluidinfo.com-20090831175331-f1l7cossz2hd0zz0
# target_branch: ../trunk/
# testament_sha1: eb03d0a4355f7c35562be7a51ee6575b5458dbdb
# timestamp: 2009-08-31 20:00:21 +0200
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:27242
# 
# Begin patch
=== modified file 'twisted/conch/checkers.py'
--- twisted/conch/checkers.py	2009-03-28 15:13:23 +0000
+++ twisted/conch/checkers.py	2009-08-27 16:01:02 +0000
@@ -132,8 +132,9 @@
         Retrieve the keys of the user specified by the credentials, and check
         if one matches the blob in the credentials.
         """
-        sshDir = os.path.expanduser(
-            os.path.join("~", credentials.username, ".ssh"))
+        sshDir = os.path.join(
+            os.path.expanduser("~" + credentials.username), ".ssh")
+
         if sshDir.startswith('~'): # didn't expand
             return False
         uid, gid = os.geteuid(), os.getegid()

=== modified file 'twisted/conch/test/test_checkers.py'
--- twisted/conch/test/test_checkers.py	2009-07-02 11:42:42 +0000
+++ twisted/conch/test/test_checkers.py	2009-08-31 17:53:31 +0000
@@ -37,6 +37,9 @@
     Tests for L{SSHPublicKeyDatabase}.
     """
 
+    mockuser = "user"
+    mockhomedir = "home"
+
     if pwd is None:
         skip = "Cannot run without pwd module"
     elif SSHPublicKeyDatabase is None:
@@ -44,15 +47,20 @@
 
     def setUp(self):
         self.checker = SSHPublicKeyDatabase()
-        self.sshDir = FilePath(self.mktemp())
+
+        self.mockos = MockOS()
+        self.mockuserhome = FilePath(self.mktemp()).child(
+                    self.mockhomedir).child(self.mockuser)
+        self.sshDir = self.mockuserhome.child(".ssh")
         self.sshDir.makedirs()
 
         self.key1 = base64.encodestring("foobar")
         self.key2 = base64.encodestring("eggspam")
         self.content = "t1 %s foo\nt2 %s egg\n" % (self.key1, self.key2)
 
-        self.mockos = MockOS()
-        self.mockos.path = self.sshDir.path
+        self.mockos.path = self.sshDir.parent().parent().parent().path
+        self.mockos.users[self.mockuser] = self.mockuserhome.path
+
         self.patch(os.path, "expanduser", self.mockos.expanduser)
         self.patch(pwd, "getpwnam", self.mockos.getpwnam)
         self.patch(os, "seteuid", self.mockos.seteuid)
@@ -61,7 +69,7 @@
 
     def _testCheckKey(self, filename):
         self.sshDir.child(filename).setContent(self.content)
-        user = UsernamePassword("user", "password")
+        user = UsernamePassword(self.mockuser, "password")
         user.blob = "foobar"
         self.assertTrue(self.checker.checkKey(user))
         user.blob = "eggspam"
@@ -106,7 +114,7 @@
             keyFile.chmod(0777)
             return savedSeteuid(euid)
         self.patch(os, "seteuid", seteuid)
-        user = UsernamePassword("user", "password")
+        user = UsernamePassword(self.mockuser, "password")
         user.blob = "foobar"
         self.assertTrue(self.checker.checkKey(user))
         self.assertEquals(self.mockos.seteuidCalls, [0, 1, 0, os.getuid()])

=== modified file 'twisted/test/test_process.py'
--- twisted/test/test_process.py	2009-07-13 16:14:57 +0000
+++ twisted/test/test_process.py	2009-08-31 17:53:31 +0000
@@ -1221,7 +1221,10 @@
     waitChild = None
     euid = 0
     egid = 0
+    uid = 1237
+    gid = 1235
     path = None
+    users = {}
 
     def __init__(self):
         """
@@ -1370,14 +1373,14 @@
         """
         Override C{os.getgid}. Return a dumb number.
         """
-        return 1235
+        return self.gid
 
 
     def getuid(self):
         """
         Override C{os.getuid}. Return a dumb number.
         """
-        return 1237
+        return self.uid
 
 
     def setuid(self, val):
@@ -1454,7 +1457,22 @@
         """
         Mock C{os.path.expanduser}.
         """
-        return self.path
+        if not path.startswith('~'):
+            return path
+        i = path.find('/', 1)
+        if i < 0:
+            i = len(path)
+        if i == 1:
+            userdir = self.users.get(self.user)
+        else:
+            userdir = self.users.get(path[1:i])
+        if userdir is None:
+            return path
+        userhome = os.path.join(self.path, userdir)
+        userhome = userhome.rstrip('/')
+        if not os.path.exists(userhome):
+            return path
+        return userhome + path[i:]
 
 
     def getpwnam(self, user):

# Begin bundle
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
