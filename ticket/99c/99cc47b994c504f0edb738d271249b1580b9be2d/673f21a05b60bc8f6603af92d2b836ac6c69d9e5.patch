# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: denarian@gmail.com-20140308052902-5a0moshk9mlch0uq
# target_branch: http://bazaar.launchpad.net/~twisted-\
#   dev/twisted/trunk/
# testament_sha1: 7e62e2fd3df6dd84e2671ef62bd6ca63d7f7d171
# timestamp: 2014-03-08 00:29:33 -0500
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:41790
# 
# Begin patch
=== modified file 'twisted/trial/reporter.py'
--- twisted/trial/reporter.py	2013-06-14 20:28:19 +0000
+++ twisted/trial/reporter.py	2014-03-08 05:29:02 +0000
@@ -27,6 +27,7 @@
 except ImportError:
     from twisted.python.util import OrderedDict
 from twisted.trial import itrial, util
+from twisted.trial.unittest import makeTodo
 
 try:
     from subunit import TestProtocolClient
@@ -277,10 +278,24 @@
         return self._originalReporter.addError(test, error)
 
 
-    def addExpectedFailure(self, test, failure, todo):
+    def addExpectedFailure(self, test, failure, todo=None):
         """
         See L{itrial.IReporter}.
+
+        @param test: A L{pyunit.TestCase}.
+        @param failure: A L{failure.Failure} or an exception
+        @param todo: A L{unittest.Todo} or None
+
+        L{pyunit.TestCase} calls this without a todo when 
+        @unittest.expectedFailure is used to decorate a TestCase method.
+        In this case, a generic L{unittest.Todo} and failure are constructed
+        from the exception that caused the test to fail.
         """
+        
+        if todo is None:
+            todo = makeTodo((failure,
+                'Test uses @unittest.expectedFailure decorator'))
+            failure = Failure(exc_value=failure)
         return self._originalReporter.addExpectedFailure(
             self.testAdapter(test), failure, todo)
 
@@ -301,11 +316,21 @@
         return self._originalReporter.addSkip(test, skip)
 
 
-    def addUnexpectedSuccess(self, test, todo):
+    def addUnexpectedSuccess(self, test, todo=None):
         """
         See L{itrial.IReporter}.
+
+        @param test: A L{pyunit.TestCase}.
+        @param todo: A L{unittest.Todo} or None
+
+        L{pyunit.TestCase} calls this without a todo when 
+        @unittest.expectedFailure is used to decorate a TestCase method.
+        In this case, a generic L{unittest.Todo} is constructed,
+        indicating the test has unexpectedly passed.
         """
         test = self.testAdapter(test)
+        if todo is None:
+            todo = makeTodo('Test unexpectedly passed')
         return self._originalReporter.addUnexpectedSuccess(test, todo)
 
 

=== modified file 'twisted/trial/test/test_reporter.py'
--- twisted/trial/test/test_reporter.py	2013-06-14 20:28:19 +0000
+++ twisted/trial/test/test_reporter.py	2014-03-08 05:29:02 +0000
@@ -716,6 +716,62 @@
         output = '\n'.join(self.stream.getvalue().splitlines()[3:]).strip()
         self.assertTrue(str(e) in output)
 
+    def test_exceptionTodoFromPyunit(self):
+        """
+        The @unittest.expectedFailure decorator causes
+        result.addExpectedFailure to be called from case.py
+        without a todo, which should not break trial.
+        The @unittest.expectedFailure decorator should
+        not break trial.
+        
+        An AdaptedReporter is used in this test, as it wraps the original
+        reporter in practice.
+        """
+        def test_adapt(test): return test
+        temp_report = reporter._AdaptedReporter(self.result, test_adapt)
+
+        
+        try:
+            raise AssertionError("Raised AssertionError for testing")
+        except AssertionError as e:
+            addExpectedFailure = getattr(temp_report, 'addExpectedFailure', None)
+            if addExpectedFailure is not None:
+                addExpectedFailure(self, e)
+            else:
+                raise AttributeError('Result has no addExpectedFailure attribute')
+        self.result.done()
+        output = '\n'.join(self.stream.getvalue().splitlines()[3:]).strip()
+        self.assertTrue(str(e) in output)
+
+    def test_unexpectedSuccessFromPyunit(self):
+        """
+        The @unittest.expectedFailure decorator causes
+        result.addExpectedFailure to be called from case.py
+        without a todo, which should not break trial.
+
+        A test which is decorated but succeeds will have an unexpected
+        success reported to its result. A test run is still successful even
+        when this happens.
+        
+        An AdaptedReporter is used in this test, as it wraps the original
+        reporter in practice.
+        """
+        def test_adapt(test): return test
+        temp_report = reporter._AdaptedReporter(self.result, test_adapt)
+
+        
+        try:
+            raise AssertionError("Raised AssertionError for testing")
+        except AssertionError as e:
+            addUnexpectedSuccess = getattr(temp_report, 'addUnexpectedSuccess', None)
+            if addUnexpectedSuccess is not None:
+                addUnexpectedSuccess(self)
+            else:
+                raise AttributeError('Result has no addExpectedFailure attribute')
+        self.assertEqual(True, temp_report.wasSuccessful())
+        self.assertEqual(self._getUnexpectedSuccesses(self.result), 1)
+
+
 
 
 class UncleanWarningTodoTest(TodoTest):

# Begin bundle
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
