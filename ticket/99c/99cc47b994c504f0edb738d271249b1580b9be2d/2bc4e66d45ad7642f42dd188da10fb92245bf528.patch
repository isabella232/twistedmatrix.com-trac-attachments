# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: denarian@gmail.com-20140319183717-6ebzqg0vk5h9es2v
# target_branch: http://bazaar.launchpad.net/~twisted-\
#   dev/twisted/trunk/
# testament_sha1: 9c77a5e00d1915ee7e912c1e2e51422bce9fbd26
# timestamp: 2014-03-19 14:37:49 -0400
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:41790
# 
# Begin patch
=== modified file 'twisted/trial/reporter.py'
--- twisted/trial/reporter.py	2013-06-14 20:28:19 +0000
+++ twisted/trial/reporter.py	2014-03-18 21:34:00 +0000
@@ -27,6 +27,7 @@
 except ImportError:
     from twisted.python.util import OrderedDict
 from twisted.trial import itrial, util
+from twisted.trial.unittest import makeTodo
 
 try:
     from subunit import TestProtocolClient
@@ -277,10 +278,24 @@
         return self._originalReporter.addError(test, error)
 
 
-    def addExpectedFailure(self, test, failure, todo):
+    def addExpectedFailure(self, test, failure, todo=None):
         """
         See L{itrial.IReporter}.
+
+        @type test: A L{pyunit.TestCase}.
+        @type failure: A L{failure.Failure} or L{exceptions.AssertionError}
+        @type todo: A L{unittest.Todo} or None
+
+        When C{todo} is C{None} a generic C{unittest.Todo} is built.
+
+        L{pyunit.TestCase}'s C{run()} calls this with 3 positional arguments
+        (without C{todo}).
         """
+        
+        if todo is None:
+            todo = makeTodo((failure, 'Test is expected to fail'))
+            failure = Failure(exc_value=failure)
+
         return self._originalReporter.addExpectedFailure(
             self.testAdapter(test), failure, todo)
 
@@ -301,11 +316,22 @@
         return self._originalReporter.addSkip(test, skip)
 
 
-    def addUnexpectedSuccess(self, test, todo):
+    def addUnexpectedSuccess(self, test, todo=None):
         """
         See L{itrial.IReporter}.
+
+        @type test: A L{pyunit.TestCase}.
+        @type todo: A L{unittest.Todo} or None
+
+        When C{todo} is C{None} a generic C{unittest.Todo} is built.
+
+        L{pyunit.TestCase}'s C{run()} calls this with 2 positional arguments
+        (without C{todo}).
         """
+
         test = self.testAdapter(test)
+        if todo is None:
+            todo = makeTodo('Test unexpectedly passed')
         return self._originalReporter.addUnexpectedSuccess(test, todo)
 
 

=== modified file 'twisted/trial/test/test_reporter.py'
--- twisted/trial/test/test_reporter.py	2013-06-14 20:28:19 +0000
+++ twisted/trial/test/test_reporter.py	2014-03-19 18:37:17 +0000
@@ -632,6 +632,13 @@
         Get the number of unexpected successes that happened to a reporter.
         """
         return len(result.unexpectedSuccesses)
+    
+
+    def _getExpectedFailures(self, result):
+        """
+        Get the number of expected failures that happened to a reporter.
+        """
+        return len(result.expectedFailures)
 
 
     def test_accumulation(self):
@@ -717,6 +724,37 @@
         self.assertTrue(str(e) in output)
 
 
+    def test_expectedFailureWithoutTodo(self):
+        """
+        Handles failures when called without a L{unittest.Todo}
+        """
+        def test_adapt(test): return test
+        reporter_instance = reporter._AdaptedReporter(self.result, test_adapt)
+        addExpectedFailure = getattr(reporter_instance,
+            'addExpectedFailure', None)
+
+        addExpectedFailure(self.test, AssertionError)
+
+        self.assertEqual(True, reporter_instance.wasSuccessful())
+        self.assertEqual(self._getExpectedFailures(self.result), 1)
+
+    def test_unexpectedSuccessWithoutTodo(self):
+        """
+        Handles failures when called without a L{unittest.Todo}
+        """
+        def test_adapt(test): return test
+        reporter_instance = reporter._AdaptedReporter(self.result, test_adapt)
+        addUnexpectedSuccess = getattr(reporter_instance,
+            'addUnexpectedSuccess', None)
+
+        addUnexpectedSuccess(self.test)
+
+        self.assertEqual(True, reporter_instance.wasSuccessful())
+        self.assertEqual(self._getUnexpectedSuccesses(self.result), 1)
+
+
+
+
 
 class UncleanWarningTodoTest(TodoTest):
     """
@@ -742,7 +780,13 @@
         inside of an unclean warnings reporter wrapper.
         """
         return len(result._originalReporter.unexpectedSuccesses)
-
+    
+    def _getExpectedFailures(self, result):
+        """
+        Get the number of expected failures that happened to a reporter
+        inside of an unclean warnings reporter wrapper.
+        """
+        return len(result._originalReporter.expectedFailures)
 
 
 class MockColorizer:

# Begin bundle
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
mfLChh/xdyRThQkDTx8EMA==
