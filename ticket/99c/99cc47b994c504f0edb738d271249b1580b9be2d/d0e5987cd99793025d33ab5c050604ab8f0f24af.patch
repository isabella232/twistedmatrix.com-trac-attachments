# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: denarian@gmail.com-20140318221144-ilpivtk876p7maal
# target_branch: http://bazaar.launchpad.net/~twisted-\
#   dev/twisted/trunk/
# testament_sha1: 11ed392203840bceb8b5f80c25f107c76f5e8997
# timestamp: 2014-03-18 18:12:09 -0400
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:41790
# 
# Begin patch
=== modified file 'twisted/trial/reporter.py'
--- twisted/trial/reporter.py	2013-06-14 20:28:19 +0000
+++ twisted/trial/reporter.py	2014-03-18 21:34:00 +0000
@@ -27,6 +27,7 @@
 except ImportError:
     from twisted.python.util import OrderedDict
 from twisted.trial import itrial, util
+from twisted.trial.unittest import makeTodo
 
 try:
     from subunit import TestProtocolClient
@@ -277,10 +278,24 @@
         return self._originalReporter.addError(test, error)
 
 
-    def addExpectedFailure(self, test, failure, todo):
+    def addExpectedFailure(self, test, failure, todo=None):
         """
         See L{itrial.IReporter}.
+
+        @type test: A L{pyunit.TestCase}.
+        @type failure: A L{failure.Failure} or L{exceptions.AssertionError}
+        @type todo: A L{unittest.Todo} or None
+
+        When C{todo} is C{None} a generic C{unittest.Todo} is built.
+
+        L{pyunit.TestCase}'s C{run()} calls this with 3 positional arguments
+        (without C{todo}).
         """
+        
+        if todo is None:
+            todo = makeTodo((failure, 'Test is expected to fail'))
+            failure = Failure(exc_value=failure)
+
         return self._originalReporter.addExpectedFailure(
             self.testAdapter(test), failure, todo)
 
@@ -301,11 +316,22 @@
         return self._originalReporter.addSkip(test, skip)
 
 
-    def addUnexpectedSuccess(self, test, todo):
+    def addUnexpectedSuccess(self, test, todo=None):
         """
         See L{itrial.IReporter}.
+
+        @type test: A L{pyunit.TestCase}.
+        @type todo: A L{unittest.Todo} or None
+
+        When C{todo} is C{None} a generic C{unittest.Todo} is built.
+
+        L{pyunit.TestCase}'s C{run()} calls this with 2 positional arguments
+        (without C{todo}).
         """
+
         test = self.testAdapter(test)
+        if todo is None:
+            todo = makeTodo('Test unexpectedly passed')
         return self._originalReporter.addUnexpectedSuccess(test, todo)
 
 

=== modified file 'twisted/trial/test/test_reporter.py'
--- twisted/trial/test/test_reporter.py	2013-06-14 20:28:19 +0000
+++ twisted/trial/test/test_reporter.py	2014-03-18 22:11:44 +0000
@@ -632,6 +632,13 @@
         Get the number of unexpected successes that happened to a reporter.
         """
         return len(result.unexpectedSuccesses)
+    
+
+    def _getExpectedFailures(self, result):
+        """
+        Get the number of expected failures that happened to a reporter.
+        """
+        return len(result.expectedFailures)
 
 
     def test_accumulation(self):
@@ -717,6 +724,39 @@
         self.assertTrue(str(e) in output)
 
 
+    def test_expectedFailureWithoutTodo(self):
+        """
+        Tests whether C{addExpectedFailure} produces correct test output when
+        called without a L{unittest.Todo}
+        """
+        def test_adapt(test): return test
+        reporter_instance = reporter._AdaptedReporter(self.result, test_adapt)
+        addExpectedFailure = getattr(reporter_instance,
+            'addExpectedFailure', None)
+
+        addExpectedFailure(test=self.test, failure=AssertionError, todo=None)
+
+        self.assertEqual(True, reporter_instance.wasSuccessful())
+        self.assertEqual(self._getExpectedFailures(self.result), 1)
+
+    def test_unexpectedSuccessWithoutTodo(self):
+        """
+        Tests whether C{addUnexpectedSuccess} produces correct test output when
+        called without a L{unittest.Todo}
+        """
+        def test_adapt(test): return test
+        reporter_instance = reporter._AdaptedReporter(self.result, test_adapt)
+        addUnexpectedSuccess = getattr(reporter_instance,
+            'addUnexpectedSuccess', None)
+
+        addUnexpectedSuccess(test=self.test, todo=None)
+
+        self.assertEqual(True, reporter_instance.wasSuccessful())
+        self.assertEqual(self._getUnexpectedSuccesses(self.result), 1)
+
+
+
+
 
 class UncleanWarningTodoTest(TodoTest):
     """
@@ -742,7 +782,13 @@
         inside of an unclean warnings reporter wrapper.
         """
         return len(result._originalReporter.unexpectedSuccesses)
-
+    
+    def _getExpectedFailures(self, result):
+        """
+        Get the number of expected failures that happened to a reporter
+        inside of an unclean warnings reporter wrapper.
+        """
+        return len(result._originalReporter.expectedFailures)
 
 
 class MockColorizer:

# Begin bundle
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
