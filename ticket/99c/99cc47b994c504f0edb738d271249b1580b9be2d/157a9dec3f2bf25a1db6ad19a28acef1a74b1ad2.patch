# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: denarian@gmail.com-20140319185546-7pku60jzhpeguab7
# target_branch: http://bazaar.launchpad.net/~twisted-\
#   dev/twisted/trunk/
# testament_sha1: bd9a0febd8a4a737a4abd263fc9af5e93d44a929
# timestamp: 2014-03-19 14:56:03 -0400
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:41790
# 
# Begin patch
=== modified file 'twisted/trial/reporter.py'
--- twisted/trial/reporter.py	2013-06-14 20:28:19 +0000
+++ twisted/trial/reporter.py	2014-03-18 21:34:00 +0000
@@ -27,6 +27,7 @@
 except ImportError:
     from twisted.python.util import OrderedDict
 from twisted.trial import itrial, util
+from twisted.trial.unittest import makeTodo
 
 try:
     from subunit import TestProtocolClient
@@ -277,10 +278,24 @@
         return self._originalReporter.addError(test, error)
 
 
-    def addExpectedFailure(self, test, failure, todo):
+    def addExpectedFailure(self, test, failure, todo=None):
         """
         See L{itrial.IReporter}.
+
+        @type test: A L{pyunit.TestCase}.
+        @type failure: A L{failure.Failure} or L{exceptions.AssertionError}
+        @type todo: A L{unittest.Todo} or None
+
+        When C{todo} is C{None} a generic C{unittest.Todo} is built.
+
+        L{pyunit.TestCase}'s C{run()} calls this with 3 positional arguments
+        (without C{todo}).
         """
+        
+        if todo is None:
+            todo = makeTodo((failure, 'Test is expected to fail'))
+            failure = Failure(exc_value=failure)
+
         return self._originalReporter.addExpectedFailure(
             self.testAdapter(test), failure, todo)
 
@@ -301,11 +316,22 @@
         return self._originalReporter.addSkip(test, skip)
 
 
-    def addUnexpectedSuccess(self, test, todo):
+    def addUnexpectedSuccess(self, test, todo=None):
         """
         See L{itrial.IReporter}.
+
+        @type test: A L{pyunit.TestCase}.
+        @type todo: A L{unittest.Todo} or None
+
+        When C{todo} is C{None} a generic C{unittest.Todo} is built.
+
+        L{pyunit.TestCase}'s C{run()} calls this with 2 positional arguments
+        (without C{todo}).
         """
+
         test = self.testAdapter(test)
+        if todo is None:
+            todo = makeTodo('Test unexpectedly passed')
         return self._originalReporter.addUnexpectedSuccess(test, todo)
 
 

=== modified file 'twisted/trial/test/test_reporter.py'
--- twisted/trial/test/test_reporter.py	2013-06-14 20:28:19 +0000
+++ twisted/trial/test/test_reporter.py	2014-03-19 18:55:46 +0000
@@ -632,6 +632,13 @@
         Get the number of unexpected successes that happened to a reporter.
         """
         return len(result.unexpectedSuccesses)
+    
+
+    def _getExpectedFailures(self, result):
+        """
+        Get the number of expected failures that happened to a reporter.
+        """
+        return len(result.expectedFailures)
 
 
     def test_accumulation(self):
@@ -717,6 +724,33 @@
         self.assertTrue(str(e) in output)
 
 
+    def test_expectedFailureWithoutTodo(self):
+        """
+        Handles failures when called without a L{unittest.Todo}
+        """
+        def test_adapt(test): return test
+        reporter_instance = reporter._AdaptedReporter(self.result, test_adapt)
+
+        reporter_instance.addExpectedFailure(self.test, AssertionError)
+
+        self.assertEqual(True, reporter_instance.wasSuccessful())
+        self.assertEqual(self._getExpectedFailures(self.result), 1)
+
+    def test_unexpectedSuccessWithoutTodo(self):
+        """
+        Handles failures when called without a L{unittest.Todo}
+        """
+        def test_adapt(test): return test
+        reporter_instance = reporter._AdaptedReporter(self.result, test_adapt)
+
+        reporter_instance.addUnexpectedSuccess(self.test)
+
+        self.assertEqual(True, reporter_instance.wasSuccessful())
+        self.assertEqual(self._getUnexpectedSuccesses(self.result), 1)
+
+
+
+
 
 class UncleanWarningTodoTest(TodoTest):
     """
@@ -742,7 +776,13 @@
         inside of an unclean warnings reporter wrapper.
         """
         return len(result._originalReporter.unexpectedSuccesses)
-
+    
+    def _getExpectedFailures(self, result):
+        """
+        Get the number of expected failures that happened to a reporter
+        inside of an unclean warnings reporter wrapper.
+        """
+        return len(result._originalReporter.expectedFailures)
 
 
 class MockColorizer:

# Begin bundle
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
