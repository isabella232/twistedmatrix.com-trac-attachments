diff --git twisted/names/dns.py twisted/names/dns.py
index e47fef8..3a25bb0 100644
--- twisted/names/dns.py
+++ twisted/names/dns.py
@@ -949,14 +949,14 @@ class SimpleRecord(tputil.FancyStrMixin, tputil.FancyEqMixin):
         return hash(self.name)
 
 
-# Kinds of RRs - oh my!
+
 @implementer(IEncodable, IRecord)
-class Record_A(tputil.FancyEqMixin):
+class AddressRecord(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
-    An IPv4 host address.
+    A Resource Record for either A or AAAA records
 
     @type address: C{str}
-    @ivar address: The packed network-order representation of the IPv4 address
+    @ivar address: The packed network-order representation of the IP address
         associated with this record.
 
     @type ttl: C{int}
@@ -964,31 +964,38 @@ class Record_A(tputil.FancyEqMixin):
         cached.
     """
     compareAttributes = ('address', 'ttl')
+    showAttributes = (('_address', 'address', '%s'), 'ttl')
 
-    TYPE = A
     address = None
 
-    def __init__(self, address='0.0.0.0', ttl=None):
-        address = socket.inet_aton(address)
-        self.address = address
-        self.ttl = str2time(ttl)
-
-
     def encode(self, strio, compDict = None):
         strio.write(self.address)
 
 
     def decode(self, strio, length = None):
-        self.address = readPrecisely(strio, 4)
+        self.address = readPrecisely(strio, self.LEN)
 
 
     def __hash__(self):
         return hash(self.address)
 
 
-    def __str__(self):
-        return '<A address=%s ttl=%s>' % (self.dottedQuad(), self.ttl)
-    __repr__ = __str__
+
+# Kinds of RRs - oh my!
+class Record_A(AddressRecord):
+    """
+    An IPv4 host address.
+    """
+    TYPE = A
+    fancybasename = 'A'
+    LEN = 4
+
+    _address = property(lambda self: self.dottedQuad())
+
+    def __init__(self, address='0.0.0.0', ttl=None):
+        address = socket.inet_aton(address)
+        self.address = address
+        self.ttl = str2time(ttl)
 
 
     def dottedQuad(self):
@@ -1546,26 +1553,14 @@ class Record_AFSDB(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
 
 
-@implementer(IEncodable, IRecord)
-class Record_AAAA(tputil.FancyEqMixin, tputil.FancyStrMixin):
+class Record_AAAA(AddressRecord):
     """
     An IPv6 host address.
-
-    @type address: C{str}
-    @ivar address: The packed network-order representation of the IPv6 address
-        associated with this record.
-
-    @type ttl: C{int}
-    @ivar ttl: The maximum number of seconds which this record should be
-        cached.
-
-    @see: U{http://www.faqs.org/rfcs/rfc1886.html}
     """
     TYPE = AAAA
+    LEN = 16
 
     fancybasename = 'AAAA'
-    showAttributes = (('_address', 'address', '%s'), 'ttl')
-    compareAttributes = ('address', 'ttl')
 
     _address = property(lambda self: socket.inet_ntop(AF_INET6, self.address))
 
@@ -1574,18 +1569,6 @@ class Record_AAAA(tputil.FancyEqMixin, tputil.FancyStrMixin):
         self.ttl = str2time(ttl)
 
 
-    def encode(self, strio, compDict = None):
-        strio.write(self.address)
-
-
-    def decode(self, strio, length = None):
-        self.address = readPrecisely(strio, 16)
-
-
-    def __hash__(self):
-        return hash(self.address)
-
-
 
 @implementer(IEncodable, IRecord)
 class Record_SRV(tputil.FancyEqMixin, tputil.FancyStrMixin):
