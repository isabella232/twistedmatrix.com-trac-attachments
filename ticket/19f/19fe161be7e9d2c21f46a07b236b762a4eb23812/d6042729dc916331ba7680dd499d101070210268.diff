Index: twisted/python/failure.py
===================================================================
--- twisted/python/failure.py	(revision 37055)
+++ twisted/python/failure.py	(working copy)
@@ -18,10 +18,11 @@
 import linecache
 import inspect
 import opcode
+import warnings
 from inspect import getmro
 
 from twisted.python.compat import _PY3, NativeStringIO as StringIO
-from twisted.python import _reflectpy3 as reflect
+from twisted.python import _reflectpy3 as reflect, deprecate, versions
 
 count = 0
 traceupLength = 4
@@ -307,12 +308,14 @@
                 globalz,
                 ))
             tb = tb.tb_next
-        if inspect.isclass(self.type) and issubclass(self.type, Exception):
-            parentCs = getmro(self.type)
-            self.parents = list(map(reflect.qual, parentCs))
-        else:
-            self.parents = [self.type]
 
+    @property
+    def parents(self):
+        msg = deprecate._getDeprecationWarningString(
+            "twisted.python.failure.Failure.parents", versions.Version('Twisted', 12, 3, 0))
+        warnings.warn(msg, category=DeprecationWarning, stacklevel=1)
+        return list(map(reflect.qual, getmro(self.type)))
+
     def trap(self, *errorTypes):
         """Trap this failure if its type is in a predetermined list.
 
@@ -352,11 +355,15 @@
         @returns: the matching L{Exception} type, or None if no match.
         """
         for error in errorTypes:
-            err = error
             if inspect.isclass(error) and issubclass(error, Exception):
-                err = reflect.qual(error)
-            if err in self.parents:
-                return error
+                if isinstance(self.value, error):
+                    return error
+            else:
+                msg = deprecate._getDeprecationWarningString(
+                    "String arguments to twisted.python.failure.Failure.check", versions.Version('Twisted', 12, 3, 0))
+                warnings.warn(msg, category=DeprecationWarning, stacklevel=1)
+                if error in map(reflect.qual, getmro(self.type)):
+                    return error
         return None
 
 
