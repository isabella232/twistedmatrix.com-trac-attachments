Index: twisted/python/test/test_zipstream.py
===================================================================
--- twisted/python/test/test_zipstream.py	(revision 31246)
+++ twisted/python/test/test_zipstream.py	(working copy)
@@ -301,8 +301,28 @@
         for child in self.unzipdir.children():
             num = int(child.basename())
             self.assertEquals(child.open().read(), contents[num])
+        self.flushWarnings(
+            offendingFunctions = [ZipstreamTest.test_unzipIter])
 
 
+    def test_unzipIterDeprecated(self):
+        """
+        Use of C{twisted.python.zipstream.unzipIter} will emit a
+        deprecated warning.
+        """
+        zpfilename = self.makeZipFile('foo')
+
+        self.assertEqual(len(self.flushWarnings()), 0)
+
+        for f in zipstream.unzipIter(zpfilename, self.unzipdir.path):
+            pass
+
+        warning_list = self.flushWarnings()
+        self.assertEqual(len(warning_list), 1)
+        self.assertIn('zipstream.unzipIter', str(warning_list))
+        self.assertIn('deprecated', str(warning_list))
+
+
     def test_unzipIterChunky(self):
         """
         L{twisted.python.zipstream.unzipIterChunky} returns an iterator which
@@ -353,8 +373,26 @@
             set(map(str, range(numfiles))))
         for i in range(numfiles):
             self.assertEqual(self.unzipdir.child(str(i)).getContent(), str(i))
+        self.flushWarnings(
+            offendingFunctions = [ZipstreamTest.test_unzip])
 
 
+    def test_unzipDeprecated(self):
+        """
+        Use of C{twisted.python.zipstream.unzip} will emit a deprecated warning.
+        """
+        zpfilename = self.makeZipFile('foo')
+
+        self.assertEqual(len(self.flushWarnings()), 0)
+
+        zipstream.unzip(zpfilename, self.unzipdir.path)
+
+        warning_list = self.flushWarnings()
+        self.assertEqual(len(warning_list), 1)
+        self.assertIn('zipstream.unzip', str(warning_list))
+        self.assertIn('deprecated', str(warning_list))
+
+
     def test_unzipDirectory(self):
         """
         The path to which a file is extracted by L{zipstream.unzip} is
@@ -370,6 +408,8 @@
         for i in range(numfiles):
             self.assertEqual(
                 self.unzipdir.child('foo').child(str(i)).getContent(), str(i))
+        self.flushWarnings(
+            offendingFunctions = [ZipstreamTest.test_unzipDirectory])
 
 
     def test_overwrite(self):
@@ -395,6 +435,8 @@
                                      overwrite=True)
         uziter.next()
         self.assertEquals(testfile.open().read(), 'OVERWRITTEN')
+        self.flushWarnings(
+            offendingFunctions = [ZipstreamTest.test_overwrite])
 
 
     # XXX these tests are kind of gross and old, but I think unzipIterChunky is
Index: twisted/python/zipstream.py
===================================================================
--- twisted/python/zipstream.py	(revision 31246)
+++ twisted/python/zipstream.py	(working copy)
@@ -249,18 +249,28 @@
     still get an error if you try to create a directory over a file
     with the same name or vice-versa.
     """
-    for i in unzipIter(filename, directory, overwrite):
+    warnings.warn("zipstream.unzip is deprecated since Twisted 11.0.0 for " +
+                  "security reasons.  Use Python's zipfile instead.",
+                  category=DeprecationWarning, stacklevel=2)
+
+    for i in unzipIter(filename, directory, overwrite, suppressWarning = True):
         pass
 
 DIR_BIT = 16
 
-def unzipIter(filename, directory='.', overwrite=0):
+def unzipIter(filename, directory='.', overwrite=0, suppressWarning=False):
     """
     Return a generator for the zipfile.  This implementation will yield
     after every file.
 
     The value it yields is the number of files left to unzip.
     """
+    if not suppressWarning:
+        warnings.warn("zipstream.unzipIter is deprecated since Twisted " +
+                      "11.0.0 for security reasons. Use Python's " +
+                      "zipfile instead.",
+                      category=DeprecationWarning, stacklevel=2)
+
     zf = zipfile.ZipFile(filename, 'r')
     names = zf.namelist()
     if not os.path.exists(directory):
Index: twisted/topfiles/3666.removal
===================================================================
--- twisted/topfiles/3666.removal	(revision 0)
+++ twisted/topfiles/3666.removal	(revision 0)
@@ -0,0 +1 @@
+twisted.python.zipstream.{unzip,unzipIter} are now deprecated.
