diff --git twisted/python/_release.py twisted/python/_release.py
index 8d80d45..8d11904 100644
--- twisted/python/_release.py
+++ twisted/python/_release.py
@@ -525,7 +525,7 @@ class NewsBuilder(object):
         @param header: The top-level header to use when writing the news.
         @type header: L{str}
 
-        @raise NotWorkingDirectory: If the C{path} is not an SVN checkout.
+        @raise NotWorkingDirectory: If the C{path} is not an Git repository.
         """
         changes = []
         for part in (self._FEATURE, self._BUGFIX, self._DOC, self._REMOVAL):
@@ -557,8 +557,8 @@ class NewsBuilder(object):
     def _deleteFragments(self, path):
         """
         Delete the change information, to clean up the repository  once the
-        NEWS files have been built. It requires C{path} to be in a SVN
-        directory.
+        NEWS files have been built. It requires C{path} to be in a Git
+        repository.
 
         @param path: A directory (probably a I{topfiles} directory) containing
             change information in the form of <ticket>.<change type> files.
@@ -568,7 +568,7 @@ class NewsBuilder(object):
         for child in path.children():
             base, ext = os.path.splitext(child.basename())
             if ext in ticketTypes:
-                runCommand(["svn", "rm", child.path])
+                runCommand(["git", "-C", child.dirname(), "rm", child.path])
 
 
     def _getNewsName(self, project):
@@ -626,11 +626,9 @@ class NewsBuilder(object):
             beneath which to find Twisted projects for which to generate
             news (see L{findTwistedProjects}).
         """
-        try:
-            runCommand(["svn", "info", baseDirectory.path])
-        except CommandFailed:
+        if not baseDirectory.child(".git").exists():
             raise NotWorkingDirectory(
-                "%s does not appear to be an SVN working directory."
+                "%s does not appear to be an Git working directory."
                 % (baseDirectory.path,))
 
         today = self._today()
@@ -988,14 +986,14 @@ class DistributionBuilder(object):
 
 class UncleanWorkingDirectory(Exception):
     """
-    Raised when the working directory of an SVN checkout is unclean.
+    Raised when the working directory of a Git repository is unclean.
     """
 
 
 
 class NotWorkingDirectory(Exception):
     """
-    Raised when a directory does not appear to be an SVN working directory.
+    Raised when a directory does not appear to be a Git repository directory.
     """
 
 
@@ -1009,7 +1007,7 @@ def buildAllTarballs(checkout, destination, templatePath=None):
     NEWS files created.
 
     @type checkout: L{FilePath}
-    @param checkout: The SVN working copy from which a pristine source tree
+    @param checkout: The Git repository from which a pristine source tree
         will be exported.
     @type destination: L{FilePath}
     @param destination: The directory in which tarballs will be placed.
@@ -1019,20 +1017,22 @@ def buildAllTarballs(checkout, destination, templatePath=None):
 
     @raise UncleanWorkingDirectory: If there are modifications to the
         working directory of C{checkout}.
-    @raise NotWorkingDirectory: If the C{checkout} path is not an SVN checkout.
+    @raise NotWorkingDirectory: If the C{checkout} path is not a Git
+        repository.
     """
-    if not checkout.child(".svn").exists():
+    if not checkout.child(".git").exists():
         raise NotWorkingDirectory(
-            "%s does not appear to be an SVN working directory."
+            "%s does not appear to be an Git working directory."
             % (checkout.path,))
-    if runCommand(["svn", "st", checkout.path]).strip():
+    if runCommand(["git", "-C", checkout.path, "status", "--short"]).strip():
         raise UncleanWorkingDirectory(
-            "There are local modifications to the SVN checkout in %s."
+            "There are local modifications to the Git repository in %s."
             % (checkout.path,))
 
     workPath = FilePath(mkdtemp())
     export = workPath.child("export")
-    runCommand(["svn", "export", checkout.path, export.path])
+    runCommand(["git", "-C", checkout.path, "checkout-index", "--all",
+                "--force", "--prefix", export.path + "/"])
     twistedPath = export.child("twisted")
     version = Project(twistedPath).getVersion()
     versionString = version.base()
diff --git twisted/python/test/test_release.py twisted/python/test/test_release.py
index 9a8dcf3..b548ebf 100644
--- twisted/python/test/test_release.py
+++ twisted/python/test/test_release.py
@@ -62,10 +62,10 @@ else:
 
 
 
-if which("svn") and which("svnadmin"):
-    svnSkip = skip
+if which("git"):
+    gitSkip = skip
 else:
-    svnSkip = "svn or svnadmin is not present."
+    gitSkip = "git is not present."
 
 
 
@@ -763,7 +763,7 @@ class NewsBuilderTests(TestCase, StructureAssertingMixin):
     """
     Tests for L{NewsBuilder}.
     """
-    skip = svnSkip
+    skip = gitSkip
 
     def setUp(self):
         """
@@ -796,22 +796,17 @@ class NewsBuilderTests(TestCase, StructureAssertingMixin):
                 '41.doc': 'writing Foo servers'})
 
 
-    def svnCommit(self, project=None):
+    def gitCommit(self, project=None):
         """
-        Make the C{project} directory a valid subversion directory with all
+        Make the C{project} directory a valid Git repository with all
         files committed.
         """
         if project is None:
             project = self.project
-        repositoryPath = self.mktemp()
-        repository = FilePath(repositoryPath)
-
-        runCommand(["svnadmin", "create", repository.path])
-        runCommand(["svn", "checkout", "file://" + repository.path,
-                    project.path])
 
-        runCommand(["svn", "add"] + glob.glob(project.path + "/*"))
-        runCommand(["svn", "commit", project.path, "-m", "yay"])
+        runCommand(["git", "init", project.path])
+        runCommand(["git", "-C", project.path, "add"] + glob.glob(project.path + "/*"))
+        runCommand(["git", "-C", project.path, "commit", "-m", "yay"])
 
 
     def test_today(self):
@@ -1188,7 +1183,7 @@ class NewsBuilderTests(TestCase, StructureAssertingMixin):
         builder._today = lambda: '2009-12-01'
 
         project = self.createFakeTwistedProject()
-        self.svnCommit(project)
+        self.gitCommit(project)
         builder.buildAll(project)
 
         coreTopfiles = project.child("topfiles")
@@ -1216,7 +1211,7 @@ class NewsBuilderTests(TestCase, StructureAssertingMixin):
         """
         builder = NewsBuilder()
         project = self.createFakeTwistedProject()
-        self.svnCommit(project)
+        self.gitCommit(project)
         builder.buildAll(project)
 
         aggregateNews = project.child("NEWS")
@@ -1235,7 +1230,7 @@ class NewsBuilderTests(TestCase, StructureAssertingMixin):
         builder = NewsBuilder()
         builder._today = lambda: '2009-12-01'
         project = self.createFakeTwistedProject()
-        self.svnCommit(project)
+        self.gitCommit(project)
         builder.buildAll(project)
         newVersion = Version('TEMPLATE', 7, 7, 14)
         coreNews = project.child('topfiles').child('NEWS')
@@ -1261,24 +1256,24 @@ class NewsBuilderTests(TestCase, StructureAssertingMixin):
     def test_removeNEWSfragments(self):
         """
         L{NewsBuilder.buildALL} removes all the NEWS fragments after the build
-        process, using the C{svn} C{rm} command.
+        process, using the C{git} C{rm} command.
         """
         builder = NewsBuilder()
         project = self.createFakeTwistedProject()
-        self.svnCommit(project)
+        self.gitCommit(project)
         builder.buildAll(project)
 
         self.assertEqual(5, len(project.children()))
-        output = runCommand(["svn", "status", project.path])
+        output = runCommand(["git", "-C", project.path, "status", "--short"])
         removed = [line for line in output.splitlines()
                    if line.startswith("D ")]
         self.assertEqual(3, len(removed))
 
 
-    def test_checkSVN(self):
+    def test_checkGit(self):
         """
         L{NewsBuilder.buildAll} raises L{NotWorkingDirectory} when the given
-        path is not a SVN checkout.
+        path is not a Git repository.
         """
         self.assertRaises(
             NotWorkingDirectory, self.builder.buildAll, self.project)
@@ -1677,13 +1672,13 @@ class BuildAllTarballsTest(DistributionBuilderTestBase):
     """
     Tests for L{DistributionBuilder.buildAllTarballs}.
     """
-    skip = svnSkip or sphinxSkip
+    skip = gitSkip or sphinxSkip
 
     def test_buildAllTarballs(self):
         """
         L{buildAllTarballs} builds tarballs for Twisted and all of its
-        subprojects based on an SVN checkout; the resulting tarballs contain
-        no SVN metadata.  This involves building documentation, which it will
+        subprojects based on an Git repository; the resulting tarballs contain
+        no Git metadata.  This involves building documentation, which it will
         build with the correct API documentation reference base URL.
         """
         repositoryPath = self.mktemp()
@@ -1692,8 +1687,8 @@ class BuildAllTarballsTest(DistributionBuilderTestBase):
         checkout = FilePath(checkoutPath)
         self.outputDir.remove()
 
-        runCommand(["svnadmin", "create", repositoryPath])
-        runCommand(["svn", "checkout", "file://" + repository.path,
+        runCommand(["git", "init", repositoryPath])
+        runCommand(["git", "clone", "file://" + repository.path,
                     checkout.path])
 
         structure = {
@@ -1768,8 +1763,8 @@ class BuildAllTarballsTest(DistributionBuilderTestBase):
 
         self.createStructure(checkout, structure)
         childs = [x.path for x in checkout.children()]
-        runCommand(["svn", "add"] + childs)
-        runCommand(["svn", "commit", checkout.path, "-m", "yay"])
+        runCommand(["git", "-C", checkout.path, "add", "-f"] + childs)
+        runCommand(["git", "-C", checkout.path, "commit", "-m", "yay"])
 
         buildAllTarballs(checkout, self.outputDir)
         self.assertEqual(
@@ -1792,15 +1787,15 @@ class BuildAllTarballsTest(DistributionBuilderTestBase):
     def test_buildAllTarballsEnsuresCleanCheckout(self):
         """
         L{UncleanWorkingDirectory} is raised by L{buildAllTarballs} when the
-        SVN checkout provided has uncommitted changes.
+        Git repository provided has uncommitted changes.
         """
         repositoryPath = self.mktemp()
         repository = FilePath(repositoryPath)
         checkoutPath = self.mktemp()
         checkout = FilePath(checkoutPath)
 
-        runCommand(["svnadmin", "create", repositoryPath])
-        runCommand(["svn", "checkout", "file://" + repository.path,
+        runCommand(["git", "init", repositoryPath])
+        runCommand(["git", "clone", "file://" + repository.path,
                     checkout.path])
 
         checkout.child("foo").setContent("whatever")
@@ -1811,7 +1806,7 @@ class BuildAllTarballsTest(DistributionBuilderTestBase):
     def test_buildAllTarballsEnsuresExistingCheckout(self):
         """
         L{NotWorkingDirectory} is raised by L{buildAllTarballs} when the
-        checkout passed does not exist or is not an SVN checkout.
+        checkout passed does not exist or is not a Git repository.
         """
         checkout = FilePath(self.mktemp())
         self.assertRaises(NotWorkingDirectory,
diff --git twisted/topfiles/7035.misc twisted/topfiles/7035.misc
new file mode 100644
index 0000000..e69de29
