diff --git a/twisted/web/server.py b/twisted/web/server.py
index a48f2ea..1e053b8 100644
--- a/twisted/web/server.py
+++ b/twisted/web/server.py
@@ -394,7 +394,12 @@ class Request(Copyable, http.Request, components.Componentized):
             # if it still hasn't been set, fix it up.
             if not self.session:
                 self.session = self.site.makeSession()
-                self.addCookie(cookiename, self.session.uid, path=b'/')
+                self.addCookie(
+                    cookiename,
+                    self.session.uid,
+                    path=b'/',
+                    secure=self.isSecure(),
+                    )
         self.session.touch()
         if sessionInterface:
             return self.session.getComponent(sessionInterface)
diff --git a/twisted/web/test/test_web.py b/twisted/web/test/test_web.py
index 46b66f2..62b1300 100644
--- a/twisted/web/test/test_web.py
+++ b/twisted/web/test/test_web.py
@@ -466,6 +466,63 @@ class RequestTests(unittest.TestCase):
         request.requestReceived(b'GET', b'/foo%2Fbar', b'HTTP/1.0')
         self.assertEqual(request.prePathURL(), b'http://example.com/foo%2Fbar')
 
+    def makeRequest(self, channel):
+        """
+        Return a request instance attached to `channel`.
+        """
+        request = server.Request(channel, 1)
+        request.sitepath = []
+        request.site = channel.site
+        return request
+
+    def makeRawCookie(self, key, value, path, secure):
+        """
+        Return the serialization of a cookie.
+        """
+        securePart = ''
+        if secure:
+            securePart = '; Secure'
+        return '%s=%s; Path=%s%s' % (key, value, path, securePart)
+
+
+    def test_getSessionCreateSessionHTTP(self):
+        """
+        When request is using HTTP (not secured) transport, new session
+        cookies are set without `Secure` flag.
+        """
+        request = self.makeRequest(channel=DummyChannel())
+
+        session = request.getSession()
+        self.addCleanup(lambda: session.expire())
+
+        cookie = self.makeRawCookie(
+            key=b'TWISTED_SESSION',
+            value=session.uid,
+            path='/',
+            secure=False,
+            )
+        self.assertEqual([cookie], request.cookies)
+
+
+    def test_getSessionCreateSessionHTTPS(self):
+        """
+        When request is using HTTPS (secured) transport, new session
+        cookies are created with `Secure` flag.
+        """
+        channel = DummyChannel()
+        channel.transport = DummyChannel.SSL()
+        request = self.makeRequest(channel=channel)
+
+        session = request.getSession()
+        self.addCleanup(lambda: session.expire())
+
+        cookie = self.makeRawCookie(
+            key=b'TWISTED_SESSION',
+            value=session.uid,
+            path='/',
+            secure=True,
+            )
+        self.assertEqual([cookie], request.cookies)
 
 
 class GzipEncoderTests(unittest.TestCase):
diff --git a/twisted/web/topfiles/6932.feature b/twisted/web/topfiles/6932.feature
new file mode 100644
index 0000000..792495c
--- /dev/null
+++ b/twisted/web/topfiles/6932.feature
@@ -0,0 +1 @@
+* twisted.web.server.Request will create new session cookies with `secure` flag, when HTTPS transport is used.
