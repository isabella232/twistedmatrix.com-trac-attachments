Index: twisted/mail/topfiles/4151.removal
===================================================================
--- twisted/mail/topfiles/4151.removal	(revision 0)
+++ twisted/mail/topfiles/4151.removal	(revision 0)
@@ -0,0 +1 @@
+twisted.mail.mail.IDomain.startMessage, deprecated since 2003, has been removed.
Index: twisted/mail/mail.py
===================================================================
--- twisted/mail/mail.py	(revision 34635)
+++ twisted/mail/mail.py	(working copy)
@@ -12,8 +12,7 @@
 from twisted.python import util
 from twisted.python import log
 
-from twisted import cred
-import twisted.cred.portal
+from twisted.cred.portal import Portal 
 
 # Sibling imports
 from twisted.mail import protocols, smtp
@@ -24,8 +23,9 @@
 
 
 class DomainWithDefaultDict:
-    '''Simulate a dictionary with a default value for non-existing keys.
-    '''
+    """
+    Simulate a dictionary with a default value for non-existing keys.
+    """
     def __init__(self, domains, default):
         self.domains = domains
         self.default = default
@@ -115,13 +115,15 @@
         return self.domains.setdefault(key, default)
 
 class IDomain(Interface):
-    """An email domain."""
+    """
+    An email domain.
+    """
 
     def exists(user):
         """
         Check whether or not the specified user exists in this domain.
 
-        @type user: C{twisted.protocols.smtp.User}
+        @type user: C{twisted.mail.smtp.User}
         @param user: The user to check
 
         @rtype: No-argument callable
@@ -130,26 +132,25 @@
         This will be called and the returned object used to deliver the
         message when it arrives.
 
-        @raise twisted.protocols.smtp.SMTPBadRcpt: Raised if the given
+        @raise twisted.mail.smtp.SMTPBadRcpt: Raised if the given
         user does not exist in this domain.
         """
 
     def addUser(user, password):
-        """Add a username/password to this domain."""
+        """
+        Add a username/password to this domain.
+        """
 
-    def startMessage(user):
-        """Create and return a new message to be delivered to the given user.
 
-        DEPRECATED.  Implement validateTo() correctly instead.
-        """
-
     def getCredentialsCheckers():
-        """Return a list of ICredentialsChecker implementors for this domain.
         """
+        Return a list of ICredentialsChecker implementors for this domain.
+        """
 
 class IAliasableDomain(IDomain):
     def setAliasGroup(aliases):
-        """Set the group of defined aliases for this domain
+        """
+        Set the group of defined aliases for this domain
 
         @type aliases: C{dict}
         @param aliases: Mapping of domain names to objects implementing
@@ -160,7 +161,7 @@
         """
         Check whether or not the specified user exists in this domain.
 
-        @type user: C{twisted.protocols.smtp.User}
+        @type user: C{twisted.mail.smtp.User}
         @param user: The user to check
 
         @type memo: C{dict}
@@ -174,12 +175,13 @@
         This will be called and the returned object used to deliver the
         message when it arrives.
 
-        @raise twisted.protocols.smtp.SMTPBadRcpt: Raised if the given
+        @raise twisted.mail.smtp.SMTPBadRcpt: Raised if the given
         user does not exist in this domain.
         """
 
 class BounceDomain:
-    """A domain in which no user exists.
+    """
+    A domain in which no user exists.
 
     This can be used to block off certain domains.
     """
@@ -207,7 +209,9 @@
 
 
 class FileMessage:
-    """A file we can write an email too."""
+    """
+    A file we can write an email too.
+    """
 
     implements(smtp.IMessage)
 
@@ -230,7 +234,9 @@
 
 
 class MailService(service.MultiService):
-    """An email service."""
+    """
+    An email service.
+    """
 
     queue = None
     domains = None
@@ -246,7 +252,7 @@
 
         self.monitor = FileMonitoringService()
         self.monitor.setServiceParent(self)
-        self.smtpPortal = cred.portal.Portal(self)
+        self.smtpPortal = Portal(self)
 
     def getPOP3Factory(self):
         return protocols.POP3Factory(self)
@@ -258,7 +264,7 @@
         return protocols.ESMTPFactory(self, self.smtpPortal)
 
     def addDomain(self, name, domain):
-        portal = cred.portal.Portal(domain)
+        portal = Portal(domain)
         map(portal.registerChecker, domain.getCredentialsCheckers())
         self.domains[name] = domain
         self.portals[name] = portal
@@ -266,7 +272,9 @@
             domain.setAliasGroup(self.aliases)
 
     def setQueue(self, queue):
-        """Set the queue for outgoing emails."""
+        """
+        Set the queue for outgoing emails.
+        """
         self.queue = queue
 
     def requestAvatar(self, avatarId, mind, *interfaces):
