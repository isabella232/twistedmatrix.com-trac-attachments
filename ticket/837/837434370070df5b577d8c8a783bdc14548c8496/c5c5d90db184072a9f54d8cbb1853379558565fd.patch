commit 5d4b7e452f60d4193657a621cb8b936d6787077e
Author: Aaron Burrow <burrows@Aarons-MacBook-Pro.local>
Date:   Mon Jul 27 23:13:23 2015 -0400

    IMAP NOOP returns STATUS data when 'selected'
    
    The IMAP RFC 3501 recommends that the NOOP command returns STATUS data.
    From 6.1.2,
    
      Since any command can return a status update as untagged data, the
      NOOP command can be used as a periodic poll for new messages or
      message status updates during a period of inactivity (this is the
      preferred method to do this).  The NOOP command can also be used
      to reset any inactivity autologout timer on the server.
    
    And from 7,
    
      An example of unilateral untagged server data occurs when the IMAP
      connection is in the selected state.  In the selected state, the
      server checks the mailbox for new messages as part of command
      execution.  Normally, this is part of the execution of every command;
      hence, a NOOP command suffices to check for new messages.  If new
      messages are found, the server sends untagged EXISTS and RECENT
      responses reflecting the new size of the mailbox.  Server
      implementations that offer multiple simultaneous access to the same
      mailbox SHOULD also send appropriate unilateral untagged FETCH and
      EXPUNGE responses if another agent changes the state of any message
      flags or expunges any messages.

diff --git a/twisted/mail/imap4.py b/twisted/mail/imap4.py
index 7fba48d..84a700a 100644
--- a/twisted/mail/imap4.py
+++ b/twisted/mail/imap4.py
@@ -956,9 +956,14 @@ class IMAP4Server(basic.LineReceiver, policies.TimeoutMixin):
     def do_NOOP(self, tag):
         self.sendPositiveResponse(tag, 'NOOP No operation performed')
 
+    def do_select_NOOP(self, tag):
+        self.sendUntaggedResponse(str(self.mbox.getMessageCount()) + ' EXISTS')
+        self.sendUntaggedResponse(str(self.mbox.getRecentCount()) + ' RECENT')
+        self.sendPositiveResponse(tag, 'NOOP completed')
+
     unauth_NOOP = (do_NOOP,)
     auth_NOOP = unauth_NOOP
-    select_NOOP = unauth_NOOP
+    select_NOOP = (do_select_NOOP,)
     logout_NOOP = unauth_NOOP
 
     def do_AUTHENTICATE(self, tag, args):
