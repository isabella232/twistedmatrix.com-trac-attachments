Index: lore/test/lore_index_file_unnumbered_multiple_out.html
===================================================================
--- lore/test/lore_index_file_unnumbered_multiple_out.html	(revision 20032)
+++ lore/test/lore_index_file_unnumbered_multiple_out.html	(working copy)
@@ -1,4 +1,29 @@
+<?xml version="1.0"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
+  <head>
+    <title>Twisted Documentation: Index</title>
+    <link href="resources/stylesheet.css" type="text/css" rel="stylesheet" />
+  </head>
+  <body bgcolor="white">
+    <h1 class="title">Index
+    </h1>
+    <div class="toc"></div>
+    <div class="body">
+      <h2>A
+      </h2>
 aahz: <a href="lore_index_test2.html#index03">link</a><br />
 aahz2: <a href="lore_index_test2.html#index02">link</a><br />
+      <h2>L
+      </h2>
 language of programming: <a href="lore_index_test.html#index02">link</a>, <a href="lore_index_test2.html#index01">link</a><br />
+      <h2>P
+      </h2>
 programming language: <a href="lore_index_test.html#index01">link</a><br />
+    </div>
+    <p><span class="index-link">Index</span>
+    </p>
+  </body>
+</html>
\ No newline at end of file
Index: lore/test/lore_index_file_out.html
===================================================================
--- lore/test/lore_index_file_out.html	(revision 20032)
+++ lore/test/lore_index_file_out.html	(working copy)
@@ -1,2 +1,25 @@
+<?xml version="1.0"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
+  <head>
+    <title>Twisted Documentation: Index</title>
+    <link href="resources/stylesheet.css" type="text/css" rel="stylesheet" />
+  </head>
+  <body bgcolor="white">
+    <h1 class="title">Index
+    </h1>
+    <div class="toc"></div>
+    <div class="body">
+      <h2>L
+      </h2>
 language of programming: <a href="lore_index_test.html#index02">1.3</a><br />
+      <h2>P
+      </h2>
 programming language: <a href="lore_index_test.html#index01">1.2</a><br />
+    </div>
+    <p><span class="index-link">Index</span>
+    </p>
+  </body>
+</html>
\ No newline at end of file
Index: lore/test/test_lore.py
===================================================================
--- lore/test/test_lore.py	(revision 20032)
+++ lore/test/test_lore.py	(working copy)
@@ -36,23 +36,26 @@
 # 
 
 import os, shutil
 from StringIO import StringIO
 
 from twisted.trial import unittest
 
+from twisted.lore.default import *
 from twisted.lore import tree, process, indexer, numberer, htmlbook, default
 from twisted.lore.default import factory
 from twisted.lore.latex import LatexSpitter
 
 from twisted.python.util import sibpath
+from twisted.python import usage
 
 from twisted.lore.scripts import lore
 
 from twisted.web import microdom
+import os, shutil
 
 def sp(originalFileName):
     return sibpath(__file__, originalFileName)
 
 options = {"template" : sp("template.tpl"), 'baseurl': '%s', 'ext': '.xhtml' }
 d = options
 
@@ -184,15 +187,24 @@
         tmp = self.makeTemp('lore_index_test.xhtml')
 
         tree.doFile(os.path.join(tmp, 'lore_index_test.xhtml'),
                     self.linkrel, '.html', d['baseurl'], templ, d)
         self.assertEqualFiles1("lore_index_test_out.html",
                                os.path.join(tmp, "lore_index_test.html"))
 
+    def makeTemplateFile(self):
+        sf = open('../lore/test/template.tpl', 'r')
+        contents = sf.read()
+        sf.close()
+        df = open('template.tpl', 'w')
+        df.write(contents)
+        df.close()
+
     def test_indexEntriesAdded(self):
+        self.makeTemplateFile()
         indexer.addEntry('lore_index_test.html', 'index02', 'language of programming', '1.3')
         indexer.addEntry('lore_index_test.html', 'index01', 'programming language', '1.2')
         indexer.setIndexFilename("lore_index_file.html")
         indexer.generateIndex()
         self.assertEqualFiles1("lore_index_file_out.html", "lore_index_file.html")
 
     def test_book(self):
@@ -263,15 +275,15 @@
         # run two files through lore, with numbering turned on
         # every h2 should be numbered:
         # first  file's h2s should be 1.1, 1.2
         # second file's h2s should be 2.1, 2.2
         templateFilename = sp('template.tpl')
         inputFilename = sp('lore_numbering_test.xhtml')
         inputFilename2 = sp('lore_numbering_test2.xhtml')
-        indexFilename = 'theIndexFile'
+        indexFilename = 'theIndexFile3'
 
         # you can number without a book:
         options = lore.Options()
         options.parseOptions(['--null',
                               '--index=%s' % indexFilename,
                               '--config', 'template=%s' % templateFilename,
                               '--config', 'ext=%s' % ".tns",
Index: lore/test/lore_index_file_unnumbered_out.html
===================================================================
--- lore/test/lore_index_file_unnumbered_out.html	(revision 20032)
+++ lore/test/lore_index_file_unnumbered_out.html	(working copy)
@@ -1,2 +1,25 @@
+<?xml version="1.0"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
+  <head>
+    <title>Twisted Documentation: Index</title>
+    <link href="resources/stylesheet.css" type="text/css" rel="stylesheet" />
+  </head>
+  <body bgcolor="white">
+    <h1 class="title">Index
+    </h1>
+    <div class="toc"></div>
+    <div class="body">
+      <h2>L
+      </h2>
 language of programming: <a href="lore_index_test.html#index02">link</a><br />
+      <h2>P
+      </h2>
 programming language: <a href="lore_index_test.html#index01">link</a><br />
+    </div>
+    <p><span class="index-link">Index</span>
+    </p>
+  </body>
+</html>
\ No newline at end of file
Index: lore/indexer.py
===================================================================
--- lore/indexer.py	(revision 20032)
+++ lore/indexer.py	(working copy)
@@ -1,50 +1,190 @@
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
-def setIndexFilename(filename='index.xhtml'):
-    global indexFilename
-    indexFilename = filename
-
-def getIndexFilename():
-    global indexFilename
-    return indexFilename
-
-def addEntry(filename, anchor, text, reference):
-    global entries
-    if not entries.has_key(text):
-        entries[text] = []
-    entries[text].append((filename, anchor, reference))
-
-def clearEntries():
-    global entries
-    entries = {}
-
-def generateIndex():
-    global entries
-    global indexFilename
-
-    if not indexFilename:
-        return
-
-    f = open(indexFilename, 'w')
-    sortedEntries = [(e.lower(), e) for e in entries]
-    sortedEntries.sort()
-    sortedEntries = [e[1] for e in sortedEntries]
-    for text in sortedEntries:
-        refs = []
-        f.write(text.replace('!', ', ') + ': ')
-        for (file, anchor, reference) in entries[text]:
-            refs.append('<a href="%s#%s">%s</a>' % (file, anchor, reference))
-        if text == 'infinite recursion':
-            refs.append('<em>See Also:</em> recursion, infinite\n')
-        if text == 'recursion!infinite':
-            refs.append('<em>See Also:</em> infinite recursion\n')
-        f.write('%s<br />\n' % ", ".join(refs))
-    f.close()
+from twisted.web import microdom, domhelpers
+from twisted.web import sux
+import process
+import tree
+import re
+
+wxopts = {'newl':'\n', 'addindent':'  '}
+
+def stripTag(tag, text):
+    return text.replace('<'+tag+'>', '').replace('</'+tag+'>', '')
+
+def sortingKeyed(original):
+    key = original.lower()
+    if key.startswith('<em>'):
+        key = stripTag('em', key)
+    return (key, original)
+
+def fixEm(text):
+    node = microdom.Element('span')
+    #node.childNodes.append(microdom.Text('\n'))
+
+    inEm = 0
+    for chunk in re.split('</?em>', text):
+        if inEm:
+            emNode = microdom.Element('em')
+            emNode.childNodes.append(microdom.Text(chunk))
+            node.childNodes.append(emNode)
+        else:
+            node.childNodes.append(microdom.Text(chunk))
+        inEm = not inEm
+
+    node.childNodes.append(microdom.Text(': '))
+    return node
+
+def toTree(html):
+    return microdom.parseString(html).documentElement
+
+def getTemplate(templateFile):
+    if templateFile == None:
+        from default import htmlDefault
+        templateFile = htmlDefault['template']
+
+    try:
+        fp = open(templateFile)
+        document = microdom.parse(fp)
+    except IOError, e:
+        raise process.NoProcessorError(e.filename+': '+e.strerror) # is this the right thing to raise?
+    except sux.ParseError, e:
+        raise process.NoProcessorError(str(e)) # "
+
+    body = domhelpers.findNodesNamed(document, "body")[0]
+    body = domhelpers.findElementsWithAttribute(body, "class", "body")[0] # div "body" inside usual body
+
+    return document, body
+
+
+def dumpNode(node):
+    atts = [a for a in dir(node) if not a.startswith('__')]
+    #['nodeName', '_filename', '_markpos', 'tagName', 'endTagName', 'parentNode', 'attributes', 'caseInsensitive', 'preserveCase', 'namespace', 'nsprefixes', 'childNodes']
+    for a in atts:
+        print a, ':', node.__getattribute__(a)
+
+
+class Indexer(object):
+
+    def __init__(self):
+        self.indexFilename = 'index.xhtml' # wtf? why xhtml?
+        self.clearEntries()
+
+    def setIndexFilename(self, filename='index.xhtml'):
+        self.indexFilename = filename
+
+    def getIndexFilename(self):
+        return self.indexFilename
+
+    def addEntry(self, filename, anchor, text, reference):
+        if not self.entries.has_key(text):
+            self.entries[text] = []
+        self.entries[text].append((filename, anchor, reference))
+
+    def clearEntries(self):
+        self.entries = {}
+
+    def generateIndex(self, templateFile=None):
+        if not self.indexFilename:
+            return
+    
+        document, body = getTemplate(templateFile)
+        tree.setTitle(document, [microdom.Text('Index')], None)
+    
+        sortedEntryKeys = [sortingKeyed(e) for e in self.entries]
+        sortedEntryKeys.sort()
+    
+        prevInitial = None
+        for key, text in sortedEntryKeys:
+            initial = key[0].upper()
+            if not initial.isalnum():
+                initial = 'Symbols'
+            if initial != prevInitial:
+                #body.childNodes.append(microdom.Text('\n\n'))
+                header = toTree('<h2>%s</h2>' % initial)
+                body.childNodes.append(header)
+                prevInitial = initial
+            refs = []
+            if '<em>' in text:
+                keyText = fixEm(text.replace('!', ', '))
+            else:
+                keyText = microdom.Text('\n' + text.replace('!', ', ') + ': ')
+            body.childNodes.append(keyText)
+            for (file, anchor, reference) in self.entries[text]:
+                link = microdom.Element('a', {'href': file + '#' + anchor})
+                link.childNodes.append(microdom.Text(reference))
+                refs.append(link)
+            if text == 'infinite recursion':
+                refs.append(toTree('<span><em>See Also:</em> recursion, infinite\n</span>'))
+            if text == 'recursion!infinite':
+                refs.append(toTree('<span><em>See Also:</em> infinite recursion\n</span>'))
+            for r in refs[:-1]:
+                body.childNodes.append(r)
+                body.childNodes.append(microdom.Text(', '))
+            body.childNodes.append(refs[-1])
+            body.childNodes.append(microdom.Element('br'))
+    
+        #TODO newFilename = outfileGenerator(filename, ext)
+        #makeSureDirectoryExists(self.indexFilename)
+    
+        document.writexml(open(self.indexFilename, 'wb'), **wxopts)
+
+idx = Indexer()
+setIndexFilename = idx.setIndexFilename
+getIndexFilename = idx.getIndexFilename
+addEntry = idx.addEntry
+clearEntries = idx.clearEntries
+generateIndex = idx.generateIndex
+
+
+class TocEntry(object):
+    def __init__(self, tree, title, outfile, reference):
+        self.tree = tree
+        self.title = title
+        self.outfile = outfile
+        self.reference = reference
+
+
+class TableOfContents(object):
+
+    def __init__(self):
+        self.clearTableOfContents()
+
+    def clearTableOfContents(self):
+        self.toc = []
+
+    def addChapterTableOfContents(self, tree, title, outfile, reference):
+        self.toc.append(TocEntry(tree, title, outfile, reference))
+
+    def generateTableOfContents(self, templateFile=None):
+        document, body = getTemplate(templateFile)
+        tree.setTitle(document, [microdom.Text('Table of Contents')], None)
+        for t in self.toc:
+            chapterNode = toTree('<span>%s. </span>' % t.reference)
+            linkNode = toTree('<a href="%s"></a>' % t.outfile)
+            for titlePart in t.title:
+                linkNode.childNodes.append(titlePart)
+            chapterNode.childNodes.append(linkNode)
+            body.childNodes.append(chapterNode)
+            #replace bare anchors with filename + anchor
+            #dumpNode(domhelpers.findNodesNamed(t.tree, 'a')[0])
+            for anc in domhelpers.findNodesNamed(t.tree, 'a'):
+                anc.attributes['href'] = t.outfile + anc.attributes['href']
+            body.childNodes.append(t.tree)
+            #body.childNodes.append(microdom.Text('\n\n'))
+            tree.setIndexLink(document, getIndexFilename())
+        document.writexml(open('toc.html', 'wb'), **wxopts)#fix filename
+
+toc = TableOfContents()
+clearTableOfContents = toc.clearTableOfContents
+addChapterTableOfContents = toc.addChapterTableOfContents
+generateTableOfContents = toc.generateTableOfContents
+
 
 def reset():
     clearEntries()
+    clearTableOfContents()
     setIndexFilename()
 
 reset()
Index: lore/tree.py
===================================================================
--- lore/tree.py	(revision 20032)
+++ lore/tree.py	(working copy)
@@ -183,23 +183,26 @@
         data = '\n'.join(lines[int(node.getAttribute('skipLines', 0)):])
         data = cStringIO.StringIO(text.removeLeadingTrailingBlanks(data))
         htmlizer.filter(data, outfile, writer=htmlizer.SmallerHTMLWriter)
         val = outfile.getvalue()
         _replaceWithListing(node, val, filename, "py-listing")
 
 
+def toTree(html):
+    return microdom.parseString(html).documentElement
+
 
 def _replaceWithListing(node, val, filename, class_):
     captionTitle = domhelpers.getNodeText(node)
     if captionTitle == os.path.basename(filename):
         captionTitle = 'Source listing'
     text = ('<div class="%s">%s<div class="caption">%s - '
             '<a href="%s"><span class="filename">%s</span></a></div></div>' %
             (class_, val, captionTitle, filename, filename))
-    newnode = microdom.parseString(text).documentElement
+    newnode = toTree(text)
     node.parentNode.replaceChild(newnode, node)
 
 
 
 def addHTMLListings(document, dir):
     """
     Insert HTML source listings into the given document from files in the given
@@ -249,26 +252,27 @@
                                                      "listing"):
         filename = node.getAttribute("href")
         val = ('<pre>\n%s</pre>' %
                cgi.escape(open(os.path.join(dir, filename)).read()))
         _replaceWithListing(node, val, filename, "listing")
 
 
+contentsHeaderLevels = '23'
 
 def getHeaders(document):
     """
     Return all H2 and H3 nodes in the given document.
 
     @type document: A DOM Node or Document
 
     @rtype: C{list}
     """
     return domhelpers.findElements(
         document,
-        lambda n, m=re.compile('h[23]$').match: m(n.nodeName))
+        lambda n, m=re.compile('h[' + contentsHeaderLevels + ']$').match: m(n.nodeName))
 
 
 
 def generateToC(document):
     """
     Create a table of contents for the given document.
 
@@ -283,20 +287,20 @@
         elementLevel = int(element.tagName[1])-2
         toc += (level-elementLevel)*'</ul>\n'
         toc += (elementLevel-level)*'<ul>'
         toc += '<li><a href="#auto%d">' % id
         toc += domhelpers.getNodeText(element)
         toc += '</a></li>\n'
         level = elementLevel
-        anchor = microdom.parseString('<a name="auto%d" />' % id).documentElement
+        anchor = toTree('<a name="auto%d" />' % id)
         element.childNodes.append(anchor)
         id += 1
     toc += '</ul>\n' * level
     toc += '</ol>\n'
-    return microdom.parseString(toc).documentElement
+    return toTree(toc)
 
 
 
 def putInToC(document, toc):
     """
     Insert the given table of contents into the given document.
 
@@ -351,28 +355,28 @@
     footnotes = domhelpers.findElementsWithAttribute(document, "class",
                                                      "footnote")
     if not footnotes:
         return
     footnoteElement = microdom.Element('ol')
     id = 1
     for footnote in footnotes:
-        href = microdom.parseString('<a href="#footnote-%(id)d">'
+        href = toTree('<a href="#footnote-%(id)d">'
                                     '<super>%(id)d</super></a>'
-                                    % vars()).documentElement
+                                    % vars())
         text = ' '.join(domhelpers.getNodeText(footnote).split())
         href.setAttribute('title', text)
         target = microdom.Element('a', attributes={'name': 'footnote-%d' % id})
         target.childNodes = [footnote]
         footnoteContent = microdom.Element('li')
         footnoteContent.childNodes = [target]
         footnoteElement.childNodes.append(footnoteContent)
         footnote.parentNode.replaceChild(href, footnote)
         id += 1
     body = domhelpers.findNodesNamed(document, "body")[0]
-    header = microdom.parseString('<h2>Footnotes</h2>').documentElement
+    header = toTree('<h2>Footnotes</h2>')
     body.childNodes.append(header)
     body.childNodes.append(footnoteElement)
 
 
 
 def notes(document):
     """
@@ -386,15 +390,15 @@
     @type document: A DOM Node or Document
     @param document: The input document which contains all of the content to be
     presented.
 
     @return: C{None}
     """
     notes = domhelpers.findElementsWithAttribute(document, "class", "note")
-    notePrefix = microdom.parseString('<strong>Note: </strong>').documentElement
+    notePrefix = toTree('<strong>Note: </strong>')
     for note in notes:
         note.childNodes.insert(0, notePrefix)
 
 
 
 def compareMarkPos(a, b):
     """
@@ -470,15 +474,18 @@
     @param header: The section from which to extract a number.  The section
     number is the value of this node's first child.
 
     @return: C{None} or a C{str} giving the section number.
     """
     if not header:
         return None
-    return header.childNodes[0].value.strip()
+    try:
+        return header.childNodes[0].value.strip()
+    except AttributeError, e: # temporary fix; just uses the chapter number; want whole header text
+        return None
 
 
 
 def getSectionReference(entry):
     """
     Find the section number which contains the given node.
 
@@ -781,29 +788,32 @@
     if not config.get('noapi', False):
         fixAPI(document, url)
     fontifyPython(document)
     fixLinks(document, ext)
     addPyListings(document, dir)
     addHTMLListings(document, dir)
     addPlainListings(document, dir)
-    putInToC(template, generateToC(document))
+    toc = generateToC(document)
+    putInToC(template, toc)
     footnotes(document)
     notes(document)
 
     setIndexLink(template, indexer.getIndexFilename())
     setVersion(template, config.get('version', ''))
 
     # Insert the document into the template
     chapterNumber = htmlbook.getNumber(fullpath)
     title = domhelpers.findNodesNamed(document, 'title')[0].childNodes
     setTitle(template, title, chapterNumber)
     if numberer.getNumberSections() and chapterNumber:
         numberDocument(document, chapterNumber)
-    index(document, outfileGenerator(os.path.split(fullpath)[1], ext),
-          htmlbook.getReference(fullpath))
+    outfile = outfileGenerator(os.path.split(fullpath)[1], ext)
+    reference = htmlbook.getReference(fullpath)
+    index(document, outfile, reference)
+    indexer.addChapterTableOfContents(toc, title, outfile, reference)
 
     authors = domhelpers.findNodesNamed(document, 'link')
     authors = [(node.getAttribute('title',''), node.getAttribute('href', ''))
                for node in authors if node.getAttribute('rel', '') == 'author']
     setAuthors(template, authors)
 
     body = domhelpers.findNodesNamed(document, "body")[0]
Index: lore/process.py
===================================================================
--- lore/process.py	(revision 20032)
+++ lore/process.py	(working copy)
@@ -23,14 +23,15 @@
 
     def __init__(self, df, fext, linkrel):
         self.df = df
         self.linkrel = linkrel
         self.fext = fext
         self.walked = []
         self.failures = []
+        self.templateFilename = 'template.tpl'
 
     def walkdir(self, topdir, prefix=''):
         self.basecount = dircount(topdir)
         os.path.walk(topdir, self.walk, prefix)
 
     def walk(self, prefix, d, names):
         linkrel = prefix + '../' * (dircount(d) - self.basecount)
@@ -49,15 +50,17 @@
             i += 1
             fname = os.path.splitext(fullpath)[0]
             self.percentdone((float(i) / len(self.walked)), fname)
             try:
                 self.df(fullpath, linkrel)
             except ProcessingFailure, e:
                 self.failures.append((fullpath, e))
-        indexer.generateIndex()
+        if len(indexer.idx.entries) > 0: # i.e. are we processing a book?
+            indexer.generateIndex(self.templateFilename)
+            indexer.generateTableOfContents(self.templateFilename)
         self.percentdone(1., None)
 
     def percentdone(self, percent, fname):
         # override for neater progress bars
         proglen = 40
         hashes = int(percent * proglen)
         spaces = proglen - hashes
Index: lore/htmlbook.py
===================================================================
--- lore/htmlbook.py	(revision 20032)
+++ lore/htmlbook.py	(working copy)
@@ -1,31 +1,19 @@
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
-def getNumber(filename):
-    return None
-
-def getReference(filename):
-    return None
-
 class Book:
 
     def __init__(self, filename):
         self.chapters = []
         self.indexFilename = None
 
-        global Chapter
-        Chapter = self.Chapter
-        global getNumber
-        getNumber = self.getNumber
-        global getReference
-        getReference = self.getNumber
-        global Index
-        Index = self.Index
+        global _book
+        _book = self
 
         if filename:
             execfile(filename)
 
     def getFiles(self):
         return [c[0] for c in self.chapters]
 
@@ -40,8 +28,30 @@
 
     def Chapter(self, filename, number):
         self.chapters.append((filename, number))
 
     def Index(self, filename):
         self.indexFilename = filename
 
-#_book = Book(None)
+    def UseForTOC(self, levels):
+        import tree
+        print 'Using these header levels in ToCs: ' + levels
+        tree.contentsHeaderLevels = levels
+
+
+_book = Book(None)
+
+def Chapter(filename, number):
+    _book.Chapter(filename, number)
+
+def getNumber(filename):
+    return _book.getNumber(filename)
+
+def getReference(filename):
+    return _book.getNumber(filename)
+
+def Index(filename):
+    _book.Index(filename)
+
+def UseForTOC(levels):
+    _book.UseForTOC(levels)
+

