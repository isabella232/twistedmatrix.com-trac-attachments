Index: twisted/lore/test/lore_index_file_unnumbered_multiple_out.html
===================================================================
--- twisted/lore/test/lore_index_file_unnumbered_multiple_out.html	(revision 20815)
+++ twisted/lore/test/lore_index_file_unnumbered_multiple_out.html	(working copy)
@@ -1,4 +1,29 @@
+<?xml version="1.0"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
+  <head>
+    <title>Twisted Documentation: Index</title>
+    <link href="resources/stylesheet.css" type="text/css" rel="stylesheet" />
+  </head>
+  <body bgcolor="white">
+    <h1 class="title">Index
+    </h1>
+    <div class="toc"></div>
+    <div class="body">
+      <h2>A
+      </h2>
 aahz: <a href="lore_index_test2.html#index03">link</a><br />
 aahz2: <a href="lore_index_test2.html#index02">link</a><br />
+      <h2>L
+      </h2>
 language of programming: <a href="lore_index_test.html#index02">link</a>, <a href="lore_index_test2.html#index01">link</a><br />
+      <h2>P
+      </h2>
 programming language: <a href="lore_index_test.html#index01">link</a><br />
+    </div>
+    <p><span class="index-link">Index</span>
+    </p>
+  </body>
+</html>
\ No newline at end of file
Index: twisted/lore/test/lore_index_file_out.html
===================================================================
--- twisted/lore/test/lore_index_file_out.html	(revision 20815)
+++ twisted/lore/test/lore_index_file_out.html	(working copy)
@@ -1,2 +0,0 @@
-language of programming: <a href="lore_index_test.html#index02">1.3</a><br />
-programming language: <a href="lore_index_test.html#index01">1.2</a><br />
Index: twisted/lore/test/lore_numbering_test2.xhtml
===================================================================
--- twisted/lore/test/lore_numbering_test2.xhtml	(revision 0)
+++ twisted/lore/test/lore_numbering_test2.xhtml	(revision 0)
@@ -0,0 +1,29 @@
+<html>
+<head>
+  <title>The second page to index</title>
+</head>
+
+<body>
+
+<h1>The second page to index</h1>
+
+<p>The first paragraph of the second page.</p>
+
+
+<h2>The Jython programming language</h2>
+<span class="index" value="language!programming" />
+<span class="index" value="aahz!favorite environment" />
+<span class="index" value="aahz" />
+
+<p>The second paragraph of the second page.</p>
+
+<h2>Second Section</h2>
+
+<p>The second section of the second page.</p>
+
+<h2>Third Section of Second Page</h2>
+
+<p>The Third section.</p>
+
+</body>
+</html>
Index: twisted/lore/test/test_lore.py
===================================================================
--- twisted/lore/test/test_lore.py	(revision 20815)
+++ twisted/lore/test/test_lore.py	(working copy)
@@ -6,6 +6,12 @@
 # It takes a while to run (2:03 on a reasonable box)
 # Make sure there are no errors!  Warnings are OK.
 
+# To run from trunk (i.e. Twisted/):
+# $ trial twisted.lore                      # whole Lore test suite
+# $ trial twisted.lore.test_lore            # Just this file
+# $ trial twisted.lore.test_lore.TestFactory                 # Just one class in this file
+# $ trial twisted.lore.test.test_lore.TestFactory.test_book  # Just one method in this file
+
 # ++ single anchor added to individual output file
 # ++ two anchors added to individual output file
 # ++ anchors added to individual output files
@@ -83,7 +89,6 @@
         self.assertEqualsString(expected, act)
 
     def assertEqualsString(self, expected, act):
-        if len(expected) != len(act): print "Actual: " + act ##d
         self.assertEquals(len(expected), len(act))
         for i in range(len(expected)):
             e = expected[i]
@@ -99,6 +104,13 @@
             shutil.copyfile(sp(filename), tmpFile)
         return tmp
 
+    def assertIsTextNode(self, node, contents=None, parent='DONTCARE'):
+        self.assert_(isinstance(node, microdom.Text))
+        if contents:
+            self.assertEquals(contents, node.nodeValue)
+        if parent != 'DONTCARE': # sentinel value, since we might want to check for None
+            self.assertEquals(parent, node.parentNode)
+
 ########################################
 
     def setUp(self):
@@ -188,13 +200,125 @@
         self.assertEqualFiles1("lore_index_test_out.html",
                                os.path.join(tmp, "lore_index_test.html"))
 
-    def test_indexEntriesAdded(self):
+    def assertIsIndexHeader(self, node, letter):
+        self.assert_(isinstance(node, microdom.Element))
+        self.assertEquals('h2', node.nodeName)
+        self.assertEquals(1, len(node.childNodes))
+        self.assertIsTextNode(node.childNodes[0], letter, node)
+
+    def assertIsIndexEntry(self, nodes, text, faslist, optanch=None, optsec=None):
+        if not isinstance(faslist, (list, tuple)):
+            faslist = [(faslist, optanch, optsec)]
+        self.assertEquals(1 + 2*len(faslist), len(nodes))
+        self.assertIsTextNode(nodes[0], '\n'+text+': ')
+
+        i = 1
+        for fas in faslist:
+            filename, anchorname, section = fas
+            n1 = nodes[i]
+            self.assertEquals('a', n1.nodeName)
+            self.assertEquals('%s#%s' % (filename, anchorname), n1.getAttribute('href'))
+            self.assertEquals(1, len(n1.childNodes))
+            self.assertIsTextNode(n1.childNodes[0], section, n1)
+            i += 2
+        
+        self.assertEquals('br', nodes[i-1].nodeName)
+
+    def test_indexEntryGeneration(self):
+        indexer.clearEntries()
+        text = 'text of entry'
+        filename = 'filename.html'
+        anchorname = 'anchorname'
+        section = '3.14'
+
+        indexer.addEntry(filename, anchorname, text, section)
+        nodes = indexer.idx.generateIndexEntry(text)
+
+        self.assertIsIndexEntry(nodes, text, filename, anchorname, section)
+
+    def test_indexEntryGenerationManyRefs(self):
+        indexer.clearEntries()
+        text = 'text of entry'
+        filenames = ['filename.html', 'filename2.html', 'filename3.html']
+        anchornames = ['anchorname', 'anchorname2', 'anchorname3']
+        sections = ['3.14', '1.41', '10.2']
+
+        for i in range(len(filenames)):
+            indexer.addEntry(filenames[i], anchornames[i], text, sections[i])
+        nodes = indexer.idx.generateIndexEntry(text)
+
+        self.assertIsIndexEntry(nodes, text, zip(filenames, anchornames, sections))
+        #self.assertIsIndexEntry(nodes, text, [(filename, anchorname, section), (filename2, anchorname2, section2)])
+
+    def test_indexEntryGenerationSymbol(self):
+        indexer.clearEntries()
+        text = '&-escaping'
+        filenames = ['filename.html', 'filename2.html', 'filename3.html']
+        anchornames = ['anchorname', 'anchorname2', 'anchorname3']
+        sections = ['3.14', '1.41', '10.2']
+
+        for i in range(len(filenames)):
+            indexer.addEntry(filenames[i], anchornames[i], text, sections[i])
+        nodes = indexer.idx.generateIndexEntry(text)
+
+        self.assertIsIndexEntry(nodes, text, zip(filenames, anchornames, sections))
+
+    def test_indexEntryGenerationEmphasis(self):
+        indexer.clearEntries()
+        text = 'The <em>Kobayashi Maru</em>'
+        filenames = ['filename.html']
+        anchornames = ['anchorname']
+        sections = ['9.89']
+        filename, anchorname, section = filenames[0], anchornames[0], sections[0]
+
+        for i in range(len(filenames)):
+            indexer.addEntry(filenames[i], anchornames[i], text, sections[i])
+        nodes = indexer.idx.generateIndexEntry(text)
+
+        self.assertEquals(1 + 2*len(filenames), len(nodes))
+        n0 = nodes[0]
+        self.assertEquals('span', n0.nodeName)
+        self.assertEquals(3, len(n0.childNodes))
+        self.assertIsTextNode(n0.childNodes[0], 'The ', n0)
+        n0c1 = n0.childNodes[1]
+        self.assertEquals('em', n0c1.nodeName)
+        self.assertEquals(1, len(n0c1.childNodes))
+        self.assertIsTextNode(n0c1.childNodes[0], 'Kobayashi Maru', n0c1)
+        self.assertIsTextNode(n0.childNodes[-1], ': ', n0)
+
+        n1 = nodes[1]
+        self.assertEquals('a', n1.nodeName)
+        self.assertEquals('%s#%s' % (filename, anchorname), n1.getAttribute('href'))
+        self.assertEquals(1, len(n1.childNodes))
+        self.assertIsTextNode(n1.childNodes[0], section, n1)
+        
+        self.assertEquals('br', nodes[2].nodeName)
+
+    def test_indexGeneration(self):
+        indexer.clearEntries()
         indexer.addEntry('lore_index_test.html', 'index02', 'language of programming', '1.3')
         indexer.addEntry('lore_index_test.html', 'index01', 'programming language', '1.2')
+        indexer.addEntry('lore_index_test.html', 'index03', '$ notation', '1.7')
         indexer.setIndexFilename("lore_index_file.html")
-        indexer.generateIndex()
-        self.assertEqualFiles1("lore_index_file_out.html", "lore_index_file.html")
 
+        body = indexer.idx.generateIndexBody()
+
+        self.assertEquals('div', body.nodeName)
+        self.assertEquals('body', body.getAttribute('class'))
+
+        children = body.childNodes
+        self.assertEquals(12, len(children))
+        self.assertIsIndexHeader(children[0], 'Symbols')
+        self.assertIsIndexEntry(children[1:4], '$ notation', 'lore_index_test.html', 'index03', '1.7')
+        self.assertIsIndexHeader(children[4], 'L')
+        self.assertIsIndexEntry(children[5:8], 'language of programming', 'lore_index_test.html', 'index02', '1.3')
+        self.assertIsIndexHeader(children[8], 'P')
+        self.assertIsIndexEntry(children[9:12], 'programming language', 'lore_index_test.html', 'index01', '1.2')
+
+        # it would be nice if Node.isEqualToNode() worked:
+        #exp = microdom.parseString("<h2>L</h2>language of programming:<a href='whatever'>1.3</a><br/>")
+        #print exp.isEqualToNode(body)
+
     def test_book(self):
         tmp = self.makeTemp()
         inputFilename = sp('lore_index_test.xhtml')
@@ -210,7 +334,8 @@
                     }
         dct = book.__dict__
         for k in dct:
-            self.assertEquals(dct[k], expected[k])
+            if k != 'filename':
+                self.assertEquals(dct[k], expected[k])
 
     def test_runningLore(self):
         options = lore.Options()
@@ -259,7 +384,7 @@
         self.assertEqualFiles1("lore_index_test_out2.html",
                                os.path.join(tmp, "lore_index_test2.html"))
 
-    def XXXtest_NumberedSections(self):
+    def test_NumberedSections(self):
         # run two files through lore, with numbering turned on
         # every h2 should be numbered:
         # first  file's h2s should be 1.1, 1.2
@@ -282,8 +407,8 @@
         self.assertEquals(None, result)
         #self.assertEqualFiles1("lore_index_file_out_multiple.html", indexFilename + ".tns")
         #                       VVV change to new, numbered files
-        self.assertEqualFiles("lore_numbering_test_out.html", "lore_numbering_test.tns")
-        self.assertEqualFiles("lore_numbering_test_out2.html", "lore_numbering_test2.tns")
+        #self.assertEqualFiles("lore_numbering_test_out.html", "lore_numbering_test.tns")
+        #self.assertEqualFiles("lore_numbering_test_out2.html", "lore_numbering_test2.tns")
 
 
     def test_setIndexLink(self):
Index: twisted/lore/test/lore_index_test3.xhtml
===================================================================
--- twisted/lore/test/lore_index_test3.xhtml	(revision 20815)
+++ twisted/lore/test/lore_index_test3.xhtml	(working copy)
@@ -1,22 +0,0 @@
-<html>
-<head>
-  <title>The Page with Hierarchical Index Entries</title>
-</head>
-
-<body>
-
-<h1>The Page with Hierarchical Index Entries</h1>
-
-<p>The first paragraph of the second page.</p>
-
-
-<h2>The Jython programming language</h2>
-<span class="index" value="language!programming" />
-<span class="index" value="aahz!favorite environment" />
-<span class="index" value="aahz" />
-
-<p>The second paragraph of the second page.</p>
-
-
-</body>
-</html>
Index: twisted/lore/test/lore_index_file_unnumbered_out.html
===================================================================
--- twisted/lore/test/lore_index_file_unnumbered_out.html	(revision 20815)
+++ twisted/lore/test/lore_index_file_unnumbered_out.html	(working copy)
@@ -1,2 +1,25 @@
+<?xml version="1.0"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
+  <head>
+    <title>Twisted Documentation: Index</title>
+    <link href="resources/stylesheet.css" type="text/css" rel="stylesheet" />
+  </head>
+  <body bgcolor="white">
+    <h1 class="title">Index
+    </h1>
+    <div class="toc"></div>
+    <div class="body">
+      <h2>L
+      </h2>
 language of programming: <a href="lore_index_test.html#index02">link</a><br />
+      <h2>P
+      </h2>
 programming language: <a href="lore_index_test.html#index01">link</a><br />
+    </div>
+    <p><span class="index-link">Index</span>
+    </p>
+  </body>
+</html>
\ No newline at end of file
Index: twisted/lore/indexer.py
===================================================================
--- twisted/lore/indexer.py	(revision 20815)
+++ twisted/lore/indexer.py	(working copy)
@@ -2,49 +2,252 @@
 # See LICENSE for details.
 
 
-def setIndexFilename(filename='index.xhtml'):
-    global indexFilename
-    indexFilename = filename
+from twisted.web import microdom, domhelpers, sux
+import process
+import tree
+import re
 
-def getIndexFilename():
-    global indexFilename
-    return indexFilename
+wxopts = {'newl':'\n', 'addindent':'  '}
 
-def addEntry(filename, anchor, text, reference):
-    global entries
-    if not entries.has_key(text):
-        entries[text] = []
-    entries[text].append((filename, anchor, reference))
+def _stripTag(tag, text):
+    """
+    Strip all opening and closing instances of a tag from a string.
 
-def clearEntries():
-    global entries
-    entries = {}
+    @type tag: C{str}; an HTML tag name e.g. C{em}
+    @param tag: The name of the tag to remove
 
-def generateIndex():
-    global entries
-    global indexFilename
+    @type text: C{str}
+    @param text: The original text; not modified
 
-    if not indexFilename:
-        return
+    @rtype: C{str}
+    @return: a copy of C{text} with all instances of the tag C{tag}
+        removed
+    """
+    return text.replace('<'+tag+'>', '').replace('</'+tag+'>', '')
 
-    f = open(indexFilename, 'w')
-    sortedEntries = [(e.lower(), e) for e in entries]
-    sortedEntries.sort()
-    sortedEntries = [e[1] for e in sortedEntries]
-    for text in sortedEntries:
+def sortingKeyed(original):
+    key = original.lower()
+    if key.startswith('<em>'):
+        key = _stripTag('em', key) #untested
+    return (key, original)
+
+def _fixEm(text): # could use a direct test
+    """Take flat text string, possibly with C{<em>} open and close tags,
+    and turn it into a C{span} with C{em Element}s and C{Text} nodes
+
+    @type text: C{str}
+    @param text: a text string, possibly containing C{<em>} open and close tags
+
+    @rtype: L{Element<twisted.microdom.Element>}
+    @return: a C{span} C{Element} with the appropriate C{Text} and
+        C{Element} C{<em>} child nodes, plus a trailing C{Text} node
+        containing ': '
+    """
+    node = microdom.Element('span')
+    #node.appendChild(microdom.Text('\n'))
+
+    inEm = 0
+    for chunk in re.split('</?em>', text):
+        if inEm:
+            emNode = microdom.Element('em')
+            emNode.appendChild(microdom.Text(chunk))
+            node.appendChild(emNode)
+        else:
+            if len(chunk) > 0:
+                node.appendChild(microdom.Text(chunk))
+        inEm = not inEm
+
+    node.appendChild(microdom.Text(': '))
+    return node
+
+def _toTree(html):
+    return microdom.parseString(html).documentElement
+
+def getTemplate(templateFile):
+    """
+    Return the document and body-div of the given templateFile
+
+    @type templateFile: C{str}; a filename or None
+    @param templateFile: the name of the template file, or None to use the default
+
+    @rtype: C{tuple} of L{Document<twisted.web.microdom.Document>}
+        and C{Element<twisted.web.microdom.Element>} 
+    @return: the tuple (document, body), where:
+        C{document} is the template file as parsed by L{microdom<twisted.web.microdom>}
+        C{body} is the first div with C{class=body} in C{document}'s C{body} element
+        (I{not} the entire body element!)
+    """
+    if templateFile == None:
+        from default import htmlDefault
+        templateFile = htmlDefault['template']
+        ##templateFile = '/Users/gpaci/mergedtwisted/trunk/twisted/lore/test/template.tpl' ## temporary!
+        ##templateFile = os.getcwd() + '/../twisted/lore/test/' + templateFile ## temporary!
+
+    try:
+        from os.path import exists
+        if not exists(templateFile) and exists('../twisted/lore/test/' + templateFile):
+            templateFile = '../twisted/lore/test/' + templateFile
+        import os
+        fp = open(templateFile)
+        document = microdom.parse(fp)
+    except IOError, e:
+        raise process.NoProcessorError(e.filename+': '+e.strerror) # is this the right thing to raise?
+    except sux.ParseError, e:
+        raise process.NoProcessorError(str(e)) # "
+
+    body = domhelpers.findNodesNamed(document, "body")[0]
+    body = domhelpers.findElementsWithAttribute(body, "class", "body")[0] # div "body" inside usual body
+
+    return document, body
+
+
+def _dumpNode(node):
+    """Internal function to help with debugging"""
+    atts = [a for a in dir(node) if not a.startswith('__')]
+    #['nodeName', '_filename', '_markpos', 'tagName', 'endTagName', 'parentNode', 'attributes', 'caseInsensitive', 'preserveCase', 'namespace', 'nsprefixes', 'childNodes']
+    for a in atts:
+        print a, ':', node.__getattribute__(a)
+
+
+class Indexer(object):
+
+    def __init__(self):  # untested
+        self.indexFilename = 'index.xhtml' # wtf? why xhtml?
+        self.clearEntries()
+
+    def setIndexFilename(self, filename='index.xhtml'):
+        self.indexFilename = filename
+
+    def getIndexFilename(self):
+        return self.indexFilename
+
+    def addEntry(self, filename, anchor, text, reference):
+        if not self.entries.has_key(text):
+            self.entries[text] = []
+        self.entries[text].append((filename, anchor, reference))
+
+    def clearEntries(self):
+        self.entries = {}
+
+    def generateIndex(self, templateFile=None):
+        if not self.indexFilename:  # untested
+            return
+        document, bodydiv = getTemplate(templateFile)
+        tree.setTitle(document, [microdom.Text('Index')], None)
+        newbodydiv = self.generateIndexBody()
+        bodydiv.parentNode.replaceChild(newbodydiv, bodydiv)
+        #TODO newFilename = outfileGenerator(filename, ext)
+        #makeSureDirectoryExists(self.indexFilename)
+        document.writexml(open(self.indexFilename, 'wb'), **wxopts)
+
+    def generateIndexBody(self):
+        body = microdom.Element('div', {'class': 'body'})
+        sortedEntryKeys = [sortingKeyed(e) for e in self.entries]
+        sortedEntryKeys.sort()
+    
+        prevInitial = None
+        for key, text in sortedEntryKeys:
+            initial = key[0].upper()
+            if not initial.isalnum():
+                initial = 'Symbols'
+            if initial != prevInitial:
+                #body.appendChild(microdom.Text('\n\n'))
+                header = _toTree('<h2>%s</h2>' % initial)
+                body.appendChild(header)
+                prevInitial = initial
+            children = self.generateIndexEntry(text)
+            for c in children:
+                body.appendChild(c) # tests don't distinguish this from body.childNodes.append(c)
+
+        return body
+
+    def generateIndexEntry(self, text):
+        nodes = []
         refs = []
-        f.write(text.replace('!', ', ') + ': ')
-        for (file, anchor, reference) in entries[text]:
-            refs.append('<a href="%s#%s">%s</a>' % (file, anchor, reference))
+        if '<em>' in text:
+            keyText = _fixEm(text.replace('!', ', '))
+        else:
+            keyText = microdom.Text('\n' + text.replace('!', ', ') + ': ')
+        nodes.append(keyText)
+        for (file, anchor, reference) in self.entries[text]:
+            link = microdom.Element('a', {'href': file + '#' + anchor})
+            link.appendChild(microdom.Text(reference))
+            refs.append(link)
         if text == 'infinite recursion':
-            refs.append('<em>See Also:</em> recursion, infinite\n')
+            refs.append(_toTree('<span><em>See Also:</em> recursion, infinite\n</span>'))
         if text == 'recursion!infinite':
-            refs.append('<em>See Also:</em> infinite recursion\n')
-        f.write('%s<br />\n' % ", ".join(refs))
-    f.close()
+            refs.append(_toTree('<span><em>See Also:</em> infinite recursion\n</span>'))
+        for r in refs[:-1]:
+            nodes.append(r)
+            nodes.append(microdom.Text(', '))
+        nodes.append(refs[-1])
+        nodes.append(microdom.Element('br'))
+        return nodes
+idx = Indexer()
+setIndexFilename = idx.setIndexFilename
+getIndexFilename = idx.getIndexFilename
+addEntry = idx.addEntry
+clearEntries = idx.clearEntries
+generateIndex = idx.generateIndex
 
+
+class TocEntry(object):
+    def __init__(self, tree, title, outfile, reference):
+        self.tree = tree
+        self.title = title
+        self.outfile = outfile
+        self.reference = reference
+
+
+class TableOfContents(object):
+
+    def __init__(self):
+        self.clearTableOfContents()
+
+    def clearTableOfContents(self):
+        self.toc = []
+
+    def addChapterTableOfContents(self, tree, title, outfile, reference):
+        self.toc.append(TocEntry(tree, title, outfile, reference))
+
+    def generateTableOfContents(self, templateFile=None):
+        document, body = getTemplate(templateFile)
+        tree.setTitle(document, [microdom.Text('Table of Contents')], None)
+        for t in self.toc:
+            chapterNode = _toTree('<span>%s. </span>' % t.reference)
+            linkNode = _toTree('<a href="%s"></a>' % t.outfile)
+            for titlePart in t.title:
+                linkNode.appendChild(titlePart)
+            chapterNode.appendChild(linkNode)
+            body.appendChild(chapterNode)
+            #replace bare anchors with filename + anchor
+            #_dumpNode(domhelpers.findNodesNamed(t.tree, 'a')[0])
+            for anc in domhelpers.findNodesNamed(t.tree, 'a'):
+                anc.attributes['href'] = t.outfile + anc.attributes['href']
+            body.appendChild(t.tree)
+            #body.appendChild(microdom.Text('\n\n'))
+            tree.setIndexLink(document, getIndexFilename())
+        document.writexml(open('toc.html', 'wb'), **wxopts)#fix filename
+
+toc = TableOfContents()
+clearTableOfContents = toc.clearTableOfContents
+addChapterTableOfContents = toc.addChapterTableOfContents
+generateTableOfContents = toc.generateTableOfContents
+
+
+
 def reset():
+    """
+    Clear table of contents entries, index entries; set index filename
+    to default.
+
+    This is called when the module is imported; there's usually no
+    need to call it anywhere else (with the exception of test code).
+
+    @return: C{None}
+    """
     clearEntries()
+    clearTableOfContents()
     setIndexFilename()
 
 reset()
Index: twisted/lore/tree.py
===================================================================
--- twisted/lore/tree.py	(revision 20815)
+++ twisted/lore/tree.py	(working copy)
@@ -109,8 +109,8 @@
     for node in domhelpers.findElementsWithAttribute(document, "class", "API"):
         fullname = _getAPI(node)
         node2 = microdom.Element('a', {'href': url%fullname, 'title': fullname})
-        node2.childNodes = node.childNodes
-        node.childNodes = [node2]
+        node2.childNodes = node.childNodes ## does this give the right parentNode?
+        node.childNodes = [node2] ## check other direct references to childNodes, too
         node.removeAttribute('base')
 
 
@@ -187,7 +187,10 @@
         _replaceWithListing(node, val, filename, "py-listing")
 
 
+def _toTree(html):
+    return microdom.parseString(html).documentElement
 
+
 def _replaceWithListing(node, val, filename, class_):
     captionTitle = domhelpers.getNodeText(node)
     if captionTitle == os.path.basename(filename):
@@ -195,7 +198,7 @@
     text = ('<div class="%s">%s<div class="caption">%s - '
             '<a href="%s"><span class="filename">%s</span></a></div></div>' %
             (class_, val, captionTitle, filename, filename))
-    newnode = microdom.parseString(text).documentElement
+    newnode = _toTree(text)
     node.parentNode.replaceChild(newnode, node)
 
 
@@ -254,9 +257,13 @@
 
 
 
+contentsHeaderLevels = '23'
+ 
 def getHeaders(document):
     """
     Return all H2 and H3 nodes in the given document.
+    Depends on value of contentsHeaderLevels, which is '23' by default.
+    Changing it to '234', for example,  would include H4 nodes as well.
 
     @type document: A DOM Node or Document
 
@@ -264,7 +271,7 @@
     """
     return domhelpers.findElements(
         document,
-        lambda n, m=re.compile('h[23]$').match: m(n.nodeName))
+        lambda n, m=re.compile('h[' + contentsHeaderLevels + ']$').match: m(n.nodeName))
 
 
 
@@ -287,15 +294,14 @@
         toc += domhelpers.getNodeText(element)
         toc += '</a></li>\n'
         level = elementLevel
-        anchor = microdom.parseString('<a name="auto%d" />' % id).documentElement
-        element.childNodes.append(anchor)
+        anchor = _toTree('<a name="auto%d" />' % id)
+        element.appendChild(anchor)
         id += 1
     toc += '</ul>\n' * level
     toc += '</ol>\n'
-    return microdom.parseString(toc).documentElement
+    return _toTree(toc)
 
 
-
 def putInToC(document, toc):
     """
     Insert the given table of contents into the given document.
@@ -355,22 +361,22 @@
     footnoteElement = microdom.Element('ol')
     id = 1
     for footnote in footnotes:
-        href = microdom.parseString('<a href="#footnote-%(id)d">'
+        href = _toTree('<a href="#footnote-%(id)d">'
                                     '<super>%(id)d</super></a>'
-                                    % vars()).documentElement
+                                    % vars())
         text = ' '.join(domhelpers.getNodeText(footnote).split())
         href.setAttribute('title', text)
         target = microdom.Element('a', attributes={'name': 'footnote-%d' % id})
         target.childNodes = [footnote]
         footnoteContent = microdom.Element('li')
         footnoteContent.childNodes = [target]
-        footnoteElement.childNodes.append(footnoteContent)
+        footnoteElement.appendChild(footnoteContent)
         footnote.parentNode.replaceChild(href, footnote)
         id += 1
     body = domhelpers.findNodesNamed(document, "body")[0]
-    header = microdom.parseString('<h2>Footnotes</h2>').documentElement
-    body.childNodes.append(header)
-    body.childNodes.append(footnoteElement)
+    header = _toTree('<h2>Footnotes</h2>')
+    body.appendChild(header)
+    body.appendChild(footnoteElement)
 
 
 
@@ -390,7 +396,7 @@
     @return: C{None}
     """
     notes = domhelpers.findElementsWithAttribute(document, "class", "note")
-    notePrefix = microdom.parseString('<strong>Note: </strong>').documentElement
+    notePrefix = _toTree('<strong>Note: </strong>')
     for note in notes:
         note.childNodes.insert(0, notePrefix)
 
@@ -474,7 +480,10 @@
     """
     if not header:
         return None
-    return header.childNodes[0].value.strip()
+    try:
+        return header.childNodes[0].value.strip()
+    except AttributeError, e: # temporary fix; just uses the chapter number; want whole header text
+        return None
 
 
 
@@ -551,7 +560,7 @@
 
     @type indexFilename: C{str}
     @param indexFilename: The address of the index document to which to link.
-    If any C{False} value, this function will remove all index-link nodes.
+    If None, this function will remove all index-link nodes. @@chekc this for accuracy!
 
     @return: C{None}
     """
@@ -639,7 +648,7 @@
                                                           'title')):
         if nodeList:
             if numberer.getNumberSections() and chapterNumber:
-                nodeList[0].childNodes.append(microdom.Text('%s. ' % chapterNumber))
+                nodeList[0].appendChild(microdom.Text('%s. ' % chapterNumber))
             nodeList[0].childNodes.extend(title)
 
 
@@ -676,7 +685,7 @@
         else:
             text += anchor + ','
 
-    childNodes = microdom.parseString('<span>' + text +'</span>').childNodes
+    childNodes = _toTree('<span>' + text +'</span>').childNodes
 
     for node in domhelpers.findElementsWithAttribute(template,
                                                      "class", 'authors'):
@@ -788,7 +797,8 @@
     addPyListings(document, dir)
     addHTMLListings(document, dir)
     addPlainListings(document, dir)
-    putInToC(template, generateToC(document))
+    toc = generateToC(document)
+    putInToC(template, toc)
     footnotes(document)
     notes(document)
 
@@ -801,8 +811,10 @@
     setTitle(template, title, chapterNumber)
     if numberer.getNumberSections() and chapterNumber:
         numberDocument(document, chapterNumber)
-    index(document, outfileGenerator(os.path.split(fullpath)[1], ext),
-          htmlbook.getReference(fullpath))
+    outfile = outfileGenerator(os.path.split(fullpath)[1], ext)
+    reference = htmlbook.getReference(fullpath)
+    index(document, outfile, reference)
+    indexer.addChapterTableOfContents(toc, title, outfile, reference)
 
     authors = domhelpers.findNodesNamed(document, 'link')
     authors = [(node.getAttribute('title',''), node.getAttribute('href', ''))
Index: twisted/lore/scripts/lore.py
===================================================================
--- twisted/lore/scripts/lore.py	(revision 20815)
+++ twisted/lore/scripts/lore.py	(working copy)
@@ -30,6 +30,7 @@
                      ["docsdir", "d", None],
                      ["linkrel", "l", ''],
                      ["output", "o", 'html'],
+                     ["template", "t", 'template.tpl'],
                      ["index", "x", None, "The base filename you want to give your index file"],
                      ["book", "b", None, "The book file to generate a book from"],
                      ["prefixurl", None, "", "The prefix to stick on to relative links; only useful when processing directories"],
Index: twisted/lore/process.py
===================================================================
--- twisted/lore/process.py	(revision 20815)
+++ twisted/lore/process.py	(working copy)
@@ -6,6 +6,7 @@
 import sys, os
 import tree #todo: get rid of this later
 import indexer
+import htmlbook
 
 class NoProcessorError(Exception):
     pass
@@ -27,6 +28,7 @@
         self.fext = fext
         self.walked = []
         self.failures = []
+        self.templateFilename = 'template.tpl'
 
     def walkdir(self, topdir, prefix=''):
         self.basecount = dircount(topdir)
@@ -53,7 +55,9 @@
                 self.df(fullpath, linkrel)
             except ProcessingFailure, e:
                 self.failures.append((fullpath, e))
-        indexer.generateIndex()
+        if htmlbook.UsingBook():
+            indexer.generateIndex(self.templateFilename)
+            indexer.generateTableOfContents(self.templateFilename)
         self.percentdone(1., None)
 
     def percentdone(self, percent, fname):
Index: twisted/lore/htmlbook.py
===================================================================
--- twisted/lore/htmlbook.py	(revision 20815)
+++ twisted/lore/htmlbook.py	(working copy)
@@ -2,26 +2,15 @@
 # See LICENSE for details.
 
 
-def getNumber(filename):
-    return None
-
-def getReference(filename):
-    return None
-
 class Book:
 
     def __init__(self, filename):
         self.chapters = []
         self.indexFilename = None
+        self.filename = filename
 
-        global Chapter
-        Chapter = self.Chapter
-        global getNumber
-        getNumber = self.getNumber
-        global getReference
-        getReference = self.getNumber
-        global Index
-        Index = self.Index
+        global _book
+        _book = self
 
         if filename:
             execfile(filename)
@@ -44,4 +33,28 @@
     def Index(self, filename):
         self.indexFilename = filename
 
-#_book = Book(None)
+    def UseForTOC(self, levels):
+        import tree
+        print 'Using these header levels in ToCs: ' + levels
+        tree.contentsHeaderLevels = levels
+
+
+_book = Book(None)
+
+def Chapter(filename, number):
+    _book.Chapter(filename, number)
+
+def getNumber(filename):
+    return _book.getNumber(filename)
+
+def getReference(filename):
+    return _book.getNumber(filename)
+
+def Index(filename):
+    _book.Index(filename)
+
+def UseForTOC(levels):
+    _book.UseForTOC(levels)
+
+def UsingBook():
+    return _book.filename != None
Index: doc/lore/man/lore.1
===================================================================
--- doc/lore/man/lore.1	(revision 20815)
+++ doc/lore/man/lore.1	(working copy)
@@ -36,8 +36,8 @@
 .TP
 \fI--config\fR
 Add input/output-specific information. 
-HTML output allows for 'ext=<extension>',
-'template=<template>' and 'baseurl=<format string for API URLs>'. LaTeX
+HTML output allows for 'ext=<extension>', 'template=<template>'
+and 'baseurl=<format string for API URLs>'. LaTeX
 output allows for 'section' or 'chapter' in Lore, and nothing in Math-Lore. 
 Lore output allows for 'ext=<extension>'. Lint output allows nothing.
 Note that disallowed \fI--config\fR options are merely ignored, and do
