Index: twisted/lore/test/sections_not_numbered_out.html
===================================================================
--- twisted/lore/test/sections_not_numbered_out.html	(revision 0)
+++ twisted/lore/test/sections_not_numbered_out.html	(revision 0)
@@ -0,0 +1,2 @@
+<?xml version="1.0"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>Twisted Documentation: The way of the program</title><link href="resources/stylesheet.css" type="text/css" rel="stylesheet" /></head><body bgcolor="white"><h1 class="title">The way of the program</h1><div class="toc"><ol><li><a href="#auto0">The Python programming language</a></li><li><a href="#auto1">Section The Second</a></li><li><a href="#auto2">Section The Third</a></li></ol></div><div class="content"><span></span><p>The first paragraph.</p><h2>The Python programming language<a name="auto0"></a></h2><a name="index01"></a><a name="index02"></a><p>The second paragraph.</p><h2>Section The Second<a name="auto1"></a></h2><p>The second section.</p><h2>Section The Third<a name="auto2"></a></h2><p>The Third section.</p></div><p><a href="theIndexFile.html">Index</a></p></body></html>
\ No newline at end of file
Index: twisted/lore/test/test_lore.py
===================================================================
--- twisted/lore/test/test_lore.py	(revision 20871)
+++ twisted/lore/test/test_lore.py	(working copy)
@@ -45,6 +45,8 @@
 #
 
 import os, shutil
+from os.path import join
+
 from StringIO import StringIO
 
 from twisted.trial import unittest
@@ -71,7 +73,9 @@
 def filenameGenerator2(originalFileName, outputExtension):
     return os.path.splitext(originalFileName)[0]+"2"+outputExtension
 
+DONTCARE = object()
 
+
 class TestFactory(unittest.TestCase):
 
     file = sp('simple.html')
@@ -103,11 +107,11 @@
         tmp = self.mktemp()
         os.mkdir(tmp)
         for filename in filenames:
-            tmpFile = os.path.join(tmp, filename)
+            tmpFile = join(tmp, filename)
             shutil.copyfile(sp(filename), tmpFile)
         return tmp
 
-    def assertIsTextNode(self, node, contents=None, parent='DONTCARE'):
+    def assertIsTextNode(self, node, contents=None, parent=DONTCARE):
         """
         Check that C{node} is an instance of C{microdom.Text} and
         that its contents are C{contents}.
@@ -116,7 +120,7 @@
         self.assertTrue(isinstance(node, microdom.Text))
         if contents:
             self.assertEquals(contents, node.nodeValue)
-        if parent != 'DONTCARE': # sentinel value, since we might want to check for None
+        if parent != DONTCARE: # sentinel value, since we might want to check for None
             self.assertEquals(parent, node.parentNode)
 
 ########################################
@@ -175,7 +179,7 @@
         self.assertEqualFiles('good_simple.xhtml', 'simple4foo.xhtml')
 
     def test_outputdirGenerator(self):
-        normp = os.path.normpath; join = os.path.join
+        normp = os.path.normpath
         inputdir  = normp(join("/", 'home', 'joe'))
         outputdir = normp(join("/", 'away', 'joseph'))
         actual = process.outputdirGenerator(join("/", 'home', 'joe', "myfile.html"),
@@ -188,11 +192,11 @@
         self.assertRaises(ValueError, process.outputdirGenerator, '.html', '.xhtml', **options)
 
     def test_makeSureDirectoryExists(self):
-        dirname = os.path.join("tmp", 'nonexistentdir')
+        dirname = join("tmp", 'nonexistentdir')
         if os.path.exists(dirname):
             os.rmdir(dirname)
         self.failIf(os.path.exists(dirname), "Hey: someone already created the dir")
-        filename = os.path.join(dirname, 'newfile')
+        filename = join(dirname, 'newfile')
         tree.makeSureDirectoryExists(filename)
         self.failUnless(os.path.exists(dirname), 'should have created dir')
         os.rmdir(dirname)
@@ -239,10 +243,10 @@
         templ = microdom.parse(open(d['template']))
         tmp = self.makeTemp('lore_index_test.xhtml')
 
-        tree.doFile(os.path.join(tmp, 'lore_index_test.xhtml'),
+        tree.doFile(join(tmp, 'lore_index_test.xhtml'),
                     self.linkrel, '.html', d['baseurl'], templ, d)
         self.assertEqualFiles1("lore_index_test_out.html",
-                               os.path.join(tmp, "lore_index_test.html"))
+                               join(tmp, "lore_index_test.html"))
 
     def assertIsIndexHeader(self, node, letter):
         """
@@ -310,7 +314,6 @@
         nodes = indexer.idx.generateIndexEntry(text)
 
         self.assertIsIndexEntry(nodes, text, zip(filenames, anchornames, sections))
-        #self.assertIsIndexEntry(nodes, text, [(filename, anchorname, section), (filename2, anchorname2, section2)])
 
     def test_indexEntryGenerationSymbol(self):
         """
@@ -407,7 +410,7 @@
         tmp = self.makeTemp()
         inputFilename = sp('lore_index_test.xhtml')
 
-        bookFilename = os.path.join(tmp, 'lore_test_book.book')
+        bookFilename = join(tmp, 'lore_test_book.book')
         bf = open(bookFilename, 'w')
         bf.write('chapter(r"%s", None)\r\n' % inputFilename)
         bf.close()
@@ -426,10 +429,10 @@
         tmp = self.makeTemp('lore_index_test.xhtml')
 
         templateFilename = sp('template.tpl')
-        inputFilename = os.path.join(tmp, 'lore_index_test.xhtml')
+        inputFilename = join(tmp, 'lore_index_test.xhtml')
         indexFilename = 'theIndexFile'
 
-        bookFilename = os.path.join(tmp, 'lore_test_book.book')
+        bookFilename = join(tmp, 'lore_test_book.book')
         bf = open(bookFilename, 'w')
         bf.write('chapter(r"%s", None)\n' % inputFilename)
         bf.close()
@@ -445,11 +448,11 @@
     def test_runningLoreMultipleFiles(self):
         tmp = self.makeTemp('lore_index_test.xhtml', 'lore_index_test2.xhtml')
         templateFilename = sp('template.tpl')
-        inputFilename = os.path.join(tmp, 'lore_index_test.xhtml')
-        inputFilename2 = os.path.join(tmp, 'lore_index_test2.xhtml')
+        inputFilename = join(tmp, 'lore_index_test.xhtml')
+        inputFilename2 = join(tmp, 'lore_index_test2.xhtml')
         indexFilename = 'theIndexFile'
 
-        bookFilename = os.path.join(tmp, 'lore_test_book.book')
+        bookFilename = join(tmp, 'lore_test_book.book')
         bf = open(bookFilename, 'w')
         bf.write('chapter(r"%s", None)\n' % inputFilename)
         bf.write('chapter(r"%s", None)\n' % inputFilename2)
@@ -464,10 +467,11 @@
         self.assertEquals(None, result)
         self.assertEqualFiles1("lore_index_file_unnumbered_multiple_out.html", indexFilename + ".html")
         self.assertEqualFiles1("lore_index_test_out.html",
-                               os.path.join(tmp, "lore_index_test.html"))
+                               join(tmp, "lore_index_test.html"))
         self.assertEqualFiles1("lore_index_test_out2.html",
-                               os.path.join(tmp, "lore_index_test2.html"))
+                               join(tmp, "lore_index_test2.html"))
 
+
     def test_NumberedSections(self):
         """
         When Lore is run with --number specified, the first file\'s numbered
@@ -478,28 +482,68 @@
         # every h2 should be numbered:
         # first  file's h2s should be 1.1, 1.2
         # second file's h2s should be 2.1, 2.2
-        templateFilename = sp('template.tpl')
-        inputFilename = sp('lore_numbering_test.xhtml')
-        inputFilename2 = sp('lore_numbering_test2.xhtml')
         indexFilename = 'theIndexFile'
+        templateFilename = 'template.tpl'
+        inputFilename = 'lore_numbering_test.xhtml'
+        inputFilename2 = 'lore_numbering_test2.xhtml'
+        tmp = self.makeTemp(templateFilename, inputFilename, inputFilename2)
 
-        # you can number without a book:
+        bookFilename = 'numberedsections.book'
+        bf = open(join(tmp, bookFilename), 'w')
+        bf.write('chapter(r"%s", 1)\n' % inputFilename)
+        bf.write('chapter(r"%s", 2)\n' % inputFilename2)
+        bf.close()
+
+        oldwd = os.getcwd()
+        os.chdir(tmp)
         options = lore.Options()
         options.parseOptions(['--null',
-                              '--index=%s' % indexFilename,
+                              '--index=%s' % indexFilename,'--book=%s' % bookFilename,
                               '--config', 'template=%s' % templateFilename,
                               '--config', 'ext=%s' % ".tns",
                               '--number',
-                              inputFilename, inputFilename2])
+                              ])
         result = lore.runGivenOptions(options)
+        os.chdir(oldwd)
 
         self.assertEquals(None, result)
-        #self.assertEqualFiles1("lore_index_file_out_multiple.html", indexFilename + ".tns")
-        #                       VVV change to new, numbered files
-        #self.assertEqualFiles("lore_numbering_test_out.html", "lore_numbering_test.tns")
-        #self.assertEqualFiles("lore_numbering_test_out2.html", "lore_numbering_test2.tns")
+        #self.assertEqualFiles1("lore_index_file_out_multiple.html",
+        #                       join(tmp, indexFilename + ".tns"))
+        self.assertEqualFiles1("lore_numbering_test_out.html", join(tmp, "lore_numbering_test.tns"))
+        self.assertEqualFiles1("lore_numbering_test_out2.html", join(tmp, "lore_numbering_test2.tns"))
 
 
+    def test_sections_not_numbered(self):
+        """
+        When Lore is run with --number specified, but with no book file,
+        neither file\'s headings are numbererd.
+        """
+        # run two files through lore, with numbering turned on, but no book file
+        templateFilename = 'template.tpl' #instead, copy these files to temp dir
+        inputFilename = 'lore_numbering_test.xhtml'
+        inputFilename2 = 'lore_numbering_test2.xhtml'
+        tmp = self.makeTemp(templateFilename, inputFilename, inputFilename2)
+        indexFilename = 'theIndexFile'
+
+        # you can't number without a book:
+        options = lore.Options()
+        options.parseOptions(['--null',
+                              '--index=%s' % indexFilename,
+                              '--config', 'template=%s' % join(tmp, templateFilename),
+                              '--config', 'ext=%s' % ".tns",
+                              '--number',
+                              join(tmp, inputFilename),
+                              join(tmp, inputFilename2)])
+        result = lore.runGivenOptions(options)
+
+        self.assertEquals(None, result)
+        # no index file will be generated, since we're not using a book:
+        #self.assertEqualFiles1("lore_index_file_out_multiple.html",
+        #                       join(tmp, indexFilename + ".tns"))
+        self.assertEqualFiles1("sections_not_numbered_out.html", join(tmp, "lore_numbering_test.tns"))
+        self.assertEqualFiles1("sections_not_numbered_out2.html", join(tmp, "lore_numbering_test2.tns"))
+
+
     def test_setIndexLink(self):
         """
         Tests to make sure that index links are processed when an index page
Index: twisted/lore/test/sections_not_numbered_out2.html
===================================================================
--- twisted/lore/test/sections_not_numbered_out2.html	(revision 0)
+++ twisted/lore/test/sections_not_numbered_out2.html	(revision 0)
@@ -0,0 +1,2 @@
+<?xml version="1.0"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>Twisted Documentation: The second page to index</title><link href="resources/stylesheet.css" type="text/css" rel="stylesheet" /></head><body bgcolor="white"><h1 class="title">The second page to index</h1><div class="toc"><ol><li><a href="#auto0">The Jython programming language</a></li><li><a href="#auto1">Second Section</a></li><li><a href="#auto2">Third Section of Second Page</a></li></ol></div><div class="content"><span></span><p>The first paragraph of the second page.</p><h2>The Jython programming language<a name="auto0"></a></h2><a name="index01"></a><a name="index02"></a><a name="index03"></a><p>The second paragraph of the second page.</p><h2>Second Section<a name="auto1"></a></h2><p>The second section of the second page.</p><h2>Third Section of Second Page<a name="auto2"></a></h2><p>The Third section.</p></div><p><a href="theIndexFile.html">Index</a></p></body></html>
\ No newline at end of file
Index: twisted/lore/tree.py
===================================================================
--- twisted/lore/tree.py	(revision 20871)
+++ twisted/lore/tree.py	(working copy)
@@ -189,6 +189,16 @@
 
 
 def _toTree(html):
+    """
+    Take html text C{html} and convert it to a C{microdom} tree.
+    This is an internal helper method; do not call it.
+
+    @type html: C{str}
+    @param html: The text to parse
+
+    @rtype: C{microdom.Element}
+    @return: The root of the C{microdom} parse tree
+    """
     return microdom.parseString(html).documentElement
 
 
