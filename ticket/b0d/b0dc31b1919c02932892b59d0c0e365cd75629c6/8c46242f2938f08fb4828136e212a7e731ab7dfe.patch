Index: twisted/names/client.py
===================================================================
--- twisted/names/client.py	(revision 33692)
+++ twisted/names/client.py	(working copy)
@@ -543,8 +543,8 @@
 
     @type hosts: C{str} or C{None}
     @param hosts: If not C{None}, an alternate hosts file to use. If C{None}
-    on posix systems, /etc/hosts will be used. On windows, C:\windows\hosts
-    will be used.
+    on posix systems, /etc/hosts will be used. On windows,
+    %SYSTEMROOT%/system32/drivers/etc/hosts will be used.
 
     @rtype: C{IResolver}
     """
@@ -552,13 +552,9 @@
     if platform.getType() == 'posix':
         if resolvconf is None:
             resolvconf = '/etc/resolv.conf'
-        if hosts is None:
-            hosts = '/etc/hosts'
         theResolver = Resolver(resolvconf, servers)
         hostResolver = hostsModule.Resolver(hosts)
-    else:
-        if hosts is None:
-            hosts = r'c:\windows\hosts'
+    elif platform.isWindows():
         from twisted.internet import reactor
         bootstrap = _ThreadedResolverImpl(reactor)
         hostResolver = hostsModule.Resolver(hosts)
Index: twisted/names/hosts.py
===================================================================
--- twisted/names/hosts.py	(revision 33692)
+++ twisted/names/hosts.py	(working copy)
@@ -5,11 +5,13 @@
 """
 hosts(5) support.
 """
+import os
 
 from twisted.names import dns
 from twisted.persisted import styles
 from twisted.python import failure
 from twisted.python.filepath import FilePath
+from twisted.python.runtime import platform
 from twisted.internet import defer
 from twisted.internet.abstract import isIPAddress
 
@@ -70,6 +72,18 @@
 
 
 
+def findHostsFile():
+    """
+    Returns the location of the system hosts file for this platform
+    """
+    if platform.isWindows():
+        return os.environ['SYSTEMROOT'] + r'\system32\drivers\etc\hosts'
+    elif platform.getType() =='posix':
+        return '/etc/hosts'
+    # XXX: Raise unsupported-platform-error or something ?
+
+
+
 class Resolver(common.ResolverBase, styles.Versioned):
     """
     A resolver that services hosts(5) format files.
@@ -84,8 +98,9 @@
             self.typeToMethod[k] = getattr(self, v)
 
 
-    def __init__(self, file='/etc/hosts', ttl = 60 * 60):
+    def __init__(self, file=None, ttl = 60 * 60):
         common.ResolverBase.__init__(self)
+        if file is None: file = findHostsFile()
         self.file = file
         self.ttl = ttl
 
Index: twisted/names/test/test_hosts.py
===================================================================
--- twisted/names/test/test_hosts.py	(revision 33692)
+++ twisted/names/test/test_hosts.py	(working copy)
@@ -11,7 +11,8 @@
 
 from twisted.names.dns import (
     A, AAAA, IN, DomainError, RRHeader, Query, Record_A, Record_AAAA)
-from twisted.names.hosts import Resolver, searchFileFor, searchFileForAll
+from twisted.names.hosts import Resolver, searchFileFor, searchFileForAll, \
+    findHostsFile
 
 
 class SearchHostsFileTests(TestCase):
@@ -74,7 +75,15 @@
         self.assertEqual(searchFileFor(hosts.path, 'localhost'), '::1')
 
 
+    def test_findsSystemHostsFile(self):
+        """
+        Ensures that the system hosts file is correctly identified by
+        looking up the value for the 'localhost' entry
+        """
+        self.assertNotEqual(
+            None, searchFileFor(findHostsFile(), "localhost"))
 
+
 class SearchHostsFileForAllTests(TestCase):
     """
     Tests for L{searchFileForAll}, a helper which finds all addresses for a
