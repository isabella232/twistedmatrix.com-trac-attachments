Index: twisted/spread/pb.py
===================================================================
--- twisted/spread/pb.py	(revision 31381)
+++ twisted/spread/pb.py	(working copy)
@@ -77,17 +77,22 @@
 portno = 8787
 
 
+
 class ProtocolError(Exception):
     """
     This error is raised when an invalid protocol statement is received.
     """
 
+    
+    
 class DeadReferenceError(ProtocolError):
     """
     This error is raised when a method is called on a dead reference (one whose
     broker has been disconnected).
     """
 
+    
+    
 class Error(Exception):
     """
     This error can be raised to generate known error conditions.
@@ -98,17 +103,33 @@
     sent.
     """
 
+    
+    
 class RemoteError(Exception):
     """
     When the remote side of the connection returns an exception back, it comes
     in as a string. Raising string exceptions doesn't work in Python 2.6 or
     greater, so this exception is used instead.
+    The value of this exception will be a L{CopiedFailure} if the value on the
+    remote side was a L{twisted.python.failure.Failure}. Else it will be
+    the str() representation of the remote value.
+    
+    @param remoteType: The full import path of the exception class which was 
+        raised on the remote end.
+    @type remoteType: C{string}
+    @param remoteTraceback: The remote traceback.
+    @type remoteTraceback: C{string}
+    
+    @note: It's not possible to include the remoteTraceback if this exception is 
+        thrown into a generator. It must be accessed as attribute.
     """
-    def __init__(self, type, value):
-        Exception.__init__(self, type, value)
-        self.remoteType = type
-        self.value = value
+    def __init__(self, remoteType, value, remoteTraceback):
+        Exception.__init__(self, value)
+        self.remoteType = remoteType
+        self.remoteTraceback = remoteTraceback
 
+        
+        
 class RemoteMethod:
     """This is a translucent reference to a remote message.
     """
@@ -118,12 +139,15 @@
         self.obj = obj
         self.name = name
 
+        
     def __cmp__(self, other):
         return cmp((self.obj, self.name), other)
 
+    
     def __hash__(self):
         return hash((self.obj, self.name))
 
+    
     def __call__(self, *args, **kw):
         """Asynchronously invoke a remote method.
         """
@@ -156,6 +180,7 @@
 printTraceback = deprecated(Version("twisted", 8, 2, 0))(printTraceback)
 
 
+
 class IPerspective(Interface):
     """
     per*spec*tive, n. : The relationship of aspects of a subject to each
@@ -426,39 +451,56 @@
             state['traceback'] = 'Traceback unavailable\n'
         return state
 
+    
 
 class CopiedFailure(RemoteCopy, failure.Failure):
+    """A L{flavors.RemoteCopy} of a L{twisted.python.failure.Failure} transfered
+    via PB.
+    
+    @param type: The full import path of the exception class which was raised on
+        the remote end.
+    @type type: C{string}
+    @param value: A L{CopiedFailure} if the value on the remote side was a 
+        L{twisted.python.failure.Failure}. Else a str() representation of the 
+        remote value.
+    @type value: L{CopiedFailure} or C{string}
+    @param remoteTraceback: The remote traceback.
+    @type remoteTraceback: C{string}
+    """
+    
     def printTraceback(self, file=None, elideFrameworkCode=0, detail='default'):
         if file is None:
             file = log.logfile
         file.write("Traceback from remote host -- ")
         file.write(self.traceback)
 
+        
     def throwExceptionIntoGenerator(self, g):
-        """
-        Throw the original exception into the given generator,
+        """Throw the original exception into the given generator,
         preserving traceback information if available. In the case of a
         CopiedFailure where the exception type is a string, a L{pb.RemoteError}
         is thrown instead.
 
         @return: The next value yielded from the generator.
         @raise StopIteration: If there are no more values in the generator.
-        @raise anything else: Anything that the generator raises.
+        @raise RemoteError: The wrapped remote exception.
         """
-        if isinstance(self.type, (str, unicode)):
-            return g.throw(RemoteError(self.type, self.value))
-        return g.throw(self.type, self.value, self.tb)
+        return g.throw(RemoteError(self.type, self.value, self.tb))
 
     printBriefTraceback = printTraceback
     printDetailedTraceback = printTraceback
 
 setUnjellyableForClass(CopyableFailure, CopiedFailure)
 
+
+
 def failure2Copyable(fail, unsafeTracebacks=0):
     f = new.instance(CopyableFailure, fail.__dict__)
     f.unsafeTracebacks = unsafeTracebacks
     return f
 
+
+
 class Broker(banana.Banana):
     """I am a broker for objects.
     """
