Index: twisted/test/test_pb.py
===================================================================
--- twisted/test/test_pb.py	(revision 29368)
+++ twisted/test/test_pb.py	(working copy)
@@ -1773,3 +1894,27 @@
             Version("twisted", 8, 2, 0),
             pb.printTraceback,
             "printTraceback deprecation fake traceback value")
+
+
+class CopyableFailureTest(unittest.TestCase):
+    """
+    Test that CopyableFailures work as intended.
+    """
+    def test_throwExceptionIntoGenerator(self):
+        """
+        A L{pb.CopiedFailure} should be able to throw into a generator
+        successfully.
+        """
+        original = pb.CopyableFailure(AttributeError("foo"))
+        copy = pb.CopiedFailure(Exception("bar"))
+        copy.setCopyableState(original.getStateToCopy())
+        def generatorFunc():
+            try:
+                yield None
+            except pb.RemoteException, exc:
+                self.assertEqual(exc.message, "exceptions.AttributeError: foo")
+            else:
+                self.fail("RemoteException not raised")
+        gen = generatorFunc()
+        gen.send(None)
+        self.assertRaises(StopIteration, copy.throwExceptionIntoGenerator, gen)
Index: twisted/spread/pb.py
===================================================================
--- twisted/spread/pb.py	(revision 29368)
+++ twisted/spread/pb.py	(working copy)
@@ -98,6 +98,11 @@
     sent.
     """
 
+class RemoteException(Exception):
+    """
+    This error happened on the other side of the PB connection.
+    """
+
 class RemoteMethod:
     """This is a translucent reference to a remote message.
     """
@@ -423,6 +428,17 @@
         file.write("Traceback from remote host -- ")
         file.write(self.traceback)
 
+    def setCopyableState(self, state):
+        """
+        I will be invoked with the state to copy locally.
+
+        If the failure type is a string, turn it into a L{pb.RemoteException}.
+        """
+        RemoteCopy.setCopyableState(self, state)
+        if isinstance(self.type, str):
+            self.value = "%s: %s" % (self.type, self.value)
+            self.type = RemoteException
+
     printBriefTraceback = printTraceback
     printDetailedTraceback = printTraceback
  
