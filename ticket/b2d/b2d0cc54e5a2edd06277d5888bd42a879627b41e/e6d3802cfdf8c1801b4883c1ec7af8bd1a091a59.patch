diff --git twisted/internet/protocol.py twisted/internet/protocol.py
index 214b594..73ab587 100644
--- twisted/internet/protocol.py
+++ twisted/internet/protocol.py
@@ -16,6 +16,7 @@ from zope.interface import implementer
 
 from twisted.python import log, failure, components
 from twisted.internet import interfaces, error, defer
+from twisted.logger import Logger
 
 
 @implementer(interfaces.IProtocolFactory, interfaces.ILoggingContext)
@@ -33,6 +34,8 @@ class Factory:
     numPorts = 0
     noisy = True
 
+    log = Logger()
+
     @classmethod
     def forProtocol(cls, protocol, *args, **kwargs):
         """
@@ -68,7 +71,7 @@ class Factory:
         """
         if not self.numPorts:
             if self.noisy:
-                log.msg("Starting factory %r" % self)
+                self.log.info("Starting factory {factory!r}", factory=self)
             self.startFactory()
         self.numPorts = self.numPorts + 1
 
@@ -84,7 +87,7 @@ class Factory:
         self.numPorts = self.numPorts - 1
         if not self.numPorts:
             if self.noisy:
-                log.msg("Stopping factory %r" % self)
+                self.log.info("Stopping factory {factory!r}", factory=self)
             self.stopFactory()
 
     def startFactory(self):
diff --git twisted/internet/test/test_protocol.py twisted/internet/test/test_protocol.py
index d8ec055..3d47031 100644
--- twisted/internet/test/test_protocol.py
+++ twisted/internet/test/test_protocol.py
@@ -19,6 +19,7 @@ from twisted.internet.protocol import (
     ConsumerToProtocolAdapter)
 from twisted.trial.unittest import TestCase
 from twisted.test.proto_helpers import MemoryReactorClock, StringTransport
+from twisted.logger import Logger, formatEvent, LogLevel
 
 
 
@@ -393,6 +394,51 @@ class FactoryTests(TestCase):
         self.assertEqual(factory.kwargs, {"foo": 12})
 
 
+    def test_doStartLoggingStatement(self):
+        """
+        L{Factory.doStart} logs that it is starting a factory, followed by
+        the L{repr} of the L{Factory} instance that is being started.
+        """
+        events = []
+        class MyFactory(Factory):
+            log = Logger(observer=events.append)
+        f = MyFactory()
+
+        f.doStart()
+
+        self.assertIs(events[0]['factory'], f)
+        self.assertEqual(events[0]['log_level'], LogLevel.info)
+        self.assertEqual(events[0]['log_format'],
+                         'Starting factory {factory!r}')
+        self.assertEqual(
+            formatEvent(events[0]),
+            u'Starting factory {factory!r}'.format(factory=f)
+        )
+
+
+    def test_doStopLoggingStatement(self):
+        """
+        L{Factory.doStop} logs that it is stopping a factory, followed by
+        the L{repr} of the L{Factory} instance that is being stopped.
+        """
+        events = []
+        class MyFactory(Factory):
+            log = Logger(observer=events.append)
+            numPorts = 1
+        f = MyFactory()
+
+        f.doStop()
+
+        self.assertIs(events[0]['factory'], f)
+        self.assertEqual(events[0]['log_level'], LogLevel.info)
+        self.assertEqual(events[0]['log_format'],
+                         'Stopping factory {factory!r}')
+        self.assertEqual(
+            formatEvent(events[0]),
+            u'Stopping factory {factory!r}'.format(factory=f)
+        )
+
+
 
 class AdapterTests(TestCase):
     """
diff --git twisted/topfiles/7897.feature twisted/topfiles/7897.feature
new file mode 100644
index 0000000..14e6b5e
--- /dev/null
+++ twisted/topfiles/7897.feature
@@ -0,0 +1 @@
+twisted.internet.protocol.Factory now uses the new logging system (twisted.logger) for all it's logging statements.
