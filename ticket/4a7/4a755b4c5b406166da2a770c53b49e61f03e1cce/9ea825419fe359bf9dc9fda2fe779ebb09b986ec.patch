Index: twisted/trial/test/test_loader.py
===================================================================
--- twisted/trial/test/test_loader.py	(revision 31058)
+++ twisted/trial/test/test_loader.py	(working copy)
@@ -425,6 +425,16 @@
         suite2 = runner.TestSuite(map(self.loader.loadByName, modules))
         self.assertSuitesEqual(suite1, suite2)
 
+    def test_loadInheritedMethods(self):
+        """
+        Check that test methods names which are inherited from are all
+        loaded rather than just one.
+        """
+        methods = ['inheritance_sample.A.test_foo', 'inheritance_sample.B.test_foo']
+        suite1 = self.loader.loadByNames(methods)
+        suite2 = runner.TestSuite(map(self.loader.loadByName, methods))
+        self.assertSuitesEqual(suite1, suite2)
+        
 
 
 class ZipLoadingTest(LoaderTest):
Index: twisted/trial/test/inheritance_sample.py
===================================================================
--- twisted/trial/test/inheritance_sample.py	(revision 0)
+++ twisted/trial/test/inheritance_sample.py	(revision 0)
@@ -0,0 +1,21 @@
+# Copyright (c) 2001-2011 Twisted Matrix Laboratories.
+# See LICENSE for details
+
+"""This module is used by test_loader to test the Trial test loading
+functionality. Do NOT change the number of tests in this module.  Do NOT change
+the names the tests in this module.
+"""
+
+from twisted.trial import unittest
+
+class X(object):
+
+    def test_foo(self):
+        pass
+
+class A(unittest.TestCase, X):
+    pass
+
+class B(unittest.TestCase, X):
+    pass
+
Index: twisted/trial/runner.py
===================================================================
--- twisted/trial/runner.py	(revision 31058)
+++ twisted/trial/runner.py	(working copy)
@@ -664,12 +664,26 @@
             except:
                 errors.append(ErrorHolder(name, failure.Failure()))
         suites = [self.loadAnything(thing, recurse)
-                  for thing in set(things)]
+                  for thing in self._uniqueTests(things)]
         suites.extend(errors)
         return self.suiteFactory(suites)
 
 
+    def _uniqueTests(self, things):
+        """
+        Gather unique suite objects from loaded things. This will guarantee uniqueness
+        of inherited methods on TestCases which would otherwise hash to same value and
+        collapse to one test unexpectedly if using simpler means: e.g. set().
+        """
+        entries = []
+        for thing in things:
+            if type(thing) is types.MethodType:
+                entries.append((thing.im_class, thing))
+            else:
+                entries.append((thing,))
+        return [ entry[-1] for entry in set(entries) ]
 
+
 class DryRunVisitor(object):
     """
     A visitor that makes a reporter think that every test visited has run
