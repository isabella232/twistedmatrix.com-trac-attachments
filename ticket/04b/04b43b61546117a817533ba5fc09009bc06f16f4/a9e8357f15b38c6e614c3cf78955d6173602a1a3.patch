diff --git twisted/internet/test/reactormixins.py twisted/internet/test/reactormixins.py
index 506ceea..4e10e18 100644
--- twisted/internet/test/reactormixins.py
+++ twisted/internet/test/reactormixins.py
@@ -332,7 +332,7 @@ class ReactorBuilder:
         classes = {}
         for reactor in cls._reactors:
             shortReactorName = reactor.split(".")[-1]
-            name = (cls.__name__ + "." + shortReactorName).replace(".", "_")
+            name = (cls.__name__ + "." + shortReactorName + "Tests").replace(".", "_")
             class testcase(cls, SynchronousTestCase):
                 __module__ = cls.__module__
                 if reactor in cls.skippedReactors:
diff --git twisted/internet/test/test_address.py twisted/internet/test/test_address.py
index 9f212a7..6d3b858 100644
--- twisted/internet/test/test_address.py
+++ twisted/internet/test/test_address.py
@@ -141,8 +141,8 @@ class HostnameAddressTests(unittest.TestCase, AddressTestCaseMixin):
 
 
 
-class IPv4AddressTCPTestCase(unittest.SynchronousTestCase,
-                             IPv4AddressTestCaseMixin):
+class IPv4AddressTCPTests(unittest.SynchronousTestCase,
+                          IPv4AddressTestCaseMixin):
     def buildAddress(self):
         """
         Create an arbitrary new L{IPv4Address} instance with a C{"TCP"}
@@ -174,8 +174,8 @@ class IPv4AddressTCPTestCase(unittest.SynchronousTestCase,
 
 
 
-class IPv4AddressUDPTestCase(unittest.SynchronousTestCase,
-                             IPv4AddressTestCaseMixin):
+class IPv4AddressUDPTests(unittest.SynchronousTestCase,
+                          IPv4AddressTestCaseMixin):
     def buildAddress(self):
         """
         Create an arbitrary new L{IPv4Address} instance with a C{"UDP"}
@@ -207,7 +207,7 @@ class IPv4AddressUDPTestCase(unittest.SynchronousTestCase,
 
 
 
-class IPv6AddressTestCase(unittest.SynchronousTestCase, AddressTestCaseMixin):
+class IPv6AddressTests(unittest.SynchronousTestCase, AddressTestCaseMixin):
     addressArgSpec = (("type", "%s"), ("host", "%r"), ("port", "%d"))
 
     def buildAddress(self):
@@ -227,7 +227,7 @@ class IPv6AddressTestCase(unittest.SynchronousTestCase, AddressTestCaseMixin):
 
 
 
-class UNIXAddressTestCase(unittest.SynchronousTestCase, AddressTestCaseMixin):
+class UNIXAddressTests(unittest.SynchronousTestCase, AddressTestCaseMixin):
     addressArgSpec = (("name", "%r"),)
 
     def setUp(self):
@@ -291,8 +291,8 @@ class UNIXAddressTestCase(unittest.SynchronousTestCase, AddressTestCaseMixin):
 
 
 
-class EmptyUNIXAddressTestCase(unittest.SynchronousTestCase,
-                               AddressTestCaseMixin):
+class EmptyUNIXAddressTests(unittest.SynchronousTestCase,
+                            AddressTestCaseMixin):
     """
     Tests for L{UNIXAddress} operations involving a C{None} address.
     """
diff --git twisted/internet/test/test_core.py twisted/internet/test/test_core.py
index 4ebc1c0..4434a1d 100644
--- twisted/internet/test/test_core.py
+++ twisted/internet/test/test_core.py
@@ -41,7 +41,7 @@ class ObjectModelIntegrationMixin(object):
 
 
 
-class ObjectModelIntegrationTest(ReactorBuilder, ObjectModelIntegrationMixin):
+class ObjectModelIntegrationTests(ReactorBuilder, ObjectModelIntegrationMixin):
     """
     Test details of object model integration against all reactors.
     """
@@ -330,4 +330,4 @@ class SystemEventTestsBuilder(ReactorBuilder):
 
 
 globals().update(SystemEventTestsBuilder.makeTestCaseClasses())
-globals().update(ObjectModelIntegrationTest.makeTestCaseClasses())
+globals().update(ObjectModelIntegrationTests.makeTestCaseClasses())
diff --git twisted/internet/test/test_endpoints.py twisted/internet/test/test_endpoints.py
index 6ce068c..3b5dc0f 100644
--- twisted/internet/test/test_endpoints.py
+++ twisted/internet/test/test_endpoints.py
@@ -686,7 +686,7 @@ class FakeStdio(object):
 
 
 
-class StandardIOEndpointsTestCase(unittest.TestCase):
+class StandardIOEndpointsTests(unittest.TestCase):
     """
     Tests for Standard I/O Endpoints
     """
@@ -824,7 +824,7 @@ class MemoryProcessReactor(object):
 
 
 
-class ProcessEndpointsTestCase(unittest.TestCase):
+class ProcessEndpointsTests(unittest.TestCase):
     """
     Tests for child process endpoints.
     """
@@ -1237,7 +1237,7 @@ class WrappedIProtocolTests(unittest.TestCase):
 
 
 
-class TCP4EndpointsTestCase(EndpointTestCaseMixin, unittest.TestCase):
+class TCP4EndpointsTests(EndpointTestCaseMixin, unittest.TestCase):
     """
     Tests for TCP IPv4 Endpoints.
     """
@@ -1345,7 +1345,7 @@ class TCP4EndpointsTestCase(EndpointTestCaseMixin, unittest.TestCase):
 
 
 
-class TCP6EndpointsTestCase(EndpointTestCaseMixin, unittest.TestCase):
+class TCP6EndpointsTests(EndpointTestCaseMixin, unittest.TestCase):
     """
     Tests for TCP IPv6 Endpoints.
     """
@@ -1454,8 +1454,8 @@ class TCP6EndpointsTestCase(EndpointTestCaseMixin, unittest.TestCase):
 
 
 
-class TCP6EndpointNameResolutionTestCase(ClientEndpointTestCaseMixin,
-                                         unittest.TestCase):
+class TCP6EndpointNameResolutionTests(ClientEndpointTestCaseMixin,
+                                      unittest.TestCase):
     """
     Tests for a TCP IPv6 Client Endpoint pointed at a hostname instead
     of an IPv6 address literal.
@@ -1571,8 +1571,8 @@ class RaisingMemoryReactorWithClock(RaisingMemoryReactor, Clock):
 
 
 
-class HostnameEndpointsOneIPv4TestCase(ClientEndpointTestCaseMixin,
-                                unittest.TestCase):
+class HostnameEndpointsOneIPv4Tests(ClientEndpointTestCaseMixin,
+                                    unittest.TestCase):
     """
     Tests for the hostname based endpoints when GAI returns only one
     (IPv4) address.
@@ -1799,8 +1799,8 @@ class HostnameEndpointsOneIPv4TestCase(ClientEndpointTestCaseMixin,
 
 
 
-class HostnameEndpointsOneIPv6TestCase(ClientEndpointTestCaseMixin,
-                                unittest.TestCase):
+class HostnameEndpointsOneIPv6Tests(ClientEndpointTestCaseMixin,
+                                    unittest.TestCase):
     """
     Tests for the hostname based endpoints when GAI returns only one
     (IPv6) address.
@@ -1912,7 +1912,7 @@ class HostnameEndpointsOneIPv6TestCase(ClientEndpointTestCaseMixin,
 
 
 
-class HostnameEndpointsGAIFailureTestCase(unittest.TestCase):
+class HostnameEndpointsGAIFailureTests(unittest.TestCase):
     """
     Tests for the hostname based endpoints when GAI returns no address.
     """
@@ -1935,7 +1935,7 @@ class HostnameEndpointsGAIFailureTestCase(unittest.TestCase):
 
 
 
-class HostnameEndpointsFasterConnectionTestCase(unittest.TestCase):
+class HostnameEndpointsFasterConnectionTests(unittest.TestCase):
     """
     Tests for the hostname based endpoints when gai returns an IPv4 and
     an IPv6 address, and one connection takes less time than the other.
@@ -2080,8 +2080,8 @@ class HostnameEndpointsFasterConnectionTestCase(unittest.TestCase):
 
 
 
-class SSL4EndpointsTestCase(EndpointTestCaseMixin,
-                            unittest.TestCase):
+class SSL4EndpointsTests(EndpointTestCaseMixin,
+                         unittest.TestCase):
     """
     Tests for SSL Endpoints.
     """
@@ -2215,8 +2215,8 @@ class SSL4EndpointsTestCase(EndpointTestCaseMixin,
 
 
 
-class UNIXEndpointsTestCase(EndpointTestCaseMixin,
-                            unittest.TestCase):
+class UNIXEndpointsTests(EndpointTestCaseMixin,
+                         unittest.TestCase):
     """
     Tests for UnixSocket Endpoints.
     """
@@ -2324,7 +2324,7 @@ class UNIXEndpointsTestCase(EndpointTestCaseMixin,
 
 
 
-class ParserTestCase(unittest.TestCase):
+class ParserTests(unittest.TestCase):
     """
     Tests for L{endpoints._parseServer}, the low-level parsing logic.
     """
@@ -3003,8 +3003,8 @@ class SSLClientStringTests(unittest.TestCase):
 
 
 
-class AdoptedStreamServerEndpointTestCase(ServerEndpointTestCaseMixin,
-                                          unittest.TestCase):
+class AdoptedStreamServerEndpointTests(ServerEndpointTestCaseMixin,
+                                       unittest.TestCase):
     """
     Tests for adopted socket-based stream server endpoints.
     """
@@ -3346,10 +3346,10 @@ class ConnectProtocolTests(unittest.TestCase):
 
 
 if _PY3:
-    del (StandardIOEndpointsTestCase, UNIXEndpointsTestCase, ParserTestCase,
+    del (StandardIOEndpointsTests, UNIXEndpointsTests, ParserTests,
          ServerStringTests, ClientStringTests, SSLClientStringTests,
-         AdoptedStreamServerEndpointTestCase, SystemdEndpointPluginTests,
+         AdoptedStreamServerEndpointTests, SystemdEndpointPluginTests,
          TCP6ServerEndpointPluginTests, StandardIOEndpointPluginTests,
-         ProcessEndpointsTestCase, WrappedIProtocolTests,
+         ProcessEndpointsTests, WrappedIProtocolTests,
          ProcessEndpointTransportTests,
          )
diff --git twisted/internet/test/test_gireactor.py twisted/internet/test/test_gireactor.py
index 83c1930..4d05786 100644
--- twisted/internet/test/test_gireactor.py
+++ twisted/internet/test/test_gireactor.py
@@ -39,7 +39,7 @@ if gireactor is None:
     skip = "gtk3/gi not importable"
 
 
-class GApplicationRegistration(ReactorBuilder, TestCase):
+class GApplicationRegistrationTests(ReactorBuilder, TestCase):
     """
     GtkApplication and GApplication are supported by
     L{twisted.internet.gtk3reactor} and L{twisted.internet.gireactor}.
diff --git twisted/internet/test/test_gtkreactor.py twisted/internet/test/test_gtkreactor.py
index f3e74dc..983e588 100644
--- twisted/internet/test/test_gtkreactor.py
+++ twisted/internet/test/test_gtkreactor.py
@@ -11,7 +11,7 @@ import sys
 from twisted.trial.unittest import TestCase
 
 
-class GtkReactorDeprecation(TestCase):
+class GtkReactorDeprecationTests(TestCase):
     """
     Tests to ensure all attributes of L{twisted.internet.gtkreactor} are 
     deprecated.
diff --git twisted/internet/test/test_inotify.py twisted/internet/test/test_inotify.py
index 5da7752..749bf60 100644
--- twisted/internet/test/test_inotify.py
+++ twisted/internet/test/test_inotify.py
@@ -17,7 +17,7 @@ else:
 
 
 
-class TestINotify(unittest.TestCase):
+class INotifyTests(unittest.TestCase):
     """
     Define all the tests for the basic functionality exposed by
     L{inotify.INotify}.
diff --git twisted/internet/test/test_iocp.py twisted/internet/test/test_iocp.py
index ac93cdf..711da2f 100644
--- twisted/internet/test/test_iocp.py
+++ twisted/internet/test/test_iocp.py
@@ -100,7 +100,7 @@ class SupportTests(unittest.TestCase):
 
 
 
-class IOCPReactorTestCase(unittest.TestCase):
+class IOCPReactorTests(unittest.TestCase):
     def test_noPendingTimerEvents(self):
         """
         Test reactor behavior (doIteration) when there are no pending time
diff --git twisted/internet/test/test_pollingfile.py twisted/internet/test/test_pollingfile.py
index 75022ad..bcfe8fa 100644
--- twisted/internet/test/test_pollingfile.py
+++ twisted/internet/test/test_pollingfile.py
@@ -15,7 +15,7 @@ else:
 
 
 
-class TestPollableWritePipe(TestCase):
+class PollableWritePipeTests(TestCase):
     """
     Tests for L{_pollingfile._PollableWritePipe}.
     """
@@ -43,4 +43,4 @@ class TestPollableWritePipe(TestCase):
 
 
 if _pollingfile is None:
-    TestPollableWritePipe.skip = "Test will run only on Windows."
+    PollableWritePipeTests.skip = "Test will run only on Windows."
diff --git twisted/internet/test/test_posixbase.py twisted/internet/test/test_posixbase.py
index 3046c2a..a76e4d7 100644
--- twisted/internet/test/test_posixbase.py
+++ twisted/internet/test/test_posixbase.py
@@ -275,7 +275,7 @@ class IterationTimeoutTests(TestCase):
 
 
 
-class ConnectedDatagramPortTestCase(TestCase):
+class ConnectedDatagramPortTests(TestCase):
     """
     Test connected datagram UNIX sockets.
     """
diff --git twisted/internet/test/test_qtreactor.py twisted/internet/test/test_qtreactor.py
index 94e72ee..8c990da 100644
--- twisted/internet/test/test_qtreactor.py
+++ twisted/internet/test/test_qtreactor.py
@@ -8,7 +8,7 @@ from twisted.python.reflect import namedModule
 
 
 
-class QtreactorTestCase(unittest.TestCase):
+class QtreactorTests(unittest.TestCase):
     """
     Tests for L{twisted.internet.qtreactor}.
     """
diff --git twisted/internet/test/test_tcp.py twisted/internet/test/test_tcp.py
index b9591b5..b9b57ae 100644
--- twisted/internet/test/test_tcp.py
+++ twisted/internet/test/test_tcp.py
@@ -178,7 +178,7 @@ class FakeSocket(object):
 
 
 
-class TestFakeSocket(TestCase):
+class FakeSocketTests(TestCase):
     """
     Test that the FakeSocket can be used by the doRead method of L{Connection}
     """
@@ -2456,7 +2456,7 @@ class AbortConnectionMixin(object):
 
 
 
-class AbortConnectionTestCase(ReactorBuilder, AbortConnectionMixin):
+class AbortConnectionTests(ReactorBuilder, AbortConnectionMixin):
     """
     TCP-specific L{AbortConnectionMixin} tests.
     """
@@ -2464,11 +2464,11 @@ class AbortConnectionTestCase(ReactorBuilder, AbortConnectionMixin):
 
     endpoints = TCPCreator()
 
-globals().update(AbortConnectionTestCase.makeTestCaseClasses())
+globals().update(AbortConnectionTests.makeTestCaseClasses())
 
 
 
-class SimpleUtilityTestCase(TestCase):
+class SimpleUtilityTests(TestCase):
     """
     Simple, direct tests for helpers within L{twisted.internet.tcp}.
     """
diff --git twisted/internet/test/test_tls.py twisted/internet/test/test_tls.py
index 4a4f688..c5069c2 100644
--- twisted/internet/test/test_tls.py
+++ twisted/internet/test/test_tls.py
@@ -331,7 +331,7 @@ globals().update(TLSPortTestsBuilder().makeTestCaseClasses())
 
 
 
-class AbortSSLConnectionTest(ReactorBuilder, AbortConnectionMixin, ContextGeneratingMixin):
+class AbortSSLConnectionTests(ReactorBuilder, AbortConnectionMixin, ContextGeneratingMixin):
     """
     C{abortConnection} tests using SSL.
     """
@@ -357,4 +357,4 @@ class AbortSSLConnectionTest(ReactorBuilder, AbortConnectionMixin, ContextGenera
         if FILETYPE_PEM is None:
             raise SkipTest("OpenSSL not available.")
 
-globals().update(AbortSSLConnectionTest.makeTestCaseClasses())
+globals().update(AbortSSLConnectionTests.makeTestCaseClasses())
diff --git twisted/internet/test/test_udp_internals.py twisted/internet/test/test_udp_internals.py
index 6e720ec..5210485 100644
--- twisted/internet/test/test_udp_internals.py
+++ twisted/internet/test/test_udp_internals.py
@@ -65,7 +65,7 @@ class KeepReads(DatagramProtocol):
 
 
 
-class ErrorsTestCase(unittest.SynchronousTestCase):
+class ErrorsTests(unittest.SynchronousTestCase):
     """
     Error handling tests for C{udp.Port}.
     """
diff --git twisted/test/test_strports.py twisted/test/test_strports.py
index 9c4522e..aabe73e 100644
--- twisted/test/test_strports.py
+++ twisted/test/test_strports.py
@@ -8,13 +8,13 @@ Tests for L{twisted.application.strports}.
 from twisted.trial.unittest import TestCase
 from twisted.application import strports
 from twisted.application import internet
-from twisted.internet.test.test_endpoints import ParserTestCase
+from twisted.internet.test.test_endpoints import ParserTests
 from twisted.internet.protocol import Factory
 from twisted.internet.endpoints import TCP4ServerEndpoint, UNIXServerEndpoint
 
 
 
-class DeprecatedParseTestCase(ParserTestCase):
+class DeprecatedParseTestCase(ParserTests):
     """
     L{strports.parse} is deprecated.  It's an alias for a method that is now
     private in L{twisted.internet.endpoints}.
diff --git twisted/topfiles/7866.misc twisted/topfiles/7866.misc
new file mode 100644
index 0000000..e69de29
