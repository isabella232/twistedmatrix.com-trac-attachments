Index: twisted/test/test_defgen.py
===================================================================
--- twisted/test/test_defgen.py	(revision 16485)
+++ twisted/test/test_defgen.py	(working copy)
@@ -2,7 +2,7 @@
 
 from twisted.internet import reactor
 
-from twisted.trial import unittest, util
+from twisted.trial import unittest
 
 from twisted.internet.defer import waitForDeferred, deferredGenerator, Deferred
 from twisted.internet import defer
@@ -38,34 +38,41 @@
         return
     _genWoosh = deferredGenerator(_genWoosh)
 
-
     def testBasics(self):
-        self.assertEquals(util.wait(self._genWoosh()), "WOOSH")
+        def cb(res):
+            self.assertEquals(res, "WOOSH")
+        self._genWoosh().addCallback(cb)
 
-
     def testBuggyGen(self):
         def _genError():
             yield waitForDeferred(getThing())
             1/0
         _genError = deferredGenerator(_genError)
 
-        self.assertRaises(ZeroDivisionError, util.wait, _genError())
+        def eb(err):
+            self.assertEquals(err.check(ZeroDivisionError), ZeroDivisionError)
 
+        _genError().addErrback(eb)
 
     def testNothing(self):
         def _genNothing():
             if 0: yield 1
         _genNothing = deferredGenerator(_genNothing)
 
-        self.assertEquals(util.wait(_genNothing()), None)
+        def cb(res):
+            self.assertEquals(res, None)
 
+        _genNothing().addCallback(cb)
+
     def testDeferredYielding(self):
         # See the comment _deferGenerator about d.callback(Deferred).
         def _genDeferred():
             yield getThing()
         _genDeferred = deferredGenerator(_genDeferred)
 
-        self.assertRaises(TypeError, util.wait, _genDeferred())
+        def eb(err):
+            self.assertEquals(err.check(TypeError), TypeError)
+        _genDeferred().addErrback(eb)
 
     def testStackUsage(self):
         # Make sure we don't blow the stack when yielding immediately
@@ -79,7 +86,9 @@
             yield 0
 
         _loop = deferredGenerator(_loop)
-        self.assertEquals(util.wait(_loop()), 0)
+        def cb(res):
+            self.assertEquals(res, 0)
+        _loop().addCallback(cb)
 
     def testStackUsage2(self):
         def _loop():
@@ -89,5 +98,7 @@
             yield 0
 
         _loop = deferredGenerator(_loop)
-        self.assertEquals(util.wait(_loop()), 0)
+        def cb(res):
+            self.assertEquals(res, 0)
+        _loop().addCallback(cb)
 
