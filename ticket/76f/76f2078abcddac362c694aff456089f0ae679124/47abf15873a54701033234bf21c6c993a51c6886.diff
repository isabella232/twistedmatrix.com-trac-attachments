Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 42592)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -1638,13 +1638,25 @@
     def test_sendMessage(self):
         """
         Passing a command and parameters to L{IRC.sendMessage} results in a
-        query string that consists of the command and parameters, seperated by
-        a space, ending with '\r\n'.
+        query string that consists of the command and parameters, separated by
+        a space, ending with '\r\n'.  The format is described in more detail
+        in RFC 1459 (U{http://tools.ietf.org/html/rfc1459.html#section-2.3}).
         """
         self.p.sendMessage('CMD', 'param1', 'param2')
         self.check('CMD param1 param2\r\n')
 
 
+    def test_sendUnicodeMessage(self):
+        """
+        Passing a command and parameters to L{IRC.sendMsg} results in a query
+        string that consists of the command and parameters, separated by a
+        space, ending with '\r\n'.  The format is described in more detail in
+        RFC 1459 (U{http://tools.ietf.org/html/rfc1459.html#section-2.3}).
+        """
+        self.p.sendMsg(u"CMD", (u"param1", u"param2"))
+        self.check(b"CMD param1 param2\r\n")
+
+
     def test_sendMessageNoCommand(self):
         """
         Passing C{None} as the command to L{IRC.sendMessage} raises a
@@ -1655,6 +1667,16 @@
         self.assertEqual(str(error), "IRC message requires a command.")
 
 
+    def test_sendUnicodeMessageNoCommand(self):
+        """
+        Passing C{None} as the command to L{IRC.sendMsg} raises a
+        C{ValueError}.
+        """
+        error = self.assertRaises(ValueError, self.p.sendMsg, None,
+            (u"param1", u"param2"))
+        self.assertEqual(error.message, "IRC message requires a command.")
+
+
     def test_sendMessageInvalidCommand(self):
         """
         Passing an invalid string command to L{IRC.sendMessage} raises a
@@ -1667,6 +1689,167 @@
             "me:  ")
 
 
+    def test_sendUnicodeMessageInvalidCommand(self):
+        """
+        Passing an invalid string command to L{IRC.sendMsg} raises a
+        C{ValueError}.
+        """
+        error = self.assertRaises(ValueError, self.p.sendMsg, u" ",
+            (u"param1", u"param2"))
+        self.assertEqual(error.message, "Somebody screwed up, 'cuz this "
+            "doesn't look like a command to me:  ")
+
+
+    def test_sendMessageWithPrefix(self):
+        """
+        Passing a command and parameters with a specified prefix to
+        L{IRC.sendMessage} results in a proper query string including the
+        specified line prefix.
+        """
+        self.p.sendMessage('CMD', 'param1', 'param2', prefix='irc.example.com')
+        self.check(':irc.example.com CMD param1 param2\r\n')
+
+
+    def test_sendUnicodeMessageWithPrefix(self):
+        """
+        Passing a command and parameters with a specified prefix to
+        L{IRC.sendMsg} results in a proper query string including the specified
+        line prefix.
+        """
+        self.p.sendMsg(u"CMD", (u"param1", u"param2"), u"irc.example.com")
+        self.check(b":irc.example.com CMD param1 param2\r\n")
+
+
+    def test_sendMessageWithTags(self):
+        """
+        Passing a command and parameters with a specified prefix and tags
+        to L{IRC.sendMessage} results in a proper query string including
+        the specified line prefix and appropriate tags syntax.
+        The query string should be output as follows:
+        @tags :prefix COMMAND param1 param2\r\n
+        The tags are a string of IRCv3 tags, preceded by '@'.  The rest
+        of the string is as described in test_sendMessage.  For more on
+        the message tag format, see
+        U{http://ircv3.org/specification/message-tags-3.2}.
+        """
+        sendTags = {
+            'aaa': 'bbb',
+            'ccc': None,
+            'example.com/ddd': 'eee'
+        }
+        expectedTags = ('aaa=bbb', 'ccc', 'example.com/ddd=eee')
+        self.p.sendMessage('CMD', 'param1', 'param2', prefix='irc.example.com',
+            tags=sendTags)
+        outMsg = self.f.getvalue()
+        outTagStr, outLine = outMsg.split(' ', 1)
+        outTags = outTagStr[1:].split(';') # Pulling off the leading '@' sign
+        # Make sure the line is sane
+        self.assertEqual(outLine, ":irc.example.com CMD param1 param2\r\n")
+        # Make sure the tags we got are sane
+        self.assertEqual(sorted(expectedTags), sorted(outTags))
+
+
+    def test_sendUnicodeMessageWithTags(self):
+        """
+        Passing a command and parameters with a specified prefix and tags
+        to L{IRC.sendMsg} results in a proper query string including the
+        specified line prefix and appropriate tags syntax.  The query string
+        should be output as follows:
+        @tags :prefix COMMAND param1 param2\r\n
+        The tags are a string of IRCv3 tags, preceded by '@'.  The rest
+        of the string is as described in test_sendMessage.  For more on
+        the message tag format, see
+        U{http://ircv3.org/specification/message-tags-3.2}.
+        """
+        sendTags = {
+            u"aaa": u"bbb",
+            u"ccc": None,
+            u"example.com/ddd": u"eee"
+        }
+        expectedTags = ("aaa=bbb", "ccc", "example.com/ddd=eee")
+        self.p.sendMsg(u"CMD", (u"param1", u"param2"), u"irc.example.com",
+            sendTags)
+        outMsg = self.f.getvalue()
+        outTagStr, outLine = outMsg.split(' ', 1)
+        outTags = outTagStr[1:].split(';') # Pulling off the leading '@' sign
+        # Make sure the line is sane
+        self.assertEqual(outLine, b":irc.example.com CMD param1 param2\r\n")
+        # Make sure the tags we got are sane
+        self.assertEqual(sorted(expectedTags), sorted(outTags))
+
+
+    def test_stringTags(self):
+        """
+        Stringing tags together results in a proper IRC tag string.
+        See U{http://ircv3.org/specification/message-tags-3.2} for more on
+        the message tag format.
+        """
+        sendTags = {
+            'aaa': 'bbb',
+            'ccc': None,
+            'example.com/ddd': 'eee'
+        }
+        expectedResultTags = ('aaa=bbb', 'ccc', 'example.com/ddd=eee')
+        tags = self.p._stringTags(sendTags).split(';')
+        self.assertEquals(sorted(expectedResultTags), sorted(tags))
+
+
+    def test_validateEmptyTags(self):
+        """
+        Passing tags that are empty strings raises a C{ValueError}.
+        """
+        sendTags = {
+            'aaa': 'bbb',
+            'ccc': None,
+            '': ''
+        }
+        error = self.assertRaises(ValueError, self.p._validateTags, sendTags)
+        self.assertEqual(error.message, "A tag name is required.")
+
+
+    def test_validateNoneTags(self):
+        """
+        Passing None as a tag raises a C{ValueError}.
+        """
+        sendTags = {
+            'aaa': 'bbb',
+            'ccc': None,
+            None: 'beep'
+        }
+        error = self.assertRaises(ValueError, self.p._validateTags, sendTags)
+        self.assertEqual(error.message, "A tag name is required.")
+
+
+    def test_errorTagsWithSpaces(self):
+        """
+        Passing tags with spaces in them raises a C{ValueError}.
+        """
+        sendTags = {
+            'aaa bbb': 'ccc'
+        }
+        error = self.assertRaises(ValueError, self.p._validateTags, sendTags)
+        self.assertEqual(error.message, 'Tag contains invalid characters.')
+
+
+    def test_errorTagsWithInvalidChars(self):
+        """
+        Passing tags with invalid characters in them raises a C{ValueError}.
+        """
+        sendTags = {
+            'aaa_b^@': 'ccc'
+        }
+        error = self.assertRaises(ValueError, self.p._validateTags, sendTags)
+        self.assertEqual(error.message, 'Tag contains invalid characters.')
+
+
+    def test_validateTagValueEscaping(self):
+        """
+        Tags with invalid characters should be properly escaped.
+        """
+        self.assertEqual(self.p._escapeTagValue('test\r\n \\;;\0\a'),
+            'test\\r\\n\\s\\\\\\:\\:\\0\\a')
+
+
     def testPrivmsg(self):
         self.p.privmsg("this-is-sender", "this-is-recip", "this is message")
         self.check(":this-is-sender PRIVMSG this-is-recip :this is message\r\n")
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 42592)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -253,7 +253,7 @@
 
     def sendLine(self, line):
         if self.encoding is not None:
-            if isinstance(line, unicode):
+            if not isinstance(line, bytes):
                 line = line.encode(self.encoding)
         self.transport.write("%s%s%s" % (line, CR, LF))
 
@@ -261,30 +261,152 @@
     def sendMessage(self, command, *parameter_list, **prefix):
         """
         Send a line formatted as an IRC message.
+        This method remains for backward compatibility.
 
-        First argument is the command, all subsequent arguments are parameters
-        to that command.  If a prefix is desired, it may be specified with the
-        keyword argument 'prefix'.
+        @param command: The command or numeric to send.
+        @type command: L{bytes}
+
+        @param parameter_list: The parameters to send with the command.
+        @type parameter_list: L{bytes} parameters
+
+        @param prefix: The prefix to send with the command.  If not
+            given, no prefix is sent.
+        @type prefix: L{bytes}
+
+        @param tags: A dict of message tags.  If not given, no message
+            tags are sent.  The dict key should be the name of the tag
+            to send as a string; the value should be the unescaped value
+            to send with the tag, or either None or "" if no value is to
+            be sent with the tag.
+        @type tags: L{dict} of tags (L{bytes}) => values (L{bytes})
+        @see: U{http://ircv3.org/specification/message-tags-3.2}
         """
+        if self.encoding is None:
+            encoding = "utf-8" # Default the encoding to UTF-8 (safe for IRC)
+        else:
+            # If the user specified an encoding, we'll assume we're getting
+            # byte strings in that encoding
+            encoding = self.encoding
+        params = []
+        cmdPrefix = prefix['prefix'] if 'prefix' in prefix else None
+        tags = prefix['tags'] if 'tags' in prefix else {}
+        unicodeTags = {}
+
+        if isinstance(command, bytes):
+            command = command.decode(encoding)
+        for param in parameter_list:
+            if isinstance(param, bytes):
+                params.append(param.decode(encoding))
+            else:
+                params.append(param)
+        if cmdPrefix:
+            cmdPrefix = cmdPrefix.decode(encoding)
+        for key, val in tags.items():
+            if isinstance(key, bytes):
+                key = key.decode(encoding)
+            if isinstance(val, bytes):
+                val = val.decode(encoding)
+            unicodeTags[key] = val
+
+        self.sendMsg(command, params, cmdPrefix, unicodeTags)
+
+
+    def sendMsg(self, command, params, prefix = None, tags = {}):
+        """
+        Send a line formatted as an IRC message.
+
+        @param command: The command or numeric to send.
+        @type command: L{unicode}
+
+        @param params: The parameters to send with the command.
+        @type params: A L{tuple} or L{list} of L{unicode} parameters
+
+        @param prefix: The prefix to send with the command.  If not
+            given, no prefix is sent.
+        @type prefix: L{unicode}
+
+        @param tags: A dict of message tags.  If not given, no message
+            tags are sent.  The dict key should be the name of the tag
+            to send as a string; the value should be the unescaped value
+            to send with the tag, or either None or "" if no value is to
+            be sent with the tag.
+        @type tags: L{dict} of tags (L{unicode}) => values (L{unicode})
+        @see: U{http://ircv3.org/specification/message-tags-3.2}
+        """
         if not command:
             raise ValueError("IRC message requires a command.")
 
-        if ' ' in command or command[0] == ':':
+        if " " in command or command[0] == ":":
             # Not the ONLY way to screw up, but provides a little
             # sanity checking to catch likely dumb mistakes.
             raise ValueError("Somebody screwed up, 'cuz this doesn't" \
                   " look like a command to me: %s" % command)
 
-        line = ' '.join([command] + list(parameter_list))
-        if 'prefix' in prefix:
-            line = ":%s %s" % (prefix['prefix'], line)
+        line = " ".join([command] + list(params))
+        if prefix:
+            line = ":%s %s" % (prefix, line)
+        if tags:
+            tagStr = self._stringTags(tags)
+            line = "@%s %s" % (tagStr, line)
+        if self.encoding is None:
+            # Either pass bytes to sendLine, or have sendLine do the translation
+            line = line.encode("utf-8")
         self.sendLine(line)
 
-        if len(parameter_list) > 15:
+        if len(params) > 15:
             log.msg("Message has %d parameters (RFC allows 15):\n%s" %
                     (len(parameter_list), line))
 
 
+    def _stringTags(self, tags):
+        """
+        Converts a tag dictionary to a string.
+
+        @param tags: The tag dict passed to sendMsg.
+        """
+        self._validateTags(tags)
+        tagStrings = []
+        for tag, value in tags.items():
+            if value:
+                tagStrings.append("%s=%s" % (tag, self._escapeTagValue(value)))
+            else:
+                tagStrings.append(tag)
+        return ";".join(tagStrings)
+
+
+    def _validateTags(self, tags):
+        """
+        Checks the tag dict for errors and raises L{ValueError} if an
+        error is found.
+
+        @param tags: The tag dict passed to sendMsg.
+        """
+        for tag, value in tags.items():
+            if not tag:
+                raise ValueError("A tag name is required.")
+            for char in tag:
+                if not char.isalnum() and char not in ("-", "/", "."):
+                    raise ValueError("Tag contains invalid characters.")
+
+
+    def _escapeTagValue(self, value):
+        """
+        Escape the given tag value according to escaping rules
+        in IRCv3: http://ircv3.org/specification/message-tags-3.2
+
+        @param value: The string value to escape.
+        @type value: L{str}
+        """
+        return (value.replace("\\", "\\\\")
+            .replace(";", "\\:")
+            .replace(" ", "\\s")
+            .replace("\0", "\\0")
+            .replace("\r", "\\r")
+            .replace("\n", "\\n")
+            .replace("\a", "\\a")
+            )
+
+
     def dataReceived(self, data):
         """
         This hack is to support mIRC, which sends LF only, even though the RFC
Index: docs/words/howto/ircserverclientcomm.rst
===================================================================
--- docs/words/howto/ircserverclientcomm.rst	(revision 0)
+++ docs/words/howto/ircserverclientcomm.rst	(working copy)
@@ -0,0 +1,192 @@
+
+:LastChangedDate: $LastChangedDate$
+:LastChangedRevision: $LastChangedRevision$
+:LastChangedBy: $LastChangedBy$
+
+Communicating With IRC Clients
+==============================
+
+
+
+
+
+
+Communicating with clients is the whole point of an IRC server, so you
+want to make sure you're doing it properly.  Today, we'll be looking at
+receiving messages from a client and sending messages to the client.
+
+
+    
+
+
+
+Representing Clients in Twisted
+-------------------------------
+
+
+    
+
+Users in Twisted IRC are represented as subclasses of
+:api:`twisted.words.protocols.irc.IRC <the IRC class>`.
+This works as the protocol for your Factory class, and it will give you
+IRC features (like automatically parsing incoming lines) without you
+having to implement them yourself.  The rest of this guide assumes
+this setup.
+
+
+    
+
+
+
+Sending Messages
+----------------
+
+
+    
+
+Messages are sent to users using the user object's
+:api:`twisted.words.protocols.irc.IRC.sendMessage <sendMessage>`
+method.
+
+
+    
+
+
+
+Sending Basic Messages
+~~~~~~~~~~~~~~~~~~~~~~
+
+
+    
+
+The basic syntax for sending for sending messages to users is
+as follows:
+
+
+.. code-block:: python
+    user.sendMessage("COMMAND", param1, param2, prefix=server.name)
+The prefix keyword argument is optional, and it may be omitted to send a
+message without a prefix (for example, the ERROR command).
+The command is whatever command you plan to send, e.g. "PRIVMSG", "MODE", etc.
+All arguments following the command are the parameters you want to send for
+the command.  If the last argument needs to be prefixed with a colon (because
+it has spaces in it, e.g. a PRIVMSG message), you must add the colon to the
+beginning of the parameter yourself.  For example:
+
+.. code-block:: python
+    user.sendMessage("PRIVMSG", user.nickname, ":{}".format(message), prefix=sendingUser.hostmask)
+
+
+    
+
+
+
+Sending Messages with Tags
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
+    
+
+Twisted also allows sending message tags as specified in
+`IRCv3 <http://ircv3.org/specification/message-tags-3.2>`__.
+
+Let's say, for example, that your server has a feature to play back a little
+bit of previous channel content when someone joins a channel.  You want a way to
+tell people when this message occurred.  The best way to provide this information
+is through the
+`server-time specification <http://ircv3.org/extensions/server-time-3.2>`__.
+
+Let's say you're storing past messages in a channel object in some structure like
+this:
+
+
+.. code-block:: python
+    channel.pastMessages = [
+        ("I sent some text!", "author!ident@host", datetime object representing the when the message was sent),
+        ("I did, too!", "someone-else!ident@host", another datetime object)
+    ]
+Your actual implementation may vary.  I went with something simple here.  The
+times of the messages would be generated using something like ``datetime.utcnow()``
+when the message was received.
+
+Tags are passed as a list of tuples.  If you're sending a number of tags, you may
+have an existing tag dictionary.  You can simply add to it (assuming ``message`` is 
+the loop variable for channel.pastMessages above):
+
+
+.. code-block:: python
+    sendingTags["server-time"] = "{}Z".format(message[2].isoformat()[:-3])
+This will generate the required time format and add it to the tag dictionary.
+The last three characters that we remove are the microseconds; removing the
+last three digits changes the precision to milliseconds.
+
+Once your tags are collected, you can send the message.  The tag dictionary is
+passed using the ``tags`` keyword argument (in the same loop as above):
+
+
+.. code-block:: python
+    user.sendMessage("PRIVMSG", user.nickname, message[0], prefix=message[1], tags=sendingTags)
+
+
+    
+
+
+
+Receiving Messages
+------------------
+
+
+    
+
+Twisted Words will handle receiving messages and parsing lines into
+tokens.  The parsed messages are passed into your command through the
+user's
+:api:`twisted.words.protocols.irc.IRC.handleCommand <handleCommand>`
+method.
+
+
+    
+
+
+
+Handling Commands
+~~~~~~~~~~~~~~~~~
+
+
+    
+
+The default IRC handleCommand method calls the ``irc_COMMAND`` method
+when it receives the command ``COMMAND``, and it calls irc_unknown if
+the method for the command received isn't defined.
+
+
+
+.. code-block:: python
+    
+    from twisted.words.protocols import irc
+    
+    class IRCUser(irc.IRC):
+        # possibly other definitions here
+        def irc_unknown(self, prefix, command, params):
+            self.sendMessage(irc.ERR_UNKNOWNCOMMAND, command, ":Unknown command", prefix=server.name)
+        
+        def irc_PRIVMSG(self, prefix, params):
+            # do some stuff to handle PRIVMSG for your server's setup
+        
+        # lots of other command definitions
+If you have a server setup that doesn't allow you to do this (e.g. a modular
+server program), you may, of course, override the handleCommand function to
+route commands to your own handlers.
+
+
+    
+
+
+
+Receiving Messages with Tags
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
+    
+
+This has not yet been implemented.
\ No newline at end of file
Index: docs/words/howto/index.rst
===================================================================
--- docs/words/howto/index.rst	(revision 42592)
+++ docs/words/howto/index.rst	(working copy)
@@ -27,6 +27,6 @@
 
 
 
+  - :doc:`IRC Servers: Communicating With Clients <ircserverclientcomm>`
 
 
-
