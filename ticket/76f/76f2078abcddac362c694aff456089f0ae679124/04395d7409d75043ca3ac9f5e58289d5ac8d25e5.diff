Index: docs/words/howto/index.rst
===================================================================
--- docs/words/howto/index.rst	(revision 45099)
+++ docs/words/howto/index.rst	(working copy)
@@ -11,6 +11,7 @@
 
    im
    ircclient
+   ircserverclientcomm
 
 
 - :doc:`Twisted IM <im>`
Index: docs/words/howto/ircserverclientcomm.rst
===================================================================
--- docs/words/howto/ircserverclientcomm.rst	(revision 45099)
+++ docs/words/howto/ircserverclientcomm.rst	(working copy)
@@ -13,7 +13,7 @@
 -------------------------------
 
 Users in Twisted IRC are represented as subclasses of :api:`twisted.words.protocols.irc.IRC <the IRC class>`.
-This works as the protocol for your Factory class, and it will give you IRC features (like automatically parsing incoming lines) without you having to implement them yourself.  The rest of this guide assumes this setup.
+This works as the protocol for your Factory class. It will also give you IRC features (like automatically parsing incoming lines) without you having to implement them yourself. The rest of this guide assumes this setup.
 
 Sending Messages
 ----------------
@@ -23,18 +23,22 @@
 Sending Basic Messages
 ~~~~~~~~~~~~~~~~~~~~~~
 
-The basic syntax for sending for sending messages to users is
+The basic syntax for sending messages to users is
 as follows:
 
 .. code-block:: python
+
     user.sendMessage("COMMAND", param1, param2, prefix=server.name)
+
 The prefix keyword argument is optional, and it may be omitted to send a message without a prefix (for example, the ERROR command).
 The command is whatever command you plan to send, e.g. "PRIVMSG", "MODE", etc.
 All arguments following the command are the parameters you want to send for the command.
-If the last argument needs to be prefixed with a colon (because it has spaces in it, e.g. a PRIVMSG message), you must add the colon to the beginning of the parameter yourself.  For example:
+If the last argument needs to be prefixed with a colon (because it has spaces in it, e.g. a PRIVMSG message), you must add the colon to the beginning of the parameter yourself. For example:
 .. code-block:: python
+
     user.sendMessage("PRIVMSG", user.nickname, ":{}".format(message), prefix=sendingUser.hostmask)
 
+
 Sending Messages with Tags
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
 Twisted also allows sending message tags as specified in
@@ -46,26 +50,32 @@
 Let's say you're storing past messages in a channel object in some structure like this:
 
 .. code-block:: python
+
     channel.pastMessages = [
         ("I sent some text!", "author!ident@host", datetime object representing the when the message was sent),
         ("I did, too!", "someone-else!ident@host", another datetime object)
     ]
-Your actual implementation may vary.  I went with something simple here.  The times of the messages would be generated using something like ``datetime.utcnow()`` when the message was received.
 
-Tags are passed as a list of tuples.  If you're sending a number of tags, you may have an existing tag dictionary.  You can simply add to it (assuming ``message`` is the loop variable for channel.pastMessages above):
+Your actual implementation may vary. I went with something simple here. The times of the messages would be generated using something like ``datetime.utcnow()`` when the message was received.
 
+Tags are passed as a list of tuples. If you're sending a number of tags, you may have an existing tag dictionary. You can simply add to it (assuming ``message`` is the loop variable for channel.pastMessages above):
+
 .. code-block:: python
+
     sendingTags["server-time"] = "{}Z".format(message[2].isoformat()[:-3])
+
 This will generate the required time format and add it to the tag dictionary. The last three characters that we remove are the microseconds; removing the last three digits changes the precision to milliseconds.
 
-Once your tags are collected, you can send the message.  The tag dictionary is passed using the ``tags`` keyword argument (in the same loop as above):
+Once your tags are collected, you can send the message. The tag dictionary is passed using the ``tags`` keyword argument (in the same loop as above):
 
 .. code-block:: python
+
     user.sendMessage("PRIVMSG", user.nickname, message[0], prefix=message[1], tags=sendingTags)
 
+
 Receiving Messages
 ------------------
-Twisted Words will handle receiving messages and parsing lines into tokens.  The parsed messages are passed into your command through the user's :api:`twisted.words.protocols.irc.IRC.handleCommand <handleCommand>` method.
+Twisted Words will handle receiving messages and parsing lines into tokens. The parsed messages are passed into your command through the user's :api:`twisted.words.protocols.irc.IRC.handleCommand <handleCommand>` method.
 
 Handling Commands
 ~~~~~~~~~~~~~~~~~
@@ -84,6 +94,7 @@
             # do some stuff to handle PRIVMSG for your server's setup
         
         # lots of other command definitions
+
 If you have a server setup that doesn't allow you to do this (e.g. a modular server program), you may, of course, override the handleCommand function to route commands to your own handlers.
 
 Receiving Messages with Tags
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 45099)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -45,6 +45,8 @@
 from twisted.persisted import styles
 from twisted.protocols import basic
 from twisted.python import log, reflect, _textattributes
+from twisted.python.deprecate import deprecated
+from twisted.python.versions import Version
 
 NUL = chr(0)
 CR = chr(015)
@@ -266,10 +268,10 @@
         self.transport.write("%s%s%s" % (line, CR, LF))
 
 
+    @deprecated(Version("Twisted", 15, 3, 0), "IRC.sendCommand")
     def sendMessage(self, command, *parameter_list, **prefix):
         """
         Send a line formatted as an IRC message.
-        This method remains for backward compatibility.
 
         @param command: The command or numeric to send.
         @type command: L{bytes}
@@ -316,10 +318,10 @@
                 val = val.decode(encoding)
             unicodeTags[key] = val
 
-        self.sendMsg(command, params, cmdPrefix, unicodeTags)
+        self.sendCommand(command, params, cmdPrefix, unicodeTags)
 
 
-    def sendMsg(self, command, params, prefix = None, tags = {}):
+    def sendCommand(self, command, params, prefix = None, tags = None):
         """
         Send a line formatted as an IRC message.
 
@@ -350,6 +352,9 @@
             raise ValueError("Somebody screwed up, 'cuz this doesn't" \
                   " look like a command to me: %s" % command)
 
+        if tags is None:
+            tags = {}
+
         line = " ".join([command] + list(params))
         if prefix:
             line = ":%s %s" % (prefix, line)
@@ -408,8 +413,8 @@
         @param value: The string value to escape.
         @type value: L{str}
         
+        @return: The escaped string for sending as a message value
         @rtype: L{str}
-        @return: The escaped string for sending as a message value
         """
         return (value.replace("\\", "\\\\")
             .replace(";", "\\:")
Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 45099)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -1648,17 +1648,26 @@
         self.check('CMD param1 param2\r\n')
 
 
-    def test_sendUnicodeMessage(self):
+    def test_sendCommand(self):
         """
-        Passing a command and parameters to L{IRC.sendMsg} results in a query
-        string that consists of the command and parameters, separated by a
-        space, ending with '\r\n'.  The format is described in more detail in
+        Passing a command and parameters to L{IRC.sendCommand} results in a
+        query string that consists of the command and parameters, separated by
+        a space, ending with '\r\n'.  The format is described in more detail in
         U{RFC 1459 <https://tools.ietf.org/html/rfc1459.html#section-2.3>}.
         """
-        self.p.sendMsg(u"CMD", (u"param1", u"param2"))
+        self.p.sendCommand(u"CMD", (u"param1", u"param2"))
         self.check(b"CMD param1 param2\r\n")
 
 
+    def test_sendUnicodeCommand(self):
+        """
+        Passing unicode parameters to L{IRC.sendCommand} encodes the parameters
+        in UTF-8.
+        """
+        self.p.sendCommand(u"CMD", (u"param\u00b9", u"param\u00b2"))
+        self.check("CMD param\xc2\xb9 param\xc2\xb2\r\n")
+
+
     def test_sendMessageNoCommand(self):
         """
         Passing C{None} as the command to L{IRC.sendMessage} raises a
@@ -1669,12 +1678,12 @@
         self.assertEqual(str(error), "IRC message requires a command.")
 
 
-    def test_sendUnicodeMessageNoCommand(self):
+    def test_sendCommandNoCommand(self):
         """
-        Passing C{None} as the command to L{IRC.sendMsg} raises a
+        Passing C{None} as the command to L{IRC.sendCommand} raises a
         C{ValueError}.
         """
-        error = self.assertRaises(ValueError, self.p.sendMsg, None,
+        error = self.assertRaises(ValueError, self.p.sendCommand, None,
             (u"param1", u"param2"))
         self.assertEqual(error.message, "IRC message requires a command.")
 
@@ -1691,12 +1700,12 @@
             "me:  ")
 
 
-    def test_sendUnicodeMessageInvalidCommand(self):
+    def test_sendCommandInvalidCommand(self):
         """
-        Passing an invalid string command to L{IRC.sendMsg} raises a
+        Passing an invalid string command to L{IRC.sendCommand} raises a
         C{ValueError}.
         """
-        error = self.assertRaises(ValueError, self.p.sendMsg, u" ",
+        error = self.assertRaises(ValueError, self.p.sendCommand, u" ",
             (u"param1", u"param2"))
         self.assertEqual(error.message, "Somebody screwed up, 'cuz this "
             "doesn't look like a command to me:  ")
@@ -1712,13 +1721,13 @@
         self.check(':irc.example.com CMD param1 param2\r\n')
 
 
-    def test_sendUnicodeMessageWithPrefix(self):
+    def test_sendCommandWithPrefix(self):
         """
         Passing a command and parameters with a specified prefix to
-        L{IRC.sendMsg} results in a proper query string including the specified
-        line prefix.
+        L{IRC.sendCommand} results in a proper query string including the
+        specified line prefix.
         """
-        self.p.sendMsg(u"CMD", (u"param1", u"param2"), u"irc.example.com")
+        self.p.sendCommand(u"CMD", (u"param1", u"param2"), u"irc.example.com")
         self.check(b":irc.example.com CMD param1 param2\r\n")
 
 
@@ -1744,17 +1753,19 @@
             tags=sendTags)
         outMsg = self.f.getvalue()
         outTagStr, outLine = outMsg.split(' ', 1)
-        outTags = outTagStr[1:].split(';') # Pulling off the leading '@' sign
-        # Make sure the line is sane
+
+        # We pull off the leading '@' sign so that the split tags can be
+        # compared with what we expect.
+        outTags = outTagStr[1:].split(';')
+
         self.assertEqual(outLine, ":irc.example.com CMD param1 param2\r\n")
-        # Make sure the tags we got are sane
         self.assertEqual(sorted(expectedTags), sorted(outTags))
 
 
-    def test_sendUnicodeMessageWithTags(self):
+    def test_sendCommandWithTags(self):
         """
         Passing a command and parameters with a specified prefix and tags
-        to L{IRC.sendMsg} results in a proper query string including the
+        to L{IRC.sendCommand} results in a proper query string including the
         specified line prefix and appropriate tags syntax.  The query string
         should be output as follows:
         @tags :prefix COMMAND param1 param2\r\n
@@ -1769,14 +1780,16 @@
             u"example.com/ddd": u"eee"
         }
         expectedTags = ("aaa=bbb", "ccc", "example.com/ddd=eee")
-        self.p.sendMsg(u"CMD", (u"param1", u"param2"), u"irc.example.com",
+        self.p.sendCommand(u"CMD", (u"param1", u"param2"), u"irc.example.com",
             sendTags)
         outMsg = self.f.getvalue()
         outTagStr, outLine = outMsg.split(' ', 1)
-        outTags = outTagStr[1:].split(';') # Pulling off the leading '@' sign
-        # Make sure the line is sane
+
+        # We pull off the leading '@' sign so that the split tags can be
+        # compared with what we expect.
+        outTags = outTagStr[1:].split(';')
+
         self.assertEqual(outLine, b":irc.example.com CMD param1 param2\r\n")
-        # Make sure the tags we got are sane
         self.assertEqual(sorted(expectedTags), sorted(outTags))
 
 
@@ -1797,6 +1810,20 @@
         self.assertEquals(sorted(expectedResultTags), sorted(tags))
 
 
+    def test_sendCommandValidateEmptyTags(self):
+        """
+        Passing empty tag names to L{IRC.sendCommand} raises a C{ValueError}.
+        """
+        sendTags = {
+            u"aaa": u"bbb",
+            u"ccc": None,
+            u"": u""
+        }
+        error = self.assertRaises(ValueError, self.p.sendCommand, u"CMD",
+            (u"param1", u"param2"), u"irc.example.com", sendTags)
+        self.assertEqual(error.message, "A tag name is required.")
+
+
     def test_validateEmptyTags(self):
         """
         Passing tags that are empty strings raises a C{ValueError}.
@@ -1810,6 +1837,21 @@
         self.assertEqual(error.message, "A tag name is required.")
 
 
+    def test_sendCommandValidateNoneTags(self):
+        """
+        Passing None as a tag name to L{IRC.sendCommand} raises a
+        C{ValueError}.
+        """
+        sendTags = {
+            u"aaa": u"bbb",
+            u"ccc": None,
+            None: u"beep"
+        }
+        error = self.assertRaises(ValueError, self.p.sendCommand, u"CMD",
+            (u"param1", u"param2"), u"irc.example.com", sendTags)
+        self.assertEqual(error.message, "A tag name is required.")
+
+
     def test_validateNoneTags(self):
         """
         Passing None as a tag raises a C{ValueError}.
@@ -1823,8 +1865,21 @@
         self.assertEqual(error.message, "A tag name is required.")
 
 
-    def test_errorTagsWithSpaces(self):
+    def test_sendCommandValidateTagsWithSpaces(self):
         """
+        Passing a tag name containing spaces to L{IRC.sendCommand} raises a
+        C{ValueError}.
+        """
+        sendTags = {
+            u"aaa bbb": u"ccc"
+        }
+        error = self.assertRaises(ValueError, self.p.sendCommand, u"CMD",
+            (u"param1", u"param2"), u"irc.example.com", sendTags)
+        self.assertEqual(error.message, "Tag contains invalid characters.")
+
+
+    def test_validateTagsWithSpaces(self):
+        """
         Passing tags with spaces in them raises a C{ValueError}.
         """
         sendTags = {
@@ -1834,8 +1889,21 @@
         self.assertEqual(error.message, 'Tag contains invalid characters.')
 
 
-    def test_errorTagsWithInvalidChars(self):
+    def test_sendCommandValidateTagsWithInvalidChars(self):
         """
+        Passing a tag name containing invalid characters to L{IRC.sendCommand}
+        raises a C{ValueError}.
+        """
+        sendTags = {
+            u"aaa_b^@": u"ccc"
+        }
+        error = self.assertRaises(ValueError, self.p.sendCommand, u"CMD",
+            (u"param1", u"param2"), u"irc.example.com", sendTags)
+        self.assertEqual(error.message, "Tag contains invalid characters.")
+
+
+    def test_validateTagsWithInvalidChars(self):
+        """
         Passing tags with invalid characters in them raises a C{ValueError}.
         """
         sendTags = {
@@ -1845,12 +1913,34 @@
         self.assertEqual(error.message, 'Tag contains invalid characters.')
 
 
+    def test_sendCommandValidateTagValueEscaping(self):
+        """
+        Tags with values containing invalid characters passed to
+        L{IRC.sendCommand} should be properly escaped.
+        """
+        sendTags = {
+            u"aaa": u"bbb",
+            u"ccc": u"test\r\n \\;;"
+        }
+        expectedTags = ("aaa=bbb", "ccc=test\\r\\n\\s\\\\\\:\\:")
+        self.p.sendCommand(u"CMD", (u"param1", u"param2"), u"irc.example.com",
+            sendTags)
+        outMsg = self.f.getvalue()
+        outTagStr, outLine = outMsg.split(" ", 1)
+
+        # We pull off the leading '@' sign so that the split tags can be
+        # compared with what we expect.
+        outTags = outTagStr[1:].split(";")
+
+        self.assertEqual(sorted(outTags), sorted(expectedTags))
+
+
     def test_validateTagValueEscaping(self):
         """
-        Tags with invalid characters should be properly escaped.
+        Tag values with invalid characters should be properly escaped.
         """
-        self.assertEqual(self.p._escapeTagValue('test\r\n \\;;\0'),
-            'test\\r\\n\\s\\\\\\:\\:\\0')
+        self.assertEqual(self.p._escapeTagValue('test\r\n \\;;'),
+            'test\\r\\n\\s\\\\\\:\\:')
 
 
     def testPrivmsg(self):
