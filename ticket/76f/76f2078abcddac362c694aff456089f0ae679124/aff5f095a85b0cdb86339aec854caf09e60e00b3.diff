Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 41707)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -261,14 +261,25 @@
     def sendMessage(self, command, *parameter_list, **prefix):
         """
         Send a line formatted as an IRC message.
-
-        First argument is the command, all subsequent arguments are parameters
-        to that command.  If a prefix is desired, it may be specified with the
-        keyword argument 'prefix'.
-
-        Message tags may be specified using the keyword argument 'tags', passing
-        a list of 1- or 2-tuples.  One-tuples should be passed for tags whose
-        presence has a meaning (i.e. those that do not show a value).
+        
+        @param command: The command or numeric to send.
+        @type command: C{str}
+        
+        @param parameter_list: The positional arguments are all
+            the arguments to be sent with the command.
+        @type parameter_list: All arguments: C{str}
+        
+        @param prefix: An optional prefix to send with the message.
+            Must be supplied as a keyword argument.  If not given,
+            no prefix is sent.
+        @type prefix: C{str}
+        
+        @param tags: An optional list of message tags.  Must be
+            supplied as a keyword argument.  If not given, no
+            tags are sent.  One-tuples should be passed for tags
+            that are not sent with a value.
+        @type tags: L{list} of 1-L{tuple} or 2-L{tuple}
+        @see: U{http://ircv3.atheme.org/specification/message-tags-3.2}
         """
         if not command:
             raise ValueError("IRC message requires a command.")
@@ -283,20 +294,7 @@
         if 'prefix' in prefix:
             line = ":%s %s" % (prefix['prefix'], line)
         if 'tags' in prefix:
-            tagList = []
-            for tag in prefix['tags']:
-                if not tag:
-                    raise ValueError("Empty tags can't be sent.")
-                if len(tag) > 2:
-                    raise ValueError("Multiple values can't be specified for a tag.")
-                if not tag[0]:
-                    raise ValueError("The tag name cannot be empty.")
-                if len(tag) == 2 and not tag[1]:
-                    raise ValueError("The tag value, if specified, cannot be empty.")
-                if " " in tag[0] or (len(tag) == 2 and " " in tag[1]):
-                    raise ValueError("Tags may not contain spaces.")
-                tagList.append("=".join(tag))
-            line = "@%s %s" % (";".join(tagList), line)
+            line = "@%s %s" % (self._stringTags(prefix['tags']), line)
         self.sendLine(line)
 
         if len(parameter_list) > 15:
@@ -304,6 +302,47 @@
                     (len(parameter_list), line))
 
 
+    def _stringTags(self, tagList):
+        """
+        Makes a list of IRC tags into a string to send.
+        
+        @param tagList: List of tags as given to L{sendMessage}.
+        @type tagList: C{list} of 1-C{tuple} or 2-C{tuple}
+        """
+        self._validateTags(tagList)
+        tagStrs = []
+        for tag in tagList:
+            tagStrs.append("=".join(tag))
+        return ";".join(tagStrs)
+
+
+    def _validateTags(self, tagList):
+        """
+        Validates tags passed into L{sendMessage} with the following checks:
+          - Ensures all tuples are either 1- or 2-tuples.
+          - Does some basic checks to ensure the tag name is valid.
+          - If the value is present for a tag, does some basic checks
+              on the value as well.
+        Raises C{ValueError} if any of these tests fail.
+        
+        @param tagList: List of tags as given to L{sendMessage}.
+        @type tagList: C{list} of 1-C{tuple} or 2-C{tuple}
+        """
+        for tag in tagList:
+            if not tag:
+                raise ValueError("Empty tags can't be sent.")
+            if len(tag) > 2:
+                raise ValueError("Multiple values can't be specified for" \
+                    " a tag.")
+            if not tag[0]:
+                raise ValueError("The tag name cannot be empty.")
+            if len(tag) == 2 and not tag[1]:
+                raise ValueError("The tag value, if specified, cannot" \
+                    " be empty.")
+            if " " in tag[0] or (len(tag) == 2 and " " in tag[1]):
+                raise ValueError("Tags and values may not contain spaces.")
+
+
     def dataReceived(self, data):
         """
         This hack is to support mIRC, which sends LF only, even though the RFC
Index: twisted/words/topfiles/6667.feature
===================================================================
--- twisted/words/topfiles/6667.feature	(revision 41707)
+++ twisted/words/topfiles/6667.feature	(working copy)
@@ -1 +1 @@
-The function twisted.words.protocols.irc.IRC.sendMessage now takes a keyword argument allowing IRCv3 message tags to be sent with the message.
\ No newline at end of file
+twisted.words.protocols.irc.IRC.sendMessage now takes a keyword argument allowing IRCv3 message tags to be sent with the message.
\ No newline at end of file
Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 41707)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -1688,42 +1688,61 @@
         self.check('@aaa=bbb;ccc;example.com/ddd=eee :irc.example.com '
             'CMD param1 param2\r\n')
 
-    def test_sendMessageWithEmptyTags(self):
+
+    def test_stringTags(self):
         """
-        Passing invalid tags to L{IRC.sendMessage} raises a C{ValueError}.
+        Stringing tags together results in a proper IRC tag string.
         """
-        error = self.assertRaises(ValueError, self.p.sendMessage, 'CMD',
-            'param1', prefix='irc.example.com',
-            tags=[('aaa', 'bbb'), ('ccc',), ()])
-        self.assertEqual(str(error), "Empty tags can't be sent.")
+        self.assertEqual(self.p._stringTags([('aaa', 'bbb'), ('ccc',),
+            ('example.com/ddd', 'eee')]), "aaa=bbb;ccc;example.com/ddd=eee")
 
-    def test_sendMessageWithEmptyTagNames(self):
+
+    def test_validateEmptyTags(self):
         """
-        Passing invalid tags to L{IRC.sendMessage} raises a C{ValueError}.
+        Trying to validate tags with empty tags raises a C{ValueError}.
         """
-        error = self.assertRaises(ValueError, self.p.sendMessage, 'CMD',
-            'param1', prefix='irc.example.com',
-            tags=[('aaa', 'bbb'), ('',)])
-        self.assertEqual(str(error), "The tag name cannot be empty.")
+        error = self.assertRaises(ValueError, self.p._validateTags,
+            [('aaa', 'bbb'), ('ccc',), ()])
+        self.assertEqual(error.message, "Empty tags can't be sent.")
 
-    def test_sendMessageWithTooManyTagValues(self):
+
+    def test_validateEmptyTagNames(self):
         """
-        Passing invalid tags to L{IRC.sendMessage} raises a C{ValueError}.
+        Trying to validate tags with empty tag names raises a C{ValueError}.
         """
-        error = self.assertRaises(ValueError, self.p.sendMessage, 'CMD',
-            'param1', prefix='irc.example.com',
-            tags=[('aaa', 'bbb'), ('ccc',), ('ddd', 'eee', 'fff', 'ggg')])
-        self.assertEqual(str(error),
+        error = self.assertRaises(ValueError, self.p._validateTags,
+            [('aaa', 'bbb'), ('',)])
+        self.assertEqual(error.message, "The tag name cannot be empty.")
+
+
+    def test_validateEmptyTagValues(self):
+        """
+        Trying to validate tags with empty values raises a C{ValueError}.
+        """
+        error = self.assertRaises(ValueError, self.p._validateTags,
+            [('aaa', 'bbb'), ('ccc', '')])
+        self.assertEqual(error.message, "The tag value, if specified," \
+            " cannot be empty.")
+
+
+    def test_validateTooManyTagValues(self):
+        """
+        Trying to validate tags with more than one value raises a C{ValueError}.
+        """
+        error = self.assertRaises(ValueError, self.p._validateTags,
+            [('aaa', 'bbb'), ('ccc',), ('ddd', 'eee', 'fff', 'ggg')])
+        self.assertEqual(error.message,
             "Multiple values can't be specified for a tag.")
 
-    def test_sendTagsWithSpaces(self):
+
+    def test_validateTagsWithSpaces(self):
         """
-        Passing invalid tags to L{IRC.sendMessage} raises a C{ValueError}.
+        Trying to validate tags with spaces in them raises a C{ValueError}.
         """
-        error = self.assertRaises(ValueError, self.p.sendMessage, 'CMD',
-            'param1', prefix='irc.example.com',
-            tags=[('aaa bbb', 'ccc')])
-        self.assertEqual(str(error), "Tags may not contain spaces.")
+        error = self.assertRaises(ValueError, self.p._validateTags,
+            [('aaa bbb', 'ccc')])
+        self.assertEqual(error.message,
+            "Tags and values may not contain spaces.")
 
 
     def testPrivmsg(self):
