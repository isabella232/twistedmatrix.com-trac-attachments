Index: docs/words/howto/ircserverclientcomm.rst
===================================================================
--- docs/words/howto/ircserverclientcomm.rst	(revision 44574)
+++ docs/words/howto/ircserverclientcomm.rst	(working copy)
@@ -6,161 +6,71 @@
 Communicating With IRC Clients
 ==============================
 
+Communicating with clients is the whole point of an IRC server, so you want to make sure you're doing it properly.
+Today, we'll be looking at receiving messages from a client and sending messages to the client.
 
-
-
-
-
-Communicating with clients is the whole point of an IRC server, so you
-want to make sure you're doing it properly.  Today, we'll be looking at
-receiving messages from a client and sending messages to the client.
-
-
-    
-
-
-
 Representing Clients in Twisted
 -------------------------------
 
+Users in Twisted IRC are represented as subclasses of :api:`twisted.words.protocols.irc.IRC <the IRC class>`.
+This works as the protocol for your Factory class, and it will give you IRC features (like automatically parsing incoming lines) without you having to implement them yourself.  The rest of this guide assumes this setup.
 
-    
-
-Users in Twisted IRC are represented as subclasses of
-:api:`twisted.words.protocols.irc.IRC <the IRC class>`.
-This works as the protocol for your Factory class, and it will give you
-IRC features (like automatically parsing incoming lines) without you
-having to implement them yourself.  The rest of this guide assumes
-this setup.
-
-
-    
-
-
-
 Sending Messages
 ----------------
 
+Messages are sent to users using the user object's :api:`twisted.words.protocols.irc.IRC.sendMessage <sendMessage>` method.
 
-    
-
-Messages are sent to users using the user object's
-:api:`twisted.words.protocols.irc.IRC.sendMessage <sendMessage>`
-method.
-
-
-    
-
-
-
 Sending Basic Messages
 ~~~~~~~~~~~~~~~~~~~~~~
 
-
-    
-
 The basic syntax for sending for sending messages to users is
 as follows:
 
-
 .. code-block:: python
     user.sendMessage("COMMAND", param1, param2, prefix=server.name)
-The prefix keyword argument is optional, and it may be omitted to send a
-message without a prefix (for example, the ERROR command).
+The prefix keyword argument is optional, and it may be omitted to send a message without a prefix (for example, the ERROR command).
 The command is whatever command you plan to send, e.g. "PRIVMSG", "MODE", etc.
-All arguments following the command are the parameters you want to send for
-the command.  If the last argument needs to be prefixed with a colon (because
-it has spaces in it, e.g. a PRIVMSG message), you must add the colon to the
-beginning of the parameter yourself.  For example:
-
+All arguments following the command are the parameters you want to send for the command.
+If the last argument needs to be prefixed with a colon (because it has spaces in it, e.g. a PRIVMSG message), you must add the colon to the beginning of the parameter yourself.  For example:
 .. code-block:: python
     user.sendMessage("PRIVMSG", user.nickname, ":{}".format(message), prefix=sendingUser.hostmask)
 
-
-    
-
-
-
 Sending Messages with Tags
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-
-    
-
 Twisted also allows sending message tags as specified in
-`IRCv3 <http://ircv3.org/specification/message-tags-3.2>`__.
+`IRCv3 <https://ircv3.net/specs/core/message-tags-3.2.html>`__.
 
-Let's say, for example, that your server has a feature to play back a little
-bit of previous channel content when someone joins a channel.  You want a way to
-tell people when this message occurred.  The best way to provide this information
-is through the
-`server-time specification <http://ircv3.org/extensions/server-time-3.2>`__.
+Let's say, for example, that your server has a feature to play back a little bit of previous channel content when someone joins a channel.
+You want a way to tell people when this message occurred.  The best way to provide this information is through the `server-time specification <http://ircv3.net/specs/extensions/server-time-3.2.html>`__.
 
-Let's say you're storing past messages in a channel object in some structure like
-this:
+Let's say you're storing past messages in a channel object in some structure like this:
 
-
 .. code-block:: python
     channel.pastMessages = [
         ("I sent some text!", "author!ident@host", datetime object representing the when the message was sent),
         ("I did, too!", "someone-else!ident@host", another datetime object)
     ]
-Your actual implementation may vary.  I went with something simple here.  The
-times of the messages would be generated using something like ``datetime.utcnow()``
-when the message was received.
+Your actual implementation may vary.  I went with something simple here.  The times of the messages would be generated using something like ``datetime.utcnow()`` when the message was received.
 
-Tags are passed as a list of tuples.  If you're sending a number of tags, you may
-have an existing tag dictionary.  You can simply add to it (assuming ``message`` is 
-the loop variable for channel.pastMessages above):
+Tags are passed as a list of tuples.  If you're sending a number of tags, you may have an existing tag dictionary.  You can simply add to it (assuming ``message`` is the loop variable for channel.pastMessages above):
 
-
 .. code-block:: python
     sendingTags["server-time"] = "{}Z".format(message[2].isoformat()[:-3])
-This will generate the required time format and add it to the tag dictionary.
-The last three characters that we remove are the microseconds; removing the
-last three digits changes the precision to milliseconds.
+This will generate the required time format and add it to the tag dictionary. The last three characters that we remove are the microseconds; removing the last three digits changes the precision to milliseconds.
 
-Once your tags are collected, you can send the message.  The tag dictionary is
-passed using the ``tags`` keyword argument (in the same loop as above):
+Once your tags are collected, you can send the message.  The tag dictionary is passed using the ``tags`` keyword argument (in the same loop as above):
 
-
 .. code-block:: python
     user.sendMessage("PRIVMSG", user.nickname, message[0], prefix=message[1], tags=sendingTags)
 
-
-    
-
-
-
 Receiving Messages
 ------------------
+Twisted Words will handle receiving messages and parsing lines into tokens.  The parsed messages are passed into your command through the user's :api:`twisted.words.protocols.irc.IRC.handleCommand <handleCommand>` method.
 
-
-    
-
-Twisted Words will handle receiving messages and parsing lines into
-tokens.  The parsed messages are passed into your command through the
-user's
-:api:`twisted.words.protocols.irc.IRC.handleCommand <handleCommand>`
-method.
-
-
-    
-
-
-
 Handling Commands
 ~~~~~~~~~~~~~~~~~
+The default IRC handleCommand method calls the ``irc_COMMAND`` method when it receives the command ``COMMAND``, and it calls irc_unknown if the method for the command received isn't defined.
 
-
-    
-
-The default IRC handleCommand method calls the ``irc_COMMAND`` method
-when it receives the command ``COMMAND``, and it calls irc_unknown if
-the method for the command received isn't defined.
-
-
-
 .. code-block:: python
     
     from twisted.words.protocols import irc
@@ -174,19 +84,8 @@
             # do some stuff to handle PRIVMSG for your server's setup
         
         # lots of other command definitions
-If you have a server setup that doesn't allow you to do this (e.g. a modular
-server program), you may, of course, override the handleCommand function to
-route commands to your own handlers.
+If you have a server setup that doesn't allow you to do this (e.g. a modular server program), you may, of course, override the handleCommand function to route commands to your own handlers.
 
-
-    
-
-
-
 Receiving Messages with Tags
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-
-    
-
 This has not yet been implemented.
\ No newline at end of file
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 44574)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -279,7 +279,7 @@
             to send with the tag, or either None or "" if no value is to
             be sent with the tag.
         @type tags: L{dict} of tags (L{bytes}) => values (L{bytes})
-        @see: U{http://ircv3.org/specification/message-tags-3.2}
+        @see: U{https://ircv3.net/specs/core/message-tags-3.2.html}
         """
         if self.encoding is None:
             encoding = "utf-8" # Default the encoding to UTF-8 (safe for IRC)
@@ -331,7 +331,7 @@
             to send with the tag, or either None or "" if no value is to
             be sent with the tag.
         @type tags: L{dict} of tags (L{unicode}) => values (L{unicode})
-        @see: U{http://ircv3.org/specification/message-tags-3.2}
+        @see: U{https://ircv3.net/specs/core/message-tags-3.2.html}
         """
         if not command:
             raise ValueError("IRC message requires a command.")
@@ -355,7 +355,7 @@
 
         if len(params) > 15:
             log.msg("Message has %d parameters (RFC allows 15):\n%s" %
-                    (len(parameter_list), line))
+                    (len(params), line))
 
 
     def _stringTags(self, tags):
@@ -363,6 +363,9 @@
         Converts a tag dictionary to a string.
 
         @param tags: The tag dict passed to sendMsg.
+
+        @rtype: L{unicode}
+        @return: IRCv3-format tag string
         """
         self._validateTags(tags)
         tagStrings = []
@@ -391,16 +394,18 @@
 
     def _escapeTagValue(self, value):
         """
-        Escape the given tag value according to escaping rules
-        in IRCv3: http://ircv3.org/specification/message-tags-3.2
+        Escape the given tag value according to U{escaping rules in IRCv3
+        <https://ircv3.net/specs/core/message-tags-3.2.html>}.
 
         @param value: The string value to escape.
         @type value: L{str}
+        
+        @rtype: L{str}
+        @return: The escaped string for sending as a message value
         """
         return (value.replace("\\", "\\\\")
             .replace(";", "\\:")
             .replace(" ", "\\s")
-            .replace("\0", "\\0")
             .replace("\r", "\\r")
             .replace("\n", "\\n")
             )
Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 44574)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -1640,7 +1640,7 @@
         Passing a command and parameters to L{IRC.sendMessage} results in a
         query string that consists of the command and parameters, separated by
         a space, ending with '\r\n'.  The format is described in more detail in
-        RFC 1459 (U{http://tools.ietf.org/html/rfc1459.html#section-2.3}).
+        U{RFC 1459 <https://tools.ietf.org/html/rfc1459.html#section-2.3>}.
         """
         self.p.sendMessage('CMD', 'param1', 'param2')
         self.check('CMD param1 param2\r\n')
@@ -1651,7 +1651,7 @@
         Passing a command and parameters to L{IRC.sendMsg} results in a query
         string that consists of the command and parameters, separated by a
         space, ending with '\r\n'.  The format is described in more detail in
-        RFC 1459 (U{http://tools.ietf.org/html/rfc1459.html#section-2.3}).
+        U{RFC 1459 <https://tools.ietf.org/html/rfc1459.html#section-2.3>}.
         """
         self.p.sendMsg(u"CMD", (u"param1", u"param2"))
         self.check(b"CMD param1 param2\r\n")
@@ -1729,8 +1729,8 @@
         @tags :prefix COMMAND param1 param2\r\n
         The tags are a string of IRCv3 tags, preceded by '@'.  The rest
         of the string is as described in test_sendMessage.  For more on
-        the message tag format, see
-        U{http://ircv3.org/specification/message-tags-3.2}.
+        the message tag format, see U{the IRCv3 specification
+        <http://ircv3.net/specs/core/message-tags-3.2.html>}.
         """
         sendTags = {
             'aaa': 'bbb',
@@ -1758,8 +1758,8 @@
         @tags :prefix COMMAND param1 param2\r\n
         The tags are a string of IRCv3 tags, preceded by '@'.  The rest
         of the string is as described in test_sendMessage.  For more on
-        the message tag format, see
-        U{http://ircv3.org/specification/message-tags-3.2}.
+        the message tag format, see U{the IRCv3 specification
+        <https://ircv3.net/specs/core/message-tags-3.2.html>}.
         """
         sendTags = {
             u"aaa": u"bbb",
@@ -1781,8 +1781,9 @@
     def test_stringTags(self):
         """
         Stringing tags together results in a proper IRC tag string.
-        See U{http://ircv3.org/specification/message-tags-3.2} for more on
-        the message tag format.
+        See U{the IRCv3 specification
+        <https://ircv3.net/specs/core/message-tags-3.2.html>} for more on the
+        message tag format.
         """
         sendTags = {
             'aaa': 'bbb',
