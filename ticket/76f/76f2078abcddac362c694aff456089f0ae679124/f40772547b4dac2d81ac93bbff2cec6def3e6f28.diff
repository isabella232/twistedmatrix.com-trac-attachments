Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 40869)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -265,7 +265,7 @@
         First argument is the command, all subsequent arguments are parameters
         to that command.  If a prefix is desired, it may be specified with the
         keyword argument 'prefix'.
-        
+
         Message tags may be specified using the keyword argument 'tags', passing
         a list of 1- or 2-tuples.  One-tuples should be passed for tags whose
         presence has a meaning (i.e. those that do not show a value).
@@ -283,8 +283,20 @@
         if 'prefix' in prefix:
             line = ":%s %s" % (prefix['prefix'], line)
         if 'tags' in prefix:
-            line = "@%s %s" % (";".join(
-               ["=".join(tag) for tag in prefix['tags']]), line)
+            tagList = []
+            for tag in prefix['tags']:
+                if not tag:
+                    raise ValueError("Empty tags can't be sent.")
+                if len(tag) > 2:
+                    raise ValueError("Multiple values can't be specified for a tag.")
+                if not tag[0]:
+                    raise ValueError("The tag name cannot be empty.")
+                if len(tag) == 2 and not tag[1]:
+                    raise ValueError("The tag value, if specified, cannot be empty.")
+                if " " in tag[0] or (len(tag) == 2 and " " in tag[1]):
+                    raise ValueError("Tags may not contain spaces.")
+                tagList.append("=".join(tag))
+            line = "@%s %s" % (";".join(tagList), line)
         self.sendLine(line)
 
         if len(parameter_list) > 15:
Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 40869)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -1688,7 +1688,44 @@
         self.check('@aaa=bbb;ccc;example.com/ddd=eee :irc.example.com '
             'CMD param1 param2\r\n')
 
+    def test_sendMessageWithEmptyTags(self):
+        """
+        Passing invalid tags to L{IRC.sendMessage} raises a C{ValueError}.
+        """
+        error = self.assertRaises(ValueError, self.p.sendMessage, 'CMD',
+            'param1', prefix='irc.example.com',
+            tags=[('aaa', 'bbb'), ('ccc',), ()])
+        self.assertEqual(str(error), "Empty tags can't be sent.")
 
+    def test_sendMessageWithEmptyTagNames(self):
+        """
+        Passing invalid tags to L{IRC.sendMessage} raises a C{ValueError}.
+        """
+        error = self.assertRaises(ValueError, self.p.sendMessage, 'CMD',
+            'param1', prefix='irc.example.com',
+            tags=[('aaa', 'bbb'), ('',)])
+        self.assertEqual(str(error), "The tag name cannot be empty.")
+
+    def test_sendMessageWithTooManyTagValues(self):
+        """
+        Passing invalid tags to L{IRC.sendMessage} raises a C{ValueError}.
+        """
+        error = self.assertRaises(ValueError, self.p.sendMessage, 'CMD',
+            'param1', prefix='irc.example.com',
+            tags=[('aaa', 'bbb'), ('ccc',), ('ddd', 'eee', 'fff', 'ggg')])
+        self.assertEqual(str(error),
+            "Multiple values can't be specified for a tag.")
+
+    def test_sendTagsWithSpaces(self):
+        """
+        Passing invalid tags to L{IRC.sendMessage} raises a C{ValueError}.
+        """
+        error = self.assertRaises(ValueError, self.p.sendMessage, 'CMD',
+            'param1', prefix='irc.example.com',
+            tags=[('aaa bbb', 'ccc')])
+        self.assertEqual(str(error), "Tags may not contain spaces.")
+
+
     def testPrivmsg(self):
         self.p.privmsg("this-is-sender", "this-is-recip", "this is message")
         self.check(":this-is-sender PRIVMSG this-is-recip :this is message\r\n")
