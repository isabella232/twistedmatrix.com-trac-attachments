Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 42575)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -1667,6 +1667,102 @@
             "me:  ")
 
 
+    def test_sendMessageWithPrefix(self):
+        """
+        Passing a command and parameters with a specified prefix to
+        L{IRC.sendMessage} results in a proper query string including the
+        specified line prefix.
+        """
+        self.p.sendMessage('CMD', 'param1', 'param2', prefix='irc.example.com')
+        self.check(':irc.example.com CMD param1 param2\r\n')
+
+
+    def test_sendMessageWithTags(self):
+        """
+        Passing a command and parameters with a specified prefix and tags
+        to L{IRC.sendMessage} results in a proper query string including
+        the specified line prefix and appropriate tags syntax.
+        """
+        sendTags = {
+            'aaa': 'bbb',
+            'ccc': None,
+            'example.com/ddd': 'eee'
+        }
+        self.p.sendMessage('CMD', 'param1', 'param2', prefix='irc.example.com',
+            tags=sendTags)
+        outputTags = []
+        for tag in sendTags.iterkeys(): # Maintain in tag order
+            if tag == 'aaa':
+                outputTags.append('aaa=bbb')
+            elif tag == 'ccc':
+                outputTags.append('ccc')
+            elif tag == 'example.com/ddd':
+                outputTags.append('example.com/ddd=eee')
+        self.check('@%s :irc.example.com CMD param1 param2\r\n'
+            % (';'.join(outputTags)))
+
+
+    def test_stringTags(self):
+        """
+        Stringing tags together results in a proper IRC tag string.
+        """
+        sendTags = {
+            'aaa': 'bbb',
+            'ccc': None,
+            'example.com/ddd': 'eee'
+        }
+        expectedResultTags = ('aaa=bbb', 'ccc', 'example.com/ddd=eee')
+        tags = self.p._stringTags(sendTags).split(';')
+        for tag in expectedResultTags:
+            self.assertIn(tag, tags)
+        for tag in tags:
+            self.assertIn(tag, expectedResultTags)
+
+
+    def test_validateEmptyTags(self):
+        """
+        Trying to validate tags with empty tags raises a C{ValueError}.
+        """
+        sendTags = {
+            'aaa': 'bbb',
+            'ccc': None,
+            '': ''
+        }
+        error = self.assertRaises(ValueError, self.p._validateTags, sendTags)
+        self.assertEqual(error.message, "A tag name is required.")
+        sendTags = {
+            'aaa': 'bbb',
+            'ccc': None,
+            None: 'beep'
+        }
+        error = self.assertRaises(ValueError, self.p._validateTags, sendTags)
+        self.assertEqual(error.message, "A tag name is required.")
+
+
+    def test_errorTagsWithInvalidChars(self):
+        """
+        Trying to validate tags with invalid characters in them raises a C{ValueError}.
+        """
+        sendTags = {
+            'aaa bbb': 'ccc'
+        }
+        error = self.assertRaises(ValueError, self.p._validateTags, sendTags)
+        self.assertEqual(error.message, 'Tag contains invalid characters.')
+        sendTags = {
+            'aaa_b^@': 'ccc'
+        }
+        error = self.assertRaises(ValueError, self.p._validateTags, sendTags)
+        self.assertEqual(error.message, 'Tag contains invalid characters.')
+
+
+    def test_validateTagValueEscaping(self):
+        """
+        Tags with invalid characters should be properly escaped.
+        """
+        self.assertEqual(self.p._escapeTagValue('test\r\n ;;'),
+            'test\\r\\n\\s\\:\\:')
+
+
     def testPrivmsg(self):
         self.p.privmsg("this-is-sender", "this-is-recip", "this is message")
         self.check(":this-is-sender PRIVMSG this-is-recip :this is message\r\n")
@@ -2277,15 +2373,6 @@
             ['foo.txt', '127.0.0.1', '1025']))])
 
 
-    def test_dccSendNotImplemented(self):
-        """
-        L{irc.IRCClient.dccDoSend} is raises C{NotImplementedError}
-        """
-        client = irc.IRCClient()
-        self.assertRaises(NotImplementedError,
-                          client.dccSend, 'username', None)
-
-
     def test_dccSendMalformedRequest(self):
         """
         L{irc.IRCClient.dcc_SEND} raises L{irc.IRCBadMessage} when it is passed
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 42575)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -261,10 +261,28 @@
     def sendMessage(self, command, *parameter_list, **prefix):
         """
         Send a line formatted as an IRC message.
-
-        First argument is the command, all subsequent arguments are parameters
-        to that command.  If a prefix is desired, it may be specified with the
-        keyword argument 'prefix'.
+        
+        @param command: The command or numeric to send.
+        @type command: C{str}
+        
+        @param parameter_list: The positional arguments are all
+            the arguments to be sent with the command.
+        @type parameter_list: All arguments: C{str}
+        
+        @param prefix: An optional prefix to send with the message.
+            Must be supplied as a keyword argument.  If not given,
+            no prefix is sent.
+        @type prefix: C{str}
+        
+        @param tags: An optional dict of message tags.  Must be
+            supplied as a keyword argument.  If not given, no
+            tags are sent.  Tags to be sent without a value can be
+            given a value in the dict of None or an empty string
+            The value should be passed in unescaped; it will be
+            escaped according to the message tags specification
+            before it is sent.
+        @type tags: C{dict}
+        @see: U{http://ircv3.org/specification/message-tags-3.2}
         """
         if not command:
             raise ValueError("IRC message requires a command.")
@@ -278,6 +296,9 @@
         line = ' '.join([command] + list(parameter_list))
         if 'prefix' in prefix:
             line = ":%s %s" % (prefix['prefix'], line)
+        if 'tags' in prefix:
+            tags = self._stringTags(prefix['tags'])
+            line = "@%s %s" % (tags, line)
         self.sendLine(line)
 
         if len(parameter_list) > 15:
@@ -285,6 +306,37 @@
                     (len(parameter_list), line))
 
 
+    def _stringTags(self, tags):
+        self._validateTags(tags)
+        tagStrings = []
+        for tag, value in tags.iteritems():
+            if value:
+                tagStrings.append("%s=%s" % (tag, self._escapeTagValue(value)))
+            else:
+                tagStrings.append(tag)
+        return ";".join(tagStrings)
+
+
+    def _validateTags(self, tags):
+        for tag, value in tags.iteritems():
+            if not tag:
+                raise ValueError("A tag name is required.")
+            for char in tag:
+                if not char.isalnum() and char not in ("-", "/", "."):
+                    raise ValueError("Tag contains invalid characters.")
+
+
+    def _escapeTagValue(self, value):
+        return (value.replace("\\", "\\\\")
+            .replace(";", "\\:")
+            .replace(" ", "\\s")
+            .replace("\0", "\\0")
+            .replace("\r", "\\r")
+            .replace("\n", "\\n")
+            .replace("\a", "\\a")
+            )
+
+
     def dataReceived(self, data):
         """
         This hack is to support mIRC, which sends LF only, even though the RFC
Index: docs/words/howto/index.rst
===================================================================
--- docs/words/howto/index.rst	(revision 42575)
+++ docs/words/howto/index.rst	(working copy)
@@ -27,6 +27,6 @@
 
 
 
+  - :doc:`IRC Servers: Communicating With Clients <ircserverclientcomm>`
 
 
-
