--- imap4.py.sav	2005-11-02 16:04:30.000000000 +0100
+++ imap4.py	2005-11-03 13:51:22.000000000 +0100
@@ -2024,7 +2024,10 @@
     def _setupForLiteral(self, rest, octets):
         self._pendingBuffer = self.messageFile(octets)
         self._pendingSize = octets
-        self._parts = [rest, '\r\n']
+        if self._parts is None:
+            self._parts = [rest, '\r\n']
+        else:
+            self._parts.extend([rest, '\r\n'])
         self.setRawMode()
 
     def connectionMade(self):
@@ -2041,24 +2044,23 @@
         if self.timeout > 0:
             self.resetTimeout()
 
-        if self._parts is None:
-            lastPart = line.rfind(' ')
-            if lastPart != -1:
-                lastPart = line[lastPart + 1:]
-                if lastPart.startswith('{') and lastPart.endswith('}'):
-                    # It's a literal a-comin' in
-                    try:
-                        octets = int(lastPart[1:-1])
-                    except ValueError:
-                        raise IllegalServerResponse(line)
+        lastPart = line.rfind(' ')
+        if lastPart != -1:
+            lastPart = line[lastPart + 1:]
+            if lastPart.startswith('{') and lastPart.endswith('}'):
+                # It's a literal a-comin' in
+                try:
+                    octets = int(lastPart[1:-1])
+                except ValueError:
+                    raise IllegalServerResponse(line)
+                if self._parts is None:
                     self._tag, parts = line.split(None, 1)
-                    self._setupForLiteral(parts, octets)
-                    return
                 else:
-                    # It isn't a literal at all
-                    self._regularDispatch(line)
-            else:
-                self._regularDispatch(line)
+                    parts = line
+                self._setupForLiteral(parts, octets)
+                return
+        if self._parts is None:
+            self._regularDispatch(line)
         else:
             # If an expression is in progress, no tag is required here
             # Since we didn't find a literal indicator, this expression
@@ -5156,6 +5158,8 @@
         elif l.startswith('mime]'):
             self.pending_body.mime = self.MIME()
             used += 5
+        #elif l[:l.index("]")].isdigit():
+        #    used += l.index("]") + 1
         else:
             h = self.Header()
             if l.startswith('header.fields.not'):
@@ -5164,7 +5168,7 @@
             elif l.startswith('header.fields'):
                 used += 13
             else:
-                raise Exception("Unhandled section contents")
+                raise Exception("Unhandled section contents " + l)
 
             self.pending_body.header = h
             self.state.extend(('finish_section', 'header_list', 'whitespace'))
@@ -5360,7 +5364,7 @@
     'PLAINCredentials', 'LOGINCredentials',
 
     # Simple query interface
-    'Query', 'Not', 'Or', 
+    'Query', 'Not', 'Or',
     
     # Miscellaneous
     'MemoryAccount',
