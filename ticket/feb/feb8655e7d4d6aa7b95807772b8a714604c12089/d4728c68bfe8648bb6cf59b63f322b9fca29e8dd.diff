Index: twisted/web/test/test_xml.py
===================================================================
--- twisted/web/test/test_xml.py	(revision 26282)
+++ twisted/web/test/test_xml.py	(working copy)
@@ -652,7 +652,6 @@
         self.assertEquals(
             d.documentElement.getElementsByTagName("y")[1].getAttributeNS('base','q'),
             '1')
-
         d2 = microdom.parseString(s2)
         self.assertEquals(d2.documentElement.namespace,
                           "base")
@@ -684,6 +683,216 @@
                           '<div xmlns="http://www.w3.org/1999/xhtml"><ol></ol></div>')
 
 
+    def testPrefixedTagClose(self):
+        """
+        XML elements with a prefixed name as per upper level tag definition
+        have a start-tag of C{"<prefix:tag>"} and an end-tag of
+        C{"<prefix:tag>"}.
+
+        Refer to U{http://www.w3.org/TR/xml-names/#ns-using} for details.
+        """
+        document = microdom.Document()
+        # creates a root element
+        root = document.createElement(
+            "root",
+            namespace = "http://example.com/ns/test")
+        
+        # appends a child in another NS
+        myTag1 = document.createElement(
+            "mytag",
+            namespace = "http://example.com/ns/mytags")
+        myTag2 = document.createElement(
+            "mytag",
+            namespace = "http://example.com/ns/mytags")
+        
+        myTag1.appendChild(myTag2)
+        root.appendChild(myTag1)
+
+        # add prefixes to root
+        root.addPrefixes({ "http://example.com/ns/mytags": "mytags" })
+        document.appendChild(root)
+        
+        # ok, the xml should appear like this
+        xmlOk = (
+            '<?xml version="1.0"?>'
+            '<root xmlns="http://example.com/ns/test" '
+            'xmlns:mytags="http://example.com/ns/mytags">'
+            '<mytags:mytag><mytags:mytag></mytags:mytag></mytags:mytag>'
+            '</root>'
+        )
+        
+        xmlOut = document.toxml()
+        self.assertEquals(xmlOut, xmlOk)
+
+
+    def testPrefixPropagation(self):
+        """
+        XML namespaces are scoped when the C{"xmlns"} attribute is explicitly
+        set. They are not when prefixes are used instead, as prefixes are not
+        the sematical equivalent of an C{"xmlns"} attribute.
+
+        See U{http://www.w3.org/TR/xml-names/#scoping} for details.
+
+        To further clarify the matter, the following::
+
+            <root xmlns="http://example.com/ns/test">
+                <mytag xmlns="http://example.com/ns/mytags">
+                    <mysubtag xmlns="http://example.com/ns/mytags">
+                        <element xmlns="http://example.com/ns/test"></element>
+                    </mysubtag>
+                </mytag>
+            </root>
+
+        Should become this after all the namespace declarations have been
+        I{moved up}::
+
+            <root xmlns="http://example.com/ns/test"
+                  xmlns:mytags="http://example.com/ns/mytags">
+                <mytags:mytag>
+                    <mytags:mysubtag>
+                        <element></element>
+                    </mytags:mysubtag>
+                </mytags:mytag>     
+            </root>
+        """
+        document = microdom.Document()
+        # creates a root element
+        root = document.createElement(
+            "root",
+            namespace = "http://example.com/ns/test")
+        document.appendChild(root)
+
+        # appends a child in another NS
+        mytag = document.createElement(
+            "mytag",
+            namespace = "http://example.com/ns/mytags")
+        root.appendChild(mytag)
+        
+        # another tag in the same NS as mytag
+        mysubtag = document.createElement(
+            "mysubtag",
+            namespace = "http://example.com/ns/mytags")
+        mytag.appendChild(mysubtag)
+
+        element = document.createElement(
+            "element",
+            namespace = "http://example.com/ns/test")
+        mysubtag.appendChild(element)
+        
+        root.addPrefixes({ "http://example.com/ns/mytags": "mytags" })
+
+        xmlOk = (
+            '<?xml version="1.0"?>'
+            '<root xmlns="http://example.com/ns/test" '
+            'xmlns:mytags="http://example.com/ns/mytags">'
+            '<mytags:mytag>'
+            '<mytags:mysubtag><element></element></mytags:mysubtag>'
+            '</mytags:mytag>'
+            '</root>'
+        )
+        xmlOut = document.toxml()
+        self.assertEquals(xmlOut, xmlOk)
+
+
+    def testNamespaceCollapsingAfterParse(self):
+        """
+        When I{collapsing} namespaces definition onto the root tag after
+        having parsed an XML with scoped namespace definition, we want to
+        check that the inner, scoped tags retain the prefix.
+
+        We also check that the defaulting in an deeply nested tag does not
+        result in said tag being prefixed.
+
+        As last check, we define that an inner tag which has been outscoped
+        through a C{xmlns=""} does not get prefixed nor maintains the
+        defaulting when namespaces are collapsed upward, as it logically
+        resides in the same, undeclared namespace of the root tag (see
+        U{http://www.w3.org/TR/REC-xml-names/#defaulting}).
+
+        However, in the case where there is a default namespace, the namespace
+        deletion must be retained, as the tag exist in an undefined namespace
+        that is B{not} the default.
+        """
+        s1 = '''
+        <?xml version="1.0"?>
+        <root>
+            <mytag xmlns="http://example.com/ns/mytags">
+                <div xmlns="http://www.w3.org/1999/xhtml">
+                    <p><element xmlns="" /></p>
+                </div>
+            </mytag>
+        </root>
+        '''
+
+        d1 = microdom.parseString(s1)
+        
+        d1.documentElement.addPrefixes({
+            "http://example.com/ns/mytags": "mytags",
+            "http://www.w3.org/1999/xhtml": "xhtml"
+        })
+
+        xmlOk1 = (
+            '<?xml version="1.0"?>'
+            '<root '
+            'xmlns:xhtml="http://www.w3.org/1999/xhtml" '
+            'xmlns:mytags="http://example.com/ns/mytags">'
+            '<mytags:mytag>'
+            '<xhtml:div><xhtml:p><element></element></xhtml:p></xhtml:div>'
+            '</mytags:mytag>'
+            '</root>'
+        )
+        xmlOut1 = d1.toxml()
+        self.assertEquals(xmlOut1, xmlOk1)
+        
+        # testing the OR condition by rendering just the root element
+
+        xmlOk1a = (
+            '<root '
+            'xmlns:xhtml="http://www.w3.org/1999/xhtml" '
+            'xmlns:mytags="http://example.com/ns/mytags">'
+            '<mytags:mytag>'
+            '<xhtml:div><xhtml:p><element></element></xhtml:p></xhtml:div>'
+            '</mytags:mytag>'
+            '</root>'
+        )
+        xmlOut1a = d1.documentElement.toxml()
+        self.assertEquals(xmlOut1a, xmlOk1a)
+
+        s2 = '''
+        <?xml version="1.0"?>
+        <root xmlns="http://example.com/ns/test">
+            <mytag xmlns="http://example.com/ns/mytags">
+                <div xmlns="http://www.w3.org/1999/xhtml">
+                    <p><element xmlns="" /></p>
+                </div>
+            </mytag>
+        </root>
+        '''
+
+        d2 = microdom.parseString(s2)
+        
+        d2.documentElement.addPrefixes({
+            "http://example.com/ns/mytags": "mytags",
+            "http://www.w3.org/1999/xhtml": "xhtml"
+        })
+
+        xmlOk2 = (
+            '<?xml version="1.0"?>'
+            '<root xmlns="http://example.com/ns/test" '
+            'xmlns:xhtml="http://www.w3.org/1999/xhtml" '
+            'xmlns:mytags="http://example.com/ns/mytags">'
+            '<mytags:mytag>'
+            '<xhtml:div>'
+            '<xhtml:p><element xmlns=""></element></xhtml:p>'
+            '</xhtml:div>'
+            '</mytags:mytag>'
+            '</root>'
+        )
+        xmlOut2 = d2.toxml()
+        self.assertEquals(xmlOut2, xmlOk2)
+
+
+
 class TestBrokenHTML(TestCase):
     """
     Tests for when microdom encounters very bad HTML and C{beExtremelyLenient}
Index: twisted/web/microdom.py
===================================================================
--- twisted/web/microdom.py	(revision 26282)
+++ twisted/web/microdom.py	(working copy)
@@ -573,10 +573,21 @@
             begin = [newl, indent] + begin
         bext = begin.extend
         writeattr = lambda _atr, _val: bext((' ', _atr, '="', escape(_val), '"'))
+        # setting an end tag local variable: when we see the need to prefix
+        # the currently processed tag, this variable will get changed keeping
+        # the state coherent.
+        # See http://www.w3.org/TR/xml-names/#ns-using
+        # BBB: why is endTag needed? http://www.w3.org/TR/xml/#sec-starttags
+        endTagName = self.endTagName 
         if namespace != self.namespace and self.namespace is not None:
             if nsprefixes.has_key(self.namespace):
                 prefix = nsprefixes[self.namespace]
-                bext(prefix+':'+self.tagName)
+                if prefix != '':
+                    bext(prefix + ':' + self.tagName)
+                    # since the start tag has to be prefixed, so is the end tag
+                    endTagName = prefix + ':' + self.endTagName
+                else:
+                    bext(self.tagName)
             else:
                 bext(self.tagName)
                 writeattr("xmlns", self.namespace)
@@ -604,6 +615,14 @@
             downprefixes = newprefixes
         else:
             downprefixes = nsprefixes
+        # sets the passed namespace variable to be the current if we are a root
+        # node. This because it is passed empty by default, but when passing
+        # it down, we want to have in it the value we have in the top-level
+        # xmlns attribute
+        # BBB: this is quite messy
+        if isinstance(self.parentNode, Document) or self.parentNode is None:
+            if self.namespace is not None and namespace == '':
+                namespace = self.namespace
         w(j(begin))
         if self.childNodes:
             w(">")
@@ -613,13 +632,13 @@
                    self.tagName in FORMATNICELY:
                     w(j((newl, newindent)))
                 child.writexml(stream, newindent, addindent, newl, strip,
-                               downprefixes, self.namespace)
+                               downprefixes, namespace)
             if self.tagName in BLOCKELEMENTS:
                 w(j((newl, indent)))
-            w(j(("</", self.endTagName, '>')))
+            w(j(("</", endTagName, '>')))
 
         elif self.tagName.lower() not in ALLOWSINGLETON:
-            w(j(('></', self.endTagName, '>')))
+            w(j(('></', endTagName, '>')))
         else:
             w(" />")
 
