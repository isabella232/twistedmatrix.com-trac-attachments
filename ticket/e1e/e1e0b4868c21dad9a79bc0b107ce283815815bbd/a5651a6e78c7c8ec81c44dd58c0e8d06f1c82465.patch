Index: twisted/test/test_jelly.py
===================================================================
--- twisted/test/test_jelly.py	(revision 94)
+++ twisted/test/test_jelly.py	(working copy)
@@ -13,6 +13,10 @@
 except ImportError:
     decimal = None
 
+import __builtin__
+if not hasattr( __builtin__, 'set' ):
+    set = None
+
 from twisted.spread import jelly, pb
 
 from twisted.trial import unittest
@@ -124,7 +128,14 @@
             self.assertEquals(input, output)
             self.assertNotIdentical(input, output)
 
+    if set:
+        def testSet(self):
+            input = [set([1,2,3]), frozenset([4,5,6])]
+            output = jelly.unjelly(jelly.jelly(input))
+            self.assertEquals(input, output)
+            self.assertNotIdentical(input, output)
 
+
     def testSimple(self):
         """
         simplest test case
Index: twisted/spread/jelly.py
===================================================================
--- twisted/spread/jelly.py	(revision 94)
+++ twisted/spread/jelly.py	(working copy)
@@ -86,6 +86,10 @@
 except ImportError:
     decimal = None
 
+import __builtin__
+if not hasattr( __builtin__, 'set' ):
+    set = None
+
 from new import instance
 from new import instancemethod
 from zope.interface import implements
@@ -119,11 +123,13 @@
 # mutable collections
 dictionary_atom = "dictionary"      # d
 list_atom = 'list'                  # l
+set_atom = 'set'
 
 # immutable collections
 #   (assignment to __dict__ and __class__ still might go away!)
 tuple_atom = "tuple"                # t
 instance_atom = 'instance'          # i
+frozenset_atom = 'frozenset'
 
 
 # errors
@@ -479,6 +485,14 @@
                     sxp.append(dictionary_atom)
                     for key, val in obj.items():
                         sxp.append([self.jelly(key), self.jelly(val)])
+                elif set and objType is set:
+                    sxp.append(set_atom)
+                    for item in obj:
+                        sxp.append(self.jelly(item))
+                elif set and objType is frozenset:
+                    sxp.append(frozenset_atom)
+                    for item in obj:
+                        sxp.append(self.jelly(item))
                 else:
                     className = qual(obj.__class__)
                     persistent = None
@@ -663,6 +677,20 @@
             self.unjellyInto(l, elem, lst[elem])
         return l
 
+    if set:
+        def _unjelly_set( self, lst ):
+            l = range(len(lst))
+            for elem in l:
+                self.unjellyInto(l, elem, lst[elem])
+            return set(l)
+
+        def _unjelly_frozenset( self, lst ):
+            l = range(len(lst))
+            for elem in l:
+                self.unjellyInto(l, elem, lst[elem])
+            return frozenset(l)
+
+
     def _unjelly_dictionary(self, lst):
         d = {}
         for k, v in lst:
@@ -827,6 +855,9 @@
             self.allowedTypes['unicode'] = 1
         if decimal:
             self.allowedTypes['decimal'] = 1
+        if set:
+            self.allowedTypes['set'] = 1
+            self.allowedTypes['frozenset'] = 1
         self.allowedModules = {}
         self.allowedClasses = {}
 
