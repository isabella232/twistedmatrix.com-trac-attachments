=== modified file 'twisted/protocols/ftp.py'
--- twisted/protocols/ftp.py	revid:svn-v4:bbbe8e31-12d6-0310-92fd-ac37d47ddeeb:trunk:33404
+++ twisted/protocols/ftp.py	2012-01-15 05:46:18 +0000
@@ -1027,6 +1027,17 @@
 
 
     def ftp_RETR(self, path):
+        """
+        This command causes the content of a file to be sent over the data
+        transfer channel. If the path is to a folder, an error will be raised.
+
+        @type path: C{str}
+        @param path: The path to the file which should be transferred over the
+        data transfer channel.
+
+        @rtype: L{Deferred}
+        @return: a L{Deferred} which will be fired when the transfer is done.
+        """
         if self.dtpInstance is None:
             raise BadCmdSequenceError('PORT or PASV required before RETR')
 
@@ -1071,7 +1082,7 @@
             return d
 
         def ebOpened(err):
-            if not err.check(PermissionDeniedError, FileNotFoundError, IsNotADirectoryError):
+            if not err.check(PermissionDeniedError, FileNotFoundError, IsADirectoryError):
                 log.msg("Unexpected error attempting to open file for transmission:")
                 log.err(err)
             if err.check(FTPCmdError):

=== modified file 'twisted/test/test_ftp.py'
--- twisted/test/test_ftp.py	revid:svn-v4:bbbe8e31-12d6-0310-92fd-ac37d47ddeeb:trunk:33404
+++ twisted/test/test_ftp.py	2012-01-15 05:39:05 +0000
@@ -546,6 +546,38 @@
         return d
 
 
+    def test_downloadFolder(self):
+        '''When RETR is called for a folder, it will fail complaining that
+        the path is a folder.
+        '''
+        #Make a directory in the current working directory
+        self.dirPath.child('foo').createDirectory()
+        # Login
+        d = self._anonymousLogin()
+        d.addCallback(self._makeDataConnection)
+
+        def retrFolder(downloader):
+            downloader.transport.loseConnection()
+            deferred = self.client.queueStringCommand('RETR foo')
+            return deferred
+        d.addCallback(retrFolder)
+
+        def failOnSuccess(result):
+            raise AssertionError('Downloading a folder should not succeed.')
+        d.addCallback(failOnSuccess)
+
+        def checkError(failure):
+            failure.trap(ftp.CommandFailed)
+            self.assertEqual(
+                ['550 foo: is a directory'], failure.value.message)
+            current_errors = self.flushLoggedErrors()
+            self.assertEqual(
+                0, len(current_errors),
+                'No errors should be logged while downloading a folder.')
+        d.addErrback(checkError)
+        return d
+
+
     def test_NLSTEmpty(self):
         """
         NLST with no argument returns the directory listing for the current

