=== modified file 'twisted/protocols/ftp.py'
--- twisted/protocols/ftp.py	2011-12-26 20:01:59 +0000
+++ twisted/protocols/ftp.py	2012-01-15 05:46:18 +0000
@@ -1027,6 +1027,17 @@
 
 
     def ftp_RETR(self, path):
+        """
+        This command causes the content of a file to be sent over the data
+        transfer channel. If the path is to a folder, an error will be raised.
+
+        @type path: C{str}
+        @param path: The path to the file which should be transferred over the
+        data transfer channel.
+
+        @rtype: L{Deferred}
+        @return: a L{Deferred} which will be fired when the transfer is done.
+        """
         if self.dtpInstance is None:
             raise BadCmdSequenceError('PORT or PASV required before RETR')
 

=== modified file 'twisted/test/test_ftp.py'
--- twisted/test/test_ftp.py	2011-12-26 20:01:59 +0000
+++ twisted/test/test_ftp.py	2012-01-15 05:39:05 +0000
@@ -546,8 +546,11 @@
         return d
 
 
-    def testDownloadFolder(self):
-        # Make a directory in the current working directory
+    def test_downloadFolder(self):
+        '''When RETR is called for a folder, it will fail complaining that
+        the path is a folder.
+        '''
+        #Make a directory in the current working directory
         self.dirPath.child('foo').createDirectory()
         # Login
         d = self._anonymousLogin()
@@ -560,7 +563,7 @@
         d.addCallback(retrFolder)
 
         def failOnSuccess(result):
-            raise AssertionError('Downloading a file should not succeed.')
+            raise AssertionError('Downloading a folder should not succeed.')
         d.addCallback(failOnSuccess)
 
         def checkError(failure):

