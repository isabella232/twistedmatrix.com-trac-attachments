Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 38110)
+++ twisted/python/filepath.py	(working copy)
@@ -11,6 +11,7 @@
 import os
 import errno
 import base64
+import warnings
 from hashlib import sha1
 
 from os.path import isabs, exists, normpath, abspath, splitext
@@ -618,7 +619,8 @@
     @type path: L{bytes}
     @ivar path: The path from which 'downward' traversal is permitted.
 
-    @ivar statinfo: The currently cached status information about the file on
+    @ivar statinfo: This variable has been deprecated since version 13.10. 
+        The currently cached status information about the file on
         the filesystem that this L{FilePath} points to.  This attribute is
         C{None} if the file is in an indeterminate state (either this
         L{FilePath} has not yet had cause to call C{stat()} yet or
@@ -632,8 +634,10 @@
         C{getModificationTime()}, and so on.
     @type statinfo: L{int} or L{types.NoneType} or L{os.stat_result}
     """
+    
+    warnings.filterwarnings('always', category=DeprecationWarning)
 
-    statinfo = None
+    _statinfo = None
     path = None
 
     sep = slash.encode("ascii")
@@ -652,10 +656,18 @@
         returning everything else.
         """
         d = self.__dict__.copy()
-        if 'statinfo' in d:
-            del d['statinfo']
+        if '_statinfo' in d:
+            del d['_statinfo']
         return d
 
+    def __getattribute__(self, name):
+        if name == 'statinfo':
+            warnings.warn(
+            '''Attribute statinfo has been deprecated since version 13.1.0, 
+            use methods like getSize(), getUserID() instead.''',
+            category=DeprecationWarning, stacklevel=2)
+            name='_statinfo'
+        return object.__getattribute__(self, name)
 
     def child(self, path):
         """
@@ -842,9 +854,9 @@
             reloading metadata.
         """
         try:
-            self.statinfo = stat(self.path)
+            self._statinfo = stat(self.path)
         except OSError:
-            self.statinfo = 0
+            self._statinfo = 0
             if reraise:
                 raise
 
@@ -855,7 +867,7 @@
 
         @since: 10.1.0
         """
-        self.statinfo = None
+        self._statinfo = None
 
 
     def chmod(self, mode):
@@ -878,10 +890,10 @@
         @raise Exception: if the size cannot be obtained.
         @rtype: L{int}
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return st.st_size
 
 
@@ -892,10 +904,10 @@
         @return: a number of seconds from the epoch.
         @rtype: L{float}
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return float(st.st_mtime)
 
 
@@ -906,10 +918,10 @@
         @return: a number of seconds from the epoch.
         @rtype: L{float}
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return float(st.st_ctime)
 
 
@@ -920,10 +932,10 @@
         @return: a number of seconds from the epoch.
         @rtype: L{float}
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return float(st.st_atime)
 
 
@@ -941,10 +953,10 @@
         if platform.isWindows():
             raise NotImplementedError
 
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return st.st_ino
 
 
@@ -963,10 +975,10 @@
         if platform.isWindows():
             raise NotImplementedError
 
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return st.st_dev
 
 
@@ -989,10 +1001,10 @@
         if platform.isWindows():
             raise NotImplementedError
 
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return st.st_nlink
 
 
@@ -1009,10 +1021,10 @@
         if platform.isWindows():
             raise NotImplementedError
 
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return st.st_uid
 
 
@@ -1029,10 +1041,10 @@
         if platform.isWindows():
             raise NotImplementedError
 
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return st.st_gid
 
 
@@ -1045,10 +1057,10 @@
         @rtype: L{Permissions}
         @since: 11.1
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat()
-            st = self.statinfo
+            st = self._statinfo
         return Permissions(S_IMODE(st.st_mode))
 
 
@@ -1060,11 +1072,11 @@
             C{False} in the other cases.
         @rtype: L{bool}
         """
-        if self.statinfo:
+        if self._statinfo:
             return True
         else:
             self.restat(False)
-            if self.statinfo:
+            if self._statinfo:
                 return True
             else:
                 return False
@@ -1078,10 +1090,10 @@
             otherwise.
         @rtype: L{bool}
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat(False)
-            st = self.statinfo
+            st = self._statinfo
             if not st:
                 return False
         return S_ISDIR(st.st_mode)
@@ -1095,10 +1107,10 @@
             directory, socket, named pipe, etc), C{False} otherwise.
         @rtype: L{bool}
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat(False)
-            st = self.statinfo
+            st = self._statinfo
             if not st:
                 return False
         return S_ISREG(st.st_mode)
@@ -1112,10 +1124,10 @@
         @rtype: L{bool}
         @since: 11.1
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat(False)
-            st = self.statinfo
+            st = self._statinfo
             if not st:
                 return False
         return S_ISBLK(st.st_mode)
@@ -1129,10 +1141,10 @@
         @rtype: L{bool}
         @since: 11.1
         """
-        st = self.statinfo
+        st = self._statinfo
         if not st:
             self.restat(False)
-            st = self.statinfo
+            st = self._statinfo
             if not st:
                 return False
         return S_ISSOCK(st.st_mode)
