diff --git twisted/test/proto_helpers.py twisted/test/proto_helpers.py
index 3b0d27f..517ec17 100644
--- twisted/test/proto_helpers.py
+++ twisted/test/proto_helpers.py
@@ -18,7 +18,7 @@ from twisted.python import failure
 from twisted.python.compat import unicode
 from twisted.internet.interfaces import (
     ITransport, IConsumer, IPushProducer, IConnector, IReactorTCP, IReactorSSL,
-    IReactorUNIX, IReactorSocket, IListeningPort, IReactorFDSet
+    IReactorUNIX, IReactorSocket, IListeningPort, IReactorFDSet, IReactorCore
 )
 from twisted.internet.abstract import isIPv6Address
 from twisted.internet.error import UnsupportedAddressFamily
@@ -370,7 +370,8 @@ class _FakeConnector(object):
 
 
 @implementer(
-    IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket, IReactorFDSet
+    IReactorTCP, IReactorSSL, IReactorUNIX, IReactorSocket, IReactorFDSet,
+    IReactorCore
 )
 class MemoryReactor(object):
     """
@@ -425,6 +426,7 @@ class MemoryReactor(object):
 
         self.readers = set()
         self.writers = set()
+        self.running = False
 
 
     def adoptStreamPort(self, fileno, addressFamily, factory):
@@ -602,6 +604,58 @@ class MemoryReactor(object):
         self.readers.clear()
         self.writers.clear()
 
+    def resolve(*args, **kw):
+        """
+        Return a L{twisted.internet.defer.Deferred} that will resolve a hostname.
+        """
+
+    def run():
+        """
+        Fake L{IReactorCore.run}.
+        """
+        self.running = True
+
+    def stop():
+        """
+        Fake L{IReactorCore.stop}.
+        """
+        self.running = False
+
+    def crash():
+        """
+        Fake L{IReactorCore.crash}.
+        """
+        self.running = False
+
+    def iterate(*args, **kw):
+        """
+        Fake L{IReactorCore.iterate}.
+        """
+        pass
+
+    def fireSystemEvent(*args, **kw):
+        """
+        Fake L{IReactorCore.fireSystemEvent}.
+        """
+        pass
+
+    def addSystemEventTrigger(*args, **kw):
+        """
+        Fake L{IReactorCore.addSystemEventTrigger}.
+        """
+        pass
+
+    def removeSystemEventTrigger(*args, **kw):
+        """
+        Fake L{IReactorCore.removeSystemEventTrigger}.
+        """
+        pass
+
+    def callWhenRunning(*args, **kw):
+        """
+        Fake L{IReactorCore.callWhenRunning}.
+        """
+        pass
 
 for iface in implementedBy(MemoryReactor):
     verifyClass(iface, MemoryReactor)
diff --git twisted/test/test_protocols.py twisted/test/test_protocols.py
index 4e10b48..51126a4 100644
--- twisted/test/test_protocols.py
+++ twisted/test/test_protocols.py
@@ -5,9 +5,11 @@
 Test cases for twisted.protocols package.
 """
 
+import sys
+
 from twisted.trial import unittest
 from twisted.protocols import wire, portforward
-from twisted.internet import reactor, defer, address, protocol
+from twisted.internet import reactor, defer, address, protocol, fdesc, abstract
 from twisted.test import proto_helpers
 
 
@@ -234,3 +236,20 @@ class StringTransportTests(unittest.TestCase):
         """
         s = proto_helpers.StringTransport()
         self.assertRaises(TypeError, s.write, u'foo')
+
+
+class MemoryReactorTests(unittest.TestCase):
+    """
+    Test L{proto_helpers.MemoryReactor} helper behaviour.
+    """
+
+    def test_fdesc(self):
+        """
+        Test that L{proto_helpers.MemoryReactor} can be used with fdesc.
+        """
+        reactor = proto_helpers.MemoryReactor()
+        f = abstract.FileDescriptor(reactor)
+        f.fileno = sys.__stdout__.fileno
+        fd = f.fileno()
+        fdesc.setNonBlocking(fd)
+        fdesc.readFromFD(fd, self.assertTrue)
