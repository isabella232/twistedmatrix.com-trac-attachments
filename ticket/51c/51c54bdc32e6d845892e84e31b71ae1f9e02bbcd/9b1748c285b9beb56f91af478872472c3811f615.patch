Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 27593)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -2228,7 +2228,51 @@
         dct['_pings'] = None
         return dct
 
+	def NICKSERV(self, command, args):
+		"""Method that can call any NickServ command
+			args is a list containing the argunments to command
+			command is the command itself like 'identify'
+			Maxmum is 3 args
+		"""
+		if len(args)==0:
+			self.msg("NickServ", "%s" (command,));
 
+		elif len(args) == 1:
+			self.msg("NickServ", "%s %s" (command, args[0]));
+
+		elif len(args) == 2:
+			self.msg("NickServ", "%s %s %s", (command, args[0], args[1]));
+
+		elif len(args) == 3:
+			self.msg("NickServ", "%s %s %s %s", (command, args[0], args[1], args[2]));
+
+	def NICKSERV_ghost(self, nick, passwd):
+		"""Method to send NickServ (freenode) a ghost message
+			nick: nickname to report ghosting 
+			passwd: password of nickname
+		"""
+		self.msg("NickServ", "ghost %s %s" % (nick, passwd));
+
+	def NICKSERV_identify(self, passwd):
+		"""Method to send a identify message to NickServ (freenode). 
+			passwd is the password to send as an argument to the identify
+			message
+		"""
+		self.msg("NickServ", "identify %s" % (passwd,));
+
+	def NICKSERV_register(self, passwd, email):
+		"""Registers current nick (on freenode)
+			passwd: password for this nick
+			email: email to email the activation link
+		"""
+		self.msg("NickServ", "register %s %s" % (passwd, email));
+
+	def NICKSERV_verify(self, operation, nickname, key):
+		"""
+			Verify change to an account
+		"""
+		self.msg("NickServ", "verify %s %s %s" % (operation, nickname, key));
+		
 def dccParseAddress(address):
     if '.' in address:
         pass
