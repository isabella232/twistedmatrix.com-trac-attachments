Index: twisted/test/test_reflect.py
===================================================================
--- twisted/test/test_reflect.py	(revision 30993)
+++ twisted/test/test_reflect.py	(working copy)
@@ -754,3 +754,20 @@
         result = self.callDeprecated(Version("Twisted", 8, 2, 0),
             reflect.macro, "test", __file__, "test = 1")
         self.assertEquals(result, 1)
+
+    def test_allYourBase(self):
+        """
+        Test deprecation of L{reflect.allYourBase}.
+        """
+        self.callDeprecated(
+            (Version("Twisted", 11, 0, 0), "inspect.getmro"),
+            reflect.allYourBase, DeprecationTestCase)
+
+    def test_accumulateBases(self):
+        """
+        Test deprecation of L{reflect.accumulateBases}.
+        """
+        l = []
+        self.callDeprecated(
+            (Version("Twisted", 11, 0, 0), "inspect.getmro"),
+            reflect.accumulateBases, DeprecationTestCase, l, None)
Index: twisted/python/reflect.py
===================================================================
--- twisted/python/reflect.py	(revision 30993)
+++ twisted/python/reflect.py	(working copy)
@@ -578,21 +578,27 @@
 
 ##the following were factored out of usage
 
+@deprecated(Version("Twisted", 11, 0, 0), "inspect.getmro")
 def allYourBase(classObj, baseClass=None):
     """allYourBase(classObj, baseClass=None) -> list of all base
     classes that are subclasses of baseClass, unless it is None,
     in which case all bases will be added.
     """
     l = []
-    accumulateBases(classObj, l, baseClass)
+    _accumulateBases(classObj, l, baseClass)
     return l
 
 
+@deprecated(Version("Twisted", 11, 0, 0), "inspect.getmro")
 def accumulateBases(classObj, l, baseClass=None):
+    _accumulateBases(classObj, l, baseClass)
+
+
+def _accumulateBases(classObj, l, baseClass=None):
     for base in classObj.__bases__:
         if baseClass is None or issubclass(base, baseClass):
             l.append(base)
-        accumulateBases(base, l, baseClass)
+        _accumulateBases(base, l, baseClass)
 
 
 def prefixedMethodNames(classObj, prefix):
