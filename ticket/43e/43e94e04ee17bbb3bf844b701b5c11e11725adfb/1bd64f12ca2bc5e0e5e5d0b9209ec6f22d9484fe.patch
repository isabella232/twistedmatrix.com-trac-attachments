diff --git twisted/web/_responses.py twisted/web/_responses.py
index 4766b40..4f8c1cd 100644
--- twisted/web/_responses.py
+++ twisted/web/_responses.py
@@ -58,57 +58,57 @@ NOT_EXTENDED                    = 510
 
 RESPONSES = {
     # 100
-    _CONTINUE: "Continue",
-    SWITCHING: "Switching Protocols",
+    _CONTINUE: b"Continue",
+    SWITCHING: b"Switching Protocols",
 
     # 200
-    OK: "OK",
-    CREATED: "Created",
-    ACCEPTED: "Accepted",
-    NON_AUTHORITATIVE_INFORMATION: "Non-Authoritative Information",
-    NO_CONTENT: "No Content",
-    RESET_CONTENT: "Reset Content.",
-    PARTIAL_CONTENT: "Partial Content",
-    MULTI_STATUS: "Multi-Status",
+    OK: b"OK",
+    CREATED: b"Created",
+    ACCEPTED: b"Accepted",
+    NON_AUTHORITATIVE_INFORMATION: b"Non-Authoritative Information",
+    NO_CONTENT: b"No Content",
+    RESET_CONTENT: b"Reset Content.",
+    PARTIAL_CONTENT: b"Partial Content",
+    MULTI_STATUS: b"Multi-Status",
 
     # 300
-    MULTIPLE_CHOICE: "Multiple Choices",
-    MOVED_PERMANENTLY: "Moved Permanently",
-    FOUND: "Found",
-    SEE_OTHER: "See Other",
-    NOT_MODIFIED: "Not Modified",
-    USE_PROXY: "Use Proxy",
+    MULTIPLE_CHOICE: b"Multiple Choices",
+    MOVED_PERMANENTLY: b"Moved Permanently",
+    FOUND: b"Found",
+    SEE_OTHER: b"See Other",
+    NOT_MODIFIED: b"Not Modified",
+    USE_PROXY: b"Use Proxy",
     # 306 not defined??
-    TEMPORARY_REDIRECT: "Temporary Redirect",
+    TEMPORARY_REDIRECT: b"Temporary Redirect",
 
     # 400
-    BAD_REQUEST: "Bad Request",
-    UNAUTHORIZED: "Unauthorized",
-    PAYMENT_REQUIRED: "Payment Required",
-    FORBIDDEN: "Forbidden",
-    NOT_FOUND: "Not Found",
-    NOT_ALLOWED: "Method Not Allowed",
-    NOT_ACCEPTABLE: "Not Acceptable",
-    PROXY_AUTH_REQUIRED: "Proxy Authentication Required",
-    REQUEST_TIMEOUT: "Request Time-out",
-    CONFLICT: "Conflict",
-    GONE: "Gone",
-    LENGTH_REQUIRED: "Length Required",
-    PRECONDITION_FAILED: "Precondition Failed",
-    REQUEST_ENTITY_TOO_LARGE: "Request Entity Too Large",
-    REQUEST_URI_TOO_LONG: "Request-URI Too Long",
-    UNSUPPORTED_MEDIA_TYPE: "Unsupported Media Type",
-    REQUESTED_RANGE_NOT_SATISFIABLE: "Requested Range not satisfiable",
-    EXPECTATION_FAILED: "Expectation Failed",
+    BAD_REQUEST: b"Bad Request",
+    UNAUTHORIZED: b"Unauthorized",
+    PAYMENT_REQUIRED: b"Payment Required",
+    FORBIDDEN: b"Forbidden",
+    NOT_FOUND: b"Not Found",
+    NOT_ALLOWED: b"Method Not Allowed",
+    NOT_ACCEPTABLE: b"Not Acceptable",
+    PROXY_AUTH_REQUIRED: b"Proxy Authentication Required",
+    REQUEST_TIMEOUT: b"Request Time-out",
+    CONFLICT: b"Conflict",
+    GONE: b"Gone",
+    LENGTH_REQUIRED: b"Length Required",
+    PRECONDITION_FAILED: b"Precondition Failed",
+    REQUEST_ENTITY_TOO_LARGE: b"Request Entity Too Large",
+    REQUEST_URI_TOO_LONG: b"Request-URI Too Long",
+    UNSUPPORTED_MEDIA_TYPE: b"Unsupported Media Type",
+    REQUESTED_RANGE_NOT_SATISFIABLE: b"Requested Range not satisfiable",
+    EXPECTATION_FAILED: b"Expectation Failed",
 
     # 500
-    INTERNAL_SERVER_ERROR: "Internal Server Error",
-    NOT_IMPLEMENTED: "Not Implemented",
-    BAD_GATEWAY: "Bad Gateway",
-    SERVICE_UNAVAILABLE: "Service Unavailable",
-    GATEWAY_TIMEOUT: "Gateway Time-out",
-    HTTP_VERSION_NOT_SUPPORTED: "HTTP Version not supported",
-    INSUFFICIENT_STORAGE_SPACE: "Insufficient Storage Space",
-    NOT_EXTENDED: "Not Extended"
+    INTERNAL_SERVER_ERROR: b"Internal Server Error",
+    NOT_IMPLEMENTED: b"Not Implemented",
+    BAD_GATEWAY: b"Bad Gateway",
+    SERVICE_UNAVAILABLE: b"Service Unavailable",
+    GATEWAY_TIMEOUT: b"Gateway Time-out",
+    HTTP_VERSION_NOT_SUPPORTED: b"HTTP Version not supported",
+    INSUFFICIENT_STORAGE_SPACE: b"Insufficient Storage Space",
+    NOT_EXTENDED: b"Not Extended"
     }
 
diff --git twisted/web/error.py twisted/web/error.py
index a1c487a..c04aad9 100644
--- twisted/web/error.py
+++ twisted/web/error.py
@@ -37,8 +37,8 @@ def _codeToMessage(code):
     @rtype: L{str}
     """
     try:
-        return RESPONSES.get(int(code))
-    except ValueError:
+        return RESPONSES.get(int(code)).decode('ascii')
+    except (ValueError, AttributeError):
         return None
 
 
diff --git twisted/web/http.py twisted/web/http.py
index f4bccfb..c9bd313 100644
--- twisted/web/http.py
+++ twisted/web/http.py
@@ -964,7 +964,7 @@ class Request:
             l.append(
                 version + b" " +
                 intToBytes(self.code) + b" " +
-                networkString(self.code_message) + b"\r\n")
+                self.code_message + b"\r\n")
 
             # if we don't have a content length, we send data in
             # chunked mode, so that we can support pipelining in
@@ -1056,9 +1056,11 @@ class Request:
             raise TypeError("HTTP response code must be int or long")
         self.code = code
         if message:
+            if not isinstance(message, bytes):
+                raise TypeError("HTTP response status message must be bytes")
             self.code_message = message
         else:
-            self.code_message = RESPONSES.get(code, "Unknown Status")
+            self.code_message = RESPONSES.get(code, b"Unknown Status")
 
 
     def setHeader(self, name, value):
diff --git twisted/web/test/test_http.py twisted/web/test/test_http.py
index c23937e..ca7c981 100644
--- twisted/web/test/test_http.py
+++ twisted/web/test/test_http.py
@@ -1366,13 +1366,24 @@ class RequestTests(unittest.TestCase, ResponseTestMixin):
         """
         channel = DummyChannel()
         req = http.Request(channel, False)
-        req.setResponseCode(202, "happily accepted")
+        req.setResponseCode(202, b"happily accepted")
         req.write(b'')
         self.assertEqual(
             channel.transport.written.getvalue().splitlines()[0],
             b'(no clientproto yet) 202 happily accepted')
 
 
+    def test_setResponseCodeAndMessageNotBytes(self):
+        """
+        L{http.Request.setResponseCode} accepts C{bytes} for the message
+        parameter and raises L{TypeError} if passed anything else.
+        """
+        channel = DummyChannel()
+        req = http.Request(channel, False)
+        self.assertRaises(TypeError, req.setResponseCode,
+                          202, u"happily accepted")
+
+
     def test_setResponseCodeAcceptsIntegers(self):
         """
         L{http.Request.setResponseCode} accepts C{int} for the code parameter
