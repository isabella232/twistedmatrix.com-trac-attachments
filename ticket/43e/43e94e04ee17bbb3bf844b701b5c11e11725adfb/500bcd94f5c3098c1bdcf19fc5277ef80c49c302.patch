diff --git twisted/web/http.py twisted/web/http.py
index f4bccfb..34443e7 100644
--- twisted/web/http.py
+++ twisted/web/http.py
@@ -443,7 +443,7 @@ class HTTPClient(basic.LineReceiver):
             except IndexError:
                 # sometimes there is no message
                 message = b""
-            self.handleStatus(version, status, message)
+            self.handleStatus(version, status, message.decode('ascii'))
             return
         if not line:
             if self._header != b"":
@@ -1050,12 +1050,19 @@ class Request:
         Set the HTTP response code.
 
         @type code: C{int}
-        @type message: C{bytes}
+        @type message: C{unicode}
+        @param message: Message describing the response code. Only ascii
+            characters are allowed.
         """
         if not isinstance(code, _intTypes):
             raise TypeError("HTTP response code must be int or long")
         self.code = code
         if message:
+            if isinstance(message, bytes):
+                warnings.warn("use of bytes as response message is deprecated."
+                              "Use ascii encoded unicode string instead.",
+                              DeprecationWarning, stacklevel=2)
+                message = message.decode('ascii')
             self.code_message = message
         else:
             self.code_message = RESPONSES.get(code, "Unknown Status")
diff --git twisted/web/test/test_http.py twisted/web/test/test_http.py
index c23937e..3850c97 100644
--- twisted/web/test/test_http.py
+++ twisted/web/test/test_http.py
@@ -1373,6 +1373,24 @@ class RequestTests(unittest.TestCase, ResponseTestMixin):
             b'(no clientproto yet) 202 happily accepted')
 
 
+    def test_setResponseCodeByteMessage(self):
+        """
+        L{http.Request.setResponseCode} should produce deprecation warning when
+        a byte string is given as message
+        """
+        channel = DummyChannel()
+        req = http.Request(channel, False)
+        self.assertWarns(DeprecationWarning,
+                         "use of bytes as response message is deprecated."
+                         "Use ascii encoded unicode string instead.",
+                         __file__,
+                         lambda: req.setResponseCode(202, b"happily accepted"))
+        req.write(b'')
+        self.assertEqual(
+            channel.transport.written.getvalue().splitlines()[0],
+            b'(no clientproto yet) 202 happily accepted')
+
+
     def test_setResponseCodeAcceptsIntegers(self):
         """
         L{http.Request.setResponseCode} accepts C{int} for the code parameter
