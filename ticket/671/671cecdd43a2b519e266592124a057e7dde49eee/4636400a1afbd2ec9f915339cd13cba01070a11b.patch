# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: richard@aziz-20100515155714-o7agn2s79qwo2vn8
# target_branch: file:///home/richard/Projects/Twisted/branches\
#   /parameterize-procmon-3775-2/
# testament_sha1: f016f569400081ebeed0de7de1e7939b5fa8f5f9
# timestamp: 2010-05-15 16:58:39 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:branches/parameterize-procmon-3775-2:28939
#
# Begin patch
=== added file 'twisted/plugins/twisted_runner.py'
--- twisted/plugins/twisted_runner.py   1970-01-01 00:00:00 +0000
+++ twisted/plugins/twisted_runner.py   2010-05-15 15:57:14 +0000
@@ -0,0 +1,10 @@
+# Copyright (c) 2010 Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+from twisted.application.service import ServiceMaker
+
+TwistedProcmon = ServiceMaker(
+    "Twisted Process Monitor",
+    "twisted.runner.procmontap",
+    ("A process watchdog / supervisor"),
+    "procmon")

=== added file 'twisted/runner/procmontap.py'
--- twisted/runner/procmontap.py    1970-01-01 00:00:00 +0000
+++ twisted/runner/procmontap.py    2010-05-15 15:57:14 +0000
@@ -0,0 +1,72 @@
+# -*- test-case-name: twisted.runner.test.test_procmontap -*-
+# Copyright (c) 2010 Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Support for creating a service which runs a process monitor.
+"""
+
+from twisted.python import usage
+from twisted.runner.procmon import ProcessMonitor
+
+
+class Options(usage.Options):
+    """
+    Define the options accepted by the I{twistd procmon} plugin.
+    """
+    synopsis = "[procmon options] commandline"
+
+    optParameters = [["threshold", "t", 1, "How long a process has to live "
+                      "before the death is considered instant, in seconds.",
+                      float],
+                     ["killtime", "k", 5, "How long a process being killed "
+                      "has to get its affairs in order before it gets killed "
+                      "with an unmaskable signal.",
+                      float],
+                     ["minrestartdelay", "m", 1, "The minimum time (in "
+                      "seconds) to wait before attempting to restart a process",
+                      float],
+                     ["maxrestartdelay", "M", 3600, "The maximum time (in "
+                      "seconds) to wait before attempting to restart a process",
+                      float]]
+
+    optFlags = []
+
+    zsh_actions = {}
+
+
+    longdesc = """\
+procmon runs processes, monitors their progress, and restarts them when they
+die.
+
+procmon will not attempt to restart a process that appears to die instantly;
+with each "instant" death (less than 1 second, by default), it will delay
+approximately twice as long before restarting it. A successful run will reset
+the counter.
+
+Eg twistd procmon sleep 10"""
+
+    def parseArgs(self, *args):
+        """
+        Grab the command line that is going to be started and monitored
+        """
+        self['args'] = args
+
+    def postOptions(self):
+        """
+        Check for dependencies.
+        """
+        if len(self["args"]) < 1:
+            raise usage.UsageError("Please specify a process commandline")
+
+
+def makeService(config):
+    s = ProcessMonitor()
+
+    s.threshold = config["threshold"]
+    s.killTime = config["killtime"]
+    s.minRestartDelay = config["minrestartdelay"]
+    s.maxRestartDelay = config["maxrestartdelay"]
+
+    s.addProcess(" ".join(config["args"]), config["args"])
+    return s

=== added file 'twisted/runner/test/test_procmontap.py'
--- twisted/runner/test/test_procmontap.py  1970-01-01 00:00:00 +0000
+++ twisted/runner/test/test_procmontap.py  2010-05-15 15:57:14 +0000
@@ -0,0 +1,82 @@
+# Copyright (c) 2010 Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Tests for L{twisted.runner.procmontap}.
+"""
+
+from twisted.python.usage import UsageError
+from twisted.trial import unittest
+from twisted.runner.procmon import ProcessMonitor
+from twisted.runner import procmontap as tap
+
+
+class ProcessMonitorTapTest(unittest.TestCase):
+
+    def test_commandLineRequired(self):
+        """
+        The command line arguments must be provided.
+        """
+        opt = tap.Options()
+        self.assertRaises(UsageError, opt.parseOptions, [])
+
+
+    def test_threshold(self):
+        """
+        The threshold option is recognised as a parameter and coerced to float.
+        """
+        opt = tap.Options()
+        opt.parseOptions(['--threshold', '7.5', 'foo'])
+        self.assertEquals(opt['threshold'], 7.5)
+
+
+    def test_killTime(self):
+        """
+        The killtime option is recognised as a parameter and coerced to float.
+        """
+        opt = tap.Options()
+        opt.parseOptions(['--killtime', '7.5', 'foo'])
+        self.assertEquals(opt['killtime'], 7.5)
+
+
+    def test_minRestartDelay(self):
+        """
+        The minrestartdelay option is recognised as a parameter and coerced to
+        float.
+        """
+        opt = tap.Options()
+        opt.parseOptions(['--minrestartdelay', '7.5', 'foo'])
+        self.assertEquals(opt['minrestartdelay'], 7.5)
+
+
+    def test_maxRestartDelay(self):
+        """
+        The maxrestartdelay option is recognised as a parameter and coerced to
+        float.
+        """
+        opt = tap.Options()
+        opt.parseOptions(['--maxrestartdelay', '7.5', 'foo'])
+        self.assertEquals(opt['maxrestartdelay'], 7.5)
+
+
+    def test_parameterDefaults(self):
+        """
+        The parameters all have default values
+        """
+        opt = tap.Options()
+        opt.parseOptions(['foo'])
+        self.assertEquals(opt['threshold'], 1)
+        self.assertEquals(opt['killtime'], 5)
+        self.assertEquals(opt['minrestartdelay'], 1)
+        self.assertEquals(opt['maxrestartdelay'], 3600)
+
+
+    def test_makeService(self):
+        """
+        The command line gets added as a process to the ProcessMontor.
+        """
+        opt = tap.Options()
+        opt.parseOptions(['ping', '-c', '3', '8.8.8.8'])
+        s = tap.makeService(opt)
+        self.assertIsInstance(s, ProcessMonitor)
+        self.assertIn('ping -c 3 8.8.8.8', s.processes)

=== added file 'twisted/runner/topfiles/4356.feature'
--- twisted/runner/topfiles/4356.feature    1970-01-01 00:00:00 +0000
+++ twisted/runner/topfiles/4356.feature    2010-05-15 15:57:14 +0000
@@ -0,0 +1,2 @@
+twistd now has a procmon subcommand plugin - a convenient way to monitor and
+automatically restart another process.
