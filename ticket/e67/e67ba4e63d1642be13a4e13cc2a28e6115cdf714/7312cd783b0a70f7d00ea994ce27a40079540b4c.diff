Index: twisted/web/wsgi.py
===================================================================
--- twisted/web/wsgi.py	(revision 27354)
+++ twisted/web/wsgi.py	(working copy)
@@ -9,12 +9,14 @@
 __metaclass__ = type
 
 from urllib import unquote
+import traceback
 
 from zope.interface import implements
 
 from twisted.python.log import msg
 from twisted.web.resource import IResource
 from twisted.web.server import NOT_DONE_YET
+from twisted.web.http import RESPONSES, INTERNAL_SERVER_ERROR
 
 
 class _ErrorStream:
@@ -299,22 +301,32 @@
         This must be called in a non-I/O thread (ie, a WSGI application
         thread).
         """
-        appIterator = self.application(self.environ, self.startResponse)
-        for elem in appIterator:
-            if elem:
-                self.write(elem)
-            if self._requestFinished:
-                break
-        close = getattr(appIterator, 'close', None)
-        if close is not None:
-            close()
-        def wsgiFinish(started):
-            if not self._requestFinished:
-                if not started:
-                    self._sendResponseHeaders()
+        try:
+            appIterator = self.application(self.environ, self.startResponse)
+        except:
+            tracestr = traceback.format_exc()
+            def wsgiReportError(trace):
+                msg(trace, system="wsgi", isError=True)
+                self.request.setResponseCode(INTERNAL_SERVER_ERROR)
+                self.request.write(RESPONSES[INTERNAL_SERVER_ERROR])
                 self.request.finish()
-        self.reactor.callFromThread(wsgiFinish, self.started)
-        self.started = True
+            self.reactor.callFromThread(wsgiReportError, tracestr)
+        else:
+            for elem in appIterator:
+                if elem:
+                    self.write(elem)
+                if self._requestFinished:
+                    break
+            close = getattr(appIterator, 'close', None)
+            if close is not None:
+                close()
+            def wsgiFinish(started):
+                if not self._requestFinished:
+                    if not started:
+                        self._sendResponseHeaders()
+                    self.request.finish()
+            self.reactor.callFromThread(wsgiFinish, self.started)
+            self.started = True
 
 
 
