diff --git twisted/mail/alias.py twisted/mail/alias.py
index c9d1807..50ba499 100644
--- twisted/mail/alias.py
+++ twisted/mail/alias.py
@@ -112,7 +112,6 @@ def loadAliasFile(domains, filename=None, fp=None):
     if prev:
         handle(result, prev, filename, i)
     for (u, a) in result.items():
-        addr = smtp.Address(u)
         result[u] = AliasGroup(a, domains, u)
     return result
 
@@ -638,7 +637,7 @@ class ProcessAlias(AliasBase):
         """
         p = ProcessAliasProtocol()
         m = MessageWrapper(p, self.program, self.reactor)
-        fd = self.spawnProcess(p, self.program, self.path)
+        self.spawnProcess(p, self.program, self.path)
         return m
 
 
diff --git twisted/mail/bounce.py twisted/mail/bounce.py
index d2f32ad..dfaa760 100644
--- twisted/mail/bounce.py
+++ twisted/mail/bounce.py
@@ -61,16 +61,19 @@ def generateBounce(message, failedFrom, failedTo, transcript=''):
         transcript = '''\
 I'm sorry, the following address has permanent errors: %(failedTo)s.
 I've given up, and I will not retry the message again.
-''' % vars()
+''' % {'failedTo': failedTo}
 
-    boundary = "%s_%s_%s" % (time.time(), os.getpid(), 'XXXXX')
     failedAddress = rfc822.AddressList(failedTo)[0][1]
-    failedDomain = failedAddress.split('@', 1)[1]
-    messageID = smtp.messageid(uniq='bounce')
-    ctime = time.ctime(time.time())
+    data = {
+        'boundary': "%s_%s_%s" % (time.time(), os.getpid(), 'XXXXX'),
+        'failedAddress': failedAddress,
+        'failedDomain': failedAddress.split('@', 1)[1],
+        'messageID': smtp.messageid(uniq='bounce'),
+        'ctime': time.ctime(time.time()),
+        }
 
     fp = StringIO.StringIO()
-    fp.write(BOUNCE_FORMAT % vars())
+    fp.write(BOUNCE_FORMAT % data)
     orig = message.tell()
     message.seek(2, 0)
     sz = message.tell()
diff --git twisted/mail/imap4.py twisted/mail/imap4.py
index e8b939b..a29a980 100644
--- twisted/mail/imap4.py
+++ twisted/mail/imap4.py
@@ -45,8 +45,6 @@ from twisted.python import log, text
 from twisted.internet import interfaces
 
 from twisted import cred
-import twisted.cred.error
-import twisted.cred.credentials
 
 
 # locale-independent month names to use instead of strftime's
@@ -2112,8 +2110,6 @@ class IMAP4Server(basic.LineReceiver, policies.TimeoutMixin):
     def __cbCopy(self, messages, tag, mbox):
         # XXX - This should handle failures with a rollback or something
         addedDeferreds = []
-        addedIDs = []
-        failures = []
 
         fastCopyMbox = IMessageCopier(mbox, None)
         for (id, msg) in messages:
@@ -4835,8 +4831,8 @@ def statusRequestHelper(mbox, names):
 def parseAddr(addr):
     if addr is None:
         return [(None, None, None),]
-    addrs = email.Utils.getaddresses([addr])
-    return [[fn or None, None] + addr.split('@') for fn, addr in addrs]
+    addr = email.Utils.getaddresses([addr])
+    return [[fn or None, None] + address.split('@') for fn, address in addr]
 
 def getEnvelope(msg):
     headers = msg.getHeaders(True)
diff --git twisted/mail/maildir.py twisted/mail/maildir.py
index 386a55a..f2772b6 100644
--- twisted/mail/maildir.py
+++ twisted/mail/maildir.py
@@ -695,7 +695,7 @@ class StringListMailbox:
             the mailbox.
         """
         if i is None:
-            return [self.listMessages(i) for i in range(len(self.msgs))]
+            return [self.listMessages(msg) for msg in range(len(self.msgs))]
         if i in self._delete:
             return 0
         return len(self.msgs[i])
diff --git twisted/mail/pb.py twisted/mail/pb.py
index 8a9417f..53eb44a 100644
--- twisted/mail/pb.py
+++ twisted/mail/pb.py
@@ -3,10 +3,9 @@
 
 
 from twisted.spread import pb
-from twisted.spread import banana
 
 import os
-import types
+
 
 class Maildir(pb.Referenceable):
 
diff --git twisted/mail/protocols.py twisted/mail/protocols.py
index 3ba3f58..0e17783 100644
--- twisted/mail/protocols.py
+++ twisted/mail/protocols.py
@@ -17,8 +17,11 @@ from twisted.python.deprecate import deprecatedModuleAttribute
 from twisted.python.versions import Version
 
 from twisted import cred
-import twisted.cred.error
-import twisted.cred.credentials
+import twisted.cred.error  # Import for pydoctor.
+import twisted.cred.credentials  # Import for pydoctor.
+# Silence the linter.
+twisted
+
 
 from twisted.mail import relay
 
diff --git twisted/mail/scripts/mailmail.py twisted/mail/scripts/mailmail.py
index a045e82..98e27cb 100644
--- twisted/mail/scripts/mailmail.py
+++ twisted/mail/scripts/mailmail.py
@@ -134,7 +134,6 @@ def parseOptions(argv):
         'date': [],
     }
 
-    headers = []
     buffer = StringIO.StringIO()
     while 1:
         write = 1
diff --git twisted/mail/test/pop3testserver.py twisted/mail/test/pop3testserver.py
index c87892c..fd85821 100644
--- twisted/mail/test/pop3testserver.py
+++ twisted/mail/test/pop3testserver.py
@@ -7,7 +7,7 @@
 from twisted.internet.protocol import Factory
 from twisted.protocols import basic
 from twisted.internet import reactor
-import sys, time
+import sys
 
 USER = "test"
 PASS = "twisted"
diff --git twisted/mail/test/test_imap.py twisted/mail/test/test_imap.py
index 7144ae7..ec474f9 100644
--- twisted/mail/test/test_imap.py
+++ twisted/mail/test/test_imap.py
@@ -32,10 +32,6 @@ from twisted.python import util, log
 from twisted.python import failure
 
 from twisted import cred
-import twisted.cred.error
-import twisted.cred.checkers
-import twisted.cred.credentials
-import twisted.cred.portal
 
 from twisted.test.proto_helpers import StringTransport, StringTransportWithDisconnection
 
@@ -1645,7 +1641,8 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
 
     def testPartialAppend(self):
         infile = util.sibpath(__file__, 'rfc822.message')
-        message = open(infile)
+        # Create file.
+        open(infile)
         SimpleServer.theAccount.addMailbox('PARTIAL/SUBTHING')
         def login():
             return self.client.login('testuser', 'password-test')
@@ -2431,7 +2428,7 @@ class HandCraftedTestCase(IMAP4HelperMixin, unittest.TestCase):
             protocol.lineReceived('0002 OK SELECT')
             return d
         def fetch():
-            d = protocol.fetchSpecific('1:*',
+            protocol.fetchSpecific('1:*',
                 headerType='HEADER.FIELDS',
                 headerArgs=['SUBJECT'])
             self.assertRaises(
@@ -4751,19 +4748,20 @@ class TLSTestCase(IMAP4HelperMixin, unittest.TestCase):
 
 
     def testFailedStartTLS(self):
-        failure = []
+        failures = []
         def breakServerTLS(ign):
             self.server.canStartTLS = False
 
         self.connected.addCallback(breakServerTLS)
         self.connected.addCallback(lambda ign: self.client.startTLS())
-        self.connected.addErrback(lambda err: failure.append(err.trap(imap4.IMAP4Exception)))
+        self.connected.addErrback(
+            lambda err: failures.append(err.trap(imap4.IMAP4Exception)))
         self.connected.addCallback(self._cbStopClient)
         self.connected.addErrback(self._ebGeneral)
 
         def check(ignored):
-            self.failUnless(failure)
-            self.assertIdentical(failure[0], imap4.IMAP4Exception)
+            self.failUnless(failures)
+            self.assertIdentical(failures[0], imap4.IMAP4Exception)
         return self.loopback().addCallback(check)
 
 
diff --git twisted/mail/test/test_mail.py twisted/mail/test/test_mail.py
index e5d0096..02bfe88 100644
--- twisted/mail/test/test_mail.py
+++ twisted/mail/test/test_mail.py
@@ -1559,8 +1559,6 @@ class LiveFireExercise(unittest.TestCase):
         map(service.portals[''].registerChecker, domain.getCredentialsCheckers())
 
         service.setQueue(mail.relay.DomainQueuer(service))
-        manager = mail.relaymanager.SmartHostSMTPRelayingManager(service.queue, None)
-        helper = mail.relaymanager.RelayStateHelper(manager, 1)
 
         f = service.getSMTPFactory()
 
@@ -1621,7 +1619,6 @@ class LiveFireExercise(unittest.TestCase):
         destServ.addDomain('destination.domain', domain)
         os.mkdir('destinationQueue')
         destServ.setQueue(mail.relaymanager.Queue('destinationQueue'))
-        manager2 = mail.relaymanager.SmartHostSMTPRelayingManager(destServ.queue)
         helper = mail.relaymanager.RelayStateHelper(manager, 1)
         helper.startService()
 
diff --git twisted/mail/test/test_options.py twisted/mail/test/test_options.py
index daee5d2..d810eab 100644
--- twisted/mail/test/test_options.py
+++ twisted/mail/test/test_options.py
@@ -12,10 +12,10 @@ from twisted.mail import protocols
 from twisted.mail.tap import Options, makeService
 from twisted.python.filepath import FilePath
 from twisted.internet import endpoints, defer
-from twisted.python import util
 
 try:
     import OpenSSL
+    OpenSSL  # Silence the linter.
 except ImportError, e:
     sslSkip = str(e)
 else:
diff --git twisted/mail/test/test_pop3.py twisted/mail/test/test_pop3.py
index 4379a1e..53367b0 100644
--- twisted/mail/test/test_pop3.py
+++ twisted/mail/test/test_pop3.py
@@ -189,7 +189,6 @@ class MyPOP3Downloader(pop3.POP3Client):
     def handle_APOP(self, line):
         parts = line.split()
         code = parts[0]
-        data = (parts[1:] or ['NONE'])[0]
         if code != '+OK':
             print parts
             raise AssertionError, 'code is ' + code
diff --git twisted/mail/test/test_pop3client.py twisted/mail/test/test_pop3client.py
index a0455b1..66cea53 100644
--- twisted/mail/test/test_pop3client.py
+++ twisted/mail/test/test_pop3client.py
@@ -587,7 +587,7 @@ elif interfaces.IReactorSSL(reactor, None) is None:
 
 import twisted.mail.pop3client
 
-class POP3ClientMiscTestCase(unittest.TestCase):
+class POP3ClientModuleStructureTestCase(unittest.TestCase):
     """
     Miscellaneous tests more to do with module/package structure than
     anything to do with the POP3 client.
