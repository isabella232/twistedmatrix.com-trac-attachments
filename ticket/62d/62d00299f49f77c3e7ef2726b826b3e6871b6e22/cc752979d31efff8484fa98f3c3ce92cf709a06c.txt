# client.py

from twisted.internet import iocpreactor 
iocpreactor.install()
from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor

DATA = '\x00' * 4000
HOST = '127.0.0.1'
PORT = 1234
INTERVAL = 0.001

class TestProtocol(DatagramProtocol):
    last = None
    def startProtocol(self):
        self.send()
        self.update()
    
    def send(self):
        self.transport.write(DATA, (HOST, PORT))
        reactor.callLater(INTERVAL, self.send)
        
    def update(self):
        if self.last is None:
            since = '(none yet)'
        else:
            since = reactor.seconds() - self.last
            print 'Since last:', since
        reactor.callLater(3, self.update)
        
    def datagramReceived(self, data, address):
        self.last = reactor.seconds()

for _ in xrange(20):
    reactor.listenUDP(0, TestProtocol())
reactor.run()

# server.py

from twisted.internet import iocpreactor 
iocpreactor.install()
from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor

class TestProtocol(DatagramProtocol):
    def __init__(self):
        self.connections = set()

    def datagramReceived(self, data, address):
        data = data * 4
        self.connections.add(address)
        for connection in self.connections:
            self.transport.write(data, connection)
    
reactor.listenUDP(1234, TestProtocol())
reactor.run()