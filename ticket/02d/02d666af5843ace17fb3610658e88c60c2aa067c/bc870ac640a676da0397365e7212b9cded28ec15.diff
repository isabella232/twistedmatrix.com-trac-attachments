Index: twisted/protocols/ftp.py
===================================================================
--- twisted/protocols/ftp.py	(revision 25072)
+++ twisted/protocols/ftp.py	(working copy)
@@ -2467,6 +2467,36 @@
                 return failure.Failure(CommandFailed(result))
         return self.cwd(path).addCallback(cbParse)
 
+
+    def removeFile(self, path):
+        """
+        Delete a file on the server.
+        (<SP> <pathname> <CRLF>)
+        This command issues a DELE command to the server. Note that it
+        is not possible to use this command to delete directories.
+        @type path: C{str}
+        @param path: The path to the file to delete. May be relative
+        to the current dir.
+        @return a L{Deferred} which will be called back when the operation
+        succeeds or fails.
+        Possible return codes: (with some explenations)
+        250 Requested file action okay, completed.
+        450, 550: Requested file action not taken / (e.g., file not found, no access)
+        500, 501, 502: Syntax error.
+        421, 530: Service unavailable / Not logged in.
+        """
+        def cbParse(result):
+            try:
+                # The only valid code is 250
+                if int(result[0].split(' ', 1)[0]) == 250:
+                    return True
+                else:
+                    raise ValueError()
+            except (IndexError, ValueError), e:
+                return failure.Failure(CommandFailed(result))
+        return self.queueStringCommand('DELE ' + self.escapePath(path)).addCallback(cbParse)
+
+
     def cdup(self):
         """
         Issues the CDUP (Change Directory UP) command.
Index: twisted/test/test_ftp.py
===================================================================
--- twisted/test/test_ftp.py	(revision 25072)
+++ twisted/test/test_ftp.py	(working copy)
@@ -1429,7 +1429,43 @@
         return d
 
 
+    def test_removeFile(self):
+        """
+        Test the removefile method.
 
+        L{ftp.FTPClient.removeFile} should return a Deferred which fires after
+          the file has been deleted, wrapping the DELE command.
+        """
+        def cbGet(res):
+            self.assertEquals(res, True)
+
+        self._testLogin()
+        d = self.client.removeFile("/tmp/test").addCallback(cbGet)
+        self.assertEquals(self.transport.value(), 'DELE /tmp/test\r\n')
+        self.client.lineReceived('250 Requested file action okay, completed.')
+        return d
+
+
+    def test_removeFileFail(self):
+        """
+        Test a failing removefile
+
+        L{ftp.FTPClient.removeFile} should return a Deferred which fires after
+          the file has been deleted, wrapping the DELE command.
+
+        If the returncode is not 250 then the command fails with a CommandFailed
+        failure.
+        """
+        self._testLogin()
+        d = self.client.removeFile("/tmp/test")
+        self.assertEquals(self.transport.value(), 'DELE /tmp/test\r\n')
+        self.client.lineReceived('501 Syntax error in parameters or arguments.')
+        self.assertFailure(d, ftp.CommandFailed)
+        return d
+
+
+
+
 class DummyTransport:
     def write(self, bytes):
         pass
