Index: twisted/test/test_application.py
===================================================================
--- twisted/test/test_application.py	(revision 31014)
+++ twisted/test/test_application.py	(working copy)
@@ -142,7 +142,28 @@
         self.assert_(not s1.running)
         self.assert_(s.running)
 
+    def test_doubleStarting(self):
+        s = service.Service()
+        s.startService()
+        s.startService()
+        warnings = self.flushWarnings(
+            offendingFunctions=[s.startService])
+        self.assertIn(
+            'calling startService on a running service is deprecated',
+            warnings[0]['message'])
 
+    def test_stopServiceIdempotent(self):
+        s = service.Service()
+        s.startService()
+        self.failUnless(s.running)
+        s.stopService()
+        self.failIf(s.running)
+        s.stopService()
+        self.failIf(s.running)
+        warnings = self.flushWarnings(
+            offendingFunctions=[s.stopService])
+        self.assertEqual(warnings, [])
+
 if hasattr(os, "getuid"):
     curuid = os.getuid()
     curgid = os.getgid()
Index: twisted/application/service.py
===================================================================
--- twisted/application/service.py	(revision 31014)
+++ twisted/application/service.py	(working copy)
@@ -13,6 +13,7 @@
 Maintainer: Moshe Zadka
 """
 
+import warnings
 from zope.interface import implements, Interface, Attribute
 
 from twisted.python.reflect import namedAny
@@ -129,12 +130,19 @@
     def startService():
         """
         Start the service.
+
+        The ability to call this method on an already-started service is
+        deprecated since Twisted 11.0.
         """
 
     def stopService():
         """
         Stop the service.
 
+        This method is idempotent: it can be called on already-stopped service
+        with no ill effects.  This is often done in error-handling code and to
+        reverse the effects of L{priviledgedStartService}.
+
         @rtype: L{Deferred}
         @return: a L{Deferred} which is triggered when the service has
             finished shutting down. If shutting down is immediate, a
@@ -192,6 +200,10 @@
         pass
 
     def startService(self):
+        if self.running:
+            warnings.warn(
+                "calling startService on a running service is deprecated "
+                "since Twisted 11.0.", DeprecationWarning)
         self.running = 1
 
     def stopService(self):
