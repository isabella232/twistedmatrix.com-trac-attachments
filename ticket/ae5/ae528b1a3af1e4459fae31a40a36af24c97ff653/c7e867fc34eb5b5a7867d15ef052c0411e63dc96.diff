Index: twisted/internet/abstract.py
===================================================================
--- twisted/internet/abstract.py	(revision 18840)
+++ twisted/internet/abstract.py	(working copy)
@@ -168,7 +168,7 @@
         if data:
             self._tempDataBuffer.append(data)
             self._tempDataLen += len(data)
-            if self.producer is not None:
+            if self.producer is not None and self.streamingProducer:
                 if len(self.dataBuffer) + self._tempDataLen > self.bufferSize:
                     self.producerPaused = 1
                     self.producer.pauseProducing()
@@ -180,7 +180,7 @@
         self._tempDataBuffer.extend(iovec)
         for i in iovec:
             self._tempDataLen += len(i)
-        if self.producer is not None:
+        if self.producer is not None and self.streamingProducer:
             if len(self.dataBuffer) + self._tempDataLen > self.bufferSize:
                 self.producerPaused = 1
                 self.producer.pauseProducing()
Index: twisted/test/test_internet.py
===================================================================
--- twisted/test/test_internet.py	(revision 18840)
+++ twisted/test/test_internet.py	(working copy)
@@ -810,6 +810,34 @@
     def stopProducing(self):
          self.stopped += 1
 
+
+class SillyDescriptor(abstract.FileDescriptor):
+    bufferSize = 3
+    connected = True
+    def writeSomeData(self, data):
+        return len(data)
+
+    def startWriting(self):
+        pass
+    stopWriting = startWriting
+
+class PullProducer:
+    def resumeProducing(self):
+        self.transport.write('spam')
+
+    def pauseProducing(self):
+        raise unittest.FailTest
+
+class RaceProducer:
+    resumed = 0
+    def resumeProducing(self):
+        self.resumed += 1
+        self.transport.write('spam')
+
+    def pauseProducing(self):
+        pass
+
+
 class TestProducer(unittest.TestCase):
 
     def testDoubleProducer(self):
@@ -827,6 +855,28 @@
         fd.registerProducer(dp, 0)
         self.assertEquals(dp.stopped, 1)
 
+    def testDontPausePullConsumer(self):
+        # FileDescriptor should not call producer.pauseProducing()
+        # if producer is a nonstreaming pull producer.
+        fd = SillyDescriptor()
+        pp = PullProducer()
+        pp.transport = fd
+        fd.registerProducer(pp, streaming=False)
+        del pp.transport
+
+    def testRaceStreamingProducer(self):
+        # test for issue #811, fixed in revision 12857
+        fd = SillyDescriptor()
+        rp = RaceProducer()
+        rp.transport = fd
+        fd.registerProducer(rp, streaming=True)
+        fd.write('spam')
+        for _ in range(10):
+            fd.doWrite()
+        self.assertEquals(rp.resumed, 10)
+        del rp.transport
+
+
 class PortStringification(unittest.TestCase):
     if interfaces.IReactorTCP(reactor, None) is not None:
         def testTCP(self):
