Index: twisted/internet/abstract.py
===================================================================
--- twisted/internet/abstract.py	(revision 18849)
+++ twisted/internet/abstract.py	(working copy)
@@ -82,11 +82,16 @@
                                   reflect.qual(self.__class__))
 
     def doRead(self):
+        """Called when data is avaliable for reading.
+
+        Subclasses must override this method. The result will be interpreted
+        in the same way as a result of doWrite().
+        """
         raise NotImplementedError("%s does not implement doRead" %
                                   reflect.qual(self.__class__))
 
     def doWrite(self):
-        """Called when data is available for writing.
+        """Called when data can be written.
 
         A result that is true (which will be a negative number) implies the
         connection was lost. A false result implies the connection is still
@@ -159,7 +164,10 @@
     def write(self, data):
         """Reliably write some data.
 
-        The data is buffered until his file descriptor is ready for writing.
+        The data is buffered until the underlying file descriptor is ready
+        for writing. If there is more than C{self.bufferSize} data in the
+        buffer and this descriptor has a registered streaming producer, its
+        C{pauseProducing()} method will be called.
         """
         if isinstance(data, unicode): # no, really, I mean it
             raise TypeError("Data must not be unicode")
@@ -168,20 +176,37 @@
         if data:
             self._tempDataBuffer.append(data)
             self._tempDataLen += len(data)
-            if self.producer is not None:
+            # If we are responsible for pausing our producer,
+            if self.producer is not None and self.streamingProducer:
+                # and our buffer is full,
                 if len(self.dataBuffer) + self._tempDataLen > self.bufferSize:
+                    # pause it.
                     self.producerPaused = 1
                     self.producer.pauseProducing()
             self.startWriting()
 
     def writeSequence(self, iovec):
+        """Reliably write a sequence of data.
+
+        This is a convenience method equivalent to::
+
+            for chunk in iovec:
+                fd.write(chunk)
+
+        As with the C{write()} method, if a buffer size limit is reached and a
+        streaming producer is registered, it will be paused until the buffered
+        data is written to the underlying file descriptor.
+        """
         if not self.connected or not iovec or self._writeDisconnected:
             return
         self._tempDataBuffer.extend(iovec)
         for i in iovec:
             self._tempDataLen += len(i)
-        if self.producer is not None:
+        # If we are responsible for pausing our producer,
+        if self.producer is not None and self.streamingProducer:
+            # and our buffer is full,
             if len(self.dataBuffer) + self._tempDataLen > self.bufferSize:
+                # pause it.
                 self.producerPaused = 1
                 self.producer.pauseProducing()
         self.startWriting()
@@ -257,10 +282,15 @@
 
         This sets this selectable to be a consumer for a producer.  When this
         selectable runs out of data on a write() call, it will ask the producer
-        to resumeProducing(). A producer should implement the IProducer
-        interface.
+        to resumeProducing(). When the FileDescriptor's internal data buffer is
+        filled, it will ask the producer to pauseProducing(). If the connection
+        is lost, FileDescriptor calls producer's stopProducing() method.
 
-        FileDescriptor provides some infrastructure for producer methods.
+        If streaming is true, the producer should provide the IPushProducer
+        interface. Otherwise, it is assumed that producer provides the
+        IPullProducer interface. In this case, the producer won't be asked
+        to pauseProducing(), but it has to be careful to write() data only
+        when its resumeProducing() method is called.
         """
         if self.producer is not None:
             raise RuntimeError("Cannot register producer %s, because producer %s was never unregistered." % (producer, self.producer))
Index: twisted/internet/interfaces.py
===================================================================
--- twisted/internet/interfaces.py	(revision 18849)
+++ twisted/internet/interfaces.py	(working copy)
@@ -787,7 +787,7 @@
 class IWriteDescriptor(IFileDescriptor):
 
     def doWrite():
-        """Some data is available for reading on your descriptor.
+        """Some data can be written to your descriptor.
         """
 
 
@@ -829,9 +829,10 @@
 
         This sets self to be a consumer for a producer.  When this object runs
         out of data on a write() call, it will ask the producer to
-        resumeProducing(). A producer should provide the L{IProducer}
-        interface.  A push producer which is unable to pause or stop need not
-        register or unregister.
+        resumeProducing(). If streaming is false, it is assumed that producer
+        provides the L{IPullProducer} interface. Otherwise it should provide
+        the L{IPushProducer} interface. A streaming producer which is unable
+        to pause, resume or stop producing should not register itself.
         """
 
     def unregisterProducer():
Index: twisted/test/test_internet.py
===================================================================
--- twisted/test/test_internet.py	(revision 18849)
+++ twisted/test/test_internet.py	(working copy)
@@ -810,9 +810,67 @@
     def stopProducing(self):
          self.stopped += 1
 
+
+class SillyDescriptor(abstract.FileDescriptor):
+    """
+    A descriptor whose data buffer gets filled very fast.
+
+    Useful for testing FileDescriptor's IConsumer interface, since
+    the data buffer fills as soon as at least four characters are
+    written to it, and gets emptied in a single doWrite() cycle.
+    """
+    bufferSize = 3
+    connected = True
+    def writeSomeData(self, data):
+        """Allways write all data."""
+        return len(data)
+
+    def startWriting(self):
+        """Bypass the reactor."""
+        pass
+
+    stopWriting = startWriting
+
+class PullProducer:
+    """
+    I ensure that FileDescriptor doesn't call pauseProducing() on nonstreaming
+    producers.
+    """
+    def resumeProducing(self):
+        """Fill transport's data buffer."""
+        self.transport.write('spam')
+
+    def pauseProducing(self):
+        """Consumer should never call pauseProducing() on a pull producer."""
+        raise unittest.FailTest(self.pauseProducing.__doc__)
+
+class RaceProducer:
+    """
+    I ensure that FileDescriptor tracks my paused state correctly.
+    """
+    resumed = 0
+    paused = 0
+    def resumeProducing(self):
+        """Count the number of invocations and fill transport's buffer."""
+        self.resumed += 1
+        self.transport.write('spam')
+
+    def pauseProducing(self):
+        """Count the number of invocations."""
+        self.paused += 1
+
+
 class TestProducer(unittest.TestCase):
+    """
+    Test abstract.FileDescriptor's consumer interface.
+    """
 
     def testDoubleProducer(self):
+        """
+        Verify that registering a nonstreaming producer invokes its
+        resumeProducing() method and that you can only register one
+        producer at a time.
+        """
         fd = abstract.FileDescriptor()
         fd.connected = 1
         dp = DummyProducer()
@@ -821,12 +879,49 @@
         self.assertRaises(RuntimeError, fd.registerProducer, DummyProducer(), 0)
 
     def testUnconnectedFileDescriptor(self):
+        """
+        Verify that registering a producer when the connection has
+        already been closed invokes its stopProducing() method.
+        """
         fd = abstract.FileDescriptor()
         fd.disconnected = 1
         dp = DummyProducer()
         fd.registerProducer(dp, 0)
         self.assertEquals(dp.stopped, 1)
 
+    def testDontPausePullConsumer(self):
+        """
+        Verify that FileDescriptor never calls producer.pauseProducing()
+        on a nonstreaming pull producer. Issue #2286.
+        """
+        fd = SillyDescriptor()
+        pp = PullProducer()
+        pp.transport = fd
+        # This will raise a TestFailed if fd calls pp.pauseProducing(),
+        # because pp fills fd's data buffer as soon as it is registered.
+        fd.registerProducer(pp, streaming=False)
+        del pp.transport
+
+    def testRaceStreamingProducer(self):
+        """
+        Verify that FileDescriptor tracks producer's paused
+        state correctly. Issue #811, fixed in revision r12857.
+        """
+        fd = SillyDescriptor()
+        rp = RaceProducer()
+        rp.transport = fd
+        fd.registerProducer(rp, streaming=True)
+        fd.write('spam')
+        # We need to call doWrite() at least twice, since the first
+        # invocation triggers the race condition and only the second
+        # invocation shows if the producer is permanently paused.
+        fd.doWrite()
+        fd.doWrite()
+        self.assertEquals(rp.resumed, 2)
+        self.assertEquals(rp.paused, 3)
+        del rp.transport
+
+
 class PortStringification(unittest.TestCase):
     if interfaces.IReactorTCP(reactor, None) is not None:
         def testTCP(self):
