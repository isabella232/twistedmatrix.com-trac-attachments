diff --git a/twisted/conch/test/test_cftp.py b/twisted/conch/test/test_cftp.py
index 03e327a..319feb7 100644
--- a/twisted/conch/test/test_cftp.py
+++ b/twisted/conch/test/test_cftp.py
@@ -636,7 +636,7 @@ class TestOurServerCmdLineClient(CFTPClientTestBase):
 
         d = self.runCommand('get testfile1 "%s/test file2"' % (self.testDir,))
         d.addCallback(_checkGet)
-        d.addCallback(lambda _: self.failIf(
+        d.addCallback(lambda _: self.assertFalse(
             os.path.exists(self.testDir + '/test file2')))
         return d
 
@@ -668,13 +668,13 @@ class TestOurServerCmdLineClient(CFTPClientTestBase):
         def _checkPut(result):
             self.assertFilesEqual(self.testDir + '/testfile1',
                                   self.testDir + '/test"file2')
-            self.failUnless(result.endswith(expectedOutput))
+            self.assertTrue(result.endswith(expectedOutput))
             return self.runCommand('rm "test\\"file2"')
 
         d = self.runCommand('put %s/testfile1 "test\\"file2"'
                             % (self.testDir,))
         d.addCallback(_checkPut)
-        d.addCallback(lambda _: self.failIf(
+        d.addCallback(lambda _: self.assertFalse(
             os.path.exists(self.testDir + '/test"file2')))
         return d
 
@@ -874,7 +874,7 @@ exit
         def _cbCheckResult(res):
             res = res.split('\n')
             log.msg('RES %s' % str(res))
-            self.failUnless(res[1].find(self.testDir) != -1, repr(res))
+            self.assertTrue(res[1].find(self.testDir) != -1, repr(res))
             self.assertEqual(res[3:-2], ['testDirectory', 'testRemoveFile',
                                              'testRenameFile', 'testfile1'])
 
@@ -890,7 +890,7 @@ pwd
 exit
 """
         def _cbCheckResult(res):
-            self.failIf(res.find(self.testDir) != -1)
+            self.assertFalse(res.find(self.testDir) != -1)
 
         d = self._getBatchOutput(cmds)
         d.addCallback(_cbCheckResult)
@@ -905,7 +905,7 @@ pwd
 exit
 """
         def _cbCheckResult(res):
-            self.failIf(res.find(self.testDir) == -1)
+            self.assertFalse(res.find(self.testDir) == -1)
 
         d = self._getBatchOutput(cmds)
         d.addCallback(_cbCheckResult)
diff --git a/twisted/conch/test/test_checkers.py b/twisted/conch/test/test_checkers.py
index 9c85050..a38abff 100644
--- a/twisted/conch/test/test_checkers.py
+++ b/twisted/conch/test/test_checkers.py
@@ -105,7 +105,7 @@ class HelperTests(TestCase):
         userdb.addUser(
             'alice', 'secrit', 1, 2, 'first last', '/foo', '/bin/sh')
         self.patch(checkers, 'pwd', userdb)
-        self.assertEquals(
+        self.assertEqual(
             checkers._pwdGetByName('alice'), userdb.getpwnam('alice'))
 
 
@@ -131,10 +131,10 @@ class HelperTests(TestCase):
         self.patch(checkers, 'os', self.mockos)
         self.patch(util, 'os', self.mockos)
 
-        self.assertEquals(
+        self.assertEqual(
             checkers._shadowGetByName('bob'), userdb.getspnam('bob'))
-        self.assertEquals(self.mockos.seteuidCalls, [0, 2345])
-        self.assertEquals(self.mockos.setegidCalls, [0, 1234])
+        self.assertEqual(self.mockos.seteuidCalls, [0, 2345])
+        self.assertEqual(self.mockos.setegidCalls, [0, 1234])
 
 
     def test_shadowGetByNameWithoutSpwd(self):
@@ -153,10 +153,10 @@ class HelperTests(TestCase):
         self.mockos.euid = 2345
         self.mockos.egid = 1234
 
-        self.assertEquals(
+        self.assertEqual(
             checkers._shadowGetByName('bob'), userdb.getspnam('bob'))
-        self.assertEquals(self.mockos.seteuidCalls, [0, 2345])
-        self.assertEquals(self.mockos.setegidCalls, [0, 1234])
+        self.assertEqual(self.mockos.seteuidCalls, [0, 2345])
+        self.assertEqual(self.mockos.setegidCalls, [0, 1234])
 
 
     def test_shadowGetByNameWithoutEither(self):
@@ -169,8 +169,8 @@ class HelperTests(TestCase):
         self.patch(checkers, 'os', self.mockos)
 
         self.assertIdentical(checkers._shadowGetByName('bob'), None)
-        self.assertEquals(self.mockos.seteuidCalls, [])
-        self.assertEquals(self.mockos.setegidCalls, [])
+        self.assertEqual(self.mockos.seteuidCalls, [])
+        self.assertEqual(self.mockos.setegidCalls, [])
 
 
 
@@ -422,7 +422,7 @@ class SSHProtocolCheckerTestCase(TestCase):
         """
         The default L{SSHProcotolChecker.areDone} should simply return True.
         """
-        self.assertEquals(checkers.SSHProtocolChecker().areDone(None), True)
+        self.assertEqual(checkers.SSHProtocolChecker().areDone(None), True)
 
 
 
@@ -446,10 +446,10 @@ class UNIXPasswordDatabaseTests(TestCase):
         """
         result = []
         d.addBoth(result.append)
-        self.assertEquals(len(result), 1, "login incomplete")
+        self.assertEqual(len(result), 1, "login incomplete")
         if isinstance(result[0], Failure):
             result[0].raiseException()
-        self.assertEquals(result[0], username)
+        self.assertEqual(result[0], username)
 
 
     def test_defaultCheckers(self):
@@ -486,12 +486,12 @@ class UNIXPasswordDatabaseTests(TestCase):
 
         cred = UsernamePassword("alice", "password")
         self.assertLoggedIn(checker.requestAvatarId(cred), 'alice')
-        self.assertEquals(mockos.seteuidCalls, [])
-        self.assertEquals(mockos.setegidCalls, [])
+        self.assertEqual(mockos.seteuidCalls, [])
+        self.assertEqual(mockos.setegidCalls, [])
         cred.username = "bob"
         self.assertLoggedIn(checker.requestAvatarId(cred), 'bob')
-        self.assertEquals(mockos.seteuidCalls, [0, 2345])
-        self.assertEquals(mockos.setegidCalls, [0, 1234])
+        self.assertEqual(mockos.seteuidCalls, [0, 2345])
+        self.assertEqual(mockos.setegidCalls, [0, 1234])
 
 
     def assertUnauthorizedLogin(self, d):
diff --git a/twisted/conch/test/test_helper.py b/twisted/conch/test/test_helper.py
index 7064d03..5668cd9 100644
--- a/twisted/conch/test/test_helper.py
+++ b/twisted/conch/test/test_helper.py
@@ -279,31 +279,31 @@ class BufferTestCase(unittest.TestCase):
 
         ch = self.term.getCharacter(0, 0)
         self.assertEqual(ch[0], 'W')
-        self.failUnless(ch[1].bold)
-        self.failUnless(ch[1].underline)
-        self.failUnless(ch[1].blink)
-        self.failUnless(ch[1].reverseVideo)
+        self.assertTrue(ch[1].bold)
+        self.assertTrue(ch[1].underline)
+        self.assertTrue(ch[1].blink)
+        self.assertTrue(ch[1].reverseVideo)
 
         ch = self.term.getCharacter(1, 0)
         self.assertEqual(ch[0], 'X')
-        self.failIf(ch[1].bold)
-        self.failIf(ch[1].underline)
-        self.failIf(ch[1].blink)
-        self.failIf(ch[1].reverseVideo)
+        self.assertFalse(ch[1].bold)
+        self.assertFalse(ch[1].underline)
+        self.assertFalse(ch[1].blink)
+        self.assertFalse(ch[1].reverseVideo)
 
         ch = self.term.getCharacter(2, 0)
         self.assertEqual(ch[0], 'Y')
-        self.failUnless(ch[1].blink)
-        self.failIf(ch[1].bold)
-        self.failIf(ch[1].underline)
-        self.failIf(ch[1].reverseVideo)
+        self.assertTrue(ch[1].blink)
+        self.assertFalse(ch[1].bold)
+        self.assertFalse(ch[1].underline)
+        self.assertFalse(ch[1].reverseVideo)
 
         ch = self.term.getCharacter(3, 0)
         self.assertEqual(ch[0], 'Z')
-        self.failUnless(ch[1].blink)
-        self.failUnless(ch[1].bold)
-        self.failIf(ch[1].underline)
-        self.failIf(ch[1].reverseVideo)
+        self.assertTrue(ch[1].blink)
+        self.assertTrue(ch[1].bold)
+        self.assertFalse(ch[1].underline)
+        self.assertFalse(ch[1].reverseVideo)
 
     def testColorAttributes(self):
         s1 = "Merry xmas"
@@ -475,25 +475,25 @@ class ExpectTestCase(unittest.TestCase):
         d.addCallback(result.append)
 
         self.term.write("greeting puny earthlings\n")
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("hello world\n")
-        self.failUnless(result)
+        self.assertTrue(result)
         self.assertEqual(result[0].group(), "hello world")
         self.assertEqual(len(self.fs.calls), 1)
-        self.failIf(self.fs.calls[0].active())
+        self.assertFalse(self.fs.calls[0].active())
 
     def testBrokenUpString(self):
         result = []
         d = self.term.expect("hello world")
         d.addCallback(result.append)
 
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("hello ")
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("worl")
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("d")
-        self.failUnless(result)
+        self.assertTrue(result)
         self.assertEqual(result[0].group(), "hello world")
 
 
@@ -504,9 +504,9 @@ class ExpectTestCase(unittest.TestCase):
         d2 = self.term.expect("world")
         d2.addCallback(result.append)
 
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("hello")
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write(" ")
         self.assertEqual(len(result), 1)
         self.term.write("world")
@@ -520,7 +520,7 @@ class ExpectTestCase(unittest.TestCase):
         result = []
         d = self.term.expect("hello world")
         d.addCallback(result.append)
-        self.failUnless(result)
+        self.assertTrue(result)
         self.assertEqual(result[0].group(), "hello world")
 
     def testMultipleSynchronous(self):
@@ -537,7 +537,7 @@ class ExpectTestCase(unittest.TestCase):
         self.assertEqual(result[1].group(), "world")
 
     def _cbTestTimeoutFailure(self, res):
-        self.assert_(hasattr(res, 'type'))
+        self.assertTrue(hasattr(res, 'type'))
         self.assertEqual(res.type, helper.ExpectationTimeout)
 
     def testTimeoutFailure(self):
diff --git a/twisted/conch/test/test_insults.py b/twisted/conch/test/test_insults.py
index f313b5e..a794ade 100644
--- a/twisted/conch/test/test_insults.py
+++ b/twisted/conch/test/test_insults.py
@@ -112,7 +112,7 @@ class ServerArrowKeys(ByteGroupingsMixin, unittest.TestCase):
                       parser.RIGHT_ARROW, parser.LEFT_ARROW):
             result = self.assertCall(occurrences(proto).pop(0), "keystrokeReceived", (arrow, None))
             self.assertEqual(occurrences(result), [])
-        self.failIf(occurrences(proto))
+        self.assertFalse(occurrences(proto))
 
 
 class PrintableCharacters(ByteGroupingsMixin, unittest.TestCase):
@@ -135,7 +135,7 @@ class PrintableCharacters(ByteGroupingsMixin, unittest.TestCase):
             self.assertEqual(occurrences(result), [])
 
         occs = occurrences(proto)
-        self.failIf(occs, "%r should have been []" % (occs,))
+        self.assertFalse(occs, "%r should have been []" % (occs,))
 
 class ServerFunctionKeys(ByteGroupingsMixin, unittest.TestCase):
     """Test for parsing and dispatching function keys (F1 - F12)
@@ -156,7 +156,7 @@ class ServerFunctionKeys(ByteGroupingsMixin, unittest.TestCase):
             funcArg = getattr(parser, 'F%d' % (funcNum,))
             result = self.assertCall(occurrences(proto).pop(0), "keystrokeReceived", (funcArg, None))
             self.assertEqual(occurrences(result), [])
-        self.failIf(occurrences(proto))
+        self.assertFalse(occurrences(proto))
 
 class ClientCursorMovement(ByteGroupingsMixin, unittest.TestCase):
     protocolFactory = ClientProtocol
@@ -176,7 +176,7 @@ class ClientCursorMovement(ByteGroupingsMixin, unittest.TestCase):
                                 ('Backward', 2), ('Up', 1), ('Backward', 2)]:
             result = self.assertCall(occurrences(proto).pop(0), "cursor" + method, (count,))
             self.assertEqual(occurrences(result), [])
-        self.failIf(occurrences(proto))
+        self.assertFalse(occurrences(proto))
 
 class ClientControlSequences(unittest.TestCase, MockMixin):
     def setUp(self):
@@ -186,7 +186,7 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         self.parser.factory = self
         self.parser.makeConnection(self.transport)
         result = self.assertCall(occurrences(self.proto).pop(0), "makeConnection", (self.parser,))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
     def testSimpleCardinals(self):
         self.parser.dataReceived(
@@ -196,36 +196,36 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         for meth in ("Down", "Up", "Forward", "Backward"):
             for count in (1, 2, 20, 200):
                 result = self.assertCall(occs.pop(0), "cursor" + meth, (count,))
-                self.failIf(occurrences(result))
-        self.failIf(occs)
+                self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testScrollRegion(self):
         self.parser.dataReceived('\x1b[5;22r\x1b[r')
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "setScrollRegion", (5, 22))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "setScrollRegion", (None, None))
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testHeightAndWidth(self):
         self.parser.dataReceived("\x1b#3\x1b#4\x1b#5\x1b#6")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "doubleHeightLine", (True,))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "doubleHeightLine", (False,))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "singleWidthLine")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "doubleWidthLine")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testCharacterSet(self):
         self.parser.dataReceived(
@@ -235,74 +235,74 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         for which in (G0, G1):
             for charset in (CS_UK, CS_US, CS_DRAWING, CS_ALTERNATE, CS_ALTERNATE_SPECIAL):
                 result = self.assertCall(occs.pop(0), "selectCharacterSet", (charset, which))
-                self.failIf(occurrences(result))
-        self.failIf(occs)
+                self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testShifting(self):
         self.parser.dataReceived("\x15\x14")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "shiftIn")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "shiftOut")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testSingleShifts(self):
         self.parser.dataReceived("\x1bN\x1bO")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "singleShift2")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "singleShift3")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testKeypadMode(self):
         self.parser.dataReceived("\x1b=\x1b>")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "applicationKeypadMode")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "numericKeypadMode")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testCursor(self):
         self.parser.dataReceived("\x1b7\x1b8")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "saveCursor")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "restoreCursor")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testReset(self):
         self.parser.dataReceived("\x1bc")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "reset")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testIndex(self):
         self.parser.dataReceived("\x1bD\x1bM\x1bE")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "index")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "reverseIndex")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "nextLine")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testModes(self):
         self.parser.dataReceived(
@@ -312,11 +312,11 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "setModes", ([modes.KAM, modes.IRM, modes.LNM],))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "resetModes", ([modes.KAM, modes.IRM, modes.LNM],))
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testErasure(self):
         self.parser.dataReceived(
@@ -327,11 +327,11 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
                      "eraseToDisplayEnd", "eraseToDisplayBeginning",
                      "eraseDisplay"):
             result = self.assertCall(occs.pop(0), meth)
-            self.failIf(occurrences(result))
+            self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "deleteCharacter", (3,))
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testLineDeletion(self):
         self.parser.dataReceived("\x1b[M\x1b[3M")
@@ -339,8 +339,8 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
 
         for arg in (1, 3):
             result = self.assertCall(occs.pop(0), "deleteLine", (arg,))
-            self.failIf(occurrences(result))
-        self.failIf(occs)
+            self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testLineInsertion(self):
         self.parser.dataReceived("\x1b[L\x1b[3L")
@@ -348,8 +348,8 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
 
         for arg in (1, 3):
             result = self.assertCall(occs.pop(0), "insertLine", (arg,))
-            self.failIf(occurrences(result))
-        self.failIf(occs)
+            self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testCursorPosition(self):
         methods(self.proto)['reportCursorPosition'] = (6, 7)
diff --git a/twisted/conch/test/test_mixin.py b/twisted/conch/test/test_mixin.py
index 74d60ea..592aa48 100644
--- a/twisted/conch/test/test_mixin.py
+++ b/twisted/conch/test/test_mixin.py
@@ -29,13 +29,13 @@ class BufferingTest(unittest.TestCase):
         p = TestBufferingProto()
         t = p.transport = StringTransport()
 
-        self.failIf(p.scheduled)
+        self.assertFalse(p.scheduled)
 
         L = ['foo', 'bar', 'baz', 'quux']
 
         p.write('foo')
-        self.failUnless(p.scheduled)
-        self.failIf(p.rescheduled)
+        self.assertTrue(p.scheduled)
+        self.assertFalse(p.rescheduled)
 
         for s in L:
             n = p.rescheduled
diff --git a/twisted/conch/test/test_ssh.py b/twisted/conch/test/test_ssh.py
index 6cf1a1a..e25d224 100644
--- a/twisted/conch/test/test_ssh.py
+++ b/twisted/conch/test/test_ssh.py
@@ -866,9 +866,9 @@ class TestSSHFactory(unittest.TestCase):
         f2 = self.makeSSHFactory(primes={1:(2,3)})
         p1 = f1.buildProtocol(None)
         p2 = f2.buildProtocol(None)
-        self.failIf('diffie-hellman-group-exchange-sha1' in p1.supportedKeyExchanges,
+        self.assertFalse('diffie-hellman-group-exchange-sha1' in p1.supportedKeyExchanges,
                 p1.supportedKeyExchanges)
-        self.failUnless('diffie-hellman-group-exchange-sha1' in p2.supportedKeyExchanges,
+        self.assertTrue('diffie-hellman-group-exchange-sha1' in p2.supportedKeyExchanges,
                 p2.supportedKeyExchanges)
 
 
diff --git a/twisted/conch/test/test_transport.py b/twisted/conch/test/test_transport.py
index 8b801b0..baa1778 100644
--- a/twisted/conch/test/test_transport.py
+++ b/twisted/conch/test/test_transport.py
@@ -1062,15 +1062,15 @@ here's some other stuff
         proto2 = MockTransportBase()
         proto2.makeConnection(proto_helpers.StringTransport())
         proto2.sendIgnore('')
-        self.failIfEquals(proto.gotVersion, proto2.gotVersion)
-        self.failIfEquals(proto.transport, proto2.transport)
-        self.failIfEquals(proto.outgoingPacketSequence,
+        self.assertNotEqual(proto.gotVersion, proto2.gotVersion)
+        self.assertNotEqual(proto.transport, proto2.transport)
+        self.assertNotEqual(proto.outgoingPacketSequence,
                           proto2.outgoingPacketSequence)
-        self.failIfEquals(proto.incomingPacketSequence,
+        self.assertNotEqual(proto.incomingPacketSequence,
                           proto2.incomingPacketSequence)
-        self.failIfEquals(proto.currentEncryptions,
+        self.assertNotEqual(proto.currentEncryptions,
                           proto2.currentEncryptions)
-        self.failIfEquals(proto.service, proto2.service)
+        self.assertNotEqual(proto.service, proto2.service)
 
 
 
@@ -1481,11 +1481,11 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.proto.outgoingCompressionType = 'zlib'
         self.simulateKeyExchange('AB', 'CD')
         self.proto.ssh_NEWKEYS('')
-        self.failIfIdentical(self.proto.outgoingCompression, None)
+        self.assertIsNot(self.proto.outgoingCompression, None)
         self.proto.incomingCompressionType = 'zlib'
         self.simulateKeyExchange('AB', 'EF')
         self.proto.ssh_NEWKEYS('')
-        self.failIfIdentical(self.proto.incomingCompression, None)
+        self.assertIsNot(self.proto.incomingCompression, None)
 
 
     def test_SERVICE_REQUEST(self):
@@ -1751,11 +1751,11 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.proto.outgoingCompressionType = 'zlib'
         self.simulateKeyExchange('AB', 'GH')
         self.proto.ssh_NEWKEYS('')
-        self.failIfIdentical(self.proto.outgoingCompression, None)
+        self.assertIsNot(self.proto.outgoingCompression, None)
         self.proto.incomingCompressionType = 'zlib'
         self.simulateKeyExchange('AB', 'IJ')
         self.proto.ssh_NEWKEYS('')
-        self.failIfIdentical(self.proto.incomingCompression, None)
+        self.assertIsNot(self.proto.incomingCompression, None)
 
 
     def test_SERVICE_ACCEPT(self):
@@ -1821,7 +1821,7 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.proto.instance = MockService()
         self.proto.ssh_SERVICE_ACCEPT('') # no payload
         self.assertTrue(self.proto.instance.started)
-        self.assertEquals(len(self.packets), 0) # not disconnected
+        self.assertEqual(len(self.packets), 0) # not disconnected
 
 
 
@@ -1898,7 +1898,7 @@ class SSHCiphersTestCase(unittest.TestCase):
             enc = cip.encrypt(key[:bs])
             enc2 = cip.encrypt(key[:bs])
             if counter:
-                self.failIfEquals(enc, enc2)
+                self.assertNotEqual(enc, enc2)
             self.assertEqual(encCipher.encrypt(key[:bs]), enc)
             self.assertEqual(encCipher.encrypt(key[:bs]), enc2)
             self.assertEqual(decCipher.decrypt(enc), key[:bs])
diff --git a/twisted/conch/test/test_userauth.py b/twisted/conch/test/test_userauth.py
index d027faa..1b3ec41 100644
--- a/twisted/conch/test/test_userauth.py
+++ b/twisted/conch/test/test_userauth.py
@@ -552,7 +552,7 @@ class SSHUserAuthServerTestCase(unittest.TestCase):
         clearAuthServer.transport.isEncrypted = lambda x: False
         clearAuthServer.serviceStarted()
         clearAuthServer.serviceStopped()
-        self.failIfIn('password', clearAuthServer.supportedAuthentications)
+        self.assertNotIn('password', clearAuthServer.supportedAuthentications)
         # only encrypt incoming (the direction the password is sent)
         halfAuthServer = userauth.SSHUserAuthServer()
         halfAuthServer.transport = FakeTransport(self.portal)
@@ -575,7 +575,7 @@ class SSHUserAuthServerTestCase(unittest.TestCase):
         clearAuthServer.transport.isEncrypted = lambda x: False
         clearAuthServer.serviceStarted()
         clearAuthServer.serviceStopped()
-        self.failIfIn('keyboard-interactive',
+        self.assertNotIn('keyboard-interactive',
                 clearAuthServer.supportedAuthentications)
         # only encrypt incoming (the direction the password is sent)
         halfAuthServer = userauth.SSHUserAuthServer()
