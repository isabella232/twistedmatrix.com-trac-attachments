=== modified file 'twisted/internet/_posixserialport.py'
--- twisted/internet/_posixserialport.py	2010-07-05 15:02:45 +0000
+++ twisted/internet/_posixserialport.py	2011-03-16 21:33:52 +0000
@@ -23,12 +23,12 @@
     """
 
     connected = 1
-
+    SerialClass = serial.Serial
     def __init__(self, protocol, deviceNameOrPortNumber, reactor, 
         baudrate = 9600, bytesize = EIGHTBITS, parity = PARITY_NONE,
         stopbits = STOPBITS_ONE, timeout = 0, xonxoff = 0, rtscts = 0):
         abstract.FileDescriptor.__init__(self, reactor)
-        self._serial = serial.Serial(deviceNameOrPortNumber, baudrate = baudrate, bytesize = bytesize, parity = parity, stopbits = stopbits, timeout = timeout, xonxoff = xonxoff, rtscts = rtscts)
+        self._serial = self.SerialClass(deviceNameOrPortNumber, baudrate = baudrate, bytesize = bytesize, parity = parity, stopbits = stopbits, timeout = timeout, xonxoff = xonxoff, rtscts = rtscts)
         self.reactor = reactor
         self.flushInput()
         self.flushOutput()
@@ -53,5 +53,6 @@
 
     def connectionLost(self, reason):
         abstract.FileDescriptor.connectionLost(self, reason)
+        # Running the close first make this easier to test
+        self._serial.close()
         self.protocol.connectionLost(reason)
-        self._serial.close()

=== modified file 'twisted/internet/_win32serialport.py'
--- twisted/internet/_win32serialport.py	2005-10-26 05:01:17 +0000
+++ twisted/internet/_win32serialport.py	2011-03-16 21:40:24 +0000
@@ -1,4 +1,4 @@
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
@@ -15,98 +15,143 @@
 from serial import PARITY_NONE, PARITY_EVEN, PARITY_ODD
 from serial import STOPBITS_ONE, STOPBITS_TWO
 from serial import FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS
-import win32file, win32event
+import pywintypes
 
 # twisted imports
 from twisted.protocols import basic
-from twisted.internet import abstract
-from twisted.python import log
+from twisted.internet import abstract, main
+from twisted.python import log, failure
 
 # sibling imports
 from serialport import BaseSerialPort
+import win32event, win32pipe, win32file, win32api, winerror
+
+READBUF_SIZE = 1204
+
 
 
 class SerialPort(BaseSerialPort, abstract.FileDescriptor):
-    """A select()able serial device, acting as a transport."""
+    """
+    A non blocking (overlapped) interface for reading and writing to a
+    win32 file handle. 
+    
+    Requires a reactor that implements L{IReactorWin32Events}.
+    """
 
     connected = 1
+    SerialClass = serial.Serial
 
     def __init__(self, protocol, deviceNameOrPortNumber, reactor, 
         baudrate = 9600, bytesize = EIGHTBITS, parity = PARITY_NONE,
         stopbits = STOPBITS_ONE, xonxoff = 0, rtscts = 0):
-        self._serial = serial.Serial(deviceNameOrPortNumber, baudrate=baudrate,
+        abstract.FileDescriptor.__init__(self, reactor)
+
+        self._serial = self.SerialClass(deviceNameOrPortNumber, baudrate=baudrate,
                                      bytesize=bytesize, parity=parity,
                                      stopbits=stopbits, timeout=None,
                                      xonxoff=xonxoff, rtscts=rtscts)
         self.flushInput()
         self.flushOutput()
-        self.reactor = reactor
-        self.protocol = protocol
         self.outQueue = []
-        self.closed = 0
-        self.closedNotifies = 0
-        self.writeInProgress = 0
-        
+        self.writeInProgress = False
+
         self.protocol = protocol
+        self.protocol.makeConnection(self)
+        self.startReading()
+        self.startWriting()
+
+
+    def startReading(self):
+        """
+        Create and issue an overlapped Read
+        """
         self._overlappedRead = win32file.OVERLAPPED()
         self._overlappedRead.hEvent = win32event.CreateEvent(None, 1, 0, None)
+        self.reactor.addEvent(self._overlappedRead.hEvent, self, 'serialReadEvent')
+
+        # Ask for a read and fire the event once the read has occured
+        rc, self.read_buf = win32file.ReadFile(self._serial.hComPort,
+                                               win32file.AllocateReadBuffer(READBUF_SIZE),
+                                               self._overlappedRead)
+
+
+    def startWriting(self):
+        """
+        Create the overlapped Write Structures.
+        """
         self._overlappedWrite = win32file.OVERLAPPED()
         self._overlappedWrite.hEvent = win32event.CreateEvent(None, 0, 0, None)
-        
-        self.reactor.addEvent(self._overlappedRead.hEvent, self, 'serialReadEvent')
-        self.reactor.addEvent(self._overlappedWrite.hEvent, self, 'serialWriteEvent')
-
-        self.protocol.makeConnection(self)
-
-        flags, comstat = win32file.ClearCommError(self._serial.hComPort)
-        rc, self.read_buf = win32file.ReadFile(self._serial.hComPort,
-                                               win32file.AllocateReadBuffer(1),
-                                               self._overlappedRead)
+        self.reactor.addEvent(self._overlappedWrite.hEvent, self, 'doWrite')
+
 
     def serialReadEvent(self):
-        #get that character we set up
-        n = win32file.GetOverlappedResult(self._serial.hComPort, self._overlappedRead, 0)
-        if n:
-            first = str(self.read_buf[:n])
-            #now we should get everything that is already in the buffer
-            flags, comstat = win32file.ClearCommError(self._serial.hComPort)
-            if comstat.cbInQue:
-                win32event.ResetEvent(self._overlappedRead.hEvent)
-                rc, buf = win32file.ReadFile(self._serial.hComPort,
-                                             win32file.AllocateReadBuffer(comstat.cbInQue),
-                                             self._overlappedRead)
-                n = win32file.GetOverlappedResult(self._serial.hComPort, self._overlappedRead, 1)
-                #handle all the received data:
-                self.protocol.dataReceived(first + str(buf[:n]))
-            else:
-                #handle all the received data:
-                self.protocol.dataReceived(first)
-
-        #set up next one
+        """
+        A read event has occured.
+        """
+        try:
+            n = win32file.GetOverlappedResult(self._serial.hComPort, self._overlappedRead, 0)
+        except pywintypes.error as e:
+            self.connectionLost(e)
+            return
+
+        if n > 0:
+            # Read the data from the buffer before the buffer is reset.
+            data = str(self.read_buf[:n])  
+            self.protocol.dataReceived(data)
+
+        # The read operation has completed and n bytes have been read 
+        # into the buffer. Set up the next read operation
         win32event.ResetEvent(self._overlappedRead.hEvent)
-        rc, self.read_buf = win32file.ReadFile(self._serial.hComPort,
-                                               win32file.AllocateReadBuffer(1),
-                                               self._overlappedRead)
+        try:
+            rc, self.read_buf = win32file.ReadFile(
+                self._serial.hComPort,
+                win32file.AllocateReadBuffer(READBUF_SIZE),
+                self._overlappedRead)
+        except Exception as e:
+            self.connectionLost(e)
+
 
     def write(self, data):
-        if data:
-            if self.writeInProgress:
-                self.outQueue.append(data)
-            else:
-                self.writeInProgress = 1
-                win32file.WriteFile(self._serial.hComPort, data, self._overlappedWrite)
-
-    def serialWriteEvent(self):
-        try:
-            dataToWrite = self.outQueue.pop(0)
-        except IndexError:
-            self.writeInProgress = 0
-            return
-        else:
-            win32file.WriteFile(self._serial.hComPort, dataToWrite, self._overlappedWrite)
-    
+        '''
+        If a write is still in progress then queue the data otherwrite
+        write data to the File Descriptor.
+        '''
+        if self.writeInProgress:
+            self.outQueue.append(data)
+        else:
+            self._pendingData = data
+            self.writeInProgress = 1
+            # data must not be garbage collected until it has been written
+            win32file.WriteFile(self._serial.hComPort, 
+                                self._pendingData, 
+                                self._overlappedWrite)
+
+        
+    def doWrite(self):
+        '''
+        A write has occured.
+        Write any pending data and handle any errors
+
+        return True if file closed.
+        '''
+        n = win32file.GetOverlappedResult(self._serial.hComPort, 
+                                          self._overlappedWrite, 
+                                          1)
+        if n==0:
+            # Write Failed
+            return True
+        else:
+            self.writeInProgress = False
+            if len(self.outQueue)> 0:
+                self.writeSomeData(self.outQueue.pop())
+
+            return False
+
+
     def connectionLost(self, reason):
         self.reactor.removeEvent(self._overlappedRead.hEvent)
         self.reactor.removeEvent(self._overlappedWrite.hEvent)
         abstract.FileDescriptor.connectionLost(self, reason)
+        # Running the close first make this easier to test
         self._serial.close()
+        self.protocol.connectionLost(reason)

=== modified file 'twisted/internet/test/test_serialport.py'
--- twisted/internet/test/test_serialport.py	2010-07-05 15:11:13 +0000
+++ twisted/internet/test/test_serialport.py	2011-03-16 21:40:24 +0000
@@ -1,4 +1,4 @@
-# Copyright (c) 2010 Twisted Matrix Laboratories.
+# copyright (c) 2010 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
@@ -13,19 +13,199 @@
 else:
     from twisted.internet.serialport import SerialPort
 
+import os
+import socket
+import sys
 from twisted.internet.interfaces import IReactorFDSet, IReactorWin32Events
 from twisted.internet.error import ConnectionDone
 from twisted.internet.defer import Deferred
 from twisted.internet.test.reactormixins import ReactorBuilder
 from twisted.trial.unittest import SkipTest
 from twisted.test.test_tcp import ConnectionLostNotifyingProtocol
+from twisted.python.runtime import platformType
+from twisted.internet.address import UNIXAddress
+from twisted.internet.protocol import Protocol, ServerFactory, Factory, ConnectedDatagramProtocol, ClientFactory
+from twisted.python.hashlib import md5
+from twisted.internet.serialport import SerialPort
+from twisted.internet import abstract, fdesc
+from twisted.protocols.wire import Echo
+from twisted.internet import main
+from twisted.python import failure, log
+from twisted.internet.tcp import EINPROGRESS, EWOULDBLOCK
+
+import serial
+from serial import EIGHTBITS, PARITY_NONE, STOPBITS_ONE
+
+
+
+class _MockPosixSerial(serial.Serial):
+    """
+    An L{serial.Serial} class that uses a pty to mock a serial port on Posix systems.
+    """
+    def open(self, *args, **kwargs):
+        self.master, self.slave = os.openpty()
+        self.fd = self.master
+
+
+class _MockWindowsSerial(object):
+    """
+    A select()able serial device, acting as a transport.
+    """
+    def __init__(self, deviceNameOrPortNumber, **kwargs):
+        self.hComPort = deviceNameOrPortNumber
+    
+    def flushInput(self):
+        pass
+
+    def flushOutput(self):
+        pass
+
+    def close(self):
+        import win32api
+        win32api.CloseHandle(self.hComPort)
+
+
+class _MockPosixSerialPort(SerialPort):
+    SerialClass = _MockPosixSerial
+
+
+class _MockWindowsSerialPort(SerialPort):
+    SerialClass = _MockWindowsSerial
+
+
+class _MockWindowsEchoPort(SerialPort):
+    SerialClass = _MockWindowsSerial
+    def slaveConnected(self):
+        log.msg('Slave Connected')
+        import win32file, win32event, win32pipe
+        self._overlappedRead = win32file.OVERLAPPED()
+        self._overlappedRead.hEvent = win32event.CreateEvent(None, 1, 0, None)
+        self.reactor.addEvent(self._overlappedRead.hEvent, self, 'serialReadEvent')
+        win32event.SetEvent(self._overlappedRead.hEvent)
+
+    def startReading(self):
+        log.msg('startReading')
+        import win32file, win32event, win32pipe
+        self._overlapped = win32file.OVERLAPPED()
+        self._overlapped.hEvent = win32event.CreateEvent(None, 1, 1, None)
+        self.reactor.addEvent(self._overlapped.hEvent, self, 'slaveConnected')
+        rc = win32pipe.ConnectNamedPipe(self._serial.hComPort, self._overlapped)
+        import winerror
+        if rc == winerror.ERROR_IO_PENDING:
+            log.msg('ConnectNamedPipe returned ERROR_IO_PENDING')
+        elif rc == winerror.ERROR_PIPE_CONNECTED:
+            log.msg('ConnectNamedPipe returned ERROR_PIPE_CONNECTED')
+            self.slaveConnected()
+        else:
+            log.msg('ConnectNamedPipe returned %d' % rc)
+        
+
+class NotifyOnRecevied(Protocol):
+    """
+    Fire a C{Deferred} with the  L{IProtocol.dataReceived} is called
+    """
+    def __init__(self, deferred):
+        self.deferred = deferred
+
+    def dataReceived(self, data):
+        self.deferred.callback(data)
+
 
 
 class SerialPortTestsBuilder(ReactorBuilder):
     """
     Builder defining tests for L{twisted.internet.serialport}.
+
+    If the environment variable C{TRIALSERIALPORT} is set, tests will
+    use a real serial port at that address. This serial port should
+    echo transmitted data, by connecting a wire from the Tx to the Rx
+    pin of a serial connector.
+
+    Otherwise a L{MockSerialPort} port will be used.    
     """
-    portName = 0
+    def setUp(self):
+        self.reactor = self.buildReactor()
+
+        if platformType == "win32" and IReactorWin32Events.providedBy(self.reactor):
+            pass
+        elif platformType != "win32" and IReactorFDSet.providedBy(self.reactor):
+            pass
+        else:
+            raise SkipTest(
+                "Cannot use SerialPort without IReactorFDSet or "
+                "IReactorWin32Events")
+
+
+    def _serial_unix(self, protocol, reactor, **kwargs):
+        """
+        Use a unix socket to connect the L{MockSerialPort} to the L{Echo} protocol.
+
+        The client connects to the socket before the server has been
+        started, as the reactor isn't running yet. For this reason a
+        TCP socket cannot be used.
+
+        It would also be possible to implement this using os.opentty()
+        """
+        filename = self.mktemp()
+        f = ServerFactory()
+        f.protocol = Echo
+        unixPort = self.reactor.listenUNIX(filename, f)
+        self.addCleanup(unixPort.stopListening)
+
+        unixSocket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
+        self.addCleanup(unixSocket.close)
+        unixSocket.connect(filename)
+    
+        return _MockPosixSerialPort(protocol, unixSocket.fileno(), self.reactor)
+
+
+    def _serial_win(self, protocol, reactor, **kwargs):
+        """
+        Use a named pipe to allow bidirection I/O over a file like
+        objects that should be supported by the L{IReactorWin32Events}
+        interface.
+
+        http://msdn.microsoft.com/en-us/library/aa365603(v=vs.85).aspx
+
+        """
+        import win32event, win32pipe, win32file, win32api, winerror
+
+        pipeName = r"\\.\pipe\serialport"
+        self.master = win32pipe.CreateNamedPipe(pipeName, 
+                                      win32pipe.PIPE_ACCESS_DUPLEX|
+                                      win32file.FILE_FLAG_OVERLAPPED,  # Open Mode
+                                      win32pipe.PIPE_TYPE_MESSAGE|
+                                      win32pipe.PIPE_NOWAIT,         # Pipe Mode
+                                      1,                             # Max Instances
+                                      6536,                          # OutBufferSize
+                                      6536,                          # InBufferSize
+                                      1,                             # DefaultTimeOut
+                                      None                           # Security Attributes
+                                      )
+
+        self.slave1 = win32file.CreateFile(pipeName,
+                                          win32file.GENERIC_READ | win32file.GENERIC_WRITE,
+                                          win32file.FILE_SHARE_READ | win32file.FILE_SHARE_WRITE,
+                                          None,
+                                          win32file.OPEN_EXISTING,
+                                          win32file.FILE_FLAG_OVERLAPPED|win32file.FILE_ATTRIBUTE_NORMAL,
+                                          None)
+        
+        serialPort = _MockWindowsSerialPort(protocol, self.slave1, self.reactor)
+
+        pecho = Echo()
+        _MockWindowsEchoPort(pecho, self.master, reactor)
+        self.addCleanup(win32api.CloseHandle, self.master)
+        self.addCleanup(win32api.CloseHandle, self.slave1)
+        return serialPort
+
+
+    def _serial(self, *args, **kwargs):
+        if os.name == 'posix':
+            return self._serial_unix(*args, **kwargs)
+        elif sys.platform == 'win32':
+            return self._serial_win(*args, **kwargs)
+
 
     def test_loseConnection(self):
         """
@@ -34,32 +214,37 @@
         C{connectionLost} method to be called with a L{Failure}
         wrapping L{ConnectionDone}.
         """
-        reactor = self.buildReactor()
-
-        interfaces = [IReactorFDSet, IReactorWin32Events]
-        support = [True for iface in interfaces if iface.providedBy(reactor)]
-        if not support:
-            raise SkipTest(
-                "Cannot use SerialPort without IReactorFDSet or "
-                "IReactorWin32Events")
-
         onConnectionLost = Deferred()
         protocol = ConnectionLostNotifyingProtocol(onConnectionLost)
-
-        try:
-            port = SerialPort(protocol, self.portName, reactor)
-        except SerialException, e:
-            raise SkipTest("Cannot open serial port: %s" % (e,))
+        port = self._serial(protocol, self.reactor)
 
         def cbConnLost(ignored):
-            reactor.stop()
+            self.reactor.stop()
         onConnectionLost.addCallback(cbConnLost)
 
         port.loseConnection()
-
-        self.runReactor(reactor)
-
-        protocol.lostConnectionReason.trap(ConnectionDone)
-
+        
+        self.runReactor(self.reactor)
+    test_loseConnection.timeout = 2
+
+
+    def test_loopback(self):
+        """
+        L{SerialPort.writeSomeData} should write data to a ptty. Data
+        written to this ptty should cause L{IProtocol.dataReceived} to
+        be called with this data.
+        """
+        d = Deferred()
+        protocol = NotifyOnRecevied(d)
+        serial = self._serial(protocol, self.reactor)
+        serial.write('Send A String')
+
+        def check(data):
+            self.assertEquals(data, 'Send A String')
+            self.reactor.stop()
+        d.addCallbacks(check, check)
+
+        self.runReactor(self.reactor)
+    test_loopback.timeout=2
 
 globals().update(SerialPortTestsBuilder.makeTestCaseClasses())

