Index: twisted/internet/endpoints.py
===================================================================
--- twisted/internet/endpoints.py	(revision 33688)
+++ twisted/internet/endpoints.py	(working copy)
@@ -1,3 +1,4 @@
+
 # -*- test-case-name: twisted.internet.test.test_endpoints -*-
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
@@ -849,16 +850,29 @@
 
 
 
-def _parseClientTCP(**kwargs):
+def _parseClientTCP(*args, **kwargs):
     """
     Perform any argument value coercion necessary for TCP client parameters.
 
+    Valid positional arguments to this function are host and port.
+
     Valid keyword arguments to this function are all L{IReactorTCP.connectTCP}
     arguments.
 
     @return: The coerced values as a C{dict}.
     """
-    kwargs['port'] = int(kwargs['port'])
+    
+    if len(args) == 2:
+        kwargs['port'] = int(args[1])
+        kwargs['host'] = args[0]
+    elif len(args) == 1:
+        if 'host' in kwargs:
+            kwargs['port'] = int(args[0])
+        else:
+            kwargs['host'] = args[0]
+    else:
+        kwargs['port'] = int(kwargs['port'])
+
     try:
         kwargs['timeout'] = int(kwargs['timeout'])
     except KeyError:
@@ -898,7 +912,7 @@
 
 
 
-def _parseClientSSL(**kwargs):
+def _parseClientSSL(*args, **kwargs):
     """
     Perform any argument value coercion necessary for SSL client parameters.
 
@@ -908,6 +922,8 @@
     associated with the certificate) are accepted and used to construct a
     context factory.
     
+    Valid positional arguments to this function are host and port.
+
     @param caCertsDir: The one parameter which is not part of
         L{IReactorSSL.connectSSL}'s signature, this is a path name used to
         construct a list of certificate authority certificates.  The directory
@@ -919,7 +935,7 @@
     @return: The coerced values as a C{dict}.
     """
     from twisted.internet import ssl
-    kwargs = _parseClientTCP(**kwargs)
+    kwargs = _parseClientTCP(*args, **kwargs)
     certKey = kwargs.pop('certKey', None)
     privateKey = kwargs.pop('privateKey', None)
     caCertsDir = kwargs.pop('caCertsDir', None)
@@ -983,19 +999,27 @@
     Construct a client endpoint from a description string.
 
     Client description strings are much like server description strings,
-    although they take all of their arguments as keywords, since even the
-    simplest client endpoint (plain TCP) requires at least 2 arguments (host
-    and port) to construct.
+    although they take all of their arguments as keywords, aside from host and
+    port.
 
     You can create a TCP client endpoint with the 'host' and 'port' arguments,
     like so::
 
         clientFromString(reactor, "tcp:host=www.example.com:port=80")
 
+    or, without specifying host and port keywords::
+
+        clientFromString(reactor, "tcp:www.example.com:80")
+
+    Or you can specify only one or the other, as in the following 2 examples::
+    
+        clientFromString(reactor, "tcp:host=www.example.com:80")
+        clientFromString(reactor, "tcp:www.example.com:port=80")
+
     or an SSL client endpoint with those arguments, plus the arguments used by
     the server SSL, for a client certificate::
 
-        clientFromString(reactor, "ssl:host=web.example.com:port=443:"
+        clientFromString(reactor, "ssl:web.example.com:443:"
                                   "privateKey=foo.pem:certKey=foo.pem")
 
     to specify your certificate trust roots, you can identify a directory with
Index: twisted/internet/test/test_endpoints.py
===================================================================
--- twisted/internet/test/test_endpoints.py	(revision 33688)
+++ twisted/internet/test/test_endpoints.py	(working copy)
@@ -1126,6 +1126,36 @@
         self.assertEqual(client._bindAddress, "10.0.0.2")
 
 
+    def test_tcpPositionalArgs(self):
+        """
+        When passed a TCP strports description using positional arguments, 
+        L{endpointClient} returns a L{TCP4ClientEndpoint} instance initialized
+        with the values from the string.
+        """
+        reactor = object()
+        client = endpoints.clientFromString(
+            reactor,
+            "tcp:example.com:1234:timeout=7:bindAddress=10.0.0.2")
+        self.assertIsInstance(client, endpoints.TCP4ClientEndpoint)
+        self.assertIdentical(client._reactor, reactor)
+        self.assertEqual(client._host, "example.com")
+        self.assertEqual(client._port, 1234)
+        self.assertEqual(client._timeout, 7)
+        self.assertEqual(client._bindAddress, "10.0.0.2")
+
+        client = endpoints.clientFromString(
+            reactor,
+            "tcp:example.com:port=1234:timeout=7:bindAddress=10.0.0.2")
+        self.assertEqual(client._host, "example.com")
+        self.assertEqual(client._port, 1234)
+
+        client = endpoints.clientFromString(
+            reactor,
+            "tcp:host=example.com:1234:timeout=7:bindAddress=10.0.0.2")
+        self.assertEqual(client._host, "example.com")
+        self.assertEqual(client._port, 1234)
+
+
     def test_tcpDefaults(self):
         """
         A TCP strports description may omit I{timeout} or I{bindAddress} to
@@ -1242,6 +1272,28 @@
                           expectedCerts)
 
 
+    def test_sslPositionalArgs(self):
+        """
+        When passed an SSL strports description, L{clientFromString} returns a
+        L{SSL4ClientEndpoint} instance initialized with the values from the
+        string.
+        """
+        reactor = object()
+        client = endpoints.clientFromString(
+            reactor,
+            "ssl:example.net:4321:privateKey=%s:"
+            "certKey=%s:bindAddress=10.0.0.3:timeout=3:caCertsDir=%s" %
+             (escapedPEMPathName,
+              escapedPEMPathName,
+              escapedCAsPathName))
+        self.assertIsInstance(client, endpoints.SSL4ClientEndpoint)
+        self.assertIdentical(client._reactor, reactor)
+        self.assertEqual(client._host, "example.net")
+        self.assertEqual(client._port, 4321)
+        self.assertEqual(client._timeout, 3)
+        self.assertEqual(client._bindAddress, "10.0.0.3")
+
+
     def test_unreadableCertificate(self):
         """
         If a certificate in the directory is unreadable,
