Index: twisted/protocols/sux.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/sux.py,v
retrieving revision 1.32
diff -r1.32 sux.py
299,300c299,301
<             if self.tagName[0] in '!?':
<                 return 'waitforgt'
---
>             # get attributes from processing instructions, too
>             #if self.tagName[0] in '!?':
>             #    return 'waitforgt'
308a310,313
>         elif byte == '?':
>             # our processing instruction is closed
>             self.gotProcessingInstruction(self.tagName, self.tagAttributes)
>             return 'waitforgt'
351c356
<             if byte == '/':
---
>             if byte in '/?':
592a598,600
> 
>     def gotProcessingInstruction(self, tagName, attrs):
>         print 'processing instruction', tagName, attrs
Index: twisted/web/microdom.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/microdom.py,v
retrieving revision 1.100
diff -r1.100 microdom.py
336a337,364
> 
> class ProcessingInstruction(Node):
>     def __init__(self, tagName, attributes, parentNode=None):
>         Node.__init__(self, parentNode)
>         self.tagName = tagName
>         self.attributes = attributes
> 
>     def cloneNode(self, deep=0, parent=None):
>         return ProcessingInstruction(self.tagName, self.attributes.copy(), parent)
> 
>     def writexml(self, stream, indent='', addindent='', newl='', strip=0, nsprefixes={}, namespace=''):
>         stream.write("<")
>         stream.write(self.tagName)
>         writeattr = lambda _atr, _val: stream.write(''.join((' ', _atr, '="', escape(_val), '"')))
>         for attr, val in self.attributes.iteritems():
>             if isinstance(attr, tuple):
>                 ns, key = attr
>                 if nsprefixes.has_key(ns):
>                     prefix = nsprefixes[ns]
>                 else:
>                     prefix = genprefix()
>                     newprefixes[ns] = prefix
>                 writeattr(prefix+':'+key,val)
>             else:
>                 writeattr(attr, val)
>         stream.write(self.tagName[0])
>         stream.write(">")
>         
693a722,729
> 
>     def gotProcessingInstruction(self, tagName, attributes):
>         parent = self._getparent()
>         pi = ProcessingInstruction(tagName, attributes)
>         if parent:
>             parent.appendChild(pi)
>         else:
>             self.documents.append(pi)
