diff --git a/twisted/conch/ssh/connection.py b/twisted/conch/ssh/connection.py
index 264fcd0..4cd6a9d 100644
--- a/twisted/conch/ssh/connection.py
+++ b/twisted/conch/ssh/connection.py
@@ -46,9 +46,9 @@ class SSHConnection(service.SSHService):
         self.channels = {} # local channel ID -> subclass of SSHChannel
         self.channelsToRemoteChannel = {} # subclass of SSHChannel -> 
                                           # remote channel ID
-        self.deferreds = {} # local channel -> list of deferreds for pending 
-                            # requests or 'global' -> list of deferreds for 
-                            # global requests
+        self.deferreds = {"global":[]} # local channel -> list of deferreds 
+                            # for pending requests or 'global' -> list of 
+                            # deferreds for global requests
         self.transport = None # gets set later
 
     def serviceStarted(self):
@@ -56,7 +56,21 @@ class SSHConnection(service.SSHService):
             self.transport.avatar.conn = self
 
     def serviceStopped(self):
+        """
+        Called when the connection is stopped.
+        """
         map(self.channelClosed, self.channels.values())
+        self._cleanupGlobalDeferreds()
+
+    def _cleanupGlobalDeferreds(self):
+        """
+        All pending requests that have returned a deferred must be errbacked
+        when this service is stopped, otherwise they might be left uncalled and
+        uncallable.
+        """
+        for d in self.deferreds["global"]:
+            d.errback(error.ConchError("Connection stopped."))
+        del self.deferreds["global"][:]
 
     # packet methods
     def ssh_GLOBAL_REQUEST(self, packet):
@@ -377,7 +391,7 @@ class SSHConnection(service.SSHService):
                                   + data)
         if wantReply:
             d = defer.Deferred()
-            self.deferreds.setdefault('global', []).append(d)
+            self.deferreds['global'].append(d)
             return d
 
     def openChannel(self, channel, extra=''):
@@ -570,13 +584,17 @@ class SSHConnection(service.SSHService):
         channel.closed().
         MAKE SURE YOU CALL THIS METHOD, even if you subclass L{SSHConnection}.
         If you don't, things will break mysteriously.
+
+        @type channel: L{SSHChannel}
         """
         if channel in self.channelsToRemoteChannel: # actually open
             channel.localClosed = channel.remoteClosed = True
             del self.localToRemoteChannel[channel.id]
             del self.channels[channel.id]
             del self.channelsToRemoteChannel[channel]
-            self.deferreds[channel.id] = []
+            for d in self.deferreds.setdefault(channel.id, []):
+                d.errback(error.ConchError("Channel closed."))
+            del self.deferreds[channel.id][:]
             log.callWithLogger(channel, channel.closed)
 
 MSG_GLOBAL_REQUEST = 80
diff --git a/twisted/conch/test/test_connection.py b/twisted/conch/test/test_connection.py
index 22f38c2..b40f026 100644
--- a/twisted/conch/test/test_connection.py
+++ b/twisted/conch/test/test_connection.py
@@ -485,6 +485,8 @@ class ConnectionTestCase(unittest.TestCase):
         Test that global request messages are sent in the right format.
         """
         d = self.conn.sendGlobalRequest('wantReply', 'data', True)
+        # must be added to prevent errbacking during teardown
+        d.addErrback(lambda failure: None)
         self.conn.sendGlobalRequest('noReply', '', False)
         self.assertEquals(self.transport.packets,
                 [(connection.MSG_GLOBAL_REQUEST, common.NS('wantReply') +
@@ -512,6 +514,8 @@ class ConnectionTestCase(unittest.TestCase):
         channel = TestChannel()
         self._openChannel(channel)
         d = self.conn.sendRequest(channel, 'test', 'test', True)
+        # needed to prevent errbacks during teardown.
+        d.addErrback(lambda failure: None)
         self.conn.sendRequest(channel, 'test2', '', False)
         channel.localClosed = True # emulate sending a close message
         self.conn.sendRequest(channel, 'test3', '', True)
@@ -520,7 +524,7 @@ class ConnectionTestCase(unittest.TestCase):
                     common.NS('test') + '\x01test'),
                  (connection.MSG_CHANNEL_REQUEST, '\x00\x00\x00\xff' +
                      common.NS('test2') + '\x00')])
-        self.assertEquals(self.conn.deferreds, {0:[d]})
+        self.assertEquals(self.conn.deferreds[0], [d])
 
     def test_adjustWindow(self):
         """
@@ -621,3 +625,46 @@ class ConnectionTestCase(unittest.TestCase):
         self.assertEquals(self.conn.gotGlobalRequest('Test-Data', 'data'),
                 (True, 'data'))
         self.assertFalse(self.conn.gotGlobalRequest('BadGlobal', 'data'))
+
+    def test_channelClosedCausesLeftoverChannelDeferredsToErrback(self):
+        """
+        """
+
+        channel = TestChannel()
+        self._openChannel(channel)
+
+        d = self.conn.sendRequest(channel, "dummyrequest", "dummydata",
+                wantReply=1)
+        d.addCallbacks(lambda result: self.fail("Should have errbacked"),
+                lambda failure: failure.trap(error.ConchError))
+
+        self.conn.channelClosed(channel)
+
+        return d
+
+class TestCleanConnectionShutdown(unittest.TestCase):
+    if test_userauth.transport is None:
+        skip = "Cannot run without PyCrypto nor pyasn1"
+
+    def setUp(self):
+        self.transport = test_userauth.FakeTransport(None)
+        self.transport.avatar = TestAvatar()
+        self.conn = TestConnection()
+        self.conn.transport = self.transport
+
+    def test_serviceStoppedCausesLeftoverGlobalDeferredsToErrback(self):
+        """
+        Tests that once the service is stopped any leftover deferred in any
+        channel actually gets errbacked.
+        """
+        self.conn.serviceStarted()
+
+        d = self.conn.sendGlobalRequest("dummyrequest", "dummydata",
+                wantReply=1)
+        d.addCallbacks(lambda result: self.fail("Should have errbacked"),
+                lambda failure: failure.trap(error.ConchError))
+
+        self.conn.serviceStopped()
+        return d
+
+
diff --git a/twisted/conch/test/test_ssh.py b/twisted/conch/test/test_ssh.py
index c165870..6b39389 100644
--- a/twisted/conch/test/test_ssh.py
+++ b/twisted/conch/test/test_ssh.py
@@ -457,10 +457,10 @@ if Crypto is not None and pyasn1 is not None:
             log.msg('opened false')
 
         def _cbRequestWorked(self, ignored):
-            pass
+            unittest.fail('False channel should never callback.')
 
         def _ebRequestFailed(self, reason):
-            unittest.fail('false exec failed: %s' % reason)
+            pass
 
         def dataReceived(self, data):
             unittest.fail('got data when using false')
diff --git a/twisted/conch/topfiles/4483.bugfix b/twisted/conch/topfiles/4483.bugfix
new file mode 100644
index 0000000..0d664f9
--- /dev/null
+++ b/twisted/conch/topfiles/4483.bugfix
@@ -0,0 +1 @@
+twisted.conch.ssh.connection.SSHConnection now errbacks leftover request deferreds on connection shutdown.
