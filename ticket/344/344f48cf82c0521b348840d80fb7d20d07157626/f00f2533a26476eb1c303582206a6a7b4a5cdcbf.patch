Index: twisted/test/test_randbytes.py
===================================================================
--- twisted/test/test_randbytes.py	(revision 34050)
+++ twisted/test/test_randbytes.py	(working copy)
@@ -76,26 +76,12 @@
         """
         self._check(self.factory._osUrandom)
 
-
-    def test_fileUrandom(self):
-        """
-        L{RandomFactory._fileUrandom} should work as a random source whenever
-        C{/dev/urandom} is available.
-        """
-        try:
-            self._check(self.factory._fileUrandom)
-        except randbytes.SourceNotAvailable:
-            # The test should only fail in /dev/urandom doesn't exist
-            self.assertFalse(os.path.exists('/dev/urandom'))
-
-
     def test_withoutAnything(self):
         """
         Remove all secure sources and assert it raises a failure. Then try the
         fallback parameter.
         """
         self.factory._osUrandom = self.errorFactory
-        self.factory._fileUrandom = self.errorFactory
         self.assertRaises(randbytes.SecureRandomNotAvailable,
                           self.factory.secureRandom, 18)
         def wrapper():
Index: twisted/python/randbytes.py
===================================================================
--- twisted/python/randbytes.py	(revision 34050)
+++ twisted/python/randbytes.py	(working copy)
@@ -38,7 +38,11 @@
         available.
     @type randomSources: C{tuple}
     """
-    randomSources = ('/dev/urandom',)
+
+    # For the _fileUrandom method has been removed,
+    # This variable is no longer used , and will eventually be removed.
+    randomSources = ()
+
     getrandbits = getrandbits
 
 
@@ -52,26 +56,6 @@
             raise SourceNotAvailable(e)
 
 
-    def _fileUrandom(self, nbytes):
-        """
-        Wrapper around random file sources.
-
-        This method isn't meant to be call out of the class and could be
-        removed arbitrarily.
-        """
-        for src in self.randomSources:
-            try:
-                f = file(src, 'rb')
-            except (IOError, OSError):
-                pass
-            else:
-                bytes = f.read(nbytes)
-                f.close()
-                return bytes
-        raise SourceNotAvailable("File sources not available: %s" %
-                                 (self.randomSources,))
-
-
     def secureRandom(self, nbytes, fallback=False):
         """
         Return a number of secure random bytes.
@@ -85,11 +69,12 @@
         @return: a string of random bytes.
         @rtype: C{str}
         """
-        for src in ("_osUrandom", "_fileUrandom"):
-            try:
-                return getattr(self, src)(nbytes)
-            except SourceNotAvailable:
-                pass
+
+        try:
+            return self._osUrandom(nbytes)
+        except SourceNotAvailable:
+            pass
+
         if fallback:
             warnings.warn(
                 "urandom unavailable - "
Index: twisted/topfiles/4530.removal
===================================================================
--- twisted/topfiles/4530.removal	(revision 0)
+++ twisted/topfiles/4530.removal	(revision 0)
@@ -0,0 +1 @@
+Removed the deprecated _fileUrandom methods from twisted.python.randbytes.RandomFactory .
