Index: twisted/web/http.py
===================================================================
--- twisted/web/http.py	(revision 24566)
+++ twisted/web/http.py	(working copy)
@@ -1141,6 +1141,9 @@
 
     maxHeaders = 500 # max number of headers allowed per request
 
+    chunked = 0
+    chunk_buffer = ''
+
     length = 0
     persistent = 1
     __header = ''
@@ -1195,7 +1198,7 @@
                 self.headerReceived(self.__header)
             self.__header = ''
             self.allHeadersReceived()
-            if self.length == 0:
+            if self.length == 0 and not self.chunked:
                 self.allContentReceived()
             else:
                 self.setRawMode()
@@ -1220,6 +1223,12 @@
         data = data.strip()
         if header == 'content-length':
             self.length = int(data)
+        elif header == 'transfer-encoding' and data.lower() == 'chunked':
+            self.chunked = 1
+            # We set the length here at a large number so that request
+            # makes a temporary file.  It's an ugly hack, to be sure.
+            # TODO: Find a better solution
+            self.length = 100000
         reqHeaders = self.requests[-1].requestHeaders
 
         values = reqHeaders.getRawHeaders(header)
@@ -1245,6 +1254,8 @@
         self._header = ''
         self._receivedHeaderCount = 0
         self.__first_line = 1
+        self.chunked = 0
+        self.chunk_buffer = ''
         del self._command, self._path, self._version
 
         # Disable the idle timeout, in case this request takes a long
@@ -1256,7 +1267,24 @@
         req.requestReceived(command, path, version)
 
     def rawDataReceived(self, data):
-        if len(data) < self.length:
+        if self.chunked:
+            data = self.chunk_buffer + data
+            while True:
+                try:
+                    chunk, data = fromChunk(data)
+                except ValueError, e:
+                    # No more parseable chunks right now
+                    break
+                else:
+                    if chunk:
+                        # Everything's normal.  Just write a chunk.
+                        self.requests[-1].handleContentChunk(chunk)
+                    else:
+                        # Chunk stream finished
+                        self.allContentReceived()
+                        self.setLineMode(data)
+            self.chunk_buffer = data
+        elif len(data) < self.length:
             self.requests[-1].handleContentChunk(data)
             self.length = self.length - len(data)
         else:
Index: twisted/web/test/test_http.py
===================================================================
--- twisted/web/test/test_http.py	(revision 24566)
+++ twisted/web/test/test_http.py	(working copy)
@@ -537,6 +537,32 @@
 '''
         self.runRequest(req, http.Request, success=False)
 
+    def testChunkedEncoding(self):
+        httpRequest = '''\
+GET / HTTP/1.0
+Content-Type: text/plain
+Transfer-Encoding: chunked
+
+7
+Hello, 
+13
+spam,eggs spam spam
+0
+
+'''
+
+        testcase = self
+        class MyRequest(http.Request):
+            def process(self):
+                content = self.content.read()
+                testcase.assertEqual(self.method, 'GET')
+                testcase.assertEqual(self.path, '/')
+                testcase.assertEqual(content, 'Hello, spam,eggs spam spam')
+                testcase.didRequest = 1
+                self.finish()
+
+        self.runRequest(httpRequest, MyRequest)
+
 class QueryArgumentsTestCase(unittest.TestCase):
     def testUnquote(self):
         try:
