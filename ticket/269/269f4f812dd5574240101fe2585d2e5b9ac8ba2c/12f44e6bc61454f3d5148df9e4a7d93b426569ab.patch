diff --git a/twisted/conch/ssh/filetransfer.py b/twisted/conch/ssh/filetransfer.py
index 81a86fd..9b11db0 100644
--- a/twisted/conch/ssh/filetransfer.py
+++ b/twisted/conch/ssh/filetransfer.py
@@ -708,8 +708,15 @@ class FileTransferClient(FileTransferBase):
         d, data = self._parseRequest(data)
         code, = struct.unpack('!L', data[:4])
         data = data[4:]
-        msg, data = getNS(data)
-        lang = getNS(data)
+        if len(data) >= 4:
+            msg, data = getNS(data)
+            if len(data) >= 4:
+                lang, data = getNS(data)
+            else:
+                lang = ''
+        else:
+            msg = ''
+            lang = ''
         if code == FX_OK:
             d.callback((msg, lang))
         elif code == FX_EOF:
diff --git a/twisted/conch/test/test_filetransfer.py b/twisted/conch/test/test_filetransfer.py
index da70a3d..9302c49 100644
--- a/twisted/conch/test/test_filetransfer.py
+++ b/twisted/conch/test/test_filetransfer.py
@@ -675,3 +675,29 @@ class TestConstants(unittest.TestCase):
             len(constants) > 0, "No constants found (the test must be buggy).")
         for k, v in constants.items():
             self.assertEqual(v, getattr(filetransfer, k))
+
+class TestRawPacketData(unittest.TestCase):
+    def setUp(self):
+        self.ftc = filetransfer.FileTransferClient()
+
+    def testPacketSTATUS(self):
+        d = defer.Deferred()
+        d.addCallback(self._cbTestPacketSTATUS)
+        self.ftc.openRequests[1] = d
+        data = struct.pack('!LL', 1, filetransfer.FX_OK) + common.NS('msg') + common.NS('lang')
+        self.ftc.packet_STATUS(data)
+
+    def _cbTestPacketSTATUS(self, result):
+        self.assertEqual(result[0], 'msg')
+        self.assertEqual(result[1], 'lang')
+
+    def testPacketSTATUSShort(self):
+        d = defer.Deferred()
+        d.addCallback(self._cbTestPacketSTATUSShort)
+        self.ftc.openRequests[1] = d
+        data = struct.pack('!LL', 1, filetransfer.FX_OK)
+        self.ftc.packet_STATUS(data)
+
+    def _cbTestPacketSTATUSShort(self, result):
+        self.assertEqual(result[0], '')
+        self.assertEqual(result[1], '')
