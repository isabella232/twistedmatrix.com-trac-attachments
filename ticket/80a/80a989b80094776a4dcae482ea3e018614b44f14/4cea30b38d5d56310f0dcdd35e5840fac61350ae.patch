=== modified file 'twisted/python/log.py'
--- twisted/python/log.py	2011-08-14 00:01:36 +0000
+++ twisted/python/log.py	2012-05-30 13:45:12 +0000
@@ -173,52 +173,6 @@
     _ignoreErrors = []
 
 
-def err(_stuff=None, _why=None, **kw):
-    """
-    Write a failure to the log.
-
-    The C{_stuff} and C{_why} parameters use an underscore prefix to lessen
-    the chance of colliding with a keyword argument the application wishes
-    to pass.  It is intended that they be supplied with arguments passed
-    positionally, not by keyword.
-
-    @param _stuff: The failure to log.  If C{_stuff} is C{None} a new
-        L{Failure} will be created from the current exception state.  If
-        C{_stuff} is an C{Exception} instance it will be wrapped in a
-        L{Failure}.
-    @type _stuff: C{NoneType}, C{Exception}, or L{Failure}.
-
-    @param _why: The source of this failure.  This will be logged along with
-        C{_stuff} and should describe the context in which the failure
-        occurred.
-    @type _why: C{str}
-    """
-    if _stuff is None:
-        _stuff = failure.Failure()
-    if isinstance(_stuff, failure.Failure):
-        if _keepErrors:
-            if _ignoreErrors:
-                keep = 0
-                for err in _ignoreErrors:
-                    r = _stuff.check(err)
-                    if r:
-                        keep = 0
-                        break
-                    else:
-                        keep = 1
-                if keep:
-                    _keptErrors.append(_stuff)
-            else:
-                _keptErrors.append(_stuff)
-        msg(failure=_stuff, why=_why, isError=1, **kw)
-    elif isinstance(_stuff, Exception):
-        msg(failure=failure.Failure(_stuff), why=_why, isError=1, **kw)
-    else:
-        msg(repr(_stuff), why=_why, isError=1, **kw)
-
-deferr = err
-
-
 class Logger:
     """
     This represents a class which may 'own' a log. Used by subclassing.
@@ -301,6 +255,51 @@
                 self.observers[i] = observer
 
 
+    def err(self, _stuff=None, _why=None, **kw):
+        """
+        Write a failure to the log.
+
+        The C{_stuff} and C{_why} parameters use an underscore prefix to lessen
+        the chance of colliding with a keyword argument the application wishes
+        to pass.  It is intended that they be supplied with arguments passed
+        positionally, not by keyword.
+
+        @param _stuff: The failure to log.  If C{_stuff} is C{None} a new
+            L{Failure} will be created from the current exception state.  If
+            C{_stuff} is an C{Exception} instance it will be wrapped in a
+            L{Failure}.
+        @type _stuff: C{NoneType}, C{Exception}, or L{Failure}.
+
+        @param _why: The source of this failure.  This will be logged along with
+            C{_stuff} and should describe the context in which the failure
+            occurred.
+        @type _why: C{str}
+        """
+
+        if _stuff is None:
+            _stuff = failure.Failure()
+        if isinstance(_stuff, failure.Failure):
+            if _keepErrors:
+                if _ignoreErrors:
+                    keep = 0
+                    for err in _ignoreErrors:
+                        r = _stuff.check(err)
+                        if r:
+                            keep = 0
+                            break
+                        else:
+                            keep = 1
+                    if keep:
+                        _keptErrors.append(_stuff)
+                else:
+                    _keptErrors.append(_stuff)
+            self.msg(failure=_stuff, why=_why, isError=1, **kw)
+        elif isinstance(_stuff, Exception):
+            self.msg(failure=failure.Failure(_stuff), why=_why, isError=1, **kw)
+        else:
+            self.msg(repr(_stuff), why=_why, isError=1, **kw)
+
+
     def _err(self, failure, why):
         """
         Log a failure.
@@ -348,6 +347,8 @@
     addObserver = theLogPublisher.addObserver
     removeObserver = theLogPublisher.removeObserver
     msg = theLogPublisher.msg
+    err = theLogPublisher.err
+    deferr = theLogPublisher.err
     showwarning = theLogPublisher.showwarning
 
=== modified file 'twisted/test/test_log.py'
--- twisted/test/test_log.py	2012-04-08 13:17:05 +0000
+++ twisted/test/test_log.py	2012-05-30 13:45:12 +0000
@@ -329,6 +329,13 @@
         self.assertIn('UnicodeEncodeError', self.out[0])
 
 
+    def testErrors(self):
+        for e, ig in [("hello world","hello world"),
+                      (KeyError(), KeyError),
+                      (failure.Failure(RuntimeError()), RuntimeError)]:
+            self.lp.err(e)
+            self.assertIn("hello world", self.out[0])
+
 
 class FileObserverTestCase(LogPublisherTestCaseMixin, unittest.TestCase):
     def test_getTimezoneOffset(self):
@@ -504,7 +511,7 @@
         self.assertIn("Hello!", fakeFile.getvalue())
         self.assertIsInstance(sys.stdout, log.StdioOnnaStick)
         self.assertEqual(sys.stdout.isError, False)
-        self.assertEqual(sys.stdout.encoding, 
+        self.assertEqual(sys.stdout.encoding,
                          origStdout.encoding or sys.getdefaultencoding())
         self.assertIsInstance(sys.stderr, log.StdioOnnaStick)
         self.assertEqual(sys.stderr.isError, True)
