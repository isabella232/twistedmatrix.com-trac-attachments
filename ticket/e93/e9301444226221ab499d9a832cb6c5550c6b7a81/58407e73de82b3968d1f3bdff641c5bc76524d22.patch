Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 34978)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -2450,7 +2450,35 @@
             ).addCallback(test)
 
 
+    def test_IMAP4ClientContinueAuthCallbackWithBinasciiError(self):
+        """
+        When there is something wrong with the C{base64.decodestring}
+        call in L{IMAP4Client.__cbContinueAuth}, the client should log
+        the L{IllegalServerResponse} error and then disconnect the
+        transport.
+        """
+        transport = StringTransportWithDisconnection()
+        protocol = imap4.IMAP4Client()
+        transport.protocol = protocol
 
+        protocol.makeConnection(transport)
+        protocol.lineReceived('* OK [CAPABILITY IMAP4rev1 IDLE NAMESPACE AUTH=CRAM-MD5] Twisted IMAP4rev1 Ready')
+        cAuth = imap4.CramMD5ClientAuthenticator('testuser')
+        protocol.registerAuthenticator(cAuth)
+
+        def _ebCatchLogerr(error):
+            return None
+
+        d = protocol.authenticate('secret')
+        d.addErrback(_ebCatchLogerr)
+        protocol.dataReceived('+ Something bad! and bad\r\n')
+        logged = self.flushLoggedErrors(imap4.IllegalServerResponse)
+        self.assertEqual(len(logged), 1)
+        self.assertEqual(logged[0].value.args[0], "Something bad! and bad")
+        return d
+
+
+
 class PreauthIMAP4ClientMixin:
     """
     Mixin for L{unittest.TestCase} subclasses which provides a C{setUp} method
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 34978)
+++ twisted/mail/imap4.py	(working copy)
@@ -2679,7 +2679,6 @@
         except binascii.Error:
             self.sendLine('*')
             raise IllegalServerResponse(rest)
-            self.transport.loseConnection()
         else:
             auth = self.authenticators[scheme]
             chal = auth.challengeResponse(secret, chal)
