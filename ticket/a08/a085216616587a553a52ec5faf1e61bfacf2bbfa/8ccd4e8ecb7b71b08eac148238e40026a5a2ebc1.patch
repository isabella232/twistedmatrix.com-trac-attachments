diff -ur Twisted-1.3.0/twisted/protocols/msn.py Twisted-New/twisted/protocols/msn.py
--- Twisted-1.3.0/twisted/protocols/msn.py	2003-12-02 23:59:21.000000000 +1100
+++ Twisted-New/twisted/protocols/msn.py	2004-09-05 17:53:04.000000000 +1000
@@ -603,6 +603,7 @@
                 self.setRawMode()
                 if self.currentMessage.readPos == self.currentMessage.length: self.rawDataReceived("") # :(
                 return
+            if self.currentMessage.userHandle == "NOTIFICATION": return
             try:
                 header, value = line.split(':')
             except ValueError:
@@ -641,7 +642,7 @@
         elif diff == 0:
             self.currentMessage.message += data
         else:
-            self.currentMessage += data
+            self.currentMessage.message += data
             return
         del self.currentMessage.readPos
         m = self.currentMessage
@@ -1014,12 +1015,21 @@
         self.gotSwitchboardInvitation(int(params[0]), host, port, params[3], params[4],
                                       unquote(params[5]))
 
+    def handle_NOT(self, params):
+        checkParamLen(len(params), 1, 'NOT')
+        try:
+            messageLen = int(params[0])
+        except ValueError: raise MSNProtocolError, "Invalid Parameter for NOT length argument"
+        self.currentMessage = MSNMessage(length=messageLen, userHandle="NOTIFICATION", screenName="NOTIFICATION")
+
+
     def handle_OUT(self, params):
         checkParamLen(len(params), 1, 'OUT')
         if params[0] == "OTH": self.multipleLogin()
         elif params[0] == "SSD": self.serverGoingDown()
         else: raise MSNProtocolError, "Invalid Parameters received for OUT" # debug
 
+
     # callbacks
 
     def loggedIn(self, userHandle, screenName, verified):
@@ -1082,26 +1092,37 @@
     def gotContactStatus(self, statusCode, userHandle, screenName):
         """
         Called after loggin in when the server sends status of online contacts.
-        By default we will update the status attribute of the contact stored
-        on the factory.
+        By default we will update the status attribute and screenName of the 
+        contact stored on the factory.
 
         @param statusCode: 3-letter status code
         @param userHandle: the contact's user handle (passport)
         @param screenName: the contact's screen name
         """
-        self.factory.contacts.getContact(userHandle).status = statusCode
+        msnContact = self.factory.contacts.getContact(userHandle)
+        if(not msnContact):
+            msnContact = MSNContact()
+            msnContact.addToList(FORWARD_LIST)
+            self.factory.contacts.addContact(msnContact)
+        msnContact.status = statusCode
+        msnContact.screenName = screenName
 
     def contactStatusChanged(self, statusCode, userHandle, screenName):
         """
         Called when we're notified that a contact's status has changed.
-        By default we will update the status attribute of the contact
-        stored on the factory.
+        By default we will update the status attribute and screenName 
+        of the contact stored on the factory.
 
         @param statusCode: 3-letter status code
         @param userHandle: the contact's user handle (passport)
         @param screenName: the contact's screen name
         """
-        self.factory.contacts.getContact(userHandle).status = statusCode
+        msnContact = self.factory.contacts.getContact(userHandle)
+        if(not msnContact):
+            msnContact = msn.MSNContact()
+            self.factory.contacts.addContact(msnContact)
+        msnContact.status = statusCode
+        msnContact.screenName = screenName
 
     def contactOffline(self, userHandle):
         """
@@ -1111,7 +1132,9 @@
 
         @param userHandle: the contact's user handle
         """
-        self.factory.contacts.getContact(userHandle).status = STATUS_OFFLINE
+        msnContact = self.factory.contacts.getContact(userHandle)
+        if(msnContact):
+            msnContact.status = msn.STATUS_OFFLINE
 
     def gotPhoneNumber(self, listVersion, userHandle, phoneType, number):
         """
@@ -1659,7 +1682,6 @@
 
     def connectionMade(self):
         MSNEventBase.connectionMade(self)
-        print 'sending initial stuff'
         self._sendInit()
 
     def connectionLost(self, reason):
diff -ur Twisted-1.3.0/twisted/test/test_msn.py Twisted-New/twisted/test/test_msn.py
--- Twisted-1.3.0/twisted/test/test_msn.py	2003-11-18 02:41:50.000000000 +1100
+++ Twisted-New/twisted/test/test_msn.py	2004-09-05 18:32:46.380780000 +1000
@@ -256,6 +256,19 @@
         self.client.lineReceived("RNG 1234 192.168.1.1:1863 CKI 123.456 foo@foo.com Screen%20Name")
         self.failUnless(self.client.state == "SBINVITED")
 
+    def testNotificationMessage(self):
+        m = "NOT 570\r\n<NOTIFICATION ver=\"1\" siteid=\"111100200\" siteurl=\"http://calendar.msn.com\" id=\"1\">\r\n<TO pid=\"0x00060000:0x81ee5a43\" name=\"example@passport.com\" />\r\n<MSG pri=\"\" id=\"1\">\r\n<ACTION url=\"/calendar/isapi.dll?request=action&operation=modify&objectID=1&uicode1=modifyreminder&locale=2052\"/>\r\n<SUBSCR url=\"/calendar/isapi.dll?request=action&operation=modify&objectID=1&uicode1=modifyreminder&locale=2052\"/><CAT id=\"111100201\" />\r\n<BODY lang=\"2052\" icon=\"/En/img/calendar.png\">\r\n<TEXT>goto club 7. 2002 21:15 - 22:15 </TEXT>\r\n</BODY>\r\n</MSG>\r\n</NOTIFICATION>\r\n"
+        passed = False
+        error = ''
+        try:
+            map(self.client.lineReceived, m.split('\r\n')[:-1])
+            passed = True
+        except msn.MSNProtocolError, err:
+            passed = False
+            error = err
+        self.failUnless(passed, message='Failed to handle NOT message (MSN Alerts) - ' + error)
+
+
 class MessageHandlingTests(unittest.TestCase):
     """ testing various message handling methods from SwichboardClient """
 
