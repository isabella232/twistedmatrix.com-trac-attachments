Index: twisted/internet/inotify.py
===================================================================
--- twisted/internet/inotify.py	(revision 31724)
+++ twisted/internet/inotify.py	(working copy)
@@ -131,12 +131,12 @@
         self.callbacks = callbacks
 
 
-    def _notify(self, filepath, events):
+    def _notify(self, filepath, events, cookie=0):
         """
         Callback function used by L{INotify} to dispatch an event.
         """
         for callback in self.callbacks:
-            callback(self, filepath, events)
+            callback(self, filepath, events, cookie)
 
 
 
@@ -261,7 +261,7 @@
             path = iwp.path
             if name:
                 path = path.child(name)
-            iwp._notify(path, mask)
+            iwp._notify(path, mask, cookie)
 
             if (iwp.autoAdd and mask & IN_ISDIR and mask & IN_CREATE):
                 # mask & IN_ISDIR already guarantees that the path is a
Index: twisted/internet/test/test_inotify.py
===================================================================
--- twisted/internet/test/test_inotify.py	(revision 31724)
+++ twisted/internet/test/test_inotify.py	(working copy)
@@ -71,7 +71,7 @@
         if expectedPath is None:
             expectedPath = self.dirname.child("foo.bar")
         notified = defer.Deferred()
-        def cbNotified((watch, filename, events)):
+        def cbNotified((watch, filename, events, cookie)):
             self.assertEquals(filename, expectedPath)
             self.assertTrue(events & mask)
         notified.addCallback(cbNotified)
@@ -238,7 +238,7 @@
         L{inotify.INotify} when initialized with autoAdd==True adds
         also adds the created subdirectories to the watchlist.
         """
-        def _callback(wp, filename, mask):
+        def _callback(wp, filename, mask, cookie):
             # We are notified before we actually process new
             # directories, so we need to defer this check.
             def _():
@@ -265,7 +265,7 @@
         it's removed from the filesystem.
         """
         calls = []
-        def _callback(wp, filename, mask):
+        def _callback(wp, filename, mask, cookie):
             # We are notified before we actually process new
             # directories, so we need to defer this check.
             def _():
@@ -358,7 +358,7 @@
         L{inotify.INotify.watch} with autoAdd==False will stop inotify
         from watching subdirectories created under the watched one.
         """
-        def _callback(wp, fp, mask):
+        def _callback(wp, fp, mask, cookie):
             # We are notified before we actually process new
             # directories, so we need to defer this check.
             def _():
@@ -388,7 +388,7 @@
         expectedPath.touch()
 
         notified = defer.Deferred()
-        def cbNotified((ignored, filename, events)):
+        def cbNotified((ignored, filename, events, cookie)):
             self.assertEquals(filename, expectedPath)
             self.assertTrue(events & inotify.IN_DELETE_SELF)
 
@@ -424,7 +424,7 @@
         expectedPath2.touch()
 
         notified = defer.Deferred()
-        def cbNotified((ignored, filename, events)):
+        def cbNotified((ignored, filename, events, cookie)):
             self.assertEquals(filename, expectedPath2)
             self.assertTrue(events & inotify.IN_DELETE_SELF)
 
@@ -469,7 +469,7 @@
         we may generate duplicate events.
         """
         calls = set()
-        def _callback(wp, filename, mask):
+        def _callback(wp, filename, mask, cookie):
             calls.add(filename)
             if len(calls) == 6:
                 try:
