Index: twisted/words/topfiles/7622.misc
===================================================================
Index: twisted/words/test/test_jabberjstrports.py
===================================================================
--- twisted/words/test/test_jabberjstrports.py	(revision 43485)
+++ twisted/words/test/test_jabberjstrports.py	(working copy)
@@ -11,7 +11,7 @@
 from twisted.application.internet import TCPClient
 
 
-class JabberStrPortsPlaceHolderTest(unittest.TestCase):
+class JabberStrPortsPlaceHolderTests(unittest.TestCase):
     """
     Tests for L{jstrports}
     """
Index: twisted/words/test/test_jabbersaslmechanisms.py
===================================================================
--- twisted/words/test/test_jabbersaslmechanisms.py	(revision 43485)
+++ twisted/words/test/test_jabbersaslmechanisms.py	(working copy)
@@ -9,7 +9,7 @@
 
 from twisted.words.protocols.jabber import sasl_mechanisms
 
-class PlainTest(unittest.TestCase):
+class PlainTests(unittest.TestCase):
     def test_getInitialResponse(self):
         """
         Test the initial response.
@@ -19,7 +19,7 @@
 
 
 
-class AnonymousTest(unittest.TestCase):
+class AnonymousTests(unittest.TestCase):
     """
     Tests for L{twisted.words.protocols.jabber.sasl_mechanisms.Anonymous}.
     """
@@ -32,7 +32,7 @@
 
 
 
-class DigestMD5Test(unittest.TestCase):
+class DigestMD5Tests(unittest.TestCase):
     def setUp(self):
         self.mechanism = sasl_mechanisms.DigestMD5(
             u'xmpp', u'example.org', None, u'test', u'secret')
Index: twisted/words/test/test_jabberxmlstream.py
===================================================================
--- twisted/words/test/test_jabberxmlstream.py	(revision 43485)
+++ twisted/words/test/test_jabberxmlstream.py	(working copy)
@@ -24,7 +24,7 @@
 
 
 
-class HashPasswordTest(unittest.TestCase):
+class HashPasswordTests(unittest.TestCase):
     """
     Tests for L{xmlstream.hashPassword}.
     """
@@ -62,7 +62,7 @@
 
 
 
-class IQTest(unittest.TestCase):
+class IQTests(unittest.TestCase):
     """
     Tests both IQ and the associated IIQResponseTracker callback.
     """
@@ -228,7 +228,7 @@
 
 
 
-class XmlStreamTest(unittest.TestCase):
+class XmlStreamTests(unittest.TestCase):
 
     def onStreamStart(self, obj):
         self.gotStreamStart = True
@@ -467,7 +467,7 @@
 
 
 
-class AuthenticatorTest(unittest.TestCase):
+class AuthenticatorTests(unittest.TestCase):
     def setUp(self):
         self.authenticator = xmlstream.Authenticator()
         self.xmlstream = xmlstream.XmlStream(self.authenticator)
@@ -531,7 +531,7 @@
 
 
 
-class ConnectAuthenticatorTest(unittest.TestCase):
+class ConnectAuthenticatorTests(unittest.TestCase):
 
     def setUp(self):
         self.gotAuthenticated = False
@@ -610,7 +610,7 @@
 
 
 
-class ListenAuthenticatorTest(unittest.TestCase):
+class ListenAuthenticatorTests(unittest.TestCase):
     """
     Tests for L{xmlstream.ListenAuthenticator}
     """
@@ -654,7 +654,7 @@
 
 
 
-class TLSInitiatingInitializerTest(unittest.TestCase):
+class TLSInitiatingInitializerTests(unittest.TestCase):
     def setUp(self):
         self.output = []
         self.done = []
@@ -779,7 +779,7 @@
 
 
 
-class BaseFeatureInitiatingInitializerTest(unittest.TestCase):
+class BaseFeatureInitiatingInitializerTests(unittest.TestCase):
 
     def setUp(self):
         self.xmlstream = xmlstream.XmlStream(xmlstream.Authenticator())
@@ -814,7 +814,7 @@
 
 
 
-class ToResponseTest(unittest.TestCase):
+class ToResponseTests(unittest.TestCase):
 
     def test_toResponse(self):
         """
@@ -940,7 +940,7 @@
 
 
 
-class XMPPHandlerTest(unittest.TestCase):
+class XMPPHandlerTests(unittest.TestCase):
     """
     Tests for L{xmlstream.XMPPHandler}.
     """
@@ -996,7 +996,7 @@
 
 
 
-class XMPPHandlerCollectionTest(unittest.TestCase):
+class XMPPHandlerCollectionTests(unittest.TestCase):
     """
     Tests for L{xmlstream.XMPPHandlerCollection}.
     """
@@ -1034,7 +1034,7 @@
 
 
 
-class StreamManagerTest(unittest.TestCase):
+class StreamManagerTests(unittest.TestCase):
     """
     Tests for L{xmlstream.StreamManager}.
     """
@@ -1271,7 +1271,7 @@
 
 
 
-class XmlStreamServerFactoryTest(GenericXmlStreamFactoryTestsMixin):
+class XmlStreamServerFactoryTests(GenericXmlStreamFactoryTestsMixin):
     """
     Tests for L{xmlstream.XmlStreamServerFactory}.
     """
Index: twisted/words/test/test_domish.py
===================================================================
--- twisted/words/test/test_domish.py	(revision 43485)
+++ twisted/words/test/test_domish.py	(working copy)
@@ -10,7 +10,7 @@
 from twisted.words.xish import domish
 
 
-class DomishTestCase(unittest.TestCase):
+class DomishTests(unittest.TestCase):
     def testEscaping(self):
         s = "&<>'\""
         self.assertEqual(domish.escapeToXml(s), "&amp;&lt;&gt;'\"")
@@ -250,7 +250,7 @@
 
 
 
-class DomishExpatStreamTestCase(DomishStreamTestsMixin, unittest.TestCase):
+class DomishExpatStreamTests(DomishStreamTestsMixin, unittest.TestCase):
     """
     Tests for L{domish.ExpatElementStream}, the expat-based element stream
     implementation.
@@ -264,7 +264,7 @@
 
 
 
-class DomishSuxStreamTestCase(DomishStreamTestsMixin, unittest.TestCase):
+class DomishSuxStreamTests(DomishStreamTestsMixin, unittest.TestCase):
     """
     Tests for L{domish.SuxElementStream}, the L{twisted.web.sux}-based element
     stream implementation.
Index: twisted/words/test/test_xpath.py
===================================================================
--- twisted/words/test/test_xpath.py	(revision 43485)
+++ twisted/words/test/test_xpath.py	(working copy)
@@ -8,7 +8,7 @@
 from twisted.words.xish.xpath import XPathQuery
 from twisted.words.xish import xpath
 
-class XPathTest(unittest.TestCase):
+class XPathTests(unittest.TestCase):
     def setUp(self):
         # Build element:
         # <foo xmlns='testns' attrib1='value1' attrib3="user@host/resource">
Index: twisted/words/test/test_tap.py
===================================================================
--- twisted/words/test/test_tap.py	(revision 43485)
+++ twisted/words/test/test_tap.py	(working copy)
@@ -7,7 +7,7 @@
 
 
 
-class WordsTap(unittest.TestCase):
+class WordsTapTests(unittest.TestCase):
     """
     Ensures that the twisted.words.tap API works.
     """
Index: twisted/words/test/test_jabberclient.py
===================================================================
--- twisted/words/test/test_jabberclient.py	(revision 43485)
+++ twisted/words/test/test_jabberclient.py	(working copy)
@@ -19,7 +19,7 @@
 NS_SESSION = 'urn:ietf:params:xml:ns:xmpp-session'
 IQ_SESSION_SET = '/iq[@type="set"]/session[@xmlns="%s"]' % NS_SESSION
 
-class CheckVersionInitializerTest(unittest.TestCase):
+class CheckVersionInitializerTests(unittest.TestCase):
     def setUp(self):
         a = xmlstream.Authenticator()
         xs = xmlstream.XmlStream(a)
@@ -85,13 +85,13 @@
 
 
 
-class IQAuthInitializerTest(InitiatingInitializerHarness, unittest.TestCase):
+class IQAuthInitializerTests(InitiatingInitializerHarness, unittest.TestCase):
     """
     Tests for L{client.IQAuthInitializer}.
     """
 
     def setUp(self):
-        super(IQAuthInitializerTest, self).setUp()
+        super(IQAuthInitializerTests, self).setUp()
         self.init = client.IQAuthInitializer(self.xmlstream)
         self.authenticator.jid = jid.JID('user@example.com/resource')
         self.authenticator.password = 'secret'
@@ -289,13 +289,13 @@
 
 
 
-class BindInitializerTest(InitiatingInitializerHarness, unittest.TestCase):
+class BindInitializerTests(InitiatingInitializerHarness, unittest.TestCase):
     """
     Tests for L{client.BindInitializer}.
     """
 
     def setUp(self):
-        super(BindInitializerTest, self).setUp()
+        super(BindInitializerTests, self).setUp()
         self.init = client.BindInitializer(self.xmlstream)
         self.authenticator.jid = jid.JID('user@example.com/resource')
 
@@ -336,13 +336,13 @@
 
 
 
-class SessionInitializerTest(InitiatingInitializerHarness, unittest.TestCase):
+class SessionInitializerTests(InitiatingInitializerHarness, unittest.TestCase):
     """
     Tests for L{client.SessionInitializer}.
     """
 
     def setUp(self):
-        super(SessionInitializerTest, self).setUp()
+        super(SessionInitializerTests, self).setUp()
         self.init = client.SessionInitializer(self.xmlstream)
 
 
@@ -375,7 +375,7 @@
 
 
 
-class XMPPAuthenticatorTest(unittest.TestCase):
+class XMPPAuthenticatorTests(unittest.TestCase):
     """
     Test for both XMPPAuthenticator and XMPPClientFactory.
     """
Index: twisted/words/test/test_xmpproutertap.py
===================================================================
--- twisted/words/test/test_xmpproutertap.py	(revision 43485)
+++ twisted/words/test/test_xmpproutertap.py	(working copy)
@@ -10,7 +10,7 @@
 from twisted.words import xmpproutertap as tap
 from twisted.words.protocols.jabber import component
 
-class XMPPRouterTapTest(unittest.TestCase):
+class XMPPRouterTapTests(unittest.TestCase):
 
     def test_port(self):
         """
Index: twisted/words/test/test_irc_service.py
===================================================================
--- twisted/words/test/test_irc_service.py	(revision 43485)
+++ twisted/words/test/test_irc_service.py	(working copy)
@@ -11,7 +11,7 @@
 from twisted.words.protocols import irc
 from twisted.cred import checkers, portal
 
-class IRCUserTestCase(unittest.TestCase):
+class IRCUserTests(unittest.TestCase):
     """
     Isolated tests for L{IRCUser}
     """
@@ -149,7 +149,7 @@
 
 BADTEXT = '\xff'
 
-class IRCUserBadEncodingTestCase(unittest.TestCase):
+class IRCUserBadEncodingTests(unittest.TestCase):
     """
     Verifies that L{IRCUser} sends the correct error messages back to clients
     when given indecipherable bytes
Index: twisted/words/test/test_msn.py
===================================================================
--- twisted/words/test/test_msn.py	(revision 43485)
+++ twisted/words/test/test_msn.py	(working copy)
@@ -477,7 +477,7 @@
         if accept and ip == '192.168.0.1' and port == 6891 and aCookie == 4321: self.client.state = 'INFO'
 
 
-class FileTransferTestCase(unittest.TestCase):
+class FileTransferTests(unittest.TestCase):
     """
     test FileSend against FileReceive
     """
@@ -515,7 +515,7 @@
 
 if msn is None:
     for testClass in [DispatchTests, PassportTests, NotificationTests,
-                      MessageHandlingTests, FileTransferTestCase]:
+                      MessageHandlingTests, FileTransferTests]:
         testClass.skip = (
             "MSN requires an HTTP client but none is available, "
             "skipping tests.")
Index: twisted/words/test/test_jabbererror.py
===================================================================
--- twisted/words/test/test_jabbererror.py	(revision 43485)
+++ twisted/words/test/test_jabbererror.py	(working copy)
@@ -15,7 +15,7 @@
 NS_XMPP_STREAMS = 'urn:ietf:params:xml:ns:xmpp-streams'
 NS_XMPP_STANZAS = 'urn:ietf:params:xml:ns:xmpp-stanzas'
 
-class BaseErrorTest(unittest.TestCase):
+class BaseErrorTests(unittest.TestCase):
 
     def test_getElementPlain(self):
         """
@@ -56,7 +56,7 @@
         self.assertEqual(len(element.children), 2)
         self.assertEqual(element.myerror, ac)
 
-class StreamErrorTest(unittest.TestCase):
+class StreamErrorTests(unittest.TestCase):
 
     def test_getElementPlain(self):
         """
@@ -84,7 +84,7 @@
 
 
 
-class StanzaErrorTest(unittest.TestCase):
+class StanzaErrorTests(unittest.TestCase):
     """
     Tests for L{error.StreamError}.
     """
@@ -164,7 +164,7 @@
 
 
 
-class ParseErrorTest(unittest.TestCase):
+class ParseErrorTests(unittest.TestCase):
     """
     Tests for L{error._parseError}.
     """
@@ -248,7 +248,7 @@
 
 
 
-class ExceptionFromStanzaTest(unittest.TestCase):
+class ExceptionFromStanzaTests(unittest.TestCase):
 
     def test_basic(self):
         """
@@ -319,7 +319,7 @@
         self.assertEqual('Unable to resolve hostname.', result.text)
         self.assertEqual([p], result.children)
 
-class ExceptionFromStreamErrorTest(unittest.TestCase):
+class ExceptionFromStreamErrorTests(unittest.TestCase):
 
     def test_basic(self):
         """
Index: twisted/words/test/test_service.py
===================================================================
--- twisted/words/test/test_service.py	(revision 43485)
+++ twisted/words/test/test_service.py	(working copy)
@@ -17,7 +17,7 @@
 from twisted.internet.defer import Deferred, DeferredList, maybeDeferred, succeed
 from twisted.internet import address, defer, reactor
 
-class RealmTestCase(unittest.TestCase):
+class RealmTests(unittest.TestCase):
     def _entityCreationTest(self, kind):
         # Kind is "user" or "group"
         realm = service.InMemoryWordsRealm("realmname")
@@ -183,7 +183,7 @@
         self.protocol.dataReceived(stuff)
 
 
-class IRCProtocolTestCase(unittest.TestCase):
+class IRCProtocolTests(unittest.TestCase):
     STATIC_USERS = [
         u'useruser', u'otheruser', u'someguy', u'firstuser', u'username',
         u'userone', u'usertwo', u'userthree', u'someuser']
@@ -780,7 +780,7 @@
 pb.setUnjellyableForClass(TestMind, service.PBMindReference)
 
 
-class PBProtocolTestCase(unittest.TestCase):
+class PBProtocolTests(unittest.TestCase):
     def setUp(self):
         self.realm = service.InMemoryWordsRealm("realmname")
         self.checker = checkers.InMemoryUsernamePasswordDatabaseDontUse()
Index: twisted/words/test/test_jabbercomponent.py
===================================================================
--- twisted/words/test/test_jabbercomponent.py	(revision 43485)
+++ twisted/words/test/test_jabbercomponent.py	(working copy)
@@ -20,7 +20,7 @@
     def write(self, bytes):
         self.list.append(bytes)
 
-class ComponentInitiatingInitializerTest(unittest.TestCase):
+class ComponentInitiatingInitializerTests(unittest.TestCase):
     def setUp(self):
         self.output = []
 
@@ -59,7 +59,7 @@
 
         return d
 
-class ComponentAuthTest(unittest.TestCase):
+class ComponentAuthTests(unittest.TestCase):
     def authPassed(self, stream):
         self.authComplete = True
 
@@ -104,7 +104,7 @@
         self.transportConnectedFlag = True
 
 
-class TestJabberServiceManager(unittest.TestCase):
+class JabberServiceManagerTests(unittest.TestCase):
     def testSM(self):
         # Setup service manager and test harnes
         sm = component.ServiceManager("foo", "password")
@@ -139,7 +139,7 @@
 
 
 
-class RouterTest(unittest.TestCase):
+class RouterTests(unittest.TestCase):
     """
     Tests for L{component.Router}.
     """
@@ -206,7 +206,7 @@
 
 
 
-class ListenComponentAuthenticatorTest(unittest.TestCase):
+class ListenComponentAuthenticatorTests(unittest.TestCase):
     """
     Tests for L{component.ListenComponentAuthenticator}.
     """
@@ -352,7 +352,7 @@
 
 
 
-class XMPPComponentServerFactoryTest(unittest.TestCase):
+class XMPPComponentServerFactoryTests(unittest.TestCase):
     """
     Tests for L{component.XMPPComponentServerFactory}.
     """
Index: twisted/words/test/test_jabbersasl.py
===================================================================
--- twisted/words/test/test_jabbersasl.py	(revision 43485)
+++ twisted/words/test/test_jabbersasl.py	(working copy)
@@ -57,7 +57,7 @@
 
 
 
-class SASLInitiatingInitializerTest(unittest.TestCase):
+class SASLInitiatingInitializerTests(unittest.TestCase):
     """
     Tests for L{sasl.SASLInitiatingInitializer}
     """
@@ -185,7 +185,7 @@
         return d
 
 
-class SASLInitiatingInitializerSetMechanismTest(unittest.TestCase):
+class SASLInitiatingInitializerSetMechanismTests(unittest.TestCase):
     """
     Test for L{sasl.SASLInitiatingInitializer.setMechanism}.
     """
Index: twisted/words/test/test_jabberxmppstringprep.py
===================================================================
--- twisted/words/test/test_jabberxmppstringprep.py	(revision 43485)
+++ twisted/words/test/test_jabberxmppstringprep.py	(working copy)
@@ -8,7 +8,7 @@
 
 
 
-class DeprecationTestCase(unittest.TestCase):
+class DeprecationTests(unittest.TestCase):
     """
     Deprecations in L{twisted.words.protocols.jabber.xmpp_stringprep}.
     """
@@ -29,7 +29,7 @@
 
 
 
-class XMPPStringPrepTest(unittest.TestCase):
+class XMPPStringPrepTests(unittest.TestCase):
     """
     The nodeprep stringprep profile is similar to the resourceprep profile,
     but does an extra mapping of characters (table B.2) and disallows
Index: twisted/words/test/test_xishutil.py
===================================================================
--- twisted/words/test/test_xishutil.py	(revision 43485)
+++ twisted/words/test/test_xishutil.py	(working copy)
@@ -53,7 +53,7 @@
 
 
 
-class EventDispatcherTest(unittest.TestCase):
+class EventDispatcherTests(unittest.TestCase):
     """
     Tests for L{EventDispatcher}.
     """
@@ -308,7 +308,7 @@
 
 
 
-class XmlPipeTest(unittest.TestCase):
+class XmlPipeTests(unittest.TestCase):
     """
     Tests for L{twisted.words.xish.utility.XmlPipe}.
     """
Index: twisted/words/test/test_jabberjid.py
===================================================================
--- twisted/words/test/test_jabberjid.py	(revision 43485)
+++ twisted/words/test/test_jabberjid.py	(working copy)
@@ -9,7 +9,7 @@
 
 from twisted.words.protocols.jabber import jid
 
-class JIDParsingTest(unittest.TestCase):
+class JIDParsingTests(unittest.TestCase):
     def test_parse(self):
         """
         Test different forms of JIDs.
@@ -88,7 +88,7 @@
         self.assertNotEquals(jid.prep("user", "host", "Resource"),
                              ("user", "host", "resource"))
 
-class JIDTest(unittest.TestCase):
+class JIDTests(unittest.TestCase):
 
     def test_noneArguments(self):
         """
@@ -215,7 +215,7 @@
         j = jid.JID(tuple=('user', 'host', 'resource'))
         self.assertEqual("JID(u'user@host/resource')", repr(j))
 
-class InternJIDTest(unittest.TestCase):
+class InternJIDTests(unittest.TestCase):
     def test_identity(self):
         """
         Test that two interned JIDs yield the same object.
Index: twisted/words/test/test_xmlstream.py
===================================================================
--- twisted/words/test/test_xmlstream.py	(revision 43485)
+++ twisted/words/test/test_xmlstream.py	(working copy)
@@ -10,7 +10,7 @@
 from twisted.trial import unittest
 from twisted.words.xish import domish, utility, xmlstream
 
-class XmlStreamTest(unittest.TestCase):
+class XmlStreamTests(unittest.TestCase):
     def setUp(self):
         self.connectionLostMsg = "no reason"
         self.outlist = []
@@ -119,7 +119,7 @@
 
 
 
-class BootstrapMixinTest(unittest.TestCase):
+class BootstrapMixinTests(unittest.TestCase):
     """
     Tests for L{xmlstream.BootstrapMixin}.
 
@@ -168,7 +168,7 @@
 
 
 
-class GenericXmlStreamFactoryTestsMixin(BootstrapMixinTest):
+class GenericXmlStreamFactoryTestsMixin(BootstrapMixinTests):
     """
     Generic tests for L{XmlStream} factories.
     """
@@ -203,7 +203,7 @@
 
 
 
-class XmlStreamFactoryMixinTest(GenericXmlStreamFactoryTestsMixin):
+class XmlStreamFactoryMixinTests(GenericXmlStreamFactoryTestsMixin):
     """
     Tests for L{xmlstream.XmlStreamFactoryMixin}.
     """
Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 43485)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -498,7 +498,7 @@
     ]
 
 
-class QuotingTest(unittest.TestCase):
+class QuotingTests(unittest.TestCase):
     def test_lowquoteSanity(self):
         """
         Testing client-server level quote/dequote.
@@ -1009,7 +1009,7 @@
 
 
 
-class CTCPTest(unittest.TestCase):
+class CTCPTests(unittest.TestCase):
     """
     Tests for L{twisted.words.protocols.irc.IRCClient} CTCP handling.
     """
@@ -1623,7 +1623,7 @@
 
 
 
-class BasicServerFunctionalityTestCase(unittest.TestCase):
+class BasicServerFunctionalityTests(unittest.TestCase):
     def setUp(self):
         self.f = StringIOWithoutClosing()
         self.t = protocol.FileWrapper(self.f)
@@ -2388,7 +2388,7 @@
 
 
 
-class TestServerToClient(TestCase):
+class ServerToClientTests(TestCase):
     """
     Tests for the C{irc_*} methods sent from the server to the client.
     """
@@ -2497,7 +2497,7 @@
 
 
 
-class TestCTCPQuery(TestCase):
+class CTCPQueryTests(TestCase):
     """
     Tests for the C{ctcpQuery_*} methods.
     """
