Index: twisted/names/dns.py
===================================================================
--- twisted/names/dns.py	(revision 45099)
+++ twisted/names/dns.py	(working copy)
@@ -14,10 +14,15 @@
 __all__ = [
     'IEncodable', 'IRecord',
 
-    'A', 'A6', 'AAAA', 'AFSDB', 'CNAME', 'DNAME', 'HINFO',
-    'MAILA', 'MAILB', 'MB', 'MD', 'MF', 'MG', 'MINFO', 'MR', 'MX',
-    'NAPTR', 'NS', 'NULL', 'OPT', 'PTR', 'RP', 'SOA', 'SPF', 'SRV', 'TXT',
-    'WKS',
+    'A', 'A6', 'AAAA', 'AFSDB', 'APL', 'ATMA', 'CDNSKEY', 'CDS', 'CERT',
+    'CNAME', 'CSYNC', 'DHCID', 'DNAME', 'DNSKEY', 'DS', 'EID', 'EUI48',
+    'EUI64', 'GID', 'GPOS', 'HINFO', 'HIP', 'IPSECKEY', 'ISDN', 'KEY', 'KX',
+    'L32', 'L64', 'LOC', 'LP', 'MAILA', 'MAILB', 'MB', 'MD', 'MF', 'MG',
+    'MINFO', 'MR', 'MX', 'NAPTR', 'NID', 'NIMLOC', 'NINFO', 'NS', 'NSAP',
+    'NSAPPTR', 'NSEC', 'NSEC3', 'NSEC3PARAM', 'NULL', 'NXT', 'OPENPGPKEY',
+    'OPT', 'PTR', 'PX', 'RKEY', 'RP', 'RRSIG', 'RT', 'SIG', 'SINK', 'SOA',
+    'SPF', 'SRV', 'SSHFP', 'TALINK', 'TKEY', 'TLSA', 'TSIG', 'TXT', 'UID',
+    'UINFO', 'UNSPEC', 'WKS', 'X25'
 
     'ANY', 'CH', 'CS', 'HS', 'IN',
 
@@ -26,10 +31,11 @@
     'EFORMAT', 'ENAME', 'ENOTIMP', 'EREFUSED', 'ESERVER', 'EBADVERSION',
 
     'Record_A', 'Record_A6', 'Record_AAAA', 'Record_AFSDB', 'Record_CNAME',
-    'Record_DNAME', 'Record_HINFO', 'Record_MB', 'Record_MD', 'Record_MF',
-    'Record_MG', 'Record_MINFO', 'Record_MR', 'Record_MX', 'Record_NAPTR',
-    'Record_NS', 'Record_NULL', 'Record_PTR', 'Record_RP', 'Record_SOA',
-    'Record_SPF', 'Record_SRV', 'Record_TXT', 'Record_WKS', 'UnknownRecord',
+    'Record_DNAME', 'Record_DS', 'Record_HINFO', 'Record_MB', 'Record_MD',
+    'Record_MF', 'Record_MG', 'Record_MINFO', 'Record_MR', 'Record_MX',
+    'Record_NAPTR', 'Record_NS', 'Record_NULL', 'Record_PTR', 'Record_RP',
+    'Record_SOA', 'Record_SPF', 'Record_SRV', 'Record_TXT', 'Record_WKS',
+    'UnknownRecord',
 
     'QUERY_CLASSES', 'QUERY_TYPES', 'REV_CLASSES', 'REV_TYPES', 'EXT_QUERIES',
 
@@ -110,50 +116,97 @@
 
 
 PORT = 53
-
 (A, NS, MD, MF, CNAME, SOA, MB, MG, MR, NULL, WKS, PTR, HINFO, MINFO, MX, TXT,
- RP, AFSDB) = range(1, 19)
-AAAA = 28
-SRV = 33
-NAPTR = 35
-A6 = 38
-DNAME = 39
-OPT = 41
-SPF = 99
+RP, AFSDB, X25, ISDN, RT, NSAP, NSAPPTR, SIG, KEY, PX, GPOS, AAAA, LOC, NXT,
+EID, NIMLOC, SRV, ATMA, NAPTR, KX, CERT, A6, DNAME, SINK, OPT, APL, DS,
+SSHFP, IPSECKEY, RRSIG, NSEC, DNSKEY, DHCID, NSEC3, NSEC3PARAM, TLSA) = \
+range(1, 53)
+HIP, NINFO, RKEY, TALINK, CDS, CDNSKEY, OPENPGPKEY, CSYNC = range(55, 63)
+SPF, UINFO, UID, GID, UNSPEC, NID, L32, L64, LP, EUI48, EUI64 = range(99, 110)
+TKEY, TSIG, IXFR, AXFR, MAILB, MAILA, ALL_RECORDS = range(249, 256)
 
 QUERY_TYPES = {
-    A: 'A',
-    NS: 'NS',
-    MD: 'MD',
-    MF: 'MF',
-    CNAME: 'CNAME',
-    SOA: 'SOA',
-    MB: 'MB',
-    MG: 'MG',
-    MR: 'MR',
-    NULL: 'NULL',
-    WKS: 'WKS',
-    PTR: 'PTR',
-    HINFO: 'HINFO',
-    MINFO: 'MINFO',
-    MX: 'MX',
-    TXT: 'TXT',
-    RP: 'RP',
-    AFSDB: 'AFSDB',
+    A: 'A', # 1
+    NS: 'NS', # 2
+    MD: 'MD', # 3 - Obsolete per IANA
+    MF: 'MF', # 4 - Obsolete per IANA
+    CNAME: 'CNAME', # 5
+    SOA: 'SOA', # 6
+    MB: 'MB', # 7 - Experimental per IANA
+    MG: 'MG', # 8 - Experimental per IANA
+    MR: 'MR', # 9 - Experimental per IANA
+    NULL: 'NULL', # 10 - Experimental per IANA
+    WKS: 'WKS', # 11
+    PTR: 'PTR', # 12
+    HINFO: 'HINFO', # 13
+    MINFO: 'MINFO', # 14
+    MX: 'MX', # 15
+    TXT: 'TXT', # 16
+    RP: 'RP', # 17
+    AFSDB: 'AFSDB', # 18
+    X25: 'X25', # 19
+    ISDN: 'ISDN', # 20
+    RT: 'RT', # 21
+    NSAP: 'NSAP', # 22
+    NSAPPTR: 'NSAP-PTR', # 23
+    SIG: 'SIG', # 24
+    KEY: 'KEY', # 25
+    PX: 'PX', # 26
+    GPOS: 'GPOS', # 27
+    AAAA: 'AAAA', # 28
+    LOC: 'LOC', # 29
+    NXT: 'NXT', # 30 - Obsolete per IANA
+    EID: 'EID', # 31
+    NIMLOC: 'NIMLOC', # 32
+    SRV: 'SRV', # 33
+    ATMA: 'ATMA', # 34
+    NAPTR: 'NAPTR', # 35
+    KX: 'KX', # 36
+    CERT: 'CERT', # 37
+    A6: 'A6', # 38 - Obsolete per IANA
+    DNAME: 'DNAME', # 39
+    SINK: 'SINK', # 40
+    OPT: 'OPT', # 41
+    APL: 'APL', # 42
+    DS: 'DS', # 43
+    SSHFP: 'SSHFP', # 44
+    IPSECKEY: 'IPSECKEY', # 45
+    RRSIG: 'RRSIG', # 46
+    NSEC: 'NSEC', # 47
+    DNSKEY: 'DNSKEY', # 48
+    DHCID: 'DHCID', # 49
+    NSEC3: 'NSEC3', # 50
+    NSEC3PARAM: 'NSEC3PARAM', # 51
+    TLSA: 'TLSA', # 52
+    HIP: 'HIP', # 55
+    NINFO: 'NINFO', # 56
+    RKEY: 'RKEY', # 57
+    TALINK: 'TALINK', # 58
+    CDS: 'CDS', # 59
+    CDNSKEY: 'CDNSKEY', # 60
+    OPENPGPKEY: 'OPENPGPKEY', # 61
+    CSYNC: 'CSYNC', # 62
+    SPF: 'SPF', # 99
+    UINFO: 'UINFO', # 100
+    UID: 'UID', # 101
+    GID: 'GID', # 102
+    UNSPEC: 'UNSPEC', # 103
+    NID: 'NID', # 104
+    L32: 'L32', # 105
+    L64: 'L64', # 106
+    LP: 'LP', # 107
+    EUI48: 'EUI48', # 108
+    EUI64: 'EUI64', # 109
+    TKEY: 'TKEY', # 249
+    TSIG: 'TSIG', # 250
+    IXFR: 'IXFR', # 251
+    AXFR: 'AXFR', # 252
+    MAILB: 'MAILB', # 253
+    MAILA: 'MAILA', # 254 - Obsolete per IANA
+    ALL_RECORDS: 'ALL_RECORDS', # 255
 
-    # 19 through 27?  Eh, I'll get to 'em.
-
-    AAAA: 'AAAA',
-    SRV: 'SRV',
-    NAPTR: 'NAPTR',
-    A6: 'A6',
-    DNAME: 'DNAME',
-    OPT: 'OPT',
-    SPF: 'SPF'
 }
 
-IXFR, AXFR, MAILB, MAILA, ALL_RECORDS = range(251, 256)
-
 # "Extended" queries (Hey, half of these are deprecated, good job)
 EXT_QUERIES = {
     IXFR: 'IXFR',
@@ -187,7 +240,20 @@
 OP_NOTIFY = 4 # RFC 1996
 OP_UPDATE = 5 # RFC 2136
 
+# DNSSEC Algorithm Numbers
+#http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
+ALG_RSAMD5, ALG_DH, ALG_DSA = range(3)
+(ALG_RSASHA1, ALG_DSANSEC3SHA1, ALG_RSASHA1NSEC3SHA1, ALG_RSASHA256)  = \
+ range(5, 9)
+ALG_RSASHA512 = 10
+ALG_ECCGOST, ALG_ECDSAP256SHA256, ALG_ECDSAP384SHA384 = range(12, 15)
 
+ALG_1, ALG_2, ALG_3 = range(3)
+ALG_5, ALG_6, ALG_7, ALG_8  = range(5, 9)
+ALG_10 = 10
+ALG_12, ALG_13, ALG_14 = range(12, 15)
+
+
 # Response Codes
 OK, EFORMAT, ESERVER, ENAME, ENOTIMP, EREFUSED = range(6)
 # https://tools.ietf.org/html/rfc6891#section-9
@@ -1034,8 +1100,6 @@
     TYPE = PTR
     fancybasename = 'PTR'
 
-
-
 class Record_DNAME(SimpleRecord):
     """
     A non-terminal DNS name redirection.
@@ -1050,8 +1114,49 @@
     TYPE = DNAME
     fancybasename = 'DNAME'
 
+@implementer(IEncodable, IRecord)
+class Record_DS(tputil.FancyEqMixin, tputil.FancyStrMixin):
+    """
+    A delegation signer
+    (Public Key for DNSSEC)
+    @see: U{http://tools.ietf.org/html/rfc4034#section-5}
+    @type keytag: C{int}
+    @ivar keytag: Keytag of corresponding DNSKEY record
+    @type algorithm: C{int}
+    @ivar algorithm: Algorithm defined by IANA at U{http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml}
+    @type type: C{int}
+    @ivar type: Digest Type defined by IANA at U{http://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml}
+    @type digest: C{str}
+    @ivar digest: Digest of the corresponding DNSKEY record
 
+    """
+    TYPE = DS
+    fancybasename = 'DS'
+    compareAttributes = ('keytag', 'algorithm', 'type', 'digest', 'ttl')
+    showAttributes = ('keytag', 'algorithm', 'type', 'ttl')
 
+    def __init__(self, keytag=0, algorithm=0, type=0, digest=b'', ttl=None):
+        self.keytag = int(keytag)
+        self.algorithm = int(algorithm)
+        self.type = int(type)
+        self.digest = Charstr(digest)
+        self.ttl = str2time(ttl)
+
+    def encode(self, strio, compDict = None):
+        strio.write(struct.pack('!HBB', self.keytag, self.algorithm, self.type))
+        self.digest.encode(strio, None)
+
+    def decode(self, strio, length = None):
+        r = struct.unpack('!HBB', readPrecisely(strio, struct.calcsize('!HBB')))
+        self.keytag, self.algorithm, self.type = r
+        self.digest = Charstr()
+        self.digest.decode(strio)
+
+
+    def __hash__(self):
+        return hash((
+            self.keytag, self.algorithm, self.type, self.digest))
+
 @implementer(IEncodable, IRecord)
 class Record_A(tputil.FancyEqMixin):
     """
@@ -1911,6 +2016,8 @@
 
 
 
+
+
 def _responseFromMessage(responseConstructor, message, **kwargs):
     """
     Generate a L{Message} like instance suitable for use as the response to
Index: twisted/names/test/test_dns.py
===================================================================
--- twisted/names/test/test_dns.py	(revision 45099)
+++ twisted/names/test/test_dns.py	(working copy)
@@ -569,9 +569,16 @@
         L{dns.Record_TXT} instance.
         """
         self._recordRoundtripTest(dns.Record_TXT(b'foo', b'bar'))
+    
+    def test_DS(self):
+        """
+        The byte stream written by L{dns.Record_TXT.encode} can be used by
+        L{dns.Record_TXT.decode} to reconstruct the state of the original
+        L{dns.Record_TXT} instance.
+        """
+        self._recordRoundtripTest(dns.Record_DS(10001, 8, 1, b'foobar'))
 
 
-
 MESSAGE_AUTHENTIC_DATA_BYTES = (
     b'\x00\x00' # ID
     b'\x00' #
@@ -1421,6 +1428,14 @@
             repr(dns.Record_DNAME(b'example.com', 4321)),
             "<DNAME name=example.com ttl=4321>")
 
+    def test_ds(self):
+        """
+        The repr of a L{dns.Record_DS} instance includes the name of the
+        non-terminal DNS name redirection and the TTL of the record.
+        """
+        self.assertEqual(
+            repr(dns.Record_DS(1, 2, 3, b'4', 4321)),
+            "<DS keytag=1 algorithm=2 type=3 ttl=4321>")
 
     def test_a(self):
         """
@@ -1759,6 +1774,12 @@
         """
         self._simpleEqualityTest(dns.Record_DNAME)
 
+    def test_ds(self):
+        """
+        Two L{dns.Record_MD} instances compare equal if and only if they have
+        the same name and TTL.
+        """
+        self._simpleEqualityTest(dns.Record_DNAME)
 
     def test_a(self):
         """
Index: twisted/names/test/test_names.py
===================================================================
--- twisted/names/test/test_names.py	(revision 45099)
+++ twisted/names/test/test_names.py	(working copy)
@@ -360,7 +360,15 @@
             dns.Record_SPF('v=spf1 +mx a:\0colo', '.example.com/28 -all not valid', ttl=19283784)]
         )
 
+    def test_DS(self):
+        """
+        Test DNS 'DS' record queries 
 
+        """
+        return self.namesTest(
+            self.resolver.lookupSenderPolicy('test-domain.com'),
+            [dns.Record_DS(60485, 5, 2, b'D4B7D520E7BB5F0F67674A0CCEB1E3E0614B93C4F9E99B8383F6A1E4469DA50A5', 86400)]
+        )
     def test_WKS(self):
         """Test DNS 'WKS' record queries"""
         return self.namesTest(
