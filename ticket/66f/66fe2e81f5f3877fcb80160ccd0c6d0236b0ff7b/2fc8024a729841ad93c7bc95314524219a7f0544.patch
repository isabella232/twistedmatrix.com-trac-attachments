Index: twisted/conch/test/test_recvline.py
===================================================================
--- twisted/conch/test/test_recvline.py	(revision 32505)
+++ twisted/conch/test/test_recvline.py	(working copy)
@@ -370,15 +370,18 @@
 
 
 class NotifyingExpectableBuffer(helper.ExpectableBuffer):
-    def __init__(self):
+    def __init__(self, recvlineServer=None):
         self.onConnection = defer.Deferred()
         self.onDisconnection = defer.Deferred()
+        self._recvlineServer = recvlineServer
 
     def connectionMade(self):
         helper.ExpectableBuffer.connectionMade(self)
         self.onConnection.callback(self)
 
     def connectionLost(self, reason):
+        if self._recvlineServer is not None:
+            self._recvlineServer.connectionLost(reason)
         self.onDisconnection.errback(reason)
 
 
@@ -430,7 +433,7 @@
         sshServer = sshFactory.buildProtocol(None)
         clientTransport = LoopbackRelay(sshServer)
 
-        recvlineClient = NotifyingExpectableBuffer()
+        recvlineClient = NotifyingExpectableBuffer(recvlineServer)
         insultsClient = insults.ClientProtocol(lambda: recvlineClient)
         sshClient = TestTransport(lambda: insultsClient, (), {}, u, p, self.WIDTH, self.HEIGHT)
         serverTransport = LoopbackRelay(sshClient)
@@ -467,7 +470,7 @@
         telnetServer = telnet.TelnetTransport(lambda: insultsServer)
         clientTransport = LoopbackRelay(telnetServer)
 
-        recvlineClient = NotifyingExpectableBuffer()
+        recvlineClient = NotifyingExpectableBuffer(recvlineServer)
         insultsClient = TestInsultsClientProtocol(lambda: recvlineClient)
         telnetClient = telnet.TelnetTransport(lambda: insultsClient)
         serverTransport = LoopbackRelay(telnetClient)
Index: twisted/conch/test/test_manhole.py
===================================================================
--- twisted/conch/test/test_manhole.py	(revision 32505)
+++ twisted/conch/test/test_manhole.py	(working copy)
@@ -5,9 +5,8 @@
 """
 Tests for L{twisted.conch.manhole}.
 """
+import os, traceback
 
-import traceback
-
 from twisted.trial import unittest
 from twisted.internet import error, defer
 from twisted.test.proto_helpers import StringTransport
@@ -334,15 +333,118 @@
 
     testDeferred = defer.deferredGenerator(testDeferred)
 
+
 class ManholeLoopbackTelnet(_TelnetMixin, unittest.TestCase, ManholeLoopbackMixin):
     pass
 
+
 class ManholeLoopbackSSH(_SSHMixin, unittest.TestCase, ManholeLoopbackMixin):
     if ssh is None:
         skip = "Crypto requirements missing, can't run manhole tests over ssh"
 
+
 class ManholeLoopbackStdio(_StdioMixin, unittest.TestCase, ManholeLoopbackMixin):
     if stdio is None:
         skip = "Terminal requirements missing, can't run manhole tests over stdio"
     else:
         serverProtocol = stdio.ConsoleManhole
+
+
+def _setUpPersistentManhole(self):
+    self._historyFile = self.mktemp()
+    self.patch(manhole.PersistentManhole, 'historyFile', self._historyFile)
+    self.patch(manhole.PersistentManhole, 'maxLines', 10)
+    m = self._postSetUp.get(self._testMethodName, None)
+    if m:
+        m(self)
+
+
+class _PersistentTelnetMixin(_TelnetMixin):
+
+    def setUp(self):
+        _setUpPersistentManhole(self)
+        return _TelnetMixin.setUp(self)
+
+
+class _PersistentSSHMixin(_SSHMixin):
+
+    def setUp(self):
+        _setUpPersistentManhole(self)
+        return _SSHMixin.setUp(self)
+
+
+class PersistentManholeLoopbackMixin:
+    serverProtocol = manhole.PersistentManhole
+    UP_ARROW_1 = '\x1b[A'
+
+    def test_controlD(self):
+        """
+        Test that after connection is lost the history file exists,
+        and has the relavant history lines.
+        """
+        self._testwrite(
+            '1 + 1\n'
+            'print "hello"\n'
+            'True != False\n')
+        self._testwrite(manhole.CTRL_D)
+        d = self.recvlineClient.onDisconnection
+        def done(ignore):
+            self.assert_(os.path.exists(self._historyFile))
+            buf = open(self._historyFile).read()
+            self.assertEqual(buf, '1 + 1\nprint "hello"\nTrue != False\n')
+        return self.assertFailure(d, error.ConnectionDone).addBoth(done)
+
+    def test_maxLines(self):
+        """
+        History file is shorted (oldest lines removed) after maxlines
+        is exceeded.
+        """
+        for i in range(11):
+            self._testwrite('print "line %d"\n' % i)
+        self._testwrite(manhole.CTRL_D)
+        expected = [ ('print "line %d"' % i) for i in range(1, 11) ]
+        d = self.recvlineClient.onDisconnection
+        def done(ignore):
+            buf = open(self._historyFile).read()
+            pt = self.serverProtocol()
+            pt.historyLines = []
+            pt._readHistoryFile()
+            self.assertEqual(pt.historyLines, expected)
+        return self.assertFailure(d, error.ConnectionDone).addBoth(done)
+
+    def _writeHistory(self):
+        fd = open(self._historyFile, 'w')
+        fd.write(
+            '2 + 3\n'
+            'print 2 + 5\n'
+            'print "hello"\n')
+        fd.close()
+
+    def test_UP_ARROW(self):
+        """
+        UP_ARROW should reset line with next line from history,
+        """
+        def onup(ignore, check=True):
+            self._assertBuffer([ '>>> print "hello"' ])
+        d = self.recvlineClient.expect('print "hello"')
+        self._testwrite(self.UP_ARROW_1)
+        d.addCallback(onup)
+        return d
+
+    _postSetUp = {
+        'test_UP_ARROW' : _writeHistory
+    }
+
+class PersistentManholeLoopbackTelnet(
+        _PersistentTelnetMixin, unittest.TestCase,
+        PersistentManholeLoopbackMixin):
+    pass
+
+
+class PersistentManholeLoopbackSSH(
+        _PersistentSSHMixin, unittest.TestCase,
+        PersistentManholeLoopbackMixin):
+    if ssh is None:
+        skip = "Crypto requirements missing, can't run manhole tests over ssh"
+
+
Index: twisted/conch/stdio.py
===================================================================
--- twisted/conch/stdio.py	(revision 32505)
+++ twisted/conch/stdio.py	(working copy)
@@ -14,7 +14,7 @@
 from twisted.python import failure, reflect, log
 
 from twisted.conch.insults.insults import ServerProtocol
-from twisted.conch.manhole import ColoredManhole
+from twisted.conch.manhole import PersistentManhole
 
 class UnexpectedOutputError(Exception):
     pass
@@ -52,7 +52,7 @@
 
 
 
-class ConsoleManhole(ColoredManhole):
+class ConsoleManhole(PersistentManhole):
     """
     A manhole protocol specifically for use with L{stdio.StandardIO}.
     """
@@ -61,6 +61,7 @@
         When the connection is lost, there is nothing more to do.  Stop the
         reactor so that the process can exit.
         """
+        PersistentManhole.connectionLost(self, reason)
         reactor.stop()
 
 
Index: twisted/conch/manhole.py
===================================================================
--- twisted/conch/manhole.py	(revision 32505)
+++ twisted/conch/manhole.py	(working copy)
@@ -13,12 +13,13 @@
 @author: Jp Calderone
 """
 
-import code, sys, StringIO, tokenize
+import os, code, sys, StringIO, tokenize
 
 from twisted.conch import recvline
 
 from twisted.internet import defer
 from twisted.python.htmlizer import TokenPrinter
+from twisted.python.filepath import FilePath
 
 class FileWrapper:
     """Minimal write-file-like object.
@@ -334,3 +335,91 @@
             n = len(self.lineBuffer) - self.lineBufferIndex
             if n:
                 self.terminal.cursorBackward(n)
+
+
+class PersistentManhole(ColoredManhole):
+    """
+    A REPL which color-codes input and saves/loads input
+    history to/from a history file.
+    """
+
+    historyFile = os.path.join(os.environ.get('HOME', ''),
+                               '.twistedconch.history')
+    maxLines = 2**12
+
+    def connectionMade(self):
+        ColoredManhole.connectionMade(self)
+        self._readHistoryFile()
+
+    def _readHistoryFile(self):
+        """
+        Read pesisted lines from C{historyFile} into current C{historyLines}
+        buffer and adjust C{historyPosition} according to updated buffer.
+        """
+        if os.path.exists(self.historyFile):
+            fd = open(self.historyFile)
+            try:
+                lineCount = 1
+                for line in fd:
+                    if not line.strip():
+                        continue
+                    if lineCount > self.maxLines:
+                        self.historyLines.pop(0)
+                    self.historyLines.append(line[:-1])
+                    lineCount += 1
+            finally:
+                fd.close()
+        fd = open(self.historyFile + '.tmp', 'w')
+        try:
+            for line in self.historyLines:
+                fd.write(line + '\n')
+        finally:
+            fd.close()
+        path = FilePath(self.historyFile + '.tmp')
+        path.moveTo(FilePath(self.historyFile))
+        self._historyFd = open(self.historyFile, 'a')
+        self.historyPosition = len(self.historyLines)
+
+    def connectionLost(self, reason):
+        self._historyFd.close()
+        ColoredManhole.connectionLost(self, reason)
+
+    def handle_RETURN(self):
+        """
+        In addition to normal habdling of RETURN key, if there is
+        any input, write to C{historyFile}.
+        """
+        line = ''.join(self.lineBuffer)
+        r = ColoredManhole.handle_RETURN(self)
+        if line:
+            self._historyFd.write(line + '\n')
+        return r
+
+
+    def handle_UP(self):
+        """
+        Replace current line buffer with next entry in history, if any.
+        """
+        lineToDeliver = None
+        if (self.lineBuffer
+                and self.historyPosition == len(self.historyLines)):
+            current = ''.join(self.lineBuffer)
+            for line in reversed(self.historyLines):
+                if line[:len(current)] == current:
+                    lineToDeliver = line
+                    break
+        elif self.historyPosition > 0:
+            self.historyPosition -= 1
+            lineToDeliver = self.historyLines[self.historyPosition]
+        if lineToDeliver:
+            self._resetAndDeliverBuffer(lineToDeliver)
+
+    def _resetAndDeliverBuffer(self, buffer):
+        """
+        Reset the current line buffer and replace with the given
+        C{buffer}.
+        """
+        self.handle_HOME()
+        self.terminal.eraseToLineEnd()
+        self.lineBuffer = []
+        self._deliverBuffer(buffer)
