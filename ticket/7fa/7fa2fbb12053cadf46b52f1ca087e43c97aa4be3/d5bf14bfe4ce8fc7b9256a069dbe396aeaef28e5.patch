Index: twisted/web/proxy.py
===================================================================
--- twisted/web/proxy.py	(revision 28823)
+++ twisted/web/proxy.py	(working copy)
@@ -275,7 +275,8 @@
         C{path} at the end.
         """
         return ReverseProxyResource(
-            self.host, self.port, self.path + '/' + urlquote(path, safe=""))
+            self.host, self.port, self.path + '/' + urlquote(path, safe=""),
+            self.reactor)
 
 
     def render(self, request):
Index: twisted/web/test/test_proxy.py
===================================================================
--- twisted/web/test/test_proxy.py	(revision 28823)
+++ twisted/web/test/test_proxy.py	(working copy)
@@ -75,15 +75,16 @@
         instance with the same class as the originating resource, forward port
         and host values, and update the path value with the value passed.
         """
-        resource = ReverseProxyResource("127.0.0.1", 1234, "/path")
+        reactor = MemoryReactor()
+        resource = ReverseProxyResource("127.0.0.1", 1234, "/path", reactor)
         child = resource.getChild('foo', None)
         # The child should keep the same class
         self.assertIsInstance(child, ReverseProxyResource)
         self.assertEquals(child.path, "/path/foo")
         self.assertEquals(child.port, 1234)
         self.assertEquals(child.host, "127.0.0.1")
+        self.failIf(child.reactor is not resource.reactor)
 
-
     def test_getChildWithSpecial(self):
         """
         The L{ReverseProxyResource} return by C{getChild} has a path which has
