Index: app.py
===================================================================
--- app.py	(revision 12111)
+++ app.py	(working copy)
@@ -29,10 +29,18 @@
     if reactor:
         reflect.namedModule(reactorTypes[reactor]).install()
 
+def writeStatsCSV(stats, filename):
+    csvfile = open(filename+'.csv', "w")
+    for func, info in stats.stats.items():
+        csvfile.write(','.join([str(f) for f in func+info[:-1]])+'\n')
+    csvfile.close()
+
 def runWithProfiler(reactor, config):
     """Run reactor under standard profiler."""
-    p = profile.Profile(lineevents=1) # lineevents=1 for hotshot2kcachegrind compatability
+#    p = profile.Profile(lineevents=1) # lineevents=1 for hotshot2kcachegrind compatability
+    p = profile.Profile()
     p.runcall(reactor.run)
+
     if config['savestats']:
         p.dump_stats(config['profile'])
     else:
@@ -42,21 +50,37 @@
         sys.stdout, tmp = tmp, sys.stdout
         tmp.close()
 
+    if config["savestatscsv"]:
+        import pstats
+        if not config['savestats']:
+            p.dump_stats(config['profile'])
+        stats = pstats.Stats(config['profile'])
+        writeStatsCSV(stats, config['profile'])
+        if not config['savestats']:
+            import os
+            os.unlink(config['profile'])
+
 def runWithHotshot(reactor, config):
     """Run reactor under hotshot profiler."""
     import hotshot, hotshot.stats
     # this writes stats straight out
     p = hotshot.Profile(config["profile"])
     p.runcall(reactor.run)
+
+    if config['savestatscsv'] or not config['savestats']:
+        stats = hotshot.stats.load(config['profile'])
+
+    if config["savestatscsv"]:
+        writeStatsCSV(stats, config['profile'])
+
     if config["savestats"]:
         # stats are automatically written to file, nothing to do
         return
     else:
-        s = hotshot.stats.load(config["profile"])
-        s.strip_dirs()
-        s.sort_stats(-1)
+        stats.strip_dirs()
+        stats.sort_stats(-1)
         tmp, sys.stdout = sys.stdout, open(config['profile'], 'w')
-        s.print_stats()
+        stats.print_stats()
         sys.stdout, tmp = tmp, sys.stdout
         tmp.close()
 
@@ -161,6 +185,8 @@
     optFlags = [['savestats', None,
                  "save the Stats object rather than the text output of "
                  "the profiler."],
+                ['savestatscsv', None,
+                 "save the profile output as a csv file"],
                 ['debug', 'b',
                  "run the application in the Python Debugger "
                  "(implies nodaemon), sending SIGUSR2 will drop into debugger"],
