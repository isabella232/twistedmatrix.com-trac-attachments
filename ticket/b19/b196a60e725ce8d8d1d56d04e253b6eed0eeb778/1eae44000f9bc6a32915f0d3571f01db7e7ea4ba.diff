diff --git a/twisted/topfiles/8215.bugfix b/twisted/topfiles/8215.bugfix
new file mode 100644
index 0000000..0632b96
--- /dev/null
+++ b/twisted/topfiles/8215.bugfix
@@ -0,0 +1 @@
+Ensure to generate Session.uid as 'bytes' type with both Python 2/3
diff --git a/twisted/web/server.py b/twisted/web/server.py
index 2ec4d58..ece7d05 100644
--- a/twisted/web/server.py
+++ b/twisted/web/server.py
@@ -664,12 +664,13 @@ def _mkuid(self):
         """
         (internal) Generate an opaque, unique ID for a user's session.
         """
+        from binascii import hexlify
         from hashlib import md5
         import random
         self.counter = self.counter + 1
-        return md5(networkString(
+        return hexlify(md5(networkString(
                 "%s_%s" % (str(random.random()), str(self.counter)))
-                   ).hexdigest()
+                   ).digest())
 
 
     def makeSession(self):
diff --git a/twisted/web/test/test_web.py b/twisted/web/test/test_web.py
index 0048d55..4fdf73d 100644
--- a/twisted/web/test/test_web.py
+++ b/twisted/web/test/test_web.py
@@ -108,6 +108,35 @@ def test_buildProtocol(self):
         self.assertIs(site.requestFactory, channel.requestFactory)
 
 
+    def test_makeSession(self):
+        """
+        C{Site} generate a new C{Session} instance.
+        The C{Session} uid type should be consistent with documentation, e.g.
+        ${bytes}
+        """
+        site = server.Site(resource.Resource())
+
+        session = site.makeSession()
+        self.assertIsInstance(session, server.Session)
+        self.assertIsInstance(session.uid, bytes)
+        
+        session.expire()  # avoid delayed calls lingering after test exit
+
+
+    def test_getSession(self):
+        """
+        Get a previously generated session, by its unique ID.
+        This raises a KeyError if the session is not found.
+        """
+        site = server.Site(resource.Resource())
+        session = site.makeSession()
+
+        session = site.getSession(session.uid)
+        self.assertIsInstance(session, server.Session)
+
+        session.expire()
+        self.assertRaises(KeyError, site.getSession, session.uid)
+
 
 class SessionTests(unittest.TestCase):
     """
