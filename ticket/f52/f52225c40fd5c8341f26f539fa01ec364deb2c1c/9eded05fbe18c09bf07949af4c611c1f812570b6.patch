diff -r b14bde2bc4f0 twisted/internet/iocpreactor/iocpsupport/acceptex.pxi
--- a/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi	Mon Nov 07 05:58:37 2011 +0100
+++ b/twisted/internet/iocpreactor/iocpsupport/acceptex.pxi	Fri Nov 25 21:02:17 2011 +0100
@@ -7,7 +7,8 @@
     CAUTION: unlike system AcceptEx(), this function returns 0 on success
     """
     cdef unsigned long bytes
-    cdef int size, rc
+    cdef int rc
+    cdef Py_ssize_t size
     cdef void *mem_buffer
     cdef myOVERLAPPED *ov
 
@@ -17,7 +18,8 @@
     if obj is not None:
         ov.obj = <PyObject *>obj
 
-    rc = lpAcceptEx(listening, accepting, mem_buffer, 0, size / 2, size / 2,
+    rc = lpAcceptEx(listening, accepting, mem_buffer, 0,
+                    <DWORD>size / 2, <DWORD>size / 2,
                     &bytes, <OVERLAPPED *>ov)
     if not rc:
         rc = WSAGetLastError()
@@ -30,12 +32,14 @@
 
 def get_accept_addrs(long s, object buff):
     cdef WSAPROTOCOL_INFO wsa_pi
-    cdef int size, locallen, remotelen
+    cdef int locallen, remotelen
+    cdef Py_ssize_t size
     cdef void *mem_buffer
     cdef sockaddr *localaddr, *remoteaddr
 
     PyObject_AsReadBuffer(buff, &mem_buffer, &size)
 
-    lpGetAcceptExSockaddrs(mem_buffer, 0, size / 2, size / 2, &localaddr, &locallen, &remoteaddr, &remotelen)
+    lpGetAcceptExSockaddrs(mem_buffer, 0, <DWORD>size / 2, <DWORD>size / 2,
+                           &localaddr, &locallen, &remoteaddr, &remotelen)
     return remoteaddr.sa_family, _makesockaddr(localaddr, locallen), _makesockaddr(remoteaddr, remotelen)
 
diff -r b14bde2bc4f0 twisted/internet/iocpreactor/iocpsupport/iocpsupport.c
--- a/twisted/internet/iocpreactor/iocpsupport/iocpsupport.c	Mon Nov 07 05:58:37 2011 +0100
+++ b/twisted/internet/iocpreactor/iocpsupport/iocpsupport.c	Fri Nov 25 21:02:17 2011 +0100
@@ -1,4 +1,4 @@
-/* Generated by Cython 0.14.1 on Sat May 14 18:30:23 2011 */
+/* Generated by Cython 0.15.1 on Fri Nov 25 21:01:57 2011 */
 
 #define PY_SSIZE_T_CLEAN
 #include "Python.h"
@@ -46,7 +46,7 @@
   #define PY_SSIZE_T_MIN INT_MIN
   #define PY_FORMAT_SIZE_T ""
   #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
-  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
+  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
   #define PyNumber_Index(o)    PyNumber_Int(o)
   #define PyIndex_Check(o)     PyNumber_Check(o)
   #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
@@ -159,6 +159,15 @@
   #define PyBoolObject                 PyLongObject
 #endif
 
+#if PY_VERSION_HEX < 0x03020000
+  typedef long Py_hash_t;
+  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
+  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
+#else
+  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
+  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
+#endif
+
 
 #if PY_MAJOR_VERSION >= 3
   #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
@@ -209,16 +218,19 @@
   #define __Pyx_DOCSTR(n)  (n)
 #endif
 
-#ifdef __cplusplus
-#define __PYX_EXTERN_C extern "C"
-#else
-#define __PYX_EXTERN_C extern
+#ifndef __PYX_EXTERN_C
+  #ifdef __cplusplus
+    #define __PYX_EXTERN_C extern "C"
+  #else
+    #define __PYX_EXTERN_C extern
+  #endif
 #endif
 
 #if defined(WIN32) || defined(MS_WINDOWS)
 #define _USE_MATH_DEFINES
 #endif
 #include <math.h>
+#define __PYX_HAVE__iocpsupport
 #define __PYX_HAVE_API__iocpsupport
 #include "io.h"
 #include "errno.h"
@@ -228,6 +240,9 @@
 #include "python.h"
 #include "string.h"
 #include "winsock_pointers.h"
+#ifdef _OPENMP
+#include <omp.h>
+#endif /* _OPENMP */
 
 #ifdef PYREX_WITHOUT_ASSERTIONS
 #define CYTHON_WITHOUT_ASSERTIONS
@@ -270,6 +285,7 @@
 #define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
 #define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))
 
+#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
 #define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
 static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
@@ -282,17 +298,17 @@
 
 
 #ifdef __GNUC__
-/* Test for GCC > 2.95 */
-#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
-#define likely(x)   __builtin_expect(!!(x), 1)
-#define unlikely(x) __builtin_expect(!!(x), 0)
-#else /* __GNUC__ > 2 ... */
-#define likely(x)   (x)
-#define unlikely(x) (x)
-#endif /* __GNUC__ > 2 ... */
+  /* Test for GCC > 2.95 */
+  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
+    #define likely(x)   __builtin_expect(!!(x), 1)
+    #define unlikely(x) __builtin_expect(!!(x), 0)
+  #else /* __GNUC__ > 2 ... */
+    #define likely(x)   (x)
+    #define unlikely(x) (x)
+  #endif /* __GNUC__ > 2 ... */
 #else /* __GNUC__ */
-#define likely(x)   (x)
-#define unlikely(x) (x)
+  #define likely(x)   (x)
+  #define unlikely(x) (x)
 #endif /* __GNUC__ */
     
 static PyObject *__pyx_m;
@@ -313,46 +329,80 @@
   "wsasend.pxi",
 };
 
-typedef int __pyx_t_11iocpsupport_size_t;
-
-typedef unsigned long __pyx_t_11iocpsupport_HANDLE;
-
-typedef unsigned long __pyx_t_11iocpsupport_SOCKET;
-
+/* "iocpsupport.pyx":6
+ * 
+ * # HANDLE and SOCKET are pointer-sized (they are 64 bit wide in 64-bit builds)
+ * ctypedef size_t HANDLE             # <<<<<<<<<<<<<<
+ * ctypedef size_t SOCKET
+ * ctypedef unsigned long DWORD
+ */
+typedef size_t __pyx_t_11iocpsupport_HANDLE;
+
+/* "iocpsupport.pyx":7
+ * # HANDLE and SOCKET are pointer-sized (they are 64 bit wide in 64-bit builds)
+ * ctypedef size_t HANDLE
+ * ctypedef size_t SOCKET             # <<<<<<<<<<<<<<
+ * ctypedef unsigned long DWORD
+ * # it's really a pointer, but we use it as an integer
+ */
+typedef size_t __pyx_t_11iocpsupport_SOCKET;
+
+/* "iocpsupport.pyx":8
+ * ctypedef size_t HANDLE
+ * ctypedef size_t SOCKET
+ * ctypedef unsigned long DWORD             # <<<<<<<<<<<<<<
+ * # it's really a pointer, but we use it as an integer
+ * ctypedef size_t ULONG_PTR
+ */
 typedef unsigned long __pyx_t_11iocpsupport_DWORD;
 
-typedef unsigned long __pyx_t_11iocpsupport_ULONG_PTR;
-
+/* "iocpsupport.pyx":10
+ * ctypedef unsigned long DWORD
+ * # it's really a pointer, but we use it as an integer
+ * ctypedef size_t ULONG_PTR             # <<<<<<<<<<<<<<
+ * ctypedef int BOOL
+ * 
+ */
+typedef size_t __pyx_t_11iocpsupport_ULONG_PTR;
+
+/* "iocpsupport.pyx":11
+ * # it's really a pointer, but we use it as an integer
+ * ctypedef size_t ULONG_PTR
+ * ctypedef int BOOL             # <<<<<<<<<<<<<<
+ * 
+ * cdef extern from 'io.h':
+ */
 typedef int __pyx_t_11iocpsupport_BOOL;
 
-/* Type declarations */
-
-/* "iocpsupport.pyx":114
+/*--- Type declarations ---*/
+struct __pyx_obj_11iocpsupport_CompletionPort;
+struct __pyx_t_11iocpsupport_myOVERLAPPED;
+
+/* "iocpsupport.pyx":115
  * #    BOOL (*lpTransmitFile)(SOCKET s, HANDLE hFile, DWORD size, DWORD buffer_size, OVERLAPPED *ov, TRANSMIT_FILE_BUFFERS *buff, DWORD flags)
  * 
  * cdef struct myOVERLAPPED:             # <<<<<<<<<<<<<<
  *     OVERLAPPED ov
  *     PyObject *obj
  */
-
 struct __pyx_t_11iocpsupport_myOVERLAPPED {
   OVERLAPPED ov;
   struct PyObject *obj;
 };
 
-/* "iocpsupport.pyx":138
+/* "iocpsupport.pyx":139
  *             setattr(self, k, v)
  * 
  * cdef class CompletionPort:             # <<<<<<<<<<<<<<
  *     cdef HANDLE port
  *     def __init__(self):
  */
-
 struct __pyx_obj_11iocpsupport_CompletionPort {
   PyObject_HEAD
   __pyx_t_11iocpsupport_HANDLE port;
 };
 
+
 #ifndef CYTHON_REFNANNY
   #define CYTHON_REFNANNY 0
 #endif
@@ -367,44 +417,38 @@
     void (*FinishContext)(void**);
   } __Pyx_RefNannyAPIStruct;
   static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
-  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
-    PyObject *m = NULL, *p = NULL;
-    void *r = NULL;
-    m = PyImport_ImportModule((char *)modname);
-    if (!m) goto end;
-    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
-    if (!p) goto end;
-    r = PyLong_AsVoidPtr(p);
-  end:
-    Py_XDECREF(p);
-    Py_XDECREF(m);
-    return (__Pyx_RefNannyAPIStruct *)r;
-  }
-  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
+  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
+  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
+  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
   #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
-  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
-  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
-  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
+  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
+  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
+  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
   #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
-  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
+  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
+  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
+  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
+  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
 #else
+  #define __Pyx_RefNannyDeclarations
   #define __Pyx_RefNannySetupContext(name)
   #define __Pyx_RefNannyFinishContext()
   #define __Pyx_INCREF(r) Py_INCREF(r)
   #define __Pyx_DECREF(r) Py_DECREF(r)
   #define __Pyx_GOTREF(r)
   #define __Pyx_GIVEREF(r)
+  #define __Pyx_XINCREF(r) Py_XINCREF(r)
   #define __Pyx_XDECREF(r) Py_XDECREF(r)
+  #define __Pyx_XGOTREF(r)
+  #define __Pyx_XGIVEREF(r)
 #endif /* CYTHON_REFNANNY */
-#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
-#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)
 
 static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/
 
 static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
 static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
 
-static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/
 
 static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
     Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/
@@ -418,8 +462,7 @@
 
 static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);
 
-static PyObject *__Pyx_UnpackItem(PyObject *, Py_ssize_t index); /*proto*/
-static int __Pyx_EndUnpack(PyObject *, Py_ssize_t expected); /*proto*/
+static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/
 
 static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
     const char* function_name, int kw_allowed); /*proto*/
@@ -498,8 +541,6 @@
     return r;
 }
 
-static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */
-
 static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/
 
 static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
@@ -519,7 +560,19 @@
 
 static int __pyx_binding_PyCFunctionType_init(void); /* proto */
 
-static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/
+static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/
+
+#include <string.h>
+
+static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/
+
+static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/
+
+#if PY_MAJOR_VERSION >= 3
+#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
+#else
+#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
+#endif
 
 static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);
 
@@ -553,24 +606,26 @@
 
 static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);
 
-static void __Pyx_AddTraceback(const char *funcname); /*proto*/
+static int __Pyx_check_binary_version(void);
+
+static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
+                               int __pyx_lineno, const char *__pyx_filename); /*proto*/
 
 static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
-/* Module declarations from iocpsupport */
-
+
+/* Module declarations from 'iocpsupport' */
 static PyTypeObject *__pyx_ptype_11iocpsupport_CompletionPort = 0;
 static struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_f_11iocpsupport_makeOV(void); /*proto*/
 static void __pyx_f_11iocpsupport_raise_error(int, PyObject *); /*proto*/
-static PyObject *__pyx_f_11iocpsupport__makesockaddr(struct sockaddr *, int); /*proto*/
+static PyObject *__pyx_f_11iocpsupport__makesockaddr(struct sockaddr *, Py_ssize_t); /*proto*/
 static PyObject *__pyx_f_11iocpsupport_fillinetaddr(struct sockaddr_in *, PyObject *); /*proto*/
 static int __pyx_f_11iocpsupport_getAddrFamily(__pyx_t_11iocpsupport_SOCKET); /*proto*/
 #define __Pyx_MODULE_NAME "iocpsupport"
-static int __pyx_module_is_main_iocpsupport = 0;
-
-/* Implementation of iocpsupport */
+int __pyx_module_is_main_iocpsupport = 0;
+
+/* Implementation of 'iocpsupport' */
 static PyObject *__pyx_builtin_ValueError;
 static PyObject *__pyx_builtin_MemoryError;
-static PyObject *__pyx_builtin_WindowsError;
 static char __pyx_k_1[] = "CreateIoCompletionPort";
 static char __pyx_k_2[] = "PostQueuedCompletionStatus";
 static char __pyx_k_3[] = ":";
@@ -583,52 +638,40 @@
 static char __pyx_k_11[] = "length of address length buffer needs to be sizeof(int)";
 static char __pyx_k_12[] = "Failed to initialize Winsock function vectors";
 static char __pyx_k__s[] = "s";
-static char __pyx_k__buf[] = "buf";
 static char __pyx_k__key[] = "key";
-static char __pyx_k__len[] = "len";
 static char __pyx_k__obj[] = "obj";
 static char __pyx_k__addr[] = "addr";
 static char __pyx_k__buff[] = "buff";
-static char __pyx_k__port[] = "port";
 static char __pyx_k__recv[] = "recv";
 static char __pyx_k__self[] = "self";
 static char __pyx_k__send[] = "send";
 static char __pyx_k__Event[] = "Event";
 static char __pyx_k__bytes[] = "bytes";
 static char __pyx_k__flags[] = "flags";
-static char __pyx_k__items[] = "items";
 static char __pyx_k__owner[] = "owner";
 static char __pyx_k__accept[] = "accept";
 static char __pyx_k__handle[] = "handle";
 static char __pyx_k__rsplit[] = "rsplit";
-static char __pyx_k__s_addr[] = "s_addr";
 static char __pyx_k__socket[] = "socket";
 static char __pyx_k__connect[] = "connect";
-static char __pyx_k__sa_data[] = "sa_data";
 static char __pyx_k____init__[] = "__init__";
 static char __pyx_k____main__[] = "__main__";
 static char __pyx_k____test__[] = "__test__";
 static char __pyx_k__bufflist[] = "bufflist";
 static char __pyx_k__callback[] = "callback";
 static char __pyx_k__recvfrom[] = "recvfrom";
-static char __pyx_k__sin_addr[] = "sin_addr";
-static char __pyx_k__sin_port[] = "sin_port";
 static char __pyx_k__accepting[] = "accepting";
 static char __pyx_k__addr_buff[] = "addr_buff";
 static char __pyx_k__listening[] = "listening";
-static char __pyx_k__sa_family[] = "sa_family";
-static char __pyx_k__sin6_port[] = "sin6_port";
 static char __pyx_k__ValueError[] = "ValueError";
 static char __pyx_k__getsockopt[] = "getsockopt";
 static char __pyx_k__maxAddrLen[] = "maxAddrLen";
 static char __pyx_k__MemoryError[] = "MemoryError";
 static char __pyx_k__iocpsupport[] = "iocpsupport";
 static char __pyx_k__WindowsError[] = "WindowsError";
-static char __pyx_k__iMaxSockAddr[] = "iMaxSockAddr";
 static char __pyx_k__makesockaddr[] = "makesockaddr";
 static char __pyx_k__addr_len_buff[] = "addr_len_buff";
 static char __pyx_k__have_connectex[] = "have_connectex";
-static char __pyx_k__iAddressFamily[] = "iAddressFamily";
 static char __pyx_k__get_accept_addrs[] = "get_accept_addrs";
 static char __pyx_k__AllocateReadBuffer[] = "AllocateReadBuffer";
 static char __pyx_k__WSAAddressToString[] = "WSAAddressToString";
@@ -656,7 +699,6 @@
 static PyObject *__pyx_n_s__addr;
 static PyObject *__pyx_n_s__addr_buff;
 static PyObject *__pyx_n_s__addr_len_buff;
-static PyObject *__pyx_n_s__buf;
 static PyObject *__pyx_n_s__buff;
 static PyObject *__pyx_n_s__bufflist;
 static PyObject *__pyx_n_s__bytes;
@@ -667,36 +709,25 @@
 static PyObject *__pyx_n_s__getsockopt;
 static PyObject *__pyx_n_s__handle;
 static PyObject *__pyx_n_s__have_connectex;
-static PyObject *__pyx_n_s__iAddressFamily;
-static PyObject *__pyx_n_s__iMaxSockAddr;
 static PyObject *__pyx_n_s__iocpsupport;
-static PyObject *__pyx_n_s__items;
 static PyObject *__pyx_n_s__key;
-static PyObject *__pyx_n_s__len;
 static PyObject *__pyx_n_s__listening;
 static PyObject *__pyx_n_s__makesockaddr;
 static PyObject *__pyx_n_s__maxAddrLen;
 static PyObject *__pyx_n_s__obj;
 static PyObject *__pyx_n_s__owner;
-static PyObject *__pyx_n_s__port;
 static PyObject *__pyx_n_s__recv;
 static PyObject *__pyx_n_s__recvfrom;
 static PyObject *__pyx_n_s__rsplit;
 static PyObject *__pyx_n_s__s;
-static PyObject *__pyx_n_s__s_addr;
-static PyObject *__pyx_n_s__sa_data;
-static PyObject *__pyx_n_s__sa_family;
 static PyObject *__pyx_n_s__self;
 static PyObject *__pyx_n_s__send;
-static PyObject *__pyx_n_s__sin6_port;
-static PyObject *__pyx_n_s__sin_addr;
-static PyObject *__pyx_n_s__sin_port;
 static PyObject *__pyx_n_s__socket;
 static PyObject *__pyx_int_0;
 static PyObject *__pyx_int_1;
 static PyObject *__pyx_k_tuple_4;
 
-/* "iocpsupport.pyx":118
+/* "iocpsupport.pyx":119
  *     PyObject *obj
  * 
  * cdef myOVERLAPPED *makeOV() except NULL:             # <<<<<<<<<<<<<<
@@ -704,24 +735,28 @@
  *     res = <myOVERLAPPED *>PyMem_Malloc(sizeof(myOVERLAPPED))
  */
 
-static  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_f_11iocpsupport_makeOV(void) {
+static struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_f_11iocpsupport_makeOV(void) {
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_v_res;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_r;
+  __Pyx_RefNannyDeclarations
   void *__pyx_t_1;
   int __pyx_t_2;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("makeOV");
 
-  /* "iocpsupport.pyx":120
+  /* "iocpsupport.pyx":121
  * cdef myOVERLAPPED *makeOV() except NULL:
  *     cdef myOVERLAPPED *res
  *     res = <myOVERLAPPED *>PyMem_Malloc(sizeof(myOVERLAPPED))             # <<<<<<<<<<<<<<
  *     if not res:
  *         raise MemoryError
  */
-  __pyx_t_1 = PyMem_Malloc((sizeof(struct __pyx_t_11iocpsupport_myOVERLAPPED))); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyMem_Malloc((sizeof(struct __pyx_t_11iocpsupport_myOVERLAPPED))); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_v_res = ((struct __pyx_t_11iocpsupport_myOVERLAPPED *)__pyx_t_1);
 
-  /* "iocpsupport.pyx":121
+  /* "iocpsupport.pyx":122
  *     cdef myOVERLAPPED *res
  *     res = <myOVERLAPPED *>PyMem_Malloc(sizeof(myOVERLAPPED))
  *     if not res:             # <<<<<<<<<<<<<<
@@ -731,19 +766,19 @@
   __pyx_t_2 = (!(__pyx_v_res != 0));
   if (__pyx_t_2) {
 
-    /* "iocpsupport.pyx":122
+    /* "iocpsupport.pyx":123
  *     res = <myOVERLAPPED *>PyMem_Malloc(sizeof(myOVERLAPPED))
  *     if not res:
  *         raise MemoryError             # <<<<<<<<<<<<<<
  *     memset(res, 0, sizeof(myOVERLAPPED))
  *     return res
  */
-    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     goto __pyx_L3;
   }
   __pyx_L3:;
 
-  /* "iocpsupport.pyx":123
+  /* "iocpsupport.pyx":124
  *     if not res:
  *         raise MemoryError
  *     memset(res, 0, sizeof(myOVERLAPPED))             # <<<<<<<<<<<<<<
@@ -752,7 +787,7 @@
  */
   memset(__pyx_v_res, 0, (sizeof(struct __pyx_t_11iocpsupport_myOVERLAPPED)));
 
-  /* "iocpsupport.pyx":124
+  /* "iocpsupport.pyx":125
  *         raise MemoryError
  *     memset(res, 0, sizeof(myOVERLAPPED))
  *     return res             # <<<<<<<<<<<<<<
@@ -765,14 +800,14 @@
   __pyx_r = 0;
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_AddTraceback("iocpsupport.makeOV");
+  __Pyx_AddTraceback("iocpsupport.makeOV", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":126
+/* "iocpsupport.pyx":127
  *     return res
  * 
  * cdef void raise_error(int err, object message) except *:             # <<<<<<<<<<<<<<
@@ -780,13 +815,18 @@
  *         err = GetLastError()
  */
 
-static  void __pyx_f_11iocpsupport_raise_error(int __pyx_v_err, PyObject *__pyx_v_message) {
+static void __pyx_f_11iocpsupport_raise_error(int __pyx_v_err, PyObject *__pyx_v_message) {
+  __Pyx_RefNannyDeclarations
   int __pyx_t_1;
   PyObject *__pyx_t_2 = NULL;
   PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("raise_error");
 
-  /* "iocpsupport.pyx":127
+  /* "iocpsupport.pyx":128
  * 
  * cdef void raise_error(int err, object message) except *:
  *     if not err:             # <<<<<<<<<<<<<<
@@ -796,7 +836,7 @@
   __pyx_t_1 = (!__pyx_v_err);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":128
+    /* "iocpsupport.pyx":129
  * cdef void raise_error(int err, object message) except *:
  *     if not err:
  *         err = GetLastError()             # <<<<<<<<<<<<<<
@@ -808,40 +848,44 @@
   }
   __pyx_L3:;
 
-  /* "iocpsupport.pyx":129
+  /* "iocpsupport.pyx":130
  *     if not err:
  *         err = GetLastError()
  *     raise WindowsError(message, err)             # <<<<<<<<<<<<<<
  * 
  * class Event:
  */
-  __pyx_t_2 = PyInt_FromLong(__pyx_v_err); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = __Pyx_GetName(__pyx_b, __pyx_n_s__WindowsError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+  __pyx_t_3 = PyInt_FromLong(__pyx_v_err); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
   __Pyx_INCREF(__pyx_v_message);
-  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_message);
+  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_message);
   __Pyx_GIVEREF(__pyx_v_message);
-  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
-  __Pyx_GIVEREF(__pyx_t_2);
-  __pyx_t_2 = 0;
-  __pyx_t_2 = PyObject_Call(__pyx_builtin_WindowsError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
-  __Pyx_Raise(__pyx_t_2, 0, 0);
+  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
+  __Pyx_GIVEREF(__pyx_t_3);
+  __pyx_t_3 = 0;
+  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
 
   goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_2);
   __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_AddTraceback("iocpsupport.raise_error");
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("iocpsupport.raise_error", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
 }
 
-/* "iocpsupport.pyx":132
+/* "iocpsupport.pyx":133
  * 
  * class Event:
  *     def __init__(self, callback, owner, **kw):             # <<<<<<<<<<<<<<
@@ -856,189 +900,218 @@
   PyObject *__pyx_v_callback = 0;
   PyObject *__pyx_v_owner = 0;
   PyObject *__pyx_v_kw = 0;
-  PyObject *__pyx_v_k;
-  PyObject *__pyx_v_v;
+  PyObject *__pyx_v_k = NULL;
+  PyObject *__pyx_v_v = NULL;
   PyObject *__pyx_r = NULL;
-  Py_ssize_t __pyx_t_1;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
   PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
+  Py_ssize_t __pyx_t_3;
+  PyObject *(*__pyx_t_4)(PyObject *);
   PyObject *__pyx_t_5 = NULL;
   PyObject *__pyx_t_6 = NULL;
-  int __pyx_t_7;
+  PyObject *__pyx_t_7 = NULL;
+  PyObject *(*__pyx_t_8)(PyObject *);
+  int __pyx_t_9;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__callback,&__pyx_n_s__owner,0};
   __Pyx_RefNannySetupContext("__init__");
   __pyx_self = __pyx_self;
   __pyx_v_kw = PyDict_New(); if (unlikely(!__pyx_v_kw)) return NULL;
   __Pyx_GOTREF(__pyx_v_kw);
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[3] = {0,0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
-    }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback);
-      if (likely(values[1])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
       }
-      case  2:
-      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__owner);
-      if (likely(values[2])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  2:
+        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__owner);
+        if (likely(values[2])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
       }
-    }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kw, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kw, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
     }
     __pyx_v_self = values[0];
     __pyx_v_callback = values[1];
     __pyx_v_owner = values[2];
-  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
-    goto __pyx_L5_argtuple_error;
-  } else {
-    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
-    __pyx_v_callback = PyTuple_GET_ITEM(__pyx_args, 1);
-    __pyx_v_owner = PyTuple_GET_ITEM(__pyx_args, 2);
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_DECREF(__pyx_v_kw);
-  __Pyx_AddTraceback("iocpsupport.Event.__init__");
+  __Pyx_DECREF(__pyx_v_kw); __pyx_v_kw = 0;
+  __Pyx_AddTraceback("iocpsupport.Event.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
-  __pyx_v_k = Py_None; __Pyx_INCREF(Py_None);
-  __pyx_v_v = Py_None; __Pyx_INCREF(Py_None);
-
-  /* "iocpsupport.pyx":133
+
+  /* "iocpsupport.pyx":134
  * class Event:
  *     def __init__(self, callback, owner, **kw):
  *         self.callback = callback             # <<<<<<<<<<<<<<
  *         self.owner = owner
  *         for k, v in kw.items():
  */
-  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__callback, __pyx_v_callback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-
-  /* "iocpsupport.pyx":134
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__callback, __pyx_v_callback) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "iocpsupport.pyx":135
  *     def __init__(self, callback, owner, **kw):
  *         self.callback = callback
  *         self.owner = owner             # <<<<<<<<<<<<<<
  *         for k, v in kw.items():
  *             setattr(self, k, v)
  */
-  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__owner, __pyx_v_owner) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-
-  /* "iocpsupport.pyx":135
+  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__owner, __pyx_v_owner) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "iocpsupport.pyx":136
  *         self.callback = callback
  *         self.owner = owner
  *         for k, v in kw.items():             # <<<<<<<<<<<<<<
  *             setattr(self, k, v)
  * 
  */
-  if (unlikely(__pyx_v_kw == Py_None)) {
-    PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'items'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
+  if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
+    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "items"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
   }
-  __pyx_t_2 = PyDict_Items(__pyx_v_kw); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_2);
-  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
-    __pyx_t_1 = 0; __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
+  __pyx_t_1 = PyDict_Items(__pyx_v_kw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
+    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
+    __pyx_t_4 = NULL;
   } else {
-    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
   }
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   for (;;) {
-    if (likely(PyList_CheckExact(__pyx_t_3))) {
-      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
-      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++;
-    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
-      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
-      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++;
+    if (PyList_CheckExact(__pyx_t_2)) {
+      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
+      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
+    } else if (PyTuple_CheckExact(__pyx_t_2)) {
+      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
+      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
     } else {
-      __pyx_t_2 = PyIter_Next(__pyx_t_3);
-      if (!__pyx_t_2) {
-        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
+      if (unlikely(!__pyx_t_1)) {
+        if (PyErr_Occurred()) {
+          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
+          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
         break;
       }
-      __Pyx_GOTREF(__pyx_t_2);
+      __Pyx_GOTREF(__pyx_t_1);
     }
-    if (PyTuple_CheckExact(__pyx_t_2) && likely(PyTuple_GET_SIZE(__pyx_t_2) == 2)) {
-      PyObject* tuple = __pyx_t_2;
-      __pyx_t_4 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_4);
-      __pyx_t_5 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_5);
-      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __Pyx_DECREF(__pyx_v_k);
-      __pyx_v_k = __pyx_t_4;
-      __pyx_t_4 = 0;
-      __Pyx_DECREF(__pyx_v_v);
-      __pyx_v_v = __pyx_t_5;
-      __pyx_t_5 = 0;
+    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
+      PyObject* sequence = __pyx_t_1;
+      if (likely(PyTuple_CheckExact(sequence))) {
+        if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
+          if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
+          else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
+          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
+        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
+      } else {
+        if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
+          if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
+          else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
+          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
+        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
+      }
+      __Pyx_INCREF(__pyx_t_5);
+      __Pyx_INCREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
     } else {
-      __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      Py_ssize_t index = -1;
+      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_7);
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
+      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
+      __Pyx_GOTREF(__pyx_t_5);
+      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
       __Pyx_GOTREF(__pyx_t_6);
-      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __pyx_t_4 = __Pyx_UnpackItem(__pyx_t_6, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_5 = __Pyx_UnpackItem(__pyx_t_6, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_5);
-      if (__Pyx_EndUnpack(__pyx_t_6, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      __Pyx_DECREF(__pyx_v_k);
-      __pyx_v_k = __pyx_t_4;
-      __pyx_t_4 = 0;
-      __Pyx_DECREF(__pyx_v_v);
-      __pyx_v_v = __pyx_t_5;
-      __pyx_t_5 = 0;
+      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      goto __pyx_L9_unpacking_done;
+      __pyx_L8_unpacking_failed:;
+      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
+      if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_L9_unpacking_done:;
     }
-
-    /* "iocpsupport.pyx":136
+    __Pyx_XDECREF(__pyx_v_k);
+    __pyx_v_k = __pyx_t_5;
+    __pyx_t_5 = 0;
+    __Pyx_XDECREF(__pyx_v_v);
+    __pyx_v_v = __pyx_t_6;
+    __pyx_t_6 = 0;
+
+    /* "iocpsupport.pyx":137
  *         self.owner = owner
  *         for k, v in kw.items():
  *             setattr(self, k, v)             # <<<<<<<<<<<<<<
  * 
  * cdef class CompletionPort:
  */
-    __pyx_t_2 = __pyx_v_self;
-    __Pyx_INCREF(__pyx_t_2);
-    __pyx_t_7 = PyObject_SetAttr(__pyx_t_2, __pyx_v_k, __pyx_v_v); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __pyx_t_9 = PyObject_SetAttr(__pyx_v_self, __pyx_v_k, __pyx_v_v); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   }
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
   __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_AddTraceback("iocpsupport.Event.__init__");
+  __Pyx_XDECREF(__pyx_t_7);
+  __Pyx_AddTraceback("iocpsupport.Event.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
-  __Pyx_DECREF(__pyx_v_kw);
-  __Pyx_DECREF(__pyx_v_k);
-  __Pyx_DECREF(__pyx_v_v);
+  __Pyx_XDECREF(__pyx_v_kw);
+  __Pyx_XDECREF(__pyx_v_k);
+  __Pyx_XDECREF(__pyx_v_v);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":140
+/* "iocpsupport.pyx":141
  * cdef class CompletionPort:
  *     cdef HANDLE port
  *     def __init__(self):             # <<<<<<<<<<<<<<
@@ -1050,15 +1123,18 @@
 static int __pyx_pf_11iocpsupport_14CompletionPort___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
   __pyx_t_11iocpsupport_HANDLE __pyx_v_res;
   int __pyx_r;
+  __Pyx_RefNannyDeclarations
   int __pyx_t_1;
-  int __pyx_t_2;
-  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("__init__");
   if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
     __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
   if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
 
-  /* "iocpsupport.pyx":142
+  /* "iocpsupport.pyx":143
  *     def __init__(self):
  *         cdef HANDLE res
  *         res = CreateIoCompletionPort(INVALID_HANDLE_VALUE, 0, 0, 0)             # <<<<<<<<<<<<<<
@@ -1067,7 +1143,7 @@
  */
   __pyx_v_res = CreateIoCompletionPort(INVALID_HANDLE_VALUE, 0, 0, 0);
 
-  /* "iocpsupport.pyx":143
+  /* "iocpsupport.pyx":144
  *         cdef HANDLE res
  *         res = CreateIoCompletionPort(INVALID_HANDLE_VALUE, 0, 0, 0)
  *         if not res:             # <<<<<<<<<<<<<<
@@ -1077,110 +1153,114 @@
   __pyx_t_1 = (!__pyx_v_res);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":144
+    /* "iocpsupport.pyx":145
  *         res = CreateIoCompletionPort(INVALID_HANDLE_VALUE, 0, 0, 0)
  *         if not res:
  *             raise_error(0, 'CreateIoCompletionPort')             # <<<<<<<<<<<<<<
  *         self.port = res
  * 
  */
-    __pyx_t_2 = 0;
-    __pyx_t_3 = ((PyObject *)__pyx_n_s_1);
-    __Pyx_INCREF(__pyx_t_3);
-    __pyx_f_11iocpsupport_raise_error(__pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __pyx_t_2 = ((PyObject *)__pyx_n_s_1);
+    __Pyx_INCREF(__pyx_t_2);
+    __pyx_f_11iocpsupport_raise_error(0, __pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
     goto __pyx_L5;
   }
   __pyx_L5:;
 
-  /* "iocpsupport.pyx":145
+  /* "iocpsupport.pyx":146
  *         if not res:
  *             raise_error(0, 'CreateIoCompletionPort')
  *         self.port = res             # <<<<<<<<<<<<<<
  * 
- *     def addHandle(self, long handle, long key=0):
+ *     def addHandle(self, HANDLE handle, size_t key=0):
  */
   ((struct __pyx_obj_11iocpsupport_CompletionPort *)__pyx_v_self)->port = __pyx_v_res;
 
   __pyx_r = 0;
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_AddTraceback("iocpsupport.CompletionPort.__init__");
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = -1;
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":147
+/* "iocpsupport.pyx":148
  *         self.port = res
  * 
- *     def addHandle(self, long handle, long key=0):             # <<<<<<<<<<<<<<
+ *     def addHandle(self, HANDLE handle, size_t key=0):             # <<<<<<<<<<<<<<
  *         cdef HANDLE res
  *         res = CreateIoCompletionPort(handle, self.port, key, 0)
  */
 
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_1addHandle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_1addHandle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
-  long __pyx_v_handle;
-  long __pyx_v_key;
+  __pyx_t_11iocpsupport_HANDLE __pyx_v_handle;
+  size_t __pyx_v_key;
   __pyx_t_11iocpsupport_HANDLE __pyx_v_res;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   int __pyx_t_1;
-  int __pyx_t_2;
-  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__handle,&__pyx_n_s__key,0};
   __Pyx_RefNannySetupContext("addHandle");
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[2] = {0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
-    }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__handle);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      if (kw_args > 0) {
-        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
-        if (value) { values[1] = value; kw_args--; }
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__handle);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
+          if (value) { values[1] = value; kw_args--; }
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addHandle") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    } else {
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        break;
+        default: goto __pyx_L5_argtuple_error;
       }
     }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addHandle") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    }
-    __pyx_v_handle = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_handle == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_handle = __Pyx_PyInt_AsSize_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     if (values[1]) {
-      __pyx_v_key = __Pyx_PyInt_AsLong(values[1]); if (unlikely((__pyx_v_key == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      __pyx_v_key = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_key == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     } else {
-      __pyx_v_key = ((long)0);
-    }
-  } else {
-    __pyx_v_key = ((long)0);
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  2: __pyx_v_key = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_key == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      case  1: __pyx_v_handle = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_handle == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      break;
-      default: goto __pyx_L5_argtuple_error;
+      __pyx_v_key = ((size_t)0);
     }
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("addHandle", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __Pyx_RaiseArgtupleInvalid("addHandle", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.CompletionPort.addHandle");
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.addHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "iocpsupport.pyx":149
- *     def addHandle(self, long handle, long key=0):
+  /* "iocpsupport.pyx":150
+ *     def addHandle(self, HANDLE handle, size_t key=0):
  *         cdef HANDLE res
  *         res = CreateIoCompletionPort(handle, self.port, key, 0)             # <<<<<<<<<<<<<<
  *         if not res:
@@ -1188,7 +1268,7 @@
  */
   __pyx_v_res = CreateIoCompletionPort(__pyx_v_handle, ((struct __pyx_obj_11iocpsupport_CompletionPort *)__pyx_v_self)->port, __pyx_v_key, 0);
 
-  /* "iocpsupport.pyx":150
+  /* "iocpsupport.pyx":151
  *         cdef HANDLE res
  *         res = CreateIoCompletionPort(handle, self.port, key, 0)
  *         if not res:             # <<<<<<<<<<<<<<
@@ -1198,18 +1278,17 @@
   __pyx_t_1 = (!__pyx_v_res);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":151
+    /* "iocpsupport.pyx":152
  *         res = CreateIoCompletionPort(handle, self.port, key, 0)
  *         if not res:
  *             raise_error(0, 'CreateIoCompletionPort')             # <<<<<<<<<<<<<<
  * 
  *     def getEvent(self, long timeout):
  */
-    __pyx_t_2 = 0;
-    __pyx_t_3 = ((PyObject *)__pyx_n_s_1);
-    __Pyx_INCREF(__pyx_t_3);
-    __pyx_f_11iocpsupport_raise_error(__pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __pyx_t_2 = ((PyObject *)__pyx_n_s_1);
+    __Pyx_INCREF(__pyx_t_2);
+    __pyx_f_11iocpsupport_raise_error(0, __pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
     goto __pyx_L6;
   }
   __pyx_L6:;
@@ -1217,8 +1296,8 @@
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_AddTraceback("iocpsupport.CompletionPort.addHandle");
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.addHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -1226,12 +1305,12 @@
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":153
+/* "iocpsupport.pyx":154
  *             raise_error(0, 'CreateIoCompletionPort')
  * 
  *     def getEvent(self, long timeout):             # <<<<<<<<<<<<<<
  *         cdef PyThreadState *_save
- *         cdef unsigned long bytes, key, rc
+ *         cdef unsigned long bytes, rc
  */
 
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_2getEvent(PyObject *__pyx_v_self, PyObject *__pyx_arg_timeout); /*proto*/
@@ -1239,29 +1318,32 @@
   long __pyx_v_timeout;
   struct PyThreadState *__pyx_v__save;
   unsigned long __pyx_v_bytes;
-  unsigned long __pyx_v_key;
   unsigned long __pyx_v_rc;
+  size_t __pyx_v_key;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_v_ov;
-  PyObject *__pyx_v_obj;
+  PyObject *__pyx_v_obj = NULL;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   int __pyx_t_1;
   PyObject *__pyx_t_2 = NULL;
   PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("getEvent");
   assert(__pyx_arg_timeout); {
-    __pyx_v_timeout = __Pyx_PyInt_AsLong(__pyx_arg_timeout); if (unlikely((__pyx_v_timeout == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_timeout = __Pyx_PyInt_AsLong(__pyx_arg_timeout); if (unlikely((__pyx_v_timeout == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.CompletionPort.getEvent");
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.getEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
-  __pyx_v_obj = Py_None; __Pyx_INCREF(Py_None);
-
-  /* "iocpsupport.pyx":158
+
+  /* "iocpsupport.pyx":160
  *         cdef myOVERLAPPED *ov
  * 
  *         _save = PyEval_SaveThread()             # <<<<<<<<<<<<<<
@@ -1270,7 +1352,7 @@
  */
   __pyx_v__save = PyEval_SaveThread();
 
-  /* "iocpsupport.pyx":159
+  /* "iocpsupport.pyx":161
  * 
  *         _save = PyEval_SaveThread()
  *         rc = GetQueuedCompletionStatus(self.port, &bytes, &key, <OVERLAPPED **>&ov, timeout)             # <<<<<<<<<<<<<<
@@ -1279,7 +1361,7 @@
  */
   __pyx_v_rc = GetQueuedCompletionStatus(((struct __pyx_obj_11iocpsupport_CompletionPort *)__pyx_v_self)->port, (&__pyx_v_bytes), (&__pyx_v_key), ((OVERLAPPED **)(&__pyx_v_ov)), __pyx_v_timeout);
 
-  /* "iocpsupport.pyx":160
+  /* "iocpsupport.pyx":162
  *         _save = PyEval_SaveThread()
  *         rc = GetQueuedCompletionStatus(self.port, &bytes, &key, <OVERLAPPED **>&ov, timeout)
  *         PyEval_RestoreThread(_save)             # <<<<<<<<<<<<<<
@@ -1288,7 +1370,7 @@
  */
   PyEval_RestoreThread(__pyx_v__save);
 
-  /* "iocpsupport.pyx":162
+  /* "iocpsupport.pyx":164
  *         PyEval_RestoreThread(_save)
  * 
  *         if not rc:             # <<<<<<<<<<<<<<
@@ -1298,7 +1380,7 @@
   __pyx_t_1 = (!__pyx_v_rc);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":163
+    /* "iocpsupport.pyx":165
  * 
  *         if not rc:
  *             rc = GetLastError()             # <<<<<<<<<<<<<<
@@ -1310,7 +1392,7 @@
   }
   /*else*/ {
 
-    /* "iocpsupport.pyx":165
+    /* "iocpsupport.pyx":167
  *             rc = GetLastError()
  *         else:
  *             rc = 0             # <<<<<<<<<<<<<<
@@ -1321,7 +1403,7 @@
   }
   __pyx_L5:;
 
-  /* "iocpsupport.pyx":167
+  /* "iocpsupport.pyx":169
  *             rc = 0
  * 
  *         obj = None             # <<<<<<<<<<<<<<
@@ -1329,10 +1411,9 @@
  *             if ov.obj:
  */
   __Pyx_INCREF(Py_None);
-  __Pyx_DECREF(__pyx_v_obj);
   __pyx_v_obj = Py_None;
 
-  /* "iocpsupport.pyx":168
+  /* "iocpsupport.pyx":170
  * 
  *         obj = None
  *         if ov:             # <<<<<<<<<<<<<<
@@ -1342,7 +1423,7 @@
   __pyx_t_1 = (__pyx_v_ov != 0);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":169
+    /* "iocpsupport.pyx":171
  *         obj = None
  *         if ov:
  *             if ov.obj:             # <<<<<<<<<<<<<<
@@ -1352,7 +1433,7 @@
     __pyx_t_1 = (__pyx_v_ov->obj != 0);
     if (__pyx_t_1) {
 
-      /* "iocpsupport.pyx":170
+      /* "iocpsupport.pyx":172
  *         if ov:
  *             if ov.obj:
  *                 obj = <object>ov.obj             # <<<<<<<<<<<<<<
@@ -1363,7 +1444,7 @@
       __Pyx_DECREF(__pyx_v_obj);
       __pyx_v_obj = ((PyObject *)__pyx_v_ov->obj);
 
-      /* "iocpsupport.pyx":171
+      /* "iocpsupport.pyx":173
  *             if ov.obj:
  *                 obj = <object>ov.obj
  *                 Py_DECREF(obj) # we are stealing a reference here             # <<<<<<<<<<<<<<
@@ -1375,7 +1456,7 @@
     }
     __pyx_L7:;
 
-    /* "iocpsupport.pyx":172
+    /* "iocpsupport.pyx":174
  *                 obj = <object>ov.obj
  *                 Py_DECREF(obj) # we are stealing a reference here
  *             PyMem_Free(ov)             # <<<<<<<<<<<<<<
@@ -1387,21 +1468,21 @@
   }
   __pyx_L6:;
 
-  /* "iocpsupport.pyx":174
+  /* "iocpsupport.pyx":176
  *             PyMem_Free(ov)
  * 
  *         return (rc, bytes, key, obj)             # <<<<<<<<<<<<<<
  * 
- *     def postEvent(self, unsigned long bytes, unsigned long key, obj):
+ *     def postEvent(self, unsigned long bytes, size_t key, obj):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_rc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_rc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_3 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_v_key); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_key); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(((PyObject *)__pyx_t_5));
   PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
   __Pyx_GIVEREF(__pyx_t_2);
@@ -1426,19 +1507,19 @@
   __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_AddTraceback("iocpsupport.CompletionPort.getEvent");
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.getEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
-  __Pyx_DECREF(__pyx_v_obj);
+  __Pyx_XDECREF(__pyx_v_obj);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":176
+/* "iocpsupport.pyx":178
  *         return (rc, bytes, key, obj)
  * 
- *     def postEvent(self, unsigned long bytes, unsigned long key, obj):             # <<<<<<<<<<<<<<
+ *     def postEvent(self, unsigned long bytes, size_t key, obj):             # <<<<<<<<<<<<<<
  *         cdef myOVERLAPPED *ov
  *         cdef unsigned long rc
  */
@@ -1446,68 +1527,74 @@
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_3postEvent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_3postEvent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
   unsigned long __pyx_v_bytes;
-  unsigned long __pyx_v_key;
+  size_t __pyx_v_key;
   PyObject *__pyx_v_obj = 0;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_v_ov;
   unsigned long __pyx_v_rc;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   int __pyx_t_1;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_2;
   PyObject *__pyx_t_3 = NULL;
-  int __pyx_t_4;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__bytes,&__pyx_n_s__key,&__pyx_n_s__obj,0};
   __Pyx_RefNannySetupContext("postEvent");
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[3] = {0,0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bytes);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("postEvent", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  2:
+        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
+        if (likely(values[2])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("postEvent", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "postEvent") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
     }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bytes);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
-      if (likely(values[1])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("postEvent", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      }
-      case  2:
-      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
-      if (likely(values[2])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("postEvent", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      }
-    }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "postEvent") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    }
-    __pyx_v_bytes = __Pyx_PyInt_AsUnsignedLong(values[0]); if (unlikely((__pyx_v_bytes == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    __pyx_v_key = __Pyx_PyInt_AsUnsignedLong(values[1]); if (unlikely((__pyx_v_key == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_bytes = __Pyx_PyInt_AsUnsignedLong(values[0]); if (unlikely((__pyx_v_bytes == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_key = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_key == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     __pyx_v_obj = values[2];
-  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
-    goto __pyx_L5_argtuple_error;
-  } else {
-    __pyx_v_bytes = __Pyx_PyInt_AsUnsignedLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_bytes == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    __pyx_v_key = __Pyx_PyInt_AsUnsignedLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_key == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 2);
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("postEvent", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __Pyx_RaiseArgtupleInvalid("postEvent", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.CompletionPort.postEvent");
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.postEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "iocpsupport.pyx":180
+  /* "iocpsupport.pyx":182
  *         cdef unsigned long rc
  * 
  *         if obj is not None:             # <<<<<<<<<<<<<<
@@ -1517,29 +1604,26 @@
   __pyx_t_1 = (__pyx_v_obj != Py_None);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":181
+    /* "iocpsupport.pyx":183
  * 
  *         if obj is not None:
  *             ov = makeOV()             # <<<<<<<<<<<<<<
  *             Py_INCREF(obj) # give ov its own reference to obj
  *             ov.obj = <PyObject *>obj
  */
-    __pyx_t_2 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __pyx_v_ov = __pyx_t_2;
 
-    /* "iocpsupport.pyx":182
+    /* "iocpsupport.pyx":184
  *         if obj is not None:
  *             ov = makeOV()
  *             Py_INCREF(obj) # give ov its own reference to obj             # <<<<<<<<<<<<<<
  *             ov.obj = <PyObject *>obj
  *         else:
  */
-    __pyx_t_3 = __pyx_v_obj;
-    __Pyx_INCREF(__pyx_t_3);
-    Py_INCREF(__pyx_t_3);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-
-    /* "iocpsupport.pyx":183
+    Py_INCREF(__pyx_v_obj);
+
+    /* "iocpsupport.pyx":185
  *             ov = makeOV()
  *             Py_INCREF(obj) # give ov its own reference to obj
  *             ov.obj = <PyObject *>obj             # <<<<<<<<<<<<<<
@@ -1551,7 +1635,7 @@
   }
   /*else*/ {
 
-    /* "iocpsupport.pyx":185
+    /* "iocpsupport.pyx":187
  *             ov.obj = <PyObject *>obj
  *         else:
  *             ov = NULL             # <<<<<<<<<<<<<<
@@ -1562,7 +1646,7 @@
   }
   __pyx_L6:;
 
-  /* "iocpsupport.pyx":187
+  /* "iocpsupport.pyx":189
  *             ov = NULL
  * 
  *         rc = PostQueuedCompletionStatus(self.port, bytes, key, <OVERLAPPED *>ov)             # <<<<<<<<<<<<<<
@@ -1571,7 +1655,7 @@
  */
   __pyx_v_rc = PostQueuedCompletionStatus(((struct __pyx_obj_11iocpsupport_CompletionPort *)__pyx_v_self)->port, __pyx_v_bytes, __pyx_v_key, ((OVERLAPPED *)__pyx_v_ov));
 
-  /* "iocpsupport.pyx":188
+  /* "iocpsupport.pyx":190
  * 
  *         rc = PostQueuedCompletionStatus(self.port, bytes, key, <OVERLAPPED *>ov)
  *         if not rc:             # <<<<<<<<<<<<<<
@@ -1581,17 +1665,16 @@
   __pyx_t_1 = (!__pyx_v_rc);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":189
+    /* "iocpsupport.pyx":191
  *         rc = PostQueuedCompletionStatus(self.port, bytes, key, <OVERLAPPED *>ov)
  *         if not rc:
  *             raise_error(0, 'PostQueuedCompletionStatus')             # <<<<<<<<<<<<<<
  * 
  *     def __del__(self):
  */
-    __pyx_t_4 = 0;
     __pyx_t_3 = ((PyObject *)__pyx_n_s_2);
     __Pyx_INCREF(__pyx_t_3);
-    __pyx_f_11iocpsupport_raise_error(__pyx_t_4, __pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_f_11iocpsupport_raise_error(0, __pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     goto __pyx_L7;
   }
@@ -1601,7 +1684,7 @@
   goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_AddTraceback("iocpsupport.CompletionPort.postEvent");
+  __Pyx_AddTraceback("iocpsupport.CompletionPort.postEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -1609,7 +1692,7 @@
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":191
+/* "iocpsupport.pyx":193
  *             raise_error(0, 'PostQueuedCompletionStatus')
  * 
  *     def __del__(self):             # <<<<<<<<<<<<<<
@@ -1620,9 +1703,10 @@
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
 static PyObject *__pyx_pf_11iocpsupport_14CompletionPort_4__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__del__");
 
-  /* "iocpsupport.pyx":192
+  /* "iocpsupport.pyx":194
  * 
  *     def __del__(self):
  *         CloseHandle(self.port)             # <<<<<<<<<<<<<<
@@ -1637,56 +1721,57 @@
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":194
+/* "iocpsupport.pyx":196
  *         CloseHandle(self.port)
  * 
  * def makesockaddr(object buff):             # <<<<<<<<<<<<<<
  *     cdef void *mem_buffer
- *     cdef int size
+ *     cdef Py_ssize_t size
  */
 
 static PyObject *__pyx_pf_11iocpsupport_makesockaddr(PyObject *__pyx_self, PyObject *__pyx_v_buff); /*proto*/
 static PyMethodDef __pyx_mdef_11iocpsupport_makesockaddr = {__Pyx_NAMESTR("makesockaddr"), (PyCFunction)__pyx_pf_11iocpsupport_makesockaddr, METH_O, __Pyx_DOCSTR(0)};
 static PyObject *__pyx_pf_11iocpsupport_makesockaddr(PyObject *__pyx_self, PyObject *__pyx_v_buff) {
   void *__pyx_v_mem_buffer;
-  int __pyx_v_size;
+  Py_ssize_t __pyx_v_size;
   PyObject *__pyx_r = NULL;
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_t_2;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("makesockaddr");
   __pyx_self = __pyx_self;
 
-  /* "iocpsupport.pyx":198
- *     cdef int size
+  /* "iocpsupport.pyx":200
+ *     cdef Py_ssize_t size
  * 
  *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)             # <<<<<<<<<<<<<<
  *     # XXX: this should really return the address family as well
  *     return _makesockaddr(<sockaddr *>mem_buffer, size)
  */
-  __pyx_t_1 = __pyx_v_buff;
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_AsReadBuffer(__pyx_t_1, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "iocpsupport.pyx":200
+  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "iocpsupport.pyx":202
  *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)
  *     # XXX: this should really return the address family as well
  *     return _makesockaddr(<sockaddr *>mem_buffer, size)             # <<<<<<<<<<<<<<
  * 
- * cdef object _makesockaddr(sockaddr *addr, int len):
+ * cdef object _makesockaddr(sockaddr *addr, Py_ssize_t len):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __pyx_f_11iocpsupport__makesockaddr(((struct sockaddr *)__pyx_v_mem_buffer), __pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
+  __pyx_t_2 = __pyx_f_11iocpsupport__makesockaddr(((struct sockaddr *)__pyx_v_mem_buffer), __pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_r = __pyx_t_2;
+  __pyx_t_2 = 0;
   goto __pyx_L0;
 
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("iocpsupport.makesockaddr");
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("iocpsupport.makesockaddr", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -1694,36 +1779,38 @@
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":202
+/* "iocpsupport.pyx":204
  *     return _makesockaddr(<sockaddr *>mem_buffer, size)
  * 
- * cdef object _makesockaddr(sockaddr *addr, int len):             # <<<<<<<<<<<<<<
+ * cdef object _makesockaddr(sockaddr *addr, Py_ssize_t len):             # <<<<<<<<<<<<<<
  *     cdef sockaddr_in *sin
  *     cdef sockaddr_in6 *sin6
  */
 
-static  PyObject *__pyx_f_11iocpsupport__makesockaddr(struct sockaddr *__pyx_v_addr, int __pyx_v_len) {
+static PyObject *__pyx_f_11iocpsupport__makesockaddr(struct sockaddr *__pyx_v_addr, Py_ssize_t __pyx_v_len) {
   struct sockaddr_in *__pyx_v_sin;
   struct sockaddr_in6 *__pyx_v_sin6;
   char __pyx_v_buff[256];
   int __pyx_v_rc;
   __pyx_t_11iocpsupport_DWORD __pyx_v_buff_size;
-  PyObject *__pyx_v_host;
+  PyObject *__pyx_v_host = NULL;
   unsigned short __pyx_v_sa_port;
-  PyObject *__pyx_v_port;
+  PyObject *__pyx_v_port = NULL;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   int __pyx_t_1;
   PyObject *__pyx_t_2 = NULL;
   PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
-  int __pyx_t_5;
-  unsigned short __pyx_t_6;
-  PyObject *__pyx_t_7 = NULL;
+  unsigned short __pyx_t_5;
+  PyObject *__pyx_t_6 = NULL;
+  PyObject *(*__pyx_t_7)(PyObject *);
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("_makesockaddr");
-  __pyx_v_host = Py_None; __Pyx_INCREF(Py_None);
-  __pyx_v_port = Py_None; __Pyx_INCREF(Py_None);
-
-  /* "iocpsupport.pyx":207
+
+  /* "iocpsupport.pyx":209
  *     cdef char buff[256]
  *     cdef int rc
  *     cdef DWORD buff_size = sizeof(buff)             # <<<<<<<<<<<<<<
@@ -1732,7 +1819,7 @@
  */
   __pyx_v_buff_size = (sizeof(__pyx_v_buff));
 
-  /* "iocpsupport.pyx":208
+  /* "iocpsupport.pyx":210
  *     cdef int rc
  *     cdef DWORD buff_size = sizeof(buff)
  *     if not len:             # <<<<<<<<<<<<<<
@@ -1742,7 +1829,7 @@
   __pyx_t_1 = (!__pyx_v_len);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":209
+    /* "iocpsupport.pyx":211
  *     cdef DWORD buff_size = sizeof(buff)
  *     if not len:
  *         return None             # <<<<<<<<<<<<<<
@@ -1757,7 +1844,7 @@
   }
   __pyx_L3:;
 
-  /* "iocpsupport.pyx":213
+  /* "iocpsupport.pyx":215
  *         sin = <sockaddr_in *>addr
  *         return PyString_FromString(inet_ntoa(sin.sin_addr)), ntohs(sin.sin_port)
  *     elif addr.sa_family == AF_INET6:             # <<<<<<<<<<<<<<
@@ -1766,7 +1853,7 @@
  */
   switch (__pyx_v_addr->sa_family) {
 
-    /* "iocpsupport.pyx":210
+    /* "iocpsupport.pyx":212
  *     if not len:
  *         return None
  *     if addr.sa_family == AF_INET:             # <<<<<<<<<<<<<<
@@ -1775,7 +1862,7 @@
  */
     case AF_INET:
 
-    /* "iocpsupport.pyx":211
+    /* "iocpsupport.pyx":213
  *         return None
  *     if addr.sa_family == AF_INET:
  *         sin = <sockaddr_in *>addr             # <<<<<<<<<<<<<<
@@ -1784,7 +1871,7 @@
  */
     __pyx_v_sin = ((struct sockaddr_in *)__pyx_v_addr);
 
-    /* "iocpsupport.pyx":212
+    /* "iocpsupport.pyx":214
  *     if addr.sa_family == AF_INET:
  *         sin = <sockaddr_in *>addr
  *         return PyString_FromString(inet_ntoa(sin.sin_addr)), ntohs(sin.sin_port)             # <<<<<<<<<<<<<<
@@ -1792,11 +1879,11 @@
  *         sin6 = <sockaddr_in6 *>addr
  */
     __Pyx_XDECREF(__pyx_r);
-    __pyx_t_2 = PyString_FromString(inet_ntoa(__pyx_v_sin->sin_addr)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = PyString_FromString(inet_ntoa(__pyx_v_sin->sin_addr)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_3 = PyInt_FromLong(ntohs(__pyx_v_sin->sin_port)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_3 = PyInt_FromLong(ntohs(__pyx_v_sin->sin_port)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(((PyObject *)__pyx_t_4));
     PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
     __Pyx_GIVEREF(__pyx_t_2);
@@ -1809,7 +1896,7 @@
     goto __pyx_L0;
     break;
 
-    /* "iocpsupport.pyx":213
+    /* "iocpsupport.pyx":215
  *         sin = <sockaddr_in *>addr
  *         return PyString_FromString(inet_ntoa(sin.sin_addr)), ntohs(sin.sin_port)
  *     elif addr.sa_family == AF_INET6:             # <<<<<<<<<<<<<<
@@ -1818,7 +1905,7 @@
  */
     case AF_INET6:
 
-    /* "iocpsupport.pyx":214
+    /* "iocpsupport.pyx":216
  *         return PyString_FromString(inet_ntoa(sin.sin_addr)), ntohs(sin.sin_port)
  *     elif addr.sa_family == AF_INET6:
  *         sin6 = <sockaddr_in6 *>addr             # <<<<<<<<<<<<<<
@@ -1827,7 +1914,7 @@
  */
     __pyx_v_sin6 = ((struct sockaddr_in6 *)__pyx_v_addr);
 
-    /* "iocpsupport.pyx":215
+    /* "iocpsupport.pyx":217
  *     elif addr.sa_family == AF_INET6:
  *         sin6 = <sockaddr_in6 *>addr
  *         rc = WSAAddressToStringA(addr, sizeof(sockaddr_in6), NULL, buff, &buff_size)             # <<<<<<<<<<<<<<
@@ -1836,7 +1923,7 @@
  */
     __pyx_v_rc = WSAAddressToStringA(__pyx_v_addr, (sizeof(struct sockaddr_in6)), NULL, __pyx_v_buff, (&__pyx_v_buff_size));
 
-    /* "iocpsupport.pyx":216
+    /* "iocpsupport.pyx":218
  *         sin6 = <sockaddr_in6 *>addr
  *         rc = WSAAddressToStringA(addr, sizeof(sockaddr_in6), NULL, buff, &buff_size)
  *         if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
@@ -1846,98 +1933,115 @@
     __pyx_t_1 = (__pyx_v_rc == SOCKET_ERROR);
     if (__pyx_t_1) {
 
-      /* "iocpsupport.pyx":217
+      /* "iocpsupport.pyx":219
  *         rc = WSAAddressToStringA(addr, sizeof(sockaddr_in6), NULL, buff, &buff_size)
  *         if rc == SOCKET_ERROR:
  *             raise_error(0, 'WSAAddressToString')             # <<<<<<<<<<<<<<
  *         host, sa_port = PyString_FromString(buff), ntohs(sin6.sin6_port)
  *         host, port = host.rsplit(':', 1)
  */
-      __pyx_t_5 = 0;
       __pyx_t_4 = ((PyObject *)__pyx_n_s__WSAAddressToString);
       __Pyx_INCREF(__pyx_t_4);
-      __pyx_f_11iocpsupport_raise_error(__pyx_t_5, __pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_f_11iocpsupport_raise_error(0, __pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       goto __pyx_L4;
     }
     __pyx_L4:;
 
-    /* "iocpsupport.pyx":218
+    /* "iocpsupport.pyx":220
  *         if rc == SOCKET_ERROR:
  *             raise_error(0, 'WSAAddressToString')
  *         host, sa_port = PyString_FromString(buff), ntohs(sin6.sin6_port)             # <<<<<<<<<<<<<<
  *         host, port = host.rsplit(':', 1)
  *         port = int(port)
  */
-    __pyx_t_4 = PyString_FromString(__pyx_v_buff); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_4 = PyString_FromString(__pyx_v_buff); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_6 = ntohs(__pyx_v_sin6->sin6_port);
-    __Pyx_DECREF(__pyx_v_host);
+    __pyx_t_5 = ntohs(__pyx_v_sin6->sin6_port);
     __pyx_v_host = __pyx_t_4;
     __pyx_t_4 = 0;
-    __pyx_v_sa_port = __pyx_t_6;
-
-    /* "iocpsupport.pyx":219
+    __pyx_v_sa_port = __pyx_t_5;
+
+    /* "iocpsupport.pyx":221
  *             raise_error(0, 'WSAAddressToString')
  *         host, sa_port = PyString_FromString(buff), ntohs(sin6.sin6_port)
  *         host, port = host.rsplit(':', 1)             # <<<<<<<<<<<<<<
  *         port = int(port)
  *         assert host[0] == '['
  */
-    __pyx_t_4 = PyObject_GetAttr(__pyx_v_host, __pyx_n_s__rsplit); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_4 = PyObject_GetAttr(__pyx_v_host, __pyx_n_s__rsplit); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    if (PyTuple_CheckExact(__pyx_t_3) && likely(PyTuple_GET_SIZE(__pyx_t_3) == 2)) {
-      PyObject* tuple = __pyx_t_3;
-      __pyx_t_4 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_4);
-      __pyx_t_2 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_2);
+    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
+      PyObject* sequence = __pyx_t_3;
+      if (likely(PyTuple_CheckExact(sequence))) {
+        if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
+          if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
+          else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
+          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
+        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
+      } else {
+        if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
+          if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
+          else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
+          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
+        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
+      }
+      __Pyx_INCREF(__pyx_t_4);
+      __Pyx_INCREF(__pyx_t_2);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __Pyx_DECREF(__pyx_v_host);
-      __pyx_v_host = __pyx_t_4;
-      __pyx_t_4 = 0;
-      __Pyx_DECREF(__pyx_v_port);
-      __pyx_v_port = __pyx_t_2;
-      __pyx_t_2 = 0;
     } else {
-      __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_7);
+      Py_ssize_t index = -1;
+      __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_4 = __Pyx_UnpackItem(__pyx_t_7, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
+      index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_2 = __Pyx_UnpackItem(__pyx_t_7, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
       __Pyx_GOTREF(__pyx_t_2);
-      if (__Pyx_EndUnpack(__pyx_t_7, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-      __Pyx_DECREF(__pyx_v_host);
-      __pyx_v_host = __pyx_t_4;
-      __pyx_t_4 = 0;
-      __Pyx_DECREF(__pyx_v_port);
-      __pyx_v_port = __pyx_t_2;
-      __pyx_t_2 = 0;
+      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      goto __pyx_L6_unpacking_done;
+      __pyx_L5_unpacking_failed:;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
+      if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_L6_unpacking_done:;
     }
-
-    /* "iocpsupport.pyx":220
+    __Pyx_DECREF(__pyx_v_host);
+    __pyx_v_host = __pyx_t_4;
+    __pyx_t_4 = 0;
+    __pyx_v_port = __pyx_t_2;
+    __pyx_t_2 = 0;
+
+    /* "iocpsupport.pyx":222
  *         host, sa_port = PyString_FromString(buff), ntohs(sin6.sin6_port)
  *         host, port = host.rsplit(':', 1)
  *         port = int(port)             # <<<<<<<<<<<<<<
  *         assert host[0] == '['
  *         assert host[-1] == ']'
  */
-    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(((PyObject *)__pyx_t_3));
     __Pyx_INCREF(__pyx_v_port);
     PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_port);
     __Pyx_GIVEREF(__pyx_v_port);
-    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_2);
     __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
     __Pyx_DECREF(__pyx_v_port);
     __pyx_v_port = __pyx_t_2;
     __pyx_t_2 = 0;
 
-    /* "iocpsupport.pyx":221
+    /* "iocpsupport.pyx":223
  *         host, port = host.rsplit(':', 1)
  *         port = int(port)
  *         assert host[0] == '['             # <<<<<<<<<<<<<<
@@ -1945,20 +2049,17 @@
  *         assert port == sa_port
  */
     #ifndef CYTHON_WITHOUT_ASSERTIONS
-    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_host, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_host, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, ((PyObject *)__pyx_kp_s_5), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_1 = __Pyx_PyString_Equals(__pyx_t_2, ((PyObject *)__pyx_kp_s_5), Py_EQ); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     if (unlikely(!__pyx_t_1)) {
       PyErr_SetNone(PyExc_AssertionError);
-      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     }
     #endif
 
-    /* "iocpsupport.pyx":222
+    /* "iocpsupport.pyx":224
  *         port = int(port)
  *         assert host[0] == '['
  *         assert host[-1] == ']'             # <<<<<<<<<<<<<<
@@ -1966,20 +2067,17 @@
  *         return host[1:-1], port
  */
     #ifndef CYTHON_WITHOUT_ASSERTIONS
-    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_host, -1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_kp_s_6), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_host, -1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_1 = __Pyx_PyString_Equals(__pyx_t_2, ((PyObject *)__pyx_kp_s_6), Py_EQ); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
     if (unlikely(!__pyx_t_1)) {
       PyErr_SetNone(PyExc_AssertionError);
-      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     }
     #endif
 
-    /* "iocpsupport.pyx":223
+    /* "iocpsupport.pyx":225
  *         assert host[0] == '['
  *         assert host[-1] == ']'
  *         assert port == sa_port             # <<<<<<<<<<<<<<
@@ -1987,20 +2085,20 @@
  *     else:
  */
     #ifndef CYTHON_WITHOUT_ASSERTIONS
-    __pyx_t_2 = PyInt_FromLong(__pyx_v_sa_port); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = PyInt_FromLong(__pyx_v_sa_port); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_3 = PyObject_RichCompare(__pyx_v_port, __pyx_t_2, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_3 = PyObject_RichCompare(__pyx_v_port, __pyx_t_2, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     if (unlikely(!__pyx_t_1)) {
       PyErr_SetNone(PyExc_AssertionError);
-      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     }
     #endif
 
-    /* "iocpsupport.pyx":224
+    /* "iocpsupport.pyx":226
  *         assert host[-1] == ']'
  *         assert port == sa_port
  *         return host[1:-1], port             # <<<<<<<<<<<<<<
@@ -2008,9 +2106,9 @@
  *         return PyString_FromStringAndSize(addr.sa_data, sizeof(addr.sa_data))
  */
     __Pyx_XDECREF(__pyx_r);
-    __pyx_t_3 = __Pyx_PySequence_GetSlice(__pyx_v_host, 1, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_3 = __Pyx_PySequence_GetSlice(__pyx_v_host, 1, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(((PyObject *)__pyx_t_2));
     PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
     __Pyx_GIVEREF(__pyx_t_3);
@@ -2024,7 +2122,7 @@
     break;
     default:
 
-    /* "iocpsupport.pyx":226
+    /* "iocpsupport.pyx":228
  *         return host[1:-1], port
  *     else:
  *         return PyString_FromStringAndSize(addr.sa_data, sizeof(addr.sa_data))             # <<<<<<<<<<<<<<
@@ -2032,7 +2130,7 @@
  * cdef object fillinetaddr(sockaddr_in *dest, object addr):
  */
     __Pyx_XDECREF(__pyx_r);
-    __pyx_t_2 = PyString_FromStringAndSize(__pyx_v_addr->sa_data, (sizeof(__pyx_v_addr->sa_data))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_2 = PyString_FromStringAndSize(__pyx_v_addr->sa_data, (sizeof(__pyx_v_addr->sa_data))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_2);
     __pyx_r = __pyx_t_2;
     __pyx_t_2 = 0;
@@ -2046,18 +2144,18 @@
   __Pyx_XDECREF(__pyx_t_2);
   __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_XDECREF(__pyx_t_7);
-  __Pyx_AddTraceback("iocpsupport._makesockaddr");
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_AddTraceback("iocpsupport._makesockaddr", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = 0;
   __pyx_L0:;
-  __Pyx_DECREF(__pyx_v_host);
-  __Pyx_DECREF(__pyx_v_port);
+  __Pyx_XDECREF(__pyx_v_host);
+  __Pyx_XDECREF(__pyx_v_port);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":228
+/* "iocpsupport.pyx":230
  *         return PyString_FromStringAndSize(addr.sa_data, sizeof(addr.sa_data))
  * 
  * cdef object fillinetaddr(sockaddr_in *dest, object addr):             # <<<<<<<<<<<<<<
@@ -2065,66 +2163,89 @@
  *     cdef unsigned long res
  */
 
-static  PyObject *__pyx_f_11iocpsupport_fillinetaddr(struct sockaddr_in *__pyx_v_dest, PyObject *__pyx_v_addr) {
+static PyObject *__pyx_f_11iocpsupport_fillinetaddr(struct sockaddr_in *__pyx_v_dest, PyObject *__pyx_v_addr) {
   unsigned short __pyx_v_port;
   unsigned long __pyx_v_res;
   char *__pyx_v_hoststr;
-  PyObject *__pyx_v_host;
+  PyObject *__pyx_v_host = NULL;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
   PyObject *__pyx_t_2 = NULL;
-  unsigned short __pyx_t_3;
-  PyObject *__pyx_t_4 = NULL;
-  char *__pyx_t_5;
-  int __pyx_t_6;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *(*__pyx_t_4)(PyObject *);
+  unsigned short __pyx_t_5;
+  char *__pyx_t_6;
+  int __pyx_t_7;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("fillinetaddr");
-  __pyx_v_host = Py_None; __Pyx_INCREF(Py_None);
-
-  /* "iocpsupport.pyx":232
+
+  /* "iocpsupport.pyx":234
  *     cdef unsigned long res
  *     cdef char *hoststr
  *     host, port = addr             # <<<<<<<<<<<<<<
  * 
  *     hoststr = PyString_AsString(host)
  */
-  if (PyTuple_CheckExact(__pyx_v_addr) && likely(PyTuple_GET_SIZE(__pyx_v_addr) == 2)) {
-    PyObject* tuple = __pyx_v_addr;
-    __pyx_t_1 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_1);
-    __pyx_t_2 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_2);
-    __pyx_t_3 = __Pyx_PyInt_AsUnsignedShort(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_DECREF(__pyx_v_host);
-    __pyx_v_host = __pyx_t_1;
-    __pyx_t_1 = 0;
-    __pyx_v_port = __pyx_t_3;
+  if ((likely(PyTuple_CheckExact(__pyx_v_addr))) || (PyList_CheckExact(__pyx_v_addr))) {
+    PyObject* sequence = __pyx_v_addr;
+    if (likely(PyTuple_CheckExact(sequence))) {
+      if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
+        if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
+        else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
+        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      }
+      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
+      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
+    } else {
+      if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
+        if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
+        else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
+        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      }
+      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
+      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
+    }
+    __Pyx_INCREF(__pyx_t_1);
+    __Pyx_INCREF(__pyx_t_2);
   } else {
-    __pyx_t_4 = PyObject_GetIter(__pyx_v_addr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_1 = __Pyx_UnpackItem(__pyx_t_4, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    Py_ssize_t index = -1;
+    __pyx_t_3 = PyObject_GetIter(__pyx_v_addr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
+    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
     __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_2 = __Pyx_UnpackItem(__pyx_t_4, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
     __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_3 = __Pyx_PyInt_AsUnsignedShort(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    if (__Pyx_EndUnpack(__pyx_t_4, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __Pyx_DECREF(__pyx_v_host);
-    __pyx_v_host = __pyx_t_1;
-    __pyx_t_1 = 0;
-    __pyx_v_port = __pyx_t_3;
+    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    goto __pyx_L4_unpacking_done;
+    __pyx_L3_unpacking_failed:;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
+    if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
+    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_L4_unpacking_done:;
   }
-
-  /* "iocpsupport.pyx":234
+  __pyx_t_5 = __Pyx_PyInt_AsUnsignedShort(__pyx_t_2); if (unlikely((__pyx_t_5 == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_v_host = __pyx_t_1;
+  __pyx_t_1 = 0;
+  __pyx_v_port = __pyx_t_5;
+
+  /* "iocpsupport.pyx":236
  *     host, port = addr
  * 
  *     hoststr = PyString_AsString(host)             # <<<<<<<<<<<<<<
  *     res = inet_addr(hoststr)
  *     if res == INADDR_ANY:
  */
-  __pyx_t_5 = PyString_AsString(__pyx_v_host); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_v_hoststr = __pyx_t_5;
-
-  /* "iocpsupport.pyx":235
+  __pyx_t_6 = PyString_AsString(__pyx_v_host); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_hoststr = __pyx_t_6;
+
+  /* "iocpsupport.pyx":237
  * 
  *     hoststr = PyString_AsString(host)
  *     res = inet_addr(hoststr)             # <<<<<<<<<<<<<<
@@ -2133,30 +2254,30 @@
  */
   __pyx_v_res = inet_addr(__pyx_v_hoststr);
 
-  /* "iocpsupport.pyx":236
+  /* "iocpsupport.pyx":238
  *     hoststr = PyString_AsString(host)
  *     res = inet_addr(hoststr)
  *     if res == INADDR_ANY:             # <<<<<<<<<<<<<<
  *         raise ValueError, 'invalid IP address'
  *     dest.sin_addr.s_addr = res
  */
-  __pyx_t_6 = (__pyx_v_res == INADDR_ANY);
-  if (__pyx_t_6) {
-
-    /* "iocpsupport.pyx":237
+  __pyx_t_7 = (__pyx_v_res == INADDR_ANY);
+  if (__pyx_t_7) {
+
+    /* "iocpsupport.pyx":239
  *     res = inet_addr(hoststr)
  *     if res == INADDR_ANY:
  *         raise ValueError, 'invalid IP address'             # <<<<<<<<<<<<<<
  *     dest.sin_addr.s_addr = res
  * 
  */
-    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_7), 0);
-    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    goto __pyx_L3;
+    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_7), 0, 0);
+    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    goto __pyx_L5;
   }
-  __pyx_L3:;
-
-  /* "iocpsupport.pyx":238
+  __pyx_L5:;
+
+  /* "iocpsupport.pyx":240
  *     if res == INADDR_ANY:
  *         raise ValueError, 'invalid IP address'
  *     dest.sin_addr.s_addr = res             # <<<<<<<<<<<<<<
@@ -2165,7 +2286,7 @@
  */
   __pyx_v_dest->sin_addr.s_addr = __pyx_v_res;
 
-  /* "iocpsupport.pyx":240
+  /* "iocpsupport.pyx":242
  *     dest.sin_addr.s_addr = res
  * 
  *     dest.sin_port = htons(port)             # <<<<<<<<<<<<<<
@@ -2179,17 +2300,17 @@
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_AddTraceback("iocpsupport.fillinetaddr");
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("iocpsupport.fillinetaddr", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = 0;
   __pyx_L0:;
-  __Pyx_DECREF(__pyx_v_host);
+  __Pyx_XDECREF(__pyx_v_host);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":242
+/* "iocpsupport.pyx":244
  *     dest.sin_port = htons(port)
  * 
  * def AllocateReadBuffer(int size):             # <<<<<<<<<<<<<<
@@ -2202,20 +2323,24 @@
 static PyObject *__pyx_pf_11iocpsupport_1AllocateReadBuffer(PyObject *__pyx_self, PyObject *__pyx_arg_size) {
   int __pyx_v_size;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("AllocateReadBuffer");
   __pyx_self = __pyx_self;
   assert(__pyx_arg_size); {
-    __pyx_v_size = __Pyx_PyInt_AsInt(__pyx_arg_size); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_size = __Pyx_PyInt_AsInt(__pyx_arg_size); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.AllocateReadBuffer");
+  __Pyx_AddTraceback("iocpsupport.AllocateReadBuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "iocpsupport.pyx":243
+  /* "iocpsupport.pyx":245
  * 
  * def AllocateReadBuffer(int size):
  *     return PyBuffer_New(size)             # <<<<<<<<<<<<<<
@@ -2223,7 +2348,7 @@
  * def maxAddrLen(long s):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyBuffer_New(__pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyBuffer_New(__pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -2233,7 +2358,7 @@
   goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("iocpsupport.AllocateReadBuffer");
+  __Pyx_AddTraceback("iocpsupport.AllocateReadBuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -2241,7 +2366,7 @@
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":245
+/* "iocpsupport.pyx":247
  *     return PyBuffer_New(size)
  * 
  * def maxAddrLen(long s):             # <<<<<<<<<<<<<<
@@ -2257,22 +2382,25 @@
   int __pyx_v_size;
   int __pyx_v_rc;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   int __pyx_t_1;
-  int __pyx_t_2;
-  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("maxAddrLen");
   __pyx_self = __pyx_self;
   assert(__pyx_arg_s); {
-    __pyx_v_s = __Pyx_PyInt_AsLong(__pyx_arg_s); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_s = __Pyx_PyInt_AsLong(__pyx_arg_s); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.maxAddrLen");
+  __Pyx_AddTraceback("iocpsupport.maxAddrLen", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "iocpsupport.pyx":249
+  /* "iocpsupport.pyx":251
  *     cdef int size, rc
  * 
  *     size = sizeof(wsa_pi)             # <<<<<<<<<<<<<<
@@ -2281,7 +2409,7 @@
  */
   __pyx_v_size = (sizeof(__pyx_v_wsa_pi));
 
-  /* "iocpsupport.pyx":250
+  /* "iocpsupport.pyx":252
  * 
  *     size = sizeof(wsa_pi)
  *     rc = getsockopt(s, SOL_SOCKET, SO_PROTOCOL_INFO, <char *>&wsa_pi, &size)             # <<<<<<<<<<<<<<
@@ -2290,7 +2418,7 @@
  */
   __pyx_v_rc = getsockopt(__pyx_v_s, SOL_SOCKET, SO_PROTOCOL_INFO, ((char *)(&__pyx_v_wsa_pi)), (&__pyx_v_size));
 
-  /* "iocpsupport.pyx":251
+  /* "iocpsupport.pyx":253
  *     size = sizeof(wsa_pi)
  *     rc = getsockopt(s, SOL_SOCKET, SO_PROTOCOL_INFO, <char *>&wsa_pi, &size)
  *     if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
@@ -2300,23 +2428,22 @@
   __pyx_t_1 = (__pyx_v_rc == SOCKET_ERROR);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":252
+    /* "iocpsupport.pyx":254
  *     rc = getsockopt(s, SOL_SOCKET, SO_PROTOCOL_INFO, <char *>&wsa_pi, &size)
  *     if rc == SOCKET_ERROR:
  *         raise_error(WSAGetLastError(), 'getsockopt')             # <<<<<<<<<<<<<<
  *     return wsa_pi.iMaxSockAddr
  * 
  */
-    __pyx_t_2 = WSAGetLastError();
-    __pyx_t_3 = ((PyObject *)__pyx_n_s__getsockopt);
-    __Pyx_INCREF(__pyx_t_3);
-    __pyx_f_11iocpsupport_raise_error(__pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __pyx_t_2 = ((PyObject *)__pyx_n_s__getsockopt);
+    __Pyx_INCREF(__pyx_t_2);
+    __pyx_f_11iocpsupport_raise_error(WSAGetLastError(), __pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
     goto __pyx_L5;
   }
   __pyx_L5:;
 
-  /* "iocpsupport.pyx":253
+  /* "iocpsupport.pyx":255
  *     if rc == SOCKET_ERROR:
  *         raise_error(WSAGetLastError(), 'getsockopt')
  *     return wsa_pi.iMaxSockAddr             # <<<<<<<<<<<<<<
@@ -2324,17 +2451,17 @@
  * cdef int getAddrFamily(SOCKET s) except *:
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_3 = PyInt_FromLong(__pyx_v_wsa_pi.iMaxSockAddr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_r = __pyx_t_3;
-  __pyx_t_3 = 0;
+  __pyx_t_2 = PyInt_FromLong(__pyx_v_wsa_pi.iMaxSockAddr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_r = __pyx_t_2;
+  __pyx_t_2 = 0;
   goto __pyx_L0;
 
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_AddTraceback("iocpsupport.maxAddrLen");
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("iocpsupport.maxAddrLen", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -2342,7 +2469,7 @@
   return __pyx_r;
 }
 
-/* "iocpsupport.pyx":255
+/* "iocpsupport.pyx":257
  *     return wsa_pi.iMaxSockAddr
  * 
  * cdef int getAddrFamily(SOCKET s) except *:             # <<<<<<<<<<<<<<
@@ -2350,17 +2477,20 @@
  *     cdef int size, rc
  */
 
-static  int __pyx_f_11iocpsupport_getAddrFamily(__pyx_t_11iocpsupport_SOCKET __pyx_v_s) {
+static int __pyx_f_11iocpsupport_getAddrFamily(__pyx_t_11iocpsupport_SOCKET __pyx_v_s) {
   WSAPROTOCOL_INFO __pyx_v_wsa_pi;
   int __pyx_v_size;
   int __pyx_v_rc;
   int __pyx_r;
+  __Pyx_RefNannyDeclarations
   int __pyx_t_1;
-  int __pyx_t_2;
-  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("getAddrFamily");
 
-  /* "iocpsupport.pyx":259
+  /* "iocpsupport.pyx":261
  *     cdef int size, rc
  * 
  *     size = sizeof(wsa_pi)             # <<<<<<<<<<<<<<
@@ -2369,7 +2499,7 @@
  */
   __pyx_v_size = (sizeof(__pyx_v_wsa_pi));
 
-  /* "iocpsupport.pyx":260
+  /* "iocpsupport.pyx":262
  * 
  *     size = sizeof(wsa_pi)
  *     rc = getsockopt(s, SOL_SOCKET, SO_PROTOCOL_INFO, <char *>&wsa_pi, &size)             # <<<<<<<<<<<<<<
@@ -2378,7 +2508,7 @@
  */
   __pyx_v_rc = getsockopt(__pyx_v_s, SOL_SOCKET, SO_PROTOCOL_INFO, ((char *)(&__pyx_v_wsa_pi)), (&__pyx_v_size));
 
-  /* "iocpsupport.pyx":261
+  /* "iocpsupport.pyx":263
  *     size = sizeof(wsa_pi)
  *     rc = getsockopt(s, SOL_SOCKET, SO_PROTOCOL_INFO, <char *>&wsa_pi, &size)
  *     if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
@@ -2388,23 +2518,22 @@
   __pyx_t_1 = (__pyx_v_rc == SOCKET_ERROR);
   if (__pyx_t_1) {
 
-    /* "iocpsupport.pyx":262
+    /* "iocpsupport.pyx":264
  *     rc = getsockopt(s, SOL_SOCKET, SO_PROTOCOL_INFO, <char *>&wsa_pi, &size)
  *     if rc == SOCKET_ERROR:
  *         raise_error(WSAGetLastError(), 'getsockopt')             # <<<<<<<<<<<<<<
  *     return wsa_pi.iAddressFamily
  * 
  */
-    __pyx_t_2 = WSAGetLastError();
-    __pyx_t_3 = ((PyObject *)__pyx_n_s__getsockopt);
-    __Pyx_INCREF(__pyx_t_3);
-    __pyx_f_11iocpsupport_raise_error(__pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __pyx_t_2 = ((PyObject *)__pyx_n_s__getsockopt);
+    __Pyx_INCREF(__pyx_t_2);
+    __pyx_f_11iocpsupport_raise_error(WSAGetLastError(), __pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
     goto __pyx_L3;
   }
   __pyx_L3:;
 
-  /* "iocpsupport.pyx":263
+  /* "iocpsupport.pyx":265
  *     if rc == SOCKET_ERROR:
  *         raise_error(WSAGetLastError(), 'getsockopt')
  *     return wsa_pi.iAddressFamily             # <<<<<<<<<<<<<<
@@ -2417,15 +2546,15 @@
   __pyx_r = 0;
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_AddTraceback("iocpsupport.getAddrFamily");
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("iocpsupport.getAddrFamily", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = 0;
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":5
+/* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":5
  * 
  * 
  * def accept(long listening, long accepting, object buff, object obj):             # <<<<<<<<<<<<<<
@@ -2442,141 +2571,145 @@
   PyObject *__pyx_v_buff = 0;
   PyObject *__pyx_v_obj = 0;
   unsigned long __pyx_v_bytes;
-  int __pyx_v_size;
   int __pyx_v_rc;
+  Py_ssize_t __pyx_v_size;
   void *__pyx_v_mem_buffer;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_v_ov;
   PyObject *__pyx_r = NULL;
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_t_2;
-  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_3;
-  int __pyx_t_4;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_2;
+  int __pyx_t_3;
+  PyObject *__pyx_t_4 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__listening,&__pyx_n_s__accepting,&__pyx_n_s__buff,&__pyx_n_s__obj,0};
   __Pyx_RefNannySetupContext("accept");
   __pyx_self = __pyx_self;
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[4] = {0,0,0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
-      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
-    }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__listening);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__accepting);
-      if (likely(values[1])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
       }
-      case  2:
-      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buff);
-      if (likely(values[2])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__listening);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__accepting);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  2:
+        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buff);
+        if (likely(values[2])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  3:
+        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
+        if (likely(values[3])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 3); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
       }
-      case  3:
-      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
-      if (likely(values[3])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, 3); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "accept") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
-    }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "accept") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
     }
     __pyx_v_listening = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_listening == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     __pyx_v_accepting = __Pyx_PyInt_AsLong(values[1]); if (unlikely((__pyx_v_accepting == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     __pyx_v_buff = values[2];
     __pyx_v_obj = values[3];
-  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
-    goto __pyx_L5_argtuple_error;
-  } else {
-    __pyx_v_listening = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_listening == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    __pyx_v_accepting = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_accepting == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    __pyx_v_buff = PyTuple_GET_ITEM(__pyx_args, 2);
-    __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 3);
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
   __Pyx_RaiseArgtupleInvalid("accept", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.accept");
+  __Pyx_AddTraceback("iocpsupport.accept", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":14
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":15
  *     cdef myOVERLAPPED *ov
  * 
  *     PyObject_AsWriteBuffer(buff, &mem_buffer, &size)             # <<<<<<<<<<<<<<
  * 
  *     ov = makeOV()
  */
-  __pyx_t_1 = __pyx_v_buff;
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_AsWriteBuffer(__pyx_t_1, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":16
+  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":17
  *     PyObject_AsWriteBuffer(buff, &mem_buffer, &size)
  * 
  *     ov = makeOV()             # <<<<<<<<<<<<<<
  *     if obj is not None:
  *         ov.obj = <PyObject *>obj
  */
-  __pyx_t_3 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_v_ov = __pyx_t_3;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":17
+  __pyx_t_2 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_ov = __pyx_t_2;
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":18
  * 
  *     ov = makeOV()
  *     if obj is not None:             # <<<<<<<<<<<<<<
  *         ov.obj = <PyObject *>obj
  * 
  */
-  __pyx_t_4 = (__pyx_v_obj != Py_None);
-  if (__pyx_t_4) {
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":18
+  __pyx_t_3 = (__pyx_v_obj != Py_None);
+  if (__pyx_t_3) {
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":19
  *     ov = makeOV()
  *     if obj is not None:
  *         ov.obj = <PyObject *>obj             # <<<<<<<<<<<<<<
  * 
- *     rc = lpAcceptEx(listening, accepting, mem_buffer, 0, size / 2, size / 2,
+ *     rc = lpAcceptEx(listening, accepting, mem_buffer, 0,
  */
     __pyx_v_ov->obj = ((struct PyObject *)__pyx_v_obj);
     goto __pyx_L6;
   }
   __pyx_L6:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":21
- * 
- *     rc = lpAcceptEx(listening, accepting, mem_buffer, 0, size / 2, size / 2,
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":23
+ *     rc = lpAcceptEx(listening, accepting, mem_buffer, 0,
+ *                     <DWORD>size / 2, <DWORD>size / 2,
  *                     &bytes, <OVERLAPPED *>ov)             # <<<<<<<<<<<<<<
  *     if not rc:
  *         rc = WSAGetLastError()
  */
-  __pyx_v_rc = lpAcceptEx(__pyx_v_listening, __pyx_v_accepting, __pyx_v_mem_buffer, 0, __Pyx_div_long(__pyx_v_size, 2), __Pyx_div_long(__pyx_v_size, 2), (&__pyx_v_bytes), ((OVERLAPPED *)__pyx_v_ov));
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":22
- *     rc = lpAcceptEx(listening, accepting, mem_buffer, 0, size / 2, size / 2,
+  __pyx_v_rc = lpAcceptEx(__pyx_v_listening, __pyx_v_accepting, __pyx_v_mem_buffer, 0, (((__pyx_t_11iocpsupport_DWORD)__pyx_v_size) / 2), (((__pyx_t_11iocpsupport_DWORD)__pyx_v_size) / 2), (&__pyx_v_bytes), ((OVERLAPPED *)__pyx_v_ov));
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":24
+ *                     <DWORD>size / 2, <DWORD>size / 2,
  *                     &bytes, <OVERLAPPED *>ov)
  *     if not rc:             # <<<<<<<<<<<<<<
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  */
-  __pyx_t_4 = (!__pyx_v_rc);
-  if (__pyx_t_4) {
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":23
+  __pyx_t_3 = (!__pyx_v_rc);
+  if (__pyx_t_3) {
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":25
  *                     &bytes, <OVERLAPPED *>ov)
  *     if not rc:
  *         rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -2585,17 +2718,17 @@
  */
     __pyx_v_rc = WSAGetLastError();
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":24
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":26
  *     if not rc:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
  *             return rc
  * 
  */
-    __pyx_t_4 = (__pyx_v_rc != ERROR_IO_PENDING);
-    if (__pyx_t_4) {
-
-      /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":25
+    __pyx_t_3 = (__pyx_v_rc != ERROR_IO_PENDING);
+    if (__pyx_t_3) {
+
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":27
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  *             return rc             # <<<<<<<<<<<<<<
@@ -2603,10 +2736,10 @@
  *     # operation is in progress
  */
       __Pyx_XDECREF(__pyx_r);
-      __pyx_t_1 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_1);
-      __pyx_r = __pyx_t_1;
-      __pyx_t_1 = 0;
+      __pyx_t_4 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_r = __pyx_t_4;
+      __pyx_t_4 = 0;
       goto __pyx_L0;
       goto __pyx_L8;
     }
@@ -2615,19 +2748,16 @@
   }
   __pyx_L7:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":28
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":30
  * 
  *     # operation is in progress
  *     Py_XINCREF(obj)             # <<<<<<<<<<<<<<
  *     return 0
  * 
  */
-  __pyx_t_1 = __pyx_v_obj;
-  __Pyx_INCREF(__pyx_t_1);
-  Py_XINCREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":29
+  Py_XINCREF(__pyx_v_obj);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":31
  *     # operation is in progress
  *     Py_XINCREF(obj)
  *     return 0             # <<<<<<<<<<<<<<
@@ -2642,8 +2772,8 @@
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("iocpsupport.accept");
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("iocpsupport.accept", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -2651,12 +2781,12 @@
   return __pyx_r;
 }
 
-/* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":31
+/* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":33
  *     return 0
  * 
  * def get_accept_addrs(long s, object buff):             # <<<<<<<<<<<<<<
  *     cdef WSAPROTOCOL_INFO wsa_pi
- *     cdef int size, locallen, remotelen
+ *     cdef int locallen, remotelen
  */
 
 static PyObject *__pyx_pf_11iocpsupport_4get_accept_addrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
@@ -2664,105 +2794,109 @@
 static PyObject *__pyx_pf_11iocpsupport_4get_accept_addrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
   long __pyx_v_s;
   PyObject *__pyx_v_buff = 0;
-  int __pyx_v_size;
   int __pyx_v_locallen;
   int __pyx_v_remotelen;
+  Py_ssize_t __pyx_v_size;
   void *__pyx_v_mem_buffer;
   struct sockaddr *__pyx_v_localaddr;
   struct sockaddr *__pyx_v_remoteaddr;
   PyObject *__pyx_r = NULL;
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_t_2;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
   PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__buff,0};
   __Pyx_RefNannySetupContext("get_accept_addrs");
   __pyx_self = __pyx_self;
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[2] = {0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buff);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("get_accept_addrs", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_accept_addrs") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
     }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buff);
-      if (likely(values[1])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("get_accept_addrs", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      }
-    }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_accept_addrs") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    }
-    __pyx_v_s = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_s = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     __pyx_v_buff = values[1];
-  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
-    goto __pyx_L5_argtuple_error;
-  } else {
-    __pyx_v_s = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    __pyx_v_buff = PyTuple_GET_ITEM(__pyx_args, 1);
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("get_accept_addrs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __Pyx_RaiseArgtupleInvalid("get_accept_addrs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.get_accept_addrs");
+  __Pyx_AddTraceback("iocpsupport.get_accept_addrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":37
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":40
  *     cdef sockaddr *localaddr, *remoteaddr
  * 
  *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)             # <<<<<<<<<<<<<<
  * 
- *     lpGetAcceptExSockaddrs(mem_buffer, 0, size / 2, size / 2, &localaddr, &locallen, &remoteaddr, &remotelen)
- */
-  __pyx_t_1 = __pyx_v_buff;
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_AsReadBuffer(__pyx_t_1, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":39
- *     PyObject_AsReadBuffer(buff, &mem_buffer, &size)
- * 
- *     lpGetAcceptExSockaddrs(mem_buffer, 0, size / 2, size / 2, &localaddr, &locallen, &remoteaddr, &remotelen)             # <<<<<<<<<<<<<<
+ *     lpGetAcceptExSockaddrs(mem_buffer, 0, <DWORD>size / 2, <DWORD>size / 2,
+ */
+  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, (&__pyx_v_mem_buffer), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":43
+ * 
+ *     lpGetAcceptExSockaddrs(mem_buffer, 0, <DWORD>size / 2, <DWORD>size / 2,
+ *                            &localaddr, &locallen, &remoteaddr, &remotelen)             # <<<<<<<<<<<<<<
  *     return remoteaddr.sa_family, _makesockaddr(localaddr, locallen), _makesockaddr(remoteaddr, remotelen)
  * 
  */
-  lpGetAcceptExSockaddrs(__pyx_v_mem_buffer, 0, __Pyx_div_long(__pyx_v_size, 2), __Pyx_div_long(__pyx_v_size, 2), (&__pyx_v_localaddr), (&__pyx_v_locallen), (&__pyx_v_remoteaddr), (&__pyx_v_remotelen));
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":40
- * 
- *     lpGetAcceptExSockaddrs(mem_buffer, 0, size / 2, size / 2, &localaddr, &locallen, &remoteaddr, &remotelen)
+  lpGetAcceptExSockaddrs(__pyx_v_mem_buffer, 0, (((__pyx_t_11iocpsupport_DWORD)__pyx_v_size) / 2), (((__pyx_t_11iocpsupport_DWORD)__pyx_v_size) / 2), (&__pyx_v_localaddr), (&__pyx_v_locallen), (&__pyx_v_remoteaddr), (&__pyx_v_remotelen));
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":44
+ *     lpGetAcceptExSockaddrs(mem_buffer, 0, <DWORD>size / 2, <DWORD>size / 2,
+ *                            &localaddr, &locallen, &remoteaddr, &remotelen)
  *     return remoteaddr.sa_family, _makesockaddr(localaddr, locallen), _makesockaddr(remoteaddr, remotelen)             # <<<<<<<<<<<<<<
  * 
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyInt_FromLong(__pyx_v_remoteaddr->sa_family); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_3 = __pyx_f_11iocpsupport__makesockaddr(__pyx_v_localaddr, __pyx_v_locallen); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyInt_FromLong(__pyx_v_remoteaddr->sa_family); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = __pyx_f_11iocpsupport__makesockaddr(__pyx_v_localaddr, __pyx_v_locallen); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_4 = __pyx_f_11iocpsupport__makesockaddr(__pyx_v_remoteaddr, __pyx_v_remotelen); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = __pyx_f_11iocpsupport__makesockaddr(__pyx_v_remoteaddr, __pyx_v_remotelen); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(((PyObject *)__pyx_t_5));
-  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_1);
+  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_2);
   PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
   __Pyx_GIVEREF(__pyx_t_3);
   PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
   __Pyx_GIVEREF(__pyx_t_4);
-  __pyx_t_1 = 0;
+  __pyx_t_2 = 0;
   __pyx_t_3 = 0;
   __pyx_t_4 = 0;
   __pyx_r = ((PyObject *)__pyx_t_5);
@@ -2772,11 +2906,11 @@
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
   __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_AddTraceback("iocpsupport.get_accept_addrs");
+  __Pyx_AddTraceback("iocpsupport.get_accept_addrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -2784,7 +2918,7 @@
   return __pyx_r;
 }
 
-/* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":5
+/* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":5
  * 
  * 
  * def connect(long s, object addr, object obj):             # <<<<<<<<<<<<<<
@@ -2804,67 +2938,72 @@
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_v_ov;
   struct sockaddr __pyx_v_name;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
   int __pyx_t_2;
   int __pyx_t_3;
   int __pyx_t_4;
-  struct sockaddr_in *__pyx_t_5;
-  PyObject *__pyx_t_6 = NULL;
-  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_7;
+  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_5;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__addr,&__pyx_n_s__obj,0};
   __Pyx_RefNannySetupContext("connect");
   __pyx_self = __pyx_self;
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[3] = {0,0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
-    }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__addr);
-      if (likely(values[1])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
       }
-      case  2:
-      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
-      if (likely(values[2])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, 2); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__addr);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  2:
+        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
+        if (likely(values[2])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, 2); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
       }
-    }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "connect") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "connect") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
     }
     __pyx_v_s = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     __pyx_v_addr = values[1];
     __pyx_v_obj = values[2];
-  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
-    goto __pyx_L5_argtuple_error;
-  } else {
-    __pyx_v_s = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    __pyx_v_addr = PyTuple_GET_ITEM(__pyx_args, 1);
-    __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 2);
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
   __Pyx_RaiseArgtupleInvalid("connect", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.connect");
+  __Pyx_AddTraceback("iocpsupport.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":13
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":13
  *     cdef sockaddr name
  * 
  *     if not have_connectex:             # <<<<<<<<<<<<<<
@@ -2878,20 +3017,20 @@
   __pyx_t_3 = (!__pyx_t_2);
   if (__pyx_t_3) {
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":14
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":14
  * 
  *     if not have_connectex:
  *         raise ValueError, 'ConnectEx is not available on this system'             # <<<<<<<<<<<<<<
  * 
  *     family = getAddrFamily(s)
  */
-    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_8), 0);
+    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_8), 0, 0);
     {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     goto __pyx_L6;
   }
   __pyx_L6:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":16
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":16
  *         raise ValueError, 'ConnectEx is not available on this system'
  * 
  *     family = getAddrFamily(s)             # <<<<<<<<<<<<<<
@@ -2901,7 +3040,7 @@
   __pyx_t_4 = __pyx_f_11iocpsupport_getAddrFamily(__pyx_v_s); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_v_family = __pyx_t_4;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":17
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":17
  * 
  *     family = getAddrFamily(s)
  *     if family == AF_INET:             # <<<<<<<<<<<<<<
@@ -2911,37 +3050,33 @@
   __pyx_t_3 = (__pyx_v_family == AF_INET);
   if (__pyx_t_3) {
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":18
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":18
  *     family = getAddrFamily(s)
  *     if family == AF_INET:
  *         fillinetaddr(<sockaddr_in *>&name, addr)             # <<<<<<<<<<<<<<
  *     else:
  *         raise ValueError, 'unsupported address family'
  */
-    __pyx_t_5 = ((struct sockaddr_in *)(&__pyx_v_name));
-    __pyx_t_1 = __pyx_v_addr;
-    __Pyx_INCREF(__pyx_t_1);
-    __pyx_t_6 = __pyx_f_11iocpsupport_fillinetaddr(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_6);
+    __pyx_t_1 = __pyx_f_11iocpsupport_fillinetaddr(((struct sockaddr_in *)(&__pyx_v_name)), __pyx_v_addr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_1);
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
     goto __pyx_L7;
   }
   /*else*/ {
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":20
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":20
  *         fillinetaddr(<sockaddr_in *>&name, addr)
  *     else:
  *         raise ValueError, 'unsupported address family'             # <<<<<<<<<<<<<<
  *     name.sa_family = family
  * 
  */
-    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_9), 0);
+    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_9), 0, 0);
     {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   }
   __pyx_L7:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":21
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":21
  *     else:
  *         raise ValueError, 'unsupported address family'
  *     name.sa_family = family             # <<<<<<<<<<<<<<
@@ -2950,17 +3085,17 @@
  */
   __pyx_v_name.sa_family = __pyx_v_family;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":23
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":23
  *     name.sa_family = family
  * 
  *     ov = makeOV()             # <<<<<<<<<<<<<<
  *     if obj is not None:
  *         ov.obj = <PyObject *>obj
  */
-  __pyx_t_7 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_v_ov = __pyx_t_7;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":24
+  __pyx_t_5 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_ov = __pyx_t_5;
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":24
  * 
  *     ov = makeOV()
  *     if obj is not None:             # <<<<<<<<<<<<<<
@@ -2970,7 +3105,7 @@
   __pyx_t_3 = (__pyx_v_obj != Py_None);
   if (__pyx_t_3) {
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":25
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":25
  *     ov = makeOV()
  *     if obj is not None:
  *         ov.obj = <PyObject *>obj             # <<<<<<<<<<<<<<
@@ -2982,7 +3117,7 @@
   }
   __pyx_L8:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":27
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":27
  *         ov.obj = <PyObject *>obj
  * 
  *     rc = lpConnectEx(s, &name, sizeof(name), NULL, 0, NULL, <OVERLAPPED *>ov)             # <<<<<<<<<<<<<<
@@ -2991,7 +3126,7 @@
  */
   __pyx_v_rc = lpConnectEx(__pyx_v_s, (&__pyx_v_name), (sizeof(__pyx_v_name)), NULL, 0, NULL, ((OVERLAPPED *)__pyx_v_ov));
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":29
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":29
  *     rc = lpConnectEx(s, &name, sizeof(name), NULL, 0, NULL, <OVERLAPPED *>ov)
  * 
  *     if not rc:             # <<<<<<<<<<<<<<
@@ -3001,7 +3136,7 @@
   __pyx_t_3 = (!__pyx_v_rc);
   if (__pyx_t_3) {
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":30
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":30
  * 
  *     if not rc:
  *         rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -3010,7 +3145,7 @@
  */
     __pyx_v_rc = WSAGetLastError();
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":31
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":31
  *     if not rc:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
@@ -3020,7 +3155,7 @@
     __pyx_t_3 = (__pyx_v_rc != ERROR_IO_PENDING);
     if (__pyx_t_3) {
 
-      /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":32
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":32
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  *             return rc             # <<<<<<<<<<<<<<
@@ -3028,10 +3163,10 @@
  *     # operation is in progress
  */
       __Pyx_XDECREF(__pyx_r);
-      __pyx_t_6 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_6);
-      __pyx_r = __pyx_t_6;
-      __pyx_t_6 = 0;
+      __pyx_t_1 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_1);
+      __pyx_r = __pyx_t_1;
+      __pyx_t_1 = 0;
       goto __pyx_L0;
       goto __pyx_L10;
     }
@@ -3040,19 +3175,16 @@
   }
   __pyx_L9:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":35
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":35
  * 
  *     # operation is in progress
  *     Py_XINCREF(obj)             # <<<<<<<<<<<<<<
  *     return 0
  * 
  */
-  __pyx_t_6 = __pyx_v_obj;
-  __Pyx_INCREF(__pyx_t_6);
-  Py_XINCREF(__pyx_t_6);
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":36
+  Py_XINCREF(__pyx_v_obj);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":36
  *     # operation is in progress
  *     Py_XINCREF(obj)
  *     return 0             # <<<<<<<<<<<<<<
@@ -3067,8 +3199,7 @@
   goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_AddTraceback("iocpsupport.connect");
+  __Pyx_AddTraceback("iocpsupport.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -3076,11 +3207,11 @@
   return __pyx_r;
 }
 
-/* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":5
+/* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":5
  * 
  * 
  * def recv(long s, object bufflist, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
- *     cdef int rc, buffcount, i, res
+ *     cdef int rc, res
  *     cdef myOVERLAPPED *ov
  */
 
@@ -3092,60 +3223,77 @@
   PyObject *__pyx_v_obj = 0;
   unsigned long __pyx_v_flags;
   int __pyx_v_rc;
-  int __pyx_v_buffcount;
-  int __pyx_v_i;
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_v_ov;
   WSABUF *__pyx_v_ws_buf;
   unsigned long __pyx_v_bytes;
   struct PyObject **__pyx_v_buffers;
+  Py_ssize_t __pyx_v_i;
+  Py_ssize_t __pyx_v_size;
+  Py_ssize_t __pyx_v_buffcount;
   PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  void *__pyx_t_3;
+  void *__pyx_t_2;
+  Py_ssize_t __pyx_t_3;
   int __pyx_t_4;
-  int __pyx_t_5;
-  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_6;
-  int __pyx_t_7;
+  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_5;
+  int __pyx_t_6;
+  PyObject *__pyx_t_7 = NULL;
   PyObject *__pyx_t_8 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__bufflist,&__pyx_n_s__obj,&__pyx_n_s__flags,0};
   __Pyx_RefNannySetupContext("recv");
   __pyx_self = __pyx_self;
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[4] = {0,0,0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
-      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
-    }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bufflist);
-      if (likely(values[1])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
       }
-      case  2:
-      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
-      if (likely(values[2])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, 2); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bufflist);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  2:
+        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
+        if (likely(values[2])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, 2); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  3:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
+          if (value) { values[3] = value; kw_args--; }
+        }
       }
-      case  3:
-      if (kw_args > 0) {
-        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
-        if (value) { values[3] = value; kw_args--; }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "recv") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
-    }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "recv") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    } else {
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        break;
+        default: goto __pyx_L5_argtuple_error;
+      }
     }
     __pyx_v_s = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     __pyx_v_bufflist = values[1];
@@ -3155,163 +3303,151 @@
     } else {
       __pyx_v_flags = ((unsigned long)0);
     }
-  } else {
-    __pyx_v_flags = ((unsigned long)0);
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  4:
-      __pyx_v_flags = __Pyx_PyInt_AsUnsignedLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      case  3:
-      __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 2);
-      __pyx_v_bufflist = PyTuple_GET_ITEM(__pyx_args, 1);
-      __pyx_v_s = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      break;
-      default: goto __pyx_L5_argtuple_error;
-    }
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
   __Pyx_RaiseArgtupleInvalid("recv", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.recv");
+  __Pyx_AddTraceback("iocpsupport.recv", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
   __Pyx_INCREF(__pyx_v_bufflist);
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":12
- *     cdef PyObject **buffers
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":13
+ *     cdef Py_ssize_t i, size, buffcount
  * 
  *     bufflist = PySequence_Fast(bufflist, 'second argument needs to be a list')             # <<<<<<<<<<<<<<
  *     buffcount = PySequence_Fast_GET_SIZE(bufflist)
  *     buffers = PySequence_Fast_ITEMS(bufflist)
  */
-  __pyx_t_1 = __pyx_v_bufflist;
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_t_2 = PySequence_Fast(__pyx_t_1, __pyx_k_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_1 = PySequence_Fast(__pyx_v_bufflist, __pyx_k_10); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
   __Pyx_DECREF(__pyx_v_bufflist);
-  __pyx_v_bufflist = __pyx_t_2;
-  __pyx_t_2 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":13
+  __pyx_v_bufflist = __pyx_t_1;
+  __pyx_t_1 = 0;
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":14
  * 
  *     bufflist = PySequence_Fast(bufflist, 'second argument needs to be a list')
  *     buffcount = PySequence_Fast_GET_SIZE(bufflist)             # <<<<<<<<<<<<<<
  *     buffers = PySequence_Fast_ITEMS(bufflist)
  * 
  */
-  __pyx_t_2 = __pyx_v_bufflist;
-  __Pyx_INCREF(__pyx_t_2);
-  __pyx_v_buffcount = PySequence_Fast_GET_SIZE(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":14
+  __pyx_v_buffcount = PySequence_Fast_GET_SIZE(__pyx_v_bufflist);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":15
  *     bufflist = PySequence_Fast(bufflist, 'second argument needs to be a list')
  *     buffcount = PySequence_Fast_GET_SIZE(bufflist)
  *     buffers = PySequence_Fast_ITEMS(bufflist)             # <<<<<<<<<<<<<<
  * 
  *     ws_buf = <WSABUF *>PyMem_Malloc(buffcount*sizeof(WSABUF))
  */
-  __pyx_t_2 = __pyx_v_bufflist;
-  __Pyx_INCREF(__pyx_t_2);
-  __pyx_v_buffers = PySequence_Fast_ITEMS(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":16
+  __pyx_v_buffers = PySequence_Fast_ITEMS(__pyx_v_bufflist);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":17
  *     buffers = PySequence_Fast_ITEMS(bufflist)
  * 
  *     ws_buf = <WSABUF *>PyMem_Malloc(buffcount*sizeof(WSABUF))             # <<<<<<<<<<<<<<
  * 
  *     try:
  */
-  __pyx_t_3 = PyMem_Malloc((__pyx_v_buffcount * (sizeof(WSABUF)))); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_v_ws_buf = ((WSABUF *)__pyx_t_3);
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":18
+  __pyx_t_2 = PyMem_Malloc((__pyx_v_buffcount * (sizeof(WSABUF)))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_ws_buf = ((WSABUF *)__pyx_t_2);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":19
  *     ws_buf = <WSABUF *>PyMem_Malloc(buffcount*sizeof(WSABUF))
  * 
  *     try:             # <<<<<<<<<<<<<<
  *         for i from 0 <= i < buffcount:
- *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, <int *>&ws_buf[i].len)
+ *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, &size)
  */
   /*try:*/ {
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":19
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":20
  * 
  *     try:
  *         for i from 0 <= i < buffcount:             # <<<<<<<<<<<<<<
- *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, <int *>&ws_buf[i].len)
- * 
- */
-    __pyx_t_4 = __pyx_v_buffcount;
-    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_4; __pyx_v_i++) {
-
-      /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":20
+ *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, &size)
+ *             ws_buf[i].len = <DWORD>size
+ */
+    __pyx_t_3 = __pyx_v_buffcount;
+    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_3; __pyx_v_i++) {
+
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":21
  *     try:
  *         for i from 0 <= i < buffcount:
- *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, <int *>&ws_buf[i].len)             # <<<<<<<<<<<<<<
+ *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, &size)             # <<<<<<<<<<<<<<
+ *             ws_buf[i].len = <DWORD>size
+ * 
+ */
+      __pyx_t_1 = ((PyObject *)(__pyx_v_buffers[__pyx_v_i]));
+      __Pyx_INCREF(__pyx_t_1);
+      __pyx_t_4 = PyObject_AsWriteBuffer(__pyx_t_1, ((void **)(&(__pyx_v_ws_buf[__pyx_v_i]).buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L7;}
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":22
+ *         for i from 0 <= i < buffcount:
+ *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, &size)
+ *             ws_buf[i].len = <DWORD>size             # <<<<<<<<<<<<<<
  * 
  *         ov = makeOV()
  */
-      __pyx_t_2 = ((PyObject *)(__pyx_v_buffers[__pyx_v_i]));
-      __Pyx_INCREF(__pyx_t_2);
-      __pyx_t_5 = PyObject_AsWriteBuffer(__pyx_t_2, ((void **)(&(__pyx_v_ws_buf[__pyx_v_i]).buf)), ((int *)(&(__pyx_v_ws_buf[__pyx_v_i]).len))); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L7;}
-      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+      (__pyx_v_ws_buf[__pyx_v_i]).len = ((__pyx_t_11iocpsupport_DWORD)__pyx_v_size);
     }
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":22
- *             PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, <int *>&ws_buf[i].len)
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":24
+ *             ws_buf[i].len = <DWORD>size
  * 
  *         ov = makeOV()             # <<<<<<<<<<<<<<
  *         if obj is not None:
  *             ov.obj = <PyObject *>obj
  */
-    __pyx_t_6 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L7;}
-    __pyx_v_ov = __pyx_t_6;
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":23
+    __pyx_t_5 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L7;}
+    __pyx_v_ov = __pyx_t_5;
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":25
  * 
  *         ov = makeOV()
  *         if obj is not None:             # <<<<<<<<<<<<<<
  *             ov.obj = <PyObject *>obj
  * 
  */
-    __pyx_t_7 = (__pyx_v_obj != Py_None);
-    if (__pyx_t_7) {
-
-      /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":24
+    __pyx_t_6 = (__pyx_v_obj != Py_None);
+    if (__pyx_t_6) {
+
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":26
  *         ov = makeOV()
  *         if obj is not None:
  *             ov.obj = <PyObject *>obj             # <<<<<<<<<<<<<<
  * 
- *         rc = WSARecv(s, ws_buf, buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)
+ *         rc = WSARecv(s, ws_buf, <DWORD>buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)
  */
       __pyx_v_ov->obj = ((struct PyObject *)__pyx_v_obj);
       goto __pyx_L11;
     }
     __pyx_L11:;
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":26
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":28
  *             ov.obj = <PyObject *>obj
  * 
- *         rc = WSARecv(s, ws_buf, buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)             # <<<<<<<<<<<<<<
+ *         rc = WSARecv(s, ws_buf, <DWORD>buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)             # <<<<<<<<<<<<<<
  * 
  *         if rc == SOCKET_ERROR:
  */
-    __pyx_v_rc = WSARecv(__pyx_v_s, __pyx_v_ws_buf, __pyx_v_buffcount, (&__pyx_v_bytes), (&__pyx_v_flags), ((OVERLAPPED *)__pyx_v_ov), NULL);
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":28
- *         rc = WSARecv(s, ws_buf, buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)
+    __pyx_v_rc = WSARecv(__pyx_v_s, __pyx_v_ws_buf, ((__pyx_t_11iocpsupport_DWORD)__pyx_v_buffcount), (&__pyx_v_bytes), (&__pyx_v_flags), ((OVERLAPPED *)__pyx_v_ov), NULL);
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":30
+ *         rc = WSARecv(s, ws_buf, <DWORD>buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)
  * 
  *         if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
  *             rc = WSAGetLastError()
  *             if rc != ERROR_IO_PENDING:
  */
-    __pyx_t_7 = (__pyx_v_rc == SOCKET_ERROR);
-    if (__pyx_t_7) {
-
-      /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":29
+    __pyx_t_6 = (__pyx_v_rc == SOCKET_ERROR);
+    if (__pyx_t_6) {
+
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":31
  * 
  *         if rc == SOCKET_ERROR:
  *             rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -3320,17 +3456,17 @@
  */
       __pyx_v_rc = WSAGetLastError();
 
-      /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":30
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":32
  *         if rc == SOCKET_ERROR:
  *             rc = WSAGetLastError()
  *             if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
  *                 return rc, 0
  * 
  */
-      __pyx_t_7 = (__pyx_v_rc != ERROR_IO_PENDING);
-      if (__pyx_t_7) {
-
-        /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":31
+      __pyx_t_6 = (__pyx_v_rc != ERROR_IO_PENDING);
+      if (__pyx_t_6) {
+
+        /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":33
  *             rc = WSAGetLastError()
  *             if rc != ERROR_IO_PENDING:
  *                 return rc, 0             # <<<<<<<<<<<<<<
@@ -3338,18 +3474,18 @@
  *         Py_XINCREF(obj)
  */
         __Pyx_XDECREF(__pyx_r);
-        __pyx_t_2 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L7;}
-        __Pyx_GOTREF(__pyx_t_2);
-        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L7;}
-        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
-        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
-        __Pyx_GIVEREF(__pyx_t_2);
+        __pyx_t_1 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L7;}
+        __Pyx_GOTREF(__pyx_t_1);
+        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L7;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
+        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
+        __Pyx_GIVEREF(__pyx_t_1);
         __Pyx_INCREF(__pyx_int_0);
-        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
+        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_0);
         __Pyx_GIVEREF(__pyx_int_0);
-        __pyx_t_2 = 0;
-        __pyx_r = ((PyObject *)__pyx_t_1);
         __pyx_t_1 = 0;
+        __pyx_r = ((PyObject *)__pyx_t_7);
+        __pyx_t_7 = 0;
         goto __pyx_L6;
         goto __pyx_L13;
       }
@@ -3358,19 +3494,16 @@
     }
     __pyx_L12:;
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":33
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":35
  *                 return rc, 0
  * 
  *         Py_XINCREF(obj)             # <<<<<<<<<<<<<<
  *         return rc, bytes
  *     finally:
  */
-    __pyx_t_1 = __pyx_v_obj;
-    __Pyx_INCREF(__pyx_t_1);
-    Py_XINCREF(__pyx_t_1);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":34
+    Py_XINCREF(__pyx_v_obj);
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":36
  * 
  *         Py_XINCREF(obj)
  *         return rc, bytes             # <<<<<<<<<<<<<<
@@ -3378,24 +3511,24 @@
  *         PyMem_Free(ws_buf)
  */
     __Pyx_XDECREF(__pyx_r);
-    __pyx_t_1 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L7;}
+    __pyx_t_7 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L7;}
+    __Pyx_GOTREF(__pyx_t_7);
+    __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L7;}
     __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L7;}
-    __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L7;}
+    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L7;}
     __Pyx_GOTREF(((PyObject *)__pyx_t_8));
-    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
+    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
+    __Pyx_GIVEREF(__pyx_t_7);
+    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
     __Pyx_GIVEREF(__pyx_t_1);
-    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
-    __Pyx_GIVEREF(__pyx_t_2);
+    __pyx_t_7 = 0;
     __pyx_t_1 = 0;
-    __pyx_t_2 = 0;
     __pyx_r = ((PyObject *)__pyx_t_8);
     __pyx_t_8 = 0;
     goto __pyx_L6;
   }
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":36
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":38
  *         return rc, bytes
  *     finally:
  *         PyMem_Free(ws_buf)             # <<<<<<<<<<<<<<
@@ -3412,8 +3545,8 @@
     __pyx_why = 3; goto __pyx_L8;
     __pyx_L7: {
       __pyx_why = 4;
+      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
       __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
-      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
       __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
       __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
       __pyx_exc_lineno = __pyx_lineno;
@@ -3438,18 +3571,18 @@
   goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_7);
   __Pyx_XDECREF(__pyx_t_8);
-  __Pyx_AddTraceback("iocpsupport.recv");
+  __Pyx_AddTraceback("iocpsupport.recv", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
-  __Pyx_DECREF(__pyx_v_bufflist);
+  __Pyx_XDECREF(__pyx_v_bufflist);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":38
+/* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":40
  *         PyMem_Free(ws_buf)
  * 
  * def recvfrom(long s, object buff, object addr_buff, object addr_len_buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -3474,161 +3607,184 @@
   unsigned long __pyx_v_bytes;
   struct sockaddr *__pyx_v_c_addr_buff;
   int *__pyx_v_c_addr_len_buff;
+  Py_ssize_t __pyx_v_size;
   PyObject *__pyx_r = NULL;
-  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
   int __pyx_t_2;
-  int __pyx_t_3;
-  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_4;
+  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_3;
+  PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
   PyObject *__pyx_t_6 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__buff,&__pyx_n_s__addr_buff,&__pyx_n_s__addr_len_buff,&__pyx_n_s__obj,&__pyx_n_s__flags,0};
   __Pyx_RefNannySetupContext("recvfrom");
   __pyx_self = __pyx_self;
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[6] = {0,0,0,0,0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
-      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
-      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
-      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
-    }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buff);
-      if (likely(values[1])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
+        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
       }
-      case  2:
-      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__addr_buff);
-      if (likely(values[2])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 2); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buff);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  2:
+        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__addr_buff);
+        if (likely(values[2])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 2); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  3:
+        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__addr_len_buff);
+        if (likely(values[3])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 3); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  4:
+        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
+        if (likely(values[4])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 4); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  5:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
+          if (value) { values[5] = value; kw_args--; }
+        }
       }
-      case  3:
-      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__addr_len_buff);
-      if (likely(values[3])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 3); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "recvfrom") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
-      case  4:
-      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
-      if (likely(values[4])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, 4); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      }
-      case  5:
-      if (kw_args > 0) {
-        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
-        if (value) { values[5] = value; kw_args--; }
+    } else {
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
+        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        break;
+        default: goto __pyx_L5_argtuple_error;
       }
     }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "recvfrom") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-    }
-    __pyx_v_s = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_s = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     __pyx_v_buff = values[1];
     __pyx_v_addr_buff = values[2];
     __pyx_v_addr_len_buff = values[3];
     __pyx_v_obj = values[4];
     if (values[5]) {
-      __pyx_v_flags = __Pyx_PyInt_AsUnsignedLong(values[5]); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      __pyx_v_flags = __Pyx_PyInt_AsUnsignedLong(values[5]); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     } else {
       __pyx_v_flags = ((unsigned long)0);
     }
-  } else {
-    __pyx_v_flags = ((unsigned long)0);
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  6:
-      __pyx_v_flags = __Pyx_PyInt_AsUnsignedLong(PyTuple_GET_ITEM(__pyx_args, 5)); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      case  5:
-      __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 4);
-      __pyx_v_addr_len_buff = PyTuple_GET_ITEM(__pyx_args, 3);
-      __pyx_v_addr_buff = PyTuple_GET_ITEM(__pyx_args, 2);
-      __pyx_v_buff = PyTuple_GET_ITEM(__pyx_args, 1);
-      __pyx_v_s = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      break;
-      default: goto __pyx_L5_argtuple_error;
-    }
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __Pyx_RaiseArgtupleInvalid("recvfrom", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.recvfrom");
+  __Pyx_AddTraceback("iocpsupport.recvfrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":46
- *     cdef int *c_addr_len_buff
- * 
- *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, <int *>&ws_buf.len)             # <<<<<<<<<<<<<<
- *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &c_addr_buff_len)
- *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &c_addr_len_buff_len)
- */
-  __pyx_t_1 = __pyx_v_buff;
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_AsWriteBuffer(__pyx_t_1, ((void **)(&__pyx_v_ws_buf.buf)), ((int *)(&__pyx_v_ws_buf.len))); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":47
- * 
- *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, <int *>&ws_buf.len)
- *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &c_addr_buff_len)             # <<<<<<<<<<<<<<
- *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &c_addr_len_buff_len)
- * 
- */
-  __pyx_t_1 = __pyx_v_addr_buff;
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_AsWriteBuffer(__pyx_t_1, ((void **)(&__pyx_v_c_addr_buff)), (&__pyx_v_c_addr_buff_len)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":48
- *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, <int *>&ws_buf.len)
- *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &c_addr_buff_len)
- *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &c_addr_len_buff_len)             # <<<<<<<<<<<<<<
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":49
+ *     cdef Py_ssize_t size
+ * 
+ *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, &size)             # <<<<<<<<<<<<<<
+ *     ws_buf.len = <DWORD>size
+ *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)
+ */
+  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_buff, ((void **)(&__pyx_v_ws_buf.buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":50
+ * 
+ *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, &size)
+ *     ws_buf.len = <DWORD>size             # <<<<<<<<<<<<<<
+ *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)
+ *     c_addr_buff_len = <int>size
+ */
+  __pyx_v_ws_buf.len = ((__pyx_t_11iocpsupport_DWORD)__pyx_v_size);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":51
+ *     PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, &size)
+ *     ws_buf.len = <DWORD>size
+ *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)             # <<<<<<<<<<<<<<
+ *     c_addr_buff_len = <int>size
+ *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &size)
+ */
+  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_addr_buff, ((void **)(&__pyx_v_c_addr_buff)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":52
+ *     ws_buf.len = <DWORD>size
+ *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)
+ *     c_addr_buff_len = <int>size             # <<<<<<<<<<<<<<
+ *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &size)
+ *     c_addr_len_buff_len = <int>size
+ */
+  __pyx_v_c_addr_buff_len = ((int)__pyx_v_size);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":53
+ *     PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)
+ *     c_addr_buff_len = <int>size
+ *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &size)             # <<<<<<<<<<<<<<
+ *     c_addr_len_buff_len = <int>size
+ * 
+ */
+  __pyx_t_1 = PyObject_AsWriteBuffer(__pyx_v_addr_len_buff, ((void **)(&__pyx_v_c_addr_len_buff)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":54
+ *     c_addr_buff_len = <int>size
+ *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &size)
+ *     c_addr_len_buff_len = <int>size             # <<<<<<<<<<<<<<
  * 
  *     if c_addr_len_buff_len != sizeof(int):
  */
-  __pyx_t_1 = __pyx_v_addr_len_buff;
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_AsWriteBuffer(__pyx_t_1, ((void **)(&__pyx_v_c_addr_len_buff)), (&__pyx_v_c_addr_len_buff_len)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":50
- *     PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &c_addr_len_buff_len)
+  __pyx_v_c_addr_len_buff_len = ((int)__pyx_v_size);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":56
+ *     c_addr_len_buff_len = <int>size
  * 
  *     if c_addr_len_buff_len != sizeof(int):             # <<<<<<<<<<<<<<
  *         raise ValueError, 'length of address length buffer needs to be sizeof(int)'
  * 
  */
-  __pyx_t_3 = (__pyx_v_c_addr_len_buff_len != (sizeof(int)));
-  if (__pyx_t_3) {
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":51
+  __pyx_t_2 = (__pyx_v_c_addr_len_buff_len != (sizeof(int)));
+  if (__pyx_t_2) {
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":57
  * 
  *     if c_addr_len_buff_len != sizeof(int):
  *         raise ValueError, 'length of address length buffer needs to be sizeof(int)'             # <<<<<<<<<<<<<<
  * 
  *     c_addr_len_buff[0] = c_addr_buff_len
  */
-    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_11), 0);
-    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_11), 0, 0);
+    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     goto __pyx_L6;
   }
   __pyx_L6:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":53
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":59
  *         raise ValueError, 'length of address length buffer needs to be sizeof(int)'
  * 
  *     c_addr_len_buff[0] = c_addr_buff_len             # <<<<<<<<<<<<<<
@@ -3637,27 +3793,27 @@
  */
   (__pyx_v_c_addr_len_buff[0]) = __pyx_v_c_addr_buff_len;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":55
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":61
  *     c_addr_len_buff[0] = c_addr_buff_len
  * 
  *     ov = makeOV()             # <<<<<<<<<<<<<<
  *     if obj is not None:
  *         ov.obj = <PyObject *>obj
  */
-  __pyx_t_4 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_v_ov = __pyx_t_4;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":56
+  __pyx_t_3 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_ov = __pyx_t_3;
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":62
  * 
  *     ov = makeOV()
  *     if obj is not None:             # <<<<<<<<<<<<<<
  *         ov.obj = <PyObject *>obj
  * 
  */
-  __pyx_t_3 = (__pyx_v_obj != Py_None);
-  if (__pyx_t_3) {
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":57
+  __pyx_t_2 = (__pyx_v_obj != Py_None);
+  if (__pyx_t_2) {
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":63
  *     ov = makeOV()
  *     if obj is not None:
  *         ov.obj = <PyObject *>obj             # <<<<<<<<<<<<<<
@@ -3669,7 +3825,7 @@
   }
   __pyx_L7:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":59
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":65
  *         ov.obj = <PyObject *>obj
  * 
  *     rc = WSARecvFrom(s, &ws_buf, 1, &bytes, &flags, c_addr_buff, c_addr_len_buff, <OVERLAPPED *>ov, NULL)             # <<<<<<<<<<<<<<
@@ -3678,17 +3834,17 @@
  */
   __pyx_v_rc = WSARecvFrom(__pyx_v_s, (&__pyx_v_ws_buf), 1, (&__pyx_v_bytes), (&__pyx_v_flags), __pyx_v_c_addr_buff, __pyx_v_c_addr_len_buff, ((OVERLAPPED *)__pyx_v_ov), NULL);
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":61
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":67
  *     rc = WSARecvFrom(s, &ws_buf, 1, &bytes, &flags, c_addr_buff, c_addr_len_buff, <OVERLAPPED *>ov, NULL)
  * 
  *     if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  */
-  __pyx_t_3 = (__pyx_v_rc == SOCKET_ERROR);
-  if (__pyx_t_3) {
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":62
+  __pyx_t_2 = (__pyx_v_rc == SOCKET_ERROR);
+  if (__pyx_t_2) {
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":68
  * 
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -3697,17 +3853,17 @@
  */
     __pyx_v_rc = WSAGetLastError();
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":63
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":69
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
  *             return rc, 0
  * 
  */
-    __pyx_t_3 = (__pyx_v_rc != ERROR_IO_PENDING);
-    if (__pyx_t_3) {
-
-      /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":64
+    __pyx_t_2 = (__pyx_v_rc != ERROR_IO_PENDING);
+    if (__pyx_t_2) {
+
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":70
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  *             return rc, 0             # <<<<<<<<<<<<<<
@@ -3715,16 +3871,16 @@
  *     Py_XINCREF(obj)
  */
       __Pyx_XDECREF(__pyx_r);
-      __pyx_t_1 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_1);
-      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_4 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_GOTREF(((PyObject *)__pyx_t_5));
-      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
-      __Pyx_GIVEREF(__pyx_t_1);
+      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
+      __Pyx_GIVEREF(__pyx_t_4);
       __Pyx_INCREF(__pyx_int_0);
       PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
       __Pyx_GIVEREF(__pyx_int_0);
-      __pyx_t_1 = 0;
+      __pyx_t_4 = 0;
       __pyx_r = ((PyObject *)__pyx_t_5);
       __pyx_t_5 = 0;
       goto __pyx_L0;
@@ -3735,37 +3891,34 @@
   }
   __pyx_L8:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":66
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":72
  *             return rc, 0
  * 
  *     Py_XINCREF(obj)             # <<<<<<<<<<<<<<
  *     return rc, bytes
  * 
  */
-  __pyx_t_5 = __pyx_v_obj;
-  __Pyx_INCREF(__pyx_t_5);
-  Py_XINCREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":67
+  Py_XINCREF(__pyx_v_obj);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":73
  * 
  *     Py_XINCREF(obj)
  *     return rc, bytes             # <<<<<<<<<<<<<<
  * 
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_5 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(((PyObject *)__pyx_t_6));
   PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
   __Pyx_GIVEREF(__pyx_t_5);
-  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_1);
+  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_4);
   __pyx_t_5 = 0;
-  __pyx_t_1 = 0;
+  __pyx_t_4 = 0;
   __pyx_r = ((PyObject *)__pyx_t_6);
   __pyx_t_6 = 0;
   goto __pyx_L0;
@@ -3773,10 +3926,10 @@
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
   __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_AddTraceback("iocpsupport.recvfrom");
+  __Pyx_AddTraceback("iocpsupport.recvfrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -3784,7 +3937,7 @@
   return __pyx_r;
 }
 
-/* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":5
+/* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":5
  * 
  * 
  * def send(long s, object buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -3803,52 +3956,69 @@
   struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_v_ov;
   WSABUF __pyx_v_ws_buf;
   unsigned long __pyx_v_bytes;
+  Py_ssize_t __pyx_v_size;
   PyObject *__pyx_r = NULL;
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_t_2;
-  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_3;
-  int __pyx_t_4;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  struct __pyx_t_11iocpsupport_myOVERLAPPED *__pyx_t_2;
+  int __pyx_t_3;
+  PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
   PyObject *__pyx_t_6 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__buff,&__pyx_n_s__obj,&__pyx_n_s__flags,0};
   __Pyx_RefNannySetupContext("send");
   __pyx_self = __pyx_self;
-  if (unlikely(__pyx_kwds)) {
-    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+  {
     PyObject* values[4] = {0,0,0,0};
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
-      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      case  0: break;
-      default: goto __pyx_L5_argtuple_error;
-    }
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  0:
-      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
-      if (likely(values[0])) kw_args--;
-      else goto __pyx_L5_argtuple_error;
-      case  1:
-      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buff);
-      if (likely(values[1])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, 1); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
       }
-      case  2:
-      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
-      if (likely(values[2])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, 2); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buff);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, 1); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  2:
+        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
+        if (likely(values[2])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, 2); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  3:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
+          if (value) { values[3] = value; kw_args--; }
+        }
       }
-      case  3:
-      if (kw_args > 0) {
-        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
-        if (value) { values[3] = value; kw_args--; }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "send") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
-    }
-    if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "send") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    } else {
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        break;
+        default: goto __pyx_L5_argtuple_error;
+      }
     }
     __pyx_v_s = __Pyx_PyInt_AsLong(values[0]); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     __pyx_v_buff = values[1];
@@ -3858,61 +4028,55 @@
     } else {
       __pyx_v_flags = ((unsigned long)0);
     }
-  } else {
-    __pyx_v_flags = ((unsigned long)0);
-    switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  4:
-      __pyx_v_flags = __Pyx_PyInt_AsUnsignedLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_flags == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      case  3:
-      __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 2);
-      __pyx_v_buff = PyTuple_GET_ITEM(__pyx_args, 1);
-      __pyx_v_s = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_s == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      break;
-      default: goto __pyx_L5_argtuple_error;
-    }
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
   __Pyx_RaiseArgtupleInvalid("send", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("iocpsupport.send");
+  __Pyx_AddTraceback("iocpsupport.send", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":11
- *     cdef unsigned long bytes
- * 
- *     PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, <int *>&ws_buf.len)             # <<<<<<<<<<<<<<
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":12
+ *     cdef Py_ssize_t size
+ * 
+ *     PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, &size)             # <<<<<<<<<<<<<<
+ *     ws_buf.len = <DWORD>size
+ * 
+ */
+  __pyx_t_1 = PyObject_AsReadBuffer(__pyx_v_buff, ((void **)(&__pyx_v_ws_buf.buf)), (&__pyx_v_size)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":13
+ * 
+ *     PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, &size)
+ *     ws_buf.len = <DWORD>size             # <<<<<<<<<<<<<<
  * 
  *     ov = makeOV()
  */
-  __pyx_t_1 = __pyx_v_buff;
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_AsReadBuffer(__pyx_t_1, ((void **)(&__pyx_v_ws_buf.buf)), ((int *)(&__pyx_v_ws_buf.len))); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":13
- *     PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, <int *>&ws_buf.len)
+  __pyx_v_ws_buf.len = ((__pyx_t_11iocpsupport_DWORD)__pyx_v_size);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":15
+ *     ws_buf.len = <DWORD>size
  * 
  *     ov = makeOV()             # <<<<<<<<<<<<<<
  *     if obj is not None:
  *         ov.obj = <PyObject *>obj
  */
-  __pyx_t_3 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_v_ov = __pyx_t_3;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":14
+  __pyx_t_2 = __pyx_f_11iocpsupport_makeOV(); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_ov = __pyx_t_2;
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":16
  * 
  *     ov = makeOV()
  *     if obj is not None:             # <<<<<<<<<<<<<<
  *         ov.obj = <PyObject *>obj
  * 
  */
-  __pyx_t_4 = (__pyx_v_obj != Py_None);
-  if (__pyx_t_4) {
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":15
+  __pyx_t_3 = (__pyx_v_obj != Py_None);
+  if (__pyx_t_3) {
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":17
  *     ov = makeOV()
  *     if obj is not None:
  *         ov.obj = <PyObject *>obj             # <<<<<<<<<<<<<<
@@ -3924,7 +4088,7 @@
   }
   __pyx_L6:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":17
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":19
  *         ov.obj = <PyObject *>obj
  * 
  *     rc = WSASend(s, &ws_buf, 1, &bytes, flags, <OVERLAPPED *>ov, NULL)             # <<<<<<<<<<<<<<
@@ -3933,17 +4097,17 @@
  */
   __pyx_v_rc = WSASend(__pyx_v_s, (&__pyx_v_ws_buf), 1, (&__pyx_v_bytes), __pyx_v_flags, ((OVERLAPPED *)__pyx_v_ov), NULL);
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":19
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":21
  *     rc = WSASend(s, &ws_buf, 1, &bytes, flags, <OVERLAPPED *>ov, NULL)
  * 
  *     if rc == SOCKET_ERROR:             # <<<<<<<<<<<<<<
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  */
-  __pyx_t_4 = (__pyx_v_rc == SOCKET_ERROR);
-  if (__pyx_t_4) {
-
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":20
+  __pyx_t_3 = (__pyx_v_rc == SOCKET_ERROR);
+  if (__pyx_t_3) {
+
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":22
  * 
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()             # <<<<<<<<<<<<<<
@@ -3952,17 +4116,17 @@
  */
     __pyx_v_rc = WSAGetLastError();
 
-    /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":21
+    /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":23
  *     if rc == SOCKET_ERROR:
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:             # <<<<<<<<<<<<<<
  *             return rc, bytes
  * 
  */
-    __pyx_t_4 = (__pyx_v_rc != ERROR_IO_PENDING);
-    if (__pyx_t_4) {
-
-      /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":22
+    __pyx_t_3 = (__pyx_v_rc != ERROR_IO_PENDING);
+    if (__pyx_t_3) {
+
+      /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":24
  *         rc = WSAGetLastError()
  *         if rc != ERROR_IO_PENDING:
  *             return rc, bytes             # <<<<<<<<<<<<<<
@@ -3970,17 +4134,17 @@
  *     Py_XINCREF(obj)
  */
       __Pyx_XDECREF(__pyx_r);
-      __pyx_t_1 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_1);
-      __pyx_t_5 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_4 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_t_5 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_GOTREF(__pyx_t_5);
-      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_GOTREF(((PyObject *)__pyx_t_6));
-      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
-      __Pyx_GIVEREF(__pyx_t_1);
+      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
+      __Pyx_GIVEREF(__pyx_t_4);
       PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
       __Pyx_GIVEREF(__pyx_t_5);
-      __pyx_t_1 = 0;
+      __pyx_t_4 = 0;
       __pyx_t_5 = 0;
       __pyx_r = ((PyObject *)__pyx_t_6);
       __pyx_t_6 = 0;
@@ -3992,19 +4156,16 @@
   }
   __pyx_L7:;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":24
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":26
  *             return rc, bytes
  * 
  *     Py_XINCREF(obj)             # <<<<<<<<<<<<<<
  *     return rc, bytes
  * 
  */
-  __pyx_t_6 = __pyx_v_obj;
-  __Pyx_INCREF(__pyx_t_6);
-  Py_XINCREF(__pyx_t_6);
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":25
+  Py_XINCREF(__pyx_v_obj);
+
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":27
  * 
  *     Py_XINCREF(obj)
  *     return rc, bytes             # <<<<<<<<<<<<<<
@@ -4012,29 +4173,29 @@
  * 
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_6 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyInt_FromLong(__pyx_v_rc); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_5 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyLong_FromUnsignedLong(__pyx_v_bytes); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
+  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
   __Pyx_GIVEREF(__pyx_t_6);
-  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
+  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
   __Pyx_GIVEREF(__pyx_t_5);
   __pyx_t_6 = 0;
   __pyx_t_5 = 0;
-  __pyx_r = ((PyObject *)__pyx_t_1);
-  __pyx_t_1 = 0;
+  __pyx_r = ((PyObject *)__pyx_t_4);
+  __pyx_t_4 = 0;
   goto __pyx_L0;
 
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
   __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_AddTraceback("iocpsupport.send");
+  __Pyx_AddTraceback("iocpsupport.send", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -4257,7 +4418,6 @@
   {&__pyx_n_s__addr, __pyx_k__addr, sizeof(__pyx_k__addr), 0, 0, 1, 1},
   {&__pyx_n_s__addr_buff, __pyx_k__addr_buff, sizeof(__pyx_k__addr_buff), 0, 0, 1, 1},
   {&__pyx_n_s__addr_len_buff, __pyx_k__addr_len_buff, sizeof(__pyx_k__addr_len_buff), 0, 0, 1, 1},
-  {&__pyx_n_s__buf, __pyx_k__buf, sizeof(__pyx_k__buf), 0, 0, 1, 1},
   {&__pyx_n_s__buff, __pyx_k__buff, sizeof(__pyx_k__buff), 0, 0, 1, 1},
   {&__pyx_n_s__bufflist, __pyx_k__bufflist, sizeof(__pyx_k__bufflist), 0, 0, 1, 1},
   {&__pyx_n_s__bytes, __pyx_k__bytes, sizeof(__pyx_k__bytes), 0, 0, 1, 1},
@@ -4268,53 +4428,42 @@
   {&__pyx_n_s__getsockopt, __pyx_k__getsockopt, sizeof(__pyx_k__getsockopt), 0, 0, 1, 1},
   {&__pyx_n_s__handle, __pyx_k__handle, sizeof(__pyx_k__handle), 0, 0, 1, 1},
   {&__pyx_n_s__have_connectex, __pyx_k__have_connectex, sizeof(__pyx_k__have_connectex), 0, 0, 1, 1},
-  {&__pyx_n_s__iAddressFamily, __pyx_k__iAddressFamily, sizeof(__pyx_k__iAddressFamily), 0, 0, 1, 1},
-  {&__pyx_n_s__iMaxSockAddr, __pyx_k__iMaxSockAddr, sizeof(__pyx_k__iMaxSockAddr), 0, 0, 1, 1},
   {&__pyx_n_s__iocpsupport, __pyx_k__iocpsupport, sizeof(__pyx_k__iocpsupport), 0, 0, 1, 1},
-  {&__pyx_n_s__items, __pyx_k__items, sizeof(__pyx_k__items), 0, 0, 1, 1},
   {&__pyx_n_s__key, __pyx_k__key, sizeof(__pyx_k__key), 0, 0, 1, 1},
-  {&__pyx_n_s__len, __pyx_k__len, sizeof(__pyx_k__len), 0, 0, 1, 1},
   {&__pyx_n_s__listening, __pyx_k__listening, sizeof(__pyx_k__listening), 0, 0, 1, 1},
   {&__pyx_n_s__makesockaddr, __pyx_k__makesockaddr, sizeof(__pyx_k__makesockaddr), 0, 0, 1, 1},
   {&__pyx_n_s__maxAddrLen, __pyx_k__maxAddrLen, sizeof(__pyx_k__maxAddrLen), 0, 0, 1, 1},
   {&__pyx_n_s__obj, __pyx_k__obj, sizeof(__pyx_k__obj), 0, 0, 1, 1},
   {&__pyx_n_s__owner, __pyx_k__owner, sizeof(__pyx_k__owner), 0, 0, 1, 1},
-  {&__pyx_n_s__port, __pyx_k__port, sizeof(__pyx_k__port), 0, 0, 1, 1},
   {&__pyx_n_s__recv, __pyx_k__recv, sizeof(__pyx_k__recv), 0, 0, 1, 1},
   {&__pyx_n_s__recvfrom, __pyx_k__recvfrom, sizeof(__pyx_k__recvfrom), 0, 0, 1, 1},
   {&__pyx_n_s__rsplit, __pyx_k__rsplit, sizeof(__pyx_k__rsplit), 0, 0, 1, 1},
   {&__pyx_n_s__s, __pyx_k__s, sizeof(__pyx_k__s), 0, 0, 1, 1},
-  {&__pyx_n_s__s_addr, __pyx_k__s_addr, sizeof(__pyx_k__s_addr), 0, 0, 1, 1},
-  {&__pyx_n_s__sa_data, __pyx_k__sa_data, sizeof(__pyx_k__sa_data), 0, 0, 1, 1},
-  {&__pyx_n_s__sa_family, __pyx_k__sa_family, sizeof(__pyx_k__sa_family), 0, 0, 1, 1},
   {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
   {&__pyx_n_s__send, __pyx_k__send, sizeof(__pyx_k__send), 0, 0, 1, 1},
-  {&__pyx_n_s__sin6_port, __pyx_k__sin6_port, sizeof(__pyx_k__sin6_port), 0, 0, 1, 1},
-  {&__pyx_n_s__sin_addr, __pyx_k__sin_addr, sizeof(__pyx_k__sin_addr), 0, 0, 1, 1},
-  {&__pyx_n_s__sin_port, __pyx_k__sin_port, sizeof(__pyx_k__sin_port), 0, 0, 1, 1},
   {&__pyx_n_s__socket, __pyx_k__socket, sizeof(__pyx_k__socket), 0, 0, 1, 1},
   {0, 0, 0, 0, 0, 0, 0}
 };
 static int __Pyx_InitCachedBuiltins(void) {
-  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_builtin_MemoryError = __Pyx_GetName(__pyx_b, __pyx_n_s__MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_builtin_WindowsError = __Pyx_GetName(__pyx_b, __pyx_n_s__WindowsError); if (!__pyx_builtin_WindowsError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_builtin_MemoryError = __Pyx_GetName(__pyx_b, __pyx_n_s__MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   return 0;
   __pyx_L1_error:;
   return -1;
 }
 
 static int __Pyx_InitCachedConstants(void) {
+  __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");
 
-  /* "iocpsupport.pyx":219
+  /* "iocpsupport.pyx":221
  *             raise_error(0, 'WSAAddressToString')
  *         host, sa_port = PyString_FromString(buff), ntohs(sin6.sin6_port)
  *         host, port = host.rsplit(':', 1)             # <<<<<<<<<<<<<<
  *         port = int(port)
  *         assert host[0] == '['
  */
-  __pyx_k_tuple_4 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_k_tuple_4 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_4));
   __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
   PyTuple_SET_ITEM(__pyx_k_tuple_4, 0, ((PyObject *)__pyx_kp_s_3));
@@ -4350,8 +4499,8 @@
   PyObject *__pyx_t_1 = NULL;
   PyObject *__pyx_t_2 = NULL;
   int __pyx_t_3;
+  __Pyx_RefNannyDeclarations
   #if CYTHON_REFNANNY
-  void* __pyx_refnanny = NULL;
   __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
   if (!__Pyx_RefNanny) {
       PyErr_Clear();
@@ -4359,8 +4508,9 @@
       if (!__Pyx_RefNanny)
           Py_FatalError("failed to import 'refnanny' module");
   }
-  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_iocpsupport(void)", __LINE__, __FILE__);
   #endif
+  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_iocpsupport(void)");
+  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   #ifdef __pyx_binding_PyCFunctionType_USED
@@ -4396,99 +4546,101 @@
   /*--- Constants init code ---*/
   if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   /*--- Global init code ---*/
+  /*--- Variable export code ---*/
   /*--- Function export code ---*/
   /*--- Type init code ---*/
-  if (PyType_Ready(&__pyx_type_11iocpsupport_CompletionPort) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  if (__Pyx_SetAttrString(__pyx_m, "CompletionPort", (PyObject *)&__pyx_type_11iocpsupport_CompletionPort) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyType_Ready(&__pyx_type_11iocpsupport_CompletionPort) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (__Pyx_SetAttrString(__pyx_m, "CompletionPort", (PyObject *)&__pyx_type_11iocpsupport_CompletionPort) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_ptype_11iocpsupport_CompletionPort = &__pyx_type_11iocpsupport_CompletionPort;
   /*--- Type import code ---*/
+  /*--- Variable import code ---*/
   /*--- Function import code ---*/
   /*--- Execution code ---*/
 
-  /* "iocpsupport.pyx":131
+  /* "iocpsupport.pyx":132
  *     raise WindowsError(message, err)
  * 
  * class Event:             # <<<<<<<<<<<<<<
  *     def __init__(self, callback, owner, **kw):
  *         self.callback = callback
  */
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(((PyObject *)__pyx_t_1));
 
-  /* "iocpsupport.pyx":132
+  /* "iocpsupport.pyx":133
  * 
  * class Event:
  *     def __init__(self, callback, owner, **kw):             # <<<<<<<<<<<<<<
  *         self.callback = callback
  *         self.owner = owner
  */
-  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_11iocpsupport_5Event___init__, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_11iocpsupport_5Event___init__, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-  /* "iocpsupport.pyx":131
+  /* "iocpsupport.pyx":132
  *     raise WindowsError(message, err)
  * 
  * class Event:             # <<<<<<<<<<<<<<
  *     def __init__(self, callback, owner, **kw):
  *         self.callback = callback
  */
-  __pyx_t_2 = __Pyx_CreateClass(((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1), __pyx_n_s__Event, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = __Pyx_CreateClass(((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1), __pyx_n_s__Event, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Event, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Event, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
 
-  /* "iocpsupport.pyx":194
+  /* "iocpsupport.pyx":196
  *         CloseHandle(self.port)
  * 
  * def makesockaddr(object buff):             # <<<<<<<<<<<<<<
  *     cdef void *mem_buffer
- *     cdef int size
- */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_makesockaddr, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+ *     cdef Py_ssize_t size
+ */
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_makesockaddr, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__makesockaddr, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__makesockaddr, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "iocpsupport.pyx":242
+  /* "iocpsupport.pyx":244
  *     dest.sin_port = htons(port)
  * 
  * def AllocateReadBuffer(int size):             # <<<<<<<<<<<<<<
  *     return PyBuffer_New(size)
  * 
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_1AllocateReadBuffer, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_1AllocateReadBuffer, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__AllocateReadBuffer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__AllocateReadBuffer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "iocpsupport.pyx":245
+  /* "iocpsupport.pyx":247
  *     return PyBuffer_New(size)
  * 
  * def maxAddrLen(long s):             # <<<<<<<<<<<<<<
  *     cdef WSAPROTOCOL_INFO wsa_pi
  *     cdef int size, rc
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_2maxAddrLen, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_2maxAddrLen, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__maxAddrLen, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__maxAddrLen, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "iocpsupport.pyx":265
+  /* "iocpsupport.pyx":267
  *     return wsa_pi.iAddressFamily
  * 
  * import socket # for WSAStartup             # <<<<<<<<<<<<<<
  * if not initWinsockPointers():
  *     raise ValueError, 'Failed to initialize Winsock function vectors'
  */
-  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__socket), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__socket), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__socket, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__socket, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "iocpsupport.pyx":266
+  /* "iocpsupport.pyx":268
  * 
  * import socket # for WSAStartup
  * if not initWinsockPointers():             # <<<<<<<<<<<<<<
@@ -4498,32 +4650,32 @@
   __pyx_t_3 = (!initWinsockPointers());
   if (__pyx_t_3) {
 
-    /* "iocpsupport.pyx":267
+    /* "iocpsupport.pyx":269
  * import socket # for WSAStartup
  * if not initWinsockPointers():
  *     raise ValueError, 'Failed to initialize Winsock function vectors'             # <<<<<<<<<<<<<<
  * 
  * have_connectex = (lpConnectEx != NULL)
  */
-    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_12), 0);
-    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_12), 0, 0);
+    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     goto __pyx_L2;
   }
   __pyx_L2:;
 
-  /* "iocpsupport.pyx":269
+  /* "iocpsupport.pyx":271
  *     raise ValueError, 'Failed to initialize Winsock function vectors'
  * 
  * have_connectex = (lpConnectEx != NULL)             # <<<<<<<<<<<<<<
  * 
  * include 'acceptex.pxi'
  */
-  __pyx_t_1 = __Pyx_PyBool_FromLong((lpConnectEx != NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = __Pyx_PyBool_FromLong((lpConnectEx != NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__have_connectex, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__have_connectex, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":5
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":5
  * 
  * 
  * def accept(long listening, long accepting, object buff, object obj):             # <<<<<<<<<<<<<<
@@ -4535,19 +4687,19 @@
   if (PyObject_SetAttr(__pyx_m, __pyx_n_s__accept, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":31
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\acceptex.pxi":33
  *     return 0
  * 
  * def get_accept_addrs(long s, object buff):             # <<<<<<<<<<<<<<
  *     cdef WSAPROTOCOL_INFO wsa_pi
- *     cdef int size, locallen, remotelen
- */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_4get_accept_addrs, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+ *     cdef int locallen, remotelen
+ */
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_4get_accept_addrs, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_accept_addrs, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_accept_addrs, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":5
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\connectex.pxi":5
  * 
  * 
  * def connect(long s, object addr, object obj):             # <<<<<<<<<<<<<<
@@ -4563,19 +4715,19 @@
   if (PyObject_SetAttr(__pyx_m, __pyx_n_s__recv, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":38
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsarecv.pxi":40
  *         PyMem_Free(ws_buf)
  * 
  * def recvfrom(long s, object buff, object addr_buff, object addr_len_buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
  *     cdef int rc, c_addr_buff_len, c_addr_len_buff_len
  *     cdef myOVERLAPPED *ov
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_7recvfrom, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11iocpsupport_7recvfrom, NULL, __pyx_n_s__iocpsupport); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__recvfrom, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__recvfrom, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "E:\Twisted.5084\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":5
+  /* "C:\t\twisted\twisted\internet\iocpreactor\iocpsupport\wsasend.pxi":5
  * 
  * 
  * def send(long s, object buff, object obj, unsigned long flags = 0):             # <<<<<<<<<<<<<<
@@ -4601,7 +4753,7 @@
   __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
   if (__pyx_m) {
-    __Pyx_AddTraceback("init iocpsupport");
+    __Pyx_AddTraceback("init iocpsupport", __pyx_clineno, __pyx_lineno, __pyx_filename);
     Py_DECREF(__pyx_m); __pyx_m = 0;
   } else if (!PyErr_Occurred()) {
     PyErr_SetString(PyExc_ImportError, "init iocpsupport");
@@ -4617,11 +4769,34 @@
 
 /* Runtime support code */
 
+#if CYTHON_REFNANNY
+static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
+    PyObject *m = NULL, *p = NULL;
+    void *r = NULL;
+    m = PyImport_ImportModule((char *)modname);
+    if (!m) goto end;
+    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
+    if (!p) goto end;
+    r = PyLong_AsVoidPtr(p);
+end:
+    Py_XDECREF(p);
+    Py_XDECREF(m);
+    return (__Pyx_RefNannyAPIStruct *)r;
+}
+#endif /* CYTHON_REFNANNY */
+
 static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
     PyObject *result;
     result = PyObject_GetAttr(dict, name);
-    if (!result)
-        PyErr_SetObject(PyExc_NameError, name);
+    if (!result) {
+        if (dict != __pyx_b) {
+            PyErr_Clear();
+            result = PyObject_GetAttr(__pyx_b, name);
+        }
+        if (!result) {
+            PyErr_SetObject(PyExc_NameError, name);
+        }
+    }
     return result;
 }
 
@@ -4653,7 +4828,8 @@
 
 
 #if PY_MAJOR_VERSION < 3
-static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
+    /* cause is unused */
     Py_XINCREF(type);
     Py_XINCREF(value);
     Py_XINCREF(tb);
@@ -4720,7 +4896,7 @@
 
 #else /* Python 3+ */
 
-static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
     if (tb == Py_None) {
         tb = 0;
     } else if (tb && !PyTraceBack_Check(tb)) {
@@ -4745,6 +4921,29 @@
         goto bad;
     }
 
+    if (cause) {
+        PyObject *fixed_cause;
+        if (PyExceptionClass_Check(cause)) {
+            fixed_cause = PyObject_CallObject(cause, NULL);
+            if (fixed_cause == NULL)
+                goto bad;
+        }
+        else if (PyExceptionInstance_Check(cause)) {
+            fixed_cause = cause;
+            Py_INCREF(fixed_cause);
+        }
+        else {
+            PyErr_SetString(PyExc_TypeError,
+                            "exception causes must derive from "
+                            "BaseException");
+            goto bad;
+        }
+        if (!value) {
+            value = PyObject_CallObject(type, NULL);
+        }
+        PyException_SetCause(value, fixed_cause);
+    }
+
     PyErr_SetObject(type, value);
 
     if (tb) {
@@ -4770,7 +4969,7 @@
     Py_ssize_t num_found)
 {
     Py_ssize_t num_expected;
-    const char *number, *more_or_less;
+    const char *more_or_less;
 
     if (num_found < num_min) {
         num_expected = num_min;
@@ -4782,14 +4981,10 @@
     if (exact) {
         more_or_less = "exactly";
     }
-    number = (num_expected == 1) ? "" : "s";
     PyErr_Format(PyExc_TypeError,
-        #if PY_VERSION_HEX < 0x02050000
-            "%s() takes %s %d positional argument%s (%d given)",
-        #else
-            "%s() takes %s %zd positional argument%s (%zd given)",
-        #endif
-        func_name, more_or_less, num_expected, number, num_found);
+                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
+                 func_name, more_or_less, num_expected,
+                 (num_expected == 1) ? "" : "s", num_found);
 }
 
 static void __Pyx_RaiseDoubleKeywordsError(
@@ -4886,44 +5081,29 @@
 
 static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
     PyErr_Format(PyExc_ValueError,
-        #if PY_VERSION_HEX < 0x02050000
-                 "need more than %d value%s to unpack", (int)index,
-        #else
-                 "need more than %zd value%s to unpack", index,
-        #endif
-                 (index == 1) ? "" : "s");
+                 "need more than %"PY_FORMAT_SIZE_T"d value%s to unpack",
+                 index, (index == 1) ? "" : "s");
 }
 
 static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
     PyErr_Format(PyExc_ValueError,
-        #if PY_VERSION_HEX < 0x02050000
-            "too many values to unpack (expected %d)", (int)expected);
-        #else
-            "too many values to unpack (expected %zd)", expected);
-        #endif
+                 "too many values to unpack (expected %"PY_FORMAT_SIZE_T"d)", expected);
 }
 
-static PyObject *__Pyx_UnpackItem(PyObject *iter, Py_ssize_t index) {
-    PyObject *item;
-    if (!(item = PyIter_Next(iter))) {
-        if (!PyErr_Occurred()) {
-            __Pyx_RaiseNeedMoreValuesError(index);
+static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
+    if (unlikely(retval)) {
+        Py_DECREF(retval);
+        __Pyx_RaiseTooManyValuesError(expected);
+        return -1;
+    } else if (PyErr_Occurred()) {
+        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
+            PyErr_Clear();
+            return 0;
+        } else {
+            return -1;
         }
     }
-    return item;
-}
-
-static int __Pyx_EndUnpack(PyObject *iter, Py_ssize_t expected) {
-    PyObject *item;
-    if ((item = PyIter_Next(iter))) {
-        Py_DECREF(item);
-        __Pyx_RaiseTooManyValuesError(expected);
-        return -1;
-    }
-    else if (!PyErr_Occurred())
-        return 0;
-    else
-        return -1;
+    return 0;
 }
 
 static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
@@ -4961,20 +5141,13 @@
 }
 
 
-static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
-    long q = a / b;
-    long r = a - q*b;
-    q -= ((r != 0) & ((r ^ b) < 0));
-    return q;
-}
-
 static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
     PyObject *metaclass;
     /* Default metaclass */
 #if PY_MAJOR_VERSION < 3
     if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
         PyObject *base = PyTuple_GET_ITEM(bases, 0);
-        metaclass = PyObject_GetAttrString(base, "__class__");
+        metaclass = PyObject_GetAttrString(base, (char *)"__class__");
         if (!metaclass) {
             PyErr_Clear();
             metaclass = (PyObject*) Py_TYPE(base);
@@ -5016,29 +5189,29 @@
 
 
 static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module) {
-	__pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
+    __pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
     if (op == NULL)
         return NULL;
-	op->func.m_ml = ml;
-	Py_XINCREF(self);
-	op->func.m_self = self;
-	Py_XINCREF(module);
-	op->func.m_module = module;
-	PyObject_GC_Track(op);
-	return (PyObject *)op;
+    op->func.m_ml = ml;
+    Py_XINCREF(self);
+    op->func.m_self = self;
+    Py_XINCREF(module);
+    op->func.m_module = module;
+    PyObject_GC_Track(op);
+    return (PyObject *)op;
 }
 
 static void __pyx_binding_PyCFunctionType_dealloc(__pyx_binding_PyCFunctionType_object *m) {
-	PyObject_GC_UnTrack(m);
-	Py_XDECREF(m->func.m_self);
-	Py_XDECREF(m->func.m_module);
+    PyObject_GC_UnTrack(m);
+    Py_XDECREF(m->func.m_self);
+    Py_XDECREF(m->func.m_module);
     PyObject_GC_Del(m);
 }
 
 static PyObject *__pyx_binding_PyCFunctionType_descr_get(PyObject *func, PyObject *obj, PyObject *type) {
-	if (obj == Py_None)
-		obj = NULL;
-	return PyMethod_New(func, obj, type);
+    if (obj == Py_None)
+            obj = NULL;
+    return PyMethod_New(func, obj, type);
 }
 
 static int __pyx_binding_PyCFunctionType_init(void) {
@@ -5054,7 +5227,7 @@
 
 }
 
-static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
+static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
     PyObject *py_import = 0;
     PyObject *empty_list = 0;
     PyObject *module = 0;
@@ -5078,8 +5251,23 @@
     empty_dict = PyDict_New();
     if (!empty_dict)
         goto bad;
+    #if PY_VERSION_HEX >= 0x02050000
+    {
+        PyObject *py_level = PyInt_FromLong(level);
+        if (!py_level)
+            goto bad;
+        module = PyObject_CallFunctionObjArgs(py_import,
+            name, global_dict, empty_dict, list, py_level, NULL);
+        Py_DECREF(py_level);
+    }
+    #else
+    if (level>0) {
+        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
+        goto bad;
+    }
     module = PyObject_CallFunctionObjArgs(py_import,
         name, global_dict, empty_dict, list, NULL);
+    #endif
 bad:
     Py_XDECREF(empty_list);
     Py_XDECREF(py_import);
@@ -5087,6 +5275,68 @@
     return module;
 }
 
+static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
+    if (s1 == s2) {   /* as done by PyObject_RichCompareBool(); also catches the (interned) empty string */
+        return (equals == Py_EQ);
+    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
+        if (PyBytes_GET_SIZE(s1) != PyBytes_GET_SIZE(s2)) {
+            return (equals == Py_NE);
+        } else if (PyBytes_GET_SIZE(s1) == 1) {
+            if (equals == Py_EQ)
+                return (PyBytes_AS_STRING(s1)[0] == PyBytes_AS_STRING(s2)[0]);
+            else
+                return (PyBytes_AS_STRING(s1)[0] != PyBytes_AS_STRING(s2)[0]);
+        } else {
+            int result = memcmp(PyBytes_AS_STRING(s1), PyBytes_AS_STRING(s2), (size_t)PyBytes_GET_SIZE(s1));
+            return (equals == Py_EQ) ? (result == 0) : (result != 0);
+        }
+    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
+        return (equals == Py_NE);
+    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
+        return (equals == Py_NE);
+    } else {
+        int result;
+        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
+        if (!py_result)
+            return -1;
+        result = __Pyx_PyObject_IsTrue(py_result);
+        Py_DECREF(py_result);
+        return result;
+    }
+}
+
+static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
+    if (s1 == s2) {   /* as done by PyObject_RichCompareBool(); also catches the (interned) empty string */
+        return (equals == Py_EQ);
+    } else if (PyUnicode_CheckExact(s1) & PyUnicode_CheckExact(s2)) {
+        if (PyUnicode_GET_SIZE(s1) != PyUnicode_GET_SIZE(s2)) {
+            return (equals == Py_NE);
+        } else if (PyUnicode_GET_SIZE(s1) == 1) {
+            if (equals == Py_EQ)
+                return (PyUnicode_AS_UNICODE(s1)[0] == PyUnicode_AS_UNICODE(s2)[0]);
+            else
+                return (PyUnicode_AS_UNICODE(s1)[0] != PyUnicode_AS_UNICODE(s2)[0]);
+        } else {
+            int result = PyUnicode_Compare(s1, s2);
+            if ((result == -1) && unlikely(PyErr_Occurred()))
+                return -1;
+            return (equals == Py_EQ) ? (result == 0) : (result != 0);
+        }
+    } else if ((s1 == Py_None) & PyUnicode_CheckExact(s2)) {
+        return (equals == Py_NE);
+    } else if ((s2 == Py_None) & PyUnicode_CheckExact(s1)) {
+        return (equals == Py_NE);
+    } else {
+        int result;
+        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
+        if (!py_result)
+            return -1;
+        result = __Pyx_PyObject_IsTrue(py_result);
+        Py_DECREF(py_result);
+        return result;
+    }
+}
+
 static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
     const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
     const int is_unsigned = neg_one > const_zero;
@@ -5298,9 +5548,9 @@
                                 "can't convert negative value to unsigned long");
                 return (unsigned long)-1;
             }
-            return PyLong_AsUnsignedLong(x);
+            return (unsigned long)PyLong_AsUnsignedLong(x);
         } else {
-            return PyLong_AsLong(x);
+            return (unsigned long)PyLong_AsLong(x);
         }
     } else {
         unsigned long val;
@@ -5333,9 +5583,9 @@
                                 "can't convert negative value to unsigned PY_LONG_LONG");
                 return (unsigned PY_LONG_LONG)-1;
             }
-            return PyLong_AsUnsignedLongLong(x);
+            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
         } else {
-            return PyLong_AsLongLong(x);
+            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
         }
     } else {
         unsigned PY_LONG_LONG val;
@@ -5368,9 +5618,9 @@
                                 "can't convert negative value to long");
                 return (long)-1;
             }
-            return PyLong_AsUnsignedLong(x);
+            return (long)PyLong_AsUnsignedLong(x);
         } else {
-            return PyLong_AsLong(x);
+            return (long)PyLong_AsLong(x);
         }
     } else {
         long val;
@@ -5403,9 +5653,9 @@
                                 "can't convert negative value to PY_LONG_LONG");
                 return (PY_LONG_LONG)-1;
             }
-            return PyLong_AsUnsignedLongLong(x);
+            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
         } else {
-            return PyLong_AsLongLong(x);
+            return (PY_LONG_LONG)PyLong_AsLongLong(x);
         }
     } else {
         PY_LONG_LONG val;
@@ -5438,9 +5688,9 @@
                                 "can't convert negative value to signed long");
                 return (signed long)-1;
             }
-            return PyLong_AsUnsignedLong(x);
+            return (signed long)PyLong_AsUnsignedLong(x);
         } else {
-            return PyLong_AsLong(x);
+            return (signed long)PyLong_AsLong(x);
         }
     } else {
         signed long val;
@@ -5473,9 +5723,9 @@
                                 "can't convert negative value to signed PY_LONG_LONG");
                 return (signed PY_LONG_LONG)-1;
             }
-            return PyLong_AsUnsignedLongLong(x);
+            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
         } else {
-            return PyLong_AsLongLong(x);
+            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
         }
     } else {
         signed PY_LONG_LONG val;
@@ -5487,11 +5737,31 @@
     }
 }
 
+static int __Pyx_check_binary_version(void) {
+    char ctversion[4], rtversion[4];
+    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
+    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
+    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
+        char message[200];
+        PyOS_snprintf(message, sizeof(message),
+                      "compiletime version %s of module '%.100s' "
+                      "does not match runtime version %s",
+                      ctversion, __Pyx_MODULE_NAME, rtversion);
+        #if PY_VERSION_HEX < 0x02050000
+        return PyErr_Warn(NULL, message);
+        #else
+        return PyErr_WarnEx(NULL, message, 1);
+        #endif
+    }
+    return 0;
+}
+
 #include "compile.h"
 #include "frameobject.h"
 #include "traceback.h"
 
-static void __Pyx_AddTraceback(const char *funcname) {
+static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
+                               int __pyx_lineno, const char *__pyx_filename) {
     PyObject *py_srcfile = 0;
     PyObject *py_funcname = 0;
     PyObject *py_globals = 0;
diff -r b14bde2bc4f0 twisted/internet/iocpreactor/iocpsupport/iocpsupport.pyx
--- a/twisted/internet/iocpreactor/iocpsupport/iocpsupport.pyx	Mon Nov 07 05:58:37 2011 +0100
+++ b/twisted/internet/iocpreactor/iocpsupport/iocpsupport.pyx	Fri Nov 25 21:02:17 2011 +0100
@@ -2,11 +2,12 @@
 # See LICENSE for details.
 
 
-ctypedef int size_t
-ctypedef unsigned long HANDLE
-ctypedef unsigned long SOCKET
+# HANDLE and SOCKET are pointer-sized (they are 64 bit wide in 64-bit builds)
+ctypedef size_t HANDLE
+ctypedef size_t SOCKET
 ctypedef unsigned long DWORD
-ctypedef unsigned long ULONG_PTR
+# it's really a pointer, but we use it as an integer
+ctypedef size_t ULONG_PTR
 ctypedef int BOOL
 
 cdef extern from 'io.h':
@@ -48,17 +49,17 @@
     void Py_XINCREF(object o)
     void Py_DECREF(object o)
     void Py_XDECREF(object o)
-    int PyObject_AsWriteBuffer(object obj, void **buffer, int *buffer_len) except -1
-    int PyObject_AsReadBuffer(object obj, void **buffer, int *buffer_len) except -1
+    int PyObject_AsWriteBuffer(object obj, void **buffer, Py_ssize_t *buffer_len) except -1
+    int PyObject_AsReadBuffer(object obj, void **buffer, Py_ssize_t *buffer_len) except -1
     object PyString_FromString(char *v)
-    object PyString_FromStringAndSize(char *v, int len)
-    object PyBuffer_New(int size)
+    object PyString_FromStringAndSize(char *v, Py_ssize_t len)
+    object PyBuffer_New(Py_ssize_t size)
     char *PyString_AsString(object obj) except NULL
     object PySequence_Fast(object o, char *m)
-#    object PySequence_Fast_GET_ITEM(object o, int i)
+#    object PySequence_Fast_GET_ITEM(object o, Py_ssize_t i)
     PyObject** PySequence_Fast_ITEMS(object o)
-    PyObject* PySequence_ITEM(	PyObject *o, int i)
-    int PySequence_Fast_GET_SIZE(object o)
+    PyObject* PySequence_ITEM(PyObject *o, Py_ssize_t i)
+    Py_ssize_t PySequence_Fast_GET_SIZE(object o)
 
 cdef extern from '':
     struct sockaddr:
@@ -144,7 +145,7 @@
             raise_error(0, 'CreateIoCompletionPort')
         self.port = res
 
-    def addHandle(self, long handle, long key=0):
+    def addHandle(self, HANDLE handle, size_t key=0):
         cdef HANDLE res
         res = CreateIoCompletionPort(handle, self.port, key, 0)
         if not res:
@@ -152,7 +153,8 @@
 
     def getEvent(self, long timeout):
         cdef PyThreadState *_save
-        cdef unsigned long bytes, key, rc
+        cdef unsigned long bytes, rc
+        cdef size_t key
         cdef myOVERLAPPED *ov
 
         _save = PyEval_SaveThread()
@@ -173,7 +175,7 @@
 
         return (rc, bytes, key, obj)
 
-    def postEvent(self, unsigned long bytes, unsigned long key, obj):
+    def postEvent(self, unsigned long bytes, size_t key, obj):
         cdef myOVERLAPPED *ov
         cdef unsigned long rc
 
@@ -193,13 +195,13 @@
 
 def makesockaddr(object buff):
     cdef void *mem_buffer
-    cdef int size
+    cdef Py_ssize_t size
 
     PyObject_AsReadBuffer(buff, &mem_buffer, &size)
     # XXX: this should really return the address family as well
     return _makesockaddr(<sockaddr *>mem_buffer, size)
 
-cdef object _makesockaddr(sockaddr *addr, int len):
+cdef object _makesockaddr(sockaddr *addr, Py_ssize_t len):
     cdef sockaddr_in *sin
     cdef sockaddr_in6 *sin6
     cdef char buff[256]
diff -r b14bde2bc4f0 twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi
--- a/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi	Mon Nov 07 05:58:37 2011 +0100
+++ b/twisted/internet/iocpreactor/iocpsupport/wsarecv.pxi	Fri Nov 25 21:02:17 2011 +0100
@@ -3,11 +3,12 @@
 
 
 def recv(long s, object bufflist, object obj, unsigned long flags = 0):
-    cdef int rc, buffcount, i, res
+    cdef int rc, res
     cdef myOVERLAPPED *ov
     cdef WSABUF *ws_buf
     cdef unsigned long bytes
     cdef PyObject **buffers
+    cdef Py_ssize_t i, size, buffcount
 
     bufflist = PySequence_Fast(bufflist, 'second argument needs to be a list')
     buffcount = PySequence_Fast_GET_SIZE(bufflist)
@@ -17,13 +18,14 @@
 
     try:
         for i from 0 <= i < buffcount:
-            PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, <int *>&ws_buf[i].len)
+            PyObject_AsWriteBuffer(<object>buffers[i], <void **>&ws_buf[i].buf, &size)
+            ws_buf[i].len = <DWORD>size
 
         ov = makeOV()
         if obj is not None:
             ov.obj = <PyObject *>obj
 
-        rc = WSARecv(s, ws_buf, buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)
+        rc = WSARecv(s, ws_buf, <DWORD>buffcount, &bytes, &flags, <OVERLAPPED *>ov, NULL)
 
         if rc == SOCKET_ERROR:
             rc = WSAGetLastError()
@@ -42,10 +44,14 @@
     cdef unsigned long bytes
     cdef sockaddr *c_addr_buff
     cdef int *c_addr_len_buff
+    cdef Py_ssize_t size
 
-    PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, <int *>&ws_buf.len)
-    PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &c_addr_buff_len)
-    PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &c_addr_len_buff_len)
+    PyObject_AsWriteBuffer(buff, <void **>&ws_buf.buf, &size)
+    ws_buf.len = <DWORD>size
+    PyObject_AsWriteBuffer(addr_buff, <void **>&c_addr_buff, &size)
+    c_addr_buff_len = <int>size
+    PyObject_AsWriteBuffer(addr_len_buff, <void **>&c_addr_len_buff, &size)
+    c_addr_len_buff_len = <int>size
 
     if c_addr_len_buff_len != sizeof(int):
         raise ValueError, 'length of address length buffer needs to be sizeof(int)'
diff -r b14bde2bc4f0 twisted/internet/iocpreactor/iocpsupport/wsasend.pxi
--- a/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi	Mon Nov 07 05:58:37 2011 +0100
+++ b/twisted/internet/iocpreactor/iocpsupport/wsasend.pxi	Fri Nov 25 21:02:17 2011 +0100
@@ -7,8 +7,10 @@
     cdef myOVERLAPPED *ov
     cdef WSABUF ws_buf
     cdef unsigned long bytes
+    cdef Py_ssize_t size
 
-    PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, <int *>&ws_buf.len)
+    PyObject_AsReadBuffer(buff, <void **>&ws_buf.buf, &size)
+    ws_buf.len = <DWORD>size
 
     ov = makeOV()
     if obj is not None:
