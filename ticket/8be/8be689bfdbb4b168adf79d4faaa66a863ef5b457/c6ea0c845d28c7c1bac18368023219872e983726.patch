# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130120201739-2rtoihhgb9qsy0yw
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: e7349889cf119308a398f925adc3d01925220907
# timestamp: 2013-01-20 21:17:58 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:36870
# 
# Begin patch
=== modified file 'doc/conch/examples/sshsimpleserver.py'
--- doc/conch/examples/sshsimpleserver.py	2011-02-14 04:45:15 +0000
+++ doc/conch/examples/sshsimpleserver.py	2013-01-20 19:48:29 +0000
@@ -9,7 +9,7 @@
 from twisted.conch.ssh import factory, userauth, connection, keys, session
 from twisted.internet import reactor, protocol, defer
 from twisted.python import log
-from zope.interface import implements
+from zope.interface import implementer
 import sys
 log.startLogging(sys.stderr)
 
@@ -25,9 +25,8 @@
         self.username = username
         self.channelLookup.update({'session':session.SSHSession})
 
+@implementer(portal.IRealm)
 class ExampleRealm:
-    implements(portal.IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         return interfaces[0], ExampleAvatar(avatarId), lambda: None
 

=== modified file 'doc/core/examples/cred.py'
--- doc/core/examples/cred.py	2011-02-14 04:45:15 +0000
+++ doc/core/examples/cred.py	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 
 
 import sys
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 
 from twisted.protocols import basic
 from twisted.internet import protocol
@@ -23,27 +23,24 @@
     def logout():
         """Cleanup per-login resources allocated to this avatar"""
 
+@implementer(IProtocolUser)
 class AnonymousUser:
-    implements(IProtocolUser)
-    
     def getPrivileges(self):
         return [1, 2, 3]
 
     def logout(self):
         print "Cleaning up anonymous user resources"
 
+@implementer(IProtocolUser)
 class RegularUser:
-    implements(IProtocolUser)
-    
     def getPrivileges(self):
         return [1, 2, 3, 5, 6]
 
     def logout(self):
         print "Cleaning up regular user resources"
 
+@implementer(IProtocolUser)
 class Administrator:
-    implements(IProtocolUser)
-    
     def getPrivileges(self):
         return range(50)
 
@@ -127,9 +124,8 @@
         p.portal = self.portal
         return p
 
+@implementer(portal.IRealm)
 class Realm:
-    implements(portal.IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if IProtocolUser in interfaces:
             if avatarId == checkers.ANONYMOUS:

=== modified file 'doc/core/examples/dbcred.py'
--- doc/core/examples/dbcred.py	2011-02-14 04:45:15 +0000
+++ doc/core/examples/dbcred.py	2013-01-20 19:48:29 +0000
@@ -13,16 +13,15 @@
 from twisted.cred.checkers import ICredentialsChecker
 from twisted.internet.defer import Deferred
 
-from zope.interface import implements
-
-
+from zope.interface import implementer
+
+
+@implementer(ICredentialsChecker)
 class DBCredentialsChecker(object):
     """
     This class checks the credentials of incoming connections
     against a user table in a database.
     """
-    implements(ICredentialsChecker)
-
     def __init__(self, runQuery,
         query="SELECT username, password FROM user WHERE username = %s",
         customCheckFunc=None, caseSensitivePasswords=True):

=== modified file 'doc/core/examples/pbbenchserver.py'
--- doc/core/examples/pbbenchserver.py	2011-02-14 04:45:15 +0000
+++ doc/core/examples/pbbenchserver.py	2013-01-20 19:48:29 +0000
@@ -4,7 +4,7 @@
 
 """Server for PB benchmark."""
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.spread import pb
 from twisted.internet import reactor
@@ -28,9 +28,8 @@
         return ['a', 1, 1l, 1.0, [], ()]
 
 
+@implementer(IRealm)
 class SimpleRealm:
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective in interfaces:
             p = PBBenchPerspective()

=== modified file 'doc/core/examples/pbecho.py'
--- doc/core/examples/pbecho.py	2011-02-14 04:45:15 +0000
+++ doc/core/examples/pbecho.py	2013-01-20 19:48:29 +0000
@@ -6,7 +6,7 @@
     from pbecho import main
     raise SystemExit(main())
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.spread import pb
 from twisted.cred.portal import IRealm
@@ -28,9 +28,8 @@
         print self, "logged out"
 
 
+@implementer(IRealm)
 class SimpleRealm:
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective in interfaces:
             avatar = SimplePerspective()

=== modified file 'doc/core/examples/recvfd.py'
--- doc/core/examples/recvfd.py	2012-04-26 13:46:20 +0000
+++ doc/core/examples/recvfd.py	2013-01-20 19:48:29 +0000
@@ -21,7 +21,7 @@
 
 import os, sys
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python.log import startLogging
 from twisted.python.filepath import FilePath
@@ -32,9 +32,8 @@
 from twisted.internet.endpoints import UNIXClientEndpoint
 from twisted.internet import reactor
 
+@implementer(IFileDescriptorReceiver)
 class ReceiveFDProtocol(LineOnlyReceiver):
-    implements(IFileDescriptorReceiver)
-
     descriptor = None
 
     def __init__(self):

=== modified file 'doc/core/examples/streaming.py'
--- doc/core/examples/streaming.py	2011-04-11 16:29:12 +0000
+++ doc/core/examples/streaming.py	2013-01-20 19:48:29 +0000
@@ -13,20 +13,18 @@
 from sys import stdout
 from random import randrange
 
-from zope.interface import implements
+from zope.interface import implementer
 from twisted.python.log import startLogging
 from twisted.internet import interfaces, reactor
 from twisted.internet.protocol import Factory
 from twisted.protocols.basic import LineReceiver
 
 
+@implementer(interfaces.IPushProducer)
 class Producer(object):
     """
     Send back the requested number of random integers to the client.
     """
-
-    implements(interfaces.IPushProducer)
-
     def __init__(self, proto, count):
         self._proto = proto
         self._goal = count

=== modified file 'doc/core/howto/amp.xhtml'
--- doc/core/howto/amp.xhtml	2011-09-06 12:17:45 +0000
+++ doc/core/howto/amp.xhtml	2013-01-20 19:48:29 +0000
@@ -81,13 +81,12 @@
 
     <p>AMP conversations consist of an exchange of messages called <em>boxes</em>.  A <em>box</em> consists of a sequence of pairs of key and value (for example, the pair <code>username</code> and <code>alice</code>).  Boxes are generally represented as <code>dict</code> instances.  Normally boxes are passed back and forth to implement the command request/response features described above.  The logic for handling each box can be specified as an object separate from the <code>AMP</code> instance.</p>
 
-    <pre class="python">from zope.interface import implements
+    <pre class="python">from zope.interface import implementer
 
 from twisted.protocols.amp import IBoxReceiver
 
+@implementer(IBoxReceiver)
 class BoxReflector(object):
-    implements(IBoxReceiver)
-
     def startReceivingBoxes(self, boxSender):
         self.boxSender = boxSender
 

=== modified file 'doc/core/howto/cred.xhtml'
--- doc/core/howto/cred.xhtml	2012-12-25 03:39:24 +0000
+++ doc/core/howto/cred.xhtml	2013-01-20 19:48:29 +0000
@@ -237,9 +237,8 @@
         print self, "logged out"
 
 
+@implementer(IRealm)
 class SimpleRealm:
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective in interfaces:
             avatar = SimplePerspective()
@@ -337,20 +336,19 @@
 </p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted import plugin
 from twisted.cred.strcred import ICheckerFactory
 from myapp.cred import SpecialChecker
 
+# The class needs to implement both of these interfaces
+# for the plugin system to find our factory.
+@implementer(ICheckerFactory, plugin.IPlugin)
 class SpecialCheckerFactory(object):
     """
     A checker factory for a specialized (fictional) API.
     """
-    # The class needs to implement both of these interfaces
-    # for the plugin system to find our factory.
-    implements(ICheckerFactory, plugin.IPlugin)
-
     # This tells AuthOptionsMixin how to find this factory.
     authType = "special"
 

=== modified file 'doc/core/howto/listings/TwistedQuotes/quoters.py'
--- doc/core/howto/listings/TwistedQuotes/quoters.py	2008-06-28 15:01:36 +0000
+++ doc/core/howto/listings/TwistedQuotes/quoters.py	2013-01-20 19:48:29 +0000
@@ -1,18 +1,16 @@
 from random import choice
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from TwistedQuotes import quoteproto
 
 
 
+@implementer(quoteproto.IQuoter)
 class StaticQuoter:
     """
     Return a static quote.
     """
-
-    implements(quoteproto.IQuoter)
-
     def __init__(self, quote):
         self.quote = quote
 
@@ -22,12 +20,11 @@
 
 
 
+@implementer(quoteproto.IQuoter)
 class FortuneQuoter:
     """
     Load quotes from a fortune-format file.
     """
-    implements(quoteproto.IQuoter)
-
     def __init__(self, filenames):
         self.filenames = filenames
 

=== modified file 'doc/core/howto/listings/pb/chatserver.py'
--- doc/core/howto/listings/pb/chatserver.py	2011-03-14 07:15:50 +0000
+++ doc/core/howto/listings/pb/chatserver.py	2013-01-20 19:48:29 +0000
@@ -3,7 +3,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.cred import portal, checkers
 from twisted.spread import pb
@@ -19,8 +19,8 @@
         self.groups[groupname].addUser(user)
         return self.groups[groupname]
 
+@implementer(portal.IRealm)
 class ChatRealm:
-    implements(portal.IRealm)
     def requestAvatar(self, avatarID, mind, *interfaces):
         assert pb.IPerspective in interfaces
         avatar = User(avatarID)

=== modified file 'doc/core/howto/listings/pb/pb5server.py'
--- doc/core/howto/listings/pb/pb5server.py	2011-02-14 04:45:15 +0000
+++ doc/core/howto/listings/pb/pb5server.py	2013-01-20 19:48:29 +0000
@@ -3,7 +3,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.spread import pb
 from twisted.cred import checkers, portal
@@ -15,8 +15,8 @@
     def perspective_foo(self, arg):
         print "I am", self.name, "perspective_foo(",arg,") called on", self
 
+@implementer(portal.IRealm)
 class MyRealm:
-    implements(portal.IRealm)
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective not in interfaces:
             raise NotImplementedError

=== modified file 'doc/core/howto/listings/pb/pb6server.py'
--- doc/core/howto/listings/pb/pb6server.py	2011-02-14 04:45:15 +0000
+++ doc/core/howto/listings/pb/pb6server.py	2013-01-20 19:48:29 +0000
@@ -3,7 +3,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.spread import pb
 from twisted.cred import checkers, portal
@@ -15,8 +15,8 @@
     def perspective_foo(self, arg):
         print "I am", self.name, "perspective_foo(",arg,") called on", self
 
+@implementer(portal.IRealm)
 class MyRealm:
-    implements(portal.IRealm)
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective not in interfaces:
             raise NotImplementedError

=== modified file 'doc/core/howto/listings/pb/pbAnonServer.py'
--- doc/core/howto/listings/pb/pbAnonServer.py	2011-02-14 04:45:15 +0000
+++ doc/core/howto/listings/pb/pbAnonServer.py	2013-01-20 19:48:29 +0000
@@ -15,7 +15,7 @@
 
 from sys import stdout
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python.log import startLogging
 from twisted.cred.checkers import ANONYMOUS, AllowAnonymousAccess
@@ -51,13 +51,12 @@
 
 
 
+@implementer(IRealm)
 class MyRealm(object):
     """
     Trivial realm which supports anonymous and named users by creating
     avatars which are instances of MyPerspective for either.
     """
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if IPerspective not in interfaces:
             raise NotImplementedError("MyRealm only handles IPerspective")

=== modified file 'doc/core/howto/pb-clients.xhtml'
--- doc/core/howto/pb-clients.xhtml	2011-03-14 07:15:50 +0000
+++ doc/core/howto/pb-clients.xhtml	2013-01-20 19:48:29 +0000
@@ -35,7 +35,7 @@
 caching mechanism:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class SimpleAvatar(pb.Avatar):
     greetings = 0
@@ -45,9 +45,8 @@
         self.greetings += 1
         return "&lt;%d&gt;hello %s" % (self.greetings, self.name)
 
+@implementer(portal.IRealm)
 class CachingRealm:
-    implements(portal.IRealm)
-
     def __init__(self):
         self.avatars = {}
 
@@ -73,7 +72,7 @@
 else. Here is an example of that:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class Greeter:
     greetings = 0
@@ -88,9 +87,8 @@
     def perspective_greet(self):
         return self.greeter.hello()+' '+self.name
 
+@implementer(portal.IRealm)
 class CachingRealm:
-    implements(portal.IRealm)
-
     def __init__(self):
         self.greeters = {}
 
@@ -110,7 +108,7 @@
 there is a better pattern:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class SimpleAvatar(pb.Avatar):
     greetings = 0
@@ -125,9 +123,8 @@
         self.greetings += 1
         return "&lt;%d&gt;hello %s" % (self.greetings, self.name)
 
+@implementer(portal.IRealm)
 class CachingRealm:
-    implements(portal.IRealm)
-
     def __init__(self):
         self.avatars = {}
 
@@ -145,7 +142,7 @@
 the number of concurrent connections:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class SimpleAvatar(pb.Avatar):
     greetings = 0
@@ -160,9 +157,8 @@
         self.greetings += 1
         return "&lt;%d&gt;hello %s" % (self.greetings, self.name)
 
+@implementer(portal.IRealm)
 class CachingRealm:
-    implements(portal.IRealm)
-
     def __init__(self, max=1):
         self.avatars = {}
         self.max = max
@@ -192,7 +188,7 @@
 of the <code>mind</code> argument:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class SimpleAvatar(pb.Avatar):
     def __init__(self, client):
@@ -208,9 +204,8 @@
     def logout(self):
         self.s.stopService()
 
+@implementer(portal.IRealm)
 class Realm:
-    implements(portal.IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective not in interfaces: raise NotImplementedError
         p = SimpleAvatar(mind)

=== modified file 'doc/core/howto/plugin.xhtml'
--- doc/core/howto/plugin.xhtml	2011-10-04 19:35:22 +0000
+++ doc/core/howto/plugin.xhtml	2013-01-20 19:48:29 +0000
@@ -129,13 +129,12 @@
     location.  Consider the following example.</p>
 
     <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 from twisted.plugin import IPlugin
 from matsim import imatsim
 
+@implementer(IPlugin, imatsim.IMaterial)
 class SimpleMaterial(object):
-    implements(IPlugin, imatsim.IMaterial)
-
     def __init__(self, yieldStressFactor, dielectricConstant):
         self._yieldStressFactor = yieldStressFactor
         self.dielectricConstant = dielectricConstant

=== modified file 'doc/core/howto/tap.xhtml'
--- doc/core/howto/tap.xhtml	2011-10-21 12:15:37 +0000
+++ doc/core/howto/tap.xhtml	2013-01-20 19:48:29 +0000
@@ -90,7 +90,7 @@
 subclass) will be used to parse the given args.</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python import usage
 from twisted.plugin import IPlugin
@@ -104,8 +104,8 @@
     optParameters = [["port", "p", 1235, "The port number to listen on."]]
 
 
+@implementer(IServiceMaker, IPlugin)
 class MyServiceMaker(object):
-    implements(IServiceMaker, IPlugin)
     tapname = "myproject"
     description = "Run this! It'll make your dog happy."
     options = Options
@@ -167,8 +167,8 @@
         ["port", "p", 1234, "Server port number"],
         ["host", "h", "localhost", "Server hostname"]]
 
+@implementer(IServiceMaker, IPlugin)
 class MyServerServiceMaker(object):
-    implements(IServiceMaker, IPlugin)
     tapname = "myserver"
     description = "This server does nothing productive."
     options = ServerOptions

=== modified file 'doc/core/howto/tutorial/components.xhtml'
--- doc/core/howto/tutorial/components.xhtml	2010-06-27 00:12:10 +0000
+++ doc/core/howto/tutorial/components.xhtml	2013-01-20 20:17:39 +0000
@@ -28,8 +28,9 @@
 of protocols. Here, we used the component-based architecture that Twisted
 provides to achieve a separation of concerns. All the service is responsible
 for, now, is supporting <code>getUser</code>/<code>getUsers</code>. It declares
-its support via a call to <code>zope.interface.implements</code>. Then, adapters
-are used to make this service look like an appropriate class for various things:
+its support by decorating itself with <code>zope.interface.implementer</code>.
+Then, adapters are used to make this service look like an appropriate class for
+various things:
 for supplying a finger factory to <code>TCPServer</code>, for supplying a
 resource to site's constructor, and to provide an IRC client factory
 for <code>TCPClient</code>.  All the adapters use are the methods

=== modified file 'doc/core/howto/tutorial/listings/finger/finger/finger.py'
--- doc/core/howto/tutorial/listings/finger/finger/finger.py	2011-01-22 14:10:51 +0000
+++ doc/core/howto/tutorial/listings/finger/finger/finger.py	2013-01-20 19:48:29 +0000
@@ -1,6 +1,6 @@
 # finger.py module
 
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 
 from twisted.application import internet, service
 from twisted.internet import protocol, reactor, defer
@@ -61,9 +61,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -103,10 +102,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -153,10 +150,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -263,10 +258,8 @@
         """
 
 
+@implementer(IPerspectiveFinger)
 class PerspectiveFingerFromService(pb.Root):
-
-    implements(IPerspectiveFinger)
-
     def __init__(self, service):
         self.service = service
 
@@ -281,10 +274,8 @@
                            IPerspectiveFinger)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
 

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19.tac'
--- doc/core/howto/tutorial/listings/finger/finger19.tac	2011-09-21 22:23:38 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 
 class IFingerService(Interface):
@@ -57,10 +57,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -100,10 +98,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -149,10 +145,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -167,10 +161,8 @@
                            IIRCClientFactory)
 
 
+@implementer(resource.IResource)
 class UserStatusTree(resource.Resource):
-
-    implements(resource.IResource)
-
     def __init__(self, service):
         resource.Resource.__init__(self)
         self.service = service
@@ -224,10 +216,8 @@
         return self.service.getUser(user)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19a.tac'
--- doc/core/howto/tutorial/listings/finger/finger19a.tac	2008-07-30 15:14:19 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19a.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 
 class IFingerService(Interface):
@@ -44,10 +44,8 @@
         """Return a protocol returning a string"""
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -82,10 +80,8 @@
         """Return a protocol returning a string"""
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -127,10 +123,8 @@
         """Return a protocol"""
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -144,10 +138,8 @@
                            IFingerService,
                            IIRCClientFactory)
 
+@implementer(resource.IResource)
 class UserStatusTree(resource.Resource):
-
-    implements(resource.IResource)
-
     def __init__(self, service):
         resource.Resource.__init__(self)
         self.service = service
@@ -199,10 +191,8 @@
     def xmlrpc_getUser(self, user):
         return self.service.getUser(user)
 
+@implementer(IFingerService, IFingerSetterService)
 class MemoryFingerService(service.Service):
-
-    implements([IFingerService, IFingerSetterService])
-
     def __init__(self, **kwargs):
         self.users = kwargs
 

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19a_changes.py'
--- doc/core/howto/tutorial/listings/finger/finger19a_changes.py	2006-07-01 16:08:17 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19a_changes.py	2013-01-20 19:48:29 +0000
@@ -6,10 +6,8 @@
 
 # Advantages of latest version
 
+@implementer(IFingerService, IFingerSetterService)
 class MemoryFingerService(service.Service):
-
-    implements([IFingerService, IFingerSetterService])
-
     def __init__(self, **kwargs):
         self.users = kwargs
 

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19b.tac'
--- doc/core/howto/tutorial/listings/finger/finger19b.tac	2011-01-22 14:10:51 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19b.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 import pwd
 
@@ -66,10 +66,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -109,10 +107,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -158,10 +154,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -176,10 +170,8 @@
                            IIRCClientFactory)
 
 
+@implementer(resource.IResource)
 class UserStatusTree(resource.Resource):
-
-    implements(resource.IResource)
-
     def __init__(self, service):
         resource.Resource.__init__(self)
         self.service = service
@@ -233,10 +225,8 @@
         return self.service.getUser(user)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}
@@ -267,10 +257,8 @@
 
 # Another back-end
 
+@implementer(IFingerService)
 class LocalFingerService(service.Service):
-
-    implements(IFingerService)
-
     def getUser(self, user):
     # need a local finger daemon running for this to work
         return utils.getProcessOutput("finger", [user])

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19b_changes.py'
--- doc/core/howto/tutorial/listings/finger/finger19b_changes.py	2005-02-12 00:28:37 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19b_changes.py	2013-01-20 19:48:29 +0000
@@ -4,10 +4,8 @@
 
 # Another back-end
 
+@implementer(IFingerService)
 class LocalFingerService(service.Service):
-
-    implements(IFingerService)
-
     def getUser(self, user):
     # need a local finger daemon running for this to work
         return utils.getProcessOutput("finger", [user])

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19c.tac'
--- doc/core/howto/tutorial/listings/finger/finger19c.tac	2011-01-22 14:10:51 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19c.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 import pwd
 import os
@@ -67,10 +67,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -110,10 +108,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -160,10 +156,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -178,10 +172,8 @@
                            IIRCClientFactory)
 
 
+@implementer(resource.IResource)
 class UserStatusTree(resource.Resource):
-
-    implements(resource.IResource)
-
     def __init__(self, service):
         resource.Resource.__init__(self)
         self.service = service
@@ -235,10 +227,8 @@
         return self.service.getUser(user)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}
@@ -269,10 +259,8 @@
 
 # Yet another back-end
 
+@implementer(IFingerService)
 class LocalFingerService(service.Service):
-
-    implements(IFingerService)
-
     def getUser(self, user):
         user = user.strip()
         try:

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19c_changes.py'
--- doc/core/howto/tutorial/listings/finger/finger19c_changes.py	2005-02-12 00:28:37 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19c_changes.py	2013-01-20 19:48:29 +0000
@@ -5,10 +5,8 @@
 
 # Yet another back-end
 
+@implementer(IFingerService)
 class LocalFingerService(service.Service):
-
-    implements(IFingerService)
-
     def getUser(self, user):
         user = user.strip()
         try:

=== modified file 'doc/core/howto/tutorial/listings/finger/finger20.tac'
--- doc/core/howto/tutorial/listings/finger/finger20.tac	2011-09-21 22:23:38 +0000
+++ doc/core/howto/tutorial/listings/finger/finger20.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc, microdom
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 
 class IFingerService(Interface):
@@ -57,10 +57,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -100,10 +98,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -150,10 +146,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -239,10 +233,8 @@
         return self.service.getUsers()
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}

=== modified file 'doc/core/howto/tutorial/listings/finger/finger21.tac'
--- doc/core/howto/tutorial/listings/finger/finger21.tac	2011-09-21 22:23:38 +0000
+++ doc/core/howto/tutorial/listings/finger/finger21.tac	2013-01-20 19:48:29 +0000
@@ -6,7 +6,7 @@
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc, microdom
 from twisted.spread import pb
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 
 class IFingerService(Interface):
@@ -58,10 +58,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -101,10 +99,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -151,10 +147,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -253,10 +247,8 @@
         """
 
 
+@implementer(IPerspectiveFinger)
 class PerspectiveFingerFromService(pb.Root):
-
-    implements(IPerspectiveFinger)
-
     def __init__(self, service):
         self.service = service
 
@@ -271,10 +263,8 @@
                            IPerspectiveFinger)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}

=== modified file 'doc/core/howto/tutorial/listings/finger/finger22.py'
--- doc/core/howto/tutorial/listings/finger/finger22.py	2011-09-21 22:23:38 +0000
+++ doc/core/howto/tutorial/listings/finger/finger22.py	2013-01-20 19:48:29 +0000
@@ -6,7 +6,7 @@
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc, microdom
 from twisted.spread import pb
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 from OpenSSL import SSL
 import cgi
 
@@ -59,10 +59,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -102,10 +100,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -152,10 +148,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -253,10 +247,8 @@
         Return a user's status.
         """
 
+@implementer(IPerspectiveFinger)
 class PerspectiveFingerFromService(pb.Root):
-
-    implements(IPerspectiveFinger)
-
     def __init__(self, service):
         self.service = service
 
@@ -271,10 +263,8 @@
                            IPerspectiveFinger)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}

=== modified file 'doc/core/howto/tutorial/listings/finger/fingerproxy.tac'
--- doc/core/howto/tutorial/listings/finger/fingerproxy.tac	2008-07-30 15:14:19 +0000
+++ doc/core/howto/tutorial/listings/finger/fingerproxy.tac	2013-01-20 19:48:29 +0000
@@ -3,7 +3,7 @@
 from twisted.internet import defer, protocol, reactor
 from twisted.protocols import basic
 from twisted.python import components
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 
 
 def catchError(err):
@@ -38,10 +38,8 @@
 
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ClientFactory):
-    
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
     
     def __init__(self, service):
@@ -88,9 +86,8 @@
     return f.d
 
 
+@implementer(IFingerService)
 class ProxyFingerService(service.Service):
-    implements(IFingerService)
-
     def getUser(self, user):
         try:
             user, host = user.split('@', 1)

=== modified file 'doc/lore/howto/listings/lore/a_lore_plugin.py'
--- doc/lore/howto/listings/lore/a_lore_plugin.py	2008-12-15 15:38:38 +0000
+++ doc/lore/howto/listings/lore/a_lore_plugin.py	2013-01-20 19:48:29 +0000
@@ -1,11 +1,10 @@
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.plugin import IPlugin
 from twisted.lore.scripts.lore import IProcessor
 
+@implementer(IPlugin, IProcessor)
 class MyHTML(object):
-    implements(IPlugin, IProcessor)
-
     name = "myhtml"
     moduleName = "myhtml.factory"

=== modified file 'doc/mail/examples/emailserver.tac'
--- doc/mail/examples/emailserver.tac	2011-02-14 04:45:15 +0000
+++ doc/mail/examples/emailserver.tac	2013-01-20 19:48:29 +0000
@@ -8,7 +8,7 @@
 A toy email server.
 """
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.internet import defer
 from twisted.mail import smtp
@@ -20,9 +20,8 @@
 
 
 
+@implementer(smtp.IMessageDelivery)
 class ConsoleMessageDelivery:
-    implements(smtp.IMessageDelivery)
-    
     def receivedHeader(self, helo, origin, recipients):
         return "Received: ConsoleMessageDelivery"
 
@@ -40,9 +39,8 @@
 
 
 
+@implementer(smtp.IMessage)
 class ConsoleMessage:
-    implements(smtp.IMessage)
-    
     def __init__(self):
         self.lines = []
 
@@ -80,9 +78,8 @@
 
 
 
+@implementer(IRealm)
 class SimpleRealm:
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if smtp.IMessageDelivery in interfaces:
             return smtp.IMessageDelivery, ConsoleMessageDelivery(), lambda: None

=== modified file 'doc/mail/tutorial/smtpserver/smtpserver-5.tac'
--- doc/mail/tutorial/smtpserver/smtpserver-5.tac	2005-03-27 00:34:07 +0000
+++ doc/mail/tutorial/smtpserver/smtpserver-5.tac	2013-01-20 19:48:29 +0000
@@ -1,5 +1,5 @@
 import os
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.application import service
 
@@ -12,9 +12,8 @@
 
 from twisted.mail import smtp
 
+@implementer(smtp.IMessage)
 class FileMessage(object):
-    implements(smtp.IMessage)
-
     def __init__(self, fileObj):
         self.fileObj = fileObj
 

=== modified file 'doc/mail/tutorial/smtpserver/smtpserver-6.tac'
--- doc/mail/tutorial/smtpserver/smtpserver-6.tac	2005-03-27 00:34:07 +0000
+++ doc/mail/tutorial/smtpserver/smtpserver-6.tac	2013-01-20 19:48:29 +0000
@@ -1,5 +1,5 @@
 import os
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.application import service
 
@@ -12,9 +12,8 @@
 
 from twisted.mail import smtp
 
+@implementer(smtp.IMessage)
 class FileMessage(object):
-    implements(smtp.IMessage)
-
     def __init__(self, fileObj):
         self.fileObj = fileObj
 

=== modified file 'doc/mail/tutorial/smtpserver/smtpserver-7.tac'
--- doc/mail/tutorial/smtpserver/smtpserver-7.tac	2005-03-27 00:34:07 +0000
+++ doc/mail/tutorial/smtpserver/smtpserver-7.tac	2013-01-20 19:48:29 +0000
@@ -1,5 +1,5 @@
 import os
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.application import service
 
@@ -10,9 +10,8 @@
 
 from twisted.mail import smtp
 
+@implementer(smtp.IMessage)
 class FileMessage(object):
-    implements(smtp.IMessage)
-
     def __init__(self, fileObj):
         self.fileObj = fileObj
 
@@ -27,8 +26,8 @@
         self.fileObj.close()
         os.remove(self.fileObj.name)
 
+@implementer(smtp.IMessageDelivery)
 class TutorialDelivery(object):
-    implements(smtp.IMessageDelivery)
     counter = 0
 
     def validateTo(self, user):

=== modified file 'doc/mail/tutorial/smtpserver/smtpserver-8.tac'
--- doc/mail/tutorial/smtpserver/smtpserver-8.tac	2005-03-27 00:34:07 +0000
+++ doc/mail/tutorial/smtpserver/smtpserver-8.tac	2013-01-20 19:48:29 +0000
@@ -1,5 +1,5 @@
 import os
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.application import service
 
@@ -10,9 +10,8 @@
 
 from twisted.mail import smtp
 
+@implementer(smtp.IMessage)
 class FileMessage(object):
-    implements(smtp.IMessage)
-
     def __init__(self, fileObj):
         self.fileObj = fileObj
 
@@ -27,8 +26,8 @@
         self.fileObj.close()
         os.remove(self.fileObj.name)
 
+@implementer(smtp.IMessageDelivery)
 class TutorialDelivery(object):
-    implements(smtp.IMessageDelivery)
     counter = 0
 
     def validateTo(self, user):
@@ -42,9 +41,8 @@
     def receivedHeader(self, helo, origin, recipients):
         return 'Received: Tutorially.'
 
+@implementer(smtp.IMessageDeliveryFactory)
 class TutorialDeliveryFactory(object):
-    implements(smtp.IMessageDeliveryFactory)
-
     def getMessageDelivery(self):
         return TutorialDelivery()
 

=== modified file 'doc/web/examples/webguard.py'
--- doc/web/examples/webguard.py	2012-04-22 15:41:48 +0000
+++ doc/web/examples/webguard.py	2013-01-20 19:48:29 +0000
@@ -13,7 +13,7 @@
 
 import sys
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python import log
 from twisted.internet import reactor
@@ -36,13 +36,12 @@
 
 
 
+@implementer(IRealm)
 class SimpleRealm(object):
     """
     A realm which gives out L{GuardedResource} instances for authenticated
     users.
     """
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if resource.IResource in interfaces:
             return resource.IResource, GuardedResource(), lambda: None

=== modified file 'doc/web/howto/listings/client/stringprod.py'
--- doc/web/howto/listings/client/stringprod.py	2009-11-08 22:57:59 +0000
+++ doc/web/howto/listings/client/stringprod.py	2013-01-20 19:48:29 +0000
@@ -1,11 +1,10 @@
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.internet.defer import succeed
 from twisted.web.iweb import IBodyProducer
 
+@implementer(IBodyProducer)
 class StringProducer(object):
-    implements(IBodyProducer)
-
     def __init__(self, body):
         self.body = body
         self.length = len(body)

=== modified file 'doc/web/howto/web-in-60/http-auth.xhtml'
--- doc/web/howto/web-in-60/http-auth.xhtml	2011-03-14 04:57:39 +0000
+++ doc/web/howto/web-in-60/http-auth.xhtml	2013-01-20 19:48:29 +0000
@@ -52,7 +52,7 @@
 example we'll keep it very simple: each user will have a resource
 which is a static file listing of the <code>public_html</code>
 directory in their UNIX home directory. First, we need to
-import <code>implements</code> from <code>zope.interface</code>
+import <code>implementer</code> from <code>zope.interface</code>
 and <code>IRealm</code>
 from <code>twisted.cred.portal</code>. Together these will let me mark
 this class as a realm (this is mostly - but not entirely - a
@@ -61,13 +61,14 @@
 later.</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.cred.portal import IRealm
 from twisted.web.static import File
 
+@implementer(IRealm)
 class PublicHTMLRealm(object):
-    implements(IRealm)
+    pass
 </pre>
 
 <p>A realm only needs to implement one method: <code class="API"
@@ -194,7 +195,7 @@
 <pre class="python">
 cache()
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.cred.portal import IRealm, Portal
 from twisted.cred.checkers import FilePasswordDB
@@ -202,9 +203,8 @@
 from twisted.web.resource import IResource
 from twisted.web.guard import HTTPAuthSessionWrapper, DigestCredentialFactory
 
+@implementer(IRealm)
 class PublicHTMLRealm(object):
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if IResource in interfaces:
             return (IResource, File("/home/%s/public_html" % (avatarId,)), lambda: None)

=== modified file 'doc/web/howto/web-in-60/session-store.xhtml'
--- doc/web/howto/web-in-60/session-store.xhtml	2010-09-18 15:36:46 +0000
+++ doc/web/howto/web-in-60/session-store.xhtml	2013-01-20 20:17:39 +0000
@@ -26,14 +26,14 @@
 example:</p>
 
 <pre class="shell">
->>> from zope.interface import Interface, Attribute, implements
+>>> from zope.interface import Interface, Attribute, implementer
 >>> from twisted.python.components import registerAdapter
 >>> from twisted.web.server import Session
 >>> class ICounter(Interface):
 ...     value = Attribute("An int value which counts up once per page view.")
 ...
->>> class Counter(object):
-...     implements(ICounter)
+>>> @implementer(ICounter)
+... class Counter(object):
 ...     def __init__(self, session):
 ...         self.value = 0
 ...
@@ -109,7 +109,7 @@
 <pre class="python">
 cache()
 
-from zope.interface import Interface, Attribute, implements
+from zope.interface import Interface, Attribute, implementer
 from twisted.python.components import registerAdapter
 from twisted.web.server import Session
 from twisted.web.resource import Resource
@@ -117,8 +117,8 @@
 class ICounter(Interface):
     value = Attribute("An int value which counts up once per page view.")
 
+@implementer(ICounter)
 class Counter(object):
-    implements(ICounter)
     def __init__(self, session):
         self.value = 0
 

=== added file 'twisted/topfiles/6270.doc'
--- twisted/topfiles/6270.doc	1970-01-01 00:00:00 +0000
+++ twisted/topfiles/6270.doc	2013-01-20 19:50:58 +0000
@@ -0,0 +1,1 @@
+All narrative docs and their examples use zope.interface's decorator-based API now.

# Begin bundle
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
