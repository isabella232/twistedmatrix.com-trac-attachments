# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130120195058-lrg309m0tisorbjt
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: 3725c6bf4f1a6c3d43ecf39ca756ed0bb94657c6
# timestamp: 2013-01-20 20:51:37 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:36870
# 
# Begin patch
=== modified file 'doc/conch/examples/sshsimpleserver.py'
--- doc/conch/examples/sshsimpleserver.py	2011-02-14 04:45:15 +0000
+++ doc/conch/examples/sshsimpleserver.py	2013-01-20 19:48:29 +0000
@@ -9,7 +9,7 @@
 from twisted.conch.ssh import factory, userauth, connection, keys, session
 from twisted.internet import reactor, protocol, defer
 from twisted.python import log
-from zope.interface import implements
+from zope.interface import implementer
 import sys
 log.startLogging(sys.stderr)
 
@@ -25,9 +25,8 @@
         self.username = username
         self.channelLookup.update({'session':session.SSHSession})
 
+@implementer(portal.IRealm)
 class ExampleRealm:
-    implements(portal.IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         return interfaces[0], ExampleAvatar(avatarId), lambda: None
 

=== modified file 'doc/core/examples/cred.py'
--- doc/core/examples/cred.py	2011-02-14 04:45:15 +0000
+++ doc/core/examples/cred.py	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 
 
 import sys
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 
 from twisted.protocols import basic
 from twisted.internet import protocol
@@ -23,27 +23,24 @@
     def logout():
         """Cleanup per-login resources allocated to this avatar"""
 
+@implementer(IProtocolUser)
 class AnonymousUser:
-    implements(IProtocolUser)
-    
     def getPrivileges(self):
         return [1, 2, 3]
 
     def logout(self):
         print "Cleaning up anonymous user resources"
 
+@implementer(IProtocolUser)
 class RegularUser:
-    implements(IProtocolUser)
-    
     def getPrivileges(self):
         return [1, 2, 3, 5, 6]
 
     def logout(self):
         print "Cleaning up regular user resources"
 
+@implementer(IProtocolUser)
 class Administrator:
-    implements(IProtocolUser)
-    
     def getPrivileges(self):
         return range(50)
 
@@ -127,9 +124,8 @@
         p.portal = self.portal
         return p
 
+@implementer(portal.IRealm)
 class Realm:
-    implements(portal.IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if IProtocolUser in interfaces:
             if avatarId == checkers.ANONYMOUS:

=== modified file 'doc/core/examples/dbcred.py'
--- doc/core/examples/dbcred.py	2011-02-14 04:45:15 +0000
+++ doc/core/examples/dbcred.py	2013-01-20 19:48:29 +0000
@@ -13,16 +13,15 @@
 from twisted.cred.checkers import ICredentialsChecker
 from twisted.internet.defer import Deferred
 
-from zope.interface import implements
-
-
+from zope.interface import implementer
+
+
+@implementer(ICredentialsChecker)
 class DBCredentialsChecker(object):
     """
     This class checks the credentials of incoming connections
     against a user table in a database.
     """
-    implements(ICredentialsChecker)
-
     def __init__(self, runQuery,
         query="SELECT username, password FROM user WHERE username = %s",
         customCheckFunc=None, caseSensitivePasswords=True):

=== modified file 'doc/core/examples/pbbenchserver.py'
--- doc/core/examples/pbbenchserver.py	2011-02-14 04:45:15 +0000
+++ doc/core/examples/pbbenchserver.py	2013-01-20 19:48:29 +0000
@@ -4,7 +4,7 @@
 
 """Server for PB benchmark."""
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.spread import pb
 from twisted.internet import reactor
@@ -28,9 +28,8 @@
         return ['a', 1, 1l, 1.0, [], ()]
 
 
+@implementer(IRealm)
 class SimpleRealm:
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective in interfaces:
             p = PBBenchPerspective()

=== modified file 'doc/core/examples/pbecho.py'
--- doc/core/examples/pbecho.py	2011-02-14 04:45:15 +0000
+++ doc/core/examples/pbecho.py	2013-01-20 19:48:29 +0000
@@ -6,7 +6,7 @@
     from pbecho import main
     raise SystemExit(main())
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.spread import pb
 from twisted.cred.portal import IRealm
@@ -28,9 +28,8 @@
         print self, "logged out"
 
 
+@implementer(IRealm)
 class SimpleRealm:
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective in interfaces:
             avatar = SimplePerspective()

=== modified file 'doc/core/examples/recvfd.py'
--- doc/core/examples/recvfd.py	2012-04-26 13:46:20 +0000
+++ doc/core/examples/recvfd.py	2013-01-20 19:48:29 +0000
@@ -21,7 +21,7 @@
 
 import os, sys
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python.log import startLogging
 from twisted.python.filepath import FilePath
@@ -32,9 +32,8 @@
 from twisted.internet.endpoints import UNIXClientEndpoint
 from twisted.internet import reactor
 
+@implementer(IFileDescriptorReceiver)
 class ReceiveFDProtocol(LineOnlyReceiver):
-    implements(IFileDescriptorReceiver)
-
     descriptor = None
 
     def __init__(self):

=== modified file 'doc/core/examples/streaming.py'
--- doc/core/examples/streaming.py	2011-04-11 16:29:12 +0000
+++ doc/core/examples/streaming.py	2013-01-20 19:48:29 +0000
@@ -13,20 +13,18 @@
 from sys import stdout
 from random import randrange
 
-from zope.interface import implements
+from zope.interface import implementer
 from twisted.python.log import startLogging
 from twisted.internet import interfaces, reactor
 from twisted.internet.protocol import Factory
 from twisted.protocols.basic import LineReceiver
 
 
+@implementer(interfaces.IPushProducer)
 class Producer(object):
     """
     Send back the requested number of random integers to the client.
     """
-
-    implements(interfaces.IPushProducer)
-
     def __init__(self, proto, count):
         self._proto = proto
         self._goal = count

=== modified file 'doc/core/howto/amp.xhtml'
--- doc/core/howto/amp.xhtml	2011-09-06 12:17:45 +0000
+++ doc/core/howto/amp.xhtml	2013-01-20 19:48:29 +0000
@@ -81,13 +81,12 @@
 
     <p>AMP conversations consist of an exchange of messages called <em>boxes</em>.  A <em>box</em> consists of a sequence of pairs of key and value (for example, the pair <code>username</code> and <code>alice</code>).  Boxes are generally represented as <code>dict</code> instances.  Normally boxes are passed back and forth to implement the command request/response features described above.  The logic for handling each box can be specified as an object separate from the <code>AMP</code> instance.</p>
 
-    <pre class="python">from zope.interface import implements
+    <pre class="python">from zope.interface import implementer
 
 from twisted.protocols.amp import IBoxReceiver
 
+@implementer(IBoxReceiver)
 class BoxReflector(object):
-    implements(IBoxReceiver)
-
     def startReceivingBoxes(self, boxSender):
         self.boxSender = boxSender
 

=== modified file 'doc/core/howto/cred.xhtml'
--- doc/core/howto/cred.xhtml	2012-12-25 03:39:24 +0000
+++ doc/core/howto/cred.xhtml	2013-01-20 19:48:29 +0000
@@ -237,9 +237,8 @@
         print self, "logged out"
 
 
+@implementer(IRealm)
 class SimpleRealm:
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective in interfaces:
             avatar = SimplePerspective()
@@ -337,20 +336,19 @@
 </p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted import plugin
 from twisted.cred.strcred import ICheckerFactory
 from myapp.cred import SpecialChecker
 
+# The class needs to implement both of these interfaces
+# for the plugin system to find our factory.
+@implementer(ICheckerFactory, plugin.IPlugin)
 class SpecialCheckerFactory(object):
     """
     A checker factory for a specialized (fictional) API.
     """
-    # The class needs to implement both of these interfaces
-    # for the plugin system to find our factory.
-    implements(ICheckerFactory, plugin.IPlugin)
-
     # This tells AuthOptionsMixin how to find this factory.
     authType = "special"
 

=== modified file 'doc/core/howto/listings/TwistedQuotes/quoters.py'
--- doc/core/howto/listings/TwistedQuotes/quoters.py	2008-06-28 15:01:36 +0000
+++ doc/core/howto/listings/TwistedQuotes/quoters.py	2013-01-20 19:48:29 +0000
@@ -1,18 +1,16 @@
 from random import choice
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from TwistedQuotes import quoteproto
 
 
 
+@implementer(quoteproto.IQuoter)
 class StaticQuoter:
     """
     Return a static quote.
     """
-
-    implements(quoteproto.IQuoter)
-
     def __init__(self, quote):
         self.quote = quote
 
@@ -22,12 +20,11 @@
 
 
 
+@implementer(quoteproto.IQuoter)
 class FortuneQuoter:
     """
     Load quotes from a fortune-format file.
     """
-    implements(quoteproto.IQuoter)
-
     def __init__(self, filenames):
         self.filenames = filenames
 

=== modified file 'doc/core/howto/listings/pb/chatserver.py'
--- doc/core/howto/listings/pb/chatserver.py	2011-03-14 07:15:50 +0000
+++ doc/core/howto/listings/pb/chatserver.py	2013-01-20 19:48:29 +0000
@@ -3,7 +3,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.cred import portal, checkers
 from twisted.spread import pb
@@ -19,8 +19,8 @@
         self.groups[groupname].addUser(user)
         return self.groups[groupname]
 
+@implementer(portal.IRealm)
 class ChatRealm:
-    implements(portal.IRealm)
     def requestAvatar(self, avatarID, mind, *interfaces):
         assert pb.IPerspective in interfaces
         avatar = User(avatarID)

=== modified file 'doc/core/howto/listings/pb/pb5server.py'
--- doc/core/howto/listings/pb/pb5server.py	2011-02-14 04:45:15 +0000
+++ doc/core/howto/listings/pb/pb5server.py	2013-01-20 19:48:29 +0000
@@ -3,7 +3,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.spread import pb
 from twisted.cred import checkers, portal
@@ -15,8 +15,8 @@
     def perspective_foo(self, arg):
         print "I am", self.name, "perspective_foo(",arg,") called on", self
 
+@implementer(portal.IRealm)
 class MyRealm:
-    implements(portal.IRealm)
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective not in interfaces:
             raise NotImplementedError

=== modified file 'doc/core/howto/listings/pb/pb6server.py'
--- doc/core/howto/listings/pb/pb6server.py	2011-02-14 04:45:15 +0000
+++ doc/core/howto/listings/pb/pb6server.py	2013-01-20 19:48:29 +0000
@@ -3,7 +3,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.spread import pb
 from twisted.cred import checkers, portal
@@ -15,8 +15,8 @@
     def perspective_foo(self, arg):
         print "I am", self.name, "perspective_foo(",arg,") called on", self
 
+@implementer(portal.IRealm)
 class MyRealm:
-    implements(portal.IRealm)
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective not in interfaces:
             raise NotImplementedError

=== modified file 'doc/core/howto/listings/pb/pbAnonServer.py'
--- doc/core/howto/listings/pb/pbAnonServer.py	2011-02-14 04:45:15 +0000
+++ doc/core/howto/listings/pb/pbAnonServer.py	2013-01-20 19:48:29 +0000
@@ -15,7 +15,7 @@
 
 from sys import stdout
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python.log import startLogging
 from twisted.cred.checkers import ANONYMOUS, AllowAnonymousAccess
@@ -51,13 +51,12 @@
 
 
 
+@implementer(IRealm)
 class MyRealm(object):
     """
     Trivial realm which supports anonymous and named users by creating
     avatars which are instances of MyPerspective for either.
     """
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if IPerspective not in interfaces:
             raise NotImplementedError("MyRealm only handles IPerspective")

=== modified file 'doc/core/howto/pb-clients.xhtml'
--- doc/core/howto/pb-clients.xhtml	2011-03-14 07:15:50 +0000
+++ doc/core/howto/pb-clients.xhtml	2013-01-20 19:48:29 +0000
@@ -35,7 +35,7 @@
 caching mechanism:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class SimpleAvatar(pb.Avatar):
     greetings = 0
@@ -45,9 +45,8 @@
         self.greetings += 1
         return "&lt;%d&gt;hello %s" % (self.greetings, self.name)
 
+@implementer(portal.IRealm)
 class CachingRealm:
-    implements(portal.IRealm)
-
     def __init__(self):
         self.avatars = {}
 
@@ -73,7 +72,7 @@
 else. Here is an example of that:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class Greeter:
     greetings = 0
@@ -88,9 +87,8 @@
     def perspective_greet(self):
         return self.greeter.hello()+' '+self.name
 
+@implementer(portal.IRealm)
 class CachingRealm:
-    implements(portal.IRealm)
-
     def __init__(self):
         self.greeters = {}
 
@@ -110,7 +108,7 @@
 there is a better pattern:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class SimpleAvatar(pb.Avatar):
     greetings = 0
@@ -125,9 +123,8 @@
         self.greetings += 1
         return "&lt;%d&gt;hello %s" % (self.greetings, self.name)
 
+@implementer(portal.IRealm)
 class CachingRealm:
-    implements(portal.IRealm)
-
     def __init__(self):
         self.avatars = {}
 
@@ -145,7 +142,7 @@
 the number of concurrent connections:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class SimpleAvatar(pb.Avatar):
     greetings = 0
@@ -160,9 +157,8 @@
         self.greetings += 1
         return "&lt;%d&gt;hello %s" % (self.greetings, self.name)
 
+@implementer(portal.IRealm)
 class CachingRealm:
-    implements(portal.IRealm)
-
     def __init__(self, max=1):
         self.avatars = {}
         self.max = max
@@ -192,7 +188,7 @@
 of the <code>mind</code> argument:</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 class SimpleAvatar(pb.Avatar):
     def __init__(self, client):
@@ -208,9 +204,8 @@
     def logout(self):
         self.s.stopService()
 
+@implementer(portal.IRealm)
 class Realm:
-    implements(portal.IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if pb.IPerspective not in interfaces: raise NotImplementedError
         p = SimpleAvatar(mind)

=== modified file 'doc/core/howto/plugin.xhtml'
--- doc/core/howto/plugin.xhtml	2011-10-04 19:35:22 +0000
+++ doc/core/howto/plugin.xhtml	2013-01-20 19:48:29 +0000
@@ -129,13 +129,12 @@
     location.  Consider the following example.</p>
 
     <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 from twisted.plugin import IPlugin
 from matsim import imatsim
 
+@implementer(IPlugin, imatsim.IMaterial)
 class SimpleMaterial(object):
-    implements(IPlugin, imatsim.IMaterial)
-
     def __init__(self, yieldStressFactor, dielectricConstant):
         self._yieldStressFactor = yieldStressFactor
         self.dielectricConstant = dielectricConstant

=== modified file 'doc/core/howto/tap.xhtml'
--- doc/core/howto/tap.xhtml	2011-10-21 12:15:37 +0000
+++ doc/core/howto/tap.xhtml	2013-01-20 19:48:29 +0000
@@ -90,7 +90,7 @@
 subclass) will be used to parse the given args.</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python import usage
 from twisted.plugin import IPlugin
@@ -104,8 +104,8 @@
     optParameters = [["port", "p", 1235, "The port number to listen on."]]
 
 
+@implementer(IServiceMaker, IPlugin)
 class MyServiceMaker(object):
-    implements(IServiceMaker, IPlugin)
     tapname = "myproject"
     description = "Run this! It'll make your dog happy."
     options = Options
@@ -167,8 +167,8 @@
         ["port", "p", 1234, "Server port number"],
         ["host", "h", "localhost", "Server hostname"]]
 
+@implementer(IServiceMaker, IPlugin)
 class MyServerServiceMaker(object):
-    implements(IServiceMaker, IPlugin)
     tapname = "myserver"
     description = "This server does nothing productive."
     options = ServerOptions

=== modified file 'doc/core/howto/tutorial/components.xhtml'
--- doc/core/howto/tutorial/components.xhtml	2010-06-27 00:12:10 +0000
+++ doc/core/howto/tutorial/components.xhtml	2013-01-20 19:48:29 +0000
@@ -28,8 +28,9 @@
 of protocols. Here, we used the component-based architecture that Twisted
 provides to achieve a separation of concerns. All the service is responsible
 for, now, is supporting <code>getUser</code>/<code>getUsers</code>. It declares
-its support via a call to <code>zope.interface.implements</code>. Then, adapters
-are used to make this service look like an appropriate class for various things:
+its support by decorating itself using <code>zope.interface.implementer</code>.
+Then, adapters are used to make this service look like an appropriate class for
+various things:
 for supplying a finger factory to <code>TCPServer</code>, for supplying a
 resource to site's constructor, and to provide an IRC client factory
 for <code>TCPClient</code>.  All the adapters use are the methods

=== modified file 'doc/core/howto/tutorial/listings/finger/finger/finger.py'
--- doc/core/howto/tutorial/listings/finger/finger/finger.py	2011-01-22 14:10:51 +0000
+++ doc/core/howto/tutorial/listings/finger/finger/finger.py	2013-01-20 19:48:29 +0000
@@ -1,6 +1,6 @@
 # finger.py module
 
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 
 from twisted.application import internet, service
 from twisted.internet import protocol, reactor, defer
@@ -61,9 +61,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -103,10 +102,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -153,10 +150,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -263,10 +258,8 @@
         """
 
 
+@implementer(IPerspectiveFinger)
 class PerspectiveFingerFromService(pb.Root):
-
-    implements(IPerspectiveFinger)
-
     def __init__(self, service):
         self.service = service
 
@@ -281,10 +274,8 @@
                            IPerspectiveFinger)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
 

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19.tac'
--- doc/core/howto/tutorial/listings/finger/finger19.tac	2011-09-21 22:23:38 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 
 class IFingerService(Interface):
@@ -57,10 +57,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -100,10 +98,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -149,10 +145,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -167,10 +161,8 @@
                            IIRCClientFactory)
 
 
+@implementer(resource.IResource)
 class UserStatusTree(resource.Resource):
-
-    implements(resource.IResource)
-
     def __init__(self, service):
         resource.Resource.__init__(self)
         self.service = service
@@ -224,10 +216,8 @@
         return self.service.getUser(user)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19a.tac'
--- doc/core/howto/tutorial/listings/finger/finger19a.tac	2008-07-30 15:14:19 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19a.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 
 class IFingerService(Interface):
@@ -44,10 +44,8 @@
         """Return a protocol returning a string"""
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -82,10 +80,8 @@
         """Return a protocol returning a string"""
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -127,10 +123,8 @@
         """Return a protocol"""
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -144,10 +138,8 @@
                            IFingerService,
                            IIRCClientFactory)
 
+@implementer(resource.IResource)
 class UserStatusTree(resource.Resource):
-
-    implements(resource.IResource)
-
     def __init__(self, service):
         resource.Resource.__init__(self)
         self.service = service
@@ -199,10 +191,8 @@
     def xmlrpc_getUser(self, user):
         return self.service.getUser(user)
 
+@implementer(IFingerService, IFingerSetterService)
 class MemoryFingerService(service.Service):
-
-    implements([IFingerService, IFingerSetterService])
-
     def __init__(self, **kwargs):
         self.users = kwargs
 

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19a_changes.py'
--- doc/core/howto/tutorial/listings/finger/finger19a_changes.py	2006-07-01 16:08:17 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19a_changes.py	2013-01-20 19:48:29 +0000
@@ -6,10 +6,8 @@
 
 # Advantages of latest version
 
+@implementer(IFingerService, IFingerSetterService)
 class MemoryFingerService(service.Service):
-
-    implements([IFingerService, IFingerSetterService])
-
     def __init__(self, **kwargs):
         self.users = kwargs
 

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19b.tac'
--- doc/core/howto/tutorial/listings/finger/finger19b.tac	2011-01-22 14:10:51 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19b.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 import pwd
 
@@ -66,10 +66,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -109,10 +107,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -158,10 +154,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -176,10 +170,8 @@
                            IIRCClientFactory)
 
 
+@implementer(resource.IResource)
 class UserStatusTree(resource.Resource):
-
-    implements(resource.IResource)
-
     def __init__(self, service):
         resource.Resource.__init__(self)
         self.service = service
@@ -233,10 +225,8 @@
         return self.service.getUser(user)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}
@@ -267,10 +257,8 @@
 
 # Another back-end
 
+@implementer(IFingerService)
 class LocalFingerService(service.Service):
-
-    implements(IFingerService)
-
     def getUser(self, user):
     # need a local finger daemon running for this to work
         return utils.getProcessOutput("finger", [user])

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19b_changes.py'
--- doc/core/howto/tutorial/listings/finger/finger19b_changes.py	2005-02-12 00:28:37 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19b_changes.py	2013-01-20 19:48:29 +0000
@@ -4,10 +4,8 @@
 
 # Another back-end
 
+@implementer(IFingerService)
 class LocalFingerService(service.Service):
-
-    implements(IFingerService)
-
     def getUser(self, user):
     # need a local finger daemon running for this to work
         return utils.getProcessOutput("finger", [user])

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19c.tac'
--- doc/core/howto/tutorial/listings/finger/finger19c.tac	2011-01-22 14:10:51 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19c.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 import pwd
 import os
@@ -67,10 +67,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -110,10 +108,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -160,10 +156,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -178,10 +172,8 @@
                            IIRCClientFactory)
 
 
+@implementer(resource.IResource)
 class UserStatusTree(resource.Resource):
-
-    implements(resource.IResource)
-
     def __init__(self, service):
         resource.Resource.__init__(self)
         self.service = service
@@ -235,10 +227,8 @@
         return self.service.getUser(user)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}
@@ -269,10 +259,8 @@
 
 # Yet another back-end
 
+@implementer(IFingerService)
 class LocalFingerService(service.Service):
-
-    implements(IFingerService)
-
     def getUser(self, user):
         user = user.strip()
         try:

=== modified file 'doc/core/howto/tutorial/listings/finger/finger19c_changes.py'
--- doc/core/howto/tutorial/listings/finger/finger19c_changes.py	2005-02-12 00:28:37 +0000
+++ doc/core/howto/tutorial/listings/finger/finger19c_changes.py	2013-01-20 19:48:29 +0000
@@ -5,10 +5,8 @@
 
 # Yet another back-end
 
+@implementer(IFingerService)
 class LocalFingerService(service.Service):
-
-    implements(IFingerService)
-
     def getUser(self, user):
         user = user.strip()
         try:

=== modified file 'doc/core/howto/tutorial/listings/finger/finger20.tac'
--- doc/core/howto/tutorial/listings/finger/finger20.tac	2011-09-21 22:23:38 +0000
+++ doc/core/howto/tutorial/listings/finger/finger20.tac	2013-01-20 19:48:29 +0000
@@ -5,7 +5,7 @@
 from twisted.protocols import basic
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc, microdom
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 
 class IFingerService(Interface):
@@ -57,10 +57,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -100,10 +98,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -150,10 +146,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -239,10 +233,8 @@
         return self.service.getUsers()
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}

=== modified file 'doc/core/howto/tutorial/listings/finger/finger21.tac'
--- doc/core/howto/tutorial/listings/finger/finger21.tac	2011-09-21 22:23:38 +0000
+++ doc/core/howto/tutorial/listings/finger/finger21.tac	2013-01-20 19:48:29 +0000
@@ -6,7 +6,7 @@
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc, microdom
 from twisted.spread import pb
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 import cgi
 
 class IFingerService(Interface):
@@ -58,10 +58,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -101,10 +99,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -151,10 +147,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -253,10 +247,8 @@
         """
 
 
+@implementer(IPerspectiveFinger)
 class PerspectiveFingerFromService(pb.Root):
-
-    implements(IPerspectiveFinger)
-
     def __init__(self, service):
         self.service = service
 
@@ -271,10 +263,8 @@
                            IPerspectiveFinger)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}

=== modified file 'doc/core/howto/tutorial/listings/finger/finger22.py'
--- doc/core/howto/tutorial/listings/finger/finger22.py	2011-09-21 22:23:38 +0000
+++ doc/core/howto/tutorial/listings/finger/finger22.py	2013-01-20 19:48:29 +0000
@@ -6,7 +6,7 @@
 from twisted.python import components
 from twisted.web import resource, server, static, xmlrpc, microdom
 from twisted.spread import pb
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 from OpenSSL import SSL
 import cgi
 
@@ -59,10 +59,8 @@
         """
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
 
     def __init__(self, service):
@@ -102,10 +100,8 @@
         """
 
 
+@implementer(IFingerSetterFactory)
 class FingerSetterFactoryFromService(protocol.ServerFactory):
-
-    implements(IFingerSetterFactory)
-
     protocol = FingerSetterProtocol
 
     def __init__(self, service):
@@ -152,10 +148,8 @@
         """
 
 
+@implementer(IIRCClientFactory)
 class IRCClientFactoryFromService(protocol.ClientFactory):
-
-    implements(IIRCClientFactory)
-
     protocol = IRCReplyBot
     nickname = None
 
@@ -253,10 +247,8 @@
         Return a user's status.
         """
 
+@implementer(IPerspectiveFinger)
 class PerspectiveFingerFromService(pb.Root):
-
-    implements(IPerspectiveFinger)
-
     def __init__(self, service):
         self.service = service
 
@@ -271,10 +263,8 @@
                            IPerspectiveFinger)
 
 
+@implementer(IFingerService)
 class FingerService(service.Service):
-
-    implements(IFingerService)
-
     def __init__(self, filename):
         self.filename = filename
         self.users = {}

=== modified file 'doc/core/howto/tutorial/listings/finger/fingerproxy.tac'
--- doc/core/howto/tutorial/listings/finger/fingerproxy.tac	2008-07-30 15:14:19 +0000
+++ doc/core/howto/tutorial/listings/finger/fingerproxy.tac	2013-01-20 19:48:29 +0000
@@ -3,7 +3,7 @@
 from twisted.internet import defer, protocol, reactor
 from twisted.protocols import basic
 from twisted.python import components
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 
 
 def catchError(err):
@@ -38,10 +38,8 @@
 
 
 
+@implementer(IFingerFactory)
 class FingerFactoryFromService(protocol.ClientFactory):
-    
-    implements(IFingerFactory)
-
     protocol = FingerProtocol
     
     def __init__(self, service):
@@ -88,9 +86,8 @@
     return f.d
 
 
+@implementer(IFingerService)
 class ProxyFingerService(service.Service):
-    implements(IFingerService)
-
     def getUser(self, user):
         try:
             user, host = user.split('@', 1)

=== modified file 'doc/lore/howto/listings/lore/a_lore_plugin.py'
--- doc/lore/howto/listings/lore/a_lore_plugin.py	2008-12-15 15:38:38 +0000
+++ doc/lore/howto/listings/lore/a_lore_plugin.py	2013-01-20 19:48:29 +0000
@@ -1,11 +1,10 @@
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.plugin import IPlugin
 from twisted.lore.scripts.lore import IProcessor
 
+@implementer(IPlugin, IProcessor)
 class MyHTML(object):
-    implements(IPlugin, IProcessor)
-
     name = "myhtml"
     moduleName = "myhtml.factory"

=== modified file 'doc/mail/examples/emailserver.tac'
--- doc/mail/examples/emailserver.tac	2011-02-14 04:45:15 +0000
+++ doc/mail/examples/emailserver.tac	2013-01-20 19:48:29 +0000
@@ -8,7 +8,7 @@
 A toy email server.
 """
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.internet import defer
 from twisted.mail import smtp
@@ -20,9 +20,8 @@
 
 
 
+@implementer(smtp.IMessageDelivery)
 class ConsoleMessageDelivery:
-    implements(smtp.IMessageDelivery)
-    
     def receivedHeader(self, helo, origin, recipients):
         return "Received: ConsoleMessageDelivery"
 
@@ -40,9 +39,8 @@
 
 
 
+@implementer(smtp.IMessage)
 class ConsoleMessage:
-    implements(smtp.IMessage)
-    
     def __init__(self):
         self.lines = []
 
@@ -80,9 +78,8 @@
 
 
 
+@implementer(IRealm)
 class SimpleRealm:
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if smtp.IMessageDelivery in interfaces:
             return smtp.IMessageDelivery, ConsoleMessageDelivery(), lambda: None

=== modified file 'doc/mail/tutorial/smtpserver/smtpserver-5.tac'
--- doc/mail/tutorial/smtpserver/smtpserver-5.tac	2005-03-27 00:34:07 +0000
+++ doc/mail/tutorial/smtpserver/smtpserver-5.tac	2013-01-20 19:48:29 +0000
@@ -1,5 +1,5 @@
 import os
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.application import service
 
@@ -12,9 +12,8 @@
 
 from twisted.mail import smtp
 
+@implementer(smtp.IMessage)
 class FileMessage(object):
-    implements(smtp.IMessage)
-
     def __init__(self, fileObj):
         self.fileObj = fileObj
 

=== modified file 'doc/mail/tutorial/smtpserver/smtpserver-6.tac'
--- doc/mail/tutorial/smtpserver/smtpserver-6.tac	2005-03-27 00:34:07 +0000
+++ doc/mail/tutorial/smtpserver/smtpserver-6.tac	2013-01-20 19:48:29 +0000
@@ -1,5 +1,5 @@
 import os
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.application import service
 
@@ -12,9 +12,8 @@
 
 from twisted.mail import smtp
 
+@implementer(smtp.IMessage)
 class FileMessage(object):
-    implements(smtp.IMessage)
-
     def __init__(self, fileObj):
         self.fileObj = fileObj
 

=== modified file 'doc/mail/tutorial/smtpserver/smtpserver-7.tac'
--- doc/mail/tutorial/smtpserver/smtpserver-7.tac	2005-03-27 00:34:07 +0000
+++ doc/mail/tutorial/smtpserver/smtpserver-7.tac	2013-01-20 19:48:29 +0000
@@ -1,5 +1,5 @@
 import os
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.application import service
 
@@ -10,9 +10,8 @@
 
 from twisted.mail import smtp
 
+@implementer(smtp.IMessage)
 class FileMessage(object):
-    implements(smtp.IMessage)
-
     def __init__(self, fileObj):
         self.fileObj = fileObj
 
@@ -27,8 +26,8 @@
         self.fileObj.close()
         os.remove(self.fileObj.name)
 
+@implementer(smtp.IMessageDelivery)
 class TutorialDelivery(object):
-    implements(smtp.IMessageDelivery)
     counter = 0
 
     def validateTo(self, user):

=== modified file 'doc/mail/tutorial/smtpserver/smtpserver-8.tac'
--- doc/mail/tutorial/smtpserver/smtpserver-8.tac	2005-03-27 00:34:07 +0000
+++ doc/mail/tutorial/smtpserver/smtpserver-8.tac	2013-01-20 19:48:29 +0000
@@ -1,5 +1,5 @@
 import os
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.application import service
 
@@ -10,9 +10,8 @@
 
 from twisted.mail import smtp
 
+@implementer(smtp.IMessage)
 class FileMessage(object):
-    implements(smtp.IMessage)
-
     def __init__(self, fileObj):
         self.fileObj = fileObj
 
@@ -27,8 +26,8 @@
         self.fileObj.close()
         os.remove(self.fileObj.name)
 
+@implementer(smtp.IMessageDelivery)
 class TutorialDelivery(object):
-    implements(smtp.IMessageDelivery)
     counter = 0
 
     def validateTo(self, user):
@@ -42,9 +41,8 @@
     def receivedHeader(self, helo, origin, recipients):
         return 'Received: Tutorially.'
 
+@implementer(smtp.IMessageDeliveryFactory)
 class TutorialDeliveryFactory(object):
-    implements(smtp.IMessageDeliveryFactory)
-
     def getMessageDelivery(self):
         return TutorialDelivery()
 

=== modified file 'doc/web/examples/webguard.py'
--- doc/web/examples/webguard.py	2012-04-22 15:41:48 +0000
+++ doc/web/examples/webguard.py	2013-01-20 19:48:29 +0000
@@ -13,7 +13,7 @@
 
 import sys
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.python import log
 from twisted.internet import reactor
@@ -36,13 +36,12 @@
 
 
 
+@implementer(IRealm)
 class SimpleRealm(object):
     """
     A realm which gives out L{GuardedResource} instances for authenticated
     users.
     """
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if resource.IResource in interfaces:
             return resource.IResource, GuardedResource(), lambda: None

=== modified file 'doc/web/howto/listings/client/stringprod.py'
--- doc/web/howto/listings/client/stringprod.py	2009-11-08 22:57:59 +0000
+++ doc/web/howto/listings/client/stringprod.py	2013-01-20 19:48:29 +0000
@@ -1,11 +1,10 @@
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.internet.defer import succeed
 from twisted.web.iweb import IBodyProducer
 
+@implementer(IBodyProducer)
 class StringProducer(object):
-    implements(IBodyProducer)
-
     def __init__(self, body):
         self.body = body
         self.length = len(body)

=== modified file 'doc/web/howto/web-in-60/http-auth.xhtml'
--- doc/web/howto/web-in-60/http-auth.xhtml	2011-03-14 04:57:39 +0000
+++ doc/web/howto/web-in-60/http-auth.xhtml	2013-01-20 19:48:29 +0000
@@ -52,7 +52,7 @@
 example we'll keep it very simple: each user will have a resource
 which is a static file listing of the <code>public_html</code>
 directory in their UNIX home directory. First, we need to
-import <code>implements</code> from <code>zope.interface</code>
+import <code>implementer</code> from <code>zope.interface</code>
 and <code>IRealm</code>
 from <code>twisted.cred.portal</code>. Together these will let me mark
 this class as a realm (this is mostly - but not entirely - a
@@ -61,13 +61,14 @@
 later.</p>
 
 <pre class="python">
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.cred.portal import IRealm
 from twisted.web.static import File
 
+@implementer(IRealm)
 class PublicHTMLRealm(object):
-    implements(IRealm)
+    pass
 </pre>
 
 <p>A realm only needs to implement one method: <code class="API"
@@ -194,7 +195,7 @@
 <pre class="python">
 cache()
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.cred.portal import IRealm, Portal
 from twisted.cred.checkers import FilePasswordDB
@@ -202,9 +203,8 @@
 from twisted.web.resource import IResource
 from twisted.web.guard import HTTPAuthSessionWrapper, DigestCredentialFactory
 
+@implementer(IRealm)
 class PublicHTMLRealm(object):
-    implements(IRealm)
-
     def requestAvatar(self, avatarId, mind, *interfaces):
         if IResource in interfaces:
             return (IResource, File("/home/%s/public_html" % (avatarId,)), lambda: None)

=== modified file 'doc/web/howto/web-in-60/session-store.xhtml'
--- doc/web/howto/web-in-60/session-store.xhtml	2010-09-18 15:36:46 +0000
+++ doc/web/howto/web-in-60/session-store.xhtml	2013-01-20 19:48:29 +0000
@@ -26,14 +26,14 @@
 example:</p>
 
 <pre class="shell">
->>> from zope.interface import Interface, Attribute, implements
+>>> from zope.interface import Interface, Attribute, implementer
 >>> from twisted.python.components import registerAdapter
 >>> from twisted.web.server import Session
 >>> class ICounter(Interface):
 ...     value = Attribute("An int value which counts up once per page view.")
 ...
+>>> @implementer(ICounter)
 >>> class Counter(object):
-...     implements(ICounter)
 ...     def __init__(self, session):
 ...         self.value = 0
 ...
@@ -109,7 +109,7 @@
 <pre class="python">
 cache()
 
-from zope.interface import Interface, Attribute, implements
+from zope.interface import Interface, Attribute, implementer
 from twisted.python.components import registerAdapter
 from twisted.web.server import Session
 from twisted.web.resource import Resource
@@ -117,8 +117,8 @@
 class ICounter(Interface):
     value = Attribute("An int value which counts up once per page view.")
 
+@implementer(ICounter)
 class Counter(object):
-    implements(ICounter)
     def __init__(self, session):
         self.value = 0
 

=== added file 'twisted/topfiles/6270.doc'
--- twisted/topfiles/6270.doc	1970-01-01 00:00:00 +0000
+++ twisted/topfiles/6270.doc	2013-01-20 19:50:58 +0000
@@ -0,0 +1,1 @@
+All narrative docs and their examples use zope.interface's decorator-based API now.

# Begin bundle
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
