Index: twisted/test/test_tcp.py
===================================================================
--- twisted/test/test_tcp.py	(révision 20273)
+++ twisted/test/test_tcp.py	(copie de travail)
@@ -1,14 +1,14 @@
 # -*- test-case-name: twisted.test.test_tcp -*-
-# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2007 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
-from __future__ import nested_scopes
+"""
+Generic TCP tests.
+"""
 
-"""Generic TCP tests."""
+import socket, random, errno, gc, weakref
 
-import socket, random, errno
-
 from zope.interface import implements
 
 from twisted.trial import unittest
@@ -20,6 +20,7 @@
 from twisted.internet.interfaces import IHalfCloseableProtocol
 from twisted.protocols import policies
 
+
 def loopUntil(predicate, interval=0):
     from twisted.internet import task
     d = defer.Deferred()
@@ -523,6 +524,7 @@
 
         factory = MyClientFactory()
         d = loopUntil(lambda :p.connected)
+
         def step1(ignored):
             def clientConnectionLost(c, reason):
                 c.connect()
@@ -767,6 +769,7 @@
 
 
     def connectionLost(self, reason):
+        del self.transport
         self.onConnectionLost.callback(self)
 
 
@@ -849,11 +852,14 @@
         clientDeferred = self.connectClient(
             serverAddr.host, serverAddr.port, clientCreator)
 
+        refs = []
+
         def clientConnected(client):
             """
             Disconnect the client.  Return a Deferred which fires when both
             the client and the server have received disconnect notification.
             """
+            refs.append(weakref.ref(client.transport))
             client.transport.loseConnection()
             return defer.gatherResults([
                 onClientConnectionLost, onServerConnectionLost])
@@ -875,6 +881,8 @@
             Shut down the server port.  Return a Deferred which fires when
             this has completed.
             """
+            gc.collect()
+            self.assertEquals(refs[0](), None)
             result = defer.maybeDeferred(serverPort.stopListening)
             result.addCallback(lambda ign: passthrough)
             return result
