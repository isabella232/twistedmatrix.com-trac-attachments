Index: twisted/protocols/basic.py
===================================================================
--- twisted/protocols/basic.py	(revision 22683)
+++ twisted/protocols/basic.py	(working copy)
@@ -213,30 +213,31 @@
         Translates bytes into lines, and calls lineReceived (or
         rawDataReceived, depending on mode.)
         """
-        self.__buffer = self.__buffer+data
-        while self.line_mode and not self.paused:
-            try:
-                line, self.__buffer = self.__buffer.split(self.delimiter, 1)
-            except ValueError:
-                if len(self.__buffer) > self.MAX_LENGTH:
-                    line, self.__buffer = self.__buffer, ''
-                    return self.lineLengthExceeded(line)
-                break
+        self.__buffer += data
+        while self.__buffer and not self.paused:
+            if self.line_mode:
+                try:
+                    line, self.__buffer = self.__buffer.split(self.delimiter, 1)
+                except ValueError:
+                    if len(self.__buffer) > self.MAX_LENGTH:
+                        line, self.__buffer = self.__buffer, ''
+                        return self.lineLengthExceeded(line)
+                    return
+                else:
+                    linelength = len(line)
+                    if linelength > self.MAX_LENGTH:
+                        exceeded = line + self.__buffer
+                        self.__buffer = ''
+                        return self.lineLengthExceeded(exceeded)
+                    why = self.lineReceived(line)
+                    if why or self.transport and self.transport.disconnecting:
+                        return why
             else:
-                linelength = len(line)
-                if linelength > self.MAX_LENGTH:
-                    exceeded = line + self.__buffer
-                    self.__buffer = ''
-                    return self.lineLengthExceeded(exceeded)
-                why = self.lineReceived(line)
-                if why or self.transport and self.transport.disconnecting:
+                data = self.__buffer
+                self.__buffer = ''
+                why = self.rawDataReceived(data)
+                if why:
                     return why
-        else:
-            if not self.paused:
-                data=self.__buffer
-                self.__buffer=''
-                if data:
-                    return self.rawDataReceived(data)
 
     def setLineMode(self, extra=''):
         """Sets the line-mode of this receiver.
@@ -250,8 +251,7 @@
         within a lineReceived callback.
         """
         self.line_mode = 1
-        if extra:
-            return self.dataReceived(extra)
+        self.__buffer += extra
 
     def setRawMode(self):
         """Sets the raw mode of this receiver.
Index: twisted/test/test_protocols.py
===================================================================
--- twisted/test/test_protocols.py	(revision 22683)
+++ twisted/test/test_protocols.py	(working copy)
@@ -11,6 +11,7 @@
 from twisted.internet import reactor, protocol, defer, task, error
 from twisted.test import proto_helpers
 
+import sys
 import struct
 import StringIO
 
@@ -23,6 +24,26 @@
         Do nothing.
         """
 
+class FlippingLineTester(basic.LineReceiver):
+    """
+    A line receiver that flips between line and raw data modes after one byte.
+    """
+
+    delimiter = '\n'
+    
+    def lineReceived(self, line):
+        """
+        Set the mode to raw.
+        """
+        self.setRawMode()
+
+    def rawDataReceived(self, data):
+        """
+        Set the mode back to line.
+        """
+        self.setLineMode(data[1:])
+
+
 class LineTester(basic.LineReceiver):
     """
     A line receiver that parses data received and make actions on some tokens.
@@ -279,7 +300,16 @@
         self.assertEquals(a.received,
                           ['produce', 'hello world', 'unproduce', 'goodbye'])
 
+    def testStackRecursion(self):
+        """
+        Test switching modes many times on the same data.
+        """
+        a = FlippingLineTester()
+        t = StringIOWithoutClosing()
+        a.makeConnection(protocol.FileWrapper(t))
+        a.dataReceived('x\nx' * sys.getrecursionlimit())
 
+
 class LineOnlyReceiverTestCase(unittest.TestCase):
     """
     Test line only receiveer.
