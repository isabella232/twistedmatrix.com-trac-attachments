diff --git a/twisted/conch/insults/helper.py b/twisted/conch/insults/helper.py
index e0be0b7..2bd6967 100644
--- a/twisted/conch/insults/helper.py
+++ b/twisted/conch/insults/helper.py
@@ -368,7 +368,7 @@ class TerminalBuffer(protocol.Protocol):
         self.lines.extend([self._emptyLine(self.width) for i in range(n)])
 
     def reportCursorPosition(self):
-        return (self.x, self.y)
+        return defer.succeed((self.x, self.y))
 
     def reset(self):
         self.home = insults.Vector(0, 0)
diff --git a/twisted/conch/insults/insults.py b/twisted/conch/insults/insults.py
index 721551d..4dd7580 100644
--- a/twisted/conch/insults/insults.py
+++ b/twisted/conch/insults/insults.py
@@ -1038,8 +1038,10 @@ class ClientProtocol(protocol.Protocol):
 
         def n(self, proto, handler, buf):
             if buf == '6':
-                x, y = handler.reportCursorPosition()
-                proto.transport.write('\x1b[%d;%dR' % (x + 1, y + 1))
+                def _cb((x, y)):
+                    proto.transport.write('\x1b[%d;%dR' % (x + 1, y + 1))
+                d = handler.reportCursorPosition()
+                d.addCallback(_cb)
             else:
                 handler.unhandledControlSequence('\x1b[' + buf + 'n')
 
diff --git a/twisted/conch/test/test_helper.py b/twisted/conch/test/test_helper.py
index 39aac48..ee25c32 100644
--- a/twisted/conch/test/test_helper.py
+++ b/twisted/conch/test/test_helper.py
@@ -8,6 +8,7 @@ from twisted.conch.insults.insults import modes, privateModes
 from twisted.conch.insults.insults import (
     NORMAL, BOLD, UNDERLINE, BLINK, REVERSE_VIDEO)
 
+from twisted.internet import defer
 from twisted.trial import unittest
 
 WIDTH = 80
@@ -23,7 +24,8 @@ class BufferTestCase(unittest.TestCase):
         self.assertEqual(self.term.height, HEIGHT)
         self.assertEqual(str(self.term),
                           '\n' * (HEIGHT - 1))
-        self.assertEqual(self.term.reportCursorPosition(), (0, 0))
+        d = self.term.reportCursorPosition()
+        return d.addCallback(self.assertEqual, (0, 0))
 
 
     def test_initialPrivateModes(self):
@@ -43,9 +45,12 @@ class BufferTestCase(unittest.TestCase):
         """
         self.term.cursorForward(5)
         self.term.cursorDown(3)
-        self.assertEqual(self.term.reportCursorPosition(), (5, 3))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (5, 3))
         self.term.insertAtCursor("\r")
-        self.assertEqual(self.term.reportCursorPosition(), (0, 3))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (0, 3))
+        return defer.gatherResults([d1, d2], consumeErrors=True)
 
 
     def test_linefeed(self):
@@ -53,9 +58,12 @@ class BufferTestCase(unittest.TestCase):
         C{"\n"} moves the cursor to the next row without changing the column.
         """
         self.term.cursorForward(5)
-        self.assertEqual(self.term.reportCursorPosition(), (5, 0))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (5, 0))
         self.term.insertAtCursor("\n")
-        self.assertEqual(self.term.reportCursorPosition(), (5, 1))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (5, 1))
+        return defer.gatherResults([d1, d2], consumeErrors=True)
 
 
     def test_newline(self):
@@ -64,9 +72,12 @@ class BufferTestCase(unittest.TestCase):
         """
         self.term.cursorForward(5)
         self.term.cursorDown(3)
-        self.assertEqual(self.term.reportCursorPosition(), (5, 3))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (5, 3))
         self.term.write("\n")
-        self.assertEqual(self.term.reportCursorPosition(), (0, 4))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (0, 4))
+        return defer.gatherResults([d1, d2], consumeErrors=True)
 
 
     def test_setPrivateModes(self):
@@ -95,45 +106,63 @@ class BufferTestCase(unittest.TestCase):
 
     def testCursorDown(self):
         self.term.cursorDown(3)
-        self.assertEqual(self.term.reportCursorPosition(), (0, 3))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (0, 3))
         self.term.cursorDown()
-        self.assertEqual(self.term.reportCursorPosition(), (0, 4))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (0, 4))
         self.term.cursorDown(HEIGHT)
-        self.assertEqual(self.term.reportCursorPosition(), (0, HEIGHT - 1))
+        d3 = self.term.reportCursorPosition()
+        d3.addCallback(self.assertEqual, (0, HEIGHT - 1))
+        return defer.gatherResults([d1, d2, d3], consumeErrors=True)
 
     def testCursorUp(self):
         self.term.cursorUp(5)
-        self.assertEqual(self.term.reportCursorPosition(), (0, 0))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (0, 0))
 
         self.term.cursorDown(20)
         self.term.cursorUp(1)
-        self.assertEqual(self.term.reportCursorPosition(), (0, 19))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (0, 19))
 
         self.term.cursorUp(19)
-        self.assertEqual(self.term.reportCursorPosition(), (0, 0))
+        d3 = self.term.reportCursorPosition()
+        d3.addCallback(self.assertEqual, (0, 0))
+        return defer.gatherResults([d1, d2, d3], consumeErrors=True)
 
     def testCursorForward(self):
         self.term.cursorForward(2)
-        self.assertEqual(self.term.reportCursorPosition(), (2, 0))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (2, 0))
         self.term.cursorForward(2)
-        self.assertEqual(self.term.reportCursorPosition(), (4, 0))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (4, 0))
         self.term.cursorForward(WIDTH)
-        self.assertEqual(self.term.reportCursorPosition(), (WIDTH, 0))
+        d3 = self.term.reportCursorPosition()
+        d3.addCallback(self.assertEqual, (WIDTH, 0))
+        return defer.gatherResults([d1, d2, d3], consumeErrors=True)
 
     def testCursorBackward(self):
         self.term.cursorForward(10)
         self.term.cursorBackward(2)
-        self.assertEqual(self.term.reportCursorPosition(), (8, 0))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (8, 0))
         self.term.cursorBackward(7)
-        self.assertEqual(self.term.reportCursorPosition(), (1, 0))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (1, 0))
         self.term.cursorBackward(1)
-        self.assertEqual(self.term.reportCursorPosition(), (0, 0))
+        d3 = self.term.reportCursorPosition()
+        d3.addCallback(self.assertEqual, (0, 0))
         self.term.cursorBackward(1)
-        self.assertEqual(self.term.reportCursorPosition(), (0, 0))
+        d4 = self.term.reportCursorPosition()
+        d4.addCallback(self.assertEqual, (0, 0))
+        return defer.gatherResults([d1, d2, d3, d4], consumeErrors=True)
 
     def testCursorPositioning(self):
         self.term.cursorPosition(3, 9)
-        self.assertEqual(self.term.reportCursorPosition(), (3, 9))
+        d = self.term.reportCursorPosition()
+        return d.addCallback(self.assertEqual, (3, 9))
 
     def testSimpleWriting(self):
         s = "Hello, world."
@@ -188,19 +217,27 @@ class BufferTestCase(unittest.TestCase):
 
     def testIndex(self):
         self.term.index()
-        self.assertEqual(self.term.reportCursorPosition(), (0, 1))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (0, 1))
         self.term.cursorDown(HEIGHT)
-        self.assertEqual(self.term.reportCursorPosition(), (0, HEIGHT - 1))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (0, HEIGHT - 1))
         self.term.index()
-        self.assertEqual(self.term.reportCursorPosition(), (0, HEIGHT - 1))
+        d3 = self.term.reportCursorPosition()
+        d3.addCallback(self.assertEqual, (0, HEIGHT - 1))
+        return defer.gatherResults([d1, d2, d3], consumeErrors=True)
 
     def testReverseIndex(self):
         self.term.reverseIndex()
-        self.assertEqual(self.term.reportCursorPosition(), (0, 0))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (0, 0))
         self.term.cursorDown(2)
-        self.assertEqual(self.term.reportCursorPosition(), (0, 2))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (0, 2))
         self.term.reverseIndex()
-        self.assertEqual(self.term.reportCursorPosition(), (0, 1))
+        d3 = self.term.reportCursorPosition()
+        d3.addCallback(self.assertEqual, (0, 1))
+        return defer.gatherResults([d1, d2, d3], consumeErrors=True)
 
     def test_nextLine(self):
         """
@@ -208,22 +245,30 @@ class BufferTestCase(unittest.TestCase):
         current row.
         """
         self.term.nextLine()
-        self.assertEqual(self.term.reportCursorPosition(), (0, 1))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (0, 1))
         self.term.cursorForward(5)
-        self.assertEqual(self.term.reportCursorPosition(), (5, 1))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (5, 1))
         self.term.nextLine()
-        self.assertEqual(self.term.reportCursorPosition(), (0, 2))
+        d3 = self.term.reportCursorPosition()
+        d3.addCallback(self.assertEqual, (0, 2))
+        return defer.gatherResults([d1, d2, d3], consumeErrors=True)
 
     def testSaveCursor(self):
         self.term.cursorDown(5)
         self.term.cursorForward(7)
-        self.assertEqual(self.term.reportCursorPosition(), (7, 5))
+        d1 = self.term.reportCursorPosition()
+        d1.addCallback(self.assertEqual, (7, 5))
         self.term.saveCursor()
         self.term.cursorDown(7)
         self.term.cursorBackward(3)
-        self.assertEqual(self.term.reportCursorPosition(), (4, 12))
+        d2 = self.term.reportCursorPosition()
+        d2.addCallback(self.assertEqual, (4, 12))
         self.term.restoreCursor()
-        self.assertEqual(self.term.reportCursorPosition(), (7, 5))
+        d3 = self.term.reportCursorPosition()
+        d3.addCallback(self.assertEqual, (7, 5))
+        return defer.gatherResults([d1, d2, d3], consumeErrors=True)
 
     def testSingleShifts(self):
         self.term.singleShift2()
diff --git a/twisted/conch/test/test_insults.py b/twisted/conch/test/test_insults.py
index 553ffb8..44351aa 100644
--- a/twisted/conch/test/test_insults.py
+++ b/twisted/conch/test/test_insults.py
@@ -2,6 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from twisted.internet import defer
 from twisted.python.reflect import namedAny
 from twisted.trial import unittest
 from twisted.test.proto_helpers import StringTransport
@@ -353,7 +354,8 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         self.assertFalse(occs)
 
     def testCursorPosition(self):
-        methods(self.proto)['reportCursorPosition'] = (6, 7)
+        d = defer.succeed((6, 7))
+        methods(self.proto)['reportCursorPosition'] = d
         self.parser.dataReceived("\x1b[6n")
         self.assertEqual(self.transport.value(), "\x1b[7;8R")
         occs = occurrences(self.proto)
@@ -361,7 +363,7 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         result = self.assertCall(occs.pop(0), "reportCursorPosition")
         # This isn't really an interesting assert, since it only tests that
         # our mock setup is working right, but I'll include it anyway.
-        self.assertEqual(result, (6, 7))
+        self.assertEqual(result, d)
 
 
     def test_applicationDataBytes(self):
diff --git a/twisted/conch/topfiles/6904.bugfix b/twisted/conch/topfiles/6904.bugfix
new file mode 100644
index 0000000..b68509d
--- /dev/null
+++ b/twisted/conch/topfiles/6904.bugfix
@@ -0,0 +1,2 @@
+twisted.conch.insults.TerminalBuffer.reportCursorPostion now returns an
+immediately fired Deferred instead of a tuple.
