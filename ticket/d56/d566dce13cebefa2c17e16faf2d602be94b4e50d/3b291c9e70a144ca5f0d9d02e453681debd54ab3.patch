diff --git a/twisted/python/syslog.py b/twisted/python/syslog.py
index 4e0ce8a..cfa9020 100644
--- a/twisted/python/syslog.py
+++ b/twisted/python/syslog.py
@@ -12,6 +12,10 @@ syslog = __import__('syslog')
 
 import log
 
+# These defaults come from the Python 2.3 syslog docs.
+DEFAULT_OPTIONS = 0
+DEFAULT_FACILITY = syslog.LOG_USER
+
 class SyslogObserver:
     """
     A log observer for logging to syslog.
@@ -19,8 +23,9 @@ class SyslogObserver:
     See L{twisted.python.log} for context.
     """
 
-    def __init__(self, prefix):
-        syslog.openlog(prefix)
+    def __init__(self, prefix, options=DEFAULT_OPTIONS,
+            facility=DEFAULT_FACILITY):
+        syslog.openlog(prefix, options, facility)
 
     def emit(self, eventDict):
         edm = eventDict['message']
@@ -47,13 +52,14 @@ class SyslogObserver:
                 line = '\t%s' % line
             syslog.syslog('[%s] %s' % (eventDict['system'], line))
 
-def startLogging(prefix='Twisted', setStdout=1):
+def startLogging(prefix='Twisted', options=DEFAULT_OPTIONS,
+        facility=DEFAULT_FACILITY, setStdout=1):
     """
     Send all Twisted logging output to syslog from now on.
 
-    The given prefix will be added to the beginning of each message sent to
-    syslog. For other parameters, see
-    L{twisted.python.log.startLoggingWithObserver}.
+    The prefix, options and facility arguments are passed to
+    C{syslog.openlog()}, see the Python syslog documentation for details. For
+    other parameters, see L{twisted.python.log.startLoggingWithObserver}.
     """
-    obs = SyslogObserver(prefix)
+    obs = SyslogObserver(prefix, options, facility)
     log.startLoggingWithObserver(obs.emit, setStdout=setStdout)
diff --git a/twisted/test/test_twistd.py b/twisted/test/test_twistd.py
index 0f36ca0..4608192 100644
--- a/twisted/test/test_twistd.py
+++ b/twisted/test/test_twistd.py
@@ -1012,7 +1012,7 @@ class UnixAppLoggerTestCase(unittest.TestCase):
         a L{syslog.SyslogObserver} with given C{prefix}.
         """
         class fakesyslog(object):
-            def openlog(self, prefix):
+            def openlog(self, prefix, options, facility):
                 self.prefix = prefix
         syslogModule = fakesyslog()
         self.patch(syslog, "syslog", syslogModule)
