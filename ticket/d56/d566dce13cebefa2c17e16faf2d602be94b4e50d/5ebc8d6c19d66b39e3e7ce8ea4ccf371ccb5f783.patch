diff --git a/twisted/python/syslog.py b/twisted/python/syslog.py
index ef09c1e..abc4763 100644
--- a/twisted/python/syslog.py
+++ b/twisted/python/syslog.py
@@ -12,6 +12,26 @@ syslog = __import__('syslog')
 
 import log
 
+STR_TO_FACILITY = {
+        "LOG_KERN": syslog.LOG_KERN,
+        "LOG_USER": syslog.LOG_USER,
+        "LOG_MAIL": syslog.LOG_MAIL,
+        "LOG_DAEMON": syslog.LOG_DAEMON,
+        "LOG_AUTH": syslog.LOG_AUTH,
+        "LOG_LPR": syslog.LOG_LPR,
+        "LOG_NEWS": syslog.LOG_NEWS,
+        "LOG_UUCP": syslog.LOG_UUCP,
+        "LOG_CRON": syslog.LOG_CRON,
+        "LOG_LOCAL0": syslog.LOG_LOCAL0,
+        "LOG_LOCAL1": syslog.LOG_LOCAL1,
+        "LOG_LOCAL2": syslog.LOG_LOCAL2,
+        "LOG_LOCAL3": syslog.LOG_LOCAL3,
+        "LOG_LOCAL4": syslog.LOG_LOCAL4,
+        "LOG_LOCAL5": syslog.LOG_LOCAL5,
+        "LOG_LOCAL6": syslog.LOG_LOCAL6,
+        "LOG_LOCAL7": syslog.LOG_LOCAL7,
+}
+
 # These defaults come from the Python 2.3 syslog docs.
 DEFAULT_OPTIONS = 0
 DEFAULT_FACILITY = syslog.LOG_USER
@@ -76,3 +96,14 @@ def startLogging(prefix='Twisted', options=DEFAULT_OPTIONS,
     """
     obs = SyslogObserver(prefix, options, facility)
     log.startLoggingWithObserver(obs.emit, setStdout=setStdout)
+
+def facilityFromString(facilityString):
+    """
+    Returns the matching facility constant from the syslog module.
+    """
+
+    if facilityString not in STR_TO_FACILITY:
+        raise ValueError("No such facility %r" % facilityString)
+
+    return STR_TO_FACILITY[facilityString]
+
diff --git a/twisted/python/test/test_syslog.py b/twisted/python/test/test_syslog.py
index 90b72c1..d22abc6 100644
--- a/twisted/python/test/test_syslog.py
+++ b/twisted/python/test/test_syslog.py
@@ -22,6 +22,20 @@ class FakeSyslogFunctions:
 			self.lastPriority = arg1
 			self.lastMessage = arg2
 
+class TestSyslogUtils(unittest.TestCase):
+
+    def test_facilityFromString(self):
+        """
+        Test that facilityFromString returns sensible values.
+        """
+        self.failUnlessEqual(
+                twsyslog.facilityFromString("LOG_USER"),
+                pysyslog.LOG_USER)
+
+        self.failUnlessRaises(ValueError,
+                twsyslog.facilityFromString,
+                "asdfasdfasdf")
+
 class TestSyslogObserver(unittest.TestCase):
 
 	def setUp(self):
