Index: twisted/test/test_newcred.py
===================================================================
--- twisted/test/test_newcred.py	(revision 29007)
+++ twisted/test/test_newcred.py	(working copy)
@@ -1,4 +1,4 @@
-# Copyright (c) 2001-2008 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 """
@@ -10,7 +10,7 @@
 from zope.interface import implements, Interface
 
 from twisted.trial import unittest
-from twisted.cred import portal, checkers, credentials, error, util
+from twisted.cred import portal, checkers, credentials, error
 from twisted.python import components
 from twisted.internet import defer
 from twisted.internet.defer import deferredGenerator as dG, waitForDeferred as wFD
@@ -28,48 +28,6 @@
     from twisted.cred import pamauth
 
 
-class DeprecatedUtilTests(unittest.TestCase):
-    """
-    Tests for the deprecation of the functions in L{twisted.cred.util}.
-    """
-    def test_respond(self):
-        """
-        L{respond} applies a particular hashing to a challenge and a password
-        and returns the result.  It is deprecated and calling it emits a
-        deprecation warning.
-        """
-        # Use some values and test against the known correct output.
-        self.assertEqual(
-            util.respond('foo', 'bar').encode('hex'),
-            'ebe4a2902532198cafaa223fb5ac0f20')
-
-        warnings = self.flushWarnings(offendingFunctions=[self.test_respond])
-        self.assertEqual(
-            warnings[0]['message'],
-            'twisted.cred.util.respond is deprecated since Twisted 8.3.')
-        self.assertEqual(
-            warnings[0]['category'],
-            PendingDeprecationWarning)
-        self.assertEqual(len(warnings), 1)
-
-
-    def test_challenge(self):
-        """
-        L{challenge} returns a different string each time it is called.
-        """
-        self.assertNotEqual(util.challenge(), util.challenge())
-        warnings = self.flushWarnings(offendingFunctions=[self.test_challenge])
-        for w in warnings:
-            self.assertEqual(
-                w['message'],
-                'twisted.cred.util.challenge is deprecated since Twisted 8.3.')
-            self.assertEqual(
-                w['category'],
-                PendingDeprecationWarning)
-        self.assertEqual(len(warnings), 2)
-
-
-
 class ITestable(Interface):
     pass
 
Index: twisted/topfiles/4107.removal
===================================================================
--- twisted/topfiles/4107.removal	(revision 0)
+++ twisted/topfiles/4107.removal	(revision 0)
@@ -0,0 +1 @@
+Removed twisted.cred.util.py, which has been deprecated since Twisted 8.3.
Index: twisted/cred/util.py
===================================================================
--- twisted/cred/util.py	(revision 29007)
+++ twisted/cred/util.py	(working copy)
@@ -1,46 +0,0 @@
-# -*- test-case-name: twisted.test.test_newcred -*-
-# Copyright (c) 2001-2008 Twisted Matrix Laboratories.
-# See LICENSE for details.
-
-"""
-Outdated, deprecated functionality related to challenge-based authentication.
-
-Seek a solution to your problem elsewhere.  This module is deprecated.
-"""
-
-# System Imports
-import random, warnings
-
-from twisted.python.hashlib import md5
-from twisted.cred.error import Unauthorized
-
-
-def respond(challenge, password):
-    """Respond to a challenge.
-    This is useful for challenge/response authentication.
-    """
-    warnings.warn(
-        "twisted.cred.util.respond is deprecated since Twisted 8.3.",
-        category=PendingDeprecationWarning,
-        stacklevel=2)
-    m = md5()
-    m.update(password)
-    hashedPassword = m.digest()
-    m = md5()
-    m.update(hashedPassword)
-    m.update(challenge)
-    doubleHashedPassword = m.digest()
-    return doubleHashedPassword
-
-def challenge():
-    """I return some random data.
-    """
-    warnings.warn(
-        "twisted.cred.util.challenge is deprecated since Twisted 8.3.",
-        category=PendingDeprecationWarning,
-        stacklevel=2)
-    crap = ''
-    for x in range(random.randrange(15,25)):
-        crap = crap + chr(random.randint(65,90))
-    crap = md5(crap).digest()
-    return crap
