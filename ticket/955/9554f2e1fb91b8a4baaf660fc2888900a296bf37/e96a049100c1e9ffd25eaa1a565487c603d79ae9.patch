Index: twisted/conch/test/test_helper.py
===================================================================
--- twisted/conch/test/test_helper.py	(revision 43415)
+++ twisted/conch/test/test_helper.py	(working copy)
@@ -13,7 +13,7 @@
 WIDTH = 80
 HEIGHT = 24
 
-class BufferTestCase(unittest.TestCase):
+class BufferTests(unittest.TestCase):
     def setUp(self):
         self.term = helper.TerminalBuffer()
         self.term.connectionMade()
@@ -464,7 +464,7 @@
         self.calls.append(FakeDelayedCall(self, timeout, f, a, kw))
         return self.calls[-1]
 
-class ExpectTestCase(unittest.TestCase):
+class ExpectTests(unittest.TestCase):
     def setUp(self):
         self.term = helper.ExpectableBuffer()
         self.term.connectionMade()
Index: twisted/conch/test/test_manhole.py
===================================================================
--- twisted/conch/test/test_manhole.py	(revision 43415)
+++ twisted/conch/test/test_manhole.py	(working copy)
@@ -67,7 +67,7 @@
 
 
 
-class WriterTestCase(unittest.TestCase):
+class WriterTests(unittest.TestCase):
     def testInteger(self):
         manhole.lastColorizedLine("1")
 
@@ -349,14 +349,14 @@
              "Deferred #0 called back: 'Hi!'",
              ">>> "])
 
-class ManholeLoopbackTelnet(_TelnetMixin, unittest.TestCase, ManholeLoopbackMixin):
+class ManholeLoopbackTelnetTests(_TelnetMixin, unittest.TestCase, ManholeLoopbackMixin):
     pass
 
-class ManholeLoopbackSSH(_SSHMixin, unittest.TestCase, ManholeLoopbackMixin):
+class ManholeLoopbackSSHTests(_SSHMixin, unittest.TestCase, ManholeLoopbackMixin):
     if ssh is None:
         skip = "Crypto requirements missing, can't run manhole tests over ssh"
 
-class ManholeLoopbackStdio(_StdioMixin, unittest.TestCase, ManholeLoopbackMixin):
+class ManholeLoopbackStdioTests(_StdioMixin, unittest.TestCase, ManholeLoopbackMixin):
     if stdio is None:
         skip = "Terminal requirements missing, can't run manhole tests over stdio"
     else:
Index: twisted/conch/test/test_session.py
===================================================================
--- twisted/conch/test/test_session.py	(revision 43415)
+++ twisted/conch/test/test_session.py	(working copy)
@@ -494,7 +494,7 @@
 
 
 
-class SessionInterfaceTestCase(unittest.TestCase):
+class SessionInterfaceTests(unittest.TestCase):
     """
     Tests for the SSHSession class interface.  This interface is not ideal, but
     it is tested in order to maintain backwards compatibility.
@@ -820,7 +820,7 @@
 
 
 
-class SessionWithNoAvatarTestCase(unittest.TestCase):
+class SessionWithNoAvatarTests(unittest.TestCase):
     """
     Test for the SSHSession interface.  Several of the methods (request_shell,
     request_exec, request_pty_req, request_window_change) would create a
@@ -886,7 +886,7 @@
 
 
 
-class WrappersTestCase(unittest.TestCase):
+class WrappersTests(unittest.TestCase):
     """
     A test for the wrapProtocol and wrapProcessProtocol functions.
     """
@@ -928,7 +928,7 @@
 
 
 
-class TestHelpers(unittest.TestCase):
+class HelpersTests(unittest.TestCase):
     """
     Tests for the 4 helper functions: parseRequest_* and packRequest_*.
     """
@@ -1003,7 +1003,7 @@
 
 
 
-class SSHSessionProcessProtocolTestCase(unittest.TestCase):
+class SSHSessionProcessProtocolTests(unittest.TestCase):
     """
     Tests for L{SSHSessionProcessProtocol}.
     """
@@ -1233,7 +1233,7 @@
 
 
 
-class SSHSessionClientTestCase(unittest.TestCase):
+class SSHSessionClientTests(unittest.TestCase):
     """
     SSHSessionClient is an obsolete class used to connect standard IO to
     an SSHSession.
Index: twisted/conch/test/test_filetransfer.py
===================================================================
--- twisted/conch/test/test_filetransfer.py	(revision 43415)
+++ twisted/conch/test/test_filetransfer.py	(working copy)
@@ -100,7 +100,7 @@
         file(os.path.join(self.testDir, '.testHiddenFile'), 'w').write('a')
 
 
-class TestOurServerOurClient(SFTPTestBase):
+class OurServerOurClientTests(SFTPTestBase):
 
     if not unix:
         skip = "can't run on non-posix computers"
@@ -476,7 +476,7 @@
         pass
 
 
-class TestFileTransferClose(unittest.TestCase):
+class FileTransferCloseTests(unittest.TestCase):
 
     if not unix:
         skip = "can't run on non-posix computers"
@@ -578,7 +578,7 @@
 
 
 
-class TestConstants(unittest.TestCase):
+class ConstantsTests(unittest.TestCase):
     """
     Tests for the constants used by the SFTP protocol implementation.
 
@@ -683,7 +683,7 @@
 
 
 
-class TestRawPacketData(unittest.TestCase):
+class RawPacketDataTests(unittest.TestCase):
     """
     Tests for L{filetransfer.FileTransferClient} which explicitly craft certain
     less common protocol messages to exercise their handling.
Index: twisted/conch/test/test_default.py
===================================================================
--- twisted/conch/test/test_default.py	(revision 43415)
+++ twisted/conch/test/test_default.py	(working copy)
@@ -21,7 +21,7 @@
 
 
 
-class SSHUserAuthClientTest(TestCase):
+class SSHUserAuthClientTests(TestCase):
     """
     Tests for L{SSHUserAuthClient}.
 
Index: twisted/conch/test/test_mixin.py
===================================================================
--- twisted/conch/test/test_mixin.py	(revision 43415)
+++ twisted/conch/test/test_mixin.py	(working copy)
@@ -20,7 +20,7 @@
 
 
 
-class BufferingTest(unittest.TestCase):
+class BufferingTests(unittest.TestCase):
     def testBuffering(self):
         p = TestBufferingProto()
         t = p.transport = StringTransport()
Index: twisted/conch/test/test_tap.py
===================================================================
--- twisted/conch/test/test_tap.py	(revision 43415)
+++ twisted/conch/test/test_tap.py	(working copy)
@@ -35,7 +35,7 @@
 
 
 
-class MakeServiceTest(TestCase):
+class MakeServiceTests(TestCase):
     """
     Tests for L{tap.makeService}.
     """
Index: twisted/conch/test/test_text.py
===================================================================
--- twisted/conch/test/test_text.py	(revision 43415)
+++ twisted/conch/test/test_text.py	(working copy)
@@ -119,7 +119,7 @@
 
 
 
-class EfficiencyTestCase(unittest.TestCase):
+class EfficiencyTests(unittest.TestCase):
     todo = ("flatten() isn't quite stateful enough to avoid emitting a few extra bytes in "
             "certain circumstances, so these tests fail.  The failures take the form of "
             "additional elements in the ;-delimited character attribute lists.  For example, "
Index: twisted/conch/test/test_address.py
===================================================================
--- twisted/conch/test/test_address.py	(revision 43415)
+++ twisted/conch/test/test_address.py	(working copy)
@@ -13,7 +13,7 @@
 
 
 
-class SSHTransportAddressTestCase(unittest.TestCase, AddressTestCaseMixin):
+class SSHTransportAddressTests(unittest.TestCase, AddressTestCaseMixin):
     """
     L{twisted.conch.ssh.address.SSHTransportAddress} is what Conch transports
     use to represent the other side of the SSH connection.  This tests the
Index: twisted/conch/test/test_checkers.py
===================================================================
--- twisted/conch/test/test_checkers.py	(revision 43415)
+++ twisted/conch/test/test_checkers.py	(working copy)
@@ -173,7 +173,7 @@
 
 
 
-class SSHPublicKeyDatabaseTestCase(TestCase):
+class SSHPublicKeyDatabaseTests(TestCase):
     """
     Tests for L{SSHPublicKeyDatabase}.
     """
@@ -353,7 +353,7 @@
 
 
 
-class SSHProtocolCheckerTestCase(TestCase):
+class SSHProtocolCheckerTests(TestCase):
     """
     Tests for L{SSHProtocolChecker}.
     """
@@ -623,7 +623,7 @@
 
 
 
-class AuthorizedKeyFileReaderTestCase(TestCase):
+class AuthorizedKeyFileReaderTests(TestCase):
     """
     Tests for L{checkers.readAuthorizedKeyFile}
     """
@@ -674,7 +674,7 @@
 
 
 
-class InMemorySSHKeyDBTestCase(TestCase):
+class InMemorySSHKeyDBTests(TestCase):
     """
     Tests for L{checkers.InMemorySSHKeyDB}
     """
@@ -711,7 +711,7 @@
 
 
 
-class UNIXAuthorizedKeysFilesTestCase(TestCase):
+class UNIXAuthorizedKeysFilesTests(TestCase):
     """
     Tests for L{checkers.UNIXAuthorizedKeysFiles}.
     """
@@ -807,7 +807,7 @@
 
 
 
-class SSHPublicKeyCheckerTestCase(TestCase):
+class SSHPublicKeyCheckerTests(TestCase):
     """
     Tests for L{checkers.SSHPublicKeyChecker}.
     """
Index: twisted/conch/test/test_scripts.py
===================================================================
--- twisted/conch/test/test_scripts.py	(revision 43415)
+++ twisted/conch/test/test_scripts.py	(working copy)
@@ -66,7 +66,7 @@
 
 
 
-class ZshIntegrationTestCase(TestCase, ZshScriptTestMixin):
+class ZshIntegrationTests(TestCase, ZshScriptTestMixin):
     """
     Test that zsh completion functions are generated without error
     """
Index: twisted/conch/test/test_conch.py
===================================================================
--- twisted/conch/test/test_conch.py	(revision 43415)
+++ twisted/conch/test/test_conch.py	(working copy)
@@ -517,7 +517,7 @@
 
 
 
-class OpenSSHClientForwardingTestCase(ForwardingMixin, OpenSSHClientMixin,
+class OpenSSHClientForwardingTests(ForwardingMixin, OpenSSHClientMixin,
                                       unittest.TestCase):
     """
     Connection forwarding tests run against the OpenSSL command line client.
@@ -525,7 +525,7 @@
 
 
 
-class OpenSSHClientRekeyTestCase(RekeyTestsMixin, OpenSSHClientMixin,
+class OpenSSHClientRekeyTests(RekeyTestsMixin, OpenSSHClientMixin,
                                  unittest.TestCase):
     """
     Rekeying tests run against the OpenSSL command line client.
@@ -533,7 +533,7 @@
 
 
 
-class CmdLineClientTestCase(ForwardingMixin, unittest.TestCase):
+class CmdLineClientTests(ForwardingMixin, unittest.TestCase):
     """
     Connection forwarding tests run against the Conch command line client.
     """
Index: twisted/conch/test/test_telnet.py
===================================================================
--- twisted/conch/test/test_telnet.py	(revision 43415)
+++ twisted/conch/test/test_telnet.py	(working copy)
@@ -70,7 +70,7 @@
 
 
 
-class TestInterfaces(unittest.TestCase):
+class InterfacesTests(unittest.TestCase):
     def test_interface(self):
         """
         L{telnet.TelnetProtocol} implements L{telnet.ITelnetProtocol}
@@ -80,7 +80,7 @@
 
 
 
-class TelnetTransportTestCase(unittest.TestCase):
+class TelnetTransportTests(unittest.TestCase):
     """
     Tests for L{telnet.TelnetTransport}.
     """
Index: twisted/conch/test/test_cftp.py
===================================================================
--- twisted/conch/test/test_cftp.py	(revision 43415)
+++ twisted/conch/test/test_cftp.py	(working copy)
@@ -380,7 +380,7 @@
         self._linesReceived.extend(lines)
         # XXX - not strictly correct.
         # We really want onOutReceived to fire after the first 'cftp>' prompt
-        # has been received. (See use in TestOurServerCmdLineClient.setUp)
+        # has been received. (See use in OurServerCmdLineClientTests.setUp)
         if self.onOutReceived is not None:
             d, self.onOutReceived = self.onOutReceived, None
             d.callback(data)
@@ -509,7 +509,7 @@
 
 
 
-class TestOurServerCmdLineClient(CFTPClientTestBase):
+class OurServerCmdLineClientTests(CFTPClientTestBase):
 
     def setUp(self):
         CFTPClientTestBase.setUp(self)
@@ -841,7 +841,7 @@
 
 
 
-class TestOurServerBatchFile(CFTPClientTestBase):
+class OurServerBatchFileTests(CFTPClientTestBase):
     def setUp(self):
         CFTPClientTestBase.setUp(self)
         self.startServer()
@@ -929,7 +929,7 @@
 
 
 
-class TestOurServerSftpClient(CFTPClientTestBase):
+class OurServerSftpClientTests(CFTPClientTestBase):
     """
     Test the sftp server against sftp command line client.
     """
@@ -981,12 +981,12 @@
 if unix is None or Crypto is None or pyasn1 is None or interfaces.IReactorProcess(reactor, None) is None:
     if _reason is None:
         _reason = "don't run w/o spawnProcess or PyCrypto or pyasn1"
-    TestOurServerCmdLineClient.skip = _reason
-    TestOurServerBatchFile.skip = _reason
-    TestOurServerSftpClient.skip = _reason
+    OurServerCmdLineClientTests.skip = _reason
+    OurServerBatchFileTests.skip = _reason
+    OurServerSftpClientTests.skip = _reason
     StdioClientTests.skip = _reason
     SSHSessionTests.skip = _reason
 else:
     from twisted.python.procutils import which
     if not which('sftp'):
-        TestOurServerSftpClient.skip = "no sftp command-line client available"
+        OurServerSftpClientTests.skip = "no sftp command-line client available"
Index: twisted/conch/test/test_transport.py
===================================================================
--- twisted/conch/test/test_transport.py	(revision 43415)
+++ twisted/conch/test/test_transport.py	(working copy)
@@ -381,7 +381,7 @@
 
 
 
-class BaseSSHTransportTestCase(TransportTestCase):
+class BaseSSHTransportTests(TransportTestCase):
     """
     Test TransportBase.  It implements the non-server/client specific
     parts of the SSH transport protocol.
@@ -1172,7 +1172,7 @@
 
 
 
-class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
+class ServerSSHTransportTests(ServerAndClientSSHTransportBaseCase,
         TransportTestCase):
     """
     Tests for the SSHServerTransport.
@@ -1517,7 +1517,7 @@
 
 
 
-class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
+class ClientSSHTransportTests(ServerAndClientSSHTransportBaseCase,
         TransportTestCase):
     """
     Tests for SSHClientTransport.
@@ -1825,7 +1825,7 @@
 
 
 
-class GetMACTestCase(unittest.TestCase):
+class GetMACTests(unittest.TestCase):
     """
     Tests for L{SSHCiphers._getMAC}.
     """
@@ -1883,7 +1883,7 @@
 
 
 
-class SSHCiphersTestCase(unittest.TestCase):
+class SSHCiphersTests(unittest.TestCase):
     """
     Tests for the SSHCiphers helper class.
     """
@@ -1994,7 +1994,7 @@
 
 
 
-class CounterTestCase(unittest.TestCase):
+class CounterTests(unittest.TestCase):
     """
     Tests for the _Counter helper class.
     """
@@ -2023,7 +2023,7 @@
 
 
 
-class TransportLoopbackTestCase(unittest.TestCase):
+class TransportLoopbackTests(unittest.TestCase):
     """
     Test the server transport and client transport against each other,
     """
@@ -2134,7 +2134,7 @@
         return defer.DeferredList(deferreds, fireOnOneErrback=True)
 
 
-class RandomNumberTestCase(unittest.TestCase):
+class RandomNumberTests(unittest.TestCase):
     """
     Tests for the random number generator L{_getRandomNumber} and private
     key generator L{_generateX}.
Index: twisted/conch/test/test_ssh.py
===================================================================
--- twisted/conch/test/test_ssh.py	(revision 43415)
+++ twisted/conch/test/test_ssh.py	(working copy)
@@ -307,7 +307,7 @@
     from twisted.conch.ssh import channel, connection, factory, keys
     from twisted.conch.ssh import transport, userauth
 
-    class UtilityTestCase(unittest.TestCase):
+    class UtilityTests(unittest.TestCase):
         def testCounter(self):
             c = transport._Counter('\x00\x00', 2)
             for i in xrange(256 * 256):
@@ -530,7 +530,7 @@
 
 
 
-class SSHProtocolTestCase(unittest.TestCase):
+class SSHProtocolTests(unittest.TestCase):
     """
     Tests for communication between L{SSHServerTransport} and
     L{SSHClientTransport}.
@@ -823,7 +823,7 @@
 
 
 
-class TestSSHFactory(unittest.TestCase):
+class SSHFactoryTests(unittest.TestCase):
 
     if not Crypto:
         skip = "can't run w/o PyCrypto"
@@ -877,7 +877,7 @@
 
 
 
-class MPTestCase(unittest.TestCase):
+class MPTests(unittest.TestCase):
     """
     Tests for L{common.getMP}.
 
@@ -943,7 +943,7 @@
 
 
 
-class PyMPTestCase(MPTestCase):
+class PyMPTests(MPTests):
     """
     Tests for the python implementation of L{common.getMP}.
     """
@@ -951,14 +951,14 @@
 
 
 
-class GMPYMPTestCase(MPTestCase):
+class GMPYMPTests(MPTests):
     """
     Tests for the gmpy implementation of L{common.getMP}.
     """
     getMP = staticmethod(common._fastgetMP)
 
 
-class BuiltinPowHackTestCase(unittest.TestCase):
+class BuiltinPowHackTests(unittest.TestCase):
     """
     Tests that the builtin pow method is still correct after
     L{twisted.conch.ssh.common} monkeypatches it to use gmpy.
@@ -995,5 +995,5 @@
 try:
     import gmpy
 except ImportError:
-    GMPYMPTestCase.skip = "gmpy not available"
+    GMPYMPTests.skip = "gmpy not available"
     gmpy = None
Index: twisted/conch/test/test_agent.py
===================================================================
--- twisted/conch/test/test_agent.py	(revision 43415)
+++ twisted/conch/test/test_agent.py	(working copy)
@@ -72,7 +72,7 @@
 
 
 
-class TestServerProtocolContractWithFactory(AgentTestBase):
+class ServerProtocolContractWithFactoryTests(AgentTestBase):
     """
     The server protocol is stateful and so uses its factory to track state
     across requests.  This test asserts that the protocol raises if its factory
@@ -87,7 +87,7 @@
 
 
 
-class TestUnimplementedVersionOneServer(AgentTestBase):
+class UnimplementedVersionOneServerTests(AgentTestBase):
     """
     Tests for methods with no-op implementations on the server. We need these
     for clients, such as openssh, that try v1 methods before going to v2.
@@ -144,7 +144,7 @@
 
 
 
-class TestClientWithBrokenServer(AgentTestBase):
+class ClientWithBrokenServerTests(AgentTestBase):
     """
     verify error handling code in the client using a misbehaving server
     """
@@ -181,7 +181,7 @@
 
 
 
-class TestAgentKeyAddition(AgentTestBase):
+class AgentKeyAdditionTests(AgentTestBase):
     """
     Test adding different flavors of keys to an agent.
     """
@@ -261,7 +261,7 @@
 
 
 
-class TestAgentClientFailure(AgentTestBase):
+class AgentClientFailureTests(AgentTestBase):
     def test_agentFailure(self):
         """
         verify that the client raises ConchError on AGENT_FAILURE
@@ -272,7 +272,7 @@
 
 
 
-class TestAgentIdentityRequests(AgentTestBase):
+class AgentIdentityRequestsTests(AgentTestBase):
     """
     Test operations against a server with identities already loaded.
     """
@@ -345,7 +345,7 @@
 
 
 
-class TestAgentKeyRemoval(AgentTestBase):
+class AgentKeyRemovalTests(AgentTestBase):
     """
     Test support for removing keys in a remote server.
     """
Index: twisted/conch/test/test_connection.py
===================================================================
--- twisted/conch/test/test_connection.py	(revision 43415)
+++ twisted/conch/test/test_connection.py	(working copy)
@@ -183,7 +183,7 @@
 
 
 
-class ConnectionTestCase(unittest.TestCase):
+class ConnectionTests(unittest.TestCase):
 
     if test_userauth.transport is None:
         skip = "Cannot run without both PyCrypto and pyasn1"
@@ -700,7 +700,7 @@
 
 
 
-class TestCleanConnectionShutdown(unittest.TestCase):
+class CleanConnectionShutdownTests(unittest.TestCase):
     """
     Check whether correct cleanup is performed on connection shutdown.
     """
Index: twisted/conch/test/test_userauth.py
===================================================================
--- twisted/conch/test/test_userauth.py	(revision 43415)
+++ twisted/conch/test/test_userauth.py	(working copy)
@@ -267,7 +267,7 @@
 
 
 
-class SSHUserAuthServerTestCase(unittest.TestCase):
+class SSHUserAuthServerTests(unittest.TestCase):
     """
     Tests for SSHUserAuthServer.
     """
@@ -710,7 +710,7 @@
 
 
 
-class SSHUserAuthClientTestCase(unittest.TestCase):
+class SSHUserAuthClientTests(unittest.TestCase):
     """
     Tests for SSHUserAuthClient.
     """
@@ -946,7 +946,7 @@
 
 
 
-class LoopbackTestCase(unittest.TestCase):
+class LoopbackTests(unittest.TestCase):
 
 
     if keys is None:
@@ -1015,7 +1015,7 @@
 
 
 
-class ModuleInitializationTestCase(unittest.TestCase):
+class ModuleInitializationTests(unittest.TestCase):
     if keys is None:
         skip = "cannot run w/o PyCrypto or PyASN1"
 
Index: twisted/conch/test/test_insults.py
===================================================================
--- twisted/conch/test/test_insults.py	(revision 43415)
+++ twisted/conch/test/test_insults.py	(working copy)
@@ -100,7 +100,7 @@
 
 del _byteGroupingTestTemplate
 
-class ServerArrowKeys(ByteGroupingsMixin, unittest.TestCase):
+class ServerArrowKeysTests(ByteGroupingsMixin, unittest.TestCase):
     protocolFactory = ServerProtocol
 
     # All the arrow keys once
@@ -116,7 +116,7 @@
         self.assertFalse(occurrences(proto))
 
 
-class PrintableCharacters(ByteGroupingsMixin, unittest.TestCase):
+class PrintableCharactersTests(ByteGroupingsMixin, unittest.TestCase):
     protocolFactory = ServerProtocol
 
     # Some letters and digits, first on their own, then capitalized,
@@ -138,7 +138,7 @@
         occs = occurrences(proto)
         self.assertFalse(occs, "%r should have been []" % (occs,))
 
-class ServerFunctionKeys(ByteGroupingsMixin, unittest.TestCase):
+class ServerFunctionKeysTests(ByteGroupingsMixin, unittest.TestCase):
     """Test for parsing and dispatching function keys (F1 - F12)
     """
     protocolFactory = ServerProtocol
@@ -159,7 +159,7 @@
             self.assertEqual(occurrences(result), [])
         self.assertFalse(occurrences(proto))
 
-class ClientCursorMovement(ByteGroupingsMixin, unittest.TestCase):
+class ClientCursorMovementTests(ByteGroupingsMixin, unittest.TestCase):
     protocolFactory = ClientProtocol
 
     d2 = "\x1b[2B"
@@ -179,7 +179,7 @@
             self.assertEqual(occurrences(result), [])
         self.assertFalse(occurrences(proto))
 
-class ClientControlSequences(unittest.TestCase, MockMixin):
+class ClientControlSequencesTests(unittest.TestCase, MockMixin):
     def setUp(self):
         self.transport = StringTransport()
         self.proto = Mock()
@@ -462,7 +462,7 @@
 
 
 
-class Deprecations(unittest.TestCase):
+class DeprecationsTests(unittest.TestCase):
     """
     Tests to ensure deprecation of L{insults.colors} and L{insults.client}
     """
Index: twisted/conch/test/test_recvline.py
===================================================================
--- twisted/conch/test/test_recvline.py	(revision 43415)
+++ twisted/conch/test/test_recvline.py	(working copy)
@@ -18,7 +18,7 @@
 from twisted.cred import portal
 from twisted.test.proto_helpers import StringTransport
 
-class Arrows(unittest.TestCase):
+class ArrowsTests(unittest.TestCase):
     def setUp(self):
         self.underlyingTransport = StringTransport()
         self.pt = insults.ServerProtocol()
@@ -661,13 +661,13 @@
              "end line",
              ">>> done"])
 
-class RecvlineLoopbackTelnet(_TelnetMixin, unittest.TestCase, RecvlineLoopbackMixin):
+class RecvlineLoopbackTelnetTests(_TelnetMixin, unittest.TestCase, RecvlineLoopbackMixin):
     pass
 
-class RecvlineLoopbackSSH(_SSHMixin, unittest.TestCase, RecvlineLoopbackMixin):
+class RecvlineLoopbackSSHTests(_SSHMixin, unittest.TestCase, RecvlineLoopbackMixin):
     pass
 
-class RecvlineLoopbackStdio(_StdioMixin, unittest.TestCase, RecvlineLoopbackMixin):
+class RecvlineLoopbackStdioTests(_StdioMixin, unittest.TestCase, RecvlineLoopbackMixin):
     if stdio is None:
         skip = "Terminal requirements missing, can't run recvline tests over stdio"
 
@@ -695,12 +695,12 @@
              "second line",
              ">>> done"])
 
-class HistoricRecvlineLoopbackTelnet(_TelnetMixin, unittest.TestCase, HistoricRecvlineLoopbackMixin):
+class HistoricRecvlineLoopbackTelnetTests(_TelnetMixin, unittest.TestCase, HistoricRecvlineLoopbackMixin):
     pass
 
-class HistoricRecvlineLoopbackSSH(_SSHMixin, unittest.TestCase, HistoricRecvlineLoopbackMixin):
+class HistoricRecvlineLoopbackSSHTests(_SSHMixin, unittest.TestCase, HistoricRecvlineLoopbackMixin):
     pass
 
-class HistoricRecvlineLoopbackStdio(_StdioMixin, unittest.TestCase, HistoricRecvlineLoopbackMixin):
+class HistoricRecvlineLoopbackStdioTests(_StdioMixin, unittest.TestCase, HistoricRecvlineLoopbackMixin):
     if stdio is None:
         skip = "Terminal requirements missing, can't run historic recvline tests over stdio"
Index: twisted/conch/test/test_channel.py
===================================================================
--- twisted/conch/test/test_channel.py	(revision 43415)
+++ twisted/conch/test/test_channel.py	(working copy)
@@ -67,7 +67,7 @@
         self.closes[channel] = True
 
 
-class ChannelTestCase(unittest.TestCase):
+class ChannelTests(unittest.TestCase):
 
     def setUp(self):
         """
Index: twisted/conch/test/test_keys.py
===================================================================
--- twisted/conch/test/test_keys.py	(revision 43415)
+++ twisted/conch/test/test_keys.py	(working copy)
@@ -26,7 +26,7 @@
 from twisted.trial import unittest
 
 
-class HelpersTestCase(unittest.TestCase):
+class HelpersTests(unittest.TestCase):
 
     if Crypto is None:
         skip = "cannot run w/o PyCrypto"
@@ -100,7 +100,7 @@
         self.assertRaises(keys.BadKeyError, keys.objectType, None)
 
 
-class KeyTestCase(unittest.TestCase):
+class KeyTests(unittest.TestCase):
 
     if Crypto is None:
         skip = "cannot run w/o PyCrypto"
