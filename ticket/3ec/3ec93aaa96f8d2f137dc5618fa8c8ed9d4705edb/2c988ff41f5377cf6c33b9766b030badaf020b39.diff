diff --git a/twisted/python/failure.py b/twisted/python/failure.py
index d5738cd..ca6437d 100644
--- a/twisted/python/failure.py
+++ b/twisted/python/failure.py
@@ -50,6 +50,10 @@ def format_frames(frames, write, detail="default"):
             w( '  File "%s", line %s, in %s\n' % (filename, lineno, method))
             w( '    %s\n' % linecache.getline(filename, lineno).strip())
     elif detail == "verbose":
+        import warnings
+        msg = "Verbose backtraces are being deprecated"
+        warnings.warn(msg, DeprecationWarning, stacklevel=2)
+
         for method, filename, lineno, localVars, globalVars in frames:
             w("%s:%d: %s(...)\n" % (filename, lineno, method))
             w(' [ Locals ]\n')
@@ -403,19 +407,16 @@ class Failure:
         return "[Failure instance: %s]" % self.getBriefTraceback()
 
     def __getstate__(self):
-        """Avoid pickling objects in the traceback.
+        """
+        When serializing Failures, we strip out all the local/global references
+        from the saved stack frames. This is to avoid chains of circular
+        references in the traceback.
         """
         if self.pickled:
             return self.__dict__
         c = self.__dict__.copy()
 
-        c['frames'] = [
-            [
-                v[0], v[1], v[2],
-                [(j[0], reflect.safe_repr(j[1])) for j in v[3]],
-                [(j[0], reflect.safe_repr(j[1])) for j in v[4]]
-            ] for v in self.frames
-        ]
+        c['frames'] = [[f[0], f[1], f[2], None, None] for f in self.frames]
 
         # added 2003-06-23. See comment above in __init__
         c['tb'] = None
@@ -423,13 +424,7 @@ class Failure:
         if self.stack is not None:
             # XXX: This is a band-aid.  I can't figure out where these
             # (failure.stack is None) instances are coming from.
-            c['stack'] = [
-                [
-                    v[0], v[1], v[2],
-                    [(j[0], reflect.safe_repr(j[1])) for j in v[3]],
-                    [(j[0], reflect.safe_repr(j[1])) for j in v[4]]
-                ] for v in self.stack
-            ]
+            c['stack'] = [[f[0], f[1], f[2], None, None] for f in self.stack]
 
         c['pickled'] = 1
         return c
diff --git a/twisted/test/test_failure.py b/twisted/test/test_failure.py
index 7dc0ab1..02bbd10 100644
--- a/twisted/test/test_failure.py
+++ b/twisted/test/test_failure.py
@@ -196,6 +196,39 @@ class FailureTestCase(unittest.TestCase):
         f = failure.Failure(Exception("some error"))
         self.assertEqual(f.getTracebackObject(), None)
 
+    def test_noFrameLocalsStringify(self):
+        class _Decoy(object):
+            def __init__(self, ref):
+                self.ref = ref
+
+            def __repr__(self):
+                msg = "should not have called __repr__ while printing tb"
+                self.ref.fail(msg)
+
+        try:
+            decoy = _Decoy(self)
+            1/0
+        except:
+            f = failure.Failure()
+            f.cleanFailure()
+
+
+    def test_verboseTracebackDoesWarn(self):
+        out = StringIO()
+
+        try:
+            1/0
+        except:
+            f = failure.Failure()
+            self.assertWarns(
+                DeprecationWarning,
+                "Verbose backtraces are being deprecated",
+                failure.__file__,
+                f.printDetailedTraceback,
+                out)
+
+
+
 class FindFailureTests(unittest.TestCase):
     """
     Tests for functionality related to L{Failure._findFailure}.
