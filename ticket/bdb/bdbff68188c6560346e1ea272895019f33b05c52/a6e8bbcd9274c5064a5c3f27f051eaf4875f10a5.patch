From 11f48c4fcf2a06345ef85d3ff90d5242c9c27c95 Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:17:32 +0100
Subject: [PATCH 01/10] port t.p.rebuild: syntax changes in tests

---
 twisted/test/crash_test_dummy.py |  4 ++--
 twisted/test/test_rebuild.py     | 20 ++++++++++----------
 2 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/twisted/test/crash_test_dummy.py b/twisted/test/crash_test_dummy.py
index 5a30bd4..d6a96e0 100644
--- a/twisted/test/crash_test_dummy.py
+++ b/twisted/test/crash_test_dummy.py
@@ -4,7 +4,7 @@
 
 
 from twisted.python import components
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 
 def foo():
     return 2
@@ -24,8 +24,8 @@ class XComponent(components.Componentized):
 class IX(Interface):
     pass
 
+@implementer(IX)
 class XA(components.Adapter):
-    implements(IX)
 
     def method(self):
         # Kick start :(
diff --git a/twisted/test/test_rebuild.py b/twisted/test/test_rebuild.py
index 7a6158f..9bfd85f 100644
--- a/twisted/test/test_rebuild.py
+++ b/twisted/test/test_rebuild.py
@@ -8,7 +8,7 @@ import types
 from twisted.trial import unittest
 from twisted.python import rebuild
 
-import crash_test_dummy
+from twisted.test import crash_test_dummy
 f = crash_test_dummy.foo
 
 class Foo: pass
@@ -45,7 +45,7 @@ class RebuildTests(unittest.TestCase):
         os.mkdir(self.libPath)
         self.fakelibPath = os.path.join(self.libPath, 'twisted_rebuild_fakelib')
         os.mkdir(self.fakelibPath)
-        file(os.path.join(self.fakelibPath, '__init__.py'), 'w').close()
+        open(os.path.join(self.fakelibPath, '__init__.py'), 'w').close()
         sys.path.insert(0, self.libPath)
 
     def tearDown(self):
@@ -184,10 +184,10 @@ class NewStyleTests(unittest.TestCase):
             "class SlottedClass(object):\n"
             "    __slots__ = ['a']\n")
 
-        exec classDefinition in self.m.__dict__
+        exec(classDefinition, self.m.__dict__)
         inst = self.m.SlottedClass()
         inst.a = 7
-        exec classDefinition in self.m.__dict__
+        exec(classDefinition, self.m.__dict__)
         rebuild.updateInstance(inst)
         self.assertEqual(inst.a, 7)
         self.assertIdentical(type(inst), self.m.SlottedClass)
@@ -204,10 +204,10 @@ class NewStyleTests(unittest.TestCase):
             "class SlottedClass(object):\n"
             "    __slots__ = ['a']\n")
 
-        exec classDefinition in self.m.__dict__
+        exec(classDefinition, self.m.__dict__)
         inst = self.m.SlottedClass()
         inst.a = 7
-        exec classDefinition in self.m.__dict__
+        exec(classDefinition, self.m.__dict__)
         self.assertRaises(rebuild.RebuildError, rebuild.updateInstance, inst)
 
     if sys.version_info >= (2, 6):
@@ -222,10 +222,10 @@ class NewStyleTests(unittest.TestCase):
             "class ListSubclass(list):\n"
             "    pass\n")
 
-        exec classDefinition in self.m.__dict__
+        exec(classDefinition, self.m.__dict__)
         inst = self.m.ListSubclass()
         inst.append(2)
-        exec classDefinition in self.m.__dict__
+        exec(classDefinition, self.m.__dict__)
         rebuild.updateInstance(inst)
         self.assertEqual(inst[0], 2)
         self.assertIdentical(type(inst), self.m.ListSubclass)
@@ -240,13 +240,13 @@ class NewStyleTests(unittest.TestCase):
             "class NotSlottedClass(object):\n"
             "    pass\n")
 
-        exec classDefinition in self.m.__dict__
+        exec(classDefinition, self.m.__dict__)
         inst = self.m.NotSlottedClass()
         inst.__slots__ = ['a']
         classDefinition = (
             "class NotSlottedClass:\n"
             "    pass\n")
-        exec classDefinition in self.m.__dict__
+        exec(classDefinition, self.m.__dict__)
         # Moving from new-style class to old-style should fail.
         self.assertRaises(TypeError, rebuild.updateInstance, inst)
 
-- 
1.9.1


From 307219b09deb29fa852a910683a500e789e090a9 Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:17:45 +0100
Subject: [PATCH 02/10] port t.p.rebuild: skip a test that depends on old-style
 classes

---
 twisted/test/test_rebuild.py | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/twisted/test/test_rebuild.py b/twisted/test/test_rebuild.py
index 9bfd85f..3debe7f5 100644
--- a/twisted/test/test_rebuild.py
+++ b/twisted/test/test_rebuild.py
@@ -250,3 +250,5 @@ class NewStyleTests(unittest.TestCase):
         # Moving from new-style class to old-style should fail.
         self.assertRaises(TypeError, rebuild.updateInstance, inst)
 
+    if sys.version_info >= (3, 0):
+        test_instanceSlots.skip = 'Python 3 does not support old-style classes'
-- 
1.9.1


From 48eba060d9e31b04d8aa9c4bc294a6a3050816c5 Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:17:59 +0100
Subject: [PATCH 03/10] port t.p.rebuild: __builtins__ is named "builtins" in
 py3

---
 twisted/python/rebuild.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/twisted/python/rebuild.py b/twisted/python/rebuild.py
index 28a7675..80ae07e 100644
--- a/twisted/python/rebuild.py
+++ b/twisted/python/rebuild.py
@@ -89,7 +89,7 @@ def latestClass(oldClass):
         newClass.__bases__ = tuple(newBases)
         return newClass
     except TypeError:
-        if newClass.__module__ == "__builtin__":
+        if newClass.__module__ in ("__builtin__", "builtins"):
             # __builtin__ members can't be reloaded sanely
             return newClass
         ctor = getattr(newClass, '__metaclass__', type)
-- 
1.9.1


From 6e5789061ec1c41ddae1d36dbe72f7c87c693db6 Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:29:13 +0100
Subject: [PATCH 04/10] port t.p.rebuild: compat for py3 and for old-style
 classes: ClassType

---
 twisted/python/rebuild.py | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/twisted/python/rebuild.py b/twisted/python/rebuild.py
index 80ae07e..d88268d 100644
--- a/twisted/python/rebuild.py
+++ b/twisted/python/rebuild.py
@@ -152,8 +152,9 @@ def rebuild(module, doLog=1):
     values = {}
     if doLog:
         log.msg('  (scanning %s): ' % str(module.__name__))
+    ClassType = getattr(types, 'ClassType', None)
     for k, v in d.items():
-        if type(v) == types.ClassType:
+        if ClassType is not None and type(v) == ClassType:
             # Failure condition -- instances of classes with buggy
             # __hash__/__cmp__ methods referenced at the module level...
             if v.__module__ == module.__name__:
-- 
1.9.1


From 9e3b8c940abacd79733691a7e0c8ad8fff8acf77 Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:31:20 +0100
Subject: [PATCH 05/10] port t.p.rebuild: since 2.6, .func_globals is available
 as .__globals__

---
 twisted/python/rebuild.py | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/twisted/python/rebuild.py b/twisted/python/rebuild.py
index d88268d..00227c5 100644
--- a/twisted/python/rebuild.py
+++ b/twisted/python/rebuild.py
@@ -69,7 +69,7 @@ def latestFunction(oldFunc):
     """
     # This may be CPython specific, since I believe jython instantiates a new
     # module upon reload.
-    dictID = id(oldFunc.func_globals)
+    dictID = id(oldFunc.__globals__)
     module = _modDictIDMap.get(dictID)
     if module is None:
         return oldFunc
@@ -163,7 +163,7 @@ def rebuild(module, doLog=1):
                     log.logfile.write("c")
                     log.logfile.flush()
         elif type(v) == types.FunctionType:
-            if v.func_globals is module.__dict__:
+            if v.__globals__ is module.__dict__:
                 functions[v] = 1
                 if doLog:
                     log.logfile.write("f")
-- 
1.9.1


From 123f354b6bc5e636a8e0dcbdc3eec2a18bbc9c17 Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:36:47 +0100
Subject: [PATCH 06/10] port t.p.rebuild: use imp.reload rather than reload
 (2.6+/3+ compat)

---
 twisted/python/rebuild.py | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/twisted/python/rebuild.py b/twisted/python/rebuild.py
index 00227c5..0d12eeb 100644
--- a/twisted/python/rebuild.py
+++ b/twisted/python/rebuild.py
@@ -8,6 +8,7 @@
 """
 
 # System Imports
+import imp
 import sys
 import types
 import time
@@ -187,7 +188,7 @@ def rebuild(module, doLog=1):
         log.msg('  (reload   %s)' % str(module.__name__))
 
     # Boom.
-    reload(module)
+    imp.reload(module)
     # Make sure that my traceback printing will at least be recent...
     linecache.clearcache()
 
-- 
1.9.1


From b0881d30d280d0c4d0e66b57f95bd8559d7d3eae Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:42:43 +0100
Subject: [PATCH 07/10] port t.p.rebuild: a helper compat function for
 comparison vs ClassType

---
 twisted/python/rebuild.py | 25 ++++++++++++++++++++-----
 1 file changed, 20 insertions(+), 5 deletions(-)

diff --git a/twisted/python/rebuild.py b/twisted/python/rebuild.py
index 0d12eeb..de64160 100644
--- a/twisted/python/rebuild.py
+++ b/twisted/python/rebuild.py
@@ -19,6 +19,21 @@ from twisted.python import log, reflect
 
 lastRebuild = time.time()
 
+_ClassType = getattr(types, 'ClassType', None)
+def _isClassType(t):
+    """Compare to types.ClassType in a py2/3-compatible way
+
+    Python 2 used comparison to types.ClassType to check for old-style classes.
+    Python 3 has no concept of old-style classes, so if ClassType doesn't exist,
+    it can't be an old-style class - return False in that case.
+
+    Note that the type() of new-style classes is NOT ClassType, and so this
+    should return False for new-style classes in python 2 as well.
+    """
+    if _ClassType is None:
+        return False
+    return t == _ClassType
+
 
 class Sensitive:
     """
@@ -56,7 +71,7 @@ class Sensitive:
             # Kick it, if it's out of date.
             getattr(anObject, 'nothing', None)
             return anObject
-        elif t == types.ClassType:
+        elif _isClassType(t):
             return latestClass(anObject)
         else:
             log.msg('warning returning anObject!')
@@ -153,9 +168,9 @@ def rebuild(module, doLog=1):
     values = {}
     if doLog:
         log.msg('  (scanning %s): ' % str(module.__name__))
-    ClassType = getattr(types, 'ClassType', None)
+
     for k, v in d.items():
-        if ClassType is not None and type(v) == ClassType:
+        if _isClassType(type(v)):
             # Failure condition -- instances of classes with buggy
             # __hash__/__cmp__ methods referenced at the module level...
             if v.__module__ == module.__name__:
@@ -243,7 +258,7 @@ def rebuild(module, doLog=1):
             except Exception:
                 continue
             if fromOldModule(v):
-                if type(v) == types.ClassType:
+                if _isClassType(type(v)):
                     if doLog:
                         log.logfile.write("c")
                         log.logfile.flush()
@@ -257,7 +272,7 @@ def rebuild(module, doLog=1):
                 setattr(mod, k, nv)
             else:
                 # Replace bases of non-module classes just to be sure.
-                if type(v) == types.ClassType:
+                if _isClassType(type(v)):
                     for base in v.__bases__:
                         if fromOldModule(base):
                             latestClass(v)
-- 
1.9.1


From 0d234db75e594ecf9eb10ebbd4a5c1802cadd5ac Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:46:52 +0100
Subject: [PATCH 08/10] port t.p.rebuild: skip a test that depends on t.spread

---
 twisted/test/test_rebuild.py | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/twisted/test/test_rebuild.py b/twisted/test/test_rebuild.py
index 3debe7f5..74cb612 100644
--- a/twisted/test/test_rebuild.py
+++ b/twisted/test/test_rebuild.py
@@ -145,6 +145,8 @@ class RebuildTests(unittest.TestCase):
         from twisted.spread import banana
         rebuild.latestClass(banana.Banana)
 
+    if sys.version_info >= (3, 0):
+        testBananaInteraction.skip = 'twisted.spread.banana is not ported yet'
 
     def test_hashException(self):
         """
-- 
1.9.1


From a491e2f89236e44246093d2ba2c0a1c518d8fec6 Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:47:19 +0100
Subject: [PATCH 09/10] port t.p.rebuild: inherit from object correctly in
 myrebuilder1

---
 twisted/test/myrebuilder1.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/twisted/test/myrebuilder1.py b/twisted/test/myrebuilder1.py
index f53e8c7..cfd6410 100644
--- a/twisted/test/myrebuilder1.py
+++ b/twisted/test/myrebuilder1.py
@@ -7,7 +7,7 @@ try:
 except NameError:
     pass
 else:
-    class B(object, A):
+    class B(A, object):
         def b(self):
             return 'b'
 class Inherit(A):
-- 
1.9.1


From 3bca0bcaabc047d7ebe0ad08abbe7bbe37c97ce5 Mon Sep 17 00:00:00 2001
From: asdf <tehasdf@gmail.com>
Date: Fri, 19 Feb 2016 11:59:06 +0100
Subject: [PATCH 10/10] port t.p.rebuild: latestClass gets the __metaclass__ in
 a py3-compat way

---
 twisted/python/rebuild.py | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/twisted/python/rebuild.py b/twisted/python/rebuild.py
index de64160..10abfc8 100644
--- a/twisted/python/rebuild.py
+++ b/twisted/python/rebuild.py
@@ -108,7 +108,11 @@ def latestClass(oldClass):
         if newClass.__module__ in ("__builtin__", "builtins"):
             # __builtin__ members can't be reloaded sanely
             return newClass
-        ctor = getattr(newClass, '__metaclass__', type)
+
+        ctor = type(newClass)
+        # ctor is the metaclass in both py2 and 3, except if it was old-style
+        if _isClassType(ctor):
+            ctor = getattr(newClass, '__metaclass__', type)
         return ctor(newClass.__name__, tuple(newBases), dict(newClass.__dict__))
 
 
-- 
1.9.1

