Index: twisted/test/test_usage.py
===================================================================
--- twisted/test/test_usage.py	(revision 27153)
+++ twisted/test/test_usage.py	(working copy)
@@ -1,8 +1,6 @@
-
 # Copyright (c) 2001-2007 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
 from twisted.trial import unittest
 from twisted.python import usage
 
@@ -23,16 +21,19 @@
                 ['flout', 'o'],
                 ]
 
+
     def opt_myflag(self):
         self.opts['myflag'] = "PONY!"
 
+
     def opt_myparam(self, value):
         self.opts['myparam'] = "%s WITH A PONY!" % (value,)
 
 
+
 class ParseCorrectnessTest(unittest.TestCase):
     """
-    Test Options.parseArgs for correct values under good conditions.
+    Test Options.parseOptions for correct values under good conditions.
     """
     def setUp(self):
         """
@@ -47,6 +48,7 @@
 
         self.nice.parseOptions(self.niceArgV)
 
+
     def test_checkParameters(self):
         """
         Checking that parameters have correct values.
@@ -56,6 +58,7 @@
         self.failUnlessEqual(self.nice.opts['longonly'], "noshort")
         self.failUnlessEqual(self.nice.opts['shortless'], "Gamma")
 
+
     def test_checkFlags(self):
         """
         Checking that flags have correct values.
@@ -63,6 +66,7 @@
         self.failUnlessEqual(self.nice.opts['aflag'], 1)
         self.failUnlessEqual(self.nice.opts['flout'], 0)
 
+
     def test_checkCustoms(self):
         """
         Checking that custom flags and parameters have correct values.
@@ -71,6 +75,117 @@
         self.failUnlessEqual(self.nice.opts['myparam'], "Tofu WITH A PONY!")
 
 
+
+class ParsedOptionsTest(unittest.TestCase):
+    """
+    Tests L{Options.parsedOptions} attribute.
+
+    This attribute should only contain options that were actually parsed, as
+    opposed to self.opts (or self), which contains default values for missing
+    options.
+    """
+    def setUp(self):
+        """
+        Instantiate and parseOptions a well-behaved Options class.
+        """
+
+        self.niceArgV = ("--long Alpha -n Beta "
+                         "--shortless Gamma -f --myflag "
+                         "--myparam Tofu").split()
+
+        self.nice = WellBehaved()
+        self.nice.parseOptions(self.niceArgV)
+
+
+    def test_parsedOptions(self):
+        """
+        The C{dict} referred to by L{Options.parsedOptions} is populated with
+        only the key/value pairs which are created from parsing the argument
+        list passed to L{Options.parseOptions}.
+
+        This test checks that it contains those (and only those) items.
+        """
+        parsedOptions = self.nice.parsedOptions
+        expected = {
+            'aflag': 1,
+            'another': 'Beta',
+            'long': 'Alpha',
+            'myflag': 'PONY!',
+            'myparam': 'Tofu WITH A PONY!',
+            'shortless': 'Gamma',
+        }
+        self.assertEquals(expected, parsedOptions)
+
+
+
+class SubcommandOptions(usage.Options):
+    """
+    An Options object for a subcommand.
+    """
+    def postOptions(self):
+        """
+        Tells the parent we were called.
+        """
+        self.parent.subcommandIsCalled = True
+        self.parent.subcommandCallParameter = self.parent["spam"]
+
+
+
+class OptionsWithSubcommand(usage.Options):
+    """
+    An L{Options} with a subcommand.
+    """
+    optParameters = [('spam', None, None, None)]
+    subCommands = [('subcommand', None, SubcommandOptions, None)]
+
+
+    def __init__(self):
+        super(OptionsWithSubcommand, self).__init__()
+
+        self.isCalled = False
+        self.callParameter = None
+
+        self.subcommandIsCalled = False
+        self.subcommandCallParameter = None
+
+
+    def opt_eggs(self):
+        self.isCalled = True
+        self.callParameter = self["spam"]
+
+
+
+class SubcommandsWithParentTest(unittest.TestCase):
+    """
+    Tests if the state of the L{Options} object remains consistent when using
+    subcommands together with the new L{parsedOptions} implementation.
+
+    The subcommand will try to read the value of an option from its parent's
+    command in the subcommand's postOptions method.
+    """
+    def setUp(self):
+        argv = ["--spam=barney", "--eggs", "subcommand"]
+        self.options = OptionsWithSubcommand()
+        self.options.parseOptions(argv)
+
+
+    def test_consistentState(self):
+        """
+        Tests that the appropriate methods were called in the main Options
+        object and the subcommand Options object.
+        """
+        self.assertTrue(self.options.isCalled,
+                        "opt_eggs was called")
+        self.assertTrue(self.options.subcommandIsCalled,
+                        "subcommand was called")
+
+        self.assertEqual("barney", self.options.callParameter,
+                         "spam was called with the right parameter")
+        self.assertEqual("barney", self.options.subcommandCallParameter,
+                         "subcommand was called with the right parameter")
+
+
+
 class TypedOptions(usage.Options):
     optParameters = [
         ['fooint', None, 392, 'Foo int', int],
@@ -80,6 +195,7 @@
     ]
 
 
+
 class TypedTestCase(unittest.TestCase):
     """
     Test Options.parseArgs for options with forced types.
@@ -87,6 +203,7 @@
     def setUp(self):
         self.usage = TypedOptions()
 
+
     def test_defaultValues(self):
         """
         Test parsing of default values.
@@ -100,6 +217,7 @@
         self.failUnlessEqual(self.usage.opts['eggint'], None)
         self.failUnlessEqual(self.usage.opts['eggfloat'], None)
 
+
     def test_parsingValues(self):
         """
         Test basic parsing of int and float values.
@@ -116,6 +234,7 @@
         self.failUnlessEqual(self.usage.opts['eggfloat'], 21.)
         self.assert_(isinstance(self.usage.opts['eggfloat'], float))
 
+
     def test_invalidValues(self):
         """
         Check that passing wrong values raises an error.
@@ -124,6 +243,7 @@
         self.assertRaises(usage.UsageError, self.usage.parseOptions, argV)
 
 
+
 class WrongTypedOptions(usage.Options):
     optParameters = [
         ['barwrong', None, None, 'Bar with wrong coerce', 'he']
@@ -153,6 +273,7 @@
         argV = "--barwrong egg".split()
         self.assertRaises(TypeError, us.parseOptions, argV)
 
+
     def test_notCalledInDefault(self):
         """
         Test that the coerce functions are not called if no values are
@@ -162,6 +283,7 @@
         argV = []
         us.parseOptions(argV)
 
+        
     def test_weirdCallable(self):
         """
         Test what happens when coerce functions raise errors.
@@ -230,6 +352,7 @@
         self.failUnlessEqual(o.subOptions['expect'], False)
         self.failUnlessEqual(o.subOptions['torture-device'], 'comfy-chair')
 
+
     def test_subcommandWithFlagsAndOptions(self):
         o = SubCommandOptions()
         o.parseOptions(['inquisition', '--expect', '--torture-device=feather'])
@@ -239,6 +362,7 @@
         self.failUnlessEqual(o.subOptions['expect'], True)
         self.failUnlessEqual(o.subOptions['torture-device'], 'feather')
 
+
     def test_subcommandAliasWithFlagsAndOptions(self):
         o = SubCommandOptions()
         o.parseOptions(['inquest', '--expect', '--torture-device=feather'])
@@ -248,6 +372,7 @@
         self.failUnlessEqual(o.subOptions['expect'], True)
         self.failUnlessEqual(o.subOptions['torture-device'], 'feather')
 
+
     def test_anotherSubcommandWithFlagsAndOptions(self):
         o = SubCommandOptions()
         o.parseOptions(['holyquest', '--for-grail'])
@@ -257,6 +382,7 @@
         self.failUnlessEqual(o.subOptions['horseback'], False)
         self.failUnlessEqual(o.subOptions['for-grail'], True)
 
+
     def test_noSubcommand(self):
         o = SubCommandOptions()
         o.parseOptions(['--europian-swallow'])
@@ -264,6 +390,7 @@
         self.failUnlessEqual(o.subCommand, None)
         self.failIf(hasattr(o, 'subOptions'))
 
+
     def test_defaultSubcommand(self):
         o = SubCommandOptions()
         o.defaultSubCommand = 'inquest'
@@ -274,6 +401,7 @@
         self.failUnlessEqual(o.subOptions['expect'], False)
         self.failUnlessEqual(o.subOptions['torture-device'], 'comfy-chair')
 
+
     def test_subCommandParseOptionsHasParent(self):
         class SubOpt(usage.Options):
             def parseOptions(self, *a, **kw):
@@ -288,6 +416,7 @@
         self.failUnless(hasattr(o.subOptions, 'sawParent'))
         self.failUnlessEqual(o.subOptions.sawParent , o)
 
+
     def test_subCommandInTwoPlaces(self):
         """
         The .parent pointer is correct even when the same Options class is
@@ -313,6 +442,7 @@
         self.failUnlessIdentical(oBar.subOptions.parent, oBar)
 
 
+
 class HelpStringTest(unittest.TestCase):
     def setUp(self):
         """
@@ -369,4 +499,3 @@
 
 if __name__ == '__main__':
     unittest.main()
-
Index: twisted/python/usage.py
===================================================================
--- twisted/python/usage.py	(revision 27153)
+++ twisted/python/usage.py	(working copy)
@@ -20,8 +20,8 @@
 
 # Sibling Imports
 from twisted.python import reflect, text, util
+from twisted.python.compat import set
 
-
 class UsageError(Exception):
     pass
 
@@ -146,7 +146,8 @@
         self.synonyms = {}
         self._dispatch = {}
 
-
+        self._parsedOptionNames = set()
+        
         collectors = [
             self._gather_flags,
             self._gather_parameters,
@@ -173,6 +174,7 @@
         """
         return int(id(self) % sys.maxint)
 
+
     def opt_help(self):
         """
         Display this help and exit.
@@ -180,6 +182,7 @@
         print self.__str__()
         sys.exit(0)
 
+
     def opt_version(self):
         from twisted import copyright
         print "Twisted version:", copyright.version
@@ -191,7 +194,6 @@
         """
         The guts of the command-line parser.
         """
-
         if options is None:
             options = sys.argv[1:]
         try:
@@ -213,6 +215,9 @@
                     raise UsageError("No such option '%s'" % (opt,))
 
             optMangled = self.synonyms[optMangled]
+
+            self._parsedOptionNames.add(optMangled)
+
             if isinstance(self._dispatch[optMangled], CoerceParameter):
                 self._dispatch[optMangled].dispatch(optMangled, arg)
             else:
@@ -240,6 +245,7 @@
 
         self.postOptions()
 
+
     def postOptions(self):
         """
         I am called after the options are parsed.
@@ -271,11 +277,11 @@
 
         self.opts[flagName] = 1
 
+
     def _gather_flags(self):
         """
         Gather up boolean (flag) options.
         """
-
         longOpt, shortOpt = [], ''
         docs, settings, synonyms, dispatch = {}, {}, {}, {}
 
@@ -298,6 +304,7 @@
 
         return longOpt, shortOpt, docs, settings, synonyms, dispatch
 
+
     def _gather_parameters(self):
         """
         Gather options which take a value.
@@ -412,6 +419,7 @@
     def __str__(self):
         return self.getSynopsis() + '\n' + self.getUsage(width=None)
 
+
     def getSynopsis(self):
         """
         Returns a string containing a description of these options and how to
@@ -435,6 +443,7 @@
 
         return synopsis
 
+
     def getUsage(self, width=None):
         # If subOptions exists by now, then there was probably an error while
         # parsing its options.
@@ -509,11 +518,28 @@
 
         return s + longdesc + commands
 
+
+    def _getParsedOptions(self):
+        """
+        Gets a dictionary containing the options that were parsed at the
+        command line and their values.
+        """
+        return dict((key, self[key]) for key in self._parsedOptionNames)
+
+
+    parsedOptions = property(fget=_getParsedOptions, doc=
+        """
+        Returns a dictionary containing the options that were actually parsed,
+        and not the options that were merely defaulted to.
+        """)
+
+
     #def __repr__(self):
     #    XXX: It'd be cool if we could return a succinct representation
     #        of which flags and options are set here.
 
 
+
 def docMakeChunks(optList, width=80):
     """
     Makes doc chunks for option declarations.
Index: doc/core/howto/options.xhtml
===================================================================
--- doc/core/howto/options.xhtml	(revision 27153)
+++ doc/core/howto/options.xhtml	(working copy)
@@ -172,6 +172,70 @@
     <p>Like <code>optFlags</code>, <code>optParameters</code> works
     smoothly with inheritance.</p>
 
+    <h2>Parsed options</h2>
+
+    <p>It can be useful to know which options were really parsed and which ones
+    were merely defaulted to. <code>Options</code> objects provide an attribute
+    <code>parsedOptions</code>, which is a dictionary with keys like those of
+    the <code>Options</code> object itself, except that it only contains
+    options that were actually parsed.</p>
+
+    <p>This can be useful in cases where there is a precedence hierarchy with
+    something in between of the defaults and command line options. A typical
+    example is a configuration file. You most likely want things in that file
+    to take precedence over defaults (otherwise the configuration file would be
+    mostly pointless), but you would also like command like options to take
+    precedence over configuration file options.</p>
+
+    <p>Here is an example:</p>
+
+<pre class="python">
+from twisted.python import usage
+
+class Options(usage.Options):
+
+    optFlags = [
+        ["fast", "f", "Run quickly"],
+        ["good", "g", "Don't validate input"],
+        ["cheap", "c", "Use cheap resources"]
+    ]
+    optParameters = [["user", "u", "alice", "The user name"]]
+
+config = Options()
+try:
+    args = ["-u", "carol", "-g"]
+    config.parseOptions(args)
+except usage.UsageError, errortext:
+    print '%s: %s' % (sys.argv[0], errortext)
+    print '%s: Try --help for usage details.' % (sys.argv[0])
+    sys.exit(1)
+
+parsedConfigurationFile = {
+    "good": False,
+    "cheap": True,
+    "user": "bob"
+}
+
+config.update(configDict)
+config.update(config.parsedOptions)
+</pre>
+    <p><code>config.parsedOptions</code> only contains the two keys that were
+    parsed from the argument list (<code>"user"</code> and <code>"good"</code>
+    ). <code>config['user']</code> will be <code>"carol"</code>, because the
+    default value of <code>"alice"</code> was overridden by the configuration
+    file value of <code>"bob"</code> which was in turn overridden by the
+    command line argument <code>"carol"</code>. <code>config['good']</code>
+    will be <code>True</code>, because the default value and the configuration
+    file value are overridden by the command line value.
+    <code>config['cheap']</code> will also be <code>True</code>, because it
+    is set in the configuration file and it is not overridden by a command line
+    argument.</p>
+
+    <p>Notice how the usual contents accessible through the mapping interface
+    of the <code>Options</code> object should always be equal to
+    <code>config.defaults</code> updated with <code>config.parsedOptions</code>
+    .</p>
+
     <h2>Option Subcommands</h2>
 
     <p>It is useful, on occassion, to group a set of options together based
