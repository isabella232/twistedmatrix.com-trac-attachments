Index: doc/core/howto/options.xhtml
===================================================================
--- doc/core/howto/options.xhtml	(revision 27090)
+++ doc/core/howto/options.xhtml	(working copy)
@@ -172,6 +172,70 @@
     <p>Like <code>optFlags</code>, <code>optParameters</code> works
     smoothly with inheritance.</p>
 
+    <h2>Parsed options</h2>
+
+    <p>It can be useful to know which options were really parsed and which ones
+    were merely defaulted to. <code>Options</code> objects provide an attribute
+    <code>parsedOptions</code>, which is a dictionary with keys like those of
+    the <code>Options</code> object itself, except that it only contains
+    options that were actually parsed.</p>
+
+    <p>This can be useful in cases where there is a precedence hierarchy with
+    something in between of the defaults and command line options. A typical
+    example is a configuration file. You most likely want things in that file
+    to take precedence over defaults (otherwise the configuration file would be
+    mostly pointless), but you would also like command like options to take
+    precedence over configuration file options.</p>
+
+    <p>Here is an example:</p>
+
+<pre class="python">
+from twisted.python import usage
+
+class Options(usage.Options):
+
+    optFlags = [
+        ["fast", "f", "Run quickly"],
+        ["good", "g", "Don't validate input"],
+        ["cheap", "c", "Use cheap resources"]
+    ]
+    optParameters = [["user", "u", "alice", "The user name"]]
+
+config = Options()
+try:
+    args = ["-u", "carol", "-g"]
+    config.parseOptions(args)
+except usage.UsageError, errortext:
+    print '%s: %s' % (sys.argv[0], errortext)
+    print '%s: Try --help for usage details.' % (sys.argv[0])
+    sys.exit(1)
+
+parsedConfigurationFile = {
+    "good": False,
+    "cheap": True,
+    "user": "bob"
+}
+
+config.update(configDict)
+config.update(config.parsedOptions)
+</pre>
+    <p><code>config.parsedOptions</code> only contains the two keys that were
+    parsed from the argument list (<code>"user"</code> and <code>"good"</code>
+    ). <code>config['user']</code> will be <code>"carol"</code>, because the
+    default value of <code>"alice"</code> was overridden by the configuration
+    file value of <code>"bob"</code> which was in turn overridden by the
+    command line argument <code>"carol"</code>. <code>config['good']</code>
+    will be <code>True</code>, because the default value and the configuration
+    file value are overridden by the command line value.
+    <code>config['cheap']</code> will also be <code>True</code>, because it
+    is set in the configuration file and it is not overridden by a command line
+    argument.</p>
+
+    <p>Notice how the usual contents accessible through the mapping interface
+    of the <code>Options</code> object should always be equal to
+    <code>config.defaults</code> updated with <code>config.parsedOptions</code>
+    .</p>
+
     <h2>Option Subcommands</h2>
 
     <p>It is useful, on occassion, to group a set of options together based
