Index: twisted/test/test_usage.py
===================================================================
--- twisted/test/test_usage.py	(revision 27024)
+++ twisted/test/test_usage.py	(working copy)
@@ -70,7 +70,21 @@
         self.failUnlessEqual(self.nice.opts['myflag'], "PONY!")
         self.failUnlessEqual(self.nice.opts['myparam'], "Tofu WITH A PONY!")
 
+    def test_parsedOptions(self):
+        """
+        Checking that parsedOptions contains the correct values.
+        """
+        self.failUnlessEqual(self.nice.parsedOptions['long'], "Alpha")
+        self.failUnlessEqual(self.nice.parsedOptions['another'], "Beta")
+        self.failUnlessEqual(self.nice.parsedOptions['shortless'], "Gamma")
 
+    def test_unparsedOptions(self):
+        """
+        Checking that parsedOptions doesn't contain unparsed options.
+        """
+        self.assertNotIn('longonly', self.nice.parsedOptions)
+        self.assertNotIn('flout', self.nice.parsedOptions)
+
 class TypedOptions(usage.Options):
     optParameters = [
         ['fooint', None, 392, 'Foo int', int],
Index: twisted/python/usage.py
===================================================================
--- twisted/python/usage.py	(revision 27024)
+++ twisted/python/usage.py	(working copy)
@@ -55,7 +55,7 @@
         except ValueError, e:
             raise UsageError("Parameter type enforcement failed: %s" % (e,))
 
-        self.options.opts[parameterName] = value
+        self.options.parsedOptions[parameterName] = value
 
 
 class Options(dict):
@@ -137,6 +137,7 @@
         super(Options, self).__init__()
 
         self.opts = self
+        self.parsedOptions = {}
         self.defaults = {}
 
         # These are strings/lists we will pass to getopt
@@ -146,7 +147,6 @@
         self.synonyms = {}
         self._dispatch = {}
 
-
         collectors = [
             self._gather_flags,
             self._gather_parameters,
@@ -155,16 +155,17 @@
 
         for c in collectors:
             (longOpt, shortOpt, docs, settings, synonyms, dispatch) = c()
             self.longOpt.extend(longOpt)
             self.shortOpt = self.shortOpt + shortOpt
             self.docs.update(docs)
 
-            self.opts.update(settings)
             self.defaults.update(settings)
 
             self.synonyms.update(synonyms)
             self._dispatch.update(dispatch)
 
+        self.update(self.defaults)
+
     def __hash__(self):
         """
         Define a custom hash function so that Options instances can be used
@@ -238,6 +240,7 @@
             except TypeError:
                 raise UsageError("Wrong number of arguments.")
 
+        self.update(self.parsedOptions)
         self.postOptions()
 
     def postOptions(self):
@@ -269,7 +272,7 @@
             raise UsageError("Flag '%s' takes no argument."
                              " Not even \"%s\"." % (flagName, value))
 
-        self.opts[flagName] = 1
+        self.parsedOptions[flagName] = 1
 
     def _gather_flags(self):
         """
