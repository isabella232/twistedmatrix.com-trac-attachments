diff --git twisted/web/http.py twisted/web/http.py
index d69a02f..85d79c2 100644
--- twisted/web/http.py
+++ twisted/web/http.py
@@ -1587,8 +1587,8 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
     """
     A receiver for HTTP requests.
 
-    Maximum length for initial request line and each header is defined by
-    L{basic.LineReceiver.MAX_LENGTH}.
+    @ivar MAX_LENGTH: Maximum length for initial request line and each line
+        from the header.
 
     @ivar _transferDecoder: C{None} or a decoder instance if the request body
         uses the I{chunked} Transfer-Encoding.
@@ -1669,6 +1669,7 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
             self._command = command
             self._path = request
             self._version = version
+        # End of headers.
         elif line == b'':
             if self.__header:
                 self.headerReceived(self.__header)
@@ -1678,8 +1679,12 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
                 self.allContentReceived()
             else:
                 self.setRawMode()
+        # Continuation of a multi line header.
         elif line[0] in b' \t':
             self.__header = self.__header + '\n' + line
+        # Regular header line.
+        # Processing of header line is delayed to allow accumulating multi
+        # line headers.
         else:
             if self.__header:
                 self.headerReceived(self.__header)
diff --git twisted/web/test/test_http.py twisted/web/test/test_http.py
index 9563c7a..71507ef 100644
--- twisted/web/test/test_http.py
+++ twisted/web/test/test_http.py
@@ -661,8 +661,9 @@ class ParsingTestCase(unittest.TestCase):
 
 
     def runRequest(
-            self, httpRequest, requestFactory=None, channel=None,
-            success=False):
+            self, httpRequest, requestFactory=None, success=True,
+             channel=None,
+             ):
         """
         Execute a web request based on plain text content.
 
@@ -672,12 +673,12 @@ class ParsingTestCase(unittest.TestCase):
         @param requestFactory: Request factory used for the channel.
         @type requestFactory: L{Request}
 
+        @param success: Value to compare against I{self.didRequest}.
+        @type success: C{bool}
+
         @param channel: Channel instance over which the request is processed.
         @type channel: L{HTTPChannel}
 
-        @param success: Value to compare agains I{self.didRequest}.
-        @type success: C{bool}
-
         @return: Returns the channel used for processing the request.
         @rtype: L{HTTPChannel}
         """
@@ -839,7 +840,8 @@ class ParsingTestCase(unittest.TestCase):
         channel.totalHeadersSize = 10
         httpRequest = b'GET /path/longer/than/10 HTTP/1.1\n'
 
-        channel = self.runRequest(httpRequest=httpRequest, channel=channel)
+        channel = self.runRequest(
+            httpRequest=httpRequest, channel=channel, success=False)
 
         self.assertEqual(
             channel.transport.value(),
@@ -859,7 +861,8 @@ class ParsingTestCase(unittest.TestCase):
             b'Some-Header: less-than-40\n'
             )
 
-        channel = self.runRequest(httpRequest=httpRequest, channel=channel)
+        channel = self.runRequest(
+            httpRequest=httpRequest, channel=channel, success=False)
 
         self.assertEqual(
             channel.transport.value(),
@@ -887,7 +890,7 @@ class ParsingTestCase(unittest.TestCase):
             )
 
         channel = self.runRequest(
-            httpRequest=httpRequest, channel=channel)
+            httpRequest=httpRequest, channel=channel, success=False)
 
         self.assertEqual(
             channel.transport.value(),
@@ -922,7 +925,7 @@ Cookie: rabbit="eat carrot"; ninja=secret; spam="hey 1=1!"
                 testcase.didRequest = True
                 self.finish()
 
-        self.runRequest(httpRequest, MyRequest, success=True)
+        self.runRequest(httpRequest, MyRequest)
 
         self.assertEqual(
             cookies, {
@@ -949,7 +952,7 @@ GET /?key=value&multiple=two+words&multiple=more%20words&empty= HTTP/1.0
                 testcase.didRequest = True
                 self.finish()
 
-        self.runRequest(httpRequest, MyRequest, success=True)
+        self.runRequest(httpRequest, MyRequest)
         self.assertEqual(method, [b"GET"])
         self.assertEqual(
             args, [[b"value"], [b""], [b"two words", b"more words"]])
@@ -975,7 +978,7 @@ GET /?key=value&multiple=two+words&multiple=more%20words&empty= HTTP/1.0
                 testcase.didRequest = True
                 self.finish()
 
-        self.runRequest(httpRequest, MyRequest, success=True)
+        self.runRequest(httpRequest, MyRequest)
         self.assertEqual(method, [b'GET'])
         self.assertEqual(path, [b'/foo'])
         self.assertEqual(args, [[b'?'], [b'quux']])
@@ -1011,7 +1014,7 @@ Content-Type: application/x-www-form-urlencoded
                 testcase.didRequest = True
                 self.finish()
 
-        self.runRequest(httpRequest, MyRequest, success=True)
+        self.runRequest(httpRequest, MyRequest)
         self.assertEqual(method, [b"POST"])
         self.assertEqual(
             args, [[b"value"], [b""], [b"two words", b"more words"]])
@@ -1072,7 +1075,7 @@ Hello,
                 testcase.didRequest = True
                 self.finish()
 
-        self.runRequest(httpRequest, MyRequest, success=True)
+        self.runRequest(httpRequest, MyRequest)
         # The tempfile API used to create content returns an
         # instance of a different type depending on what platform
         # we're running on.  The point here is to verify that the
