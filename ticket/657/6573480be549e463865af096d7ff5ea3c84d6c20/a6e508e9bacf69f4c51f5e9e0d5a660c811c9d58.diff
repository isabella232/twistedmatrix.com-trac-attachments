diff --git twisted/web/http.py twisted/web/http.py
index e50be47..d100712 100644
--- twisted/web/http.py
+++ twisted/web/http.py
@@ -817,9 +817,8 @@ class Request:
                         # content-dispostion headers in multipart/form-data
                         # parts, so we catch the exception and tell the client
                         # it was a bad request.
-                        self.channel.transport.write(
-                                b"HTTP/1.1 400 Bad Request\r\n\r\n")
-                        self.channel.transport.loseConnection()
+                        _respondToBadRequestAndDisconnect(
+                            self.channel.transport)
                         return
                     raise
             self.content.seek(0, 0)
@@ -1589,12 +1588,26 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
     """
     A receiver for HTTP requests.
 
-    @ivar _transferDecoder: C{None} or an instance of
-        L{_ChunkedTransferDecoder} if the request body uses the I{chunked}
-        Transfer-Encoding.
+    @ivar MAX_LENGTH: Maximum length for initial request line and each line
+        from the header.
+
+    @ivar _transferDecoder: C{None} or a decoder instance if the request body
+        uses the I{chunked} Transfer-Encoding.
+    @type _transferDecoder: L{_ChunkedTransferDecoder}
+
+    @ivar maxHeaders: Maximum number of headers allowed per request.
+    @type maxHeaders: C{int}
+
+    @ivar totalHeadersSize: Maximum bytes for request line plus all headers
+        from the request.
+    @type totalHeadersSize: C{int}
+
+    @ivar _receivedHeaderSize: Bytes received so far for the header.
+    @type _receivedHeaderSize: C{int}
     """
 
-    maxHeaders = 500 # max number of headers allowed per request
+    maxHeaders = 500
+    totalHeadersSize = 16384
 
     length = 0
     persistent = 1
@@ -1607,6 +1620,7 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
 
     _savedTimeOut = None
     _receivedHeaderCount = 0
+    _receivedHeaderSize = 0
 
     def __init__(self):
         # the request queue
@@ -1617,9 +1631,19 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
     def connectionMade(self):
         self.setTimeout(self.timeOut)
 
+
     def lineReceived(self, line):
+        """
+        Called for each line from request until the end of headers when
+        it enters binary mode.
+        """
         self.resetTimeout()
 
+        self._receivedHeaderSize += len(line)
+        if (self._receivedHeaderSize > self.totalHeadersSize):
+            _respondToBadRequestAndDisconnect(self.transport)
+            return
+
         if self.__first_line:
             # if this connection is not persistent, drop any data which
             # the client (illegally) sent after the last request.
@@ -1640,14 +1664,14 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
             self.__first_line = 0
             parts = line.split()
             if len(parts) != 3:
-                self.transport.write(b"HTTP/1.1 400 Bad Request\r\n\r\n")
-                self.transport.loseConnection()
+                _respondToBadRequestAndDisconnect(self.transport)
                 return
             command, request, version = parts
             self._command = command
             self._path = request
             self._version = version
         elif line == b'':
+            # End of headers.
             if self.__header:
                 self.headerReceived(self.__header)
             self.__header = ''
@@ -1657,7 +1681,11 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
             else:
                 self.setRawMode()
         elif line[0] in b' \t':
+            # Continuation of a multi line header.
             self.__header = self.__header + '\n' + line
+        # Regular header line.
+        # Processing of header line is delayed to allow accumulating multi
+        # line headers.
         else:
             if self.__header:
                 self.headerReceived(self.__header)
@@ -1685,9 +1713,8 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
             try:
                 self.length = int(data)
             except ValueError:
-                self.transport.write(b"HTTP/1.1 400 Bad Request\r\n\r\n")
+                respondToBadRequestAndDisconnect(self._transport)
                 self.length = None
-                self.transport.loseConnection()
                 return
             self._transferDecoder = _IdentityTransferDecoder(
                 self.length, self.requests[-1].handleContentChunk, self._finishRequestBody)
@@ -1706,8 +1733,8 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
 
         self._receivedHeaderCount += 1
         if self._receivedHeaderCount > self.maxHeaders:
-            self.transport.write(b"HTTP/1.1 400 Bad Request\r\n\r\n")
-            self.transport.loseConnection()
+            _respondToBadRequestAndDisconnect(self.transport)
+            return
 
 
     def allContentReceived(self):
@@ -1718,6 +1745,7 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
         # reset ALL state variables, so we don't interfere with next request
         self.length = 0
         self._receivedHeaderCount = 0
+        self._receivedHeaderSize = 0
         self.__first_line = 1
         self._transferDecoder = None
         del self._command, self._path, self._version
@@ -1736,8 +1764,7 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
         try:
             self._transferDecoder.dataReceived(data)
         except _MalformedChunkedDataError:
-            self.transport.write(b"HTTP/1.1 400 Bad Request\r\n\r\n")
-            self.transport.loseConnection()
+            _respondToBadRequestAndDisconnect(self.transport)
 
 
     def allHeadersReceived(self):
@@ -1825,6 +1852,19 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
 
 
 
+def _respondToBadRequestAndDisconnect(transport):
+    """
+    This is a quick and dirty way of responding to bad requests.
+
+    As described by HTTP standard we should be patient and accept the
+    whole request from the client, before sending a polite bad request
+    response, even in the case when clients send tons of data.
+    """
+    transport.write(b"HTTP/1.1 400 Bad Request\r\n\r\n")
+    transport.loseConnection()
+
+
+
 def _escape(s):
     """
     Return a string like python repr, but always escaped as if surrounding
diff --git twisted/web/test/test_http.py twisted/web/test/test_http.py
index 5a0a853..12a94f2 100644
--- twisted/web/test/test_http.py
+++ twisted/web/test/test_http.py
@@ -660,23 +660,48 @@ class ParsingTestCase(unittest.TestCase):
         self.didRequest = False
 
 
-    def runRequest(self, httpRequest, requestClass, success=1):
+    def runRequest(self, httpRequest, requestFactory=None, success=True,
+                   channel=None):
+        """
+        Execute a web request based on plain text content.
+
+        @param httpRequest: Content for the request which is processed.
+        @type httpRequest: C{bytes}
+
+        @param requestFactory: 2-argument callable returning a Request.
+        @type requestFactory: C{callable}
+
+        @param success: Value to compare against I{self.didRequest}.
+        @type success: C{bool}
+
+        @param channel: Channel instance over which the request is processed.
+        @type channel: L{HTTPChannel}
+
+        @return: Returns the channel used for processing the request.
+        @rtype: L{HTTPChannel}
+        """
+        if not channel:
+            channel = http.HTTPChannel()
+
+        if requestFactory:
+            channel.requestFactory = requestFactory
+
         httpRequest = httpRequest.replace(b"\n", b"\r\n")
-        b = StringTransport()
-        a = http.HTTPChannel()
-        a.requestFactory = requestClass
-        a.makeConnection(b)
+        transport = StringTransport()
+
+        channel.makeConnection(transport)
         # one byte at a time, to stress it.
         for byte in iterbytes(httpRequest):
-            if a.transport.disconnecting:
+            if channel.transport.disconnecting:
                 break
-            a.dataReceived(byte)
-        a.connectionLost(IOError("all done"))
+            channel.dataReceived(byte)
+        channel.connectionLost(IOError("all done"))
+
         if success:
             self.assertTrue(self.didRequest)
         else:
             self.assertFalse(self.didRequest)
-        return a
+        return channel
 
 
     def test_basicAuth(self):
@@ -803,6 +828,83 @@ class ParsingTestCase(unittest.TestCase):
             b'\r\n')
 
 
+    def test_headersTooBigInitialCommand(self):
+        """
+        Enforces a limit of C{HTTPChannel.totalHeadersSize}
+        on the size of headers received per request starting from initial
+        command line.
+        """
+        channel = http.HTTPChannel()
+        channel.totalHeadersSize = 10
+        httpRequest = b'GET /path/longer/than/10 HTTP/1.1\n'
+
+        channel = self.runRequest(
+            httpRequest=httpRequest, channel=channel, success=False)
+
+        self.assertEqual(
+            channel.transport.value(),
+            b"HTTP/1.1 400 Bad Request\r\n\r\n")
+
+
+    def test_headersTooBigOtherHeaders(self):
+        """
+        Enforces a limit of C{HTTPChannel.totalHeadersSize}
+        on the size of headers received per request counting first line
+        and total headers.
+        """
+        channel = http.HTTPChannel()
+        channel.totalHeadersSize = 40
+        httpRequest = (
+            b'GET /less/than/40 HTTP/1.1\n'
+            b'Some-Header: less-than-40\n'
+            )
+
+        channel = self.runRequest(
+            httpRequest=httpRequest, channel=channel, success=False)
+
+        self.assertEqual(
+            channel.transport.value(),
+            b"HTTP/1.1 400 Bad Request\r\n\r\n")
+
+
+    def test_headersTooBigPerRequest(self):
+        """
+        Enforces total size of headers per individual request and counter
+        is reset at the end of each request.
+        """
+        class SimpleRequest(http.Request):
+            def process(self):
+                self.finish()
+        channel = http.HTTPChannel()
+        channel.totalHeadersSize = 60
+        channel.requestFactory = SimpleRequest
+        httpRequest = (
+            b'GET / HTTP/1.1\n'
+            b'Some-Header: total-less-than-60\n'
+            b'\n'
+            b'GET / HTTP/1.1\n'
+            b'Some-Header: less-than-60\n'
+            b'\n'
+            )
+
+        channel = self.runRequest(
+            httpRequest=httpRequest, channel=channel, success=False)
+
+        self.assertEqual(
+            channel.transport.value(),
+            b'HTTP/1.1 200 OK\r\n'
+            b'Transfer-Encoding: chunked\r\n'
+            b'\r\n'
+            b'0\r\n'
+            b'\r\n'
+            b'HTTP/1.1 200 OK\r\n'
+            b'Transfer-Encoding: chunked\r\n'
+            b'\r\n'
+            b'0\r\n'
+            b'\r\n'
+            )
+
+
     def testCookies(self):
         """
         Test cookies parsing and reading.
diff --git twisted/web/topfiles/6927.misc twisted/web/topfiles/6927.misc
new file mode 100644
index 0000000..f72a31f
--- /dev/null
+++ twisted/web/topfiles/6927.misc
@@ -0,0 +1 @@
+twisted.web.http.HTTPChannel now limit the total headers size, including first command line, to 16KB.
\ No newline at end of file
