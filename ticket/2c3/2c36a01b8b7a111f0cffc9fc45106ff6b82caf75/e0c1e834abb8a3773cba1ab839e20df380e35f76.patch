commit 262e2a86e2cc0263f288f545fdc7abe2afab7c1d
Author: Ximin Luo <infinity0@pwned.gg>
Date:   Thu Apr 10 18:03:06 2014 +0100

    support the stdin,stdout parameters to StandardIO() on windows
    - we have to make the test slightly more complex, to accommodate for the fact that Windows throws an error if we try to close an already-closed fd
    - don't bother putting stderr in binary mode, since we never use it

diff --git twisted/internet/_win32stdio.py twisted/internet/_win32stdio.py
index 65d4601..a9e0942 100644
--- twisted/internet/_win32stdio.py
+++ twisted/internet/_win32stdio.py
@@ -30,23 +30,26 @@ class StandardIO(_pollingfile._PollingTimer):
     disconnecting = False
     disconnected = False
 
-    def __init__(self, proto, reactor=None):
+    def __init__(self, proto, stdin=0, stdout=1, reactor=None):
         """
         Start talking to standard IO with the given protocol.
 
-        Also, put it stdin/stdout/stderr into binary mode.
+        The stdin/stdout params are file descriptors (integers), e.g. as
+        returned by the fileno() method of a Python file object. On windows,
+        they may represent open files or pipes. Both of these will be put
+        into binary mode.
         """
         if reactor is None:
             from twisted.internet import reactor
 
-        for stdfd in range(0, 1, 2):
-            msvcrt.setmode(stdfd, os.O_BINARY)
+        for fd in (stdin, stdout):
+            msvcrt.setmode(fd, os.O_BINARY)
 
         _pollingfile._PollingTimer.__init__(self, reactor)
         self.proto = proto
 
-        hstdin = win32api.GetStdHandle(win32api.STD_INPUT_HANDLE)
-        hstdout = win32api.GetStdHandle(win32api.STD_OUTPUT_HANDLE)
+        hstdin = msvcrt.get_osfhandle(stdin)
+        hstdout = msvcrt.get_osfhandle(stdout)
 
         self.stdin = _pollingfile._PollableReadPipe(
             hstdin, self.dataReceived, self.readConnectionLost)
diff --git twisted/test/test_stdio.py twisted/test/test_stdio.py
index 3da754c..3a1def5 100644
--- twisted/test/test_stdio.py
+++ twisted/test/test_stdio.py
@@ -5,7 +5,7 @@
 Tests for L{twisted.internet.stdio}.
 """
 
-import os, sys, itertools
+import errno, os, sys, itertools
 
 from twisted.trial import unittest
 from twisted.python import filepath, log
@@ -326,16 +326,30 @@ class StandardInputOutputTestCase(unittest.TestCase):
         proto = ConnectionLostNotifyingProtocol(onConnLost)
         path = filepath.FilePath(self.mktemp())
         self.normal = normal = path.open('w')
-        self.addCleanup(normal.close)
+        def close_nofail(fp):
+            # Windows throws an error if we try to close an already-closed fd
+            # if we reuse close_nofail_fd below, this screws with python's
+            # internal bookkeeping of fp objects
+            try:
+                fp.close()
+            except IOError:
+                pass
+        self.addCleanup(close_nofail, normal)
 
         kwargs = dict(stdout=normal.fileno())
-        if not platform.isWindows():
-            # Make a fake stdin so that StandardIO doesn't mess with the *real*
-            # stdin.
-            r, w = os.pipe()
-            self.addCleanup(os.close, r)
-            self.addCleanup(os.close, w)
-            kwargs['stdin'] = r
+        # Make a fake stdin so that StandardIO doesn't mess with the *real*
+        # stdin.
+        r, w = os.pipe()
+        def close_nofail_fd(fd):
+            # Windows throws an error if we try to close an already-closed fd
+            try:
+                os.close(fd)
+            except OSError as e:
+                if e.errno != errno.EBADF:
+                    raise
+        self.addCleanup(close_nofail_fd, r)
+        self.addCleanup(os.close, w)
+        kwargs['stdin'] = r
         connection = stdio.StandardIO(proto, **kwargs)
 
         # The reactor needs to spin a bit before it might have incorrectly
@@ -364,8 +378,3 @@ class StandardInputOutputTestCase(unittest.TestCase):
                 ''.join(map(str, range(howMany))))
         onConnLost.addCallback(cbLost)
         return onConnLost
-
-    if platform.isWindows():
-        test_normalFileStandardOut.skip = (
-            "StandardIO does not accept stdout as an argument to Windows.  "
-            "Testing redirection to a file is therefore harder.")
