commit fcd7652edf24f810f7e34f4c374347c0e56deef1
Author: Ximin Luo <infinity0@pwned.gg>
Date:   Wed Mar 26 22:54:20 2014 +0000

    portforward.py: make the ProxyServer client connection behaviour overrideable in subclasses

diff --git NEWS NEWS
index 697bf87..0b192a3 100644
--- NEWS
+++ NEWS
@@ -6,6 +6,8 @@ Twisted Core 13.2.0 (2013-10-29)
 
 Features
 --------
+ - twisted.protocols.portforward.ProxyServer now allows users to
+   override how the client connects to the remote server. (#7057)
  - twistd now waits for the application to start successfully before
    exiting after daemonization. (#823)
  - twisted.internet.endpoints now provides HostnameEndpoint, a TCP
diff --git twisted/protocols/portforward.py twisted/protocols/portforward.py
index 626d5aa..35bbd32 100644
--- twisted/protocols/portforward.py
+++ twisted/protocols/portforward.py
@@ -74,6 +74,17 @@ class ProxyServer(Proxy):
         if self.reactor is None:
             from twisted.internet import reactor
             self.reactor = reactor
+
+        self.connectProxyClient(client)
+
+    def connectProxyClient(self, client):
+        """Connect the client to this server.
+
+        The default implementation uses reactor.connectTCP to connect to the
+        host, port that was configured on the server's factory.
+
+        @type client: L{twisted.protocols.portforward.ProxyClient}
+        """
         self.reactor.connectTCP(self.factory.host, self.factory.port, client)
 
 
diff --git twisted/test/test_protocols.py twisted/test/test_protocols.py
index e2915d9..36d1bf6 100644
--- twisted/test/test_protocols.py
+++ twisted/test/test_protocols.py
@@ -112,6 +112,31 @@ class TestableProxyFactory(portforward.ProxyFactory):
 
 
 
+class OverriddenProxyServer(portforward.ProxyServer):
+    """
+    Test proxy server that checks that interface methods can be overridden.
+
+    @ivar calledOverride: Whether the override has been called yet.
+    @type calledOverride: C{bool}
+    """
+
+    def __init__(self):
+        self.calledOverride = False
+
+    def connectProxyClient(self, client):
+        self.calledOverride = True
+
+
+
+class OverriddenProxyFactory(portforward.ProxyFactory):
+    """
+    Test proxy factory that checks that interface methods can be overridden.
+    """
+
+    protocol = OverriddenProxyServer
+
+
+
 class Portforwarding(unittest.TestCase):
     """
     Test port forwarding.
@@ -186,6 +211,26 @@ class Portforwarding(unittest.TestCase):
         return d
 
 
+    def test_override_connectProxyClient(self):
+        """
+        Test port forwarding through Echo protocol.
+        """
+        # create a ProxyServer instance
+        addr = address.IPv4Address('TCP', '127.0.0.1', 0)
+        server = OverriddenProxyFactory('127.0.0.1', 0).buildProtocol(addr)
+
+        # set the reactor for this test
+        reactor = proto_helpers.MemoryReactor()
+        server.reactor = reactor
+
+        # make the connection
+        serverTransport = proto_helpers.StringTransport()
+        server.makeConnection(serverTransport)
+
+        # check that the overridden method was called as expected
+        self.assertTrue(server.calledOverride)
+
+
     def test_registerProducers(self):
         """
         The proxy client registers itself as a producer of the proxy server and
