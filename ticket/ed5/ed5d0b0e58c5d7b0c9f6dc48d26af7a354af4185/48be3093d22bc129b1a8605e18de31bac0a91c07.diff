Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 26229)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -336,6 +336,9 @@
             '''foo NIL "baz buz" bar''',
             '''foo "NIL" "baz buz" bar''',
             '''"NIL" bar "baz buz" foo''',
+            r'"Escaped \"Quotes\""',
+            'Escape \t non-quote',
+            'Escape \\t escaped tab'
         ]
 
         answers = [
@@ -348,6 +351,10 @@
             ['foo', None, 'baz buz', 'bar'],
             ['foo', 'NIL', 'baz buz', 'bar'],
             ['NIL', 'bar', 'baz buz', 'foo'],
+            ['Escaped "Quotes"'],
+            ['Escape', 'non-quote'],
+            ['Escape', '\\t', 'escaped', 'tab'],
+
         ]
 
         errors = [
@@ -416,6 +423,10 @@
             '("John Klensin" NIL KLENSIN INFOODS.MIT.EDU)) NIL NIL '
             '<B27397-0100000@cac.washington.edu>) '
             'BODY (TEXT PLAIN (CHARSET US-ASCII) NIL NIL 7BIT 3028 92))',
+            r'"Escaped \"Quotes\""',
+            r'("Escaped \"Quotes\"" "many" "words")',
+            '(Escape \t non-quote)',
+            '(Escape \\t escaped tab)'
         ]
 
         answers = [
@@ -433,6 +444,10 @@
             "INFOODS.MIT.EDU"]], None, None,
             "<B27397-0100000@cac.washington.edu>"], "BODY", ["TEXT", "PLAIN",
             ["CHARSET", "US-ASCII"], None, None, "7BIT", "3028", "92"]],
+            'Escaped "Quotes"',
+            ['Escaped "Quotes"', 'many', 'words'],
+            ['Escape', 'non-quote'],
+            ['Escape', '\\t', 'escaped', 'tab']
         ]
 
         for (case, expected) in zip(cases, answers):
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 26229)
+++ twisted/mail/imap4.py	(working copy)
@@ -1,5 +1,5 @@
 # -*- test-case-name: twisted.mail.test.test_imap -*-
-# Copyright (c) 2001-2008 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2009 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
@@ -3824,35 +3824,46 @@
     """
     s = s.strip()
     result = []
-    inQuote = inWord = start = 0
-    for (i, c) in zip(range(len(s)), s):
-        if c == '"' and not inQuote:
-            inQuote = 1
-            start = i + 1
-        elif c == '"' and inQuote:
-            inQuote = 0
-            result.append(s[start:i])
-            start = i + 1
+    word = []
+    inQuote = inWord = False
+    for i, c in enumerate(s):
+        if c == '"':
+            if i and s[i-1] == '\\':
+                word.pop()
+                word.append('"')
+            elif not inQuote:
+                inQuote = True
+            else:
+                inQuote = False
+                result.append(''.join(word))
+                word = []
         elif not inWord and not inQuote and c not in ('"' + string.whitespace):
-            inWord = 1
-            start = i
+            inWord = True
+            word.append(c)
         elif inWord and not inQuote and c in string.whitespace:
-            if s[start:i] == 'NIL':
+            w = ''.join(word)
+            if w == 'NIL':
                 result.append(None)
             else:
-                result.append(s[start:i])
-            start = i
-            inWord = 0
+                result.append(w)
+            word = []
+            inWord = False
+        elif inWord or inQuote:
+            word.append(c)
+
     if inQuote:
         raise MismatchedQuoting(s)
     if inWord:
-        if s[start:] == 'NIL':
+        w = ''.join(word)
+        if w == 'NIL':
             result.append(None)
         else:
-            result.append(s[start:])
+            result.append(w)
+
     return result
 
 
+
 def splitOn(sequence, predicate, transformers):
     result = []
     mode = predicate(sequence[0])
@@ -3925,7 +3936,10 @@
             c = s[i]
             if inQuote:
                 if c == '\\':
-                    contentStack[-1].append(s[i+1])
+                    if s[i+1] == '"':
+                        contentStack[-1].append(r'\"')
+                    else:
+                        contentStack[-1].append(s[i+1])
                     i += 2
                     continue
                 elif c == '"':
