Index: twisted/python/versions.py
===================================================================
--- twisted/python/versions.py	(revision 28469)
+++ twisted/python/versions.py	(working copy)
@@ -15,18 +15,28 @@
     """
     An object that is bigger than all other objects.
     """
-    def __cmp__(self, other):
-        """
-        @param other: Another object.
-        @type other: any
 
-        @return: 0 if other is inf, 1 otherwise.
-        @rtype: C{int}
-        """
-        if other is _inf:
-            return 0
-        return 1
+    def __lt__(self, other):
+        return False
 
+    def __gt__(self, other):
+        return self != other
+
+    def __le__(self,other):
+        return not self.__gt__(other)
+
+    def __ge__(self,other):
+        return not self.__lt__(other)
+
+    def __eq__(self, other):
+        return other is _inf
+
+    def __ne__(self,other):
+        return not self.__eq__(other)
+
+    __hash__ =  object.__hash__
+
+
 _inf = _inf()
 
 
@@ -105,58 +115,54 @@
             prerelease,
             svnver)
 
-
     def __str__(self):
         return '[%s, version %s]' % (
             self.package,
             self.short())
 
+    def __lt__(self, other):
+        self._cmp_validate(other)
+        return (self.major, self.minor, self.micro, self._cmp_prerelease) < \
+               (other.major, other.minor, other.micro, other._cmp_prerelease)
 
-    def __cmp__(self, other):
-        """
-        Compare two versions, considering major versions, minor versions, micro
-        versions, then prereleases.
+    def __le__(self,other):
+        return not self.__gt__(other)
 
-        A version with a prerelease is always less than a version without a
-        prerelease. If both versions have prereleases, they will be included in
-        the comparison.
+    def __gt__(self, other):
+        self._cmp_validate(other)
+        return (self.major, self.minor, self.micro, self._cmp_prerelease) > \
+               (other.major, other.minor, other.micro, other._cmp_prerelease)
 
-        @param other: Another version.
-        @type other: L{Version}
+    def __ge__(self,other):
+        return not self.__lt__(other)
 
-        @return: NotImplemented when the other object is not a Version, or one
-            of -1, 0, or 1.
+    def __eq__(self, other):
+        try:
+            self._cmp_validate(other)
+            return (self.major, self.minor, self.micro, self._cmp_prerelease) == \
+                   (other.major, other.minor, other.micro, other._cmp_prerelease)
+        except NotImplementedError:
+            return NotImplemented
 
-        @raise IncomparableVersions: when the package names of the versions
-            differ.
-        """
+    __hash__ =  object.__hash__
+
+    def __ne__(self,other):
+        return not self.__eq__(other)
+
+    def _cmp_validate(self, other):
         if not isinstance(other, self.__class__):
-            return NotImplemented
+            raise NotImplementedError
         if self.package != other.package:
             raise IncomparableVersions("%r != %r"
                                        % (self.package, other.package))
 
+    @property
+    def _cmp_prerelease(self):
         if self.prerelease is None:
-            prerelease = _inf
+            return _inf
         else:
-            prerelease = self.prerelease
+            return self.prerelease
 
-        if other.prerelease is None:
-            otherpre = _inf
-        else:
-            otherpre = other.prerelease
-
-        x = cmp((self.major,
-                    self.minor,
-                    self.micro,
-                    prerelease),
-                   (other.major,
-                    other.minor,
-                    other.micro,
-                    otherpre))
-        return x
-
-
     def _parseSVNEntries_4(self, entriesFile):
         """
         Given a readable file object which represents a .svn/entries file in
@@ -182,8 +188,8 @@
         entriesFile.readline()
         entriesFile.readline()
         return entriesFile.readline().strip()
-    
-    
+
+
     # Add handlers for version 9 and 10 formats, which are the same as
     # version 8 as far as revision information is concerned.
     _parseSVNEntries_9 = _parseSVNEntries_8
Index: twisted/python/test/test_versions.py
===================================================================
--- twisted/python/test/test_versions.py	(revision 28469)
+++ twisted/python/test/test_versions.py	(working copy)
@@ -83,18 +83,58 @@
         self.failIf(vb != Version("dummy", 0, 1, 0))
         self.failIf(vb != vb)
 
-
-    def test_comparingPrereleasesWithReleases(self):
+    def test_cmp_release_property(self):
         """
-        Prereleases are always less than versions without prereleases.
+        Prereleases property behaves as expected.
         """
         va = Version("whatever", 1, 0, 0, prerelease=1)
         vb = Version("whatever", 1, 0, 0)
-        self.assertTrue(va < vb)
-        self.assertFalse(va > vb)
-        self.assertNotEquals(vb, va)
+        self.assertEqual(va._cmp_prerelease, 1)
+        self.assertEqual(vb._cmp_prerelease, _inf)
 
+    def test_cmp_validate_raises_NotImplementedError(self):
+        va = Version("whatever", 1, 0, 0, prerelease=1)
+        self.assertRaises(NotImplementedError, va._cmp_validate, 'junk')
 
+    def test_cmp_validate_raises_IncomparableVersions(self):
+        va = Version("whatever", 1, 0, 0, prerelease=1)
+        vb = Version("another", 1, 0, 0)
+        self.assertRaises(IncomparableVersions, va._cmp_validate, vb)
+
+    def test_eq_returns_NotImplemented(self):
+        va = Version("whatever", 1, 0, 0, prerelease=1)
+        self.assertEquals(va.__eq__('junk'), NotImplemented)
+
+    def test_eq_returns_True(self):
+        va = Version("whatever", 1, 0, 0, prerelease=1)
+        vb = Version("whatever", 1, 0, 0, prerelease=1)
+        self.assertTrue(va.__eq__(vb))
+
+    def test_eq_returns_False(self):
+        va = Version("whatever", 2, 0, 0, prerelease=1)
+        vb = Version("whatever", 1, 0, 0, prerelease=1)
+        self.assertFalse(va.__eq__(vb))
+
+    def test_lt_returns_True(self):
+        va = Version("whatever", 1, 0, 0, prerelease=1)
+        vb = Version("whatever", 2, 0, 0, prerelease=1)
+        self.assertTrue(va.__lt__(vb))
+
+    def test_lt_returns_False(self):
+        va = Version("whatever", 2, 0, 0, prerelease=1)
+        vb = Version("whatever", 1, 0, 0, prerelease=1)
+        self.assertFalse(va.__lt__(vb))
+
+    def test_gt_returns_True(self):
+        va = Version("whatever", 2, 0, 0, prerelease=1)
+        vb = Version("whatever", 1, 0, 0, prerelease=1)
+        self.assertTrue(va.__gt__(vb))
+
+    def test_gt_returns_False(self):
+        va = Version("whatever", 1, 0, 0, prerelease=1)
+        vb = Version("whatever", 2, 0, 0, prerelease=1)
+        self.assertFalse(va.__gt__(vb))
+
     def test_comparingPrereleases(self):
         """
         The value specified as the prerelease is used in version comparisons.
@@ -105,7 +145,6 @@
         self.assertFalse(va > vb)
         self.assertNotEqual(va, vb)
 
-
     def test_infComparison(self):
         """
         L{_inf} is equal to L{_inf}.
@@ -113,15 +152,15 @@
         This is a regression test.
         """
         self.assertEquals(_inf, _inf)
+        self.assertTrue('anything' < _inf)
+        self.assertFalse('anything' > _inf)
 
-
     def testDontAllowBuggyComparisons(self):
         self.assertRaises(IncomparableVersions,
                           cmp,
                           Version("dummy", 1, 0, 0),
                           Version("dumym", 1, 0, 0))
 
-
     def test_repr(self):
         """
         Calling C{repr} on a version returns a human-readable string
@@ -177,8 +216,8 @@
         version = Version("dummy", 1, 0, 0)
         self.assertEqual(
             version._parseSVNEntries_8(StringIO(VERSION_8_ENTRIES)), '22715')
-        
-        
+
+
     def test_goodSVNEntries_9(self):
         """
         Version should be able to parse an SVN format 9 entries file.
@@ -186,8 +225,8 @@
         version = Version("dummy", 1, 0, 0)
         self.assertEqual(
             version._parseSVNEntries_9(StringIO(VERSION_9_ENTRIES)), '22715')
-        
-        
+
+
     def test_goodSVNEntriesTenPlus(self):
         """
         Version should be able to parse an SVN format 10 entries file.
@@ -293,16 +332,16 @@
         parsed.
         """
         self.checkSVNFormat("8", VERSION_8_ENTRIES, '22715')
-        
-    
+
+
     def test_detectVersion9(self):
         """
         Verify that version 9 format files will be properly detected and
         parsed.
         """
         self.checkSVNFormat("9", VERSION_9_ENTRIES, '22715')
-        
-        
+
+
     def test_detectVersion10(self):
         """
         Verify that version 10 format files will be properly detected and
