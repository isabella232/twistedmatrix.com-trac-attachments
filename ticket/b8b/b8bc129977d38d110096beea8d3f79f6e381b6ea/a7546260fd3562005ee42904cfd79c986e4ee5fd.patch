diff --git a/docs/core/howto/systemd.rst b/docs/core/howto/systemd.rst
index f51ee68..39fd8be 100644
--- a/docs/core/howto/systemd.rst
+++ b/docs/core/howto/systemd.rst
@@ -371,7 +371,7 @@ You have also learned how the service can be started on demand, using socket act
 
 Limitations and Known Issues
 ----------------------------
-#. Twisted can not accept UNIX or datagram sockets from ``systemd``\ .
+#. Twisted can not accept datagram sockets from ``systemd``\ .
 #. Twisted does not support listening for SSL connections on sockets inherited from ``systemd``\ .
 
 Further Reading
diff --git a/twisted/internet/interfaces.py b/twisted/internet/interfaces.py
index fad315b..f0cc312 100644
--- a/twisted/internet/interfaces.py
+++ b/twisted/internet/interfaces.py
@@ -929,7 +929,6 @@ class IReactorSocket(Interface):
 
     Some plans for extending this interface exist.  See:
 
-        - U{http://twistedmatrix.com/trac/ticket/5573}: AF_UNIX SOCK_STREAM ports
         - U{http://twistedmatrix.com/trac/ticket/6594}: AF_UNIX SOCK_DGRAM ports
     """
 
diff --git a/twisted/internet/posixbase.py b/twisted/internet/posixbase.py
index 3b4d150..1d92bb7 100644
--- a/twisted/internet/posixbase.py
+++ b/twisted/internet/posixbase.py
@@ -455,11 +455,17 @@ class PosixReactorBase(_SignalReactorMixin, _DisconnectSelectableMixin,
 
         @see: L{twisted.internet.interfaces.IReactorSocket.adoptStreamPort}
         """
-        if addressFamily not in (socket.AF_INET, socket.AF_INET6):
+        if addressFamily not in (socket.AF_INET, socket.AF_INET6, socket.AF_UNIX):
             raise error.UnsupportedAddressFamily(addressFamily)
 
-        p = tcp.Port._fromListeningDescriptor(
-            self, fileDescriptor, addressFamily, factory)
+        if addressFamily == socket.AF_UNIX:
+            assert unixEnabled, "UNIX support is not present"
+            from twisted.internet import unix
+            p = unix.Port._fromListeningDescriptor(
+                self, fileDescriptor, factory)
+        else:
+            p = tcp.Port._fromListeningDescriptor(
+                self, fileDescriptor, addressFamily, factory)
         p.startListening()
         return p
 
@@ -468,11 +474,17 @@ class PosixReactorBase(_SignalReactorMixin, _DisconnectSelectableMixin,
         @see:
             L{twisted.internet.interfaces.IReactorSocket.adoptStreamConnection}
         """
-        if addressFamily not in (socket.AF_INET, socket.AF_INET6):
+        if addressFamily not in (socket.AF_INET, socket.AF_INET6, socket.AF_UNIX):
             raise error.UnsupportedAddressFamily(addressFamily)
 
-        return tcp.Server._fromConnectedSocket(
-            fileDescriptor, addressFamily, factory, self)
+        if addressFamily == socket.AF_UNIX:
+            assert unixEnabled, "UNIX support is not present"
+            from twisted.internet import unix
+            return unix.Server._fromConnectedSocket(
+                fileDescriptor, factory, self)
+        else:
+            return tcp.Server._fromConnectedSocket(
+                fileDescriptor, addressFamily, factory, self)
 
 
     def adoptDatagramPort(self, fileDescriptor, addressFamily, protocol,
diff --git a/twisted/internet/test/test_posixbase.py b/twisted/internet/test/test_posixbase.py
index 3046c2a..f121214 100644
--- a/twisted/internet/test/test_posixbase.py
+++ b/twisted/internet/test/test_posixbase.py
@@ -7,6 +7,9 @@ Tests for L{twisted.internet.posixbase} and supporting code.
 
 from __future__ import division, absolute_import
 
+import socket
+from tempfile import mktemp
+
 from twisted.python.compat import _PY3
 from twisted.trial.unittest import TestCase
 from twisted.internet.defer import Deferred
@@ -24,6 +27,7 @@ else:
         skipSockets = "Platform does not support AF_UNIX sockets"
 
 from twisted.internet.tcp import Port
+from twisted.internet.unix import Port as UnixPort
 from twisted.internet import reactor
 
 
@@ -105,6 +109,49 @@ class PosixReactorBaseTests(TestCase):
         self.assertNotIn(writer, reactor._writers)
 
 
+    def test_adoptStreamPortHandlesUNIXAddressFamily(self):
+        reactor = TrivialReactor()
+
+        s = socket.socket(socket.AF_UNIX)
+
+        # self.mktemp() often returns a path which is too long to be used.
+        path = mktemp(suffix='.sock', dir='.')
+
+        s.bind(path)
+        p = reactor.adoptStreamPort(s.fileno(), socket.AF_UNIX, ServerFactory())
+        self.assertIsInstance(p, UnixPort)
+        self.assertEqual(p.port, path)
+        p.stopListening()
+
+
+    def test_adoptStreamPortHandlesINETAddressFamily(self):
+        reactor = TrivialReactor()
+
+        s = socket.socket(socket.AF_INET)
+
+        # self.mktemp() often returns a path which is too long to be used.
+        s.bind(('127.0.0.1', 12345))
+        p = reactor.adoptStreamPort(s.fileno(), socket.AF_INET, ServerFactory())
+        self.assertIsInstance(p, Port)
+        self.assertEqual(p.port, None)
+        p.stopListening()
+
+
+    def test_adoptStreamPortHandlesINET6AddressFamily(self):
+        reactor = TrivialReactor()
+
+        s = socket.socket(socket.AF_INET6)
+
+        # self.mktemp() often returns a path which is too long to be used.
+        s.bind(('::1', 12345))
+        p = reactor.adoptStreamPort(s.fileno(), socket.AF_INET6, ServerFactory())
+        self.assertIsInstance(p, Port)
+        self.assertEqual(p.port, None)
+        p.stopListening()
+
+
+    # FIXME: tests for adoptStreamConnection? Unsure how to do that cleanly.
+
 
 class TCPPortTests(TestCase):
     """
diff --git a/twisted/internet/unix.py b/twisted/internet/unix.py
index 86a084e..7ae2196 100644
--- a/twisted/internet/unix.py
+++ b/twisted/internet/unix.py
@@ -208,6 +208,35 @@ class Server(_SendmsgMixin, tcp.Server):
         _SendmsgMixin.__init__(self)
         tcp.Server.__init__(self, sock, protocol, (client, None), server, sessionno, reactor)
 
+    @classmethod
+    def _fromConnectedSocket(cls, fileDescriptor, factory, reactor):
+        """
+        Create a new L{Server} based on an existing connected I{SOCK_STREAM}
+        socket.
+
+        Arguments are the same as to L{Server.__init__}, except where noted.
+
+        @param fileDescriptor: An integer file descriptor associated with a
+            connected socket.  The socket must be in non-blocking mode.  Any
+            additional attributes desired, such as I{FD_CLOEXEC}, must also be
+            set already.
+
+        @return: A new instance of C{cls} wrapping the socket given by
+            C{fileDescriptor}.
+        """
+        skt = socket.fromfd(fileDescriptor, socket.AF_UNIX, socket.SOCK_STREAM)
+        protocolAddr = address.UNIXAddress(skt.getsockname())
+
+        protocol = factory.buildProtocol(protocolAddr)
+        if protocol is None:
+            skt.close()
+            return
+
+        # FIXME: is this a suitable sessionno?
+        sessionno = 0
+        self = cls(skt, protocol, skt.getpeername(), None, sessionno, reactor)
+        protocol.makeConnection(self)
+        return self
 
     def getHost(self):
         return address.UNIXAddress(self.socket.getsockname())
@@ -258,6 +287,25 @@ class Port(_UNIXPort, tcp.Port):
         self.mode = mode
         self.wantPID = wantPID
 
+    @classmethod
+    def _fromListeningDescriptor(cls, reactor, fd, factory):
+        """
+        Create a new L{Port} based on an existing listening I{SOCK_STREAM}
+        socket.
+
+        Arguments are the same as to L{Port.__init__}, except where noted.
+
+        @param fd: An integer file descriptor associated with a listening
+            socket.  The socket must be in non-blocking mode.  Any additional
+            attributes desired, such as I{FD_CLOEXEC}, must also be set already.
+
+        @return: A new instance of C{cls} wrapping the socket given by C{fd}.
+        """
+        port = socket.fromfd(fd, cls.addressFamily, cls.socketType)
+        self = cls(port.getsockname(), factory)
+        self._preexistingSocket = port
+        return self
+
     def __repr__(self):
         factoryName = reflect.qual(self.factory.__class__)
         if hasattr(self, 'socket'):
@@ -280,7 +328,7 @@ class Port(_UNIXPort, tcp.Port):
         if self.wantPID:
             self.lockFile = lockfile.FilesystemLock(self.port + ".lock")
             if not self.lockFile.lock():
-                raise CannotListenError, (None, self.port, "Cannot acquire lock")
+                raise CannotListenError(None, self.port, "Cannot acquire lock")
             else:
                 if not self.lockFile.clean:
                     try:
@@ -295,11 +343,15 @@ class Port(_UNIXPort, tcp.Port):
                         pass
 
         self.factory.doStart()
+
         try:
-            skt = self.createInternetSocket()
-            skt.bind(self.port)
+            if self._preexistingSocket is not None:
+                skt, self._preexistingSocket = self._preexistingSocket, None
+            else:
+                skt = self.createInternetSocket()
+                skt.bind(self.port)
         except socket.error, le:
-            raise CannotListenError, (None, self.port, le)
+            raise CannotListenError(None, self.port, le)
         else:
             if _inFilesystemNamespace(self.port):
                 # Make the socket readable and writable to the world.
@@ -393,7 +445,7 @@ class DatagramPort(_UNIXPort, udp.Port):
             if self.port:
                 skt.bind(self.port)
         except socket.error, le:
-            raise error.CannotListenError, (None, self.port, le)
+            raise error.CannotListenError(None, self.port, le)
         if self.port and _inFilesystemNamespace(self.port):
             # Make the socket readable and writable to the world.
             os.chmod(self.port, self.mode)
@@ -410,7 +462,7 @@ class DatagramPort(_UNIXPort, udp.Port):
             if no == EINTR:
                 return self.write(datagram, address)
             elif no == EMSGSIZE:
-                raise error.MessageLengthError, "message too long"
+                raise error.MessageLengthError("message too long")
             elif no == EAGAIN:
                 # oh, well, drop the data. The only difference from UDP
                 # is that UDP won't ever notice.
@@ -511,7 +563,7 @@ class ConnectedDatagramPort(DatagramPort):
             if no == EINTR:
                 return self.write(data)
             elif no == EMSGSIZE:
-                raise error.MessageLengthError, "message too long"
+                raise error.MessageLengthError("message too long")
             elif no == ECONNREFUSED:
                 self.protocol.connectionRefused()
             elif no == EAGAIN:
diff --git a/twisted/topfiles/5573.misc b/twisted/topfiles/5573.misc
new file mode 100644
index 0000000..a218cc4
--- /dev/null
+++ b/twisted/topfiles/5573.misc
@@ -0,0 +1,2 @@
+twisted.internet.posixbase.PosixReactorBase.adoptStreamPort now supports UNIX SOCK_STREAM socket types.
+twisted.internet.posixbase.PosixReactorBase.adoptStreamConnection now supports UNIX SOCK_STREAM socket types.
