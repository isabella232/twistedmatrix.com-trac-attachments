diff --git twisted/python/test/test_util.py twisted/python/test/test_util.py
index 5d3547d..70d7476 100644
--- twisted/python/test/test_util.py
+++ twisted/python/test/test_util.py
@@ -861,87 +861,6 @@ def _getDeprecationSuppression(f):
 
 
 
-class UnsignedIDTests(unittest.TestCase):
-    """
-    Tests for L{util.unsignedID} and L{util.setIDFunction}.
-    """
-
-    suppress = [
-        _getDeprecationSuppression(util.unsignedID),
-        _getDeprecationSuppression(util.setIDFunction),
-        ]
-
-    def setUp(self):
-        """
-        Save the value of L{util._idFunction} and arrange for it to be restored
-        after the test runs.
-        """
-        self.addCleanup(setattr, util, '_idFunction', util._idFunction)
-
-
-    def test_setIDFunction(self):
-        """
-        L{util.setIDFunction} returns the last value passed to it.
-        """
-        value = object()
-        previous = util.setIDFunction(value)
-        result = util.setIDFunction(previous)
-        self.assertIdentical(value, result)
-
-
-    def test_setIDFunctionDeprecated(self):
-        """
-        L{util.setIDFunction} is deprecated.
-        """
-        self.callDeprecated(
-            (Version("Twisted", 13, 0, 0)),
-            util.setIDFunction, UnsignedIDTests)
-    test_setIDFunctionDeprecated.suppress = []
-
-
-    def test_unsignedID(self):
-        """
-        L{util.unsignedID} uses the function passed to L{util.setIDFunction} to
-        determine the unique integer id of an object and then adjusts it to be
-        positive if necessary.
-        """
-        foo = object()
-        bar = object()
-
-        # A fake object identity mapping
-        objects = {foo: 17, bar: -73}
-        def fakeId(obj):
-            return objects[obj]
-
-        util.setIDFunction(fakeId)
-
-        self.assertEqual(util.unsignedID(foo), 17)
-        self.assertEqual(util.unsignedID(bar), (sys.maxsize + 1) * 2 - 73)
-
-
-    def test_unsignedIDDeprecated(self):
-        """
-        L{util.unsignedID} is deprecated, use the builtin C{id} instead.
-        """
-        self.callDeprecated(
-            (Version("Twisted", 13, 0, 0), "builtin id"),
-            util.unsignedID, UnsignedIDTests)
-    test_unsignedIDDeprecated.suppress = []
-
-
-    def test_defaultIDFunction(self):
-        """
-        L{util.unsignedID} uses the built in L{id} by default.
-        """
-        obj = object()
-        idValue = id(obj)
-        if idValue < 0:
-            idValue += (sys.maxsize + 1) * 2
-
-        self.assertEqual(util.unsignedID(obj), idValue)
-
-
-
 class InitGroupsTests(unittest.TestCase):
     """
     Tests for L{util.initgroups}.
diff --git twisted/python/util.py twisted/python/util.py
index 3b3a699..5578b9a 100644
--- twisted/python/util.py
+++ twisted/python/util.py
@@ -839,46 +839,11 @@ def untilConcludes(f, *a, **kw):
 
 _idFunction = id
 
-@deprecated(Version("Twisted", 13, 0, 0))
-def setIDFunction(idFunction):
-    """
-    Change the function used by L{unsignedID} to determine the integer id value
-    of an object.  This is largely useful for testing to give L{unsignedID}
-    deterministic, easily-controlled behavior.
-
-    @param idFunction: A function with the signature of L{id}.
-    @return: The previous function being used by L{unsignedID}.
-    """
-    global _idFunction
-    oldIDFunction = _idFunction
-    _idFunction = idFunction
-    return oldIDFunction
-
-
 # A value about twice as large as any Python int, to which negative values
 # from id() will be added, moving them into a range which should begin just
 # above where positive values from id() leave off.
 _HUGEINT = (sys.maxsize + 1) * 2
 
-@deprecated(Version("Twisted", 13, 0, 0), "builtin id")
-def unsignedID(obj):
-    """
-    Return the id of an object as an unsigned number so that its hex
-    representation makes sense.
-
-    This is mostly necessary in Python 2.4 which implements L{id} to sometimes
-    return a negative value.  Python 2.3 shares this behavior, but also
-    implements hex and the %x format specifier to represent negative values as
-    though they were positive ones, obscuring the behavior of L{id}.  Python
-    2.5's implementation of L{id} always returns positive values.
-    """
-    rval = _idFunction(obj)
-    if rval < 0:
-        rval += _HUGEINT
-    return rval
-
-
-
 def mergeFunctionMetadata(f, g):
     """
     Overwrite C{g}'s name and docstring with values from C{f}.  Update
@@ -1071,7 +1036,7 @@ __all__ = [
     "getPassword", "println", "makeStatBar", "OrderedDict",
     "InsensitiveDict", "spewer", "searchupwards", "LineLog",
     "raises", "IntervalDifferential", "FancyStrMixin", "FancyEqMixin",
-    "switchUID", "SubclassableCStringIO", "unsignedID", "mergeFunctionMetadata",
+    "switchUID", "SubclassableCStringIO", "mergeFunctionMetadata",
     "nameToLabel", "uidFromString", "gidFromString", "runAsEffectiveUser",
     "untilConcludes",
     "runWithWarningsSuppressed",
@@ -1079,7 +1044,7 @@ __all__ = [
 
 
 if _PY3:
-    __all3__ = ["FancyEqMixin", "setIDFunction", "unsignedID", "untilConcludes",
+    __all3__ = ["FancyEqMixin", "untilConcludes",
                 "runWithWarningsSuppressed", "FancyStrMixin", "nameToLabel",
                 "InsensitiveDict"]
     for name in __all__[:]:
diff --git twisted/topfiles/6707.removal twisted/topfiles/6707.removal
new file mode 100644
index 0000000..7c2442f
--- /dev/null
+++ twisted/topfiles/6707.removal
@@ -0,0 +1 @@
+unsignedID and setIDFunction was deprecated since 13.0 and were removed.
