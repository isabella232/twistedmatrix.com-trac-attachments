diff --git a/twisted/protocols/tls.py b/twisted/protocols/tls.py
index 0c6261f..c7f1dd7 100644
--- a/twisted/protocols/tls.py
+++ b/twisted/protocols/tls.py
@@ -3,9 +3,10 @@
 # See LICENSE for details.
 
 """
-Implementation of a TLS transport (L{ISSLTransport}) as an L{IProtocol}
-layered on top of any L{ITransport} implementation, based on OpenSSL's
-memory BIO features.
+Implementation of a TLS transport (L{ISSLTransport}) as an
+L{IProtocol<internet.interfaces.IProtocol>} layered on top of any
+L{ITransport<internet.interfaces.ITransport>} implementation, based on
+OpenSSL's memory BIO features.
 
 L{TLSMemoryBIOFactory} is a L{WrappingFactory} which wraps protocols created by
 the factory it wraps with L{TLSMemoryBIOProtocol}.  L{TLSMemoryBIOProtocol}
@@ -27,11 +28,11 @@ implement SSL and TLS.  Typical usage of this module looks like this::
     reactor.listenTCP(12345, tlsFactory)
     reactor.run()
 
-This API offers somewhat more flexibility than L{IReactorSSL}; for example, a
-L{TLSMemoryBIOProtocol} instance can use another instance of
-L{TLSMemoryBIOProtocol} as its transport, yielding TLS over TLS - useful to
-implement onion routing.  It can also be used to run TLS over unusual
-transports, such as UNIX sockets and stdio.
+This API offers somewhat more flexibility than
+L{internet.interfaces.IReactorSSL}; for example, a L{TLSMemoryBIOProtocol}
+instance can use another instance of L{TLSMemoryBIOProtocol} as its transport,
+yielding TLS over TLS - useful to implement onion routing.  It can also be used
+to run TLS over unusual transports, such as UNIX sockets and stdio.
 """
 
 
@@ -218,7 +219,7 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
     wrapper. Non-streaming (pull) producers are supported by wrapping them
     with L{_PullToPush}.
 
-    @ivar _tlsConnection: The L{OpenSSL.SSL.Connection} instance which is
+    @ivar _tlsConnection: The C{OpenSSL.SSL.Connection} instance which is
         encrypted and decrypting this connection.
 
     @ivar _lostTLSConnection: A flag indicating whether connection loss has
@@ -235,21 +236,21 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
 
     @ivar _connectWrapped: A flag indicating whether or not to call
         C{makeConnection} on the wrapped protocol.  This is for the reactor's
-        L{ITLSTransport.startTLS} implementation, since it has a protocol which
-        it has already called C{makeConnection} on, and which has no interest
-        in a new transport.  See #3821.
+        L{internet.interfaces.ITLSTransport.startTLS} implementation, since it
+        has a protocol which it has already called C{makeConnection} on, and
+        which has no interest in a new transport.  See #3821.
 
     @ivar _handshakeDone: A flag indicating whether or not the handshake is
         known to have completed successfully (C{True}) or not (C{False}).  This
         is used to control error reporting behavior.  If the handshake has not
-        completed, the underlying L{OpenSSL.SSL.Error} will be passed to the
+        completed, the underlying C{OpenSSL.SSL.Error} will be passed to the
         application's C{connectionLost} method.  If it has completed, any
-        unexpected L{OpenSSL.SSL.Error} will be turned into a
+        unexpected C{OpenSSL.SSL.Error} will be turned into a
         L{ConnectionLost}.  This is weird; however, it is simply an attempt at
         a faithful re-implementation of the behavior provided by
         L{twisted.internet.ssl}.
 
-    @ivar _reason: If an unexpected L{OpenSSL.SSL.Error} occurs which causes
+    @ivar _reason: If an unexpected C{OpenSSL.SSL.Error} occurs which causes
         the connection to be lost, it is saved here.  If appropriate, this may
         be used as the reason passed to the application protocol's
         C{connectionLost} method.
@@ -273,7 +274,7 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
 
     def getHandle(self):
         """
-        Return the L{OpenSSL.SSL.Connection} object being used to encrypt and
+        Return the C{OpenSSL.SSL.Connection} object being used to encrypt and
         decrypt this connection.
 
         This is done for the benefit of L{twisted.internet.ssl.Certificate}'s
@@ -287,7 +288,7 @@ class TLSMemoryBIOProtocol(ProtocolWrapper):
     def makeConnection(self, transport):
         """
         Connect this wrapper to the given transport and initialize the
-        necessary L{OpenSSL.SSL.Connection} with a memory BIO.
+        necessary C{OpenSSL.SSL.Connection} with a memory BIO.
         """
         tlsContext = self.factory._contextFactory.getContext()
         self._tlsConnection = Connection(tlsContext, None)
