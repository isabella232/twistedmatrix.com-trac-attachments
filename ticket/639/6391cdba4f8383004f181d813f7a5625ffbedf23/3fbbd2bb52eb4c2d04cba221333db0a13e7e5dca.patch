# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130203161632-e221f1cby3810dtt
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: 0acf4b2f0bf06e71d6dfa246d9d043819d31e0d7
# timestamp: 2013-02-03 17:18:25 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:37018
# 
# Begin patch
=== modified file 'twisted/internet/endpoints.py'
--- twisted/internet/endpoints.py	2013-01-01 02:45:04 +0000
+++ twisted/internet/endpoints.py	2013-02-03 15:43:34 +0000
@@ -764,8 +764,13 @@
         certKey = privateKey
     kw = {}
     if sslmethod is not None:
-        kw['sslmethod'] = getattr(ssl.SSL, sslmethod)
-    cf = ssl.DefaultOpenSSLContextFactory(privateKey, certKey, **kw)
+        kw['method'] = getattr(ssl.SSL, sslmethod)
+    certPEM = FilePath(certKey).getContent()
+    keyPEM = FilePath(privateKey).getContent()
+    cf = ssl.CertificateOptions(
+        privateKey=ssl.PrivateCertificate.loadPEM(
+            keyPEM + certPEM).privateKey.original,
+        certificate=ssl.Certificate.loadPEM(certPEM).original, **kw)
     return ((int(port), factory, cf),
             {'interface': interface, 'backlog': int(backlog)})
 

=== modified file 'twisted/internet/test/test_endpoints.py'
--- twisted/internet/test/test_endpoints.py	2013-01-01 02:45:04 +0000
+++ twisted/internet/test/test_endpoints.py	2013-02-03 16:16:32 +0000
@@ -47,7 +47,7 @@
     from twisted.test.test_sslverify import makeCertificate
     from twisted.internet.ssl import CertificateOptions, Certificate, \
         KeyPair, PrivateCertificate
-    from OpenSSL.SSL import ContextType
+    from OpenSSL.SSL import ContextType, SSLv3_METHOD, TLSv1_METHOD
     testCertificate = Certificate.loadPEM(pemPath.getContent())
     testPrivateCertificate = PrivateCertificate.loadPEM(pemPath.getContent())
 
@@ -1394,18 +1394,37 @@
         server = endpoints.serverFromString(
             reactor,
             "ssl:1234:backlog=12:privateKey=%s:"
-            "certKey=%s:interface=10.0.0.1" % (escapedPEMPathName,
-                                               escapedPEMPathName))
+            "certKey=%s:sslmethod=SSLv3_METHOD:interface=10.0.0.1"
+            % (escapedPEMPathName, escapedPEMPathName))
         self.assertIsInstance(server, endpoints.SSL4ServerEndpoint)
         self.assertIdentical(server._reactor, reactor)
         self.assertEqual(server._port, 1234)
         self.assertEqual(server._backlog, 12)
         self.assertEqual(server._interface, "10.0.0.1")
+        self.assertEqual(server._sslContextFactory.method, SSLv3_METHOD)
+        ctx = server._sslContextFactory.getContext()
+        self.assertIsInstance(ctx, ContextType)
+
+
+    def test_sslWithDefaults(self):
+        """
+        An SSL strport description with minimal arguments returns a properly
+        initialized L{SSL4ServerEndpoint} instance.
+        """
+        reactor = object()
+        server = endpoints.serverFromString(
+            reactor, "ssl:4321:privateKey=%s" % (escapedPEMPathName,))
+        self.assertIsInstance(server, endpoints.SSL4ServerEndpoint)
+        self.assertIdentical(server._reactor, reactor)
+        self.assertEqual(server._port, 4321)
+        self.assertEqual(server._backlog, 50)
+        self.assertEqual(server._interface, "")
+        self.assertEqual(server._sslContextFactory.method, TLSv1_METHOD)
         ctx = server._sslContextFactory.getContext()
         self.assertIsInstance(ctx, ContextType)
 
     if skipSSL:
-        test_ssl.skip = skipSSL
+        test_ssl.skip = test_sslWithDefaults = skipSSL
 
 
     def test_unix(self):

# Begin bundle
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
Dl5zodeZFsfD/i7kinChISLvEng=
