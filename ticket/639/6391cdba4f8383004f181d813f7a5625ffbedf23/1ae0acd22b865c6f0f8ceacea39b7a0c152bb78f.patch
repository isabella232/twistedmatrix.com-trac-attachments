# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130302202304-xlg5bbn2zgvidpxd
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: 4fa2f3dd51709af3f56208e5aae5fc19f1d85c43
# timestamp: 2013-03-02 21:23:37 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:37359
# 
# Begin patch
=== modified file 'twisted/internet/endpoints.py'
--- twisted/internet/endpoints.py	2013-02-25 17:10:21 +0000
+++ twisted/internet/endpoints.py	2013-03-02 17:49:36 +0000
@@ -764,8 +764,15 @@
         certKey = privateKey
     kw = {}
     if sslmethod is not None:
-        kw['sslmethod'] = getattr(ssl.SSL, sslmethod)
-    cf = ssl.DefaultOpenSSLContextFactory(privateKey, certKey, **kw)
+        kw['method'] = getattr(ssl.SSL, sslmethod)
+    else:
+        kw['method'] = ssl.SSL.SSLv23_METHOD
+    certPEM = FilePath(certKey).getContent()
+    keyPEM = FilePath(privateKey).getContent()
+    cf = ssl.CertificateOptions(
+        privateKey=ssl.PrivateCertificate.loadPEM(
+            keyPEM + certPEM).privateKey.original,
+        certificate=ssl.Certificate.loadPEM(certPEM).original, **kw)
     return ((int(port), factory, cf),
             {'interface': interface, 'backlog': int(backlog)})
 

=== modified file 'twisted/internet/test/test_endpoints.py'
--- twisted/internet/test/test_endpoints.py	2013-01-01 02:45:04 +0000
+++ twisted/internet/test/test_endpoints.py	2013-03-02 20:23:04 +0000
@@ -47,7 +47,7 @@
     from twisted.test.test_sslverify import makeCertificate
     from twisted.internet.ssl import CertificateOptions, Certificate, \
         KeyPair, PrivateCertificate
-    from OpenSSL.SSL import ContextType
+    from OpenSSL.SSL import ContextType, SSLv23_METHOD, TLSv1_METHOD
     testCertificate = Certificate.loadPEM(pemPath.getContent())
     testPrivateCertificate = PrivateCertificate.loadPEM(pemPath.getContent())
 
@@ -1394,18 +1394,37 @@
         server = endpoints.serverFromString(
             reactor,
             "ssl:1234:backlog=12:privateKey=%s:"
-            "certKey=%s:interface=10.0.0.1" % (escapedPEMPathName,
-                                               escapedPEMPathName))
+            "certKey=%s:sslmethod=TLSv1_METHOD:interface=10.0.0.1"
+            % (escapedPEMPathName, escapedPEMPathName))
         self.assertIsInstance(server, endpoints.SSL4ServerEndpoint)
         self.assertIdentical(server._reactor, reactor)
         self.assertEqual(server._port, 1234)
         self.assertEqual(server._backlog, 12)
         self.assertEqual(server._interface, "10.0.0.1")
+        self.assertEqual(server._sslContextFactory.method, TLSv1_METHOD)
+        ctx = server._sslContextFactory.getContext()
+        self.assertIsInstance(ctx, ContextType)
+
+
+    def test_sslWithDefaults(self):
+        """
+        An SSL strport description with minimal arguments returns a properly
+        initialized L{SSL4ServerEndpoint} instance.
+        """
+        reactor = object()
+        server = endpoints.serverFromString(
+            reactor, "ssl:4321:privateKey=%s" % (escapedPEMPathName,))
+        self.assertIsInstance(server, endpoints.SSL4ServerEndpoint)
+        self.assertIdentical(server._reactor, reactor)
+        self.assertEqual(server._port, 4321)
+        self.assertEqual(server._backlog, 50)
+        self.assertEqual(server._interface, "")
+        self.assertEqual(server._sslContextFactory.method, SSLv23_METHOD)
         ctx = server._sslContextFactory.getContext()
         self.assertIsInstance(ctx, ContextType)
 
     if skipSSL:
-        test_ssl.skip = skipSSL
+        test_ssl.skip = test_sslWithDefaults.skip = skipSSL
 
 
     def test_unix(self):

# Begin bundle
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
hwRkPe/08mK/kNXbl/4u5IpwoSBqxS0E
