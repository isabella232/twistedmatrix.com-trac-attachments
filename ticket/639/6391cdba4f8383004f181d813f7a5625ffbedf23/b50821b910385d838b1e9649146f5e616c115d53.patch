# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: hs@ox.cx-20130302174936-1fv7lhb1ao8ruows
# target_branch: file:///Users/hynek/Projects/Twisted/trunk/
# testament_sha1: 0c513a4a69c4d230efdefd5315c9340fe4c13d90
# timestamp: 2013-03-02 18:50:36 +0100
# base_revision_id: svn-v4:bbbe8e31-12d6-0310-92fd-\
#   ac37d47ddeeb:trunk:37359
# 
# Begin patch
=== modified file 'twisted/internet/endpoints.py'
--- twisted/internet/endpoints.py	2013-02-25 17:10:21 +0000
+++ twisted/internet/endpoints.py	2013-03-02 17:49:36 +0000
@@ -764,8 +764,15 @@
         certKey = privateKey
     kw = {}
     if sslmethod is not None:
-        kw['sslmethod'] = getattr(ssl.SSL, sslmethod)
-    cf = ssl.DefaultOpenSSLContextFactory(privateKey, certKey, **kw)
+        kw['method'] = getattr(ssl.SSL, sslmethod)
+    else:
+        kw['method'] = ssl.SSL.SSLv23_METHOD
+    certPEM = FilePath(certKey).getContent()
+    keyPEM = FilePath(privateKey).getContent()
+    cf = ssl.CertificateOptions(
+        privateKey=ssl.PrivateCertificate.loadPEM(
+            keyPEM + certPEM).privateKey.original,
+        certificate=ssl.Certificate.loadPEM(certPEM).original, **kw)
     return ((int(port), factory, cf),
             {'interface': interface, 'backlog': int(backlog)})
 

=== modified file 'twisted/internet/test/test_endpoints.py'
--- twisted/internet/test/test_endpoints.py	2013-01-01 02:45:04 +0000
+++ twisted/internet/test/test_endpoints.py	2013-03-02 17:49:36 +0000
@@ -47,7 +47,7 @@
     from twisted.test.test_sslverify import makeCertificate
     from twisted.internet.ssl import CertificateOptions, Certificate, \
         KeyPair, PrivateCertificate
-    from OpenSSL.SSL import ContextType
+    from OpenSSL.SSL import ContextType, SSLv23_METHOD, TLSv1_METHOD
     testCertificate = Certificate.loadPEM(pemPath.getContent())
     testPrivateCertificate = PrivateCertificate.loadPEM(pemPath.getContent())
 
@@ -1394,18 +1394,37 @@
         server = endpoints.serverFromString(
             reactor,
             "ssl:1234:backlog=12:privateKey=%s:"
-            "certKey=%s:interface=10.0.0.1" % (escapedPEMPathName,
-                                               escapedPEMPathName))
+            "certKey=%s:sslmethod=TLSv1_METHOD:interface=10.0.0.1"
+            % (escapedPEMPathName, escapedPEMPathName))
         self.assertIsInstance(server, endpoints.SSL4ServerEndpoint)
         self.assertIdentical(server._reactor, reactor)
         self.assertEqual(server._port, 1234)
         self.assertEqual(server._backlog, 12)
         self.assertEqual(server._interface, "10.0.0.1")
+        self.assertEqual(server._sslContextFactory.method, TLSv1_METHOD)
+        ctx = server._sslContextFactory.getContext()
+        self.assertIsInstance(ctx, ContextType)
+
+
+    def test_sslWithDefaults(self):
+        """
+        An SSL strport description with minimal arguments returns a properly
+        initialized L{SSL4ServerEndpoint} instance.
+        """
+        reactor = object()
+        server = endpoints.serverFromString(
+            reactor, "ssl:4321:privateKey=%s" % (escapedPEMPathName,))
+        self.assertIsInstance(server, endpoints.SSL4ServerEndpoint)
+        self.assertIdentical(server._reactor, reactor)
+        self.assertEqual(server._port, 4321)
+        self.assertEqual(server._backlog, 50)
+        self.assertEqual(server._interface, "")
+        self.assertEqual(server._sslContextFactory.method, SSLv23_METHOD)
         ctx = server._sslContextFactory.getContext()
         self.assertIsInstance(ctx, ContextType)
 
     if skipSSL:
-        test_ssl.skip = skipSSL
+        test_ssl.skip = test_sslWithDefaults = skipSSL
 
 
     def test_unix(self):

# Begin bundle
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
QpaAwLJGYP8XckU4UJAa0L+l
