=== modified file 'doc/names/examples/dns-service.py'
--- doc/names/examples/dns-service.py	2013-01-28 19:28:43 +0000
+++ doc/names/examples/dns-service.py	2013-02-21 17:16:10 +0000
@@ -4,7 +4,7 @@
 # See LICENSE for details.
 
 """
-USAGE: python dns-service.py SERVICE PROTO DOMAINNAME
+Usage: dns-service.py SERVICE PROTO DOMAINNAME
 
 Print the SRV records for a given DOMAINNAME eg
 
@@ -21,6 +21,7 @@
 
 from twisted.names import client, error
 from twisted.internet.task import react
+from twisted.python import usage
 
 
 def printResult(records, domainname):
@@ -48,17 +49,28 @@
     sys.stderr.write('ERROR: domain name not found %r\n' % (domainname,))
 
 
+class Options(usage.Options):
+    synopsis = __doc__.strip()
+    longdesc = ''
+
+    def parseArgs(self, service, proto, domainname):
+        self['service'] = service
+        self['proto'] = proto
+        self['domainname'] = domainname
+
+
 def main(reactor, *argv):
+    options = Options()
     try:
-        service, proto, domainname = sys.argv[1:]
-    except ValueError:
+        options.parseOptions(argv)
+    except usage.UsageError as errortext:
         sys.stderr.write(
-            __doc__.lstrip() + '\n'
-            'ERROR: incorrect command line arguments\n')
+            __doc__.lstrip() + '\n')
+        sys.stderr.write('ERROR: %s\n' % (errortext,))
         raise SystemExit(1)
 
     resolver = client.Resolver('/etc/resolv.conf')
-    domainname = '_%s._%s.%s' % (service, proto, domainname)
+    domainname = '_%(service)s._%(proto)s.%(domainname)s' % options
     d = resolver.lookupService(domainname)
     d.addCallback(printResult, domainname)
     d.addErrback(printError, domainname)

=== modified file 'doc/names/examples/gethostbyname.py'
--- doc/names/examples/gethostbyname.py	2012-12-29 21:34:24 +0000
+++ doc/names/examples/gethostbyname.py	2013-02-21 17:13:51 +0000
@@ -4,7 +4,7 @@
 # See LICENSE for details.
 
 """
-USAGE: python gethostbyname.py HOSTNAME
+Usage: gethostbyname.py HOSTNAME
 
 Print the IP address for a given hostname. eg
 
@@ -20,6 +20,7 @@
 
 from twisted.names import client, error
 from twisted.internet.task import react
+from twisted.python import usage
 
 
 def printResult(address, hostname):
@@ -43,15 +44,25 @@
     sys.stderr.write('ERROR: hostname not found %r\n' % (hostname,))
 
 
+class Options(usage.Options):
+    synopsis = __doc__.strip()
+    longdesc = ''
+
+    def parseArgs(self, hostname):
+        self['hostname'] = hostname
+
+
 def main(reactor, *argv):
+    options = Options()
     try:
-        hostname = argv[0]
-    except IndexError:
+        options.parseOptions(argv)
+    except usage.UsageError as errortext:
         sys.stderr.write(
-            __doc__.lstrip() + '\n'
-            'ERROR: missing HOSTNAME argument\n')
+            __doc__.lstrip() + '\n')
+        sys.stderr.write('ERROR: %s\n' % (errortext,))
         raise SystemExit(1)
 
+    hostname = options['hostname']
     d = client.getHostByName(hostname)
     d.addCallback(printResult, hostname)
     d.addErrback(printError, hostname)

=== modified file 'doc/names/examples/testdns.py'
--- doc/names/examples/testdns.py	2013-01-28 19:28:43 +0000
+++ doc/names/examples/testdns.py	2013-02-21 17:16:22 +0000
@@ -4,7 +4,7 @@
 # See LICENSE for details.
 
 """
-USAGE: python testdns.py DOMAINNAME
+Usage: testdns.py DOMAINNAME
 
 Print the Address records, Mail-Exchanger records and the Nameserver
 records for the given domain name. eg
@@ -16,6 +16,7 @@
 from twisted.internet import defer
 from twisted.internet.task import react
 from twisted.names import client, dns, error
+from twisted.python import usage
 
 
 def formatRecords(records, heading):
@@ -54,15 +55,25 @@
     sys.stderr.write('ERROR: domain name not found %r\n' % (domainname,))
 
 
+class Options(usage.Options):
+    synopsis = __doc__.strip()
+    longdesc = ''
+
+    def parseArgs(self, domainname):
+        self['domainname'] = domainname
+
+
 def main(reactor, *argv):
+    options = Options()
     try:
-        domainname = argv[0]
-    except IndexError:
+        options.parseOptions(argv)
+    except usage.UsageError as errortext:
         sys.stderr.write(
-            __doc__.lstrip() + '\n'
-            'ERROR: missing DOMAINNAME argument\n')
+            __doc__.lstrip() + '\n')
+        sys.stderr.write('ERROR: %s\n' % (errortext,))
         raise SystemExit(1)
 
+    domainname = options['domainname']
     r = client.Resolver('/etc/resolv.conf')
     d = defer.gatherResults([
             r.lookupAddress(domainname).addCallback(

=== modified file 'twisted/names/test/test_examples.py'
--- twisted/names/test/test_examples.py	2013-02-12 21:55:25 +0000
+++ twisted/names/test/test_examples.py	2013-02-21 17:17:06 +0000
@@ -28,8 +28,6 @@
     features are added to it, and we want to test each one.
     """
 
-    examplePath = None
-
     def setUp(self):
         """
         Add our example directory to the path and record which modules are
@@ -37,19 +35,29 @@
         """
         self.fakeErr = StringIO()
         self.originalErr, sys.stderr = sys.stderr, self.fakeErr
+        self.fakeOut = StringIO()
+        self.originalOut, sys.stdout = sys.stdout, self.fakeOut
+
         self.originalPath = sys.path[:]
         self.originalModules = sys.modules.copy()
+
+        # Get branch root
         here = FilePath(__file__).parent().parent().parent().parent()
-        for childName in self.examplePath:
+
+        # Find the example script within this branch
+        for childName in self.exampleRelativePath.split('/'):
             here = here.child(childName)
-        if not here.exists():
-            raise SkipTest(
-                "Examples (%s) not found - cannot test" % (here.path,))
-        sys.path.append(here.parent().path)
+            if not here.exists():
+                raise SkipTest(
+                    "Examples (%s) not found - cannot test" % (here.path,))
+        self.examplePath = here
+
+        # Add the example parent folder to the Python path
+        sys.path.append(self.examplePath.parent().path)
+
         # Import the example as a module
-        moduleName = here.basename().split('.')[0]
+        moduleName = self.examplePath.basename().split('.')[0]
         self.example = __import__(moduleName)
-        self.examplePath = here
 
 
     def tearDown(self):
@@ -74,8 +82,28 @@
 
     def test_usageConsistency(self):
         """
+        The example script prints a usage message to stdout if it is
+        passed a --help option and then exits.
+
+        The first line should contain a USAGE summary, explaining the
+        accepted command arguments.
+        """
+        # Pass None as first parameter - the reactor - it shouldn't
+        # get as far as calling it.
+        self.assertRaises(
+            SystemExit, self.example.main, None, '--help')
+
+        out = self.fakeOut.getvalue().splitlines()
+        self.assertTrue(
+            out[0].startswith('Usage:'),
+            'Usage message first line should start with "Usage:". '
+            'Actual: %r' % (out[0],))
+
+
+    def test_usageConsistencyOnError(self):
+        """
         The example script prints a usage message to stderr if it is
-        passed unrecognised command line arguments.
+        passed unrecognized command line arguments.
 
         The first line should contain a USAGE summary, explaining the
         accepted command arguments.
@@ -83,11 +111,15 @@
         The last line should contain an ERROR summary, explaining that
         incorrect arguments were supplied.
         """
-        self.assertRaises(SystemExit, self.example.main, None)
+        # Pass None as first parameter - the reactor - it shouldn't
+        # get as far as calling it.
+        self.assertRaises(
+            SystemExit, self.example.main, None, '--unexpected_argument')
+
         err = self.fakeErr.getvalue().splitlines()
         self.assertTrue(
-            err[0].startswith('USAGE:'),
-            'Usage message first line should start with "USAGE:". '
+            err[0].startswith('Usage:'),
+            'Usage message first line should start with "Usage:". '
             'Actual: %r' % (err[0],))
         self.assertTrue(
             err[-1].startswith('ERROR:'),
@@ -101,7 +133,7 @@
     Test the testdns.py example script.
     """
 
-    examplePath = 'doc/names/examples/testdns.py'.split('/')
+    exampleRelativePath = 'doc/names/examples/testdns.py'
 
 
 class GetHostByNameTests(ExampleTestBase, TestCase):
@@ -109,7 +141,7 @@
     Test the gethostbyname.py example script.
     """
 
-    examplePath = 'doc/names/examples/gethostbyname.py'.split('/')
+    exampleRelativePath = 'doc/names/examples/gethostbyname.py'
 
 
 class DnsServiceTests(ExampleTestBase, TestCase):
@@ -117,4 +149,4 @@
     Test the dns-service.py example script.
     """
 
-    examplePath = 'doc/names/examples/dns-service.py'.split('/')
+    exampleRelativePath = 'doc/names/examples/dns-service.py'

