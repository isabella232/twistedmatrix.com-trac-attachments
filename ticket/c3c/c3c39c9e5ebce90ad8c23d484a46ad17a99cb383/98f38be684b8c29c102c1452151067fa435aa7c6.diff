diff --git a/twisted/internet/posixbase.py b/twisted/internet/posixbase.py
index 92ec6d2..486068d 100644
--- a/twisted/internet/posixbase.py
+++ b/twisted/internet/posixbase.py
@@ -87,7 +87,14 @@ class _SocketWaker(log.Logger):
         reader.setblocking(0)
         self.r = reader
         self.w = client
-        self.fileno = self.r.fileno
+
+
+    def fileno(self):
+        """
+        Returns the fileno for the read socket.
+        """
+        return self.r.fileno()
+
 
     def wakeUp(self):
         """Send a byte to my connection.
@@ -140,7 +147,13 @@ class _FDWaker(log.Logger, object):
         fdesc._setCloseOnExec(self.i)
         fdesc.setNonBlocking(self.o)
         fdesc._setCloseOnExec(self.o)
-        self.fileno = lambda: self.i
+
+
+    def fileno(self):
+        """
+        Returns the fileno for the input side of our pipe.
+        """
+        return self.i
 
 
     def doRead(self):
diff --git a/twisted/internet/tcp.py b/twisted/internet/tcp.py
index 24931d5..9892f90 100644
--- a/twisted/internet/tcp.py
+++ b/twisted/internet/tcp.py
@@ -187,7 +187,6 @@ class Connection(_TLSConnectionMixin, abstract.FileDescriptor, _SocketCloser,
         abstract.FileDescriptor.__init__(self, reactor=reactor)
         self.socket = skt
         self.socket.setblocking(0)
-        self.fileno = skt.fileno
         self.protocol = protocol
 
 
@@ -196,6 +195,13 @@ class Connection(_TLSConnectionMixin, abstract.FileDescriptor, _SocketCloser,
         return self.socket
 
 
+    def fileno(self):
+        """
+        Return the fileno for this connection.
+        """
+        return self.socket.fileno()
+
+
     def doRead(self):
         """Calls self.protocol.dataReceived with all available data.
 
@@ -295,7 +301,6 @@ class Connection(_TLSConnectionMixin, abstract.FileDescriptor, _SocketCloser,
         protocol = self.protocol
         del self.protocol
         del self.socket
-        del self.fileno
         protocol.connectionLost(reason)
 
 
@@ -526,7 +531,7 @@ class BaseClient(_BaseBaseClient, _TLSClientMixin, Connection):
 
         @see: L{_BaseBaseClient}
         """
-        del self.socket, self.fileno
+        del self.socket
 
 
     def createInternetSocket(self):
@@ -998,12 +1003,18 @@ class Port(base.BasePort, _SocketCloser):
         self.factory.doStart()
         self.connected = True
         self.socket = skt
-        self.fileno = self.socket.fileno
         self.numberAccepts = 100
 
         self.startReading()
 
 
+    def fileno(self):
+        """
+        Returns the fileno for this listening socket.
+        """
+        return self.socket.fileno()
+
+
     def _buildAddr(self, address):
         host, port = address[:2]
         return self._addressType('TCP', host, port)
@@ -1115,7 +1126,6 @@ class Port(base.BasePort, _SocketCloser):
         self.connected = False
         self._closeSocket(True)
         del self.socket
-        del self.fileno
 
         try:
             self.factory.doStop()
diff --git a/twisted/internet/udp.py b/twisted/internet/udp.py
index 9dc55df..6005f6e 100644
--- a/twisted/internet/udp.py
+++ b/twisted/internet/udp.py
@@ -203,7 +203,13 @@ class Port(base.BasePort):
 
         self.connected = 1
         self.socket = skt
-        self.fileno = self.socket.fileno
+
+
+    def fileno(self):
+        """
+        Returns the fileno for the listening socket.
+        """
+        return self.socket.fileno()
 
 
     def _connectToProtocol(self):
@@ -324,7 +330,6 @@ class Port(base.BasePort):
         self.protocol.doStop()
         self.socket.close()
         del self.socket
-        del self.fileno
         if hasattr(self, "d"):
             self.d.callback(None)
             del self.d
diff --git a/twisted/internet/unix.py b/twisted/internet/unix.py
index 77b87cd..73844c1 100644
--- a/twisted/internet/unix.py
+++ b/twisted/internet/unix.py
@@ -298,11 +298,17 @@ class Port(_UNIXPort, tcp.Port):
             skt.listen(self.backlog)
             self.connected = True
             self.socket = skt
-            self.fileno = self.socket.fileno
             self.numberAccepts = 100
             self.startReading()
 
 
+    def fileno(self):
+        """
+        Returns the fileno for this listening socket.
+        """
+        return self.socket.fileno()
+
+
     def _logConnectionLostMsg(self):
         """
         Log message for closing socket
@@ -390,7 +396,14 @@ class DatagramPort(_UNIXPort, udp.Port):
             os.chmod(self.port, self.mode)
         self.connected = 1
         self.socket = skt
-        self.fileno = self.socket.fileno
+
+
+    def fileno(self):
+        """
+        Returns the fileno for this listening socket.
+        """
+        return self.socket.fileno()
+
 
     def write(self, datagram, address):
         """Write a datagram."""
@@ -422,7 +435,6 @@ class DatagramPort(_UNIXPort, udp.Port):
         self.connected = 0
         self.socket.close()
         del self.socket
-        del self.fileno
         if hasattr(self, "d"):
             self.d.callback(None)
             del self.d
