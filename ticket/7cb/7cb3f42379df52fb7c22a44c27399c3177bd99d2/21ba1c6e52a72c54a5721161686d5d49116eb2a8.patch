Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 14237)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -65,7 +65,7 @@
         [u'Hello & world', 'Hello &- world'],
         [u'Hello\xffworld', 'Hello&AP8-world'],
         [u'\xff\xfe\xfd\xfc', '&AP8A,gD9APw-'],
-        [u'~peter/mail/\u65e5\u672c\u8a9e/\u53f0\u5317', 
+        [u'~peter/mail/\u65e5\u672c\u8a9e/\u53f0\u5317',
          '~peter/mail/&ZeVnLIqe-/&U,BTFw-'], # example from RFC 2060
     ]
 
@@ -1611,6 +1611,50 @@
         c.dataReceived('0003 OK FETCH\r\n')
         self.failUnless(unittest.deferredResult(d))
 
+    def testUnsolicitedResponseMixedWithSolicitedResponse(self):
+
+        class StillSimplerClient(imap4.IMAP4Client):
+            events = []
+            def flagsChanged(self, newFlags):
+                self.events.append(['flagsChanged', newFlags])
+
+        transport = StringTransport()
+        c = StillSimplerClient()
+        c.makeConnection(transport)
+        c.lineReceived('* OK [IMAP4rev1]')
+
+        d = c.login('blah', 'blah')
+        c.dataReceived('0001 OK LOGIN\r\n')
+        self.failUnless(unittest.deferredResult(d))
+
+        d = c.select('inbox')
+        c.lineReceived('0002 OK SELECT')
+        self.failUnless(unittest.deferredResult(d))
+
+        d = c.fetchSpecific('1:*',
+            headerType='HEADER.FIELDS',
+            headerArgs=['SUBJECT'])
+
+        c.dataReceived('* 1 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {38}\r\n')
+        c.dataReceived('Subject: Suprise for your woman...\r\n')
+        c.dataReceived('\r\n')
+        c.dataReceived(')\r\n')
+        c.dataReceived('* 1 FETCH (FLAGS (\Seen))\r\n')
+        c.dataReceived('* 2 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {75}\r\n')
+        c.dataReceived('Subject: What you been doing. Order your meds here . ,. handcuff madsen\r\n')
+        c.dataReceived('\r\n')
+        c.dataReceived(')\r\n')
+        c.dataReceived('0003 OK FETCH completed\r\n')
+
+        self.assertEquals(unittest.deferredResult(d), {
+            1: [['BODY', ['HEADER.FIELDS', ['SUBJECT']],
+                'Subject: Suprise for your woman...\r\n\r\n']],
+            2: [['BODY', ['HEADER.FIELDS', ['SUBJECT']],
+                'Subject: What you been doing. Order your meds here . ,. handcuff madsen\r\n\r\n']]
+        })
+
+        self.assertEquals(c.events, [['flagsChanged', {1: ['\\Seen']}]])
+
     def testPathelogicalScatteringOfLiterals(self):
         transport = StringTransport()
         c = imap4.IMAP4Server()
@@ -1867,7 +1911,7 @@
 
     def testFetchBodyStructureUID(self):
         self.testFetchBodyStructure(1)
-    
+
     def testFetchSimplifiedBody(self, uid=0):
         self.function = self.client.fetchSimplifiedBody
         self.messages = '21'
@@ -2338,7 +2382,7 @@
         self.loopback()
         self.failUnless(failure)
         self.assertIdentical(failure[0], imap4.IMAP4Exception)
-        
+
 class SlowMailbox(SimpleMailbox):
     howSlow = 2
 
