--- client.py	2005-06-08 18:34:36.000000000 -0400
+++ client-new.py	2005-06-09 10:55:49.428655480 -0400
@@ -6,13 +6,32 @@
 
 from twisted.xish import domish, xpath, utility, xmlstream
 
+import random, time, os, md5, binascii
+
+try:
+    from OpenSSL import SSL
+except ImportError:
+    SSL = None
+
 DigestAuthQry = xpath.internQuery("/iq/query/digest")
 PlaintextAuthQry = xpath.internQuery("/iq/query/password")
 
+TLS_XMLNS = 'urn:ietf:params:xml:ns:xmpp-tls'
+SASL_XMLNS = 'urn:ietf:params:xml:ns:xmpp-sasl'
+BIND_XMLNS = 'urn:ietf:params:xml:ns:xmpp-bind'
+SESSION_XMLNS = 'urn:ietf:params:xml:ns:xmpp-session'
+STREAMS_XMLNS  = 'urn:ietf:params:xml:ns:xmpp-streams'
+
 def basicClientFactory(jid, secret):
     a = BasicAuthenticator(jid, secret)
     return xmlstream.XmlStreamFactory(a)
 
+def jabberClientFactory(jid, secret):
+    a = XMPPAuthenticator(jid, secret)
+    return xmlstream.XmlStreamFactory(a)
+
+
+
 class IQ(domish.Element):
     """ Wrapper for a Info/Query packet
 
@@ -98,7 +117,8 @@
         xmlstream.ConnectAuthenticator.__init__(self, jid.host)
         self.jid = jid
         self.password = password
-
+        
+        
     def streamStarted(self, rootelem):
         # Send request for auth fields
         iq = IQ(self.xmlstream, "get")
@@ -161,4 +181,358 @@
         else:
             # Registration failed
             self.xmlstream.dispatch(iq, self.REGISTER_FAILED_EVENT)
+
+class XMPPAuthenticator(xmlstream.ConnectAuthenticator):
+    """ Authenticates an XmlStream against an XMPP server as a Client
+
+    This implements the XMPP protocol and non-SASL authentication,
+    U{JEP-0078<http://www.jabber.org/jeps/jep-0078.html>}. Additionally, this
+    authenticator provides the ability to perform inline registration, per
+    U{JEP-0077<http://www.jabber.org/jeps/jep-0077.html>}.
+
+    Under normal circumstances, the XMPPAuthenticator generates the
+    L{xmlstream.STREAM_AUTHD_EVENT} once the stream has authenticated. However,
+    it can also generate other events, such as:
+      - L{INVALID_USER_EVENT} : Authentication failed, due to invalid username
+      - L{AUTH_FAILED_EVENT} : Authentication failed, due to invalid password
+      - L{REGISTER_FAILED_EVENT} : Registration failed
+
+    If authentication fails for any reason, you can attempt to register by
+    calling the L{registerAccount} method. If the registration succeeds, a
+    L{xmlstream.STREAM_AUTHD_EVENT} will be fired. Otherwise, one of the above
+    errors will be generated (again).
+    
+    """
+    namespace = "jabber:client"
+    version   = '1.0'
+    
+    INVALID_USER_EVENT    = "//event/client/basicauth/invaliduser"
+    AUTH_FAILED_EVENT     = "//event/client/basicauth/authfailed"
+    REGISTER_FAILED_EVENT = "//event/client/basicauth/registerfailed"
+
+
+    def __init__(self, jid, password):
+        xmlstream.ConnectAuthenticator.__init__(self, jid.host)
+        self.jid = jid
+        self.password = password
+        self.success  = 0
+        self.tls      = 0
+        
+    def streamStarted(self, rootelem):
+        if self.version != 0.0 and rootelem.hasAttribute('version'):
+            major,minor   = self.version.split('.')
+            smajor,sminor = self.xmlstream.version.split('.')
+            if int(smajor) >= int(major):
+                # observe the features
+                self.xmlstream.addOnetimeObserver("/features",self._featureParse)
+            elif int(smajor) < int(major):
+                self.sendError('unsupported-version')
+                
+        else:
+            # Send request for auth fields
+            iq = IQ(self.xmlstream, "get")
+            iq.addElement(("jabber:iq:auth", "query"))
+            iq.query.addElement("username", content = self.jid.user)
+            iq.addCallback(self._authQueryResultEvent)
+            iq.send()
+
+    def sendError(self, error, text = None):
+        # TODO - make this an domish element?
+        sh = "<stream:error>"
+        # TODO - check for valid error types
+        sh = sh + "<%s xmlns='%s' />" % (error, STREAMS_XMLNS)
+        if text:
+            sh = sh + "<text>"+text+"</text>"
+        sh = sh + "</stream:error>"    
+        self.xmlstream.send(sh)
+        
+
+    def _featureParse(self, f):
+        self.bind    = 0
+        self.session = 0
+        # TODO - check for tls
+        if self.success == 1:
+            for f in f.elements():
+                if f.name == "bind":
+                    self.bind = 1
+                if f.name == "session":
+                    self.session = 1
+                    
+            if self.bind == 1:
+                iq = IQ(self.xmlstream, "set")
+                iq.addElement((BIND_XMLNS, "bind"))
+                
+                iq.bind.addElement("resource", content = self.jid.resource)
+                iq.addCallback(self._bindResultEvent)
+                iq.send()
+                
+        else:
+            if f.starttls:
+                if SSL:
+                    # look for required
+                    starttls = domish.Element((TLS_XMLNS,"starttls"),TLS_XMLNS)
+                    # why?
+                    starttls['xmlns'] = TLS_XMLNS
+                    self.xmlstream.addOnetimeObserver("/proceed",self._proceed)
+                    self.xmlstream.addOnetimeObserver("/failue",self._tlsError)
+                    self.xmlstream.send(starttls)
+                else:
+                    self.xmlstream.dispatch(f, self.AUTH_FAILED_EVENT)
+            else:
+                # Look for SASL
+                m = f.mechanisms
+                
+                if m.uri == SASL_XMLNS:
+                    ms = 'DIGEST-MD5'
+                    for mech in m.elements():
+                        ms = str(mech)
+                        if ms == 'DIGEST-MD5':
+                            break
+                        if ms == 'PLAIN':
+                            break
+                    auth = domish.Element((SASL_XMLNS,"auth"),SASL_XMLNS,{'mechanism' : ms})
+                    # why?
+                    auth['xmlns'] = SASL_XMLNS
+                    # auth['mechanism'] = ms
+                    if ms == 'DIGEST-MD5':
+                        self.xmlstream.addOnetimeObserver("/challenge",self._saslStep1)
+                    if ms == 'PLAIN':
+                        # TODO add authzid
+                        auth_str = ""
+                        auth_str = auth_str + "\000"
+                        auth_str = auth_str + self.jid.user.encode('utf-8')
+                        auth_str = auth_str + "\000"
+                        auth_str = auth_str + self.password.encode('utf-8')
+                        auth.addContent(binascii.b2a_base64(auth_str))
+                        self.xmlstream.addOnetimeObserver("/success",self._saslSuccess)
+                        
+                    self.xmlstream.addObserver("/failure",self._saslError)
+                    self.xmlstream.send(auth)
+                else:
+                    self.xmlstream.dispatch(f, self.AUTH_FAILED_EVENT)
+            
+
+
+    def _authQueryResultEvent(self, iq):
+        if iq["type"] == "result":
+            # Construct auth request
+            reply = IQ(self.xmlstream, "set")
+            reply.addElement(("jabber:iq:auth", "query"))
+            reply.query.addElement("username", content = self.jid.user)
+            reply.query.addElement("resource", content = self.jid.resource)
+        
+            # Prefer digest over plaintext
+            if DigestAuthQry.matches(iq):
+                digest = xmlstream.hashPassword(self.xmlstream.sid,
+                                                self.password)
+                reply.query.addElement("digest", content = digest)
+            else:
+                reply.query.addElement("password", content = self.password)
+
+            reply.addCallback(self._authResultEvent)
+            reply.send()
+        else:
+            # Check for 401 -- Invalid user
+            if iq.error["code"] == "401":
+                self.xmlstream.dispatch(iq, self.INVALID_USER_EVENT)
+            else:
+                self.xmlstream.dispatch(iq, self.AUTH_FAILED_EVENT)
+
+    def _authResultEvent(self, iq):
+        if iq["type"] == "result":
+            self.xmlstream.dispatch(self.xmlstream,
+                                    xmlstream.STREAM_AUTHD_EVENT)
+        else:
+            self.xmlstream.dispatch(iq, self.AUTH_FAILED_EVENT)
+
+    def registerAccount(self, username = None, password = None):
+        if username:
+            self.jid.user = username
+        if password:
+            self.password = password
+            
+        iq = IQ(self.xmlstream, "set")
+        iq.addElement(("jabber:iq:register", "query"))
+        iq.query.addElement("username", content = self.jid.user)
+        iq.query.addElement("password", content = self.password)
+
+        iq.addCallback(self._registerResultEvent)
+
+        iq.send()
+
+    def _registerResultEvent(self, iq):
+        if iq["type"] == "result":
+            # Registration succeeded -- go ahead and auth
+            self.streamStarted(None)
+        else:
+            # Registration failed
+            self.xmlstream.dispatch(iq, self.REGISTER_FAILED_EVENT)
             
+    # session stuff
+    def _sessionResultEvent(self, iq):
+        if iq["type"] == "result":
+            self.xmlstream.dispatch(self.xmlstream,
+                                    xmlstream.STREAM_AUTHD_EVENT)            
+        else:
+            self.xmlstream.dispatch(iq, self.AUTH_FAILED_EVENT)
+            
+    # BIND stuff
+    def _bindResultEvent(self, iq):
+        if iq["type"] == "result":
+            self.bind = 1
+            if self.session == 1:
+                iq = IQ(self.xmlstream, "set")
+                iq.addElement((SESSION_XMLNS, "session"),content = self.jid.full())
+                
+                iq.addCallback(self._sessionResultEvent)
+                iq.send()
+                return
+                
+        else:
+            self.bind = 0
+            # TODO - make a BIND_FAILED_EVENT?
+            self.xmlstream.dispatch(self.xmlstream,
+                                    xmlstream.AUTH_FAILED_EVENT)            
+
+        if self.bind == 1 and self.session == 1:                        
+            self.xmlstream.dispatch(self.xmlstream,
+                                    xmlstream.STREAM_AUTHD_EVENT)            
+        else:
+            self.xmlstream.dispatch(iq, self.AUTH_FAILED_EVENT)
+            
+            
+
+    # SASL stuff (should this be moved?)
+    def _saslError(self, error):
+        self.xmlstream.dispatch(error, self.AUTH_FAILED_EVENT)
+        
+    def _saslStep1(self, challenge):
+        c = str(challenge)
+        
+        dc = binascii.a2b_base64(c)
+        ra = self._parse(dc)
+        self.realm = ra['realm']
+        self.nonce = ra['nonce']
+        self.nc=0
+        self.charset = ra['charset']
+        self.algorithm = ra['algorithm']
+        response = domish.Element((SASL_XMLNS,"response"))
+        # why?
+        response['xmlns'] = SASL_XMLNS
+        r = self._response(self.charset,self.realm,self.nonce)
+        
+        response.addContent(r)
+        self.xmlstream.removeObserver("/challenge",self._saslStep1)
+        self.xmlstream.addOnetimeObserver("/challenge",self._saslStep2)
+        self.xmlstream.send(response)
+
+
+    def _saslStep2(self, challenge):
+        cs = binascii.a2b_base64(str(challenge))
+        ca = self._parse(cs)
+        
+        if self.rauth == ca['rspauth']:
+            response = domish.Element((SASL_XMLNS,"response"))
+            # why?
+            response['xmlns'] = SASL_XMLNS
+                        
+            self.xmlstream.removeObserver("/challenge",self._saslStep2)
+            self.xmlstream.addOnetimeObserver("/success",self._saslSuccess)
+            self.xmlstream.send(response)
+        else:
+            self.xmlstream.dispatch(challenge, self.AUTH_FAILED_EVENT)
+
+    def _saslSuccess(self, s):
+        self.success = 1
+        self.xmlstream._reset()
+        self.connectionMade()
+
+
+    # TLS stuff  - maybe put this in its own class?
+    def _proceed(self, p):
+        from twisted.internet import ssl
+        # Reconnect using SSL
+        ctx = ssl.ClientContextFactory()
+        self.xmlstream.transport.startTLS(ctx)
+        self.xmlstream._reset()
+        # Generate stream header
+        if self.version != 0.0:
+            sh = "<stream:stream xmlns='%s' xmlns:stream='http://etherx.jabber.org/streams' version='%s' to='%s'>" % \
+                 (self.namespace,self.version, self.streamHost.encode('utf-8'))
+        else:
+            sh = "<stream:stream xmlns='%s' xmlns:stream='http://etherx.jabber.org/streams' to='%s'>" % \
+                 (self.namespace, self.streamHost.encode('utf-8'))
+        self.xmlstream.send(sh)
+        self.tls = 1
+
+    def _tlsError(self, e):
+        self.xmlstream.dispatch(e, self.AUTH_FAILED_EVENT)
+
+    # SASL stuff - maybe put this in its own class?
+    def _response(self, charset, realm, nonce):
+        rs = ''
+        try:
+            username=self.jid.user.encode(charset)
+        except UnicodeError:
+            # TODO - add error checking 
+            raise
+        rs = rs + 'username="%s"' % username
+        rs = rs + ',realm="%s"' % realm
+        cnonce = self._gen_nonce()
+        rs = rs + ',cnonce="%s"' % cnonce
+        rs = rs + ',nonce="%s"' % nonce
+
+        self.nc+=1
+        nc="%08x" % self.nc
+        rs = rs + ',nc=%s' % nc
+        rs = rs + ',qop=auth'
+
+        rs = rs + ',digest-uri="xmpp/'+self.jid.host.encode(charset)+'"'
+        
+
+        uh = "%s:%s:%s" % (username,realm,self.password.encode(charset))
+        huh = md5.new(uh).digest()
+        # TODO - add authzid
+        a1 = "%s:%s:%s" % (huh,nonce,cnonce)
+        a2="AUTHENTICATE:xmpp/"+self.jid.host.encode(charset)
+
+        a3=":xmpp/"+self.jid.host.encode(charset)
+
+        resp1 = "%s:%s:%s:%s:%s:%s" % (binascii.b2a_hex(md5.new(a1).digest()),
+                                       nonce,
+                                       nc,
+                                       cnonce,
+                                       "auth",
+                                       binascii.b2a_hex(md5.new(a2).digest()))
+        
+        resp2 = "%s:%s:%s:%s:%s:%s" % (binascii.b2a_hex(md5.new(a1).digest()),
+                                       nonce,nc,cnonce,
+                                       "auth",binascii.b2a_hex(md5.new(a3).digest()))
+        
+        kda1 = md5.new(resp1).digest()
+        kda2 = md5.new(resp2).digest()
+        
+        response = binascii.b2a_hex(kda1) 
+        
+        rs = rs + ',response="%s"' % response
+        rs = rs + ',charset=%s' % charset
+        
+        self.rauth = binascii.b2a_hex(kda2)
+        
+        return  binascii.b2a_base64(rs)
+        
+    def _parse(self, rcs):
+        r = rcs.split(',')
+        h = {}
+        for i in r:
+            (k,v) = i.split('=')
+            v = v.replace("'","")
+            v = v.replace('"','')
+            if h.has_key(k):
+                # return an error
+                return 0
+            h[k] = v
+        return h
+
+    def _gen_nonce(self):
+        return md5.new("%s:%s:%s" % (str(random.random()) , str(time.gmtime()),str(os.getpid()))).hexdigest()
