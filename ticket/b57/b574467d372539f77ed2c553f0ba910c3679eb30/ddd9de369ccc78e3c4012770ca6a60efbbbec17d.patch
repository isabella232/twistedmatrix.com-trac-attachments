Index: /home/wolf/twisted-trunk/twisted/words/protocols/irc.py
===================================================================
--- /home/wolf/twisted-trunk/twisted/words/protocols/irc.py	(revision 23912)
+++ /home/wolf/twisted-trunk/twisted/words/protocols/irc.py	(working copy)
@@ -85,6 +85,20 @@
     return prefix, command, args
 
 
+def parseuser(user):
+    """
+    Parse a user like nick!realname@host and return nick, realname, host.
+    If the user is not in the form nick!realname@host it is returned as it is.
+    """
+    parts = user.split('!', 1)
+    nick = parts[0]
+    try:
+        realname, host = parts[1].split('@', 1)
+        return nick, realname, host
+    except (IndexError, ValueError):
+        return user
+
+
 def split(str, length = 80):
     """I break a message into multiple lines.
 
Index: /home/wolf/twisted-trunk/twisted/words/test/test_irc.py
===================================================================
--- /home/wolf/twisted-trunk/twisted/words/test/test_irc.py	(revision 23912)
+++ /home/wolf/twisted-trunk/twisted/words/test/test_irc.py	(working copy)
@@ -37,6 +37,54 @@
             self.failUnlessEqual(s, irc.ctcpDequote(irc.ctcpQuote(s)))
 
 
+class ParseUser(unittest.TestCase):
+    def test_emptyUser(self):
+        """
+        This is not in the form nick!realname@host so it's returned as it is.
+        """
+        user = ''
+        res = irc.parseuser(user)
+        self.assertEquals(res, user)
+
+
+    def test_userWithoutHost(self):
+        """
+        This is not in the form nick!realname@host so it's returned as it is.
+        """
+        user = 'Wolf!~wolf'
+        res = irc.parseuser(user)
+        self.assertEquals(res, user)
+
+
+    def test_userWithoutRealname(self):
+        """
+        This is not in the form nick!realname@host so it's returned as it is.
+        """
+        user = 'Wolf@yok.utu.fi'
+        res = irc.parseuser(user)
+        self.assertEquals(res, user)
+
+
+    def test_userWithoutRealnameAndHost(self):
+        """
+        This is not in the form nick!realname@host so it's returned as it is.
+        """
+        user = 'Wolf'
+        res = irc.parseuser(user)
+        self.assertEquals(res, user)
+
+
+    def test_wellFormedUser(self):
+        """
+        Nothing strange with this user.
+        """
+        user = 'Wolf!~wolf@yok.utu.fi'
+        res = irc.parseuser('Wolf!~wolf@yok.utu.fi')
+        self.assertEquals(res, ('Wolf', '~wolf', 'yok.utu.fi'))
+
+
+
+
 class IRCClientWithoutLogin(irc.IRCClient):
     performLogin = 0
 
