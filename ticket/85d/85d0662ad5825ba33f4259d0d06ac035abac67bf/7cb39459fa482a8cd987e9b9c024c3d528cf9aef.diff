Index: manhole/service.py
===================================================================
--- manhole/service.py	(revision 17005)
+++ manhole/service.py	(working copy)
@@ -9,10 +9,10 @@
 # twisted imports
 from twisted import copyright
 from twisted.spread import pb
-from twisted.python import log, components, failure
+from twisted.python import log, failure
 from twisted.cred import portal
 from twisted.application import service
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 # sibling imports
 import explorer
@@ -67,8 +67,8 @@
                 block_begin = i
 
 
-class IManholeClient(components.Interface):
-    def console(self, list_of_messages):
+class IManholeClient(Interface):
+    def console(list_of_messages):
         """Takes a list of (type, message) pairs to display.
 
         Types include:
@@ -82,11 +82,11 @@
             - \"exception\" -- a L{failure.Failure}
         """
 
-    def receiveExplorer(self, xplorer):
+    def receiveExplorer(xplorer):
         """Receives an explorer.Explorer
         """
 
-    def listCapabilities(self):
+    def listCapabilities():
         """List what manholey things I am capable of doing.
 
         i.e. C{\"Explorer\"}, C{\"Failure\"}
Index: manhole/_inspectro.py
===================================================================
--- manhole/_inspectro.py	(revision 17005)
+++ manhole/_inspectro.py	(working copy)
@@ -13,10 +13,10 @@
 from twisted.python import reflect
 
 from twisted.manhole.ui import gtk2manhole
-from twisted.python.components import Adapter, Interface, registerAdapter
+from twisted.python.components import Adapter, registerAdapter
 from twisted.python import log, components
 from twisted.protocols import policies
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 # the glade file uses stock icons, which requires gnome to be installed
 import gnome
Index: protocols/sip.py
===================================================================
--- protocols/sip.py	(revision 17005)
+++ protocols/sip.py	(working copy)
@@ -16,12 +16,11 @@
 import time
 import md5
 import sys
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 # twisted imports
 from twisted.python import log, util, components
 from twisted.internet import protocol, defer, reactor
-from twisted.python.components import Interface
 
 from twisted import cred
 import twisted.cred.credentials
@@ -729,19 +728,19 @@
 class IRegistry(Interface):
     """Allows registration of logical->physical URL mapping."""
 
-    def registerAddress(self, domainURL, logicalURL, physicalURL):
+    def registerAddress(domainURL, logicalURL, physicalURL):
         """Register the physical address of a logical URL.
 
         @return: Deferred of C{Registration} or failure with RegistrationError.
         """
 
-    def unregisterAddress(self, domainURL, logicalURL, physicalURL):
+    def unregisterAddress(domainURL, logicalURL, physicalURL):
         """Unregister the physical address of a logical URL.
 
         @return: Deferred of C{Registration} or failure with RegistrationError.
         """
 
-    def getRegistrationInfo(self, logicalURL):
+    def getRegistrationInfo(logicalURL):
         """Get registration info for logical URL.
 
         @return: Deferred of C{Registration} object or failure of LookupError.
@@ -751,7 +750,7 @@
 class ILocator(Interface):
     """Allow looking up physical address for logical URL."""
 
-    def getAddress(self, logicalURL):
+    def getAddress(logicalURL):
         """Return physical URL of server for logical URL of user.
 
         @param logicalURL: a logical C{URL}.
@@ -871,7 +870,7 @@
         pass
 
 class IAuthorizer(Interface):
-    def getChallenge(self, peer):
+    def getChallenge(peer):
         """Generate a challenge the client may respond to.
         
         @type peer: C{tuple}
@@ -881,7 +880,7 @@
         @return: The challenge string
         """
     
-    def decode(self, response):
+    def decode(response):
         """Create a credentials object from the given response.
         
         @type response: C{str}
Index: protocols/htb.py
===================================================================
--- protocols/htb.py	(revision 17005)
+++ protocols/htb.py	(working copy)
@@ -20,13 +20,12 @@
 
 __version__ = '$Revision: 1.5 $'[11:-2]
 
-from twisted.python.components import Interface
 
 # TODO: Investigate whether we should be using os.times()[-1] instead of
 # time.time.  time.time, it has been pointed out, can go backwards.  Is
 # the same true of os.times?
 from time import time
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 from twisted.protocols import pcp
 
@@ -98,7 +97,7 @@
 
 
 class IBucketFilter(Interface):
-    def getBucketFor(self, *somethings, **some_kw):
+    def getBucketFor(*somethings, **some_kw):
         """I'll give you a bucket for something.
 
         @returntype: L{Bucket}
Index: protocols/ftp.py
===================================================================
--- protocols/ftp.py	(revision 17005)
+++ protocols/ftp.py	(working copy)
@@ -33,7 +33,7 @@
 from twisted.internet import reactor, interfaces, protocol, error, defer
 from twisted.protocols import basic, policies
 
-from twisted.python import log, components, failure, filepath
+from twisted.python import log, failure, filepath
 
 from twisted.cred import error as cred_error, portal, credentials, checkers
 
@@ -317,14 +317,14 @@
 
 # -- DTP Protocol --
 
-class IDTPFactory(components.Interface):
+class IDTPFactory(Interface):
     """An interface for protocol.Factories
 
     @ivar peerCheck: perform checks to make sure the ftp-pi's peer is the same
         as the dtp's
     @ivar pi: a reference to this factory's protocol interpreter
     """
-    def __init__(self, pi, peerHost=None):
+    def __init__(pi, peerHost=None):
         """Constructor
         @param pi: this factory's protocol interpreter
         @param peerHost: if peerCheck is True, this is the tuple that the
Index: conch/insults/insults.py
===================================================================
--- conch/insults/insults.py	(revision 17005)
+++ conch/insults/insults.py	(working copy)
@@ -11,17 +11,16 @@
 
 import string
 
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 from twisted.internet import protocol, defer, interfaces as iinternet
-from twisted.python import components
 
-class ITerminalProtocol(components.Interface):
-    def makeConnection(self, transport):
+class ITerminalProtocol(Interface):
+    def makeConnection(transport):
         """Called with an ITerminalTransport when a connection is established.
         """
 
-    def keystrokeReceived(self, keyID, modifier):
+    def keystrokeReceived(keyID, modifier):
         """A keystroke was received.
 
         Each keystroke corresponds to one invocation of this method.
@@ -31,21 +30,21 @@
         C{ServerProtocol}.
         """
 
-    def terminalSize(self, width, height):
+    def terminalSize(width, height):
         """Called to indicate the size of the terminal.
 
         A terminal of 80x24 should be assumed if this method is not
         called.  This method might not be called for real terminals.
         """
 
-    def unhandledControlSequence(self, seq):
+    def unhandledControlSequence(seq):
         """Called when an unsupported control sequence is received.
 
         @type seq: C{str}
         @param seq: The whole control sequence which could not be interpreted.
         """
 
-    def connectionLost(self, reason):
+    def connectionLost(reason):
         """Called when the connection has been lost.
 
         reason is a Failure describing why.
Index: pair/raw.py
===================================================================
--- pair/raw.py	(revision 17005)
+++ pair/raw.py	(working copy)
@@ -6,9 +6,9 @@
 """Interface definitions for working with raw packets"""
 
 from twisted.internet import protocol
-from twisted.python import components
+from zope.interface import Interface
 
-class IRawDatagramProtocol(components.Interface):
+class IRawDatagramProtocol(Interface):
     """An interface for protocols such as UDP, ICMP and TCP."""
 
     def addProto():
@@ -21,7 +21,7 @@
         An IP datagram has been received. Parse and process it.
         """
 
-class IRawPacketProtocol(components.Interface):
+class IRawPacketProtocol(Interface):
     """An interface for low-level protocols such as IP and ARP."""
 
     def addProto():
Index: pair/ethernet.py
===================================================================
--- pair/ethernet.py	(revision 17005)
+++ pair/ethernet.py	(working copy)
@@ -12,11 +12,10 @@
 
 from twisted.internet import protocol
 from twisted.pair import raw
-from twisted.python import components
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 
-class IEthernetProtocol(components.Interface):
+class IEthernetProtocol(Interface):
     """An interface for protocols that handle Ethernet frames"""
     def addProto():
         """Add an IRawPacketProtocol protocol"""
Index: words/protocols/jabber/component.py
===================================================================
--- words/protocols/jabber/component.py	(revision 17005)
+++ words/protocols/jabber/component.py	(working copy)
@@ -4,7 +4,7 @@
 # See LICENSE for details.
 
 
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 from twisted.words.xish import domish, xpath, utility
 from twisted.words.protocols.jabber import jstrports, xmlstream
@@ -62,18 +62,17 @@
 
 
 from twisted.application import service
-from twisted.python import components
 
-class IService(components.Interface):
-    def componentConnected(self, xmlstream):
+class IService(Interface):
+    def componentConnected(xmlstream):
         """ Parent component has established a connection
         """
 
-    def componentDisconnected(self):
+    def componentDisconnected():
         """ Parent component has lost a connection to the Jabber system
         """
 
-    def transportConnected(self, xmlstream):
+    def transportConnected(xmlstream):
         """ Parent component has established a connection over the underlying transport
         """
 
Index: words/im/interfaces.py
===================================================================
--- words/im/interfaces.py	(revision 17005)
+++ words/im/interfaces.py	(working copy)
@@ -3,7 +3,7 @@
 
 Stability: incendiary, work in progress.
 """
-from twisted.python.components import Interface
+from zope.interface import Interface
 
 from twisted.words.im import locals
 
@@ -27,7 +27,7 @@
     @type client: L{IClient}
     """
 
-    def __init__(self, accountName, autoLogin, username, password, host, port):
+    def __init__(accountName, autoLogin, username, password, host, port):
         """
         @type accountName: string
         @param accountName: A name to refer to the account by locally.
@@ -38,13 +38,13 @@
         @type port: integer
         """
 
-    def isOnline(self):
+    def isOnline():
         """Am I online?
 
         @returntype: boolean
         """
 
-    def logOn(self, chatui):
+    def logOn(chatui):
         """Go on-line.
 
         @type chatui: Implementor of C{IChatUI}
@@ -52,16 +52,16 @@
         @returntype: Deferred L{Client}
         """
 
-    def logOff(self):
+    def logOff():
         """Sign off.
         """
 
-    def getGroup(self, groupName):
+    def getGroup(groupName):
         """
         @returntype: L{Group<IGroup>}
         """
 
-    def getPerson(self, personName):
+    def getPerson(personName):
         """
         @returntype: L{Person<IPerson>}
         """
@@ -71,7 +71,7 @@
     @ivar account: The Account I am a Client for.
     @type account: L{IAccount}
     """
-    def __init__(self, account, chatui, logonDeferred):
+    def __init__(account, chatui, logonDeferred):
         """
         @type account: L{IAccount}
         @type chatui: L{IChatUI}
@@ -79,27 +79,27 @@
         @type logonDeferred: L{Deferred<twisted.internet.defer.Deferred>}
         """
 
-    def joinGroup(self, groupName):
+    def joinGroup(groupName):
         """
         @param groupName: The name of the group to join.
         @type groupName: string
         """
 
-    def leaveGroup(self, groupName):
+    def leaveGroup(groupName):
         """
         @param groupName: The name of the group to leave.
         @type groupName: string
         """
 
-    def getGroupConversation(self, name,hide=0):
+    def getGroupConversation(name,hide=0):
         pass
 
-    def getPerson(self,name):
+    def getPerson(name):
         pass
 
 
 class IPerson(Interface):
-    def __init__(self, name, account):
+    def __init__(name, account):
         """Initialize me.
 
         @param name: My name, as the server knows me.
@@ -108,24 +108,24 @@
         @type account: I{Account}
         """
 
-    def isOnline(self):
+    def isOnline():
         """Am I online right now?
 
         @returntype: boolean
         """
 
-    def getStatus(self):
+    def getStatus():
         """What is my on-line status?
 
         @returns: L{locals.StatusEnum}
         """
 
-    def getIdleTime(self):
+    def getIdleTime():
         """
         @returntype: string (XXX: How about a scalar?)
         """
 
-    def sendMessage(self, text, metadata=None):
+    def sendMessage(text, metadata=None):
         """Send a message to this person.
 
         @type text: string
@@ -145,7 +145,7 @@
     @type account: I{Account<IAccount>}
     """
 
-    def __init__(self, name, account):
+    def __init__(name, account):
         """Initialize me.
 
         @param name: My name, as the server knows me.
@@ -154,13 +154,13 @@
         @type account: I{Account<IAccount>}
         """
 
-    def setTopic(self, text):
+    def setTopic(text):
         """Set this Groups topic on the server.
 
         @type text: string
         """
 
-    def sendGroupMessage(self, text, metadata=None):
+    def sendGroupMessage(text, metadata=None):
         """Send a message to this group.
 
         @type text: string
@@ -172,69 +172,69 @@
                 - C{'emote'}: indicates this is an action
         """
 
-    def join(self):
+    def join():
         pass
 
-    def leave(self):
+    def leave():
         """Depart this group"""
 
 
 class IConversation(Interface):
     """A conversation with a specific person."""
-    def __init__(self, person, chatui):
+    def __init__(person, chatui):
         """
         @type person: L{IPerson}
         """
 
-    def show(self):
+    def show():
         """doesn't seem like it belongs in this interface."""
 
-    def hide(self):
+    def hide():
         """nor this neither."""
 
-    def sendText(self, text, metadata):
+    def sendText(text, metadata):
         pass
 
-    def showMessage(self, text, metadata):
+    def showMessage(text, metadata):
         pass
 
-    def changedNick(self, person, newnick):
+    def changedNick(person, newnick):
         """
         @param person: XXX Shouldn't this always be Conversation.person?
         """
 
 class IGroupConversation(Interface):
-    def show(self):
+    def show():
         """doesn't seem like it belongs in this interface."""
 
-    def hide(self):
+    def hide():
         """nor this neither."""
 
-    def sendText(self, text, metadata):
+    def sendText(text, metadata):
         pass
 
-    def showGroupMessage(self, sender, text, metadata):
+    def showGroupMessage(sender, text, metadata):
         pass
 
-    def setGroupMembers(self, members):
+    def setGroupMembers(members):
         """Sets the list of members in the group and displays it to the user
         """
 
-    def setTopic(self, topic, author):
+    def setTopic(topic, author):
         """Displays the topic (from the server) for the group conversation window
 
         @type topic: string
         @type author: string (XXX: Not Person?)
         """
 
-    def memberJoined(self, member):
+    def memberJoined(member):
         """Adds the given member to the list of members in the group conversation
         and displays this to the user
 
         @type member: string (XXX: Not Person?)
         """
 
-    def memberChangedNick(self, oldnick, newnick):
+    def memberChangedNick(oldnick, newnick):
         """Changes the oldnick in the list of members to newnick and displays this
         change to the user
 
@@ -242,7 +242,7 @@
         @type newnick: string
         """
 
-    def memberLeft(self, member):
+    def memberLeft(member):
         """Deletes the given member from the list of members in the group
         conversation and displays the change to the user
 
@@ -251,19 +251,19 @@
 
 
 class IChatUI(Interface):
-    def registerAccountClient(self, client):
+    def registerAccountClient(client):
         """Notifies user that an account has been signed on to.
 
         @type client: L{Client<IClient>}
         """
 
-    def unregisterAccountClient(self, client):
+    def unregisterAccountClient(client):
         """Notifies user that an account has been signed off or disconnected
 
         @type client: L{Client<IClient>}
         """
 
-    def getContactsList(self):
+    def getContactsList():
         """
         @returntype: L{ContactsList}
         """
@@ -271,7 +271,7 @@
     # WARNING: You'll want to be polymorphed into something with
     # intrinsic stoning resistance before continuing.
 
-    def getConversation(self, person, Class, stayHidden=0):
+    def getConversation(person, Class, stayHidden=0):
         """For the given person object, returns the conversation window
         or creates and returns a new conversation window if one does not exist.
 
@@ -282,7 +282,7 @@
         @returntype: L{Conversation<IConversation>}
         """
 
-    def getGroupConversation(self,group,Class,stayHidden=0):
+    def getGroupConversation(group,Class,stayHidden=0):
         """For the given group object, returns the group conversation window or
         creates and returns a new group conversation window if it doesn't exist.
 
@@ -293,7 +293,7 @@
         @returntype: L{GroupConversation<interfaces.IGroupConversation>}
         """
 
-    def getPerson(self, name, client):
+    def getPerson(name, client):
         """Get a Person for a client.
 
         Duplicates L{IAccount.getPerson}.
@@ -304,7 +304,7 @@
         @returntype: L{Person<IPerson>}
         """
 
-    def getGroup(self, name, client):
+    def getGroup(name, client):
         """Get a Group for a client.
 
         Duplicates L{IAccount.getGroup}.
@@ -315,7 +315,7 @@
         @returntype: L{Group<IGroup>}
         """
 
-    def contactChangedNick(self, oldnick, newnick):
+    def contactChangedNick(oldnick, newnick):
         """For the given person, changes the person's name to newnick, and
         tells the contact list and any conversation windows with that person
         to change as well.
Index: web2/proxy.py
===================================================================
--- web2/proxy.py	(revision 17005)
+++ web2/proxy.py	(working copy)
@@ -24,8 +24,7 @@
 from twisted.web2 import http
 from twisted.internet import reactor, protocol
 from twisted.web2 import resource, server
-from twisted.python import components
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 # system imports
 import urlparse
@@ -157,9 +156,9 @@
 
     requestFactory = ReverseProxyRequest
 
-class IConnector(components.Interface):
+class IConnector(Interface):
     """attribute name"""
-    def connect(self, factory):
+    def connect(factory):
         """connect ClientFactory"""
 
 class TCPConnector:
Index: web2/iweb.py
===================================================================
--- web2/iweb.py	(revision 17005)
+++ web2/iweb.py	(working copy)
@@ -5,7 +5,6 @@
     and IResource.  I am based heavily on ideas from nevow.inevow
 """
 
-from twisted.python import components
 from zope.interface import Attribute, Interface, interface
 
 # server.py interfaces
@@ -55,18 +54,18 @@
             return IResource(result)
 IResource.__class__ = SpecialAdaptInterfaceClass
 
-class IOldNevowResource(components.Interface):
+class IOldNevowResource(Interface):
     # Shared interface with inevow.IResource
     """
         I am a web resource.
     """
 
-    def locateChild(self, ctx, segments):
+    def locateChild(ctx, segments):
         """Locate another object which can be adapted to IResource
         Return a tuple of resource, path segments
         """
 
-    def renderHTTP(self, ctx):
+    def renderHTTP(ctx):
         """Return a string or a deferred which will fire a string. This string
         will be written to the web browser which initiated this request.
 
@@ -75,13 +74,13 @@
         string instead of a response object.
         """
 
-class ICanHandleException(components.Interface):
+class ICanHandleException(Interface):
     # Shared interface with inevow.ICanHandleException
-    def renderHTTP_exception(self, request, failure):
+    def renderHTTP_exception(request, failure):
         """Render an exception to the given request object.
         """
 
-    def renderInlineException(self, request, reason):
+    def renderInlineException(request, reason):
         """Return stan representing the exception, to be printed in the page,
         not replacing the page."""
 
@@ -109,7 +108,7 @@
         
     chanRequest = Attribute("The ChannelRequest. I wonder if this is public really?")
 
-class IOldRequest(components.Interface):
+class IOldRequest(Interface):
     # Shared interface with inevow.ICurrentSegments
     """An old HTTP request.
 
@@ -126,26 +125,26 @@
     @ivar received_headers: All received headers
     """
     # Methods for received request
-    def getHeader(self, key):
+    def getHeader(key):
         """Get a header that was sent from the network.
         """
         
-    def getCookie(self, key):
+    def getCookie(key):
         """Get a cookie that was sent from the network.
         """    
 
 
-    def getAllHeaders(self):
+    def getAllHeaders():
         """Return dictionary of all headers the request received."""
 
-    def getRequestHostname(self):
+    def getRequestHostname():
         """Get the hostname that the user passed in to the request.
 
         This will either use the Host: header (if it is available) or the
         host we are listening on if the header is unavailable.
         """
 
-    def getHost(self):
+    def getHost():
         """Get my originally requesting transport's host.
 
         Don't rely on the 'transport' attribute, since Request objects may be
@@ -153,48 +152,48 @@
         twisted.internet.tcp.Port.
         """
         
-    def getClientIP(self):
+    def getClientIP():
         pass
-    def getClient(self):
+    def getClient():
         pass
-    def getUser(self):
+    def getUser():
         pass
-    def getPassword(self):
+    def getPassword():
         pass
-    def isSecure(self):
+    def isSecure():
         pass
 
-    def getSession(self, sessionInterface = None):
+    def getSession(sessionInterface = None):
         pass
     
-    def URLPath(self):
+    def URLPath():
         pass
 
-    def prePathURL(self):
+    def prePathURL():
         pass
 
-    def rememberRootURL(self):
+    def rememberRootURL():
         """
         Remember the currently-processed part of the URL for later
         recalling.
         """
         
-    def getRootURL(self):
+    def getRootURL():
         """
         Get a previously-remembered URL.
         """
         
     # Methods for outgoing request
-    def finish(self):
+    def finish():
         """We are finished writing data."""
 
-    def write(self, data):
+    def write(data):
         """
         Write some data as a result of an HTTP request.  The first
         time this is called, it writes out response data.
         """
 
-    def addCookie(self, k, v, expires=None, domain=None, path=None, max_age=None, comment=None, secure=None):
+    def addCookie(k, v, expires=None, domain=None, path=None, max_age=None, comment=None, secure=None):
         """Set an outgoing HTTP cookie.
 
         In general, you should consider using sessions instead of cookies, see
@@ -202,21 +201,21 @@
         twisted.web.server.Session class for details.
         """
 
-    def setResponseCode(self, code, message=None):
+    def setResponseCode(code, message=None):
         """Set the HTTP response code.
         """
 
-    def setHeader(self, k, v):
+    def setHeader(k, v):
         """Set an outgoing HTTP header.
         """
 
-    def redirect(self, url):
+    def redirect(url):
         """Utility function that does a redirect.
 
         The request should have finish() called after this.
         """
 
-    def setLastModified(self, when):
+    def setLastModified(when):
         """Set the X{Last-Modified} time for the response to this request.
 
         If I am called more than once, I ignore attempts to set
@@ -235,7 +234,7 @@
             body.  Otherwise, I return a false value.
         """
 
-    def setETag(self, etag):
+    def setETag(etag):
         """Set an X{entity tag} for the outgoing response.
 
         That's \"entity tag\" as in the HTTP/1.1 X{ETag} header, \"used
@@ -254,7 +253,7 @@
             no body.  Otherwise, I return a false value.
         """
 
-    def setHost(self, host, port, ssl=0):
+    def setHost(host, port, ssl=0):
         """Change the host and port the request thinks it's using.
 
         This method is useful for working with reverse HTTP proxies (e.g.
Index: web2/requtil.py
===================================================================
--- web2/requtil.py	(revision 17005)
+++ web2/requtil.py	(working copy)
@@ -10,12 +10,12 @@
 
 # System Imports
 import time
-import urllib 
+import urllib
 
 # Twisted Imports
 from twisted.internet import reactor, defer
 from twisted.python import log, components
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 from twisted.web2 import iweb
 
@@ -38,7 +38,7 @@
     else:
         return name
 
-class IAppRoot(components.Interface):
+class IAppRoot(Interface):
     """attribute: root"""
 
 class AppRoot:
@@ -49,7 +49,7 @@
 
 components.registerAdapter(AppRoot, iweb.IRequest, IAppRoot)
 
-class ISession(components.Interface):
+class ISession(Interface):
     pass
 
 def getSession(request):
Index: pb/test/test_pb.py
===================================================================
--- pb/test/test_pb.py	(revision 17005)
+++ pb/test/test_pb.py	(working copy)
@@ -5,8 +5,8 @@
 from twisted.python import log
 #log.startLogging(sys.stderr)
 
-from zope.interface import implements, implementsOnly, implementedBy
-from twisted.python import components, failure, reflect
+from zope.interface import implements, implementsOnly, implementedBy, Interface
+from twisted.python import failure, reflect
 from twisted.internet import reactor, defer
 from twisted.trial import unittest
 from twisted.internet.main import CONNECTION_LOST
@@ -222,7 +222,7 @@
     def remote_add(self, a, b):
         return "error"
 
-class IFoo(components.Interface):
+class IFoo(Interface):
     # non-remote Interface
     pass
 
Index: persisted/journal/base.py
===================================================================
--- persisted/journal/base.py	(revision 17005)
+++ persisted/journal/base.py	(working copy)
@@ -19,9 +19,7 @@
     import pickle
 
 # twisted imports
-from twisted.python.components import Interface
-from twisted.python import components
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 
 class Journal:
@@ -103,23 +101,23 @@
 class ICommand(Interface):
     """A serializable command which interacts with a journaled service."""
 
-    def execute(self, journaledService, runTime):
+    def execute(journaledService, runTime):
         """Run the command and return result."""
 
 
 class ICommandLog(Interface):
     """Interface for command log."""
 
-    def logCommand(self, command, runTime):
+    def logCommand(command, runTime):
         """Add a command and its run time to the log.
 
         @return: Deferred of command index.
         """
 
-    def getCurrentIndex(self):
+    def getCurrentIndex():
         """Return index of last command that was logged."""
 
-    def getCommandsSince(self, index):
+    def getCommandsSince(index):
         """Return commands who's index >= the given one.
 
         @return: list of (time, command) tuples, sorted with ascending times.
Index: persisted/sob.py
===================================================================
--- persisted/sob.py	(revision 17005)
+++ persisted/sob.py	(working copy)
@@ -19,9 +19,9 @@
     import cStringIO as StringIO
 except ImportError:
     import StringIO
-from twisted.python import components, log, runtime
+from twisted.python import log, runtime
 from twisted.persisted import styles
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 # Note:
 # These encrypt/decrypt functions only work for data formats
@@ -39,7 +39,7 @@
     return AES.new(md5.new(passphrase).digest()[:16]).decrypt(data)
 
 
-class IPersistable(components.Interface):
+class IPersistable(Interface):
 
     """An object which can be saved in several formats to a file"""
 
Index: application/service.py
===================================================================
--- application/service.py	(revision 17005)
+++ application/service.py	(working copy)
@@ -15,13 +15,13 @@
 Maintainer: U{Moshe Zadka<mailto:moshez@twistedmatrix.com>}
 """
 
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 from twisted.python import components
 from twisted.internet import defer
 from twisted.persisted import sob
 
-class IService(components.Interface):
+class IService(Interface):
 
     """
     A service.
@@ -34,14 +34,14 @@
     @ivar running:         Whether the service is running.
     """
 
-    def setName(self, name):
+    def setName(name):
         """Set the name of the service.
 
         @type name: C{str}
         @raise L{RuntimeError}: Raised if the service already has a parent.
         """
 
-    def setServiceParent(self, parent):
+    def setServiceParent(parent):
         """Set the parent of the service.
 
         @type name: C{IServiceCollection}
@@ -50,7 +50,7 @@
         by that name.
         """
 
-    def disownServiceParent(self):
+    def disownServiceParent():
         """Remove the parent of the service.
 
         @rtype: C{Deferred}
@@ -59,10 +59,10 @@
         a value can be returned (usually, None).
         """
 
-    def startService(self):
+    def startService():
         """Start the service."""
 
-    def stopService(self):
+    def stopService():
         """Stop the service.
 
         @rtype: C{Deferred}
@@ -71,7 +71,7 @@
         a value can be returned (usually, None).
         """
 
-    def privilegedStartService(self):
+    def privilegedStartService():
         """Do preparation work for starting the service.
 
         Here things which should be done before changing directory,
@@ -127,7 +127,7 @@
         self.running = 0
 
 
-class IServiceCollection(components.Interface):
+class IServiceCollection(Interface):
 
     """Collection of services.
 
@@ -136,7 +136,7 @@
     is always possible to iterate over them.
     """
 
-    def getServiceNamed(self, name):
+    def getServiceNamed(name):
         """Get the child service with a given name.
 
         @type name: C{str}
@@ -145,10 +145,10 @@
         given name.
         """
 
-    def __iter__(self):
+    def __iter__():
         """Get an iterator over all child services"""
 
-    def addService(self, service):
+    def addService(service):
          """Add a child service.
 
         @type service: C{IService}
@@ -156,7 +156,7 @@
         the given name.
         """
 
-    def removeService(self, service):
+    def removeService(service):
         """Remove a child service.
 
         @type service: C{IService}
@@ -234,7 +234,7 @@
             return None
 
 
-class IProcess(components.Interface):
+class IProcess(Interface):
 
     """Process running parameters
 
Index: application/compat.py
===================================================================
--- application/compat.py	(revision 17005)
+++ application/compat.py	(working copy)
@@ -16,12 +16,12 @@
 
 import warnings, sys
 
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 from twisted.python import components
 from twisted.application import internet, service
 
-class IOldApplication(components.Interface):
+class IOldApplication(Interface):
 
     """A subset of the interface old Application objects had implicitly
 
@@ -29,7 +29,7 @@
     objects had, so that new objects can support it for compatibility
     with old code
     """
-    def listenWith(self, portType, *args, **kw):
+    def listenWith(portType, *args, **kw):
         """Add a service that starts an instance of C{portType} listening.
 
         @type portType: type which implements C{IListeningPort}
@@ -37,7 +37,7 @@
         will be started listening.
         """
 
-    def listenTCP(self, port, factory, backlog=50, interface=''):
+    def listenTCP(port, factory, backlog=50, interface=''):
         """Add a service that connects a given protocol factory to the port.
 
         @param port: a port number on which to listen
@@ -49,7 +49,7 @@
         @param interface: the hostname to bind to, defaults to '' (all)
         """
 
-    def listenUNIX(self, filename, factory, backlog=50, mode=0666):
+    def listenUNIX(filename, factory, backlog=50, mode=0666):
         """Add a service that listens on a UNIX socket.
 
         @param address: a path to a unix socket on the filesystem.
@@ -61,11 +61,11 @@
         @param mode: mode to set on the unix socket.
         """
 
-    def listenUDP(self, port, proto, interface='', maxPacketSize=8192):
+    def listenUDP(port, proto, interface='', maxPacketSize=8192):
         """Add a service that connects a given DatagramProtocol to the port.
         """
 
-    def listenSSL(self, port, factory, ctxFactory, backlog=50, interface=''):
+    def listenSSL(port, factory, ctxFactory, backlog=50, interface=''):
         """Add a service that connects a given protocol factory to the port.
 
         The connection is a SSL one, using contexts created by the context
@@ -82,7 +82,7 @@
         @param interface: the hostname to bind to, defaults to '' (all)
         """
 
-    def connectWith(self, connectorType, *args, **kw):
+    def connectWith(connectorType, *args, **kw):
         """Add a service that starts an instance of C{connectorType} connecting.
 
         @type connectorType: type which implements C{IConnector}
@@ -90,12 +90,12 @@
         will be started connecting.
         """
 
-    def connectUDP(self, remotehost, remoteport, protocol, localport=0,
+    def connectUDP(remotehost, remoteport, protocol, localport=0,
                   interface='', maxPacketSize=8192):
         """Add a service that connects a L{ConnectedDatagramProtocol} to a port.
         """
 
-    def connectTCP(self, host, port, factory, timeout=30, bindAddress=None):
+    def connectTCP(host, port, factory, timeout=30, bindAddress=None):
         """Add a service that connects a TCP client.
 
         @param host: a host name
@@ -111,7 +111,7 @@
                             to, or None.
         """
 
-    def connectSSL(self, host, port, factory, ctxFactory, timeout=30,
+    def connectSSL(host, port, factory, ctxFactory, timeout=30,
                    bindAddress=None):
         """Add a service that connects a client Protocol to a remote SSL socket.
 
@@ -130,7 +130,7 @@
             C{None}
         """
 
-    def connectUNIX(self, address, factory, timeout=30):
+    def connectUNIX(address, factory, timeout=30):
         """Add a service that connects a client protocol to a UNIX socket.
 
         @param address: a path to a unix socket on the filesystem.
@@ -141,48 +141,48 @@
             has failed.
         """
 
-    def addService(self, service):
+    def addService(service):
         """Add a service to this collection.
         """
 
-    def getServiceNamed(self, name):
+    def getServiceNamed(name):
         """Retrieve the named service from this application.
 
         Raise a KeyError if there is no such service name.
         """
 
-    def removeService(self, service):
+    def removeService(service):
         """Remove a service from this collection."""
 
-    def unlistenWith(self, portType, *args, **kw):
+    def unlistenWith(portType, *args, **kw):
         """Maybe remove a listener
 
         This function is inherently unreliable, and may or may
         not remove a service.
         """
 
-    def unlistenTCP(self, port, interface=''):
+    def unlistenTCP(port, interface=''):
         """Maybe remove a listener
 
         This function is inherently unreliable, and may or may
         not remove a service.
         """
 
-    def unlistenUNIX(self, filename):
+    def unlistenUNIX(filename):
         """Maybe remove a listener
 
         This function is inherently unreliable, and may or may
         not remove a service.
         """
 
-    def unlistenUDP(self, port, interface=''):
+    def unlistenUDP(port, interface=''):
         """Maybe remove a listener
 
         This function is inherently unreliable, and may or may
         not remove a service.
         """
 
-    def unlistenSSL(self, port, interface=''):
+    def unlistenSSL(port, interface=''):
         """Maybe remove a listener
 
         This function is inherently unreliable, and may or may
Index: names/dns.py
===================================================================
--- names/dns.py	(revision 17005)
+++ names/dns.py	(working copy)
@@ -56,14 +56,13 @@
 else:
     def randomSource(r = randpool.RandomPool().get_bytes):
         return struct.unpack('H', r(2))[0]
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 
 # Twisted imports
 from twisted.internet import protocol, defer
 from twisted.python import log, failure
 from twisted.python import util as tputil
-from twisted.python import components
 
 PORT = 53
 
@@ -113,7 +112,7 @@
 # Response Codes
 OK, EFORMAT, ESERVER, ENAME, ENOTIMP, EREFUSED = range(6)
 
-class IRecord(components.Interface):
+class IRecord(Interface):
     """An single entry in a zone of authority.
 
     @cvar TYPE: An indicator of what kind of record this is.
@@ -154,7 +153,7 @@
     return buff
 
 
-class IEncodable(components.Interface):
+class IEncodable(Interface):
     """
     Interface for something which can be encoded to and decoded
     from a file object.
Index: news/database.py
===================================================================
--- news/database.py	(revision 17005)
+++ news/database.py	(working copy)
@@ -22,12 +22,11 @@
 from twisted.internet import defer
 from twisted.enterprise import adbapi
 from twisted.persisted import dirdbm
-from twisted.python import components
 
 import getpass, pickle, time, socket, md5
 import os
 import StringIO
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 
 ERR_NOGROUP, ERR_NOARTICLE = range(2, 4)  # XXX - put NNTP values here (I guess?)
@@ -98,26 +97,26 @@
     pass
 
     
-class INewsStorage(components.Interface):
+class INewsStorage(Interface):
     """
     An interface for storing and requesting news articles
     """
     
-    def listRequest(self):
+    def listRequest():
         """
         Returns a deferred whose callback will be passed a list of 4-tuples
         containing (name, max index, min index, flags) for each news group
         """
 
 
-    def subscriptionRequest(self):
+    def subscriptionRequest():
         """
         Returns a deferred whose callback will be passed the list of
         recommended subscription groups for new server users
         """
     
     
-    def postRequest(self, message):
+    def postRequest(message):
         """
         Returns a deferred whose callback will be invoked if 'message'
         is successfully posted to one or more specified groups and
@@ -125,14 +124,14 @@
         """
     
     
-    def overviewRequest(self):
+    def overviewRequest():
         """
         Returns a deferred whose callback will be passed the a list of
         headers describing this server's overview format.
         """
 
 
-    def xoverRequest(self, group, low, high):
+    def xoverRequest(group, low, high):
         """
         Returns a deferred whose callback will be passed a list of xover
         headers for the given group over the given range.  If low is None,
@@ -141,7 +140,7 @@
         """
 
 
-    def xhdrRequest(self, group, low, high, header):
+    def xhdrRequest(group, low, high, header):
         """
         Returns a deferred whose callback will be passed a list of XHDR data
         for the given group over the given range.  If low is None,
@@ -150,21 +149,21 @@
         """
 
     
-    def listGroupRequest(self, group):
+    def listGroupRequest(group):
         """
         Returns a deferred whose callback will be passed a two-tuple of
         (group name, [article indices])
         """
     
     
-    def groupRequest(self, group):
+    def groupRequest(group):
         """
         Returns a deferred whose callback will be passed a five-tuple of
         (group name, article count, highest index, lowest index, group flags)
         """
 
     
-    def articleExistsRequest(self, id):
+    def articleExistsRequest(id):
         """
         Returns a deferred whose callback will be passed with a true value
         if a message with the specified Message-ID exists in the database
@@ -172,7 +171,7 @@
         """
 
 
-    def articleRequest(self, group, index, id = None):
+    def articleRequest(group, index, id = None):
         """ 
         Returns a deferred whose callback will be passed a file-like object
         containing the full article text (headers and body) for the article
@@ -184,7 +183,7 @@
         """
 
     
-    def headRequest(self, group, index):
+    def headRequest(group, index):
         """
         Returns a deferred whose callback will be passed the header for
         the article of the specified index in the specified group, and
@@ -193,7 +192,7 @@
         """
 
     
-    def bodyRequest(self, group, index):
+    def bodyRequest(group, index):
         """
         Returns a deferred whose callback will be passed the body for
         the article of the specified index in the specified group, and
Index: web/resource.py
===================================================================
--- web/resource.py	(revision 17005)
+++ web/resource.py	(working copy)
@@ -9,17 +9,17 @@
 
 # System Imports
 from twisted.internet import defer
-from twisted.python import roots, components, reflect
-from zope.interface import Attribute, implements
+from twisted.python import roots, reflect
+from zope.interface import Attribute, implements, Interface
 
-class IResource(components.Interface):
+class IResource(Interface):
     """A web resource."""
 
     isLeaf = Attribute(\
 """Signal if this IResource implementor is a "leaf node" or not. If True,
 getChildWithDefault will not be called on this Resource.""")
 
-    def getChildWithDefault(self, name, request):
+    def getChildWithDefault(name, request):
         """Return a child with the given name for the given request.
         This is the external interface used by the Resource publishing
         machinery. If implementing IResource without subclassing
@@ -27,11 +27,11 @@
         getChild overridden instead.
         """
 
-    def putChild(self, path, child):
+    def putChild(path, child):
         """Put a child IResource implementor at the given path.
         """
 
-    def render(self, request):
+    def render(request):
         """Render a request. This is called on the leaf resource for
         a request. Render must return either a string, which will
         be sent to the browser as the HTML for the request, or
Index: web/woven/template.py
===================================================================
--- web/woven/template.py	(revision 17005)
+++ web/woven/template.py	(working copy)
@@ -73,7 +73,7 @@
 from twisted.python import failure
 from twisted.internet import reactor, defer
 from twisted.python import log
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 from twisted.web.server import NOT_DONE_YET
 STOP_RENDERING = 1
@@ -81,11 +81,11 @@
 
 
 
-class INodeMutator(components.Interface):
+class INodeMutator(Interface):
     """A component that implements NodeMutator knows how to mutate
     DOM based on the instructions in the object it wraps.
     """
-    def generate(self, request, node):
+    def generate(request, node):
         """The generate method should do the work of mutating the DOM
         based on the object this adapter wraps.
         """
Index: web/woven/interfaces.py
===================================================================
--- web/woven/interfaces.py	(revision 17005)
+++ web/woven/interfaces.py	(working copy)
@@ -2,9 +2,9 @@
 
 __version__ = "$Revision: 1.13 $"[11:-2]
 
-from twisted.python import components
+from zope.interface import Interface
 
-class IModel(components.Interface):
+class IModel(Interface):
     """A MVC Model."""
     def addView(view):
         """Add a view for the model to keep track of.
@@ -23,19 +23,19 @@
         in.
         """
 
-    def getData(self):
+    def getData():
         """Return the raw data contained by this Model object, if it is a
         wrapper. If not, return self.
         """
 
-    def setData(self, request, data):
+    def setData(request, data):
         """Set the raw data referenced by this Model object, if it is a
         wrapper. This is done by telling our Parent model to setSubmodel
         the new data. If this object is not a wrapper, keep the data
         around and return it for subsequent getData calls.
         """
 
-    def lookupSubmodel(self, request, submodelPath):
+    def lookupSubmodel(request, submodelPath):
         """Return an IModel implementor for the given submodel path
         string. This path may be any number of elements separated
         by /. The default implementation splits on "/" and calls
@@ -43,21 +43,21 @@
         need to override this behavior.
         """
 
-    def getSubmodel(self, request, submodelName):
+    def getSubmodel(request, submodelName):
         """Return an IModel implementor for the submodel named
         "submodelName". If this object contains simple data types,
         they can be adapted to IModel using
         model.adaptToIModel(m, parent, name) before returning.
         """
 
-    def setSubmodel(self, request, submodelName, data):
+    def setSubmodel(request, submodelName, data):
         """Set the given data as a submodel of this model. The data
         need not implement IModel, since getSubmodel should adapt
         the data to IModel before returning it.
         """
 
 
-class IView(components.Interface):
+class IView(Interface):
     """A MVC View"""
     def __init__(model, controller=None):
         """A view must be told what its model is, and may be told what its
@@ -98,7 +98,7 @@
         the given name.
         """
 
-    def setSubviewFactory(self, name, factory, setup=None):
+    def setSubviewFactory(name, factory, setup=None):
         """Set the callable "factory", which takes a model and should
         return a Widget, to be called by the default implementation of
         getSubview when the viewName "name" is present in the template.
@@ -132,7 +132,7 @@
         return default
 
 
-class IController(components.Interface):
+class IController(Interface):
     """A MVC Controller"""
     def setView(view):
         """Set the view that this controller is related to.
@@ -156,7 +156,7 @@
         for the given name.
         """
 
-    def setSubcontrollerFactory(self, name, factory):
+    def setSubcontrollerFactory(name, factory):
         """Set the callable "factory", which takes a model and should
         return an InputHandler, to be called by the default implementation of
         getSubview when the controllerName "name" is present in the template.
@@ -181,7 +181,7 @@
         return default
 
 
-class IWovenLivePage(components.Interface):
+class IWovenLivePage(Interface):
     def getCurrentPage():
         """Return the current page object contained in this session.
         """
Index: cred/perspective.py
===================================================================
--- cred/perspective.py	(revision 17005)
+++ cred/perspective.py	(working copy)
@@ -12,43 +12,43 @@
 
 """
 
-from twisted.python import log, reflect, components
+from twisted.python import log, reflect
 from twisted.cred import identity
-from zope import interface
+from zope.interface import implements, Interface
 import types
 
-class IPerspective(components.Interface):
-    def setIdentityName(self, name):
+class IPerspective(Interface):
+    def setIdentityName(name):
         """"""
     
-    def setIdentity(self, identity):
+    def setIdentity(identity):
         """"""
     
-    def makeIdentity(self, password):
+    def makeIdentity(password):
         """"""
     
-    def getPerspectiveName(self):
+    def getPerspectiveName():
         """"""
     
-    def getService(self):
+    def getService():
         """"""
     
-    def setService(self, service):
+    def setService(service):
         """"""
     
-    def getIdentityRequest(self):
+    def getIdentityRequest():
         """"""
     
-    def attached(self, reference, identity):
+    def attached(reference, identity):
         """"""
     
-    def detached(self, reference, identity):
+    def detached(reference, identity):
         """"""
     
-    def setCached(self):
+    def setCached():
         """"""
     
-    def isCached(self):
+    def isCached():
         """"""
 
 class Perspective:
@@ -60,7 +60,7 @@
     user for that service.
     """
     
-    interface.implements(IPerspective)
+    implements(IPerspective)
 
     _service_cached = 0 # Has my service cached me from a loaded store, or do I live in memory usually?
 
Index: cred/credentials.py
===================================================================
--- cred/credentials.py	(revision 17005)
+++ cred/credentials.py	(working copy)
@@ -4,14 +4,13 @@
 # See LICENSE for details.
 
 
-from twisted.python import components
-from zope import interface
+from zope.interface import implements, Interface
 
 import hmac
 import time
 import random
 
-class ICredentials(components.Interface):
+class ICredentials(Interface):
     """I check credentials.
 
     Implementors _must_ specify which sub-interfaces of ICredentials
@@ -32,7 +31,7 @@
     @ivar username: The username associated with these credentials.
     """
 
-    def checkPassword(self, password):
+    def checkPassword(password):
         """Validate these credentials against the correct password.
 
         @param password: The correct, plaintext password against which to
@@ -59,7 +58,7 @@
     @ivar password: The password associated with these credentials.
     """
 
-    def checkPassword(self, password):
+    def checkPassword(password):
         """Validate these credentials against the correct password.
 
         @param password: The correct, plaintext password against which to
@@ -76,7 +75,7 @@
 
 
 class CramMD5Credentials:
-    interface.implements(IUsernameHashedPassword)
+    implements(IUsernameHashedPassword)
 
     challenge = ''
     response = ''
@@ -110,7 +109,7 @@
 
 
 class UsernameHashedPassword:
-    interface.implements(IUsernameHashedPassword)
+    implements(IUsernameHashedPassword)
 
     def __init__(self, username, hashed):
         self.username = username
@@ -121,7 +120,7 @@
 
 
 class UsernamePassword:
-    interface.implements(IUsernamePassword)
+    implements(IUsernamePassword)
 
     def __init__(self, username, password):
         self.username = username
@@ -132,7 +131,7 @@
 
 
 class Anonymous:
-    interface.implements(IAnonymous)
+    implements(IAnonymous)
 
 
 class ISSHPrivateKey(ICredentials):
@@ -152,7 +151,7 @@
 
     """
 class SSHPrivateKey:
-    interface.implements(ISSHPrivateKey)
+    implements(ISSHPrivateKey)
     def __init__(self, username, algName, blob, sigData, signature):
         self.username = username
         self.algName = algName
@@ -177,7 +176,7 @@
     """
 
 class PluggableAuthenticationModules:
-    interface.implements(IPluggableAuthenticationModules)
+    implements(IPluggableAuthenticationModules)
     
     def __init__(self, username, pamConversion):
         self.username = username
Index: cred/service.py
===================================================================
--- cred/service.py	(revision 17005)
+++ cred/service.py	(working copy)
@@ -18,20 +18,20 @@
 """
 
 # Twisted Imports
-from twisted.python import log, components, reflect
+from twisted.python import log, reflect
 from twisted.internet import defer, app
 
 # Sibling Imports
 from perspective import IPerspective, Perspective
 
 # Zope interface Imports
-from zope import interface
+from zope.interface import implements, Interface
 
 # System Imports
 import types
 import warnings
 
-class IService(components.Interface):
+class IService(Interface):
     """An authorized service for internet applications.
     """
 
@@ -45,7 +45,7 @@
     @see: L{twisted.spread.pb.Service}
     """
 
-    interface.implements(IService)
+    implements(IService)
 
     # ugh, load order
     perspectiveClass = Perspective
Index: cred/portal.py
===================================================================
--- cred/portal.py	(revision 17005)
+++ cred/portal.py	(working copy)
@@ -10,17 +10,17 @@
 
 from twisted.internet import defer
 from twisted.internet.defer import maybeDeferred
-from twisted.python import failure, reflect, components
+from twisted.python import failure, reflect
 from twisted.cred import error
-from zope import interface
+from zope.interface import providedBy, Interface
 
 
-class IRealm(components.Interface):
+class IRealm(Interface):
     """
     The realm connects application-specific objects to the
     authentication system.
     """
-    def requestAvatar(self, avatarId, mind, *interfaces):
+    def requestAvatar(avatarId, mind, *interfaces):
         """Return avatar implementing one of the given interfaces.
 
         @param avatarId: a string that identifies an avatar, as returned by
@@ -102,7 +102,7 @@
         this will not be in connectionLost (such as in a web-based session), it
         will always be at the end of a user's interactive session.
         """
-        ifac = interface.providedBy(credentials)
+        ifac = providedBy(credentials)
         for i in ifac:
             c = self.checkers.get(i)
             if c is not None:
Index: cred/checkers.py
===================================================================
--- cred/checkers.py	(revision 17005)
+++ cred/checkers.py	(working copy)
@@ -6,10 +6,10 @@
 
 import os
 
-from zope import interface
+from zope.interface import implements, Interface
 
 from twisted.internet import defer
-from twisted.python import components, failure, log
+from twisted.python import failure, log
 from twisted.cred import error, credentials
 
 try:
@@ -17,14 +17,14 @@
 except ImportError: # PyPAM is missing
     pamauth = None
 
-class ICredentialsChecker(components.Interface):
+class ICredentialsChecker(Interface):
     """I check sub-interfaces of ICredentials.
 
     @cvar credentialInterfaces: A list of sub-interfaces of ICredentials which
     specifies which I may check.
     """
 
-    def requestAvatarId(self, credentials):
+    def requestAvatarId(credentials):
         """
         @param credentials: something which implements one of the interfaces in
         self.credentialInterfaces.
@@ -49,7 +49,7 @@
 
 
 class AllowAnonymousAccess:
-    interface.implements(ICredentialsChecker)
+    implements(ICredentialsChecker)
     credentialInterfaces = credentials.IAnonymous,
 
     def requestAvatarId(self, credentials):
@@ -67,7 +67,7 @@
     see L{FilePasswordDB}.
     """
 
-    interface.implements(ICredentialsChecker)
+    implements(ICredentialsChecker)
 
     credentialInterfaces = (credentials.IUsernamePassword,
         credentials.IUsernameHashedPassword)
@@ -107,7 +107,7 @@
     IUsernameHashedPassword credentials will be checkable as well.
     """
 
-    interface.implements(ICredentialsChecker)
+    implements(ICredentialsChecker)
 
     cache = False
     _credCache = None
@@ -242,7 +242,7 @@
                     ).addCallback(self._cbPasswordMatch, u)
 
 class PluggableAuthenticationModulesChecker:
-    interface.implements(ICredentialsChecker)
+    implements(ICredentialsChecker)
     credentialInterfaces = credentials.IPluggableAuthenticationModules,
     service = 'Twisted'
     
Index: test/crash_test_dummy.py
===================================================================
--- test/crash_test_dummy.py	(revision 17005)
+++ test/crash_test_dummy.py	(working copy)
@@ -4,7 +4,7 @@
 
 
 from twisted.python import components
-from zope import interface
+from zope.interface import implements, Interface
 
 def foo():
     return 2
@@ -21,11 +21,11 @@
 class XComponent(components.Componentized):
     pass
 
-class IX(components.Interface):
+class IX(Interface):
     pass
 
 class XA(components.Adapter):
-    interface.implements(IX)
+    implements(IX)
 
     def method(self):
         # Kick start :(
Index: test/test_components.py
===================================================================
--- test/test_components.py	(revision 17005)
+++ test/test_components.py	(working copy)
@@ -281,7 +281,7 @@
         o = object()
         a = Adept(o)
         self.assertRaises(components.CannotAdapt, IAdder, a)
-        self.assertEquals(IAdder(a, default=None), None)
+        self.assertEquals(IAdder(a, None), None)
 
     def testMultipleInterfaceRegistration(self):
         class IMIFoo(components.Interface):
Index: test/test_spread.py
===================================================================
--- test/test_spread.py	(revision 17005)
+++ test/test_spread.py	(working copy)
@@ -7,17 +7,16 @@
 Test cases for twisted.spread package
 """
 
-from zope.interface import implements
+from zope.interface import implements, Interface
 from twisted.trial import unittest
 
 from twisted.spread.util import LocalAsyncForwarder
 from twisted.internet import defer
-from twisted.python.components import Interface
 
 class IForwarded(Interface):
-    def forwardMe(self):
+    def forwardMe():
         pass
-    def forwardDeferred(self):
+    def forwardDeferred():
         pass
 
 class Forwarded:
@@ -43,7 +42,7 @@
         assert f.forwarded
         lf.callRemote("dontForwardMe")
         assert not f.unforwarded
-        rr = lf.callRemote("forwardDeferred")        
+        rr = lf.callRemote("forwardDeferred")
         l = []
         rr.addCallback(l.append)
         self.assertEqual(l[0], 1)
Index: test/test_newcred.py
===================================================================
--- test/test_newcred.py	(revision 17005)
+++ test/test_newcred.py	(working copy)
@@ -8,7 +8,7 @@
 from __future__ import generators
 
 import hmac
-from zope import interface
+from zope.interface import implements, Interface
 
 from twisted.trial import unittest
 from twisted.cred import portal, checkers, credentials, error
@@ -29,7 +29,7 @@
 else:
     from twisted.cred import pamauth
 
-class ITestable(components.Interface):
+class ITestable(Interface):
     pass
 
 class TestAvatar:
@@ -46,14 +46,14 @@
         self.loggedOut = True
 
 class Testable(components.Adapter):
-    interface.implements(ITestable)
+    implements(ITestable)
 
 # components.Interface(TestAvatar).adaptWith(Testable, ITestable)
 
 components.registerAdapter(Testable, TestAvatar, ITestable)
 
 class TestRealm:
-    interface.implements(portal.IRealm)
+    implements(portal.IRealm)
     def __init__(self):
         self.avatars = {}
 
Index: mail/test/test_mail.py
===================================================================
--- mail/test/test_mail.py	(revision 17005)
+++ mail/test/test_mail.py	(working copy)
@@ -15,7 +15,7 @@
 from twisted.trial import unittest
 import tempfile
 
-from zope.interface import providedBy
+from zope.interface import providedBy, Interface
 
 from twisted.trial import unittest
 from twisted.mail import smtp
@@ -28,7 +28,6 @@
 from twisted.internet import interfaces
 from twisted.internet.error import DNSLookupError, CannotListenError
 from twisted.internet import address
-from twisted.python import components
 from twisted.python import failure
 from twisted.python import util
 
@@ -380,7 +379,7 @@
         self.failUnless(cred.credentials.IUsernamePassword in creds[0].credentialInterfaces)
 
     def testRequestAvatar(self):
-        class ISomething(components.Interface):
+        class ISomething(Interface):
             pass
 
         self.D.addUser('user', 'password')
Index: mail/alias.py
===================================================================
--- mail/alias.py	(revision 17005)
+++ mail/alias.py	(working copy)
@@ -23,10 +23,9 @@
 from twisted.internet import protocol
 from twisted.internet import defer
 from twisted.internet import error
-from twisted.python import components
 from twisted.python import failure
 from twisted.python import log
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 
 def handle(result, line, filename, lineNo):
@@ -92,8 +91,8 @@
         result[u] = AliasGroup(a, domains, u)
     return result
 
-class IAlias(components.Interface):
-    def createMessageReceiver(self):
+class IAlias(Interface):
+    def createMessageReceiver():
         pass
 
 class AliasBase:
Index: mail/imap4.py
===================================================================
--- mail/imap4.py	(revision 17005)
+++ mail/imap4.py	(working copy)
@@ -26,7 +26,7 @@
 from twisted.internet import defer
 from twisted.internet import error
 from twisted.internet.defer import maybeDeferred
-from twisted.python import log, components, util, failure, text
+from twisted.python import log, util, failure, text
 from twisted.internet import interfaces
 
 from twisted import cred
@@ -45,7 +45,7 @@
 import random
 import types
 import sys
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 import email.Utils
 
@@ -421,10 +421,10 @@
 
 class IllegalMailboxEncoding(IMAP4Exception): pass
 
-class IMailboxListener(components.Interface):
+class IMailboxListener(Interface):
     """Interface for objects interested in mailbox events"""
 
-    def modeChanged(self, writeable):
+    def modeChanged(writeable):
         """Indicates that the write status of a mailbox has changed.
 
         @type writeable: C{bool}
@@ -432,7 +432,7 @@
         otherwise.
         """
 
-    def flagsChanged(self, newFlags):
+    def flagsChanged(newFlags):
         """Indicates that the flags of one or more messages have changed.
 
         @type newFlags: C{dict}
@@ -440,7 +440,7 @@
         now set on that message.
         """
 
-    def newMessages(self, exists, recent):
+    def newMessages(exists, recent):
         """Indicates that the number of messages in a mailbox has changed.
 
         @type exists: C{int} or C{None}
@@ -3984,14 +3984,14 @@
     return ''.join(pieces[1:])
 
 
-class IClientAuthentication(components.Interface):
-    def getName(self):
+class IClientAuthentication(Interface):
+    def getName():
         """Return an identifier associated with this authentication scheme.
 
         @rtype: C{str}
         """
 
-    def challengeResponse(self, secret, challenge):
+    def challengeResponse(secret, challenge):
         """Generate a challenge response string"""
 
 class CramMD5ClientAuthenticator:
@@ -4054,14 +4054,14 @@
         return 'Mailbox open in read-only state'
 
 
-class IAccount(components.Interface):
+class IAccount(Interface):
     """Interface for Account classes
 
     Implementors of this interface should consider implementing
     C{INamespacePresenter}.
     """
 
-    def addMailbox(self, name, mbox = None):
+    def addMailbox(name, mbox = None):
         """Add a new mailbox to this account
 
         @type name: C{str}
@@ -4081,7 +4081,7 @@
         is returned.
         """
 
-    def create(self, pathspec):
+    def create(pathspec):
         """Create a new mailbox from the given hierarchical name.
 
         @type pathspec: C{str}
@@ -4098,7 +4098,7 @@
         returned.
         """
 
-    def select(self, name, rw=True):
+    def select(name, rw=True):
         """Acquire a mailbox, given its name.
 
         @type name: C{str}
@@ -4114,7 +4114,7 @@
         specified mailbox may not be selected for any reason.
         """
 
-    def delete(self, name):
+    def delete(name):
         """Delete the mailbox with the specified name.
 
         @type name: C{str}
@@ -4129,7 +4129,7 @@
         This may also be raised asynchronously, if a C{Deferred} is returned.
         """
 
-    def rename(self, oldname, newname):
+    def rename(oldname, newname):
         """Rename a mailbox
 
         @type oldname: C{str}
@@ -4148,7 +4148,7 @@
         is returned.
         """
 
-    def isSubscribed(self, name):
+    def isSubscribed(name):
         """Check the subscription status of a mailbox
 
         @type name: C{str}
@@ -4160,7 +4160,7 @@
         whose callback will be invoked with one of these values.
         """
 
-    def subscribe(self, name):
+    def subscribe(name):
         """Subscribe to a mailbox
 
         @type name: C{str}
@@ -4176,7 +4176,7 @@
         C{Deferred} is returned.
         """
 
-    def unsubscribe(self, name):
+    def unsubscribe(name):
         """Unsubscribe from a mailbox
 
         @type name: C{str}
@@ -4192,7 +4192,7 @@
         C{Deferred} is returned.
         """
 
-    def listMailboxes(self, ref, wildcard):
+    def listMailboxes(ref, wildcard):
         """List all the mailboxes that meet a certain criteria
 
         @type ref: C{str}
@@ -4209,8 +4209,8 @@
         C{IMailboxInfo} or C{IMailbox}.  A Deferred may also be returned. 
         """
 
-class INamespacePresenter(components.Interface):
-    def getPersonalNamespaces(self):
+class INamespacePresenter(Interface):
+    def getPersonalNamespaces():
         """Report the available personal namespaces.
 
         Typically there should be only one personal namespace.  A common
@@ -4222,7 +4222,7 @@
         If no namespaces of this type exist, None should be returned.
         """
 
-    def getSharedNamespaces(self):
+    def getSharedNamespaces():
         """Report the available shared namespaces.
 
         Shared namespaces do not belong to any individual user but are
@@ -4234,7 +4234,7 @@
         If no namespaces of this type exist, None should be returned.
         """
 
-    def getUserNamespaces(self):
+    def getUserNamespaces():
         """Report the available user namespaces.
 
         These are namespaces that contain folders belonging to other users
@@ -4513,8 +4513,8 @@
 
     return result
 
-class IMessagePart(components.Interface):
-    def getHeaders(self, negate, *names):
+class IMessagePart(Interface):
+    def getHeaders(negate, *names):
         """Retrieve a group of message headers.
 
         @type names: C{tuple} of C{str}
@@ -4528,23 +4528,23 @@
         @return: A mapping of header field names to header field values
         """
 
-    def getBodyFile(self):
+    def getBodyFile():
         """Retrieve a file object containing only the body of this message.
         """
 
-    def getSize(self):
+    def getSize():
         """Retrieve the total size, in octets, of this message.
 
         @rtype: C{int}
         """
 
-    def isMultipart(self):
+    def isMultipart():
         """Indicate whether this message has subparts.
 
         @rtype: C{bool}
         """
 
-    def getSubPart(self, part):
+    def getSubPart(part):
         """Retrieve a MIME sub-message
 
         @type part: C{int}
@@ -4558,39 +4558,39 @@
         """
 
 class IMessage(IMessagePart):
-    def getUID(self):
+    def getUID():
         """Retrieve the unique identifier associated with this message.
         """
 
-    def getFlags(self):
+    def getFlags():
         """Retrieve the flags associated with this message.
 
         @rtype: C{iterable}
         @return: The flags, represented as strings.
         """
 
-    def getInternalDate(self):
+    def getInternalDate():
         """Retrieve the date internally associated with this message.
 
         @rtype: C{str}
         @return: An RFC822-formatted date string.
         """
 
-class IMessageFile(components.Interface):
+class IMessageFile(Interface):
     """Optional message interface for representing messages as files.
     
     If provided by message objects, this interface will be used instead
     the more complex MIME-based interface.
     """
-    def open(self):
+    def open():
         """Return an file-like object opened for reading.
 
         Reading from the returned file will return all the bytes
         of which this message consists.
         """
 
-class ISearchableMailbox(components.Interface):
-    def search(self, query, uid):
+class ISearchableMailbox(Interface):
+    def search(query, uid):
         """Search for messages that meet the given query criteria.
 
         If this interface is not implemented by the mailbox, L{IMailbox.fetch}
@@ -4612,8 +4612,8 @@
         invoked with such a list.
         """
 
-class IMessageCopier(components.Interface):
-    def copy(self, messageObject):
+class IMessageCopier(Interface):
+    def copy(messageObject):
         """Copy the given message object into this mailbox.
 
         The message object will be one which was previously returned by
@@ -4630,7 +4630,7 @@
         with the UID when the copy finishes.
         """
 
-class IMailboxInfo(components.Interface):
+class IMailboxInfo(Interface):
     """Interface specifying only the methods required for C{listMailboxes}.
 
     Implementations can return objects implementing only these methods for
@@ -4638,7 +4638,7 @@
     efficiently.
     """
 
-    def getFlags(self):
+    def getFlags():
         """Return the flags defined in this mailbox
 
         Flags with the \\ prefix are reserved for use as system flags.
@@ -4647,26 +4647,26 @@
         @return: A list of the flags that can be set on messages in this mailbox.
         """
 
-    def getHierarchicalDelimiter(self):
+    def getHierarchicalDelimiter():
         """Get the character which delimits namespaces for in this mailbox.
 
         @rtype: C{str}
         """
 
 class IMailbox(IMailboxInfo):
-    def getUIDValidity(self):
+    def getUIDValidity():
         """Return the unique validity identifier for this mailbox.
 
         @rtype: C{int}
         """
 
-    def getUIDNext(self):
+    def getUIDNext():
         """Return the likely UID for the next message added to this mailbox.
 
         @rtype: C{int}
         """
 
-    def getUID(self, message):
+    def getUID(message):
         """Return the UID of a message in the mailbox
 
         @type message: C{int}
@@ -4676,32 +4676,32 @@
         @return: The UID of the message.
         """
 
-    def getMessageCount(self):
+    def getMessageCount():
         """Return the number of messages in this mailbox.
 
         @rtype: C{int}
         """
 
-    def getRecentCount(self):
+    def getRecentCount():
         """Return the number of messages with the 'Recent' flag.
 
         @rtype: C{int}
         """
 
-    def getUnseenCount(self):
+    def getUnseenCount():
         """Return the number of messages with the 'Unseen' flag.
 
         @rtype: C{int}
         """
 
-    def isWriteable(self):
+    def isWriteable():
         """Get the read/write status of the mailbox.
 
         @rtype: C{int}
         @return: A true value if write permission is allowed, a false value otherwise.
         """
 
-    def destroy(self):
+    def destroy():
         """Called before this mailbox is deleted, permanently.
 
         If necessary, all resources held by this mailbox should be cleaned
@@ -4709,7 +4709,7 @@
         mailbox.
         """
 
-    def requestStatus(self, names):
+    def requestStatus(names):
         """Return status information about this mailbox.
 
         Mailboxes which do not intend to do any special processing to
@@ -4729,7 +4729,7 @@
         eventually be passed this dictionary is returned instead.
         """
 
-    def addListener(self, listener):
+    def addListener(listener):
         """Add a mailbox change listener
 
         @type listener: Any object which implements C{IMailboxListener}
@@ -4737,7 +4737,7 @@
         be notified when the contents of this mailbox change.
         """
 
-    def removeListener(self, listener):
+    def removeListener(listener):
         """Remove a mailbox change listener
 
         @type listener: Any object previously added to and not removed from
@@ -4748,7 +4748,7 @@
         this mailbox.
         """
 
-    def addMessage(self, message, flags = (), date = None):
+    def addMessage(message, flags = (), date = None):
         """Add the given message to this mailbox.
 
         @type message: A file-like object
@@ -4770,7 +4770,7 @@
         read-write.
         """
 
-    def expunge(self):
+    def expunge():
         """Remove all messages flagged \\Deleted.
 
         @rtype: C{list} or C{Deferred}
@@ -4781,7 +4781,7 @@
         read-write.
         """
 
-    def fetch(self, messages, uid):
+    def fetch(messages, uid):
         """Retrieve one or more messages.
 
         @type messages: C{MessageSet}
@@ -4796,7 +4796,7 @@
         implementors of C{IMessage}.
         """
 
-    def store(self, messages, flags, mode, uid):
+    def store(messages, flags, mode, uid):
         """Set the flags of one or more messages.
 
         @type messages: A MessageSet object with the list of messages requested
@@ -4825,13 +4825,13 @@
         read-write.
         """
 
-class ICloseableMailbox(components.Interface):
+class ICloseableMailbox(Interface):
     """A supplementary interface for mailboxes which require cleanup on close.
 
     Implementing this interface is optional.  If it is implemented, the protocol
     code will call the close method defined whenever a mailbox is closed.
     """
-    def close(self):
+    def close():
         """Close this mailbox.
 
         @return: A C{Deferred} which fires when this mailbox
Index: mail/pop3.py
===================================================================
--- mail/pop3.py	(revision 17005)
+++ mail/pop3.py	(working copy)
@@ -18,7 +18,7 @@
 import md5
 import warnings
 
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 from twisted.mail import smtp
 from twisted.protocols import basic
@@ -26,7 +26,6 @@
 from twisted.internet import task
 from twisted.internet import defer
 from twisted.internet import interfaces
-from twisted.python import components
 from twisted.python import log
 
 from twisted import cred
@@ -831,7 +830,7 @@
         raise cred.error.UnauthorizedLogin()
 
 
-class IServerFactory(components.Interface):
+class IServerFactory(Interface):
     """Interface for querying additional parameters of this POP3 server.
 
     Any cap_* method may raise NotImplementedError if the particular
@@ -844,28 +843,28 @@
     implementing C{IUsernameHashedPassword}.
     """
 
-    def cap_IMPLEMENTATION(self):
+    def cap_IMPLEMENTATION():
         """Return a string describing this POP3 server implementation."""
 
-    def cap_EXPIRE(self):
+    def cap_EXPIRE():
         """Return the minimum number of days messages are retained."""
 
-    def perUserExpiration(self):
+    def perUserExpiration():
         """Indicate whether message expiration is per-user.
 
         @return: True if it is, false otherwise.
         """
 
-    def cap_LOGIN_DELAY(self):
+    def cap_LOGIN_DELAY():
         """Return the minimum number of seconds between client logins."""
 
-    def perUserLoginDelay(self):
+    def perUserLoginDelay():
         """Indicate whether the login delay period is per-user.
 
         @return: True if it is, false otherwise.
         """
 
-class IMailbox(components.Interface):
+class IMailbox(Interface):
     """
     @type loginDelay: C{int}
     @ivar loginDelay: The number of seconds between allowed logins for the
@@ -876,7 +875,7 @@
     remain on the server before being deleted.
     """
 
-    def listMessages(self, index=None):
+    def listMessages(index=None):
         """Retrieve the size of one or more messages.
 
         @type index: C{int} or C{None}
@@ -895,7 +894,7 @@
         in the mailbox.
         """
 
-    def getMessage(self, index):
+    def getMessage(index):
         """Retrieve a file-like object for a particular message.
 
         @type index: C{int}
@@ -904,7 +903,7 @@
         @rtype: A file-like object
         """
 
-    def getUidl(self, index):
+    def getUidl(index):
         """Get a unique identifier for a particular message.
 
         @type index: C{int}
@@ -918,7 +917,7 @@
         in the mailbox.
         """
 
-    def deleteMessage(self, index):
+    def deleteMessage(index):
         """Delete a particular message.
 
         This must not change the number of messages in this mailbox.  Further
@@ -929,14 +928,14 @@
         @param index: The number of the message to delete.
         """
 
-    def undeleteMessages(self):
+    def undeleteMessages():
         """Undelete any messages possible.
 
         If a message can be deleted it, it should return it its original
         position in the message sequence and retain the same UIDL.
         """
 
-    def sync(self):
+    def sync():
         """Perform checkpointing.
 
         This method will be called to indicate the mailbox should attempt to
Index: mail/mail.py
===================================================================
--- mail/mail.py	(revision 17005)
+++ mail/mail.py	(working copy)
@@ -21,7 +21,7 @@
 
 # System imports
 import os
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 
 class DomainWithDefaultDict:
@@ -104,10 +104,10 @@
     def setdefault(self, key, default):
         return self.domains.setdefault(key, default)
 
-class IDomain(components.Interface):
+class IDomain(Interface):
     """An email domain."""
 
-    def exists(self, user):
+    def exists(user):
         """
         Check whether or not the specified user exists in this domain.
         
@@ -124,21 +124,21 @@
         user does not exist in this domain.
         """
 
-    def addUser(self, user, password):
+    def addUser(user, password):
         """Add a username/password to this domain."""
     
-    def startMessage(self, user):
+    def startMessage(user):
         """Create and return a new message to be delivered to the given user.
         
         DEPRECATED.  Implement validateTo() correctly instead.
         """
 
-    def getCredentialsCheckers(self):
+    def getCredentialsCheckers():
         """Return a list of ICredentialsChecker implementors for this domain.
         """
 
 class IAliasableDomain(IDomain):
-    def setAliasGroup(self, aliases):
+    def setAliasGroup(aliases):
         """Set the group of defined aliases for this domain
         
         @type aliases: C{dict}
@@ -146,7 +146,7 @@
         C{IAlias}
         """
     
-    def exists(self, user, memo=None):
+    def exists(user, memo=None):
         """
         Check whether or not the specified user exists in this domain.
         
Index: mail/smtp.py
===================================================================
--- mail/smtp.py	(revision 17005)
+++ mail/smtp.py	(working copy)
@@ -19,7 +19,6 @@
 from twisted.internet import reactor
 from twisted.internet.interfaces import ITLSTransport
 from twisted.python import log
-from twisted.python import components
 from twisted.python import util
 from twisted.python import reflect
 from twisted.python import failure
@@ -35,7 +34,7 @@
 import warnings
 import binascii
 import sys
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 try:
     from email.base64MIME import encode as encode_base64
@@ -59,8 +58,8 @@
 # Used for fast success code lookup
 SUCCESS = dict(map(None, range(200, 300), []))
 
-class IMessageDelivery(components.Interface):
-    def receivedHeader(self, helo, origin, recipients):
+class IMessageDelivery(Interface):
+    def receivedHeader(helo, origin, recipients):
         """
         Generate the Received header for a message
 
@@ -79,7 +78,7 @@
         @return: The full \"Received\" header string.
         """
 
-    def validateTo(self, user):
+    def validateTo(user):
         """
         Validate the address for which the message is destined.
 
@@ -96,7 +95,7 @@
         not to be accepted.
         """
 
-    def validateFrom(self, helo, origin):
+    def validateFrom(helo, origin):
         """
         Validate the address from which the message originates.
 
@@ -115,7 +114,7 @@
         not to be accepted.
         """
 
-class IMessageDeliveryFactory(components.Interface):
+class IMessageDeliveryFactory(Interface):
     """An alternate interface to implement for handling message delivery.
 
     It is useful to implement this interface instead of L{IMessageDelivery}
@@ -125,7 +124,7 @@
     something which cannot be done by L{IMessageDelivery} implementors
     due to their lack of information.
     """
-    def getMessageDelivery(self):
+    def getMessageDelivery():
         """Return an L{IMessageDelivery} object.
 
         This will be called once per message.
@@ -487,20 +486,20 @@
     def __str__(self):
         return str(self.dest)
 
-class IMessage(components.Interface):
+class IMessage(Interface):
     """Interface definition for messages that can be sent via SMTP."""
 
-    def lineReceived(self, line):
+    def lineReceived(line):
         """handle another line"""
 
-    def eomReceived(self):
+    def eomReceived():
         """handle end of message
 
         return a deferred. The deferred should be called with either:
         callback(string) or errback(error)
         """
 
-    def connectionLost(self):
+    def connectionLost():
         """handle message truncated
 
         semantics should be to discard the message
@@ -1619,14 +1618,14 @@
         return p
 
 
-class IClientAuthentication(components.Interface):
-    def getName(self):
+class IClientAuthentication(Interface):
+    def getName():
         """Return an identifier associated with this authentication scheme.
 
         @rtype: C{str}
         """
 
-    def challengeResponse(self, secret, challenge):
+    def challengeResponse(secret, challenge):
         """Generate a challenge response string"""
 
 
Index: internet/interfaces.py
===================================================================
--- internet/interfaces.py	(revision 17005)
+++ internet/interfaces.py	(working copy)
@@ -10,7 +10,7 @@
 Maintainer: U{Itamar Shtull-Trauring<mailto:twisted@itamarst.org>}
 """
 
-from twisted.python.components import Interface
+from zope.interface import Interface
 
 
 class IAddress(Interface):
@@ -28,20 +28,20 @@
     Each IConnector manages one connection.
     """
 
-    def stopConnecting(self):
+    def stopConnecting():
         """Stop attempting to connect."""
 
-    def disconnect(self):
+    def disconnect():
         """Disconnect regardless of the connection state.
 
         If we are connected, disconnect, if we are trying to connect,
         stop trying.
         """
 
-    def connect(self):
+    def connect():
         """Try to connect to remote address."""
 
-    def getDestination(self):
+    def getDestination():
         """Return destination this will try to connect to.
 
         This will be an IAddress implementing object.
@@ -49,7 +49,7 @@
 
 
 class IResolverSimple(Interface):
-    def getHostByName(self, name, timeout = (1, 3, 11, 45)):
+    def getHostByName(name, timeout = (1, 3, 11, 45)):
         """Resolve the domain name C{name} into an IP address.
 
         @type name: C{str}
@@ -68,82 +68,82 @@
         """
 
 class IResolver(IResolverSimple):
-    def lookupRecord(self, name, cls, type, timeout = 10):
+    def lookupRecord(name, cls, type, timeout = 10):
         """Lookup the records associated with the given name
            that are of the given type and in the given class.
         """
 
-    def query(self, query, timeout = 10):
+    def query(query, timeout = 10):
         """Interpret and dispatch a query object to the appropriate
         lookup* method.
         """
 
-    def lookupAddress(self, name, timeout = 10):
+    def lookupAddress(name, timeout = 10):
         """Lookup the A records associated with C{name}."""
 
-    def lookupAddress6(self, name, timeout = 10):
+    def lookupAddress6(name, timeout = 10):
         """Lookup all the A6 records associated with C{name}."""
 
-    def lookupIPV6Address(self, name, timeout = 10):
+    def lookupIPV6Address(name, timeout = 10):
         """Lookup all the AAAA records associated with C{name}."""
 
-    def lookupMailExchange(self, name, timeout = 10):
+    def lookupMailExchange(name, timeout = 10):
         """Lookup the MX records associated with C{name}."""
 
-    def lookupNameservers(self, name, timeout = 10):
+    def lookupNameservers(name, timeout = 10):
         """Lookup the the NS records associated with C{name}."""
 
-    def lookupCanonicalName(self, name, timeout = 10):
+    def lookupCanonicalName(name, timeout = 10):
         """Lookup the CNAME records associated with C{name}."""
 
-    def lookupMailBox(self, name, timeout = 10):
+    def lookupMailBox(name, timeout = 10):
         """Lookup the MB records associated with C{name}."""
 
-    def lookupMailGroup(self, name, timeout = 10):
+    def lookupMailGroup(name, timeout = 10):
         """Lookup the MG records associated with C{name}."""
 
-    def lookupMailRename(self, name, timeout = 10):
+    def lookupMailRename(name, timeout = 10):
         """Lookup the MR records associated with C{name}."""
 
-    def lookupPointer(self, name, timeout = 10):
+    def lookupPointer(name, timeout = 10):
         """Lookup the PTR records associated with C{name}."""
 
-    def lookupAuthority(self, name, timeout = 10):
+    def lookupAuthority(name, timeout = 10):
         """Lookup the SOA records associated with C{name}."""
 
-    def lookupNull(self, name, timeout = 10):
+    def lookupNull(name, timeout = 10):
         """Lookup the NULL records associated with C{name}."""
 
-    def lookupWellKnownServices(self, name, timeout = 10):
+    def lookupWellKnownServices(name, timeout = 10):
         """Lookup the WKS records associated with C{name}."""
 
-    def lookupHostInfo(self, name, timeout = 10):
+    def lookupHostInfo(name, timeout = 10):
         """Lookup the HINFO records associated with C{name}."""
 
-    def lookupMailboxInfo(self, name, timeout = 10):
+    def lookupMailboxInfo(name, timeout = 10):
         """Lookup the MINFO records associated with C{name}."""
 
-    def lookupText(self, name, timeout = 10):
+    def lookupText(name, timeout = 10):
         """Lookup the TXT records associated with C{name}."""
 
-    def lookupResponsibility(self, name, timeout = 10):
+    def lookupResponsibility(name, timeout = 10):
         """Lookup the RP records associated with C{name}."""
 
-    def lookupAFSDatabase(self, name, timeout = 10):
+    def lookupAFSDatabase(name, timeout = 10):
         """Lookup the AFSDB records associated with C{name}."""
 
-    def lookupService(self, name, timeout = 10):
+    def lookupService(name, timeout = 10):
         """Lookup the SRV records associated with C{name}."""
 
-    def lookupAllRecords(self, name, timeout = 10):
+    def lookupAllRecords(name, timeout = 10):
         """Lookup all records associated with C{name}."""
 
-    def lookupZone(self, name, timeout = 10):
+    def lookupZone(name, timeout = 10):
         """Perform a zone transfer for the given C{name}."""
 
 
 class IReactorArbitrary(Interface):
-    def listenWith(self, portType, *args, **kw):
+    def listenWith(portType, *args, **kw):
         """Start an instance of the given C{portType} listening.
 
         @type portType: type which implements L{IListeningPort}
@@ -151,7 +151,7 @@
         will be started listening.
         """
 
-    def connectWith(self, connectorType, *args, **kw):
+    def connectWith(connectorType, *args, **kw):
         """
         Start an instance of the given C{connectorType} connecting.
 
@@ -162,7 +162,7 @@
 
 class IReactorTCP(Interface):
 
-    def listenTCP(self, port, factory, backlog=50, interface=''):
+    def listenTCP(port, factory, backlog=50, interface=''):
         """Connects a given protocol factory to the given numeric TCP/IP port.
 
         @param port: a port number on which to listen
@@ -180,7 +180,7 @@
            number)
         """
 
-    def connectTCP(self, host, port, factory, timeout=30, bindAddress=None):
+    def connectTCP(host, port, factory, timeout=30, bindAddress=None):
         """Connect a TCP client.
 
         @param host: a host name
@@ -202,7 +202,7 @@
 
 class IReactorSSL(Interface):
 
-    def connectSSL(self, host, port, factory, contextFactory, timeout=30, bindAddress=None):
+    def connectSSL(host, port, factory, contextFactory, timeout=30, bindAddress=None):
         """Connect a client Protocol to a remote SSL socket.
 
         @param host: a host name
@@ -222,7 +222,7 @@
         @returns: an L{IConnector}.
         """
 
-    def listenSSL(self, port, factory, contextFactory, backlog=50, interface=''):
+    def listenSSL(port, factory, contextFactory, backlog=50, interface=''):
         """
         Connects a given protocol factory to the given numeric TCP/IP port.
         The connection is a SSL one, using contexts created by the context
@@ -244,7 +244,7 @@
 class IReactorUNIX(Interface):
     """UNIX socket methods."""
 
-    def connectUNIX(self, address, factory, timeout=30, checkPID=0):
+    def connectUNIX(address, factory, timeout=30, checkPID=0):
         """Connect a client protocol to a UNIX socket.
 
         @param address: a path to a unix socket on the filesystem.
@@ -260,7 +260,7 @@
         @returns: an L{IConnector}.
         """
 
-    def listenUNIX(self, address, factory, backlog=50, mode=0666, wantPID=0):
+    def listenUNIX(address, factory, backlog=50, mode=0666, wantPID=0):
         """Listen on a UNIX socket.
 
         @param address: a path to a unix socket on the filesystem.
@@ -278,7 +278,7 @@
 class IReactorUNIXDatagram(Interface):
     """datagram UNIX socket methods."""
 
-    def connectUNIXDatagram(self, address, protocol, maxPacketSize=8192, mode=0666, bindAddress=None):
+    def connectUNIXDatagram(address, protocol, maxPacketSize=8192, mode=0666, bindAddress=None):
         """Connect a client protocol to a datagram UNIX socket.
 
         @param address: a path to a unix socket on the filesystem.
@@ -292,7 +292,7 @@
         @param bindAddress: address to bind to
         """
 
-    def listenUNIXDatagram(self, address, protocol, maxPacketSize=8192, mode=0666):
+    def listenUNIXDatagram(address, protocol, maxPacketSize=8192, mode=0666):
         """Listen on a datagram UNIX socket.
 
         @param address: a path to a unix socket on the filesystem.
@@ -314,13 +314,13 @@
     without backwards compatability. Suggestions are welcome.
     """
 
-    def listenUDP(self, port, protocol, interface='', maxPacketSize=8192):
+    def listenUDP(port, protocol, interface='', maxPacketSize=8192):
         """Connects a given DatagramProtocol to the given numeric UDP port.
 
         @returns: object conforming to L{IListeningPort}.
         """
 
-    def connectUDP(self, remotehost, remoteport, protocol, localport=0,
+    def connectUDP(remotehost, remoteport, protocol, localport=0,
                   interface='', maxPacketSize=8192):
         """DEPRECATED.
 
@@ -335,7 +335,7 @@
     without backwards compatability. Suggestions are welcome.
     """
 
-    def listenMulticast(self, port, protocol, interface='', maxPacketSize=8192, listenMultiple=False):
+    def listenMulticast(port, protocol, interface='', maxPacketSize=8192, listenMultiple=False):
         """Connects a given L{DatagramProtocol<twisted.internet.protocol.DatagramProtocol>} to the given numeric UDP port.
 
         @param listenMultiple: boolean indicating whether multiple sockets can bind to same UDP port.
@@ -345,7 +345,7 @@
 
 class IReactorProcess(Interface):
 
-    def spawnProcess(self, processProtocol, executable, args=(), env={}, path=None, uid=None, gid=None, usePTY=0):
+    def spawnProcess(processProtocol, executable, args=(), env={}, path=None, uid=None, gid=None, usePTY=0):
         """Spawn a process, with a process protocol.
 
         @param processProtocol: a L{twisted.internet.protocol.ProcessProtocol} instance
@@ -386,7 +386,7 @@
     """Time methods that a Reactor should implement.
     """
 
-    def callLater(self, delay, callable, *args, **kw):
+    def callLater(delay, callable, *args, **kw):
         """Call a function later.
 
         @type delay:  C{float}
@@ -404,7 +404,7 @@
                   or C{reset()} methods.
         """
 
-    def cancelCallLater(self, callID):
+    def cancelCallLater(callID):
         """This method is deprecated.
 
         Cancel a call that would happen later.
@@ -415,7 +415,7 @@
             @raise ValueError: if the callID is not recognized.
         """
 
-    def getDelayedCalls(self):
+    def getDelayedCalls():
         """Retrieve a list of all delayed calls.
 
         @returns: A tuple of all L{IDelayedCall} objects that are currently
@@ -431,13 +431,13 @@
     suggestions are welcome.
     """
 
-    def getTime(self):
+    def getTime():
         """Get time when delayed call will happen.
 
         @returns: time in seconds since epoch (a float).
         """
 
-    def cancel(self):
+    def cancel():
         """Cancel the scheduled call.
 
         @raises twisted.internet.error.AlreadyCalled: if the call has already
@@ -446,7 +446,7 @@
             been cancelled.
         """
 
-    def delay(self, secondsLater):
+    def delay(secondsLater):
         """Delay the scheduled call.
         @param secondsLater: how many seconds from its current firing time to delay
 
@@ -456,10 +456,10 @@
             been cancelled.
         """
 
-    def reset(self, secondsFromNow):
+    def reset(secondsFromNow):
         """Reset the scheduled call's timer.
         @param secondsFromNow: how many seconds from now it should fire,
-            equivalent to C{self.cancel()} and then doing another
+            equivalent to C{.cancel()} and then doing another
             C{reactor.callLater(secondsLater, ...)}
 
         @raises twisted.internet.error.AlreadyCalled: if the call has already
@@ -468,7 +468,7 @@
             been cancelled.
         """
 
-    def active(self):
+    def active():
         """
         @returns: True if this call is still active, False if it has been
             called or cancelled.
@@ -480,11 +480,11 @@
     Internally, this should use a thread pool and dispatch methods to them.
     """
 
-    def callInThread(self, callable, *args, **kwargs):
+    def callInThread(callable, *args, **kwargs):
         """Run the callable object in a separate thread.
         """
 
-    def callFromThread(self, callable, *args, **kw):
+    def callFromThread(callable, *args, **kw):
         """Call a function from within another (i.e. non-reactor) thread.
 
         Use this method when you want to run a function in the reactor's thread
@@ -497,7 +497,7 @@
         use callLater with a delay of 0.)
         """
 
-    def suggestThreadPoolSize(self, size):
+    def suggestThreadPoolSize(size):
         """Suggest the size of the thread pool.
         """
 
@@ -506,22 +506,22 @@
     """Core methods that a Reactor must implement.
     """
 
-    def resolve(self, name, timeout=10):
+    def resolve(name, timeout=10):
         """Return a L{twisted.internet.defer.Deferred} that will resolve a hostname.
         """
 
 
-    def run(self):
+    def run():
         """Fire 'startup' System Events, move the reactor to the 'running'
         state, then run the main loop until it is stopped with stop() or
         crash().
         """
 
-    def stop(self):
+    def stop():
         """Fire 'shutdown' System Events, which will move the reactor to the
         'stopped' state and cause reactor.run() to exit. """
 
-    def crash(self):
+    def crash():
         """Stop the main loop *immediately*, without firing any system events.
 
         This is named as it is because this is an extremely "rude" thing to do;
@@ -530,7 +530,7 @@
         can become wedged in a pre-shutdown call.
         """
 
-    def iterate(self, delay=0):
+    def iterate(delay=0):
         """Run the main loop's I/O polling function for a period of time.
 
         This is most useful in applications where the UI is being drawn "as
@@ -544,14 +544,14 @@
         particular, you must not call it while the reactor is running.
         """
 
-    def fireSystemEvent(self, eventType):
+    def fireSystemEvent(eventType):
         """Fire a system-wide event.
 
         System-wide events are things like 'startup', 'shutdown', and
         'persist'.
         """
 
-    def addSystemEventTrigger(self, phase, eventType, callable, *args, **kw):
+    def addSystemEventTrigger(phase, eventType, callable, *args, **kw):
         """Add a function to be called when a system event occurs.
 
         Each "system event" in Twisted, such as 'startup', 'shutdown', and
@@ -585,13 +585,13 @@
                   removeSystemEventTrigger.
         """
 
-    def removeSystemEventTrigger(self, triggerID):
+    def removeSystemEventTrigger(triggerID):
         """Removes a trigger added with addSystemEventTrigger.
 
         @param triggerID: a value returned from addSystemEventTrigger.
         """
 
-    def callWhenRunning(self, callable, *args, **kw):
+    def callWhenRunning(callable, *args, **kw):
         """Call a function when the reactor is running.
 
         If the reactor has not started, the callable will be scheduled
@@ -612,7 +612,7 @@
 class IReactorPluggableResolver(Interface):
     """A reactor with a pluggable name resolver interface.
     """
-    def installResolver(self, resolver):
+    def installResolver(resolver):
         """Set the internal resolver to use to for name lookups.
 
         @type resolver: An object implementing the L{IResolverSimple} interface
@@ -629,7 +629,7 @@
     (or at least similarly opaque IDs returned from a .fileno() method)
     """
 
-    def addReader(self, reader):
+    def addReader(reader):
         """I add reader to the set of file descriptors to get read events for.
 
         @param reader: An L{IReadDescriptor} that will be checked for read events
@@ -637,7 +637,7 @@
         @returns: C{None}.
         """
 
-    def addWriter(self, writer):
+    def addWriter(writer):
         """I add writer to the set of file descriptors to get write events for.
 
         @param writer: An L{IWriteDescriptor} that will be checked for read events
@@ -645,19 +645,19 @@
         @returns: C{None}.
         """
 
-    def removeReader(self, reader):
+    def removeReader(reader):
         """Removes an L{IReadDescriptor} added with L{addReader}.
 
         @returns: C{None}.
         """
 
-    def removeWriter(self, writer):
+    def removeWriter(writer):
         """Removes an L{IWriteDescriptor} added with L{addWriter}.
 
         @returns: C{None}.
         """
 
-    def removeAll(self):
+    def removeAll():
         """Remove all readers and writers, and return the list of
         L{IReadDescriptor}s and L{IWriteDescriptor}s removed.
         
@@ -669,7 +669,7 @@
     """A listening port.
     """
 
-    def startListening(self):
+    def startListening():
         """Start listening on this port.
 
         @raise CannotListenError: as defined here L{twisted.internet.error.CannotListenError},
@@ -678,14 +678,14 @@
                                   the required port number)
         """
 
-    def stopListening(self):
+    def stopListening():
         """Stop listening on this port.
 
         If it does not complete immediately, will return Deferred that fires
         upon completion.
         """
 
-    def getHost(self):
+    def getHost():
         """Get the host that this port is listening for.
 
         @returns: a IAddress.
@@ -696,14 +696,14 @@
     """A file descriptor.
     """
 
-    def fileno(self):
+    def fileno():
         """fileno() -> int
 
         Returns: the platform-specified representation of a file-descriptor
         number.
         """
         
-    def connectionLost(self, reason):
+    def connectionLost(reason):
         """Called when the connection was lost.
 
         This is called when the connection on a selectable object has been
@@ -722,14 +722,14 @@
     
 class IReadDescriptor(IFileDescriptor):
 
-    def doRead(self):
+    def doRead():
         """Some data is available for reading on your descriptor.
         """
 
 
 class IWriteDescriptor(IFileDescriptor):
 
-    def doWrite(self):
+    def doWrite():
         """Some data is available for reading on your descriptor.
         """
 
@@ -752,7 +752,7 @@
 class ISystemHandle(Interface):
     """An object that wraps a networking OS-specific handle."""
 
-    def getHandle(self):
+    def getHandle():
         """Return a system- and reactor-specific handle.
 
         This might be a socket.socket() object, or some other type of
@@ -767,21 +767,21 @@
 class IConsumer(Interface):
     """A consumer consumes data from a producer."""
 
-    def registerProducer(self, producer, streaming):
+    def registerProducer(producer, streaming):
         """Register to receive data from a producer.
 
-        This sets self to be a consumer for a producer.  When this object
+        This sets  to be a consumer for a producer.  When this object
         runs out of data on a write() call, it will ask the producer
         to resumeProducing(). A producer should implement the L{IProducer}
         interface.   A push producer which is unable to pause or stop
         need not register or unregister.
         """
 
-    def unregisterProducer(self):
+    def unregisterProducer():
         """Stop consuming data from a producer, without disconnecting.
         """
 
-    def write(self, data):
+    def write(data):
         """The producer will write data by calling this method."""
 
 class IFinishableConsumer(IConsumer):
@@ -789,7 +789,7 @@
 
     This interface is semi-stable.
     """
-    def finish(self):
+    def finish():
         """The producer has finished producing."""
 
 class IProducer(Interface):
@@ -799,7 +799,7 @@
     object implementing L{IConsumer}.
     """
 
-    def stopProducing(self):
+    def stopProducing():
         """Stop producing data.
 
         This tells a producer that its consumer has died, so it must stop
@@ -818,16 +818,16 @@
     This interface is semi-stable.
     """
 
-    def pauseProducing(self):
+    def pauseProducing():
         """Pause producing data.
 
         Tells a producer that it has produced too much data to process for
         the time being, and to stop until resumeProducing() is called.
         """
-    def resumeProducing(self):
+    def resumeProducing():
         """Resume producing data.
 
-        This tells a producer to re-add itself to the main loop and produce
+        This tells a producer to re-add it to the main loop and produce
         more data for its consumer.
         """
 
@@ -839,7 +839,7 @@
     This interface is semi-stable.
     """
 
-    def resumeProducing(self):
+    def resumeProducing():
         """Produce data for the consumer a single time.
 
         This tells a producer to produce data for the consumer once
@@ -850,7 +850,7 @@
 
 class IProtocol(Interface):
 
-    def dataReceived(self, data):
+    def dataReceived(data):
         """Called whenever data is received.
 
         Use this method to translate to a higher-level message.  Usually, some
@@ -864,7 +864,7 @@
             differing chunk sizes, down to one byte at a time.
         """
 
-    def connectionLost(self, reason):
+    def connectionLost(reason):
         """Called when the connection is shut down.
 
         Clear any circular references here, and any external references
@@ -876,11 +876,11 @@
         @type reason: L{twisted.python.failure.Failure}
         """
 
-    def makeConnection(self, transport):
+    def makeConnection(transport):
         """Make a connection to a transport and a server.
         """
 
-    def connectionMade(self):
+    def connectionMade():
         """Called when a connection is made.
 
         This may be considered the initializer of the protocol, because
@@ -927,7 +927,7 @@
     """Interface for protocol factories.
     """
 
-    def buildProtocol(self, addr):
+    def buildProtocol(addr):
         """Called when a connection has been established to addr.
 
         If None is returned, the connection is assumed to have been refused,
@@ -940,10 +940,10 @@
         @rtype: None or L{IProtocol}.
         """
 
-    def doStart(self):
+    def doStart():
         """Called every time this is connected to a Port or Connector."""
 
-    def doStop(self):
+    def doStop():
         """Called every time this is unconnected from a Port or Connector."""
 
 
@@ -959,7 +959,7 @@
     indeterminate time.
     """
 
-    def write(self, data):
+    def write(data):
         """Write some data to the physical connection, in sequence, in a
         non-blocking fashion.
 
@@ -968,7 +968,7 @@
         before it all gets through.
         """
 
-    def writeSequence(self, data):
+    def writeSequence(data):
         """Write a list of strings to the physical connection.
 
         If possible, make sure that all of the data is written to
@@ -976,14 +976,14 @@
         single string.
         """
 
-    def loseConnection(self):
+    def loseConnection():
         """Close my connection, after writing all pending data.
 
         Note that if there is a registered producer on a transport it
         will not be closed until the producer has been unregistered.
         """
 
-    def getPeer(self):
+    def getPeer():
         '''Return an L{IAddress}.
 
         Treat this method with caution.  It is the unfortunate
@@ -993,7 +993,7 @@
         etcetera.
         '''
 
-    def getHost(self):
+    def getHost():
         """
         Similar to getPeer, but returns an address describing this side of the
         connection.
@@ -1003,7 +1003,7 @@
 class ITCPTransport(ITransport):
     """A TCP based transport."""
 
-    def loseWriteConnection(self):
+    def loseWriteConnection():
         """Half-close the write side of a TCP connection.
         
         If the protocol this is attached to implements
@@ -1013,29 +1013,29 @@
         and there is no registered producer.
         """
     
-    def getTcpNoDelay(self):
+    def getTcpNoDelay():
         """Return if TCP_NODELAY is enabled."""
 
-    def setTcpNoDelay(self, enabled):
+    def setTcpNoDelay(enabled):
         """Enable/disable TCP_NODELAY.
 
         Enabling TCP_NODELAY turns off Nagle's algorithm. Small packets are
         sent sooner, possibly at the expense of overall throughput."""
 
-    def getTcpKeepAlive(self):
+    def getTcpKeepAlive():
         """Return if SO_KEEPALIVE enabled."""
 
-    def setTcpKeepAlive(self, enabled):
+    def setTcpKeepAlive(enabled):
         """Enable/disable SO_KEEPALIVE.
 
         Enabling SO_KEEPALIVE sends packets periodically when the connection
         is otherwise idle, usually once every two hours. They are intended
         to allow detection of lost peers in a non-infinite amount of time."""
 
-    def getHost(self):
+    def getHost():
         """Returns IPv4Address."""
 
-    def getPeer(self):
+    def getPeer():
         """Returns IPv4Address."""
 
 
@@ -1045,7 +1045,7 @@
     Once TLS mode is started the transport will implement L{ISSLTransport}.
     """
 
-    def startTLS(self, contextFactory):
+    def startTLS(contextFactory):
         """Initiate TLS negotiation.
 
         @param contextFactory: A context factory (see L{ssl.py<twisted.internet.ssl>})
@@ -1054,7 +1054,7 @@
 class ISSLTransport(ITCPTransport):
     """A SSL/TLS based transport."""
 
-    def getPeerCertificate(self):
+    def getPeerCertificate():
         """Return an object with the peer's certificate info."""
 
 
@@ -1064,25 +1064,25 @@
     @ivar pid: The Process-ID of this process.
     """
 
-    def closeStdin(self):
+    def closeStdin():
         """Close stdin after all data has been written out."""
 
-    def closeStdout(self):
+    def closeStdout():
         """Close stdout."""
 
-    def closeStderr(self):
+    def closeStderr():
         """Close stderr."""
 
-    def closeChildFD(self, descriptor):
+    def closeChildFD(descriptor):
         """
         Close a file descriptor which is connected to the child process, identified
         by its FD in the child process.
         """
 
-    def loseConnection(self):
+    def loseConnection():
         """Close stdin, stderr and stdout."""
 
-    def signalProcess(self, signalID):
+    def signalProcess(signalID):
         """Send a signal to the process.
 
         @param signalID: can be
@@ -1101,24 +1101,24 @@
 class IServiceCollection(Interface):
     """An object which provides access to a collection of services."""
 
-    def getServiceNamed(self, serviceName):
+    def getServiceNamed(serviceName):
         """Retrieve the named service from this application.
 
         Raise a KeyError if there is no such service name.
         """
 
-    def addService(self, service):
+    def addService(service):
         """Add a service to this collection.
         """
 
-    def removeService(self, service):
+    def removeService(service):
         """Remove a service from this collection."""
 
 
 class IUDPTransport(Interface):
     """Transport for UDP DatagramProtocols."""
 
-    def write(self, packet, addr=None):
+    def write(packet, addr=None):
         """Write packet to given address.
 
         @param addr: a tuple of (ip, port). For connected transports must
@@ -1129,7 +1129,7 @@
         long.
         """
 
-    def connect(self, host, port):
+    def connect(host, port):
         """Connect the transport to an address.
 
         This changes it to connected mode. Datagrams can only be sent to
@@ -1141,10 +1141,10 @@
         @param port: port to connect to.
         """
     
-    def getHost(self):
+    def getHost():
         """Returns IPv4Address."""
 
-    def stopListening(self):
+    def stopListening():
         """Stop listening on this port.
 
         If it does not complete immediately, will return Deferred that fires
@@ -1155,66 +1155,66 @@
 class IUDPConnectedTransport(Interface):
     """DEPRECATED. Transport for UDP ConnectedPacketProtocols."""
 
-    def write(self, packet):
+    def write(packet):
         """Write packet to address we are connected to."""
 
-    def getHost(self):
+    def getHost():
         """Returns UNIXAddress."""
 
 
 class IUNIXDatagramTransport(Interface):
     """Transport for UDP PacketProtocols."""
 
-    def write(self, packet, address):
+    def write(packet, address):
         """Write packet to given address."""
 
-    def getHost(self):
+    def getHost():
         """Returns UNIXAddress."""
 
 
 class IUNIXDatagramConnectedTransport(Interface):
     """Transport for UDP ConnectedPacketProtocols."""
 
-    def write(self, packet):
+    def write(packet):
         """Write packet to address we are connected to."""
 
-    def getHost(self):
+    def getHost():
         """Returns UNIXAddress."""
 
-    def getPeer(self):
+    def getPeer():
         """Returns UNIXAddress."""
 
 
 class IMulticastTransport(Interface):
     """Additional functionality for multicast UDP."""
 
-    def getOutgoingInterface(self):
+    def getOutgoingInterface():
         """Return interface of outgoing multicast packets."""
 
-    def setOutgoingInterface(self, addr):
+    def setOutgoingInterface(addr):
         """Set interface for outgoing multicast packets.
 
         Returns Deferred of success.
         """
 
-    def getLoopbackMode(self):
+    def getLoopbackMode():
         """Return if loopback mode is enabled."""
 
-    def setLoopbackMode(self, mode):
+    def setLoopbackMode(mode):
         """Set if loopback mode is enabled."""
 
-    def getTTL(self):
+    def getTTL():
         """Get time to live for multicast packets."""
 
-    def setTTL(self, ttl):
+    def setTTL(ttl):
         """Set time to live on multicast packets."""
 
-    def joinGroup(self, addr, interface=""):
+    def joinGroup(addr, interface=""):
         """Join a multicast group. Returns Deferred of success or failure.
 
         If an error occurs, the returned Deferred will fail with
         L{error.MulticastJoinError}.
         """
 
-    def leaveGroup(self, addr, interface=""):
+    def leaveGroup(addr, interface=""):
         """Leave multicast group, return Deferred of success."""
Index: spread/flavors.py
===================================================================
--- spread/flavors.py	(revision 17005)
+++ spread/flavors.py	(working copy)
@@ -28,10 +28,10 @@
 
 # system imports
 import types
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 # twisted imports
-from twisted.python import log, reflect, components
+from twisted.python import log, reflect
 
 # sibling imports
 from jelly import setUnjellyableForClass, setUnjellyableForClassTree, setUnjellyableFactoryForClass, unjellyableRegistry
@@ -54,10 +54,10 @@
     """Raised if there is no such remote method"""
 
 
-class IPBRoot(components.Interface):
+class IPBRoot(Interface):
     """Factory for root Referenceable objects for PB servers."""
 
-    def rootObject(self, broker):
+    def rootObject(broker):
         """Return root Referenceable for broker."""
 
 
Index: spread/pb.py
===================================================================
--- spread/pb.py	(revision 17005)
+++ spread/pb.py	(working copy)
@@ -75,9 +75,9 @@
 from twisted.cred import authorizer, service, perspective, identity
 from twisted.cred.portal import Portal
 from twisted.persisted import styles
-from twisted.python.components import Interface, registerAdapter
+from twisted.python.components import registerAdapter
 
-from zope.interface import implements
+from zope.interface import implements, Interface
 
 # Sibling Imports
 from twisted.spread.interfaces import IJellyable, IUnjellyable
@@ -179,7 +179,7 @@
     needed.
     """
 
-    def perspectiveMessageReceived(self, broker, message, args, kwargs):
+    def perspectiveMessageReceived(broker, message, args, kwargs):
         """
         This method is called when a network message is received.
 
Index: spread/interfaces.py
===================================================================
--- spread/interfaces.py	(revision 17005)
+++ spread/interfaces.py	(working copy)
@@ -5,16 +5,16 @@
 will remain monolithic.
 """
 
-from twisted.python.components import Interface
+from zope.interface import Interface
 
 class IJellyable(Interface):
-    def jellyFor(self, jellier):
+    def jellyFor(jellier):
         """
         Jelly myself for jellier.
         """
 
 class IUnjellyable(Interface):
-    def unjellyFor(self, jellier):
+    def unjellyFor(jellier):
         """
         Unjelly myself for the jellier.
         """
