Index: twisted/web/test/test_webclient.py
===================================================================
--- twisted/web/test/test_webclient.py	(revision 13379)
+++ twisted/web/test/test_webclient.py	(working copy)
@@ -2,9 +2,9 @@
 # See LICENSE for details.
 
 
-from twisted.trial import unittest
+from twisted.trial import unittest, util as trial_util
 from twisted.web import server, static, client, error, util, resource
-from twisted.internet import reactor, defer, interfaces
+from twisted.internet import reactor, defer, interfaces, protocol
 from twisted.python.util import sibpath
 from twisted.python import components
 
@@ -261,6 +261,60 @@
         bytes = file(filename, "rb").read()
         self.assertEquals(bytes, expectedData)
 
+class AbortingProtocol(protocol.Protocol):
+    """
+    Protocol that aborts all connections immediately, for
+    AbortedConnectionsTestCase
+    """
+
+    def connectionMade(self):
+        self.transport.loseConnection()
+
+class AbortingFactory(protocol.ServerFactory):
+
+    protocol = AbortingProtocol
+
+from twisted.web.client import HTTPClientFactory
+
+class AbortedConnectionsTestCase(unittest.TestCase):
+
+    def setUp(self):
+        self.port = reactor.listenTCP(0, AbortingFactory())
+
+    def testConnectionLost(self):
+        """
+        Test that when twisted.web.client.HTTPPageGetter connects to an aborted
+        TCP connection that it reports an error, not a successful retrieval of
+        a zero length page
+        """
+        callBack = []
+        errBack = []
+
+        def _cb_success(data):
+            """
+            Called back if connection successful, should not be called
+            """
+            callBack.append(1)
+
+        def _cb_fail(data):
+            """
+            Called back if connection fails, should be called
+            """
+            errBack.append(1)
+
+        factory = HTTPClientFactory('http://localhost/',method='GET')
+        factory.deferred.addCallback(_cb_success)
+        factory.deferred.addErrback(_cb_fail)
+        reactor.connectTCP('127.0.0.1', self.port.getHost().port, factory)
+        trial_util.wait(factory.deferred)
+        # errback should have been called
+        self.failUnlessEqual(len(errBack), 1)
+        # callback should not have been called
+        self.failUnlessEqual(len(callBack), 0)
+
+    def tearDown(self):
+        return self.port.stopListening()
+
 class WebClientSSLTestCase(WebClientTestCase):
     def _listen(self, site):
         from twisted import test
