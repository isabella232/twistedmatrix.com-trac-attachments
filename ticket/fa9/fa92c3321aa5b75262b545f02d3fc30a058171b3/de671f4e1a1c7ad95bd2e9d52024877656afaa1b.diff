--- http.py	2007-07-26 13:21:30.000000000 -0400
+++ http.doc.py	2007-07-26 13:21:24.000000000 -0400
@@ -869,6 +869,9 @@
 
         This will either use the Host: header (if it is available) or the
         host we are listening on if the header is unavailable.
+        
+        @returns: the requested hostname
+        @rtype: str
         """
         return (self.getHeader('host') or
                 socket.gethostbyaddr(self.getHost()[1])[0]
@@ -904,12 +907,28 @@
         self.host = address.IPv4Address("TCP", host, port)
 
     def getClientIP(self):
+        """Return the IP address of the client who submitted this request.
+        
+        @returns: the client IP address
+        @rtype: str
+        """
         if isinstance(self.client, address.IPv4Address):
             return self.client.host
         else:
             return None
 
     def isSecure(self):
+        """Return True if this request is using a secure transport.
+        
+        Normally this method returns True if this request's HTTPChannel
+        instance is using a transport that implements ISSLTransport.
+        
+        This will also return True if setHost() has been called
+        with ssl=True.
+        
+        @returns: True if this request is secure
+        @rtype: bool
+        """
         if self._forceSSL:
             return True
         transport = getattr(getattr(self, 'channel', None), 'transport', None)
@@ -936,6 +955,13 @@
             self.user = self.password = ""
     
     def getUser(self):
+        """Return the HTTP user sent with this request, if any.
+        
+        If no user was supplied, return the empty string.
+        
+        @returns: the HTTP user, if any
+        @rtype: str
+        """
         try:
             return self.user
         except:
@@ -944,6 +970,13 @@
         return self.user
 
     def getPassword(self):
+        """Return the HTTP password sent with this request, if any.
+        
+        If no password was supplied, return the empty string.
+        
+        @returns: the HTTP password, if any
+        @rtype: str
+        """
         try:
             return self.password
         except:
