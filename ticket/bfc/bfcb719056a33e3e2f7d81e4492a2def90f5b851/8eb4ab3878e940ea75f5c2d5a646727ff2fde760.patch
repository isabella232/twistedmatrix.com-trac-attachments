diff --git docs/conch/man/conch.1 docs/conch/man/conch.1
index 7ba9bff..7178430 100644
--- docs/conch/man/conch.1
+++ docs/conch/man/conch.1
@@ -154,7 +154,7 @@ Log in using this username.
 .It Fl m Ar mac_spec
 Selects MAC (message authentication code) algorithms, as a comma-separated list in order of preference.  The list that
 .Nm
-supports is (in order of preference): hmac-sha1, hmac-md5.
+supports is (in order of preference): hmac-sha2-512, hmac-sha2-256, hmac-sha1, hmac-md5.
 .It Fl N
 Do not execute a shell or command.
 .It Fl n
diff --git twisted/conch/ssh/transport.py twisted/conch/ssh/transport.py
index 94c3845..a136476 100644
--- twisted/conch/ssh/transport.py
+++ twisted/conch/ssh/transport.py
@@ -14,7 +14,7 @@ Maintainer: Paul Swartz
 import struct
 import zlib
 import array
-from hashlib import md5, sha1
+from hashlib import md5, sha1, sha256, sha512
 import string
 import hmac
 
@@ -212,7 +212,8 @@ class SSHTransportBase(protocol.Protocol):
                         'aes128-ctr', 'aes128-cbc', 'cast128-ctr',
                         'cast128-cbc', 'blowfish-ctr', 'blowfish-cbc',
                         '3des-ctr', '3des-cbc'] # ,'none']
-    supportedMACs = ['hmac-sha1', 'hmac-md5'] # , 'none']
+    supportedMACs = ['hmac-sha2-512', 'hmac-sha2-256',
+                     'hmac-sha1', 'hmac-md5'] # , 'none']
     # both of the above support 'none', but for security are disabled by
     # default.  to enable them, subclass this class and add it, or do:
     #   SSHTransportBase.supportedCiphers.append('none')
@@ -1448,6 +1449,8 @@ class SSHCiphers:
         'none': (None, 0, False),
     }
     macMap = {
+        'hmac-sha2-512': sha512,
+        'hmac-sha2-256': sha256,
         'hmac-sha1': sha1,
         'hmac-md5': md5,
         'none': None
@@ -1522,15 +1525,16 @@ class SSHCiphers:
         mod = self.macMap[mac]
         if not mod:
             return (None, '', '', 0)
-        ds = mod().digest_size
+        digestSize = mod().digest_size
+        blockSize = mod().block_size
 
         # Truncation here appears to contravene RFC 2104, section 2.  However,
         # implementing the hashing behavior prescribed by the RFC breaks
         # interoperability with OpenSSH (at least version 5.5p1).
-        key = key[:ds] + ('\x00' * (64 - ds))
+        key = key[:digestSize] + ('\x00' * (blockSize - digestSize))
         i = string.translate(key, hmac.trans_36)
         o = string.translate(key, hmac.trans_5C)
-        result = _MACParams((mod,  i, o, ds))
+        result = _MACParams((mod, i, o, digestSize))
         result.key = key
         return result
 
diff --git twisted/conch/test/test_transport.py twisted/conch/test/test_transport.py
index 6566329..c42af0d 100644
--- twisted/conch/test/test_transport.py
+++ twisted/conch/test/test_transport.py
@@ -35,7 +35,7 @@ else:
         class SSHFactory:
             pass
 
-from hashlib import md5, sha1, sha256
+from hashlib import md5, sha1, sha256, sha512
 
 from twisted.trial import unittest
 from twisted.internet import defer
@@ -2026,6 +2026,32 @@ class GetMACTests(unittest.TestCase):
         self.opad = b''.join(chr(ord(b) ^ 0x5c) for b in self.key)
 
 
+    def test_hmacsha2512(self):
+        """
+        When L{SSHCiphers._getMAC} is called with the C{b"hmac-sha2-512"} MAC
+        algorithm name it returns a tuple of (sha512 digest object, inner pad,
+        outer pad, sha512 digest size) with a C{key} attribute set to the
+        value of the key supplied.
+        """
+        params = self.ciphers._getMAC(b"hmac-sha2-512", self.key)
+        self.assertEqual(
+            (sha512, self.ipad, self.opad, sha512().digest_size, self.key),
+            params + (params.key,))
+
+
+    def test_hmacsha2256(self):
+        """
+        When L{SSHCiphers._getMAC} is called with the C{b"hmac-sha2-256"} MAC
+        algorithm name it returns a tuple of (sha256 digest object, inner pad,
+        outer pad, sha256 digest size) with a C{key} attribute set to the
+        value of the key supplied.
+        """
+        params = self.ciphers._getMAC(b"hmac-sha2-256", self.key)
+        self.assertEqual(
+            (sha256, self.ipad, self.opad, sha256().digest_size, self.key),
+            params + (params.key,))
+
+
     def test_hmacsha1(self):
         """
         When L{SSHCiphers._getMAC} is called with the C{b"hmac-sha1"} MAC
@@ -2039,7 +2065,7 @@ class GetMACTests(unittest.TestCase):
             params + (params.key,))
 
 
-    def test_md5sha1(self):
+    def test_hmacmd5(self):
         """
         When L{SSHCiphers._getMAC} is called with the C{b"hmac-md5"} MAC
         algorithm name it returns a tuple of (md5 digest object, inner pad,
diff --git twisted/conch/topfiles/8108.feature twisted/conch/topfiles/8108.feature
new file mode 100644
index 0000000..3a7be3d
--- /dev/null
+++ twisted/conch/topfiles/8108.feature
@@ -0,0 +1 @@
+twisted.conch.ssh now supports the hmac-sha2-256 and hmac-sha2-512 MAC algorithms.
