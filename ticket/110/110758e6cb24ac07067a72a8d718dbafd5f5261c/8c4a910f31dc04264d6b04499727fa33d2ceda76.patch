Index: twisted/mail/test/test_options.py
===================================================================
--- twisted/mail/test/test_options.py	(revision 30883)
+++ twisted/mail/test/test_options.py	(working copy)
@@ -8,9 +8,11 @@
 from twisted.trial.unittest import TestCase
 
 from twisted.python.usage import UsageError
+from twisted.mail import tap
 from twisted.mail.tap import Options
 from twisted.python import deprecate
 from twisted.python import versions
+from twisted.internet import endpoints
 
 
 class OptionsTestCase(TestCase):
@@ -59,3 +61,92 @@
         self.assertEquals(warnings[0]['message'], msg)
 
 
+    def testBarePortDeprecation(self):
+        """
+        Test that bare ports cause a deprecation warning.
+        """
+        endpoint = tap.toEndpoint("8110")
+        warnings = self.flushWarnings([self.testBarePortDeprecation])
+        self.assertEquals(len(warnings), 1)
+        self.assertEquals(warnings[0]['category'], DeprecationWarning)
+
+    def testBarePort(self):
+        """
+        Test that bare port results in a TCP4ServerEndpoint
+        """
+        options = Options()
+        options.parseOptions(['--pop3', '8110'])
+        self.assertEquals(len(options['pop3']), 1)
+        self.failUnlessIsInstance(options['pop3'][0],
+                    endpoints.TCP4ServerEndpoint)
+
+    def testStrport(self):
+        """
+        Test that a tcp strport results in a TCP4ServerEndpoint
+        """
+        options = Options()
+        options.parseOptions(['--smtp', 'tcp:8025'])
+        self.assertEquals(len(options['smtp']), 1)
+        self.failUnlessIsInstance(options['smtp'][0],
+                    endpoints.TCP4ServerEndpoint)
+
+    def testProtoDefaults(self):
+        """
+        Test that a tcp strport results in a TCP4ServerEndpoint
+        """
+        options = Options()
+        options.parseOptions([])
+
+        self.assertEquals(len(options['pop3']), 1)
+        self.failUnlessIsInstance(options['pop3'][0],
+                    endpoints.TCP4ServerEndpoint)
+
+        self.assertEquals(len(options['smtp']), 1)
+        self.failUnlessIsInstance(options['smtp'][0],
+                    endpoints.TCP4ServerEndpoint)
+
+    def testProtoDisable(self):
+        """
+        Make sure that passing a bare 0 disables a protocol
+        """
+        options = Options()
+        options.parseOptions(['--pop3', '0'])
+        self.failUnlessIdentical(options['pop3'], tap.PROTO_DISABLED)
+
+    def testAllProtosDisabledError(self):
+        """
+        Make sure an error occurs when all protocols are disabled
+        """
+        options = Options()
+        self.assertRaises(UsageError, options.parseOptions,
+                           (['--pop3', '0', '--smtp', '0']))
+
+    def testPop3sBackwardCompatibility(self):
+        """
+        Make sure that passing a bare 0 disables a protocol
+        """
+        options = Options()
+        options.parseOptions(['--pop3s', '8995',
+                              '--certificate', '/dev/null'])
+        self.assertEquals(len(options['pop3']), 2)
+        self.failUnlessIsInstance(options['pop3'][0],
+                                  endpoints.TCP4ServerEndpoint)
+        self.failUnlessIsInstance(options['pop3'][1],
+                                  endpoints.SSL4ServerEndpoint)
+
+    def testPop3sOnlyBackwardCompatibility(self):
+        """
+        Make sure that passing a bare 0 disables a protocol
+        """
+        options = Options()
+        options.parseOptions(['--pop3', '0',
+                              '--pop3s', '8995',
+                              '--certificate', '/dev/null'])
+        self.assertEquals(len(options['pop3']), 1)
+        self.failUnlessIsInstance(options['pop3'][0],
+                                  endpoints.SSL4ServerEndpoint)
+ 
+
+
+
+
Index: twisted/mail/tap.py
===================================================================
--- twisted/mail/tap.py	(revision 30883)
+++ twisted/mail/tap.py	(working copy)
@@ -16,6 +16,11 @@
 from twisted.mail import relaymanager
 from twisted.mail import alias
 
+from twisted.mail.protocols import SSLContextFactory
+
+from twisted.internet import reactor
+from twisted.internet import endpoints
+
 from twisted.python import usage
 from twisted.python import deprecate
 from twisted.python import versions
@@ -26,24 +31,41 @@
 from twisted.application import internet
 
 
+PROTO_DISABLED = object()
+
+
 class Options(usage.Options, strcred.AuthOptionMixin):
     synopsis = "[options]"
 
     optParameters = [
-        ["pop3", "p", 8110, "Port to start the POP3 server on (0 to disable).", usage.portCoerce],
-        ["pop3s", "S", 0, "Port to start the POP3-over-SSL server on (0 to disable).", usage.portCoerce],
-        ["smtp", "s", 8025, "Port to start the SMTP server on (0 to disable).", usage.portCoerce],
-        ["certificate", "c", None, "Certificate file to use for SSL connections"],
+        ["pop3s", "S", 0,
+            """Port to start the POP3-over-SSL server on (0 to disable).
+               DEPRECATED: use '--pop3 ssl:port:privateKey=cert.pem'"""],
+
+        ["certificate", "c", None,
+            """Certificate file to use for SSL connections
+               DEPRECATED: use strports instead."""],
+
         ["relay", "R", None,
-            "Relay messages according to their envelope 'To', using the given"
-            "path as a queue directory."],
-        ["hostname", "H", None, "The hostname by which to identify this server."],
+            """Relay messages according to their envelope 'To', using
+               the given path as a queue directory."""],
+
+        ["hostname", "H", None,
+            """The hostname by which to identify this server."""],
     ]
 
     optFlags = [
-        ["esmtp", "E", "Use RFC 1425/1869 SMTP extensions"],
-        ["disable-anonymous", None, "Disallow non-authenticated SMTP connections"],
+        ["esmtp", "E",
+            """Use RFC 1425/1869 SMTP extensions"""],
+        ["disable-anonymous", None,
+            """Disallow non-authenticated SMTP connections"""],
     ]
+
+    protoDefaults = {
+        "pop3": [endpoints.TCP4ServerEndpoint(reactor, 8110)],
+        "smtp": [endpoints.TCP4ServerEndpoint(reactor, 8025)],
+    }
+
     zsh_actions = {"hostname" : "_hosts"}
 
     longdesc = "This creates a mail.tap file that can be used by twistd."
@@ -52,11 +74,58 @@
         usage.Options.__init__(self)
         self.service = mail.MailService()
         self.last_domain = None
+        self['pop3'] = self.protoDefaults['pop3']
+        self['smtp'] = self.protoDefaults['smtp']
 
+
+    def addEndpoint(self, service, description, certificate=None): 
+        """ 
+        Given a 'service' (pop3 or smtp), add an endpoint.
+        """ 
+        if self[service] is PROTO_DISABLED: 
+            return 
+        if description == '0': 
+            self[service] = PROTO_DISABLED 
+        else: 
+            if self[service] is self.protoDefaults[service]: 
+                self[service] = [] 
+            self[service].append(toEndpoint(description,
+                    certificate=certificate)) 
+
+ 
+    def opt_pop3(self, description): 
+        """ 
+        Add a pop3 port listener on the specified strport.  You can
+        multiple ports. A bare TCP port number can be specified, but
+        should be considered deprecated. [SSL Example:
+        ssl:8995:privateKey=mycert.pem] [default: tcp:8110] Note:
+        Just one instance of --pop3 0 disables all pop3 ports. 
+        """ 
+        self.addEndpoint('pop3', description) 
+    opt_p = opt_pop3 
+ 
+
+    def opt_smtp(self, description): 
+        """ 
+        Add an smtp port listener on the specified strport.  You can
+        listen on multiple ports by specifying multiple --smtp options
+        A bare TCP port number can be specified, but should be
+        considered deprecated.  [SSL Example:
+        ssl:8465:privateKey=mycert.pem] [default: tcp:8025]
+        Note: Just one instance of --smtp 0 disables all smtp ports.
+        NOTE: Using the --certificate option causes ALL bare smtp ports
+        to use SSL.  Don't use the deprecated --certificate option if
+        you want to mix-and-match. 
+        """ 
+        self.addEndpoint('smtp', description) 
+    opt_s = opt_smtp 
+ 
+
     def opt_passwordfile(self, filename):
         """
         Specify a file containing username:password login info for
-        authenticated ESMTP connections. (DEPRECATED; see --help-auth instead)
+        authenticated ESMTP connections. (DEPRECATED; see --help-auth
+        instead)
         """
         ch = checkers.OnDiskUsernamePasswordDatabase(filename)
         self.service.smtpPortal.registerChecker(ch)
@@ -132,11 +201,22 @@
             elif not os.path.exists(self['certificate']):
                 raise usage.UsageError("Certificate file %r does not exist."
                                        % self['certificate'])
+            else:
+                # someone could specify --pop3 0 --pop3s 8995
+                # or just --pop3s 8995 so this is to maintain
+                # backward compatibility
+                if self['pop3'] is PROTO_DISABLED:
+                    self['pop3'] = []
+                else:
+                    self['pop3'] = list(self['pop3'])
+                self.addEndpoint('pop3', self['pop3s'],
+                        certificate=self['certificate'])
 
         if not self['disable-anonymous']:
             self.service.smtpPortal.registerChecker(checkers.AllowAnonymousAccess())
 
-        if not (self['pop3'] or self['smtp'] or self['pop3s']):
+        if (self['pop3'] is PROTO_DISABLED and
+                self['smtp'] is PROTO_DISABLED):
             raise usage.UsageError("You cannot disable all protocols")
 
 class AliasUpdater:
@@ -146,6 +226,27 @@
     def __call__(self, new):
         self.domain.setAliasGroup(alias.loadAliasFile(self.domains, new))
 
+
+def toEndpoint(description, certificate=None):
+    """
+    Tries to guess whether a description is a bare TCP port or a strport.
+    If a bare port is specified and a certificate file is present, returns
+    an SSL4ServerEndpoint and otherwise returns a TCP4ServerEndpoint.
+    """
+    try:
+        port = int(description)
+    except ValueError:
+        return endpoints.serverFromString(reactor, description)
+
+    warnings.warn("Specifying plain ports and/or a certificate is "
+                  "DEPRECATED; use strport descriptions instead.",
+                  DeprecationWarning, stacklevel=2)
+    if certificate:
+        ctx = SSLContextFactory(certificate)
+        return endpoints.SSL4ServerEndpoint(reactor, port, ctx)
+    return endpoints.TCP4ServerEndpoint(reactor, port)
+
+
 def makeService(config):
     if config['esmtp']:
         rmType = relaymanager.SmartHostESMTPRelayingManager
@@ -171,26 +272,19 @@
         helper.setServiceParent(config.service)
         config.service.domains.setDefaultDomain(default)
 
-    ctx = None
-    if config['certificate']:
-        from twisted.mail.protocols import SSLContextFactory
-        ctx = SSLContextFactory(config['certificate'])
+    if config['pop3'] is not PROTO_DISABLED:
+        f = config.service.getPOP3Factory()
+        for endpoint in config['pop3']:
+            endpoint.listen(f)
 
-    if config['pop3']:
-        s = internet.TCPServer(config['pop3'], config.service.getPOP3Factory())
-        s.setServiceParent(config.service)
-    if config['pop3s']:
-        s = internet.SSLServer(config['pop3s'],
-                               config.service.getPOP3Factory(), ctx)
-        s.setServiceParent(config.service)
-    if config['smtp']:
+    if config['smtp'] is not PROTO_DISABLED:
         f = smtpFactory()
-        f.context = ctx
         if config['hostname']:
             f.domain = config['hostname']
             f.fArgs = (f.domain,)
         if config['esmtp']:
             f.fArgs = (None, None) + f.fArgs
-        s = internet.TCPServer(config['smtp'], f)
-        s.setServiceParent(config.service)
+        for endpoint in config['smtp']:
+            endpoint.listen(f)
+
     return config.service
