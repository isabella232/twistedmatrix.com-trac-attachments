--- socks.py	2007-08-18 15:52:21.000000000 +0100
+++ orig/socks.py	2007-08-19 17:10:24.000000000 +0100
@@ -69,36 +69,32 @@
             self.otherConn.write(data)
             return
         self.buf=self.buf+data
-        try:
-            idx1 = self.buf.index('\000', 8)
-            if self.buf[4:7] == "\000\000\000":
-                idx2 = self.buf.index('\000', idx1+1)
-        except ValueError:
-            return
-
-        head,user,self.buf=self.buf[:8],self.buf[8:idx1],self.buf[idx1+1:]
-        try:
-            version,code,port=struct.unpack("!BBH",head[:4])
-        except struct.error:
-            raise RuntimeError, "struct error with head='%s' and buf='%s'"%(repr(head),repr(self.buf))
-        if idx2:
-            server,self.buf=string.split(self.buf,'\000',1)
-        else:
-            server=socket.inet_ntoa(head[4:8])
-        assert version==4, "Bad version code: %s"%version
-        if not self.authorize(code,server,port,user):
-            self.makeReply(91)
-            return
-        if code==1: # CONNECT
-            d = self.connectClass(server, port, SOCKSv4Outgoing, self)
-            d.addErrback(lambda result, self=self: self.makeReply(91))
-        elif code==2: # BIND
-            ip = socket.gethostbyname(server)
-            d = self.listenClass(0, SOCKSv4IncomingFactory, self, ip)
-            d.addCallback(lambda (h, p), self=self: self.makeReply(90, 0, p, h))
-        else:
-            raise RuntimeError, "Bad Connect Code: %s" % code
-        assert self.buf=="","hmm, still stuff in buffer... %s" % repr(self.buf)
+        if '\000' in self.buf[8:]:
+            head,self.buf=self.buf[:8],self.buf[8:]
+            try:
+                version,code,port=struct.unpack("!BBH",head[:4])
+            except struct.error:
+                raise RuntimeError, "struct error with head='%s' and buf='%s'"%(repr(head),repr(self.buf))
+            user,self.buf=string.split(self.buf,"\000",1)
+            if head[4:7]=="\000\000\000": # domain is after
+                server,self.buf=string.split(self.buf,'\000',1)
+                #server=gethostbyname(server)
+            else:
+                server=socket.inet_ntoa(head[4:8])
+            assert version==4, "Bad version code: %s"%version
+            if not self.authorize(code,server,port,user):
+                self.makeReply(91)
+                return
+            if code==1: # CONNECT
+                d = self.connectClass(server, port, SOCKSv4Outgoing, self)
+                d.addErrback(lambda result, self=self: self.makeReply(91))
+            elif code==2: # BIND
+                ip = socket.gethostbyname(server)
+                d = self.listenClass(0, SOCKSv4IncomingFactory, self, ip)
+                d.addCallback(lambda (h, p), self=self: self.makeReply(90, 0, p, h))
+            else:
+                raise RuntimeError, "Bad Connect Code: %s" % code
+            assert self.buf=="","hmm, still stuff in buffer... %s" % repr(self.buf)
 
     def connectionLost(self, reason):
         if self.otherConn:

