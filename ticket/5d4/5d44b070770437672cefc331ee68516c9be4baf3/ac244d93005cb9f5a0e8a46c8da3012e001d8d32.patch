Index: twisted/internet/address.py
===================================================================
--- twisted/internet/address.py	(revision 38687)
+++ twisted/internet/address.py	(working copy)
@@ -77,6 +77,12 @@
         IPv6 address; for example, "::1".
     @type host: C{str}
     """
+    def __init__(self, type, host, port, flowinfo, scopeId, _bwHack=None):
+        _IPAddress.__init__(self, type, host, port)
+        if _bwHack is not None:
+            warnings.warn("twisted.internet.address.IPv4Address._bwHack "
+                          "is deprecated since Twisted 11.0",
+                          DeprecationWarning, stacklevel=2)
 
 
 
Index: twisted/internet/udp.py
===================================================================
--- twisted/internet/udp.py	(revision 38687)
+++ twisted/internet/udp.py	(working copy)
@@ -80,6 +80,7 @@
         self.interface = interface
         self.setLogStr()
         self._connectedAddr = None
+        self.setAddressFamily()
 
     def __repr__(self):
         if self._realPortNumber is not None:
@@ -207,7 +208,7 @@
         """
         if self._connectedAddr:
             raise RuntimeError("already connected, reconnecting is not currently supported")
-        if not abstract.isIPAddress(host):
+        if not abstract.isIPAddress(host) and not abstract.isIPv6Address(host):
             raise ValueError("please pass only IP addresses, not domain names")
         self._connectedAddr = (host, port)
         self.socket.connect((host, port))
@@ -252,7 +253,20 @@
         logPrefix = self._getLogPrefix(self.protocol)
         self.logstr = "%s (UDP)" % logPrefix
 
+    def setAddressFamily(self):
+        """
+        Resolve address family for the socket.
+        """
+        if abstract.isIPv6Address(self.interface):
+            if not socket.has_ipv6:
+                raise RuntimeError("IPV6 is not supported, "+\
+                                       "compile with ipv6 support")
+            self.addressFamily = socket.AF_INET6
+        else:
+            self.addressFamily = socket.AF_INET
+        
 
+
     def logPrefix(self):
         """
         Return the prefix to log with.
@@ -262,11 +276,14 @@
 
     def getHost(self):
         """
-        Returns an IPv4Address.
+        Returns an IPv4Address or IPv6Address.
 
         This indicates the address from which I am connecting.
         """
-        return address.IPv4Address('UDP', *self.socket.getsockname())
+        if self.addressFamily == socket.AF_INET:
+            return address.IPv4Address('UDP', *self.socket.getsockname())
+        else:
+            return address.IPv6Address('UDP', *self.socket.getsockname())
 
 
 
