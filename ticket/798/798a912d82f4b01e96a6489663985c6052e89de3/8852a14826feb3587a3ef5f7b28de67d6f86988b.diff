Index: interfaces.py
===================================================================
--- interfaces.py	(revision 25634)
+++ interfaces.py	(working copy)
@@ -800,8 +800,7 @@
 
 class IReactorFDSet(Interface):
     """
-    Implement me to be able to use
-    L{FileDescriptor<twisted.internet.abstract.FileDescriptor>} type resources.
+    Implement me to be able to use L{IFileDescriptor} type resources.
 
     This assumes that your main-loop uses UNIX-style numeric file descriptors
     (or at least similarly opaque IDs returned from a .fileno() method)
@@ -917,12 +916,12 @@
 
 class IFileDescriptor(ILoggingContext):
     """
-    A file descriptor.
+    An interface representing a UNIX-style numeric file descriptor.
     """
 
     def fileno():
         """
-        @return: The platform-specified representation of a file-descriptor
+        @return: The platform-specified representation of a file descriptor
                  number.
         """
 
@@ -944,8 +943,14 @@
                        failure may be of other classes as well.
         """
 
+
 class IReadDescriptor(IFileDescriptor):
+    """
+    An L{IFileDescriptor} that can read.
 
+    This interface is generally used in conjunction with L{IReactorFDSet}.
+    """
+
     def doRead():
         """
         Some data is available for reading on your descriptor.
@@ -953,7 +958,12 @@
 
 
 class IWriteDescriptor(IFileDescriptor):
+    """
+    An L{IFileDescriptor} that can write.
 
+    This interface is generally used in conjunction with L{IReactorFDSet}.
+    """
+
     def doWrite():
         """
         Some data can be written to your descriptor.
@@ -962,8 +972,7 @@
 
 class IReadWriteDescriptor(IReadDescriptor, IWriteDescriptor):
     """
-    I am a L{FileDescriptor<twisted.internet.abstract.FileDescriptor>} that
-    can both read and write.
+    An L{IFileDescriptor} that can both read and write.
     """
 
 
