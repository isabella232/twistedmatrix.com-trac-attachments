diff --git twisted/application/service.py twisted/application/service.py
index d4a13dc..66fef85 100644
--- twisted/application/service.py
+++ twisted/application/service.py
@@ -169,7 +169,7 @@ class Service:
 
     def __getstate__(self):
         dict = self.__dict__.copy()
-        if dict.has_key("running"):
+        if "running" in dict:
             del dict['running']
         return dict
 
@@ -298,7 +298,7 @@ class MultiService(Service):
 
     def addService(self, service):
         if service.name is not None:
-            if self.namedServices.has_key(service.name):
+            if service.name in self.namedServices:
                 raise RuntimeError("cannot have two services with same name"
                                    " '%s'" % service.name)
             self.namedServices[service.name] = service
diff --git twisted/conch/unix.py twisted/conch/unix.py
index ffeb7ad..3a44be0 100644
--- twisted/conch/unix.py
+++ twisted/conch/unix.py
@@ -303,11 +303,11 @@ class SFTPServerForUnixConchUser:
         NOTE: this function assumes it runs as the logged-in user:
         i.e. under _runAsUser()
         """
-        if attrs.has_key("uid") and attrs.has_key("gid"):
+        if "uid" in attrs and "gid" in attrs:
             os.chown(path, attrs["uid"], attrs["gid"])
-        if attrs.has_key("permissions"):
+        if "permissions" in attrs:
             os.chmod(path, attrs["permissions"])
-        if attrs.has_key("atime") and attrs.has_key("mtime"):
+        if "atime" in attrs and "mtime" in attrs:
             os.utime(path, (attrs["atime"], attrs["mtime"]))
 
     def _getAttrs(self, s):
@@ -399,7 +399,7 @@ class UnixSFTPFile:
             openFlags |= os.O_TRUNC
         if flags & FXF_EXCL == FXF_EXCL:
             openFlags |= os.O_EXCL
-        if attrs.has_key("permissions"):
+        if "permissions" in attrs:
             mode = attrs["permissions"]
             del attrs["permissions"]
         else:
diff --git twisted/enterprise/adbapi.py twisted/enterprise/adbapi.py
index a361a20..0531d2d 100644
--- twisted/enterprise/adbapi.py
+++ twisted/enterprise/adbapi.py
@@ -218,7 +218,7 @@ class ConnectionPool:
 
         for arg in self.CP_ARGS:
             cp_arg = 'cp_%s' % arg
-            if connkw.has_key(cp_arg):
+            if cp_arg in connkw:
                 setattr(self, arg, connkw[cp_arg])
                 del connkw[cp_arg]
 
diff --git twisted/mail/imap4.py twisted/mail/imap4.py
index 6ca8384..bf36eee 100644
--- twisted/mail/imap4.py
+++ twisted/mail/imap4.py
@@ -4665,7 +4665,7 @@ class MemoryAccount(object):
     ##
     def addMailbox(self, name, mbox = None):
         name = name.upper()
-        if self.mailboxes.has_key(name):
+        if name in self.mailboxes:
             raise MailboxCollision, name
         if mbox is None:
             mbox = self._emptyMailbox(name, self.allocateID())
@@ -4715,14 +4715,14 @@ class MemoryAccount(object):
     def rename(self, oldname, newname):
         oldname = oldname.upper()
         newname = newname.upper()
-        if not self.mailboxes.has_key(oldname):
+        if oldname not in self.mailboxes:
             raise NoSuchMailbox, oldname
 
         inferiors = self._inferiorNames(oldname)
         inferiors = [(o, o.replace(oldname, newname, 1)) for o in inferiors]
 
         for (old, new) in inferiors:
-            if self.mailboxes.has_key(new):
+            if new in self.mailboxes:
                 raise MailboxCollision, new
 
         for (old, new) in inferiors:
diff --git twisted/manhole/explorer.py twisted/manhole/explorer.py
index 428b3e2..30db8e2 100644
--- twisted/manhole/explorer.py
+++ twisted/manhole/explorer.py
@@ -29,7 +29,7 @@ False=not True
 class Pool(UserDict.UserDict):
     def getExplorer(self, object, identifier):
         oid = id(object)
-        if self.data.has_key(oid):
+        if oid in self.data:
             # XXX: This potentially returns something with
             # 'identifier' set to a different value.
             return self.data[oid]
diff --git twisted/manhole/service.py twisted/manhole/service.py
index 332bc81..c9d4679 100644
--- twisted/manhole/service.py
+++ twisted/manhole/service.py
@@ -255,7 +255,7 @@ class Perspective(pb.Avatar):
         compatMessage = None
         for client in clients:
             try:
-                if not client.capabilities.has_key("Failure"):
+                if "Failure" not in client.capabilities:
                     if compatMessage is None:
                         compatMessage = origMessage[:]
                         for i in xrange(len(message)):
diff --git twisted/names/cache.py twisted/names/cache.py
index 973a3d9..ab00a41 100644
--- twisted/names/cache.py
+++ twisted/names/cache.py
@@ -97,7 +97,7 @@ class CacheResolver(common.ResolverBase):
 
         self.cache[query] = (cacheTime or self._reactor.seconds(), payload)
 
-        if self.cancel.has_key(query):
+        if query in self.cancel:
             self.cancel[query].cancel()
 
         s = list(payload[0]) + list(payload[1]) + list(payload[2])
diff --git twisted/news/database.py twisted/news/database.py
index 1ba1694..137736a 100644
--- twisted/news/database.py
+++ twisted/news/database.py
@@ -63,7 +63,7 @@ class Article:
 
     def getHeader(self, header):
         h = header.lower()
-        if self.headers.has_key(h):
+        if h in self.headers:
             return self.headers[h][1]
         else:
             return ''
@@ -350,7 +350,7 @@ class PickleStorage(_ModerationMixin):
             return self.notifyModerators(moderators, a)
 
         for group in groups:
-            if self.db.has_key(group):
+            if group in self.db:
                 if len(self.db[group].keys()):
                     index = max(self.db[group].keys()) + 1
                 else:
@@ -469,7 +469,7 @@ class PickleStorage(_ModerationMixin):
 
 
     def load(self, filename, groups = None, moderators = ()):
-        if PickleStorage.sharedDBs.has_key(filename):
+        if filename in PickleStorage.sharedDBs:
             self.db = PickleStorage.sharedDBs[filename]
         else:
             try:
@@ -646,7 +646,7 @@ class NewsShelf(_ModerationMixin):
             high = self.dbm['groups'][group].maxArticle
         r = []
         for i in range(low, high + 1):
-            if self.dbm['groups'][group].articles.has_key(i):
+            if i in self.dbm['groups'][group].articles:
                 r.append((i, self.dbm['groups'][group].articles[i].getHeader(header)))
         return defer.succeed(r)
 
diff --git twisted/persisted/aot.py twisted/persisted/aot.py
index 59fde57..f4ad975 100644
--- twisted/persisted/aot.py
+++ twisted/persisted/aot.py
@@ -260,7 +260,7 @@ def unjellyFromSource(stringOrFile):
     else:
         exec stringOrFile in ns
 
-    if ns.has_key('app'):
+    if 'app' in ns:
         return unjellyFromAOT(ns['app'])
     else:
         raise ValueError("%s needs to define an 'app', it didn't!" % stringOrFile)
@@ -504,7 +504,7 @@ class AOTJellier:
 #mutable inside one. The Ref() class will only print the "Ref(..)" around an
 #object if it has a Reference explicitly attached.
 
-            if self.prepared.has_key(id(obj)):
+            if id(obj) in self.prepared:
                 oldRef = self.prepared[id(obj)]
                 if oldRef.refnum:
                     # it's been referenced already
@@ -538,7 +538,7 @@ class AOTJellier:
                     state = self.jellyToAO(obj.__dict__)
                 retval.setObj(Instance(reflect.qual(obj.__class__), state))
 
-            elif copy_reg.dispatch_table.has_key(objType):
+            elif objType in copy_reg.dispatch_table:
                 unpickleFunc, state = copy_reg.dispatch_table[objType](obj)
 
                 retval.setObj(Copyreg( reflect.fullFuncName(unpickleFunc),
diff --git twisted/persisted/styles.py twisted/persisted/styles.py
index 81c8c30..e3ca39b 100644
--- twisted/persisted/styles.py
+++ twisted/persisted/styles.py
@@ -68,7 +68,7 @@ def pickleModule(module):
 
 def unpickleModule(name):
     'support function for copy_reg to unpickle module refs'
-    if oldModules.has_key(name):
+    if name in oldModules:
         log.msg("Module has moved: %s" % name)
         name = oldModules[name]
         log.msg(name)
@@ -202,11 +202,11 @@ class Versioned:
         bases.reverse()
         bases.append(self.__class__) # don't forget me!!
         for base in bases:
-            if base.__dict__.has_key('persistenceForgets'):
+            if 'persistenceForgets' in base.__dict__:
                 for slot in base.persistenceForgets:
-                    if dct.has_key(slot):
+                    if slot in dct:
                         del dct[slot]
-            if base.__dict__.has_key('persistenceVersion'):
+            if 'persistenceVersion' in base.__dict__:
                 dct['%s.persistenceVersion' % reflect.qual(base)] = base.persistenceVersion
         return dct
 
@@ -219,7 +219,7 @@ class Versioned:
         bases.reverse()
         bases.append(self.__class__) # don't forget me!!
         # first let's look for old-skool versioned's
-        if self.__dict__.has_key("persistenceVersion"):
+        if "persistenceVersion" in self.__dict__:
 
             # Hacky heuristic: if more than one class subclasses Versioned,
             # we'll assume that the higher version number wins for the older
@@ -244,7 +244,7 @@ class Versioned:
         for base in bases:
             # ugly hack, but it's what the user expects, really
             if (Versioned not in base.__bases__ and
-                not base.__dict__.has_key('persistenceVersion')):
+                'persistenceVersion' not in base.__dict__):
                 continue
             currentVers = base.persistenceVersion
             pverName = '%s.persistenceVersion' % reflect.qual(base)
diff --git twisted/protocols/sip.py twisted/protocols/sip.py
index 58f5e8b..c1e7ab9 100644
--- twisted/protocols/sip.py
+++ twisted/protocols/sip.py
@@ -1289,7 +1289,7 @@ class InMemoryRegistry:
     def getAddress(self, userURI):
         if userURI.host != self.domain:
             return defer.fail(LookupError("unknown domain"))
-        if self.users.has_key(userURI.username):
+        if userURI.username in self.users:
             dc, url = self.users[userURI.username]
             return defer.succeed(url)
         else:
@@ -1321,7 +1321,7 @@ class InMemoryRegistry:
         if logicalURL.host != self.domain:
             log.msg("Registration for domain we don't handle.")
             return defer.fail(RegistrationError(404))
-        if self.users.has_key(logicalURL.username):
+        if logicalURL.username in self.users:
             dc, old = self.users[logicalURL.username]
             dc.reset(3600)
         else:
diff --git twisted/python/components.py twisted/python/components.py
index 72f15cd..6fb1f2a 100644
--- twisted/python/components.py
+++ twisted/python/components.py
@@ -282,7 +282,7 @@ class Componentized(styles.Versioned):
         True on your adapter class.
         """
         k = reflect.qual(interface)
-        if self._adapterCache.has_key(k):
+        if k in self._adapterCache:
             return self._adapterCache[k]
         else:
             adapter = interface.__adapt__(self)
diff --git twisted/python/rebuild.py twisted/python/rebuild.py
index 10a0b67..28a7675 100644
--- twisted/python/rebuild.py
+++ twisted/python/rebuild.py
@@ -176,7 +176,7 @@ def rebuild(module, doLog=1):
 
     values.update(classes)
     values.update(functions)
-    fromOldModule = values.has_key
+    fromOldModule = values.__contains__
     newclasses = newclasses.keys()
     classes = classes.keys()
     functions = functions.keys()
diff --git twisted/python/util.py twisted/python/util.py
index ee4cc8a..d9c506f 100644
--- twisted/python/util.py
+++ twisted/python/util.py
@@ -59,7 +59,8 @@ class InsensitiveDict:
     def has_key(self, key):
         """Case insensitive test whether 'key' exists."""
         k = self._lowerOrReturn(key)
-        return self.data.has_key(k)
+        return k in self.data
+
     __contains__=has_key
 
     def _doPreserve(self, key):
@@ -210,7 +211,8 @@ def uniquify(lst):
     dct = {}
     result = []
     for k in lst:
-        if not dct.has_key(k): result.append(k)
+        if k not in dct:
+            result.append(k)
         dct[k] = 1
     return result
 
diff --git twisted/spread/pb.py twisted/spread/pb.py
index 76e803c..7e9a5b6 100644
--- twisted/spread/pb.py
+++ twisted/spread/pb.py
@@ -844,13 +844,13 @@ class Broker(banana.Banana):
         pbc = None
         pbe = None
         answerRequired = 1
-        if kw.has_key('pbcallback'):
+        if 'pbcallback' in kw:
             pbc = kw['pbcallback']
             del kw['pbcallback']
-        if kw.has_key('pberrback'):
+        if 'pberrback' in kw:
             pbe = kw['pberrback']
             del kw['pberrback']
-        if kw.has_key('pbanswer'):
+        if 'pbanswer' in kw:
             assert (not pbe) and (not pbc), "You can't specify a no-answer requirement."
             answerRequired = kw['pbanswer']
             del kw['pbanswer']
diff --git twisted/test/test_log.py twisted/test/test_log.py
index 86f03d5..da661bf 100644
--- twisted/test/test_log.py
+++ twisted/test/test_log.py
@@ -36,7 +36,7 @@ class LogTest(unittest.TestCase):
         i = catcher.pop()
         self.assertEqual(i["message"][0], "test")
         self.assertEqual(i["testShouldCatch"], True)
-        self.failUnless(i.has_key("time"))
+        self.assertIn("time", i)
         self.assertEqual(len(catcher), 0)
 
 
diff --git twisted/test/test_newcred.py twisted/test/test_newcred.py
index 870833a..01660cd 100644
--- twisted/test/test_newcred.py
+++ twisted/test/test_newcred.py
@@ -71,7 +71,7 @@ class TestRealm:
         self.avatars = {}
 
     def requestAvatar(self, avatarId, mind, *interfaces):
-        if self.avatars.has_key(avatarId):
+        if avatarId in self.avatars:
             avatar = self.avatars[avatarId]
         else:
             avatar = TestAvatar(avatarId)
diff --git twisted/web/client.py twisted/web/client.py
index 7e9a488..246eea6 100644
--- twisted/web/client.py
+++ twisted/web/client.py
@@ -381,7 +381,7 @@ class HTTPClientFactory(protocol.ClientFactory):
 
     def gotHeaders(self, headers):
         self.response_headers = headers
-        if headers.has_key('set-cookie'):
+        if 'set-cookie' in headers:
             for cookie in headers['set-cookie']:
                 cookparts = cookie.split(';')
                 cook = cookparts[0]
diff --git twisted/web/static.py twisted/web/static.py
index 3992ac8..6aa3d6a 100644
--- twisted/web/static.py
+++ twisted/web/static.py
@@ -138,7 +138,7 @@ def loadMimeTypes(mimetype_locations=['/etc/mime.types']):
 def getTypeAndEncoding(filename, types, encodings, defaultType):
     p, ext = os.path.splitext(filename)
     ext = ext.lower()
-    if encodings.has_key(ext):
+    if ext in encodings:
         enc = encodings[ext]
         ext = os.path.splitext(p)[1].lower()
     else:
diff --git twisted/web/sux.py twisted/web/sux.py
index 13e6c76..d5ddc4f 100644
--- twisted/web/sux.py
+++ twisted/web/sux.py
@@ -132,8 +132,7 @@ class XMLParser(Protocol):
         # lenient behavior, because those may not have </script>
         # -radix
 
-        if (self.tagName == 'script'
-            and not self.tagAttributes.has_key('src')):
+        if (self.tagName == 'script' and 'src' not in self.tagAttributes):
             # we do this ourselves rather than having begin_waitforendscript
             # becuase that can get called multiple times and we don't want
             # bodydata to get reset other than the first time.
diff --git twisted/web/twcgi.py twisted/web/twcgi.py
index b1f001a..7f686e9 100644
--- twisted/web/twcgi.py
+++ twisted/web/twcgi.py
@@ -118,7 +118,7 @@ class CGIScript(resource.Resource):
             env[envname] = header
         # Propogate our environment
         for key, value in os.environ.items():
-            if not env.has_key(key):
+            if key not in env:
                 env[key] = value
         # And they're off!
         self.runProcess(env, request, qargs)
diff --git twisted/words/im/basechat.py twisted/words/im/basechat.py
index 39ead71..076275f 100644
--- twisted/words/im/basechat.py
+++ twisted/words/im/basechat.py
@@ -93,7 +93,7 @@ class ContactsList:
         @type newnick: C{str}
         """
         oldname = person.name
-        if self.contacts.has_key(oldname):
+        if oldname in self.contacts:
             del self.contacts[oldname]
             person.name = newnick
             self.contacts[newnick] = person
@@ -502,7 +502,7 @@ class ChatUI:
         @param newnick: The new C{name} C{person} will take.
         """
         oldnick = person.name
-        if self.persons.has_key((oldnick, person.account)):
+        if (oldnick, person.account) in self.persons:
             conv = self.conversations.get(person)
             if conv:
                 conv.contactChangedNick(person, newnick)
diff --git twisted/words/protocols/irc.py twisted/words/protocols/irc.py
index 2bec909..65daa7a 100644
--- twisted/words/protocols/irc.py
+++ twisted/words/protocols/irc.py
@@ -274,7 +274,7 @@ class IRC(protocol.Protocol):
                   " look like a command to me: %s" % command
 
         line = string.join([command] + list(parameter_list))
-        if prefix.has_key('prefix'):
+        if 'prefix' in prefix:
             line = ":%s %s" % (prefix['prefix'], line)
         self.sendLine(line)
 
@@ -2416,7 +2416,7 @@ class IRCClient(basic.LineReceiver):
         line = lowDequote(line)
         try:
             prefix, command, params = parsemsg(line)
-            if numeric_to_symbolic.has_key(command):
+            if command in numeric_to_symbolic:
                 command = numeric_to_symbolic[command]
             self.handleCommand(command, prefix, params)
         except IRCBadMessage:
diff --git twisted/words/protocols/msn.py twisted/words/protocols/msn.py
index 5e23a4d..79c0fa1 100644
--- twisted/words/protocols/msn.py
+++ twisted/words/protocols/msn.py
@@ -232,7 +232,7 @@ class PassportNexus(HTTPClient):
     def handleEndHeaders(self):
         if self.connected:
             self.transport.loseConnection()
-        if not self.headers.has_key('passporturls') or not self.headers['passporturls'].has_key('dalogin'):
+        if 'passporturls' not in self.headers or 'dalogin' not in self.headers['passporturls']:
             self.deferred.errback(failure.Failure(failure.DefaultException("Invalid Nexus Reply")))
         self.deferred.callback('https://' + self.headers['passporturls']['dalogin'])
 
@@ -275,7 +275,7 @@ class PassportLogin(HTTPClient):
             self.transport.loseConnection()
         authHeader = 'authentication-info'
         _interHeader = 'www-authenticate'
-        if self.headers.has_key(_interHeader):
+        if _interHeader in self.headers:
             authHeader = _interHeader
         try:
             info = self.headers[authHeader]
@@ -386,7 +386,7 @@ class MSNMessage:
 
     def hasHeader(self, header):
         """ check to see if the desired header exists """
-        return self.headers.has_key(header)
+        return header in self.headers
 
     def getMessage(self):
         """ return the message - not including headers """
@@ -602,7 +602,7 @@ class MSNEventBase(LineReceiver):
         Fire the callback for the given id
         if one exists and return 1, else return false
         """
-        if self.ids.has_key(id):
+        if id in self.ids:
             self.ids[id][0].callback(args)
             del self.ids[id]
             return 1
diff --git twisted/words/service.py twisted/words/service.py
index 388f7e6..0e4f8b6 100644
--- twisted/words/service.py
+++ twisted/words/service.py
@@ -213,9 +213,9 @@ class IRCUser(irc.IRC):
 
     # Make sendMessage a bit more useful to us
     def sendMessage(self, command, *parameter_list, **kw):
-        if not kw.has_key('prefix'):
+        if 'prefix' not in kw:
             kw['prefix'] = self.hostname
-        if not kw.has_key('to'):
+        if 'to' not in kw:
             kw['to'] = self.name.encode(self.encoding)
 
         arglist = [self, command, kw['to']] + list(parameter_list)
diff --git twisted/words/xish/domish.py twisted/words/xish/domish.py
index 407ee0c..3be7ed6 100644
--- twisted/words/xish/domish.py
+++ twisted/words/xish/domish.py
@@ -43,7 +43,7 @@ class _ListSerializer:
         return u"".join(self.writelist)
 
     def getPrefix(self, uri):
-        if not self.prefixes.has_key(uri):
+        if uri not in self.prefixes:
             self.prefixes[uri] = "xn%d" % (self.prefixCounter)
             self.prefixCounter = self.prefixCounter + 1
         return self.prefixes[uri]
@@ -451,7 +451,7 @@ class Element(object):
 
     def hasAttribute(self, attrib):
         """ Determine if the specified attribute exists """
-        return self.attributes.has_key(self._dqa(attrib))
+        return self._dqa(attrib) in self.attributes
 
     def compareAttribute(self, attrib, value):
         """ Safely compare the value of an attribute against a provided value.
