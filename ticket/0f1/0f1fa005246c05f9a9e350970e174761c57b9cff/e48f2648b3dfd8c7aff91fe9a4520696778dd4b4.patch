diff --git a/MANIFEST.in b/MANIFEST.in
new file mode 100644
index 0000000..caf8765
--- /dev/null
+++ b/MANIFEST.in
@@ -0,0 +1,6 @@
+exclude rpm-post-install
+exclude bin/admin/*
+
+# Include TwistedCore's extension-definitions in the sdist package, so they'll
+# be available for bdist_rpm to read.
+include twisted/topfiles/setup.py
diff --git a/admin/twisted.spec b/admin/twisted.spec
deleted file mode 100644
index ef0f21e..0000000
--- a/admin/twisted.spec
+++ /dev/null
@@ -1,62 +0,0 @@
-%define name     Twisted
-%define version  SVN-trunk
-%define release  1tummy
-%define prefix   %{_prefix}
-%define py_libver 2.3
-
-Summary:	Twisted is an event-based framework for internet applications.
-Name:		%{name}
-Version:	%{version}
-Release:	%{release}
-Source:		%{name}-%{version}.tar.bz2
-License:	MIT
-Group:		System/Libraries
-URL:		http://www.twistedmatrix.com/
-Requires:	python >= %{py_libver}
-BuildRequires:	python-devel
-BuildRoot:	%{_tmppath}/%{name}-buildroot
-Prefix:		%{_prefix}
-
-%description
-Twisted is an event-based framework for internet applications.  It includes a
-web server, a telnet server, a chat server, a news server, a generic client 
-and server for remote object access, and APIs for creating new protocols and
-services. Twisted supports integration of the Tk, GTK+, Qt or wxPython event
-loop with its main event loop. The Win32 event loop is also supported, as is
-basic support for running servers on top of Jython.
-
-%package doc
-Summary: Twisted documentation and example programs
-Group: Development/Python
-%description doc
-Twisted is an event-based framework for internet applications.
-Install Twisted-doc if you need the API documentation and example programs.
-
-%prep
-%setup -n %{name}-%{version}
-%build
-
-%install
-[ -n "$RPM_BUILD_ROOT" -a "$RPM_BUILD_ROOT" != / ] && rm -rf "$RPM_BUILD_ROOT"
-mkdir -p "$RPM_BUILD_ROOT"
-
-python setup.py install --optimize=2 --record=installed-files \
-      --root="$RPM_BUILD_ROOT"
-
-#  install man pages
-mkdir -p "$RPM_BUILD_ROOT"/%{_mandir}/man1/
-cp -a doc/man/*.1 "$RPM_BUILD_ROOT"/%{_mandir}/man1/
-
-%clean
-[ -n "$RPM_BUILD_ROOT" -a "$RPM_BUILD_ROOT" != / ] && rm -rf "$RPM_BUILD_ROOT"
-
-%files
-%defattr(755,root,root)
-%doc CREDITS LICENSE README
-%{_bindir}/*
-%attr(644,-,-) %{_mandir}/man1/*
-%{_libdir}/python%{py_libver}/site-packages/twisted/
-
-%files doc
-%defattr(-,root,root)
-%doc doc/*
diff --git a/rpm-post-install b/rpm-post-install
new file mode 100644
index 0000000..45ea373
--- /dev/null
+++ b/rpm-post-install
@@ -0,0 +1,5 @@
+#!/bin/sh
+#
+#  Create cache files.
+
+python -c 'from twisted.plugin import IPlugin, getPlugins; list(getPlugins(IPlugin))'
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..2def89c
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,16 @@
+[bdist_rpm]
+post-install = rpm-post-install
+
+# Some RPM-based distributions configure RPM to automatically create .pyo files
+# when .py files are installed, but don't configure bdist_rpm to add .pyo files
+# to the list-of-files-to-be-installed. Since RPM will exit with an error if
+# files are installed that aren't in the list-of-files-to-be-installed, this
+# prevents bdist_rpm from working. This has been a problem for a very long time
+# (at least since Fedora 6, if not before), but is due to be fixed in Fedora
+# 11, with the same workaround we present here. For more details, see the
+# upstream Fedora bug:
+#
+#   https://bugzilla.redhat.com/show_bug.cgi?id=236535
+#
+[install]
+optimize = 1
diff --git a/setup.py b/setup.py
index c8b5877..f0f05d7 100755
--- a/setup.py
+++ b/setup.py
@@ -73,6 +73,14 @@ on event-based network programming and multiprotocol integration.
             conditionalExtensions = getExtensions(),
             scripts = scripts,
             data_files=getDataFiles('twisted'), 
+            options = {
+                    'bdist_rpm': {
+                        'requires': [
+                            'python >= 2.3',
+                            'python-zope-interface >= 3.0.1',
+                        ],
+                    },
+                },
             )
 
     if 'setuptools' in sys.modules:
diff --git a/twisted/test/generator_failure_tests.py b/twisted/test/generator_failure_tests.py
index 8c31c27..89a017f 100644
--- a/twisted/test/generator_failure_tests.py
+++ b/twisted/test/generator_failure_tests.py
@@ -18,6 +18,13 @@ from twisted.internet import defer
 
 class TwoPointFiveFailureTests(TestCase):
 
+    if sys.version_info[0] <= 2 and sys.version_info[1] <= 4:
+        # Running these tests will raise all kinds of errors on versions before
+        # 2.5, so skip the whole lot. Note that examples of syntax introduce in
+        # 2.5 have to be wrapped in exec so that this file doesn't cause Python
+        # 2.4 to die with a SyntaxError when it tries to parse the file.
+        skip = "generator_failure_tests require Python 2.5"
+
     def test_inlineCallbacksTracebacks(self):
         """
         inlineCallbacks that re-raise tracebacks into their deferred
@@ -61,13 +68,15 @@ class TwoPointFiveFailureTests(TestCase):
         represents into a generator.
         """
         stuff = []
-        def generator():
-            try:
-                yield
-            except:
-                stuff.append(sys.exc_info())
-            else:
-                self.fail("Yield should have yielded exception.")
+        exec """
+            def generator():
+                try:
+                    yield
+                except:
+                    stuff.append(sys.exc_info())
+                else:
+                    self.fail("Yield should have yielded exception.")
+            """
         g = generator()
         f = getDivisionFailure()
         g.next()
@@ -89,13 +98,15 @@ class TwoPointFiveFailureTests(TestCase):
         f.cleanFailure()
 
         foundFailures = []
-        def generator():
-            try:
-                yield
-            except:
-                foundFailures.append(Failure._findFailure())
-            else:
-                self.fail("No exception sent to generator")
+        exec """
+            def generator():
+                try:
+                    yield
+                except:
+                    foundFailures.append(Failure._findFailure())
+                else:
+                    self.fail("No exception sent to generator")
+            """
 
         g = generator()
         g.next()
@@ -116,13 +127,15 @@ class TwoPointFiveFailureTests(TestCase):
 
         newFailures = []
 
-        def generator():
-            try:
-                yield
-            except:
-                newFailures.append(Failure())
-            else:
-                self.fail("No exception sent to generator")
+        exec """
+            def generator():
+                try:
+                    yield
+                except:
+                    newFailures.append(Failure())
+                else:
+                    self.fail("No exception sent to generator")
+            """
         g = generator()
         g.next()
         self._throwIntoGenerator(f, g)
@@ -136,14 +149,16 @@ class TwoPointFiveFailureTests(TestCase):
         L{Failure._findFailure} inside the generator should find the reraised
         exception rather than original one.
         """
-        def generator():
-            try:
+        exec """
+            def generator():
                 try:
-                    yield
+                    try:
+                        yield
+                    except:
+                        [][1]
                 except:
-                    [][1]
-            except:
-                self.assertIsInstance(Failure().value, IndexError)
+                    self.assertIsInstance(Failure().value, IndexError)
+            """
         g = generator()
         g.next()
         f = getDivisionFailure()
@@ -155,11 +170,13 @@ class TwoPointFiveFailureTests(TestCase):
         L{Failure._findFailure} above the generator should find the reraised
         exception rather than original one.
         """
-        def generator():
-            try:
-                yield
-            except:
-                [][1]
+        exec """
+            def generator():
+                try:
+                    yield
+                except:
+                    [][1]
+            """
         g = generator()
         g.next()
         f = getDivisionFailure()
