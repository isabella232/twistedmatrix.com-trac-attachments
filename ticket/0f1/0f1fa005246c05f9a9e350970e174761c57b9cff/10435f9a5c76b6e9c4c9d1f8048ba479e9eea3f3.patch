diff --git a/MANIFEST.in b/MANIFEST.in
new file mode 100644
index 0000000..2b207bf
--- /dev/null
+++ b/MANIFEST.in
@@ -0,0 +1,38 @@
+exclude rpm-post-install
+exclude bin/admin/*
+
+# Include TwistedCore's extension-definitions in the sdist package, so they'll
+# be available for bdist_rpm to read.
+include twisted/topfiles/setup.py
+
+# Files that unit-tests assume are present. This list generated with the
+# following command in the root of a fresh checkout:
+#
+#   find twisted -wholename '*/test/*' | grep -v '.py$'
+#
+include twisted/test/raiser.c
+include twisted/test/raiser.pyx
+include twisted/test/server.pem
+include twisted/mail/test/rfc822.message
+include twisted/trial/test/notpython
+include twisted/lore/test/lore_index_file_out.html
+include twisted/lore/test/lore_index_test.xhtml
+include twisted/lore/test/lore_numbering_test_out2.html
+include twisted/lore/test/lore_index_file_out_multiple.html
+include twisted/lore/test/lore_index_test2.xhtml
+include twisted/lore/test/simple3.html
+include twisted/lore/test/lore_numbering_test_out.html
+include twisted/lore/test/simple.html
+include twisted/lore/test/simple4.html
+include twisted/lore/test/lore_index_file_unnumbered_out.html
+include twisted/lore/test/template.tpl
+include twisted/web2/test/server.pem
+include twisted/web2/test/stream_data.txt
+
+# Files required to be present at runtime:
+include twisted/lore/template.mgp
+include twisted/lore/xhtml1-strict.dtd
+include twisted/lore/xhtml1-transitional.dtd
+include twisted/lore/xhtml-lat1.ent
+include twisted/lore/xhtml-special.ent
+include twisted/lore/xhtml-symbol.ent
diff --git a/admin/rpm-post-install b/admin/rpm-post-install
new file mode 100644
index 0000000..45ea373
--- /dev/null
+++ b/admin/rpm-post-install
@@ -0,0 +1,5 @@
+#!/bin/sh
+#
+#  Create cache files.
+
+python -c 'from twisted.plugin import IPlugin, getPlugins; list(getPlugins(IPlugin))'
diff --git a/admin/twisted.spec b/admin/twisted.spec
deleted file mode 100644
index ef0f21e..0000000
--- a/admin/twisted.spec
+++ /dev/null
@@ -1,62 +0,0 @@
-%define name     Twisted
-%define version  SVN-trunk
-%define release  1tummy
-%define prefix   %{_prefix}
-%define py_libver 2.3
-
-Summary:	Twisted is an event-based framework for internet applications.
-Name:		%{name}
-Version:	%{version}
-Release:	%{release}
-Source:		%{name}-%{version}.tar.bz2
-License:	MIT
-Group:		System/Libraries
-URL:		http://www.twistedmatrix.com/
-Requires:	python >= %{py_libver}
-BuildRequires:	python-devel
-BuildRoot:	%{_tmppath}/%{name}-buildroot
-Prefix:		%{_prefix}
-
-%description
-Twisted is an event-based framework for internet applications.  It includes a
-web server, a telnet server, a chat server, a news server, a generic client 
-and server for remote object access, and APIs for creating new protocols and
-services. Twisted supports integration of the Tk, GTK+, Qt or wxPython event
-loop with its main event loop. The Win32 event loop is also supported, as is
-basic support for running servers on top of Jython.
-
-%package doc
-Summary: Twisted documentation and example programs
-Group: Development/Python
-%description doc
-Twisted is an event-based framework for internet applications.
-Install Twisted-doc if you need the API documentation and example programs.
-
-%prep
-%setup -n %{name}-%{version}
-%build
-
-%install
-[ -n "$RPM_BUILD_ROOT" -a "$RPM_BUILD_ROOT" != / ] && rm -rf "$RPM_BUILD_ROOT"
-mkdir -p "$RPM_BUILD_ROOT"
-
-python setup.py install --optimize=2 --record=installed-files \
-      --root="$RPM_BUILD_ROOT"
-
-#  install man pages
-mkdir -p "$RPM_BUILD_ROOT"/%{_mandir}/man1/
-cp -a doc/man/*.1 "$RPM_BUILD_ROOT"/%{_mandir}/man1/
-
-%clean
-[ -n "$RPM_BUILD_ROOT" -a "$RPM_BUILD_ROOT" != / ] && rm -rf "$RPM_BUILD_ROOT"
-
-%files
-%defattr(755,root,root)
-%doc CREDITS LICENSE README
-%{_bindir}/*
-%attr(644,-,-) %{_mandir}/man1/*
-%{_libdir}/python%{py_libver}/site-packages/twisted/
-
-%files doc
-%defattr(-,root,root)
-%doc doc/*
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..d58dafe
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,16 @@
+[bdist_rpm]
+post-install = admin/rpm-post-install
+
+# Some RPM-based distributions configure RPM to automatically create .pyo files
+# when .py files are installed, but don't configure bdist_rpm to add .pyo files
+# to the list-of-files-to-be-installed. Since RPM will exit with an error if
+# files are installed that aren't in the list-of-files-to-be-installed, this
+# prevents bdist_rpm from working. This has been a problem for a very long time
+# (at least since Fedora 6, if not before), but is due to be fixed in Fedora
+# 11, with the same workaround we present here. For more details, see the
+# upstream Fedora bug:
+#
+#   https://bugzilla.redhat.com/show_bug.cgi?id=236535
+#
+[install]
+optimize = 1
diff --git a/setup.py b/setup.py
index c8b5877..62a2743 100755
--- a/setup.py
+++ b/setup.py
@@ -43,7 +43,8 @@ def main(args):
     if os.path.exists('twisted'):
         sys.path.insert(0, '.')
     from twisted import copyright
-    from twisted.python.dist import getDataFiles, getScripts, getPackages, setup
+    from twisted.python.dist import getDataFiles, getScripts, getPackages, \
+        getOptions, setup
 
     # "" is included because core scripts are directly in bin/
     projects = [''] + [x for x in os.listdir('bin')
@@ -73,6 +74,7 @@ on event-based network programming and multiprotocol integration.
             conditionalExtensions = getExtensions(),
             scripts = scripts,
             data_files=getDataFiles('twisted'), 
+            options = getOptions(),
             )
 
     if 'setuptools' in sys.modules:
diff --git a/twisted/python/dist.py b/twisted/python/dist.py
index 5727065..ac1e513 100644
--- a/twisted/python/dist.py
+++ b/twisted/python/dist.py
@@ -120,6 +120,22 @@ def getVersion(proj, base="twisted"):
     return ns['version'].base()
 
 
+
+def getOptions():
+    """
+    Return default options for the given project.
+    """
+    return {
+            'bdist_rpm': {
+                'requires': [
+                    'python >= 2.3',
+                    'python-zope-interface >= 3.0.1',
+                ],
+            },
+        }
+
+
+
 # Names that are exluded from globbing results:
 EXCLUDE_NAMES = ["{arch}", "CVS", ".cvsignore", "_darcs",
                  "RCS", "SCCS", ".svn"]
diff --git a/twisted/python/test/test_dist.py b/twisted/python/test/test_dist.py
index c69717d..98509b7 100644
--- a/twisted/python/test/test_dist.py
+++ b/twisted/python/test/test_dist.py
@@ -171,3 +171,36 @@ class GetScriptsTest(TestCase):
         os.mkdir(basedir)
         scripts = dist.getScripts('noscripts', basedir=basedir)
         self.assertEquals(scripts, [])
+
+
+
+class GetOptionsTest(TestCase):
+
+
+    def test_getOptions_for_RPMs(self):
+        """
+        Test that getOptions returns appropriate options for RPM building.
+        """
+        options = dist.getOptions()
+
+        # We should have options for RPM building.
+        self.failUnlessIn("bdist_rpm", options)
+        rpm_options = options["bdist_rpm"]
+
+        # We should have configured requirements for installed RPMs.
+        self.failUnlessIn("requires", rpm_options)
+        requirements = rpm_options["requires"]
+
+        # We should require Python to be installed.
+        python_reqs = [True for requirement in requirements if
+                # The extra space ensures requirements like "python-foo" won't
+                # produce false positives.
+                requirement.startswith("python ")]
+        self.failUnless(len(python_reqs) > 0, "Twisted RPMs should depend on "
+                "Python.")
+
+        # We should require zope-interface to be installed.
+        zi_reqs = [True for requirement in requirements if
+                requirement.startswith("python-zope-interface")]
+        self.failUnless(len(zi_reqs) > 0, "Twisted RPMs should depend on "
+                "python-zope-interface.")
diff --git a/twisted/test/generator_failure_tests.py b/twisted/test/generator_failure_tests.py
deleted file mode 100644
index 8c31c27..0000000
--- a/twisted/test/generator_failure_tests.py
+++ /dev/null
@@ -1,169 +0,0 @@
-# Copyright (c) 2001-2007 Twisted Matrix Laboratories.
-# See LICENSE for details.
-
-
-"""
-Python 2.5 test cases for failures thrown into generators.
-"""
-
-import sys
-import traceback
-
-from twisted.trial.unittest import TestCase
-
-from twisted.python.failure import Failure
-from twisted.test.test_failure import getDivisionFailure
-from twisted.internet import defer
-
-
-class TwoPointFiveFailureTests(TestCase):
-
-    def test_inlineCallbacksTracebacks(self):
-        """
-        inlineCallbacks that re-raise tracebacks into their deferred
-        should not lose their tracebacsk.
-        """
-        f = getDivisionFailure()
-        d = defer.Deferred()
-        try:
-            f.raiseException()
-        except:
-            d.errback()
-
-        failures = []
-        def collect_error(result):
-            failures.append(result)
-
-        def ic(d):
-            yield d
-        ic = defer.inlineCallbacks(ic)
-        ic(d).addErrback(collect_error)
-
-        newFailure, = failures
-        self.assertEquals(
-            traceback.extract_tb(newFailure.getTracebackObject())[-1][-1],
-            "1/0"
-        )
-
-
-    def _throwIntoGenerator(self, f, g):
-        try:
-            f.throwExceptionIntoGenerator(g)
-        except StopIteration:
-            pass
-        else:
-            self.fail("throwExceptionIntoGenerator should have raised "
-                      "StopIteration")
-
-    def test_throwExceptionIntoGenerator(self):
-        """
-        It should be possible to throw the exception that a Failure
-        represents into a generator.
-        """
-        stuff = []
-        def generator():
-            try:
-                yield
-            except:
-                stuff.append(sys.exc_info())
-            else:
-                self.fail("Yield should have yielded exception.")
-        g = generator()
-        f = getDivisionFailure()
-        g.next()
-        self._throwIntoGenerator(f, g)
-
-        self.assertEquals(stuff[0][0], ZeroDivisionError)
-        self.assertTrue(isinstance(stuff[0][1], ZeroDivisionError))
-
-        self.assertEquals(traceback.extract_tb(stuff[0][2])[-1][-1], "1/0")
-
-
-    def test_findFailureInGenerator(self):
-        """
-        Within an exception handler, it should be possible to find the
-        original Failure that caused the current exception (if it was
-        caused by throwExceptionIntoGenerator).
-        """
-        f = getDivisionFailure()
-        f.cleanFailure()
-
-        foundFailures = []
-        def generator():
-            try:
-                yield
-            except:
-                foundFailures.append(Failure._findFailure())
-            else:
-                self.fail("No exception sent to generator")
-
-        g = generator()
-        g.next()
-        self._throwIntoGenerator(f, g)
-
-        self.assertEqual(foundFailures, [f])
-
-
-    def test_failureConstructionFindsOriginalFailure(self):
-        """
-        When a Failure is constructed in the context of an exception
-        handler that is handling an exception raised by
-        throwExceptionIntoGenerator, the new Failure should be chained to that
-        original Failure.
-        """
-        f = getDivisionFailure()
-        f.cleanFailure()
-
-        newFailures = []
-
-        def generator():
-            try:
-                yield
-            except:
-                newFailures.append(Failure())
-            else:
-                self.fail("No exception sent to generator")
-        g = generator()
-        g.next()
-        self._throwIntoGenerator(f, g)
-
-        self.assertEqual(len(newFailures), 1)
-        self.assertEqual(newFailures[0].getTraceback(), f.getTraceback())
-
-    def test_ambiguousFailureInGenerator(self):
-        """
-        When a generator reraises a different exception,
-        L{Failure._findFailure} inside the generator should find the reraised
-        exception rather than original one.
-        """
-        def generator():
-            try:
-                try:
-                    yield
-                except:
-                    [][1]
-            except:
-                self.assertIsInstance(Failure().value, IndexError)
-        g = generator()
-        g.next()
-        f = getDivisionFailure()
-        self._throwIntoGenerator(f, g)
-
-    def test_ambiguousFailureFromGenerator(self):
-        """
-        When a generator reraises a different exception,
-        L{Failure._findFailure} above the generator should find the reraised
-        exception rather than original one.
-        """
-        def generator():
-            try:
-                yield
-            except:
-                [][1]
-        g = generator()
-        g.next()
-        f = getDivisionFailure()
-        try:
-            self._throwIntoGenerator(f, g)
-        except:
-            self.assertIsInstance(Failure().value, IndexError)
diff --git a/twisted/test/test_compile.py b/twisted/test/test_compile.py
new file mode 100644
index 0000000..05cc6ed
--- /dev/null
+++ b/twisted/test/test_compile.py
@@ -0,0 +1,27 @@
+
+# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+
+import compileall
+from os.path import dirname
+from twisted.trial import unittest
+
+
+
+class TestByteCompilation(unittest.TestCase):
+
+
+    def test_twisted_can_be_bytecompiled(self):
+        """
+        Test that all the Twisted Python files can be byte-compiled.
+
+        Twisted should support "setup.py bdist_rpm" with every supported
+        version of Python. Because the RPM building process byte-compiles all
+        the Python files it can find, not just the ones referenced by import
+        statements, we need a test that will ensure buildbots running old
+        versions of Python will not overlook incompatible Python code.
+        """
+        import twisted
+        self.failUnless(compileall.compile_dir(dirname(twisted.__file__),
+            force=False, quiet=True), "Compilation failed")
diff --git a/twisted/test/test_failure.py b/twisted/test/test_failure.py
index 7dc0ab1..29bcab0 100644
--- a/twisted/test/test_failure.py
+++ b/twisted/test/test_failure.py
@@ -314,5 +314,176 @@ class TestFormattableTraceback(unittest.TestCase):
                           ('filename.py', 235, 'method2', None)])
 
 
-if sys.version_info[:2] >= (2, 5):
-    from twisted.test.generator_failure_tests import TwoPointFiveFailureTests
+
+class GeneratorFailureTestCase(unittest.TestCase):
+    """
+    Python 2.5 test cases for failures thrown into generators.
+    """
+
+
+    if sys.version_info[0] <= 2 and sys.version_info[1] <= 4:
+        # Running these tests will raise all kinds of errors on versions before
+        # 2.5, so skip the whole lot. Note that examples of syntax introduce in
+        # 2.5 have to be wrapped in exec so that this file doesn't cause Python
+        # 2.4 to die with a SyntaxError when it tries to parse the file.
+        skip = "generator_failure_tests require Python 2.5"
+
+    def test_inlineCallbacksTracebacks(self):
+        """
+        inlineCallbacks that re-raise tracebacks into their deferred
+        should not lose their tracebacsk.
+        """
+        f = getDivisionFailure()
+        d = defer.Deferred()
+        try:
+            f.raiseException()
+        except:
+            d.errback()
+
+        failures = []
+        def collect_error(result):
+            failures.append(result)
+
+        def ic(d):
+            yield d
+        ic = defer.inlineCallbacks(ic)
+        ic(d).addErrback(collect_error)
+
+        newFailure, = failures
+        self.assertEquals(
+            traceback.extract_tb(newFailure.getTracebackObject())[-1][-1],
+            "1/0"
+        )
+
+
+    def _throwIntoGenerator(self, f, g):
+        try:
+            f.throwExceptionIntoGenerator(g)
+        except StopIteration:
+            pass
+        else:
+            self.fail("throwExceptionIntoGenerator should have raised "
+                      "StopIteration")
+
+    def test_throwExceptionIntoGenerator(self):
+        """
+        It should be possible to throw the exception that a Failure
+        represents into a generator.
+        """
+        stuff = []
+        exec """
+            def generator():
+                try:
+                    yield
+                except:
+                    stuff.append(sys.exc_info())
+                else:
+                    self.fail("Yield should have yielded exception.")
+            """
+        g = generator()
+        f = getDivisionFailure()
+        g.next()
+        self._throwIntoGenerator(f, g)
+
+        self.assertEquals(stuff[0][0], ZeroDivisionError)
+        self.assertTrue(isinstance(stuff[0][1], ZeroDivisionError))
+
+        self.assertEquals(traceback.extract_tb(stuff[0][2])[-1][-1], "1/0")
+
+
+    def test_findFailureInGenerator(self):
+        """
+        Within an exception handler, it should be possible to find the
+        original Failure that caused the current exception (if it was
+        caused by throwExceptionIntoGenerator).
+        """
+        f = getDivisionFailure()
+        f.cleanFailure()
+
+        foundFailures = []
+        exec """
+            def generator():
+                try:
+                    yield
+                except:
+                    foundFailures.append(Failure._findFailure())
+                else:
+                    self.fail("No exception sent to generator")
+            """
+
+        g = generator()
+        g.next()
+        self._throwIntoGenerator(f, g)
+
+        self.assertEqual(foundFailures, [f])
+
+
+    def test_failureConstructionFindsOriginalFailure(self):
+        """
+        When a Failure is constructed in the context of an exception
+        handler that is handling an exception raised by
+        throwExceptionIntoGenerator, the new Failure should be chained to that
+        original Failure.
+        """
+        f = getDivisionFailure()
+        f.cleanFailure()
+
+        newFailures = []
+
+        exec """
+            def generator():
+                try:
+                    yield
+                except:
+                    newFailures.append(Failure())
+                else:
+                    self.fail("No exception sent to generator")
+            """
+        g = generator()
+        g.next()
+        self._throwIntoGenerator(f, g)
+
+        self.assertEqual(len(newFailures), 1)
+        self.assertEqual(newFailures[0].getTraceback(), f.getTraceback())
+
+    def test_ambiguousFailureInGenerator(self):
+        """
+        When a generator reraises a different exception,
+        L{Failure._findFailure} inside the generator should find the reraised
+        exception rather than original one.
+        """
+        exec """
+            def generator():
+                try:
+                    try:
+                        yield
+                    except:
+                        [][1]
+                except:
+                    self.assertIsInstance(Failure().value, IndexError)
+            """
+        g = generator()
+        g.next()
+        f = getDivisionFailure()
+        self._throwIntoGenerator(f, g)
+
+    def test_ambiguousFailureFromGenerator(self):
+        """
+        When a generator reraises a different exception,
+        L{Failure._findFailure} above the generator should find the reraised
+        exception rather than original one.
+        """
+        exec """
+            def generator():
+                try:
+                    yield
+                except:
+                    [][1]
+            """
+        g = generator()
+        g.next()
+        f = getDivisionFailure()
+        try:
+            self._throwIntoGenerator(f, g)
+        except:
+            self.assertIsInstance(Failure().value, IndexError)
