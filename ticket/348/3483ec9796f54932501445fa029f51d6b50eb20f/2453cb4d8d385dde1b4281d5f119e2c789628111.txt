--- C:\temp\test_socks.py-revBASE.svn001.tmp.py	Fri Jun 19 13:10:06 2009
+++ C:\Python26\Lib\site-packages\twisted\test\test_socks.py	Fri Jun 19 13:09:57 2009
@@ -80,7 +80,74 @@
         self.assertEqual(self.sock.transport.value(), 'hi there')
 
         self.sock.connectionLost('fake reason')
+        
+    def test_socks4a(self):
+        # send the domain name "localhost" to be resolved
+        self.sock.dataReceived(
+            struct.pack('!BBH', 4, 1, 34)
+            + socket.inet_aton('0.0.0.1')
+            + 'fooBAZ\0'
+            + 'localhost\0')
+        sent = self.sock.transport.value()
+        self.sock.transport.clear()
+        self.assertEqual(sent,
+                         struct.pack('!BBH', 0, 90, 34)
+                         + socket.inet_aton('127.0.0.1'))
+        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assert_(self.sock.driver_outgoing is not None)
+        
+        # pass some data through
+        self.sock.dataReceived('hello, world')
+        self.assertEqual(self.sock.driver_outgoing.transport.value(),
+                         'hello, world')
 
+        # the other way around
+        self.sock.driver_outgoing.dataReceived('hi there')
+        self.assertEqual(self.sock.transport.value(), 'hi there')
+
+        self.sock.connectionLost('fake reason')
+        
+    def test_socks4a_firefox_split(self):
+        # Test Firefox behavior - Sometimes Firefox will split the handshake
+        #
+        # Good     '\x04\x01\x00P\x00\x00\x00\x01MOZ\x00en.wikipedia.org\x00'
+        #
+        # Split    '\x04\x01\x00P\x00\x00\x00\x01MOZ\x00' 
+        #          'en.wikipedia.org\x00' 
+        
+        # Send the handshake without the domain name
+        self.sock.dataReceived(
+            struct.pack('!BBH', 4, 1, 34)
+            + socket.inet_aton('0.0.0.1')
+            + 'fooBAZ\0')
+        sent = self.sock.transport.value()
+        self.sock.transport.clear()
+        self.assertEqual(sent, '')
+        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assert_(self.sock.driver_outgoing is None)
+        
+        # Now we send the domain
+        self.sock.dataReceived("localhost\0")
+        sent = self.sock.transport.value()
+        self.sock.transport.clear()
+        self.assertEqual(sent,
+                         struct.pack('!BBH', 0, 90, 34)
+                         + socket.inet_aton('127.0.0.1'))
+        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assert_(self.sock.driver_outgoing is not None)
+        
+        # pass some data through
+        self.sock.dataReceived('hello, world')
+        self.assertEqual(self.sock.driver_outgoing.transport.value(),
+                         'hello, world')
+
+        # the other way around
+        self.sock.driver_outgoing.dataReceived('hi there')
+        self.assertEqual(self.sock.transport.value(), 'hi there')
+
+        self.sock.connectionLost('fake reason')
+        
+
     def test_access_denied(self):
         self.sock.authorize = lambda code, server, port, user: 0
         self.sock.dataReceived(
