Index: twisted/test/test_socks.py
===================================================================
--- twisted/test/test_socks.py	(revision 27806)
+++ twisted/test/test_socks.py	(working copy)
@@ -53,6 +53,9 @@
         return defer.succeed(('6.7.8.9', port))
 
 class Connect(unittest.TestCase):
+    """
+    Tests for SOCKS and SOCKSv4a connect requests using the L{SOCKSv4} protocol.
+    """
     def setUp(self):
         self.sock = SOCKSv4Driver()
         self.sock.transport = StringTCPTransport()
@@ -136,14 +139,16 @@
         self.sock.connectionLost('fake reason')
 
 
-    def test_socks4a_firefox_split(self):
-        # Test Firefox behavior - Sometimes Firefox will split the handshake
-        #
-        # Good     '\x04\x01\x00P\x00\x00\x00\x01MOZ\x00en.wikipedia.org\x00'
-        #
-        # Split    '\x04\x01\x00P\x00\x00\x00\x01MOZ\x00'
-        #          'en.wikipedia.org\x00'
+    def test_socks4aSplit(self):
+        """
+        Some browsers will split a SOCKS handshake, for example:
+        Complete: '\x04\x01\x00P\x00\x00\x00\x01MOZ\x00en.wikipedia.org\x00'
+        Split:    '\x04\x01\x00P\x00\x00\x00\x01MOZ\x00'
+                  'en.wikipedia.org\x00'
 
+        L{SOCKSv4} must successfully handle the split case like it would with a
+        normal handshake.
+        """
         # Send the handshake without the domain name
         self.sock.dataReceived(
             struct.pack('!BBH', 4, 1, 34)
@@ -151,33 +156,33 @@
             + 'fooBAZ\0')
         sent = self.sock.transport.value()
         self.sock.transport.clear()
-        self.assertEqual(sent, '')
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
-        self.assert_(self.sock.driver_outgoing is None)
+        self.assertEquals(sent, '')
+        self.assertFalse(self.sock.transport.stringTCPTransport_closing)
+        self.assertIdentical(self.sock.driver_outgoing, None)
 
         # Now we send the domain
         self.sock.dataReceived("localhost\0")
         sent = self.sock.transport.value()
         self.sock.transport.clear()
-        self.assertEqual(sent,
+        self.assertEquals(sent,
                          struct.pack('!BBH', 0, 90, 34)
                          + socket.inet_aton('127.0.0.1'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
-        self.assert_(self.sock.driver_outgoing is not None)
+        self.assertFalse(self.sock.transport.stringTCPTransport_closing)
+        self.assertNotIdentical(self.sock.driver_outgoing, None)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
-        self.assertEqual(self.sock.driver_outgoing.transport.value(),
+        self.assertEquals(self.sock.driver_outgoing.transport.value(),
                          'hello, world')
 
         # the other way around
         self.sock.driver_outgoing.dataReceived('hi there')
-        self.assertEqual(self.sock.transport.value(), 'hi there')
+        self.assertEquals(self.sock.transport.value(), 'hi there')
 
         self.sock.connectionLost('fake reason')
 
 
-    def test_access_denied(self):
+    def test_accessDenied(self):
         self.sock.authorize = lambda code, server, port, user: 0
         self.sock.dataReceived(
             struct.pack('!BBH', 4, 1, 4242)
@@ -190,7 +195,8 @@
         self.assert_(self.sock.transport.stringTCPTransport_closing)
         self.assertIdentical(self.sock.driver_outgoing, None)
 
-    def test_eof_remote(self):
+
+    def test_eofRemote(self):
         self.sock.dataReceived(
             struct.pack('!BBH', 4, 1, 34)
             + socket.inet_aton('1.2.3.4')
@@ -208,7 +214,8 @@
         self.sock.driver_outgoing.transport.loseConnection()
         self.sock.driver_outgoing.connectionLost('fake reason')
 
-    def test_eof_local(self):
+
+    def test_eofLocal(self):
         self.sock.dataReceived(
             struct.pack('!BBH', 4, 1, 34)
             + socket.inet_aton('1.2.3.4')
@@ -225,6 +232,8 @@
         # now close it from the client side
         self.sock.connectionLost('fake reason')
 
+
+
 class Bind(unittest.TestCase):
     def setUp(self):
         self.sock = SOCKSv4Driver()
@@ -277,7 +286,7 @@
 
         self.sock.connectionLost('fake reason')
 
-    def test_access_denied(self):
+    def test_accessDenied(self):
         self.sock.authorize = lambda code, server, port, user: 0
         self.sock.dataReceived(
             struct.pack('!BBH', 4, 2, 4242)
@@ -290,7 +299,7 @@
         self.assert_(self.sock.transport.stringTCPTransport_closing)
         self.assertIdentical(self.sock.driver_listen, None)
 
-    def test_eof_remote(self):
+    def test_eofRemote(self):
         self.sock.dataReceived(
             struct.pack('!BBH', 4, 2, 34)
             + socket.inet_aton('1.2.3.4')
@@ -322,7 +331,7 @@
         incoming.transport.loseConnection()
         incoming.connectionLost('fake reason')
 
-    def test_eof_local(self):
+    def test_eofLocal(self):
         self.sock.dataReceived(
             struct.pack('!BBH', 4, 2, 34)
             + socket.inet_aton('1.2.3.4')
@@ -353,7 +362,7 @@
         # now close it from the client side
         self.sock.connectionLost('fake reason')
 
-    def test_bad_source(self):
+    def test_badSource(self):
         self.sock.dataReceived(
             struct.pack('!BBH', 4, 2, 34)
             + socket.inet_aton('1.2.3.4')
Index: twisted/protocols/socks.py
===================================================================
--- twisted/protocols/socks.py	(revision 27806)
+++ twisted/protocols/socks.py	(working copy)
@@ -56,7 +56,9 @@
 
 
 class SOCKSv4(protocol.Protocol):
-
+    """
+    An implementation of the SOCKSv4 protocol.
+    """
     def __init__(self,logging=None):
         self.logging=logging
 
@@ -64,43 +66,53 @@
         self.buf=""
         self.otherConn=None
 
-    def dataReceived(self,data):
+    def dataReceived(self, data):
+        """
+        Called whenever data is received.
+
+        @type data: C{str}
+        @param data: Part or all of a SOCKSv4 packet.
+        """
         if self.otherConn:
             self.otherConn.write(data)
             return
-        self.buf=self.buf+data
-        complete_buffer = self.buf
+        self.buf = self.buf + data
+        completeBuffer = self.buf
         if '\000' in self.buf[8:]:
-            head,self.buf=self.buf[:8],self.buf[8:]
+            head, self.buf = self.buf[:8], self.buf[8:]
             try:
-                version,code,port=struct.unpack("!BBH",head[:4])
+                version, code, port = struct.unpack("!BBH", head[:4])
             except struct.error:
-                raise RuntimeError, "struct error with head='%s' and buf='%s'"%(repr(head),repr(self.buf))
-            user,self.buf=self.buf.split("\000",1)
-            if head[4:7]=="\000\000\000": # domain is after
-                # if the IP is invalid, and the Domain name is not present, we restore the buffer and wait for it
-                if self.buf == "":
-                    self.buf = complete_buffer
+                msg = "struct error with head = '%s' and buf = '%s'" % (
+                    repr(head), repr(self.buf))
+                raise RuntimeError, msg
+            user, self.buf = self.buf.split("\000", 1)
+            if head[4:7] == "\000\000\000": # This is a SOCKSv4a packet
+                # If the complete packet hasn't been received, restore the
+                # buffer and wait for it.
+                if len(self.buf.split("\000")) < 2:
+                    self.buf = completeBuffer
                     return
-                server,self.buf=self.buf.split("\000",1)
-                server = socket.gethostbyname(server) # we need to resolve the host name since the IP is invalid
-                                                      # you probably will want to use asynchronous DNS, but its a big change.
+                server, self.buf = self.buf.split("\000", 1)
+                server = socket.gethostbyname(server)
             else:
-                server=socket.inet_ntoa(head[4:8])
-            assert version==4, "Bad version code: %s"%version
-            if not self.authorize(code,server,port,user):
+                server = socket.inet_ntoa(head[4:8])
+            assert version == 4, "Bad version code: %s" % version
+            if not self.authorize(code, server, port, user):
                 self.makeReply(91)
                 return
-            if code==1: # CONNECT
+            if code == 1: # CONNECT
                 d = self.connectClass(server, port, SOCKSv4Outgoing, self)
-                d.addErrback(lambda result, self=self: self.makeReply(91))
-            elif code==2: # BIND
+                d.addErrback(lambda result, self = self: self.makeReply(91))
+            elif code == 2: # BIND
                 ip = socket.gethostbyname(server)
                 d = self.listenClass(0, SOCKSv4IncomingFactory, self, ip)
-                d.addCallback(lambda (h, p), self=self: self.makeReply(90, 0, p, h))
+                d.addCallback(lambda (h, p),
+                              self = self: self.makeReply(90, 0, p, h))
             else:
                 raise RuntimeError, "Bad Connect Code: %s" % code
-            assert self.buf=="","hmm, still stuff in buffer... %s" % repr(self.buf)
+            assert self.buf == "", "hmm, still stuff in buffer... %s" % repr(
+                self.buf)
 
     def connectionLost(self, reason):
         if self.otherConn:
