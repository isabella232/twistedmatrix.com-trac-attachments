Index: twisted/internet/win32eventreactor.py
===================================================================
--- twisted/internet/win32eventreactor.py	(revision 20239)
+++ twisted/internet/win32eventreactor.py	(working copy)
@@ -12,34 +12,21 @@
 
 
 LIMITATIONS:
- 1. WaitForMultipleObjects and thus the event loop can only handle 64 objects.
- 2. Process running has some problems (see Process docstring).
+ 1. Process running has some problems (see Process docstring).
 
 
 TODO:
  1. Event loop handling of writes is *very* problematic (this is causing failed tests).
-    Switch to doing it the correct way, whatever that means (see below).
- 2. Replace icky socket loopback waker with event based waker (use dummyEvent object)
+    Switch to doing it the correct way, whatever that means (see below). There is FD_WRITE...
+ 2. Replace icky socket loopback waker with event based waker (set any event)
  3. Switch everyone to using Free Software so we don't have to deal with proprietary APIs.
 
 
-ALTERNATIVE SOLUTIONS:
+ALTERNATIVE SOLUTION:
  - IIRC, sockets can only be registered once. So we switch to a structure
    like the poll() reactor, thus allowing us to deal with write events in
-   a decent fashion. This should allow us to pass tests, but we're still
-   limited to 64 events.
+   a decent fashion. This should allow us to pass tests.
 
-Or:
-
- - Instead of doing a reactor, we make this an addon to the select reactor.
-   The WFMO event loop runs in a separate thread. This means no need to maintain
-   separate code for networking, 64 event limit doesn't apply to sockets,
-   we can run processes and other win32 stuff in default event loop. The
-   only problem is that we're stuck with the icky socket based waker.
-   Another benefit is that this could be extended to support >64 events
-   in a simpler manner than the previous solution.
-
-The 2nd solution is probably what will get implemented.
 """
 
 # Win32 imports
@@ -67,47 +54,68 @@
 
 # System imports
 import os
-import threading
-import Queue
-import string
+import sys
 import time
-import sys
+import ctypes
 from zope.interface import implements
 
 
 # globals
 reads = {}
 writes = {}
-events = {}
 
+fd_ids = {}
+fds = []
 
+events = (ctypes.c_void_p * 64)()  
+for i in xrange(64):
+    e = CreateEvent(None, 0, 0, None)
+    events[i] = e.handle
+    e.Detach()
+
+WSAEnumNetworkEvents = ctypes.windll.ws2_32.WSAEnumNetworkEvents
+MsgWaitForMultipleObjects = ctypes.windll.user32.MsgWaitForMultipleObjects
+
+
+class WSANETWORKEVENTS(ctypes.Structure):
+    _fields_ = [("lNetworkEvents", ctypes.c_long),
+                ("iErrorCode", ctypes.c_int * 10)]
+    
+
 class Win32Reactor(posixbase.PosixReactorBase):
     """Reactor that uses Win32 event APIs."""
 
     implements(IReactorFDSet, IReactorProcess)
 
-    dummyEvent = CreateEvent(None, 0, 0, None)
+    def _registerEvent(self, fd, id, why):
+        event = events[id % 64]
+        WSAEventSelect(fd.fileno(), event, why)
+        return event
 
     def _makeSocketEvent(self, fd, action, why, events=events):
         """Make a win32 event object for a socket."""
-        event = CreateEvent(None, 0, 0, None)
-        WSAEventSelect(fd, event, why)
-        events[event] = (fd, action)
+        id = len(fds)
+        fd_ids[fd] = id
+        fds.append((fd, action))
+        event = self._registerEvent(fd, id, why)
         return event
 
     def addEvent(self, event, fd, action, events=events):
         """Add a new win32 event to the event loop."""
+        BROKEN
         events[event] = (fd, action)
 
     def removeEvent(self, event):
         """Remove an event."""
+        BROKEN
         del events[event]
 
     def addReader(self, reader, reads=reads):
         """Add a socket FileDescriptor for notification of data available to read.
         """
         if not reads.has_key(reader):
-            reads[reader] = self._makeSocketEvent(reader, 'doRead', FD_READ|FD_ACCEPT|FD_CONNECT|FD_CLOSE)
+            reads[reader] = self._makeSocketEvent(reader, 'doRead',
+                                                  FD_READ|FD_ACCEPT|FD_CONNECT|FD_CLOSE)
 
     def addWriter(self, writer, writes=writes):
         """Add a socket FileDescriptor for notification of data available to write.
@@ -119,7 +127,15 @@
         """Remove a Selectable for notification of data available to read.
         """
         if reads.has_key(reader):
-            del events[reads[reader]]
+
+            end, action = fds.pop()
+            id = fd_ids.pop(reader)
+            if reader != end:
+                fd_ids[end] = id
+                fds[id] = (end, action)
+                self._registerEvent(end, id,
+                                    FD_READ|FD_ACCEPT|FD_CONNECT|FD_CLOSE)
+                
             del reads[reader]
 
     def removeWriter(self, writer, writes=writes):
@@ -155,8 +171,8 @@
         if canDoMoreWrites:
             timeout = 0
 
-        handles = events.keys() or [self.dummyEvent]
-        val = MsgWaitForMultipleObjects(handles, 0, timeout, QS_ALLINPUT | QS_ALLEVENTS)
+        handles = events
+        val = MsgWaitForMultipleObjects(len(handles), handles, 0, timeout, QS_ALLINPUT | QS_ALLEVENTS)
         if val == WAIT_TIMEOUT:
             return
         elif val == WAIT_OBJECT_0 + len(handles):
@@ -165,8 +181,18 @@
                 self.callLater(0, self.stop)
                 return
         elif val >= WAIT_OBJECT_0 and val < WAIT_OBJECT_0 + len(handles):
-            fd, action = events[handles[val - WAIT_OBJECT_0]]
-            log.callWithLogger(fd, self._runAction, action, fd)
+            val -= WAIT_OBJECT_0
+            for val in xrange(val, len(fds), 64):
+                fd, action = fds[val]
+                es = WSANETWORKEVENTS()
+                if WSAEnumNetworkEvents(fd.fileno(), None, ctypes.byref(es)):
+                    # broken!
+                    assert False
+                    self.callLater(0, self.stop)
+                    return
+                if es.lNetworkEvents == 0:
+                    continue
+                log.callWithLogger(fd, self._runAction, action, fd)
 
     def _runWrite(self, fd):
         closed = 0
