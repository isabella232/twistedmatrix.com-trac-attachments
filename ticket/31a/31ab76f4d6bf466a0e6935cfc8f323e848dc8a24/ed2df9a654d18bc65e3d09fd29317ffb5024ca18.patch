diff --git a/twisted/lore/test/test_lore.py b/twisted/lore/test/test_lore.py
index 3f399d9..7412e32 100644
--- a/twisted/lore/test/test_lore.py
+++ b/twisted/lore/test/test_lore.py
@@ -327,10 +327,10 @@ class TestFactory(unittest.TestCase, _XMLAssertionMixin):
         dirname = os.path.join("tmp", 'nonexistentdir')
         if os.path.exists(dirname):
             os.rmdir(dirname)
-        self.failIf(os.path.exists(dirname), "Hey: someone already created the dir")
+        self.assertFalse(os.path.exists(dirname), "Hey: someone already created the dir")
         filename = os.path.join(dirname, 'newfile')
         tree.makeSureDirectoryExists(filename)
-        self.failUnless(os.path.exists(dirname), 'should have created dir')
+        self.assertTrue(os.path.exists(dirname), 'should have created dir')
         os.rmdir(dirname)
 
 
diff --git a/twisted/news/test/test_news.py b/twisted/news/test/test_news.py
index 922f661..89921f9 100644
--- a/twisted/news/test/test_news.py
+++ b/twisted/news/test/test_news.py
@@ -57,7 +57,7 @@ class NewsTestCase(unittest.TestCase):
                               "callback result Message-Id doesn't match: %s vs %s" %
                               (MESSAGE_ID, result[1]))
             body = result[2].read()
-            self.failIfEqual(body.find('\r\n\r\n'), -1,
+            self.assertNotEqual(body.find('\r\n\r\n'), -1,
                              "Can't find \\r\\n\\r\\n between header and body")
             return result
 
diff --git a/twisted/protocols/test/test_basic.py b/twisted/protocols/test/test_basic.py
index 5a1468e..c8174c8 100644
--- a/twisted/protocols/test/test_basic.py
+++ b/twisted/protocols/test/test_basic.py
@@ -775,7 +775,7 @@ class RecvdAttributeMixin(object):
         incompleteMessage = (struct.pack(r.structFormat, 5) + (b'b' * 4))
         # Receive a complete message, followed by an incomplete one
         r.dataReceived(completeMessage + incompleteMessage)
-        self.assertEquals(result, [incompleteMessage])
+        self.assertEqual(result, [incompleteMessage])
 
 
     def test_recvdChanged(self):
@@ -797,7 +797,7 @@ class RecvdAttributeMixin(object):
         messageA = self.makeMessage(r, payloadA)
         messageB = self.makeMessage(r, payloadB)
         r.dataReceived(messageA + messageB)
-        self.assertEquals(result, [payloadA, payloadC])
+        self.assertEqual(result, [payloadA, payloadC])
 
 
     def test_switching(self):
@@ -1020,42 +1020,42 @@ class ProducerTestCase(unittest.SynchronousTestCase):
         p.makeConnection(t)
 
         p.dataReceived(b'hello, ')
-        self.failIf(t.data)
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertFalse(t.data)
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
 
         p.dataReceived(b'world\r\n')
 
         self.assertEqual(t.data, [b'hello, world'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
 
         p.dataReceived(b'hello\r\nworld\r\n')
 
         self.assertEqual(t.data, [b'hello, world', b'hello'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
         p.dataReceived(b'goodbye\r\n')
 
         self.assertEqual(t.data, [b'hello, world', b'hello', b'world'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
         self.assertEqual(t.data, [b'hello, world', b'hello', b'world', b'goodbye'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
         self.assertEqual(t.data, [b'hello, world', b'hello', b'world', b'goodbye'])
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
