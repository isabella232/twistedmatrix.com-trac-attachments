Index: twisted/test/process_twisted.py
===================================================================
--- twisted/test/process_twisted.py	(revision 31565)
+++ twisted/test/process_twisted.py	(working copy)
@@ -1,13 +1,18 @@
 """A process that reads from stdin and out using Twisted."""
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-pos = os.path.abspath(sys.argv[0]).find(os.sep+'Twisted')
-if pos != -1:
-    sys.path.insert(0, os.path.abspath(sys.argv[0])[:pos+8])
-sys.path.insert(0, os.curdir)
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 
Index: twisted/conch/test/test_conch.py
===================================================================
--- twisted/conch/test/test_conch.py	(revision 31565)
+++ twisted/conch/test/test_conch.py	(working copy)
@@ -247,13 +247,18 @@
     start = [sys.executable, '-c'
 """
 ### Twisted Preamble
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
 path = os.path.abspath(sys.argv[0])
 while os.path.dirname(path) != path:
-    if os.path.basename(path).startswith('Twisted'):
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
         sys.path.insert(0, path)
         break
     path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 
 from twisted.conch.scripts.%s import run
 run()""" % mod]
Index: doc/core/development/policy/coding-standard.xhtml
===================================================================
--- doc/core/development/policy/coding-standard.xhtml	(revision 31565)
+++ doc/core/development/policy/coding-standard.xhtml	(working copy)
@@ -361,12 +361,16 @@
 
       <li>Add the Twisted running-from-SVN header:
 <pre class="python">
-### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-if os.path.abspath(sys.argv[0]).find(os.sep+'Twisted') != -1:
-    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
 if not hasattr(os, "getuid") or os.getuid() != 0:
     sys.path.insert(0, os.getcwd())
 ### end of preamble
Index: bin/lore/lore
===================================================================
--- bin/lore/lore	(revision 31565)
+++ bin/lore/lore	(working copy)
@@ -5,17 +5,19 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
 path = os.path.abspath(sys.argv[0])
 while os.path.dirname(path) != path:
-    if os.path.basename(path).startswith('Twisted'):
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
         sys.path.insert(0, path)
         break
     path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.lore.scripts.lore import run
 run()
-
Index: bin/tap2deb
===================================================================
--- bin/tap2deb	(revision 31565)
+++ bin/tap2deb	(working copy)
@@ -4,16 +4,19 @@
 # See LICENSE for details.
 
 
-"""
-tap2deb
-"""
-
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-if os.path.abspath(sys.argv[0]).find(os.sep+'Twisted') != -1:
-    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.scripts import tap2deb
Index: bin/mail/mailmail
===================================================================
--- bin/mail/mailmail	(revision 31565)
+++ bin/mail/mailmail	(working copy)
@@ -9,17 +9,19 @@
 """
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
 path = os.path.abspath(sys.argv[0])
 while os.path.dirname(path) != path:
-    if os.path.basename(path).startswith('Twisted'):
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
         sys.path.insert(0, path)
         break
     path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.mail.scripts import mailmail
 mailmail.run()
-
Index: bin/manhole
===================================================================
--- bin/manhole	(revision 31565)
+++ bin/manhole	(working copy)
@@ -9,13 +9,19 @@
 """
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-if os.path.abspath(sys.argv[0]).find(os.sep+'Twisted') != -1:
-    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
-
 from twisted.scripts import manhole
 manhole.run()
Index: bin/tap2rpm
===================================================================
--- bin/tap2rpm	(revision 31565)
+++ bin/tap2rpm	(working copy)
@@ -6,16 +6,19 @@
 #  based off the tap2deb code
 #  tap2rpm built by Sean Reifschneider, <jafo@tummy.com>
 
-"""
-tap2rpm
-"""
-
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-if os.path.abspath(sys.argv[0]).find(os.sep+'Twisted') != -1:
-    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.scripts import tap2rpm
Index: bin/tapconvert
===================================================================
--- bin/tapconvert	(revision 31565)
+++ bin/tapconvert	(working copy)
@@ -5,11 +5,16 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-if os.path.abspath(sys.argv[0]).find(os.sep+'Twisted') != -1:
-    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
 if not hasattr(os, "getuid") or os.getuid() != 0:
     sys.path.insert(0, os.getcwd())
 ### end of preamble
Index: bin/pyhtmlizer
===================================================================
--- bin/pyhtmlizer	(revision 31565)
+++ bin/pyhtmlizer	(working copy)
@@ -5,12 +5,18 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-if os.path.abspath(sys.argv[0]).find(os.sep+'Twisted') != -1:
-    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
-sys.path.insert(0, os.curdir)
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.scripts.htmlizer import run
Index: bin/conch/ckeygen
===================================================================
--- bin/conch/ckeygen	(revision 31565)
+++ bin/conch/ckeygen	(working copy)
@@ -5,15 +5,18 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
 path = os.path.abspath(sys.argv[0])
 while os.path.dirname(path) != path:
-    if os.path.basename(path).startswith('Twisted'):
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
         sys.path.insert(0, path)
         break
     path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.conch.scripts.ckeygen import run
Index: bin/conch/tkconch
===================================================================
--- bin/conch/tkconch	(revision 31565)
+++ bin/conch/tkconch	(working copy)
@@ -5,15 +5,18 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
 path = os.path.abspath(sys.argv[0])
 while os.path.dirname(path) != path:
-    if os.path.basename(path).startswith('Twisted'):
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
         sys.path.insert(0, path)
         break
     path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.conch.scripts.tkconch import run
Index: bin/conch/conch
===================================================================
--- bin/conch/conch	(revision 31565)
+++ bin/conch/conch	(working copy)
@@ -5,15 +5,18 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
 path = os.path.abspath(sys.argv[0])
 while os.path.dirname(path) != path:
-    if os.path.basename(path).startswith('Twisted'):
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
         sys.path.insert(0, path)
         break
     path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.conch.scripts.conch import run
Index: bin/conch/cftp
===================================================================
--- bin/conch/cftp	(revision 31565)
+++ bin/conch/cftp	(working copy)
@@ -5,15 +5,18 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
 path = os.path.abspath(sys.argv[0])
 while os.path.dirname(path) != path:
-    if os.path.basename(path).startswith('Twisted'):
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
         sys.path.insert(0, path)
         break
     path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.conch.scripts.cftp import run
Index: bin/trial
===================================================================
--- bin/trial	(revision 31565)
+++ bin/trial	(working copy)
@@ -5,13 +5,18 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-if os.path.abspath(sys.argv[0]).find(os.sep+'Twisted') != -1:
-    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
-if hasattr(os, "getuid") and os.getuid() != 0:
-    sys.path.insert(0, os.curdir)
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
+if not hasattr(os, "getuid") or os.getuid() != 0:
+    sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 # begin chdir armor
Index: bin/mktap
===================================================================
--- bin/mktap	(revision 31565)
+++ bin/mktap	(working copy)
@@ -4,15 +4,19 @@
 
 
 ### Twisted Preamble
-# This makes sure that users don't have to set up their environment
-# specially in order to run these programs from bin/.
+# Allow users run scripts from the bin/ directory of
+# source checkout without setting the environment.
 import sys, os
-if os.path.abspath(sys.argv[0]).find(os.sep+'Twisted') != -1:
-    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
+path = os.path.abspath(sys.argv[0])
+while os.path.dirname(path) != path:
+    if "twisted" in os.path.basename(path).lower()\ 
+          and os.path.exists(path+os.sep+"setup.py"):
+        sys.path.insert(0, path)
+        break
+    path = os.path.dirname(path)
 if not hasattr(os, "getuid") or os.getuid() != 0:
     sys.path.insert(0, os.getcwd())
 ### end of preamble
 
 from twisted.scripts.mktap import run
 run()
-
