In case you want it for documentation, here's a version with comments 
added. I just hate updating Movabletype. ;)

--snip--

from twisted.internet import reactor
from twisted.internet import defer

waitFor = defer.waitForDeferred

def getSomeDeferred():
     """Some function that returns a Deferred."""
     d = defer.Deferred()
     reactor.callLater(2, d.callback, 'A string that yells "foo!"')
     return d

def anotherDeferred(needle, haystack):
     """Some other function that returns a Deferred."""
     d = defer.Deferred()
     reactor.callLater(2, d.callback, haystack.find(needle))
     return d

@defer.deferredGenerator
def find(needle):
     print 'I am going to find', needle, 'in a haystack.'
     # After yielding waitForDeferred, our generator
     # will be put on hold for a while.
     d = waitFor(getSomeDeferred())
     yield d
     # The reactor will call .next(), and we resume here.
     haystack = d.getResult()
     print 'I got my haystack back from a deferred.'
     # We're going to wait for another deferred result.
     d = waitFor(anotherDeferred(needle, haystack))
     yield d
     # When we get our next result, the procedure resumes here.
     print 'I found', repr(needle), 'at character', d.getResult()
     return

find('foo!')
reactor.run()

