diff --git twisted/names/dns.py twisted/names/dns.py
index 50fef18..e47fef8 100644
--- twisted/names/dns.py
+++ twisted/names/dns.py
@@ -122,34 +122,34 @@ OPT = 41
 SPF = 99
 
 QUERY_TYPES = {
-    A: 'A',
-    NS: 'NS',
-    MD: 'MD',
-    MF: 'MF',
-    CNAME: 'CNAME',
-    SOA: 'SOA',
-    MB: 'MB',
-    MG: 'MG',
-    MR: 'MR',
-    NULL: 'NULL',
-    WKS: 'WKS',
-    PTR: 'PTR',
-    HINFO: 'HINFO',
-    MINFO: 'MINFO',
-    MX: 'MX',
-    TXT: 'TXT',
-    RP: 'RP',
-    AFSDB: 'AFSDB',
+    A: 'A', # (1) RFC1035
+    NS: 'NS', # (2) RFC1035
+    MD: 'MD', # (3) RFC1035
+    MF: 'MF', # (4) RFC1035
+    CNAME: 'CNAME', # (5) RFC1035
+    SOA: 'SOA', # (6) RFC1035
+    MB: 'MB', # (7) RFC1035
+    MG: 'MG', # (8) RFC1035
+    MR: 'MR', # (9) RFC1035
+    NULL: 'NULL', # (10) RFC1035
+    WKS: 'WKS', # (11) RFC1035
+    PTR: 'PTR', # (12) RFC1035
+    HINFO: 'HINFO', # (13) RFC1035
+    MINFO: 'MINFO', # (14) RFC1035
+    MX: 'MX', # (15) RFC1035
+    TXT: 'TXT', # (16) RFC1035
+    RP: 'RP', # (17) RFC1183
+    AFSDB: 'AFSDB', # (18) RFC1183
 
     # 19 through 27?  Eh, I'll get to 'em.
 
-    AAAA: 'AAAA',
-    SRV: 'SRV',
-    NAPTR: 'NAPTR',
-    A6: 'A6',
-    DNAME: 'DNAME',
-    OPT: 'OPT',
-    SPF: 'SPF'
+    AAAA: 'AAAA', # (28) RFC3596
+    SRV: 'SRV', # (33) RFC2782
+    NAPTR: 'NAPTR', # (35) RFC2915, RFC2168, RFC3403
+    A6: 'A6', # (38) RFC3226, RFC2874, RFC6563
+    DNAME: 'DNAME', # (39) RFC6672
+    OPT: 'OPT', # (41) RFC6891, RFC3225
+    SPF: 'SPF' # (99) RFC7208
 }
 
 IXFR, AXFR, MAILB, MAILA, ALL_RECORDS = range(251, 256)
@@ -950,108 +950,6 @@ class SimpleRecord(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
 
 # Kinds of RRs - oh my!
-class Record_NS(SimpleRecord):
-    """
-    An authoritative nameserver.
-    """
-    TYPE = NS
-    fancybasename = 'NS'
-
-
-
-class Record_MD(SimpleRecord):
-    """
-    A mail destination.
-
-    This record type is obsolete.
-
-    @see: L{Record_MX}
-    """
-    TYPE = MD
-    fancybasename = 'MD'
-
-
-
-class Record_MF(SimpleRecord):
-    """
-    A mail forwarder.
-
-    This record type is obsolete.
-
-    @see: L{Record_MX}
-    """
-    TYPE = MF
-    fancybasename = 'MF'
-
-
-
-class Record_CNAME(SimpleRecord):
-    """
-    The canonical name for an alias.
-    """
-    TYPE = CNAME
-    fancybasename = 'CNAME'
-
-
-
-class Record_MB(SimpleRecord):
-    """
-    A mailbox domain name.
-
-    This is an experimental record type.
-    """
-    TYPE = MB
-    fancybasename = 'MB'
-
-
-
-class Record_MG(SimpleRecord):
-    """
-    A mail group member.
-
-    This is an experimental record type.
-    """
-    TYPE = MG
-    fancybasename = 'MG'
-
-
-
-class Record_MR(SimpleRecord):
-    """
-    A mail rename domain name.
-
-    This is an experimental record type.
-    """
-    TYPE = MR
-    fancybasename = 'MR'
-
-
-
-class Record_PTR(SimpleRecord):
-    """
-    A domain name pointer.
-    """
-    TYPE = PTR
-    fancybasename = 'PTR'
-
-
-
-class Record_DNAME(SimpleRecord):
-    """
-    A non-terminal DNS name redirection.
-
-    This record type provides the capability to map an entire subtree of the
-    DNS name space to another domain.  It differs from the CNAME record which
-    maps a single node of the name space.
-
-    @see: U{http://www.faqs.org/rfcs/rfc2672.html}
-    @see: U{http://www.faqs.org/rfcs/rfc3363.html}
-    """
-    TYPE = DNAME
-    fancybasename = 'DNAME'
-
-
-
 @implementer(IEncodable, IRecord)
 class Record_A(tputil.FancyEqMixin):
     """
@@ -1098,6 +996,50 @@ class Record_A(tputil.FancyEqMixin):
 
 
 
+class Record_NS(SimpleRecord):
+    """
+    An authoritative nameserver.
+    """
+    TYPE = NS
+    fancybasename = 'NS'
+
+
+
+class Record_MD(SimpleRecord):
+    """
+    A mail destination.
+
+    This record type is obsolete.
+
+    @see: L{Record_MX}
+    """
+    TYPE = MD
+    fancybasename = 'MD'
+
+
+
+class Record_MF(SimpleRecord):
+    """
+    A mail forwarder.
+
+    This record type is obsolete.
+
+    @see: L{Record_MX}
+    """
+    TYPE = MF
+    fancybasename = 'MF'
+
+
+
+class Record_CNAME(SimpleRecord):
+    """
+    The canonical name for an alias.
+    """
+    TYPE = CNAME
+    fancybasename = 'CNAME'
+
+
+
 @implementer(IEncodable, IRecord)
 class Record_SOA(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
@@ -1181,6 +1123,39 @@ class Record_SOA(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
+class Record_MB(SimpleRecord):
+    """
+    A mailbox domain name.
+
+    This is an experimental record type.
+    """
+    TYPE = MB
+    fancybasename = 'MB'
+
+
+
+class Record_MG(SimpleRecord):
+    """
+    A mail group member.
+
+    This is an experimental record type.
+    """
+    TYPE = MG
+    fancybasename = 'MG'
+
+
+
+class Record_MR(SimpleRecord):
+    """
+    A mail rename domain name.
+
+    This is an experimental record type.
+    """
+    TYPE = MR
+    fancybasename = 'MR'
+
+
+
 @implementer(IEncodable, IRecord)
 class Record_NULL(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
@@ -1270,290 +1245,255 @@ class Record_WKS(tputil.FancyEqMixin, tputil.FancyStrMixin):
 
 
 
+class Record_PTR(SimpleRecord):
+    """
+    A domain name pointer.
+    """
+    TYPE = PTR
+    fancybasename = 'PTR'
+
+
+
 @implementer(IEncodable, IRecord)
-class Record_AAAA(tputil.FancyEqMixin, tputil.FancyStrMixin):
+class Record_HINFO(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
-    An IPv6 host address.
+    Host information.
 
-    @type address: C{str}
-    @ivar address: The packed network-order representation of the IPv6 address
-        associated with this record.
+    @type cpu: C{str}
+    @ivar cpu: Specifies the CPU type.
+
+    @type os: C{str}
+    @ivar os: Specifies the OS.
 
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
-
-    @see: U{http://www.faqs.org/rfcs/rfc1886.html}
     """
-    TYPE = AAAA
-
-    fancybasename = 'AAAA'
-    showAttributes = (('_address', 'address', '%s'), 'ttl')
-    compareAttributes = ('address', 'ttl')
+    TYPE = HINFO
 
-    _address = property(lambda self: socket.inet_ntop(AF_INET6, self.address))
+    fancybasename = 'HINFO'
+    showAttributes = (('cpu', _nicebytes), ('os', _nicebytes), 'ttl')
+    compareAttributes = ('cpu', 'os', 'ttl')
 
-    def __init__(self, address='::', ttl=None):
-        self.address = socket.inet_pton(AF_INET6, address)
+    def __init__(self, cpu='', os='', ttl=None):
+        self.cpu, self.os = cpu, os
         self.ttl = str2time(ttl)
 
 
     def encode(self, strio, compDict = None):
-        strio.write(self.address)
+        strio.write(struct.pack('!B', len(self.cpu)) + self.cpu)
+        strio.write(struct.pack('!B', len(self.os)) + self.os)
 
 
     def decode(self, strio, length = None):
-        self.address = readPrecisely(strio, 16)
+        cpu = struct.unpack('!B', readPrecisely(strio, 1))[0]
+        self.cpu = readPrecisely(strio, cpu)
+        os = struct.unpack('!B', readPrecisely(strio, 1))[0]
+        self.os = readPrecisely(strio, os)
+
+
+    def __eq__(self, other):
+        if isinstance(other, Record_HINFO):
+            return (self.os.lower() == other.os.lower() and
+                    self.cpu.lower() == other.cpu.lower() and
+                    self.ttl == other.ttl)
+        return NotImplemented
 
 
     def __hash__(self):
-        return hash(self.address)
+        return hash((self.os.lower(), self.cpu.lower()))
 
 
 
 @implementer(IEncodable, IRecord)
-class Record_A6(tputil.FancyStrMixin, tputil.FancyEqMixin):
+class Record_MINFO(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
-    An IPv6 address.
+    Mailbox or mail list information.
 
     This is an experimental record type.
 
-    @type prefixLen: C{int}
-    @ivar prefixLen: The length of the suffix.
-
-    @type suffix: C{str}
-    @ivar suffix: An IPv6 address suffix in network order.
+    @type rmailbx: L{Name}
+    @ivar rmailbx: A domain-name which specifies a mailbox which is responsible
+        for the mailing list or mailbox.  If this domain name names the root,
+        the owner of the MINFO RR is responsible for itself.
 
-    @type prefix: L{Name}
-    @ivar prefix: If specified, a name which will be used as a prefix for other
-        A6 records.
-
-    @type bytes: C{int}
-    @ivar bytes: The length of the prefix.
+    @type emailbx: L{Name}
+    @ivar emailbx: A domain-name which specifies a mailbox which is to receive
+        error messages related to the mailing list or mailbox specified by the
+        owner of the MINFO record.  If this domain name names the root, errors
+        should be returned to the sender of the message.
 
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
-
-    @see: U{http://www.faqs.org/rfcs/rfc2874.html}
-    @see: U{http://www.faqs.org/rfcs/rfc3363.html}
-    @see: U{http://www.faqs.org/rfcs/rfc3364.html}
     """
-    TYPE = A6
+    TYPE = MINFO
 
-    fancybasename = 'A6'
-    showAttributes = (('_suffix', 'suffix', '%s'), ('prefix', 'prefix', '%s'), 'ttl')
-    compareAttributes = ('prefixLen', 'prefix', 'suffix', 'ttl')
+    rmailbx = None
+    emailbx = None
 
-    _suffix = property(lambda self: socket.inet_ntop(AF_INET6, self.suffix))
+    fancybasename = 'MINFO'
+    compareAttributes = ('rmailbx', 'emailbx', 'ttl')
+    showAttributes = (('rmailbx', 'responsibility', '%s'),
+                      ('emailbx', 'errors', '%s'),
+                      'ttl')
 
-    def __init__(self, prefixLen=0, suffix='::', prefix=b'', ttl=None):
-        self.prefixLen = prefixLen
-        self.suffix = socket.inet_pton(AF_INET6, suffix)
-        self.prefix = Name(prefix)
-        self.bytes = int((128 - self.prefixLen) / 8.0)
+    def __init__(self, rmailbx=b'', emailbx=b'', ttl=None):
+        self.rmailbx, self.emailbx = Name(rmailbx), Name(emailbx)
         self.ttl = str2time(ttl)
 
 
     def encode(self, strio, compDict = None):
-        strio.write(struct.pack('!B', self.prefixLen))
-        if self.bytes:
-            strio.write(self.suffix[-self.bytes:])
-        if self.prefixLen:
-            # This may not be compressed
-            self.prefix.encode(strio, None)
+        self.rmailbx.encode(strio, compDict)
+        self.emailbx.encode(strio, compDict)
 
 
     def decode(self, strio, length = None):
-        self.prefixLen = struct.unpack('!B', readPrecisely(strio, 1))[0]
-        self.bytes = int((128 - self.prefixLen) / 8.0)
-        if self.bytes:
-            self.suffix = b'\x00' * (16 - self.bytes) + readPrecisely(strio, self.bytes)
-        if self.prefixLen:
-            self.prefix.decode(strio)
-
-
-    def __eq__(self, other):
-        if isinstance(other, Record_A6):
-            return (self.prefixLen == other.prefixLen and
-                    self.suffix[-self.bytes:] == other.suffix[-self.bytes:] and
-                    self.prefix == other.prefix and
-                    self.ttl == other.ttl)
-        return NotImplemented
+        self.rmailbx, self.emailbx = Name(), Name()
+        self.rmailbx.decode(strio)
+        self.emailbx.decode(strio)
 
 
     def __hash__(self):
-        return hash((self.prefixLen, self.suffix[-self.bytes:], self.prefix))
-
-
-    def __str__(self):
-        return '<A6 %s %s (%d) ttl=%s>' % (
-            self.prefix,
-            socket.inet_ntop(AF_INET6, self.suffix),
-            self.prefixLen, self.ttl
-        )
+        return hash((self.rmailbx, self.emailbx))
 
 
 
 @implementer(IEncodable, IRecord)
-class Record_SRV(tputil.FancyEqMixin, tputil.FancyStrMixin):
+class Record_MX(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
-    The location of the server(s) for a specific protocol and domain.
-
-    This is an experimental record type.
-
-    @type priority: C{int}
-    @ivar priority: The priority of this target host.  A client MUST attempt to
-        contact the target host with the lowest-numbered priority it can reach;
-        target hosts with the same priority SHOULD be tried in an order defined
-        by the weight field.
-
-    @type weight: C{int}
-    @ivar weight: Specifies a relative weight for entries with the same
-        priority. Larger weights SHOULD be given a proportionately higher
-        probability of being selected.
+    Mail exchange.
 
-    @type port: C{int}
-    @ivar port: The port on this target host of this service.
+    @type preference: C{int}
+    @ivar preference: Specifies the preference given to this RR among others at
+        the same owner.  Lower values are preferred.
 
-    @type target: L{Name}
-    @ivar target: The domain name of the target host.  There MUST be one or
-        more address records for this name, the name MUST NOT be an alias (in
-        the sense of RFC 1034 or RFC 2181).  Implementors are urged, but not
-        required, to return the address record(s) in the Additional Data
-        section.  Unless and until permitted by future standards action, name
-        compression is not to be used for this field.
+    @type name: L{Name}
+    @ivar name: A domain-name which specifies a host willing to act as a mail
+        exchange.
 
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
-
-    @see: U{http://www.faqs.org/rfcs/rfc2782.html}
     """
-    TYPE = SRV
+    TYPE = MX
 
-    fancybasename = 'SRV'
-    compareAttributes = ('priority', 'weight', 'target', 'port', 'ttl')
-    showAttributes = ('priority', 'weight', ('target', 'target', '%s'), 'port', 'ttl')
+    fancybasename = 'MX'
+    compareAttributes = ('preference', 'name', 'ttl')
+    showAttributes = ('preference', ('name', 'name', '%s'), 'ttl')
 
-    def __init__(self, priority=0, weight=0, port=0, target=b'', ttl=None):
-        self.priority = int(priority)
-        self.weight = int(weight)
-        self.port = int(port)
-        self.target = Name(target)
+    def __init__(self, preference=0, name=b'', ttl=None, **kwargs):
+        self.preference, self.name = int(preference), Name(kwargs.get('exchange', name))
         self.ttl = str2time(ttl)
 
-
     def encode(self, strio, compDict = None):
-        strio.write(struct.pack('!HHH', self.priority, self.weight, self.port))
-        # This can't be compressed
-        self.target.encode(strio, None)
+        strio.write(struct.pack('!H', self.preference))
+        self.name.encode(strio, compDict)
 
 
     def decode(self, strio, length = None):
-        r = struct.unpack('!HHH', readPrecisely(strio, struct.calcsize('!HHH')))
-        self.priority, self.weight, self.port = r
-        self.target = Name()
-        self.target.decode(strio)
-
+        self.preference = struct.unpack('!H', readPrecisely(strio, 2))[0]
+        self.name = Name()
+        self.name.decode(strio)
 
     def __hash__(self):
-        return hash((self.priority, self.weight, self.port, self.target))
+        return hash((self.preference, self.name))
 
 
 
 @implementer(IEncodable, IRecord)
-class Record_NAPTR(tputil.FancyEqMixin, tputil.FancyStrMixin):
+class Record_TXT(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
-    The location of the server(s) for a specific protocol and domain.
+    Freeform text.
 
-    @type order: C{int}
-    @ivar order: An integer specifying the order in which the NAPTR records
-        MUST be processed to ensure the correct ordering of rules.  Low numbers
-        are processed before high numbers.
+    @type data: C{list} of C{bytes}
+    @ivar data: Freeform text which makes up this record.
 
-    @type preference: C{int}
-    @ivar preference: An integer that specifies the order in which NAPTR
-        records with equal "order" values SHOULD be processed, low numbers
-        being processed before high numbers.
+    @type ttl: C{int}
+    @ivar ttl: The maximum number of seconds which this record should be cached.
+    """
+    TYPE = TXT
 
-    @type flag: L{Charstr}
-    @ivar flag: A <character-string> containing flags to control aspects of the
-        rewriting and interpretation of the fields in the record.  Flags
-        are single characters from the set [A-Z0-9].  The case of the alphabetic
-        characters is not significant.
+    fancybasename = 'TXT'
+    showAttributes = (('data', _nicebyteslist), 'ttl')
+    compareAttributes = ('data', 'ttl')
 
-        At this time only four flags, "S", "A", "U", and "P", are defined.
+    def __init__(self, *data, **kw):
+        self.data = list(data)
+        # arg man python sucks so bad
+        self.ttl = str2time(kw.get('ttl', None))
 
-    @type service: L{Charstr}
-    @ivar service: Specifies the service(s) available down this rewrite path.
-        It may also specify the particular protocol that is used to talk with a
-        service.  A protocol MUST be specified if the flags field states that
-        the NAPTR is terminal.
 
-    @type regexp: L{Charstr}
-    @ivar regexp: A STRING containing a substitution expression that is applied
-        to the original string held by the client in order to construct the
-        next domain name to lookup.
+    def encode(self, strio, compDict=None):
+        for d in self.data:
+            strio.write(struct.pack('!B', len(d)) + d)
 
-    @type replacement: L{Name}
-    @ivar replacement: The next NAME to query for NAPTR, SRV, or address
-        records depending on the value of the flags field.  This MUST be a
-        fully qualified domain-name.
+
+    def decode(self, strio, length=None):
+        soFar = 0
+        self.data = []
+        while soFar < length:
+            L = struct.unpack('!B', readPrecisely(strio, 1))[0]
+            self.data.append(readPrecisely(strio, L))
+            soFar += L + 1
+        if soFar != length:
+            log.msg(
+                "Decoded %d bytes in %s record, but rdlength is %d" % (
+                    soFar, self.fancybasename, length
+                )
+            )
+
+
+    def __hash__(self):
+        return hash(tuple(self.data))
+
+
+
+@implementer(IEncodable, IRecord)
+class Record_RP(tputil.FancyEqMixin, tputil.FancyStrMixin):
+    """
+    The responsible person for a domain.
+
+    @type mbox: L{Name}
+    @ivar mbox: A domain name that specifies the mailbox for the responsible
+        person.
+
+    @type txt: L{Name}
+    @ivar txt: A domain name for which TXT RR's exist (indirection through
+        which allows information sharing about the contents of this RP record).
 
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
 
-    @see: U{http://www.faqs.org/rfcs/rfc2915.html}
+    @see: U{http://www.faqs.org/rfcs/rfc1183.html}
     """
-    TYPE = NAPTR
-
-    compareAttributes = ('order', 'preference', 'flags', 'service', 'regexp',
-                         'replacement')
-    fancybasename = 'NAPTR'
+    TYPE = RP
 
-    showAttributes = ('order', 'preference', ('flags', 'flags', '%s'),
-                      ('service', 'service', '%s'), ('regexp', 'regexp', '%s'),
-                      ('replacement', 'replacement', '%s'), 'ttl')
+    fancybasename = 'RP'
+    compareAttributes = ('mbox', 'txt', 'ttl')
+    showAttributes = (('mbox', 'mbox', '%s'), ('txt', 'txt', '%s'), 'ttl')
 
-    def __init__(self, order=0, preference=0, flags=b'', service=b'', regexp=b'',
-                 replacement=b'', ttl=None):
-        self.order = int(order)
-        self.preference = int(preference)
-        self.flags = Charstr(flags)
-        self.service = Charstr(service)
-        self.regexp = Charstr(regexp)
-        self.replacement = Name(replacement)
+    def __init__(self, mbox=b'', txt=b'', ttl=None):
+        self.mbox = Name(mbox)
+        self.txt = Name(txt)
         self.ttl = str2time(ttl)
 
 
-    def encode(self, strio, compDict=None):
-        strio.write(struct.pack('!HH', self.order, self.preference))
-        # This can't be compressed
-        self.flags.encode(strio, None)
-        self.service.encode(strio, None)
-        self.regexp.encode(strio, None)
-        self.replacement.encode(strio, None)
+    def encode(self, strio, compDict = None):
+        self.mbox.encode(strio, compDict)
+        self.txt.encode(strio, compDict)
 
 
-    def decode(self, strio, length=None):
-        r = struct.unpack('!HH', readPrecisely(strio, struct.calcsize('!HH')))
-        self.order, self.preference = r
-        self.flags = Charstr()
-        self.service = Charstr()
-        self.regexp = Charstr()
-        self.replacement = Name()
-        self.flags.decode(strio)
-        self.service.decode(strio)
-        self.regexp.decode(strio)
-        self.replacement.decode(strio)
+    def decode(self, strio, length = None):
+        self.mbox = Name()
+        self.txt = Name()
+        self.mbox.decode(strio)
+        self.txt.decode(strio)
 
 
     def __hash__(self):
-        return hash((
-            self.order, self.preference, self.flags,
-            self.service, self.regexp, self.replacement))
+        return hash((self.mbox, self.txt))
 
 
 
@@ -1607,245 +1547,321 @@ class Record_AFSDB(tputil.FancyStrMixin, tputil.FancyEqMixin):
 
 
 @implementer(IEncodable, IRecord)
-class Record_RP(tputil.FancyEqMixin, tputil.FancyStrMixin):
+class Record_AAAA(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
-    The responsible person for a domain.
-
-    @type mbox: L{Name}
-    @ivar mbox: A domain name that specifies the mailbox for the responsible
-        person.
+    An IPv6 host address.
 
-    @type txt: L{Name}
-    @ivar txt: A domain name for which TXT RR's exist (indirection through
-        which allows information sharing about the contents of this RP record).
+    @type address: C{str}
+    @ivar address: The packed network-order representation of the IPv6 address
+        associated with this record.
 
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
 
-    @see: U{http://www.faqs.org/rfcs/rfc1183.html}
+    @see: U{http://www.faqs.org/rfcs/rfc1886.html}
     """
-    TYPE = RP
+    TYPE = AAAA
 
-    fancybasename = 'RP'
-    compareAttributes = ('mbox', 'txt', 'ttl')
-    showAttributes = (('mbox', 'mbox', '%s'), ('txt', 'txt', '%s'), 'ttl')
+    fancybasename = 'AAAA'
+    showAttributes = (('_address', 'address', '%s'), 'ttl')
+    compareAttributes = ('address', 'ttl')
 
-    def __init__(self, mbox=b'', txt=b'', ttl=None):
-        self.mbox = Name(mbox)
-        self.txt = Name(txt)
+    _address = property(lambda self: socket.inet_ntop(AF_INET6, self.address))
+
+    def __init__(self, address='::', ttl=None):
+        self.address = socket.inet_pton(AF_INET6, address)
         self.ttl = str2time(ttl)
 
 
     def encode(self, strio, compDict = None):
-        self.mbox.encode(strio, compDict)
-        self.txt.encode(strio, compDict)
+        strio.write(self.address)
 
 
     def decode(self, strio, length = None):
-        self.mbox = Name()
-        self.txt = Name()
-        self.mbox.decode(strio)
-        self.txt.decode(strio)
+        self.address = readPrecisely(strio, 16)
 
 
     def __hash__(self):
-        return hash((self.mbox, self.txt))
+        return hash(self.address)
 
 
 
 @implementer(IEncodable, IRecord)
-class Record_HINFO(tputil.FancyStrMixin, tputil.FancyEqMixin):
+class Record_SRV(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
-    Host information.
+    The location of the server(s) for a specific protocol and domain.
 
-    @type cpu: C{str}
-    @ivar cpu: Specifies the CPU type.
+    This is an experimental record type.
 
-    @type os: C{str}
-    @ivar os: Specifies the OS.
+    @type priority: C{int}
+    @ivar priority: The priority of this target host.  A client MUST attempt to
+        contact the target host with the lowest-numbered priority it can reach;
+        target hosts with the same priority SHOULD be tried in an order defined
+        by the weight field.
+
+    @type weight: C{int}
+    @ivar weight: Specifies a relative weight for entries with the same
+        priority. Larger weights SHOULD be given a proportionately higher
+        probability of being selected.
+
+    @type port: C{int}
+    @ivar port: The port on this target host of this service.
+
+    @type target: L{Name}
+    @ivar target: The domain name of the target host.  There MUST be one or
+        more address records for this name, the name MUST NOT be an alias (in
+        the sense of RFC 1034 or RFC 2181).  Implementors are urged, but not
+        required, to return the address record(s) in the Additional Data
+        section.  Unless and until permitted by future standards action, name
+        compression is not to be used for this field.
 
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
+
+    @see: U{http://www.faqs.org/rfcs/rfc2782.html}
     """
-    TYPE = HINFO
+    TYPE = SRV
 
-    fancybasename = 'HINFO'
-    showAttributes = (('cpu', _nicebytes), ('os', _nicebytes), 'ttl')
-    compareAttributes = ('cpu', 'os', 'ttl')
+    fancybasename = 'SRV'
+    compareAttributes = ('priority', 'weight', 'target', 'port', 'ttl')
+    showAttributes = ('priority', 'weight', ('target', 'target', '%s'), 'port', 'ttl')
 
-    def __init__(self, cpu='', os='', ttl=None):
-        self.cpu, self.os = cpu, os
+    def __init__(self, priority=0, weight=0, port=0, target=b'', ttl=None):
+        self.priority = int(priority)
+        self.weight = int(weight)
+        self.port = int(port)
+        self.target = Name(target)
         self.ttl = str2time(ttl)
 
 
     def encode(self, strio, compDict = None):
-        strio.write(struct.pack('!B', len(self.cpu)) + self.cpu)
-        strio.write(struct.pack('!B', len(self.os)) + self.os)
+        strio.write(struct.pack('!HHH', self.priority, self.weight, self.port))
+        # This can't be compressed
+        self.target.encode(strio, None)
 
 
     def decode(self, strio, length = None):
-        cpu = struct.unpack('!B', readPrecisely(strio, 1))[0]
-        self.cpu = readPrecisely(strio, cpu)
-        os = struct.unpack('!B', readPrecisely(strio, 1))[0]
-        self.os = readPrecisely(strio, os)
-
-
-    def __eq__(self, other):
-        if isinstance(other, Record_HINFO):
-            return (self.os.lower() == other.os.lower() and
-                    self.cpu.lower() == other.cpu.lower() and
-                    self.ttl == other.ttl)
-        return NotImplemented
+        r = struct.unpack('!HHH', readPrecisely(strio, struct.calcsize('!HHH')))
+        self.priority, self.weight, self.port = r
+        self.target = Name()
+        self.target.decode(strio)
 
 
     def __hash__(self):
-        return hash((self.os.lower(), self.cpu.lower()))
+        return hash((self.priority, self.weight, self.port, self.target))
 
 
 
 @implementer(IEncodable, IRecord)
-class Record_MINFO(tputil.FancyEqMixin, tputil.FancyStrMixin):
+class Record_NAPTR(tputil.FancyEqMixin, tputil.FancyStrMixin):
     """
-    Mailbox or mail list information.
+    The location of the server(s) for a specific protocol and domain.
 
-    This is an experimental record type.
+    @type order: C{int}
+    @ivar order: An integer specifying the order in which the NAPTR records
+        MUST be processed to ensure the correct ordering of rules.  Low numbers
+        are processed before high numbers.
 
-    @type rmailbx: L{Name}
-    @ivar rmailbx: A domain-name which specifies a mailbox which is responsible
-        for the mailing list or mailbox.  If this domain name names the root,
-        the owner of the MINFO RR is responsible for itself.
+    @type preference: C{int}
+    @ivar preference: An integer that specifies the order in which NAPTR
+        records with equal "order" values SHOULD be processed, low numbers
+        being processed before high numbers.
 
-    @type emailbx: L{Name}
-    @ivar emailbx: A domain-name which specifies a mailbox which is to receive
-        error messages related to the mailing list or mailbox specified by the
-        owner of the MINFO record.  If this domain name names the root, errors
-        should be returned to the sender of the message.
+    @type flag: L{Charstr}
+    @ivar flag: A <character-string> containing flags to control aspects of the
+        rewriting and interpretation of the fields in the record.  Flags
+        are single characters from the set [A-Z0-9].  The case of the alphabetic
+        characters is not significant.
+
+        At this time only four flags, "S", "A", "U", and "P", are defined.
+
+    @type service: L{Charstr}
+    @ivar service: Specifies the service(s) available down this rewrite path.
+        It may also specify the particular protocol that is used to talk with a
+        service.  A protocol MUST be specified if the flags field states that
+        the NAPTR is terminal.
+
+    @type regexp: L{Charstr}
+    @ivar regexp: A STRING containing a substitution expression that is applied
+        to the original string held by the client in order to construct the
+        next domain name to lookup.
+
+    @type replacement: L{Name}
+    @ivar replacement: The next NAME to query for NAPTR, SRV, or address
+        records depending on the value of the flags field.  This MUST be a
+        fully qualified domain-name.
 
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
+
+    @see: U{http://www.faqs.org/rfcs/rfc2915.html}
     """
-    TYPE = MINFO
+    TYPE = NAPTR
 
-    rmailbx = None
-    emailbx = None
+    compareAttributes = ('order', 'preference', 'flags', 'service', 'regexp',
+                         'replacement')
+    fancybasename = 'NAPTR'
 
-    fancybasename = 'MINFO'
-    compareAttributes = ('rmailbx', 'emailbx', 'ttl')
-    showAttributes = (('rmailbx', 'responsibility', '%s'),
-                      ('emailbx', 'errors', '%s'),
-                      'ttl')
+    showAttributes = ('order', 'preference', ('flags', 'flags', '%s'),
+                      ('service', 'service', '%s'), ('regexp', 'regexp', '%s'),
+                      ('replacement', 'replacement', '%s'), 'ttl')
 
-    def __init__(self, rmailbx=b'', emailbx=b'', ttl=None):
-        self.rmailbx, self.emailbx = Name(rmailbx), Name(emailbx)
+    def __init__(self, order=0, preference=0, flags=b'', service=b'', regexp=b'',
+                 replacement=b'', ttl=None):
+        self.order = int(order)
+        self.preference = int(preference)
+        self.flags = Charstr(flags)
+        self.service = Charstr(service)
+        self.regexp = Charstr(regexp)
+        self.replacement = Name(replacement)
         self.ttl = str2time(ttl)
 
 
-    def encode(self, strio, compDict = None):
-        self.rmailbx.encode(strio, compDict)
-        self.emailbx.encode(strio, compDict)
+    def encode(self, strio, compDict=None):
+        strio.write(struct.pack('!HH', self.order, self.preference))
+        # This can't be compressed
+        self.flags.encode(strio, None)
+        self.service.encode(strio, None)
+        self.regexp.encode(strio, None)
+        self.replacement.encode(strio, None)
 
 
-    def decode(self, strio, length = None):
-        self.rmailbx, self.emailbx = Name(), Name()
-        self.rmailbx.decode(strio)
-        self.emailbx.decode(strio)
+    def decode(self, strio, length=None):
+        r = struct.unpack('!HH', readPrecisely(strio, struct.calcsize('!HH')))
+        self.order, self.preference = r
+        self.flags = Charstr()
+        self.service = Charstr()
+        self.regexp = Charstr()
+        self.replacement = Name()
+        self.flags.decode(strio)
+        self.service.decode(strio)
+        self.regexp.decode(strio)
+        self.replacement.decode(strio)
 
 
     def __hash__(self):
-        return hash((self.rmailbx, self.emailbx))
+        return hash((
+            self.order, self.preference, self.flags,
+            self.service, self.regexp, self.replacement))
 
 
 
 @implementer(IEncodable, IRecord)
-class Record_MX(tputil.FancyStrMixin, tputil.FancyEqMixin):
+class Record_A6(tputil.FancyStrMixin, tputil.FancyEqMixin):
     """
-    Mail exchange.
+    An IPv6 address.
 
-    @type preference: C{int}
-    @ivar preference: Specifies the preference given to this RR among others at
-        the same owner.  Lower values are preferred.
+    This is an experimental record type.
 
-    @type name: L{Name}
-    @ivar name: A domain-name which specifies a host willing to act as a mail
-        exchange.
+    @type prefixLen: C{int}
+    @ivar prefixLen: The length of the suffix.
+
+    @type suffix: C{str}
+    @ivar suffix: An IPv6 address suffix in network order.
+
+    @type prefix: L{Name}
+    @ivar prefix: If specified, a name which will be used as a prefix for other
+        A6 records.
+
+    @type bytes: C{int}
+    @ivar bytes: The length of the prefix.
 
     @type ttl: C{int}
     @ivar ttl: The maximum number of seconds which this record should be
         cached.
+
+    @see: U{http://www.faqs.org/rfcs/rfc2874.html}
+    @see: U{http://www.faqs.org/rfcs/rfc3363.html}
+    @see: U{http://www.faqs.org/rfcs/rfc3364.html}
     """
-    TYPE = MX
+    TYPE = A6
 
-    fancybasename = 'MX'
-    compareAttributes = ('preference', 'name', 'ttl')
-    showAttributes = ('preference', ('name', 'name', '%s'), 'ttl')
+    fancybasename = 'A6'
+    showAttributes = (('_suffix', 'suffix', '%s'), ('prefix', 'prefix', '%s'), 'ttl')
+    compareAttributes = ('prefixLen', 'prefix', 'suffix', 'ttl')
 
-    def __init__(self, preference=0, name=b'', ttl=None, **kwargs):
-        self.preference, self.name = int(preference), Name(kwargs.get('exchange', name))
+    _suffix = property(lambda self: socket.inet_ntop(AF_INET6, self.suffix))
+
+    def __init__(self, prefixLen=0, suffix='::', prefix=b'', ttl=None):
+        self.prefixLen = prefixLen
+        self.suffix = socket.inet_pton(AF_INET6, suffix)
+        self.prefix = Name(prefix)
+        self.bytes = int((128 - self.prefixLen) / 8.0)
         self.ttl = str2time(ttl)
 
+
     def encode(self, strio, compDict = None):
-        strio.write(struct.pack('!H', self.preference))
-        self.name.encode(strio, compDict)
+        strio.write(struct.pack('!B', self.prefixLen))
+        if self.bytes:
+            strio.write(self.suffix[-self.bytes:])
+        if self.prefixLen:
+            # This may not be compressed
+            self.prefix.encode(strio, None)
 
 
     def decode(self, strio, length = None):
-        self.preference = struct.unpack('!H', readPrecisely(strio, 2))[0]
-        self.name = Name()
-        self.name.decode(strio)
+        self.prefixLen = struct.unpack('!B', readPrecisely(strio, 1))[0]
+        self.bytes = int((128 - self.prefixLen) / 8.0)
+        if self.bytes:
+            self.suffix = b'\x00' * (16 - self.bytes) + readPrecisely(strio, self.bytes)
+        if self.prefixLen:
+            self.prefix.decode(strio)
+
+
+    def __eq__(self, other):
+        if isinstance(other, Record_A6):
+            return (self.prefixLen == other.prefixLen and
+                    self.suffix[-self.bytes:] == other.suffix[-self.bytes:] and
+                    self.prefix == other.prefix and
+                    self.ttl == other.ttl)
+        return NotImplemented
+
 
     def __hash__(self):
-        return hash((self.preference, self.name))
+        return hash((self.prefixLen, self.suffix[-self.bytes:], self.prefix))
 
 
+    def __str__(self):
+        return '<A6 %s %s (%d) ttl=%s>' % (
+            self.prefix,
+            socket.inet_ntop(AF_INET6, self.suffix),
+            self.prefixLen, self.ttl
+        )
 
-@implementer(IEncodable, IRecord)
-class Record_TXT(tputil.FancyEqMixin, tputil.FancyStrMixin):
-    """
-    Freeform text.
 
-    @type data: C{list} of C{bytes}
-    @ivar data: Freeform text which makes up this record.
 
-    @type ttl: C{int}
-    @ivar ttl: The maximum number of seconds which this record should be cached.
+class Record_DNAME(SimpleRecord):
     """
-    TYPE = TXT
-
-    fancybasename = 'TXT'
-    showAttributes = (('data', _nicebyteslist), 'ttl')
-    compareAttributes = ('data', 'ttl')
+    A non-terminal DNS name redirection.
 
-    def __init__(self, *data, **kw):
-        self.data = list(data)
-        # arg man python sucks so bad
-        self.ttl = str2time(kw.get('ttl', None))
+    This record type provides the capability to map an entire subtree of the
+    DNS name space to another domain.  It differs from the CNAME record which
+    maps a single node of the name space.
 
+    @see: U{http://www.faqs.org/rfcs/rfc2672.html}
+    @see: U{http://www.faqs.org/rfcs/rfc3363.html}
+    """
+    TYPE = DNAME
+    fancybasename = 'DNAME'
 
-    def encode(self, strio, compDict=None):
-        for d in self.data:
-            strio.write(struct.pack('!B', len(d)) + d)
 
 
-    def decode(self, strio, length=None):
-        soFar = 0
-        self.data = []
-        while soFar < length:
-            L = struct.unpack('!B', readPrecisely(strio, 1))[0]
-            self.data.append(readPrecisely(strio, L))
-            soFar += L + 1
-        if soFar != length:
-            log.msg(
-                "Decoded %d bytes in %s record, but rdlength is %d" % (
-                    soFar, self.fancybasename, length
-                )
-            )
+class Record_SPF(Record_TXT):
+    """
+    Structurally, freeform text. Semantically, a policy definition, formatted
+    as defined in U{rfc 4408<http://www.faqs.org/rfcs/rfc4408.html>}.
 
+    @type data: C{list} of C{str}
+    @ivar data: Freeform text which makes up this record.
 
-    def __hash__(self):
-        return hash(tuple(self.data))
+    @type ttl: C{int}
+    @ivar ttl: The maximum number of seconds which this record should be cached.
+    """
+    TYPE = SPF
+    fancybasename = 'SPF'
 
 
 
@@ -1895,22 +1911,6 @@ class UnknownRecord(tputil.FancyEqMixin, tputil.FancyStrMixin, object):
 
 
 
-class Record_SPF(Record_TXT):
-    """
-    Structurally, freeform text. Semantically, a policy definition, formatted
-    as defined in U{rfc 4408<http://www.faqs.org/rfcs/rfc4408.html>}.
-
-    @type data: C{list} of C{str}
-    @ivar data: Freeform text which makes up this record.
-
-    @type ttl: C{int}
-    @ivar ttl: The maximum number of seconds which this record should be cached.
-    """
-    TYPE = SPF
-    fancybasename = 'SPF'
-
-
-
 def _responseFromMessage(responseConstructor, message, **kwargs):
     """
     Generate a L{Message} like instance suitable for use as the response to
