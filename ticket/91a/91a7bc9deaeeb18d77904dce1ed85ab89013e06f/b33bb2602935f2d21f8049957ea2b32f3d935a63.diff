Index: twisted/mail/test/test_smtp.py
===================================================================
--- twisted/mail/test/test_smtp.py	(revision 21496)
+++ twisted/mail/test/test_smtp.py	(working copy)
@@ -14,7 +14,7 @@
 from twisted import internet
 from twisted.protocols import loopback
 from twisted.mail import smtp
-from twisted.internet import defer, protocol, reactor, interfaces, address, error
+from twisted.internet import defer, protocol, reactor, interfaces, address, error, task
 from twisted.test.test_protocols import StringIOWithoutClosing
 from twisted.test.proto_helpers import StringTransport
 
@@ -118,7 +118,7 @@
         if self.mbox != self.factory.domains['baz.com'].messages:
             raise AssertionError(self.factory.domains['baz.com'].messages)
         protocol.setTimeout(None)
-        
+
     testMessages.suppress = [util.suppress(message='DomainSMTP', category=DeprecationWarning)]
 
 mail = '''\
@@ -491,23 +491,38 @@
         self.failUnless(out[0].startswith('220'))
         self.assertEquals(out[1], "500 Error: bad syntax")
 
+
+
 class TimeoutTestCase(unittest.TestCase, LoopbackMixin):
+    """
+    Check that SMTP client factories correctly use the timeout.
+    """
+
     def _timeoutTest(self, onDone, clientFactory):
-        before = time.time()
-
+        """
+        Connect the clientFactory, and check the timeout on the request.
+        """
+        clock = task.Clock()
         client = clientFactory.buildProtocol(
             address.IPv4Address('TCP', 'example.net', 25))
-        server = protocol.Protocol()
+        client.callLater = clock.callLater
+        t = StringTransport()
+        client.makeConnection(t)
+        t.protocol = client
+        calls = []
+        d = self.assertFailure(onDone, smtp.SMTPTimeoutError).addCallback(calls.append)
+        clock.advance(0.1)
+        # the timeout shouldn't have happened yet
+        self.assertEquals(len(calls), 0)
+        clock.advance(0.4)
+        self.assertEquals(len(calls), 1)
+        return d
 
-        def check(ignored):
-            after = time.time()
-            self.failIf(after - before > 1.0)
-            return self.assertFailure(onDone, smtp.SMTPTimeoutError)
-            
-        return self.loopback(client, server).addCallback(check)
 
-
-    def testSMTPClient(self):
+    def test_SMTPClient(self):
+        """
+        Test timeout for L{smtp.SMTPSenderFactory}.
+        """
         onDone = defer.Deferred()
         clientFactory = smtp.SMTPSenderFactory(
             'source@address', 'recipient@address',
@@ -516,7 +531,10 @@
         return self._timeoutTest(onDone, clientFactory)
 
 
-    def testESMTPClient(self):
+    def test_ESMTPClient(self):
+        """
+        Test timeout for L{smtp.ESMTPSenderFactory}.
+        """
         onDone = defer.Deferred()
         clientFactory = smtp.ESMTPSenderFactory(
             'username', 'password',
