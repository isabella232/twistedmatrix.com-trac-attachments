Index: examples/reverse-proxy.py
===================================================================
--- examples/reverse-proxy.py	(revision 34067)
+++ examples/reverse-proxy.py	(working copy)
@@ -1,6 +1,6 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
-
+#
 # Run this example with:
 #    python reverse-proxy.py
 #
Index: examples/fortune.rpy.py
===================================================================
--- examples/fortune.rpy.py	(revision 34067)
+++ examples/fortune.rpy.py	(working copy)
@@ -1,3 +1,21 @@
+# This example demostrates how to render the output of a 
+# system process to a twisted web server.
+# 
+# In order to run this, you need to have fortune installed.
+# Fortune is a simple game that displays a random message
+# from a database of quotations. You will need to change the 
+# path of the fortune program if it's not in the "/usr/game"
+# directory.
+# 
+# To test the script, rename the file to fortune.rpy, and
+# move it to any directory, let's say /var/www/html/
+#
+# Now, start your Twist web server:
+#   $ twistd -n web --path /var/www/html/
+# to access 
+#   http://127.0.0.1:8080/fortune.rpy
+
+
 from twisted.web.resource import Resource
 from twisted.web import server
 from twisted.internet import utils
@@ -4,14 +22,26 @@
 from twisted.python import util
 
 class FortuneResource(Resource):
+    """
+    This resource will only repond to HEAD & GET requests
+    """
 
     def render_GET(self, request):
         request.write("<pre>\n")
+        """
+        Spawn a process and return the output as a deferred
+        Link your fortune to /usr/games or Change the path
+        """
         deferred = utils.getProcessOutput("/usr/games/fortune")
+
         deferred.addCallback(lambda s:
                              (request.write(s+"\n"), request.finish()))
+
         deferred.addErrback(lambda s:
                      (request.write(str(s)), request.finish()))
+
+        # we already handled return result above
+        # only need return server.NOT_DONE_YET
         return server.NOT_DONE_YET
 
 resource = FortuneResource()
Index: examples/dlpage.py
===================================================================
--- examples/dlpage.py	(revision 34067)
+++ examples/dlpage.py	(working copy)
@@ -1,3 +1,12 @@
+#
+# This example demonstrates how to use downloadPage
+#
+'''
+Usage: 
+    python dlpage.py <url>
+Don't forget the http:// when you type a URL!
+'''
+
 from twisted.internet import reactor
 from twisted.web.client import downloadPage
 from twisted.python.util import println
@@ -3,4 +12,6 @@
 import sys
 
+# The function downloads a page and save it to a file,
+# In this case, it save the page to "foo"
 downloadPage(sys.argv[1], "foo").addCallbacks(
    lambda value:reactor.stop(),
Index: examples/webguard.py
===================================================================
--- examples/webguard.py	(revision 34067)
+++ examples/webguard.py	(working copy)
@@ -1,5 +1,14 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
+#
+# This example shows how to make simple web authentication
+#
+# To run the example:
+#    python webguard.py
+# 
+# When you visit http://127.0.0.1:8889/, the page will ask for 
+# an username & password. See the code in main() to get the 
+# correct username & password!
 
 import sys
 
@@ -42,7 +51,7 @@
 
 def main():
     log.startLogging(sys.stdout)
-    checkers = [InMemoryUsernamePasswordDatabaseDontUse(joe='blow')]
+    checkers = [InMemoryUsernamePasswordDatabaseDontUse(joe='blow')] # only for testing purpose
     wrapper = guard.HTTPAuthSessionWrapper(
         Portal(SimpleRealm(), checkers),
         [guard.DigestCredentialFactory('md5', 'example.com')])
Index: examples/soap.py
===================================================================
--- examples/soap.py	(revision 34067)
+++ examples/soap.py	(working copy)
@@ -1,19 +1,22 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# 
-"""Example of publishing SOAP methods.
+"""
+Example of a simple SOAP server. 
 
-Sample usage::
+To run the server:
+    python soap.py 
 
+An example session (assuming the server is running):
+
    >>> import SOAPpy
    >>> p = SOAPpy.SOAPProxy('http://localhost:8080/')
    >>> p.add(a=1)
    1
    >>> p.add(a=1, b=3)
    4
-   >>> p.echo([1, 2])
-   [1, 2]
+   >>> p.echo("Hello World")
+   'Hello World'
 
 """
 
@@ -37,5 +40,3 @@
 
 reactor.listenTCP(8080, server.Site(Example()))
 reactor.run()
-
-                  
Index: examples/simple.rtl
===================================================================
--- examples/simple.rtl	(revision 34067)
+++ examples/simple.rtl	(working copy)
@@ -1,3 +1,6 @@
+# This example demostrates how to render a page using a third-party
+# template system.
+#
 # For this to work:
 # Configure your web server with 
 # --process=.rtl=twisted.web.script.ResourceTemplate
@@ -2,2 +5,5 @@
 # And make sure quixote is installed on your Python path.
+#
+
+
 from twisted.web.resource import Resource
Index: examples/xmlrpcclient.py
===================================================================
--- examples/xmlrpcclient.py	(revision 34067)
+++ examples/xmlrpcclient.py	(working copy)
@@ -1,3 +1,11 @@
+#
+# This example makes remote XML-RPC calls 
+#
+"""
+Usage: 
+    python xmlrpcclient.py
+"""
+
 from twisted.web.xmlrpc import Proxy
 from twisted.internet import reactor
 
@@ -9,15 +17,11 @@
     print 'error', error
     reactor.stop()
 
-proxy = Proxy('http://advogato.org/XMLRPC')
-proxy.callRemote('test.sumprod', 3, 5).addCallbacks(printValue, printError)
+def capitalize(value): 
+    print repr(value)
+    proxy.callRemote('test.capitalize', 'moshe zadka').addCallbacks(printValue, printError)
+
+proxy = Proxy('http://advogato.org/XMLRPC') # don't forget the http:// here
+# the callRemote method accepts a method name and an argument list
+proxy.callRemote('test.sumprod', 2, 5).addCallbacks(capitalize, printError)
 reactor.run()
-proxy.callRemote('test.capitalize', 'moshe zadka').addCallbacks(printValue,
-                                                                printError)
-reactor.run()
-proxy = Proxy('http://time.xmlrpc.com/RPC2')
-proxy.callRemote('currentTime.getCurrentTime').addCallbacks(printValue, printError)
-reactor.run()
-proxy = Proxy('http://betty.userland.com/RPC2')
-proxy.callRemote('examples.getStateName', 41).addCallbacks(printValue, printError)
-reactor.run()
Index: examples/advogato.py
===================================================================
--- examples/advogato.py	(revision 34067)
+++ examples/advogato.py	(working copy)
@@ -1,11 +1,12 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
-
 #
-
+# This example demonstrates how to logon to a remote server
+# and post a diary 
+#
 '''
 Usage: 
-advogato.py <name> <diary entry file>
+python advogato.py <name> <diary entry file>
 '''
 
 from twisted.web.xmlrpc import Proxy
Index: examples/logging-proxy.py
===================================================================
--- examples/logging-proxy.py	(revision 34067)
+++ examples/logging-proxy.py	(working copy)
@@ -1,21 +1,28 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
-
+#
 # Run this example with:
 #    python logging-proxy.py
 #
 # Then configure your web browser to use localhost:8080 as a proxy,
-# and visit a URL. This proxy is proxying the connection to that URL's
-# host and will log the client IP and hostname.
+# and visit a URL (This is not a SOCKS proxy). This proxy is proxying
+# the connection to that URL's host and will log the client IP and 
+# hostname.
+# 
+# By default, The proxy only works with HTTP protocal  
 
 from twisted.internet import reactor
 from twisted.web import proxy, http
+import urlparse 
 
 class LoggingProxyRequest(proxy.ProxyRequest):
     def process(self):
         print "Request from %s for %s" % (
             self.getClientIP(), self.getAllHeaders()['host'])
-        proxy.ProxyRequest.process(self)
+        try:
+            proxy.ProxyRequest.process(self)
+        except KeyError:
+            print "Unsupported Protocal!"
 
 class LoggingProxy(proxy.Proxy):
     requestFactory = LoggingProxyRequest
Index: examples/silly-web.py
===================================================================
--- examples/silly-web.py	(revision 34067)
+++ examples/silly-web.py	(working copy)
@@ -2,6 +2,10 @@
 # set up.
 # The "master" and "slave" parts will usually be in different files
 # -- they are here together only for brevity of illustration 
+'''
+Usage: 
+python silly-web.py
+'''
 
 from twisted.internet import reactor, protocol
 from twisted.web import server, distrib, static
Index: examples/rootscript.py
===================================================================
--- examples/rootscript.py	(revision 34067)
+++ examples/rootscript.py	(working copy)
@@ -1,9 +1,33 @@
-from twisted.web import vhost, static, script
+# This is a Twisted Web Server with Named-Based Virtual Host
+# Support.
+#
+# To run this application:
+#   $ sudo twistd -noy rootscript.py
+#
+# Note: You need to edit your /etc/hosts file for this example
+# to work. Need to add the following entry:
+#   127.0.0.1   example.com
 
+from twisted.web import vhost, static, script, server
+from twisted.application import internet, service
+
 default = static.Data('text/html', '')
+# Setting up vhost resource
 default.putChild('vhost', vhost.VHostMonsterResource())
 resource = vhost.NameVirtualHost()
 resource.default = default
-file = static.File('static')
-file.processors = {'.rpy': script.ResourceScript}
-resource.addHost('twistedmatrix.com', file)
+# Using /var/www/html/ as root diretory for the web server
+# You can change it to whatever directory you want
+root = static.File("/var/www/html/")
+root.processors = {'.rpy': script.ResourceScript}
+# bind example.com to our root resource 
+resource.addHost("example.com", root)
+
+# Setup our Application
+site = server.Site(resource)
+application = service.Application('vhost')
+sc = service.IServiceCollection(application)
+# Only the processes owned by the root user can listen @ port 80,
+# change the port number here if you don't want to run it as root
+i = internet.TCPServer(80, site) 
+i.setServiceParent(sc)
Index: examples/users.rpy.py
===================================================================
--- examples/users.rpy.py	(revision 34067)
+++ examples/users.rpy.py	(working copy)
@@ -12,7 +12,8 @@
  
 from twisted.web import distrib
 
-resource = registry.getComponent(distrib.UserDirectory)
-if not resource:
+try:
+    resource = registry.getComponent(distrib.UserDirectory)
+except:
     resource = distrib.UserDirectory()
     registry.setComponent(distrib.UserDirectory, resource)
Index: examples/google.py
===================================================================
--- examples/google.py	(revision 34067)
+++ examples/google.py	(working copy)
@@ -1,3 +1,13 @@
+#
+# This example demonstrates how to use the google module
+# to get the first search result on Google
+#
+'''
+Usage: 
+    python google.py <keyword>
+'''
+
+
 from twisted.web.google import checkGoogle
 from twisted.python.util import println
 from twisted.internet import reactor 
Index: examples/hello.rpy.py
===================================================================
--- examples/hello.rpy.py	(revision 34067)
+++ examples/hello.rpy.py	(working copy)
@@ -1,13 +1,19 @@
-# This is a resource file, which generates some useful
-# information
-# To use it, rename it to "hello.rpy" and put it in the path of
-# any normally-configured Twisted web server.
+# This is a resource file that renders a static web page.
+#
+# To test the script, rename the file to hello.rpy, and
+# move it to any directory, let's say /var/www/html/
+#
+# Now, start your Twist web server:
+#   $ twistd -n web --path /var/www/html/
+# to access 
+#   http://127.0.0.1:8080/hello.rpy
 
 from twisted.web import static
 import time
 
 now = time.ctime()
 
+#Content of our static HTML page
 d = '''\
 <HTML><HEAD><TITLE>Hello Rpy</TITLE>
 
@@ -25,4 +31,5 @@
 </BODY></HTML>
 '''
 
+# Render the content as 'text/html'
 resource = static.Data(d, 'text/html')
Index: examples/getpage.py
===================================================================
--- examples/getpage.py	(revision 34067)
+++ examples/getpage.py	(working copy)
@@ -1,3 +1,13 @@
+#
+# This example demonstrates how to get a page and
+# print the html to stdout
+#
+"""
+Usage: 
+   python getpage.py <url>
+Don't forget the http:// when you type a URL! 
+"""
+
 from twisted.internet import reactor
 from twisted.web.client import getPage
 from twisted.python.util import println
Index: examples/vhost.rpy.py
===================================================================
--- examples/vhost.rpy.py	(revision 34067)
+++ examples/vhost.rpy.py	(working copy)
@@ -1,3 +1,44 @@
+# An example of using VHostMonster
+# You can use it with a Name-Based web server like Apache
+# 
+# For example, we use the following command to have localhost:8080 
+# serving directory /var/www/html: 
+#   $ twistd -n web --path /var/www/html
+# you should rename the file to vhost.rpy, and drop it in /var/www/html. 
+#
+# Now, if you want to server the website to the public as example.com, 
+# you can set up a Proxy Pass in Apache:
+# 
+# <VirtualHost ip-addr>
+# ProxyPass / http://localhost:8538/vhost.rpy/http/example.com:80/
+# ServerName example.com
+# </VirtualHost>
+#
+# OR try the following Twisted Web's reverse proxy.
+# Save the code to a seperate file, let's call it reverse_proxy.py,
+# drop it wherever you like, run the following command as root:
+#   $ sudo twistd -noy reverse_proxy.py
+# 
+"""
+# reverse_proxy.py
+from twisted.application import internet, service
+from twisted.web import proxy, server, vhost
+vhostName = 'example.com'
+reverseProxy = proxy.ReverseProxyResource('localhost', 8080,
+                                          '/vhost.rpy/http/'+vhostName)
+root = vhost.NameVirtualHost()
+root.addHost(vhostName, reverseProxy)
+site = server.Site(root)
+application = service.Application('web-proxy')
+sc = service.IServiceCollection(application)
+i = internet.TCPServer(80, site)
+i.setServiceParent(sc)
+"""
+#
+# Note: You need to edit your /etc/hosts file for this example
+# to work. Need to add the following entry:
+#   127.0.0.1   example.com
+
 from twisted.web import vhost
 
 resource = vhost.VHostMonsterResource()
Index: examples/lj.rpy.py
===================================================================
--- examples/lj.rpy.py	(revision 34067)
+++ examples/lj.rpy.py	(working copy)
@@ -1,21 +1,32 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
-
 #
 # Syndicate LiveJournal users
 # Demonstrates how to use chained callbacks
+#
+# To test the script, rename the file to lj.rpy, and
+# move it to any directory, let's say /var/www/html/
+#
+# Now, start your Twist web server:
+#   $ twistd -n web --path /var/www/html/
+# to access 
+#   http://127.0.0.1:8080/lj.rpy?user=jcalderone 
+
 from __future__ import nested_scopes
 
 from twisted.web import resource as resourcelib
 from twisted.web import client, microdom, domhelpers, server
 
-urlTemplate = 'http://www.livejournal.com/users/%s/rss'
+urlTemplate = 'http://%s.livejournal.com/data/rss'
 
 class LJSyndicatingResource(resourcelib.Resource):
+    """
+    This resource will only repond to HEAD & GET requests
+    """
 
     def render_GET(self, request):
         url = urlTemplate % request.args['user'][0]
-        client.getPage(url).addCallback(
+        client.getPage(url, timeout=30).addCallback(
         microdom.parseString).addCallback(
         lambda t: domhelpers.findNodesNamed(t, 'item')).addCallback(
         lambda itms: zip([domhelpers.findNodesNamed(x, 'title')[0]
Index: examples/httpclient.py
===================================================================
--- examples/httpclient.py	(revision 34067)
+++ examples/httpclient.py	(working copy)
@@ -1,6 +1,15 @@
 #!/usr/bin/env python
+#
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
+# 
+# This example demonstrates how to make a simple http client.
+#
+'''
+Usage: 
+    httpclient.py <url>
+Don't forget the http:// when you type the web address!
+'''
 
 import sys
 from pprint import pprint
@@ -20,6 +29,7 @@
         self.onConnLost = Deferred()
 
     def dataReceived(self, data):
+        # prints out the html page received
         print 'Got some:', data
 
     def connectionLost(self, reason):
@@ -31,12 +41,14 @@
 
 
 def main(reactor, url):
+    # Custom UserAgent
     userAgent = 'Twisted/%s (httpclient.py)' % (version.short(),)
     agent = Agent(reactor)
+    # A GET request
     d = agent.request(
         'GET', url, Headers({'user-agent': [userAgent]}))
     def cbResponse(response):
-        pprint(vars(response))
+        pprint(vars(response)) # prints out the response returned by the webserver
         proto = WriteToStdout()
         if response.length is not UNKNOWN_LENGTH:
             print 'The response body will consist of', response.length, 'bytes.'
Index: examples/proxy.py
===================================================================
--- examples/proxy.py	(revision 34067)
+++ examples/proxy.py	(working copy)
@@ -6,7 +6,7 @@
 #
 # Then configure your web browser to use localhost:8080 as a proxy and
 # visit a URL. This proxy is proxying the connection to that URL's
-# host.
+# host. By default, it only works for HTTP protocal.
 
 from twisted.web import proxy, http
 from twisted.internet import reactor
Index: examples/report.rpy.py
===================================================================
--- examples/report.rpy.py	(revision 34067)
+++ examples/report.rpy.py	(working copy)
@@ -1,3 +1,15 @@
+# This example demostrates how to get host information from 
+# a request object.
+# 
+# To test the script, rename the file to report.rpy, and
+# move it to any directory, let's say /var/www/html/
+#
+# Now, start your Twist web server:
+#   $ twistd -n web --path /var/www/html/
+# to access 
+#   http://127.0.0.1:8080/report.rpy
+
+
 from twisted.web.resource import Resource
 
 
@@ -5,7 +17,8 @@
 
     def render_GET(self, request):
         path = request.path
-        _, host, port = request.getHost()
+        host = request.getHost().host
+        port = request.getHost().port
         url = request.prePathURL()
         uri = request.uri
         secure = (request.isSecure() and "securely") or "insecurely"
