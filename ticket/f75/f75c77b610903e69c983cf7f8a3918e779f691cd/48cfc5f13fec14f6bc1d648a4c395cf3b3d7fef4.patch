Index: doc/web/examples/reverse-proxy.py
===================================================================
--- doc/web/examples/reverse-proxy.py	(revision 34216)
+++ doc/web/examples/reverse-proxy.py	(working copy)
@@ -1,12 +1,14 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# Run this example with:
-#    python reverse-proxy.py
-#
-# Then visit http://localhost:8080 in your web browser. The reverse
-# proxy will proxy your connection to www.yahoo.com.
+"""
+Run this example with:
+    python reverse-proxy.py
 
+Then visit http://localhost:8080 in your web browser. The reverse
+proxy will proxy your connection to www.yahoo.com.
+"""
+
 from twisted.internet import reactor
 from twisted.web import proxy, server
 
Index: doc/web/examples/fortune.rpy.py
===================================================================
--- doc/web/examples/fortune.rpy.py	(revision 34216)
+++ doc/web/examples/fortune.rpy.py	(working copy)
@@ -1,3 +1,25 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example demostrates how to render the output of a 
+system process to a twisted web server.
+
+In order to run this, you need to have fortune installed.
+Fortune is a simple game that displays a random message
+from a database of quotations. You will need to change the 
+path of the fortune program if it's not in the "/usr/game"
+directory.
+
+To test the script, rename the file to fortune.rpy, and
+move it to any directory, let's say /var/www/html/
+
+Now, start your Twist web server:
+   $ twistd -n web --path /var/www/html/
+to access:
+   http://127.0.0.1:8080/fortune.rpy
+"""
+
 from twisted.web.resource import Resource
 from twisted.web import server
 from twisted.internet import utils
@@ -4,9 +26,15 @@
 from twisted.python import util
 
 class FortuneResource(Resource):
+    """ 
+    This resource will only repond to HEAD & GET requests.
+    Function utils.getProcessOutput spawns a process and 
+    return the output as a deferred.
+    """
 
     def render_GET(self, request):
         request.write("<pre>\n")
+        # Link your fortune program to /usr/games or change the path.
         deferred = utils.getProcessOutput("/usr/games/fortune")
         deferred.addCallback(lambda s:
                              (request.write(s+"\n"), request.finish()))
Index: doc/web/examples/dlpage.py
===================================================================
--- doc/web/examples/dlpage.py	(revision 34216)
+++ doc/web/examples/dlpage.py	(working copy)
@@ -1,3 +1,15 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example demonstrates how to use downloadPage.
+
+Usage: 
+    python dlpage.py <url>
+
+Don't forget the http:// when you type a URL!
+"""
+
 from twisted.internet import reactor
 from twisted.web.client import downloadPage
 from twisted.python.util import println
@@ -3,4 +15,6 @@
 import sys
 
+# The function downloads a page and saves it to a file,
+# in this case, it saves the page to "foo".
 downloadPage(sys.argv[1], "foo").addCallbacks(
    lambda value:reactor.stop(),
Index: doc/web/examples/webguard.py
===================================================================
--- doc/web/examples/webguard.py	(revision 34216)
+++ doc/web/examples/webguard.py	(working copy)
@@ -1,6 +1,17 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+This example shows how to make simple web authentication.
+
+To run the example:
+    python webguard.py
+ 
+When you visit http://127.0.0.1:8889/, the page will ask for 
+an username & password. See the code in main() to get the 
+correct username & password!
+"""
+
 import sys
 
 from zope.interface import implements
Index: doc/web/examples/simple.rtl
===================================================================
--- doc/web/examples/simple.rtl	(revision 34216)
+++ doc/web/examples/simple.rtl	(working copy)
@@ -1,7 +1,16 @@
-# For this to work:
-# Configure your web server with 
-# --process=.rtl=twisted.web.script.ResourceTemplate
-# And make sure quixote is installed on your Python path.
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example demostrates how to render a page using a third-party
+template system.
+
+For this to work:
+Configure your web server with 
+--process=.rtl=twisted.web.script.ResourceTemplate
+And make sure quixote is installed on your Python path.
+"""
+
 from twisted.web.resource import Resource
 
 
Index: doc/web/examples/soap.py
===================================================================
--- doc/web/examples/soap.py	(revision 34216)
+++ doc/web/examples/soap.py	(working copy)
@@ -1,19 +1,22 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# 
-"""Example of publishing SOAP methods.
+"""
+This is an example of a simple SOAP server. 
 
-Sample usage::
+To run the server:
+    python soap.py 
 
+An example session (assuming the server is running):
+
    >>> import SOAPpy
    >>> p = SOAPpy.SOAPProxy('http://localhost:8080/')
    >>> p.add(a=1)
    1
    >>> p.add(a=1, b=3)
    4
-   >>> p.echo([1, 2])
-   [1, 2]
+   >>> p.echo("Hello World")
+   'Hello World'
 
 """
 
@@ -22,7 +25,9 @@
 
 
 class Example(soap.SOAPPublisher):
-    """Publish two methods, 'add' and 'echo'."""
+    """
+    It publishs two methods, 'add' and 'echo'.
+    """
 
     def soap_echo(self, x):
         return x
@@ -37,5 +42,3 @@
 
 reactor.listenTCP(8080, server.Site(Example()))
 reactor.run()
-
-                  
Index: doc/web/examples/advogato.py
===================================================================
--- doc/web/examples/advogato.py	(revision 34216)
+++ doc/web/examples/advogato.py	(working copy)
@@ -1,12 +1,13 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-#
+"""
+This example demonstrates how to logon to a remote server
+and post a diary. 
 
-'''
 Usage: 
-advogato.py <name> <diary entry file>
-'''
+   python advogato.py <name> <diary entry file>
+"""
 
 from twisted.web.xmlrpc import Proxy
 from twisted.internet import reactor
Index: doc/web/examples/xmlrpcclient.py
===================================================================
--- doc/web/examples/xmlrpcclient.py	(revision 34216)
+++ doc/web/examples/xmlrpcclient.py	(working copy)
@@ -1,3 +1,13 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example makes remote XML-RPC calls.
+
+Usage: 
+    python xmlrpcclient.py
+"""
+
 from twisted.web.xmlrpc import Proxy
 from twisted.internet import reactor
 
@@ -9,15 +19,11 @@
     print 'error', error
     reactor.stop()
 
-proxy = Proxy('http://advogato.org/XMLRPC')
-proxy.callRemote('test.sumprod', 3, 5).addCallbacks(printValue, printError)
+def capitalize(value): 
+    print repr(value)
+    proxy.callRemote('test.capitalize', 'moshe zadka').addCallbacks(printValue, printError)
+
+proxy = Proxy('http://advogato.org/XMLRPC') 
+# The callRemote method accepts a method name and an argument list.
+proxy.callRemote('test.sumprod', 2, 5).addCallbacks(capitalize, printError)
 reactor.run()
-proxy.callRemote('test.capitalize', 'moshe zadka').addCallbacks(printValue,
-                                                                printError)
-reactor.run()
-proxy = Proxy('http://time.xmlrpc.com/RPC2')
-proxy.callRemote('currentTime.getCurrentTime').addCallbacks(printValue, printError)
-reactor.run()
-proxy = Proxy('http://betty.userland.com/RPC2')
-proxy.callRemote('examples.getStateName', 41).addCallbacks(printValue, printError)
-reactor.run()
Index: doc/web/examples/logging-proxy.py
===================================================================
--- doc/web/examples/logging-proxy.py	(revision 34216)
+++ doc/web/examples/logging-proxy.py	(working copy)
@@ -1,21 +1,33 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# Run this example with:
-#    python logging-proxy.py
-#
-# Then configure your web browser to use localhost:8080 as a proxy,
-# and visit a URL. This proxy is proxying the connection to that URL's
-# host and will log the client IP and hostname.
+"""
+Run this example with:
+    python logging-proxy.py
 
+Then configure your web browser to use localhost:8080 as a proxy,
+and visit a URL (This is not a SOCKS proxy). This proxy is proxying
+the connection to that URL's host and will log the client IP and 
+hostname.
+ 
+By default, The proxy only works with HTTP protocol. 
+"""
+
 from twisted.internet import reactor
 from twisted.web import proxy, http
 
 class LoggingProxyRequest(proxy.ProxyRequest):
     def process(self):
+        """
+        It's normal to see a blank HTTPS page. As the proxy only works
+        with the HTTP protocol.
+        """
         print "Request from %s for %s" % (
             self.getClientIP(), self.getAllHeaders()['host'])
-        proxy.ProxyRequest.process(self)
+        try:
+            proxy.ProxyRequest.process(self)
+        except KeyError:
+            print "HTTPS is not supported at the moment!"
 
 class LoggingProxy(proxy.Proxy):
     requestFactory = LoggingProxyRequest
Index: doc/web/examples/xmlrpc.py
===================================================================
--- doc/web/examples/xmlrpc.py	(revision 34216)
+++ doc/web/examples/xmlrpc.py	(working copy)
@@ -1,8 +1,12 @@
-"""Example of an XML-RPC server in Twisted.
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+An example of an XML-RPC server in Twisted.
+
 To run the server, just run this file ("python xmlrpc.py").
 
-An example session (assuming the server is running)::
+An example session (assuming the server is running):
     
     >>> import xmlrpclib
     >>> s = xmlrpclib.Server('http://localhost:7080/')
@@ -21,37 +25,45 @@
 
 from twisted.web import xmlrpc
 from twisted.internet import defer
-
-# This module is standard in Python 2.2, otherwise get it from
-#   http://www.pythonware.com/products/xmlrpc/
 import xmlrpclib
 
 
 class Echoer(xmlrpc.XMLRPC):
-    """An example object to be published.
+    """
+    An example object to be published.
     
     Has five methods accessable by XML-RPC, 'echo', 'hello', 'defer',
     'defer_fail' and 'fail.
     """
     
     def xmlrpc_echo(self, *args):
-        """Return all passed args."""
+        """
+        Return all passed args.
+        """
         return args
     
     def xmlrpc_hello(self):
-        """Return 'hello, world'."""
+        """
+        Return 'hello, world'.
+        """
         return 'hello, world!'
     
     def xmlrpc_defer(self):
-        """Show how xmlrpc methods can return Deferred."""
+        """
+        Show how xmlrpc methods can return Deferred.
+        """
         return defer.succeed("hello")
     
     def xmlrpc_defer_fail(self):
-        """Show how xmlrpc methods can return failed Deferred."""
+        """
+        Show how xmlrpc methods can return failed Deferred.
+        """
         return defer.fail(12)
 
     def xmlrpc_fail(self):
-        """Show how we can return a failure code."""
+        """
+        Show how we can return a failure code.
+        """
         return xmlrpclib.Fault(7, "Out of cheese.")
 
 
Index: doc/web/examples/silly-web.py
===================================================================
--- doc/web/examples/silly-web.py	(revision 34216)
+++ doc/web/examples/silly-web.py	(working copy)
@@ -1,8 +1,12 @@
-# This shows an example of a bare-bones distributed web
-# set up.
-# The "master" and "slave" parts will usually be in different files
-# -- they are here together only for brevity of illustration 
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+This shows an example of a bare-bones distributed web set up.
+The "master" and "slave" parts will usually be in different files 
+ -- they are here together only for brevity of illustration. 
+"""
+
 from twisted.internet import reactor, protocol
 from twisted.web import server, distrib, static
 from twisted.spread import pb
Index: doc/web/examples/rootscript.py
===================================================================
--- doc/web/examples/rootscript.py	(revision 34216)
+++ doc/web/examples/rootscript.py	(working copy)
@@ -1,9 +1,37 @@
-from twisted.web import vhost, static, script
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+This is a Twisted Web Server with Named-Based Virtual Host Support.
+
+To run this application:
+   $ sudo twistd -noy rootscript.py
+
+Note: You need to edit your hosts file for this example
+to work. Need to add the following entry:
+   127.0.0.1   example.com
+"""
+
+from twisted.web import vhost, static, script, server
+from twisted.application import internet, service
+
 default = static.Data('text/html', '')
+# Setting up vhost resource.
 default.putChild('vhost', vhost.VHostMonsterResource())
 resource = vhost.NameVirtualHost()
 resource.default = default
-file = static.File('static')
-file.processors = {'.rpy': script.ResourceScript}
-resource.addHost('twistedmatrix.com', file)
+# Here we use /var/www/html/ as our root diretory for the 
+# web server, you can change it to whatever directory you want.
+root = static.File("/var/www/html/")
+root.processors = {'.rpy': script.ResourceScript}
+# addHost binds domain name example.com to our root resource.
+resource.addHost("example.com", root)
+
+# Setup Twisted Application.
+site = server.Site(resource)
+application = service.Application('vhost')
+sc = service.IServiceCollection(application)
+# Only the processes owned by the root user can listen @ port 80,
+# change the port number here if you don't want to run it as root.
+i = internet.TCPServer(80, site) 
+i.setServiceParent(sc)
Index: doc/web/examples/users.rpy.py
===================================================================
--- doc/web/examples/users.rpy.py	(revision 34216)
+++ doc/web/examples/users.rpy.py	(working copy)
@@ -1,18 +1,21 @@
-# With this, you can have an instant "community web site",
-# letting your shell users publish data in secure ways.
-#
-# Just put this script anywhere, and /path/to/this/script/<user>/
-# will publish a user's ~/public_html, and a .../<user>.twistd/
-# will attempt to contact a user's personal web server.
-#
-# For example, if you put this at the root of the web server
-# as "users.rpy", and configure --allow-ignore-ext, then
-# http://example.com/users/<name>/ and http://example.com/users/<name>.twistd
-# will work similarily to how they work on twistedmatrix.com
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+With this, you can have an instant "community web site",
+letting your shell users publish data in secure ways.
+
+Just put this script anywhere, and /path/to/this/script/<user>/
+will publish a user's ~/public_html, and a .../<user>.twistd/
+will attempt to contact a user's personal web server.
+
+For example, if you put this at the root of the web server
+as "users.rpy", and configure --allow-ignore-ext, then
+http://example.com/users/<name>/ and http://example.com/users/<name>.twistd
+will work similarily to how they work on twistedmatrix.com.
+"""
  
 from twisted.web import distrib
 
-resource = registry.getComponent(distrib.UserDirectory)
-if not resource:
-    resource = distrib.UserDirectory()
-    registry.setComponent(distrib.UserDirectory, resource)
+resource = distrib.UserDirectory()
+registry.setComponent(distrib.UserDirectory, resource)
Index: doc/web/examples/google.py
===================================================================
--- doc/web/examples/google.py	(revision 34216)
+++ doc/web/examples/google.py	(working copy)
@@ -1,11 +1,13 @@
 # Copyright (c) Twisted Matrix Laboratories
 # See LICENSE for details.
 
-# Run this example with:
-#   python google.py <keyword(s)>.
+"""
+Run this example with:
+   python google.py <keyword(s)>.
 
-# This program will print out the URL corresponding 
-# to the first webpage given by a Google search.
+This program will print out the URL corresponding 
+to the first webpage given by a Google search.
+"""
 
 from twisted.web.google import checkGoogle
 from twisted.python.util import println
Index: doc/web/examples/hello.rpy.py
===================================================================
--- doc/web/examples/hello.rpy.py	(revision 34216)
+++ doc/web/examples/hello.rpy.py	(working copy)
@@ -1,8 +1,18 @@
-# This is a resource file, which generates some useful
-# information
-# To use it, rename it to "hello.rpy" and put it in the path of
-# any normally-configured Twisted web server.
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+This is a resource file that renders a static web page.
+
+To test the script, rename the file to hello.rpy, and
+move it to any directory, let's say /var/www/html/.
+
+Now, start your Twist web server:
+   $ twistd -n web --path /var/www/html/
+to access: 
+   http://127.0.0.1:8080/hello.rpy
+"""
+
 from twisted.web import static
 import time
 
Index: doc/web/examples/getpage.py
===================================================================
--- doc/web/examples/getpage.py	(revision 34216)
+++ doc/web/examples/getpage.py	(working copy)
@@ -1,11 +1,12 @@
 # Copyright (c) Twisted Matrix Laboratories
 # See LICENSE for details.
 
-# Run this example with:
-#    python getpage.py <URL>
+"""
+Run this example with:
+    python getpage.py <URL>
+This program will retrieve and print the resource at the given URL.
+"""
 
-# This program will retrieve and print the resource at the given URL.
-
 from twisted.internet import reactor
 from twisted.web.client import getPage
 from twisted.python.util import println
Index: doc/web/examples/vhost.rpy.py
===================================================================
--- doc/web/examples/vhost.rpy.py	(revision 34216)
+++ doc/web/examples/vhost.rpy.py	(working copy)
@@ -1,4 +1,47 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+An example of using VHostMonster. 
+You can use it with a Name-Based web server like Apache.
+ 
+For example, we use the following command to have localhost:8080 
+serving directory /var/www/html: 
+   $ twistd -n web --path /var/www/html
+you should rename the file to vhost.rpy, and drop it in /var/www/html. 
+
+Now, if you want to server the website to the public as example.com, 
+you can set up a Proxy Pass in Apache:
+ 
+    <VirtualHost ip-addr>
+        ProxyPass / http://localhost:8538/vhost.rpy/http/example.com:80/
+        ServerName example.com
+    </VirtualHost>
+
+OR try the following Twisted Web's reverse proxy.
+Save the code to a seperate file, let's call it reverse_proxy.py,
+drop it wherever you like, run the following command as root:
+   $ sudo twistd -noy reverse_proxy.py
+ 
+# reverse_proxy.py
+from twisted.application import internet, service
+from twisted.web import proxy, server, vhost
+vhostName = 'example.com'
+reverseProxy = proxy.ReverseProxyResource('localhost', 8080,
+                                          '/vhost.rpy/http/'+vhostName)
+root = vhost.NameVirtualHost()
+root.addHost(vhostName, reverseProxy)
+site = server.Site(root)
+application = service.Application('web-proxy')
+sc = service.IServiceCollection(application)
+i = internet.TCPServer(80, site)
+i.setServiceParent(sc)
+
+Note: You need to edit your hosts file for this example
+to work. Need to add the following entry:
+   127.0.0.1   example.com
+"""
+
 from twisted.web import vhost
 
 resource = vhost.VHostMonsterResource()
-
Index: doc/web/examples/web.py
===================================================================
--- doc/web/examples/web.py	(revision 34216)
+++ doc/web/examples/web.py	(working copy)
@@ -1,13 +1,14 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+This web server makes it possible to put it behind a reverse proxy
+transparently. Just have the reverse proxy proxy to 
+    host:port/vhost/http/external-host:port/
+and on redirects and other link calculation, the external-host:port will
+be transmitted to the client.
+"""
 
-# This web server makes it possible to put it behind a reverse proxy
-# transparently. Just have the reverse proxy proxy to 
-# host:port/vhost/http/external-host:port/
-# and on redirects and other link calculation, the external-host:port will
-# be transmitted to the client.
-
 from twisted.internet import reactor
 from twisted.web import static, server, vhost, twcgi, script
 
Index: doc/web/examples/lj.rpy.py
===================================================================
--- doc/web/examples/lj.rpy.py	(revision 34216)
+++ doc/web/examples/lj.rpy.py	(working copy)
@@ -1,21 +1,36 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-#
-# Syndicate LiveJournal users
-# Demonstrates how to use chained callbacks
+"""
+The example gets RSS feeds from LiveJournal users.
+It demonstrates how to use chained callbacks.
+
+To test the script, rename the file to lj.rpy, and
+move it to any directory, let's say /var/www/html/.
+
+Now, start your Twist web server:
+   $ twistd -n web --path /var/www/html/
+to access: 
+   http://127.0.0.1:8080/lj.rpy?user=jcalderone 
+"""
+
 from __future__ import nested_scopes
 
 from twisted.web import resource as resourcelib
 from twisted.web import client, microdom, domhelpers, server
 
-urlTemplate = 'http://www.livejournal.com/users/%s/rss'
+urlTemplate = 'http://%s.livejournal.com/data/rss'
 
 class LJSyndicatingResource(resourcelib.Resource):
 
     def render_GET(self, request):
+        """
+        It gets the xml feed from LiveJournal & constructs
+        a new HTML page using the 'title' and 'link' parsed
+        from the xml document.
+        """
         url = urlTemplate % request.args['user'][0]
-        client.getPage(url).addCallback(
+        client.getPage(url, timeout=30).addCallback(
         microdom.parseString).addCallback(
         lambda t: domhelpers.findNodesNamed(t, 'item')).addCallback(
         lambda itms: zip([domhelpers.findNodesNamed(x, 'title')[0]
Index: doc/web/examples/httpclient.py
===================================================================
--- doc/web/examples/httpclient.py	(revision 34216)
+++ doc/web/examples/httpclient.py	(working copy)
@@ -2,6 +2,14 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+"""
+This example demonstrates how to make a simple http client.
+
+Usage: 
+    httpclient.py <url>
+Don't forget the http:// when you type the web address!
+"""
+
 import sys
 from pprint import pprint
 
@@ -20,6 +28,9 @@
         self.onConnLost = Deferred()
 
     def dataReceived(self, data):
+        """ 
+        It prints out the html page received.
+        """
         print 'Got some:', data
 
     def connectionLost(self, reason):
@@ -31,11 +42,18 @@
 
 
 def main(reactor, url):
+    """
+    We create a custom UserAgent and send a GET request
+    to a web server.
+    """
     userAgent = 'Twisted/%s (httpclient.py)' % (version.short(),)
     agent = Agent(reactor)
     d = agent.request(
         'GET', url, Headers({'user-agent': [userAgent]}))
     def cbResponse(response):
+        """ 
+        It prints out the response returned by the web server.
+        """
         pprint(vars(response))
         proto = WriteToStdout()
         if response.length is not UNKNOWN_LENGTH:
Index: doc/web/examples/proxy.py
===================================================================
--- doc/web/examples/proxy.py	(revision 34216)
+++ doc/web/examples/proxy.py	(working copy)
@@ -1,13 +1,15 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-# Run this example with:
-#    python proxy.py
-#
-# Then configure your web browser to use localhost:8080 as a proxy and
-# visit a URL. This proxy is proxying the connection to that URL's
-# host.
+"""
+Run this example with:
+    python proxy.py
 
+Then configure your web browser to use localhost:8080 as a proxy and
+visit a URL. This proxy is proxying the connection to that URL's
+host.
+"""
+
 from twisted.web import proxy, http
 from twisted.internet import reactor
 
Index: doc/web/examples/report.rpy.py
===================================================================
--- doc/web/examples/report.rpy.py	(revision 34216)
+++ doc/web/examples/report.rpy.py	(working copy)
@@ -1,3 +1,19 @@
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+This example demostrates how to get host information from 
+a request object.
+ 
+To test the script, rename the file to report.rpy, and
+move it to any directory, let's say /var/www/html/.
+
+Now, start your Twist web server:
+   $ twistd -n web --path /var/www/html/
+to access: 
+   http://127.0.0.1:8080/report.rpy
+"""
+
 from twisted.web.resource import Resource
 
 
@@ -5,7 +21,8 @@
 
     def render_GET(self, request):
         path = request.path
-        _, host, port = request.getHost()
+        host = request.getHost().host
+        port = request.getHost().port
         url = request.prePathURL()
         uri = request.uri
         secure = (request.isSecure() and "securely") or "insecurely"
