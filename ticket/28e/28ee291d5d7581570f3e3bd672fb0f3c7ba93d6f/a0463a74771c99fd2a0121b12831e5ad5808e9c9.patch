Index: twisted/mail/test/test_mail.py
===================================================================
--- twisted/mail/test/test_mail.py	(revision 35235)
+++ twisted/mail/test/test_mail.py	(working copy)
@@ -15,6 +15,7 @@
 import signal
 
 from zope.interface import Interface, implements
+from zope.interface.verify import verifyClass
 
 from twisted.trial import unittest
 from twisted.mail import smtp
@@ -2054,6 +2055,20 @@
 
 
 
+class QueueInterfaceTest(unittest.TestCase):
+    """
+    Test for interface of class twisted.mail.relaymanager.Queue.
+    """
+
+
+    def test_QueueInterface(self):
+        """
+        Verift that L{Queue} implements L{IQueue}.
+        """
+        self.assertTrue(verifyClass(twisted.mail.relaymanager.IQueue, twisted.mail.relaymanager.Queue))
+
+
+
 from twisted.python.runtime import platformType
 import types
 if platformType != "posix":
Index: twisted/mail/relaymanager.py
===================================================================
--- twisted/mail/relaymanager.py	(revision 35235)
+++ twisted/mail/relaymanager.py	(working copy)
@@ -39,6 +39,8 @@
 from twisted.mail import smtp
 from twisted.application import internet
 
+from zope.interface import Interface, implements
+
 class ManagedRelayerMixin:
     """SMTP Relayer which notifies a manager
 
@@ -131,9 +133,118 @@
         protocol.factory = self
         return protocol
 
+
+
+class IQueue(Interface):
+    """
+    A queue of messages.
+    """
+    
+
+    def createNewMessage():
+        """
+        Create a new message in the queue.
+
+        @return: A tuple containing the message header and a file-like object containing references to the message file.
+        @rtype:  C{tuple}
+        """
+
+
+    def readDirectory():
+        """
+        Look for new messages in the messages directory adding them to queue of messages waiting to be relayed.
+
+        @return: None.
+        @rtype:  None
+        """
+
+
+    def getPath(message):
+        """
+        Get the filesystem path of the given message.
+
+        @type message: C{str}
+        param message: Message for which the filesystem path of the file object is required
+        @return: a string representing the filesystem path where the message is stored.
+        @rtype:  C{str}
+        """
+
+
+    def hasWaiting():
+        """
+        Check if there are any messages to be relayed.
+
+        @return: a boolean value which is True if there are any messages waiting to be transferred and false if there are no messages waiting to be transferred.
+        @rtype:  C{bool}
+        """      
+
+
+    def getWaiting():
+        """
+        Return a list of messages waiting to be relayed.
+
+        @return: a list of messages waiting in the queue to be relayed.
+        @rtype:  C{list}
+        """
+
+
+    def setWaiting(message):
+        """
+        Add a message to the queue of messages waiting to be relayed.
+
+        @type message: C{str}
+        @param message: Message to be added to the queue of messages waiting to be relayed. 
+        """
+
+
+    def getRelayed():
+        """
+        Get the list of relayed messages.
+
+        @return: a list of messages relayed by the system.
+        @rtype:  C{list}
+        """
+ 
+
+    def setRelaying(message):
+        """
+        Add a message from the waiting queue to the queue of messages to be relayed.
+
+        @type message: C{str}
+        @param message: Message to be added to the queue of messages to be relayed.
+        """
+
+
+    def getEnvelope(message):
+        """
+        Get a message file object for the given message.
+
+        @type message: C{str}
+        @param message: Message for which the file object is to be obtained.
+
+        @return: Message file object for the message.
+        @rtype:  C{object}
+        """
+
+ 
+    def getEnvelopeFile(message):
+        """
+        Get the file handle to the message file object of a given message.
+
+        @type message: C{str}
+        @param message: The message for which the file handle to its message file object is to be obtained.
+
+        @return: File handle of the message file object of message.
+        @rtype: C{object}
+        """
+
+
+
 class Queue:
     """A queue of ougoing emails."""
 
+    implements(IQueue)
+
     noisy = True
 
     def __init__(self, directory):
