Index: twisted/internet/_dumbwin32proc.py
===================================================================
--- twisted/internet/_dumbwin32proc.py	(revision 38219)
+++ twisted/internet/_dumbwin32proc.py	(working copy)
@@ -7,6 +7,7 @@
 """
 
 import os
+import sys
 
 # Win32 imports
 import win32api
@@ -184,8 +185,9 @@
                               'all must be unicode',):
                     raise
                 newenv = {}
+                encoding = sys.getfilesystemencoding()
                 for key, value in env.items():
-                    newenv[unicode(key)] = unicode(value)
+                    newenv[key.decode(encoding)] = value.decode(encoding)
                 env = newenv
                 doCreate()
         except pywintypes.error, pwte:
Index: twisted/test/test_process.py
===================================================================
--- twisted/test/test_process.py	(revision 38219)
+++ twisted/test/test_process.py	(working copy)
@@ -2293,6 +2293,7 @@
     """
     goodKey = u'UNICODE'
     goodValue = u'UNICODE'
+    encodedValue = u'jalape\xf1o'.encode("mbcs")
 
     def test_encodableUnicodeEnvironment(self):
         """
@@ -2311,8 +2312,21 @@
                 self.goodValue.encode('ascii'))
         return p.getResult().addCallback(gotEnvironment)
 
+    def test_decodableUnicodeEnvironment(self):
+        """
+        Test C{os.environ} (inherited by every subprocess on Windows) that
+        contains an MBCS encoded byte string value."""
+        os.environ[self.goodKey] = self.encodedValue
+        self.addCleanup(operator.delitem, os.environ, self.goodKey)
 
+        p = GetEnvironmentDictionary.run(reactor, [], {})
+        def gotEnvironment(environ):
+            self.assertEqual(
+                environ[self.goodKey.encode('ascii')],
+                self.encodedValue)
+        return p.getResult().addCallback(gotEnvironment)
 
+
 class Dumbwin32procPidTest(unittest.TestCase):
     """
     Simple test for the pid attribute of Process on win32.
