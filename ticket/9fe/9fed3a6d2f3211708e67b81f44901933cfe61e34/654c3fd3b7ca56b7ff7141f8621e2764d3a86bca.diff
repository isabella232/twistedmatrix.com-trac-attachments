Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 19298)
+++ twisted/internet/defer.py	(working copy)
@@ -152,7 +152,6 @@
     """
     called = 0
     paused = 0
-    timeoutCall = None
     _debugInfo = None
 
     # Keep this class attribute for now, for compatibility with code that
@@ -294,13 +293,6 @@
             self._debugInfo.invoker = traceback.format_stack()[:-2]
         self.called = True
         self.result = result
-        if self.timeoutCall:
-            try:
-                self.timeoutCall.cancel()
-            except:
-                pass
-
-            del self.timeoutCall
         self._runCallbacks()
 
     def _runCallbacks(self):
@@ -339,31 +331,6 @@
             if self._debugInfo is not None:
                 self._debugInfo.failResult = None
 
-    def setTimeout(self, seconds, timeoutFunc=timeout, *args, **kw):
-        """Set a timeout function to be triggered if I am not called.
-
-        @param seconds: How long to wait (from now) before firing the
-        timeoutFunc.
-
-        @param timeoutFunc: will receive the Deferred and *args, **kw as its
-        arguments.  The default timeoutFunc will call the errback with a
-        L{TimeoutError}.
-        """
-        warnings.warn(
-            "Deferred.setTimeout is deprecated.  Look for timeout "
-            "support specific to the API you are using instead.",
-            DeprecationWarning, stacklevel=2)
-
-        if self.called:
-            return
-        assert not self.timeoutCall, "Don't call setTimeout twice on the same Deferred."
-
-        from twisted.internet import reactor
-        self.timeoutCall = reactor.callLater(
-            seconds,
-            lambda: self.called or timeoutFunc(self, *args, **kw))
-        return self.timeoutCall
-
     def __str__(self):
         cname = self.__class__.__name__
         if hasattr(self, 'result'):
Index: twisted/test/test_defer.py
===================================================================
--- twisted/test/test_defer.py	(revision 19298)
+++ twisted/test/test_defer.py	(working copy)
@@ -19,11 +19,6 @@
     pass
 
 
-_setTimeoutSuppression = util.suppress(
-    message="Deferred.setTimeout is deprecated.  Look for timeout "
-            "support specific to the API you are using instead.",
-    category=DeprecationWarning)
-
 _firstErrorSuppression = util.suppress(
     message="FirstError.__getitem__ is deprecated.  Use attributes instead.",
     category=DeprecationWarning)
@@ -238,22 +233,7 @@
 
         d1.addErrback(lambda e: None)  # Swallow error
 
-    def testTimeOut(self):
-        """
-        Test that a Deferred which has setTimeout called on it and never has
-        C{callback} or C{errback} called on it eventually fails with a
-        L{error.TimeoutError}.
-        """
-        L = []
-        d = defer.Deferred()
-        d.setTimeout(0.01)
-        self.assertFailure(d, defer.TimeoutError)
-        d.addCallback(L.append)
-        self.failIf(L, "Deferred failed too soon.")
-        return d
-    testTimeOut.suppress = [_setTimeoutSuppression]
 
-
     def testImmediateSuccess(self):
         l = []
         d = defer.succeed("success")
@@ -261,19 +241,6 @@
         self.assertEquals(l, ["success"])
 
 
-    def test_immediateSuccessBeforeTimeout(self):
-        """
-        Test that a synchronously successful Deferred is not affected by a
-        C{setTimeout} call.
-        """
-        l = []
-        d = defer.succeed("success")
-        d.setTimeout(1.0)
-        d.addCallback(l.append)
-        self.assertEquals(l, ["success"])
-    test_immediateSuccessBeforeTimeout.suppress = [_setTimeoutSuppression]
-
-
     def testImmediateFailure(self):
         l = []
         d = defer.fail(GenericError("fail"))
