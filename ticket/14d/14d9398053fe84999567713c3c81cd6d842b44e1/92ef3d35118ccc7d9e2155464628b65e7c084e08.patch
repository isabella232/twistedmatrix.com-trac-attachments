Index: twisted/internet/udp.py
===================================================================
--- twisted/internet/udp.py	(revision 38908)
+++ twisted/internet/udp.py	(revision 38911)
@@ -136,6 +136,13 @@
         self = cls(None, protocol, interface=interface, reactor=reactor,
                    maxPacketSize=maxPacketSize)
         self._preexistingSocket = port
+        try:
+            self._connectedAddr = port.getpeername()
+        except socket.error as e:
+            # "[Errno 107] Transport endpoint is not connected"
+            # indicates that this socket is not connected.
+            if e.args[0] != 107:
+                raise
         return self
 
 
Index: twisted/internet/test/test_socket.py
===================================================================
--- twisted/internet/test/test_socket.py	(revision 38908)
+++ twisted/internet/test/test_socket.py	(revision 38911)
@@ -258,7 +258,57 @@
 
 
 
+class ConnectedDatagramPortTestsBuilder(ReactorBuilder):
+    """
+    Builder for testing L{IReactorSocket.adoptDatagramPort}
+    implementations for the ability to detect connected sockets.
+    """
+    requiredInterfaces = [IReactorSocket]
+
+
+    def test_unconnected(self):
+        """
+        An implementation of L{IReactorSocket.adoptDatagramPort}
+        returns an unconnected L{Port} when it is passed an
+        unconnected L{socket.socket}.
+        """
+        reactor = self.buildReactor()
+
+        portSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
+        self.addCleanup(portSocket.close)
+
+        portSocket.setblocking(False)
+
+        port = reactor.adoptDatagramPort(
+            portSocket.fileno(), portSocket.family, DatagramProtocol())
+
+        self.assertIs(port._connectedAddr, None)
+
+
+    def test_connected(self):
+        """
+        An implementation of L{IReactorSocket.adoptDatagramPort}
+        returns a connected L{Port} when it is passed an connected
+        L{socket.socket}.
+        """
+        reactor = self.buildReactor()
+        addr = ('192.0.2.100', 53)
+        portSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
+        self.addCleanup(portSocket.close)
+
+        portSocket.connect(addr)
+        portSocket.setblocking(False)
+
+        port = reactor.adoptDatagramPort(
+            portSocket.fileno(), portSocket.family, DatagramProtocol())
+
+        self.assertEqual(port._connectedAddr, addr)
+        self.assertRaises(RuntimeError, port.connect, *addr)
+
+
+
 globals().update(IReactorSocketVerificationTestsBuilder.makeTestCaseClasses())
 globals().update(AdoptStreamPortErrorsTestsBuilder.makeTestCaseClasses())
 globals().update(AdoptStreamConnectionErrorsTestsBuilder.makeTestCaseClasses())
 globals().update(AdoptDatagramPortErrorsTestsBuilder.makeTestCaseClasses())
+globals().update(ConnectedDatagramPortTestsBuilder.makeTestCaseClasses())
