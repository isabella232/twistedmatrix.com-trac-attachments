Index: twisted/spread/jelly.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/jelly.py,v
retrieving revision 1.48
diff -u -r1.48 jelly.py
--- twisted/spread/jelly.py	4 Jun 2003 00:18:03 -0000	1.48
+++ twisted/spread/jelly.py	28 Dec 2003 21:43:00 -0000
@@ -495,13 +495,22 @@
 
 
 class _Unjellier:
-    def __init__(self, taster, persistentLoad, invoker):
+    unjellyableRegistry = unjellyableRegistry
+    unjellyableFactoryRegistry = unjellyableFactoryRegistry
+    
+    def __init__(self, taster, persistentLoad, invoker,
+                 unjellyableRegistry=None, unjellyableFactoryRegistry=None):
         self.taster = taster
         self.persistentLoad = persistentLoad
         self.references = {}
         self.postCallbacks = []
         self.invoker = invoker
 
+        if unjellyableRegistry is not None:
+            self.unjellyableRegistry = unjellyableRegistry
+        if unjellyableFactoryRegistry is not None:
+            self.unjellyableFactoryRegistry = unjellyableFactoryRegistry
+            
     def unjellyFull(self, obj):
         o = self.unjelly(obj)
         for m in self.postCallbacks:
@@ -514,7 +523,7 @@
         jelType = obj[0]
         if not self.taster.isTypeAllowed(jelType):
             raise InsecureJelly(jelType)
-        regClass = unjellyableRegistry.get(jelType)
+        regClass = self.unjellyableRegistry.get(jelType)
         if regClass is not None:
             if isinstance(regClass, ClassType):
                 inst = _Dummy() # XXX chomp, chomp
@@ -526,7 +535,7 @@
             if hasattr(val, 'postUnjelly'):
                 self.postCallbacks.append(inst.postUnjelly)
             return val
-        regFactory = unjellyableFactoryRegistry.get(jelType)
+        regFactory = self.unjellyableFactoryRegistry.get(jelType)
         if regFactory is not None:
             state = self.unjelly(obj[1])
             inst = regFactory(state)
@@ -845,7 +854,9 @@
     return _Jellier(taster, persistentStore, invoker).jelly(object)
 
 
-def unjelly(sexp, taster = DummySecurityOptions(), persistentLoad=None, invoker=None):
+def unjelly(sexp, taster = DummySecurityOptions(), persistentLoad=None, invoker=None,
+            unjellyableRegistry=None, unjellyableFactoryRegistry=None):
+
     """Unserialize from s-expression.
 
     Takes an list that was the result from a call to jelly() and unserializes
@@ -853,4 +864,4 @@
     of SecurityOptions, will cause an InsecureJelly exception to be raised if a
     disallowed type, module, or class attempted to unserialize.
     """
-    return _Unjellier(taster, persistentLoad, invoker).unjellyFull(sexp)
+    return _Unjellier(taster, persistentLoad, invoker, unjellyableRegistry, unjellyableFactoryRegistry).unjellyFull(sexp)
Index: twisted/spread/pb.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/pb.py,v
retrieving revision 1.155
diff -u -r1.155 pb.py
--- twisted/spread/pb.py	25 Dec 2003 00:05:29 -0000	1.155
+++ twisted/spread/pb.py	28 Dec 2003 21:43:01 -0000
@@ -500,6 +500,8 @@
     version = 6
     username = None
     factory = None
+    unjellyableRegistry = None
+    unjellyableFactoryRegistry = None
     
     def __init__(self, isClient=1, security=globalSecurity):
         banana.Banana.__init__(self, isClient)
@@ -826,7 +828,7 @@
 
         self.unserializingPerspective = perspective
         try:
-            return unjelly(sexp, self.security, None, self)
+            return unjelly(sexp, self.security, None, self, self.unjellyableRegistry, self.unjellyableFactoryRegistry)
         finally:
             self.unserializingPerspective = None
 
