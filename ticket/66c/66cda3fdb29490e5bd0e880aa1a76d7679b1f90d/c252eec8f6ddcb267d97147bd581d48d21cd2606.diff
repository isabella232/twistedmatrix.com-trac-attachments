diff --git twisted/web/server.py twisted/web/server.py
index a3ecaa3..15bae10 100644
--- twisted/web/server.py
+++ twisted/web/server.py
@@ -617,18 +617,23 @@ class Site(http.HTTPFactory):
     sessionFactory = Session
     sessionCheckTime = 1800
 
-    def __init__(self, resource, *args, **kwargs):
+    def __init__(self, resource, requestFactory=None, *args, **kwargs):
         """
         @param resource: The root of the resource hierarchy.  All request
             traversal for requests received by this factory will begin at this
             resource.
         @type resource: L{IResource} provider
+        @param requestFactory: A factory which is called with (channel, queued)
+            and creates L{Request} instances.
+        @type requestFactory: C{callable} or C{class}.
 
         @see: L{twisted.web.http.HTTPFactory.__init__}
         """
         http.HTTPFactory.__init__(self, *args, **kwargs)
         self.sessions = {}
         self.resource = resource
+        if requestFactory:
+            self.requestFactory = requestFactory
 
     def _openLogFile(self, path):
         from twisted.python import logfile
diff --git twisted/web/test/test_web.py twisted/web/test/test_web.py
index 3c80595..f369e6d 100644
--- twisted/web/test/test_web.py
+++ twisted/web/test/test_web.py
@@ -69,7 +69,13 @@ class SimpleResource(resource.Resource):
             return b"correct"
 
 
+
 class SiteTest(unittest.TestCase):
+    """
+    Unit tests for L{server.Site}.
+    """
+
+
     def test_simplestSite(self):
         """
         L{Site.getResourceFor} returns the C{b""} child of the root resource it
@@ -84,6 +90,42 @@ class SiteTest(unittest.TestCase):
             sres2, "Got the wrong resource.")
 
 
+    def test_constructorRequestFactory(self):
+        """
+        Can be initialized with a custom requestFactory.
+        """
+        def customFactory(channel, queued):
+            """
+            Custom factory to help with test.
+
+            @param channel: HTTP protocol for the request.
+            @type channel: L{http.HTTPChannel}
+
+            @param queued: Flag if request is queued.
+            @type queued: C{bool}
+            """
+
+        rootResource = SimpleResource()
+
+        site = server.Site(
+            resource=rootResource, requestFactory=customFactory)
+
+        self.assertIs(customFactory, site.requestFactory)
+
+
+    def test_buildProtocol(self):
+        """
+        Set `site` and `requestFactory` members the created protocol based on
+        values from itself.
+        """
+        site = server.Site(SimpleResource())
+
+        channel = site.buildProtocol(None)
+
+        self.assertIs(site, channel.site)
+        self.assertIs(site.requestFactory, channel.requestFactory)
+
+
 
 class SessionTest(unittest.TestCase):
     """
diff --git twisted/web/topfiles/7016.feature twisted/web/topfiles/7016.feature
new file mode 100644
index 0000000..391650b
--- /dev/null
+++ twisted/web/topfiles/7016.feature
@@ -0,0 +1 @@
+twisted.web.server.Site accepts requestFactory as constructor argument.
\ No newline at end of file
