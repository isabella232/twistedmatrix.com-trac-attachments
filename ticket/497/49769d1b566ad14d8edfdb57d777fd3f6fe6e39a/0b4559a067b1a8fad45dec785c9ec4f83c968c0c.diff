Index: twisted/test/test_cooperator.py
===================================================================
--- twisted/test/test_cooperator.py	(revision 21496)
+++ twisted/test/test_cooperator.py	(working copy)
@@ -1,4 +1,10 @@
+# Copyright (c) 2001-2007 Twisted Matrix Laboratories.
+# See LICENSE for details.
 
+"""
+Tests for cooperator facility.
+"""
+
 from twisted.internet import reactor, defer, task
 from twisted.trial import unittest
 
@@ -25,8 +31,7 @@
             d = c.coiterate(iter(()), stuff)
             d.addCallback(self.cbIter)
             d.addErrback(self.ebIter)
-            return d.addCallback(lambda result:
-                                 self.assertEquals(result, self.RESULT))
+            return d.addCallback(self.assertEquals, self.RESULT)
         return testwith(None).addCallback(lambda ign: testwith(defer.Deferred()))
 
 
@@ -72,7 +77,7 @@
         d.addCallback(self.cbIter)
         d.addErrback(self.ebIter)
 
-        return d.addCallback(lambda result: self.assertEquals(result, self.RESULT))
+        return d.addCallback(self.assertEquals, self.RESULT)
 
 
     def testUnexpectedError(self):
@@ -187,3 +192,17 @@
                 work += 1
             if work > 50:
                 self.fail("Cooperator took too long")
+
+
+    def test_coiterateDontSwallowResult(self):
+        """
+        Test that putting a C{Deferred} in coiterate generator doesn't swallow
+        the result.
+        """
+        def workGenerator():
+            for i in xrange(3):
+                d = defer.succeed("foo")
+                yield d
+                d.addCallback(self.assertEquals, "foo")
+        c = task.Cooperator()
+        return c.coiterate(workGenerator())
Index: twisted/internet/task.py
===================================================================
--- twisted/internet/task.py	(revision 21496)
+++ twisted/internet/task.py	(working copy)
@@ -246,6 +246,7 @@
                     self.iterators.remove(taskObj)
                     def cbContinue(result, taskObj=taskObj):
                         self.coiterate(*taskObj)
+                        return result
                     result.addCallbacks(cbContinue, doneDeferred.errback)
         self._reschedule()
 
