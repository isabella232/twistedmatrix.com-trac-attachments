--- /usr/lib/python2.3/site-packages/twisted/conch/telnet.py	2005-05-08 21:23:29.000000000 +0000
+++ telnet.py	2006-09-18 20:07:16.000000000 +0000
@@ -435,7 +435,15 @@
         self._write(IAC + SB + bytes + IAC + SE)
 
     def dataReceived(self, data):
-        # Most grossly inefficient implementation ever
+
+	# Create a buffer to avoid calling applicationDataReceived() for
+	# every character, which is grossly inefficient.
+        buf = []
+	def flush_buf(buf=buf):
+	    if buf:
+		self.applicationDataReceived(''.join(buf))
+		buf = []
+
         for b in data:
             if self.state == 'data':
                 if b == IAC:
@@ -443,16 +451,17 @@
                 elif b == '\r':
                     self.state = 'newline'
                 else:
-                    self.applicationDataReceived(b)
+                    buf.append(b)
             elif self.state == 'escaped':
                 if b == IAC:
-                    self.applicationDataReceived(b)
+                    buf.append(b)
                     self.state = 'data'
                 elif b == SB:
                     self.state = 'subnegotiation'
                     self.commands = []
                 elif b in (NOP, DM, BRK, IP, AO, AYT, EC, EL, GA):
                     self.state = 'data'
+		    flush_buf()
                     self.commandReceived(b, None)
                 elif b in (WILL, WONT, DO, DONT):
                     self.state = 'command'
@@ -463,32 +472,38 @@
                 self.state = 'data'
                 command = self.command
                 del self.command
+		flush_buf()
                 self.commandReceived(command, b)
             elif self.state == 'newline':
                 if b == '\n':
-                    self.applicationDataReceived('\n')
+                    buf.append('\n')
                 elif b == '\0':
-                    self.applicationDataReceived('\r')
+                    buf.append('\r')
                 else:
-                    self.applicationDataReceived('\r' + b)
+                    buf.append('\r' + b)
                 self.state = 'data'
             elif self.state == 'subnegotiation':
                 if b == IAC:
                     self.state = 'subnegotiation-escaped'
                 else:
+		    flush_buf()
                     self.commands.append(b)
             elif self.state == 'subnegotiation-escaped':
                 if b == SE:
                     self.state = 'data'
                     commands = self.commands
                     del self.commands
+		    flush_buf()
                     self.negotiate(commands)
                 else:
                     self.state = 'subnegotiation'
+		    flush_buf()
                     self.commands.append(b)
             else:
                 raise ValueError("How'd you do this?")
 
+	flush_buf()
+
     def connectionLost(self, reason):
         for state in self.options.values():
             if state.us.onResult is not None:
