Index: twisted/conch/test/test_agent.py
===================================================================
--- twisted/conch/test/test_agent.py	(revision 24512)
+++ twisted/conch/test/test_agent.py	(working copy)
@@ -133,12 +133,23 @@
 
 
     def test_signDataCallbackErrorHandling(self):
+        """
+        Assert that L{SSHAgentClient.signData} raises a ConchError
+        if we get a response from the server whose opcode doesn't match
+        the protocol for data signing requests.
+        """
+
         d = self.client.signData(self.rsaPublic.blob(), "John Hancock")
         self.pump.flush()
         return self.assertFailure(d, ConchError)
 
 
     def test_requestIdentitiesCallbackErrorHandling(self):
+        """
+        Assert that L{SSHAgentClient.requestIdentities} raises a ConchError
+        if we get a response from the server whose opcode doesn't match
+        the protocol for identity requests.
+        """
         d = self.client.requestIdentities()
         self.pump.flush()
         return self.assertFailure(d, ConchError)
@@ -152,7 +163,12 @@
 
     def test_addRSAIdentityNoComment(self):
         """
-        Add an RSA key without supplying a comment
+        L{SSHAgentClient.addIdentity} adds the private key it is called
+        with to the SSH agent server to which it is connected, associating
+        it with the comment it is called with.  
+
+        This test asserts that ommitting the comment produces an
+        empty string for the comment on the server.
         """
         d = self.client.addIdentity(self.rsaPrivate.privateBlob())
         self.pump.flush()
@@ -165,7 +181,12 @@
 
     def test_addDSAIdentityNoComment(self):
         """
-        Add a DSA key without supplying a comment
+        L{SSHAgentClient.addIdentity} adds the private key it is called
+        with to the SSH agent server to which it is connected, associating
+        it with the comment it is called with.  
+
+        This test asserts that ommitting the comment produces an
+        empty string for the comment on the server.
         """
         d = self.client.addIdentity(self.dsaPrivate.privateBlob())
         self.pump.flush()
@@ -178,7 +199,12 @@
 
     def test_addRSAIdentityWithComment(self):
         """
-        Add an RSA key with a comment
+        L{SSHAgentClient.addIdentity} adds the private key it is called
+        with to the SSH agent server to which it is connected, associating
+        it with the comment it is called with.  
+
+        This test asserts that the server receives/stores the comment
+        as sent by the client.
         """
         d = self.client.addIdentity(
             self.rsaPrivate.privateBlob(), comment='My special key')
@@ -192,7 +218,12 @@
 
     def test_addDSAIdentityWithComment(self):
         """
-        Add a DSA key with a comment
+        L{SSHAgentClient.addIdentity} adds the private key it is called
+        with to the SSH agent server to which it is connected, associating
+        it with the comment it is called with.  
+
+        This test asserts that the server receives/stores the comment
+        as sent by the client.
         """
         d = self.client.addIdentity(
             self.dsaPrivate.privateBlob(), comment='My special key')
Index: twisted/conch/test/test_keys.py
===================================================================
--- twisted/conch/test/test_keys.py	(revision 24512)
+++ twisted/conch/test/test_keys.py	(working copy)
@@ -649,6 +649,24 @@
                 keys.Key.fromString, badBlob)
 
 
+    def test_fromPrivateBlob(self):
+        """
+        Test that a private key is correctly generated from a private key blob.
+        """
+        rsaBlob = (common.NS('ssh-rsa') + common.MP(2) + common.MP(3) +
+                   common.MP(4) + common.MP(5) + common.MP(6) + common.MP(7))
+        rsaKey = keys.Key._fromString_PRIVATE_BLOB(rsaBlob)
+        dsaBlob = (common.NS('ssh-dss') + common.MP(2) + common.MP(3) +
+                   common.MP(4) + common.MP(5) + common.MP(6))
+        dsaKey = keys.Key._fromString_PRIVATE_BLOB(dsaBlob)
+        badBlob = common.NS('ssh-bad')
+        self.assertFalse(rsaKey.isPublic())
+        self.assertEquals(rsaKey.data(), {'n':2L, 'e':3L, 'd':4L, 'u':5L, 'p':6L, 'q':7L})
+        self.assertFalse(dsaKey.isPublic())
+        self.assertEquals(dsaKey.data(), {'p':2L, 'q':3L, 'g':4L, 'y':5L, 'x':6L})
+        self.assertRaises(keys.BadKeyError, keys.Key._fromString_PRIVATE_BLOB, badBlob)
+
+
     def test_blob(self):
         """
         Test that the Key object generates blobs correctly.
Index: twisted/conch/ssh/keys.py
===================================================================
--- twisted/conch/ssh/keys.py	(revision 24512)
+++ twisted/conch/ssh/keys.py	(working copy)
@@ -148,15 +148,11 @@
 
         if keyType == 'ssh-rsa':
             n, e, d, u, p, q, rest = common.getMP(rest, 6)
-            comment, rest = common.getNS(rest)
             rsakey = Class(RSA.construct((n, e, d, p, q, u)))
-            rsakey.comment = comment
             return rsakey
         elif keyType == 'ssh-dss':
             p, q, g, y, x, rest = common.getMP(rest, 5)
-            comment, rest = common.getNS(rest)
             dsakey =  Class(DSA.construct((y, g, p, q, x)))
-            dsakey.comment = comment
             return dsakey
         else:
             raise BadKeyError('unknown blob type: %s' % keyType)
