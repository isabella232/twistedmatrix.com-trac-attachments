Index: twisted/conch/ssh/agent.py
===================================================================
--- twisted/conch/ssh/agent.py	(revision 24540)
+++ twisted/conch/ssh/agent.py	(working copy)
@@ -36,9 +36,9 @@
             if len(self.buf) <= 4:
                 return
             packLen = struct.unpack('!L', self.buf[:4])[0]
-            if len(self.buf) < 4+packLen:
+            if len(self.buf) < 4 + packLen:
                 return
-            packet, self.buf = self.buf[4:4+packLen], self.buf[4+packLen:]
+            packet, self.buf = self.buf[4:4 + packLen], self.buf[4 + packLen:]
             reqType = ord(packet[0])
             d = self.deferreds.pop(0)
             if reqType == AGENT_FAILURE:
@@ -50,7 +50,7 @@
 
 
     def sendRequest(self, reqType, data):
-        pack = struct.pack('!LB',len(data)+1, reqType)+data
+        pack = struct.pack('!LB',len(data) + 1, reqType) + data
         self.transport.write(pack)
         d = defer.Deferred()
         self.deferreds.append(d)
@@ -74,7 +74,7 @@
         public key blobs and comments.
         """
         if ord(data[0]) != AGENT_IDENTITIES_ANSWER:
-            raise ConchError('unexpected respone: %i' % ord(data[0]))
+            raise ConchError('unexpected response: %i' % ord(data[0]))
         numKeys = struct.unpack('!L', data[1:5])[0]
         keys = []
         data = data[5:]
@@ -146,23 +146,23 @@
             if len(self.buf) <= 4:
                 return
             packLen = struct.unpack('!L', self.buf[:4])[0]
-            if len(self.buf) < 4+packLen:
+            if len(self.buf) < 4 + packLen:
                 return
-            packet, self.buf = self.buf[4:4+packLen], self.buf[4+packLen:]
+            packet, self.buf = self.buf[4:4 + packLen], self.buf[4 + packLen:]
             reqType = ord(packet[0])
             reqName = messages.get(reqType, None)
             if not reqName:
                 self.sendResponse(AGENT_FAILURE, '')
             else:
                 f = getattr(self, 'agentc_%s' % reqName)
-                if not hasattr(self.factory, 'keys'):
+                if getattr(self.factory, 'keys', None) is None:
                     self.sendResponse(AGENT_FAILURE, '')
                     raise MissingKeyStoreError()
                 f(packet[1:])
 
 
     def sendResponse(self, reqType, data):
-        pack = struct.pack('!LB', len(data)+1, reqType) + data
+        pack = struct.pack('!LB', len(data) + 1, reqType) + data
         self.transport.write(pack)
 
 
@@ -172,11 +172,13 @@
         """
         assert data == ''
         numKeys = len(self.factory.keys)
-        s = struct.pack('!L', numKeys)
+        resp = []
+
+        resp.append(struct.pack('!L', numKeys))
         for key, comment in self.factory.keys.itervalues():
-            s += NS(key.blob()) # yes, wrapped in an NS
-            s += NS(comment)
-        self.sendResponse(AGENT_IDENTITIES_ANSWER, s)
+            resp.append(NS(key.blob())) # yes, wrapped in an NS
+            resp.append(NS(comment))
+        self.sendResponse(AGENT_IDENTITIES_ANSWER, ''.join(resp))
 
 
     def agentc_SIGN_REQUEST(self, data):
@@ -280,7 +282,7 @@
 AGENTC_REMOVE_ALL_IDENTITIES    = 19
 
 messages = {}
-import agent
-for v in dir(agent):
-    if v.startswith('AGENTC_'):
-        messages[getattr(agent, v)] = v[7:]
+for name, value in locals().copy().items():
+    if name[:7] == 'AGENTC_':
+        messages[value] = name[7:] # doesn't handle doubles
+
