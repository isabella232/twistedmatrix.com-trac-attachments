Index: twisted/conch/test/test_keys.py
===================================================================
--- twisted/conch/test/test_keys.py	(revision 24516)
+++ twisted/conch/test/test_keys.py	(working copy)
@@ -648,27 +648,59 @@
         self.assertRaises(keys.BadKeyError,
                 keys.Key.fromString, badBlob)
 
+        # assert that the key comment attribute is present but empty, since it
+        # has no role on a public key.
+        self.assertEqual('', rsaKey.comment)
+        self.assertEqual('', dsaKey.comment)
 
+
     def test_fromPrivateBlob(self):
         """
         Test that a private key is correctly generated from a private key blob.
         """
         rsaBlob = (common.NS('ssh-rsa') + common.MP(2) + common.MP(3) +
                    common.MP(4) + common.MP(5) + common.MP(6) + common.MP(7))
-        rsaKey = keys.Key._fromString_PRIVATE_BLOB(rsaBlob)
+        rsaKey = keys.Key.fromString(rsaBlob, type='private_blob')
         dsaBlob = (common.NS('ssh-dss') + common.MP(2) + common.MP(3) +
                    common.MP(4) + common.MP(5) + common.MP(6))
-        dsaKey = keys.Key._fromString_PRIVATE_BLOB(dsaBlob)
+        dsaKey = keys.Key.fromString(dsaBlob, type='private_blob')
         badBlob = common.NS('ssh-bad')
         self.assertFalse(rsaKey.isPublic())
         self.assertEqual(
             rsaKey.data(), {'n':2L, 'e':3L, 'd':4L, 'u':5L, 'p':6L, 'q':7L})
+        self.assertEqual('', rsaKey.comment)
+
         self.assertFalse(dsaKey.isPublic())
         self.assertEqual(dsaKey.data(), {'p':2L, 'q':3L, 'g':4L, 'y':5L, 'x':6L})
+        self.assertEqual('', dsaKey.comment)
         self.assertRaises(
             keys.BadKeyError, keys.Key._fromString_PRIVATE_BLOB, badBlob)
 
+    def test_fromPrivateBlobWithComment(self):
+        """
+        Assert that a comment at the end of a private key blob is correctly
+        assigned to the key's comment attribute.
+        """
+        comment = "a witty and interesting comment about a key"
+        rsaBlob = (common.NS('ssh-rsa') + common.MP(2) + common.MP(3) +
+                   common.MP(4) + common.MP(5) + common.MP(6) + common.MP(7) +
+                   common.NS(comment))
+        rsaKey = keys.Key.fromString(rsaBlob, type='private_blob')
+        dsaBlob = (common.NS('ssh-dss') + common.MP(2) + common.MP(3) +
+                   common.MP(4) + common.MP(5) + common.MP(6) + common.NS(comment))
+        dsaKey = keys.Key.fromString(dsaBlob, type='private_blob')
 
+        self.assertFalse(rsaKey.isPublic())
+        self.assertEqual(
+            rsaKey.data(), {'n':2L, 'e':3L, 'd':4L, 'u':5L, 'p':6L, 'q':7L})
+        self.assertEqual(comment, rsaKey.comment)
+
+        self.assertFalse(dsaKey.isPublic())
+        self.assertEqual(dsaKey.data(), {'p':2L, 'q':3L, 'g':4L, 'y':5L, 'x':6L})
+        self.assertEqual(comment, dsaKey.comment)
+
+
+
     def test_blob(self):
         """
         Test that the Key object generates blobs correctly.
Index: twisted/conch/ssh/keys.py
===================================================================
--- twisted/conch/ssh/keys.py	(revision 24516)
+++ twisted/conch/ssh/keys.py	(working copy)
@@ -148,11 +148,19 @@
 
         if keyType == 'ssh-rsa':
             n, e, d, u, p, q, rest = common.getMP(rest, 6)
-            rsakey = Class(RSA.construct((n, e, d, p, q, u)))
+            if rest:
+                comment, rest = common.getNS(rest)
+            else:
+                comment = ''
+            rsakey = Class(RSA.construct((n, e, d, p, q, u)), comment=comment)
             return rsakey
         elif keyType == 'ssh-dss':
             p, q, g, y, x, rest = common.getMP(rest, 5)
-            dsakey =  Class(DSA.construct((y, g, p, q, x)))
+            if rest:
+                comment, rest = common.getNS(rest)
+            else:
+                comment = ''
+            dsakey =  Class(DSA.construct((y, g, p, q, x)), comment=comment)
             return dsakey
         else:
             raise BadKeyError('unknown blob type: %s' % keyType)
@@ -361,14 +369,15 @@
                 return 'blob'
     _guessStringType = classmethod(_guessStringType)
 
-    def __init__(self, keyObject):
+    def __init__(self, keyObject, comment=''):
         """
         Initialize a PublicKey with a C{Crypto.PublicKey.pubkey.pubkey}
-        object.
+        object. Comment is a human-readable string describing the key.
 
         @type keyObject: C{Crypto.PublicKey.pubkey.pubkey}
         """
         self.keyObject = keyObject
+        self.comment = comment
 
     def __eq__(self, other):
         """
