Index: twisted/conch/test/test_agent.py
===================================================================
--- twisted/conch/test/test_agent.py	(revision 24501)
+++ twisted/conch/test/test_agent.py	(working copy)
@@ -5,15 +5,21 @@
 Tests for L{twisted.conch.ssh.agent}.
 """
 
+import struct
 from twisted.trial import unittest
 from twisted.test import iosim
 from twisted.conch.test import keydata
-from twisted.conch.error import ConchError
+from twisted.conch.error import ConchError, MissingKeyStoreError
 from twisted.conch.ssh import agent, keys
 
 
 class StubFactory(object):
-    keys = {}
+    """
+    Mock factory that provides the keys attribute required by the 
+    SSHAgentServerProtocol
+    """
+    def __init__(self):
+        self.keys = {}
 
 
 
@@ -40,6 +46,20 @@
 
 
 
+class TestServerProtocolContractWithFactory(AgentTestBase):
+    """The server protocol is stateful and so uses its factory to track
+       state across requests.  This test asserts that the protocol raises
+       if its factory doesn't provide the necessary storage for that state.
+    """
+    def test_factorySuppliesKeyStorageForServerProtocol(self):
+        # need a message to send into the server
+        msg = struct.pack('!LB',1, agent.AGENTC_REQUEST_IDENTITIES)
+        del self.server.factory.__dict__['keys']
+        self.assertRaises(MissingKeyStoreError,
+                          self.server.dataReceived, msg)
+
+
+
 class TestUnimplementedVersionOneServer(AgentTestBase):
     """
     Tests for methods with no-op implementations on the server. We need these
@@ -50,6 +70,7 @@
     """
 
     def test_agentc_REQUEST_RSA_IDENTITIES(self):
+        """assert that we get the correct op code for an RSA identities request"""
         d = self.client.sendRequest(agent.AGENTC_REQUEST_RSA_IDENTITIES, '')
         self.pump.flush()
         def _cb(packet):
@@ -59,12 +80,16 @@
 
 
     def test_agentc_REMOVE_RSA_IDENTITY(self):
+        """assert that we get the correct op code for an RSA remove identity request"""
         d = self.client.sendRequest(agent.AGENTC_REMOVE_RSA_IDENTITY, '')
         self.pump.flush()
         return d.addCallback(self.assertEqual, '')
 
 
     def test_agentc_REMOVE_ALL_RSA_IDENTITIES(self):
+        """assert that we get the correct op code for an RSA remove all 
+           identities request.
+        """
         d = self.client.sendRequest(agent.AGENTC_REMOVE_ALL_RSA_IDENTITIES, '')
         self.pump.flush()
         return d.addCallback(self.assertEqual, '')
@@ -119,6 +144,7 @@
     """
 
     def test_addRSAIdentityNoComment(self):
+        "Add an RSA key without supplying a comment"
         d = self.client.addIdentity(self.rsaPrivate.privateBlob())
         self.pump.flush()
         def _check(ignored):
@@ -129,6 +155,7 @@
 
 
     def test_addDSAIdentityNoComment(self):
+        "Add a DSA key without supplying a comment"
         d = self.client.addIdentity(self.dsaPrivate.privateBlob())
         self.pump.flush()
         def _check(ignored):
@@ -139,6 +166,7 @@
 
 
     def test_addRSAIdentityWithComment(self):
+        "Add an RSA key with a comment"
         d = self.client.addIdentity(
             self.rsaPrivate.privateBlob(), comment='My special key')
         self.pump.flush()
@@ -150,6 +178,7 @@
 
 
     def test_addDSAIdentityWithComment(self):
+        "Add a DSA key with a comment"
         d = self.client.addIdentity(
             self.dsaPrivate.privateBlob(), comment='My special key')
         self.pump.flush()
@@ -186,6 +215,9 @@
 
 
     def test_signDataRSA(self):
+        """Sign data with an RSA private key and then verify it with the
+           public key.
+        """
         d = self.client.signData(self.rsaPublic.blob(), "John Hancock")
         self.pump.flush()
         def _check(sig):
@@ -196,6 +228,9 @@
 
 
     def test_signDataDSA(self):
+        """Sign data with a DSA private key and then verify it with the
+           public key.
+        """
         d = self.client.signData(self.dsaPublic.blob(), "John Hancock")
         self.pump.flush()
         def _check(sig):
@@ -207,6 +242,9 @@
 
 
     def test_signDataRSAErrbackOnUnknownBlob(self):
+        """Assert that we get an errback if we try to sign data using a key
+           that wasn't added.
+        """
         del self.server.factory.keys[self.rsaPublic.blob()]
         d = self.client.signData(self.rsaPublic.blob(), "John Hancock")
         self.pump.flush()
@@ -214,6 +252,9 @@
 
 
     def test_requestIdentities(self):
+        """Assert that we get all of the keys/comments that we add when we
+           issue a request for all identities.
+        """
         d = self.client.requestIdentities()
         self.pump.flush()
         def _check(keyt):
@@ -243,6 +284,7 @@
 
 
     def test_removeRSAIdentity(self):
+        """Assert that we can remove an RSA identity"""
         # only need public key for this
         d = self.client.removeIdentity(self.rsaPrivate.blob())
         self.pump.flush()
@@ -255,6 +297,7 @@
 
 
     def test_removeDSAIdentity(self):
+        """Assert that we can remove a DSA identity"""
         # only need public key for this
         d = self.client.removeIdentity(self.dsaPrivate.blob())
         self.pump.flush()
@@ -266,6 +309,7 @@
 
 
     def test_removeAllIdentities(self):
+        """Assert that we can remove all identities"""
         d = self.client.removeAllIdentities()
         self.pump.flush()
 
Index: twisted/conch/error.py
===================================================================
--- twisted/conch/error.py	(revision 24501)
+++ twisted/conch/error.py	(working copy)
@@ -31,3 +31,8 @@
     """This is thrown to let the UserAuthServer know it doesn't need to handle
     the authentication anymore.
     """
+
+class MissingKeyStoreError(Exception):
+    """Raised if an SSHAgentServer starts receiving data without its factory
+       providing a keys dict on which to read/write key data."""
+
Index: twisted/conch/ssh/agent.py
===================================================================
--- twisted/conch/ssh/agent.py	(revision 24501)
+++ twisted/conch/ssh/agent.py	(working copy)
@@ -2,7 +2,9 @@
 # See LICENSE for details.
 
 """
-Implements the old SSHv1 key agent protocol.
+Implements the SSH v2 key agent protocol.
+This protocol is documented in the SSH source code, in the file PROTOCOL.agent 
+(http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/PROTOCOL.agent).
 
 Maintainer: Paul Swartz
 """
@@ -10,12 +12,17 @@
 import struct
 
 from twisted.conch.ssh.common import NS, getNS
-from twisted.conch.error import ConchError
+from twisted.conch.error import ConchError, MissingKeyStoreError
 from twisted.conch.ssh import keys
 from twisted.internet import defer, protocol
 
 
+
 class SSHAgentClient(protocol.Protocol):
+    """The client side of the SSH agent protocol.  This is equivalent to
+       ssh-add(1) and can be used with either ssh-agent(1) or the SSHAgentServer
+       protocol, also in this package.
+    """
 
     def __init__(self):
         self.buf = ''
@@ -48,10 +55,17 @@
 
 
     def requestIdentities(self):
+        """Returns a Deferred that will callback with a list of all keys found in
+           the SSH agent. The list of keys is comprised of (public key blob, comment)
+           tuples.
+        """
         return self.sendRequest(AGENTC_REQUEST_IDENTITIES, '').addCallback(self._cbRequestIdentities)
 
 
     def _cbRequestIdentities(self, data):
+        """Unpack a collection of identities into a list of tuples comprised of
+           public key blobs and comments.
+        """
         if ord(data[0]) != AGENT_IDENTITIES_ANSWER:
             raise ConchError('unexpected respone: %i' % ord(data[0]))
         numKeys = struct.unpack('!L', data[1:5])[0]
@@ -65,12 +79,16 @@
 
 
     def addIdentity(self, blob, comment = ''):
+        """Add a private key blob to the agent's collection of keys."""
         req = blob
         req += NS(comment)
         return self.sendRequest(AGENTC_ADD_IDENTITY, req)
 
 
     def signData(self, blob, data):
+        """Blob is a public key whose private counterpart was previously added
+           to the running agent.  Return a signature for data using that key.
+        """
         req = NS(blob)
         req += NS(data)
         req += '\000\000\000\000' # flags
@@ -85,16 +103,23 @@
 
 
     def removeIdentity(self, blob):
+        """Remove the private key corresponding to the public key in blob from the
+           running agent."""
         req = NS(blob)
         return self.sendRequest(AGENTC_REMOVE_IDENTITY, req)
 
 
     def removeAllIdentities(self):
+        """Remove all keys from the running agent."""
         return self.sendRequest(AGENTC_REMOVE_ALL_IDENTITIES, '')
 
 
 
 class SSHAgentServer(protocol.Protocol):
+    """The server side of the SSH agent protocol.  This is equivalent to
+       ssh-agent(1) and can be used with either ssh-add(1) or the 
+       SSHAgentClient protocol, also in this package.
+    """
 
     def __init__(self):
         self.buf = ''
@@ -114,7 +139,8 @@
             else:
                 f = getattr(self, 'agentc_%s' % reqName)
                 if not hasattr(self.factory, 'keys'):
-                    self.factory.keys = {}
+                    self.sendResponse(AGENT_FAILURE, '')
+                    raise MissingKeyStoreError()
                 f(packet[1:])
 
 
@@ -124,6 +150,7 @@
 
 
     def agentc_REQUEST_IDENTITIES(self, data):
+        """Return all of the identities that have been added to the server"""
         assert data == ''
         numKeys = len(self.factory.keys)
         s = struct.pack('!L', numKeys)
@@ -134,6 +161,11 @@
 
 
     def agentc_SIGN_REQUEST(self, data):
+        """Data is a structure with a reference to an already added key object
+           and some data that the clients wants signed with that key.  If the
+           key object wasn't loaded, return AGENT_FAILURE, else return the
+           signature.
+        """
         blob, data = getNS(data)
         if blob not in self.factory.keys:
             return self.sendResponse(AGENT_FAILURE, '')
@@ -143,12 +175,17 @@
 
 
     def agentc_ADD_IDENTITY(self, data):
+        """Adds a private key to the agent's collection of identities.
+           On subsequent interactions, the private key can be accessed using only
+           the corresponding public key.
+        """
         k = keys.Key.fromString(data, type='private_blob') # not wrapped in NS here
         self.factory.keys[k.blob()] = (k, k.comment)
         self.sendResponse(AGENT_SUCCESS, '')
 
 
     def agentc_REMOVE_IDENTITY(self, data):
+        """Remove a specific key from the agent's collection of identities."""
         blob, _ = getNS(data)
         k = keys.Key.fromString(blob, type='blob')
         del self.factory.keys[k.blob()]
@@ -156,6 +193,7 @@
 
 
     def agentc_REMOVE_ALL_IDENTITIES(self, data):
+        """Remove all keys from the agent's collection of identities"""
         assert data == ''
         self.factory.keys = {}
         self.sendResponse(AGENT_SUCCESS, '')
@@ -165,14 +203,23 @@
     # do no-ops for v1 commands or we'll get "bad request" errors
 
     def agentc_REQUEST_RSA_IDENTITIES(self, data):
+        """v1 message for listing RSA1 keys; superseded by agentc_REQUEST_IDENTITIES,
+           which handles different key types.
+        """
         self.sendResponse(AGENT_RSA_IDENTITIES_ANSWER, struct.pack('!L', 0))
 
 
     def agentc_REMOVE_RSA_IDENTITY(self, data):
+        """v1 message for removing RSA1 keys; superseded by agentc_REMOVE_IDENTITY,
+           which handles different key types.
+        """
         self.sendResponse(AGENT_SUCCESS, '')
 
 
     def agentc_REMOVE_ALL_RSA_IDENTITIES(self, data):
+        """v1 message for removing all RSA1 keys; superseded by 
+           agentc_REMOVE_ALL_IDENTITIES, which handles different key types.
+        """
         self.sendResponse(AGENT_SUCCESS, '')
 
 
