Index: test/test_irc.py
===================================================================
--- test/test_irc.py	(revision 33734)
+++ test/test_irc.py	(working copy)
@@ -1879,3 +1879,19 @@
         self.protocol.privmsg = privmsg
         self.protocol.irc_NOTICE(
             'spam', ['#greasyspooncafe', "I don't want any spam!"])
+
+
+class DccChatFactoryTests(unittest.TestCase):
+    """
+    Tests for L{DccChatFactory}
+    """
+    def test_buildProtocol(self):
+        """
+        An instance of the DccChat protocol is returned, which has the factory
+        property set to the factory which created it.
+        """
+        queryData = ('fromUser', None, None)
+        f = irc.DccChatFactory(None, queryData)
+        p = f.buildProtocol('127.0.0.1')
+        self.assertTrue(isinstance(p, irc.DccChat))
+        self.assertEqual(p.factory, f)
Index: protocols/irc.py
===================================================================
--- protocols/irc.py	(revision 33734)
+++ protocols/irc.py	(working copy)
@@ -2684,6 +2684,7 @@
     def buildProtocol(self, addr):
         p = self.protocol(client=self.client, queryData=self.queryData)
         p.factory = self
+        return p
 
     def clientConnectionFailed(self, unused_connector, unused_reason):
         self.client.dcc_sessions.remove(self)
Index: topfiles/3179.bugfix
===================================================================
--- topfiles/3179.bugfix	(revision 0)
+++ topfiles/3179.bugfix	(revision 0)
@@ -0,0 +1 @@
+twisted.words.protocols.irc.DccChatFactory.buildProtocol now returns the protocol object that it creates
