diff --git a/doc/web/howto/web-in-60/asynchronous-deferred.xhtml b/doc/web/howto/web-in-60/asynchronous-deferred.xhtml
index 78ce564..325164d 100644
--- a/doc/web/howto/web-in-60/asynchronous-deferred.xhtml
+++ b/doc/web/howto/web-in-60/asynchronous-deferred.xhtml
@@ -21,27 +21,31 @@ to provide a uniform interface to many asynchronous events, and shows you an
 example of using a <code>Deferred</code>-returning API to generate an
 asynchronous response to a request in Twisted Web.</p>
 
-<p><code>Deferred</code> is the result of two consequences of the asynchronous
-programming approach. First, asynchronous code is frequently (if not always)
-concerned with some data (in Python, an object) which is not yet available but
-which probably will be soon. Asynchronous code needs a way to define what will
-be done to the object once it does exist. It also needs a way to define how to
-handle errors in the creation or acquisition of that object. These two needs are
-satisfied by the <i>callbacks</i> and <i>errbacks</i> of a
-<code>Deferred</code>. Callbacks are added to a <code>Deferred</code> with <code
-class="API" base="twisted.internet.defer">Deferred.addCallback</code>; errbacks
+<p><code>Deferred</code> is the result of two consequences of the
+asynchronous programming approach. First, asynchronous code is
+frequently (if not always) concerned with some data (in Python, an
+object) which is not yet available but which probably will be
+soon. Asynchronous code needs a way to define what will be done to the
+object once it does exist. It also needs a way to define how to handle
+errors in the creation or acquisition of that object. These two needs
+are satisfied by the <i>callbacks</i> and <i>errbacks</i> of
+a <code>Deferred</code>. Callbacks are added to
+a <code>Deferred</code> with <code class="API"
+base="twisted.internet.defer">Deferred.addCallback</code>; errbacks
 are added with <code class="API"
-base="twisted.internet.defer">Deferred.addErrback</code>. When the object
-finally does exist, it is passed to <code class="API"
-base="twisted.internet.defer">Deferred.callback</code> which passes it on to the
-callback added with <code>addCallback</code>. Similarly, if an error occurs,
-<code class="API" base="twisted.internet.defer">Deferred.errback</code> is
-called and the error is passed along to the errback added with
-<code>addErrback</code>. Second, the events that make asynchronous code actually
-work often take many different, incompatible forms. <code>Deferred</code> acts
-as the uniform interface which lets different parts of an asynchronous
-application interact and isolates them from implementation details they
-shouldn't be concerned with.</p>
+base="twisted.internet.defer">Deferred.addErrback</code>. When the
+object finally does exist, it is passed to <code class="API"
+base="twisted.internet.defer">Deferred.callback</code> which passes it
+on to the callback added with <code>addCallback</code>. Similarly, if
+an error occurs, <code class="API"
+base="twisted.internet.defer">Deferred.errback</code> is called and
+the error is passed along to the errback added
+with <code>addErrback</code>. Second, the events that make
+asynchronous code actually work often take many different,
+incompatible forms. <code>Deferred</code> acts as the uniform
+interface which lets different parts of an asynchronous application
+interact and isolates them from implementation details they shouldn't
+be concerned with.</p>
 
 <p>That's almost all there is to <code>Deferred</code>. To solidify your new
 understanding, now consider this rewritten version
@@ -64,9 +68,9 @@ from twisted.web.server import NOT_DONE_YET
 from twisted.internet import reactor
 </pre>
 
-<p>With the imports done, here's the first part of the
-<code>DelayedResource</code> implementation. Again, this part of the code is
-identical to the previous version:</p>
+<p>With the imports done, here's the first part of
+the <code>DelayedResource</code> implementation. Again, this part of
+the code is identical to the previous version:</p>
 
 <pre class="python">
 class DelayedResource(Resource):
@@ -75,29 +79,31 @@ class DelayedResource(Resource):
         request.finish()
 </pre>
 
-<p>Next we need to define the render method. Here's where things change a
-bit. Instead of using <code class="API"
-base="twisted.internet.interfaces.IReactorTime">callLater</code>, We're going to
-use <code class="API" base="twisted.internet.task">deferLater</code> this
-time. <code>deferLater</code> accepts a reactor, delay (in seconds, as with
-<code>callLater</code>), and a function to call after the delay to produce that
-elusive object discussed in the description of <code>Deferred</code>s. We're
-also going to use <code>_delayedRender</code> as the callback to add to the
-<code>Deferred</code> returned by <code>deferLater</code>. Since it expects the
-request object as an argument, we're going to set up the <code>deferLater</code>
-call to return a <code>Deferred</code> which has the request object as its
-result.</p>
+<p>Next we need to define the render method. Here's where things
+change a bit. Instead of using <code class="API"
+base="twisted.internet.interfaces.IReactorTime">callLater</code>,
+We're going to use <code class="API"
+base="twisted.internet.task">deferLater</code> this
+time. <code>deferLater</code> accepts a reactor, delay (in seconds, as
+with <code>callLater</code>), and a function to call after the delay
+to produce that elusive object discussed in the description
+of <code>Deferred</code>s. We're also going to
+use <code>_delayedRender</code> as the callback to add to
+the <code>Deferred</code> returned by <code>deferLater</code>. Since
+it expects the request object as an argument, we're going to set up
+the <code>deferLater</code> call to return a <code>Deferred</code>
+which has the request object as its result.</p>
 
 <pre class="python">
 def render_GET(self, request):
     d = deferLater(reactor, 5, lambda: request)
 </pre>
 
-<p>The <code>Deferred</code> referenced by <code>d</code> now needs to have the
-<code>_delayedRender</code> callback added to it. Once this is done,
-<code>_delayedRender</code> will be called with the result of <code>d</code>
-(which will be <code>request</code>, of course — the result of <code>(lambda:
-request)()</code>).</p>
+<p>The <code>Deferred</code> referenced by <code>d</code> now needs to
+have the <code>_delayedRender</code> callback added to it. Once this
+is done, <code>_delayedRender</code> will be called with the result
+of <code>d</code> (which will be <code>request</code>, of course — the
+result of <code>(lambda: request)()</code>).</p>
 
 <pre class="python">
 d.addCallback(self._delayedRender)
@@ -111,13 +117,14 @@ example.</p>
 return NOT_DONE_YET
 </pre>
 
-<p>And with that, <code>DelayedResource</code> is now implemented based on a
-<code>Deferred</code>. The example still isn't very realistic, but remember that
-since <code>Deferred</code>s offer a uniform interface to many different
-asynchronous event sources, this code now resembles a real application even more
-closely; you could easily replace <code>deferLater</code> with another
-<code>Deferred</code>-returning API and suddenly you might have a resource that
-does something useful.</p>
+<p>And with that, <code>DelayedResource</code> is now implemented
+based on a <code>Deferred</code>. The example still isn't very
+realistic, but remember that since <code>Deferred</code>s offer a
+uniform interface to many different asynchronous event sources, this
+code now resembles a real application even more closely; you could
+easily replace <code>deferLater</code> with
+another <code>Deferred</code>-returning API and suddenly you might
+have a resource that does something useful.</p>
 
 <p>Finally, here's the complete, uninterrupted example source, as an rpy script:</p>
 
diff --git a/doc/web/howto/web-in-60/asynchronous.xhtml b/doc/web/howto/web-in-60/asynchronous.xhtml
index 1b9b39f..d35e043 100644
--- a/doc/web/howto/web-in-60/asynchronous.xhtml
+++ b/doc/web/howto/web-in-60/asynchronous.xhtml
@@ -22,16 +22,18 @@ class, <code class="API" base="twisted.web.resource">Resource</code>, is used
 either way; the same render methods are used. There are three basic differences,
 though.</p>
 
-<p>First, instead of returning the string which will be used as the body of the
-response, the resource uses <code class="API"
-base="twisted.web.http">Request.write</code>. This method can be called
-repeatedly. Each call appends another string to the response body. Second, when
-the entire response body has been passed to <code>Request.write</code>, the
-application must call <code class="API"
-base="twisted.web.http">Request.finish</code>. As you might expect from the
-name, this ends the response. Finally, in order to make Twisted Web not end the
-response as soon as the render method returns, the render method must return
-<code>NOT_DONE_YET</code>. Consider this example:</p>
+<p>First, instead of returning the string which will be used as the
+body of the response, the resource uses <code class="API"
+base="twisted.web.http">Request.write</code>. This method can be
+called repeatedly. Each call appends another string to the response
+body. Second, when the entire response body has been passed
+to <code>Request.write</code>, the application must
+call <code class="API"
+base="twisted.web.http">Request.finish</code>. As you might expect
+from the name, this ends the response. Finally, in order to make
+Twisted Web not end the response as soon as the render method returns,
+the render method must return <code>NOT_DONE_YET</code>. Consider this
+example:</p>
 
 <pre class="python">
 from twisted.web.resource import Resource
@@ -48,19 +50,21 @@ class DelayedResource(Resource):
         return NOT_DONE_YET
 </pre>
 
-<p>If you're not familiar with reactor.<code class="API"
-base="twisted.internet.interfaces.IReactorTime">callLater</code>, all you really
-need to know about it to understand this example is that the above usage of it
-arranges to have <code>self._delayedRender(request)</code> run about 5 seconds
-after <code>callLater</code> is invoked from this render method and that it
-returns immediately.</p>
-
-<p>All three of the elements mentioned earlier can be seen in this example. The
-resource uses <code>Request.write</code> to set the response body. It uses
-<code>Request.finish</code> after the entire body has been specified (all with
-just one call to write in this case). Lastly, it returns
-<code>NOT_DONE_YET</code> from its render method. So there you have it,
-asynchronous rendering with Twisted Web.</p>
+<p>If you're not familiar with the reactor <code class="API"
+base="twisted.internet.interfaces.IReactorTime">callLater</code>
+method, all you really need to know about it to understand this
+example is that the above usage of it arranges to
+have <code>self._delayedRender(request)</code> run about 5 seconds
+after <code>callLater</code> is invoked from this render method and
+that it returns immediately.</p>
+
+<p>All three of the elements mentioned earlier can be seen in this
+example. The resource uses <code>Request.write</code> to set the
+response body. It uses <code>Request.finish</code> after the entire
+body has been specified (all with just one call to write in this
+case). Lastly, it returns <code>NOT_DONE_YET</code> from its render
+method. So there you have it, asynchronous rendering with Twisted
+Web.</p>
 
 <p>Here's a complete rpy script based on this resource class (see the <a
 href="rpy-scripts.xhtml">previous example</a> if you need a reminder about rpy
@@ -83,11 +87,12 @@ class DelayedResource(Resource):
 resource = DelayedResource()
 </pre>
 
-<p>Drop this source into a <code>.rpy</code> file and fire up a server using
-<code>twistd -n web --path /directory/containing/script/.</code> You'll see that
-loading the page takes 5 seconds. If you try to load a second before the first
-completes, it will also take 5 seconds from the time you request it (but it
-won't be delayed by any other outstanding requests).</p>
+<p>Drop this source into a <code>.rpy</code> file and fire up a server
+using <code>twistd -n web --path /directory/containing/script/.</code>
+You'll see that loading the page takes 5 seconds. If you try to load a
+second before the first completes, it will also take 5 seconds from
+the time you request it (but it won't be delayed by any other
+outstanding requests).</p>
 
 <p>Something else to consider when generating responses asynchronously is that
 the client may not wait around to get the response to its
diff --git a/doc/web/howto/web-in-60/custom-codes.xhtml b/doc/web/howto/web-in-60/custom-codes.xhtml
index 8f5ddfd..ab61a42 100644
--- a/doc/web/howto/web-in-60/custom-codes.xhtml
+++ b/doc/web/howto/web-in-60/custom-codes.xhtml
@@ -47,10 +47,10 @@ class PaymentRequired(Resource):
         return "&lt;html&gt;&lt;body&gt;Please swipe your credit card.&lt;/body&gt;&lt;/html&gt;"
 </pre>
 
-<p>Just like the other resources I've demonstrated, this one returns a string
-from its <code>render_GET</code> method to define the body of the response. All
-that's different is the call to
-<code>setResponseCode</code> to override the default response code,
+<p>Just like the other resources I've demonstrated, this one returns a
+string from its <code>render_GET</code> method to define the body of
+the response. All that's different is the call
+to <code>setResponseCode</code> to override the default response code,
 200, with a different one.</p>
 
 <p>Finally, the code to set up the site and reactor. We'll put an instance of
diff --git a/doc/web/howto/web-in-60/dynamic-content.xhtml b/doc/web/howto/web-in-60/dynamic-content.xhtml
index 888ddc2..e64d238 100644
--- a/doc/web/howto/web-in-60/dynamic-content.xhtml
+++ b/doc/web/howto/web-in-60/dynamic-content.xhtml
@@ -26,10 +26,10 @@ from twisted.web.server import Site
 protocol implementation. The reactor is the main loop that drives any Twisted
 application; we'll use it to actually create the listening port in a moment.</p>
 
-<p>Next, we'll import one more thing from Twisted Web: <code class="API"
-base="twisted.web.resource">Resource</code>. An instance of
-<code>Resource</code> (or a subclass) represents a page (technically, the entity
-addressed by a URI).</p>
+<p>Next, we'll import one more thing from Twisted
+Web: <code class="API" base="twisted.web.resource">Resource</code>. An
+instance of <code>Resource</code> (or a subclass) represents a page
+(technically, the entity addressed by a URI).</p>
 
 <pre class="python">
 from twisted.web.resource import Resource
@@ -42,9 +42,10 @@ time module:</p>
 import time
 </pre>
 
-<p>With imports taken care of, the next step is to define a
-<code>Resource</code> subclass which has the dynamic rendering behavior we
-want. Here's a resource which generates a page giving the time:</p>
+<p>With imports taken care of, the next step is to define
+a <code>Resource</code> subclass which has the dynamic rendering
+behavior we want. Here's a resource which generates a page giving the
+time:</p>
 
 <pre class="python">
 class ClockPage(Resource):
@@ -53,8 +54,9 @@ class ClockPage(Resource):
         return "&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;" % (time.ctime(),)
 </pre>
 
-<p>Setting <code>isLeaf</code> to <code>True</code> indicates that
-<code>ClockPage</code> resources will never have any children.</p>
+<p>Setting <code>isLeaf</code> to <code>True</code> indicates
+that <code>ClockPage</code> resources will never have any
+children.</p>
 
 <p>The <code>render_GET</code> method here will be called whenever the URI we
 hook this resource up to is requested with the <code>GET</code> method. The byte
@@ -67,11 +69,11 @@ resource = ClockPage()
 factory = Site(resource)
 </pre>
 
-<p>Just as with the previous static content example, this configuration puts our
-resource at the very top of the URI hierarchy, ie at <code>/</code>. With that
-<code>Site</code> instance, we can tell the reactor to <a
-href="../../../core/howto/servers.xhtml">create a TCP server</a> and start
-servicing requests:</p>
+<p>Just as with the previous static content example, this
+configuration puts our resource at the very top of the URI hierarchy,
+ie at <code>/</code>. With that <code>Site</code> instance, we can
+tell the reactor to <a href="../../../core/howto/servers.xhtml">create
+a TCP server</a> and start servicing requests:</p>
 
 <pre class="python">
 reactor.listenTCP(8880, factory)
diff --git a/doc/web/howto/web-in-60/dynamic-dispatch.xhtml b/doc/web/howto/web-in-60/dynamic-dispatch.xhtml
index 8e4ab16..3faa3ac 100644
--- a/doc/web/howto/web-in-60/dynamic-dispatch.xhtml
+++ b/doc/web/howto/web-in-60/dynamic-dispatch.xhtml
@@ -30,11 +30,12 @@ from twisted.web.resource import Resource
 from twisted.internet import reactor
 </pre>
 
-<p>With that out of the way, here's the interesting part of this example. We're
-going to define a resource which renders a whole-year calendar. The year it will
-render the calendar for will be the year in the request URL. So, for example,
-<code>/2009</code> will render a calendar for 2009. First, here's a resource
-that renders a calendar for the year passed to its initializer:</p>
+<p>With that out of the way, here's the interesting part of this
+example. We're going to define a resource which renders a whole-year
+calendar. The year it will render the calendar for will be the year in
+the request URL. So, for example, <code>/2009</code> will render a
+calendar for 2009. First, here's a resource that renders a calendar
+for the year passed to its initializer:</p>
 
 <pre class="python">
 from calendar import calendar
diff --git a/doc/web/howto/web-in-60/error-handling.xhtml b/doc/web/howto/web-in-60/error-handling.xhtml
index 141396c..71d0ddc 100644
--- a/doc/web/howto/web-in-60/error-handling.xhtml
+++ b/doc/web/howto/web-in-60/error-handling.xhtml
@@ -50,10 +50,10 @@ class Calendar(Resource):
             return YearPage(year)
 </pre>
 
-<p>Aside from including the definition of <code>YearPage</code> from the
-previous example, the only other thing left to do is the normal
-<code>Site</code> and <code>reactor</code> setup. Here's the complete code for
-this example:</p>
+<p>Aside from including the definition of <code>YearPage</code> from
+the previous example, the only other thing left to do is the
+normal <code>Site</code> and <code>reactor</code> setup. Here's the
+complete code for this example:</p>
 
 <pre class="python">
 from twisted.web.server import Site
diff --git a/doc/web/howto/web-in-60/handling-posts.xhtml b/doc/web/howto/web-in-60/handling-posts.xhtml
index 70ac268..7d8efd8 100644
--- a/doc/web/howto/web-in-60/handling-posts.xhtml
+++ b/doc/web/howto/web-in-60/handling-posts.xhtml
@@ -56,16 +56,18 @@ def render_POST(self, request):
     return '&lt;html&gt;&lt;body&gt;You submitted: %s&lt;/body&gt;&lt;/html&gt;' % (cgi.escape(request.args["the-field"][0]),)
 </pre>
 
-<p>The main thing to note here is the use of <code>request.args</code>. This is
-a dictionary-like object that provides access to the contents of the form. The
-keys in this dictionary are the names of inputs in the form. Each value is a
-list containing strings (since there can be multiple inputs with the same name),
-which is why we had to extract the first element to pass to
-<code>cgi.escape</code>. <code>request.args</code> will be populated from form
-contents whenever a <code>POST</code> request is made with a content type of
-<code>application/x-www-form-urlencoded</code> or
-<code>multipart/form-data</code> (it's also populated by query arguments for any
-type of request).</p>
+<p>The main thing to note here is the use
+of <code>request.args</code>. This is a dictionary-like object that
+provides access to the contents of the form. The keys in this
+dictionary are the names of inputs in the form. Each value is a list
+containing strings (since there can be multiple inputs with the same
+name), which is why we had to extract the first element to pass
+to <code>cgi.escape</code>. <code>request.args</code> will be
+populated from form contents whenever a <code>POST</code> request is
+made with a content type
+of <code>application/x-www-form-urlencoded</code>
+or <code>multipart/form-data</code> (it's also populated by query
+arguments for any type of request).</p>
 
 <p>Finally, the example just needs the usual site creation and port setup:</p>
 
diff --git a/doc/web/howto/web-in-60/http-auth.xhtml b/doc/web/howto/web-in-60/http-auth.xhtml
index 36f3921..5302afe 100644
--- a/doc/web/howto/web-in-60/http-auth.xhtml
+++ b/doc/web/howto/web-in-60/http-auth.xhtml
@@ -16,18 +16,20 @@ Twisted Web's basic or digest HTTP authentication to control access to these
 resources.</p>
 
 <p><code class="API" base="twisted.web">guard</code>, the Twisted Web
-module which provides most of the APIs that will be used in this example, helps
-you to
+module which provides most of the APIs that will be used in this
+example, helps you to
 add <a href="http://en.wikipedia.org/wiki/Authentication">authentication</a>
-and <a href="http://en.wikipedia.org/wiki/Authorization">authorization</a> to a
-resource hierarchy. It does this by providing a resource which implements
-<code class="API" base="twisted.web.resource.Resource">getChild</code> to return
-a <a href="dynamic-dispatch.xhtml">dynamically selected resource</a>. The
-selection is based on the authentication headers in the request. If those
-headers indicate that the request is made on behalf of Alice, then Alice's
-resource will be returned. If they indicate that it was made on behalf of Bob,
-his will be returned. If the headers contain invalid credentials, an error
-resource is returned. Whatever happens, once this resource is returned, URL
+and <a href="http://en.wikipedia.org/wiki/Authorization">authorization</a>
+to a resource hierarchy. It does this by providing a resource which
+implements <code class="API"
+base="twisted.web.resource.Resource">getChild</code> to return
+a <a href="dynamic-dispatch.xhtml">dynamically selected
+resource</a>. The selection is based on the authentication headers in
+the request. If those headers indicate that the request is made on
+behalf of Alice, then Alice's resource will be returned. If they
+indicate that it was made on behalf of Bob, his will be returned. If
+the headers contain invalid credentials, an error resource is
+returned. Whatever happens, once this resource is returned, URL
 traversal continues as normal from that resource.</p>
 
 <p>The resource that implements this is <code class="API"
@@ -44,16 +46,19 @@ Cred in much depth here. To make use of it with Twisted Web, the only thing you
 really need to know is how to implement an <code class="API"
 base="twisted.cred.portal">IRealm</code>.</p>
 
-<p>You need to implement a realm because the realm is the object that actually
-decides which resources are used for which users. This can be as complex or as
-simple as it suitable for your application. For this example we'll keep it very
-simple: each user will have a resource which is a static file listing of the
-<code>public_html</code> directory in their UNIX home directory. First, we need
-to import <code>implements</code> from <code>zope.interface</code> and
-<code>IRealm</code> from <code>twisted.cred.portal</code>. Together these will
-let me mark this class as a realm (this is mostly - but not entirely - a
+<p>You need to implement a realm because the realm is the object that
+actually decides which resources are used for which users. This can be
+as complex or as simple as it suitable for your application. For this
+example we'll keep it very simple: each user will have a resource
+which is a static file listing of the <code>public_html</code>
+directory in their UNIX home directory. First, we need to
+import <code>implements</code> from <code>zope.interface</code>
+and <code>IRealm</code>
+from <code>twisted.cred.portal</code>. Together these will let me mark
+this class as a realm (this is mostly - but not entirely - a
 documentation thing). We'll also need <code class="API"
-base="twisted.web.static">File</code> for the actual implementation later.</p>
+base="twisted.web.static">File</code> for the actual implementation
+later.</p>
 
 <pre class="python">
 from zope.interface import implements
@@ -105,10 +110,10 @@ def requestAvatar(self, avatarId, mind, *interfaces):
     exists. However, that's an example for another day...</li>
 </ul>
 
-<p>We're almost ready to set up the resource for this example. To create an
-<code>HTTPAuthSessionWrapper</code>, though, we need two things. First, a
-portal, which requires the realm above, plus at least one credentials
-checker:</p>
+<p>We're almost ready to set up the resource for this example. To
+create an <code>HTTPAuthSessionWrapper</code>, though, we need two
+things. First, a portal, which requires the realm above, plus at least
+one credentials checker:</p>
 
 <pre class="python">
 from twisted.cred.portal import Portal
@@ -124,9 +129,10 @@ work after <code>HTTPAuthSessionWrapper</code> extracts the credentials from the
 request.</p>
 
 <p>Next we need either <code class="API"
-base="twisted.web.guard">BasicCredentialFactory</code> or
-<code class="API" base="twisted.web.guard">DigestCredentialFactory</code>. The
-former knows how to challenge HTTP clients to do basic authentication; the
+base="twisted.web.guard">BasicCredentialFactory</code>
+or <code class="API"
+base="twisted.web.guard">DigestCredentialFactory</code>. The former
+knows how to challenge HTTP clients to do basic authentication; the
 latter, digest authentication. We'll use digest here:</p>
 
 <pre class="python">
@@ -135,12 +141,13 @@ from twisted.web.guard import DigestCredentialFactory
 credentialFactory = DigestCredentialFactory("md5", "example.org")
 </pre>
 
-<p>The two parameters to this constructor are the hash algorithm and the HTTP
-authentication realm which will be used. The only other valid hash algorithm is
-"sha" (but be careful, MD5 is more widely supported than SHA). The HTTP
-authentication realm is mostly just a string that is presented to the user to
-let them know why they're authenticating (you can read more about this in the
-<a href="http://tools.ietf.org/html/rfc2617">RFC</a>).</p>
+<p>The two parameters to this constructor are the hash algorithm and
+the HTTP authentication realm which will be used. The only other valid
+hash algorithm is "sha" (but be careful, MD5 is more widely supported
+than SHA). The HTTP authentication realm is mostly just a string that
+is presented to the user to let them know why they're authenticating
+(you can read more about this in
+the <a href="http://tools.ietf.org/html/rfc2617">RFC</a>).</p>
 
 <p>With those things created, we can finally
 instantiate <code>HTTPAuthSessionWrapper</code>:</p>
@@ -152,15 +159,15 @@ resource = HTTPAuthSessionWrapper(portal, [credentialFactory])
 </pre>
 
 <p>There's just one last thing that needs to be done
-here. When <a href="rpy-scripts.xhtml">rpy scripts</a> were introduced, it was
-mentioned that they are evaluated in an unusual context. This is the first
-example that actually needs to take this into account. It so happens that
-<code>DigestCredentialFactory</code> instances are stateful. Authentication will
-only succeed if the same instance is used to both generate challenges and
-examine the responses to those challenges. However, the normal mode of operation
-for an rpy script is for it to be re-executed for every request. This leads to a
-new
-<code>DigestCredentialFactory</code> being created for every request, preventing
+here. When <a href="rpy-scripts.xhtml">rpy scripts</a> were
+introduced, it was mentioned that they are evaluated in an unusual
+context. This is the first example that actually needs to take this
+into account. It so happens that <code>DigestCredentialFactory</code>
+instances are stateful. Authentication will only succeed if the same
+instance is used to both generate challenges and examine the responses
+to those challenges. However, the normal mode of operation for an rpy
+script is for it to be re-executed for every request. This leads to a
+new <code>DigestCredentialFactory</code> being created for every request, preventing
 any authentication attempt from ever succeeding.</p>
 
 <p>There are two ways to deal with this. First, and the better of the two ways,
diff --git a/doc/web/howto/web-in-60/index.xhtml b/doc/web/howto/web-in-60/index.xhtml
index 93dc1ae..1874cf8 100644
--- a/doc/web/howto/web-in-60/index.xhtml
+++ b/doc/web/howto/web-in-60/index.xhtml
@@ -9,10 +9,10 @@
 
 <h1>Twisted.Web In 60 Seconds</h1>
 
-<p>This set of examples contains short, complete applications of
-<code class="API">twisted.web</code>. For subjects not covered here, see
-the <a href="../using-twistedweb.xhtml">Twisted Web tutorial</a> and the API
-documentation.</p>
+<p>This set of examples contains short, complete applications
+of <code class="API">twisted.web</code>. For subjects not covered
+here, see the <a href="../using-twistedweb.xhtml">Twisted Web
+tutorial</a> and the API documentation.</p>
 
 <ol>
 <li><a href="static-content.xhtml">Serving static content from a directory</a></li>
diff --git a/doc/web/howto/web-in-60/interrupted.xhtml b/doc/web/howto/web-in-60/interrupted.xhtml
index 0babe80..3d36790 100644
--- a/doc/web/howto/web-in-60/interrupted.xhtml
+++ b/doc/web/howto/web-in-60/interrupted.xhtml
@@ -45,21 +45,21 @@ a resource class with the same <code>_delayedRender</code> used previously:</p>
          request.finish()
 </pre>
 
-<p>Before defining the render method, we're going to define an errback (an
-errback being a callback that gets called when there's an error), though. This
-will be the errback attached to the <code>Deferred</code> returned by
-<code>Request.notifyFinish</code>. It will cancel the delayed call to
-<code>_delayedRender</code>.</p>
+<p>Before defining the render method, we're going to define an errback
+(an errback being a callback that gets called when there's an error),
+though. This will be the errback attached to the <code>Deferred</code>
+returned by <code>Request.notifyFinish</code>. It will cancel the
+delayed call to <code>_delayedRender</code>.</p>
 
 <pre class="python">
 def _responseFailed(self, err, call):
     call.cancel()
 </pre>
 
-<p>Finally, the render method will set up the delayed call just as it did
-before, and return <code>NOT_DONE_YET</code> likewise. However, it will also use
-<code>Request.notifyFinish</code> to make sure <code>_responseFailed</code> is
-called if appropriate.</p>
+<p>Finally, the render method will set up the delayed call just as it
+did before, and return <code>NOT_DONE_YET</code> likewise. However, it
+will also use <code>Request.notifyFinish</code> to make
+sure <code>_responseFailed</code> is called if appropriate.</p>
 
 <pre class="python">
 def render_GET(self, request):
@@ -68,14 +68,15 @@ def render_GET(self, request):
     return NOT_DONE_YET
 </pre>
 
-<p>Notice that since <code>_responseFailed</code> needs a reference to the
-delayed call object in order to cancel it, we passed that object to
-<code>addErrback</code>. Any additional arguments passed to
-<code>addErrback</code> (or <code>addCallback</code>) will be passed along to
-the errback after the <code class="API"
-base="twisted.python.failure">Failure</code> instance which is always passed as
-the first argument. Passing <code>call</code> here means it will be passed to
-<code>_responseFailed</code>, where it is expected and required.</p>
+<p>Notice that since <code>_responseFailed</code> needs a reference to
+the delayed call object in order to cancel it, we passed that object
+to <code>addErrback</code>. Any additional arguments passed
+to <code>addErrback</code> (or <code>addCallback</code>) will be
+passed along to the errback after the <code class="API"
+base="twisted.python.failure">Failure</code> instance which is always
+passed as the first argument. Passing <code>call</code> here means it
+will be passed to <code>_responseFailed</code>, where it is expected
+and required.</p>
 
 <p>That covers almost all the code for this example. Here's the entire example
 without interruptions, as an <a href="rpy-scripts.xhtml">rpy script</a>:</p>
diff --git a/doc/web/howto/web-in-60/logging-errors.xhtml b/doc/web/howto/web-in-60/logging-errors.xhtml
index cd36927..5897080 100644
--- a/doc/web/howto/web-in-60/logging-errors.xhtml
+++ b/doc/web/howto/web-in-60/logging-errors.xhtml
@@ -15,12 +15,13 @@ dealt with response errors by aborting response generation, potentially avoiding
 pointless work. However, it did this silently for any error. In this example,
 we'll modify the previous example so that it logs each failed response.</p>
 
-<p>This example will use the Twisted API for logging errors. As was mentioned in
-the <a href="asynchronous-deferred.xhtml">first example covering Deferreds</a>,
-errbacks are passed an error. In the previous example, the
-<code>_responseFailed</code> errback accepted this error as a parameter but
-ignored it. The only way this example will differ is that this
-<code>_responseFailed</code> will use that error parameter to log a message.</p>
+<p>This example will use the Twisted API for logging errors. As was
+mentioned in the <a href="asynchronous-deferred.xhtml">first example
+covering Deferreds</a>, errbacks are passed an error. In the previous
+example, the <code>_responseFailed</code> errback accepted this error
+as a parameter but ignored it. The only way this example will differ
+is that this <code>_responseFailed</code> will use that error
+parameter to log a message.</p>
 
 <p>This example will require all of the imports required by the previous example
 plus one new import:</p>
@@ -29,9 +30,9 @@ plus one new import:</p>
 from twisted.python.log import err
 </pre>
 
-<p>The only other part of the previous example which changes is the
-<code>_responseFailed</code> callback, which will now log the error passed to
-it:</p>
+<p>The only other part of the previous example which changes is
+the <code>_responseFailed</code> callback, which will now log the
+error passed to it:</p>
 
 <pre class="python">
 def _responseFailed(self, failure, call):
diff --git a/doc/web/howto/web-in-60/rpy-scripts.xhtml b/doc/web/howto/web-in-60/rpy-scripts.xhtml
index 4c1c2b6..cb8114c 100644
--- a/doc/web/howto/web-in-60/rpy-scripts.xhtml
+++ b/doc/web/howto/web-in-60/rpy-scripts.xhtml
@@ -21,12 +21,13 @@ write code to create the site or set up a listening port with the reactor. That
 means fewer lines of code that aren't dedicated to the task you're trying to
 accomplish.</p>
 
-<p>There are some disadvantages, though. An rpy script must have the extension
-<code>.rpy</code>. This means you can't import it using the usual Python import
-statement. This means it's hard to re-use code in an rpy script. This also means
-you can't easily unit test it. The code in an rpy script is evaluated in an
-unusual context. So, while rpy scripts may be useful for testing out ideas,
-they're not recommend for much more than that.</p>
+<p>There are some disadvantages, though. An rpy script must have the
+extension <code>.rpy</code>. This means you can't import it using the
+usual Python import statement. This means it's hard to re-use code in
+an rpy script. This also means you can't easily unit test it. The code
+in an rpy script is evaluated in an unusual context. So, while rpy
+scripts may be useful for testing out ideas, they're not recommend for
+much more than that.</p>
 
 <p>Okay, with that warning out of the way, let's dive in. First, as mentioned,
 rpy scripts are Python source files with the <code>.rpy</code> extension. So,
@@ -47,13 +48,14 @@ resource = ClockPage()
 </pre>
 
 <p>You may recognize this as the resource from
-the <a href="dynamic-content.xhtml">first dynamic rendering example</a>. What's
-different is what you don't see: we didn't import <code>reactor</code> or
-<code>Site</code>. There are no calls to <code>listenTCP</code> or
-<code>run</code>. Instead, and this is the core idea for rpy scripts, we just
-bound the name <code>resource</code> to the resource we want the script to
-serve. Every rpy script must bind this name, and this name is the only thing
-Twisted Web will pay attention to in an rpy script.</p>
+the <a href="dynamic-content.xhtml">first dynamic rendering
+example</a>. What's different is what you don't see: we didn't
+import <code>reactor</code> or <code>Site</code>. There are no calls
+to <code>listenTCP</code> or <code>run</code>. Instead, and this is
+the core idea for rpy scripts, we just bound the
+name <code>resource</code> to the resource we want the script to
+serve. Every rpy script must bind this name, and this name is the only
+thing Twisted Web will pay attention to in an rpy script.</p>
 
 <p>All that's left is to drop this rpy script into a Twisted Web server. There
 are a few ways to do this. The simplest way is with <code>twistd</code>:</p>
diff --git a/doc/web/howto/web-in-60/session-basics.xhtml b/doc/web/howto/web-in-60/session-basics.xhtml
index a6b8e84..8b72a58 100644
--- a/doc/web/howto/web-in-60/session-basics.xhtml
+++ b/doc/web/howto/web-in-60/session-basics.xhtml
@@ -16,16 +16,17 @@ different aspects. This first example demonstrates the very basics of the
 Twisted Web session API: how to get the session object for the current request
 and how to prematurely expire a session.</p>
 
-<p>Before diving into the APIs, let's look at the big picture of sessions in
-Twisted Web. Sessions are represented by instances of <code class="API"
+<p>Before diving into the APIs, let's look at the big picture of
+sessions in Twisted Web. Sessions are represented by instances
+of <code class="API"
 base="twisted.web.server">Session</code>. The <code class="API"
-base="twisted.web.server">Site</code> creates a new instance of
-<code>Session</code> the first time an application asks for it for a particular
-session. <code>Session</code> instances are kept on the <code>Site</code>
-instance until they expire (due to inactivity or because they are explicitly
-expired). Each time after the first that a particular session's
-<code>Session</code> object is requested, it is retrieved from
-the <code>Site</code>.</p>
+base="twisted.web.server">Site</code> creates a new instance
+of <code>Session</code> the first time an application asks for it for
+a particular session. <code>Session</code> instances are kept on
+the <code>Site</code> instance until they expire (due to inactivity or
+because they are explicitly expired). Each time after the first that a
+particular session's <code>Session</code> object is requested, it is
+retrieved from the <code>Site</code>.</p>
 
 <p>With the conceptual underpinnings of the upcoming API in place, here comes
 the example. This will be a very simple <a href="rpy-scripts.xhtml">rpy
@@ -63,9 +64,9 @@ class ExpireSession(Resource):
         return 'Your session has been expired.'
 </pre>
 
-<p>Finally, to make the example an rpy script, we'll make an instance of
-<code>ShowSession</code> and give it an instance of <code>ExpireSession</code>
-as a child using <code class="API"
+<p>Finally, to make the example an rpy script, we'll make an instance
+of <code>ShowSession</code> and give it an instance
+of <code>ExpireSession</code> as a child using <code class="API"
 base="twisted.web.resource">Resource.putChild</code>:</p>
 
 <pre class="python">
diff --git a/doc/web/howto/web-in-60/session-endings.xhtml b/doc/web/howto/web-in-60/session-endings.xhtml
index 33852c8..44b4d96 100644
--- a/doc/web/howto/web-in-60/session-endings.xhtml
+++ b/doc/web/howto/web-in-60/session-endings.xhtml
@@ -31,10 +31,11 @@ class ShortSession(Session):
     sessionTimeout = 60
 </pre>
 
-<p>To have Twisted Web actually make use of this session class, rather than the
-default, it is also necessary to override the <code>sessionFactory</code> attribute of
-<code class="API" base="twisted.web.server">Site</code>. We could do this with
-another subclass, but we could also do it to just one instance
+<p>To have Twisted Web actually make use of this session class, rather
+than the default, it is also necessary to override
+the <code>sessionFactory</code> attribute of <code class="API"
+base="twisted.web.server">Site</code>. We could do this with another
+subclass, but we could also do it to just one instance
 of <code>Site</code>:</p>
 
 <pre class="python">
@@ -47,11 +48,12 @@ factory.sessionFactory = ShortSession
 <p>Sessions given out for requests served by this <code>Site</code> will
 use <code>ShortSession</code> and only last one minute without activity.</p>
 
-<p>You can have arbitrary functions run when sessions expire, too. This can be
-useful for cleaning up external resources associated with the session, tracking
-usage statistics, and more. This functionality is provided via
-<code class="API" base="twisted.web.server">Session.notifyOnExpire</code>. It
-accepts a single argument: a function to call when the session expires. Here's a
+<p>You can have arbitrary functions run when sessions expire,
+too. This can be useful for cleaning up external resources associated
+with the session, tracking usage statistics, and more. This
+functionality is provided via <code class="API"
+base="twisted.web.server">Session.notifyOnExpire</code>. It accepts a
+single argument: a function to call when the session expires. Here's a
 trivial example which prints a message whenever a session expires:</p>
 
 <pre class="python">
diff --git a/doc/web/howto/web-in-60/session-store.xhtml b/doc/web/howto/web-in-60/session-store.xhtml
index a07c7ff..d961e4f 100644
--- a/doc/web/howto/web-in-60/session-store.xhtml
+++ b/doc/web/howto/web-in-60/session-store.xhtml
@@ -49,9 +49,9 @@ True
 
 <p><i>What?</i>, I hear you say.</p>
 
-<p>What's shown in this example is the interface and adaption-based API which
-<code>Session</code> exposes for persisting state. There are several critical
-pieces interacting here:</p>
+<p>What's shown in this example is the interface and adaption-based
+API which <code>Session</code> exposes for persisting state. There are
+several critical pieces interacting here:</p>
 
 <ul>
   <li><code>ICounter</code> is an interface which serves several purposes. Like
@@ -69,7 +69,7 @@ pieces interacting here:</p>
     relationship between its three arguments so that adaption will do what we
     want in this case.</li>
   <li>Adaption is performed by the expression <code>ICounter(ses)</code>. This
-    is read as <i>adapt <code>ses</code> to <code>ICounter</code></i>. Because
+    is read as : adapt <code>ses</code> to <code>ICounter</code>. Because
     of the <code>registerAdapter</code> call, it is roughly equivalent
     to <code>Counter(ses)</code>. However (because of certain
     things <code>Session</code> does), it also saves the <code>Counter</code>
@@ -134,14 +134,15 @@ class CounterResource(Resource):
 resource = CounterResource()
 </pre>
 
-<p>One more thing to note is the <code>cache()</code> call at the top of this
-example. As with the <a href="http-auth.xhtml">previous example</a> where this
-came up, this rpy script is stateful. This time, it's the <code>ICounter</code>
-definition and the
-<code>registerAdapter</code> call that need to be executed only once. If we
-didn't use <code>cache</code>, every request would define a new, different
-interface named <code>ICounter</code>. Each of these would be a different key in
-the session, so the counter would never get past one.</p>
+<p>One more thing to note is the <code>cache()</code> call at the top
+of this example. As with the <a href="http-auth.xhtml">previous
+example</a> where this came up, this rpy script is stateful. This
+time, it's the <code>ICounter</code> definition and
+the <code>registerAdapter</code> call that need to be executed only
+once. If we didn't use <code>cache</code>, every request would define
+a new, different interface named <code>ICounter</code>. Each of these
+would be a different key in the session, so the counter would never
+get past one.</p>
 
 </body>
 </html>
diff --git a/doc/web/howto/web-in-60/static-dispatch.xhtml b/doc/web/howto/web-in-60/static-dispatch.xhtml
index b1d8e3d..9cf3db5 100644
--- a/doc/web/howto/web-in-60/static-dispatch.xhtml
+++ b/doc/web/howto/web-in-60/static-dispatch.xhtml
@@ -51,9 +51,9 @@ hierarchy: all URLs are children of this resource.</p>
 root = Resource()
 </pre>
 
-<p>Here comes the interesting part of this example. We're now going to create
-three more resources and attach them to the three URLs <code>/foo</code>,
-<code>/bar</code>, and <code>/baz</code>:</p>
+<p>Here comes the interesting part of this example. We're now going to
+create three more resources and attach them to the three
+URLs <code>/foo</code>, <code>/bar</code>, and <code>/baz</code>:</p>
 
 <pre class="python">
 root.putChild("foo", File("/tmp"))
@@ -70,11 +70,12 @@ reactor.listenTCP(8880, factory)
 reactor.run()
 </pre>
 
-<p>With this server running, <code>http://localhost:8880/foo</code> will serve a
-listing of files from <code>/tmp</code>, <code>http://localhost:8880/bar</code>
-will serve a listing of files from <code>/lost+found</code>, and
-<code>http://localhost:8880/baz</code> will serve a listing of files from
-<code>/opt</code>.</p>
+<p>With this server running, <code>http://localhost:8880/foo</code>
+will serve a listing of files
+from <code>/tmp</code>, <code>http://localhost:8880/bar</code> will
+serve a listing of files from <code>/lost+found</code>,
+and <code>http://localhost:8880/baz</code> will serve a listing of
+files from <code>/opt</code>.</p>
 
 <p>Here's the whole example uninterrupted:</p>
 
diff --git a/doc/web/howto/web-in-60/wsgi.xhtml b/doc/web/howto/web-in-60/wsgi.xhtml
index ddc0735..22ff8c1 100644
--- a/doc/web/howto/web-in-60/wsgi.xhtml
+++ b/doc/web/howto/web-in-60/wsgi.xhtml
@@ -10,11 +10,12 @@
 <body>
 <h1>WSGI</h1>
 
-<p>The goal of this example is to show you how to use <code class="API"
-base="twisted.web.wsgi">WSGIResource</code>, another existing
-<code class="API" base="twisted.web.resource">Resource</code> subclass, to serve
-<a href="http://www.python.org/dev/peps/pep-0333/">WSGI applications</a> in a
-Twisted Web server.</p>
+<p>The goal of this example is to show you how to
+use <code class="API" base="twisted.web.wsgi">WSGIResource</code>,
+another existing <code class="API"
+base="twisted.web.resource">Resource</code> subclass, to
+serve <a href="http://www.python.org/dev/peps/pep-0333/">WSGI
+applications</a> in a Twisted Web server.</p>
 
 <p>Note thate <code>WSGIResource</code> is a multithreaded WSGI container. Like
 any other WSGI container, you can't do anything asynchronous in your WSGI
@@ -53,16 +54,17 @@ another <a href="rpy-scripts.xhtml">rpy script</a> example:</p>
 resource = WSGIResource(reactor, reactor.getThreadPool(), application)
 </pre>
 
-<p>Let's dwell on this line for a minute. The first parameter passed to
-<code>WSGIResource</code> is the reactor. Despite the fact that the reactor is
-global and any code that wants it can always just import it (as, in fact, this
-rpy script simply does itself), passing it around as a parameter leaves the door
-open for certain future possibilities - for example, having more than one
-reactor. There are also testing implications. Consider how much easier it is to
-unit test a function that accepts a reactor - perhaps a mock reactor specially
-constructed to make your tests easy to write - rather than importing the real
-global reactor. That's why <code>WSGIResource</code> requires you to pass the
-reactor to it.</p>
+<p>Let's dwell on this line for a minute. The first parameter passed
+to <code>WSGIResource</code> is the reactor. Despite the fact that the
+reactor is global and any code that wants it can always just import it
+(as, in fact, this rpy script simply does itself), passing it around
+as a parameter leaves the door open for certain future possibilities -
+for example, having more than one reactor. There are also testing
+implications. Consider how much easier it is to unit test a function
+that accepts a reactor - perhaps a mock reactor specially constructed
+to make your tests easy to write - rather than importing the real
+global reactor. That's why <code>WSGIResource</code> requires you to
+pass the reactor to it.</p>
 
 <p>The second parameter passed to <code>WSGIResource</code> is
 a <code class="API"
