diff --git twisted/python/dist3.py twisted/python/dist3.py
index dbe217e..ac1bafb 100644
--- twisted/python/dist3.py
+++ twisted/python/dist3.py
@@ -175,6 +175,7 @@ modules = [
     "twisted.trial.unittest",
     "twisted.trial.util",
     "twisted.web",
+    "twisted.web._auth",
     "twisted.web._element",
     "twisted.web._flatten",
     "twisted.web._newclient",
@@ -182,6 +183,7 @@ modules = [
     "twisted.web._stan",
     "twisted.web._version",
     "twisted.web.error",
+    "twisted.web.guard",
     "twisted.web.http_headers",
     "twisted.web.resource",
     "twisted.web.script",
@@ -324,6 +326,7 @@ testModules = [
     # The downloadPage tests weren't ported:
     "twisted.web.test.test_http",
     "twisted.web.test.test_flatten",
+    "twisted.web.test.test_httpauth",
     "twisted.web.test.test_http_headers",
     "twisted.web.test.test_newclient",
     "twisted.web.test.test_resource",
diff --git twisted/web/_auth/basic.py twisted/web/_auth/basic.py
index 8b588fb..d539457 100644
--- twisted/web/_auth/basic.py
+++ twisted/web/_auth/basic.py
@@ -10,25 +10,27 @@ HTTP BASIC authentication.
 @see: U{http://tools.ietf.org/html/rfc2617}
 """
 
+from __future__ import division, absolute_import
+
 import binascii
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.cred import credentials, error
 from twisted.web.iweb import ICredentialFactory
 
 
+@implementer(ICredentialFactory)
 class BasicCredentialFactory(object):
     """
     Credential Factory for HTTP Basic Authentication
 
-    @type authenticationRealm: C{str}
+    @type authenticationRealm: L{bytes}
     @ivar authenticationRealm: The HTTP authentication realm which will be issued in
         challenges.
     """
-    implements(ICredentialFactory)
 
-    scheme = 'basic'
+    scheme = b'basic'
 
     def __init__(self, authenticationRealm):
         self.authenticationRealm = authenticationRealm
@@ -48,11 +50,11 @@ class BasicCredentialFactory(object):
         L{credentials.UsernamePassword} instance.
         """
         try:
-            creds = binascii.a2b_base64(response + '===')
+            creds = binascii.a2b_base64(response + b'===')
         except binascii.Error:
             raise error.LoginFailed('Invalid credentials')
 
-        creds = creds.split(':', 1)
+        creds = creds.split(b':', 1)
         if len(creds) == 2:
             return credentials.UsernamePassword(*creds)
         else:
diff --git twisted/web/_auth/digest.py twisted/web/_auth/digest.py
index 90ebf20..e38c8ee 100644
--- twisted/web/_auth/digest.py
+++ twisted/web/_auth/digest.py
@@ -8,18 +8,20 @@ Implementation of RFC2617: HTTP Digest Authentication
 @see: U{http://www.faqs.org/rfcs/rfc2617.html}
 """
 
-from zope.interface import implements
+from __future__ import division, absolute_import
+
+from zope.interface import implementer
 from twisted.cred import credentials
 from twisted.web.iweb import ICredentialFactory
 
+@implementer(ICredentialFactory)
 class DigestCredentialFactory(object):
     """
     Wrapper for L{digest.DigestCredentialFactory} that implements the
     L{ICredentialFactory} interface.
     """
-    implements(ICredentialFactory)
 
-    scheme = 'digest'
+    scheme = b'digest'
 
     def __init__(self, algorithm, authenticationRealm):
         """
diff --git twisted/web/_auth/wrapper.py twisted/web/_auth/wrapper.py
index 29f479e..2e2e1e3 100644
--- twisted/web/_auth/wrapper.py
+++ twisted/web/_auth/wrapper.py
@@ -13,21 +13,24 @@ denied, a 401 will be sent in the response along with I{WWW-Authenticate}
 headers for each of the allowed authentication schemes.
 """
 
-from zope.interface import implements
+from __future__ import division, absolute_import
+
+from zope.interface import implementer
 
 from twisted.python import log
 from twisted.python.components import proxyForInterface
+from twisted.python.compat import networkString
 from twisted.web.resource import IResource, ErrorPage
 from twisted.web import util
 from twisted.cred import error
 from twisted.cred.credentials import Anonymous
 
 
+@implementer(IResource)
 class UnauthorizedResource(object):
     """
     Simple IResource to escape Resource dispatch
     """
-    implements(IResource)
     isLeaf = True
 
 
@@ -41,9 +44,9 @@ class UnauthorizedResource(object):
         """
         def generateWWWAuthenticate(scheme, challenge):
             l = []
-            for k,v in challenge.iteritems():
-                l.append("%s=%s" % (k, quoteString(v)))
-            return "%s %s" % (scheme, ", ".join(l))
+            for k,v in challenge.items():
+                l.append(networkString("%s=%s" % (k, quoteString(v))))
+            return b" ".join([scheme, b", ".join(l)])
 
         def quoteString(s):
             return '"%s"' % (s.replace('\\', '\\\\').replace('"', '\\"'),)
@@ -52,11 +55,11 @@ class UnauthorizedResource(object):
         for fact in self._credentialFactories:
             challenge = fact.getChallenge(request)
             request.responseHeaders.addRawHeader(
-                'www-authenticate',
+                b'www-authenticate',
                 generateWWWAuthenticate(fact.scheme, challenge))
-        if request.method == 'HEAD':
-            return ''
-        return 'Unauthorized'
+        if request.method == b'HEAD':
+            return b''
+        return b'Unauthorized'
 
 
     def getChildWithDefault(self, path, request):
@@ -67,6 +70,7 @@ class UnauthorizedResource(object):
 
 
 
+@implementer(IResource)
 class HTTPAuthSessionWrapper(object):
     """
     Wrap a portal, enforcing supported header-based authentication schemes.
@@ -78,7 +82,6 @@ class HTTPAuthSessionWrapper(object):
         will be used to decode I{Authorization} headers into L{ICredentials}
         providers.
     """
-    implements(IResource)
     isLeaf = False
 
     def __init__(self, portal, credentialFactories):
@@ -103,7 +106,7 @@ class HTTPAuthSessionWrapper(object):
         requested from the portal.  If not, an anonymous login attempt will be
         made.
         """
-        authheader = request.getHeader('authorization')
+        authheader = request.getHeader(b'authorization')
         if not authheader:
             return util.DeferredResource(self._login(Anonymous()))
 
@@ -156,12 +159,13 @@ class HTTPAuthSessionWrapper(object):
         return d
 
 
-    def _loginSucceeded(self, (interface, avatar, logout)):
+    def _loginSucceeded(self, args):
         """
         Handle login success by wrapping the resulting L{IResource} avatar
         so that the C{logout} callback will be invoked when rendering is
         complete.
         """
+        interface, avatar, logout = args
         class ResourceWrapper(proxyForInterface(IResource, 'resource')):
             """
             Wrap an L{IResource} so that whenever it or a child of it
@@ -217,9 +221,9 @@ class HTTPAuthSessionWrapper(object):
             header value to be decoded or a two-tuple of C{None} if no
             factory can decode the header value.
         """
-        elements = header.split(' ')
+        elements = header.split(b' ')
         scheme = elements[0].lower()
         for fact in self._credentialFactories:
             if fact.scheme == scheme:
-                return (fact, ' '.join(elements[1:]))
+                return (fact, b' '.join(elements[1:]))
         return (None, None)
diff --git twisted/web/guard.py twisted/web/guard.py
index f3bb4d7..0ae531b 100644
--- twisted/web/guard.py
+++ twisted/web/guard.py
@@ -6,6 +6,8 @@ Resource traversal integration with L{twisted.cred} to allow for
 authentication and authorization of HTTP requests.
 """
 
+from __future__ import division, absolute_import
+
 # Expose HTTP authentication classes here.
 from twisted.web._auth.wrapper import HTTPAuthSessionWrapper
 from twisted.web._auth.basic import BasicCredentialFactory
diff --git twisted/web/test/test_httpauth.py twisted/web/test/test_httpauth.py
index ee7f443..24cb39a 100644
--- twisted/web/test/test_httpauth.py
+++ twisted/web/test/test_httpauth.py
@@ -5,8 +5,11 @@
 Tests for L{twisted.web._auth}.
 """
 
+from __future__ import division, absolute_import
 
-from zope.interface import implements
+import codecs
+
+from zope.interface import implementer
 from zope.interface.verify import verifyObject
 
 from twisted.trial import unittest
@@ -33,7 +36,7 @@ from twisted.web.test.test_web import DummyRequest
 
 
 def b64encode(s):
-    return s.encode('base64').strip()
+    return codecs.encode(s, 'base64').strip()
 
 
 class BasicAuthTestsMixin:
@@ -44,13 +47,13 @@ class BasicAuthTestsMixin:
     """
     def setUp(self):
         self.request = self.makeRequest()
-        self.realm = 'foo'
-        self.username = 'dreid'
-        self.password = 'S3CuR1Ty'
+        self.realm = b'foo'
+        self.username = b'dreid'
+        self.password = b'S3CuR1Ty'
         self.credentialFactory = basic.BasicCredentialFactory(self.realm)
 
 
-    def makeRequest(self, method='GET', clientAddress=None):
+    def makeRequest(self, method=b'GET', clientAddress=None):
         """
         Create a request object to be passed to
         L{basic.BasicCredentialFactory.decode} along with a response value.
@@ -74,12 +77,12 @@ class BasicAuthTestsMixin:
         into a L{UsernamePassword} object with a password which reflects the
         one which was encoded in the response.
         """
-        response = b64encode('%s:%s' % (self.username, self.password))
+        response = b64encode(b''.join([self.username, b':', self.password]))
 
         creds = self.credentialFactory.decode(response, self.request)
         self.assertTrue(IUsernamePassword.providedBy(creds))
         self.assertTrue(creds.checkPassword(self.password))
-        self.assertFalse(creds.checkPassword(self.password + 'wrong'))
+        self.assertFalse(creds.checkPassword(self.password + b'wrong'))
 
 
     def test_incorrectPadding(self):
@@ -87,8 +90,8 @@ class BasicAuthTestsMixin:
         L{basic.BasicCredentialFactory.decode} decodes a base64-encoded
         response with incorrect padding.
         """
-        response = b64encode('%s:%s' % (self.username, self.password))
-        response = response.strip('=')
+        response = b64encode(b''.join([self.username, b':', self.password]))
+        response = response.strip(b'=')
 
         creds = self.credentialFactory.decode(response, self.request)
         self.assertTrue(verifyObject(IUsernamePassword, creds))
@@ -100,7 +103,7 @@ class BasicAuthTestsMixin:
         L{basic.BasicCredentialFactory.decode} raises L{LoginFailed} if passed
         a response which is not base64-encoded.
         """
-        response = 'x' # one byte cannot be valid base64 text
+        response = b'x' # one byte cannot be valid base64 text
         self.assertRaises(
             error.LoginFailed,
             self.credentialFactory.decode, response, self.makeRequest())
@@ -111,7 +114,7 @@ class BasicAuthTestsMixin:
         L{basic.BasicCredentialFactory.decode} raises L{LoginFailed} when
         passed a response which is not valid base64-encoded text.
         """
-        response = b64encode('123abc+/')
+        response = b64encode(b'123abc+/')
         self.assertRaises(
             error.LoginFailed,
             self.credentialFactory.decode,
@@ -119,12 +122,12 @@ class BasicAuthTestsMixin:
 
 
 class RequestMixin:
-    def makeRequest(self, method='GET', clientAddress=None):
+    def makeRequest(self, method=b'GET', clientAddress=None):
         """
         Create a L{DummyRequest} (change me to create a
         L{twisted.web.http.Request} instead).
         """
-        request = DummyRequest('/')
+        request = DummyRequest(b'/')
         request.method = method
         request.client = clientAddress
         return request
@@ -147,8 +150,8 @@ class DigestAuthTests(RequestMixin, unittest.TestCase):
         """
         Create a DigestCredentialFactory for testing
         """
-        self.realm = "test realm"
-        self.algorithm = "md5"
+        self.realm = b"test realm"
+        self.algorithm = b"md5"
         self.credentialFactory = digest.DigestCredentialFactory(
             self.algorithm, self.realm)
         self.request = self.makeRequest()
@@ -160,8 +163,8 @@ class DigestAuthTests(RequestMixin, unittest.TestCase):
         L{twisted.cred.digest.DigestCredentialFactory} with the HTTP method and
         host of the request.
         """
-        host = '169.254.0.1'
-        method = 'GET'
+        host = b'169.254.0.1'
+        method = b'GET'
         done = [False]
         response = object()
         def check(_response, _method, _host):
@@ -193,13 +196,13 @@ class DigestAuthTests(RequestMixin, unittest.TestCase):
         None of the values may have newlines in them.
         """
         challenge = self.credentialFactory.getChallenge(self.request)
-        self.assertEqual(challenge['qop'], 'auth')
-        self.assertEqual(challenge['realm'], 'test realm')
-        self.assertEqual(challenge['algorithm'], 'md5')
+        self.assertEqual(challenge['qop'], b'auth')
+        self.assertEqual(challenge['realm'], b'test realm')
+        self.assertEqual(challenge['algorithm'], b'md5')
         self.assertIn('nonce', challenge)
         self.assertIn('opaque', challenge)
         for v in challenge.values():
-            self.assertNotIn('\n', v)
+            self.assertNotIn(b'\n', v)
 
 
     def test_getChallengeWithoutClientIP(self):
@@ -207,11 +210,11 @@ class DigestAuthTests(RequestMixin, unittest.TestCase):
         L{DigestCredentialFactory.getChallenge} can issue a challenge even if
         the L{Request} it is passed returns C{None} from C{getClientIP}.
         """
-        request = self.makeRequest('GET', None)
+        request = self.makeRequest(b'GET', None)
         challenge = self.credentialFactory.getChallenge(request)
-        self.assertEqual(challenge['qop'], 'auth')
-        self.assertEqual(challenge['realm'], 'test realm')
-        self.assertEqual(challenge['algorithm'], 'md5')
+        self.assertEqual(challenge['qop'], b'auth')
+        self.assertEqual(challenge['realm'], b'test realm')
+        self.assertEqual(challenge['algorithm'], b'md5')
         self.assertIn('nonce', challenge)
         self.assertIn('opaque', challenge)
 
@@ -243,8 +246,8 @@ class UnauthorizedResourceTests(unittest.TestCase):
         request.render(resource)
         self.assertEqual(request.responseCode, 401)
         self.assertEqual(
-            request.responseHeaders.getRawHeaders('www-authenticate'),
-            ['basic realm="example.com"'])
+            request.responseHeaders.getRawHeaders(b'www-authenticate'),
+            [b'basic realm="example.com"'])
 
 
     def test_render(self):
@@ -253,9 +256,9 @@ class UnauthorizedResourceTests(unittest.TestCase):
         I{WWW-Authenticate} header and puts a simple unauthorized message
         into the response body.
         """
-        request = DummyRequest([''])
+        request = DummyRequest([b''])
         self._unauthorizedRenderTest(request)
-        self.assertEqual('Unauthorized', ''.join(request.written))
+        self.assertEqual(b'Unauthorized', b''.join(request.written))
 
 
     def test_renderHEAD(self):
@@ -264,10 +267,10 @@ class UnauthorizedResourceTests(unittest.TestCase):
         is like its handling of a I{GET} request, but no response body is
         written.
         """
-        request = DummyRequest([''])
-        request.method = 'HEAD'
+        request = DummyRequest([b''])
+        request.method = b'HEAD'
         self._unauthorizedRenderTest(request)
-        self.assertEqual('', ''.join(request.written))
+        self.assertEqual(b'', b''.join(request.written))
 
 
     def test_renderQuotesRealm(self):
@@ -278,14 +281,15 @@ class UnauthorizedResourceTests(unittest.TestCase):
         """
         resource = UnauthorizedResource([
                 BasicCredentialFactory('example\\"foo')])
-        request = DummyRequest([''])
+        request = DummyRequest([b''])
         request.render(resource)
         self.assertEqual(
-            request.responseHeaders.getRawHeaders('www-authenticate'),
-            ['basic realm="example\\\\\\"foo"'])
+            request.responseHeaders.getRawHeaders(b'www-authenticate'),
+            [b'basic realm="example\\\\\\"foo"'])
 
 
 
+implementer(portal.IRealm)
 class Realm(object):
     """
     A simple L{IRealm} implementation which gives out L{WebAvatar} for any
@@ -298,7 +302,6 @@ class Realm(object):
     @type loggedOut: C{int}
     @ivar loggedOut: The number of times the logout callback has been invoked.
     """
-    implements(portal.IRealm)
 
     def __init__(self, avatarFactory):
         self.loggedOut = 0
@@ -328,11 +331,11 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         """
         Create a realm, portal, and L{HTTPAuthSessionWrapper} to use in the tests.
         """
-        self.username = 'foo bar'
-        self.password = 'bar baz'
-        self.avatarContent = "contents of the avatar resource itself"
-        self.childName = "foo-child"
-        self.childContent = "contents of the foo child of the avatar"
+        self.username = b'foo bar'
+        self.password = b'bar baz'
+        self.avatarContent = b"contents of the avatar resource itself"
+        self.childName = b"foo-child"
+        self.childContent = b"contents of the foo child of the avatar"
         self.checker = InMemoryUsernamePasswordDatabaseDontUse()
         self.checker.addUser(self.username, self.password)
         self.avatar = Data(self.avatarContent, 'text/plain')
@@ -352,8 +355,8 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         dispatch it, starting from C{self.wrapper} and returning the resulting
         L{IResource}.
         """
-        authorization = b64encode(self.username + ':' + self.password)
-        request.headers['authorization'] = 'Basic ' + authorization
+        authorization = b64encode(self.username + b':' + self.password)
+        request.headers[b'authorization'] = b'Basic ' + authorization
         return getChildForRequest(self.wrapper, request)
 
 
@@ -398,7 +401,8 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         results in an L{UnauthorizedResource} when the request has an
         I{Authorization} header with a user which does not exist.
         """
-        return self._invalidAuthorizationTest('Basic ' + b64encode('foo:bar'))
+        return self._invalidAuthorizationTest(
+            b'Basic ' + b64encode(b'foo:bar'))
 
 
     def test_getChildWithDefaultUnauthorizedPassword(self):
@@ -409,7 +413,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         password.
         """
         return self._invalidAuthorizationTest(
-            'Basic ' + b64encode(self.username + ':bar'))
+            b'Basic ' + b64encode(self.username + b':bar'))
 
 
     def test_getChildWithDefaultUnrecognizedScheme(self):
@@ -418,7 +422,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         results in an L{UnauthorizedResource} when the request has an
         I{Authorization} header with an unrecognized scheme.
         """
-        return self._invalidAuthorizationTest('Quux foo bar baz')
+        return self._invalidAuthorizationTest(b'Quux foo bar baz')
 
 
     def test_getChildWithDefaultAuthorized(self):
@@ -464,9 +468,9 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         a challenge, it calls the C{getChallenge} method with the request as an
         argument.
         """
+        @implementer(ICredentialFactory)
         class DumbCredentialFactory(object):
-            implements(ICredentialFactory)
-            scheme = 'dumb'
+            scheme = b'dumb'
 
             def __init__(self):
                 self.requests = []
@@ -539,7 +543,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         """
         self.credentialFactories.append(BasicCredentialFactory('example.com'))
         request = self.makeRequest([self.childName])
-        request.headers['authorization'] = 'Basic decode should fail'
+        request.headers[b'authorization'] = b'Basic decode should fail'
         child = getChildForRequest(self.wrapper, request)
         self.assertIsInstance(child, UnauthorizedResource)
 
@@ -550,7 +554,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         the L{ICredentialFactory} to use to parse the header and a string
         containing the portion of the header which remains to be parsed.
         """
-        basicAuthorization = 'Basic abcdef123456'
+        basicAuthorization = b'Basic abcdef123456'
         self.assertEqual(
             self.wrapper._selectParseHeader(basicAuthorization),
             (None, None))
@@ -558,7 +562,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         self.credentialFactories.append(factory)
         self.assertEqual(
             self.wrapper._selectParseHeader(basicAuthorization),
-            (factory, 'abcdef123456'))
+            (factory, b'abcdef123456'))
 
 
     def test_unexpectedDecodeError(self):
@@ -571,7 +575,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
             pass
 
         class BadFactory(object):
-            scheme = 'bad'
+            scheme = b'bad'
 
             def getChallenge(self, client):
                 return {}
@@ -581,7 +585,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
 
         self.credentialFactories.append(BadFactory())
         request = self.makeRequest([self.childName])
-        request.headers['authorization'] = 'Bad abc'
+        request.headers[b'authorization'] = b'Bad abc'
         child = getChildForRequest(self.wrapper, request)
         request.render(child)
         self.assertEqual(request.responseCode, 500)
@@ -616,7 +620,7 @@ class HTTPAuthHeaderTests(unittest.TestCase):
         Anonymous requests are allowed if a L{Portal} has an anonymous checker
         registered.
         """
-        unprotectedContents = "contents of the unprotected child resource"
+        unprotectedContents = b"contents of the unprotected child resource"
 
         self.avatars[ANONYMOUS] = Resource()
         self.avatars[ANONYMOUS].putChild(
diff --git twisted/web/topfiles/7974.feature twisted/web/topfiles/7974.feature
new file mode 100644
index 0000000..03744de
--- /dev/null
+++ twisted/web/topfiles/7974.feature
@@ -0,0 +1 @@
+twisted.web.guard is now ported to Python 3.
\ No newline at end of file
