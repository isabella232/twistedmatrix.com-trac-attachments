Index: twisted/internet/test/test_process.py
===================================================================
--- twisted/internet/test/test_process.py	(revision 27203)
+++ twisted/internet/test/test_process.py	(working copy)
@@ -7,6 +7,7 @@
 
 __metaclass__ = type
 
+import os
 import warnings, sys, signal
 
 from twisted.internet.test.reactormixins import ReactorBuilder
@@ -15,6 +16,7 @@
 from twisted.python.runtime import platform
 from twisted.python.filepath import FilePath
 from twisted.python.failure import Failure
+from twisted.internet import utils
 from twisted.internet.defer import Deferred
 from twisted.internet.protocol import ProcessProtocol
 from twisted.internet.error import ProcessDone, PotentialZombieWarning
@@ -347,6 +349,54 @@
         self.runReactor(reactor)
 
 
+    def makeSourceFile(self, sourceLines):
+        """
+        Write the given list of lines to a text file and return the absolute
+        path to it.
+        """
+        script = self.mktemp()
+        scriptFile = file(script, 'wt')
+        scriptFile.write(os.linesep.join(sourceLines) + os.linesep)
+        scriptFile.close()
+        return os.path.abspath(script)
+
+
+    def test_shebang(self):
+        """
+        Running a script that starts with a shebang (#!) works
+        """
+        SHEBANG_OUTPUT = 'this is the shebang output'
+
+        scriptFile = self.makeSourceFile([
+                "#!%s" % (sys.executable,),
+                "import sys",
+                "sys.stdout.write('%s')" % (SHEBANG_OUTPUT,),
+                "sys.stdout.flush()"])
+        os.chmod(scriptFile, 0700)
+
+        reactor = self.buildReactor()
+
+        def cbProcessExited((out, err, code)):
+            msg("cbProcessExited((%r, %r, %d))" % (out, err, code))
+            self.assertEqual(out, SHEBANG_OUTPUT)
+            self.assertEqual(err, "")
+            self.assertEqual(code, 0)
+
+        def start():
+            try:
+                d = utils.getProcessOutputAndValue(scriptFile, reactor=reactor)
+            except:
+                reactor.stop()
+                raise
+            d.addCallback(cbProcessExited)
+            d.addErrback(err)
+            d.addCallback(lambda ign: reactor.stop())
+            return d
+
+        reactor.callWhenRunning(start)
+        self.runReactor(reactor)
+
+
 ProcessTestsBuilder.skip = skipWindowsNopywin32
 globals().update(ProcessTestsBuilder.makeTestCaseClasses())
 
