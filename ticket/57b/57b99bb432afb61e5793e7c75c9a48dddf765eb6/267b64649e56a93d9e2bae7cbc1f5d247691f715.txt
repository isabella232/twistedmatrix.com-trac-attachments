--- xmlrpc.py.orig	2007-03-05 17:04:46.000000000 +0900
+++ xmlrpc.py	2007-03-05 17:33:31.000000000 +0900
@@ -25,7 +25,7 @@
 from twisted.web import resource, server
 from twisted.internet import defer, protocol, reactor
 from twisted.python import log, reflect, failure
-from twisted.web import http
+from twisted.web import http, error
 
 # These are deprecated, use the class level definitions
 NOT_FOUND = 8001
@@ -108,13 +108,21 @@
 
     def render(self, request):
         request.content.seek(0, 0)
-        args, functionPath = xmlrpclib.loads(request.content.read())
+        if request.method.upper() != "POST":
+            return error.ErrorPage(http.NOT_ALLOWED,
+                                    http.RESPONSES[http.NOT_ALLOWED],
+                                    http.RESPONSES[http.NOT_ALLOWED])
+        request.setHeader("content-type", "text/xml")
+        try:
+            args, functionPath = xmlrpclib.loads(request.content.read())
+        except:
+            self._cbRender(Fault(self.FAILURE, "Illegal XML format"), request)
+            return server.NOT_DONE_YET
         try:
             function = self._getFunction(functionPath)
         except Fault, f:
             self._cbRender(f, request)
         else:
-            request.setHeader("content-type", "text/xml")
             defer.maybeDeferred(function, *args).addErrback(
                 self._ebRender
             ).addCallback(
