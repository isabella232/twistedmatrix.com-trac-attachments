--- http.py.orig	2006-09-05 17:08:32.000000000 -0600
+++ http.py	2006-09-05 17:10:41.000000000 -0600
@@ -370,6 +370,23 @@
         self.transport.write('\r\n')
 
     def lineReceived(self, line):
+        # Setup stupid temp variables
+        if not hasattr(self, '_tempKey'):
+            # Buffer for header values
+            self._tempKey = ''
+            self._tempVal = ''
+            # Stores verbatium headers -- better for HTTPMessage
+            self.factory.headersVerb = []
+        
+        def headerDone():
+            #
+            # Flushes the headers
+            self.handleHeader(self._tempKey, self._tempVal)
+            if self._tempKey.lower() == 'content-length':
+                self.length = int(self._tempVal)
+            self._tempKey = ''
+            self._tempVal = ''
+        
         if self.firstLine:
             self.firstLine = 0
             l = line.split(None, 2)
@@ -382,13 +399,24 @@
                 message = ""
             self.handleStatus(version, status, message)
             return
-        if line:
-            key, val = line.split(':', 1)
-            val = val.lstrip()
-            self.handleHeader(key, val)
-            if key.lower() == 'content-length':
-                self.length = int(val)
-        else:
+        self.factory.headersVerb.append(line)
+        if line.strip():
+            if line.startswith('\t'):
+                # Continue last header
+                self._tempVal += line.strip()
+            else:
+                # This is a new header, so close out last one if we had it
+                if self._tempKey:
+                    headerDone()
+                    
+                # Now, figure out new header
+                key, val = line.split(':', 1)
+                val = val.lstrip()
+                self._tempKey = key
+                self._tempVal += val
+        elif not line:
+            if self._tempKey:
+                headerDone()
             self.__buffer = StringIO()
             self.handleEndHeaders()
             self.setRawMode()
