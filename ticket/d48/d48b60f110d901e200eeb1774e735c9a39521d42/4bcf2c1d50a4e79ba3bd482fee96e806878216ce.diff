diff --git a/twisted/web/http.py b/twisted/web/http.py
index df4281b..cac1767 100644
--- a/twisted/web/http.py
+++ b/twisted/web/http.py
@@ -1702,11 +1702,18 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
             self.requests.append(request)
 
             self.__first_line = 0
+
             parts = line.split()
             if len(parts) != 3:
                 _respondToBadRequestAndDisconnect(self.transport)
                 return
             command, request, version = parts
+            try:
+                command.decode("ascii")
+            except UnicodeDecodeError:
+                _respondToBadRequestAndDisconnect(self.transport)
+                return
+
             self._command = command
             self._path = request
             self._version = version
diff --git a/twisted/web/test/test_http.py b/twisted/web/test/test_http.py
index da83d37..a90ffd2 100644
--- a/twisted/web/test/test_http.py
+++ b/twisted/web/test/test_http.py
@@ -704,6 +704,19 @@ class ParsingTests(unittest.TestCase):
         return channel
 
 
+    def test_invalidNonAsciiMethod(self):
+        """
+        When client sends invalid HTTP method containing
+        non-ascii characters HTTP 400 'Bad Request' status will be returned.
+        """
+        badRequestLine = b"GE\xc2\xa9 / HTTP/1.1\r\n\r\n"
+        channel = self.runRequest(badRequestLine, http.Request, 0)
+        self.assertEqual(
+            channel.transport.value(),
+            b"HTTP/1.1 400 Bad Request\r\n\r\n")
+        self.assertTrue(channel.transport.disconnecting)
+
+
     def test_basicAuth(self):
         """
         L{HTTPChannel} provides username and password information supplied in
diff --git a/twisted/web/topfiles/8102.bugfix b/twisted/web/topfiles/8102.bugfix
new file mode 100644
index 0000000..7ac36f2
--- /dev/null
+++ b/twisted/web/topfiles/8102.bugfix
@@ -0,0 +1,2 @@
+twisted.web.http.HTTPChannel now correctly handles non-ascii method name. Previously non-ascii method name was causing
+unhandled exceptions.
