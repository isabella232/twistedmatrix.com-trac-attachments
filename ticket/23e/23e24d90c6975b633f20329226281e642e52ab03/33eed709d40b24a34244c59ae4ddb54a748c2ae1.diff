Index: twisted/test/test_threadpool.py
===================================================================
--- twisted/test/test_threadpool.py	(revision 18967)
+++ twisted/test/test_threadpool.py	(working copy)
@@ -2,7 +2,7 @@
 # See LICENSE for details.
 
 
-import pickle, time
+import pickle, time, weakref
 
 from twisted.trial import unittest
 from twisted.python import log, threadable
@@ -63,41 +63,39 @@
         thread will always maintain a reference to them as long as it
         exists.  Test that this doesn't happen.
         """
-        class Thread(object):
-            """
-            Mock-thread which is API compatible with L{threading.Thread}.
-            """
-            def __init__(self, group=None, target=None, name=None, args=(),
-                         kwargs={}, verbose=None):
-                self.args = args
-                self.kwargs = kwargs
+        try:
+            tp = threadpool.ThreadPool(0, 1)
+            tp.start()
 
+            # Sanity check - no threads should have been started yet.
+            self.assertEqual(tp.threads, [])
 
-            def start(self):
+            # Here's our function
+            def worker(arg):
                 pass
+            # weakref need an object subclass
+            class Dumb(object):
+                pass
+            # And here's the unique object
+            unique = Dumb()
 
-        tp = threadpool.ThreadPool(0, 1)
-        tp.threadFactory = Thread
-        tp.start()
+            uniqueRef = weakref.ref(unique)
 
-        # Sanity check - no threads should have been started yet.
-        self.assertEqual(tp.threads, [])
+            # Put some work in
+            tp.callInThread(worker, unique)
 
-        # Here's our function and our unique object
-        def worker(arg):
-            pass
-        unique = object()
+            self.assertEqual(len(tp.threads), 1)
 
-        # Put some work in
-        tp.callInThread(worker, unique)
+            # Add an event to wait completion
+            event = threading.Event()
+            tp.callInThread(event.set)
+            event.wait()
 
-        self.assertEqual(len(tp.threads), 1)
+            del unique
+            self.assertEquals(uniqueRef(), None)
+        finally:
+            tp.stop()
 
-        # But not with a reference to `worker' or `obj'.
-        self.failIf(objgrep(tp.threads, worker, isSame))
-        self.failIf(objgrep(tp.threads, unique, isSame))
-
-
     def testPersistence(self):
         tp = threadpool.ThreadPool(7, 20)
         tp.start()
