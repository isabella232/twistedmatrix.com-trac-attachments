Index: twisted/python/threadpool.py
===================================================================
--- twisted/python/threadpool.py	(revision 19249)
+++ twisted/python/threadpool.py	(working copy)
@@ -101,10 +101,8 @@
 
     def _startSomeWorkers(self):
         s = self.q.qsize()
-        while (
-            self.workers < self.max and # Don't create too many
-            len(self.threads) < s # but create enough
-            ):
+        # Create enough, but not too many
+        while self.workers < min(self.max, s + len(self.working)):
             self.startAWorker()
 
     def dispatch(self, owner, func, *args, **kw):
@@ -146,18 +144,15 @@
         self.waiters.append(ct)
         o = self.q.get()
         self.waiters.remove(ct)
-        while True:
-            if o is WorkerStop:
-                break
-            elif o is not None:
-                self.working.append(ct)
-                ctx, function, args, kwargs = o
-                try:
-                    context.call(ctx, function, *args, **kwargs)
-                except:
-                    context.call(ctx, log.err)
-                self.working.remove(ct)
-                del o, ctx, function, args, kwargs
+        while o is not WorkerStop:
+            self.working.append(ct)
+            ctx, function, args, kwargs = o
+            try:
+                context.call(ctx, function, *args, **kwargs)
+            except:
+                context.call(ctx, log.err)
+            self.working.remove(ct)
+            del o, ctx, function, args, kwargs
             self.waiters.append(ct)
             o = self.q.get()
             self.waiters.remove(ct)
Index: twisted/test/test_threadpool.py
===================================================================
--- twisted/test/test_threadpool.py	(revision 19249)
+++ twisted/test/test_threadpool.py	(working copy)
@@ -202,7 +202,6 @@
         Test a race condition: ensure that actions run in the pool synchronize
         with actions run in the main thread.
         """
-        self.threadpool.adjustPoolsize(minthreads=4)
         self.threadpool.callInThread(self.event.set)
         self.event.wait()
         self.event.clear()
