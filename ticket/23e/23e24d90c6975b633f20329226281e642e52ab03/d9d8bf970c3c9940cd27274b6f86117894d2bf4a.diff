Index: twisted/python/reflect.py
===================================================================
--- twisted/python/reflect.py	(révision 18664)
+++ twisted/python/reflect.py	(copie de travail)
@@ -22,6 +22,10 @@
 import traceback
 import weakref
 import re
+try:
+    from collections import deque
+except ImportError:
+    deque = list
 
 RegexType = type(re.compile(""))
 
@@ -630,7 +634,7 @@
         for k, v in start.items():
             objgrep(k, goal, eq, path+'{'+repr(v)+'}', paths, seen, showUnknowns, maxDepth)
             objgrep(v, goal, eq, path+'['+repr(k)+']', paths, seen, showUnknowns, maxDepth)
-    elif isinstance(start, types.ListType) or isinstance(start, types.TupleType):
+    elif isinstance(start, (types.ListType, types.TupleType, deque)):
         for idx in xrange(len(start)):
             objgrep(start[idx], goal, eq, path+'['+str(idx)+']', paths, seen, showUnknowns, maxDepth)
     elif isinstance(start, types.MethodType):
Index: twisted/test/test_reflect.py
===================================================================
--- twisted/test/test_reflect.py	(révision 18664)
+++ twisted/test/test_reflect.py	(copie de travail)
@@ -13,6 +13,10 @@
 from twisted.trial import unittest
 from twisted.python import reflect
 
+try:
+    from collections import deque
+except ImportError:
+    deque = None
 
 class SettableTest(unittest.TestCase):
     def setUp(self):
@@ -209,7 +213,18 @@
         self.assertEquals(['[0]', '[1][0]'], reflect.objgrep(d, a, reflect.isSame, maxDepth=2))
         self.assertEquals(['[0]', '[1][0]', '[1][1][0]'], reflect.objgrep(d, a, reflect.isSame, maxDepth=3))
 
+    def testDeque(self):
+        o = object()
+        D = deque()
+        D.append(None)
+        D.append(o)
 
+        self.assertIn("[1]", reflect.objgrep(D, o, reflect.isSame))
+
+    if deque is None:
+        testDeque.skip = "Deque not available" 
+
+
 class GetClass(unittest.TestCase):
     def testOld(self):
         class OldClass:
@@ -330,3 +345,4 @@
         class X(BTBase):
             breakName = True
         reflect.safe_str(X())
+
Index: twisted/test/test_threadpool.py
===================================================================
--- twisted/test/test_threadpool.py	(révision 18664)
+++ twisted/test/test_threadpool.py	(copie de travail)
@@ -69,7 +69,6 @@
             """
             def __init__(self, group=None, target=None, name=None, args=(),
                          kwargs={}, verbose=None):
-                self.target = target
                 self.args = args
                 self.kwargs = kwargs
 
@@ -205,6 +204,7 @@
         Test a race condition: ensure that actions run in the pool synchronize
         with actions run in the main thread.
         """
+        self.threadpool.adjustPoolsize(minthreads=4)
         self.threadpool.callInThread(self.event.set)
         self.event.wait()
         self.event.clear()
