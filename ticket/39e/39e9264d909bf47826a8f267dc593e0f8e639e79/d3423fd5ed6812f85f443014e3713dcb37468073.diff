Index: twisted/lore/test/test_lore.py
===================================================================
--- twisted/lore/test/test_lore.py	(revision 24967)
+++ twisted/lore/test/test_lore.py	(working copy)
@@ -328,9 +328,36 @@
                                                  "class",
                                                  "index-link"))
 
+    def test_lineNumbering(self):
+        """
+        L{tree._addLineNumbers} accepts a C{str} and returns a C{str} that
+        modifies each line in the input by prefixing it with a line number.
+        The first and last lines are skipped, a close tag is checked for at
+        the start of each line, and if a multiline string is detected, tags
+        will be placed to keep the number from being highlighted.
+        """
+        testcode = u'<pre>\n' \
+                   'Lorem ipsum<span>\n' \
+                   '</span>dolor\n' \
+                   'sit <span class="py-src-string">\"\"\"amet, consectetur\n' \
+                   'adipisicing\n' \
+                   'elit,\"\"\"</span> sed\n' \
+                   'do \n' \
+                   '</pre>'
+        self.assertEqual(tree._addLineNumbers(testcode),
+                         u'<pre>\n' \
+                         '  1    Lorem ipsum<span>\n' \
+                         '</span>  2    dolor\n' \
+                         '  3    sit <span class="py-src-string">\"\"\"amet,' \
+                         ' consectetur\n' \
+                         '</span>  4<span class="py-src-string">    ' \
+                         'adipisicing\n' \
+                         '</span>  5<span class="py-src-string">    elit,' \
+                         '\"\"\"</span> sed\n' \
+                         '  6    do \n' \
+                         '</pre>')
 
 
-
 class LatexSpitterTestCase(unittest.TestCase):
     """
     Tests for the Latex output plugin.
Index: twisted/lore/tree.py
===================================================================
--- twisted/lore/tree.py	(revision 24967)
+++ twisted/lore/tree.py	(working copy)
@@ -183,11 +183,61 @@
         data = '\n'.join(lines[int(node.getAttribute('skipLines', 0)):])
         data = cStringIO.StringIO(text.removeLeadingTrailingBlanks(data))
         htmlizer.filter(data, outfile, writer=htmlizer.SmallerHTMLWriter)
-        val = outfile.getvalue()
+        val = _addLineNumbers(str(outfile.getvalue()))
         _replaceWithListing(node, val, filename, "py-listing")
 
 
 
+def _addLineNumbers(val):
+    """
+    Adds sequential line numbers to the contents of a C{str}.  Line numbers are
+    placed after each newline unless the newline is immediately followed by a
+    closing tag (of the form '</tag>'), in which case the line number will
+    follow the tag.
+
+    Multiline strings are detected by searching for <span class="py-src-string">
+    followed by triple double-quotes.  If this string is found and it is not
+    paired with a triple double-quote followed by </span>, then it is assumed a
+    multiline string has begun.  Subsequent line numbers will be surrounded by
+    </span> and <span class="py-src-string"> tags to prevent them from being
+    highlighted, until the end of the multiline string is detected.
+
+    Line numbering begins after the second newline and stops before the last
+    newline.  (As used in L{tree.addPyListings}, the input typically only
+    includes <pre> and </pre> tags on the first and last lines.)
+
+    @type val: C{str}
+    @param val: A string
+
+    @return: C{none}
+    """
+    val = val.splitlines()
+    strline = False
+    for linenum, line in enumerate(val[1:-1]):
+        if strline:
+            val[linenum+1] = '    '.join(
+                ['</span>%3d<span class="py-src-string">' %
+                 (linenum + 1), line])
+            # len('</span>###<span class="py-src-string">----') = 42
+            if val[linenum+1][42:].find('"""</span>') >= 0 and not \
+               (val[linenum+1][42:].find('<span class="py-src-string">"""') >= 0):
+                strline = False
+        else:
+            if val[linenum+1][:2] == '</':
+                templine = list(val[linenum+1])
+                templine.insert((templine.index('>')+1),'%3d    ' %
+                                (linenum + 1))
+                val[linenum+1] = ''.join(templine)
+            else:
+                val[linenum+1] = '    '.join(['%3d' % (linenum + 1), line])
+            if val[linenum+1][7:].find('<span class="py-src-string">"""') >=0 \
+               and not (val[linenum+1][7:].find('"""</span>') >= 0):
+                strline = True
+    val = '\n'.join(val)
+    return val
+
+
+
 def _replaceWithListing(node, val, filename, class_):
     captionTitle = domhelpers.getNodeText(node)
     if captionTitle == os.path.basename(filename):
