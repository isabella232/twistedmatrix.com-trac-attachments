Index: doc/core/howto/stylesheet.css
===================================================================
--- doc/core/howto/stylesheet.css	(revision 24993)
+++ doc/core/howto/stylesheet.css	(working copy)
@@ -17,6 +17,7 @@
   font-family: Neep Alt, Courier New, Courier;
   font-size: 12pt;
   border: thin black solid;
+  line-height: 1.2em;
 }
 
 .boxed
@@ -66,12 +67,14 @@
 {
   color: #3333CC;
   font-weight: bold;
+  line-height: 1.0em
 }
 
 .py-src-parameter
 {
   color: #000066;
   font-weight: bold;
+  line-height: 1.0em
 }
 
 .py-src-identifier
@@ -90,6 +93,13 @@
   display: block; /* IE hack; prevents following line from being sucked into the py-listing box. */
 }
 
+.py-linenumber
+{
+  float: left;
+  margin-top: 0px;
+  width: 4.0em
+}
+
 .py-listing, .html-listing, .listing 
 {
   margin: 1ex;
Index: twisted/lore/test/test_lore.py
===================================================================
--- twisted/lore/test/test_lore.py	(revision 24967)
+++ twisted/lore/test/test_lore.py	(working copy)
@@ -328,6 +328,27 @@
                                                  "class",
                                                  "index-link"))
 
+    def test_lineNumbering(self):
+        """
+        L{tree._addLineNumbers} accepts a C{str} and returns a C{str} with
+        a column of line numbers prepended.  The column is enclosed in tags
+        such that it will be rendered as a floating CSS label.  The first six
+        characters of the C{str} are assumed to be '<pre>\n'; these characters
+        are stripped, since the column's tags include another <pre>.  Likewise,
+        the last line is assumed to be '</pre>' and is not numbered.
+        """
+        testcode = u'<pre>\n' \
+                   'Lorem ipsum\n' \
+                   'dolor sit\n' \
+                   'amet, consectetur\n' \
+                   '</pre>'
+        self.assertEqual(tree._addLineNumbers(testcode),
+                         u'<pre>'
+                         '<p class="py-linenumber">  1\n  2\n  3\n</p>'
+                         'Lorem ipsum\n' 
+                         'dolor sit\n'
+                         'amet, consectetur\n'
+                         '</pre>')
 
 
 
Index: twisted/lore/tree.py
===================================================================
--- twisted/lore/tree.py	(revision 25178)
+++ twisted/lore/tree.py	(working copy)
@@ -146,8 +146,8 @@
     oldio = cStringIO.StringIO(oldio.getvalue().strip()+'\n')
     newio = cStringIO.StringIO()
     htmlizer.filter(oldio, newio, writer=htmlizer.SmallerHTMLWriter)
-    newio.seek(0)
-    newel = microdom.parse(newio).documentElement
+    val = _addLineNumbers(str(newio.getvalue()))
+    newel = microdom.parseString(val).documentElement
     newel.setAttribute("class", "python")
     node.parentNode.replaceChild(newel, node)
 
@@ -183,11 +183,26 @@
         data = '\n'.join(lines[int(node.getAttribute('skipLines', 0)):])
         data = cStringIO.StringIO(text.removeLeadingTrailingBlanks(data))
         htmlizer.filter(data, outfile, writer=htmlizer.SmallerHTMLWriter)
-        val = outfile.getvalue()
+        val = _addLineNumbers(str(outfile.getvalue()))
         _replaceWithListing(node, val, filename, "py-listing")
 
 
 
+def _addLineNumbers(val):
+    valsplit = val.splitlines()
+    if len(valsplit) < 5:
+        return val
+    linecol = []
+    linecol.append('<pre>'
+               '<p class="py-linenumber">  1')
+    for linenum, line in enumerate(valsplit[2:-1]):
+        linecol.append('%3d' % (linenum + 2))
+    linecol.append('</p>')
+    val = '\n'.join(linecol) + val[6:] # Cut off existing <pre>\n
+    return val
+
+
+
 def _replaceWithListing(node, val, filename, class_):
     captionTitle = domhelpers.getNodeText(node)
     if captionTitle == os.path.basename(filename):
