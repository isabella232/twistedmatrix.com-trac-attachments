Index: twisted/test/test_task.py
===================================================================
--- twisted/test/test_task.py	(Revision 31908)
+++ twisted/test/test_task.py	(Arbeitskopie)
@@ -521,6 +521,23 @@
     def testStoppingBeforeDelayedStart(self):
         return self._stoppingTest(10)

+    def test_reset(self):
+        """
+        Test that L{LoopingCall} can be reset.
+        """
+        ran = []
+        def foo():
+            ran.append(None)
+
+        c = task.Clock()
+        lc = TestableLoopingCall(c, foo)
+        lc.start(2, now=False)
+        c.advance(1)
+        lc.reset()
+        c.advance(1)
+        self.assertEquals(ran, [])
+        c.advance(1)
+        self.assertEquals(ran, [None])


 class ReactorLoopTestCase(unittest.TestCase):
Index: twisted/internet/task.py
===================================================================
--- twisted/internet/task.py	(Revision 31908)
+++ twisted/internet/task.py	(Arbeitskopie)
@@ -177,6 +177,19 @@
             d, self.deferred = self.deferred, None
             d.callback(self)

+    def reset(self):
+        """
+        Skip the next iteration and reset the timer.
+        """
+
+        assert self.running, ("Tried to reset a LoopingCall that was "
+                              "not running.")
+        if self.call is not None:
+            self.call.cancel()
+            self.call = None
+            self._expectNextCallAt = self.clock.seconds()
+            self._reschedule()
+
     def __call__(self):
         def cb(result):
             if self.running:
