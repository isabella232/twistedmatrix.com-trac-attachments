diff --git twisted/python/filepath.py twisted/python/filepath.py
index 295ae5e..a4016d6 100644
--- twisted/python/filepath.py
+++ twisted/python/filepath.py
@@ -36,7 +36,7 @@ from twisted.python.win32 import WindowsError
 
 from twisted.python.util import FancyEqMixin
 
-from zope.interface import Interface, Attribute, implementer
+from zope.interface import Interface, Attribute, implements
 
 _CREATE_FLAGS = (os.O_EXCL |
                  os.O_CREAT |
@@ -565,7 +565,6 @@ class Permissions(FancyEqMixin, object):
 
 
 
-@implementer(IFilePath)
 class FilePath(AbstractFilePath):
     """
     I am a path on the filesystem that only permits 'downwards' access.
@@ -612,6 +611,8 @@ class FilePath(AbstractFilePath):
     @type statinfo: C{int} or L{types.NoneType} or L{os.stat_result}
     """
 
+    implements(IFilePath)
+
     statinfo = None
     path = None
 
diff --git twisted/python/modules.py twisted/python/modules.py
index 9b55be0..307970c 100644
--- twisted/python/modules.py
+++ twisted/python/modules.py
@@ -62,7 +62,7 @@ import sys
 import zipimport
 import inspect
 import warnings
-from zope.interface import Interface, implementer
+from zope.interface import Interface, implements
 
 from twisted.python.components import registerAdapter
 from twisted.python.filepath import FilePath, UnlistableError
@@ -476,16 +476,16 @@ class IPathImportMapper(Interface):
         L{ZipPath}, but more might be added later).
         """
 
-@implementer(IPathImportMapper)
 class _DefaultMapImpl:
     """ Wrapper for the default importer, i.e. None.  """
+    implements(IPathImportMapper)
     def mapPath(self, fsPathString):
         return FilePath(fsPathString)
 _theDefaultMapper = _DefaultMapImpl()
 
-@implementer(IPathImportMapper)
 class _ZipMapImpl:
     """ IPathImportMapper implementation for zipimport.ZipImporter.  """
+    implements(IPathImportMapper)
     def __init__(self, importer):
         self.importer = importer
 
diff --git twisted/python/test/test_components.py twisted/python/test/test_components.py
index 7809629..c4c1b45 100644
--- twisted/python/test/test_components.py
+++ twisted/python/test/test_components.py
@@ -6,7 +6,7 @@
 Test cases for Twisted component architecture.
 """
 
-from zope.interface import Interface, implementer, Attribute
+from zope.interface import Interface, implements, Attribute
 from zope.interface.adapter import AdapterRegistry
 
 from twisted.trial import unittest
@@ -33,8 +33,8 @@ class IElapsed(Interface):
         1!
         """
 
-@implementer(IAdept)
 class Adept(components.Adapter):
+    implements(IAdept)
     def __init__(self, orig):
         self.original = orig
         self.num = 0
@@ -42,8 +42,8 @@ class Adept(components.Adapter):
         self.num = self.num + 1
         return self.num, self.original.inc()
 
-@implementer(IElapsed)
 class Elapsed(components.Adapter):
+    implements(IElapsed)
     def elapsedFunc(self):
         return 1
 
@@ -62,12 +62,12 @@ class ITest3(Interface):
     pass
 class ITest4(Interface):
     pass
-@implementer(ITest, ITest3, ITest4)
 class Test(components.Adapter):
+    implements(ITest, ITest3, ITest4)
     def __init__(self, orig):
         pass
-@implementer(ITest2)
 class Test2:
+    implements(ITest2)
     temporaryAdapter = 1
     def __init__(self, orig):
         pass
@@ -173,13 +173,13 @@ class AdapterTestCase(unittest.TestCase):
 class IMeta(Interface):
     pass
 
-@implementer(IMeta)
 class MetaAdder(components.Adapter):
+    implements(IMeta)
     def add(self, num):
         return self.original.num + num
 
-@implementer(IMeta)
 class BackwardsAdder(components.Adapter):
+    implements(IMeta)
     def add(self, num):
         return self.original.num - num
 
@@ -199,8 +199,8 @@ class ComponentNumber(components.Componentized):
         self.num = 0
         components.Componentized.__init__(self)
 
-@implementer(IMeta)
 class ComponentMeta(components.Adapter):
+    implements(IMeta)
     def __init__(self, original):
         components.Adapter.__init__(self, original)
         self.num = self.original.num
@@ -223,8 +223,8 @@ class IAttrXX(Interface):
     def xx():
         pass
 
-@implementer(IAttrX)
 class Xcellent:
+    implements(IAttrX)
     def x(self):
         return 'x!'
 
@@ -478,7 +478,6 @@ class IProxiedSubInterface(IProxiedInterface):
 
 
 
-@implementer(IProxiedInterface)
 class Yayable(object):
     """
     A provider of L{IProxiedInterface} which increments a counter for
@@ -486,6 +485,7 @@ class Yayable(object):
 
     @ivar yays: The number of times C{yay} has been called.
     """
+    implements(IProxiedInterface)
 
     def __init__(self):
         self.yays = 0
@@ -500,11 +500,11 @@ class Yayable(object):
         return self.yays
 
 
-@implementer(IProxiedSubInterface)
 class Booable(object):
     """
     An implementation of IProxiedSubInterface
     """
+    implements(IProxiedSubInterface)
     yayed = False
     booed = False
     def yay(self):
diff --git twisted/python/zippath.py twisted/python/zippath.py
index c29addd..a82f253 100644
--- twisted/python/zippath.py
+++ twisted/python/zippath.py
@@ -27,7 +27,7 @@ else:
 
 from twisted.python.filepath import IFilePath, FilePath, AbstractFilePath
 
-from zope.interface import implementer
+from zope.interface import implements
 
 # using FilePath here exclusively rather than os to make sure that we don't do
 # anything OS-path-specific here.
@@ -36,12 +36,13 @@ ZIP_PATH_SEP = '/'              # In zipfiles, "/" is universally used as the
                                 # path separator, regardless of platform.
 
 
-@implementer(IFilePath)
 class ZipPath(AbstractFilePath):
     """
     I represent a file or directory contained within a zip file.
     """
 
+    implements(IFilePath)
+
     sep = ZIP_PATH_SEP
 
     def __init__(self, archive, pathInArchive):
