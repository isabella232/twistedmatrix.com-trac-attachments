Index: twisted/test/test_defgen.py
===================================================================
--- twisted/test/test_defgen.py	(revision 45131)
+++ twisted/test/test_defgen.py	(working copy)
@@ -295,7 +295,25 @@
 
         return _return().addCallback(self.assertEqual, 6)
 
+    def test_cythonGenerator(self):
+        """
+        Ensure the inlineCallbacks generator test allows anything with
+        a generator's methods through, primarily to support Cython
+        generators, which do not inherit from types.GeneratorType.
+        """
+        try:
+            import pyximport
+        except ImportError:
+            return True
+        else:
+            py_importer, pyx_importer = pyximport.install()
+            import twisted.test.defgen_cython
+            pyximport.uninstall(py_importer, pyx_importer)
 
+            _test = inlineCallbacks(twisted.test.defgen_cython.cython_inlinecallback)
+
+            return _test().addCallback(self.assertEqual, "WOOSH")
+
     def test_nonGeneratorReturn(self):
         """
         Ensure that C{TypeError} with a message about L{inlineCallbacks} is
Index: twisted/test/defgen_cython.pyx
===================================================================
--- twisted/test/defgen_cython.pyx	(revision 0)
+++ twisted/test/defgen_cython.pyx	(revision 0)
@@ -0,0 +1,35 @@
+from twisted.internet.defer import inlineCallbacks, returnValue, Deferred
+from twisted.internet import reactor
+from twisted.trial.unittest import FailTest
+
+# duplicated here because we don't want a circular import
+def getThing():
+    d = Deferred()
+    reactor.callLater(0, d.callback, "hi")
+    return d
+
+# duplicated here because we don't want a circular import
+def getOwie():
+    d = Deferred()
+    def CRAP():
+        d.errback(ZeroDivisionError('OMG'))
+    reactor.callLater(0, CRAP)
+    return d
+
+def assertEqual(x, y):
+    if(x != y):
+        raise FailTest("%r != %r" % (x, y))
+
+    return True
+
+def cython_inlinecallback():
+
+    x = yield getThing()
+
+    assertEqual(x, "hi")
+
+    try:
+        yield getOwie()
+    except ZeroDivisionError as e:
+        assertEqual(str(e), 'OMG')
+    returnValue("WOOSH")
Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 45131)
+++ twisted/internet/defer.py	(working copy)
@@ -1267,10 +1267,10 @@
             raise TypeError(
                 "inlineCallbacks requires %r to produce a generator; instead"
                 "caught returnValue being used in a non-generator" % (f,))
-        if not isinstance(gen, types.GeneratorType):
+        if not hasattr(gen, 'next'):
             raise TypeError(
-                "inlineCallbacks requires %r to produce a generator; "
-                "instead got %r" % (f, gen))
+                "inlineCallbacks requires %r to produce a generator; instead"
+                "got %r" % (f, gen))
         return _inlineCallbacks(None, gen, Deferred())
     return unwindGenerator
 
