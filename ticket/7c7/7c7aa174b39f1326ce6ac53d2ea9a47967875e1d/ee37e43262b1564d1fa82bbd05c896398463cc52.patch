Index: twisted/web/server.py
===================================================================
--- twisted/web/server.py	(revision 45104)
+++ twisted/web/server.py	(working copy)
@@ -17,7 +17,8 @@
     from urllib.parse import quote as _quote
 
     def quote(string, *args, **kwargs):
-        return _quote(string.decode('charmap'), *args, **kwargs).encode('charmap')
+        return _quote(string.decode('charmap'), *args, **kwargs)\
+            .encode('charmap')
 
 import zlib
 
@@ -115,6 +116,7 @@
         http.Request.__init__(self, *args, **kw)
         components.Componentized.__init__(self)
 
+
     def getStateToCopyFor(self, issuer):
         x = self.__dict__.copy()
         del x['transport']
@@ -138,6 +140,7 @@
 
     # HTML generation helpers
 
+
     def sibLink(self, name):
         """
         Return the text that links to a sibling of the requested resource.
@@ -157,7 +160,7 @@
             return ((lpp-1)*b"../") + name
         elif lpp == 1:
             return name
-        else: # lpp == 0
+        else:  # lpp == 0
             if len(self.prepath) and self.prepath[-1]:
                 return self.prepath[-1] + b'/' + name
             else:
@@ -202,7 +205,8 @@
             # Content-Type header should be supplied.
             modified = self.code != http.NOT_MODIFIED
             contentType = self.responseHeaders.getRawHeaders(b'content-type')
-            if modified and contentType is None and self.defaultContentType is not None:
+            if modified and contentType is None and\
+               self.defaultContentType is not None:
                 self.responseHeaders.setRawHeaders(
                     b'content-type', [self.defaultContentType])
 
@@ -209,8 +213,8 @@
         # Only let the write happen if we're not generating a HEAD response by
         # faking out the request method.  Note, if we are doing that,
         # startedWriting will never be true, and the above logic may run
-        # multiple times.  It will only actually change the responseHeaders once
-        # though, so it's still okay.
+        # multiple times.  It will only actually change the responseHeaders
+        # once though, so it's still okay.
         if not self._inFakeHead:
             if self._encoder:
                 data = self._encoder.encode(data)
@@ -268,13 +272,14 @@
                 self.setHeader(b'Allow', b', '.join(allowedMethods))
                 s = ('''Your browser approached me (at %(URI)s) with'''
                      ''' the method "%(method)s".  I only allow'''
-                     ''' the method%(plural)s %(allowed)s here.''' % {
-                    'URI': escape(nativeString(self.uri)),
-                    'method': nativeString(self.method),
-                    'plural': ((len(allowedMethods) > 1) and 's') or '',
-                    'allowed': ', '.join([nativeString(x)
-                                          for x in allowedMethods])
-                    })
+                     ''' the method%(plural)s %(allowed)s here.''' %
+                     {
+                         'URI': escape(nativeString(self.uri)),
+                         'method': nativeString(self.method),
+                         'plural': ((len(allowedMethods) > 1) and 's') or '',
+                         'allowed': ', '.join([nativeString(x)
+                                              for x in allowedMethods])
+                     })
                 epage = resource.ErrorPage(http.NOT_ALLOWED,
                                            "Method Not Allowed", s)
                 body = epage.render(self)
@@ -312,16 +317,20 @@
             self.write(body)
         self.finish()
 
+
     def processingFailed(self, reason):
         log.err(reason)
         # Re-enable on Python 3 as part of #6178:
         if not _PY3 and self.site.displayTracebacks:
-            body = ("<html><head><title>web.Server Traceback (most recent call last)</title></head>"
-                    "<body><b>web.Server Traceback (most recent call last):</b>\n\n"
+            body = ("<html><head><title>web.Server Traceback"
+                    " (most recent call last)</title></head>"
+                    "<body><b>web.Server Traceback"
+                    " (most recent call last):</b>\n\n"
                     "%s\n\n</body></html>\n"
                     % webutil.formatFailure(reason))
         else:
-            body = (b"<html><head><title>Processing Failed</title></head><body>"
+            body = (b"<html><head><title>Processing Failed"
+                    b"</title></head><body>"
                     b"<b>Processing Failed</b></body></html>")
 
         self.setResponseCode(http.INTERNAL_SERVER_ERROR)
@@ -331,31 +340,37 @@
         self.finish()
         return reason
 
+
     def view_write(self, issuer, data):
         """Remote version of write; same interface.
         """
         self.write(data)
 
+
     def view_finish(self, issuer):
         """Remote version of finish; same interface.
         """
         self.finish()
 
+
     def view_addCookie(self, issuer, k, v, **kwargs):
         """Remote version of addCookie; same interface.
         """
         self.addCookie(k, v, **kwargs)
 
+
     def view_setHeader(self, issuer, k, v):
         """Remote version of setHeader; same interface.
         """
         self.setHeader(k, v)
 
+
     def view_setLastModified(self, issuer, when):
         """Remote version of setLastModified; same interface.
         """
         self.setLastModified(when)
 
+
     def view_setETag(self, issuer, tag):
         """Remote version of setETag; same interface.
         """
@@ -375,6 +390,7 @@
         """
         self.registerProducer(_RemoteProducerWrapper(producer), streaming)
 
+
     def view_unregisterProducer(self, issuer):
         self.unregisterProducer()
 
@@ -382,7 +398,8 @@
 
     session = None
 
-    def getSession(self, sessionInterface = None):
+
+    def getSession(self, sessionInterface=None):
         # Session management
         if not self.session:
             cookiename = b"_".join([b'TWISTED_SESSION'] + self.sitepath)
@@ -401,6 +418,7 @@
             return self.session.getComponent(sessionInterface)
         return self.session
 
+
     def _prePathURL(self, prepath):
         port = self.getHost().port
         if self.isSecure():
@@ -418,13 +436,16 @@
         path = b'/'.join([quote(segment, safe=b'') for segment in prepath])
         return prefix + path
 
+
     def prePathURL(self):
         return self._prePathURL(self.prepath)
 
+
     def URLPath(self):
         from twisted.python import urlpath
         return urlpath.URLPath.fromRequest(self)
 
+
     def rememberRootURL(self):
         """
         Remember the currently-processed part of the URL for later
@@ -433,6 +454,7 @@
         url = self._prePathURL(self.prepath[:-1])
         self.appRootURL = url
 
+
     def getRootURL(self):
         """
         Get a previously-remembered URL.
@@ -524,6 +546,7 @@
         self.stopProducing = remote.remoteMethod("stopProducing")
 
 
+
 class Session(components.Componentized):
     """
     A user's session with a system.
@@ -635,15 +658,18 @@
         if requestFactory is not None:
             self.requestFactory = requestFactory
 
+
     def _openLogFile(self, path):
         from twisted.python import logfile
         return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
 
+
     def __getstate__(self):
         d = self.__dict__.copy()
         d['sessions'] = {}
         return d
 
+
     def _mkuid(self):
         """
         (internal) Generate an opaque, unique ID for a user's session.
@@ -652,9 +678,10 @@
         import random
         self.counter = self.counter + 1
         return md5(networkString(
-                "%s_%s" % (str(random.random()) , str(self.counter)))
+                "%s_%s" % (str(random.random()), str(self.counter)))
                    ).hexdigest()
 
+
     def makeSession(self):
         """
         Generate a new Session instance, and store it for future reference.
@@ -664,6 +691,7 @@
         session.startCheckingExpiration()
         return session
 
+
     def getSession(self, uid):
         """
         Get a previously generated session, by its unique ID.
@@ -671,6 +699,7 @@
         """
         return self.sessions[uid]
 
+
     def buildProtocol(self, addr):
         """
         Generate a channel attached to this site.
@@ -689,6 +718,7 @@
         request.redirect(request.prePathURL() + b'/')
         request.finish()
 
+
     def getChildWithDefault(self, pathEl, request):
         """
         Emulate a resource's getChild method.
@@ -696,6 +726,7 @@
         request.site = self
         return self.resource.getChildWithDefault(pathEl, request)
 
+
     def getResourceFor(self, request):
         """
         Get a resource for a request.
Index: twisted/web/topfiles/7949.misc
===================================================================
