diff --git doc/web/howto/client.xhtml doc/web/howto/client.xhtml
index 9471407..189fcb3 100644
--- doc/web/howto/client.xhtml
+++ doc/web/howto/client.xhtml
@@ -288,32 +288,10 @@
       Here's an example which shows how to use <code>Agent</code> to request
       an <em>HTTPS</em> URL with no certificate verification.
     </p>
-
-    <pre class="python">
-from twisted.python.log import err
-from twisted.web.client import Agent
-from twisted.internet import reactor
-from twisted.internet.ssl import ClientContextFactory
-
-class WebClientContextFactory(ClientContextFactory):
-    def getContext(self, hostname, port):
-        return ClientContextFactory.getContext(self)
-
-def display(response):
-    print "Received response"
-    print response
-
-def main():
-    contextFactory = WebClientContextFactory()
-    agent = Agent(reactor, contextFactory)
-    d = agent.request("GET", "https://example.com/")
-    d.addCallbacks(display, err)
-    d.addCallback(lambda ignored: reactor.stop())
-    reactor.run()
-
-if __name__ == "__main__":
-    main()
-    </pre>
+	
+	<a href="listings/client/requestHTTPS.py" class="py-listing">
+      Request an HTTPS URL with no certificate verification..
+    </a>
 
     <p>
       The important point to notice here is that <code>getContext</code> now
@@ -356,46 +334,9 @@ if __name__ == "__main__":
       Here's an example which sends requests over a persistent connection:
     </p>
 
-    <pre class="python">
-from twisted.internet import reactor
-from twisted.internet.defer import Deferred, DeferredList
-from twisted.internet.protocol import Protocol
-from twisted.web.client import Agent, HTTPConnectionPool
-
-class IgnoreBody(Protocol):
-    def __init__(self, deferred):
-        self.deferred = deferred
-
-    def dataReceived(self, bytes):
-        pass
-
-    def connectionLost(self, reason):
-        self.deferred.callback(None)
-
-
-def cbRequest(response):
-    print 'Response code:', response.code
-    finished = Deferred()
-    response.deliverBody(IgnoreBody(finished))
-    return finished
-
-pool = HTTPConnectionPool(reactor)
-agent = Agent(reactor, pool=pool)
-
-def requestGet(url):
-    d = agent.request('GET', url)
-    d.addCallback(cbRequest)
-    return d
-
-# Two requests to the same host:
-d = requestGet('http://localhost:8080/foo').addCallback(
-    lambda ign: requestGet("http://localhost:8080/bar"))
-def cbShutdown(ignored):
-    reactor.stop()
-d.addCallback(cbShutdown)
-
-reactor.run()
-    </pre>
+	<a href="listings/client/persistentHTTP.py" class="py-listing">
+      Requests over a persistent connection
+    </a>
 
     <p>
       Here, the two requests are to the same host, one after the each
diff --git doc/web/howto/listings/client/cookies.py doc/web/howto/listings/client/cookies.py
index 80f84c2..57eded2 100644
--- doc/web/howto/listings/client/cookies.py
+++ doc/web/howto/listings/client/cookies.py
@@ -1,6 +1,6 @@
 from cookielib import CookieJar
 
-from twisted.internet import reactor
+from twisted.internet import task
 from twisted.python import log
 from twisted.web.client import Agent, CookieAgent
 
@@ -11,15 +11,15 @@ def displayCookies(response, cookieJar):
     for cookie in cookieJar:
         print cookie
 
-def main():
+def main(reactor):
     cookieJar = CookieJar()
     agent = CookieAgent(Agent(reactor), cookieJar)
 
     d = agent.request('GET', 'http://www.google.com/')
     d.addCallback(displayCookies, cookieJar)
     d.addErrback(log.err)
-    d.addCallback(lambda ignored: reactor.stop())
-    reactor.run()
+
+    return d
 
 if __name__ == "__main__":
-    main()
+    task.react(main)
\ No newline at end of file
diff --git doc/web/howto/listings/client/filesendbody.py doc/web/howto/listings/client/filesendbody.py
index ed26238..2a31961 100644
--- doc/web/howto/listings/client/filesendbody.py
+++ doc/web/howto/listings/client/filesendbody.py
@@ -1,26 +1,25 @@
 from StringIO import StringIO
 
-from twisted.internet import reactor
+from twisted.internet import task
 from twisted.web.client import Agent
 from twisted.web.http_headers import Headers
 
 from twisted.web.client import FileBodyProducer
 
-agent = Agent(reactor)
-body = FileBodyProducer(StringIO("hello, world"))
-d = agent.request(
-    'GET',
-    'http://example.com/',
-    Headers({'User-Agent': ['Twisted Web Client Example'],
-             'Content-Type': ['text/x-greeting']}),
-    body)
+def main(reactor):
+    agent = Agent(reactor)
+    body = FileBodyProducer(StringIO("hello, world"))
+    d = agent.request(
+        'GET',
+        'http://example.com/',
+        Headers({'User-Agent': ['Twisted Web Client Example'],
+                 'Content-Type': ['text/x-greeting']}),
+        body)
 
-def cbResponse(ignored):
-    print 'Response received'
-d.addCallback(cbResponse)
+    def cbResponse(ignored):
+        print 'Response received'
+    d.addCallback(cbResponse)
 
-def cbShutdown(ignored):
-    reactor.stop()
-d.addBoth(cbShutdown)
+    return d
 
-reactor.run()
+task.react(main)
\ No newline at end of file
diff --git doc/web/howto/listings/client/gzipdecoder.py doc/web/howto/listings/client/gzipdecoder.py
index dc6af43..4129ce9 100644
--- doc/web/howto/listings/client/gzipdecoder.py
+++ doc/web/howto/listings/client/gzipdecoder.py
@@ -1,5 +1,5 @@
 from twisted.python import log
-from twisted.internet import reactor
+from twisted.internet import task
 from twisted.internet.defer import Deferred
 from twisted.internet.protocol import Protocol
 from twisted.web.client import Agent, ContentDecoderAgent, GzipDecoder
@@ -9,7 +9,6 @@ class BeginningPrinter(Protocol):
         self.finished = finished
         self.remaining = 1024 * 10
 
-
     def dataReceived(self, bytes):
         if self.remaining:
             display = bytes[:self.remaining]
@@ -17,27 +16,23 @@ class BeginningPrinter(Protocol):
             print display
             self.remaining -= len(display)
 
-
     def connectionLost(self, reason):
         print 'Finished receiving body:', reason.type, reason.value
         self.finished.callback(None)
 
-
-
 def printBody(response):
     finished = Deferred()
     response.deliverBody(BeginningPrinter(finished))
     return finished
 
-
-def main():
+def main(reactor):
     agent = ContentDecoderAgent(Agent(reactor), [('gzip', GzipDecoder)])
 
     d = agent.request('GET', 'http://www.yahoo.com/')
     d.addCallback(printBody)
     d.addErrback(log.err)
-    d.addCallback(lambda ignored: reactor.stop())
-    reactor.run()
+
+    return d
 
 if __name__ == "__main__":
-    main()
+    task.react(main)
diff --git doc/web/howto/listings/client/persistentHTTP.py doc/web/howto/listings/client/persistentHTTP.py
new file mode 100644
index 0000000..b252885
--- /dev/null
+++ doc/web/howto/listings/client/persistentHTTP.py
@@ -0,0 +1,38 @@
+from twisted.internet import task
+from twisted.internet.defer import Deferred, DeferredList
+from twisted.internet.protocol import Protocol
+from twisted.web.client import Agent, HTTPConnectionPool
+
+class IgnoreBody(Protocol):
+    def __init__(self, deferred):
+        self.deferred = deferred
+
+    def dataReceived(self, bytes):
+        pass
+
+    def connectionLost(self, reason):
+        self.deferred.callback(None)
+
+
+def cbRequest(response):
+    print 'Response code:', response.code
+    finished = Deferred()
+    response.deliverBody(IgnoreBody(finished))
+    return finished
+
+def main(reactor):
+
+    pool = HTTPConnectionPool(reactor)
+    agent = Agent(reactor, pool=pool)
+    
+    def requestGet(url):
+        d = agent.request('GET', url)
+        d.addCallback(cbRequest)
+        return d
+    # Two requests to the same host:
+    d = requestGet('http://localhost:8080/foo').addCallback(
+    lambda ign: requestGet("http://localhost:8080/bar"))
+    
+    return d
+    
+task.react(main)
\ No newline at end of file
diff --git doc/web/howto/listings/client/request.py doc/web/howto/listings/client/request.py
index 4931863..5616764 100644
--- doc/web/howto/listings/client/request.py
+++ doc/web/howto/listings/client/request.py
@@ -1,21 +1,19 @@
-from twisted.internet import reactor
+from twisted.internet import task
 from twisted.web.client import Agent
 from twisted.web.http_headers import Headers
 
-agent = Agent(reactor)
+def main(reactor):
+    agent = Agent(reactor)
+    d = agent.request(
+        'GET',
+        'http://google.com/',
+        Headers({'User-Agent': ['Twisted Web Client Example']}),
+        None)
 
-d = agent.request(
-    'GET',
-    'http://example.com/',
-    Headers({'User-Agent': ['Twisted Web Client Example']}),
-    None)
+    def cbResponse(ignored):
+        print 'Response received'
+    d.addCallback(cbResponse)
 
-def cbResponse(ignored):
-    print 'Response received'
-d.addCallback(cbResponse)
+    return d
 
-def cbShutdown(ignored):
-    reactor.stop()
-d.addBoth(cbShutdown)
-
-reactor.run()
+task.react(main)
\ No newline at end of file
diff --git doc/web/howto/listings/client/requestHTTPS.py doc/web/howto/listings/client/requestHTTPS.py
new file mode 100644
index 0000000..cbd49ff
--- /dev/null
+++ doc/web/howto/listings/client/requestHTTPS.py
@@ -0,0 +1,24 @@
+from twisted.python.log import err
+from twisted.web.client import Agent
+from twisted.internet import task
+from twisted.internet.ssl import ClientContextFactory
+
+class WebClientContextFactory(ClientContextFactory):
+    def getContext(self, hostname, port):
+        return ClientContextFactory.getContext(self)
+
+def display(response):
+    print "Received response"
+    print response
+
+def main(reactor):
+    contextFactory = WebClientContextFactory()
+    agent = Agent(reactor, contextFactory)
+
+    d = agent.request("GET", "https://example.com/")
+    d.addCallbacks(display, err)
+
+    return d
+
+if __name__ == "__main__":
+    task.react(main)
\ No newline at end of file
diff --git doc/web/howto/listings/client/response.py doc/web/howto/listings/client/response.py
index 6b3547c..5a4fb90 100644
--- doc/web/howto/listings/client/response.py
+++ doc/web/howto/listings/client/response.py
@@ -1,6 +1,6 @@
 from pprint import pformat
 
-from twisted.internet import reactor
+from twisted.internet import task
 from twisted.internet.defer import Deferred
 from twisted.internet.protocol import Protocol
 from twisted.web.client import Agent
@@ -22,26 +22,25 @@ class BeginningPrinter(Protocol):
         print 'Finished receiving body:', reason.getErrorMessage()
         self.finished.callback(None)
 
-agent = Agent(reactor)
-d = agent.request(
-    'GET',
-    'http://example.com/',
-    Headers({'User-Agent': ['Twisted Web Client Example']}),
-    None)
-
-def cbRequest(response):
-    print 'Response version:', response.version
-    print 'Response code:', response.code
-    print 'Response phrase:', response.phrase
-    print 'Response headers:'
-    print pformat(list(response.headers.getAllRawHeaders()))
-    finished = Deferred()
-    response.deliverBody(BeginningPrinter(finished))
-    return finished
-d.addCallback(cbRequest)
-
-def cbShutdown(ignored):
-    reactor.stop()
-d.addBoth(cbShutdown)
-
-reactor.run()
+def main(reactor):
+    agent = Agent(reactor)
+    d = agent.request(
+        'GET',
+        'http://example.com/',
+        Headers({'User-Agent': ['Twisted Web Client Example']}),
+        None)
+
+    def cbRequest(response):
+        print 'Response version:', response.version
+        print 'Response code:', response.code
+        print 'Response phrase:', response.phrase
+        print 'Response headers:'
+        print pformat(list(response.headers.getAllRawHeaders()))
+        finished = Deferred()
+        response.deliverBody(BeginningPrinter(finished))
+        return finished
+    d.addCallback(cbRequest)
+
+    return d
+
+task.react(main)
diff --git doc/web/howto/listings/client/sendbody.py doc/web/howto/listings/client/sendbody.py
index 31cac8f..5c338ec 100644
--- doc/web/howto/listings/client/sendbody.py
+++ doc/web/howto/listings/client/sendbody.py
@@ -1,24 +1,23 @@
-from twisted.internet import reactor
+from twisted.internet import task
 from twisted.web.client import Agent
 from twisted.web.http_headers import Headers
 
 from stringprod import StringProducer
 
-agent = Agent(reactor)
-body = StringProducer("hello, world")
-d = agent.request(
-    'GET',
-    'http://example.com/',
-    Headers({'User-Agent': ['Twisted Web Client Example'],
-             'Content-Type': ['text/x-greeting']}),
-    body)
+def main(reactor):
+    agent = Agent(reactor)
+    body = StringProducer("hello, world")
+    d = agent.request(
+        'GET',
+        'http://example.com/',
+        Headers({'User-Agent': ['Twisted Web Client Example'],
+                 'Content-Type': ['text/x-greeting']}),
+        body)
 
-def cbResponse(ignored):
-    print 'Response received'
-d.addCallback(cbResponse)
+    def cbResponse(ignored):
+        print 'Response received'
+    d.addCallback(cbResponse)
 
-def cbShutdown(ignored):
-    reactor.stop()
-d.addBoth(cbShutdown)
+    return d
 
-reactor.run()
+task.react(main)
\ No newline at end of file
