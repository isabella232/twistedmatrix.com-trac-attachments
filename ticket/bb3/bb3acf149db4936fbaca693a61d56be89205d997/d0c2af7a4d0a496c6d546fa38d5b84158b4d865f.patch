diff -r eb14b0918a10 python/log.py
--- a/python/log.py	Sat Aug 05 04:02:16 2006 +0200
+++ b/python/log.py	Mon Aug 07 19:31:03 2006 +0200
@@ -281,7 +281,8 @@ class FileLogObserver:
                 # we don't know how to log this
                 return
         else:
-            text = ' '.join(map(reflect.safe_str, edm))
+            text = ' '.join(map(lambda s: reflect.safe_str(s, 
+                                    eventDict.get("encoding", None)), edm))
 
         timeStr = time.strftime(self.timeFormat, time.localtime(eventDict['time']))
         fmtDict = {'system': eventDict['system'], 'text': text.replace("\n", "\n\t")}
@@ -307,9 +308,10 @@ class StdioOnnaStick:
     mode = 'wb'
     name = '<stdio (log)>'
 
-    def __init__(self, isError=0):
+    def __init__(self, isError=0, encoding=None):
         self.isError = isError
         self.buf = ''
+        self.encoding = encoding or sys.stdout.encoding
 
     def close(self):
         pass
@@ -333,11 +335,11 @@ class StdioOnnaStick:
         self.buf = d[-1]
         messages = d[0:-1]
         for message in messages:
-            msg(message, printed=1, isError=self.isError)
+            msg(message, printed=1, isError=self.isError, encoding=self.encoding)
 
     def writelines(self, lines):
         for line in lines:
-            msg(line, printed=1, isError=self.isError)
+            msg(line, printed=1, isError=self.isError, encoding=self.encoding)
 
 
 try:
diff -r eb14b0918a10 python/reflect.py
--- a/python/reflect.py	Sat Aug 05 04:02:16 2006 +0200
+++ b/python/reflect.py	Mon Aug 07 19:21:55 2006 +0200
@@ -452,7 +452,7 @@ def safe_repr(o):
             whati,swron,gwith)
         return you
 
-def safe_str(o):
+def safe_str(o, encoding=None):
     """safe_str(anything) -> string
 
     Returns a string representation of an object, or a string containing a
@@ -460,7 +460,13 @@ def safe_str(o):
     """
 
     try:
-        return str(o)
+        try:
+            s = str(o)
+        except UnicodeEncodeError:
+            s = unicode(o)
+        if encoding:
+            s = s.encode(encoding)
+        return s
     except:
         strExc = '\n'.join(traceback.format_exception(*sys.exc_info()))
         clsName = _determineClassName(o)
