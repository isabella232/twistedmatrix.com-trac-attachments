Index: twisted/test/test_doc.py
===================================================================
--- twisted/test/test_doc.py	(revision 32801)
+++ twisted/test/test_doc.py	(working copy)
@@ -1,13 +1,19 @@
-from twisted.trial import unittest
-import inspect, glob, os
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+import inspect, glob
 from os import path
 
+from twisted.trial import unittest
 from twisted.python import reflect
-
+from twisted.python.filepath import FilePath
 import twisted
 
+
+
 def errorInFile(f, line=17, name=''):
-    """Return a filename formatted so emacs will recognize it as an error point
+    """
+    Return a filename formatted so emacs will recognize it as an error point
 
     @param line: Line number in file.  Defaults to 17 because that's about how
         long the copyright headers are.
@@ -15,19 +21,29 @@
     return '%s:%d:%s' % (f, line, name)
     # return 'File "%s", line %d, in %s' % (f, line, name)
 
+
 class DocCoverage(unittest.TestCase):
+    """
+    Verify if all modules and packages have a docstring.
+    """
     def setUp(self):
-        remove = len(os.path.dirname(os.path.dirname(twisted.__file__)))+1
-        def visit(dirlist, directory, files):
-            if '__init__.py' in files:
-                d = directory[remove:].replace('/','.')
-                dirlist.append(d)
         self.packageNames = []
-        os.path.walk(os.path.dirname(twisted.__file__),
-                     visit, self.packageNames)
+        def search(topdir):
+            for fname in topdir.walk(lambda(s): s.child("__init__.py").exists()):
+                if fname.basename() == "__init__.py":
+                    subpack = fname.segmentsFrom(topdir)[:-1]
+                    fname = topdir.basename()
+                    if len(subpack) > 0:
+                        fname += '.'
+                    yield fname + '.'.join(subpack) 
+        for package in search(FilePath(twisted.__file__).parent()):
+            self.packageNames.append(package)
+
 
     def testModules(self):
-        """Looking for docstrings in all modules."""
+        """
+        Looking for docstrings in all modules.
+        """
         docless = []
         for packageName in self.packageNames:
             if packageName in ('twisted.test',):
@@ -46,6 +62,7 @@
         self.failIf(docless, "No docstrings in module files:\n"
                     "%s" % ('\n'.join(map(errorInFile, docless)),))
 
+
     def modulesInPackage(self, packageName, package):
         docless = []
         directory = path.dirname(package.__file__)
@@ -69,8 +86,11 @@
                     docless.append(modfile)
         return docless
 
+
     def testPackages(self):
-        """Looking for docstrings in all packages."""
+        """
+        Looking for docstrings in all packages.
+        """
         docless = []
         for packageName in self.packageNames:
             try:
