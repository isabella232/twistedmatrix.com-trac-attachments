Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 30077)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -1309,35 +1309,49 @@
         self.assertEquals(1, len(self.client.lines))
 
 
-    def test_newlinesCauseNewLines(self):
+    def test_newlinesAtStart(self):
         """
-        An LF in a message causes two lines to be sent.
+        An LF at the beginning of the message is ignored.
         """
-        subtests = [
-                # Leading LFs are ignored.
-                ('\nbar', ['PRIVMSG foo :bar']),
-                # Trailing LFs are ignored.
-                ('bar\n', ['PRIVMSG foo :bar']),
-                # LFs inside a message cause a new line.
-                ('bar\nbaz', [
-                    'PRIVMSG foo :bar',
-                    'PRIVMSG foo :baz',
-                ]),
-                # Consecutive LFs do not cause a blank line.
-                ('bar\n\nbaz', [
-                    'PRIVMSG foo :bar',
-                    'PRIVMSG foo :baz',
-                ]),
-            ]
+        self.client.lines = []
+        self.client.msg('foo', '\nbar')
+        
+        self.assertEquals(self.client.lines, ['PRIVMSG foo :bar'])
+        
+    def test_newlinesAtEnd(self):
+        """
+        An LF at the end of the message is ignored.
+        """
+        self.client.lines = []
+        self.client.msg('foo', 'bar\n')
 
-        for msg, expectedLines in subtests:
-            self.client.lines = []
-            self.client.msg('foo', msg)
+        self.assertEquals(self.client.lines, ['PRIVMSG foo :bar'])
 
-            self.assertEquals(self.client.lines, expectedLines,
-                    "Message content was %r" % (msg,))
+    def test_newlinesWithinMessage(self):
+        """
+        An LF within a message causes a new line.
+        """
+        self.client.lines = []
+        self.client.msg('foo', 'bar\n\nbaz')
 
+        self.assertEquals(self.client.lines, [
+                                             'PRIVMSG foo :bar',
+                                             'PRIVMSG foo :baz'
+                                             ],    
+                         )
+                         
+    def test_consecutiveNewlines(self):
+        """
+        Consecutive LFs do not cause a blank line.
+        """
+        self.client.lines = []
+        self.client.msg('foo', 'bar\n\nbaz')
 
+        self.assertEquals(self.client.lines, [
+                                            'PRIVMSG foo :bar',
+                                            'PRIVMSG foo :baz',
+                                             ])
+
     def test_longLinesCauseNewLines(self):
         """
         Lines that would break the 512-byte barrier cause two lines to be sent.
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 30077)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -94,13 +94,9 @@
 
     @returns: list of strings
     """
-    res = []
-    for line in str.split("\n"):
-        res.extend(textwrap.wrap(line, length))
-    return res
+    return [chunk for line in str.split('\n')
+                  for chunk in textwrap.wrap(line, length)]
 
-
-
 def _intOrDefault(value, default=None):
     """
     Convert a value to an integer if possible.
@@ -1440,7 +1436,7 @@
         self.msg(channel, message, length)
 
 
-    def msg(self, user, message, length = MAX_COMMAND_LENGTH):
+    def msg(self, user, message, length=MAX_COMMAND_LENGTH):
         """
         Send a message to a user or channel.
 
