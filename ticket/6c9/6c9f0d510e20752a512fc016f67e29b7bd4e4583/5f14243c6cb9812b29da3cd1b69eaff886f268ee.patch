Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 34733)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -3531,6 +3531,24 @@
     def testFetchBodyStructureUID(self):
         return self.testFetchBodyStructure(1)
 
+    def testFetchBodyStructureBadHeader(self, uid=0):
+        self.function = self.client.fetchBodyStructure
+        self.messages = '3:9,10:*'
+        self.msgObjs = [FakeyMessage({
+                'content-type': 'text/plain;',
+                'content-id': 'this-is-the-content-id',
+                'content-description': 'describing-the-content-goes-here!',
+                'content-transfer-encoding': '8BIT',
+            }, (), '', 'Body\nText\nGoes\nHere\n', 919293, None)]
+        self.expected = {0: {'BODYSTRUCTURE': [
+            'text', 'plain', [],
+            'this-is-the-content-id', 'describing-the-content-goes-here!',
+            '8BIT', '20', '4', None, None, None]}}
+        return self._fetchWork(uid)
+
+    def testFetchBodyStructureBadHeaderUID(self):
+        return self.testFetchBodyStructureBadHeader(1)
+
     def testFetchSimplifiedBody(self, uid=0):
         self.function = self.client.fetchSimplifiedBody
         self.messages = '21'
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 34733)
+++ twisted/mail/imap4.py	(working copy)
@@ -4822,7 +4822,8 @@
     # BODYSTRUCTURE is obscenely complex and criminally under-documented.
 
     attrs = {}
-    headers = 'content-type', 'content-id', 'content-description', 'content-transfer-encoding'
+    headers = 'content-type', 'content-id', 'content-description', \
+              'content-transfer-encoding'
     headers = msg.getHeaders(False, *headers)
     mm = headers.get('content-type')
     if mm:
@@ -4837,7 +4838,12 @@
                 major, minor = type
             else:
                 major = minor = None
-            attrs = dict([x.strip().lower().split('=', 1) for x in mimetype[1:]])
+            # Some bad clients don't follow rfc2045 and send content-type
+            # headers without a single parameter. The following check prevents
+            # the ValueError exception when encounters them.
+            if len(mimetype) == 1 or mimetype[1]:
+                attrs = dict(
+                    [x.strip().lower().split('=', 1) for x in mimetype[1:]])
         else:
             major = minor = None
     else:
