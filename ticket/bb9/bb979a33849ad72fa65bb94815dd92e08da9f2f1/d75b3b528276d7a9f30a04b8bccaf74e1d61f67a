Index: twisted/protocols/amp.py
===================================================================
--- twisted/protocols/amp.py	(revision 21181)
+++ twisted/protocols/amp.py	(working copy)
@@ -1208,6 +1208,10 @@
 
         @return: An instance of this L{Command}'s C{commandType}.
         """
+	argnames = [arg[0] for arg in cls.arguments]
+	for intendedArg in objects:
+	    if intendedArg not in argnames:
+		raise InvalidSignature
         return _objectsToStrings(objects, cls.arguments, cls.commandType(),
                                  proto)
     makeArguments = classmethod(makeArguments)
Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(revision 21181)
+++ twisted/test/test_amp.py	(working copy)
@@ -5,6 +5,7 @@
 from twisted.python import filepath
 from twisted.protocols import amp
 from twisted.test import iosim
+from twisted.test.proto_helpers import StringTransport
 from twisted.trial import unittest
 from twisted.internet import protocol, defer, error
 
@@ -1578,3 +1579,38 @@
                              ({"weird": argument}, client))
         response.addCallback(gotResponse)
         return response
+
+class MockCommand(amp.Command):
+    """
+    Try what happens when this is called with a wrong argument
+    """
+    arguments = [('optArg',amp.String(optional = True))]
+    response = [('result',amp.Boolean())]
+
+class TestProtocol(amp.AMP):
+    """
+    An C{AMP} subclass that responds to MockCommand and returns True if the argument was passed
+    """
+    def mockResponder(self,optArg=None):
+        return {'result':(optArg is not None)}
+    MockCommand.responder(mockResponder)
+
+    def doSomethingWrong(self):
+        """
+        This calls MockCommand with an unexisting parameter. It should fail
+        """
+        d = self.callRemote(MockCommand,thisargdoesntexist="hello")
+        return d.addCallback(lambda res: res['result'])
+
+class callRemoteWrongSignature(unittest.TestCase):
+    """
+    Test that C{AMP} raises InvalidSignature if callRemote gets called with arguments the command is not expecting
+    """
+    def setUp(self):
+        self.proto = TestProtocol()
+        t = StringTransport()
+        t.protocol = self.proto
+        self.proto.makeConnection(t)
+
+    def test_WrongParam(self):
+        self.assertRaises(amp.InvalidSignature,self.proto.doSomethingWrong)
