diff --git a/twisted/web/client.py b/twisted/web/client.py
index ae6b904..4b9a56e 100644
--- a/twisted/web/client.py
+++ b/twisted/web/client.py
@@ -246,7 +246,7 @@ class HTTPPageGetter(http.HTTPClient):
 
     def timeout(self):
         self.quietLoss = True
-        self.transport.loseConnection()
+        self.transport.abortConnection()
         self.factory.noPage(defer.TimeoutError("Getting %s took longer than %s seconds." % (self.factory.url, self.factory.timeout)))
 
 
diff --git a/twisted/web/test/test_webclient.py b/twisted/web/test/test_webclient.py
index 59f39d9..bd3f37c 100644
--- a/twisted/web/test/test_webclient.py
+++ b/twisted/web/test/test_webclient.py
@@ -90,6 +90,20 @@ class ForeverTakingResource(resource.Resource):
         return server.NOT_DONE_YET
 
 
+class ForeverTakingNoReadingResource(resource.Resource):
+    """
+    L{ForeverTakingNoReadingResource} is a resource that never finishes
+    responding and that removes itself from the read loop.
+    """
+    def __init__(self):
+        resource.Resource.__init__(self)
+
+    def render(self, request):
+        # Stop the producing.
+        request.transport.pauseProducing()
+        return server.NOT_DONE_YET
+
+
 class CookieMirrorResource(resource.Resource):
     def render(self, request):
         l = []
@@ -291,6 +305,7 @@ class WebClientTests(unittest.TestCase):
         r.putChild(b"infiniteRedirect", self.infiniteRedirectResource)
         r.putChild(b"wait", ForeverTakingResource())
         r.putChild(b"write-then-wait", ForeverTakingResource(write=True))
+        r.putChild(b"never-read", ForeverTakingNoReadingResource())
         r.putChild(b"error", ErrorResource())
         r.putChild(b"nolength", NoLengthResource())
         r.putChild(b"host", HostHeaderResource())
@@ -725,6 +740,25 @@ class WebClientTests(unittest.TestCase):
             self.assertFailure(second, defer.TimeoutError)])
 
 
+    def test_downloadTimeoutsWorkWithoutReading(self):
+        """
+        If the timeout indicated by the C{timeout} parameter to
+        L{client.HTTPDownloader.__init__} elapses without the complete response
+        being received, the L{defer.Deferred} returned by
+        L{client.downloadPage} fires with a L{Failure} wrapping a
+        L{defer.TimeoutError}, even if the remote peer isn't reading data from
+        the socket.
+        """
+        self.cleanupServerConnections = 1
+
+        # The timeout here needs to be slightly longer to give the resource a
+        # change to stop the reading.
+        d = client.downloadPage(
+            self.getURL("never-read"),
+            self.mktemp(), timeout=0.05)
+        return self.assertFailure(d, defer.TimeoutError)
+
+
     def test_downloadHeaders(self):
         """
         After L{client.HTTPDownloader.deferred} fires, the
diff --git a/twisted/web/topfiles/8318.bugfix b/twisted/web/topfiles/8318.bugfix
new file mode 100644
index 0000000..6895867
--- /dev/null
+++ b/twisted/web/topfiles/8318.bugfix
@@ -0,0 +1 @@
+Resolved bug where timeouts as part of getPage, downloadPage, and HTTPClientFactory could fail to fire on TLS connections where the remote party is not responding on the connection.
\ No newline at end of file
