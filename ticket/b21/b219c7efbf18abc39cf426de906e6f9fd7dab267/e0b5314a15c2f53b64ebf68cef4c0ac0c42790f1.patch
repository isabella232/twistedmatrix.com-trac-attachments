diff --git twisted/persisted/styles.py twisted/persisted/styles.py
index e3ca39b..c8a05ca 100644
--- twisted/persisted/styles.py
+++ twisted/persisted/styles.py
@@ -2,7 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-
+from __future__ import division, absolute_import
 
 """
 Different styles of persisted objects.
@@ -10,15 +10,24 @@ Different styles of persisted objects.
 
 # System Imports
 import types
-import copy_reg
 import copy
 import inspect
 import sys
 
+from twisted.python.compat import _PY3
+if _PY3:
+    import copyreg as copy_reg
+else:
+    import copy_reg
 try:
     import cStringIO as StringIO
 except ImportError:
-    import StringIO
+    if _PY3:
+        import io as StringIO
+    else:
+        import StringIO
+
+
 
 # Twisted Imports
 from twisted.python import log
diff --git twisted/python/compat.py twisted/python/compat.py
index da759b3..e55c303 100644
--- twisted/python/compat.py
+++ twisted/python/compat.py
@@ -425,6 +425,12 @@ except ImportError:
     # Python 3+
     FileType = IOBase
 
+if _PY3:
+    import urllib.parse as urllib_parse
+else:
+    import urllib
+    import urlparse as urllib_parse
+    urllib_parse.unquote = urllib.unquote
 
 __all__ = [
     "reraise",
@@ -444,4 +450,5 @@ __all__ = [
     "StringType",
     "InstanceType",
     "FileType",
+    "urllib_parse",
     ]
diff --git twisted/python/dist3.py twisted/python/dist3.py
index abf6457..5ed30c5 100644
--- twisted/python/dist3.py
+++ twisted/python/dist3.py
@@ -132,6 +132,7 @@ modules = [
     "twisted.web.test",
     "twisted.web.test.requesthelper",
     "twisted.web._version",
+    "twisted.web.xmlrpc",
 ]
 
 
@@ -224,6 +225,7 @@ testModules = [
     "twisted.web.test.test_newclient",
     "twisted.web.test.test_resource",
     "twisted.web.test.test_web",
+    "twisted.web.test.test_xmlrpc",
 ]
 
 
@@ -234,10 +236,16 @@ almostModules = [
     # twisted.names.client semi-depends on twisted.names.root, but only on
     # Windows really:
     "twisted.names.root",
+    # Required for twisted.web.xmlrpc
+    "twisted.persisted.styles",
     # Missing test coverage:
     "twisted.protocols.loopback",
     # Minimally used by setup3.py:
     "twisted.python.dist",
+    # Required for twisted.web.xmlrpc
+    "twisted.python.modules",
+    # Required for twisted.web.xmlrpc
+    "twisted.python.urlpath",
     # twisted.python.filepath depends on twisted.python.win32, but on Linux it
     # only really needs to import:
     "twisted.python.win32",
@@ -246,6 +254,10 @@ almostModules = [
     "twisted.test.reflect_helper_ZDE",
     # Required by some of the ported trial tests:
     "twisted.trial.reporter",
+    # Required for twisted.web.xmlrpc
+    "twisted.web._element",
+    # Required for twisted.web.xmlrpc
+    "twisted.web._flatten",
     # Agent code and downloadPage aren't ported, test coverage isn't complete:
     "twisted.web.client",
     # twisted.web.resource depends on twisted.web.error, so it is sorta
@@ -263,6 +275,12 @@ almostModules = [
     # GzipEncoder and allowed methods functionality not ported, no doubt
     # missing lots of test coverage:
     "twisted.web.server",
+    # Required for twisted.web.xmlrpc
+    "twisted.web.static",
+    # Required for twisted.web.xmlrpc
+    "twisted.web.template",
+    # Required for twisted.web.xmlrpc
+    "twisted.web.util",
 ]
 
 
diff --git twisted/python/modules.py twisted/python/modules.py
index 886b566..b98f637 100644
--- twisted/python/modules.py
+++ twisted/python/modules.py
@@ -2,6 +2,9 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+# This will break on Python 2, see bug #7794 for details
+#from __future__ import division, absolute_import
+
 """
 This module aims to provide a unified, object-oriented view of Python's
 runtime hierarchy.
@@ -68,6 +71,7 @@ from twisted.python.components import registerAdapter
 from twisted.python.filepath import FilePath, UnlistableError
 from twisted.python.zippath import ZipArchive
 from twisted.python.reflect import namedAny
+from twisted.python.compat import networkString
 
 _nothing = object()
 
@@ -482,7 +486,7 @@ class IPathImportMapper(Interface):
 class _DefaultMapImpl:
     """ Wrapper for the default importer, i.e. None.  """
     def mapPath(self, fsPathString):
-        return FilePath(fsPathString)
+        return FilePath(networkString(fsPathString))
 _theDefaultMapper = _DefaultMapImpl()
 
 
@@ -622,7 +626,7 @@ class PythonPath:
         while '.' in topPackageObj.__name__:
             topPackageObj = self.moduleDict['.'.join(
                     topPackageObj.__name__.split('.')[:-1])]
-        if _isPackagePath(FilePath(topPackageObj.__file__)):
+        if _isPackagePath(FilePath(networkString(topPackageObj.__file__))):
             # if package 'foo' is on sys.path at /a/b/foo, package 'foo's
             # __file__ will be /a/b/foo/__init__.py, and we are looking for
             # /a/b here, the path-entry; so go up two steps.
diff --git twisted/python/urlpath.py twisted/python/urlpath.py
index 1c15f09..31006e5 100644
--- twisted/python/urlpath.py
+++ twisted/python/urlpath.py
@@ -2,10 +2,10 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-#
+from __future__ import division, absolute_import
 
-import urlparse
-import urllib
+#
+from twisted.python.compat import urllib_parse
 
 class URLPath:
     def __init__(self, scheme='', netloc='localhost', path='',
@@ -18,11 +18,11 @@ class URLPath:
 
     _qpathlist = None
     _uqpathlist = None
-    
+
     def pathList(self, unquote=0, copy=1):
         if self._qpathlist is None:
             self._qpathlist = self.path.split('/')
-            self._uqpathlist = map(urllib.unquote, self._qpathlist)
+            self._uqpathlist = map(urllib_parse.unquote, self._qpathlist)
         if unquote:
             result = self._uqpathlist
         else:
@@ -33,7 +33,7 @@ class URLPath:
             return result
 
     def fromString(klass, st):
-        t = urlparse.urlsplit(st)
+        t = urllib_parse.urlsplit(st)
         u = klass(*t)
         return u
 
@@ -88,7 +88,7 @@ class URLPath:
         """Return a path which is the URL where a browser would presumably take
         you if you clicked on a link with an HREF as given.
         """
-        scheme, netloc, path, query, fragment = urlparse.urlsplit(st)
+        scheme, netloc, path, query, fragment = urllib_parse.urlsplit(st)
         if not scheme:
             scheme = self.scheme
         if not netloc:
@@ -101,7 +101,7 @@ class URLPath:
                 l = self.pathList()
                 l[-1] = path
                 path = '/'.join(l)
-        
+
         return URLPath(scheme,
                         netloc,
                         path,
@@ -109,9 +109,9 @@ class URLPath:
                         fragment)
 
 
-    
+
     def __str__(self):
-        x = urlparse.urlunsplit((
+        x = urllib_parse.urlunsplit((
             self.scheme, self.netloc, self.path,
             self.query, self.fragment))
         return x
@@ -119,4 +119,3 @@ class URLPath:
     def __repr__(self):
         return ('URLPath(scheme=%r, netloc=%r, path=%r, query=%r, fragment=%r)'
                 % (self.scheme, self.netloc, self.path, self.query, self.fragment))
-
diff --git twisted/web/_element.py twisted/web/_element.py
index 3c15b3b..447a78a 100644
--- twisted/web/_element.py
+++ twisted/web/_element.py
@@ -2,7 +2,9 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-from zope.interface import implements
+from __future__ import division, absolute_import
+
+from zope.interface import implementer
 
 from twisted.web.iweb import IRenderable
 
@@ -122,6 +124,7 @@ def renderer():
 
 
 
+@implementer(IRenderable)
 class Element(object):
     """
     Base for classes which can render part of a page.
@@ -149,7 +152,6 @@ class Element(object):
     @ivar loader: The factory which will be used to load documents to
         return from C{render}.
     """
-    implements(IRenderable)
     loader = None
 
     def __init__(self, loader=None):
@@ -182,4 +184,3 @@ class Element(object):
         if loader is None:
             raise MissingTemplateLoader(self)
         return loader.load()
-
diff --git twisted/web/_flatten.py twisted/web/_flatten.py
index 98d2b46..feda663 100644
--- twisted/web/_flatten.py
+++ twisted/web/_flatten.py
@@ -2,16 +2,18 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import division, absolute_import
+
 """
 Context-free flattener/serializer for rendering Python objects, possibly
 complex or arbitrarily nested, as strings.
 """
 
-from cStringIO import StringIO
 from sys import exc_info
 from types import GeneratorType
 from traceback import extract_tb
 from twisted.internet.defer import Deferred
+from twisted.python.compat import NativeStringIO
 from twisted.web.error import UnfilledSlot, UnsupportedType, FlattenerError
 
 from twisted.web.iweb import IRenderable
@@ -19,7 +21,6 @@ from twisted.web._stan import (
     Tag, slot, voidElements, Comment, CDATA, CharRef)
 
 
-
 def escapeForContent(data):
     """
     Escape some character or UTF-8 byte data for inclusion in an HTML or XML
@@ -317,7 +318,7 @@ def _flattenTree(request, root):
             element = stack[-1].next()
         except StopIteration:
             stack.pop()
-        except Exception, e:
+        except Exception as e:
             stack.pop()
             roots = []
             for generator in stack:
@@ -328,7 +329,8 @@ def _flattenTree(request, root):
             if type(element) is str:
                 yield element
             elif isinstance(element, Deferred):
-                def cbx((original, toFlatten)):
+                def cbx(val):
+                    original, toFlatten = val
                     stack.append(toFlatten)
                     return original
                 yield element.addCallback(cbx)
@@ -416,7 +418,7 @@ def flattenString(request, root):
         its result when C{root} has been completely flattened into C{write} or
         which will be errbacked if an unexpected exception occurs.
     """
-    io = StringIO()
+    io = NativeStringIO()
     d = flatten(request, root, io.write)
     d.addCallback(lambda _: io.getvalue())
     return d
diff --git twisted/web/server.py twisted/web/server.py
index 268734f..9af6253 100644
--- twisted/web/server.py
+++ twisted/web/server.py
@@ -2,6 +2,8 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import division, absolute_import
+
 """
 This is a web-server which integrates with the twisted.internet
 infrastructure.
@@ -80,7 +82,7 @@ date_time_string = http.datetimeToString
 string_date_time = http.stringToDatetime
 
 # Support for other methods may be implemented on a per-resource basis.
-supportedMethods = ('GET', 'HEAD', 'POST')
+supportedMethods = (b'GET', b'HEAD', b'POST')
 
 
 def _addressToTuple(addr):
@@ -265,14 +267,14 @@ class Request(Copyable, http.Request, components.Componentized):
             if self.method in (supportedMethods):
                 # We MUST include an Allow header
                 # (RFC 2616, 10.4.6 and 14.7)
-                self.setHeader('Allow', ', '.join(allowedMethods))
+                self.setHeader(b'Allow', b', '.join(allowedMethods))
                 s = ('''Your browser approached me (at %(URI)s) with'''
                      ''' the method "%(method)s".  I only allow'''
                      ''' the method%(plural)s %(allowed)s here.''' % {
-                    'URI': escape(self.uri),
+                    'URI': escape(nativeString(self.uri)),
                     'method': self.method,
                     'plural': ((len(allowedMethods) > 1) and 's') or '',
-                    'allowed': ', '.join(allowedMethods)
+                    'allowed': b', '.join(allowedMethods)
                     })
                 epage = resource.ErrorPage(http.NOT_ALLOWED,
                                            "Method Not Allowed", s)
diff --git twisted/web/static.py twisted/web/static.py
index aac41bd..0c0931a 100644
--- twisted/web/static.py
+++ twisted/web/static.py
@@ -5,7 +5,7 @@
 """
 Static resources for L{twisted.web}.
 """
-from __future__ import division
+from __future__ import division, absolute_import
 
 import os
 import warnings
@@ -15,7 +15,7 @@ import cgi
 import time
 import mimetypes
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from twisted.web import server
 from twisted.web import resource
@@ -439,7 +439,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
             offset, offset + size - 1, self.getFileSize())
 
 
-    def _doSingleRangeRequest(self, request, (start, end)):
+    def _doSingleRangeRequest(self, request, place):
         """
         Set up the response for Range headers that specify a single range.
 
@@ -454,6 +454,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
         @return: A 2-tuple of the offset and size of the range to return.
             offset == size == 0 indicates that the request is not satisfiable.
         """
+        start, end = place
         offset, size  = self._rangeToOffsetAndSize(start, end)
         if offset == size == 0:
             # This range doesn't overlap with any of this resource, so the
@@ -614,7 +615,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
 
         try:
             fileForReading = self.openForReading()
-        except IOError, e:
+        except IOError as e:
             import errno
             if e[0] == errno.EACCES:
                 return self.forbidden.render(request)
@@ -661,6 +662,7 @@ class File(resource.Resource, styles.Versioned, filepath.FilePath):
 
 
 
+@implementer(interfaces.IPullProducer)
 class StaticProducer(object):
     """
     Superclass for classes that implement the business of producing.
@@ -669,7 +671,6 @@ class StaticProducer(object):
     @ivar fileObject: The file the contents of which to write to the request.
     """
 
-    implements(interfaces.IPullProducer)
 
     bufferSize = abstract.FileDescriptor.bufferSize
 
diff --git twisted/web/template.py twisted/web/template.py
index 224a192..a1a7adc 100644
--- twisted/web/template.py
+++ twisted/web/template.py
@@ -2,6 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import division, absolute_import
 
 """
 HTML rendering for twisted.web.
@@ -25,12 +26,13 @@ __all__ = [
     'Comment', 'CDATA', 'Tag', 'slot', 'CharRef', 'renderElement'
     ]
 
+
 import warnings
-from zope.interface import implements
+from zope.interface import implementer
 
-from cStringIO import StringIO
 from xml.sax import make_parser, handler
 
+from twisted.python.compat import NativeStringIO
 from twisted.web._stan import Tag, slot, Comment, CDATA, CharRef
 from twisted.python.filepath import FilePath
 
@@ -353,6 +355,7 @@ def _flatsaxParse(fl):
     return s.document
 
 
+@implementer(ITemplateLoader)
 class TagLoader(object):
     """
     An L{ITemplateLoader} that loads existing L{IRenderable} providers.
@@ -360,7 +363,6 @@ class TagLoader(object):
     @ivar tag: The object which will be loaded.
     @type tag: An L{IRenderable} provider.
     """
-    implements(ITemplateLoader)
 
     def __init__(self, tag):
         """
@@ -375,6 +377,7 @@ class TagLoader(object):
 
 
 
+@implementer(ITemplateLoader)
 class XMLString(object):
     """
     An L{ITemplateLoader} that loads and parses XML from a string.
@@ -382,16 +385,15 @@ class XMLString(object):
     @ivar _loadedTemplate: The loaded document.
     @type _loadedTemplate: a C{list} of Stan objects.
     """
-    implements(ITemplateLoader)
 
     def __init__(self, s):
         """
-        Run the parser on a StringIO copy of the string.
+        Run the parser on a NativeStringIO copy of the string.
 
         @param s: The string from which to load the XML.
         @type s: C{str}
         """
-        self._loadedTemplate = _flatsaxParse(StringIO(s))
+        self._loadedTemplate = _flatsaxParse(NativeStringIO(s))
 
 
     def load(self):
@@ -405,6 +407,7 @@ class XMLString(object):
 
 
 
+@implementer(ITemplateLoader)
 class XMLFile(object):
     """
     An L{ITemplateLoader} that loads and parses XML from a file.
@@ -415,7 +418,6 @@ class XMLFile(object):
     @ivar _path: The L{FilePath}, file object, or filename that is being
         loaded from.
     """
-    implements(ITemplateLoader)
 
     def __init__(self, path):
         """
diff --git twisted/web/test/test_xmlrpc.py twisted/web/test/test_xmlrpc.py
index 8bb110b..ad70dab 100644
--- twisted/web/test/test_xmlrpc.py
+++ twisted/web/test/test_xmlrpc.py
@@ -2,13 +2,19 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import division, absolute_import
+
 """
 Tests for  XML-RPC support in L{twisted.web.xmlrpc}.
 """
+from twisted.python.compat import (
+    _PY3, nativeString, networkString, NativeStringIO)
 
 import datetime
-import xmlrpclib
-from StringIO import StringIO
+if _PY3:
+    import xmlrpc.client as xmlrpclib
+else:
+    import xmlrpclib
 
 from twisted.trial import unittest
 from twisted.web import xmlrpc
@@ -36,7 +42,7 @@ class AsyncXMLRPCTests(unittest.TestCase):
     def setUp(self):
         self.request = DummyRequest([''])
         self.request.method = 'POST'
-        self.request.content = StringIO(
+        self.request.content = NativeStringIO(
             payloadTemplate % ('async', xmlrpclib.dumps(())))
 
         result = self.result = defer.Deferred()
@@ -57,7 +63,7 @@ class AsyncXMLRPCTests(unittest.TestCase):
 
         self.result.callback("result")
 
-        resp = xmlrpclib.loads("".join(self.request.written))
+        resp = xmlrpclib.loads(b"".join(self.request.written))
         self.assertEqual(resp, (('result',), None))
         self.assertEqual(self.request.finished, 1)
 
@@ -282,7 +288,7 @@ class XMLRPCTests(unittest.TestCase):
         setUp(), using the given factory as the queryFactory, or
         self.queryFactory if no factory is provided.
         """
-        p = xmlrpc.Proxy("http://127.0.0.1:%d/" % self.port)
+        p = xmlrpc.Proxy(networkString("http://127.0.0.1:%d/" % self.port))
         if factory is None:
             p.queryFactory = self.queryFactory
         else:
@@ -323,8 +329,8 @@ class XMLRPCTests(unittest.TestCase):
         d = defer.DeferredList(dl, fireOnOneErrback=True)
         def cb(ign):
             for factory in self.factories:
-                self.assertEqual(factory.headers['content-type'],
-                                  'text/xml')
+                self.assertEqual(factory.headers[b'content-type'],
+                                  b'text/xml')
             self.flushLoggedErrors(TestRuntimeError, TestValueError)
         d.addCallback(cb)
         return d
@@ -350,7 +356,7 @@ class XMLRPCTests(unittest.TestCase):
         """
         A classic GET on the xml server should return a NOT_ALLOWED.
         """
-        d = client.getPage("http://127.0.0.1:%d/" % (self.port,))
+        d = client.getPage(networkString("http://127.0.0.1:%d/" % (self.port,)))
         d = self.assertFailure(d, error.Error)
         d.addCallback(
             lambda exc: self.assertEqual(int(exc.args[0]), http.NOT_ALLOWED))
@@ -360,8 +366,8 @@ class XMLRPCTests(unittest.TestCase):
         """
         Test that an invalid XML input returns an L{xmlrpc.Fault}.
         """
-        d = client.getPage("http://127.0.0.1:%d/" % (self.port,),
-                           method="POST", postdata="foo")
+        d = client.getPage(networkString("http://127.0.0.1:%d/" % (self.port,)),
+                           method=b"POST", postdata=b"foo")
         def cb(result):
             self.assertRaises(xmlrpc.Fault, xmlrpclib.loads, result)
         d.addCallback(cb)
@@ -425,7 +431,7 @@ class XMLRPCTests(unittest.TestCase):
         to the underlying connectTCP call.
         """
         reactor = MemoryReactor()
-        proxy = xmlrpc.Proxy("http://127.0.0.1:69", connectTimeout=2.0,
+        proxy = xmlrpc.Proxy(b"http://127.0.0.1:69", connectTimeout=2.0,
                              reactor=reactor)
         proxy.callRemote("someMethod")
         self.assertEqual(reactor.tcpClients[0][3], 2.0)
@@ -438,7 +444,7 @@ class XMLRPCTests(unittest.TestCase):
         to the underlying connectSSL call.
         """
         reactor = MemoryReactor()
-        proxy = xmlrpc.Proxy("https://127.0.0.1:69", connectTimeout=3.0,
+        proxy = xmlrpc.Proxy(b"https://127.0.0.1:69", connectTimeout=3.0,
                              reactor=reactor)
         proxy.callRemote("someMethod")
         self.assertEqual(reactor.sslClients[0][4], 3.0)
@@ -452,7 +458,7 @@ class XMLRPCProxyWithoutSlashTests(XMLRPCTests):
     """
 
     def proxy(self, factory=None):
-        p = xmlrpc.Proxy("http://127.0.0.1:%d" % self.port)
+        p = xmlrpc.Proxy(networkString("http://127.0.0.1:%d" % self.port))
         if factory is None:
             p.queryFactory = self.queryFactory
         else:
@@ -472,7 +478,7 @@ class XMLRPCPublicLookupProcedureTests(unittest.TestCase):
             0, server.Site(resource), interface="127.0.0.1")
         self.addCleanup(self.p.stopListening)
         self.port = self.p.getHost().port
-        self.proxy = xmlrpc.Proxy('http://127.0.0.1:%d' % self.port)
+        self.proxy = xmlrpc.Proxy(networkString('http://127.0.0.1:%d' % self.port))
 
 
     def test_lookupProcedure(self):
@@ -544,7 +550,7 @@ class SerializationConfigMixin:
         self.addCleanup(self.p.stopListening)
         self.port = self.p.getHost().port
         self.proxy = xmlrpc.Proxy(
-            "http://127.0.0.1:%d/" % (self.port,), **kwargs)
+            networkString("http://127.0.0.1:%d/" % (self.port,)), **kwargs)
 
 
     def test_roundtripValue(self):
@@ -589,8 +595,8 @@ class XMLRPCAuthenticatedTests(XMLRPCTests):
     Test with authenticated proxy. We run this with the same inout/ouput as
     above.
     """
-    user = "username"
-    password = "asecret"
+    user = b"username"
+    password = b"asecret"
 
     def setUp(self):
         self.p = reactor.listenTCP(0, server.Site(TestAuthHeader()),
@@ -600,16 +606,17 @@ class XMLRPCAuthenticatedTests(XMLRPCTests):
 
 
     def test_authInfoInURL(self):
-        p = xmlrpc.Proxy("http://%s:%s@127.0.0.1:%d/" % (
-            self.user, self.password, self.port))
+        url = "http://%s:%s@127.0.0.1:%d/" % (
+            nativeString(self.user), nativeString(self.password), self.port)
+        p = xmlrpc.Proxy(networkString(url))
         d = p.callRemote("authinfo")
         d.addCallback(self.assertEqual, [self.user, self.password])
         return d
 
 
     def test_explicitAuthInfo(self):
-        p = xmlrpc.Proxy("http://127.0.0.1:%d/" % (
-            self.port,), self.user, self.password)
+        p = xmlrpc.Proxy(networkString("http://127.0.0.1:%d/" % (
+            self.port,)), self.user, self.password)
         d = p.callRemote("authinfo")
         d.addCallback(self.assertEqual, [self.user, self.password])
         return d
@@ -622,16 +629,16 @@ class XMLRPCAuthenticatedTests(XMLRPCTests):
         embed new lines when using long inputs.
         """
         longPassword = self.password * 40
-        p = xmlrpc.Proxy("http://127.0.0.1:%d/" % (
-            self.port,), self.user, longPassword)
+        p = xmlrpc.Proxy(networkString("http://127.0.0.1:%d/" % (
+            self.port,)), self.user, longPassword)
         d = p.callRemote("authinfo")
         d.addCallback(self.assertEqual, [self.user, longPassword])
         return d
 
 
     def test_explicitAuthInfoOverride(self):
-        p = xmlrpc.Proxy("http://wrong:info@127.0.0.1:%d/" % (
-            self.port,), self.user, self.password)
+        p = xmlrpc.Proxy(networkString("http://wrong:info@127.0.0.1:%d/" % (
+            self.port,)), self.user, self.password)
         d = p.callRemote("authinfo")
         d.addCallback(self.assertEqual, [self.user, self.password])
         return d
@@ -710,8 +717,8 @@ class XMLRPCClientErrorHandlingTests(unittest.TestCase):
         Test that calling the xmlrpc client on a static http server raises
         an exception.
         """
-        proxy = xmlrpc.Proxy("http://127.0.0.1:%d/" %
-                             (self.port.getHost().port,))
+        proxy = xmlrpc.Proxy(networkString("http://127.0.0.1:%d/" %
+                                           (self.port.getHost().port,)))
         return self.assertFailure(proxy.callRemote("someMethod"), Exception)
 
 
@@ -810,7 +817,7 @@ class XMLRPCWithRequestTests(unittest.TestCase):
         """
         request = DummyRequest('/RPC2')
         request.method = "POST"
-        request.content = StringIO(xmlrpclib.dumps(("foo",), 'withRequest'))
+        request.content = NativeStringIO(xmlrpclib.dumps(("foo",), 'withRequest'))
         def valid(n, request):
             data = xmlrpclib.loads(request.written[0])
             self.assertEqual(data, (('POST foo',), None))
diff --git twisted/web/topfiles/7795.feature twisted/web/topfiles/7795.feature
new file mode 100644
index 0000000..c9e21b9
--- /dev/null
+++ twisted/web/topfiles/7795.feature
@@ -0,0 +1 @@
+twisted.web.xmlrpc ported to Python 3
\ No newline at end of file
diff --git twisted/web/util.py twisted/web/util.py
index bac37cf..4093755 100644
--- twisted/web/util.py
+++ twisted/web/util.py
@@ -10,7 +10,8 @@ __all__ = [
     "redirectTo", "Redirect", "ChildRedirector", "ParentRedirect",
     "DeferredResource", "htmlIndent", "FailureElement", "formatFailure"]
 
-from cStringIO import StringIO
+from twisted.python.compat import InstanceType, StringType, NativeStringIO
+
 import linecache
 import types
 
@@ -149,7 +150,7 @@ def htmlUnknown(x):
     return '<code>'+html.escape(saferepr(x))+'</code>'
 
 def htmlDict(d):
-    io = StringIO()
+    io = NativeStringIO()
     w = io.write
     w('<div class="dict"><span class="heading">Dictionary instance @ %s</span>' % hex(id(d)))
     w('<table class="dict">')
@@ -162,7 +163,7 @@ def htmlDict(d):
     return io.getvalue()
 
 def htmlList(l):
-    io = StringIO()
+    io = NativeStringIO()
     w = io.write
     w('<div class="list"><span class="heading">List instance @ %s</span>' % hex(id(l)))
     for i in l:
@@ -189,10 +190,10 @@ def htmlFunc(f):
                          f.func_code.co_firstlineno))+
             '</div>')
 
-htmlReprTypes = {types.DictType: htmlDict,
-                 types.ListType: htmlList,
-                 types.InstanceType: htmlInst,
-                 types.StringType: htmlString,
+htmlReprTypes = {dict: htmlDict,
+                 list: htmlList,
+                 InstanceType: htmlInst,
+                 StringType: htmlString,
                  types.FunctionType: htmlFunc}
 
 
@@ -376,7 +377,7 @@ class FailureElement(Element):
 
     @since: 12.1
     """
-    loader = XMLFile(getModule(__name__).filePath.sibling("failure.xhtml"))
+    loader = XMLFile(getModule(__name__).filePath.sibling(b"failure.xhtml"))
 
     def __init__(self, failure, loader=None):
         Element.__init__(self, loader)
diff --git twisted/web/xmlrpc.py twisted/web/xmlrpc.py
index 0536857..b05f4c1 100644
--- twisted/web/xmlrpc.py
+++ twisted/web/xmlrpc.py
@@ -2,16 +2,21 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import division, absolute_import
+
 """
 A generic resource for publishing objects via XML-RPC.
 
 Maintainer: Itamar Shtull-Trauring
 """
+from twisted.python.compat import _PY3, intToBytes, nativeString, urllib_parse
 
 # System Imports
 import base64
-import xmlrpclib
-import urlparse
+if _PY3:
+    import xmlrpc.client as xmlrpclib
+else:
+    import xmlrpclib
 
 # Sibling Imports
 from twisted.web import resource, server, http
@@ -114,7 +119,7 @@ class XMLRPC(resource.Resource):
 
     isLeaf = 1
     separator = '.'
-    allowedMethods = ('POST',)
+    allowedMethods = (b'POST',)
 
     def __init__(self, allowNone=False, useDateTime=False):
         resource.Resource.__init__(self)
@@ -134,21 +139,21 @@ class XMLRPC(resource.Resource):
         return self.subHandlers.get(prefix, None)
 
     def getSubHandlerPrefixes(self):
-        return self.subHandlers.keys()
+        return list(self.subHandlers.keys())
 
     def render_POST(self, request):
         request.content.seek(0, 0)
-        request.setHeader("content-type", "text/xml")
+        request.setHeader(b"content-type", b"text/xml")
         try:
             args, functionPath = xmlrpclib.loads(request.content.read(),
                 use_datetime=self.useDateTime)
-        except Exception, e:
+        except Exception as e:
             f = Fault(self.FAILURE, "Can't deserialize input: %s" % (e,))
             self._cbRender(f, request)
         else:
             try:
                 function = self.lookupProcedure(functionPath)
-            except Fault, f:
+            except Fault as f:
                 self._cbRender(f, request)
             else:
                 # Use this list to track whether the response has failed or not.
@@ -178,13 +183,14 @@ class XMLRPC(resource.Resource):
                 content = xmlrpclib.dumps(
                     result, methodresponse=True,
                     allow_none=self.allowNone)
-            except Exception, e:
+            except Exception as e:
                 f = Fault(self.FAILURE, "Can't serialize output: %s" % (e,))
                 content = xmlrpclib.dumps(f, methodresponse=True,
                                           allow_none=self.allowNone)
 
-            request.setHeader("content-length", str(len(content)))
-            request.write(content)
+            encodedContent = content.encode('utf8')
+            request.setHeader(b"content-length", intToBytes(len(encodedContent)))
+            request.write(encodedContent)
         except:
             log.err()
         request.finish()
@@ -320,23 +326,23 @@ def addIntrospection(xmlrpc):
 
 
 class QueryProtocol(http.HTTPClient):
-
     def connectionMade(self):
         self._response = None
-        self.sendCommand('POST', self.factory.path)
-        self.sendHeader('User-Agent', 'Twisted/XMLRPClib')
-        self.sendHeader('Host', self.factory.host)
-        self.sendHeader('Content-type', 'text/xml')
-        self.sendHeader('Content-length', str(len(self.factory.payload)))
+        self.sendCommand(b'POST', self.factory.path)
+        self.sendHeader(b'User-Agent', b'Twisted/XMLRPClib')
+        self.sendHeader(b'Host', self.factory.host)
+        self.sendHeader(b'Content-type', b'text/xml')
+        encodedPayload = self.factory.payload.encode('utf8')
+        self.sendHeader(b'Content-length', intToBytes(len(encodedPayload)))
         if self.factory.user:
-            auth = '%s:%s' % (self.factory.user, self.factory.password)
-            auth = base64.b64encode(auth)
-            self.sendHeader('Authorization', 'Basic %s' % (auth,))
+            auth = b':'.join([self.factory.user, self.factory.password])
+            authHeader = b''.join([b'Basic ', base64.b64encode(auth)])
+            self.sendHeader(b'Authorization', authHeader)
         self.endHeaders()
-        self.transport.write(self.factory.payload)
+        self.transport.write(encodedPayload)
 
     def handleStatus(self, version, status, message):
-        if status != '200':
+        if status != b'200':
             self.factory.badStatus(status, message)
 
     def handleResponse(self, contents):
@@ -376,18 +382,18 @@ class _QueryFactory(protocol.ClientFactory):
     XML-RPC Client Factory
 
     @ivar path: The path portion of the URL to which to post method calls.
-    @type path: C{str}
+    @type path: C{bytes}
 
     @ivar host: The value to use for the Host HTTP header.
-    @type host: C{str}
+    @type host: C{bytes}
 
     @ivar user: The username with which to authenticate with the server
         when making calls.
-    @type user: C{str} or C{NoneType}
+    @type user: C{bytes} or C{NoneType}
 
     @ivar password: The password with which to authenticate with the server
         when making calls.
-    @type password: C{str} or C{NoneType}
+    @type password: C{bytes} or C{NoneType}
 
     @ivar useDateTime: Accept datetime values as datetime.datetime objects.
         also passed to the underlying xmlrpclib implementation.  Defaults to
@@ -462,13 +468,13 @@ class Proxy:
         when making calls.  If specified, overrides any username information
         embedded in C{url}.  If not specified, a value may be taken from
         C{url} if present.
-    @type user: C{str} or C{NoneType}
+    @type user: C{bytes} or C{NoneType}
 
     @ivar password: The password with which to authenticate with the server
         when making calls.  If specified, overrides any password information
         embedded in C{url}.  If not specified, a value may be taken from
         C{url} if present.
-    @type password: C{str} or C{NoneType}
+    @type password: C{bytes} or C{NoneType}
 
     @ivar allowNone: allow the use of None values in parameters. It's
         passed to the underlying L{xmlrpclib} implementation. Defaults to
@@ -499,13 +505,13 @@ class Proxy:
             over SSL if the scheme is HTTPS.  If netloc contains username or
             password information, these will be used to authenticate, as long as
             the C{user} and C{password} arguments are not specified.
-        @type url: C{str}
+        @type url: C{bytes}
 
         """
-        scheme, netloc, path, params, query, fragment = urlparse.urlparse(url)
-        netlocParts = netloc.split('@')
+        scheme, netloc, path, params, query, fragment = urllib_parse.urlparse(url)
+        netlocParts = netloc.split(b'@')
         if len(netlocParts) == 2:
-            userpass = netlocParts.pop(0).split(':')
+            userpass = netlocParts.pop(0).split(b':')
             self.user = userpass.pop(0)
             try:
                 self.password = userpass.pop(0)
@@ -513,16 +519,16 @@ class Proxy:
                 self.password = None
         else:
             self.user = self.password = None
-        hostport = netlocParts[0].split(':')
+        hostport = netlocParts[0].split(b':')
         self.host = hostport.pop(0)
         try:
             self.port = int(hostport.pop(0))
         except:
             self.port = None
         self.path = path
-        if self.path in ['', None]:
-            self.path = '/'
-        self.secure = (scheme == 'https')
+        if self.path in [b'', None]:
+            self.path = b'/'
+        self.secure = (scheme == b'https')
         if user is not None:
             self.user = user
         if password is not None:
@@ -556,12 +562,12 @@ class Proxy:
         if self.secure:
             from twisted.internet import ssl
             connector = self._reactor.connectSSL(
-                self.host, self.port or 443,
+                nativeString(self.host), self.port or 443,
                 factory, ssl.ClientContextFactory(),
                 timeout=self.connectTimeout)
         else:
             connector = self._reactor.connectTCP(
-                self.host, self.port or 80, factory,
+                nativeString(self.host), self.port or 80, factory,
                 timeout=self.connectTimeout)
         return factory.deferred
 
