diff --git twisted/python/compat.py twisted/python/compat.py
index 39def97..926df10 100644
--- twisted/python/compat.py
+++ twisted/python/compat.py
@@ -505,6 +505,10 @@ except ImportError:
     # Python 3+
     FileType = IOBase
 
+if _PY3:
+    import urllib.parse as urllib_parse
+else:
+    import urlparse as urllib_parse
 
 
 # Dealing with the differences in items/iteritems
@@ -563,4 +567,5 @@ __all__ = [
     "items",
     "iteritems",
     "xrange",
-]
+    "urllib_parse",
+    ]
diff --git twisted/python/dist3.py twisted/python/dist3.py
index 63c79db..4333798 100644
--- twisted/python/dist3.py
+++ twisted/python/dist3.py
@@ -162,6 +162,8 @@ modules = [
     "twisted.web.static",
     "twisted.web.test",
     "twisted.web.test.requesthelper",
+    "twisted.web._version",
+    "twisted.web.xmlrpc",
 ]
 
 
@@ -285,6 +287,7 @@ testModules = [
     "twisted.web.test.test_static",
     "twisted.web.test.test_web",
     "twisted.web.test.test_webclient",
+    "twisted.web.test.test_xmlrpc",
 ]
 
 
diff --git twisted/web/server.py twisted/web/server.py
index 966b24b..05b1a65 100644
--- twisted/web/server.py
+++ twisted/web/server.py
@@ -80,7 +80,7 @@ date_time_string = http.datetimeToString
 string_date_time = http.stringToDatetime
 
 # Support for other methods may be implemented on a per-resource basis.
-supportedMethods = ('GET', 'HEAD', 'POST')
+supportedMethods = (b'GET', b'HEAD', b'POST')
 
 
 def _addressToTuple(addr):
@@ -265,14 +265,15 @@ class Request(Copyable, http.Request, components.Componentized):
             if self.method in (supportedMethods):
                 # We MUST include an Allow header
                 # (RFC 2616, 10.4.6 and 14.7)
-                self.setHeader('Allow', ', '.join(allowedMethods))
+                self.setHeader(b'Allow', b', '.join(allowedMethods))
                 s = ('''Your browser approached me (at %(URI)s) with'''
                      ''' the method "%(method)s".  I only allow'''
                      ''' the method%(plural)s %(allowed)s here.''' % {
-                    'URI': escape(self.uri),
-                    'method': self.method,
+                    'URI': escape(nativeString(self.uri)),
+                    'method': nativeString(self.method),
                     'plural': ((len(allowedMethods) > 1) and 's') or '',
-                    'allowed': ', '.join(allowedMethods)
+                    'allowed': ', '.join([nativeString(x)
+                                          for x in allowedMethods])
                     })
                 epage = resource.ErrorPage(http.NOT_ALLOWED,
                                            "Method Not Allowed", s)
diff --git twisted/web/test/test_web.py twisted/web/test/test_web.py
index 3b82230..76ef7b3 100644
--- twisted/web/test/test_web.py
+++ twisted/web/test/test_web.py
@@ -728,6 +728,20 @@ class NewRenderTests(unittest.TestCase):
         req.requestReceived(b'hlalauguG', b'/newrender', b'HTTP/1.0')
         self.assertEqual(req.code, 501)
 
+    def testNotAllowedMethod(self):
+        """
+        Verify that we get a not allowed, when trying a to invoke a
+        method not on the supported method list
+
+        """
+        req = self._getReq()
+        req.requestReceived(b'POST', b'/newrender', b'HTTP/1.0')
+        self.assertEqual(req.code, 405)
+        self.assertTrue(req.responseHeaders.hasHeader(b"allow"))
+        raw_header = req.responseHeaders.getRawHeaders(b'allow')[0]
+        allowed = sorted([h.strip() for h in raw_header.split(b",")])
+        self.assertEqual([b'GET', b'HEAD', b'HEH'], allowed)
+
     def testImplicitHead(self):
         req = self._getReq()
         req.requestReceived(b'HEAD', b'/newrender', b'HTTP/1.0')
diff --git twisted/web/test/test_xmlrpc.py twisted/web/test/test_xmlrpc.py
index 8bb110b..658caa4 100644
--- twisted/web/test/test_xmlrpc.py
+++ twisted/web/test/test_xmlrpc.py
@@ -6,15 +6,19 @@
 Tests for  XML-RPC support in L{twisted.web.xmlrpc}.
 """
 
+from __future__ import division, absolute_import
+
+from twisted.python.compat import nativeString, networkString, NativeStringIO
+from twisted.python.compat import intToBytes
+
 import datetime
-import xmlrpclib
-from StringIO import StringIO
 
 from twisted.trial import unittest
 from twisted.web import xmlrpc
-from twisted.web.xmlrpc import (
-    XMLRPC, payloadTemplate, addIntrospection, _QueryFactory, withRequest)
-from twisted.web import server, static, client, error, http
+from twisted.web.xmlrpc import XMLRPC, payloadTemplate, addIntrospection
+from twisted.web.xmlrpc import _QueryFactory, withRequest, xmlrpclib
+from twisted.web import server, client, error, http, resource as Resource
+from twisted.web import static
 from twisted.internet import reactor, defer
 from twisted.internet.error import ConnectionDone
 from twisted.python import failure
@@ -36,7 +40,7 @@ class AsyncXMLRPCTests(unittest.TestCase):
     def setUp(self):
         self.request = DummyRequest([''])
         self.request.method = 'POST'
-        self.request.content = StringIO(
+        self.request.content = NativeStringIO(
             payloadTemplate % ('async', xmlrpclib.dumps(())))
 
         result = self.result = defer.Deferred()
@@ -57,7 +61,7 @@ class AsyncXMLRPCTests(unittest.TestCase):
 
         self.result.callback("result")
 
-        resp = xmlrpclib.loads("".join(self.request.written))
+        resp = xmlrpclib.loads(b"".join(self.request.written))
         self.assertEqual(resp, (('result',), None))
         self.assertEqual(self.request.finished, 1)
 
@@ -137,6 +141,15 @@ class Test(XMLRPC):
     def xmlrpc_deferFault(self):
         return defer.fail(xmlrpc.Fault(17, "hi"))
 
+    def xmlrpc_snowman(self, payload):
+        """
+        Used to test that we can pass unicode
+        """
+        snowman = u"\u2603"
+        if snowman != payload:
+            return xmlrpc.Fault(13, "Payload not unicode snowman")
+        return snowman
+
     def xmlrpc_complex(self):
         return {"a": ["b", "c", 12, []], "D": "foo"}
 
@@ -223,7 +236,8 @@ class TestAuthHeader(Test):
 
 class TestQueryProtocol(xmlrpc.QueryProtocol):
     """
-    QueryProtocol for tests that saves headers received inside the factory.
+    QueryProtocol for tests that saves headers received and sent,
+    inside the factory.
     """
 
     def connectionMade(self):
@@ -233,6 +247,12 @@ class TestQueryProtocol(xmlrpc.QueryProtocol):
     def handleHeader(self, key, val):
         self.factory.headers[key.lower()] = val
 
+    def sendHeader(self, key, val):
+        """
+        Keep sent headers so we can inspect them later
+        """
+        self.factory.sent_headers[key.lower()] = val
+        xmlrpc.QueryProtocol.sendHeader(self, key, val)
 
 class TestQueryFactory(xmlrpc._QueryFactory):
     """
@@ -242,6 +262,7 @@ class TestQueryFactory(xmlrpc._QueryFactory):
 
     def __init__(self, *args, **kwargs):
         self.headers = {}
+        self.sent_headers = {}
         xmlrpc._QueryFactory.__init__(self, *args, **kwargs)
 
 
@@ -282,7 +303,7 @@ class XMLRPCTests(unittest.TestCase):
         setUp(), using the given factory as the queryFactory, or
         self.queryFactory if no factory is provided.
         """
-        p = xmlrpc.Proxy("http://127.0.0.1:%d/" % self.port)
+        p = xmlrpc.Proxy(networkString("http://127.0.0.1:%d/" % self.port))
         if factory is None:
             p.queryFactory = self.queryFactory
         else:
@@ -295,6 +316,7 @@ class XMLRPCTests(unittest.TestCase):
             ("defer", ("a",), "a"),
             ("dict", ({"a": 1}, "a"), 1),
             ("pair", ("a", 1), ["a", 1]),
+            ("snowman", (u"\u2603"), u"\u2603"),
             ("complex", (), {"a": ["b", "c", 12, []], "D": "foo"})]
 
         dl = []
@@ -304,6 +326,37 @@ class XMLRPCTests(unittest.TestCase):
             dl.append(d)
         return defer.DeferredList(dl, fireOnOneErrback=True)
 
+
+    def test_headers(self):
+        """
+        Verify that headers sent from the client side and the ones we
+        get back from the server side are correct.
+
+        """
+        d = self.proxy().callRemote("snowman", u"\u2603")
+
+        def check_server_headers(ing):
+            self.assertEqual(
+                self.factories[0].headers[b'content-type'],
+                b'text/xml; charset=utf-8')
+            self.assertEqual(
+                self.factories[0].headers[b'content-length'], b'129')
+
+        def check_client_headers(ign):
+            self.assertEqual(
+                self.factories[0].sent_headers[b'user-agent'],
+                b'Twisted/XMLRPClib')
+            self.assertEqual(
+                self.factories[0].sent_headers[b'content-type'],
+                b'text/xml; charset=utf-8')
+            self.assertEqual(
+                self.factories[0].sent_headers[b'content-length'], b'155')
+
+        d.addCallback(check_server_headers)
+        d.addCallback(check_client_headers)
+        return d
+
+
     def test_errors(self):
         """
         Verify that for each way a method exposed via XML-RPC can fail, the
@@ -323,8 +376,8 @@ class XMLRPCTests(unittest.TestCase):
         d = defer.DeferredList(dl, fireOnOneErrback=True)
         def cb(ign):
             for factory in self.factories:
-                self.assertEqual(factory.headers['content-type'],
-                                  'text/xml')
+                self.assertEqual(factory.headers[b'content-type'],
+                                  b'text/xml; charset=utf-8')
             self.flushLoggedErrors(TestRuntimeError, TestValueError)
         d.addCallback(cb)
         return d
@@ -350,7 +403,7 @@ class XMLRPCTests(unittest.TestCase):
         """
         A classic GET on the xml server should return a NOT_ALLOWED.
         """
-        d = client.getPage("http://127.0.0.1:%d/" % (self.port,))
+        d = client.getPage(networkString("http://127.0.0.1:%d/" % (self.port,)))
         d = self.assertFailure(d, error.Error)
         d.addCallback(
             lambda exc: self.assertEqual(int(exc.args[0]), http.NOT_ALLOWED))
@@ -360,8 +413,8 @@ class XMLRPCTests(unittest.TestCase):
         """
         Test that an invalid XML input returns an L{xmlrpc.Fault}.
         """
-        d = client.getPage("http://127.0.0.1:%d/" % (self.port,),
-                           method="POST", postdata="foo")
+        d = client.getPage(networkString("http://127.0.0.1:%d/" % (self.port,)),
+                           method=b"POST", postdata=b"foo")
         def cb(result):
             self.assertRaises(xmlrpc.Fault, xmlrpclib.loads, result)
         d.addCallback(cb)
@@ -425,7 +478,7 @@ class XMLRPCTests(unittest.TestCase):
         to the underlying connectTCP call.
         """
         reactor = MemoryReactor()
-        proxy = xmlrpc.Proxy("http://127.0.0.1:69", connectTimeout=2.0,
+        proxy = xmlrpc.Proxy(b"http://127.0.0.1:69", connectTimeout=2.0,
                              reactor=reactor)
         proxy.callRemote("someMethod")
         self.assertEqual(reactor.tcpClients[0][3], 2.0)
@@ -438,7 +491,7 @@ class XMLRPCTests(unittest.TestCase):
         to the underlying connectSSL call.
         """
         reactor = MemoryReactor()
-        proxy = xmlrpc.Proxy("https://127.0.0.1:69", connectTimeout=3.0,
+        proxy = xmlrpc.Proxy(b"https://127.0.0.1:69", connectTimeout=3.0,
                              reactor=reactor)
         proxy.callRemote("someMethod")
         self.assertEqual(reactor.sslClients[0][4], 3.0)
@@ -452,7 +505,7 @@ class XMLRPCProxyWithoutSlashTests(XMLRPCTests):
     """
 
     def proxy(self, factory=None):
-        p = xmlrpc.Proxy("http://127.0.0.1:%d" % self.port)
+        p = xmlrpc.Proxy(networkString("http://127.0.0.1:%d" % self.port))
         if factory is None:
             p.queryFactory = self.queryFactory
         else:
@@ -472,7 +525,8 @@ class XMLRPCPublicLookupProcedureTests(unittest.TestCase):
             0, server.Site(resource), interface="127.0.0.1")
         self.addCleanup(self.p.stopListening)
         self.port = self.p.getHost().port
-        self.proxy = xmlrpc.Proxy('http://127.0.0.1:%d' % self.port)
+        self.proxy = xmlrpc.Proxy(
+            networkString('http://127.0.0.1:%d' % self.port))
 
 
     def test_lookupProcedure(self):
@@ -544,7 +598,7 @@ class SerializationConfigMixin:
         self.addCleanup(self.p.stopListening)
         self.port = self.p.getHost().port
         self.proxy = xmlrpc.Proxy(
-            "http://127.0.0.1:%d/" % (self.port,), **kwargs)
+            networkString("http://127.0.0.1:%d/" % (self.port,)), **kwargs)
 
 
     def test_roundtripValue(self):
@@ -589,8 +643,8 @@ class XMLRPCAuthenticatedTests(XMLRPCTests):
     Test with authenticated proxy. We run this with the same inout/ouput as
     above.
     """
-    user = "username"
-    password = "asecret"
+    user = b"username"
+    password = b"asecret"
 
     def setUp(self):
         self.p = reactor.listenTCP(0, server.Site(TestAuthHeader()),
@@ -600,16 +654,17 @@ class XMLRPCAuthenticatedTests(XMLRPCTests):
 
 
     def test_authInfoInURL(self):
-        p = xmlrpc.Proxy("http://%s:%s@127.0.0.1:%d/" % (
-            self.user, self.password, self.port))
+        url = "http://%s:%s@127.0.0.1:%d/" % (
+            nativeString(self.user), nativeString(self.password), self.port)
+        p = xmlrpc.Proxy(networkString(url))
         d = p.callRemote("authinfo")
         d.addCallback(self.assertEqual, [self.user, self.password])
         return d
 
 
     def test_explicitAuthInfo(self):
-        p = xmlrpc.Proxy("http://127.0.0.1:%d/" % (
-            self.port,), self.user, self.password)
+        p = xmlrpc.Proxy(networkString("http://127.0.0.1:%d/" % (
+            self.port,)), self.user, self.password)
         d = p.callRemote("authinfo")
         d.addCallback(self.assertEqual, [self.user, self.password])
         return d
@@ -622,16 +677,16 @@ class XMLRPCAuthenticatedTests(XMLRPCTests):
         embed new lines when using long inputs.
         """
         longPassword = self.password * 40
-        p = xmlrpc.Proxy("http://127.0.0.1:%d/" % (
-            self.port,), self.user, longPassword)
+        p = xmlrpc.Proxy(networkString("http://127.0.0.1:%d/" % (
+            self.port,)), self.user, longPassword)
         d = p.callRemote("authinfo")
         d.addCallback(self.assertEqual, [self.user, longPassword])
         return d
 
 
     def test_explicitAuthInfoOverride(self):
-        p = xmlrpc.Proxy("http://wrong:info@127.0.0.1:%d/" % (
-            self.port,), self.user, self.password)
+        p = xmlrpc.Proxy(networkString("http://wrong:info@127.0.0.1:%d/" % (
+            self.port,)), self.user, self.password)
         d = p.callRemote("authinfo")
         d.addCallback(self.assertEqual, [self.user, self.password])
         return d
@@ -654,7 +709,7 @@ class XMLRPCIntrospectionTests(XMLRPCTests):
                 meths,
                 ['add', 'complex', 'defer', 'deferFail',
                  'deferFault', 'dict', 'echo', 'fail', 'fault',
-                 'pair', 'system.listMethods',
+                 'pair', 'snowman', 'system.listMethods',
                  'system.methodHelp',
                  'system.methodSignature', 'withRequest'])
 
@@ -696,9 +751,10 @@ class XMLRPCClientErrorHandlingTests(unittest.TestCase):
     """
     def setUp(self):
         self.resource = static.Data(
-            "This text is not a valid XML-RPC response.",
-            "text/plain")
+            b"This text is not a valid XML-RPC response.",
+            b"text/plain")
         self.resource.isLeaf = True
+
         self.port = reactor.listenTCP(0, server.Site(self.resource),
                                                      interface='127.0.0.1')
 
@@ -710,9 +766,9 @@ class XMLRPCClientErrorHandlingTests(unittest.TestCase):
         Test that calling the xmlrpc client on a static http server raises
         an exception.
         """
-        proxy = xmlrpc.Proxy("http://127.0.0.1:%d/" %
-                             (self.port.getHost().port,))
-        return self.assertFailure(proxy.callRemote("someMethod"), Exception)
+        proxy = xmlrpc.Proxy(networkString("http://127.0.0.1:%d/" %
+                                           (self.port.getHost().port,)))
+        return self.assertFailure(proxy.callRemote("someMethod"), ValueError)
 
 
 
@@ -810,7 +866,8 @@ class XMLRPCWithRequestTests(unittest.TestCase):
         """
         request = DummyRequest('/RPC2')
         request.method = "POST"
-        request.content = StringIO(xmlrpclib.dumps(("foo",), 'withRequest'))
+        request.content = NativeStringIO(xmlrpclib.dumps(
+            ("foo",), 'withRequest'))
         def valid(n, request):
             data = xmlrpclib.loads(request.written[0])
             self.assertEqual(data, (('POST foo',), None))
diff --git twisted/web/topfiles/7795.feature twisted/web/topfiles/7795.feature
new file mode 100644
index 0000000..9ccd658
--- /dev/null
+++ twisted/web/topfiles/7795.feature
@@ -0,0 +1 @@
+twisted.web.xmlrpc is now ported to Python 3.
\ No newline at end of file
diff --git twisted/web/xmlrpc.py twisted/web/xmlrpc.py
index 0536857..3f7a79b 100644
--- twisted/web/xmlrpc.py
+++ twisted/web/xmlrpc.py
@@ -8,10 +8,17 @@ A generic resource for publishing objects via XML-RPC.
 Maintainer: Itamar Shtull-Trauring
 """
 
+from __future__ import division, absolute_import
+
+from twisted.python.compat import _PY3, intToBytes, nativeString, urllib_parse
+from twisted.python.compat import unicode
+
 # System Imports
 import base64
-import xmlrpclib
-import urlparse
+if _PY3:
+    import xmlrpc.client as xmlrpclib
+else:
+    import xmlrpclib
 
 # Sibling Imports
 from twisted.web import resource, server, http
@@ -114,7 +121,7 @@ class XMLRPC(resource.Resource):
 
     isLeaf = 1
     separator = '.'
-    allowedMethods = ('POST',)
+    allowedMethods = (b'POST',)
 
     def __init__(self, allowNone=False, useDateTime=False):
         resource.Resource.__init__(self)
@@ -134,21 +141,21 @@ class XMLRPC(resource.Resource):
         return self.subHandlers.get(prefix, None)
 
     def getSubHandlerPrefixes(self):
-        return self.subHandlers.keys()
+        return list(self.subHandlers.keys())
 
     def render_POST(self, request):
         request.content.seek(0, 0)
-        request.setHeader("content-type", "text/xml")
+        request.setHeader(b"content-type", b"text/xml; charset=utf-8")
         try:
             args, functionPath = xmlrpclib.loads(request.content.read(),
                 use_datetime=self.useDateTime)
-        except Exception, e:
+        except Exception as e:
             f = Fault(self.FAILURE, "Can't deserialize input: %s" % (e,))
             self._cbRender(f, request)
         else:
             try:
                 function = self.lookupProcedure(functionPath)
-            except Fault, f:
+            except Fault as f:
                 self._cbRender(f, request)
             else:
                 # Use this list to track whether the response has failed or not.
@@ -178,12 +185,15 @@ class XMLRPC(resource.Resource):
                 content = xmlrpclib.dumps(
                     result, methodresponse=True,
                     allow_none=self.allowNone)
-            except Exception, e:
+            except Exception as e:
                 f = Fault(self.FAILURE, "Can't serialize output: %s" % (e,))
                 content = xmlrpclib.dumps(f, methodresponse=True,
                                           allow_none=self.allowNone)
 
-            request.setHeader("content-length", str(len(content)))
+            if isinstance(content, unicode):
+                content = content.encode('utf8')
+            request.setHeader(
+                b"content-length", intToBytes(len(content)))
             request.write(content)
         except:
             log.err()
@@ -320,23 +330,24 @@ def addIntrospection(xmlrpc):
 
 
 class QueryProtocol(http.HTTPClient):
-
     def connectionMade(self):
         self._response = None
-        self.sendCommand('POST', self.factory.path)
-        self.sendHeader('User-Agent', 'Twisted/XMLRPClib')
-        self.sendHeader('Host', self.factory.host)
-        self.sendHeader('Content-type', 'text/xml')
-        self.sendHeader('Content-length', str(len(self.factory.payload)))
+        self.sendCommand(b'POST', self.factory.path)
+        self.sendHeader(b'User-Agent', b'Twisted/XMLRPClib')
+        self.sendHeader(b'Host', self.factory.host)
+        self.sendHeader(b'Content-type', b'text/xml; charset=utf-8')
+        payload = self.factory.payload
+        self.sendHeader(b'Content-length', intToBytes(len(payload)))
+
         if self.factory.user:
-            auth = '%s:%s' % (self.factory.user, self.factory.password)
-            auth = base64.b64encode(auth)
-            self.sendHeader('Authorization', 'Basic %s' % (auth,))
+            auth = b':'.join([self.factory.user, self.factory.password])
+            authHeader = b''.join([b'Basic ', base64.b64encode(auth)])
+            self.sendHeader(b'Authorization', authHeader)
         self.endHeaders()
-        self.transport.write(self.factory.payload)
+        self.transport.write(payload)
 
     def handleStatus(self, version, status, message):
-        if status != '200':
+        if status != b'200':
             self.factory.badStatus(status, message)
 
     def handleResponse(self, contents):
@@ -376,18 +387,18 @@ class _QueryFactory(protocol.ClientFactory):
     XML-RPC Client Factory
 
     @ivar path: The path portion of the URL to which to post method calls.
-    @type path: C{str}
+    @type path: L{bytes}
 
     @ivar host: The value to use for the Host HTTP header.
-    @type host: C{str}
+    @type host: L{bytes}
 
     @ivar user: The username with which to authenticate with the server
         when making calls.
-    @type user: C{str} or C{NoneType}
+    @type user: L{bytes} or C{NoneType}
 
     @ivar password: The password with which to authenticate with the server
         when making calls.
-    @type password: C{str} or C{NoneType}
+    @type password: L{bytes} or C{NoneType}
 
     @ivar useDateTime: Accept datetime values as datetime.datetime objects.
         also passed to the underlying xmlrpclib implementation.  Defaults to
@@ -420,6 +431,8 @@ class _QueryFactory(protocol.ClientFactory):
         self.user, self.password = user, password
         self.payload = payloadTemplate % (method,
             xmlrpclib.dumps(args, allow_none=allowNone))
+        if isinstance(self.payload, unicode):
+            self.payload = self.payload.encode('utf8')
         self.deferred = defer.Deferred(canceller)
         self.useDateTime = useDateTime
 
@@ -462,13 +475,13 @@ class Proxy:
         when making calls.  If specified, overrides any username information
         embedded in C{url}.  If not specified, a value may be taken from
         C{url} if present.
-    @type user: C{str} or C{NoneType}
+    @type user: L{bytes} or C{NoneType}
 
     @ivar password: The password with which to authenticate with the server
         when making calls.  If specified, overrides any password information
         embedded in C{url}.  If not specified, a value may be taken from
         C{url} if present.
-    @type password: C{str} or C{NoneType}
+    @type password: L{bytes} or C{NoneType}
 
     @ivar allowNone: allow the use of None values in parameters. It's
         passed to the underlying L{xmlrpclib} implementation. Defaults to
@@ -499,13 +512,14 @@ class Proxy:
             over SSL if the scheme is HTTPS.  If netloc contains username or
             password information, these will be used to authenticate, as long as
             the C{user} and C{password} arguments are not specified.
-        @type url: C{str}
+        @type url: L{bytes}
 
         """
-        scheme, netloc, path, params, query, fragment = urlparse.urlparse(url)
-        netlocParts = netloc.split('@')
+        scheme, netloc, path, params, query, fragment = urllib_parse.urlparse(
+            url)
+        netlocParts = netloc.split(b'@')
         if len(netlocParts) == 2:
-            userpass = netlocParts.pop(0).split(':')
+            userpass = netlocParts.pop(0).split(b':')
             self.user = userpass.pop(0)
             try:
                 self.password = userpass.pop(0)
@@ -513,16 +527,16 @@ class Proxy:
                 self.password = None
         else:
             self.user = self.password = None
-        hostport = netlocParts[0].split(':')
+        hostport = netlocParts[0].split(b':')
         self.host = hostport.pop(0)
         try:
             self.port = int(hostport.pop(0))
         except:
             self.port = None
         self.path = path
-        if self.path in ['', None]:
-            self.path = '/'
-        self.secure = (scheme == 'https')
+        if self.path in [b'', None]:
+            self.path = b'/'
+        self.secure = (scheme == b'https')
         if user is not None:
             self.user = user
         if password is not None:
@@ -556,12 +570,12 @@ class Proxy:
         if self.secure:
             from twisted.internet import ssl
             connector = self._reactor.connectSSL(
-                self.host, self.port or 443,
+                nativeString(self.host), self.port or 443,
                 factory, ssl.ClientContextFactory(),
                 timeout=self.connectTimeout)
         else:
             connector = self._reactor.connectTCP(
-                self.host, self.port or 80, factory,
+                nativeString(self.host), self.port or 80, factory,
                 timeout=self.connectTimeout)
         return factory.deferred
 
