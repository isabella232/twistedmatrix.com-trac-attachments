diff --git twisted/conch/ssh/_kex.py twisted/conch/ssh/_kex.py
index e473b88..e2cb381 100644
--- twisted/conch/ssh/_kex.py
+++ twisted/conch/ssh/_kex.py
@@ -6,13 +6,12 @@
 SSH key exchange handling.
 """
 
-from hashlib import sha1, sha256
+from hashlib import sha1, sha256, sha384, sha512
 
 from zope.interface import Attribute, implementer, Interface
 
 from twisted.conch import error
 
-
 class _IKexAlgorithm(Interface):
     """
     An L{_IKexAlgorithm} describes a key exchange algorithm.
@@ -45,6 +44,12 @@ class _IFixedGroupKexAlgorithm(_IKexAlgorithm):
         "Python generator functions.)")
 
 
+class _IEllipticCurveExchangeKexAlgorithm(_IKexAlgorithm):
+    """
+    An L{_IEllipticCurveExchangeKexAlgorithm} describes a key exchange algorithm
+    that uses an elliptic curve exchange between the client and server.
+    """
+
 
 class _IGroupExchangeKexAlgorithm(_IKexAlgorithm):
     """
@@ -55,6 +60,33 @@ class _IGroupExchangeKexAlgorithm(_IKexAlgorithm):
     requested size. See RFC 4419.
     """
 
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH256(object):
+    """
+    Elliptic Curve Key Exchange with SHA-256 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 1
+    hashProcessor = sha256
+
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH384(object):
+    """
+    Elliptic Curve Key Exchange with SHA-384 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 2
+    hashProcessor = sha384
+
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH512(object):
+    """
+    Elliptic Curve Key Exchange with SHA-512 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 3
+    hashProcessor = sha512
+
 
 
 @implementer(_IGroupExchangeKexAlgorithm)
@@ -64,7 +96,7 @@ class _DHGroupExchangeSHA256(object):
     RFC 4419, 4.2.
     """
 
-    preference = 1
+    preference = 4
     hashProcessor = sha256
 
 
@@ -76,7 +108,7 @@ class _DHGroupExchangeSHA1(object):
     RFC 4419, 4.1.
     """
 
-    preference = 2
+    preference = 5
     hashProcessor = sha1
 
 
@@ -88,7 +120,7 @@ class _DHGroup1SHA1(object):
     (1024-bit MODP Group). Defined in RFC 4253, 8.1.
     """
 
-    preference = 3
+    preference = 6
     hashProcessor = sha1
     # Diffie-Hellman primes from Oakley Group 2 (RFC 2409, 6.2).
     prime = long('17976931348623159077083915679378745319786029604875601170644'
@@ -107,7 +139,7 @@ class _DHGroup14SHA1(object):
     (2048-bit MODP Group). Defined in RFC 4253, 8.2.
     """
 
-    preference = 4
+    preference = 7
     hashProcessor = sha1
     # Diffie-Hellman primes from Oakley Group 14 (RFC 3526, 3).
     prime = long('32317006071311007300338913926423828248817941241140239112842'
@@ -123,13 +155,24 @@ class _DHGroup14SHA1(object):
     generator = 2L
 
 
-
+#Which ECDH hash function to use is dependent on the size.
 _kexAlgorithms = {
     "diffie-hellman-group-exchange-sha256": _DHGroupExchangeSHA256(),
     "diffie-hellman-group-exchange-sha1": _DHGroupExchangeSHA1(),
     "diffie-hellman-group1-sha1": _DHGroup1SHA1(),
     "diffie-hellman-group14-sha1": _DHGroup14SHA1(),
-    }
+    'ecdh-sha2-nistp256' : _ECDH256(),
+    'ecdh-sha2-nistp384' : _ECDH384(),
+    'ecdh-sha2-nistp521' : _ECDH512(),
+    'ecdh-sha2-nistk163' : _ECDH256(),
+    'ecdh-sha2-nistp224' : _ECDH256(),
+    'ecdh-sha2-nistk233' : _ECDH256(),
+    'ecdh-sha2-nistb233' : _ECDH256(),
+    'ecdh-sha2-nistk283' : _ECDH384(),
+    'ecdh-sha2-nistk409' : _ECDH384(),
+    'ecdh-sha2-nistb409' : _ECDH384(),
+    'ecdh-sha2-nistt571' : _ECDH512()
+    } 
 
 
 
@@ -152,6 +195,19 @@ def getKex(kexAlgorithm):
     return _kexAlgorithms[kexAlgorithm]
 
 
+def isEllipticCurve(kexAlgorithm):
+    """
+    Returns C{True} if C{kexAlgorithm} is an elliptic curve.
+
+    @param kexAlgorithm: The key exchange algorithm name.
+    @type kexAlgorithm: C{str}
+
+    @return: C{True} if C{kexAlgorithm} is an elliptic curve,
+        otherwise C{False}.
+    @rtype: C{bool}
+    """
+    return _IEllipticCurveExchangeKexAlgorithm.providedBy(getKex(kexAlgorithm))
+
 
 def isFixedGroup(kexAlgorithm):
     """
diff --git twisted/conch/ssh/factory.py twisted/conch/ssh/factory.py
index 6f8f104..934db68 100644
--- twisted/conch/ssh/factory.py
+++ twisted/conch/ssh/factory.py
@@ -59,7 +59,7 @@ class SSHFactory(protocol.Factory):
                     'because we cannot find moduli file')
             t.supportedKeyExchanges = [
                 kexAlgorithm for kexAlgorithm in t.supportedKeyExchanges
-                if _kex.isFixedGroup(kexAlgorithm)]
+                if _kex.isFixedGroup(kexAlgorithm) or (hasattr(_kex, "isEllipticCurve") and _kex.isEllipticCurve(kexAlgorithm))]
         return t
 
 
diff --git twisted/conch/ssh/transport.py twisted/conch/ssh/transport.py
index f322669..b373936 100644
--- twisted/conch/ssh/transport.py
+++ twisted/conch/ssh/transport.py
@@ -16,12 +16,14 @@ import binascii
 import hmac
 import struct
 import zlib
+import re
 
-from hashlib import md5, sha1, sha256, sha512
+from hashlib import md5, sha1, sha256, sha384, sha512
 
-from cryptography.exceptions import UnsupportedAlgorithm
+from cryptography.exceptions import UnsupportedAlgorithm, InvalidSignature
 from cryptography.hazmat.backends import default_backend
 from cryptography.hazmat.primitives.ciphers import algorithms, modes, Cipher
+from cryptography.hazmat.primitives.asymmetric import ec
 
 from twisted.internet import protocol, defer
 from twisted.python import log, randbytes
@@ -31,7 +33,6 @@ from twisted.conch.ssh.common import (
     NS, getNS, MP, getMP, _MPpow, ffs, int_from_bytes
 )
 
-
 def _getRandomNumber(random, bits):
     """
     Generate a random number in the range [0, 2 ** bits).
@@ -140,6 +141,7 @@ class SSHCiphers:
     }
     macMap = {
         b'hmac-sha2-512': sha512,
+        b'hmac-sha2-384': sha384,
         b'hmac-sha2-256': sha256,
         b'hmac-sha1': sha1,
         b'hmac-md5': md5,
@@ -462,13 +464,30 @@ class SSHTransportBase(protocol.Protocol):
     supportedCiphers = _getSupportedCiphers()
     supportedMACs = [
         b'hmac-sha2-512',
+        b'hmac-sha2-384',
         b'hmac-sha2-256',
         b'hmac-sha1',
         b'hmac-md5',
         # `none`,
     ]
 
-    supportedKeyExchanges = _kex.getSupportedKeyExchanges()
+    # Curve lookup table
+    curveTable = {
+            'nistp256' : ec.SECP256R1(),
+            'nistp384' : ec.SECP384R1(),
+            'nistp521' : ec.SECP521R1(),
+            'nistk163' : ec.SECT163K1(),
+            'nistp192' : ec.SECP192R1(), 
+            'nistp224' : ec.SECP224R1(),
+            'nistk233' : ec.SECT233K1(),
+            'nistb233' : ec.SECT233R1(),
+            'nistk283' : ec.SECT283K1(),
+            'nistk409' : ec.SECT409K1(),
+            'nistb409' : ec.SECT409R1(),
+            'nistt571' : ec.SECT571K1()
+            }
+
+    supportedKeyExchanges = _kex.getSupportedKeyExchanges() 
     supportedPublicKeys = [b'ssh-rsa', b'ssh-dss']
     supportedCompressions = [b'none', b'zlib']
     supportedLanguages = ()
@@ -1230,6 +1249,74 @@ class SSHServerTransport(SSHTransportBase):
                 self.ignoreNextPacket = True # Guess was wrong
 
 
+    def _ssh_KEX_ECDH_INIT(self, packet):
+        """
+        Called from ssh_KEX_DH_GEX_REQUEST_OLD.
+ 
+        Payload::
+
+            string client Elliptic Curve Diffie-Hellman public key
+
+        First we load the host's public/private keys.
+        Then we generate the ECDH public/private keypair for the given curve.
+        With that we generate the shared secret key.
+        Then we compute the hash to sign and send back to the client
+        Along with the server's public key and the ECDH public key.
+
+        @type packet: L{bytes}
+        @param packet: The message data.
+
+        @return: None.
+        """
+        #Get the host's public and private keys
+        pubHostKey = self.factory.publicKeys[self.keyAlg]
+        privHostKey = self.factory.privateKeys[self.keyAlg]
+        
+        #Get the raw client public key.
+        pktPub, packet = getNS(packet)
+        
+        #Get the base curve info
+        try:
+            shortKex = re.search("(nist[kpbt]\d{3})$", self.kexAlg).group(1)
+        except:
+            raise UnsupportedAlgorithm
+            return
+
+        #Get the curve instance
+        self.curve = self.curveTable[shortKex]
+        
+        #Generate the private key
+        self.ecPriv = ec.generate_private_key(self.curve, default_backend())
+
+        #Get the public key
+        self.ecPub = self.ecPriv.public_key()
+
+        #Take the provided public key and transform it into a format for the cryptography module
+        self.theirECPub = ec.EllipticCurvePublicNumbers.from_encoded_point(self.curve, pktPub).public_key(default_backend())
+    
+        #We need to convert to hex, so we can convert to an int so we can make it a multiple precision int.
+        sharedSecret = MP(int(self.ecPriv.exchange(ec.ECDH(), self.theirECPub).encode('hex'),16))
+       
+        #Create the exchange hash
+        h = _kex.getHashProcessor(self.kexAlg)()
+        h.update(NS(self.otherVersionString))
+        h.update(NS(self.ourVersionString))
+        h.update(NS(self.otherKexInitPayload))
+        h.update(NS(self.ourKexInitPayload))
+        h.update(NS(pubHostKey.blob()))
+        h.update(NS(self.theirECPub.public_numbers().encode_point()))
+        h.update(NS(self.ecPub.public_numbers().encode_point()))
+        h.update(sharedSecret)
+
+        exchangeHash = h.digest()
+
+        #DH_GEX_GROUP has the same number we need
+        self.sendPacket(
+            MSG_KEX_DH_GEX_GROUP,
+            NS(pubHostKey.blob()) + NS(self.ecPub.public_numbers().encode_point()) + NS(privHostKey.sign(exchangeHash)))
+        self._keySetup(sharedSecret, exchangeHash)
+
+
     def _ssh_KEXDH_INIT(self, packet):
         """
         Called to handle the beginning of a non-group key exchange.
@@ -1275,8 +1362,9 @@ class SSHServerTransport(SSHTransportBase):
         """
         This represents different key exchange methods that share the same
         integer value.  If the message is determined to be a KEXDH_INIT,
-        C{_ssh_KEXDH_INIT} is called to handle it.  Otherwise, for
-        KEX_DH_GEX_REQUEST_OLD payload::
+        C{_ssh_KEXDH_INIT} is called to handle it. If it is a KEX_ECDH_INIT,
+        C{_ssh_KEX_ECDH_INIT} is called.
+        Otherwise, for KEX_DH_GEX_REQUEST_OLD payload::
 
                 integer ideal (ideal size for the Diffie-Hellman prime)
 
@@ -1297,6 +1385,8 @@ class SSHServerTransport(SSHTransportBase):
         # another cue to decide what kind of message the peer sent us.
         if _kex.isFixedGroup(self.kexAlg):
             return self._ssh_KEXDH_INIT(packet)
+        elif _kex.isEllipticCurve(self.kexAlg):
+            return self._ssh_KEX_ECDH_INIT(packet)
         else:
             self.dhGexRequest = packet
             ideal = struct.unpack('>L', packet)[0]
@@ -1470,17 +1560,42 @@ class SSHClientTransport(SSHTransportBase):
         """
         Called when we receive a MSG_KEXINIT message.  For a description
         of the packet, see SSHTransportBase.ssh_KEXINIT().  Additionally,
-        this method sends the first key exchange packet.  If the agreed-upon
-        exchange has a fixed prime/generator group, generate a public key
-        and send it in a MSG_KEXDH_INIT message. Otherwise, ask for a 2048
-        bit group with a MSG_KEX_DH_GEX_REQUEST message.
+        this method sends the first key exchange packet.  
+
+        If the agreed-upon exchange is ECDH, generate a key pair for the 
+        corresponding curve and send the public key.
+
+        If the agreed-upon exchange has a fixed prime/generator group,
+        generate a public key and send it in a MSG_KEXDH_INIT message.
+        Otherwise, ask for a 2048 bit group with a MSG_KEX_DH_GEX_REQUEST
+        message.
         """
         if SSHTransportBase.ssh_KEXINIT(self, packet) is None:
             # Connection was disconnected while doing base processing.
             # Maybe no common protocols were agreed.
             return
 
-        if _kex.isFixedGroup(self.kexAlg):
+        # Are we using ECDH?
+        if _kex.isEllipticCurve(self.kexAlg):
+            #Find the base curve info
+            try:
+                shortKex = re.search("(nist[kpbt]\d{3})$", self.kexAlg).group(1)
+            except:
+                raise UnsupportedAlgorithm
+                return
+
+            #Get the curve
+            self.curve = self.curveTable[shortKex]
+
+            #Generate the keys
+            self.ecPriv = ec.generate_private_key(self.curve, default_backend())
+            self.ecPub = self.ecPriv.public_key()
+
+            #DH_GEX_REQUEST_OLD is the same number we need.
+            self.sendPacket(
+                    MSG_KEX_DH_GEX_REQUEST_OLD,
+                    NS(self.ecPub.public_numbers().encode_point()))
+        elif _kex.isFixedGroup(self.kexAlg):
             # We agreed on a fixed group key exchange algorithm.
             self.x = _generateX(randbytes.secureRandom, 512)
             self.g, self.p = _kex.getDHGeneratorAndPrime(self.kexAlg)
@@ -1499,6 +1614,60 @@ class SSHClientTransport(SSHTransportBase):
                     self._dhMaximalGroupSize,
                     ))
 
+    def _ssh_KEX_ECDH_REPLY(self, packet):
+        """
+        Called to handle a reply to a ECDH exchange message(KEX_ECDH_INIT).
+
+        Like the handler for I{KEXDH_INIT}, this message type has an
+        overlapping value.  This method is called from C{ssh_KEX_DH_GEX_GROUP}
+        if that method detects a non-group key exchange is in progress.
+
+        Payload::
+
+            string serverHostKey
+            string server Elliptic Curve Diffie-Hellman public key
+            string signature
+
+        We verify the host key and continue if it passes verificiation.
+        Otherwise raise an exception and return.
+
+        @type packet: L{bytes}
+        @param packet: The message data.
+
+        @return: None.
+        """
+        #Get the host public key
+        self.theirECHost, packet = getNS(packet)
+
+        #Get the raw ECDH public key bytes
+        pktPub, packet = getNS(packet)
+
+        #Take the provided public key and transform it into a format for the cryptography module
+        self.theirECPub = ec.EllipticCurvePublicNumbers.from_encoded_point(self.curve, pktPub).public_key(default_backend())
+
+        #Get the signature
+        signature, packet = getNS(packet)
+
+        #We need to convert to hex, so we can convert to an int so we can make a multiple precision int.
+        sharedSecret = MP(int(self.ecPriv.exchange(ec.ECDH(), self.theirECPub).encode('hex'), 16))
+        
+        h = _kex.getHashProcessor(self.kexAlg)()
+        h.update(NS(self.ourVersionString))
+        h.update(NS(self.otherVersionString))
+        h.update(NS(self.ourKexInitPayload))
+        h.update(NS(self.otherKexInitPayload))
+        h.update(NS(self.theirECHost))
+        h.update(NS(self.ecPub.public_numbers().encode_point()))
+        h.update(NS(self.theirECPub.public_numbers().encode_point()))
+        h.update(sharedSecret)
+
+        exchangeHash = h.digest()
+     
+        if not keys.Key.fromString(self.theirECHost).verify(signature, exchangeHash):
+            raise InvalidSignature
+            return
+        else:
+            self._keySetup(sharedSecret, exchangeHash)
 
     def _ssh_KEXDH_REPLY(self, packet):
         """
@@ -1539,6 +1708,8 @@ class SSHClientTransport(SSHTransportBase):
     def ssh_KEX_DH_GEX_GROUP(self, packet):
         """
         This handles different messages which share an integer value.
+       
+        If it is ECDH, call C{_ssh_KEX_ECDH_REPLY} and pass along the packet.
 
         If the key exchange does not have a fixed prime/generator group,
         we generate a Diffie-Hellman public key and send it in a
@@ -1553,6 +1724,8 @@ class SSHClientTransport(SSHTransportBase):
         """
         if _kex.isFixedGroup(self.kexAlg):
             return self._ssh_KEXDH_REPLY(packet)
+        elif _kex.isEllipticCurve(self.kexAlg):
+            self._ssh_KEX_ECDH_REPLY(packet)
         else:
             self.p, rest = getMP(packet)
             self.g, rest = getMP(rest)
@@ -1593,7 +1766,6 @@ class SSHClientTransport(SSHTransportBase):
             return
         self._keySetup(sharedSecret, exchangeHash)
 
-
     def ssh_KEX_DH_GEX_REPLY(self, packet):
         """
         Called when we receive a MSG_KEX_DH_GEX_REPLY message.  Payload::
@@ -1661,7 +1833,6 @@ class SSHClientTransport(SSHTransportBase):
             return
         self._keySetup(sharedSecret, exchangeHash)
 
-
     def _keySetup(self, sharedSecret, exchangeHash):
         """
         See SSHTransportBase._keySetup().
@@ -1825,7 +1996,9 @@ MSG_KEX_DH_GEX_GROUP = 31
 MSG_KEX_DH_GEX_INIT = 32
 MSG_KEX_DH_GEX_REPLY = 33
 
-
+#Unused but here for reference and possibly future use.
+#MSG_KEX_ECDH_INIT = 30
+#MSG_KEX_ECDH_REPLY = 31
 
 DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT = 1
 DISCONNECT_PROTOCOL_ERROR = 2
