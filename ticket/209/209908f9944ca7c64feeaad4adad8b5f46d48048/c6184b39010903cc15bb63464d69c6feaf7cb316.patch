=== modified file 'twisted/names/client.py'
--- twisted/names/client.py	2013-11-16 15:50:01 +0000
+++ twisted/names/client.py	2014-01-08 15:37:51 +0000
@@ -368,10 +368,10 @@
         Otherwise, return a three-tuple of lists containing the results from
         the answers section, the authority section, and the additional section.
         """
-        if message.trunc:
+        if message.truncated:
             return self.queryTCP(message.queries).addCallback(self.filterAnswers)
-        if message.rCode != dns.OK:
-            return failure.Failure(self.exceptionForCode(message.rCode)(message))
+        if message.responseCode != dns.OK:
+            return failure.Failure(self.exceptionForCode(message.responseCode)(message))
         return (message.answers, message.authority, message.additional)
 
 
@@ -451,7 +451,7 @@
 
     def connectionMade(self, protocol):
         # dig saids recursion-desired to 0, so I will too
-        message = dns.Message(protocol.pickID(), recDes=0)
+        message = dns.StandardMessage(protocol.pickID(), recursionDesired=0)
         message.queries = [dns.Query(self.name, dns.AXFR, dns.IN)]
         protocol.writeMessage(message)
 

=== modified file 'twisted/names/dns.py'
--- twisted/names/dns.py	2014-01-07 17:29:37 +0000
+++ twisted/names/dns.py	2014-01-08 15:53:51 +0000
@@ -1911,7 +1911,7 @@
 
 
 
-class Message(tputil.FancyEqMixin):
+class _Message(tputil.FancyEqMixin):
     """
     L{Message} contains all the information represented by a single
     DNS request or response.
@@ -2087,7 +2087,7 @@
 
 
     def decode(self, strio, length=None):
-        self.maxSize = 0
+#        self.maxSize = 0
         header = readPrecisely(strio, self.headerSize)
         r = struct.unpack(self.headerFmt, header)
         self.id, byte3, byte4, nqueries, nans, nns, nadd = r
@@ -2189,6 +2189,226 @@
 
 
 
+class Message(_Message):
+    """
+    Placeholder for the deprecated Message
+    """
+
+
+
+from twisted.python.util import Version
+from twisted.python.deprecate import deprecatedModuleAttribute
+deprecatedModuleAttribute(
+    Version("Twisted", 14, 0, 0),
+    "Use StandardMessage instead.",
+    "twisted.names.dns",
+    "Message")
+
+
+
+class StandardMessage(tputil.FancyStrMixin, tputil.FancyEqMixin, object):
+
+    showAttributes = (
+        'id', 'answer', 'opCode', 'authoritativeAnswer', 'truncated',
+        'recursionDesired', 'recursionAvailable', 'responseCode',
+        'authenticData', 'checkingDisabled', 'maxSize',
+        'queries', 'answers', 'authority', 'additional')
+
+    compareAttributes = showAttributes
+
+    def __init__(self, id=0, answer=False, opCode=OP_QUERY,
+                 authoritativeAnswer=False, truncated=False,
+                 recursionDesired=False, recursionAvailable=False,
+                 responseCode=0,
+                 authenticData=False, checkingDisabled=False, maxSize=512,
+                 queries=None, answers=None, authority=None, additional=None):
+        """
+        Construct a new L{StandardMessage}.
+
+        @see U{RFC1035 section-4.1.1<https://tools.ietf.org/html/rfc1035#section-4.1.1>}
+        @see U{RFC2535 section-6.1<https://tools.ietf.org/html/rfc2535#section-6.1>}
+        @see U{RFC3225 section-3<https://tools.ietf.org/html/rfc3225#section-3>}
+        @see U{RFC6891 section-6.1.3<https://tools.ietf.org/html/rfc6891#section-6.1.3>}
+
+        @param id: A 16 bit identifier assigned by the program that generates
+            any kind of query.  This identifier is copied the corresponding
+            reply and can be used by the requester to match up replies to
+            outstanding queries.
+        @type id: L{int}
+
+        @param answer: A one bit field that specifies whether this message is a
+            query (0), or a response (1).
+        @type answer: L{bool}
+
+        @param opCode: A four bit field that specifies kind of query in this
+            message.  This value is set by the originator of a query and copied
+            into the response.
+        @type opCode: L{int}
+
+        @param authoritativeAnswer: Authoritative Answer - this bit is valid in
+            responses, and specifies that the responding name server is an
+            authority for the domain name in question section.
+        @type authoritativeAnswer: L{bool}
+
+        @param truncated: Truncation - specifies that this message was truncated due
+            to length greater than that permitted on the transmission channel.
+        @type truncated: L{bool}
+
+        @param recursionDesired: Recursion Desired - this bit may be set in a
+            query and is copied into the response.  If set, it directs the name
+            server to pursue the query recursively. Recursive query support is
+            optional.
+        @type recursionDesired: L{bool}
+
+        @param recursionAvailable: Recursion Available - this bit is set or
+            cleared in a response, and denotes whether recursive query support
+            is available in the name server.
+        @type recursionAvailable: L{bool}
+
+        @param responseCode: Extended 12-bit RCODE. Derived from the 4 bits
+            defined in U{RFC1035
+            4.1.1<https://tools.ietf.org/html/rfc1035#section-4.1.1>} and the
+            upper 8bits defined in U{RFC6891
+            6.1.3<https://tools.ietf.org/html/rfc6891#section-6.1.3>}.
+        @type responseCode: L{int}
+
+        @param authenticData: A flag indicating in a response that all the data
+            included in the answer and authority portion of the response has
+            been authenticated by the server according to the policies of that
+            server.
+            See U{RFC2535 section-6.1<https://tools.ietf.org/html/rfc2535#section-6.1>}.
+        @type authenticData: L{bool}
+
+        @param checkingDisabled: A flag indicating in a query that pending
+            (non-authenticated) data is acceptable to the resolver sending the
+            query.
+            See U{RFC2535 section-6.1<https://tools.ietf.org/html/rfc2535#section-6.1>}.
+        @type authenticData: L{bool}
+
+        @param maxSize: The requestor's UDP payload size is the number of octets
+            of the largest UDP payload that can be reassembled and delivered in
+            the requestor's network stack.
+        @type maxSize: L{int}
+
+        @param queries: The L{list} of L{Query} associated with this message.
+        @type queries: L{list} of L{Query}
+
+        @param answers: The L{list} of answers associated with this message.
+        @type answers: L{list} of L{RRHeader}
+
+        @param authority: The L{list} of authority records associated with this
+            message.
+        @type authority: L{list} of L{RRHeader}
+
+        @param additional: The L{list} of additional records associated with
+            this message.
+        @type additional: L{list} of L{RRHeader}
+        """
+        self.id = id
+        self.answer = answer
+        self.opCode = opCode
+        self.authoritativeAnswer = authoritativeAnswer
+        self.truncated = truncated
+        self.recursionDesired = recursionDesired
+        self.recursionAvailable = recursionAvailable
+        self.responseCode = responseCode
+        self.authenticData = authenticData
+        self.checkingDisabled = checkingDisabled
+        self.maxSize = maxSize
+
+        if queries is None:
+            queries = []
+        self.queries = queries
+
+        if answers is None:
+            answers = []
+        self.answers = answers
+
+        if authority is None:
+            authority = []
+        self.authority = authority
+
+        if additional is None:
+            additional = []
+        self.additional = additional
+
+
+    def addQuery(self, name, type=ALL_RECORDS, cls=IN):
+        """
+        Add another query to this Message.
+
+        @type name: C{bytes}
+        @param name: The name to query.
+
+        @type type: C{int}
+        @param type: Query type
+
+        @type cls: C{int}
+        @param cls: Query class
+        """
+        self.queries.append(Query(name, type, cls))
+
+
+    def toStr(self):
+        """
+        Encode this L{StandardMessage} into a byte string in the format
+        described by RFC 1035.
+
+        @rtype: C{bytes}
+        """
+        strio = BytesIO()
+        m = _Message(
+            id=self.id,
+            answer=self.answer,
+            opCode=self.opCode,
+            recDes=self.recursionDesired,
+            recAv=self.recursionAvailable,
+            auth=self.authoritativeAnswer,
+            rCode=self.responseCode,
+            trunc=self.truncated,
+            maxSize=self.maxSize,
+            authenticData=self.authenticData,
+            checkingDisabled=self.checkingDisabled,
+        )
+        m.queries = self.queries
+        m.answers = self.answers
+        m.authority = self.authority
+        m.additional = self.additional
+        m.encode(strio)
+        return strio.getvalue()
+
+
+    @classmethod
+    def fromStr(cls, str):
+        """
+        Decode a byte string in the format described by RFC 1035 into this
+        L{StandardMessage}.
+
+        @param str: L{bytes}
+        """
+        strio = BytesIO(str)
+        m = _Message()
+        m.decode(strio)
+        return cls(
+            id=m.id,
+            answer=m.answer,
+            opCode=m.opCode,
+            recursionDesired=m.recDes,
+            recursionAvailable=m.recAv,
+            authoritativeAnswer=m.auth,
+            responseCode=m.rCode,
+            truncated=m.trunc,
+            maxSize=m.maxSize,
+            authenticData=m.authenticData,
+            checkingDisabled=m.checkingDisabled,
+            queries=m.queries,
+            answers=m.answers,
+            authority=m.authority,
+            additional=m.additional,
+        )
+
+
+
 class _EDNSMessage(tputil.FancyStrMixin, tputil.FancyEqMixin, object):
     """
     An I{EDNS} message.
@@ -2478,7 +2698,8 @@
         return newMessage
 
 
-    def fromStr(self, bytes):
+    @classmethod
+    def fromStr(cls, bytes):
         """
         Decode from wire format, saving flags, values and records to this
         L{_EDNSMessage} instance in place.
@@ -2486,12 +2707,9 @@
         @param bytes: The full byte string to be decoded.
         @type bytes: L{bytes}
         """
-        m = self._messageFactory()
+        m = cls._messageFactory()
         m.fromStr(bytes)
-
-        ednsMessage = self._fromMessage(m)
-        for attrName in self.compareAttributes:
-            setattr(self, attrName, getattr(ednsMessage, attrName))
+        return cls._fromMessage(m)
 
 
 
@@ -2551,7 +2769,7 @@
             query, or errbacked with any errors that could happen (exceptions
             during writing of the query, timeout errors, ...).
         """
-        m = Message(id, recDes=1)
+        m = StandardMessage(id, recursionDesired=1)
         m.queries = queries
 
         try:
@@ -2613,9 +2831,8 @@
         Read a datagram, extract the message in it and trigger the associated
         Deferred.
         """
-        m = Message()
         try:
-            m.fromStr(data)
+            m = StandardMessage.fromStr(data)
         except EOFError:
             log.msg("Truncated packet (%d bytes) from %s" % (len(data), addr))
             return

=== modified file 'twisted/names/root.py'
--- twisted/names/root.py	2013-11-16 15:50:01 +0000
+++ twisted/names/root.py	2014-01-08 15:44:28 +0000
@@ -184,8 +184,8 @@
             lists of L{RRHeaders} giving the response to C{query} or a
             L{Deferred} which will fire with one of those.
         """
-        if response.rCode != dns.OK:
-            return Failure(self.exceptionForCode(response.rCode)(response))
+        if response.responseCode != dns.OK:
+            return Failure(self.exceptionForCode(response.responseCode)(response))
 
         # Turn the answers into a structure that's a little easier to work with.
         records = {}

=== modified file 'twisted/names/test/test_client.py'
--- twisted/names/test/test_client.py	2014-01-01 15:20:43 +0000
+++ twisted/names/test/test_client.py	2014-01-08 15:38:55 +0000
@@ -379,7 +379,7 @@
         # The response to the first query should be sent in response to both
         # queries.
         answer = object()
-        response = dns.Message()
+        response = dns.StandardMessage()
         response.answers.append(answer)
         queries.pop()[-1].callback(response)
 
@@ -438,7 +438,7 @@
         self.assertEqual(len(queries), 1)
 
         # Deliver the response.
-        queries.pop()[-1].callback(dns.Message())
+        queries.pop()[-1].callback(dns.StandardMessage())
 
         # Repeating the first query should touch the protocol again.
         resolver.query(query)
@@ -518,7 +518,7 @@
 
             def query(self, address, query, timeout=10, id=None):
                 protocols.append(self)
-                return defer.succeed(dns.Message())
+                return defer.succeed(dns.StandardMessage())
 
         resolver._connectedProtocol = FakeProtocol
         resolver.query(dns.Query(b'foo.example.com'))
@@ -554,7 +554,7 @@
         resolver = client.Resolver(servers=[('example.com', 53)])
         protocols = []
         results = [defer.fail(failure.Failure(DNSQueryTimeoutError(None))),
-                   defer.succeed(dns.Message())]
+                   defer.succeed(dns.StandardMessage())]
 
         class FakeProtocol(object):
             def __init__(self):
@@ -591,7 +591,7 @@
         resolver.query(dns.Query(b'foo.example.com'))
 
         self.assertFalse(protocols[0].transport.disconnected)
-        result.callback(dns.Message())
+        result.callback(dns.StandardMessage())
         self.assertTrue(protocols[0].transport.disconnected)
 
 
@@ -619,7 +619,7 @@
         resolver.query(dns.Query(b'foo.example.com'))
 
         self.assertFalse(protocols[1].transport.disconnected)
-        result.callback(dns.Message())
+        result.callback(dns.StandardMessage())
         self.assertTrue(protocols[1].transport.disconnected)
 
 
@@ -1056,15 +1056,18 @@
         Test that a truncated message results in an equivalent request made via
         TCP.
         """
-        m = dns.Message(trunc=True)
-        m.addQuery(b'example.com')
+        m = dns.StandardMessage(
+            truncated=True,
+            queries=[dns.Query(b'example.com')]
+        )
 
         def queryTCP(queries):
             self.assertEqual(queries, m.queries)
-            response = dns.Message()
-            response.answers = ['answer']
-            response.authority = ['authority']
-            response.additional = ['additional']
+            response = dns.StandardMessage(
+                answers=['answer'],
+                authority=['authority'],
+                additional=['additional']
+            )
             return defer.succeed(response)
         self.resolver.queryTCP = queryTCP
         d = self.resolver.filterAnswers(m)
@@ -1074,7 +1077,7 @@
 
 
     def _rcodeTest(self, rcode, exc):
-        m = dns.Message(rCode=rcode)
+        m = dns.StandardMessage(responseCode=rcode)
         err = self.resolver.filterAnswers(m)
         err.trap(exc)
 

=== modified file 'twisted/names/test/test_dns.py'
--- twisted/names/test/test_dns.py	2014-01-07 17:29:37 +0000
+++ twisted/names/test/test_dns.py	2014-01-08 15:58:59 +0000
@@ -180,7 +180,7 @@
 
         # The position at which the encoded form of this new name will appear in
         # the stream.
-        expected = len(previous) + dns.Message.headerSize
+        expected = len(previous) + dns._Message.headerSize
         name.encode(stream, compression)
         self.assertEqual(
             b"\x03foo\xc0\x17",
@@ -229,7 +229,7 @@
             b'\x01\x02\x03\x04'      # 1.2.3.4
             )
 
-        msg = dns.Message()
+        msg = dns._Message()
         msg.fromStr(wire)
 
         self.assertEqual(msg.queries, [
@@ -598,41 +598,41 @@
 
 class MessageTestCase(unittest.SynchronousTestCase):
     """
-    Tests for L{twisted.names.dns.Message}.
+    Tests for L{twisted.names.dns._Message}.
     """
 
     def test_authenticDataDefault(self):
         """
-        L{dns.Message.authenticData} has default value 0.
+        L{dns._Message.authenticData} has default value 0.
         """
-        self.assertEqual(dns.Message().authenticData, 0)
+        self.assertEqual(dns._Message().authenticData, 0)
 
 
     def test_authenticDataOverride(self):
         """
-        L{dns.Message.__init__} accepts a C{authenticData} argument which
-        is assigned to L{dns.Message.authenticData}.
+        L{dns._Message.__init__} accepts a C{authenticData} argument which
+        is assigned to L{dns._Message.authenticData}.
         """
-        self.assertEqual(dns.Message(authenticData=1).authenticData, 1)
+        self.assertEqual(dns._Message(authenticData=1).authenticData, 1)
 
 
     def test_authenticDataEncode(self):
         """
-        L{dns.Message.toStr} encodes L{dns.Message.authenticData} into
+        L{dns._Message.toStr} encodes L{dns._Message.authenticData} into
         byte4 of the byte string.
         """
         self.assertEqual(
-            dns.Message(authenticData=1).toStr(),
+            dns._Message(authenticData=1).toStr(),
             MESSAGE_AUTHENTIC_DATA_BYTES
         )
 
 
     def test_authenticDataDecode(self):
         """
-        L{dns.Message.fromStr} decodes byte4 and assigns bit3 to
-        L{dns.Message.authenticData}.
+        L{dns._Message.fromStr} decodes byte4 and assigns bit3 to
+        L{dns._Message.authenticData}.
         """
-        m = dns.Message()
+        m = dns._Message()
         m.fromStr(MESSAGE_AUTHENTIC_DATA_BYTES)
 
         self.assertEqual(m.authenticData, 1)
@@ -640,37 +640,37 @@
 
     def test_checkingDisabledDefault(self):
         """
-        L{dns.Message.checkingDisabled} has default value 0.
+        L{dns._Message.checkingDisabled} has default value 0.
         """
-        self.assertEqual(dns.Message().checkingDisabled, 0)
+        self.assertEqual(dns._Message().checkingDisabled, 0)
 
 
     def test_checkingDisabledOverride(self):
         """
-        L{dns.Message.__init__} accepts a C{checkingDisabled} argument which
-        is assigned to L{dns.Message.checkingDisabled}.
+        L{dns._Message.__init__} accepts a C{checkingDisabled} argument which
+        is assigned to L{dns._Message.checkingDisabled}.
         """
         self.assertEqual(
-            dns.Message(checkingDisabled=1).checkingDisabled, 1)
+            dns._Message(checkingDisabled=1).checkingDisabled, 1)
 
 
     def test_checkingDisabledEncode(self):
         """
-        L{dns.Message.toStr} encodes L{dns.Message.checkingDisabled} into
+        L{dns._Message.toStr} encodes L{dns._Message.checkingDisabled} into
         byte4 of the byte string.
         """
         self.assertEqual(
-            dns.Message(checkingDisabled=1).toStr(),
+            dns._Message(checkingDisabled=1).toStr(),
             MESSAGE_CHECKING_DISABLED_BYTES
         )
 
 
     def test_checkingDisabledDecode(self):
         """
-        L{dns.Message.fromStr} decodes byte4 and assigns bit4 to
-        L{dns.Message.checkingDisabled}.
+        L{dns._Message.fromStr} decodes byte4 and assigns bit4 to
+        L{dns._Message.checkingDisabled}.
         """
-        m = dns.Message()
+        m = dns._Message()
         m.fromStr(MESSAGE_CHECKING_DISABLED_BYTES)
 
         self.assertEqual(m.checkingDisabled, 1)
@@ -681,7 +681,7 @@
         Test that a message which has been truncated causes an EOFError to
         be raised when it is parsed.
         """
-        msg = dns.Message()
+        msg = dns._Message()
         self.assertRaises(EOFError, msg.fromStr, b'')
 
 
@@ -690,7 +690,7 @@
         Test that bytes representing an empty query message can be decoded
         as such.
         """
-        msg = dns.Message()
+        msg = dns._Message()
         msg.fromStr(
             b'\x01\x00' # Message ID
             b'\x00' # answer bit, opCode nibble, auth bit, trunc bit, recursive bit
@@ -718,17 +718,17 @@
     def test_NULL(self):
         """
         A I{NULL} record with an arbitrary payload can be encoded and decoded as
-        part of a L{dns.Message}.
+        part of a L{dns._Message}.
         """
         bytes = b''.join([dns._ord2bytes(i) for i in range(256)])
         rec = dns.Record_NULL(bytes)
         rr = dns.RRHeader(b'testname', dns.NULL, payload=rec)
-        msg1 = dns.Message()
+        msg1 = dns._Message()
         msg1.answers.append(rr)
         s = BytesIO()
         msg1.encode(s)
         s.seek(0, 0)
-        msg2 = dns.Message()
+        msg2 = dns._Message()
         msg2.decode(s)
 
         self.assertIsInstance(msg2.answers[0].payload, dns.Record_NULL)
@@ -744,7 +744,7 @@
         # 65280 is the first value in the range reserved for private
         # use, so it shouldn't ever conflict with an officially
         # allocated value.
-        self.assertIs(dns.Message().lookupRecordType(65280), dns.UnknownRecord)
+        self.assertIs(dns._Message().lookupRecordType(65280), dns.UnknownRecord)
 
 
     def test_nonAuthoritativeMessage(self):
@@ -755,7 +755,7 @@
         buf = BytesIO()
         answer = dns.RRHeader(payload=dns.Record_A('1.2.3.4', ttl=0))
         answer.encode(buf)
-        message = dns.Message()
+        message = dns._Message()
         message.fromStr(
             b'\x01\x00' # Message ID
             # answer bit, opCode nibble, auth bit, trunc bit, recursive bit
@@ -781,7 +781,7 @@
         buf = BytesIO()
         answer = dns.RRHeader(payload=dns.Record_A('1.2.3.4', ttl=0))
         answer.encode(buf)
-        message = dns.Message()
+        message = dns._Message()
         message.fromStr(
             b'\x01\x00' # Message ID
             # answer bit, opCode nibble, auth bit, trunc bit, recursive bit
@@ -804,25 +804,25 @@
 class MessageComparisonTests(ComparisonTestsMixin,
                              unittest.SynchronousTestCase):
     """
-    Tests for the rich comparison of L{dns.Message} instances.
+    Tests for the rich comparison of L{dns._Message} instances.
     """
     def messageFactory(self, *args, **kwargs):
         """
-        Create a L{dns.Message}.
+        Create a L{dns._Message}.
 
-        The L{dns.Message} constructor doesn't accept C{queries}, C{answers},
+        The L{dns._Message} constructor doesn't accept C{queries}, C{answers},
         C{authority}, C{additional} arguments, so we extract them from the
         kwargs supplied to this factory function and assign them to the message.
 
         @param args: Positional arguments.
         @param kwargs: Keyword arguments.
-        @return: A L{dns.Message} instance.
+        @return: A L{dns._Message} instance.
         """
         queries = kwargs.pop('queries', [])
         answers = kwargs.pop('answers', [])
         authority = kwargs.pop('authority', [])
         additional = kwargs.pop('additional', [])
-        m = dns.Message(**kwargs)
+        m = dns._Message(**kwargs)
         if queries:
             m.queries = queries
         if answers:
@@ -836,7 +836,7 @@
 
     def test_id(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same id
+        Two L{dns._Message} instances compare equal if they have the same id
         value.
         """
         self.assertNormalEqualityImplementation(
@@ -848,7 +848,7 @@
 
     def test_answer(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same answer
+        Two L{dns._Message} instances compare equal if they have the same answer
         flag.
         """
         self.assertNormalEqualityImplementation(
@@ -860,7 +860,7 @@
 
     def test_opCode(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same opCode
+        Two L{dns._Message} instances compare equal if they have the same opCode
         value.
         """
         self.assertNormalEqualityImplementation(
@@ -872,7 +872,7 @@
 
     def test_recDes(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same recDes
+        Two L{dns._Message} instances compare equal if they have the same recDes
         flag.
         """
         self.assertNormalEqualityImplementation(
@@ -884,7 +884,7 @@
 
     def test_recAv(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same recAv
+        Two L{dns._Message} instances compare equal if they have the same recAv
         flag.
         """
         self.assertNormalEqualityImplementation(
@@ -896,7 +896,7 @@
 
     def test_auth(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same auth
+        Two L{dns._Message} instances compare equal if they have the same auth
         flag.
         """
         self.assertNormalEqualityImplementation(
@@ -908,7 +908,7 @@
 
     def test_rCode(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same rCode
+        Two L{dns._Message} instances compare equal if they have the same rCode
         value.
         """
         self.assertNormalEqualityImplementation(
@@ -920,7 +920,7 @@
 
     def test_trunc(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same trunc
+        Two L{dns._Message} instances compare equal if they have the same trunc
         flag.
         """
         self.assertNormalEqualityImplementation(
@@ -932,7 +932,7 @@
 
     def test_maxSize(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same
+        Two L{dns._Message} instances compare equal if they have the same
         maxSize value.
         """
         self.assertNormalEqualityImplementation(
@@ -944,7 +944,7 @@
 
     def test_authenticData(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same
+        Two L{dns._Message} instances compare equal if they have the same
         authenticData flag.
         """
         self.assertNormalEqualityImplementation(
@@ -956,7 +956,7 @@
 
     def test_checkingDisabled(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same
+        Two L{dns._Message} instances compare equal if they have the same
         checkingDisabled flag.
         """
         self.assertNormalEqualityImplementation(
@@ -968,7 +968,7 @@
 
     def test_queries(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same
+        Two L{dns._Message} instances compare equal if they have the same
         queries.
         """
         self.assertNormalEqualityImplementation(
@@ -980,7 +980,7 @@
 
     def test_answers(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same
+        Two L{dns._Message} instances compare equal if they have the same
         answers.
         """
         self.assertNormalEqualityImplementation(
@@ -995,7 +995,7 @@
 
     def test_authority(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same
+        Two L{dns._Message} instances compare equal if they have the same
         authority records.
         """
         self.assertNormalEqualityImplementation(
@@ -1013,7 +1013,7 @@
 
     def test_additional(self):
         """
-        Two L{dns.Message} instances compare equal if they have the same
+        Two L{dns._Message} instances compare equal if they have the same
         additional records.
         """
         self.assertNormalEqualityImplementation(
@@ -1083,7 +1083,7 @@
         """
         d = self.proto.query(('127.0.0.1', 21345), [dns.Query(b'foo')])
         self.assertEqual(len(self.proto.liveMessages.keys()), 1)
-        m = dns.Message()
+        m = dns._Message()
         m.id = next(iter(self.proto.liveMessages.keys()))
         m.answers = [dns.RRHeader(payload=dns.Record_A(address='1.2.3.4'))]
         def cb(result):
@@ -1141,7 +1141,7 @@
         L{DNSDatagramProtocol.liveMessages} or L{DNSDatagramProtocol.resends},
         the message will be received by L{DNSDatagramProtocol.controller}.
         """
-        message = dns.Message()
+        message = dns._Message()
         message.id = 1
         message.answers = [dns.RRHeader(
             payload=dns.Record_A(address='1.2.3.4'))]
@@ -1219,7 +1219,7 @@
         """
         d = self.proto.query([dns.Query(b'foo')])
         self.assertEqual(len(self.proto.liveMessages.keys()), 1)
-        m = dns.Message()
+        m = dns._Message()
         m.id = next(iter(self.proto.liveMessages.keys()))
         m.answers = [dns.RRHeader(payload=dns.Record_A(address='1.2.3.4'))]
         def cb(result):
@@ -1250,7 +1250,7 @@
         When receiving a message whose id is not in L{DNSProtocol.liveMessages}
         the message will be received by L{DNSProtocol.controller}.
         """
-        message = dns.Message()
+        message = dns._Message()
         message.id = 1
         message.answers = [dns.RRHeader(
             payload=dns.Record_A(address='1.2.3.4'))]
@@ -3428,7 +3428,7 @@
 
 class MessageComparable(FancyEqMixin, FancyStrMixin, object):
     """
-    A wrapper around L{dns.Message} which is comparable so that it can be tested
+    A wrapper around L{dns._Message} which is comparable so that it can be tested
     using some of the L{dns._EDNSMessage} tests.
     """
     showAttributes = compareAttributes = (
@@ -3529,10 +3529,10 @@
 class CommonConstructorTestsMixin(object):
     """
     Tests for constructor arguments and their associated attributes that are
-    common to both L{twisted.names.dns._EDNSMessage} and L{dns.Message}.
+    common to both L{twisted.names.dns._EDNSMessage} and L{dns._Message}.
 
     TestCase classes that use this mixin must provide a C{messageFactory} method
-    which accepts any argment supported by L{dns.Message.__init__}.
+    which accepts any argment supported by L{dns._Message.__init__}.
 
     TestCases must also mixin ConstructorTestsMixin which provides some custom
     assertions for testing constructor arguments.
@@ -3570,6 +3570,22 @@
         self._verifyConstructorArgument('maxSize', defaultVal=512, altVal=1024)
 
 
+    def test_authenticData(self):
+        """
+        L{dns._EDNSMessage.authenticData} defaults to C{False} and can be
+        overridden in the constructor.
+        """
+        self._verifyConstructorFlag('authenticData', defaultVal=False)
+
+
+    def test_checkingDisabled(self):
+        """
+        L{dns._EDNSMessage.checkingDisabled} defaults to C{False} and can be
+        overridden in the constructor.
+        """
+        self._verifyConstructorFlag('checkingDisabled', defaultVal=False)
+
+
     def test_queries(self):
         """
         L{dns._EDNSMessage.queries} defaults to C{[]}.
@@ -3599,89 +3615,11 @@
 
 
 
-class EDNSMessageConstructorTests(ConstructorTestsMixin,
-                                  CommonConstructorTestsMixin,
-                                  unittest.SynchronousTestCase):
-    """
-    Tests for L{twisted.names.dns._EDNSMessage} constructor arguments that are
-    shared with L{dns.Message}.
-    """
-    messageFactory = dns._EDNSMessage
-
-
-
-class MessageConstructorTests(ConstructorTestsMixin,
-                              CommonConstructorTestsMixin,
-                              unittest.SynchronousTestCase):
-    """
-    Tests for L{twisted.names.dns.Message} constructor arguments that are shared
-    with L{dns._EDNSMessage}.
-    """
-    messageFactory = dns.Message
-
-
-
-class MessageSpecificsTestCase(ConstructorTestsMixin,
-                               unittest.SynchronousTestCase):
-    """
-    Tests for L{dns.Message}.
-
-    These tests are for L{dns.Message} APIs which are not shared with
-    L{dns._EDNSMessage}.
-    """
-    messageFactory = dns.Message
-
-    def test_auth(self):
-        """
-        L{dns.Message.auth} defaults to C{False} and can be overridden in the
-        constructor.
-        """
-        self._verifyConstructorFlag('auth', defaultVal=False)
-
-
-    def test_recDes(self):
-        """
-        L{dns.Message.recDes} defaults to C{False} and can be overridden in the
-        constructor.
-        """
-        self._verifyConstructorFlag('recDes', defaultVal=False)
-
-
-    def test_recAv(self):
-        """
-        L{dns.Message.recAv} defaults to C{False} and can be overridden in the
-        constructor.
-        """
-        self._verifyConstructorFlag('recAv', defaultVal=False)
-
-
-    def test_responseCode(self):
-        """
-        L{dns.Message.rCode} defaults to C{0} and can be overridden in the
-        constructor.
-        """
-        self._verifyConstructorArgument('rCode', defaultVal=0, altVal=123)
-
-
-    def test_trunc(self):
-        """
-        L{dns.Message.trunc} defaults to C{False} and can be overridden in the
-        constructor.
-        """
-        self._verifyConstructorFlag('trunc', defaultVal=False)
-
-
-
-class EDNSMessageSpecificsTestCase(ConstructorTestsMixin,
-                                   unittest.SynchronousTestCase):
-    """
-    Tests for L{dns._EDNSMessage}.
-
-    These tests are for L{dns._EDNSMessage} APIs which are not shared with
-    L{dns.Message}.
-    """
-    messageFactory = dns._EDNSMessage
-
+class NewStyleConstructorTestsMixin(object):
+    """
+    Tests for the new meaningful constructor arguments and attribute names which
+    were introduced with L{_EDNSMessage} and L{StandardMessage}.
+    """
     def test_authoritativeAnswer(self):
         """
         L{dns._EDNSMessage.authoritativeAnswer} defaults to C{False} and can be
@@ -3722,40 +3660,6 @@
         """
         self._verifyConstructorFlag('truncated', defaultVal=False)
 
-
-    def test_ednsVersion(self):
-        """
-        L{dns._EDNSMessage.ednsVersion} defaults to C{0} and can be overridden
-        in the constructor.
-        """
-        self._verifyConstructorArgument(
-            'ednsVersion', defaultVal=0, altVal=None)
-
-
-    def test_dnssecOK(self):
-        """
-        L{dns._EDNSMessage.dnssecOK} defaults to C{False} and can be overridden
-        in the constructor.
-        """
-        self._verifyConstructorFlag('dnssecOK', defaultVal=False)
-
-
-    def test_authenticData(self):
-        """
-        L{dns._EDNSMessage.authenticData} defaults to C{False} and can be
-        overridden in the constructor.
-        """
-        self._verifyConstructorFlag('authenticData', defaultVal=False)
-
-
-    def test_checkingDisabled(self):
-        """
-        L{dns._EDNSMessage.checkingDisabled} defaults to C{False} and can be
-        overridden in the constructor.
-        """
-        self._verifyConstructorFlag('checkingDisabled', defaultVal=False)
-
-
     def test_queriesOverride(self):
         """
         L{dns._EDNSMessage.queries} can be overridden in the constructor.
@@ -3814,6 +3718,120 @@
             [dns.RRHeader(b'example.com', payload=dns.Record_A('1.2.3.4'))])
 
 
+
+class EDNSMessageConstructorTests(ConstructorTestsMixin,
+                                  CommonConstructorTestsMixin,
+                                  NewStyleConstructorTestsMixin,
+                                  unittest.SynchronousTestCase):
+    """
+    Tests for L{twisted.names.dns._EDNSMessage} constructor arguments that are
+    shared with L{dns._Message}.
+    """
+    messageFactory = dns._EDNSMessage
+
+
+
+class StandardMessageConstructorTests(ConstructorTestsMixin,
+                                      CommonConstructorTestsMixin,
+                                      NewStyleConstructorTestsMixin,
+                                      unittest.SynchronousTestCase):
+    """
+    Tests for L{twisted.names.dns.StandardMessage} constructor arguments that
+    are shared with L{dns._EDNSMessage}.
+    """
+    messageFactory = dns.StandardMessage
+
+
+
+class MessageConstructorTests(ConstructorTestsMixin,
+                              CommonConstructorTestsMixin,
+                              unittest.SynchronousTestCase):
+    """
+    Tests for L{twisted.names.dns._Message} constructor arguments that are shared
+    with L{dns._EDNSMessage}.
+    """
+    messageFactory = dns._Message
+
+
+
+class MessageSpecificsTestCase(ConstructorTestsMixin,
+                               unittest.SynchronousTestCase):
+    """
+    Tests for L{dns._Message}.
+
+    These tests are for L{dns._Message} APIs which are not shared with
+    L{dns._EDNSMessage}.
+    """
+    messageFactory = dns._Message
+
+    def test_auth(self):
+        """
+        L{dns._Message.auth} defaults to C{False} and can be overridden in the
+        constructor.
+        """
+        self._verifyConstructorFlag('auth', defaultVal=False)
+
+
+    def test_recDes(self):
+        """
+        L{dns._Message.recDes} defaults to C{False} and can be overridden in the
+        constructor.
+        """
+        self._verifyConstructorFlag('recDes', defaultVal=False)
+
+
+    def test_recAv(self):
+        """
+        L{dns._Message.recAv} defaults to C{False} and can be overridden in the
+        constructor.
+        """
+        self._verifyConstructorFlag('recAv', defaultVal=False)
+
+
+    def test_rCode(self):
+        """
+        L{dns._Message.rCode} defaults to C{0} and can be overridden in the
+        constructor.
+        """
+        self._verifyConstructorArgument('rCode', defaultVal=0, altVal=123)
+
+
+    def test_trunc(self):
+        """
+        L{dns._Message.trunc} defaults to C{False} and can be overridden in the
+        constructor.
+        """
+        self._verifyConstructorFlag('trunc', defaultVal=False)
+
+
+
+class EDNSMessageSpecificsTestCase(ConstructorTestsMixin,
+                                   unittest.SynchronousTestCase):
+    """
+    Tests for L{dns._EDNSMessage}.
+
+    These tests are for L{dns._EDNSMessage} APIs which are not shared with
+    L{dns._Message}.
+    """
+    messageFactory = dns._EDNSMessage
+
+    def test_ednsVersion(self):
+        """
+        L{dns._EDNSMessage.ednsVersion} defaults to C{0} and can be overridden
+        in the constructor.
+        """
+        self._verifyConstructorArgument(
+            'ednsVersion', defaultVal=0, altVal=None)
+
+
+    def test_dnssecOK(self):
+        """
+        L{dns._EDNSMessage.dnssecOK} defaults to C{False} and can be overridden
+        in the constructor.
+        """
+        self._verifyConstructorFlag('dnssecOK', defaultVal=False)
+
+
     def test_repr(self):
         """
         L{dns._EDNSMessage.__repr__} displays the id, answer, opCode,
@@ -3846,7 +3864,7 @@
     def test_fromStrCallsMessageFactory(self):
         """
         L{dns._EDNSMessage.fromString} calls L{dns._EDNSMessage._messageFactory}
-        to create a new L{dns.Message} instance which is used to decode the
+        to create a new L{dns._Message} instance which is used to decode the
         supplied bytes.
         """
         class FakeMessageFactory(object):
@@ -3862,10 +3880,10 @@
                 """
                 raise RaisedArgs(args, kwargs)
 
-        m = dns._EDNSMessage()
-        m._messageFactory = FakeMessageFactory
+        class RaisingEdnsMessage(dns._EDNSMessage):
+            _messageFactory = FakeMessageFactory
         dummyBytes = object()
-        e = self.assertRaises(RaisedArgs, m.fromStr, dummyBytes)
+        e = self.assertRaises(RaisedArgs, RaisingEdnsMessage.fromStr, dummyBytes)
         self.assertEqual(
             ((dummyBytes,), {}),
             (e.args, e.kwargs)
@@ -3875,7 +3893,7 @@
     def test_fromStrCallsFromMessage(self):
         """
         L{dns._EDNSMessage.fromString} calls L{dns._EDNSMessage._fromMessage}
-        with a L{dns.Message} instance
+        with a L{dns._Message} instance
         """
         m = dns._EDNSMessage()
         class FakeMessageFactory():
@@ -3890,12 +3908,17 @@
                 """
 
         fakeMessage = FakeMessageFactory()
-        m._messageFactory = lambda: fakeMessage
-
-        def fakeFromMessage(*args, **kwargs):
-            raise RaisedArgs(args, kwargs)
-        m._fromMessage = fakeFromMessage
-        e = self.assertRaises(RaisedArgs, m.fromStr, b'')
+
+        class TestableEDNSMessage(dns._EDNSMessage):
+            @staticmethod
+            def _messageFactory():
+                return fakeMessage
+
+            @classmethod
+            def _fromMessage(cls, *args, **kwargs):
+                raise RaisedArgs(args, kwargs)
+
+        e = self.assertRaises(RaisedArgs, TestableEDNSMessage.fromStr, b'')
         self.assertEqual(
             ((fakeMessage,), {}),
             (e.args, e.kwargs)
@@ -3951,7 +3974,7 @@
     """
     Tests for equality between L(dns._EDNSMessage} instances.
 
-    These tests will not work with L{dns.Message} because it does not use
+    These tests will not work with L{dns._Message} because it does not use
     L{twisted.python.util.FancyEqMixin}.
     """
 
@@ -4178,7 +4201,7 @@
     """
     Tests for the encoding and decoding of various standard (not EDNS) messages.
 
-    These tests should work with both L{dns._EDNSMessage} and L{dns.Message}.
+    These tests should work with both L{dns._EDNSMessage} and L{dns._Message}.
 
     TestCase classes that use this mixin must provide a C{messageFactory} method
     which accepts any argment supported by L{dns._EDNSMessage.__init__}.
@@ -4199,10 +4222,10 @@
         """
         An empty message byte sequence can be decoded.
         """
-        m = self.messageFactory()
-        m.fromStr(MessageEmpty.bytes())
-
-        self.assertEqual(m, self.messageFactory(**MessageEmpty.kwargs()))
+        self.assertEqual(
+            self.messageFactory(**MessageEmpty.kwargs()),
+            self.messageFactory.fromStr(MessageEmpty.bytes())
+        )
 
 
     def test_completeQueryEncode(self):
@@ -4218,10 +4241,10 @@
         """
         A fully populated message byte string can be decoded.
         """
-        m = self.messageFactory()
-        m.fromStr(MessageComplete.bytes()),
-
-        self.assertEqual(m, self.messageFactory(**MessageComplete.kwargs()))
+        self.assertEqual(
+            self.messageFactory(**MessageComplete.kwargs()),
+            self.messageFactory.fromStr(MessageComplete.bytes())
+        )
 
 
     def test_NULL(self):
@@ -4236,8 +4259,7 @@
         msg1.answers.append(rr)
         s = msg1.toStr()
 
-        msg2 = self.messageFactory()
-        msg2.fromStr(s)
+        msg2 = self.messageFactory.fromStr(s)
 
         self.assertIsInstance(msg2.answers[0].payload, dns.Record_NULL)
         self.assertEqual(msg2.answers[0].payload.payload, bytes)
@@ -4258,11 +4280,10 @@
         The L{dns.RRHeader} instances created by a message from a
         non-authoritative message byte string are marked as not authoritative.
         """
-        m = self.messageFactory()
-        m.fromStr(MessageNonAuthoritative.bytes())
-
         self.assertEqual(
-            m, self.messageFactory(**MessageNonAuthoritative.kwargs()))
+            self.messageFactory(**MessageNonAuthoritative.kwargs()),
+            self.messageFactory.fromStr(MessageNonAuthoritative.bytes())
+        )
 
 
     def test_authoritativeMessageEncode(self):
@@ -4280,11 +4301,10 @@
         The message and its L{dns.RRHeader} instances created by C{decode} from
         an authoritative message byte string, are marked as authoritative.
         """
-        m = self.messageFactory()
-        m.fromStr(MessageAuthoritative.bytes())
-
         self.assertEqual(
-            m, self.messageFactory(**MessageAuthoritative.kwargs()))
+            self.messageFactory(**MessageAuthoritative.kwargs()),
+            self.messageFactory.fromStr(MessageAuthoritative.bytes())
+        )
 
 
     def test_truncatedMessageEncode(self):
@@ -4302,10 +4322,10 @@
         The message instance created by decoding a truncated message is marked
         as truncated.
         """
-        m = self.messageFactory()
-        m.fromStr(MessageTruncated.bytes())
-
-        self.assertEqual(m, self.messageFactory(**MessageTruncated.kwargs()))
+        self.assertEqual(
+            self.messageFactory(**MessageTruncated.kwargs()),
+            self.messageFactory.fromStr(MessageTruncated.bytes())
+        )
 
 
 
@@ -4318,33 +4338,61 @@
     messageFactory = dns._EDNSMessage
 
 
-
-class MessageStandardEncodingTests(StandardEncodingTestsMixin,
-                                   unittest.SynchronousTestCase):
+class StandardMessageAdaptor(object):
+    def __new__(cls, **kwargs):
+        """
+        This function adapts constructor arguments expected by
+        _EDNSMessage.__init__ to arguments suitable for use with the
+        StandardMessage.__init__.
+
+        Removes any L{dns._EDNSMessage} specific arguments.
+
+        @param kwargs: The keyword arguments which will be stripped of EDNS
+            specific arguments before being passed to
+            L{dns.StandardMessage.__init__}.
+
+        @return: An L{dns.StandardMessage} instance.
+        """
+        kwargs.pop('ednsVersion', None)
+        return dns.StandardMessage(**kwargs)
+
+
+    @classmethod
+    def fromStr(cls, bytes):
+        return dns.StandardMessage.fromStr(bytes)
+
+
+
+class StandardMessageStandardEncodingTests(StandardEncodingTestsMixin,
+                                           unittest.SynchronousTestCase):
     """
     Tests for the encoding and decoding of various standard (non-EDNS) messages
-    by L{dns.Message}.
+    by L{dns.StandardMessage}.
     """
-    @staticmethod
-    def messageFactory(**kwargs):
+    messageFactory = StandardMessageAdaptor
+
+
+
+class LegacyMessageAdaptor(object):
+    def __new__(cls, **kwargs):
         """
         This function adapts constructor arguments expected by
         _EDNSMessage.__init__ to arguments suitable for use with the
         Message.__init__.
 
         Also handles the fact that unlike L{dns._EDNSMessage},
-        L{dns.Message.__init__} does not accept queries, answers etc as
+        L{dns._Message.__init__} does not accept queries, answers etc as
         arguments.
 
         Also removes any L{dns._EDNSMessage} specific arguments.
 
         @param args: The positional arguments which will be passed to
-            L{dns.Message.__init__}.
+            L{dns._Message.__init__}.
 
         @param kwargs: The keyword arguments which will be stripped of EDNS
-            specific arguments before being passed to L{dns.Message.__init__}.
+            specific arguments before being passed to L{dns._Message.__init__}.
 
-        @return: An L{dns.Message} instance.
+        @return: An L{dns._Message} instance.
         """
         kwargs['auth'] = kwargs.pop('authoritativeAnswer', False)
         kwargs['recDes'] = kwargs.pop('recursionDesired', False)
@@ -4359,12 +4407,29 @@
 
         kwargs.pop('ednsVersion', None)
 
-        m = dns.Message(**kwargs)
+        m = dns._Message(**kwargs)
         m.queries = queries
         m.answers = answers
         m.authority = authority
         m.additional = additional
-        return MessageComparable(m)
+        return m
+
+
+    @classmethod
+    def fromStr(cls, bytes):
+        m = dns._Message()
+        m.fromStr(bytes)
+        return m
+
+
+
+class MessageStandardEncodingTests(StandardEncodingTestsMixin,
+                                   unittest.SynchronousTestCase):
+    """
+    Tests for the encoding and decoding of various standard (non-EDNS) messages
+    by L{dns._Message}.
+    """
+    messageFactory = LegacyMessageAdaptor
 
 
 
@@ -4372,7 +4437,7 @@
     """
     Tests for the encoding and decoding of various EDNS messages.
 
-    These test will not work with L{dns.Message}.
+    These test will not work with L{dns._Message}.
     """
     messageFactory = dns._EDNSMessage
 
@@ -4381,10 +4446,10 @@
         The L(_EDNSMessage} instance created by L{dns._EDNSMessage.decode} from
         an EDNS query never includes OPT records in the additional section.
         """
-        m = self.messageFactory()
-        m.fromStr(MessageEDNSQuery.bytes())
-
-        self.assertEqual(m.additional, [])
+        self.assertEqual(
+            self.messageFactory.fromStr(MessageEDNSQuery.bytes()).additional,
+            []
+        )
 
 
     def test_ednsMessageDecodeMultipleOptRecords(self):
@@ -4396,15 +4461,15 @@
 
         @see: U{https://tools.ietf.org/html/rfc6891#section-6.1.1}
         """
-        m = dns.Message()
+        m = dns._Message()
         m.additional = [
             dns._OPTHeader(version=2),
             dns._OPTHeader(version=3)]
 
-        ednsMessage = dns._EDNSMessage()
-        ednsMessage.fromStr(m.toStr())
-
-        self.assertEqual(ednsMessage.ednsVersion, None)
+        self.assertEqual(
+            None,
+            dns._EDNSMessage.fromStr(m.toStr()).ednsVersion
+        )
 
 
     def test_fromMessageCopiesSections(self):
@@ -4413,7 +4478,7 @@
         whose queries, answers, authority and additional lists are copies (not
         references to) the original message lists.
         """
-        standardMessage = dns.Message()
+        standardMessage = dns._Message()
         standardMessage.fromStr(MessageEDNSQuery.bytes())
 
         ednsMessage = dns._EDNSMessage._fromMessage(standardMessage)
@@ -4456,7 +4521,7 @@
         optRRHeader = dns.RRHeader()
         b.seek(0)
         optRRHeader.decode(b)
-        m = dns.Message()
+        m = dns._Message()
         m.additional = [optRRHeader]
 
         actualMessages = []
@@ -4482,10 +4547,10 @@
         derives its edns specific values (C{ednsVersion}, etc) from the supplied
         OPT record.
         """
-        m = self.messageFactory()
-        m.fromStr(MessageEDNSComplete.bytes())
-
-        self.assertEqual(m, self.messageFactory(**MessageEDNSComplete.kwargs()))
+        self.assertEqual(
+            self.messageFactory(**MessageEDNSComplete.kwargs()),
+            self.messageFactory.fromStr(MessageEDNSComplete.bytes())
+        )
 
 
     def test_ednsEncode(self):
@@ -4515,11 +4580,10 @@
         The L(_EDNSMessage} instance created by L{dns._EDNSMessage.fromStr}
         derives RCODE from the supplied OPT record.
         """
-        m = self.messageFactory()
-        m.fromStr(MessageEDNSExtendedRCODE.bytes())
-
         self.assertEqual(
-            m, self.messageFactory(**MessageEDNSExtendedRCODE.kwargs()))
+            self.messageFactory(**MessageEDNSExtendedRCODE.kwargs()),
+            self.messageFactory.fromStr(MessageEDNSExtendedRCODE.bytes())
+        )
 
 
     def test_extendedRcodeZero(self):

=== modified file 'twisted/names/test/test_names.py'
--- twisted/names/test/test_names.py	2014-01-03 14:20:11 +0000
+++ twisted/names/test/test_names.py	2014-01-08 15:48:25 +0000
@@ -475,7 +475,17 @@
 
     def _makeMessage(self):
         # hooray they all have the same message format
-        return dns.Message(id=999, answer=1, opCode=0, recDes=0, recAv=1, auth=1, rCode=0, trunc=0, maxSize=0)
+        return dns.StandardMessage(
+            id=999,
+            answer=1,
+            opCode=0,
+            recursionDesired=0,
+            recursionAvailable=1,
+            authoritativeAnswer=1,
+            responseCode=0,
+            truncated=0,
+            maxSize=0
+        )
 
     def testBindAndTNamesStyle(self):
         # Bind style = One big single message
@@ -852,8 +862,17 @@
                          auth=False,
                          payload=dns.Record_NS(name='ns.twistedmatrix.com',
                          ttl=700))]
-        m = dns.Message(id=999, answer=1, opCode=0, recDes=0, recAv=1, auth=1,
-                        rCode=0, trunc=0, maxSize=0)
+        m = dns.StandardMessage(
+            id=999,
+            answer=1,
+            opCode=0,
+            recursionDesired=0,
+            recursionAvailable=1,
+            authoritativeAnswer=1,
+            responseCode=0,
+            truncated=0,
+            maxSize=0
+        )
         m.answers = records
         messages.append(m)
         return self.assertFailure(

=== modified file 'twisted/names/test/test_rootresolve.py'
--- twisted/names/test/test_rootresolve.py	2013-11-16 15:50:01 +0000
+++ twisted/names/test/test_rootresolve.py	2014-01-08 15:41:57 +0000
@@ -21,7 +21,7 @@
 from twisted.names.root import Resolver
 from twisted.names.dns import (
     IN, HS, A, NS, CNAME, OK, ENAME, Record_CNAME,
-    Name, Query, Message, RRHeader, Record_A, Record_NS)
+    Name, Query, StandardMessage, RRHeader, Record_A, Record_NS)
 from twisted.names.error import DNSNameError, ResolverError
 
 
@@ -172,8 +172,7 @@
         # And a DNS packet sent.
         [(packet, address)] = transport._sentPackets
 
-        msg = Message()
-        msg.fromStr(packet)
+        msg = StandardMessage.fromStr(packet)
 
         # It should be a query with the parameters used above.
         self.assertEqual(msg.queries, [Query(b'foo.example.com', A, IN)])
@@ -215,7 +214,7 @@
         L{Message} instance.
         """
         message = self._queryTest(False)
-        self.assertIsInstance(message, Message)
+        self.assertIsInstance(message, StandardMessage)
         self.assertEqual(message.queries, [])
         self.assertEqual(
             message.answers,
@@ -226,7 +225,7 @@
 
     def _respond(self, answers=[], authority=[], additional=[], rCode=OK):
         """
-        Create a L{Message} suitable for use as a response to a query.
+        Create a L{StandardMessage} suitable for use as a response to a query.
 
         @param answers: A C{list} of two-tuples giving data for the answers
             section of the message.  The first element of each tuple is a name
@@ -237,9 +236,9 @@
             additional section of the response.
         @param rCode: The response code the message will be created with.
 
-        @return: A new L{Message} initialized with the given values.
+        @return: A new L{StandardMessage} initialized with the given values.
         """
-        response = Message(rCode=rCode)
+        response = StandardMessage(responseCode=rCode)
         for (section, data) in [(response.answers, answers),
                                 (response.authority, authority),
                                 (response.additional, additional)]:

=== modified file 'twisted/names/test/test_server.py'
--- twisted/names/test/test_server.py	2014-01-03 14:20:11 +0000
+++ twisted/names/test/test_server.py	2014-01-08 15:52:42 +0000
@@ -417,7 +417,7 @@
         L{server.DNSServerFactory.messageReceived} logs about an empty query if
         the message had no queries and C{verbose} is C{>0}.
         """
-        m = dns.Message()
+        m = dns.StandardMessage()
         f = NoResponseDNSServerFactory(verbose=1)
 
         assertLogMessage(
@@ -432,7 +432,7 @@
         L{server.DNSServerFactory.messageReceived} logs the query types of all
         queries in the message if C{verbose} is set to C{1}.
         """
-        m = dns.Message()
+        m = dns.StandardMessage()
         m.addQuery(name='example.com', type=dns.MX)
         m.addQuery(name='example.com', type=dns.AAAA)
         f = NoResponseDNSServerFactory(verbose=1)
@@ -449,7 +449,7 @@
         L{server.DNSServerFactory.messageReceived} logs the repr of all queries
         in the message if C{verbose} is set to C{2}.
         """
-        m = dns.Message()
+        m = dns.StandardMessage()
         m.addQuery(name='example.com', type=dns.MX)
         m.addQuery(name='example.com', type=dns.AAAA)
         f = NoResponseDNSServerFactory(verbose=2)
@@ -467,7 +467,7 @@
         L{server.DNSServerFactory.messageReceived} assigns a unix timestamp to
         the received message.
         """
-        m = dns.Message()
+        m = dns.StandardMessage()
         f = NoResponseDNSServerFactory()
         t = object()
         self.patch(server.time, 'time', lambda: t)
@@ -482,7 +482,7 @@
         L{server.DNSServerFactory.allowQuery} along with the receiving protocol
         and origin address.
         """
-        message = dns.Message()
+        message = dns.StandardMessage()
         dummyProtocol = object()
         dummyAddress = object()
 
@@ -516,7 +516,7 @@
         e = self.assertRaises(
             SendReplyException,
             f.messageReceived,
-            message=dns.Message(), proto=None, address=None)
+            message=dns.StandardMessage(), proto=None, address=None)
         (proto, message, address), kwargs = e.args
 
         self.assertEqual(message.rCode, dns.EREFUSED)
@@ -533,7 +533,7 @@
 
         @param message: The message which is expected to be passed to the
             C{methodName} method.
-        @type message: L{dns.Message}
+        @type message: L{dns.StandardMessage}
         """
         # Make it appear to have some queries so that
         # DNSServerFactory.allowQuery allows it.
@@ -556,7 +556,7 @@
         C{OP_QUERY} on to L{DNSServerFactory.handleQuery}.
         """
         self._messageReceivedTest(
-            'handleQuery', dns.Message(opCode=dns.OP_QUERY))
+            'handleQuery', dns.StandardMessage(opCode=dns.OP_QUERY))
 
 
     def test_inverseQueryMessageReceived(self):
@@ -565,7 +565,7 @@
         C{OP_INVERSE} on to L{DNSServerFactory.handleInverseQuery}.
         """
         self._messageReceivedTest(
-            'handleInverseQuery', dns.Message(opCode=dns.OP_INVERSE))
+            'handleInverseQuery', dns.StandardMessage(opCode=dns.OP_INVERSE))
 
 
     def test_statusMessageReceived(self):
@@ -574,7 +574,7 @@
         C{OP_STATUS} on to L{DNSServerFactory.handleStatus}.
         """
         self._messageReceivedTest(
-            'handleStatus', dns.Message(opCode=dns.OP_STATUS))
+            'handleStatus', dns.StandardMessage(opCode=dns.OP_STATUS))
 
 
     def test_notifyMessageReceived(self):
@@ -583,7 +583,7 @@
         C{OP_NOTIFY} on to L{DNSServerFactory.handleNotify}.
         """
         self._messageReceivedTest(
-            'handleNotify', dns.Message(opCode=dns.OP_NOTIFY))
+            'handleNotify', dns.StandardMessage(opCode=dns.OP_NOTIFY))
 
 
     def test_updateMessageReceived(self):
@@ -594,7 +594,7 @@
         This may change if the implementation ever covers update messages.
         """
         self._messageReceivedTest(
-            'handleOther', dns.Message(opCode=dns.OP_UPDATE))
+            'handleOther', dns.StandardMessage(opCode=dns.OP_UPDATE))
 
 
     def test_connectionTracking(self):
@@ -621,7 +621,7 @@
         supplied message and dispatches it to
         L{server.DNSServerFactory.resolver.query}.
         """
-        m = dns.Message()
+        m = dns.StandardMessage()
         m.addQuery(b'one.example.com')
         m.addQuery(b'two.example.com')
         f = server.DNSServerFactory()
@@ -656,7 +656,7 @@
             gotResolverResponseArgs.append((args, kwargs))
         f.gotResolverResponse = fakeGotResolverResponse
 
-        m = dns.Message()
+        m = dns.StandardMessage()
         m.addQuery(b'one.example.com')
         stubProtocol = NoopProtocol()
         dummyAddress = object()
@@ -692,7 +692,7 @@
             gotResolverErrorArgs.append((args, kwargs))
         f.gotResolverError = fakeGotResolverError
 
-        m = dns.Message()
+        m = dns.StandardMessage()
         m.addQuery(b'one.example.com')
         stubProtocol = NoopProtocol()
         dummyAddress = object()
@@ -721,7 +721,7 @@
             RaisingProtocol.WriteMessageArguments,
             f.gotResolverResponse,
             (answers, authority, additional),
-            protocol=RaisingProtocol(), message=dns.Message(), address=None)
+            protocol=RaisingProtocol(), message=dns.StandardMessage(), address=None)
         (message,), kwargs = e.args
 
         self.assertIs(message.answers, answers)
@@ -742,7 +742,7 @@
             RaisingProtocol.WriteMessageArguments,
             f.gotResolverResponse,
             (answers, authority, additional),
-            protocol=RaisingProtocol(), message=dns.Message(), address=None)
+            protocol=RaisingProtocol(), message=dns.StandardMessage(), address=None)
         (message,), kwargs = e.args
 
         self.assertTrue(
@@ -765,7 +765,7 @@
             ["Lookup found 3 records"],
             f.gotResolverResponse,
             (answers, authority, additional),
-            protocol=NoopProtocol(), message=dns.Message(), address=None)
+            protocol=NoopProtocol(), message=dns.StandardMessage(), address=None)
 
 
     def test_gotResolverResponseCaching(self):
@@ -775,7 +775,7 @@
         """
         f = NoResponseDNSServerFactory(caches=[RaisingCache()])
 
-        m = dns.Message()
+        m = dns.StandardMessage()
         m.addQuery(b'example.com')
         expectedAnswers = [dns.RRHeader()]
         expectedAuthority = []
@@ -815,7 +815,7 @@
             RaisingProtocol.WriteMessageArguments,
             f.gotResolverError,
             failure.Failure(responseError),
-            protocol=RaisingProtocol(), message=dns.Message(), address=None)
+            protocol=RaisingProtocol(), message=dns.StandardMessage(), address=None)
         (message,), kwargs = e.args
 
         self.assertEqual(message.rCode, expectedMessageCode)
@@ -860,7 +860,7 @@
             ["Lookup failed"],
             f.gotResolverError,
             failure.Failure(error.DomainError()),
-            protocol=NoopProtocol(), message=dns.Message(), address=None)
+            protocol=NoopProtocol(), message=dns.StandardMessage(), address=None)
 
 
     def test_sendReplyWithAddress(self):
@@ -869,7 +869,7 @@
         *and* an address tuple it will supply that address to
         C{protocol.writeMessage}.
         """
-        m = dns.Message()
+        m = dns.StandardMessage()
         dummyAddress = object()
         f = server.DNSServerFactory()
         e = self.assertRaises(
@@ -889,7 +889,7 @@
         no address tuple it will supply only a message to
         C{protocol.writeMessage}.
         """
-        m = dns.Message()
+        m = dns.StandardMessage()
         f = server.DNSServerFactory()
         e = self.assertRaises(
             RaisingProtocol.WriteMessageArguments,
@@ -908,7 +908,7 @@
         the supplied message has no answers.
         """
         self.patch(server.time, 'time', lambda: 2)
-        m = dns.Message()
+        m = dns.StandardMessage()
         m.timeReceived = 1
         f = server.DNSServerFactory(verbose=2)
         assertLogMessage(
@@ -927,7 +927,7 @@
         those sections.
         """
         self.patch(server.time, 'time', lambda: 2)
-        m = dns.Message()
+        m = dns.StandardMessage()
         m.answers.append(dns.RRHeader(payload=dns.Record_A('127.0.0.1')))
         m.authority.append(dns.RRHeader(payload=dns.Record_A('127.0.0.1')))
         m.additional.append(dns.RRHeader(payload=dns.Record_A('127.0.0.1')))
@@ -954,7 +954,7 @@
         e = self.assertRaises(
             RaisingProtocol.WriteMessageArguments,
             f.handleInverseQuery,
-            message=dns.Message(), protocol=RaisingProtocol(), address=None)
+            message=dns.StandardMessage(), protocol=RaisingProtocol(), address=None)
         (message,), kwargs = e.args
 
         self.assertEqual(message.rCode, dns.ENOTIMP)
@@ -970,7 +970,7 @@
             self,
             ["Inverse query from ('::1', 53)"],
             f.handleInverseQuery,
-            message=dns.Message(),
+            message=dns.StandardMessage(),
             protocol=NoopProtocol(),
             address=('::1', 53))
 
@@ -984,7 +984,7 @@
         e = self.assertRaises(
             RaisingProtocol.WriteMessageArguments,
             f.handleStatus,
-            message=dns.Message(), protocol=RaisingProtocol(), address=None)
+            message=dns.StandardMessage(), protocol=RaisingProtocol(), address=None)
         (message,), kwargs = e.args
 
         self.assertEqual(message.rCode, dns.ENOTIMP)
@@ -1000,7 +1000,7 @@
             self,
             ["Status request from ('::1', 53)"],
             f.handleStatus,
-            message=dns.Message(),
+            message=dns.StandardMessage(),
             protocol=NoopProtocol(),
             address=('::1', 53))
 
@@ -1014,7 +1014,7 @@
         e = self.assertRaises(
             RaisingProtocol.WriteMessageArguments,
             f.handleNotify,
-            message=dns.Message(), protocol=RaisingProtocol(), address=None)
+            message=dns.StandardMessage(), protocol=RaisingProtocol(), address=None)
         (message,), kwargs = e.args
 
         self.assertEqual(message.rCode, dns.ENOTIMP)
@@ -1030,7 +1030,7 @@
             self,
             ["Notify message from ('::1', 53)"],
             f.handleNotify,
-            message=dns.Message(),
+            message=dns.StandardMessage(),
             protocol=NoopProtocol(),
             address=('::1', 53))
 
@@ -1044,7 +1044,7 @@
         e = self.assertRaises(
             RaisingProtocol.WriteMessageArguments,
             f.handleOther,
-            message=dns.Message(), protocol=RaisingProtocol(), address=None)
+            message=dns.StandardMessage(), protocol=RaisingProtocol(), address=None)
         (message,), kwargs = e.args
 
         self.assertEqual(message.rCode, dns.ENOTIMP)
@@ -1060,6 +1060,6 @@
             self,
             ["Unknown op code (0) from ('::1', 53)"],
             f.handleOther,
-            message=dns.Message(),
+            message=dns.StandardMessage(),
             protocol=NoopProtocol(),
             address=('::1', 53))

