Index: twisted/web/client.py
===================================================================
--- twisted/web/client.py	(revision 30155)
+++ twisted/web/client.py	(working copy)
@@ -617,21 +617,25 @@
     """
     L{Agent} is a very basic HTTP client.  It supports I{HTTP} and I{HTTPS}
     scheme URIs (but performs no certificate checking by default).  It does not
-    support persistent connections.
+    support persistent connections. It does support a HTTP proxy.
 
     @ivar _reactor: The L{IReactorTCP} and L{IReactorSSL} implementation which
         will be used to set up connections over which to issue requests.
 
     @ivar _contextFactory: A web context factory which will be used to create
         SSL context objects for any SSL connections the agent needs to make.
-
+    
+    @ivar _proxy: A tuple of a C{str} hostname and a C{int} of the port of an
+        HTTP proxy. 
     @since: 9.0
     """
     _protocol = HTTP11ClientProtocol
 
-    def __init__(self, reactor, contextFactory=WebClientContextFactory()):
+    def __init__(self, reactor, contextFactory=WebClientContextFactory(),
+                 proxy=None):
         self._reactor = reactor
         self._contextFactory = contextFactory
+        self._proxy = proxy
 
 
     def _wrapContextFactory(self, host, port):
@@ -704,7 +708,13 @@
         @rtype: L{Deferred}
         """
         scheme, host, port, path = _parse(uri)
-        d = self._connect(scheme, host, port)
+        d = None
+        if self._proxy is None or scheme == 'https':
+            d = self._connect(scheme, host, port)
+        else:
+            d = self._connect(scheme, self._proxy[0], self._proxy[1])
+            path = uri
+          
         if headers is None:
             headers = Headers()
         if not headers.hasHeader('host'):
