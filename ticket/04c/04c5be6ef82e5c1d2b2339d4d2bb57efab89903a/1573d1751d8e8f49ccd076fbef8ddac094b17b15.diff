Index: twisted/conch/test/test_telnet.py
===================================================================
--- twisted/conch/test/test_telnet.py	(wersja 28056)
+++ twisted/conch/test/test_telnet.py	(kopia robocza)
@@ -405,16 +405,51 @@
         # returns a Deferred that fires when negotiation about the option
         # finishes.  Make sure it fires, make sure state gets updated
         # properly, make sure the result indicates the option was enabled.
+        # Tested behaviour is promised in ITelnetProtocol.do(option):
+        # if answered with WONT the Deferred should fire with False.
+        self.p.protocol.remoteEnableable = ('\x42',)
         d = self.p.do('\x42')
-
+        
         self.assertEquals(self.t.value(), telnet.IAC + telnet.DO + '\x42')
 
+        s = self.p.getOptionState('\x42')
+        self.assertEquals(s.him.state, 'no')
+        self.assertEquals(s.us.state, 'no')
+        self.assertEquals(s.him.negotiating, True)
+        self.assertEquals(s.us.negotiating, False)
+
         self.p.dataReceived(telnet.IAC + telnet.WONT + '\x42')
 
-        d = self.assertFailure(d, telnet.OptionRefused)
-        d.addCallback(lambda _: self._enabledHelper(self.p.protocol))
+        d.addCallback(self.assertEquals, False)
+        self.assertEquals(s.him.negotiating, False)
+        self._enabledHelper(self.p.protocol)
         return d
 
+    def testRefusedEnableOffer(self):
+        # Try to offer an option through the user-level API.  This
+        # returns a Deferred that fires when negotiation about the option
+        # finishes.  Make sure it fires, make sure state gets updated
+        # properly, make sure the result indicates the option was enabled.
+        # Tested behaviour is promised in ITelnetProtocol.will(option):
+        # if answered with DONT the Deferred should fire with False.
+        self.p.protocol.localEnableable = ('\x42',)
+        d = self.p.will('\x42')
+
+        self.assertEquals(self.t.value(), telnet.IAC + telnet.WILL + '\x42')
+
+        s = self.p.getOptionState('\x42')
+        self.assertEquals(s.him.state, 'no')
+        self.assertEquals(s.us.state, 'no')
+        self.assertEquals(s.him.negotiating, False)
+        self.assertEquals(s.us.negotiating, True)
+
+        self.p.dataReceived(telnet.IAC + telnet.DONT + '\x42')
+
+        d.addCallback(self.assertEquals, False)
+        self.assertEquals(s.us.negotiating, False)
+        self._enabledHelper(self.p.protocol)
+        return d
+
     def testAcceptedDisableRequest(self):
         # Try to disable an option through the user-level API.  This
         # returns a Deferred that fires when negotiation about the option
Index: twisted/conch/telnet.py
===================================================================
--- twisted/conch/telnet.py	(wersja 28056)
+++ twisted/conch/telnet.py	(kopia robocza)
@@ -605,10 +605,11 @@
 
     def wont_no_true(self, state, option):
         # Peer refused to enable an option in response to our request.
+        # Behaviour promised for ITelnetProtocol.do(option)
         state.him.negotiating = False
         d = state.him.onResult
         state.him.onResult = None
-        d.errback(OptionRefused(option))
+        d.callback(False)
 
     def wont_yes_false(self, state, option):
         # Peer is unilaterally demanding that an option be disabled.
@@ -672,11 +673,13 @@
         pass
 
     def dont_no_true(self, state, option):
-        # This is a bogus state.  It is here for completeness.  It will never be
-        # entered.
-        assert False, "dont_no_true can never be entered, but was called with %r, %r" % (state, option)
+        # Offered option was refused.
+        # Behaviour promised for ITelnetProtocol.will(option)
+        state.us.negotiating = False
+        d = state.us.onResult
+        state.us.onResult = None
+        d.callback(False)
 
-
     def dont_yes_false(self, state, option):
         # Peer is unilaterally demanding we disable an option.
         state.us.state = 'no'
