Index: twisted/python/log.py
===================================================================
--- twisted/python/log.py	(revision 29736)
+++ twisted/python/log.py	(working copy)
@@ -33,7 +33,7 @@
 class ILogObserver(Interface):
     """
     An observer which can do something with log events.
-    
+
     Given that most log observers are actually bound methods, it's okay to not
     explicitly declare provision of this interface.
     """
@@ -386,53 +386,62 @@
     return text
 
 
-
-class _NameAndOffsetInfo(tzinfo):
+def _posixTime(utcDateTime, _EPOCH=datetime.utcfromtimestamp(0)):
     """
-    Represents a named, DST unaware, fixed offset time zone.
+    Return a POSIX timestamp that coresponds to the C{utcDateTime}.
 
-    @type _name: C{str}
-    @ivar _name: name of this time zone.
-    @type _offset: C{datetime.timedelta}
-    @ivar _offset: time zone offset from UTC. East is positive, west is
-        negative.
+    @type utcDateTime: C{datetime.datetime}
+    @param utcDateTime: aware or unaware C{datetime} object in UTC timezone.
+    @rtype: C{float}
     """
+    delta = utcDateTime.replace(tzinfo=None) - _EPOCH
+    return 24 * 60 * 60 * delta.days + delta.seconds + delta.microseconds / 1e6
 
-    def __init__(self, name, offset):
-        """
-        @type name: C{str}
-        @param name: name of this time zone.
-        @type offset: C{datetime.timedelta}
-        @param offset: timezone offset from UTC.
-        """
-        self._name = name
-        self._offset = offset
 
 
+class _LocalTimezone(tzinfo):
+    """
+    Represents the local timezone, as configured for the computer where this
+    code is running.
+    """
+
     def utcoffset(self, dt):
         """
-        Return offset of local time from UTC, in minutes east of UTC.
+        Return offset of local time C{dt} from UTC, in minutes east of UTC.
 
+        @type dt: C{datetime.datetime}
         @rtype: C{datetime.timedelta}
         """
-        return self._offset
+        when = time.mktime(dt.timetuple())
+        return datetime.fromtimestamp(when) - datetime.utcfromtimestamp(when)
 
 
     def dst(self, dt):
         """
-        Return the daylight saving time adjustment for local time.
+        Return the daylight saving time adjustment for local time C{dt}.
 
-        C{_NamedFixedOffset} objects are not aware of DST, so this always
+        C{_LocalTimezone} objects are not aware of DST, so this always
         returns C{None}.
+
+        @type dt: C{datetime.datetime}
         """
+        # The dostring is not entirely accurate, we could calculate DST offset
+        # similary as tzname below. For that we would need UTC offset, but
+        # utcoffset() calls dt.timetuple(), which tries to call dt.tz.dst(),
+        # leading to infinite recursion. Anyway, it's not like this information
+        # is displayed anywhere.
         return None
 
 
     def tzname(self, dt):
         """
-        Return this time zone's name.
+        Return the name of the local timezone at C{dt} local time.
+
+        @type dt: C{datetime.datetime}
+        @rtype: C{str}
         """
-        return self._name
+        when = _posixTime(dt - self.utcoffset(dt))
+        return time.tzname[time.localtime(when).tm_isdst]
 
 
     def fromutc(self, dt):
@@ -440,7 +449,9 @@
         Return an aware local C{datetime.datetime} object, equivalent to
         UTC C{datetime.datetime} object C{dt}.
         """
-        return dt + self._offset
+        when = _posixTime(dt)
+        offset = datetime.fromtimestamp(when) - datetime.utcfromtimestamp(when)
+        return dt + offset
 
 
 
@@ -449,13 +460,25 @@
     Log observer that writes to a file-like object.
 
     @type timeFormat: C{str} or C{NoneType}
-    @ivar timeFormat: If not C{None}, the format string passed to strftime().
+    @ivar timeFormat: If not C{None}, the format string passed to
+        C{datetime.strftime()} when formatting log event times.
+    @type timezoneInfo: C{datetime.tzinfo}
+    @ivar timezoneInfo: The timezone to which the time of the logged event will
+        be converted before it will be formatted.
     """
     timeFormat = None
 
-    def __init__(self, f):
+    def __init__(self, f, timezoneInfo=_LocalTimezone()):
+        """
+        @type f: C{file}
+        @param f: A file-like object to which the log entries will be written.
+        @type timezoneInfo: C{datetime.tzinfo}
+        @param timezoneInfo: The timezone that should be used for timestamp
+            formatting.
+        """
         self.write = f.write
         self.flush = f.flush
+        self.timezoneInfo = timezoneInfo
 
 
     def getTimezoneOffset(self, when):
@@ -473,43 +496,10 @@
         return offset.days * (60 * 60 * 24) + offset.seconds
 
 
-    def getTimezoneInfo(self, when):
-        """
-        Return timezone information coresponding to the C{when} timestamp.
-
-        @type when: C{float}
-        @param when: POSIX (ie, UTC) timestamp for which to find the timezone
-            information.
-
-        @rtype: C{datetime.tzinfo}
-        @return: Timezone information for the given timestamp.
-
-        By default, the timezone information returned contains UTC offset
-        information and the name of the local timezone at the C{when}
-        moment in time.
-
-        You can overwrite this method if you want the logged time to be
-        reported in a different timezone, e.g. if you want to always log in
-        C{US/Eastern} time::
-
-            import pytz # a separate package
-            from twisted.python import log
-
-            class EasternFileLogObserver(log.FileLogObserver):
-
-                def getTimezoneInfo(self, when):
-                    return pytz.timezone("US/Eastern")
-        """
-        offset = self.getTimezoneOffset(when)
-        isdst = time.localtime(when).tm_isdst
-        name = time.tzname[isdst]
-        return _NameAndOffsetInfo(name, timedelta(seconds=-offset))
-
-
     def formatTime(self, when):
         """
         Format the given UTC timestamp as a string representing that time in
-        the C{self.getTimezoneInfo(when)} timezone.
+        the C{self.timezoneInfo} timezone.
 
         By default it's formatted as a ISO8601-like string (ISO8601 date and
         ISO8601 time separated by a space, followed by local timezone offset).
@@ -521,8 +511,7 @@
 
         @rtype: C{str}
         """
-        info = self.getTimezoneInfo(when)
-        awareDateTime = datetime.fromtimestamp(when, info)
+        awareDateTime = datetime.fromtimestamp(when, self.timezoneInfo)
         timeFormat = self.timeFormat
         if timeFormat is None:
             timeFormat = "%Y-%m-%d %H:%M:%S%z"
Index: twisted/test/test_log.py
===================================================================
--- twisted/test/test_log.py	(revision 29736)
+++ twisted/test/test_log.py	(working copy)
@@ -371,6 +371,8 @@
         utcDaylightTimestamp = time.mktime(localDaylightTuple)
         localStandardTuple = (2007, 1, 31, 0, 0, 0, 2, 31, 0)
         utcStandardTimestamp = time.mktime(localStandardTuple)
+        dstChangeTuple = (2001, 3, 25, 3, 15, 0, 6, 84, 1)
+        dstChangeTimestamp = time.mktime(dstChangeTuple)
 
         # Test something west of UTC
         self.setTimezone('America/New_York')
@@ -385,6 +387,8 @@
         self.assertFormat("%Z", utcDaylightTimestamp, "CEST")
         self.assertFormat("%z", utcStandardTimestamp, "+0100")
         self.assertFormat("%Z", utcStandardTimestamp, "CET")
+        self.assertFormat("%z", dstChangeTimestamp, "+0200")
+        self.assertFormat("%Z", dstChangeTimestamp, "CEST")
 
         # Test a timezone that doesn't have DST
         self.setTimezone('Africa/Johannesburg')
@@ -414,7 +418,7 @@
                 return "KCT"
 
         when = time.mktime((2000, 1, 1, 0, 0, 0, 5, 1, 0)) - time.timezone
-        self.flo.getTimezoneInfo = lambda when: SouthTarawaInfo()
+        self.flo.timezoneInfo = SouthTarawaInfo()
         self.assertFormat(None, when, "2000-01-01 11:32:00+1132")
 
 
@@ -462,6 +466,7 @@
         # thinks the local timezone is.
         self.flo.timeFormat = '%Y %m'
         self.assertEquals(self.flo.formatTime(when), '2001 02')
+    test_timeFormatting.skip = "formatTime now ignores getTimezoneOffset"
 
 
     def test_microsecondFormatting(self):
