Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 38290)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -73,8 +73,9 @@
 
 
 def parsemsg(s):
-    """Breaks a message from an IRC server into its prefix, command, and arguments.
     """
+    Breaks a message from an IRC server into its prefix, command, and arguments.
+    """
     prefix = ''
     trailing = []
     if not s:
@@ -2212,8 +2213,9 @@
                              time.asctime(time.localtime(time.time())))])
 
     def ctcpQuery_DCC(self, user, channel, data):
-        """Initiate a Direct Client Connection
         """
+        Initiate a Direct Client Connection
+        """
 
         if not data: return
         dcctype = data.split(None, 1)[0].upper()
@@ -2299,9 +2301,11 @@
     ### common dcc_ methods; the arguments have been parsed for them.
 
     def dccDoSend(self, user, address, port, fileName, size, data):
-        """Called when I receive a DCC SEND offer from a client.
+        """
+        Called when I receive a DCC SEND offer from a client.
 
-        By default, I do nothing here."""
+        By default, I do nothing here.
+        """
         ## filename = path.basename(arg)
         ## protocol = DccFileReceive(filename, size,
         ##                           (user,channel,data),self.dcc_destdir)
@@ -2310,14 +2314,18 @@
         pass
 
     def dccDoResume(self, user, file, port, resumePos):
-        """Called when a client is trying to resume an offered file
+        """
+        Called when a client is trying to resume an offered file
         via DCC send.  It should be either replied to with a DCC
-        ACCEPT or ignored (default)."""
+        ACCEPT or ignored (default).
+        """
         pass
 
     def dccDoAcceptResume(self, user, file, port, resumePos):
-        """Called when a client has verified and accepted a DCC resume
-        request made by us.  By default it will do nothing."""
+        """
+        Called when a client has verified and accepted a DCC resume
+        request made by us.  By default it will do nothing.
+        """
         pass
 
     def dccDoChat(self, user, channel, address, port, data):
@@ -2378,7 +2386,8 @@
         self.pong(user, time.time() - t0)
 
     def ctcpUnknownReply(self, user, channel, tag, data):
-        """Called when a fitting ctcpReply_ method is not found.
+        """
+        Called when a fitting ctcpReply_ method is not found.
 
         XXX: If the client makes arbitrary CTCP queries,
         this method should probably show the responses to
@@ -2391,15 +2400,17 @@
     ### You may override these with something more appropriate to your UI.
 
     def badMessage(self, line, excType, excValue, tb):
-        """When I get a message that's so broken I can't use it.
         """
+        When I get a message that's so broken I can't use it.
+        """
         log.msg(line)
         log.msg(string.join(traceback.format_exception(excType,
                                                         excValue,
                                                         tb),''))
 
     def quirkyMessage(self, s):
-        """This is called when I receive a message which is peculiar,
+        """
+        This is called when I receive a message which is peculiar,
         but not wholly indecipherable.
         """
         log.msg(s + '\n')
@@ -2459,7 +2470,8 @@
 
 
     def handleCommand(self, command, prefix, params):
-        """Determine the function to call for the given command and call
+        """
+        Determine the function to call for the given command and call
         it with the given arguments.
         """
         method = getattr(self, "irc_%s" % command, None)
@@ -2500,7 +2512,8 @@
 
 
 class DccFileReceiveBasic(protocol.Protocol, styles.Ephemeral):
-    """Bare protocol to receive a Direct Client Connection SEND stream.
+    """
+    Bare protocol to receive a Direct Client Connection SEND stream.
 
     This does enough to keep the other guy talking, but you'll want to
     extend my dataReceived method to *do* something with the data I get.
@@ -2513,7 +2526,8 @@
         self.resume = (resumeOffset != 0)
 
     def dataReceived(self, data):
-        """Called when data is received.
+        """
+        Called when data is received.
 
         Warning: This just acknowledges to the remote host that the
         data has been received; it doesn't *do* anything with the
@@ -2524,8 +2538,9 @@
 
 
 class DccSendProtocol(protocol.Protocol, styles.Ephemeral):
-    """Protocol for an outgoing Direct Client Connection SEND.
     """
+    Protocol for an outgoing Direct Client Connection SEND.
+    """
 
     blocksize = 1024
     file = None
@@ -2588,8 +2603,9 @@
 
 
 def fileSize(file):
-    """I'll try my damndest to determine the size of this file object.
     """
+    I'll try my damndest to determine the size of this file object.
+    """
     size = None
     if hasattr(file, "fileno"):
         fileno = file.fileno()
@@ -2624,7 +2640,8 @@
     return size
 
 class DccChat(basic.LineReceiver, styles.Ephemeral):
-    """Direct Client Connection protocol type CHAT.
+    """
+    Direct Client Connection protocol type CHAT.
 
     DCC CHAT is really just your run o' the mill basic.LineReceiver
     protocol.  This class only varies from that slightly, accepting
@@ -2644,7 +2661,8 @@
     buffer = ""
 
     def __init__(self, client, queryData=None):
-        """Initialize a new DCC CHAT session.
+        """
+        Initialize a new DCC CHAT session.
 
         queryData is a 3-tuple of
         (fromUser, targetUserOrChannel, data)
@@ -2699,8 +2717,9 @@
 
 
 def dccDescribe(data):
-    """Given the data chunk from a DCC query, return a descriptive string.
     """
+    Given the data chunk from a DCC query, return a descriptive string.
+    """
 
     orig_data = data
     data = string.split(data)
@@ -2750,7 +2769,8 @@
 
 
 class DccFileReceive(DccFileReceiveBasic):
-    """Higher-level coverage for getting a file from DCC SEND.
+    """
+    Higher-level coverage for getting a file from DCC SEND.
 
     I allow you to change the file's name and destination directory.
     I won't overwrite an existing file unless I've been told it's okay
@@ -2782,7 +2802,8 @@
             self.fromUser = self.queryData[0]
 
     def set_directory(self, directory):
-        """Set the directory where the downloaded file will be placed.
+        """
+        Set the directory where the downloaded file will be placed.
 
         May raise OSError if the supplied directory path is not suitable.
         """
@@ -2800,15 +2821,17 @@
         self.destDir = directory
 
     def set_filename(self, filename):
-        """Change the name of the file being transferred.
+        """
+        Change the name of the file being transferred.
 
         This replaces the file name provided by the sender.
         """
         self.filename = filename
 
     def set_overwrite(self, boolean):
-        """May I overwrite existing files?
         """
+        May I overwrite existing files?
+        """
         self.overwrite = boolean
 
 
@@ -2838,8 +2861,9 @@
         # XXX: update a progress indicator here?
 
     def connectionLost(self, reason):
-        """When the connection is lost, I close the file.
         """
+        When the connection is lost, I close the file.
+        """
         self.connected = 0
         logmsg = ("%s closed." % (self,))
         if self.fileSize > 0:
