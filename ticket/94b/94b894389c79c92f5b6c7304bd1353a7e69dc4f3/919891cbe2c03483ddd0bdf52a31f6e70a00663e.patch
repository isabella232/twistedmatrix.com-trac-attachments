Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 43431)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -58,7 +58,7 @@
             l[i] = tuple(sortNest(list(l[i])))
     return l
 
-class IMAP4UTF7TestCase(unittest.TestCase):
+class IMAP4UTF7Tests(unittest.TestCase):
     tests = [
         [u'Hello world', 'Hello world'],
         [u'Hello & world', 'Hello &- world'],
@@ -158,7 +158,7 @@
     def unregisterProducer(self):
         self.consumer = None
 
-class MessageProducerTestCase(unittest.TestCase):
+class MessageProducerTests(unittest.TestCase):
     def testSinglePart(self):
         body = 'This is body text.  Rar.'
         headers = util.OrderedDict()
@@ -285,7 +285,7 @@
 
 
 
-class IMAP4HelperTestCase(unittest.TestCase):
+class IMAP4HelperTests(unittest.TestCase):
     """
     Tests for various helper utilities in the IMAP4 module.
     """
@@ -1141,7 +1141,7 @@
 
 
 
-class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
+class IMAP4ServerTests(IMAP4HelperMixin, unittest.TestCase):
     def testCapability(self):
         caps = {}
         def getCaps():
@@ -1756,7 +1756,7 @@
 
 
 
-class IMAP4ServerSearchTestCase(IMAP4HelperMixin, unittest.TestCase):
+class IMAP4ServerSearchTests(IMAP4HelperMixin, unittest.TestCase):
     """
     Tests for the behavior of the search_* functions in L{imap4.IMAP4Server}.
     """
@@ -1894,7 +1894,7 @@
             return username
         raise UnauthorizedLogin()
 
-class AuthenticatorTestCase(IMAP4HelperMixin, unittest.TestCase):
+class AuthenticatorTests(IMAP4HelperMixin, unittest.TestCase):
     def setUp(self):
         IMAP4HelperMixin.setUp(self)
 
@@ -2036,7 +2036,7 @@
 
 
 
-class SASLPLAINTestCase(unittest.TestCase):
+class SASLPLAINTests(unittest.TestCase):
     """
     Tests for I{SASL PLAIN} authentication, as implemented by
     L{imap4.PLAINAuthenticator} and L{imap4.PLAINCredentials}.
@@ -2088,7 +2088,7 @@
 
 
 
-class UnsolicitedResponseTestCase(IMAP4HelperMixin, unittest.TestCase):
+class UnsolicitedResponseTests(IMAP4HelperMixin, unittest.TestCase):
     def testReadWrite(self):
         def login():
             return self.client.login('testuser', 'password-test')
@@ -2276,7 +2276,7 @@
 
 
 
-class HandCraftedTestCase(IMAP4HelperMixin, unittest.TestCase):
+class HandCraftedTests(IMAP4HelperMixin, unittest.TestCase):
     def testTrailingLiteral(self):
         transport = StringTransport()
         c = imap4.IMAP4Client()
@@ -3431,7 +3431,7 @@
         self.got_subpart = part
         return self.subpart[part]
 
-class NewStoreTestCase(unittest.TestCase, IMAP4HelperMixin):
+class NewStoreTests(unittest.TestCase, IMAP4HelperMixin):
     result = None
     storeArgs = None
 
@@ -3701,7 +3701,7 @@
 
 
 
-class NewFetchTestCase(unittest.TestCase, IMAP4HelperMixin):
+class NewFetchTests(unittest.TestCase, IMAP4HelperMixin):
     def setUp(self):
         self.received_messages = self.received_uid = None
         self.result = None
@@ -4227,7 +4227,7 @@
 
 
 
-class DefaultSearchTestCase(IMAP4HelperMixin, unittest.TestCase):
+class DefaultSearchTests(IMAP4HelperMixin, unittest.TestCase):
     """
     Test the behavior of the server's SEARCH implementation, particularly in
     the face of unhandled search terms.
@@ -4417,7 +4417,7 @@
 
 
 
-class FetchSearchStoreTestCase(unittest.TestCase, IMAP4HelperMixin):
+class FetchSearchStoreTests(unittest.TestCase, IMAP4HelperMixin):
     implements(imap4.ISearchableMailbox)
 
     def setUp(self):
@@ -4600,7 +4600,7 @@
         self.msgs.append(msg)
         return len(self.msgs)
 
-class CopyWorkerTestCase(unittest.TestCase):
+class CopyWorkerTests(unittest.TestCase):
     def testFeaturefulMessage(self):
         s = imap4.IMAP4Server()
 
@@ -4676,7 +4676,7 @@
         return d.addCallback(cbCopy)
 
 
-class TLSTestCase(IMAP4HelperMixin, unittest.TestCase):
+class TLSTests(IMAP4HelperMixin, unittest.TestCase):
     serverCTX = ServerTLSContext and ServerTLSContext()
     clientCTX = ClientTLSContext and ClientTLSContext()
 
@@ -4785,7 +4785,7 @@
         self.fetchDeferred.callback(None)
         return d
 
-class Timeout(IMAP4HelperMixin, unittest.TestCase):
+class TimeoutTests(IMAP4HelperMixin, unittest.TestCase):
 
     def test_serverTimeout(self):
         """
@@ -4879,7 +4879,7 @@
 
 
 
-class Disconnection(unittest.TestCase):
+class DisconnectionTests(unittest.TestCase):
     def testClientDisconnectFailsDeferreds(self):
         c = imap4.IMAP4Client()
         t = StringTransportWithDisconnection()
@@ -4916,7 +4916,7 @@
 
 
 
-class Pipelining(unittest.TestCase):
+class PipeliningTests(unittest.TestCase):
     """
     Tests for various aspects of the IMAP4 server's pipelining support.
     """
@@ -4988,15 +4988,15 @@
 
 
 if ClientTLSContext is None:
-    for case in (TLSTestCase,):
+    for case in (TLSTests,):
         case.skip = "OpenSSL not present"
 elif interfaces.IReactorSSL(reactor, None) is None:
-    for case in (TLSTestCase,):
+    for case in (TLSTests,):
         case.skip = "Reactor doesn't support SSL"
 
 
 
-class IMAP4ServerFetchTestCase(unittest.TestCase):
+class IMAP4ServerFetchTests(unittest.TestCase):
     """
     This test case is for the FETCH tests that require
     a C{StringTransport}.
Index: twisted/mail/test/test_bounce.py
===================================================================
--- twisted/mail/test/test_bounce.py	(revision 43431)
+++ twisted/mail/test/test_bounce.py	(working copy)
@@ -9,7 +9,7 @@
 from twisted.mail import bounce
 import rfc822, cStringIO
 
-class BounceTestCase(unittest.TestCase):
+class BounceTests(unittest.TestCase):
     """
     testcases for bounce message generation
     """
Index: twisted/mail/test/test_options.py
===================================================================
--- twisted/mail/test/test_options.py	(revision 43431)
+++ twisted/mail/test/test_options.py	(working copy)
@@ -20,7 +20,7 @@
     sslSkip = None
 
 
-class OptionsTestCase(TestCase):
+class OptionsTests(TestCase):
     """
     Tests for the command line option parser used for I{twistd mail}.
     """
Index: twisted/mail/test/test_pop3client.py
===================================================================
--- twisted/mail/test/test_pop3client.py	(revision 43431)
+++ twisted/mail/test/test_pop3client.py	(working copy)
@@ -52,7 +52,7 @@
 def strip(f):
     return lambda result, f=f: f()
 
-class POP3ClientLoginTestCase(unittest.TestCase):
+class POP3ClientLoginTests(unittest.TestCase):
     def testNegativeGreeting(self):
         p, t = setUp(greet=False)
         p.allowInsecureLogin = True
@@ -187,7 +187,7 @@
     def consume(self, line):
         self.data.append(line)
 
-class POP3ClientListTestCase(unittest.TestCase):
+class POP3ClientListTests(unittest.TestCase):
     def testListSize(self):
         p, t = setUp()
         d = p.listSize()
@@ -248,7 +248,7 @@
             d, ServerErrorResponse).addCallback(
             lambda exc: self.assertEqual(exc.args[0], "Fatal doom server exploded"))
 
-class POP3ClientMessageTestCase(unittest.TestCase):
+class POP3ClientMessageTests(unittest.TestCase):
     def testRetrieve(self):
         p, t = setUp()
         d = p.retrieve(7)
@@ -345,7 +345,7 @@
 
 
 
-class POP3ClientMiscTestCase(unittest.TestCase):
+class POP3ClientMiscTests(unittest.TestCase):
     def testCapability(self):
         p, t = setUp()
         d = p.capabilities(useCache=0)
@@ -482,7 +482,7 @@
                 self.transport.startTLS(self.context)
 
 
-class POP3TLSTestCase(unittest.TestCase):
+class POP3TLSTests(unittest.TestCase):
     """
     Tests for POP3Client's support for TLS connections.
     """
@@ -544,7 +544,7 @@
         return cp.deferred
 
 
-class POP3TimeoutTestCase(POP3HelperMixin, unittest.TestCase):
+class POP3TimeoutTests(POP3HelperMixin, unittest.TestCase):
     def testTimeout(self):
         def login():
             d = self.client.login('test', 'twisted')
@@ -577,17 +577,17 @@
 
 
 if ClientTLSContext is None:
-    for case in (POP3TLSTestCase,):
+    for case in (POP3TLSTests,):
         case.skip = "OpenSSL not present"
 elif interfaces.IReactorSSL(reactor, None) is None:
-    for case in (POP3TLSTestCase,):
+    for case in (POP3TLSTests,):
         case.skip = "Reactor doesn't support SSL"
 
 
 
 import twisted.mail.pop3client
 
-class POP3ClientModuleStructureTestCase(unittest.TestCase):
+class POP3ClientModuleStructureTests(unittest.TestCase):
     """
     Miscellaneous tests more to do with module/package structure than
     anything to do with the POP3 client.
Index: twisted/mail/test/test_pop3.py
===================================================================
--- twisted/mail/test/test_pop3.py	(revision 43431)
+++ twisted/mail/test/test_pop3.py	(working copy)
@@ -33,7 +33,7 @@
 from twisted.test.proto_helpers import LineSendingProtocol
 
 
-class UtilityTestCase(unittest.TestCase):
+class UtilityTests(unittest.TestCase):
     """
     Test the various helper functions and classes used by the POP3 server
     protocol implementation.
@@ -207,7 +207,7 @@
             raise AssertionError, 'code is ' + line
 
 
-class POP3TestCase(unittest.TestCase):
+class POP3Tests(unittest.TestCase):
 
     message = '''\
 Subject: urgent
@@ -300,7 +300,7 @@
         self.messages[i] = ''
 
 
-class AnotherPOP3TestCase(unittest.TestCase):
+class AnotherPOP3Tests(unittest.TestCase):
 
     def runTest(self, lines, expectedOutput):
         dummy = DummyPOP3()
@@ -443,7 +443,7 @@
     messageExpiration = 25
 
 
-class CapabilityTestCase(unittest.TestCase):
+class CapabilityTests(unittest.TestCase):
     def setUp(self):
         s = StringIO.StringIO()
         p = pop3.POP3()
@@ -498,7 +498,7 @@
 
 
 
-class GlobalCapabilitiesTestCase(unittest.TestCase):
+class GlobalCapabilitiesTests(unittest.TestCase):
     def setUp(self):
         s = StringIO.StringIO()
         p = pop3.POP3()
@@ -539,7 +539,7 @@
 
 
 
-class SASLTestCase(unittest.TestCase):
+class SASLTests(unittest.TestCase):
     def testValidLogin(self):
         p = pop3.POP3()
         p.factory = TestServerFactory()
@@ -933,7 +933,7 @@
     message=_getUidlDeprecation,
     category=PendingDeprecationWarning)
 
-class IndexErrorCommandTestCase(CommandMixin, unittest.TestCase):
+class IndexErrorCommandTests(CommandMixin, unittest.TestCase):
     """
     Run all of the command tests against a mailbox which raises IndexError
     when an out of bounds request is made.  This behavior will be deprecated
@@ -963,7 +963,7 @@
 
 
 
-class ValueErrorCommandTestCase(CommandMixin, unittest.TestCase):
+class ValueErrorCommandTests(CommandMixin, unittest.TestCase):
     """
     Run all of the command tests against a mailbox which raises ValueError
     when an out of bounds request is made.  This is the correct behavior and
@@ -985,18 +985,18 @@
 
 
 
-class IndexErrorSyncDeferredCommandTestCase(IndexErrorCommandTestCase):
+class IndexErrorSyncDeferredCommandTests(IndexErrorCommandTests):
     """
-    Run all of the L{IndexErrorCommandTestCase} tests with a
+    Run all of the L{IndexErrorCommandTests} tests with a
     synchronous-Deferred returning IMailbox implementation.
     """
     mailboxType = SyncDeferredMailbox
 
 
 
-class ValueErrorSyncDeferredCommandTestCase(ValueErrorCommandTestCase):
+class ValueErrorSyncDeferredCommandTests(ValueErrorCommandTests):
     """
-    Run all of the L{ValueErrorCommandTestCase} tests with a
+    Run all of the L{ValueErrorCommandTests} tests with a
     synchronous-Deferred returning IMailbox implementation.
     """
     mailboxType = SyncDeferredMailbox
@@ -1021,9 +1021,9 @@
 
 
 
-class IndexErrorAsyncDeferredCommandTestCase(IndexErrorCommandTestCase):
+class IndexErrorAsyncDeferredCommandTests(IndexErrorCommandTests):
     """
-    Run all of the L{IndexErrorCommandTestCase} tests with an asynchronous-Deferred
+    Run all of the L{IndexErrorCommandTests} tests with an asynchronous-Deferred
     returning IMailbox implementation.
     """
     mailboxType = AsyncDeferredMailbox
@@ -1035,13 +1035,13 @@
         while self.pop3Server.mbox.waiting:
             d, a = self.pop3Server.mbox.waiting.pop()
             d.callback(a)
-        IndexErrorCommandTestCase._flush(self)
+        IndexErrorCommandTests._flush(self)
 
 
 
-class ValueErrorAsyncDeferredCommandTestCase(ValueErrorCommandTestCase):
+class ValueErrorAsyncDeferredCommandTests(ValueErrorCommandTests):
     """
-    Run all of the L{IndexErrorCommandTestCase} tests with an asynchronous-Deferred
+    Run all of the L{IndexErrorCommandTests} tests with an asynchronous-Deferred
     returning IMailbox implementation.
     """
     mailboxType = AsyncDeferredMailbox
@@ -1053,9 +1053,9 @@
         while self.pop3Server.mbox.waiting:
             d, a = self.pop3Server.mbox.waiting.pop()
             d.callback(a)
-        ValueErrorCommandTestCase._flush(self)
+        ValueErrorCommandTests._flush(self)
 
-class POP3MiscTestCase(unittest.TestCase):
+class POP3MiscTests(unittest.TestCase):
     """
     Miscellaneous tests more to do with module/package structure than
     anything to do with the Post Office Protocol.
Index: twisted/mail/test/test_mail.py
===================================================================
--- twisted/mail/test/test_mail.py	(revision 43431)
+++ twisted/mail/test/test_mail.py	(working copy)
@@ -52,7 +52,7 @@
 
 from twisted.test.proto_helpers import LineSendingProtocol
 
-class DomainWithDefaultsTestCase(unittest.TestCase):
+class DomainWithDefaultsTests(unittest.TestCase):
     def testMethods(self):
         d = dict([(x, x + 10) for x in range(10)])
         d = mail.mail.DomainWithDefaultDict(d, 'Default')
@@ -143,7 +143,7 @@
 
 
 
-class BounceTestCase(unittest.TestCase):
+class BounceTests(unittest.TestCase):
     def setUp(self):
         self.domain = mail.mail.BounceDomain()
 
@@ -165,7 +165,7 @@
 
 
 
-class FileMessageTestCase(unittest.TestCase):
+class FileMessageTests(unittest.TestCase):
     def setUp(self):
         self.name = "fileMessage.testFile"
         self.final = "final.fileMessage.testFile"
@@ -209,7 +209,7 @@
         self.failIf(os.path.exists(self.name))
         self.failIf(os.path.exists(self.final))
 
-class MailServiceTestCase(unittest.TestCase):
+class MailServiceTests(unittest.TestCase):
     def setUp(self):
         self.service = mail.mail.MailService()
 
@@ -361,7 +361,7 @@
 
 
 
-class MaildirAppendStringTestCase(unittest.TestCase, _AppendTestMixin):
+class MaildirAppendStringTests(unittest.TestCase, _AppendTestMixin):
     """
     Tests for L{MaildirMailbox.appendMessage} when invoked with a C{str}.
     """
@@ -441,7 +441,7 @@
 
 
 
-class MaildirAppendFileTestCase(unittest.TestCase, _AppendTestMixin):
+class MaildirAppendFileTests(unittest.TestCase, _AppendTestMixin):
     """
     Tests for L{MaildirMailbox.appendMessage} when invoked with a C{str}.
     """
@@ -482,7 +482,7 @@
 
 
 
-class MaildirTestCase(unittest.TestCase):
+class MaildirTests(unittest.TestCase):
     def setUp(self):
         self.d = self.mktemp()
         mail.maildir.initializeMaildir(self.d)
@@ -573,7 +573,7 @@
 
 
 
-class AbstractMaildirDomainTestCase(unittest.TestCase):
+class AbstractMaildirDomainTests(unittest.TestCase):
     """
     Tests for L{twisted.mail.maildir.AbstractMaildirDomain}.
     """
@@ -586,7 +586,7 @@
 
 
 
-class MaildirDirdbmDomainTestCase(unittest.TestCase):
+class MaildirDirdbmDomainTests(unittest.TestCase):
     """
     Tests for L{MaildirDirdbmDomain}.
     """
@@ -741,7 +741,7 @@
         self.aliasGroup = aliases
 
 
-class ServiceDomainTestCase(unittest.TestCase):
+class ServiceDomainTests(unittest.TestCase):
     def setUp(self):
         self.S = mail.mail.MailService()
         self.D = mail.protocols.DomainDeliveryBase(self.S, None)
@@ -820,7 +820,7 @@
             self.D.validateFrom, None, origin
         )
 
-class VirtualPOP3TestCase(unittest.TestCase):
+class VirtualPOP3Tests(unittest.TestCase):
     def setUp(self):
         self.tmpdir = self.mktemp()
         self.S = mail.mail.MailService()
@@ -892,7 +892,7 @@
 
 
 
-class RelayTestCase(unittest.TestCase):
+class RelayTests(unittest.TestCase):
     def testExists(self):
         service = mail.mail.MailService()
         domain = mail.relay.DomainQueuer(service)
@@ -929,7 +929,7 @@
 
 
 
-class RelayerTestCase(unittest.TestCase):
+class RelayerTests(unittest.TestCase):
     def setUp(self):
         self.tmpdir = self.mktemp()
         os.mkdir(self.tmpdir)
@@ -985,7 +985,7 @@
     def notifyDone(self, factory):
         self.done.append(factory)
 
-class ManagedRelayerTestCase(unittest.TestCase):
+class ManagedRelayerTests(unittest.TestCase):
     def setUp(self):
         self.manager = Manager()
         self.messages = range(0, 20, 2)
@@ -1017,7 +1017,7 @@
         self.relay.connectionLost(failure.Failure(Exception()))
         self.assertEqual(self.manager.done, [self.factory])
 
-class DirectoryQueueTestCase(unittest.TestCase):
+class DirectoryQueueTests(unittest.TestCase):
     def setUp(self):
         # This is almost a test case itself.
         self.tmpdir = self.mktemp()
@@ -1132,7 +1132,7 @@
         pass
     return defer.DeferredList(dl)
 
-class MXTestCase(unittest.TestCase):
+class MXTests(unittest.TestCase):
     """
     Tests for L{mail.relaymanager.MXCalculator}.
     """
@@ -1532,7 +1532,7 @@
     def _cbManyRecordsRepeatSpecificResult(self, againMX, nextMX):
         self.assertEqual(str(againMX.name), str(nextMX.name))
 
-class LiveFireExercise(unittest.TestCase):
+class LiveFireExerciseTests(unittest.TestCase):
     if interfaces.IReactorUDP(reactor, None) is None:
         skip = "UDP support is required to determining MX records"
 
@@ -1689,7 +1689,7 @@
     def connectionLost(self):
         self.lost = True
 
-class AliasTestCase(unittest.TestCase):
+class AliasTests(unittest.TestCase):
     lines = [
         'First line',
         'Next line',
@@ -1893,7 +1893,7 @@
 
 
 
-class ProcessAliasTestCase(unittest.TestCase):
+class ProcessAliasTests(unittest.TestCase):
     """
     Tests for alias resolution.
     """
Index: twisted/mail/test/test_smtp.py
===================================================================
--- twisted/mail/test/test_smtp.py	(revision 43431)
+++ twisted/mail/test/test_smtp.py	(working copy)
@@ -122,7 +122,7 @@
 
 
 
-class SMTPTestCase(unittest.TestCase):
+class SMTPTests(unittest.TestCase):
 
     messages = [('foo@bar.com', ['foo@baz.com', 'qux@baz.com'], '''\
 Subject: urgent\015
@@ -232,10 +232,10 @@
         return self.loopback(protocol, clientProtocol)
     testMessages.suppress = [util.suppress(message='DomainSMTP', category=DeprecationWarning)]
 
-class LoopbackSMTPTestCase(LoopbackTestCase, unittest.TestCase):
+class LoopbackSMTPTests(LoopbackTestCase, unittest.TestCase):
     clientClass = MySMTPClient
 
-class LoopbackESMTPTestCase(LoopbackTestCase, unittest.TestCase):
+class LoopbackESMTPTests(LoopbackTestCase, unittest.TestCase):
     clientClass = MyESMTPClient
 
 
@@ -266,7 +266,7 @@
             self.sendLine(self.clientData.pop())
 
 
-class SMTPClientTestCase(unittest.TestCase, LoopbackMixin):
+class SMTPClientTests(unittest.TestCase, LoopbackMixin):
     """
     Tests for L{smtp.SMTPClient}.
     """
@@ -520,11 +520,11 @@
         a.setTimeout(None)
 
 
-class AnotherESMTPTestCase(AnotherTestCase, unittest.TestCase):
+class AnotherESMTPTests(AnotherTestCase, unittest.TestCase):
     serverClass = DummyESMTP
     clientClass = MyESMTPClient
 
-class AnotherSMTPTestCase(AnotherTestCase, unittest.TestCase):
+class AnotherSMTPTests(AnotherTestCase, unittest.TestCase):
     serverClass = DummySMTP
     clientClass = MySMTPClient
 
@@ -582,7 +582,7 @@
 
 
 
-class AuthTestCase(unittest.TestCase, LoopbackMixin):
+class AuthTests(unittest.TestCase, LoopbackMixin):
     def test_crammd5Auth(self):
         """
         L{ESMTPClient} can authenticate using the I{CRAM-MD5} SASL mechanism.
@@ -651,7 +651,7 @@
 
 
 
-class SMTPHelperTestCase(unittest.TestCase):
+class SMTPHelperTests(unittest.TestCase):
     def testMessageID(self):
         d = {}
         for i in range(1000):
@@ -729,7 +729,7 @@
 
 
 
-class TLSTestCase(unittest.TestCase, LoopbackMixin):
+class TLSTests(unittest.TestCase, LoopbackMixin):
     if sslSkip is not None:
         skip = sslSkip
 
@@ -747,12 +747,12 @@
         return self.loopback(server, client).addCallback(check)
 
 if not interfaces.IReactorSSL.providedBy(reactor):
-    for case in (TLSTestCase,):
+    for case in (TLSTests,):
         case.skip = "Reactor doesn't support SSL"
 
 
 
-class EmptyLineTestCase(unittest.TestCase):
+class EmptyLineTests(unittest.TestCase):
     def test_emptyLineSyntaxError(self):
         """
         If L{smtp.SMTP} receives an empty line, it responds with a 500 error
@@ -771,7 +771,7 @@
 
 
 
-class TimeoutTestCase(unittest.TestCase, LoopbackMixin):
+class TimeoutTests(unittest.TestCase, LoopbackMixin):
     """
     Check that SMTP client factories correctly use the timeout.
     """
@@ -925,7 +925,7 @@
 
 
 
-class SMTPSenderFactoryTestCase(unittest.TestCase):
+class SMTPSenderFactoryTests(unittest.TestCase):
     """
     Tests for L{smtp.SMTPSenderFactory}.
     """
@@ -964,7 +964,7 @@
 
 
 
-class SMTPSenderFactoryRetryTestCase(unittest.TestCase):
+class SMTPSenderFactoryRetryTests(unittest.TestCase):
     """
     Tests for the retry behavior of L{smtp.SMTPSenderFactory}.
     """
@@ -1062,7 +1062,7 @@
 
 
 
-class SMTPServerTestCase(unittest.TestCase):
+class SMTPServerTests(unittest.TestCase):
     """
     Test various behaviors of L{twisted.mail.smtp.SMTP} and
     L{twisted.mail.smtp.ESMTP}.
@@ -1261,7 +1261,7 @@
 
 
 
-class ESMTPAuthenticationTestCase(unittest.TestCase):
+class ESMTPAuthenticationTests(unittest.TestCase):
     def assertServerResponse(self, bytes, response):
         """
         Assert that when the given bytes are delivered to the ESMTP server
@@ -1493,7 +1493,7 @@
 
 
 
-class SMTPClientErrorTestCase(unittest.TestCase):
+class SMTPClientErrorTests(unittest.TestCase):
     """
     Tests for L{smtp.SMTPClientError}.
     """
@@ -1562,7 +1562,7 @@
 
 
 
-class SSLTestCase(unittest.TestCase):
+class SSLTests(unittest.TestCase):
     """
     Tests for the TLS negotiation done by L{smtp.ESMTPClient}.
     """
@@ -1740,7 +1740,7 @@
 
 
 
-class SendmailTestCase(unittest.TestCase):
+class SendmailTests(unittest.TestCase):
     """
     Tests for L{twisted.mail.smtp.sendmail}.
     """
