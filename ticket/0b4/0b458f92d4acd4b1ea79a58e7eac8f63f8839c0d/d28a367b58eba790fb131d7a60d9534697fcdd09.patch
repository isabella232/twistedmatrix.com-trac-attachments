Index: twisted/web/twcgi.py
===================================================================
--- twisted/web/twcgi.py	(revision 41022)
+++ twisted/web/twcgi.py	(working copy)
@@ -265,7 +265,8 @@
                 for header in headers:
                     br = header.find(': ')
                     if br == -1:
-                        log.msg( 'ignoring malformed CGI header: %s' % header )
+                        log.msg('ignoring malformed CGI header: "%s"' %
+                                header)
                     else:
                         headerName = header[:br].lower()
                         headerText = header[br+2:]
Index: twisted/web/test/test_cgi.py
===================================================================
--- twisted/web/test/test_cgi.py	(revision 41022)
+++ twisted/web/test/test_cgi.py	(working copy)
@@ -9,7 +9,7 @@
 
 from twisted.trial import unittest
 from twisted.internet import reactor, interfaces, error
-from twisted.python import util, failure
+from twisted.python import util, failure, log
 from twisted.web.http import NOT_FOUND, INTERNAL_SERVER_ERROR
 from twisted.web import client, twcgi, server, resource
 from twisted.web.test._util import _render
@@ -28,6 +28,12 @@
 print "cgi output"
 '''
 
+BROKEN_HEADER_CGI = '''\
+print "XYZ"
+print
+print "cgi output"
+'''
+
 SPECIAL_HEADER_CGI = '''\
 print "Server: monkeys"
 print "Date: last year"
@@ -166,6 +172,31 @@
         return factory.deferred
 
 
+    def test_malformedHeaderCGI(self):
+        """
+        Check for the error message in the duplicated header
+        """
+        cgiFilename = self.writeCGI(BROKEN_HEADER_CGI)
+
+        portnum = self.startServer(cgiFilename)
+        url = "http://localhost:%d/cgi" % (portnum,)
+        factory = client.HTTPClientFactory(url)
+        reactor.connectTCP('localhost', portnum, factory)
+        loggedMessages = []
+
+        def addMessage(eventDict):
+            loggedMessages.append(log.textFromEventDict(eventDict))
+        
+        log.addObserver(addMessage)
+        
+        def checkResponse(ignored):
+            self.assertEqual(loggedMessages[0],
+                             'ignoring malformed CGI header: "XYZ"')
+            
+        factory.deferred.addCallback(checkResponse)
+        return factory.deferred
+
+
     def testReadEmptyInput(self):
         cgiFilename = os.path.abspath(self.mktemp())
         cgiFile = file(cgiFilename, 'wt')
