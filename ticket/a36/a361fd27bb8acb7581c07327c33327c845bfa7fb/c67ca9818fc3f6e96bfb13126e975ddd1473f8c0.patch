Index: twisted/pair/test/test_ip.py
===================================================================
--- twisted/pair/test/test_ip.py	(revision 43491)
+++ twisted/pair/test/test_ip.py	(working copy)
@@ -26,7 +26,7 @@
         assert expectKw == kw, "Expected %r, got %r" % (expectKw, kw)
         assert expectData == data, "Expected %r, got %r" % (expectData, data)
 
-class IPTestCase(unittest.TestCase):
+class IPTests(unittest.TestCase):
     def testPacketParsing(self):
         proto = ip.IPProtocol()
         p1 = MyProtocol([
Index: twisted/pair/test/test_tuntap.py
===================================================================
--- twisted/pair/test/test_tuntap.py	(revision 43491)
+++ twisted/pair/test/test_tuntap.py	(working copy)
@@ -543,13 +543,13 @@
 
 
 
-class FakeTapDeviceTestsWithPI(FakeDeviceTestsMixin,
+class FakeTapDeviceWithPITests(FakeDeviceTestsMixin,
                                TunnelDeviceTestsMixin, SynchronousTestCase):
     """
     Run various tap-type tunnel unit tests against an in-memory I/O system with
     the PI header enabled.
     """
-FakeTapDeviceTestsWithPI.helper = TapHelper(
+FakeTapDeviceWithPITests.helper = TapHelper(
     FakeTapDeviceTests._TUNNEL_REMOTE, FakeTapDeviceTests._TUNNEL_LOCAL,
     pi=True)
 
Index: twisted/pair/test/test_ethernet.py
===================================================================
--- twisted/pair/test/test_ethernet.py	(revision 43491)
+++ twisted/pair/test/test_ethernet.py	(working copy)
@@ -21,7 +21,7 @@
             expect, (data, kw),
             )
 
-class EthernetTestCase(unittest.TestCase):
+class EthernetTests(unittest.TestCase):
     def testPacketParsing(self):
         proto = ethernet.EthernetProtocol()
         p1 = MyProtocol([
Index: twisted/pair/test/test_rawudp.py
===================================================================
--- twisted/pair/test/test_rawudp.py	(revision 43491)
+++ twisted/pair/test/test_rawudp.py	(working copy)
@@ -19,7 +19,7 @@
         assert expectHost == host, "Expected host %r, got %r" % (expectHost, host)
         assert expectPort == port, "Expected port %d=0x%04x, got %d=0x%04x" % (expectPort, expectPort, port, port)
 
-class RawUDPTestCase(unittest.TestCase):
+class RawUDPTests(unittest.TestCase):
     def testPacketParsing(self):
         proto = rawudp.RawUDPProtocol()
         p1 = MyProtocol([
Index: twisted/pair/topfiles/7722.misc
===================================================================
