Index: doc/core/howto/endpoints.xhtml
===================================================================
--- doc/core/howto/endpoints.xhtml	(revision 30423)
+++ doc/core/howto/endpoints.xhtml	(working copy)
@@ -18,8 +18,8 @@
 that is usually invisible to the application passing data across it.
 Twisted strives to make the nature of the "wire" as transparent as
 possible, with highly abstract interfaces for passing and receiving data,
-such as <code class="api" base="twisted.internet.interfaces">ITransport</code>
-and <code class="api" base="twisted.internet.interfaces">IProtocol</code>.</p>
+such as <code class="API" base="twisted.internet.interfaces">ITransport</code>
+and <code class="API" base="twisted.internet.interfaces">IProtocol</code>.</p>
 
 <p>However, the application can't be completely ignorant of the wire.
 In particular, it must do something to <em>start</em> the connection, and
@@ -30,9 +30,9 @@
 connect to it, and the other side does the connecting.</p>
 
 <p>In Twisted 10.1, several new interfaces were introduced to describe
-each of these roles for stream-oriented connections: <code class="api"
+each of these roles for stream-oriented connections: <code class="API"
   base="twisted.internet.interfaces">IServerStreamEndpoint</code> and <code
-  class="api" base="twisted.internet.interfaces">IClientStreamEndpoint</code>.
+  class="API" base="twisted.internet.interfaces">IClientStreamEndpoint</code>.
 The word "stream", in this case, refers to endpoints which treat a
 connection as a continuous stream of bytes, rather than a sequence of
 discrete datagrams: TCP is a "stream" protocol whereas UDP is a "datagram"
@@ -50,9 +50,9 @@
 endpoints directly. However, in most programs, you will want to allow the
 user to specify where to listen or connect, in a way which will allow the
 user to request different strategies, without having to adjust your
-program. In order to allow this, you should use <code class="api"
+program. In order to allow this, you should use <code class="API"
   base="twisted.internet.endpoints">clientFromString</code> or <code
-  class="api" base="twisted.internet.endpoints">serverFromString</code>.</p>
+  class="API" base="twisted.internet.endpoints">serverFromString</code>.</p>
 
 <h3>There's Not Much To It</h3>
 
@@ -70,9 +70,9 @@
 
 <h3>Servers and Stopping</h3>
 
-<p><code class="api" base="twisted.internet.interfaces">IServerStreamEndpoint.listen</code>
-returns a <code class="api" base="twisted.internet.defer">Deferred</code>
-that fires with an <code class="api" base="twisted.internet.interfaces">IListeningPort</code>.
+<p><code class="API" base="twisted.internet.interfaces">IServerStreamEndpoint.listen</code>
+returns a <code class="API" base="twisted.internet.defer">Deferred</code>
+that fires with an <code class="API" base="twisted.internet.interfaces">IListeningPort</code>.
 Note that this deferred may errback. The most common cause of such an error
 would be that another program is already using the requested port number,
 but the exact cause may vary depending on what type of endpoint you are
@@ -86,7 +86,7 @@
 response to anything other than a full server shutdown (<code>reactor.stop</code>
 and / or <code>twistd</code> will usually handle that case for you), make
 sure you keep a reference around to that listening port object so you can
-call <code class="api" base="twisted.internet.interfaces">IListeningPort.stopListening</code>
+call <code class="API" base="twisted.internet.interfaces">IListeningPort.stopListening</code>
 on it. Finally, keep in mind that <code>stopListening</code> itself returns
 a <code>Deferred</code>, and the port may not have fully stopped listening
 until that <code>Deferred</code> has fired.</p>
@@ -99,12 +99,12 @@
 
 <h3>Clients and Cancelling</h3>
 
-<p><code class="api" base="twisted.internet.interfaces">IClientStreamEndpoint.connect</code>
+<p><code class="API" base="twisted.internet.interfaces">IClientStreamEndpoint.connect</code>
 will connect your protocol factory to a new outgoing connection attempt. It
 returns a <code>Deferred</code> which fires with the <code>IProtocol</code>
 returned from the factory's <code>buildProtocol</code> method.</p>
 
-<p>Connection attempts may fail, and so that <code class="api"
+<p>Connection attempts may fail, and so that <code class="API"
 base="twisted.internet.defer">Deferred</code> may also errback. If it does so,
 you will have to try again; your protocol won't be constructed, and no further
 attempts will be made.</p>
@@ -112,11 +112,11 @@
 <p>Connection attempts may also take a long time, and your users may
 become bored and wander off. If this happens, and your code decides, for
 whatever reason, that you've been waiting for the connection too long, you
-can call <code class="api" base="twisted.internet.defer">Deferred.cancel</code>
-on the <code>Deferred</code> returned from <code class="api"
+can call <code class="API" base="twisted.internet.defer">Deferred.cancel</code>
+on the <code>Deferred</code> returned from <code class="API"
 base="twisted.internet.interfaces.IClientStreamEndpoint">connect</code>, and the
 underlying machinery should give up on the connection. This should cause the
-<code>Deferred</code> to errback, usually with <code class="api"
+<code>Deferred</code> to errback, usually with <code class="API"
 base="twisted.internet.defer">CancelledError</code>; although you should
 consult the documentation for your particular endpoint type to see if it may do
 something different.</p>
@@ -148,9 +148,9 @@
 
 <p>If you are writing an application and you need to construct
 endpoints yourself, you can allow users to specify arbitrary endpoints
-described by a string using the <code class="api"
+described by a string using the <code class="API"
   base="twisted.internet.endpoints">clientFromString</code> and <code
-  class="api" base="twisted.internet.endpoints">serverFromString</code>
+  class="API" base="twisted.internet.endpoints">serverFromString</code>
 APIs. Since these APIs just take a string, they provide flexibility: if
 Twisted adds support for new types of endpoints (for example, IPv6
 endpoints, or WebSocket endpoints), your application will automatically be
@@ -161,8 +161,8 @@
 <p>For many use-cases, especially the common case of a <code>twistd</code>
 plugin which runs a long-running server that just binds a simple port, you
 might not want to use the endpoints APIs directly. Instead, you may want to
-construct an <code class="api" base="twisted.application.service"
->IService</code>, using <code class="api" base="twisted.application"
+construct an <code class="API" base="twisted.application.service"
+>IService</code>, using <code class="API" base="twisted.application"
 >strports.service</code> , which will fit
 neatly into the required structure of <a href="plugin.xhtml">the twistd
 plugin API</a> . This doesn't give your application much control - the port
@@ -171,9 +171,9 @@
 application will support.</p>
 
 <p>It is, however, almost always preferable to use an endpoint rather
-than calling a lower-level APIs like <code class="api"
+than calling a lower-level APIs like <code class="API"
 base="twisted.internet.interfaces.IReactorTCP" >connectTCP</code>, <code
-class="api" base="twisted.internet.interfaces.IReactorTCP">listenTCP</code>,
+class="API" base="twisted.internet.interfaces.IReactorTCP">listenTCP</code>,
 etc, directly. By accepting an arbitrary endpoint rather than requiring a
 specific reactor interface, you leave your application open to lots of
 interesting transport-layer extensibility for the future.</p>
