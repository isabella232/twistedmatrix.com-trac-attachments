diff --git twisted/internet/_sslverify.py twisted/internet/_sslverify.py
index da0c772..6b06d95 100644
--- twisted/internet/_sslverify.py
+++ twisted/internet/_sslverify.py
@@ -1011,6 +1011,33 @@ class OpenSSLCertificateAuthorities(object):
             store.add_cert(cert)
 
 
+def multiTrust(certificates):
+    """
+    From a list of L{Certificate} or L{OpenSSL.crypto.X509} instances,
+    this returns an object which implements C{IOpenSSLTrustRoot} and
+    is hence suitable for use as the trustRoot= keyword argument to
+    optionsForClientTLS
+
+    @param certificates: L{Certificate} or L{OpenSSL.crypto.X509} instances
+    @type certificates: L{list}
+    """
+
+    # XXX what about accepting FilePath objects as well, and
+    # attempting to load the certificate?
+
+    certs = []
+    for cert in certificates:
+        # PrivateCertificate or Certificate are both okay
+        if isinstance(cert, CertBase):
+            cert = cert.original
+        if not isinstance(cert, OpenSSL.crypto.X509):
+            raise AttributeError(
+                "certificates items must be twisted.iternet.ssl.Certificate"
+                " or OpenSSL.crypto.X509 instances"
+            )
+        certs.append(cert)
+    return OpenSSLCertificateAuthorities(certs)
+
 
 @implementer(IOpenSSLTrustRoot)
 class OpenSSLDefaultPaths(object):
diff --git twisted/internet/ssl.py twisted/internet/ssl.py
index eb560aa..55603ae 100644
--- twisted/internet/ssl.py
+++ twisted/internet/ssl.py
@@ -229,6 +229,7 @@ from twisted.internet._sslverify import (
     platformTrust, OpenSSLDefaultPaths, VerificationError,
     optionsForClientTLS, ProtocolNegotiationSupport,
     protocolNegotiationMechanisms,
+    multiTrust,
 )
 
 __all__ = [
@@ -242,4 +243,5 @@ __all__ = [
 
     'VerificationError', 'optionsForClientTLS',
     'ProtocolNegotiationSupport', 'protocolNegotiationMechanisms',
+    'multiTrust',
 ]
diff --git twisted/internet/test/test_tls.py twisted/internet/test/test_tls.py
index c5069c2..5fc5329 100644
--- twisted/internet/test/test_tls.py
+++ twisted/internet/test/test_tls.py
@@ -22,7 +22,7 @@ from twisted.internet.endpoints import (
     SSL4ServerEndpoint, SSL4ClientEndpoint, TCP4ClientEndpoint)
 from twisted.internet.error import ConnectionClosed
 from twisted.internet.task import Cooperator
-from twisted.trial.unittest import SkipTest
+from twisted.trial.unittest import SkipTest, TestCase
 from twisted.python.runtime import platform
 
 from twisted.internet.test.test_core import ObjectModelIntegrationMixin
@@ -36,8 +36,58 @@ try:
 except ImportError:
     FILETYPE_PEM = None
 else:
-    from twisted.internet.ssl import PrivateCertificate, KeyPair
-    from twisted.internet.ssl import ClientContextFactory
+    from twisted.internet.ssl import PrivateCertificate, KeyPair, Certificate
+    from twisted.internet.ssl import ClientContextFactory, multiTrust
+    from twisted.internet._sslverify import IOpenSSLTrustRoot
+
+
+class CertificateTests(TestCase):
+    import twisted
+    _pem = FilePath(
+        networkString(twisted.__file__)).sibling(b"test").child(b"server.pem")
+    del twisted
+    if FILETYPE_PEM is None:
+        skip = 'CertificateTests require OpenSSL'
+
+    def test_multiTrustPrivatePublic(self):
+        """
+        multiTrust accepts Certificate or PrivateCertificate
+        """
+        pem = self._pem.getContent()
+        cert0 = PrivateCertificate.loadPEM(pem)
+        cert1 = Certificate.loadPEM(pem)
+
+        mt = multiTrust([cert0, cert1])
+        self.assertTrue(IOpenSSLTrustRoot.providedBy(mt))
+
+    def test_multiTrustOpenSslObjects(self):
+        """
+        multiTrust works with 'real' OpenSSL objects
+        """
+        pem = self._pem.getContent()
+        cert0 = PrivateCertificate.loadPEM(pem).original
+        cert1 = Certificate.loadPEM(pem).original
+
+        mt = multiTrust([cert0, cert1])
+        self.assertTrue(IOpenSSLTrustRoot.providedBy(mt))
+
+    def test_multiTrustInvalidObject(self):
+        """
+        multiTrust rejects obviously-wrong instance
+        """
+        with self.assertRaises(AttributeError):
+            multiTrust(['sadness'])
+
+    def test_multiTrustInvalidOpenSslObject(self):
+        """
+        multiTrust rejects invalid OpenSSL object
+        """
+        # 'nearly' valid, but multiTrust must reject this because it's
+        # not a certificate.
+        cert0 = KeyPair.load(self._pem.getContent(), FILETYPE_PEM)
+
+        with self.assertRaises(AttributeError):
+            multiTrust([cert0])
 
 
 class TLSMixin:
diff --git twisted/topfiles/7671.feature twisted/topfiles/7671.feature
new file mode 100644
index 0000000..113eacf
--- /dev/null
+++ twisted/topfiles/7671.feature
@@ -0,0 +1 @@
+twisted.iternet.ssl.multiTrust provides an IOpenSSLTrustRoot with multiple certificates
\ No newline at end of file
