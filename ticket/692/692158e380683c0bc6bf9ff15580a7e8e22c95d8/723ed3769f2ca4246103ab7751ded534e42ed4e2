diff --git docs/core/examples/google-root.pem docs/core/examples/google-root.pem
new file mode 100644
index 0000000..3f79ee0
--- /dev/null
+++ docs/core/examples/google-root.pem
@@ -0,0 +1,24 @@
+-----BEGIN CERTIFICATE-----
+MIID8DCCAtigAwIBAgIDAjqDMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNVBAYTAlVT
+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i
+YWwgQ0EwHhcNMTMwNDA1MTUxNTU2WhcNMTYxMjMxMjM1OTU5WjBJMQswCQYDVQQG
+EwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzElMCMGA1UEAxMcR29vZ2xlIEludGVy
+bmV0IEF1dGhvcml0eSBHMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
+AJwqBHdc2FCROgajguDYUEi8iT/xGXAaiEZ+4I/F8YnOIe5a/mENtzJEiaB0C1NP
+VaTOgmKV7utZX8bhBYASxF6UP7xbSDj0U/ck5vuR6RXEz/RTDfRK/J9U3n2+oGtv
+h8DQUB8oMANA2ghzUWx//zo8pzcGjr1LEQTrfSTe5vn8MXH7lNVg8y5Kr0LSy+rE
+ahqyzFPdFUuLH8gZYR/Nnag+YyuENWllhMgZxUYi+FOVvuOAShDGKuy6lyARxzmZ
+EASg8GF6lSWMTlJ14rbtCMoU/M4iarNOz0YDl5cDfsCx3nuvRTPPuj5xt970JSXC
+DTWJnZ37DhF5iR43xa+OcmkCAwEAAaOB5zCB5DAfBgNVHSMEGDAWgBTAephojYn7
+qwVkDBF9qn1luMrMTjAdBgNVHQ4EFgQUSt0GFhu89mi1dvWBtrtiGrpagS8wDgYD
+VR0PAQH/BAQDAgEGMC4GCCsGAQUFBwEBBCIwIDAeBggrBgEFBQcwAYYSaHR0cDov
+L2cuc3ltY2QuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwNQYDVR0fBC4wLDAqoCig
+JoYkaHR0cDovL2cuc3ltY2IuY29tL2NybHMvZ3RnbG9iYWwuY3JsMBcGA1UdIAQQ
+MA4wDAYKKwYBBAHWeQIFATANBgkqhkiG9w0BAQsFAAOCAQEAqvqpIM1qZ4PtXtR+
+3h3Ef+AlBgDFJPupyC1tft6dgmUsgWM0Zj7pUsIItMsv91+ZOmqcUHqFBYx90SpI
+hNMJbHzCzTWf84LuUt5oX+QAihcglvcpjZpNy6jehsgNb1aHA30DP9z6eX0hGfnI
+Oi9RdozHQZJxjyXON/hKTAAj78Q1EK7gI4BzfE00LshukNYQHpmEcxpw8u1VDu4X
+Bupn7jLrLN1nBz/2i8Jw3lsA5rsb0zYaImxssDVCbJAJPZPpZAkiDoUGn8JzIdPm
+X4DkjYUiOnMDsWCOrmji9D6X52ASCWg23jrW4kOVWzeBkoEfu43XrVJkFleW2V40
+fsg12A==
+-----END CERTIFICATE-----
diff --git docs/core/examples/ssl_trustroot.py docs/core/examples/ssl_trustroot.py
new file mode 100644
index 0000000..3f910f2
--- /dev/null
+++ docs/core/examples/ssl_trustroot.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+from __future__ import print_function
+
+from twisted.internet import ssl, task, protocol, endpoints, defer
+from twisted.protocols.basic import LineReceiver
+from twisted.python.modules import getModule
+from twisted.python.util import sibpath
+
+# This is a simple example showing how to use
+# twisted.internet.ssl.trustRootFromCertificates() to make an object
+# for an explict list of trusted certificates that can be passed as
+# the trustRoot= argument to optionsForClientTLS(). In this case, the
+# list has just 1 entry. You will need to un-comment the line
+# "cert_file = 'google-root.pem'" to see a failure case.
+#
+# StartSSL is the actual issuer of twistedmatrix.com's certificate, so
+# using 'startssl-ca.pem' should work properly and using
+# 'google-root.pem' should fail. In this case, "work" means you should
+# see some "receive: " lines (probably a "302 Found" redirect) whereas
+# "fail" means you should see an error from connectionLost with a
+# message like 'certificate verify failed'
+#
+# Note that the failure mode for TLS in this case might seem a little
+# odd: you will get a successful connectionMade() call, but then
+# immediately receive a connectionLost() with an SSL.Error as the
+# reason.
+
+
+class SimpleProtocol(LineReceiver):
+    def __init__(self, *args, **kw):
+        self._closed = []
+
+    def when_closed(self):
+        d = defer.Deferred()
+        self._closed.append(d)
+        return d
+
+    def connectionMade(self):
+        print("Connection made, doing GET")
+        self.transport.write('GET / HTTP/1.1\r\n\r\n')
+
+    def lineReceived(self, line):
+        print("receive:", line)
+        if line.strip() == '':
+            self.transport.loseConnection()
+
+    def connectionLost(self, reason):
+        print("Connection lost:", reason.value)
+        for d in self._closed:
+            d.callback(None)
+        self._closed = []
+
+
+@defer.inlineCallbacks
+def main(reactor):
+    cert_file = sibpath(__file__, 'startssl-ca.pem')
+    # cert_file = sibpath(__file__, 'google-root.pem')  # uncomment this line to see a failure
+    with open(cert_file, 'r') as f:
+        root_cert = ssl.Certificate.loadPEM(f.read())
+
+    factory = protocol.Factory.forProtocol(SimpleProtocol)
+    options = ssl.optionsForClientTLS(
+        u'twistedmatrix.com',
+        trustRoot=ssl.trustRootFromCertificates([root_cert])
+    )
+    endpoint = endpoints.SSL4ClientEndpoint(
+        reactor, 'www.twistedmatrix.com', 443, options,
+    )
+    proto = yield endpoint.connect(factory)
+    yield proto.when_closed()
+
+if __name__ == '__main__':
+    task.react(main)
diff --git docs/core/examples/startssl-ca.pem docs/core/examples/startssl-ca.pem
new file mode 100644
index 0000000..960f265
--- /dev/null
+++ docs/core/examples/startssl-ca.pem
@@ -0,0 +1,44 @@
+-----BEGIN CERTIFICATE-----
+MIIHyTCCBbGgAwIBAgIBATANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJJTDEW
+MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg
+Q2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
+dGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM2WhcNMzYwOTE3MTk0NjM2WjB9
+MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi
+U2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh
+cnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA
+A4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk
+pMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf
+OQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C
+Ji/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT
+Kqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi
+HzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM
+Av+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w
++2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+
+Gkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3
+Zzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B
+26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID
+AQABo4ICUjCCAk4wDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAa4wHQYDVR0OBBYE
+FE4L7xqkQFulF2mHMMo0aEPQQa7yMGQGA1UdHwRdMFswLKAqoCiGJmh0dHA6Ly9j
+ZXJ0LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMCugKaAnhiVodHRwOi8vY3Js
+LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMIIBXQYDVR0gBIIBVDCCAVAwggFM
+BgsrBgEEAYG1NwEBATCCATswLwYIKwYBBQUHAgEWI2h0dHA6Ly9jZXJ0LnN0YXJ0
+Y29tLm9yZy9wb2xpY3kucGRmMDUGCCsGAQUFBwIBFilodHRwOi8vY2VydC5zdGFy
+dGNvbS5vcmcvaW50ZXJtZWRpYXRlLnBkZjCB0AYIKwYBBQUHAgIwgcMwJxYgU3Rh
+cnQgQ29tbWVyY2lhbCAoU3RhcnRDb20pIEx0ZC4wAwIBARqBl0xpbWl0ZWQgTGlh
+YmlsaXR5LCByZWFkIHRoZSBzZWN0aW9uICpMZWdhbCBMaW1pdGF0aW9ucyogb2Yg
+dGhlIFN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IFBvbGljeSBhdmFp
+bGFibGUgYXQgaHR0cDovL2NlcnQuc3RhcnRjb20ub3JnL3BvbGljeS5wZGYwEQYJ
+YIZIAYb4QgEBBAQDAgAHMDgGCWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNT
+TCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTANBgkqhkiG9w0BAQUFAAOCAgEAFmyZ
+9GYMNPXQhV59CuzaEE44HF7fpiUFS5Eyweg78T3dRAlbB0mKKctmArexmvclmAk8
+jhvh3TaHK0u7aNM5Zj2gJsfyOZEdUauCe37Vzlrk4gNXcGmXCPleWKYK34wGmkUW
+FjgKXlf2Ysd6AgXmvB618p70qSmD+LIU424oh0TDkBreOKk8rENNZEXO3SipXPJz
+ewT4F+irsfMuXGRuczE6Eri8sxHkfY+BUZo7jYn0TZNmezwD7dOaHZrzZVD1oNB1
+ny+v8OqCQ5j4aZyJecRDjkZy42Q2Eq/3JR44iZB3fsNrarnDy0RLrHiQi+fHLB5L
+EUTINFInzQpdn4XBidUaePKVEFMy3YCEZnXZtWgo+2EuvoSoOMCZEoalHmdkrQYu
+L6lwhceWD3yJZfWOQ1QOq92lgDmUYMA0yZZwLKMS9R9Ie70cfmu3nZD0Ijuu+Pwq
+yvqCUqDvr0tVk+vBtfAii6w0TiYiBKGHLHVKt+V9E9e4DGTANtLJL4YSjCMJwRuC
+O3NJo2pXh5Tl1njFmUNj403gdy3hZZlyaQQaRwnmDwFWJPsfvw55qVguucQJAX6V
+um0ABj6y6koQOdjQK/W/7HW/lwLFCRsI3FU34oH7N4RDYiDK51ZLZer+bMEkkySh
+NOsF/5oirpt9P/FlUQqmMGqz9IgcgA38corog14=
+-----END CERTIFICATE-----
diff --git docs/core/howto/ssl.rst docs/core/howto/ssl.rst
index ab0056c..83a2f53 100644
--- docs/core/howto/ssl.rst
+++ docs/core/howto/ssl.rst
@@ -52,6 +52,8 @@ For clients, we can use :api:`twisted.internet.ssl.optionsForClientTLS`.
 This takes two arguments, ``hostname`` (which indicates what hostname must be advertised in the server's certificate) and optionally ``trustRoot``.
 By default, :api:`twisted.internet.ssl.optionsForClientTLS <optionsForClientTLS>` tries to obtain the trust roots from your platform, but you can specify your own.
 
+You may obtain an object suitable to pass as the ``trustRoot=`` paramater with an explicit list of :api:`twisted.internet.ssl.Certificate` or :api:`twisted.internet.ssl.PrivateCertificate` instances by calling :api:`twisted.internet.ssl.trustRootFromCertificates`. See the example :download:`ssl_trustroot.py <../examples/ssl_trustroot.py>`
+
 .. note::
 
    Currently, Twisted only supports loading of OpenSSL's default trust roots.
diff --git twisted/internet/_sslverify.py twisted/internet/_sslverify.py
index da0c772..5639bce 100644
--- twisted/internet/_sslverify.py
+++ twisted/internet/_sslverify.py
@@ -1011,6 +1011,30 @@ class OpenSSLCertificateAuthorities(object):
             store.add_cert(cert)
 
 
+def trustRootFromCertificates(certificates):
+    """
+    From a list of L{Certificate}, L{PrivateCertificate}, or
+    L{OpenSSL.crypto.X509} instances this returns an object which
+    implements C{IOpenSSLTrustRoot} and is hence suitable for use as
+    the trustRoot= keyword argument to optionsForClientTLS
+
+    @param certificates: All certificates which will be trusted.
+    @type certificates: C{sequence} of L{CertBase} or L{OpenSSL.crypto.X509}
+    """
+
+    certs = []
+    for cert in certificates:
+        # PrivateCertificate or Certificate are both okay
+        if isinstance(cert, CertBase):
+            cert = cert.original
+        if not isinstance(cert, OpenSSL.crypto.X509):
+            raise TypeError(
+                "certificates items must be twisted.iternet.ssl.Certificate"
+                " or OpenSSL.crypto.X509 instances"
+            )
+        certs.append(cert)
+    return OpenSSLCertificateAuthorities(certs)
+
 
 @implementer(IOpenSSLTrustRoot)
 class OpenSSLDefaultPaths(object):
diff --git twisted/internet/ssl.py twisted/internet/ssl.py
index eb560aa..275b14e 100644
--- twisted/internet/ssl.py
+++ twisted/internet/ssl.py
@@ -229,6 +229,7 @@ from twisted.internet._sslverify import (
     platformTrust, OpenSSLDefaultPaths, VerificationError,
     optionsForClientTLS, ProtocolNegotiationSupport,
     protocolNegotiationMechanisms,
+    trustRootFromCertificates,
 )
 
 __all__ = [
@@ -242,4 +243,5 @@ __all__ = [
 
     'VerificationError', 'optionsForClientTLS',
     'ProtocolNegotiationSupport', 'protocolNegotiationMechanisms',
+    'trustRootFromCertificates',
 ]
diff --git twisted/test/test_sslverify.py twisted/test/test_sslverify.py
index 0fed93d..8fb1326 100644
--- twisted/test/test_sslverify.py
+++ twisted/test/test_sslverify.py
@@ -54,6 +54,7 @@ from twisted.internet.error import ConnectionClosed
 from twisted.python.compat import nativeString, _PY3
 from twisted.python.constants import NamedConstant, Names
 from twisted.python.filepath import FilePath
+from twisted.python.util import sibpath
 
 from twisted.trial import unittest, util
 from twisted.internet import protocol, defer, reactor
@@ -66,6 +67,9 @@ if not skipSSL:
     from twisted.internet.ssl import platformTrust, VerificationError
     from twisted.internet import _sslverify as sslverify
     from twisted.protocols.tls import TLSMemoryBIOFactory
+    from twisted.internet.ssl import PrivateCertificate, KeyPair, Certificate
+    from twisted.internet.ssl import trustRootFromCertificates
+
 
 # A couple of static PEM-format certificates to be used by various tests.
 A_HOST_CERTIFICATE_PEM = """
@@ -110,6 +114,9 @@ A_PEER_CERTIFICATE_PEM = """
 -----END CERTIFICATE-----
 """
 
+with open(sibpath(__file__, 'server.pem'), 'r') as f:
+    A_HOST_KEYPAIR = f.read()
+
 
 
 class DummyOpenSSL(object):
@@ -2155,6 +2162,119 @@ class ConstructorsTests(unittest.TestCase):
             12346)
 
 
+class MultipleCertificateTrustRootTests(unittest.TestCase):
+    """
+    Test the behavior of the trustRootFromCertificates() API call.
+    """
+
+    if skipSSL:
+        skip = 'CertificateTests require OpenSSL'
+
+    def test_trustRootFromCertificatesPrivatePublic(self):
+        """
+        trustRootFromCertificates must accept either Certificate or
+        PrivateCertificate and accept a connection with valid
+        certificates.
+        """
+        cert0 = PrivateCertificate.loadPEM(A_HOST_KEYPAIR)
+        cert1 = Certificate.loadPEM(A_HOST_CERTIFICATE_PEM)
+
+        mt = trustRootFromCertificates([cert0, cert1])
+
+        # verify that the returned object acts correctly when used as
+        # a trustRoot= param to optionsForClientTLS
+        sProto, cProto, pump = loopbackTLSConnectionInMemory(
+            trustRoot=mt,
+            privateKey=cert0.privateKey.original,
+            serverCertificate=cert0.original,
+        )
+
+        # this connection should succeed
+        self.assertEqual(cProto.wrappedProtocol.data, b'greetings!')
+        self.assertEqual(cProto.wrappedProtocol.lostReason, None)
+
+    def test_trustRootFromCertificatesPrivatePublicUntrusted(self):
+        """
+        trustRootFromCertificates should return a trust-root that rejects
+        connections using unknown certificates.
+        """
+        cert0 = PrivateCertificate.loadPEM(A_HOST_KEYPAIR)
+        cert1 = Certificate.loadPEM(A_HOST_CERTIFICATE_PEM)
+
+        # this test is the same as the above, except we do NOT include
+        # the server's cert ('cert0') in the list of trusted
+        # certificates.
+        mt = trustRootFromCertificates([cert1])
+
+        # verify that the returned object acts correctly when used as
+        # a trustRoot= param to optionsForClientTLS
+        sProto, cProto, pump = loopbackTLSConnectionInMemory(
+            trustRoot=mt,
+            privateKey=cert0.privateKey.original,
+            serverCertificate=cert0.original,
+        )
+
+        # this connection should fail, so no data was received.
+        self.assertEqual(cProto.wrappedProtocol.data, b'')
+
+        # It was an L{SSL.Error}.
+        self.assertEqual(cProto.wrappedProtocol.lostReason.type, SSL.Error)
+
+        # Some combination of OpenSSL and PyOpenSSL is bad at reporting errors.
+        err = cProto.wrappedProtocol.lostReason.value
+        self.assertEqual(err.args[0][0][2], 'tlsv1 alert unknown ca')
+
+    def test_trustRootFromCertificatesOpenSslObjects(self):
+        """
+        trustRootFromCertificates works with 'real' OpenSSL objects.
+        """
+        private = PrivateCertificate.loadPEM(A_HOST_KEYPAIR)
+        cert0 = private.original
+        key0 = private.privateKey.original
+        cert1 = Certificate.loadPEM(A_HOST_CERTIFICATE_PEM).original
+
+        mt = trustRootFromCertificates([cert0, cert1])
+
+        sProto, cProto, pump = loopbackTLSConnectionInMemory(
+            trustRoot=mt,
+            privateKey=key0,
+            serverCertificate=cert0,
+        )
+        # this connection should succeed
+        self.assertEqual(cProto.wrappedProtocol.data, b'greetings!')
+        self.assertEqual(cProto.wrappedProtocol.lostReason, None)
+
+    def test_trustRootFromCertificatesInvalidObject(self):
+        """
+        trustRootFromCertificates rejects 'str' instances passed in place
+        of Certificate.
+        """
+        exception = self.assertRaises(
+            TypeError,
+            trustRootFromCertificates, ['I am only a string'],
+        )
+        self.assertEqual(
+            "certificates items must be twisted.iternet.ssl.Certificate"
+            " or OpenSSL.crypto.X509 instances",
+            exception.args[0],
+        )
+
+    def test_trustRootFromCertificatesInvalidOpenSslObject(self):
+        """
+        trustRootFromCertificates rejects an OpenSSL object that isn't
+        X509 instance.
+        """
+        cert0 = KeyPair.load(A_HOST_KEYPAIR, FILETYPE_PEM)
+        exception = self.assertRaises(
+            TypeError,
+            trustRootFromCertificates, [cert0],
+        )
+        self.assertEqual(
+            "certificates items must be twisted.iternet.ssl.Certificate"
+            " or OpenSSL.crypto.X509 instances",
+            exception.args[0]
+        )
+
 
 class OpenSSLCipherTests(unittest.TestCase):
     """
diff --git twisted/topfiles/7671.feature twisted/topfiles/7671.feature
new file mode 100644
index 0000000..882ddcd
--- /dev/null
+++ twisted/topfiles/7671.feature
@@ -0,0 +1 @@
+twisted.iternet.ssl.trustRootFromCertificates returns an object suitable for use as trustRoot= to twisted.internet.ssl.optionsForClientTLS that trusts multiple certificates.
\ No newline at end of file
