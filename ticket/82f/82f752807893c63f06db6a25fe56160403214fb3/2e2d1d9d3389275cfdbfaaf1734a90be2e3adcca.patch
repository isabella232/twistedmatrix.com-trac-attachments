Index: twisted/python/test/test_deprecate.py
===================================================================
--- twisted/python/test/test_deprecate.py	(revision 30863)
+++ twisted/python/test/test_deprecate.py	(working copy)
@@ -516,3 +516,88 @@
         warnings = self.flushWarnings([self.test_deprecatedModule])
         self.assertEquals(len(warnings), 1)
 
+
+class TestDeprecateFunction(TestCase):
+    """
+    Tests for L{twisted.python.deprecate.deprecateFunction} which
+    allows the callers of a function to issue a C{DeprecationWarning}.
+    """
+    def setUp(self):
+        """
+        Create a file that will have known line numbers when emitting warnings.
+        """
+        self.package = FilePath(self.mktemp()).child('twisted_private_helper')
+        self.package.makedirs()
+        self.package.child('__init__.py').setContent('')
+        self.package.child('module.py').setContent('''
+"A module string"
+
+from twisted.python import deprecate
+
+def testFunction():
+    "A doc string"
+    a = 1 + 2
+    return a
+
+def callTestFunction():
+    b = testFunction()
+    if b == 3:
+        deprecate.deprecateFunction(testFunction, "A Warning String")
+''')
+        sys.path.insert(0, self.package.parent().path)
+        self.addCleanup(sys.path.remove, self.package.parent().path)
+
+
+    def test_warning(self):
+        def aFunc():
+            pass
+        deprecate.deprecateFunction(aFunc, 'A Warning Message')
+        warnings = self.flushWarnings()
+        filename = __file__
+        if filename.lower().endswith('.pyc'):
+            filename = filename[:-1]
+        self.assertEquals(warnings[0]["filename"], filename)
+        self.assertEquals(warnings[0]["message"], "A Warning Message")
+
+    def test_warning_lineno(self):
+        """
+        L{twisted.python.deprecate.deprecateFunction} should emit a
+        C{DeprecationWarning} with a lineno of 9 rather than a lineno
+        of 12.
+        """
+        from twisted_private_helper import module
+        module.callTestFunction()
+        warnings = self.flushWarnings()
+        self.assertEquals(warnings[0]["filename"], self.package.dirname()+'/twisted_private_helper/module.py')
+        self.assertEquals(warnings[0]["lineno"], 9)
+        self.assertEquals(warnings[0]["message"], "A Warning String")
+        self.assertEquals(len(warnings), 1)
+
+
+    def test_renamedFile(self):
+        """
+        L{twisted.python.deprecate.deprecateFunction} should emit a
+        C{DeprecationWarning} with a lineno of 9 rather than a lineno
+        of 12.
+        """
+        from twisted_private_helper import module
+        # Clean up the state resulting from that import; we're not going to use
+        # this module, so it should go away.
+        del sys.modules['twisted_private_helper']
+        del sys.modules[module.__name__]
+
+        # Rename the source directory
+        self.package.moveTo(self.package.sibling('twisted_renamed_helper'))
+
+        # Import the newly renamed version
+        from twisted_renamed_helper import module
+        self.addCleanup(sys.modules.pop, 'twisted_renamed_helper')
+        self.addCleanup(sys.modules.pop, module.__name__)
+
+        module.callTestFunction()
+        warnings = self.flushWarnings()
+        self.assertEquals(warnings[0]["filename"], self.package.dirname()+'/twisted_renamed_helper/module.py')
+        self.assertEquals(warnings[0]["lineno"], 9)
+        self.assertEquals(warnings[0]["message"], "A Warning String")
+        self.assertEquals(len(warnings), 1)
+
Index: twisted/python/deprecate.py
===================================================================
--- twisted/python/deprecate.py	(revision 30863)
+++ twisted/python/deprecate.py	(working copy)
@@ -55,7 +55,8 @@
 
 
 import sys, inspect
-from warnings import warn
+from warnings import warn, warn_explicit
+from dis import findlinestarts
 
 from twisted.python.versions import getVersionString
 from twisted.python.util import mergeFunctionMetadata
@@ -448,3 +449,38 @@
         sys.modules[moduleName] = module
 
     _deprecateAttribute(module, name, version, message)
+
+
+def deprecateFunction(offender, warningString):
+    """
+    Declare a Function Deprecated.
+
+    This function is used by the caller of a function to deprecate a
+    function at runtime depending on the return value. The warning
+    that is issued refers to the function being deprecated rather than
+    the function doing the deprecating.
+
+    @type function: C{object}
+    @param function: The callable that is being deprecated.
+
+    @type warningString: C{str}
+    @param warningString: The string that should be emitted by this warning
+    """
+    # inspect.getmodule() is attractive, but somewhat
+    # broken in Python < 2.6.  See Python bug 4845.
+
+    offenderModule = sys.modules[offender.__module__]
+    filename = inspect.getabsfile(offenderModule)
+    lineStarts = list(findlinestarts(offender.func_code))
+    lastLineNo = lineStarts[-1][1]
+
+    kwargs = dict(category=DeprecationWarning,
+        filename=filename,
+        lineno=lastLineNo,
+        module=offenderModule.__name__,
+        registry=getattr(offenderModule, "__warningregistry__", {}),
+        module_globals=offenderModule.__dict__)
+
+    if sys.version < (2,5):
+        kwargs.pop('module_globals')
+    warn_explicit(warningString, **kwargs)
Index: twisted/internet/tcp.py
===================================================================
--- twisted/internet/tcp.py	(revision 30863)
+++ twisted/internet/tcp.py	(working copy)
@@ -13,7 +13,6 @@
 
 # System Imports
 import os
-import inspect
 import types
 import socket
 import sys
@@ -462,21 +461,13 @@
         rval = self.protocol.dataReceived(data)
         if rval is not None:
             offender = self.protocol.dataReceived
-            module = inspect.getmodule(offender)
             warningFormat = (
-                'Returning a value other than None from dataReceived is '
+                'Returning a value other than None from %(fqpn)s is '
                 'deprecated since %(version)s.')
             warningString = deprecate.getDeprecationWarningString(
                 offender, versions.Version('Twisted', 11, 0, 0),
                 format=warningFormat)
-            warnings.warn_explicit(
-                warningString, category=DeprecationWarning,
-                filename=inspect.getsourcefile(offender),
-                lineno=149,
-                module=module.__name__,
-                registry=getattr(module, "__warningregistry__", {}),
-                module_globals=module.__dict__)
-
+            deprecate.deprecateFunction(offender, warningString)
         return rval
 
 
Index: twisted/trial/unittest.py
===================================================================
--- twisted/trial/unittest.py	(revision 30863)
+++ twisted/trial/unittest.py	(working copy)
@@ -930,7 +930,7 @@
                     # better (or at least agrees with the warning system
                     # more often), and does some normalization for us which
                     # is desirable.  inspect.getmodule() is attractive, but
-                    # somewhat broken in Python 2.3.  See Python bug 4845.
+                    # somewhat broken in Python < 2.6.  See Python bug 4845.
                     aModule = sys.modules[aFunction.__module__]
                     filename = inspect.getabsfile(aModule)
 
