diff --git twisted/python/_shellcomp.py twisted/python/_shellcomp.py
index b776802..6ec9ccb 100644
--- twisted/python/_shellcomp.py
+++ twisted/python/_shellcomp.py
@@ -291,7 +291,6 @@ class ZshArgumentsGenerator(object):
                     self.extraActions = data.extraActions
 
         aCL = reflect.accumulateClassList
-        aCD = reflect.accumulateClassDict
 
         optFlags = []
         optParams = []
@@ -379,9 +378,6 @@ class ZshArgumentsGenerator(object):
             is not the last item in the C{extraActions} list.
         """
         for i, action in enumerate(self.extraActions):
-            descr = ""
-            if action._descr:
-                descr = action._descr
             # a repeatable action must be the last action in the list
             if action._repeat and i != len(self.extraActions) - 1:
                 raise ValueError("Completer with repeat=True must be "
diff --git twisted/python/hook.py twisted/python/hook.py
index b1e0537..c829f73 100644
--- twisted/python/hook.py
+++ twisted/python/hook.py
@@ -131,7 +131,7 @@ def _removeHook(klass, name, phase, func):
     if not hasattr(klass, ORIG(klass,name)):
         raise HookError("no hooks present!")
 
-    phaselist = getattr(klass, phase(klass, name))
+    phaselist = getattr(klass, phaselistname)
     try: phaselist.remove(func)
     except ValueError:
         raise HookError("hook %s not found in removal list for %s"%
diff --git twisted/python/log.py twisted/python/log.py
index 23496fa..fcff0ec 100644
--- twisted/python/log.py
+++ twisted/python/log.py
@@ -174,6 +174,7 @@ class LogPublisher:
         Unicode on Python 3. For compatibility with both use the native string
         syntax, for example::
 
+        >>> from twisted.python import log
         >>> log.msg('Hello, world.')
 
         You MUST avoid passing in Unicode on Python 2, and the form::
@@ -440,6 +441,7 @@ class PythonLoggingObserver(object):
         By default the logging level used is info; log.err produces error
         level, and you can customize the level by using the C{logLevel} key::
 
+        >>> from twisted.python import log
         >>> log.msg('debugging', logLevel=logging.DEBUG)
 
         """
diff --git twisted/python/shortcut.py twisted/python/shortcut.py
index b60f858..598ae0b 100644
--- twisted/python/shortcut.py
+++ twisted/python/shortcut.py
@@ -25,6 +25,12 @@ def open(filename):
 
 class Shortcut:
     """A shortcut on Win32.
+    >>> path = 'c:\\some\\path'
+    >>> arguments = ['-a']
+    >>> description = 'Some description'
+    >>> workingdir = 'c:\\temp'
+    >>> iconpath = 'c:\\some.icon'
+    >>> iconidx = 0
     >>> sc=Shortcut(path, arguments, description, workingdir, iconpath, iconidx)
     @param path: Location of the target
     @param arguments: If path points to an executable, optional arguments to
diff --git twisted/python/test/test_components.py twisted/python/test/test_components.py
index cc6905d..deeab18 100644
--- twisted/python/test/test_components.py
+++ twisted/python/test/test_components.py
@@ -143,7 +143,6 @@ class ComponentizedTestCase(unittest.SynchronousTestCase, RegistryUsingMixin):
     def testMultiAdapter(self):
         c = CComp()
         co1 = c.getComponent(ITest)
-        co2 = c.getComponent(ITest2)
         co3 = c.getComponent(ITest3)
         co4 = c.getComponent(ITest4)
         self.assertIdentical(None, co4)
diff --git twisted/python/test/test_hashlib.py twisted/python/test/test_hashlib.py
index dc95d49..3049cb4 100644
--- twisted/python/test/test_hashlib.py
+++ twisted/python/test/test_hashlib.py
@@ -4,6 +4,7 @@
 """
 Tests for L{twisted.python.hashlib}
 """
+from twisted.python.reflect import namedModule
 from twisted.trial.unittest import TestCase
 from twisted.trial import util
 
@@ -17,7 +18,7 @@ class HashObjectTests(TestCase):
         """
         Ensure the deprecation of L{twisted.python.hashlib} is working.
         """
-        from twisted.python import hashlib
+        namedModule('twisted.python.hashlib')
         warnings = self.flushWarnings(
                 offendingFunctions=[self.test_deprecation])
         self.assertIdentical(warnings[0]['category'], DeprecationWarning)
diff --git twisted/python/test/test_runtime.py twisted/python/test/test_runtime.py
index ebacac6..70fc127 100644
--- twisted/python/test/test_runtime.py
+++ twisted/python/test/test_runtime.py
@@ -9,6 +9,7 @@ from __future__ import division, absolute_import
 
 import sys
 
+from twisted.python.reflect import namedModule
 from twisted.trial.util import suppress as SUPRESS
 from twisted.trial.unittest import SynchronousTestCase
 
@@ -100,7 +101,7 @@ class PlatformTests(SynchronousTestCase):
         L{Platform.isWinNT} is deprecated in favor of L{platform.isWindows}.
         """
         platform = Platform()
-        result = platform.isWinNT()
+        platform.isWinNT()
         warnings = self.flushWarnings([self.test_isWinNTDeprecated])
         self.assertEqual(len(warnings), 1)
         self.assertEqual(
@@ -116,7 +117,7 @@ class PlatformTests(SynchronousTestCase):
         # module.  Perhaps an adequate test is to just test the behavior with
         # the current runtime, whatever that happens to be.
         try:
-            import threading
+            namedModule('threading')
         except ImportError:
             self.assertFalse(Platform().supportsThreads())
         else:
diff --git twisted/python/test/test_util.py twisted/python/test/test_util.py
index f86c497..08df7cc 100644
--- twisted/python/test/test_util.py
+++ twisted/python/test/test_util.py
@@ -199,11 +199,12 @@ class SwitchUIDTest(unittest.TestCase):
         util.switchUID(uid, None)
         self.assertEqual(self.initgroupsCalls, [])
         self.assertEqual(self.mockos.actions, [])
-        warnings = self.flushWarnings([util.switchUID])
-        self.assertEqual(len(warnings), 1)
-        self.assertIn('tried to drop privileges and setuid %i' % uid, 
-                      warnings[0]['message'])
-        self.assertIn('but uid is already %i' % uid, warnings[0]['message'])
+        currentWarnings = self.flushWarnings([util.switchUID])
+        self.assertEqual(len(currentWarnings), 1)
+        self.assertIn('tried to drop privileges and setuid %i' % uid,
+                      currentWarnings[0]['message'])
+        self.assertIn(
+            'but uid is already %i' % uid, currentWarnings[0]['message'])
 
 
     def test_currentEUID(self):
@@ -215,11 +216,12 @@ class SwitchUIDTest(unittest.TestCase):
         util.switchUID(euid, None, True)
         self.assertEqual(self.initgroupsCalls, [])
         self.assertEqual(self.mockos.seteuidCalls, [])
-        warnings = self.flushWarnings([util.switchUID])
-        self.assertEqual(len(warnings), 1)
-        self.assertIn('tried to drop privileges and seteuid %i' % euid, 
-                      warnings[0]['message'])
-        self.assertIn('but euid is already %i' % euid, warnings[0]['message'])
+        currentWarnings = self.flushWarnings([util.switchUID])
+        self.assertEqual(len(currentWarnings), 1)
+        self.assertIn('tried to drop privileges and seteuid %i' % euid,
+                      currentWarnings[0]['message'])
+        self.assertIn(
+            'but euid is already %i' % euid, currentWarnings[0]['message'])
 
 
 
@@ -365,8 +367,6 @@ class InsensitiveDictTest(unittest.TestCase):
         self.assertEqual(dct['foo'], dct.get('Foo'))
         self.assertIn(1, dct)
         self.assertIn('foo', dct)
-        # Make eval() work, urrrrgh:
-        InsensitiveDict = util.InsensitiveDict
         self.assertEqual(eval(repr(dct)), dct)
         keys=['Foo', 'fnz', 1]
         for x in keys:
@@ -928,14 +928,14 @@ class DeprecationTests(unittest.TestCase):
         L{util.getPluginDirs} is deprecated.
         """
         util.getPluginDirs()
-        warnings = self.flushWarnings(offendingFunctions=[
+        currentWarnings = self.flushWarnings(offendingFunctions=[
             self.test_getPluginDirs])
         self.assertEqual(
-            warnings[0]['message'],
+            currentWarnings[0]['message'],
             "twisted.python.util.getPluginDirs is deprecated since Twisted "
             "12.2.")
-        self.assertEqual(warnings[0]['category'], DeprecationWarning)
-        self.assertEqual(len(warnings), 1)
+        self.assertEqual(currentWarnings[0]['category'], DeprecationWarning)
+        self.assertEqual(len(currentWarnings), 1)
 
 
     def test_addPluginDir(self):
@@ -943,13 +943,13 @@ class DeprecationTests(unittest.TestCase):
         L{util.addPluginDir} is deprecated.
         """
         util.addPluginDir()
-        warnings = self.flushWarnings(offendingFunctions=[
+        currentWarnings = self.flushWarnings(offendingFunctions=[
             self.test_addPluginDir])
         self.assertEqual(
-            warnings[0]['message'],
+            currentWarnings[0]['message'],
             "twisted.python.util.addPluginDir is deprecated since Twisted "
             "12.2.")
-        self.assertEqual(warnings[0]['category'], DeprecationWarning)
+        self.assertEqual(currentWarnings[0]['category'], DeprecationWarning)
         self.assertEqual(len(warnings), 1)
     test_addPluginDir.suppress = [
             SUPPRESS(category=DeprecationWarning,
diff --git twisted/python/threadpool.py twisted/python/threadpool.py
index b0a7baf..ec3cbfd 100644
--- twisted/python/threadpool.py
+++ twisted/python/threadpool.py
@@ -215,7 +215,7 @@ class ThreadPool:
 
             with self._workerState(self.waiters, ct):
                 o = self.q.get()
-
+                o  # Fake usage to fool pyflakes.
         self.threads.remove(ct)
 
 
