Index: twisted/internet/posixbase.py
===================================================================
--- twisted/internet/posixbase.py	(revision 32713)
+++ twisted/internet/posixbase.py	(working copy)
@@ -319,7 +319,7 @@
 
     def spawnProcess(self, processProtocol, executable, args=(),
                      env={}, path=None,
-                     uid=None, gid=None, usePTY=0, childFDs=None):
+                     uid=None, gid=None, usePTY=0, childFDs=None, preexec_fn=None):
         args, env = self._checkProcessArgs(args, env)
         if platformType == 'posix':
             if usePTY:
@@ -329,7 +329,7 @@
                                           processProtocol, uid, gid, usePTY)
             else:
                 return process.Process(self, executable, args, env, path,
-                                       processProtocol, uid, gid, childFDs)
+                                       processProtocol, uid, gid, childFDs, preexec_fn)
         elif platformType == "win32":
             if uid is not None or gid is not None:
                 raise ValueError("The uid and gid parameters are not supported on Windows.")
Index: twisted/internet/process.py
===================================================================
--- twisted/internet/process.py	(revision 32713)
+++ twisted/internet/process.py	(working copy)
@@ -409,6 +409,8 @@
                 try:
                     # Stop debugging. If I am, I don't care anymore.
                     sys.settrace(None)
+                    if hasattr(self, 'preexec_fn'):
+                        args, environment, kwargs = self.preexec_fn(args=args, environment=environment, **kwargs)
                     self._setupChild(**kwargs)
                     self._execChild(path, settingUID, uid, gid,
                                     executable, args, environment)
@@ -615,7 +617,7 @@
 
     def __init__(self,
                  reactor, executable, args, environment, path, proto,
-                 uid=None, gid=None, childFDs=None):
+                 uid=None, gid=None, childFDs=None, preexec_fn=None, **kwargs):
         """
         Spawn an operating-system process.
 
@@ -633,6 +635,9 @@
             assert 'w' not in childFDs.values()
         _BaseProcess.__init__(self, proto)
 
+        if callable(preexec_fn):
+            self.preexec_fn = preexec_fn
+
         self.pipes = {}
         # keys are childFDs, we can sense them closing
         # values are ProcessReader/ProcessWriters
