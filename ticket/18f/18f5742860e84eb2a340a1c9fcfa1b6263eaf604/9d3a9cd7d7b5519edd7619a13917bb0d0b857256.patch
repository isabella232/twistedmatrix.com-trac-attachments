Index: twisted/test/test_logfile.py
===================================================================
--- twisted/test/test_logfile.py	(revision 42035)
+++ twisted/test/test_logfile.py	(working copy)
@@ -250,10 +250,10 @@
 
     def test_nonExistentDir(self):
         """
-        Specifying an invalid directory to L{LogFile} raises C{IOError}.
+        Specifying an invalid directory to L{LogFile} raises C{OSError}.
         """
         e = self.assertRaises(
-            IOError, logfile.LogFile, self.name, 'this_dir_does_not_exist')
+            OSError, logfile.LogFile, self.name, 'this_dir_does_not_exist')
         self.assertEqual(e.errno, errno.ENOENT)
 
 
Index: twisted/python/logfile.py
===================================================================
--- twisted/python/logfile.py	(revision 42035)
+++ twisted/python/logfile.py	(working copy)
@@ -59,26 +59,20 @@
         """
         Open the log file.
         """
+        openMode = self.defaultMode or 0777
+        self._file = self._file = os.fdopen(os.open(
+            self.path, os.O_CREAT|os.O_RDWR, openMode), 'r+', 1)
         self.closed = False
-        if os.path.exists(self.path):
-            self._file = file(self.path, "r+", 1)
-            self._file.seek(0, 2)
-        else:
-            if self.defaultMode is not None:
-                # Set the lowest permissions
-                oldUmask = os.umask(0777)
-                try:
-                    self._file = file(self.path, "w+", 1)
-                finally:
-                    os.umask(oldUmask)
-            else:
-                self._file = file(self.path, "w+", 1)
-        if self.defaultMode is not None:
+        # Try our best to update permissions for files which already exist.
+        if self.defaultMode:
             try:
                 os.chmod(self.path, self.defaultMode)
             except OSError:
-                # Probably /dev/null or something?
                 pass
+        # Seek is needed for uniformity of stream positioning
+        # for read and write between Linux and BSD systems due
+        # to differences in fopen() between operating systems.
+        self._file.seek(0, os.SEEK_END)
 
     def __getstate__(self):
         state = self.__dict__.copy()
Index: twisted/topfiles/7026.bugfix
===================================================================
--- twisted/topfiles/7026.bugfix	(revision 0)
+++ twisted/topfiles/7026.bugfix	(revision 0)
@@ -0,0 +1 @@
+twisted.python.log no longer changes system umask when handling files.
