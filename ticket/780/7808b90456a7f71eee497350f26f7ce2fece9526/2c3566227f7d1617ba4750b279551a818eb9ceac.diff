Index: twisted/internet/test/test_process.py
===================================================================
--- twisted/internet/test/test_process.py	(revision 26580)
+++ twisted/internet/test/test_process.py	(working copy)
@@ -20,6 +20,13 @@
 from twisted.internet.error import ProcessDone, PotentialZombieWarning
 from twisted.internet.error import ProcessTerminated
 
+skipWindowsNopywin32 = None
+if platform.isWindows():
+    try:
+        import win32process
+    except ImportError:
+        skipWindowsNopywin32 = ("On windows, spawnProcess is not available "
+                                "in the absence of win32process.")
 
 class _ShutdownCallbackProcessProtocol(ProcessProtocol):
     """
@@ -340,6 +347,7 @@
         self.runReactor(reactor)
 
 
+ProcessTestsBuilder.skip = skipWindowsNopywin32
 globals().update(ProcessTestsBuilder.makeTestCaseClasses())
 
 
Index: twisted/python/lockfile.py
===================================================================
--- twisted/python/lockfile.py	(revision 26580)
+++ twisted/python/lockfile.py	(working copy)
@@ -25,26 +25,30 @@
     _windows = False
 except:
     _windows = True
-    from win32api import OpenProcess
-    import pywintypes
 
-    ERROR_ACCESS_DENIED = 5
-    ERROR_INVALID_PARAMETER = 87
+    try:
+        from win32api import OpenProcess
+        import pywintypes
+    except ImportError:
+        kill = None
+    else:
+        ERROR_ACCESS_DENIED = 5
+        ERROR_INVALID_PARAMETER = 87
 
+        def kill(pid, signal):
+            try:
+                OpenProcess(0, 0, pid)
+            except pywintypes.error, e:
+                if e.args[0] == ERROR_ACCESS_DENIED:
+                    return
+                elif e.args[0] == ERROR_INVALID_PARAMETER:
+                    raise OSError(errno.ESRCH, None)
+                raise
+            else:
+                raise RuntimeError("OpenProcess is required to fail.")
+
     _open = file
 
-    def kill(pid, signal):
-        try:
-            OpenProcess(0, 0, pid)
-        except pywintypes.error, e:
-            if e.args[0] == ERROR_ACCESS_DENIED:
-                return
-            elif e.args[0] == ERROR_INVALID_PARAMETER:
-                raise OSError(errno.ESRCH, None)
-            raise
-        else:
-            raise RuntimeError("OpenProcess is required to fail.")
-
     # XXX Implement an atomic thingamajig for win32
     def symlink(value, filename):
         newlinkname = filename+"."+unique()+'.newlink'
@@ -144,7 +148,8 @@
                             return False
                         raise
                     try:
-                        kill(int(pid), 0)
+                        if kill is not None:
+                            kill(int(pid), 0)
                     except OSError, e:
                         if e.errno == errno.ESRCH:
                             # The owner has vanished, try to claim it in the next
Index: twisted/test/test_application.py
===================================================================
--- twisted/test/test_application.py	(revision 26580)
+++ twisted/test/test_application.py	(working copy)
@@ -14,6 +14,7 @@
 from twisted.persisted import sob
 from twisted.python import usage
 from twisted.python.util import sibpath
+from twisted.python.runtime import platform
 from twisted.internet import interfaces, defer
 from twisted.protocols import wire, basic
 from twisted.internet import protocol, reactor
@@ -23,6 +24,14 @@
 oldAppSuppressions = [util.suppress(message='twisted.internet.app is deprecated',
                                     category=DeprecationWarning)]
 
+skipWindowsNopywin32 = None
+if platform.isWindows():
+    try:
+        import win32process
+    except ImportError:
+        skipWindowsNopywin32 = ("On windows, spawnProcess is not available "
+                                "in the absence of win32process.")
+
 class Dummy:
     processName=None
 
@@ -869,6 +878,7 @@
             env=None)
         result.addCallback(_checkOutput)
         return result
+    test_qtStub.skip = skipWindowsNopywin32
 
 
 
Index: twisted/test/test_lockfile.py
===================================================================
--- twisted/test/test_lockfile.py	(revision 26580)
+++ twisted/test/test_lockfile.py	(working copy)
@@ -12,6 +12,15 @@
 from twisted.python import lockfile
 from twisted.python.runtime import platform
 
+skipKill = None
+if platform.isWindows():
+    try:
+        from win32api import OpenProcess
+        import pywintypes
+    except ImportError:
+        skipKill = ("On windows, lockfile.kill is not implemented in the "
+                    "absence of win32api and/or pywintypes.")
+
 class UtilTests(unittest.TestCase):
     """
     Tests for the helper functions used to implement L{FilesystemLock}.
@@ -85,6 +94,7 @@
         process which exists and signal C{0}.
         """
         lockfile.kill(os.getpid(), 0)
+    test_kill.skip = skipKill
 
 
     def test_killESRCH(self):
@@ -95,9 +105,22 @@
         # Hopefully there is no process with PID 2 ** 31 - 1
         exc = self.assertRaises(OSError, lockfile.kill, 2 ** 31 - 1, 0)
         self.assertEqual(exc.errno, errno.ESRCH)
+    test_killESRCH.skip = skipKill
 
 
+    def test_noKillCall(self):
+        """
+        Verify that when L{lockfile.kill} does end up as None (e.g. on Windows
+        without pywin32), it doesn't end up being called and raising a
+        L{TypeError}.
+        """
+        self.patch(lockfile, "kill", None)
+        fl = lockfile.FilesystemLock(self.mktemp())
+        fl.lock()
+        self.assertFalse(fl.lock())
 
+
+
 class LockingTestCase(unittest.TestCase):
     def _symlinkErrorTest(self, errno):
         def fakeSymlink(source, dest):
Index: twisted/test/test_shortcut.py
===================================================================
--- twisted/test/test_shortcut.py	(revision 26580)
+++ twisted/test/test_shortcut.py	(working copy)
@@ -6,7 +6,12 @@
 import os
 if os.name == 'nt':
 
-    from twisted.python import shortcut
+    skipWindowsNopywin32 = None
+    try:
+        from twisted.python import shortcut
+    except ImportError:
+        skipWindowsNopywin32 = ("On windows, twisted.python.shortcut is not "
+                                "available in the absence of win32com.")
     import os.path
     import sys
 
@@ -18,3 +23,4 @@
             self.assert_(os.path.exists(tempname))
             sc=shortcut.open(tempname)
             self.assert_(sc.GetPath(0)[0].endswith('test_shortcut.py'))
+    ShortcutTest.skip = skipWindowsNopywin32
Index: twisted/test/test_stdio.py
===================================================================
--- twisted/test/test_stdio.py	(revision 26580)
+++ twisted/test/test_stdio.py	(working copy)
@@ -5,6 +5,7 @@
 
 from twisted.trial import unittest
 from twisted.python import filepath
+from twisted.python.runtime import platform
 from twisted.internet import error, defer, protocol, reactor
 
 
@@ -15,7 +16,15 @@
 # the end, the functionality works.
 UNIQUE_LAST_WRITE_STRING = 'xyz123abc Twisted is great!'
 
+skipWindowsNopywin32 = None
+if platform.isWindows():
+    try:
+        import win32process
+    except ImportError:
+        skipWindowsNopywin32 = ("On windows, spawnProcess is not available "
+                                "in the absence of win32process.")
 
+
 class StandardIOTestProcessProtocol(protocol.ProcessProtocol):
     """
     Test helper for collecting output from a child process and notifying
@@ -120,6 +129,7 @@
             self.failIfIn(1, p.data)
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
+    test_loseConnection.skip = skipWindowsNopywin32
 
 
     def test_lastWriteReceived(self):
@@ -159,6 +169,7 @@
                     p.data,))
             reason.trap(error.ProcessDone)
         return self._requireFailure(p.onCompletion, processEnded)
+    test_lastWriteReceived.skip = skipWindowsNopywin32
 
 
     def test_hostAndPeer(self):
@@ -176,6 +187,7 @@
             self.failUnless(peer)
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
+    test_hostAndPeer.skip = skipWindowsNopywin32
 
 
     def test_write(self):
@@ -192,6 +204,7 @@
             self.assertEquals(p.data[1], 'ok!')
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
+    test_write.skip = skipWindowsNopywin32
 
 
     def test_writeSequence(self):
@@ -208,6 +221,7 @@
             self.assertEquals(p.data[1], 'ok!')
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
+    test_writeSequence.skip = skipWindowsNopywin32
 
 
     def _junkPath(self):
@@ -245,6 +259,7 @@
             self.failIf(toWrite, "Connection lost with %d writes left to go." % (len(toWrite),))
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
+    test_producer.skip = skipWindowsNopywin32
 
 
     def test_consumer(self):
@@ -263,3 +278,4 @@
             self.assertEquals(p.data[1], file(junkPath).read())
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
+    test_consumer.skip = skipWindowsNopywin32
Index: twisted/web2/test/test_cgi.py
===================================================================
--- twisted/web2/test/test_cgi.py	(revision 26580)
+++ twisted/web2/test/test_cgi.py	(working copy)
@@ -3,10 +3,19 @@
 from twisted.trial import unittest
 from twisted.internet import reactor, interfaces, defer
 from twisted.python import util
+from twisted.python.runtime import platform
 from twisted.web2 import twcgi, server, http, iweb
 from twisted.web2 import stream
 from twisted.web2.test.test_server import SimpleRequest
 
+skipWindowsNopywin32 = None
+if platform.isWindows():
+    try:
+        import win32process
+    except ImportError:
+        skipWindowsNopywin32 = ("On windows, spawnProcess is not available "
+                                "in the absence of win32process.")
+
 DUMMY_CGI = '''
 print "Header: OK"
 print
@@ -298,3 +307,4 @@
         d.addCallback(_secondRequest)
 
         return d
+    test_scriptsExecute.skip = skipWindowsNopywin32
