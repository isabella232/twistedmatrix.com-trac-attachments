--- twisted/test/test_modules.py	(revision 31565)
+++ twisted/test/test_modules.py	(working copy)
@@ -101,7 +101,7 @@
         # both of these are in sys.path, test_package.nested_package should become a
         # virtual package containing both "module" and "module2"
 
-        entry = self.pathEntryWithOnePackage('test_package')
+        entry = self.pathEntryWithOnePackage()
         entry.child('test_package').child('__init__.py').setContent(namespaceBoilerplate)
 
         nestedEntry = entry.child('test_package').child('nested_package')
@@ -109,7 +109,7 @@
         nestedEntry.child('__init__.py').setContent(namespaceBoilerplate)
         nestedEntry.child('module.py').setContent('')
 
-        anotherEntry = self.pathEntryWithOnePackage('test_package')
+        anotherEntry = self.pathEntryWithOnePackage()
         anotherEntry.child('test_package').child('__init__.py').setContent(namespaceBoilerplate)
 
         anotherNestedEntry = anotherEntry.child('test_package').child('nested_package')
@@ -121,6 +121,15 @@
 
         module = modules.getModule('test_package')
 
+        # We have to use importPackages=True in order to resolve the namespace packages,
+        # so we remove the imported packages from sys.modules after walking
+        try:
+            walkedNames = [mod.name for mod in module.walkModules(importPackages=True)]
+        finally:
+            for module in sys.modules.keys():
+                if module.startswith('test_package'):
+                    del sys.modules[module]
+
         expected = [
             'test_package',
             'test_package.nested_package',
@@ -128,8 +137,6 @@
             'test_package.nested_package.module2',
         ]
 
-        walkedNames = [module.name for module in module.walkModules(importPackages=True)]
-
         self.assertEquals(walkedNames, expected)
 
     def test_unimportablePackageGetItem(self):
