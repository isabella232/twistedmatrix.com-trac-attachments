--- a/twisted/test/test_modules.py
+++ b/twisted/test/test_modules.py
@@ -75,6 +75,60 @@ class PySpaceTestCase(TestCase):
 
 class BasicTests(PySpaceTestCase):
 
+    def test_namespacedPackages(self):
+        namespaceBoilerplate = 'import pkgutil; __path__ = pkgutil.extend_path(__path__, __name__)'
+
+        # Create two temporary directories with packages:
+        #
+        #   entry:
+        #       test_package/
+        #           __init__.py
+        #           nested_package/
+        #               __init__.py
+        #               module.py
+        #
+        #   anotherEntry:
+        #       test_package/
+        #           __init__.py
+        #           nested_package/
+        #               __init__.py
+        #               module2.py
+        #
+        # test_package and test_package.nested_package are namespace packages, and when
+        # both of these are in sys.path, test_package.nested_package should become a
+        # virtual package containing both "module" and "module2"
+
+        entry = self.pathEntryWithOnePackage('test_package')
+        entry.child('test_package').child('__init__.py').setContent(namespaceBoilerplate)
+
+        nestedEntry = entry.child('test_package').child('nested_package')
+        nestedEntry.makedirs()
+        nestedEntry.child('__init__.py').setContent(namespaceBoilerplate)
+        nestedEntry.child('module.py').setContent('')
+
+        anotherEntry = self.pathEntryWithOnePackage('test_package')
+        anotherEntry.child('test_package').child('__init__.py').setContent(namespaceBoilerplate)
+
+        anotherNestedEntry = anotherEntry.child('test_package').child('nested_package')
+        anotherNestedEntry.makedirs()
+        anotherNestedEntry.child('__init__.py').setContent(namespaceBoilerplate)
+        anotherNestedEntry.child('module2.py').setContent('')
+
+        self.replaceSysPath([entry.path, anotherEntry.path])
+
+        module = modules.getModule('test_package')
+
+        expected = [
+            'test_package',
+            'test_package.nested_package',
+            'test_package.nested_package.module',
+            'test_package.nested_package.module2',
+        ]
+
+        walkedNames = [module.name for module in module.walkModules(importPackages=True)]
+
+        self.assertEquals(walkedNames, expected)
+
     def test_unimportablePackageGetItem(self):
         """
         If a package has been explicitly forbidden from importing by setting a
