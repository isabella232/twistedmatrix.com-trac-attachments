Index: twisted/scripts/_twistd_unix.py
===================================================================
--- twisted/scripts/_twistd_unix.py	(revision 22475)
+++ twisted/scripts/_twistd_unix.py	(working copy)
@@ -39,6 +39,7 @@
                       'Chroot to a supplied directory before running'],
                      ['uid', 'u', None, "The uid to run as."],
                      ['gid', 'g', None, "The gid to run as."],
+                     ['umask', 'm', None, "The umask to run under."],
                     ]
     zsh_altArgDescr = {"prefix":"Use the given prefix when syslogging (default: twisted)",
                        "pidfile":"Name of the pidfile (default: twistd.pid)",}
@@ -172,7 +173,6 @@
     os.setsid()
     if os.fork():   # launch child and...
         os._exit(0) # kill off parent again.
-    os.umask(077)
     null=os.open('/dev/null', os.O_RDWR)
     for i in range(3):
         try:
@@ -182,6 +182,9 @@
                 raise
     os.close(null)
 
+    # umask setting (which for daemons should default to 0) is done in
+    # startApplication so daemon and non-daemon can be handled correctly
+
 def shedPrivileges(euid, uid, gid):
     if uid is not None or gid is not None:
         switchUID(uid, gid, euid)
@@ -212,6 +215,19 @@
     setupEnvironment(config)
     service.IService(application).privilegedStartService()
 
+    umask = config['umask']
+    if umask is not None:
+       umask = int(umask, 8)
+
+    if umask is None:
+        umask = process.umask
+
+    if umask is None:
+        if not config['nodaemon']:
+            os.umask(0)
+        else:
+            os.umask(umask)
+
     uid, gid = mktap.getid(config['uid'], config['gid'])
     if uid is None:
         uid = process.uid
Index: twisted/application/service.py
===================================================================
--- twisted/application/service.py	(revision 22475)
+++ twisted/application/service.py	(working copy)
@@ -284,32 +284,38 @@
     @type uid: C{int}
     @ivar gid: the group-id the process should run under.
     @type gid: C{int}
+    @ivar umask: the umask the process should run under.
+    @type umask: C{int}
     """
 
 
 class Process:
     """Process running parameters
 
-    Sets up uid/gid in the constructor, and has a default
+    Sets up uid/gid/umask in the constructor, and has a default
     of C{None} as C{processName}.
     """
     implements(IProcess)
     processName = None
 
-    def __init__(self, uid=None, gid=None):
-        """Set uid and gid.
+    def __init__(self, uid=None, gid=None, umask=None):
+        """Set uid, gid and umask.
 
         @param uid: The user ID as whom to execute the process.  If
         this is None, no attempt will be made to change the UID.
 
         @param gid: The group ID as whom to execute the process.  If
         this is None, no attempt will be made to change the GID.
+
+        @param umask: The umask under which to execute the process.  If
+        this is None, no attempt will be made to change the umask.
         """
         self.uid = uid
         self.gid = gid
+        self.umask = umask
 
 
-def Application(name, uid=None, gid=None):
+def Application(name, uid=None, gid=None, umask=None):
     """Return a compound class.
 
     Return an object supporting the L{IService}, L{IServiceCollection},
@@ -318,7 +324,7 @@
     one of the interfaces.
     """
     ret = components.Componentized()
-    for comp in (MultiService(), sob.Persistent(ret, name), Process(uid, gid)):
+    for comp in (MultiService(), sob.Persistent(ret, name), Process(uid, gid, umask)):
         ret.addComponent(comp, ignoreClass=1)
     IService(ret).setName(name)
     return ret
