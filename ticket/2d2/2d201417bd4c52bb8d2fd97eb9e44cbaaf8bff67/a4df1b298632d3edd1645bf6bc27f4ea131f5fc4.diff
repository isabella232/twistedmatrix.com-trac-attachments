Index: twisted/web2/test/test_http_headers.py
===================================================================
--- twisted/web2/test/test_http_headers.py	(revision 16849)
+++ twisted/web2/test/test_http_headers.py	(working copy)
@@ -543,11 +543,29 @@
         basic = ('Basic realm="foo"',
                  [('basic', {'realm': 'foo'})], ['basic', 'realm="foo"'])
 
+        ntlm = ('NTLM',
+                [('ntlm', {})], ['ntlm', ''])
+
+        ntlmWeb2 = ('NTLM ',
+                    [('ntlm', {})], ['ntlm', ''])
+
         table = (digest,
                  basic,
+                 ntlm,
+                 ntlmWeb2,
                  (digest[0]+', '+basic[0],
                   digest[1] + basic[1],
-                  digest[2], basic[2]))
+                  digest[2], basic[2]),
+#                I don't think any server is bad enough to send
+#                Basic realm="foo", NTLM
+#                So I'm commenting out this portion of the test
+#                  (basic[0]+', '+ntlm[0],
+#                   basic[1] + ntlm[1],
+#                   basic[2] + ntlm[2]),
+#                  (ntlm[0]+', '+digest[0],
+#                   ntlm[1] + digest[1],
+#                   ntlm[2] + digest[2])
+                 )
 
         self.runRoundtripTest("WWW-Authenticate", table)
 
Index: twisted/web2/http_headers.py
===================================================================
--- twisted/web2/http_headers.py	(revision 16849)
+++ twisted/web2/http_headers.py	(working copy)
@@ -565,7 +565,15 @@
         else:
             last.append(token)
 
-    _parseHeader(scheme, last)
+    # NTLM and possibly other schemes may send a WWW-Authenticate
+    # without a challenge.  A scheme shouldn't be None with a challenge
+    # and make it to this, so don't bother trying to parse the challenge.
+    # This doesn't support comma seperated headers.
+    if not scheme:
+        scheme = last.pop()
+        headers.append((scheme, {}))
+    else:
+        _parseHeader(scheme, last)
 
     return headers
 
