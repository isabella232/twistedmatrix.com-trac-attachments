diff --git a/twisted/python/dist3.py b/twisted/python/dist3.py
index 9a46625..41998e3 100644
--- a/twisted/python/dist3.py
+++ b/twisted/python/dist3.py
@@ -238,6 +238,7 @@ modules = [
     "twisted.web.test",
     "twisted.web.test.requesthelper",
     "twisted.web.util",
+    "twisted.web.vhost",
     "twisted.web.xmlrpc",
 ]
 
@@ -408,6 +409,7 @@ testModules = [
     "twisted.web.test.test_web",
     "twisted.web.test.test_web__responses",
     "twisted.web.test.test_webclient",
+    "twisted.web.test.test_vhost",
     "twisted.web.test.test_xmlrpc",
 ]
 
diff --git a/twisted/web/test/requesthelper.py b/twisted/web/test/requesthelper.py
index e51efde..33766f0 100644
--- a/twisted/web/test/requesthelper.py
+++ b/twisted/web/test/requesthelper.py
@@ -276,6 +276,27 @@ class DummyRequest(object):
         """
         return IPv4Address('TCP', '127.0.0.1', 80)
 
+    def setHost(self, host, port, ssl=0):
+        """
+        Change the host and port the request thinks it's using.
+
+        @type host: C{bytes}
+        @param host: The value to which to change the host header.
+
+        @type ssl: C{bool}
+        @param ssl: A flag which, if C{True}, indicates that the request is
+            considered secure (if C{True}, L{isSecure} will return C{True}).
+        """
+        self._forceSSL = ssl # set first so isSecure will work
+        if self.isSecure():
+            default = 443
+        else:
+            default = 80
+        if port == default:
+            hostHeader = host
+        else:
+            hostHeader = host + b":" + intToBytes(port)
+        self.requestHeaders.addRawHeader(b"host", hostHeader)
 
     def getClient(self):
         """
diff --git a/twisted/web/test/test_vhost.py b/twisted/web/test/test_vhost.py
index f1b9ae5..7b4e082 100644
--- a/twisted/web/test/test_vhost.py
+++ b/twisted/web/test/test_vhost.py
@@ -8,11 +8,51 @@ Tests for L{twisted.web.vhost}.
 from twisted.internet.defer import gatherResults
 from twisted.trial.unittest import TestCase
 from twisted.web.http import NOT_FOUND
+from twisted.web.resource import NoResource, Resource
 from twisted.web.static import Data
-from twisted.web.vhost import NameVirtualHost
+from twisted.web.server import Site
+from twisted.web.vhost import (_HostResource,
+                               NameVirtualHost,
+                               VirtualHostCollection,
+                               VHostMonsterResource)
 from twisted.web.test.test_web import DummyRequest
 from twisted.web.test._util import _render
 
+class HostResourceTests(TestCase):
+    """
+    Tests for L{_HostResource}.
+    """
+    def test_getChild(self):
+        """
+        L{_HostResource.getChild} returns the proper I{Resource} for the vhost
+        embedded in the URL.  Verify that returning the proper I{Resource}
+        required changing the I{Host} in the header.
+        """
+        bazroot = Data(b'root data', "")
+        bazuri  = Data(b'uri data', "")
+        baztest = Data(b'test data', "")
+        bazuri.putChild(b'test', baztest)
+        bazroot.putChild(b'uri', bazuri)
+        hr = _HostResource()
+
+        root = NameVirtualHost()
+        root.default = Data(b'default data', "")
+        root.addHost(b'baz.com', bazroot)
+
+        request = DummyRequest([b'uri', b'test'])
+        request.prepath = [b'bar', b'http', b'baz.com']
+        request.site = Site(root)
+        request.isSecure = lambda: False
+        request.host = b''
+
+        step = hr.getChild(b'baz.com', request) #Consumes rest of path
+        self.assertIsInstance(step, Data)
+
+        request = DummyRequest([b'uri', b'test'])
+        step = root.getChild(b'uri', request)
+        self.assertIsInstance(step, NoResource)
+
+
 class NameVirtualHostTests(TestCase):
     """
     Tests for L{NameVirtualHost}.
@@ -24,10 +64,10 @@ class NameVirtualHostTests(TestCase):
         header in the request.
         """
         virtualHostResource = NameVirtualHost()
-        virtualHostResource.default = Data("correct result", "")
+        virtualHostResource.default = Data(b"correct result", "")
         request = DummyRequest([''])
         self.assertEqual(
-            virtualHostResource.render(request), "correct result")
+            virtualHostResource.render(request), b"correct result")
 
 
     def test_renderWithoutHostNoDefault(self):
@@ -52,21 +92,21 @@ class NameVirtualHostTests(TestCase):
         to the key indicated by the value of the I{Host} header in the request.
         """
         virtualHostResource = NameVirtualHost()
-        virtualHostResource.addHost(b'example.org', Data("winner", ""))
+        virtualHostResource.addHost(b'example.org', Data(b"winner", ""))
 
         request = DummyRequest([b''])
         request.requestHeaders.addRawHeader(b'host', b'example.org')
         d = _render(virtualHostResource, request)
         def cbRendered(ignored, request):
-            self.assertEqual(''.join(request.written), "winner")
+            self.assertEqual(b''.join(request.written), b"winner")
         d.addCallback(cbRendered, request)
 
         # The port portion of the Host header should not be considered.
-        requestWithPort = DummyRequest([''])
+        requestWithPort = DummyRequest([b''])
         requestWithPort.requestHeaders.addRawHeader(b'host', b'example.org:8000')
         dWithPort = _render(virtualHostResource, requestWithPort)
         def cbRendered(ignored, requestWithPort):
-            self.assertEqual(''.join(requestWithPort.written), "winner")
+            self.assertEqual(b''.join(requestWithPort.written), b"winner")
         dWithPort.addCallback(cbRendered, requestWithPort)
 
         return gatherResults([d, dWithPort])
@@ -79,12 +119,12 @@ class NameVirtualHostTests(TestCase):
         matching the value of the I{Host} header in the request.
         """
         virtualHostResource = NameVirtualHost()
-        virtualHostResource.default = Data("correct data", "")
+        virtualHostResource.default = Data(b"correct data", "")
         request = DummyRequest([b''])
         request.requestHeaders.addRawHeader(b'host', b'example.com')
         d = _render(virtualHostResource, request)
         def cbRendered(ignored):
-            self.assertEqual(''.join(request.written), "correct data")
+            self.assertEqual(b''.join(request.written), b"correct data")
         d.addCallback(cbRendered)
         return d
 
@@ -103,3 +143,54 @@ class NameVirtualHostTests(TestCase):
             self.assertEqual(request.responseCode, NOT_FOUND)
         d.addCallback(cbRendered)
         return d
+
+
+    def test_getChild(self):
+        """
+        L{NameVirtualHost.getChild} returns correct I{Resource} based off
+        the header and modifies I{Request} to ensure proper prepath and
+        postpath are set.
+        """
+        virtualHostResource = NameVirtualHost()
+        leafResource = Data(b"leaf data", "")
+        leafResource.isLeaf = True
+        normResource = Data(b"norm data", "")
+        virtualHostResource.addHost(b'leaf.example.org', leafResource)
+        virtualHostResource.addHost(b'norm.example.org', normResource)
+
+        request = DummyRequest([])
+        request.requestHeaders.addRawHeader(b'host', b'norm.example.org')
+        request.prepath = [b'']
+
+        self.assertIsInstance(virtualHostResource.getChild(b'', request),
+                              NoResource)
+        self.assertEqual(request.prepath, [b''])
+        self.assertEqual(request.postpath, [])
+
+        request = DummyRequest([])
+        request.requestHeaders.addRawHeader(b'host', b'leaf.example.org')
+        request.prepath = [b'']
+
+        self.assertIsInstance(virtualHostResource.getChild(b'', request),
+                              Data)
+        self.assertEqual(request.prepath,  [])
+        self.assertEqual(request.postpath, [b''])
+
+
+class VHostMonsterResourceTests(TestCase):
+    """
+    Tests for L{VHostMonsterResource}.
+    """
+    def test_getChild(self):
+        """
+        L{VHostMonsterResource.getChild} returns I{_HostResource} and modifies
+        I{Request} with correct L{Request.isSecure}.
+        """
+        vhm = VHostMonsterResource()
+        request = DummyRequest([])
+        self.assertIsInstance(vhm.getChild(b'http', request), _HostResource)
+        self.assertFalse(request.isSecure())
+
+        request = DummyRequest([])
+        self.assertIsInstance(vhm.getChild(b'https', request), _HostResource)
+        self.assertTrue(request.isSecure())
diff --git a/twisted/web/topfiles/8132.feature b/twisted/web/topfiles/8132.feature
new file mode 100644
index 0000000..63f5482
--- /dev/null
+++ b/twisted/web/topfiles/8132.feature
@@ -0,0 +1 @@
+twisted.web.vhost ported to Python 3.
diff --git a/twisted/web/vhost.py b/twisted/web/vhost.py
index 1acee21..0b3d16c 100644
--- a/twisted/web/vhost.py
+++ b/twisted/web/vhost.py
@@ -6,6 +6,8 @@
 I am a virtual hosts implementation.
 """
 
+from __future__ import division, absolute_import
+
 # Twisted Imports
 from twisted.python import roots
 from twisted.web import resource
@@ -75,11 +77,11 @@ class NameVirtualHost(resource.Resource):
     def _getResourceForRequest(self, request):
         """(Internal) Get the appropriate resource for the given host.
         """
-        hostHeader = request.getHeader('host')
+        hostHeader = request.getHeader(b'host')
         if hostHeader == None:
             return self.default or resource.NoResource()
         else:
-            host = hostHeader.lower().split(':', 1)[0]
+            host = hostHeader.lower().split(b':', 1)[0]
         return (self.hosts.get(host, self.default)
                 or resource.NoResource("host %s not in vhost map" % repr(host)))
 
@@ -102,14 +104,14 @@ class NameVirtualHost(resource.Resource):
 class _HostResource(resource.Resource):
 
     def getChild(self, path, request):
-        if ':' in path:
-            host, port = path.split(':', 1)
+        if b':' in path:
+            host, port = path.split(b':', 1)
             port = int(port)
         else:
             host, port = path, 80
         request.setHost(host, port)
         prefixLen = 3+request.isSecure()+4+len(path)+len(request.prepath[-3])
-        request.path = '/'+'/'.join(request.postpath)
+        request.path = b'/'+b'/'.join(request.postpath)
         request.uri = request.uri[prefixLen:]
         del request.prepath[:3]
         return request.site.getResourceFor(request)
@@ -128,8 +130,8 @@ class VHostMonsterResource(resource.Resource):
     then redirect and url generation will work correctly
     """
     def getChild(self, path, request):
-        if path == 'http':
+        if path == b'http':
             request.isSecure = lambda: 0
-        elif path == 'https':
+        elif path == b'https':
             request.isSecure = lambda: 1
         return _HostResource()
