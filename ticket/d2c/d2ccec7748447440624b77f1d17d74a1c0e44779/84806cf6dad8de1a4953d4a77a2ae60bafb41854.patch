diff a/twisted/python/dist3.py b/twisted/python/dist3.py
index c7a8e61..639503b 100644
--- a/twisted/python/dist3.py
+++ b/twisted/python/dist3.py
@@ -230,6 +230,7 @@ modules = [
     "twisted.web.test",
     "twisted.web.test.requesthelper",
     "twisted.web.util",
+    "twisted.web.vhost",
     "twisted.web.xmlrpc",
 ]
 
@@ -397,6 +398,7 @@ testModules = [
     "twisted.web.test.test_web",
     "twisted.web.test.test_web__responses",
     "twisted.web.test.test_webclient",
+    "twisted.web.test.test_vhost",
     "twisted.web.test.test_xmlrpc",
 ]
 
diff a/twisted/web/test/test_vhost.py b/twisted/web/test/test_vhost.py
index 13e6357..11dbf4c 100644
--- a/twisted/web/test/test_vhost.py
+++ b/twisted/web/test/test_vhost.py
@@ -24,10 +24,10 @@ class NameVirtualHostTests(TestCase):
         header in the request.
         """
         virtualHostResource = NameVirtualHost()
-        virtualHostResource.default = Data("correct result", "")
+        virtualHostResource.default = Data(b"correct result", "")
         request = DummyRequest([''])
         self.assertEqual(
-            virtualHostResource.render(request), "correct result")
+            virtualHostResource.render(request), b"correct result")
 
 
     def test_renderWithoutHostNoDefault(self):
@@ -52,21 +52,21 @@ class NameVirtualHostTests(TestCase):
         to the key indicated by the value of the I{Host} header in the request.
         """
         virtualHostResource = NameVirtualHost()
-        virtualHostResource.addHost('example.org', Data("winner", ""))
+        virtualHostResource.addHost(b'example.org', Data(b"winner", ""))
 
         request = DummyRequest([''])
-        request.headers['host'] = 'example.org'
+        request.headers[b'host'] = b'example.org'
         d = _render(virtualHostResource, request)
         def cbRendered(ignored, request):
-            self.assertEqual(''.join(request.written), "winner")
+            self.assertEqual(b''.join(request.written), b"winner")
         d.addCallback(cbRendered, request)
 
         # The port portion of the Host header should not be considered.
         requestWithPort = DummyRequest([''])
-        requestWithPort.headers['host'] = 'example.org:8000'
+        requestWithPort.headers[b'host'] = b'example.org:8000'
         dWithPort = _render(virtualHostResource, requestWithPort)
         def cbRendered(ignored, requestWithPort):
-            self.assertEqual(''.join(requestWithPort.written), "winner")
+            self.assertEqual(b''.join(requestWithPort.written), b"winner")
         dWithPort.addCallback(cbRendered, requestWithPort)
 
         return gatherResults([d, dWithPort])
@@ -79,12 +79,12 @@ class NameVirtualHostTests(TestCase):
         matching the value of the I{Host} header in the request.
         """
         virtualHostResource = NameVirtualHost()
-        virtualHostResource.default = Data("correct data", "")
+        virtualHostResource.default = Data(b"correct data", "")
         request = DummyRequest([''])
-        request.headers['host'] = 'example.com'
+        request.headers[b'host'] = b'example.com'
         d = _render(virtualHostResource, request)
         def cbRendered(ignored):
-            self.assertEqual(''.join(request.written), "correct data")
+            self.assertEqual(b''.join(request.written), b"correct data")
         d.addCallback(cbRendered)
         return d
 
@@ -97,7 +97,7 @@ class NameVirtualHostTests(TestCase):
         """
         virtualHostResource = NameVirtualHost()
         request = DummyRequest([''])
-        request.headers['host'] = 'example.com'
+        request.headers[b'host'] = b'example.com'
         d = _render(virtualHostResource, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
diff a/twisted/web/topfiles/8132.feature b/twisted/web/topfiles/8132.feature
new file mode 100644
index 0000000..63f5482
--- /dev/null
+++ b/twisted/web/topfiles/8132.feature
@@ -0,0 +1 @@
+twisted.web.vhost ported to Python 3.
diff a/twisted/web/vhost.py b/twisted/web/vhost.py
index 1acee21..7b7459e 100644
--- a/twisted/web/vhost.py
+++ b/twisted/web/vhost.py
@@ -75,11 +75,11 @@ class NameVirtualHost(resource.Resource):
     def _getResourceForRequest(self, request):
         """(Internal) Get the appropriate resource for the given host.
         """
-        hostHeader = request.getHeader('host')
+        hostHeader = request.getHeader(b'host')
         if hostHeader == None:
             return self.default or resource.NoResource()
         else:
-            host = hostHeader.lower().split(':', 1)[0]
+            host = hostHeader.lower().split(b':', 1)[0]
         return (self.hosts.get(host, self.default)
                 or resource.NoResource("host %s not in vhost map" % repr(host)))
 
@@ -102,14 +102,14 @@ class NameVirtualHost(resource.Resource):
 class _HostResource(resource.Resource):
 
     def getChild(self, path, request):
-        if ':' in path:
-            host, port = path.split(':', 1)
+        if b':' in path:
+            host, port = path.split(b':', 1)
             port = int(port)
         else:
             host, port = path, 80
         request.setHost(host, port)
         prefixLen = 3+request.isSecure()+4+len(path)+len(request.prepath[-3])
-        request.path = '/'+'/'.join(request.postpath)
+        request.path = b'/'+b'/'.join(request.postpath)
         request.uri = request.uri[prefixLen:]
         del request.prepath[:3]
         return request.site.getResourceFor(request)
@@ -128,8 +128,8 @@ class VHostMonsterResource(resource.Resource):
     then redirect and url generation will work correctly
     """
     def getChild(self, path, request):
-        if path == 'http':
+        if path == b'http':
             request.isSecure = lambda: 0
-        elif path == 'https':
+        elif path == b'https':
             request.isSecure = lambda: 1
         return _HostResource()
