Index: test_pbfailure.py
===================================================================
--- test_pbfailure.py	(révision 32394)
+++ test_pbfailure.py	(copie de travail)
@@ -175,7 +175,7 @@
     def _exceptionTest(self, method, exceptionType, flush):
         def eb(err):
             err.trap(exceptionType)
-            self.compare(err.traceback, "Traceback unavailable\n")
+            self.compare(err.traceback, str(err.value))
             if flush:
                 errs = self.flushLoggedErrors(exceptionType)
                 self.assertEqual(len(errs), 1)
@@ -341,7 +341,7 @@
         """
         def failureNoSuch(fail):
             fail.trap(pb.NoSuchMethod)
-            self.compare(fail.traceback, "Traceback unavailable\n")
+            self.compare(fail.traceback, "No such method: remote_nosuch")
             return 42000
         return self._testImpl('nosuch', 42000, failureNoSuch, AttributeError)
 
@@ -392,7 +392,7 @@
         exc = exception[0]
         self.assertEqual(exc.remoteType, "exceptions.AttributeError")
         self.assertEqual(exc.args, ("foo",))
-        self.assertEqual(exc.remoteTraceback, 'Traceback unavailable\n')
+        self.assertEqual(exc.remoteTraceback, "foo")
 
     if sys.version_info[:2] < (2, 5):
         test_throwExceptionIntoGenerator.skip = (
Index: ../spread/pb.py
===================================================================
--- ../spread/pb.py	(révision 32394)
+++ ../spread/pb.py	(copie de travail)
@@ -445,7 +445,7 @@
         if self.unsafeTracebacks:
             state['traceback'] = self.getTraceback()
         else:
-            state['traceback'] = 'Traceback unavailable\n'
+            state['traceback'] = str(self.value)
         return state
 
 
