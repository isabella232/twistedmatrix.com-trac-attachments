--- plugin.py	2007-07-10 21:43:07.000000000 -0400
+++ plugin.phil.py	2007-07-10 21:42:29.000000000 -0400
@@ -103,7 +103,7 @@
             d[k] = value
         return d
 
-def getCache(module):
+def getCache(module, err=log.err):
     """
     Compute all the possible loadable plugins, while loading as few as
     possible and hitting the filesystem as little as possible.
@@ -111,6 +111,9 @@
     @param module: a Python module object.  This represents a package to search
     for plugins.
 
+    @param err: A callable object to be invoked if errors occur. Defaults
+    to log.err()
+
     @return: a dictionary mapping module names to CachedDropin instances.
     """
     allCachesCombined = {}
@@ -151,7 +154,7 @@
                     provider = pluginModule.load()
                 except:
                     # dropinDotCache.pop(pluginKey, None)
-                    log.err()
+                    err()
                 else:
                     entry = _generateCacheEntry(provider)
                     dropinDotCache[pluginKey] = entry
@@ -164,12 +167,12 @@
             try:
                 dropinPath.setContent(pickle.dumps(dropinDotCache))
             except:
-                log.err()
+                err()
         allCachesCombined.update(dropinDotCache)
     return allCachesCombined
 
 
-def getPlugins(interface, package=None):
+def getPlugins(interface, package=None, err=log.err):
     """
     Retrieve all plugins implementing the given interface beneath the given module.
 
@@ -179,17 +182,20 @@
     @param package: A package beneath which plugins are installed.  For
     most uses, the default value is correct.
 
+    @param err: A callable object to be invoked if errors occur. Defaults
+    to log.err()
+
     @return: An iterator of plugins.
     """
     if package is None:
         import twisted.plugins as package
-    allDropins = getCache(package)
+    allDropins = getCache(package, err)
     for dropin in allDropins.itervalues():
         for plugin in dropin.plugins:
             try:
                 adapted = interface(plugin, None)
             except:
-                log.err()
+                err()
             else:
                 if adapted is not None:
                     yield adapted
