Index: twisted/test/generator_failure_tests.py
===================================================================
--- twisted/test/generator_failure_tests.py	(revision 21159)
+++ twisted/test/generator_failure_tests.py	(working copy)
@@ -46,6 +46,15 @@
         )
 
 
+    def _throwIntoGenerator(self, f, g):
+        try:
+            f.throwExceptionIntoGenerator(g)
+        except StopIteration:
+            pass
+        else:
+            self.fail("throwExceptionIntoGenerator should have raised "
+                      "StopIteration")
+
     def test_throwExceptionIntoGenerator(self):
         """
         It should be possible to throw the exception that a Failure
@@ -62,20 +71,13 @@
         g = generator()
         f = getDivisionFailure()
         g.next()
-        try:
-            f.throwExceptionIntoGenerator(g)
-        except StopIteration:
-            pass
-        else:
-            self.fail("throwExceptionIntoGenerator should have raised "
-                      "StopIteration")
+        self._throwIntoGenerator(f, g)
 
         self.assertEquals(stuff[0][0], ZeroDivisionError)
         self.assertTrue(isinstance(stuff[0][1], ZeroDivisionError))
 
         self.assertEquals(traceback.extract_tb(stuff[0][2])[-1][-1], "1/0")
 
-
     def test_findFailureInGenerator(self):
         """
         Within an exception handler, it should be possible to find the
@@ -96,12 +98,7 @@
 
         g = generator()
         g.next()
-        try:
-            f.throwExceptionIntoGenerator(g)
-        except StopIteration:
-            pass
-        else:
-            self.fail("generator didn't stop")
+        self._throwIntoGenerator(f, g)
 
         self.assertEqual(foundFailures, [f])
 
@@ -127,12 +124,21 @@
                 self.fail("No exception sent to generator")
         g = generator()
         g.next()
-        try:
-            f.throwExceptionIntoGenerator(g)
-        except StopIteration:
-            pass
-        else:
-            self.fail("generator didn't stop")
+        self._throwIntoGenerator(f, g)
 
         self.assertEqual(len(newFailures), 1)
         self.assertEqual(newFailures[0].getTraceback(), f.getTraceback())
+
+    def test_ambiguousFailureInGenerator(self):
+        def generator():
+            try:
+                try:
+                    yield
+                except:
+                    [][1]
+            except:
+                self.assertEqual(Failure().type, IndexError)
+        g=generator()
+        g.next()
+        f=getDivisionFailure()
+        self._throwIntoGenerator(f, g)
