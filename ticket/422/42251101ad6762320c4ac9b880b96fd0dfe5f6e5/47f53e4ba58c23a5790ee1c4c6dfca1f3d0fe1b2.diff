Index: twisted/web/test/test_cgi.py
===================================================================
--- twisted/web/test/test_cgi.py	(revision 33677)
+++ twisted/web/test/test_cgi.py	(working copy)
@@ -12,7 +12,7 @@
 from twisted.python import util, failure
 from twisted.web.http import NOT_FOUND, INTERNAL_SERVER_ERROR
 from twisted.web import client, twcgi, server, resource
-from twisted.web.test._util import _render
+from twisted.web.test.util import render
 from twisted.web.test.test_web import DummyRequest
 
 DUMMY_CGI = '''\
@@ -226,7 +226,7 @@
         """
         resource = twcgi.CGIDirectory(self.mktemp())
         request = DummyRequest([''])
-        d = _render(resource, request)
+        d = render(resource, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
         d.addCallback(cbRendered)
@@ -245,7 +245,7 @@
         resource = twcgi.CGIDirectory(path)
         request = DummyRequest(['foo'])
         child = resource.getChild("foo", request)
-        d = _render(child, request)
+        d = render(child, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
         d.addCallback(cbRendered)
Index: twisted/web/test/test_script.py
===================================================================
--- twisted/web/test/test_script.py	(revision 33677)
+++ twisted/web/test/test_script.py	(working copy)
@@ -10,7 +10,7 @@
 from twisted.trial.unittest import TestCase
 from twisted.web.http import NOT_FOUND
 from twisted.web.script import ResourceScriptDirectory, PythonScript
-from twisted.web.test._util import _render
+from twisted.web.test.util import render
 from twisted.web.test.test_web import DummyRequest
 
 
@@ -25,7 +25,7 @@
         """
         resource = ResourceScriptDirectory(self.mktemp())
         request = DummyRequest([''])
-        d = _render(resource, request)
+        d = render(resource, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
         d.addCallback(cbRendered)
@@ -44,7 +44,7 @@
         resource = ResourceScriptDirectory(path)
         request = DummyRequest(['foo'])
         child = resource.getChild("foo", request)
-        d = _render(child, request)
+        d = render(child, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
         d.addCallback(cbRendered)
@@ -63,7 +63,7 @@
         """
         resource = PythonScript(self.mktemp(), None)
         request = DummyRequest([''])
-        d = _render(resource, request)
+        d = render(resource, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
         d.addCallback(cbRendered)
Index: twisted/web/test/_util.py
===================================================================
--- twisted/web/test/_util.py	(revision 33677)
+++ twisted/web/test/_util.py	(working copy)
@@ -14,22 +14,6 @@
 from twisted.web.error import FlattenerError
 
 
-def _render(resource, request):
-    result = resource.render(request)
-    if isinstance(result, str):
-        request.write(result)
-        request.finish()
-        return succeed(None)
-    elif result is server.NOT_DONE_YET:
-        if request.finished:
-            return succeed(None)
-        else:
-            return request.notifyFinish()
-    else:
-        raise ValueError("Unexpected return value: %r" % (result,))
-
-
-
 class FlattenTestCase(TestCase):
     """
     A test case that assists with testing L{twisted.web._flatten}.
Index: twisted/web/test/test_static.py
===================================================================
--- twisted/web/test/test_static.py	(revision 33677)
+++ twisted/web/test/test_static.py	(working copy)
@@ -18,7 +18,7 @@
 from twisted.web import static, http, script, resource
 from twisted.web.server import UnsupportedMethod
 from twisted.web.test.test_web import DummyRequest
-from twisted.web.test._util import _render
+from twisted.web.test.util import render
 
 
 class StaticDataTests(TestCase):
@@ -32,9 +32,9 @@
         data = static.Data("foo", "bar")
         request = DummyRequest([''])
         request.method = 'HEAD'
-        d = _render(data, request)
-        def cbRendered(ignored):
-            self.assertEqual(''.join(request.written), "")
+        d = render(data, request)
+        def cbRendered(res):
+            self.assertEqual(res, "")
         d.addCallback(cbRendered)
         return d
 
@@ -56,7 +56,7 @@
     Tests for the basic behavior of L{File}.
     """
     def _render(self, resource, request):
-        return _render(resource, request)
+        return render(resource, request)
 
 
     def test_invalidMethod(self):
@@ -168,8 +168,8 @@
         child = resource.getChildForRequest(file, request)
 
         d = self._render(child, request)
-        def cbRendered(ignored):
-            self.assertEqual(''.join(request.written), 'baz')
+        def cbRendered(res):
+            self.assertEqual(res, 'baz')
             self.assertEqual(request.outgoingHeaders['content-length'], '3')
         d.addCallback(cbRendered)
         return d
@@ -190,8 +190,8 @@
         child = resource.getChildForRequest(file, request)
 
         d = self._render(child, request)
-        def cbRendered(ignored):
-            self.assertEqual(''.join(request.written), 'baz')
+        def cbRendered(res):
+            self.assertEqual(res, 'baz')
             self.assertEqual(request.outgoingHeaders['content-length'], '3')
         d.addCallback(cbRendered)
         return d
@@ -218,10 +218,10 @@
         request2 = DummyRequest(['foo.bar'])
         d = self._render(staticFile, request)
         d2 = self._render(staticFile.childNotFound, request2)
-        def cbRendered2(ignored):
-            def cbRendered(ignored):
-                self.assertEqual(''.join(request.written),
-                                  ''.join(request2.written))
+        def cbRendered2(res):
+            def cbRendered(res2):
+                self.assertEqual(res,
+                                  res2)
             d.addCallback(cbRendered)
             return d
         d2.addCallback(cbRendered2)
@@ -238,9 +238,9 @@
         file = static.File(path.path)
         request = DummyRequest([''])
         request.method = 'HEAD'
-        d = _render(file, request)
-        def cbRendered(ignored):
-            self.assertEqual("".join(request.written), "")
+        d = render(file, request)
+        def cbRendered(res):
+            self.assertEqual(res, "")
         d.addCallback(cbRendered)
         return d
 
@@ -264,8 +264,8 @@
         child = resource.getChildForRequest(file, request)
 
         d = self._render(child, request)
-        def cbRendered(ignored):
-            self.assertEqual(''.join(request.written), 'dynamic world')
+        def cbRendered(res):
+            self.assertEqual(res, 'dynamic world')
             self.assertEqual(request.outgoingHeaders['content-length'], '13')
         d.addCallback(cbRendered)
         return d
@@ -303,8 +303,8 @@
         child = resource.getChildForRequest(file, request)
 
         d = self._render(child, request)
-        def cbRendered(ignored):
-            self.assertEqual(''.join(request.written), 'baz')
+        def cbRendered(res):
+            self.assertEqual(res, 'baz')
         d.addCallback(cbRendered)
         return d
 
@@ -1454,7 +1454,7 @@
         lister = static.DirectoryLister(path.path)
         request = self._request('')
         child = resource.getChildForRequest(lister, request)
-        result = _render(child, request)
+        result = render(child, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, http.NOT_FOUND)
         result.addCallback(cbRendered)
Index: twisted/web/test/test_distrib.py
===================================================================
--- twisted/web/test/test_distrib.py	(revision 33677)
+++ twisted/web/test/test_distrib.py	(working copy)
@@ -21,7 +21,7 @@
 from twisted.spread.banana import SIZE_LIMIT
 from twisted.web import http, distrib, client, resource, static, server
 from twisted.web.test.test_web import DummyRequest
-from twisted.web.test._util import _render
+from twisted.web.test.util import render
 
 
 class MySite(server.Site):
@@ -190,7 +190,7 @@
         self.sub = subscription = distrib.ResourceSubscription(
             "127.0.0.1", serverPort.getHost().port)
         request = DummyRequest([''])
-        d = _render(subscription, request)
+        d = render(subscription, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, 500)
             # This is the error we caused the request to fail with.  It should
@@ -244,7 +244,7 @@
         """
         request = DummyRequest([name])
         result = self.directory.getChild(name, request)
-        d = _render(result, request)
+        d = render(result, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, 404)
         d.addCallback(cbRendered)
@@ -326,9 +326,9 @@
         web.child('.twistd-web-pb').setContent("")
 
         request = DummyRequest([''])
-        result = _render(self.directory, request)
-        def cbRendered(ignored):
-            document = parseString(''.join(request.written))
+        result = render(self.directory, request)
+        def cbRendered(res):
+            document = parseString(res)
 
             # Each user should have an li with a link to their page.
             [alice, bob] = document.getElementsByTagName('li')
Index: twisted/web/test/test_vhost.py
===================================================================
--- twisted/web/test/test_vhost.py	(revision 33677)
+++ twisted/web/test/test_vhost.py	(working copy)
@@ -11,7 +11,7 @@
 from twisted.web.static import Data
 from twisted.web.vhost import NameVirtualHost
 from twisted.web.test.test_web import DummyRequest
-from twisted.web.test._util import _render
+from twisted.web.test.util import render
 
 class NameVirtualHostTests(TestCase):
     """
@@ -38,7 +38,7 @@
         """
         virtualHostResource = NameVirtualHost()
         request = DummyRequest([''])
-        d = _render(virtualHostResource, request)
+        d = render(virtualHostResource, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
         d.addCallback(cbRendered)
@@ -56,18 +56,18 @@
 
         request = DummyRequest([''])
         request.headers['host'] = 'example.org'
-        d = _render(virtualHostResource, request)
-        def cbRendered(ignored, request):
-            self.assertEqual(''.join(request.written), "winner")
-        d.addCallback(cbRendered, request)
+        d = render(virtualHostResource, request)
+        def cbRendered(res):
+            self.assertEqual(res, "winner")
+        d.addCallback(cbRendered)
 
         # The port portion of the Host header should not be considered.
         requestWithPort = DummyRequest([''])
         requestWithPort.headers['host'] = 'example.org:8000'
-        dWithPort = _render(virtualHostResource, requestWithPort)
-        def cbRendered(ignored, requestWithPort):
-            self.assertEqual(''.join(requestWithPort.written), "winner")
-        dWithPort.addCallback(cbRendered, requestWithPort)
+        dWithPort = render(virtualHostResource, requestWithPort)
+        def cbRendered(res):
+            self.assertEqual(res, "winner")
+        dWithPort.addCallback(cbRendered)
 
         return gatherResults([d, dWithPort])
 
@@ -82,9 +82,9 @@
         virtualHostResource.default = Data("correct data", "")
         request = DummyRequest([''])
         request.headers['host'] = 'example.com'
-        d = _render(virtualHostResource, request)
-        def cbRendered(ignored):
-            self.assertEqual(''.join(request.written), "correct data")
+        d = render(virtualHostResource, request)
+        def cbRendered(res):
+            self.assertEqual(res, "correct data")
         d.addCallback(cbRendered)
         return d
 
@@ -98,7 +98,7 @@
         virtualHostResource = NameVirtualHost()
         request = DummyRequest([''])
         request.headers['host'] = 'example.com'
-        d = _render(virtualHostResource, request)
+        d = render(virtualHostResource, request)
         def cbRendered(ignored):
             self.assertEqual(request.responseCode, NOT_FOUND)
         d.addCallback(cbRendered)
Index: twisted/web/test/test_util.py
===================================================================
--- twisted/web/test/test_util.py	(revision 33677)
+++ twisted/web/test/test_util.py	(working copy)
@@ -2,7 +2,7 @@
 # See LICENSE for details.
 
 """
-Tests for L{twisted.web.util}.
+Tests for L{twisted.web.util} and L{twisted.web.test.util}.
 """
 
 from twisted.python.failure import Failure
@@ -15,8 +15,10 @@
     FailureElement, formatFailure)
 
 from twisted.web.http import FOUND
-from twisted.web.server import Request
+from twisted.web.server import Request, NOT_DONE_YET
 from twisted.web.template import TagLoader, flattenString, tags
+from twisted.web.resource import Resource
+from twisted.web.test.util import render
 
 from twisted.web.test.test_web import DummyChannel
 
@@ -378,3 +380,47 @@
         L{twisted.web.util.stylesheet} is deprecated.
         """
         self._htmlHelperDeprecationTest("stylesheet")
+
+
+
+class RenderTestCase(TestCase):
+    """
+    Tests for L{render}.
+    """
+
+    def test_render(self):
+        request = DummyRequest("")
+        class TestResource(Resource):
+            def render(self, request):
+                return "test-result"
+        d = render(TestResource(), request)
+        def cbRendered(res):
+            self.assertEqual(res, "test-result")
+        d.addCallback(cbRendered)
+        return d
+
+
+    def test_render_write(self):
+        request = DummyRequest("")
+        class TestResource(Resource):
+            def render(self, request):
+                request.write("test-result")
+                return ""
+        d = render(TestResource(), request)
+        def cbRendered(res):
+            self.assertEqual(res, "test-result")
+        d.addCallback(cbRendered)
+        return d
+
+    def test_render_NOT_DONE_YET(self):
+        request = DummyRequest("")
+        class TestResource(Resource):
+            def render(self, request):
+                return NOT_DONE_YET
+        d = render(TestResource(), request)
+        def cbRendered(res):
+            self.assertEqual(res, "test-result")
+        d.addCallback(cbRendered)
+        request.write("test-results")
+        request.finish()
+        return d
