Index: docs/core/examples/ssl_clientauth_server_endpoints.py
===================================================================
--- docs/core/examples/ssl_clientauth_server_endpoints.py	(revision 46033)
+++ docs/core/examples/ssl_clientauth_server_endpoints.py	(working copy)
@@ -11,9 +11,24 @@
 
 def main(reactor):
     log.startLogging(sys.stdout)
+    # Set up a factory to create connection handlers for our server
     factory = protocol.Factory.forProtocol(echoserv.Echo)
-    descriptor = "ssl:8000:verifyCACerts=public.pem:requireCert=yes"
+    # Set the descriptor we'll pass to serverFromString.
+    #   ssl: Use SSL for the socket (as opposed to TCP (unsecured) or another
+    #     kind of connection
+    #   8000: The port number on which to listen
+    #   caCertsDir=.: Look to the current directory ('.') for the CA
+    #     certificates against which to verify client certificates.
+    #     You'll probably specify a different directory for your application;
+    #     '.' works for the example scripts directory here.
+    #   requireCert=yes: This makes the socket reject client connections that
+    #     do not provide a certificate that passes validation using the CA
+    #     certs in caCertsDir.
+    descriptor = "ssl:8000:caCertsDir=.:requireCert=yes"
+    # Pass the reactor and descriptor to serverFromString so we can have an
+    # endpoint
     endpoint = endpoints.serverFromString(reactor, descriptor)
+    # Listen on the endpoint using the factory
     endpoint.listen(factory)
     return defer.Deferred()
 
Index: docs/core/howto/endpoints.rst
===================================================================
--- docs/core/howto/endpoints.rst	(revision 46033)
+++ docs/core/howto/endpoints.rst	(working copy)
@@ -204,10 +204,10 @@
      Such a file can be created using ``openssl dhparam -out dh_param_1024.pem -2 1024``.
      Please refer to `OpenSSL's documentation on dhparam <http://www.openssl.org/docs/apps/dhparam.html>`_ for further details.
    - ``caCertsDir`` will verify client certificates using CA certificates in the provided directory if specified. Certificates that pass verification will be accessible from the connection's transport (:api:`twisted.internet.interfaces.ISSLTransport.getPeerCertificate <ISSLTransport.getPeerCertificate>`)
-   - ``requireCert`` will, if set to ``yes``, require clients to have valid certificates and disconnect clients that do not.
-   - ``retrieveCerts`` functions when ``caCertsDir`` is not used. When set to ``yes``, certificates will be retrieved from the client without doing any verification with a certificate authority.
+   - ``requireCert`` will, if set to ``yes``, require clients to have valid certificates and disconnect clients that do not. Certificates must pass verification with a CA cert in ``caCertsDir``. This parameter does nothing when ``caCertsDir`` is not used.
+   - ``retrieveCerts`` will retrieve client certificates without verifying them. When set to ``yes``, certificates will be retrieved from the client without doing any verification with a certificate authority.
      You may use this argument to gain access to certificates to identify users through :api:`twisted.internet.interfaces.ISSLTransport.getPeerCertificate <getPeerCertificate>`,
-     but you should not use it if you need to use certificates for anything important for security.
+     but you should not use it if you need to use certificates for anything important for security. This parameter does nothing when ``caCertsDir`` is used since ``caCertsDir`` is a more secure alternative.
 
    For example, ``ssl:port=443:privateKey=/etc/ssl/server.pem:extraCertChain=/etc/ssl/chain.pem:sslmethod=SSLv3_METHOD:``
    ``dhParameters=dh_param_1024.pem:caCertsDir=/etc/ssl/certs:requireCert=yes``.
