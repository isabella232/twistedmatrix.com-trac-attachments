Index: twisted/internet/_sslverify.py
===================================================================
--- twisted/internet/_sslverify.py	(revision 46483)
+++ twisted/internet/_sslverify.py	(working copy)
@@ -1340,9 +1340,9 @@
         ['trustRoot', 'requireCertificate'],
         ['trustRoot', 'verify'],
         ['trustRoot', 'caCerts'],
-        ['trustRoot', 'getClientCertificate'],
-        ['getClientCertificate', 'verify'],
-        ['getClientCertificate', 'caCerts'],
+        ['trustRoot', 'getPeerCertificate'],
+        ['getPeerCertificate', 'verify'],
+        ['getPeerCertificate', 'caCerts'],
     ])
     def __init__(self,
                  privateKey=None,
@@ -1362,7 +1362,7 @@
                  dhParameters=None,
                  trustRoot=None,
                  acceptableProtocols=None,
-                 getClientCertificate=False,
+                 getPeerCertificate=False,
                  ):
         """
         Create an OpenSSL context SSL connection context factory.
@@ -1463,11 +1463,11 @@
             earlier in the list are preferred over those later in the list.
         @type acceptableProtocols: C{list} of C{bytes}
 
-        @param getClientCertificate: If L{True}, allows retrieval of peer
+        @param getPeerCertificate: If L{True}, allows retrieval of peer
             certificates even without CA verification. Defaults to L{False}.
             It is mutually exclusive with C{caCerts}, C{verify}, and
             C{trustRoot}.
-        @type getClientCertificate: C{bool}
+        @type getPeerCertificate: C{bool}
 
         @raise ValueError: when C{privateKey} or C{certificate} are set without
             setting the respective other.
@@ -1481,7 +1481,7 @@
         @raise TypeError: if C{trustRoot} is passed in combination with
             C{caCert}, C{verify}, or C{requireCertificate}.  Please prefer
             C{trustRoot} in new code, as its semantics are less tricky.
-        @raise TypeError: if C{getClientCertificate} is passed in combination
+        @raise TypeError: if C{getPeerCertificate} is passed in combination
             with one of its mutually exclusive arguments.
         @raises NotImplementedError: If acceptableProtocols were provided but
             no negotiation mechanism is available.
@@ -1574,7 +1574,7 @@
             )
 
         self._acceptableProtocols = acceptableProtocols
-        self._getClientCertificate = getClientCertificate
+        self._getPeerCertificate = getPeerCertificate
 
 
     def __getstate__(self):
@@ -1619,18 +1619,20 @@
             if self.verifyOnce:
                 verifyFlags |= SSL.VERIFY_CLIENT_ONCE
             self.trustRoot._addCACertsToContext(ctx)
-        elif self._getClientCertificate:
+        elif self._getPeerCertificate:
             verifyFlags = SSL.VERIFY_PEER
 
-        def _verifyCallback(conn, cert, errno, depth, preverify_ok):
-            if self._getClientCertificate:
-                # Accept any certificate as we don't do validation at this
-                # stage.
-                return True
+        def _verifyCallbackWrapper(certOpts):
+            def _verifyCallback(conn, cert, errno, depth, preverify_ok):
+                if certOpts._getPeerCertificate:
+                    # Accept any certificate as we don't do validation at this
+                    # stage.
+                    return True
 
-            # Accept the default validation.
-            return preverify_ok
-        ctx.set_verify(verifyFlags, _verifyCallback)
+                # Accept the default validation.
+                return preverify_ok
+            return _verifyCallback
+        ctx.set_verify(verifyFlags, _verifyCallbackWrapper(self))
 
         if self.verifyDepth is not None:
             ctx.set_verify_depth(self.verifyDepth)
Index: twisted/internet/endpoints.py
===================================================================
--- twisted/internet/endpoints.py	(revision 46483)
+++ twisted/internet/endpoints.py	(working copy)
@@ -1132,7 +1132,8 @@
         )
 
     if getClientCertificate is not None:
-        kw["getClientCertificate"] = _valueToBool(getClientCertificate)
+        kw["getPeerCertificate"] = _valueToBool("getClientCertificate",
+                                                  getClientCertificate)
 
     cf = ssl.CertificateOptions(
         privateKey=privateCertificate.privateKey.original,
@@ -1146,7 +1147,7 @@
 
 
 
-def _valueToBool(value):
+def _valueToBool(keyName, value):
     """
     Helper for C{bool} parsing.
 
@@ -1164,7 +1165,7 @@
         return False
 
     raise ValueError(
-        'The value of getClientCertificate must be a yes/no value.')
+        "The value of {} must be a yes/no value.".format(keyName))
 
 
 
Index: twisted/internet/test/test_endpoints.py
===================================================================
--- twisted/internet/test/test_endpoints.py	(revision 46483)
+++ twisted/internet/test/test_endpoints.py	(working copy)
@@ -2665,7 +2665,7 @@
             .format(escapedPEMPathName, escapedPEMPathName)
         )
         cf = server._sslContextFactory
-        self.assertTrue(cf._getClientCertificate)
+        self.assertTrue(cf._getPeerCertificate)
 
     def test_getClientCertificateNo(self):
         """
@@ -2679,7 +2679,7 @@
             .format(escapedPEMPathName, escapedPEMPathName)
         )
         cf = server._sslContextFactory
-        self.assertFalse(cf._getClientCertificate)
+        self.assertFalse(cf._getPeerCertificate)
 
     def test_getClientCertificateTrue(self):
         """
@@ -2693,7 +2693,7 @@
             .format(escapedPEMPathName, escapedPEMPathName)
         )
         cf = server._sslContextFactory
-        self.assertTrue(cf._getClientCertificate)
+        self.assertTrue(cf._getPeerCertificate)
 
     def test_getClientCertificateFalse(self):
         """
@@ -2707,7 +2707,7 @@
             .format(escapedPEMPathName, escapedPEMPathName)
         )
         cf = server._sslContextFactory
-        self.assertFalse(cf._getClientCertificate)
+        self.assertFalse(cf._getPeerCertificate)
 
     def test_getClientCertificateJunk(self):
         """
Index: twisted/test/test_sslverify.py
===================================================================
--- twisted/test/test_sslverify.py	(revision 46483)
+++ twisted/test/test_sslverify.py	(working copy)
@@ -731,6 +731,44 @@
         )
 
 
+    def test_constructorDoesNotAllowGetPeerCertificateWithVerify(self):
+        """
+        C{getPeerCertificate} with verify is redundant and should be rejected.
+        """
+        self.assertRaises(
+            TypeError,
+            sslverify.OpenSSLCertificateOptions,
+            verify=True,
+            getPeerCertificate=True
+        )
+
+
+    def test_constructorDoesNotAllowGetPeerCertificateWithCACerts(self):
+        """
+        C{getPeerCertificate} with C{caCerts} is incorrect and should be
+        rejected.
+        """
+        self.assertRaises(
+            TypeError,
+            sslverify.OpenSSLCertificateOptions,
+            caCerts=self.caCerts,
+            getPeerCertificate=True
+        )
+
+
+    def test_constructorDoesNotAllowGetPeerCertificateWithTrustRoot(self):
+        """
+        C{getPeerCertificate} with C{trustRoot} doesn't make sense and should
+        be rejected.
+        """
+        self.assertRaises(
+            TypeError,
+            sslverify.OpenSSLCertificateOptions,
+            trustRoot=None,
+            getPeerCertificate=True
+        )
+
+
     def test_extraChainFilesAreAddedIfSupplied(self):
         """
         If C{extraCertChain} is set and all prerequisites are met, the
