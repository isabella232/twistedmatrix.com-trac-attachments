Index: twisted/web2/twcgi.py
===================================================================
--- twisted/web2/twcgi.py	(revision 13529)
+++ twisted/web2/twcgi.py	(working copy)
@@ -103,7 +103,7 @@
             envname = "HTTP_" + envname
         env[envname] = ','.join(header)
             
-    return env
+    return env, qargs
 
 
 class CGIScript(resource.LeafResource):
@@ -129,7 +129,7 @@
         # Make sure that we don't have an unknown content-length
         if request.stream.length is None:
             return http.Response(responsecode.LENGTH_REQUIRED)
-        env = createCGIEnvironment(ctx, request=request)
+        env, qargs = createCGIEnvironment(ctx, request=request)
         env['SCRIPT_FILENAME'] = self.filename
         return self.runProcess(env, request, qargs)
 
--- /dev/null	2005-04-08 15:51:33.877631232 -0700
+++ twisted/web2/test/test_cgi.py	2005-04-12 19:07:39.000000000 -0700
@@ -0,0 +1,37 @@
+#! /usr/bin/python
+
+from twisted.trial import unittest
+from twisted.internet import reactor
+from twisted.python import util
+from twisted.web2 import static, twcgi, server, resource
+from twisted.web import client
+
+class CGI(unittest.TestCase):
+    def startServer(self, cgi):
+        root = resource.Resource()
+        cgipath = util.sibpath(__file__, cgi)
+        root.putChild("cgi", twcgi.CGIScript(cgipath))
+        site = server.Site(root)
+        self.p = reactor.listenTCP(0, site)
+        return self.p.getHost().port
+
+    def tearDown(self):
+        if self.p:
+            return self.p.stopListening()
+
+    def testCGI(self):
+        portnum = self.startServer("cgi_dummy.py")
+        d = client.getPage("http://localhost:%d/cgi" % portnum)
+        d.addCallback(self._testCGI_1)
+        return d
+    def _testCGI_1(self, res):
+        self.failUnlessEqual(res, "cgi output\n")
+
+    def testReadInput(self):
+        portnum = self.startServer("cgi_readinput.py")
+        d = client.getPage("http://localhost:%d/cgi" % portnum)
+        d.addCallback(self._testReadInput_1)
+        return d
+    testReadInput.timeout = 5
+    def _testReadInput_1(self, res):
+        self.failUnlessEqual(res, "readinput ok\n")
--- /dev/null	2005-04-08 15:51:33.877631232 -0700
+++ twisted/web2/test/cgi_dummy.py	2005-04-12 18:58:00.000000000 -0700
@@ -0,0 +1,5 @@
+#! /usr/bin/python
+
+print "Header: OK"
+print
+print "cgi output"
--- /dev/null	2005-04-08 15:51:33.877631232 -0700
+++ twisted/web2/test/cgi_readinput.py	2005-04-12 18:58:00.000000000 -0700
@@ -0,0 +1,8 @@
+#! /usr/bin/python
+
+import sys
+
+indata = sys.stdin.read()
+print "Header: OK"
+print
+print "readinput ok"
