Index: doc/web/howto/newweb.xhtml
===================================================================
--- doc/web/howto/newweb.xhtml	(revision 13637)
+++ doc/web/howto/newweb.xhtml	(working copy)
@@ -17,14 +17,30 @@
 <h3>Standard HTTP server (<code>http.py</code>)</h3>
 The standard low-level HTTP server infrastructure is comprised of three layers: the <code>http.HTTPFactory</code>, <code>http.HTTPChannel</code>, and <code>http.ChannelRequest</code>. 
 
-<h4><code>HTTPFactory</code></h4>
-This object doesn't have much on it -- it's a protocol ServerFactory that creates a <code>HTTPChannel</code> object for each incoming request. It also holds some variables to fiddle with: <code>timeOut</code> and <code>maxPipeline</code>. The user-level server.Site object is a subclass of this. (TODO: I don't think server.Site shouldn't inherit from this, as it means you can't have a Site on a CGI easily...)
+<ul>
+  <li><code>HTTPFactory</code>: <p>This object doesn't have much on it --
+  it's a protocol ServerFactory that creates a <code>HTTPChannel</code>
+  object for each incoming request. It also holds some variables to fiddle
+  with: <code>timeOut</code> and <code>maxPipeline</code>. The user-level
+  server.Site object is a subclass of this. (TODO: I don't think server.Site
+  shouldn't inherit from this, as it means you can't have a Site on a CGI
+  easily...)</p></li>
 
-<h4><code>HTTPChannel</code></h4>
-This object handles the very lowest level parsing: it separates the incoming stream into multiple requests, and creates a ChannelRequest to do the parsing of that request. Its implementation is closely tied to the implementation of ChannelRequest -- there is no well-defined interface.
+  <li><code>HTTPChannel</code>: <p>This object handles the very lowest level
+  parsing: it separates the incoming stream into multiple requests, and
+  creates a ChannelRequest to do the parsing of that request. Its
+  implementation is closely tied to the implementation of ChannelRequest --
+  there is no well-defined interface.</p></li>
 
-<h4><code>HTTPChannelRequest</code></h4>
-The <code>HTTPChannelRequest</code> object encompasses the state and parsing functions for one HTTP request. It is responsible for all the low-level connection oriented behavior of the HTTP request. Thus, it takes care of keep-alive, de-chunking, etc., and only passes the non-connection headers up to the user-level Request object. It has a well-defined interface (<code>iweb.IChanRequest</code>). See <code>iweb.IChanRequestCallbacks</code> for the methods it requires on the Request object. 
+  <li><code>HTTPChannelRequest</code>: <p>The <code>HTTPChannelRequest</code>
+  object encompasses the state and parsing functions for one HTTP request. It
+  is responsible for all the low-level connection oriented behavior of the
+  HTTP request. Thus, it takes care of keep-alive, de-chunking, etc., and
+  only passes the non-connection headers up to the user-level Request object.
+  It has a well-defined interface (<code>iweb.IChanRequest</code>). See
+  <code>iweb.IChanRequestCallbacks</code> for the methods it requires on the
+  Request object.</p></li>
+</ul>
 
 <h3>CGI server (<code>cgichannel.py</code>)</h3>
 This server mode can only handle a single request per process. But, other than that, the idea is to support the standard twisted.web interface. Thus, the <code>CGIChannelRequest</code> object provides the same interface (<code>iweb.IChanRequest</code>) as the standard HTTP server and you can build a standard app on top of it.
