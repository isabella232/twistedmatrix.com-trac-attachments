diff --git twisted/conch/ssh/_kex.py twisted/conch/ssh/_kex.py
index e473b88..e2cb381 100644
--- twisted/conch/ssh/_kex.py
+++ twisted/conch/ssh/_kex.py
@@ -6,13 +6,12 @@
 SSH key exchange handling.
 """
 
-from hashlib import sha1, sha256
+from hashlib import sha1, sha256, sha384, sha512
 
 from zope.interface import Attribute, implementer, Interface
 
 from twisted.conch import error
 
-
 class _IKexAlgorithm(Interface):
     """
     An L{_IKexAlgorithm} describes a key exchange algorithm.
@@ -45,6 +44,12 @@ class _IFixedGroupKexAlgorithm(_IKexAlgorithm):
         "Python generator functions.)")
 
 
+class _IEllipticCurveExchangeKexAlgorithm(_IKexAlgorithm):
+    """
+    An L{_IEllipticCurveExchangeKexAlgorithm} describes a key exchange algorithm
+    that uses an elliptic curve exchange between the client and server.
+    """
+
 
 class _IGroupExchangeKexAlgorithm(_IKexAlgorithm):
     """
@@ -55,6 +60,33 @@ class _IGroupExchangeKexAlgorithm(_IKexAlgorithm):
     requested size. See RFC 4419.
     """
 
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH256(object):
+    """
+    Elliptic Curve Key Exchange with SHA-256 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 1
+    hashProcessor = sha256
+
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH384(object):
+    """
+    Elliptic Curve Key Exchange with SHA-384 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 2
+    hashProcessor = sha384
+
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH512(object):
+    """
+    Elliptic Curve Key Exchange with SHA-512 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 3
+    hashProcessor = sha512
+
 
 
 @implementer(_IGroupExchangeKexAlgorithm)
@@ -64,7 +96,7 @@ class _DHGroupExchangeSHA256(object):
     RFC 4419, 4.2.
     """
 
-    preference = 1
+    preference = 4
     hashProcessor = sha256
 
 
@@ -76,7 +108,7 @@ class _DHGroupExchangeSHA1(object):
     RFC 4419, 4.1.
     """
 
-    preference = 2
+    preference = 5
     hashProcessor = sha1
 
 
@@ -88,7 +120,7 @@ class _DHGroup1SHA1(object):
     (1024-bit MODP Group). Defined in RFC 4253, 8.1.
     """
 
-    preference = 3
+    preference = 6
     hashProcessor = sha1
     # Diffie-Hellman primes from Oakley Group 2 (RFC 2409, 6.2).
     prime = long('17976931348623159077083915679378745319786029604875601170644'
@@ -107,7 +139,7 @@ class _DHGroup14SHA1(object):
     (2048-bit MODP Group). Defined in RFC 4253, 8.2.
     """
 
-    preference = 4
+    preference = 7
     hashProcessor = sha1
     # Diffie-Hellman primes from Oakley Group 14 (RFC 3526, 3).
     prime = long('32317006071311007300338913926423828248817941241140239112842'
@@ -123,13 +155,24 @@ class _DHGroup14SHA1(object):
     generator = 2L
 
 
-
+#Which ECDH hash function to use is dependent on the size.
 _kexAlgorithms = {
     "diffie-hellman-group-exchange-sha256": _DHGroupExchangeSHA256(),
     "diffie-hellman-group-exchange-sha1": _DHGroupExchangeSHA1(),
     "diffie-hellman-group1-sha1": _DHGroup1SHA1(),
     "diffie-hellman-group14-sha1": _DHGroup14SHA1(),
-    }
+    'ecdh-sha2-nistp256' : _ECDH256(),
+    'ecdh-sha2-nistp384' : _ECDH384(),
+    'ecdh-sha2-nistp521' : _ECDH512(),
+    'ecdh-sha2-nistk163' : _ECDH256(),
+    'ecdh-sha2-nistp224' : _ECDH256(),
+    'ecdh-sha2-nistk233' : _ECDH256(),
+    'ecdh-sha2-nistb233' : _ECDH256(),
+    'ecdh-sha2-nistk283' : _ECDH384(),
+    'ecdh-sha2-nistk409' : _ECDH384(),
+    'ecdh-sha2-nistb409' : _ECDH384(),
+    'ecdh-sha2-nistt571' : _ECDH512()
+    } 
 
 
 
@@ -152,6 +195,19 @@ def getKex(kexAlgorithm):
     return _kexAlgorithms[kexAlgorithm]
 
 
+def isEllipticCurve(kexAlgorithm):
+    """
+    Returns C{True} if C{kexAlgorithm} is an elliptic curve.
+
+    @param kexAlgorithm: The key exchange algorithm name.
+    @type kexAlgorithm: C{str}
+
+    @return: C{True} if C{kexAlgorithm} is an elliptic curve,
+        otherwise C{False}.
+    @rtype: C{bool}
+    """
+    return _IEllipticCurveExchangeKexAlgorithm.providedBy(getKex(kexAlgorithm))
+
 
 def isFixedGroup(kexAlgorithm):
     """
