diff --git twisted/conch/ssh/_kex.py twisted/conch/ssh/_kex.py
index e473b88..e2cb381 100644
--- twisted/conch/ssh/_kex.py
+++ twisted/conch/ssh/_kex.py
@@ -6,13 +6,12 @@
 SSH key exchange handling.
 """
 
-from hashlib import sha1, sha256
+from hashlib import sha1, sha256, sha384, sha512
 
 from zope.interface import Attribute, implementer, Interface
 
 from twisted.conch import error
 
-
 class _IKexAlgorithm(Interface):
     """
     An L{_IKexAlgorithm} describes a key exchange algorithm.
@@ -45,6 +44,12 @@ class _IFixedGroupKexAlgorithm(_IKexAlgorithm):
         "Python generator functions.)")
 
 
+class _IEllipticCurveExchangeKexAlgorithm(_IKexAlgorithm):
+    """
+    An L{_IEllipticCurveExchangeKexAlgorithm} describes a key exchange algorithm
+    that uses an elliptic curve exchange between the client and server.
+    """
+
 
 class _IGroupExchangeKexAlgorithm(_IKexAlgorithm):
     """
@@ -55,6 +60,33 @@ class _IGroupExchangeKexAlgorithm(_IKexAlgorithm):
     requested size. See RFC 4419.
     """
 
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH256(object):
+    """
+    Elliptic Curve Key Exchange with SHA-256 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 1
+    hashProcessor = sha256
+
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH384(object):
+    """
+    Elliptic Curve Key Exchange with SHA-384 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 2
+    hashProcessor = sha384
+
+@implementer(_IEllipticCurveExchangeKexAlgorithm)
+class _ECDH512(object):
+    """
+    Elliptic Curve Key Exchange with SHA-512 as HASH. Defined in
+    RFC 5656.
+    """
+    preference = 3
+    hashProcessor = sha512
+
 
 
 @implementer(_IGroupExchangeKexAlgorithm)
@@ -64,7 +96,7 @@ class _DHGroupExchangeSHA256(object):
     RFC 4419, 4.2.
     """
 
-    preference = 1
+    preference = 4
     hashProcessor = sha256
 
 
@@ -76,7 +108,7 @@ class _DHGroupExchangeSHA1(object):
     RFC 4419, 4.1.
     """
 
-    preference = 2
+    preference = 5
     hashProcessor = sha1
 
 
@@ -88,7 +120,7 @@ class _DHGroup1SHA1(object):
     (1024-bit MODP Group). Defined in RFC 4253, 8.1.
     """
 
-    preference = 3
+    preference = 6
     hashProcessor = sha1
     # Diffie-Hellman primes from Oakley Group 2 (RFC 2409, 6.2).
     prime = long('17976931348623159077083915679378745319786029604875601170644'
@@ -107,7 +139,7 @@ class _DHGroup14SHA1(object):
     (2048-bit MODP Group). Defined in RFC 4253, 8.2.
     """
 
-    preference = 4
+    preference = 7
     hashProcessor = sha1
     # Diffie-Hellman primes from Oakley Group 14 (RFC 3526, 3).
     prime = long('32317006071311007300338913926423828248817941241140239112842'
@@ -123,13 +155,24 @@ class _DHGroup14SHA1(object):
     generator = 2L
 
 
-
+#Which ECDH hash function to use is dependent on the size.
 _kexAlgorithms = {
     "diffie-hellman-group-exchange-sha256": _DHGroupExchangeSHA256(),
     "diffie-hellman-group-exchange-sha1": _DHGroupExchangeSHA1(),
     "diffie-hellman-group1-sha1": _DHGroup1SHA1(),
     "diffie-hellman-group14-sha1": _DHGroup14SHA1(),
-    }
+    'ecdh-sha2-nistp256' : _ECDH256(),
+    'ecdh-sha2-nistp384' : _ECDH384(),
+    'ecdh-sha2-nistp521' : _ECDH512(),
+    'ecdh-sha2-nistk163' : _ECDH256(),
+    'ecdh-sha2-nistp224' : _ECDH256(),
+    'ecdh-sha2-nistk233' : _ECDH256(),
+    'ecdh-sha2-nistb233' : _ECDH256(),
+    'ecdh-sha2-nistk283' : _ECDH384(),
+    'ecdh-sha2-nistk409' : _ECDH384(),
+    'ecdh-sha2-nistb409' : _ECDH384(),
+    'ecdh-sha2-nistt571' : _ECDH512()
+    } 
 
 
 
@@ -152,6 +195,19 @@ def getKex(kexAlgorithm):
     return _kexAlgorithms[kexAlgorithm]
 
 
+def isEllipticCurve(kexAlgorithm):
+    """
+    Returns C{True} if C{kexAlgorithm} is an elliptic curve.
+
+    @param kexAlgorithm: The key exchange algorithm name.
+    @type kexAlgorithm: C{str}
+
+    @return: C{True} if C{kexAlgorithm} is an elliptic curve,
+        otherwise C{False}.
+    @rtype: C{bool}
+    """
+    return _IEllipticCurveExchangeKexAlgorithm.providedBy(getKex(kexAlgorithm))
+
 
 def isFixedGroup(kexAlgorithm):
     """
diff --git twisted/conch/ssh/factory.py twisted/conch/ssh/factory.py
index 6f8f104..934db68 100644
--- twisted/conch/ssh/factory.py
+++ twisted/conch/ssh/factory.py
@@ -59,7 +59,7 @@ class SSHFactory(protocol.Factory):
                     'because we cannot find moduli file')
             t.supportedKeyExchanges = [
                 kexAlgorithm for kexAlgorithm in t.supportedKeyExchanges
-                if _kex.isFixedGroup(kexAlgorithm)]
+                if _kex.isFixedGroup(kexAlgorithm) or (hasattr(_kex, "isEllipticCurve") and _kex.isEllipticCurve(kexAlgorithm))]
         return t
 
 
diff --git twisted/conch/ssh/keys.py twisted/conch/ssh/keys.py
index 64975d1..f5a3744 100644
--- twisted/conch/ssh/keys.py
+++ twisted/conch/ssh/keys.py
@@ -11,13 +11,16 @@ from __future__ import absolute_import, division
 import base64
 import itertools
 import warnings
+import re
 
 from hashlib import md5
 
-from cryptography.exceptions import InvalidSignature
+from cryptography.exceptions import InvalidSignature, UnsupportedAlgorithm
 from cryptography.hazmat.backends import default_backend
 from cryptography.hazmat.primitives import hashes, serialization
-from cryptography.hazmat.primitives.asymmetric import dsa, rsa, padding
+from cryptography.hazmat.primitives.asymmetric import dsa, rsa, padding, ec
+from cryptography.hazmat.primitives.serialization import load_der_private_key, load_der_public_key, load_pem_private_key, load_pem_public_key, load_ssh_public_key
+
 try:
     from cryptography.hazmat.primitives.asymmetric.utils import (
         encode_dss_signature, decode_dss_signature)
@@ -39,6 +42,47 @@ from twisted.python.compat import iterbytes, long, izip, nativeString, _PY3
 from twisted.python.deprecate import deprecated, getDeprecationWarningString
 from twisted.python.versions import Version
 
+# Curve lookup table
+curveTable = {
+        'nistp256' : ec.SECP256R1(),
+        'nistp384' : ec.SECP384R1(),
+        'nistp521' : ec.SECP521R1(),
+        'nistk163' : ec.SECT163K1(),
+        'nistp192' : ec.SECP192R1(), 
+        'nistp224' : ec.SECP224R1(),
+        'nistk233' : ec.SECT233K1(),
+        'nistb233' : ec.SECT233R1(),
+        'nistk283' : ec.SECT283K1(),
+        'nistk409' : ec.SECT409K1(),
+        'nistb409' : ec.SECT409R1(),
+        'nistt571' : ec.SECT571K1()
+        }
+
+# The ASN.1 encoded key files use OID instead of common names.
+# Same order as curveTable
+oidTable = {
+    '1.2.840.10045.3.1.7' : ec.SECP256R1(),
+    '1.3.132.0.34' : ec.SECP384R1(),
+    '1.3.132.0.35' : ec.SECP521R1(),
+    '1.3.132.0.1'  : ec.SECT163K1(),
+    '1.2.840.10045.3.1.1' : ec.SECP192R1(),
+    '1.3.132.0.33' : ec.SECP224R1(),
+    '1.3.132.0.26' : ec.SECT233K1(),
+    '1.3.132.0.27' : ec.SECT233R1(),
+    '1.3.132.0.16' : ec.SECT283K1(),
+    '1.3.132.0.36' : ec.SECT409K1(),
+    '1.3.132.0.37' : ec.SECT409R1(),
+    '1.3.132.0.38' : ec.SECT571K1()
+    }
+
+#Return the curve table dictionary for nist name lookup.
+def getCurveTable():
+    return curveTable
+
+
+#Return the curve table dictionary for OID lookup.
+def getOidTable():
+    return oidTable
 
 
 class BadKeyError(Exception):
@@ -145,6 +189,19 @@ class Key(object):
             integer g
             integer y
 
+        EC keys::
+            version  1
+            fieldID 
+                    fieldType: ansi-X9-62 fieldType
+                    parameters 
+            curve
+                    octet string a
+                    octet string b
+                    bit string (optional) seed
+            octet string base
+            integer order
+            integer (optional) cofactor
+
         @type blob: L{bytes}
         @param blob: The key data.
 
@@ -169,6 +226,12 @@ class Key(object):
                     )
                 ).public_key(default_backend())
             )
+        elif 'nist' in keyType:
+            # First we have to make an EllipticCuvePublicNumbers from the provided curve and points,
+            # then turn it into a public key object.
+            newKey = cls(ec.EllipticCurvePublicNumbers.from_encoded_point(curveTable[keyType], common.getNS(rest)[0]).public_key(default_backend()))
+            newKey.ecKeyName = 'ecdsa-sha2-' + keyType
+            return newKey
         else:
             raise BadKeyError('unknown blob type: %s' % (keyType,))
 
@@ -196,6 +259,12 @@ class Key(object):
             integer y
             integer x
 
+        EC keys::
+            string 'ecdsa-sha2-nist*'
+            string name
+            string public_key
+            integer private_key
+
         @type blob: L{bytes}
         @param blob: The key data.
 
@@ -211,6 +280,10 @@ class Key(object):
         elif keyType == b'ssh-dss':
             p, q, g, y, x, rest = common.getMP(rest, 5)
             return cls._fromDSAComponents(y=y, g=g, p=p, q=q, x=x)
+        elif 'ecdsa' in keyType:
+            newKey = cls(load_der_private_key(blob, default_backend()))
+            newKey.ecKeyName = keyType
+            return newKey
         else:
             raise BadKeyError('unknown blob type: %s' % (keyType,))
 
@@ -229,7 +302,17 @@ class Key(object):
         @rtype: L{twisted.conch.ssh.keys.Key}
         @raises BadKeyError: if the blob type is unknown.
         """
-        blob = base64.decodestring(data.split()[1])
+        #EC keys can come in multiple formats.
+        if data.startswith('ecdsa'):
+            newKey = cls(load_ssh_public_key(data, default_backend()))
+            newKey.ecKeyName = data[:19]
+            return newKey
+        elif 'ecdsa' in data:
+            # This string doesn't seem to be supported by any of cryptgraphy.io's utility functions.
+            # So do it the long way by grabbing the bytes we need and passing them on.
+            blob = re.search(".*?nist.\d{3}(.*)", data, re.DOTALL).group(1)
+        else:
+            blob = base64.decodestring(data.split()[1])
         return cls._fromString_BLOB(blob)
 
 
@@ -253,6 +336,9 @@ class Key(object):
         The ASN.1 structure of a DSA key is::
             (0, p, q, g, y, x)
 
+        The ASN.1 structure of a ECDSA key is::
+            (ECParameters, OID, NULL)
+
         @type data: L{bytes}
         @param data: The key data.
 
@@ -361,6 +447,27 @@ class Key(object):
                     )
                 ).private_key(backend=default_backend())
             )
+        elif kind == b'EC ':
+            # Couldn't find a simple pay to do this
+            # So we're doing it the hard way.
+            
+            newKey = cls(load_pem_private_key(data, passphrase, default_backend()))
+            keyName = None
+            
+            curve = oidTable[str(decodedKey[2])]
+            # Reverse look up the nist curve name to be referenced later 
+            for k,v in curveTable.items():
+                if isinstance(curve, v.__class__):
+                    keyName = 'ecdsa-sha2-' + k
+                    break
+            
+            if keyName == None:
+                raise UnknownAlgorithm("Unable to find the nist name for curve: " + curve)
+                # Continue on because there's a possibility we won't need the curve name again.
+            else:
+                newKey.ecKeyName = keyName
+
+            return newKey
         else:
             raise BadKeyError("unknown key type %s" % (kind,))
 
@@ -496,6 +603,8 @@ class Key(object):
             return 'public_openssh'
         elif data.startswith(b'-----BEGIN'):
             return 'private_openssh'
+        elif data.find(b'ecdsa') != -1: #ecdsa keys sometimes have a byte before the name
+            return 'public_openssh'
         elif data.startswith(b'{'):
             return 'public_lsh'
         elif data.startswith(b'('):
@@ -639,27 +748,34 @@ class Key(object):
         """
         Return a pretty representation of this object.
         """
-        lines = [
-            '<%s %s (%s bits)' % (
-                nativeString(self.type()),
-                self.isPublic() and 'Public Key' or 'Private Key',
-                self._keyObject.key_size)]
-        for k, v in sorted(self.data().items()):
-            if _PY3 and isinstance(k, bytes):
-                k = k.decode('ascii')
-            lines.append('attr %s:' % (k,))
-            by = common.MP(v)[4:]
-            while by:
-                m = by[:15]
-                by = by[15:]
-                o = ''
-                for c in iterbytes(m):
-                    o = o + '%02x:' % (ord(c),)
-                if len(m) < 15:
-                    o = o[:-1]
-                lines.append('\t' + o)
-        lines[-1] = lines[-1] + '>'
-        return '\n'.join(lines)
+
+        if self.type() == 'EC':
+            if self.isPublic():
+                return self._keyObject.public_bytes(serialization.Encoding.PEM, serialization.PublicFormat.SubjectPublicKeyInfo)
+            else:
+                return self._keyObject.private_bytes(serialization.Encoding.PEM, serialization.PrivateFormat.TraditionalOpenSSL, serialization.NoEncryption())
+        else:
+            lines = [
+                '<%s %s (%s bits)' % (
+                    nativeString(self.type()),
+                    self.isPublic() and 'Public Key' or 'Private Key',
+                    self.size())]
+            for k, v in sorted(self.data().items()):
+                if _PY3 and isinstance(k, bytes):
+                    k = k.decode('ascii')
+                lines.append('attr %s:' % (k,))
+                by = common.MP(v)[4:]
+                while by:
+                    m = by[:15]
+                    by = by[15:]
+                    o = ''
+                    for c in iterbytes(m):
+                        o = o + '%02x:' % (ord(c),)
+                    if len(m) < 15:
+                        o = o[:-1]
+                    lines.append('\t' + o)
+            lines[-1] = lines[-1] + '>'
+            return '\n'.join(lines)
 
 
     @property
@@ -765,7 +881,7 @@ class Key(object):
         @return: C{True} if this is a public key.
         """
         return isinstance(
-            self._keyObject, (rsa.RSAPublicKey, dsa.DSAPublicKey))
+            self._keyObject, (rsa.RSAPublicKey, dsa.DSAPublicKey, ec.EllipticCurvePublicKey))
 
 
     def public(self):
@@ -816,11 +932,20 @@ class Key(object):
         elif isinstance(
                 self._keyObject, (dsa.DSAPublicKey, dsa.DSAPrivateKey)):
             return 'DSA'
+        elif isinstance(
+                self._keyObject, (ec.EllipticCurvePublicKey, ec.EllipticCurvePrivateKey)):
+            return 'EC'
         else:
             raise RuntimeError(
                 'unknown type of object: %r' % (self._keyObject,))
 
 
+    def getECKeyName(self):
+            if hasattr(self, 'ecKeyName'):
+                return self.ecKeyName
+            else:
+                return None
+
     def sshType(self):
         """
         Get the type of the object we wrap as defined in the SSH protocol,
@@ -830,7 +955,7 @@ class Key(object):
         @return: The key type format.
         @rtype: L{bytes}
         """
-        return {'RSA': b'ssh-rsa', 'DSA': b'ssh-dss'}[self.type()]
+        return {'RSA': b'ssh-rsa', 'DSA': b'ssh-dss', 'EC': self.getECKeyName()}[self.type()]
 
 
     def size(self):
@@ -842,7 +967,10 @@ class Key(object):
         """
         if self._keyObject is None:
             return 0
-        return self._keyObject.key_size
+        elif self.type() == 'EC':
+            return self._keyObject.curve.key_size
+        else:
+            return self._keyObject.key_size
 
 
     def data(self):
@@ -885,6 +1013,19 @@ class Key(object):
                 "p": numbers.public_numbers.parameter_numbers.p,
                 "q": numbers.public_numbers.parameter_numbers.q,
             }
+        elif isinstance(self._keyObject, ec.EllipticCurvePublicKey):
+            numbers = self._keyObject.public_numbers()
+            return {
+                "curve": self.getECKeyName(),
+                "n": numbers.encode_point()
+                }
+        elif isinstance(self._keyObject, ec.EllipticCurvePrivateKey):
+            numbers = self._keyObject.private_numbers()
+            return {
+                "curve": self.getECKeyName(),
+                "p": numbers.public_numbers,
+                "x": numbers.private_value
+                }
         else:
             raise RuntimeError("Unexpected key type: %s" % (self._keyObject,))
 
@@ -919,6 +1060,10 @@ class Key(object):
             return (common.NS(b'ssh-dss') + common.MP(data['p']) +
                     common.MP(data['q']) + common.MP(data['g']) +
                     common.MP(data['y']))
+        elif type == 'EC':
+            b = (common.NS(data["curve"]) + common.NS(data["curve"][-8:]) + 
+                    common.NS(data["n"]))
+            return b
         else:
             raise BadKeyError("unknown key type %s" % (type,))
 
@@ -958,6 +1103,9 @@ class Key(object):
             return (common.NS(b'ssh-dss') + common.MP(data['p']) +
                     common.MP(data['q']) + common.MP(data['g']) +
                     common.MP(data['y']) + common.MP(data['x']))
+        elif type == 'EC':
+            return (common.NS(data['curve']) + common.NS(data["curve"][-8:]) +
+                    common.NS(data['p']) + common.MP(data['X']))
         else:
             raise BadKeyError("unknown key type %s" % (type,))
 
@@ -980,6 +1128,11 @@ class Key(object):
 
         @rtype: L{bytes}
         """
+        # No support for EC keys yet.
+        if self.type() == 'EC':
+            raise UnsupportedAlgorithm("toString() does not support  Elliptic Curves yet.")
+            return
+
         method = getattr(self, '_toString_%s' % (type.upper(),), None)
         if method is None:
             raise BadKeyError('unknown key type: %s' % (type,))
@@ -1002,6 +1155,12 @@ class Key(object):
 
         @rtype: L{bytes}
         """
+        
+        # No support for EC keys yet.
+        if self.type() == 'EC':
+            raise UnsupportedAlgorithm("toString() does not support  Elliptic Curves yet.")
+            return
+
         data = self.data()
         if self.isPublic():
             b64Data = base64.encodestring(self.blob()).replace(b'\n', b'')
@@ -1016,7 +1175,7 @@ class Key(object):
                 objData = (0, data['n'], data['e'], data['d'], q, p,
                            data['d'] % (q - 1), data['d'] % (p - 1),
                            data['u'])
-            else:
+            elif self.type() == 'DSA':
                 objData = (0, data['p'], data['q'], data['g'], data['y'],
                            data['x'])
             asn1Sequence = univ.Sequence()
@@ -1059,6 +1218,12 @@ class Key(object):
         """
         data = self.data()
         type = self.type()
+
+        # No support for EC keys yet.
+        if self.type() == 'EC':
+            raise UnsupportedAlgorithm("toString() does not support  Elliptic Curves yet.")
+            return
+
         if self.isPublic():
             if type == 'RSA':
                 keyData = sexpy.pack([[b'public-key',
@@ -1118,6 +1283,12 @@ class Key(object):
             elif self.type() == 'DSA':
                 values = (data['p'], data['q'], data['g'], data['y'],
                           data['x'])
+            # I assume this is what's needed
+            # But commented out because it hasn't been tested yet.
+            elif self.type() == 'EC':
+                raise UnsupportedAlgorithm("toString() does not support Elliptic Curves yet.")
+                return
+                #values = (data['curve'], data['curve'][-8:], data['p'], data['x'])
             return common.NS(self.sshType()) + b''.join(map(common.MP, values))
 
 
@@ -1149,9 +1320,23 @@ class Key(object):
             # are just numbers, and could be any length from 0 to 160 bits.
             # Make sure they are padded out to 160 bits (20 bytes each)
             ret = common.NS(int_to_bytes(r, 20) + int_to_bytes(s, 20))
-
+        elif self.type() == 'EC':
+            #Which hash to use depends on the key size.
+            if self._keyObject.curve.key_size <= 256:
+                h = hashes.SHA256()
+            elif self._keyObject.curve.key_size <= 384:
+                h = hashes.SHA384()
+            else: 
+                h = hashes.SHA512()
+        
+            signer = self._keyObject.signer(ec.ECDSA(h))
+            signer.update(data)
+            signature = signer.finalize()
+            (r, s) = decode_dss_signature(signature)
+            ret = common.NS(common.NS(int_to_bytes(r)) + common.NS(int_to_bytes(s)))
         else:
             raise BadKeyError("unknown key type %s" % (self.type(),))
+        
         return common.NS(self.sshType()) + ret
 
 
@@ -1173,7 +1358,9 @@ class Key(object):
             signatureType, signature = b'ssh-dss', common.NS(signature)
         else:
             signatureType, signature = common.getNS(signature)
-        if signatureType != self.sshType():
+        #Do we really need this check?
+        #nist check must be first
+        if 'nist' not in signatureType and signatureType != self.sshType():
             return False
         if self.type() == 'RSA':
             k = self._keyObject
@@ -1194,6 +1381,26 @@ class Key(object):
                 k = k.public_key()
             verifier = k.verifier(
                 signature, hashes.SHA1())
+        elif self.type() == 'EC':
+            concatenatedSignature = common.getNS(signature)[0]
+            rstr, sstr, rest = common.getNS(concatenatedSignature, 2)
+            r = int_from_bytes(rstr, 'big')
+            s = int_from_bytes(sstr, 'big')
+            signature = encode_dss_signature(r, s)
+
+            k = self._keyObject
+            if not self.isPublic():
+                k = k.public_key()
+
+            #Which hash to use depends on the key size.
+            if self._keyObject.curve.key_size <= 256:
+                h = hashes.SHA256()
+            elif self._keyObject.curve.key_size <= 384:
+                h = hashes.SHA384()
+            else: 
+                h = hashes.SHA512()
+                
+            verifier = k.verifier(signature, ec.ECDSA(h))
         else:
             raise BadKeyError("unknown key type %s" % (self.type(),))
 
@@ -1205,8 +1412,6 @@ class Key(object):
         else:
             return True
 
-
-
 @deprecated(Version("Twisted", 15, 5, 0))
 def objectType(obj):
     """
@@ -1278,7 +1483,6 @@ def _getPersistentRSAKey(location, keySize=4096):
         return Key(privateKey)
 
 
-
 if _PY3:
     # The objectType function is deprecated and not being ported to Python 3.
     del objectType
diff --git twisted/conch/ssh/transport.py twisted/conch/ssh/transport.py
index f322669..3cf93ce 100644
--- twisted/conch/ssh/transport.py
+++ twisted/conch/ssh/transport.py
@@ -16,12 +16,14 @@ import binascii
 import hmac
 import struct
 import zlib
+import re
 
-from hashlib import md5, sha1, sha256, sha512
+from hashlib import md5, sha1, sha256, sha384, sha512
 
-from cryptography.exceptions import UnsupportedAlgorithm
+from cryptography.exceptions import UnsupportedAlgorithm, InvalidSignature
 from cryptography.hazmat.backends import default_backend
 from cryptography.hazmat.primitives.ciphers import algorithms, modes, Cipher
+from cryptography.hazmat.primitives.asymmetric import ec
 
 from twisted.internet import protocol, defer
 from twisted.python import log, randbytes
@@ -31,7 +33,6 @@ from twisted.conch.ssh.common import (
     NS, getNS, MP, getMP, _MPpow, ffs, int_from_bytes
 )
 
-
 def _getRandomNumber(random, bits):
     """
     Generate a random number in the range [0, 2 ** bits).
@@ -140,6 +141,7 @@ class SSHCiphers:
     }
     macMap = {
         b'hmac-sha2-512': sha512,
+        b'hmac-sha2-384': sha384,
         b'hmac-sha2-256': sha256,
         b'hmac-sha1': sha1,
         b'hmac-md5': md5,
@@ -462,14 +464,24 @@ class SSHTransportBase(protocol.Protocol):
     supportedCiphers = _getSupportedCiphers()
     supportedMACs = [
         b'hmac-sha2-512',
+        b'hmac-sha2-384',
         b'hmac-sha2-256',
         b'hmac-sha1',
         b'hmac-md5',
         # `none`,
     ]
 
-    supportedKeyExchanges = _kex.getSupportedKeyExchanges()
+    #Import the supported curves from keys.py
+    curveTable = keys.getCurveTable()
+
+    supportedKeyExchanges = _kex.getSupportedKeyExchanges() 
     supportedPublicKeys = [b'ssh-rsa', b'ssh-dss']
+
+    #Add the supported EC keys, and change the name from ecdh* to ecdsa*
+    for eckey in supportedKeyExchanges:
+        if 'ecdh' in eckey:
+            supportedPublicKeys += [eckey.replace("ecdh", "ecdsa")]
+
     supportedCompressions = [b'none', b'zlib']
     supportedLanguages = ()
     supportedVersions = (b'1.99', b'2.0')
@@ -1230,6 +1242,74 @@ class SSHServerTransport(SSHTransportBase):
                 self.ignoreNextPacket = True # Guess was wrong
 
 
+    def _ssh_KEX_ECDH_INIT(self, packet):
+        """
+        Called from ssh_KEX_DH_GEX_REQUEST_OLD.
+ 
+        Payload::
+
+            string client Elliptic Curve Diffie-Hellman public key
+
+        First we load the host's public/private keys.
+        Then we generate the ECDH public/private keypair for the given curve.
+        With that we generate the shared secret key.
+        Then we compute the hash to sign and send back to the client
+        Along with the server's public key and the ECDH public key.
+
+        @type packet: L{bytes}
+        @param packet: The message data.
+
+        @return: None.
+        """
+        #Get the host's public and private keys
+        pubHostKey = self.factory.publicKeys[self.keyAlg]
+        privHostKey = self.factory.privateKeys[self.keyAlg]
+       
+        #Get the raw client public key.
+        pktPub, packet = getNS(packet)
+        
+        #Get the base curve info
+        try:
+            shortKex = re.search("(nist[kpbt]\d{3})$", self.kexAlg).group(1)
+        except:
+            raise UnsupportedAlgorithm(self.kexAlg)
+            return
+
+        #Get the curve instance
+        self.curve = self.curveTable[shortKex]
+        
+        #Generate the private key
+        self.ecPriv = ec.generate_private_key(self.curve, default_backend())
+
+        #Get the public key
+        self.ecPub = self.ecPriv.public_key()
+
+        #Take the provided public key and transform it into a format for the cryptography module
+        self.theirECPub = ec.EllipticCurvePublicNumbers.from_encoded_point(self.curve, pktPub).public_key(default_backend())
+    
+        #We need to convert to hex, so we can convert to an int so we can make it a multiple precision int.
+        sharedSecret = MP(int(self.ecPriv.exchange(ec.ECDH(), self.theirECPub).encode('hex'),16))
+       
+        #Create the exchange hash
+        h = _kex.getHashProcessor(self.kexAlg)()
+        h.update(NS(self.otherVersionString))
+        h.update(NS(self.ourVersionString))
+        h.update(NS(self.otherKexInitPayload))
+        h.update(NS(self.ourKexInitPayload))
+        h.update(NS(pubHostKey.blob()))
+        h.update(NS(self.theirECPub.public_numbers().encode_point()))
+        h.update(NS(self.ecPub.public_numbers().encode_point()))
+        h.update(sharedSecret)
+
+        exchangeHash = h.digest()
+
+        #DH_GEX_GROUP has the same number we need
+        self.sendPacket(
+            MSG_KEX_DH_GEX_GROUP,
+            NS(pubHostKey.blob()) + NS(self.ecPub.public_numbers().encode_point()) + NS(privHostKey.sign(exchangeHash)))
+        self._keySetup(sharedSecret, exchangeHash)
+
+
     def _ssh_KEXDH_INIT(self, packet):
         """
         Called to handle the beginning of a non-group key exchange.
@@ -1275,8 +1355,9 @@ class SSHServerTransport(SSHTransportBase):
         """
         This represents different key exchange methods that share the same
         integer value.  If the message is determined to be a KEXDH_INIT,
-        C{_ssh_KEXDH_INIT} is called to handle it.  Otherwise, for
-        KEX_DH_GEX_REQUEST_OLD payload::
+        C{_ssh_KEXDH_INIT} is called to handle it. If it is a KEX_ECDH_INIT,
+        C{_ssh_KEX_ECDH_INIT} is called.
+        Otherwise, for KEX_DH_GEX_REQUEST_OLD payload::
 
                 integer ideal (ideal size for the Diffie-Hellman prime)
 
@@ -1297,6 +1378,8 @@ class SSHServerTransport(SSHTransportBase):
         # another cue to decide what kind of message the peer sent us.
         if _kex.isFixedGroup(self.kexAlg):
             return self._ssh_KEXDH_INIT(packet)
+        elif _kex.isEllipticCurve(self.kexAlg):
+            return self._ssh_KEX_ECDH_INIT(packet)
         else:
             self.dhGexRequest = packet
             ideal = struct.unpack('>L', packet)[0]
@@ -1470,17 +1553,42 @@ class SSHClientTransport(SSHTransportBase):
         """
         Called when we receive a MSG_KEXINIT message.  For a description
         of the packet, see SSHTransportBase.ssh_KEXINIT().  Additionally,
-        this method sends the first key exchange packet.  If the agreed-upon
-        exchange has a fixed prime/generator group, generate a public key
-        and send it in a MSG_KEXDH_INIT message. Otherwise, ask for a 2048
-        bit group with a MSG_KEX_DH_GEX_REQUEST message.
+        this method sends the first key exchange packet.  
+
+        If the agreed-upon exchange is ECDH, generate a key pair for the 
+        corresponding curve and send the public key.
+
+        If the agreed-upon exchange has a fixed prime/generator group,
+        generate a public key and send it in a MSG_KEXDH_INIT message.
+        Otherwise, ask for a 2048 bit group with a MSG_KEX_DH_GEX_REQUEST
+        message.
         """
         if SSHTransportBase.ssh_KEXINIT(self, packet) is None:
             # Connection was disconnected while doing base processing.
             # Maybe no common protocols were agreed.
             return
 
-        if _kex.isFixedGroup(self.kexAlg):
+        # Are we using ECDH?
+        if _kex.isEllipticCurve(self.kexAlg):
+            #Find the base curve info
+            try:
+                shortKex = re.search("(nist[kpbt]\d{3})$", self.kexAlg).group(1)
+            except:
+                raise UnsupportedAlgorithm(self.kexAlg)
+                return
+
+            #Get the curve
+            self.curve = self.curveTable[shortKex]
+
+            #Generate the keys
+            self.ecPriv = ec.generate_private_key(self.curve, default_backend())
+            self.ecPub = self.ecPriv.public_key()
+
+            #DH_GEX_REQUEST_OLD is the same number we need.
+            self.sendPacket(
+                    MSG_KEX_DH_GEX_REQUEST_OLD,
+                    NS(self.ecPub.public_numbers().encode_point()))
+        elif _kex.isFixedGroup(self.kexAlg):
             # We agreed on a fixed group key exchange algorithm.
             self.x = _generateX(randbytes.secureRandom, 512)
             self.g, self.p = _kex.getDHGeneratorAndPrime(self.kexAlg)
@@ -1499,6 +1607,60 @@ class SSHClientTransport(SSHTransportBase):
                     self._dhMaximalGroupSize,
                     ))
 
+    def _ssh_KEX_ECDH_REPLY(self, packet):
+        """
+        Called to handle a reply to a ECDH exchange message(KEX_ECDH_INIT).
+
+        Like the handler for I{KEXDH_INIT}, this message type has an
+        overlapping value.  This method is called from C{ssh_KEX_DH_GEX_GROUP}
+        if that method detects a non-group key exchange is in progress.
+
+        Payload::
+
+            string serverHostKey
+            string server Elliptic Curve Diffie-Hellman public key
+            string signature
+
+        We verify the host key and continue if it passes verificiation.
+        Otherwise raise an exception and return.
+
+        @type packet: L{bytes}
+        @param packet: The message data.
+
+        @return: None.
+        """
+        #Get the host public key
+        self.theirECHost, packet = getNS(packet)
+
+        #Get the raw ECDH public key bytes
+        pktPub, packet = getNS(packet)
+
+        #Take the provided public key and transform it into a format for the cryptography module
+        self.theirECPub = ec.EllipticCurvePublicNumbers.from_encoded_point(self.curve, pktPub).public_key(default_backend())
+
+        #Get the signature
+        signature, packet = getNS(packet)
+
+        #We need to convert to hex, so we can convert to an int so we can make a multiple precision int.
+        sharedSecret = MP(int(self.ecPriv.exchange(ec.ECDH(), self.theirECPub).encode('hex'), 16))
+        
+        h = _kex.getHashProcessor(self.kexAlg)()
+        h.update(NS(self.ourVersionString))
+        h.update(NS(self.otherVersionString))
+        h.update(NS(self.ourKexInitPayload))
+        h.update(NS(self.otherKexInitPayload))
+        h.update(NS(self.theirECHost))
+        h.update(NS(self.ecPub.public_numbers().encode_point()))
+        h.update(NS(self.theirECPub.public_numbers().encode_point()))
+        h.update(sharedSecret)
+
+        exchangeHash = h.digest()
+     
+        if not keys.Key.fromString(self.theirECHost).verify(signature, exchangeHash):
+            raise InvalidSignature
+            return
+        else:
+            self._keySetup(sharedSecret, exchangeHash)
 
     def _ssh_KEXDH_REPLY(self, packet):
         """
@@ -1539,6 +1701,8 @@ class SSHClientTransport(SSHTransportBase):
     def ssh_KEX_DH_GEX_GROUP(self, packet):
         """
         This handles different messages which share an integer value.
+       
+        If it is ECDH, call C{_ssh_KEX_ECDH_REPLY} and pass along the packet.
 
         If the key exchange does not have a fixed prime/generator group,
         we generate a Diffie-Hellman public key and send it in a
@@ -1553,6 +1717,8 @@ class SSHClientTransport(SSHTransportBase):
         """
         if _kex.isFixedGroup(self.kexAlg):
             return self._ssh_KEXDH_REPLY(packet)
+        elif _kex.isEllipticCurve(self.kexAlg):
+            self._ssh_KEX_ECDH_REPLY(packet)
         else:
             self.p, rest = getMP(packet)
             self.g, rest = getMP(rest)
@@ -1593,7 +1759,6 @@ class SSHClientTransport(SSHTransportBase):
             return
         self._keySetup(sharedSecret, exchangeHash)
 
-
     def ssh_KEX_DH_GEX_REPLY(self, packet):
         """
         Called when we receive a MSG_KEX_DH_GEX_REPLY message.  Payload::
@@ -1661,7 +1826,6 @@ class SSHClientTransport(SSHTransportBase):
             return
         self._keySetup(sharedSecret, exchangeHash)
 
-
     def _keySetup(self, sharedSecret, exchangeHash):
         """
         See SSHTransportBase._keySetup().
@@ -1825,7 +1989,9 @@ MSG_KEX_DH_GEX_GROUP = 31
 MSG_KEX_DH_GEX_INIT = 32
 MSG_KEX_DH_GEX_REPLY = 33
 
-
+#Unused but here for reference and possibly future use.
+#MSG_KEX_ECDH_INIT = 30
+#MSG_KEX_ECDH_REPLY = 31
 
 DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT = 1
 DISCONNECT_PROTOCOL_ERROR = 2
