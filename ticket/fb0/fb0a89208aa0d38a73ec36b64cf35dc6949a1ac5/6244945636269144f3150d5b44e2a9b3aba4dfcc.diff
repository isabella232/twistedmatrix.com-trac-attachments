diff --git doc/core/howto/listings/pb/chatserver.py doc/core/howto/listings/pb/chatserver.py
index ff70d2a..c787688 100755
--- doc/core/howto/listings/pb/chatserver.py
+++ doc/core/howto/listings/pb/chatserver.py
@@ -14,7 +14,7 @@ class ChatServer:
         self.groups = {} # indexed by name
 
     def joinGroup(self, groupname, user, allowMattress):
-        if not self.groups.has_key(groupname):
+        if groupname not in self.groups:
             self.groups[groupname] = Group(groupname, allowMattress)
         self.groups[groupname].addUser(user)
         return self.groups[groupname]
diff --git doc/core/howto/listings/servers/chat.py doc/core/howto/listings/servers/chat.py
index 01795bf..73ab69f 100644
--- doc/core/howto/listings/servers/chat.py
+++ doc/core/howto/listings/servers/chat.py
@@ -13,7 +13,7 @@ class Chat(LineReceiver):
         self.sendLine("What's your name?")
 
     def connectionLost(self, reason):
-        if self.users.has_key(self.name):
+        if self.name in self.users:
             del self.users[self.name]
 
     def lineReceived(self, line):
@@ -23,7 +23,7 @@ class Chat(LineReceiver):
             self.handle_CHAT(line)
 
     def handle_GETNAME(self, name):
-        if self.users.has_key(name):
+        if name in self.users:
             self.sendLine("Name taken, please choose another.")
             return
         self.sendLine("Welcome, %s!" % (name,))
diff --git doc/core/howto/tutorial/listings/finger/finger/finger.py doc/core/howto/tutorial/listings/finger/finger/finger.py
index 7812af7..9d2f787 100755
--- doc/core/howto/tutorial/listings/finger/finger/finger.py
+++ doc/core/howto/tutorial/listings/finger/finger/finger.py
@@ -351,7 +351,7 @@ def makeService(config):
 #        k.setServiceParent(s)
 
     # irc fingerbot
-    if config.has_key('ircnick'):
+    if 'ircnick' in config:
         i = IIRCClientFactory(f)
         i.nickname = config['ircnick']
         ircserver = config['ircserver']
@@ -359,7 +359,7 @@ def makeService(config):
         b.setServiceParent(s)
 
     # Pespective Broker on port 8889
-    if config.has_key('pbport'):
+    if 'pbport' in config:
         m = internet.TCPServer(
             int(config['pbport']),
             pb.PBServerFactory(IPerspectiveFinger(f)))
diff --git doc/core/howto/tutorial/listings/finger/finger_config.py doc/core/howto/tutorial/listings/finger/finger_config.py
index 226a26a..9c6089a 100644
--- doc/core/howto/tutorial/listings/finger/finger_config.py
+++ doc/core/howto/tutorial/listings/finger/finger_config.py
@@ -21,7 +21,7 @@ def makeService(config):
         k.setServiceParent(s)
 
     # irc fingerbot
-    if config.has_key('ircnick'):
+    if 'ircnick' in config:
         i = IIRCClientFactory(f)
         i.nickname = config['ircnick']
         ircserver = config['ircserver']
@@ -29,7 +29,7 @@ def makeService(config):
         b.setServiceParent(s)
 
     # Pespective Broker on port 8889
-    if config.has_key('pbport'):
+    if 'pbport' in config:
         m = internet.TCPServer(
             int(config['pbport']),
             pb.PBServerFactory(IPerspectiveFinger(f)))
diff --git twisted/application/service.py twisted/application/service.py
index d4a13dc..66fef85 100644
--- twisted/application/service.py
+++ twisted/application/service.py
@@ -169,7 +169,7 @@ class Service:
 
     def __getstate__(self):
         dict = self.__dict__.copy()
-        if dict.has_key("running"):
+        if "running" in dict:
             del dict['running']
         return dict
 
@@ -298,7 +298,7 @@ class MultiService(Service):
 
     def addService(self, service):
         if service.name is not None:
-            if self.namedServices.has_key(service.name):
+            if service.name in self.namedServices:
                 raise RuntimeError("cannot have two services with same name"
                                    " '%s'" % service.name)
             self.namedServices[service.name] = service
diff --git twisted/conch/client/options.py twisted/conch/client/options.py
index 8550573..5d31a08 100644
--- twisted/conch/client/options.py
+++ twisted/conch/client/options.py
@@ -65,7 +65,7 @@ class ConchOptions(usage.Options):
         "Select encryption algorithms"
         ciphers = ciphers.split(',')
         for cipher in ciphers:
-            if not SSHCiphers.cipherMap.has_key(cipher):
+            if cipher not in SSHCiphers.cipherMap:
                 sys.exit("Unknown cipher type '%s'" % cipher)
         self['ciphers'] = ciphers
 
@@ -74,7 +74,7 @@ class ConchOptions(usage.Options):
         "Specify MAC algorithms"
         macs = macs.split(',')
         for mac in macs:
-            if not SSHCiphers.macMap.has_key(mac):
+            if mac not in SSHCiphers.macMap:
                 sys.exit("Unknown mac type '%s'" % mac)
         self['macs'] = macs
 
diff --git twisted/conch/openssh_compat/primes.py twisted/conch/openssh_compat/primes.py
index 5d939e6..18abe83 100644
--- twisted/conch/openssh_compat/primes.py
+++ twisted/conch/openssh_compat/primes.py
@@ -20,7 +20,7 @@ def parseModuliFile(filename):
         size = int(size) + 1
         gen = long(gen)
         mod = long(mod, 16)
-        if not primes.has_key(size):
+        if size not in primes:
             primes[size] = []
         primes[size].append((gen, mod))
     return primes
diff --git twisted/conch/scripts/conch.py twisted/conch/scripts/conch.py
index 8c49544..4bf3156 100644
--- twisted/conch/scripts/conch.py
+++ twisted/conch/scripts/conch.py
@@ -307,7 +307,7 @@ class SSHConnection(connection.SSHConnection):
         remoteHP, origHP = forwarding.unpackOpen_forwarded_tcpip(data)
         log.msg(self.remoteForwards)
         log.msg(remoteHP)
-        if self.remoteForwards.has_key(remoteHP[1]):
+        if remoteHP[1] in self.remoteForwards:
             connectHP = self.remoteForwards[remoteHP[1]]
             log.msg('connect forwarding %s' % (connectHP,))
             return SSHConnectForwardingChannel(connectHP,
diff --git twisted/conch/unix.py twisted/conch/unix.py
index ffeb7ad..64f4b07 100644
--- twisted/conch/unix.py
+++ twisted/conch/unix.py
@@ -237,7 +237,7 @@ class SSHSessionForUnixConchUser:
         pty = self.pty
         attr = tty.tcgetattr(pty.fileno())
         for mode, modeValue in self.modes:
-            if not ttymodes.TTYMODES.has_key(mode): continue
+            if mode not in ttymodes.TTYMODES: continue
             ttyMode = ttymodes.TTYMODES[mode]
             if len(ttyMode) == 2: # flag
                 flag, ttyAttr = ttyMode
@@ -303,11 +303,11 @@ class SFTPServerForUnixConchUser:
         NOTE: this function assumes it runs as the logged-in user:
         i.e. under _runAsUser()
         """
-        if attrs.has_key("uid") and attrs.has_key("gid"):
+        if "uid" in attrs and "gid" in attrs:
             os.chown(path, attrs["uid"], attrs["gid"])
-        if attrs.has_key("permissions"):
+        if "permissions" in attrs:
             os.chmod(path, attrs["permissions"])
-        if attrs.has_key("atime") and attrs.has_key("mtime"):
+        if "atime" in attrs and "mtime" in attrs:
             os.utime(path, (attrs["atime"], attrs["mtime"]))
 
     def _getAttrs(self, s):
@@ -399,7 +399,7 @@ class UnixSFTPFile:
             openFlags |= os.O_TRUNC
         if flags & FXF_EXCL == FXF_EXCL:
             openFlags |= os.O_EXCL
-        if attrs.has_key("permissions"):
+        if "permissions" in attrs:
             mode = attrs["permissions"]
             del attrs["permissions"]
         else:
diff --git twisted/enterprise/adbapi.py twisted/enterprise/adbapi.py
index a361a20..0531d2d 100644
--- twisted/enterprise/adbapi.py
+++ twisted/enterprise/adbapi.py
@@ -218,7 +218,7 @@ class ConnectionPool:
 
         for arg in self.CP_ARGS:
             cp_arg = 'cp_%s' % arg
-            if connkw.has_key(cp_arg):
+            if cp_arg in connkw:
                 setattr(self, arg, connkw[cp_arg])
                 del connkw[cp_arg]
 
diff --git twisted/lore/indexer.py twisted/lore/indexer.py
index 3fa2209..528e7d6 100644
--- twisted/lore/indexer.py
+++ twisted/lore/indexer.py
@@ -12,7 +12,7 @@ def getIndexFilename():
 
 def addEntry(filename, anchor, text, reference):
     global entries
-    if not entries.has_key(text):
+    if text not in entries:
         entries[text] = []
     entries[text].append((filename, anchor, reference))
 
diff --git twisted/mail/imap4.py twisted/mail/imap4.py
index 6ca8384..bf36eee 100644
--- twisted/mail/imap4.py
+++ twisted/mail/imap4.py
@@ -4665,7 +4665,7 @@ class MemoryAccount(object):
     ##
     def addMailbox(self, name, mbox = None):
         name = name.upper()
-        if self.mailboxes.has_key(name):
+        if name in self.mailboxes:
             raise MailboxCollision, name
         if mbox is None:
             mbox = self._emptyMailbox(name, self.allocateID())
@@ -4715,14 +4715,14 @@ class MemoryAccount(object):
     def rename(self, oldname, newname):
         oldname = oldname.upper()
         newname = newname.upper()
-        if not self.mailboxes.has_key(oldname):
+        if oldname not in self.mailboxes:
             raise NoSuchMailbox, oldname
 
         inferiors = self._inferiorNames(oldname)
         inferiors = [(o, o.replace(oldname, newname, 1)) for o in inferiors]
 
         for (old, new) in inferiors:
-            if self.mailboxes.has_key(new):
+            if new in self.mailboxes:
                 raise MailboxCollision, new
 
         for (old, new) in inferiors:
diff --git twisted/mail/maildir.py twisted/mail/maildir.py
index 7927b32..826336e 100644
--- twisted/mail/maildir.py
+++ twisted/mail/maildir.py
@@ -461,7 +461,7 @@ class MaildirDirdbmDomain(AbstractMaildirDomain):
         Otherwise, returns postmaster's mailbox instead if bounces
         go to postmaster, otherwise return None
         """
-        if not self.dbm.has_key(name):
+        if name not in self.dbm:
             if not self.postmaster:
                 return None
             name = 'postmaster'
diff --git twisted/mail/pb.py twisted/mail/pb.py
index 8a9417f..1b71ec6 100644
--- twisted/mail/pb.py
+++ twisted/mail/pb.py
@@ -99,10 +99,10 @@ class MaildirBroker(pb.Broker):
             self.sendAnswer(requestID, collection)
 
     def getCollection(self, name, domain, password):
-        if not self.domains.has_key(domain):
+        if domain not in self.domains:
             return
         domain = self.domains[domain]
-        if (domain.dbm.has_key(name) and
+        if (name in domain.dbm and
             domain.dbm[name] == password):
             return MaildirCollection(domain.userDirectory(name))
 
diff --git twisted/mail/test/test_mail.py twisted/mail/test/test_mail.py
index a197426..5b5d365 100644
--- twisted/mail/test/test_mail.py
+++ twisted/mail/test/test_mail.py
@@ -80,7 +80,7 @@ class DomainWithDefaultsTestCase(unittest.TestCase):
             self.assertEqual(d[x], x + 10)
             self.assertEqual(d.get(x), x + 10)
             self.failUnless(x in d)
-            self.failUnless(d.has_key(x))
+            self.failUnless(x in d)
 
         del d[2], d[4], d[6]
 
@@ -702,7 +702,7 @@ class ServiceDomainTestCase(unittest.TestCase):
          fp = StringIO.StringIO(hdr)
          m = rfc822.Message(fp)
          self.assertEqual(len(m.items()), 1)
-         self.failUnless(m.has_key('Received'))
+         self.failUnless('Received' in m)
 
     def testValidateTo(self):
         user = smtp.User('user@test.domain', 'helo', None, 'wherever@whatever')
diff --git twisted/manhole/explorer.py twisted/manhole/explorer.py
index 428b3e2..30db8e2 100644
--- twisted/manhole/explorer.py
+++ twisted/manhole/explorer.py
@@ -29,7 +29,7 @@ False=not True
 class Pool(UserDict.UserDict):
     def getExplorer(self, object, identifier):
         oid = id(object)
-        if self.data.has_key(oid):
+        if oid in self.data:
             # XXX: This potentially returns something with
             # 'identifier' set to a different value.
             return self.data[oid]
diff --git twisted/manhole/service.py twisted/manhole/service.py
index 332bc81..fdf112f 100644
--- twisted/manhole/service.py
+++ twisted/manhole/service.py
@@ -202,7 +202,7 @@ class Perspective(pb.Avatar):
     def __getstate__(self):
         state = self.__dict__.copy()
         state['clients'] = {}
-        if state['localNamespace'].has_key("__builtins__"):
+        if "__builtins__" in state['localNamespace']:
             del state['localNamespace']['__builtins__']
         return state
 
@@ -255,7 +255,7 @@ class Perspective(pb.Avatar):
         compatMessage = None
         for client in clients:
             try:
-                if not client.capabilities.has_key("Failure"):
+                if "Failure" not in client.capabilities:
                     if compatMessage is None:
                         compatMessage = origMessage[:]
                         for i in xrange(len(message)):
@@ -394,6 +394,6 @@ class Service(service.Service):
         dict = self.__dict__.copy()
         ns = dict['namespace'].copy()
         dict['namespace'] = ns
-        if ns.has_key('__builtins__'):
+        if '__builtins__' in ns:
             del ns['__builtins__']
         return dict
diff --git twisted/manhole/telnet.py twisted/manhole/telnet.py
index d63b3a6..8e0a352 100644
--- twisted/manhole/telnet.py
+++ twisted/manhole/telnet.py
@@ -112,6 +112,6 @@ class ShellFactory(protocol.Factory):
         dict = self.__dict__
         ns = copy.copy(dict['namespace'])
         dict['namespace'] = ns
-        if ns.has_key('__builtins__'):
+        if '__builtins__' in ns:
             del ns['__builtins__']
         return dict
diff --git twisted/names/authority.py twisted/names/authority.py
index 9d22d5f..982b29d 100644
--- twisted/names/authority.py
+++ twisted/names/authority.py
@@ -171,7 +171,7 @@ class PySourceAuthority(FileAuthority):
     def loadFile(self, filename):
         g, l = self.setupConfigNamespace(), {}
         execfile(filename, g, l)
-        if not l.has_key('zone'):
+        if 'zone' not in l:
             raise ValueError, "No zone defined in " + filename
 
         self.records = {}
diff --git twisted/names/cache.py twisted/names/cache.py
index d60d61e..a5026dc 100644
--- twisted/names/cache.py
+++ twisted/names/cache.py
@@ -79,7 +79,7 @@ class CacheResolver(common.ResolverBase):
 
         self.cache[query] = (time.time(), payload)
 
-        if self.cancel.has_key(query):
+        if query in self.cancel:
             self.cancel[query].cancel()
 
         s = list(payload[0]) + list(payload[1]) + list(payload[2])
diff --git twisted/news/database.py twisted/news/database.py
index 1ba1694..f9f67de 100644
--- twisted/news/database.py
+++ twisted/news/database.py
@@ -63,7 +63,7 @@ class Article:
 
     def getHeader(self, header):
         h = header.lower()
-        if self.headers.has_key(h):
+        if h in self.headers:
             return self.headers[h][1]
         else:
             return ''
@@ -326,7 +326,7 @@ class PickleStorage(_ModerationMixin):
                 high = max(self.db[i].keys()) + 1
             else:
                 low = high = 0
-            if self.db['moderators'].has_key(i):
+            if i in self.db['moderators']:
                 flags = 'm'
             else:
                 flags = 'y'
@@ -350,7 +350,7 @@ class PickleStorage(_ModerationMixin):
             return self.notifyModerators(moderators, a)
 
         for group in groups:
-            if self.db.has_key(group):
+            if group in self.db:
                 if len(self.db[group].keys()):
                     index = max(self.db[group].keys()) + 1
                 else:
@@ -375,7 +375,7 @@ class PickleStorage(_ModerationMixin):
 
 
     def xoverRequest(self, group, low, high):
-        if not self.db.has_key(group):
+        if group not in self.db:
             return defer.succeed([])
         r = []
         for i in self.db[group].keys():
@@ -385,7 +385,7 @@ class PickleStorage(_ModerationMixin):
 
 
     def xhdrRequest(self, group, low, high, header):
-        if not self.db.has_key(group):
+        if group not in self.db:
             return defer.succeed([])
         r = []
         for i in self.db[group].keys():
@@ -395,13 +395,13 @@ class PickleStorage(_ModerationMixin):
 
 
     def listGroupRequest(self, group):
-        if self.db.has_key(group):
+        if group in self.db:
             return defer.succeed((group, self.db[group].keys()))
         else:
             return defer.fail(None)
 
     def groupRequest(self, group):
-        if self.db.has_key(group):
+        if group in self.db:
             if len(self.db[group].keys()):
                 num = len(self.db[group].keys())
                 low = min(self.db[group].keys())
@@ -426,8 +426,8 @@ class PickleStorage(_ModerationMixin):
         if id is not None:
             raise NotImplementedError
 
-        if self.db.has_key(group):
-            if self.db[group].has_key(index):
+        if group in self.db:
+            if index in self.db[group]:
                 a = self.db[group][index]
                 return defer.succeed((
                     index,
@@ -441,8 +441,8 @@ class PickleStorage(_ModerationMixin):
 
 
     def headRequest(self, group, index):
-        if self.db.has_key(group):
-            if self.db[group].has_key(index):
+        if group in self.db:
+            if index in self.db[group]:
                 a = self.db[group][index]
                 return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders()))
             else:
@@ -452,8 +452,8 @@ class PickleStorage(_ModerationMixin):
 
 
     def bodyRequest(self, group, index):
-        if self.db.has_key(group):
-            if self.db[group].has_key(index):
+        if group in self.db:
+            if index in self.db[group]:
                 a = self.db[group][index]
                 return defer.succeed((index, a.getHeader('Message-ID'), StringIO.StringIO(a.body)))
             else:
@@ -469,7 +469,7 @@ class PickleStorage(_ModerationMixin):
 
 
     def load(self, filename, groups = None, moderators = ()):
-        if PickleStorage.sharedDBs.has_key(filename):
+        if filename in PickleStorage.sharedDBs:
             self.db = PickleStorage.sharedDBs[filename]
         else:
             try:
@@ -622,7 +622,7 @@ class NewsShelf(_ModerationMixin):
 
 
     def xoverRequest(self, group, low, high):
-        if not self.dbm['groups'].has_key(group):
+        if group not in self.dbm['groups']:
             return defer.succeed([])
 
         if low is None:
@@ -631,7 +631,7 @@ class NewsShelf(_ModerationMixin):
             high = self.dbm['groups'][group].maxArticle
         r = []
         for i in range(low, high + 1):
-            if self.dbm['groups'][group].articles.has_key(i):
+            if i in self.dbm['groups'][group].articles:
                 r.append([str(i)] + self.dbm['groups'][group].articles[i].overview())
         return defer.succeed(r)
 
@@ -646,13 +646,13 @@ class NewsShelf(_ModerationMixin):
             high = self.dbm['groups'][group].maxArticle
         r = []
         for i in range(low, high + 1):
-            if self.dbm['groups'][group].articles.has_key(i):
+            if i in self.dbm['groups'][group].articles:
                 r.append((i, self.dbm['groups'][group].articles[i].getHeader(header)))
         return defer.succeed(r)
 
 
     def listGroupRequest(self, group):
-        if self.dbm['groups'].has_key(group):
+        if group in self.dbm['groups']:
             return defer.succeed((group, self.dbm['groups'][group].articles.keys()))
         return defer.fail(NewsServerError("No such group: " + group))
 
diff --git twisted/persisted/aot.py twisted/persisted/aot.py
index 59fde57..f4ad975 100644
--- twisted/persisted/aot.py
+++ twisted/persisted/aot.py
@@ -260,7 +260,7 @@ def unjellyFromSource(stringOrFile):
     else:
         exec stringOrFile in ns
 
-    if ns.has_key('app'):
+    if 'app' in ns:
         return unjellyFromAOT(ns['app'])
     else:
         raise ValueError("%s needs to define an 'app', it didn't!" % stringOrFile)
@@ -504,7 +504,7 @@ class AOTJellier:
 #mutable inside one. The Ref() class will only print the "Ref(..)" around an
 #object if it has a Reference explicitly attached.
 
-            if self.prepared.has_key(id(obj)):
+            if id(obj) in self.prepared:
                 oldRef = self.prepared[id(obj)]
                 if oldRef.refnum:
                     # it's been referenced already
@@ -538,7 +538,7 @@ class AOTJellier:
                     state = self.jellyToAO(obj.__dict__)
                 retval.setObj(Instance(reflect.qual(obj.__class__), state))
 
-            elif copy_reg.dispatch_table.has_key(objType):
+            elif objType in copy_reg.dispatch_table:
                 unpickleFunc, state = copy_reg.dispatch_table[objType](obj)
 
                 retval.setObj(Copyreg( reflect.fullFuncName(unpickleFunc),
diff --git twisted/persisted/dirdbm.py twisted/persisted/dirdbm.py
index 26bbc1b..a5fdd61 100644
--- twisted/persisted/dirdbm.py
+++ twisted/persisted/dirdbm.py
@@ -218,7 +218,7 @@ class DirDBM:
         @param value: The value to associate with key if key is not already
         associated with a value.
         """
-        if not self.has_key(key):
+        if key not in self:
             self[key] = value
             return value
         return self[key]
@@ -233,7 +233,7 @@ class DirDBM:
         @return: The value associated with C{key} or C{default} if not
         C{self.has_key(key)}
         """
-        if self.has_key(key):
+        if key in self:
             return self[key]
         else:
             return default
diff --git twisted/persisted/styles.py twisted/persisted/styles.py
index 81c8c30..0ec4345 100644
--- twisted/persisted/styles.py
+++ twisted/persisted/styles.py
@@ -68,7 +68,7 @@ def pickleModule(module):
 
 def unpickleModule(name):
     'support function for copy_reg to unpickle module refs'
-    if oldModules.has_key(name):
+    if name in oldModules:
         log.msg("Module has moved: %s" % name)
         name = oldModules[name]
         log.msg(name)
@@ -202,11 +202,11 @@ class Versioned:
         bases.reverse()
         bases.append(self.__class__) # don't forget me!!
         for base in bases:
-            if base.__dict__.has_key('persistenceForgets'):
+            if 'persistenceForgets' in base.__dict__:
                 for slot in base.persistenceForgets:
-                    if dct.has_key(slot):
+                    if slot in dct:
                         del dct[slot]
-            if base.__dict__.has_key('persistenceVersion'):
+            if 'persistenceVersion' in base.__dict__:
                 dct['%s.persistenceVersion' % reflect.qual(base)] = base.persistenceVersion
         return dct
 
@@ -219,7 +219,7 @@ class Versioned:
         bases.reverse()
         bases.append(self.__class__) # don't forget me!!
         # first let's look for old-skool versioned's
-        if self.__dict__.has_key("persistenceVersion"):
+        if "persistenceVersion" in self.__dict__:
 
             # Hacky heuristic: if more than one class subclasses Versioned,
             # we'll assume that the higher version number wins for the older
@@ -234,7 +234,7 @@ class Versioned:
             highestVersion = 0
             highestBase = None
             for base in bases:
-                if not base.__dict__.has_key('persistenceVersion'):
+                if 'persistenceVersion' not in base.__dict__:
                     continue
                 if base.persistenceVersion > highestVersion:
                     highestBase = base
@@ -244,7 +244,7 @@ class Versioned:
         for base in bases:
             # ugly hack, but it's what the user expects, really
             if (Versioned not in base.__bases__ and
-                not base.__dict__.has_key('persistenceVersion')):
+                'persistenceVersion' not in base.__dict__):
                 continue
             currentVers = base.persistenceVersion
             pverName = '%s.persistenceVersion' % reflect.qual(base)
diff --git twisted/protocols/sip.py twisted/protocols/sip.py
index 58f5e8b..33b92f1 100644
--- twisted/protocols/sip.py
+++ twisted/protocols/sip.py
@@ -1170,7 +1170,7 @@ class RegisterProxy(Proxy):
             self.register(message, host, port)
         else:
             # There is a portal.  Check for credentials.
-            if not message.headers.has_key("authorization"):
+            if "authorization" not in message.headers:
                 return self.unauthorized(message, host, port)
             else:
                 return self.login(message, host, port)
@@ -1220,7 +1220,7 @@ class RegisterProxy(Proxy):
         """Allow all users to register"""
         name, toURL, params = parseAddress(message.headers["to"][0], clean=1)
         contact = None
-        if message.headers.has_key("contact"):
+        if "contact" in message.headers:
             contact = message.headers["contact"][0]
 
         if message.headers.get("expires", [None])[0] == "0":
@@ -1289,7 +1289,7 @@ class InMemoryRegistry:
     def getAddress(self, userURI):
         if userURI.host != self.domain:
             return defer.fail(LookupError("unknown domain"))
-        if self.users.has_key(userURI.username):
+        if userURI.username in self.users:
             dc, url = self.users[userURI.username]
             return defer.succeed(url)
         else:
@@ -1298,7 +1298,7 @@ class InMemoryRegistry:
     def getRegistrationInfo(self, userURI):
         if userURI.host != self.domain:
             return defer.fail(LookupError("unknown domain"))
-        if self.users.has_key(userURI.username):
+        if userURI.username in self.users:
             dc, url = self.users[userURI.username]
             return defer.succeed(Registration(int(dc.getTime() - time.time()), url))
         else:
@@ -1321,7 +1321,7 @@ class InMemoryRegistry:
         if logicalURL.host != self.domain:
             log.msg("Registration for domain we don't handle.")
             return defer.fail(RegistrationError(404))
-        if self.users.has_key(logicalURL.username):
+        if logicalURL.username in self.users:
             dc, old = self.users[logicalURL.username]
             dc.reset(3600)
         else:
diff --git twisted/python/components.py twisted/python/components.py
index 72f15cd..6fb1f2a 100644
--- twisted/python/components.py
+++ twisted/python/components.py
@@ -282,7 +282,7 @@ class Componentized(styles.Versioned):
         True on your adapter class.
         """
         k = reflect.qual(interface)
-        if self._adapterCache.has_key(k):
+        if k in self._adapterCache:
             return self._adapterCache[k]
         else:
             adapter = interface.__adapt__(self)
diff --git twisted/python/filepath.py twisted/python/filepath.py
index 8cfabc2..d5b358f 100644
--- twisted/python/filepath.py
+++ twisted/python/filepath.py
@@ -632,7 +632,7 @@ class FilePath(AbstractFilePath):
         returning everything else.
         """
         d = self.__dict__.copy()
-        if d.has_key('statinfo'):
+        if 'statinfo' in d:
             del d['statinfo']
         return d
 
diff --git twisted/python/util.py twisted/python/util.py
index ee4cc8a..a20f5e2 100644
--- twisted/python/util.py
+++ twisted/python/util.py
@@ -59,7 +59,7 @@ class InsensitiveDict:
     def has_key(self, key):
         """Case insensitive test whether 'key' exists."""
         k = self._lowerOrReturn(key)
-        return self.data.has_key(k)
+        return k in self.data
     __contains__=has_key
 
     def _doPreserve(self, key):
@@ -92,7 +92,7 @@ class InsensitiveDict:
     def setdefault(self, key, default):
         """If 'key' doesn't exists, associate it with the 'default' value.
         Return value associated with 'key'."""
-        if not self.has_key(key):
+        if key not in self:
             self[key] = default
         return self[key]
 
@@ -156,7 +156,7 @@ class OrderedDict(UserDict):
         return '{'+', '.join([('%r: %r' % item) for item in self.items()])+'}'
 
     def __setitem__(self, key, value):
-        if not self.has_key(key):
+        if key not in self:
             self._order.append(key)
         UserDict.__setitem__(self, key, value)
 
@@ -194,7 +194,7 @@ class OrderedDict(UserDict):
         return (key, value)
 
     def setdefault(self, item, default):
-        if self.has_key(item):
+        if item in self:
             return self[item]
         self[item] = default
         return default
@@ -210,7 +210,7 @@ def uniquify(lst):
     dct = {}
     result = []
     for k in lst:
-        if not dct.has_key(k): result.append(k)
+        if k not in dct: result.append(k)
         dct[k] = 1
     return result
 
@@ -361,7 +361,7 @@ def spewer(frame, s, ignored):
     A trace function for sys.settrace that prints every function or method call.
     """
     from twisted.python import reflect
-    if frame.f_locals.has_key('self'):
+    if 'self' in frame.f_locals:
         se = frame.f_locals['self']
         if hasattr(se, '__class__'):
             k = reflect.qual(se.__class__)
diff --git twisted/runner/inetd.py twisted/runner/inetd.py
index 010b89e..3402e23 100644
--- twisted/runner/inetd.py
+++ twisted/runner/inetd.py
@@ -41,7 +41,7 @@ class InetdProtocol(Protocol):
         # FIXME: maybe this should be done in process.py?  are other uses of
         #        Process possibly affected by this?
         fdesc.setBlocking(sockFD)
-        if childFDs.has_key(2):
+        if 2 in childFDs:
             fdesc.setBlocking(childFDs[2])
 
         service = self.factory.service
diff --git twisted/runner/inetdtap.py twisted/runner/inetdtap.py
index 3e62877..f3f0f98 100644
--- twisted/runner/inetdtap.py
+++ twisted/runner/inetdtap.py
@@ -84,7 +84,7 @@ def makeService(config):
         if rpc:
             # RPC has extra options, so extract that
             protocol = protocol[4:]     # trim 'rpc/'
-            if not protocolDict.has_key(protocol):
+            if protocol not in protocolDict:
                 log.msg('Bad protocol: ' + protocol)
                 continue
             
@@ -94,7 +94,7 @@ def makeService(config):
                 log.msg('Bad RPC service/version: ' + service.name)
                 continue
 
-            if not rpcConf.services.has_key(name):
+            if name not in rpcConf.services:
                 log.msg('Unknown RPC service: ' + repr(service.name))
                 continue
 
@@ -143,7 +143,7 @@ def makeService(config):
                 continue
 
             # Internal services can use a standard ServerFactory
-            if not inetd.internalProtocols.has_key(service.name):
+            if service.name not in inetd.internalProtocols:
                 log.msg('Unknown internal service: ' + service.name)
                 continue
             factory = ServerFactory()
diff --git twisted/spread/pb.py twisted/spread/pb.py
index 76e803c..7e9a5b6 100644
--- twisted/spread/pb.py
+++ twisted/spread/pb.py
@@ -844,13 +844,13 @@ class Broker(banana.Banana):
         pbc = None
         pbe = None
         answerRequired = 1
-        if kw.has_key('pbcallback'):
+        if 'pbcallback' in kw:
             pbc = kw['pbcallback']
             del kw['pbcallback']
-        if kw.has_key('pberrback'):
+        if 'pberrback' in kw:
             pbe = kw['pberrback']
             del kw['pberrback']
-        if kw.has_key('pbanswer'):
+        if 'pbanswer' in kw:
             assert (not pbe) and (not pbc), "You can't specify a no-answer requirement."
             answerRequired = kw['pbanswer']
             del kw['pbanswer']
diff --git twisted/spread/ui/gtk2util.py twisted/spread/ui/gtk2util.py
index 6faaccb..4eb9862 100644
--- twisted/spread/ui/gtk2util.py
+++ twisted/spread/ui/gtk2util.py
@@ -93,7 +93,7 @@ class LoginDialog(GladeKeeper):
 
 
     def setDefaults(self, defaults):
-        if not defaults.has_key('port'):
+        if 'port' not in defaults:
             defaults['port'] = str(pb.portno)
         elif isinstance(defaults['port'], (int, long)):
             defaults['port'] = str(defaults['port'])
diff --git twisted/tap/manhole.py twisted/tap/manhole.py
index 8d727fa..e906004 100644
--- twisted/tap/manhole.py
+++ twisted/tap/manhole.py
@@ -42,7 +42,7 @@ class Options(usage.Options):
     opt_w = opt_password
 
     def postOptions(self):
-        if not self.has_key('password'):
+        if 'password' not in self:
             self.opt_password('-')
 
 def makeService(config):
diff --git twisted/test/test_adbapi.py twisted/test/test_adbapi.py
index 92ff601..0ea6c7b 100644
--- twisted/test/test_adbapi.py
+++ twisted/test/test_adbapi.py
@@ -54,7 +54,7 @@ class ADBAPITestBase:
         if not conn:
             self.failUnless(self.openfun_called)
         else:
-            self.failUnless(self.openfun_called.has_key(conn))
+            self.failUnless(conn in self.openfun_called)
 
     def testPool(self):
         d = self.dbpool.runOperation(simple_table_schema)
diff --git twisted/test/test_dirdbm.py twisted/test/test_dirdbm.py
index 8bd240f..bfa177b 100644
--- twisted/test/test_dirdbm.py
+++ twisted/test/test_dirdbm.py
@@ -51,7 +51,7 @@ class DirDbmTestCase(unittest.TestCase):
 
         # check they exist
         for k, v in self.items:
-            assert d.has_key(k), "has_key() failed"
+            assert k in d, "has_key() failed"
             assert d[k] == v, "database has wrong value"
 
         # check non existent key
@@ -91,7 +91,7 @@ class DirDbmTestCase(unittest.TestCase):
         # delete items
         for k, v in self.items:
             del d[k]
-            assert not d.has_key(k), "has_key() even though we deleted it"
+            assert k not in d, "has_key() even though we deleted it"
         assert len(d.keys()) == 0, "database has keys"
         assert len(d.values()) == 0, "database has values"
         assert len(d.items()) == 0, "database has items"
diff --git twisted/test/test_log.py twisted/test/test_log.py
index 568a7fb..4b88ff2 100644
--- twisted/test/test_log.py
+++ twisted/test/test_log.py
@@ -36,7 +36,7 @@ class LogTest(unittest.TestCase):
         i = catcher.pop()
         self.assertEqual(i["message"][0], "test")
         self.assertEqual(i["testShouldCatch"], True)
-        self.failUnless(i.has_key("time"))
+        self.failUnless("time" in i)
         self.assertEqual(len(catcher), 0)
 
 
diff --git twisted/test/test_newcred.py twisted/test/test_newcred.py
index 870833a..01660cd 100644
--- twisted/test/test_newcred.py
+++ twisted/test/test_newcred.py
@@ -71,7 +71,7 @@ class TestRealm:
         self.avatars = {}
 
     def requestAvatar(self, avatarId, mind, *interfaces):
-        if self.avatars.has_key(avatarId):
+        if avatarId in self.avatars:
             avatar = self.avatars[avatarId]
         else:
             avatar = TestAvatar(avatarId)
diff --git twisted/web/client.py twisted/web/client.py
index 7e9a488..246eea6 100644
--- twisted/web/client.py
+++ twisted/web/client.py
@@ -381,7 +381,7 @@ class HTTPClientFactory(protocol.ClientFactory):
 
     def gotHeaders(self, headers):
         self.response_headers = headers
-        if headers.has_key('set-cookie'):
+        if 'set-cookie' in headers:
             for cookie in headers['set-cookie']:
                 cookparts = cookie.split(';')
                 cook = cookparts[0]
diff --git twisted/web/microdom.py twisted/web/microdom.py
index d8d1146..f18f075 100644
--- twisted/web/microdom.py
+++ twisted/web/microdom.py
@@ -523,7 +523,7 @@ class Element(Node):
 
     def getAttributeNS(self, ns, name, default=None):
         nsk = (ns, name)
-        if self.attributes.has_key(nsk):
+        if nsk in self.attributes:
             return self.attributes[nsk]
         if ns == self.namespace:
             return self.attributes.get(name, default)
@@ -628,7 +628,7 @@ class Element(Node):
         for attr, val in self.attributes.iteritems():
             if isinstance(attr, tuple):
                 ns, key = attr
-                if nsprefixes.has_key(ns):
+                if ns in nsprefixes:
                     prefix = nsprefixes[ns]
                 else:
                     prefix = genprefix()
@@ -827,7 +827,7 @@ class MicroDOMParser(XMLParser):
             ksplit = k.split(':', 1)
             if len(ksplit) == 2:
                 pfx, tv = ksplit
-                if pfx != 'xml' and namespaces.has_key(pfx):
+                if pfx != 'xml' and pfx in namespaces:
                     attributes[namespaces[pfx], tv] = v
                     del attributes[k]
         el = Element(name, attributes, parent,
diff --git twisted/web/resource.py twisted/web/resource.py
index bf76ce2..6898b30 100644
--- twisted/web/resource.py
+++ twisted/web/resource.py
@@ -113,7 +113,7 @@ class Resource:
         return self.children.get(name)
 
     def getDynamicEntity(self, name, request):
-        if not self.children.has_key(name):
+        if name not in self.children:
             return self.getChild(name, request)
         else:
             return None
diff --git twisted/web/static.py twisted/web/static.py
index 07f136f..22b67d5 100644
--- twisted/web/static.py
+++ twisted/web/static.py
@@ -139,7 +139,7 @@ def loadMimeTypes(mimetype_locations=['/etc/mime.types']):
 def getTypeAndEncoding(filename, types, encodings, defaultType):
     p, ext = os.path.splitext(filename)
     ext = ext.lower()
-    if encodings.has_key(ext):
+    if ext in encodings:
         enc = encodings[ext]
         ext = os.path.splitext(p)[1].lower()
     else:
diff --git twisted/web/sux.py twisted/web/sux.py
index 13e6c76..a01d81d 100644
--- twisted/web/sux.py
+++ twisted/web/sux.py
@@ -133,7 +133,7 @@ class XMLParser(Protocol):
         # -radix
 
         if (self.tagName == 'script'
-            and not self.tagAttributes.has_key('src')):
+            and 'src' not in self.tagAttributes):
             # we do this ourselves rather than having begin_waitforendscript
             # becuase that can get called multiple times and we don't want
             # bodydata to get reset other than the first time.
diff --git twisted/web/test/test_http_headers.py twisted/web/test/test_http_headers.py
index 7ca1bc8..e81d55a 100644
--- twisted/web/test/test_http_headers.py
+++ twisted/web/test/test_http_headers.py
@@ -458,8 +458,8 @@ class HeaderDictTests(TestCase):
         C{False} otherwise.
         """
         headers, wrapper = self.headers(foo=["lemur"])
-        self.assertTrue(wrapper.has_key("foo"))
-        self.assertFalse(wrapper.has_key("bar"))
+        self.assertTrue("foo" in wrapper)
+        self.assertFalse("bar" in wrapper)
 
 
     def test_contains(self):
diff --git twisted/web/twcgi.py twisted/web/twcgi.py
index b1f001a..7f686e9 100644
--- twisted/web/twcgi.py
+++ twisted/web/twcgi.py
@@ -118,7 +118,7 @@ class CGIScript(resource.Resource):
             env[envname] = header
         # Propogate our environment
         for key, value in os.environ.items():
-            if not env.has_key(key):
+            if key not in env:
                 env[key] = value
         # And they're off!
         self.runProcess(env, request, qargs)
diff --git twisted/words/im/basechat.py twisted/words/im/basechat.py
index 39ead71..ef4c25a 100644
--- twisted/words/im/basechat.py
+++ twisted/words/im/basechat.py
@@ -46,12 +46,12 @@ class ContactsList:
         @param person: The person whose status has changed.
         @type person: L{IPerson<interfaces.IPerson>} provider
         """
-        if not self.contacts.has_key(person.name):
+        if person.name not in self.contacts:
             self.contacts[person.name] = person
-        if not self.onlineContacts.has_key(person.name) and \
+        if person.name not in self.onlineContacts and \
                 (person.status == ONLINE or person.status == AWAY):
             self.onlineContacts[person.name] = person
-        if self.onlineContacts.has_key(person.name) and \
+        if person.name in self.onlineContacts and \
                 person.status == OFFLINE:
             del self.onlineContacts[person.name]
 
@@ -93,11 +93,11 @@ class ContactsList:
         @type newnick: C{str}
         """
         oldname = person.name
-        if self.contacts.has_key(oldname):
+        if oldname in self.contacts:
             del self.contacts[oldname]
             person.name = newnick
             self.contacts[newnick] = person
-            if self.onlineContacts.has_key(oldname):
+            if oldname in self.onlineContacts:
                 del self.onlineContacts[oldname]
                 self.onlineContacts[newnick] = person
 
@@ -502,7 +502,7 @@ class ChatUI:
         @param newnick: The new C{name} C{person} will take.
         """
         oldnick = person.name
-        if self.persons.has_key((oldnick, person.account)):
+        if (oldnick, person.account) in self.persons:
             conv = self.conversations.get(person)
             if conv:
                 conv.contactChangedNick(person, newnick)
diff --git twisted/words/im/ircsupport.py twisted/words/im/ircsupport.py
index 1feddeb..4597931 100644
--- twisted/words/im/ircsupport.py
+++ twisted/words/im/ircsupport.py
@@ -168,7 +168,7 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
         for ui in range(len(users)):
             while users[ui][0] in ["@","+"]: # channel modes
                 users[ui]=users[ui][1:]
-        if not self._namreplies.has_key(group):
+        if group not in self._namreplies:
             self._namreplies[group]=[]
         self._namreplies[group].extend(users)
         for nickname in users:
@@ -216,7 +216,7 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
 
     def irc_QUIT(self,prefix,params):
         nickname=string.split(prefix,"!")[0]
-        if self._ingroups.has_key(nickname):
+        if nickname in self._ingroups:
             for group in self._ingroups[nickname]:
                 self.getGroupConversation(group).memberLeft(nickname)
             self._ingroups[nickname]=[]
@@ -224,7 +224,7 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
     def irc_NICK(self, prefix, params):
         fromNick = string.split(prefix, "!")[0]
         toNick = params[0]
-        if not self._ingroups.has_key(fromNick):
+        if fromNick not in self._ingroups:
             return
         for group in self._ingroups[fromNick]:
             self.getGroupConversation(group).memberChangedNick(fromNick, toNick)
diff --git twisted/words/im/pbsupport.py twisted/words/im/pbsupport.py
index d3d469e..1a32581 100644
--- twisted/words/im/pbsupport.py
+++ twisted/words/im/pbsupport.py
@@ -145,7 +145,7 @@ class TwistedWordsClient(pb.Referenceable, basesupport.AbstractClientMixin):
             self.chat.getPerson(name, self).setStatus(status)
 
     def remote_setGroupMetadata(self, dict_, groupName):
-        if dict_.has_key("topic"):
+        if "topic" in dict_:
             self.getGroupConversation(groupName).setTopic(dict_["topic"], dict_.get("topic_author", None))
 
     def joinGroup(self, name):
diff --git twisted/words/protocols/irc.py twisted/words/protocols/irc.py
index 2bec909..44a7843 100644
--- twisted/words/protocols/irc.py
+++ twisted/words/protocols/irc.py
@@ -274,7 +274,7 @@ class IRC(protocol.Protocol):
                   " look like a command to me: %s" % command
 
         line = string.join([command] + list(parameter_list))
-        if prefix.has_key('prefix'):
+        if 'prefix' in prefix:
             line = ":%s %s" % (prefix['prefix'], line)
         self.sendLine(line)
 
@@ -2367,7 +2367,7 @@ class IRCClient(basic.LineReceiver):
 
     def ctcpReply_PING(self, user, channel, data):
         nick = user.split('!', 1)[0]
-        if (not self._pings) or (not self._pings.has_key((nick, data))):
+        if (not self._pings) or ((nick, data) not in self._pings):
             raise IRCBadMessage,\
                   "Bogus PING response from %s: %s" % (user, data)
 
@@ -2416,7 +2416,7 @@ class IRCClient(basic.LineReceiver):
         line = lowDequote(line)
         try:
             prefix, command, params = parsemsg(line)
-            if numeric_to_symbolic.has_key(command):
+            if command in numeric_to_symbolic:
                 command = numeric_to_symbolic[command]
             self.handleCommand(command, prefix, params)
         except IRCBadMessage:
diff --git twisted/words/protocols/msn.py twisted/words/protocols/msn.py
index 5e23a4d..79c0fa1 100644
--- twisted/words/protocols/msn.py
+++ twisted/words/protocols/msn.py
@@ -232,7 +232,7 @@ class PassportNexus(HTTPClient):
     def handleEndHeaders(self):
         if self.connected:
             self.transport.loseConnection()
-        if not self.headers.has_key('passporturls') or not self.headers['passporturls'].has_key('dalogin'):
+        if 'passporturls' not in self.headers or 'dalogin' not in self.headers['passporturls']:
             self.deferred.errback(failure.Failure(failure.DefaultException("Invalid Nexus Reply")))
         self.deferred.callback('https://' + self.headers['passporturls']['dalogin'])
 
@@ -275,7 +275,7 @@ class PassportLogin(HTTPClient):
             self.transport.loseConnection()
         authHeader = 'authentication-info'
         _interHeader = 'www-authenticate'
-        if self.headers.has_key(_interHeader):
+        if _interHeader in self.headers:
             authHeader = _interHeader
         try:
             info = self.headers[authHeader]
@@ -386,7 +386,7 @@ class MSNMessage:
 
     def hasHeader(self, header):
         """ check to see if the desired header exists """
-        return self.headers.has_key(header)
+        return header in self.headers
 
     def getMessage(self):
         """ return the message - not including headers """
@@ -602,7 +602,7 @@ class MSNEventBase(LineReceiver):
         Fire the callback for the given id
         if one exists and return 1, else return false
         """
-        if self.ids.has_key(id):
+        if id in self.ids:
             self.ids[id][0].callback(args)
             del self.ids[id]
             return 1
diff --git twisted/words/protocols/oscar.py twisted/words/protocols/oscar.py
index 81571d4..c02ed44 100644
--- twisted/words/protocols/oscar.py
+++ twisted/words/protocols/oscar.py
@@ -349,7 +349,7 @@ class SNACBased(OscarConnection):
 
     def oscar_Data(self,data):
         snac=readSNAC(data[1])
-        if self.requestCallbacks.has_key(snac[4]):
+        if snac[4] in self.requestCallbacks:
             d = self.requestCallbacks[snac[4]]
             del self.requestCallbacks[snac[4]]
             if snac[1]!=1:
@@ -374,7 +374,7 @@ class SNACBased(OscarConnection):
         self.supportedFamilies = struct.unpack("!"+str(numFamilies)+'H', snac[3])
         d = ''
         for fam in self.supportedFamilies:
-            if self.snacFamilies.has_key(fam):
+            if fam in self.snacFamilies:
                 d=d+struct.pack('!2H',fam,self.snacFamilies[fam][0])
         self.sendSNACnr(0x01,0x17, d)
 
@@ -397,7 +397,7 @@ class SNACBased(OscarConnection):
         """
         d = ''
         for fam in self.supportedFamilies:
-            if self.snacFamilies.has_key(fam):
+            if fam in self.snacFamilies:
                 version, toolID, toolVersion = self.snacFamilies[fam]
                 d = d + struct.pack('!4H',fam,version,toolID,toolVersion)
         self.sendSNACnr(0x01,0x02,d)
@@ -592,14 +592,14 @@ class BOSConnection(SNACBased):
                 exchange = struct.unpack('!H',moreTLVs[10001][:2])[0]
                 name = moreTLVs[10001][3:-2]
                 instance = struct.unpack('!H',moreTLVs[10001][-2:])[0]
-                if not self.services.has_key(SERVICE_CHATNAV):
+                if SERVICE_CHATNAV not in self.services:
                     self.connectService(SERVICE_CHATNAV,1).addCallback(lambda x: self.services[SERVICE_CHATNAV].getChatInfo(exchange, name, instance).\
                         addCallback(self._cbGetChatInfoForInvite, user, moreTLVs[12]))
                 else:
                     self.services[SERVICE_CHATNAV].getChatInfo(exchange, name, instance).\
                         addCallback(self._cbGetChatInfoForInvite, user, moreTLVs[12])
             elif requestClass == CAP_SEND_FILE:
-                if moreTLVs.has_key(11): # cancel
+                if 11 in moreTLVs: # cancel
                     log.msg('cancelled file request')
                     log.msg(status)
                     return # handle this later
@@ -692,14 +692,14 @@ class BOSConnection(SNACBased):
                 groups[groupID].addUser(buddyID, SSIBuddy(name, tlvs))
             elif itemType == 1: # group
                 g = SSIGroup(name, tlvs)
-                if groups.has_key(0): groups[0].addUser(groupID, g)
+                if 0 in groups: groups[0].addUser(groupID, g)
                 groups[groupID] = g
             elif itemType == 2: # permit
                 permit.append(name)
             elif itemType == 3: # deny
                 deny.append(name)
             elif itemType == 4: # permit deny info
-                if not tlvs.has_key(0xcb):
+                if 0xcb not in tlvs:
                     continue # this happens with ICQ
                 permitMode = {1:'permitall',2:'denyall',3:'permitsome',4:'denysome',5:'permitbuddies'}[ord(tlvs[0xca])]
                 visibility = {'\xff\xff\xff\xff':'all','\x00\x00\x00\x04':'notaim'}[tlvs[0xcb]]
@@ -861,7 +861,7 @@ class BOSConnection(SNACBased):
         """
         create a chat room
         """
-        if self.services.has_key(SERVICE_CHATNAV):
+        if SERVICE_CHATNAV in self.services:
             return self.services[SERVICE_CHATNAV].createChat(shortName)
         else:
             return self.connectService(SERVICE_CHATNAV,1).addCallback(lambda s: s.createChat(shortName))
@@ -1168,7 +1168,7 @@ class OscarAuthenticator(OscarConnection):
             i=snac[5].find("\000")
             snac[5]=snac[5][i:]
         tlvs=readTLVs(snac[5])
-        if tlvs.has_key(6):
+        if 6 in tlvs:
             self.cookie=tlvs[6]
             server,port=string.split(tlvs[5],":")
             d = self.connectToBOS(server, int(port))
@@ -1176,7 +1176,7 @@ class OscarAuthenticator(OscarConnection):
             if self.deferred:
                 d.chainDeferred(self.deferred)
             self.disconnect()
-        elif tlvs.has_key(8):
+        elif 8 in tlvs:
             errorcode=tlvs[8]
             errorurl=tlvs[4]
             if errorcode=='\000\030':
diff --git twisted/words/service.py twisted/words/service.py
index 388f7e6..0e4f8b6 100644
--- twisted/words/service.py
+++ twisted/words/service.py
@@ -213,9 +213,9 @@ class IRCUser(irc.IRC):
 
     # Make sendMessage a bit more useful to us
     def sendMessage(self, command, *parameter_list, **kw):
-        if not kw.has_key('prefix'):
+        if 'prefix' not in kw:
             kw['prefix'] = self.hostname
-        if not kw.has_key('to'):
+        if 'to' not in kw:
             kw['to'] = self.name.encode(self.encoding)
 
         arglist = [self, command, kw['to']] + list(parameter_list)
diff --git twisted/words/xish/domish.py twisted/words/xish/domish.py
index 407ee0c..3be7ed6 100644
--- twisted/words/xish/domish.py
+++ twisted/words/xish/domish.py
@@ -43,7 +43,7 @@ class _ListSerializer:
         return u"".join(self.writelist)
 
     def getPrefix(self, uri):
-        if not self.prefixes.has_key(uri):
+        if uri not in self.prefixes:
             self.prefixes[uri] = "xn%d" % (self.prefixCounter)
             self.prefixCounter = self.prefixCounter + 1
         return self.prefixes[uri]
@@ -451,7 +451,7 @@ class Element(object):
 
     def hasAttribute(self, attrib):
         """ Determine if the specified attribute exists """
-        return self.attributes.has_key(self._dqa(attrib))
+        return self._dqa(attrib) in self.attributes
 
     def compareAttribute(self, attrib, value):
         """ Safely compare the value of an attribute against a provided value.
