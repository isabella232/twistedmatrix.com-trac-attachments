Index: twisted/protocols/htb.py
===================================================================
--- twisted/protocols/htb.py	(revision 34277)
+++ twisted/protocols/htb.py	(working copy)
@@ -31,15 +31,17 @@
 
 
 class Bucket:
-    """Token bucket, or something like it.
+    """Implementation of a Token Bucket
 
-    I can hold up to a certain number of tokens, and I drain over time.
+    A Bucket can hold a certain number of tokens and it drains over time.
 
-    @cvar maxburst: Size of the bucket, in bytes.  If None, the bucket is
-        never full.
+    @cvar maxburst: The maximum number of tokens that the Bucket can
+        hold at any given time. If this is None, the Bucket has
+        an infinite size.
     @type maxburst: int
-    @cvar rate: Rate the bucket drains, in bytes per second.  If None,
-        the bucket drains instantaneously.
+    @cvar rate: The rate at which the Bucket drains, in number
+        of tokens per second. If the rate is None, the Bucket
+        drains instantaneously.
     @type rate: int
     """
 
@@ -49,17 +51,27 @@
     _refcount = 0
 
     def __init__(self, parentBucket=None):
+        """Create a Bucket that may have a parent Bucket
+
+        @param parentBucket: If a parent Bucket is specified,
+            all add() and drip() operations on this Bucket
+            will be applied on the parent Bucket as well
+        @type parentBucket: L{Bucket}
+        """
         self.content = 0
         self.parentBucket=parentBucket
         self.lastDrip = time()
 
     def add(self, amount):
-        """Add tokens to me.
+        """Adds tokens to the Bucket and its parentBucket
 
-        @param amount: A quanity of tokens to add.
+        This will add as many of the L{amount} tokens
+        as will fit into both this Bucket and its parentBucket.
+
+        @param amount: The number of tokens to try to add.
         @type amount: int
 
-        @returns: The number of tokens that fit.
+        @returns: The number of tokens that actually fit.
         @returntype: int
         """
         self.drip()
@@ -77,8 +89,8 @@
         """
         Let some of the bucket drain.
 
-        How much of the bucket drains depends on how long it has been
-        since I was last called.
+        The Bucket drains at the rate specified by the class
+        variable rate.
 
         @returns: C{True} if the bucket is empty after this drip.
         @returntype: bool
@@ -90,15 +102,16 @@
             self.content = 0
         else:
             now = time()
-            deltaT = now - self.lastDrip
-            self.content = long(max(0, self.content - deltaT * self.rate))
+            delta_time = now - self.lastDrip
+            delta_tokens = delta_time * self.rate
+            self.content = max(0, self.content - delta_tokens)
             self.lastDrip = now
         return self.content == 0
 
 
 class IBucketFilter(Interface):
     def getBucketFor(*somethings, **some_kw):
-        """I'll give you a bucket for something.
+        """Return a Bucket corresponding to the provided parameters
 
         @returntype: L{Bucket}
         """
@@ -123,7 +136,7 @@
         self.lastSweep = time()
 
     def getBucketFor(self, *a, **kw):
-        """You want a bucket for that?  I'll give you a bucket.
+        """Find or create a Bucket corresponding to the provided parameters
 
         Any parameters are passed on to L{getBucketKey}, from them it
         decides which bucket you get.
@@ -147,25 +160,27 @@
         return bucket
 
     def getBucketKey(self, *a, **kw):
-        """I determine who gets which bucket.
+        """Construct a key based on the input parameters to choose a Bucket
 
-        Unless I'm overridden, everything gets the same bucket.
+        The default implementation returns the same key for all
+        arguments. Override this method to provide Bucket selection.
 
         @returns: something to be used as a key in the bucket cache.
         """
         return None
 
     def sweep(self):
-        """I throw away references to empty buckets."""
+        """Remove empty buckets"""
         for key, bucket in self.buckets.items():
-            if (bucket._refcount == 0) and bucket.drip():
+            bucket_is_empty = bucket.drip()
+            if (bucket._refcount == 0) and bucket_is_empty:
                 del self.buckets[key]
 
         self.lastSweep = time()
 
 
 class FilterByHost(HierarchicalBucketFilter):
-    """A bucket filter with a bucket for each host.
+    """A Hierarchical Bucket filter with a Bucket for each host.
     """
     sweepInterval = 60 * 20
 
@@ -174,7 +189,7 @@
 
 
 class FilterByServer(HierarchicalBucketFilter):
-    """A bucket filter with a bucket for each service.
+    """A Hierarchical Bucket filter with a Bucket for each service.
     """
     sweepInterval = None
 
