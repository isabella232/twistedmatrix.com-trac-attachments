Index: twisted/internet/base.py
===================================================================
--- twisted/internet/base.py	(revision 45515)
+++ twisted/internet/base.py	(working copy)
@@ -210,6 +210,96 @@
 
 
 
+class _PendingDelayedCalls(object):
+
+    def __init__(self):
+        self._pendingTimedCalls = []
+        self._newTimedCalls = []
+        self._cancellations = 0
+
+
+    def __len__(self):
+        return len(self._pendingTimedCalls)
+
+
+    def __getitem__(self, key):
+        return self._pendingTimedCalls[key]
+
+
+    def add(self, tple):
+        self._newTimedCalls.append(tple)
+
+
+    def moveCallLaterSooner(self, tple):
+        # Linear time find: slow.
+        heap = self._pendingTimedCalls
+        try:
+            pos = heap.index(tple)
+
+            # Move elt up the heap until it rests at the right place.
+            elt = heap[pos]
+            while pos != 0:
+                parent = (pos-1) // 2
+                if heap[parent] <= elt:
+                    break
+                # move parent down
+                heap[pos] = heap[parent]
+                pos = parent
+            heap[pos] = elt
+        except ValueError:
+            # element was not found in heap - oh well...
+            pass
+
+
+    def cancelCallLater(self, tple):
+        self._cancellations += 1
+
+
+    def getDelayedCalls(self):
+        """Return all the outstanding delayed calls in the system.
+        They are returned in no particular order.
+        This method is not efficient -- it is really only meant for
+        test cases."""
+        return [x for x in (self._pendingTimedCalls + self._newTimedCalls)
+                if not x.cancelled]
+
+
+    def insertNewDelayedCalls(self):
+        for call in self._newTimedCalls:
+            if call.cancelled:
+                self._cancellations -= 1
+            else:
+                call.activate_delay()
+                heappush(self._pendingTimedCalls, call)
+        self._newTimedCalls = []
+
+
+    def popEarliestBefore(self, time):
+        while self and self[0].time <= time:
+            call = heappop(self._pendingTimedCalls)
+            if call.cancelled:
+                self._cancellations -= 1
+                continue
+
+            if call.delayed_time > 0:
+                call.activate_delay()
+                heappush(self._pendingTimedCalls, call)
+                continue
+
+            return call
+        return None
+
+
+    def updateCancellations(self):
+        if (self._cancellations > 50 and
+                self._cancellations > len(self._pendingTimedCalls) >> 1):
+            self._cancellations = 0
+            self._pendingTimedCalls = [x for x in self._pendingTimedCalls
+                                       if not x.cancelled]
+            heapify(self._pendingTimedCalls)
+
+
+
 @implementer(IResolverSimple)
 class ThreadedResolver(object):
     """
@@ -475,9 +565,7 @@
     def __init__(self):
         self.threadCallQueue = []
         self._eventTriggers = {}
-        self._pendingTimedCalls = []
-        self._newTimedCalls = []
-        self._cancellations = 0
+        self._pendingDelayedCalls = _PendingDelayedCalls()
         self.running = False
         self._started = False
         self._justStopped = False
@@ -707,53 +795,21 @@
         assert _seconds >= 0, \
                "%s is not greater than or equal to 0 seconds" % (_seconds,)
         tple = DelayedCall(self.seconds() + _seconds, _f, args, kw,
-                           self._cancelCallLater,
-                           self._moveCallLaterSooner,
+                           self._pendingDelayedCalls.cancelCallLater,
+                           self._pendingDelayedCalls.moveCallLaterSooner,
                            seconds=self.seconds)
-        self._newTimedCalls.append(tple)
+        self._pendingDelayedCalls.add(tple)
         return tple
 
-    def _moveCallLaterSooner(self, tple):
-        # Linear time find: slow.
-        heap = self._pendingTimedCalls
-        try:
-            pos = heap.index(tple)
 
-            # Move elt up the heap until it rests at the right place.
-            elt = heap[pos]
-            while pos != 0:
-                parent = (pos-1) // 2
-                if heap[parent] <= elt:
-                    break
-                # move parent down
-                heap[pos] = heap[parent]
-                pos = parent
-            heap[pos] = elt
-        except ValueError:
-            # element was not found in heap - oh well...
-            pass
-
-    def _cancelCallLater(self, tple):
-        self._cancellations+=1
-
-
     def getDelayedCalls(self):
         """Return all the outstanding delayed calls in the system.
         They are returned in no particular order.
         This method is not efficient -- it is really only meant for
         test cases."""
-        return [x for x in (self._pendingTimedCalls + self._newTimedCalls) if not x.cancelled]
+        return self._pendingDelayedCalls.getDelayedCalls()
 
-    def _insertNewDelayedCalls(self):
-        for call in self._newTimedCalls:
-            if call.cancelled:
-                self._cancellations-=1
-            else:
-                call.activate_delay()
-                heappush(self._pendingTimedCalls, call)
-        self._newTimedCalls = []
 
-
     def timeout(self):
         """
         Determine the longest time the reactor may sleep (waiting on I/O
@@ -764,12 +820,12 @@
         @rtype: L{float}
         """
         # insert new delayed calls to make sure to include them in timeout value
-        self._insertNewDelayedCalls()
+        self._pendingDelayedCalls.insertNewDelayedCalls()
 
-        if not self._pendingTimedCalls:
+        if not self._pendingDelayedCalls:
             return None
 
-        delay = self._pendingTimedCalls[0].time - self.seconds()
+        delay = self._pendingDelayedCalls[0].time - self.seconds()
 
         # Pick a somewhat arbitrary maximum possible value for the timeout.
         # This value is 2 ** 31 / 1000, which is the number of seconds which can
@@ -806,20 +862,14 @@
                 self.wakeUp()
 
         # insert new delayed calls now
-        self._insertNewDelayedCalls()
+        self._pendingDelayedCalls.insertNewDelayedCalls()
 
         now = self.seconds()
-        while self._pendingTimedCalls and (self._pendingTimedCalls[0].time <= now):
-            call = heappop(self._pendingTimedCalls)
-            if call.cancelled:
-                self._cancellations-=1
-                continue
+        while self._pendingDelayedCalls:
+            call = self._pendingDelayedCalls.popEarliestBefore(now)
+            if call is None:
+                break
 
-            if call.delayed_time > 0:
-                call.activate_delay()
-                heappush(self._pendingTimedCalls, call)
-                continue
-
             try:
                 call.called = 1
                 call.func(*call.args, **call.kw)
@@ -835,12 +885,7 @@
                     log.msg(e)
 
 
-        if (self._cancellations > 50 and
-             self._cancellations > len(self._pendingTimedCalls) >> 1):
-            self._cancellations = 0
-            self._pendingTimedCalls = [x for x in self._pendingTimedCalls
-                                       if not x.cancelled]
-            heapify(self._pendingTimedCalls)
+        self._pendingDelayedCalls.updateCancellations()
 
         if self._justStopped:
             self._justStopped = False
Index: twisted/internet/task.py
===================================================================
--- twisted/internet/task.py	(revision 45515)
+++ twisted/internet/task.py	(working copy)
@@ -739,9 +739,21 @@
     rightNow = 0.0
 
     def __init__(self):
-        self.calls = []
+        self._pendingDelayedCalls = base._PendingDelayedCalls()
 
 
+    @property
+    def calls(self):
+        # XXX: This used to be the actual list of pending DelayedCalls.
+        #      It's undocumented (and therefore an implicitly private API),
+        #      but there are tests that use it instead of getDelayedCalls().
+        #      It should probably be deprecated, and ideally made immutable
+        #      so that attempts to modify it fail instead of silently doing
+        #      nothing.
+        return sorted(self._pendingDelayedCalls.getDelayedCalls(),
+                      key=lambda x: x.getTime())
+
+
     def seconds(self):
         """
         Pretend to be time.time().  This is used internally when an operation
@@ -754,24 +766,16 @@
         return self.rightNow
 
 
-    def _sortCalls(self):
-        """
-        Sort the pending calls according to the time they are scheduled.
-        """
-        self.calls.sort(key=lambda a: a.getTime())
-
-
     def callLater(self, when, what, *a, **kw):
         """
         See L{twisted.internet.interfaces.IReactorTime.callLater}.
         """
         dc = base.DelayedCall(self.seconds() + when,
-                               what, a, kw,
-                               self.calls.remove,
-                               lambda c: None,
-                               self.seconds)
-        self.calls.append(dc)
-        self._sortCalls()
+                              what, a, kw,
+                              self._pendingDelayedCalls.cancelCallLater,
+                              self._pendingDelayedCalls.moveCallLaterSooner,
+                              self.seconds)
+        self._pendingDelayedCalls.add(dc)
         return dc
 
 
@@ -779,7 +783,7 @@
         """
         See L{twisted.internet.interfaces.IReactorTime.getDelayedCalls}
         """
-        return self.calls
+        return self._pendingDelayedCalls.getDelayedCalls()
 
 
     def advance(self, amount):
@@ -792,12 +796,17 @@
         time.
         """
         self.rightNow += amount
-        self._sortCalls()
-        while self.calls and self.calls[0].getTime() <= self.seconds():
-            call = self.calls.pop(0)
+        self._pendingDelayedCalls.insertNewDelayedCalls()
+
+        now = self.seconds()
+        while self._pendingDelayedCalls:
+            call = self._pendingDelayedCalls.popEarliestBefore(now)
+            if call is None:
+                break
             call.called = 1
             call.func(*call.args, **call.kw)
-            self._sortCalls()
+            # We may have new or updated delayed calls which need scheduling.
+            self._pendingDelayedCalls.insertNewDelayedCalls()
 
 
     def pump(self, timings):
