diff --git a/twisted/internet/_sslverify.py b/twisted/internet/_sslverify.py
index 20119fa..da9e080 100644
--- a/twisted/internet/_sslverify.py
+++ b/twisted/internet/_sslverify.py
@@ -626,6 +626,7 @@ class OpenSSLCertificateOptions(object):
     A factory for SSL context objects for both SSL servers and clients.
     """
 
+    # Factory for creating contexts.  Configurable for testability.
     _contextFactory = SSL.Context
     _context = None
     # Older versions of PyOpenSSL didn't provide OP_ALL.  Fudge it here, just in case.
diff --git a/twisted/test/test_sslverify.py b/twisted/test/test_sslverify.py
index df906d5..69d3856 100644
--- a/twisted/test/test_sslverify.py
+++ b/twisted/test/test_sslverify.py
@@ -121,15 +121,18 @@ class WritingProtocol(protocol.Protocol):
 
 class FakeContext:
     """
-    Introspectable fake of an OpenSSL.SSL.Context.
+    Fake of an C{OpenSSL.SSL.Context}.
+
+    Saves call arguments for later introspection.
     """
+    _options = 0
 
     def __init__(self, method):
         self._method = method
         self._extraCertChain = []
 
     def set_options(self, options):
-        pass
+        self._options |= options
 
     def use_certificate(self, certificate):
         self._certificate = certificate
@@ -325,6 +328,9 @@ class OpenSSLOptions(unittest.TestCase):
 
 
     def test_extraChainFilesAreAddedIfSupplied(self):
+        """
+        C{extraCertChain} is respected when creating contexts.
+        """
         opts = sslverify.OpenSSLCertificateOptions(
             privateKey=self.sKey,
             certificate=self.sCert,
@@ -337,6 +343,19 @@ class OpenSSLOptions(unittest.TestCase):
         self.assertEqual(self.extraCertChain, ctx._extraCertChain)
 
 
+    def test_extraChainDoesNotBreakPyOpenSSL(self):
+        """
+        C{extraCertChain} doesn't break C{OpenSSL.SSL.Context} creation.
+        """
+        opts = sslverify.OpenSSLCertificateOptions(
+            privateKey=self.sKey,
+            certificate=self.sCert,
+            extraCertChain=self.extraCertChain,
+        )
+        ctx = opts.getContext()
+        self.assertIsInstance(ctx, SSL.Context)
+
+
     def test_abbreviatingDistinguishedNames(self):
         """
         Check that abbreviations used in certificates correctly map to
