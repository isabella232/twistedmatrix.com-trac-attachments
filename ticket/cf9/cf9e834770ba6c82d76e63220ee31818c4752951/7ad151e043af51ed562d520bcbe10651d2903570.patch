Index: C:/tmp/conch/svn/ssh/connection.py
===================================================================
--- C:/tmp/conch/svn/ssh/connection.py	(revision 16040)
+++ C:/tmp/conch/svn/ssh/connection.py	(working copy)
@@ -173,15 +173,38 @@
         requestType, rest = common.getNS(packet[4:])
         wantReply = ord(rest[0])
         channel = self.channels[localChannel]
+        #
+        # XXX - BUG - Reported by Stefano Masini <stefano@stefanomasini.com>
+        #
+        #  Putty wants reply, while linux's ssh doesn't.
+        #  Linux ssh works, while Putty doesn't. The reason is that the MSG_CHANNEL_SUCCESS packet is
+        #  wrongly sent back after the shell is initiated. Here's why:
+        #  if reply is required, the reply packet is sent by _cbChannelRequest.
+        #  But _cbChannelRequest is chained to the deferred created by SSHSession.request_shell() (that's
+        #  in turn called by channel.requestReceived). Therefore packets are sent in the wrong order.
+        #  So, I guess the mechanism should be broken into two steps:
+        #   1. When shell is requested (and reply is required too), figure out whether
+        #      the command can be performed, and return success or failure, right away.
+        #   2. Perform command, i.e. initialize shell, thus sending all the shell related
+        #      packets *after* MSG_CHANNEL_SUCCESS.
+        #
+        #  Right now, since I need the thing to work, I blindly send a MSG_CHANNEL_SUCCESS if
+        #  reply is needed, and ignore errors if SSHSession.request_shell()'s deferred fails.
+        #
+        #  This is obviously a horrible and wrong hack, but I'd rather let it be fixed by someone 
+        #  who knows SSH better than me.
+        #
+        if wantReply:
+            self._cbChannelRequest(None, localChannel)
         d = log.callWithLogger(channel, channel.requestReceived, requestType, rest[1:])
-        if wantReply:
-            if isinstance(d, defer.Deferred):
-                d.addCallback(self._cbChannelRequest, localChannel)
-                d.addErrback(self._ebChannelRequest, localChannel)
-            elif d:
-                self._cbChannelRequest(None, localChannel)
-            else:
-                self._ebChannelRequest(None, localChannel)
+        #if wantReply:
+        #    if isinstance(d, defer.Deferred):
+        #        d.addCallback(self._cbChannelRequest, localChannel)
+        #        d.addErrback(self._ebChannelRequest, localChannel)
+        #    elif d:
+        #        self._cbChannelRequest(None, localChannel)
+        #    else:
+        #        self._ebChannelRequest(None, localChannel)
 
     def _cbChannelRequest(self, result, localChannel):
             self.transport.sendPacket(MSG_CHANNEL_SUCCESS, struct.pack('>L', 
