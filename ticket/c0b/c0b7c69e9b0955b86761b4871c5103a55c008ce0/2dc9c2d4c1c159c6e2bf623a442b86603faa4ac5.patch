Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 27354)
+++ twisted/mail/imap4.py	(working copy)
@@ -391,10 +391,10 @@
         return ''
 
     def setResponse(self, response):
-        parts = response[:-1].split('\0', 1)
-        if len(parts) != 2:
+        parts = response.split('\0')
+        if len(parts) != 3:
             raise IllegalClientResponse("Malformed Response - wrong number of parts")
-        self.username, self.password = parts
+        useless, self.username, self.password = parts
 
     def moreChallenges(self):
         return False
@@ -4159,7 +4159,7 @@
         return "PLAIN"
 
     def challengeResponse(self, secret, chal):
-        return '%s\0%s\0' % (self.user, secret)
+        return '\0%s\0%s' % (self.user, secret)
 
 
 class MailboxException(IMAP4Exception): pass
Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 27354)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -1720,6 +1720,28 @@
         self.assertEquals(self.server.account, None)
 
 
+class SASLPLAINTestCase(unittest.TestCase):
+    
+    def testAuthenticatorChallengeResponse(self):
+        cAuth = imap4.PLAINAuthenticator('testuser')
+        secret = 'secret'
+        chal = 'challenge'
+        expected_response = '\0testuser\0secret'    # correct way
+        #~ expected_response = 'testuser\0secret\0'    # old way
+        response = cAuth.challengeResponse(secret, chal)
+        # verify that response is the expected value
+        self.assertEquals(response, expected_response)
+        
+    def testCredentialsSetResponse(self):
+        cred = imap4.PLAINCredentials()
+        test_response = '\0testuser\0secret'    # correct way
+        #~ test_response = 'testuser\0secret\0'    # old way
+        cred.setResponse(test_response)
+        # verify that cred.username and cred.password are the expected values
+        self.assertEquals(cred.username, 'testuser')
+        self.assertEquals(cred.password, 'secret')
+
+
 class UnsolicitedResponseTestCase(IMAP4HelperMixin, unittest.TestCase):
     def testReadWrite(self):
         def login():
