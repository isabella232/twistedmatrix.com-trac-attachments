--- twisted/web/xmlrpc.py	Sat Jun 18 02:36:07 2005
+++ sandbox/oubiwann/xmlrpc.py	Wed Feb  8 00:01:45 2006
@@ -18,8 +18,9 @@ from __future__ import nested_scopes
 __version__ = "$Revision: 1.32 $"[11:-2]
 
 # System Imports
+import base64
 import xmlrpclib
-import urlparse
+from urlparse import urlparse
 
 # Sibling Imports
 from twisted.web import resource, server
@@ -38,7 +39,6 @@ Binary = xmlrpclib.Binary
 Boolean = xmlrpclib.Boolean
 DateTime = xmlrpclib.DateTime
 
-
 class NoSuchFunction(Fault):
     """There is no function by the given name."""
     pass
@@ -243,11 +243,15 @@ def addIntrospection(xmlrpc):
 class QueryProtocol(http.HTTPClient):
 
     def connectionMade(self):
-        self.sendCommand('POST', self.factory.url)
+        self.sendCommand('POST', self.factory.path)
         self.sendHeader('User-Agent', 'Twisted/XMLRPClib')
         self.sendHeader('Host', self.factory.host)
         self.sendHeader('Content-type', 'text/xml')
         self.sendHeader('Content-length', str(len(self.factory.payload)))
+        if self.factory.user:
+            auth = base64.encodestring('%s:%s' % (
+                self.factory.user, self.factory.password))
+            self.sendHeader('Authorization', 'Basic %s' % auth)
         self.endHeaders()
         self.transport.write(self.factory.payload)
 
@@ -272,8 +276,9 @@ class QueryFactory(protocol.ClientFactor
     deferred = None
     protocol = QueryProtocol
 
-    def __init__(self, url, host, method, *args):
-        self.url, self.host = url, host
+    def __init__(self, path, host, method, user=None, password=None, *args):
+        self.path, self.host = path, host
+        self.user, self.password = user, password
         self.payload = payloadTemplate % (method, xmlrpclib.dumps(args))
         self.deferred = defer.Deferred()
 
@@ -311,19 +316,32 @@ class Proxy:
     """
 
     def __init__(self, url):
-        parts = urlparse.urlparse(url)
-        self.url = urlparse.urlunparse(('', '')+parts[2:])
-        if self.url == "":
-            self.url = "/"
-        if ':' in parts[1]:
-            self.host, self.port = parts[1].split(':')
-            self.port = int(self.port)
+
+        scheme, netloc, path, params, query, fragment = urlparse(url)
+        netloc_parts = netloc.split('@')
+        if len(netloc_parts) == 2:
+            userpass = netloc_parts.pop(0).split(':')
+            self.user = userpass.pop(0)
+            try:
+                self.password = userpass.pop(0)
+            except:
+                self.password = None
         else:
-            self.host, self.port = parts[1], None
-        self.secure = parts[0] == 'https'
+            self.user = self.password = None
+        hostport = netloc_parts[0].split(':')
+        self.host = hostport.pop(0)
+        try:
+            self.port = int(hostport.pop(0))
+        except:
+            self.port = None
+        self.path = path
+        if self.path in ['', None]:
+            self.path = '/'
+        self.secure = scheme == 'https'
 
     def callRemote(self, method, *args):
-        factory = QueryFactory(self.url, self.host, method, *args)
+        factory = QueryFactory(self.path, self.host, method, self.user, 
+            self.password, *args)
         if self.secure:
             from twisted.internet import ssl
             reactor.connectSSL(self.host, self.port or 443,
