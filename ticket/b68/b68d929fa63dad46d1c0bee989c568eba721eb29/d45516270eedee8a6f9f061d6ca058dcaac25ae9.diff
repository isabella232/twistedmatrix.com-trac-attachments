Index: twisted/web/server.py
===================================================================
--- twisted/web/server.py	(revision 17599)
+++ twisted/web/server.py	(working copy)
@@ -35,7 +35,7 @@
 
 # Twisted Imports
 from twisted.spread import pb
-from twisted.internet import reactor, protocol, defer, address
+from twisted.internet import reactor, protocol, defer, address, task
 from twisted.web import http
 from twisted.python import log, reflect, roots, failure, components
 from twisted import copyright
@@ -399,8 +399,9 @@
         self.site = site
         self.uid = uid
         self.expireCallbacks = []
-        self.touch()
         self.sessionNamespaces = {}
+        self.checkExpiredLoop = task.LoopingCall(self.checkExpired)
+        self.touch()
 
     def notifyOnExpire(self, callback):
         """Call this callback when the session expires or logs out.
@@ -415,6 +416,9 @@
         for c in self.expireCallbacks:
             c()
         self.expireCallbacks = []
+        self.checkExpiredLoop.stop()
+        # Break reference cycle.
+        self.checkExpiredLoop = None
 
     def touch(self):
         self.lastModified = time.time()
@@ -424,13 +428,9 @@
         if time.time() - self.lastModified > 900:
             if self.site.sessions.has_key(self.uid):
                 self.expire()
-            else:
-                pass
-                #log.msg("no session to expire: %s" % self.uid)
-        else:
-            #log.msg("session given the will to live for 30 more minutes")
-            reactor.callLater(1800, self.checkExpired)
 
+
+
 version = "TwistedWeb/%s" % copyright.version
 
 
@@ -467,9 +467,8 @@
         """Generate a new Session instance, and store it for future reference.
         """
         uid = self._mkuid()
-        s = Session(self, uid)
-        session = self.sessions[uid] = s
-        reactor.callLater(1800, s.checkExpired)
+        session = self.sessions[uid] = Session(self, uid)
+        session.checkExpiredLoop.start(1800)
         return session
 
     def getSession(self, uid):
Index: twisted/web/test/test_web.py
===================================================================
--- twisted/web/test/test_web.py	(revision 17599)
+++ twisted/web/test/test_web.py	(working copy)
@@ -86,6 +86,23 @@
         assert site.getResourceFor(DummyRequest([''])) is sres2, "Got the wrong resource."
 
 
+
+class SessionTest(unittest.TestCase):
+
+    def setUp(self):
+        self.site = server.Site(SimpleResource())
+
+    def test_delayedCallCleanup(self):
+        """Checking to make sure Sessions do not leave extra DelayedCalls.
+        """
+        session = self.site.makeSession()
+        session.touch()
+        session.expire()
+        # If Trial doesn't complain about this being a broken test,
+        # then I call it passing.
+
+
+
 # Conditional requests:
 # If-None-Match, If-Modified-Since
 
