Index: twisted/test/test_protocols.py
===================================================================
--- twisted/test/test_protocols.py	(revision 32519)
+++ twisted/test/test_protocols.py	(working copy)
@@ -755,9 +755,17 @@
     """
     Mixin defining tests for string receiving protocols with a C{recvd}
     attribute which should be settable by application code, to be combined with
-    L{LPTestCaseMixin} on a L{TestCase} subclass
+    L{IntNTestCaseMixin} on a L{TestCase} subclass
     """
 
+    def makeMessage(self, protocol, data):
+        """
+        Return C{data} prefixed with message length in C{protocol.structFormat}
+        form.
+        """
+        return struct.pack(protocol.structFormat, len(data)) + data
+
+
     def test_recvdContainsRemainingData(self):
         """
         In stringReceived, recvd contains the remaining data that was passed to
@@ -781,11 +789,9 @@
         it rather than the input to dataReceived.
         """
         r = self.getProtocol()
-        def makeMessage(data):
-            return struct.pack(r.structFormat, len(data)) + data
         result = []
         payloadC = 'c' * 5
-        messageC = makeMessage(payloadC)
+        messageC = self.makeMessage(r, payloadC)
         def stringReceived(receivedString):
             if not result:
                 r.recvd = messageC
@@ -793,13 +799,58 @@
         r.stringReceived = stringReceived
         payloadA = 'a' * 5
         payloadB = 'b' * 5
-        messageA = makeMessage(payloadA)
-        messageB = makeMessage(payloadB)
+        messageA = self.makeMessage(r, payloadA)
+        messageB = self.makeMessage(r, payloadB)
         r.dataReceived(messageA + messageB)
         self.assertEquals(result, [payloadA, payloadC])
 
 
+    def test_switching(self):
+        """
+        Data already parsed by L{IntNStringReceiver.dataReceived} is not
+        reparsed if C{stringReceived} consumes some of the
+        L{IntNStringReceiver.recvd} buffer.
+        """
+        proto = self.getProtocol()
+        mix = []
+        SWITCH = "\x00\x00\x00\x00"
+        for s in self.strings:
+            mix.append(self.makeMessage(proto, s))
+            mix.append(SWITCH)
 
+        result = []
+        def stringReceived(receivedString):
+            result.append(receivedString)
+            proto.recvd = proto.recvd[len(SWITCH):]
+
+        proto.stringReceived = stringReceived
+        proto.dataReceived("".join(mix))
+        proto.dataReceived("")
+        self.assertEqual(result, self.strings)
+
+
+    def test_recvdInLengthLimitExceeded(self):
+        """
+        The L{IntNStringReceiver.recvd} buffer contains all data not yet
+        processed by L{IntNStringReceiver.dataReceived} if the
+        C{lengthLimitExceeded} event occurs.
+        """
+        proto = self.getProtocol()
+        DATA = "too long"
+        proto.MAX_LENGTH = len(DATA) - 1
+        message = self.makeMessage(proto, DATA)
+
+        result = []
+        def lengthLimitExceeded(length):
+            result.append(length)
+            result.append(proto.recvd)
+
+        proto.lengthLimitExceeded = lengthLimitExceeded
+        proto.dataReceived(message)
+        self.assertEqual(result[0], len(DATA))
+        self.assertEqual(result[1], message)
+
+
 class TestInt32(TestMixin, basic.Int32StringReceiver):
     """
     A L{basic.Int32StringReceiver} storing received strings in an array.
