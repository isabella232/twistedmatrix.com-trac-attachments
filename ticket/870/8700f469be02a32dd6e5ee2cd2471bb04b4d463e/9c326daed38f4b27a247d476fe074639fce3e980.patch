diff -ru -x raiser.c branches_orig/failure-c-extension-3132/twisted/python/failure.py branches/failure-c-extension-3132/twisted/python/failure.py
--- branches_orig/failure-c-extension-3132/twisted/python/failure.py	2008-03-28 10:06:24.000000000 -0500
+++ branches/failure-c-extension-3132/twisted/python/failure.py	2008-04-09 11:17:10.031250000 -0500
@@ -363,6 +363,8 @@
         # it is only really originating from
         # throwExceptionIntoGenerator if the bottom of the traceback
         # is a yield.
+        # Pyrex and Cython extensions create traceback frames
+        # with no co_code, but they can't yield so we know it's okay to just return here.
         if ((not lastFrame.f_code.co_code) or
             lastFrame.f_code.co_code[lastTb.tb_lasti] != cls._yieldOpcode):
             return
diff -ru -x raiser.c branches_orig/failure-c-extension-3132/twisted/test/raiser.pyx branches/failure-c-extension-3132/twisted/test/raiser.pyx
--- branches_orig/failure-c-extension-3132/twisted/test/raiser.pyx	2008-03-28 10:06:24.000000000 -0500
+++ branches/failure-c-extension-3132/twisted/test/raiser.pyx	2008-04-09 11:20:47.046875000 -0500
@@ -1,7 +1,11 @@
 """
-    A trivial extension that just raises an exception
+A trivial extension that just raises an exception.
+See test_failure.test_failureConstructionWithMungedStackSucceeds
 """
 
-cdef class RaiseException:
-    def __new__(self):
-        raise TypeError("This class is intentionally broken")
\ No newline at end of file
+class RaiserException(Exception):
+    pass
+
+def raiseException():
+    raise RaiserException("This function is intentionally broken")
+
diff -ru -x raiser.c branches_orig/failure-c-extension-3132/twisted/test/test_failure.py branches/failure-c-extension-3132/twisted/test/test_failure.py
--- branches_orig/failure-c-extension-3132/twisted/test/test_failure.py	2008-03-28 10:06:24.000000000 -0500
+++ branches/failure-c-extension-3132/twisted/test/test_failure.py	2008-04-09 11:19:54.453125000 -0500
@@ -255,9 +255,10 @@
         should not break extraction of the exception.
         """
         try:
-            raiser.RaiseException()
-        except:
+            raiser.raiseException()
+        except raiser.RaiserException:
             f = failure.Failure()
+            self.assertTrue(f.check(raiser.RaiserException))
         else:
             self.fail("No exception raised from extension?!")
 
