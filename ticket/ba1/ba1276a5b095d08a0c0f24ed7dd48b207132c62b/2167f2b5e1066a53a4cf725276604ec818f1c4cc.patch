=== modified file 'twisted/web/_auth/wrapper.py'
--- twisted/web/_auth/wrapper.py	2009-07-26 16:18:18 +0000
+++ twisted/web/_auth/wrapper.py	2009-07-29 09:39:30 +0000
@@ -108,6 +108,7 @@
         """
         authheader = request.getHeader('authorization')
         if not authheader:
+            request.postpath.insert(0, request.prepath.pop())
             return util.DeferredResource(self._login(Anonymous()))
 
         factory, respString = self._selectParseHeader(authheader)

=== modified file 'twisted/web/test/test_httpauth.py'
--- twisted/web/test/test_httpauth.py	2009-07-26 16:18:18 +0000
+++ twisted/web/test/test_httpauth.py	2009-07-29 09:41:08 +0000
@@ -350,7 +350,7 @@
         not have the required I{Authorization} headers.
         """
         request = self.makeRequest([self.childName])
-        child = self.wrapper.getChildWithDefault(self.childName, request)
+        child = getChildForRequest(self.wrapper, request)
         d = request.notifyFinish()
         def cbFinished(result):
             self.assertEquals(request.responseCode, 401)
@@ -558,21 +558,15 @@
         Anonymous requests are allowed if a L{Portal} has an anonymous checker
         registered.
         """
-        unprotectedContents = "contents of the unprotected child resource"
-
-        class UnprotectedResource(Resource):
-
-            def render_GET(self, request):
-                return unprotectedContents
-
-        self.avatars[ANONYMOUS] = UnprotectedResource()
+        self.avatars[ANONYMOUS] = self.avatar
         self.portal.registerChecker(AllowAnonymousAccess())
+        
         self.credentialFactories.append(BasicCredentialFactory('example.com'))
         request = self.makeRequest([self.childName])
         child = getChildForRequest(self.wrapper, request)
         d = request.notifyFinish()
         def cbFinished(ignored):
-            self.assertEquals(request.written, [unprotectedContents])
+            self.assertEquals(request.written, [self.childContent])
         d.addCallback(cbFinished)
         render(child, request)
         return d

