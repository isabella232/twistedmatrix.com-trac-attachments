diff -r c8610c22a852 twisted/test/test_defer.py
--- a/twisted/test/test_defer.py	Tue Feb 20 11:34:51 2007 +0100
+++ b/twisted/test/test_defer.py	Tue Feb 20 12:22:14 2007 +0100
@@ -9,6 +9,8 @@ Test cases for defer module.
 """
 
 from __future__ import nested_scopes
+
+import gc
 
 from twisted.trial import unittest, util
 from twisted.internet import reactor, defer
@@ -149,7 +151,7 @@ class DeferredTestCase(unittest.TestCase
         failure = result[0]
 
         # the type of the failure is a FirstError
-        self.failUnless(issubclass(failure.type, defer.FirstError), 
+        self.failUnless(issubclass(failure.type, defer.FirstError),
             'issubclass(failure.type, defer.FirstError) failed: '
             'failure.type is %r' % (failure.type,)
         )
@@ -506,7 +508,9 @@ class AlreadyCalledTestCase(unittest.Tes
         d.addBoth(lambda ign: None)
 
 
+
 class LogTestCase(unittest.TestCase):
+
 
     def setUp(self):
         self.c = []
@@ -515,18 +519,60 @@ class LogTestCase(unittest.TestCase):
     def tearDown(self):
         log.removeObserver(self.c.append)
 
+    def _check(self):
+        c2 = [e for e in self.c if e["isError"]]
+        self.assertEquals(len(c2), 2)
+        c2[1]["failure"].trap(ZeroDivisionError)
+        log.flushErrors(ZeroDivisionError)
+
     def testErrorLog(self):
-        c = self.c
         defer.Deferred().addCallback(lambda x: 1/0).callback(1)
 # do you think it is rad to have memory leaks glyph
 ##        d = defer.Deferred()
 ##        d.addCallback(lambda x: 1/0)
 ##        d.callback(1)
 ##        del d
-        c2 = [e for e in c if e["isError"]]
-        self.assertEquals(len(c2), 2)
-        c2[1]["failure"].trap(ZeroDivisionError)
-        log.flushErrors(ZeroDivisionError)
+        self._check()
+
+    def _subErrorLogWithInnerFrameRef(self):
+        d = defer.Deferred()
+        d.addCallback(lambda x: 1/0)
+        d.callback(1)
+
+    def testErrorLogWithInnerFrameRef(self):
+        self._subErrorLogWithInnerFrameRef()
+        gc.collect()
+        self._check()
+
+    def _subErrorLogWithInnerFrameCycle(self):
+        d = defer.Deferred()
+        d.addCallback(lambda x, d=d: 1/0)
+        d._d = d
+        d.callback(1)
+
+    def testErrorLogWithInnerFrameCycle(self):
+        self._subErrorLogWithInnerFrameCycle()
+        gc.collect()
+        self._check()
+
+    def _subErrorLogWithOuterRefCycle(self):
+        class _CyclicObj(object):
+            def __init__(self, d):
+                self.obj = self
+                self.d = d
+                d.addCallback(self._fail)
+            def __del__(self):
+                pass
+            def _fail(self, *args, **kwargs):
+                1/0
+        d = defer.Deferred()
+        obj = _CyclicObj(d)
+        d.callback(1)
+
+    #def testErrorLogWithOuterRefCycle(self):
+        #self._subErrorLogWithOuterRefCycle()
+        #gc.collect()
+        #self._check()
 
 
 class DeferredTestCaseII(unittest.TestCase):
