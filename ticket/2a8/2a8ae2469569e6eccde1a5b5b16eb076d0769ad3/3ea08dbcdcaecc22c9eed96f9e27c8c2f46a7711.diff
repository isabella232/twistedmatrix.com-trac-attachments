Index: twisted/internet/base.py
===================================================================
--- twisted/internet/base.py	(revision 11429)
+++ twisted/internet/base.py	(working copy)
@@ -27,7 +27,7 @@
 
 import sys
 import warnings
-from bisect import insort
+from heapq import heappush, heappop, heapreplace, heapify
 
 try:
     import fcntl
@@ -58,6 +58,7 @@
         self.resetter = reset
         self.canceller = cancel
         self.cancelled = self.called = 0
+        self.delayed_time = 0
         if self.debug:
             self.creator = traceback.format_stack()[:-2]
 
@@ -68,7 +69,7 @@
         @return: The number of seconds after the epoch at which this call is
         scheduled to be made.
         """
-        return self.time
+        return self.time + self.delayed_time
 
     def cancel(self):
         """Unschedule this call
@@ -101,8 +102,13 @@
         elif self.called:
             raise error.AlreadyCalled
         else:
-            self.time = seconds() + secondsFromNow
-            self.resetter(self)
+            new_time = seconds() + secondsFromNow
+            if new_time < self.time:
+                self.delayed_time = 0
+                self.time = new_time
+                self.resetter(self)
+            else:
+                self.delayed_time = new_time - self.time
 
     def delay(self, secondsLater):
         """Reschedule this call for a later time
@@ -119,9 +125,15 @@
         elif self.called:
             raise error.AlreadyCalled
         else:
-            self.time += secondsLater
-            self.resetter(self)
+            self.delayed_time += secondsLater
+            if self.delayed_time < 0:
+                self.activate_delay()
+                self.resetter(self)
 
+    def activate_delay(self):
+        self.time += self.delayed_time
+        self.delayed_time = 0
+
     def active(self):
         """Determine whether this call is still pending
 
@@ -131,9 +143,8 @@
         """
         return not (self.cancelled or self.called)
 
-    def __lt__(self, other):
-        # Order reversed for efficiency concerns, see below
-        return self.time >= other.time
+    def __le__(self, other):
+        return self.time <= other.time
 
     def __str__(self):
         try:
@@ -165,6 +176,8 @@
     def __init__(self):
         self._eventTriggers = {}
         self._pendingTimedCalls = []
+        self._newTimedCalls = []
+        self._cancellations = 0
         self.running = 0
         self.waker = None
         self.resolver = None
@@ -375,17 +388,30 @@
         assert sys.maxint >= _seconds >= 0, \
                "%s is not greater than or equal to 0 seconds" % (_seconds,)
         tple = DelayedCall(seconds() + _seconds, _f, args, kw,
-                           self._pendingTimedCalls.remove,
-                           self._resetCallLater)
-        insort(self._pendingTimedCalls, tple)
+                           self._cancelCallLater,
+                           self._moveCallLaterSooner)
+        self._newTimedCalls.append(tple)
         return tple
 
-    def _resetCallLater(self, tple):
-        assert tple in self._pendingTimedCalls
-        self._pendingTimedCalls.remove(tple)
-        insort(self._pendingTimedCalls, tple)
-        return tple
+    def _moveCallLaterSooner(self, tple):
+        # Linear time find: slow.
+        heap = self._pendingTimedCalls
+        pos = heap.find(tple)
 
+        # Move elt up the heap until it rests at the right place.
+        elt = heap[pos]
+        while pos != 0:
+            parent = (pos-1) // 2
+            if heap[parent] <= elt:
+                break
+            # move parent down
+            heap[pos] = heap[parent]
+            pos = parent
+        heap[pos] = elt
+        
+    def _cancelCallLater(self, tple):
+        self._cancellations+=1
+
     def cancelCallLater(self, callID):
         """See twisted.internet.interfaces.IReactorTime.cancelCallLater.
         """
@@ -395,11 +421,29 @@
         callID.cancel()
 
     def getDelayedCalls(self):
-        return tuple(self._pendingTimedCalls)
+        """Return all the outstanding delayed calls in the system.
+        They are returned in no particular order.
+        This method is not efficient -- it is really only meant for
+        test cases."""
+        return [x for x in (self._pendingTimedCalls + self._newTimedCalls) if not x.cancelled]
 
     def timeout(self):
-        if self._pendingTimedCalls:
-            t = self._pendingTimedCalls[-1].time - seconds()
+        if len(self._pendingTimedCalls) > 0:
+            first_call = self._pendingTimedCalls[0]
+
+            while first_call.cancelled or first_call.delayed_time > 0:
+                if first_call.cancelled:
+                    self._cancellations-=1
+                    heappop(self._pendingTimedCalls)
+                else:
+                    first_call.activate_delay()
+                    heapreplace(self._pendingTimedCalls, first_call)
+
+                if len(self._pendingTimedCalls) == 0:
+                    return None
+                first_call = self._pendingTimedCalls[0]
+
+            t = first_call.getTime() - seconds()
             if t < 0:
                 t = 0
             return t
@@ -421,9 +465,28 @@
                     log.err()
                 count += 1
             del self.threadCallQueue[:count]
+        
+        # insert new delayed calls now to avoid doing so while iterating
+        for call in self._newTimedCalls:
+            if call.cancelled:
+                self._cancellations-=1
+            else:
+                call.activate_delay()
+                heappush(self._pendingTimedCalls, call)
+        self._newTimedCalls = []
+
         now = seconds()
-        while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
-            call = self._pendingTimedCalls.pop()
+        while len(self._pendingTimedCalls) > 0 and (self._pendingTimedCalls[0].getTime() <= now):
+            call = heappop(self._pendingTimedCalls)
+            if call.cancelled:
+                self._cancellations-=1
+                continue
+            
+            if call.delayed_time > 0:
+                call.activate_delay()
+                heappush(self._pendingTimedCalls, call)
+                continue
+
             try:
                 call.called = 1
                 call.func(*call.args, **call.kw)
@@ -437,9 +500,16 @@
                     e += "".join(call.creator).rstrip().replace("\n","\n C:")
                     e += "\n"
                     log.msg(e)
+        
+        if (self._cancellations > 50 and
+             self._cancellations > len(self._pendingTimedCalls) // 2):
+            self.cancellations = 0
+            self._pendingTimedCalls = [x for x in self._pendingTimedCalls
+                                       if not x.cancelled]
+            heapify(_pendingTimedCalls)
+        
 
 
-
     # IReactorThreads
 
     threadpool = None
@@ -628,5 +698,4 @@
         """Raises a RuntimeError"""
         raise RuntimeError, "doWrite called on a %s" % reflect.qual(self.__class__)
 
-
 __all__ = []
