=== modified file 'twisted/internet/interfaces.py'
--- twisted/internet/interfaces.py	2012-10-10 19:14:17 +0000
+++ twisted/internet/interfaces.py	2013-01-31 14:28:15 +0000
@@ -76,115 +76,504 @@
         """
 
 class IResolver(IResolverSimple):
-    def query(query, timeout = 10):
-        """
-        Interpret and dispatch a query object to the appropriate
-        lookup* method.
-        """
-
-    def lookupAddress(name, timeout = 10):
-        """
-        Lookup the A records associated with C{name}.
-        """
-
-    def lookupAddress6(name, timeout = 10):
-        """
-        Lookup all the A6 records associated with C{name}.
-        """
-
-    def lookupIPV6Address(name, timeout = 10):
-        """
-        Lookup all the AAAA records associated with C{name}.
-        """
-
-    def lookupMailExchange(name, timeout = 10):
-        """
-        Lookup the MX records associated with C{name}.
-        """
-
-    def lookupNameservers(name, timeout = 10):
-        """
-        Lookup the the NS records associated with C{name}.
-        """
-
-    def lookupCanonicalName(name, timeout = 10):
-        """
-        Lookup the CNAME records associated with C{name}.
-        """
-
-    def lookupMailBox(name, timeout = 10):
-        """
-        Lookup the MB records associated with C{name}.
-        """
-
-    def lookupMailGroup(name, timeout = 10):
-        """
-        Lookup the MG records associated with C{name}.
-        """
-
-    def lookupMailRename(name, timeout = 10):
-        """
-        Lookup the MR records associated with C{name}.
-        """
-
-    def lookupPointer(name, timeout = 10):
-        """
-        Lookup the PTR records associated with C{name}.
-        """
-
-    def lookupAuthority(name, timeout = 10):
-        """
-        Lookup the SOA records associated with C{name}.
-        """
-
-    def lookupNull(name, timeout = 10):
-        """
-        Lookup the NULL records associated with C{name}.
-        """
-
-    def lookupWellKnownServices(name, timeout = 10):
-        """
-        Lookup the WKS records associated with C{name}.
-        """
-
-    def lookupHostInfo(name, timeout = 10):
-        """
-        Lookup the HINFO records associated with C{name}.
-        """
-
-    def lookupMailboxInfo(name, timeout = 10):
-        """
-        Lookup the MINFO records associated with C{name}.
-        """
-
-    def lookupText(name, timeout = 10):
-        """
-        Lookup the TXT records associated with C{name}.
-        """
-
-    def lookupResponsibility(name, timeout = 10):
-        """
-        Lookup the RP records associated with C{name}.
-        """
-
-    def lookupAFSDatabase(name, timeout = 10):
-        """
-        Lookup the AFSDB records associated with C{name}.
-        """
-
-    def lookupService(name, timeout = 10):
-        """
-        Lookup the SRV records associated with C{name}.
-        """
-
-    def lookupAllRecords(name, timeout = 10):
-        """
-        Lookup all records associated with C{name}.
-        """
-
-    def lookupZone(name, timeout = 10):
-        """
-        Perform a zone transfer for the given C{name}.
+    def query(query, timeout=None):
+        """
+        Dispatch C{query} to the method which can handle its type.
+
+        @type query: L{twisted.names.dns.Query}
+        @param query: The DNS query being issued, to which a response is to be
+            generated.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupAddress(name, timeout=None):
+        """
+        Perform an A record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupAddress6(name, timeout=None):
+        """
+        Perform an A6 record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupIPV6Address(name, timeout=None):
+        """
+        Perform an AAAA record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupMailExchange(name, timeout=None):
+        """
+        Perform an MX record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupNameservers(name, timeout=None):
+        """
+        Perform an NS record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupCanonicalName(name, timeout=None):
+        """
+        Perform a CNAME record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupMailBox(name, timeout=None):
+        """
+        Perform an MB record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupMailGroup(name, timeout=None):
+        """
+        Perform an MG record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupMailRename(name, timeout=None):
+        """
+        Perform an MR record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupPointer(name, timeout=None):
+        """
+        Perform a PTR record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupAuthority(name, timeout=None):
+        """
+        Perform an SOA record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupNull(name, timeout=None):
+        """
+        Perform a NULL record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupWellKnownServices(name, timeout=None):
+        """
+        Perform a WKS record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupHostInfo(name, timeout=None):
+        """
+        Perform a HINFO record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupMailboxInfo(name, timeout=None):
+        """
+        Perform an MINFO record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupText(name, timeout=None):
+        """
+        Perform a TXT record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupResponsibility(name, timeout=None):
+        """
+        Perform an RP record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupAFSDatabase(name, timeout=None):
+        """
+        Perform an AFSDB record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupService(name, timeout=None):
+        """
+        Perform an SRV record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupAllRecords(name, timeout=None):
+        """
+        Perform an ALL_RECORD lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupSenderPolicy(name, timeout= 10):
+        """
+        Perform a SPF record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupNamingAuthorityPointer(name, timeout=None):
+        """
+        Perform a NAPTR record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+            When the last timeout expires, the query is considered failed.
+
+        @rtype: C{Deferred}
+        @return: A L{Deferred} which fires with a three-tuple of lists of
+            L{twisted.names.dns.RRHeader} instances.  The first element of the
+            tuple gives answers.  The second element of the tuple gives
+            authorities.  The third element of the tuple gives additional
+            information.  The L{Deferred} may instead fail with one of the
+            exceptions defined in L{twisted.names.error} or with
+            C{NotImplementedError}.
+        """
+
+    def lookupZone(name, timeout=None):
+        """
+        Perform an AXFR record lookup.
+
+        # TODO: Check details of the returned deferred result
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{int}
+        @param timeout: When this timeout expires, the query is
+            considered failed.
+
+        @rtype: C{Deferred}
         """
 
 

=== modified file 'twisted/names/client.py'
--- twisted/names/client.py	2013-01-06 10:22:53 +0000
+++ twisted/names/client.py	2013-01-31 14:23:10 +0000
@@ -595,331 +595,134 @@
 
 def lookupAddress(name, timeout=None):
     """
-    Perform an A record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupAddress
     """
     return getResolver().lookupAddress(name, timeout)
 
 def lookupIPV6Address(name, timeout=None):
     """
-    Perform an AAAA record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupIPV6Address
     """
     return getResolver().lookupIPV6Address(name, timeout)
 
 def lookupAddress6(name, timeout=None):
     """
-    Perform an A6 record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupAddress6
     """
     return getResolver().lookupAddress6(name, timeout)
 
 def lookupMailExchange(name, timeout=None):
     """
-    Perform an MX record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupMailExchange
     """
     return getResolver().lookupMailExchange(name, timeout)
 
 def lookupNameservers(name, timeout=None):
     """
-    Perform an NS record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupNameservers
     """
     return getResolver().lookupNameservers(name, timeout)
 
 def lookupCanonicalName(name, timeout=None):
     """
-    Perform a CNAME record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupCanonicalName
     """
     return getResolver().lookupCanonicalName(name, timeout)
 
 def lookupMailBox(name, timeout=None):
     """
-    Perform an MB record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupMailBox
     """
     return getResolver().lookupMailBox(name, timeout)
 
 def lookupMailGroup(name, timeout=None):
     """
-    Perform an MG record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupMailGroup
     """
     return getResolver().lookupMailGroup(name, timeout)
 
 def lookupMailRename(name, timeout=None):
     """
-    Perform an MR record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupMailRename
     """
     return getResolver().lookupMailRename(name, timeout)
 
 def lookupPointer(name, timeout=None):
     """
-    Perform a PTR record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupPointer
     """
     return getResolver().lookupPointer(name, timeout)
 
 def lookupAuthority(name, timeout=None):
     """
-    Perform an SOA record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupAuthority
     """
     return getResolver().lookupAuthority(name, timeout)
 
 def lookupNull(name, timeout=None):
     """
-    Perform a NULL record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupNull
     """
     return getResolver().lookupNull(name, timeout)
 
 def lookupWellKnownServices(name, timeout=None):
     """
-    Perform a WKS record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupWellKnownServices
     """
     return getResolver().lookupWellKnownServices(name, timeout)
 
 def lookupService(name, timeout=None):
     """
-    Perform an SRV record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupService
     """
     return getResolver().lookupService(name, timeout)
 
 def lookupHostInfo(name, timeout=None):
     """
-    Perform a HINFO record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupHostInfo
     """
     return getResolver().lookupHostInfo(name, timeout)
 
 def lookupMailboxInfo(name, timeout=None):
     """
-    Perform an MINFO record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupMailboxInfo
     """
     return getResolver().lookupMailboxInfo(name, timeout)
 
 def lookupText(name, timeout=None):
     """
-    Perform a TXT record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupText
     """
     return getResolver().lookupText(name, timeout)
 
 def lookupSenderPolicy(name, timeout=None):
     """
-    Perform a SPF record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupSenderPolicy
     """
     return getResolver().lookupSenderPolicy(name, timeout)
 
 def lookupResponsibility(name, timeout=None):
     """
-    Perform an RP record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupResponsibility
     """
     return getResolver().lookupResponsibility(name, timeout)
 
 def lookupAFSDatabase(name, timeout=None):
     """
-    Perform an AFSDB record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupAFSDatabase
     """
     return getResolver().lookupAFSDatabase(name, timeout)
 
 def lookupZone(name, timeout=None):
     """
-    Perform an AXFR record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: C{int}
-    @param timeout: When this timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupZone
     """
     # XXX: timeout here is not a list of ints, it is a single int.
     return getResolver().lookupZone(name, timeout)
 
 def lookupAllRecords(name, timeout=None):
     """
-    ALL_RECORD lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolver.lookupAllRecords
     """
     return getResolver().lookupAllRecords(name, timeout)
 
@@ -927,15 +730,6 @@
 
 def lookupNamingAuthorityPointer(name, timeout=None):
     """
-    NAPTR lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-        When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: twisted.internet.interfaces.IResolve.lookupNamingAuthorityPointer
     """
     return getResolver().lookupNamingAuthorityPointer(name, timeout)

=== modified file 'twisted/names/common.py'
--- twisted/names/common.py	2012-10-09 21:19:50 +0000
+++ twisted/names/common.py	2013-01-31 14:33:39 +0000
@@ -60,19 +60,7 @@
 
     def query(self, query, timeout=None):
         """
-        Dispatch C{query} to the method which can handle its type.
-
-        @param query: The DNS query being issued, to which a response is to be
-            generated.
-        @type query: L{twisted.names.dns.Query}
-
-        @return: A L{Deferred} which fires with a three-tuple of lists of
-            L{twisted.names.dns.RRHeader} instances.  The first element of the
-            tuple gives answers.  The second element of the tuple gives
-            authorities.  The third element of the tuple gives additional
-            information.  The L{Deferred} may instead fail with one of the
-            exceptions defined in L{twisted.names.error} or with
-            C{NotImplementedError}.
+        @see: twisted.internet.interfaces.IResolver.query
         """
         try:
             method = self.typeToMethod[query.type]
@@ -86,143 +74,143 @@
     def _lookup(self, name, cls, type, timeout):
         return defer.fail(NotImplementedError("ResolverBase._lookup"))
 
-    def lookupAddress(self, name, timeout = None):
+    def lookupAddress(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupAddress
+        @see: twisted.internet.interfaces.IResolver.lookupAddress
         """
         return self._lookup(name, dns.IN, dns.A, timeout)
 
-    def lookupIPV6Address(self, name, timeout = None):
+    def lookupIPV6Address(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupIPV6Address
+        @see: twisted.internet.interfaces.IResolver.lookupIPV6Address
         """
         return self._lookup(name, dns.IN, dns.AAAA, timeout)
 
-    def lookupAddress6(self, name, timeout = None):
+    def lookupAddress6(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupAddress6
+        @see: twisted.internet.interfaces.IResolver.lookupAddress6
         """
         return self._lookup(name, dns.IN, dns.A6, timeout)
 
-    def lookupMailExchange(self, name, timeout = None):
+    def lookupMailExchange(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupMailExchange
+        @see: twisted.internet.interfaces.IResolver.lookupMailExchange
         """
         return self._lookup(name, dns.IN, dns.MX, timeout)
 
-    def lookupNameservers(self, name, timeout = None):
+    def lookupNameservers(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupNameservers
+        @see: twisted.internet.interfaces.IResolver.lookupNameservers
         """
         return self._lookup(name, dns.IN, dns.NS, timeout)
 
-    def lookupCanonicalName(self, name, timeout = None):
+    def lookupCanonicalName(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupCanonicalName
+        @see: twisted.internet.interfaces.IResolver.lookupCanonicalName
         """
         return self._lookup(name, dns.IN, dns.CNAME, timeout)
 
-    def lookupMailBox(self, name, timeout = None):
+    def lookupMailBox(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupMailBox
+        @see: twisted.internet.interfaces.IResolver.lookupMailBox
         """
         return self._lookup(name, dns.IN, dns.MB, timeout)
 
-    def lookupMailGroup(self, name, timeout = None):
+    def lookupMailGroup(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupMailGroup
+        @see: twisted.internet.interfaces.IResolver.lookupMailGroup
         """
         return self._lookup(name, dns.IN, dns.MG, timeout)
 
-    def lookupMailRename(self, name, timeout = None):
+    def lookupMailRename(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupMailRename
+        @see: twisted.internet.interfaces.IResolver.lookupMailRename
         """
         return self._lookup(name, dns.IN, dns.MR, timeout)
 
-    def lookupPointer(self, name, timeout = None):
+    def lookupPointer(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupPointer
+        @see: twisted.internet.interfaces.IResolver.lookupPointer
         """
         return self._lookup(name, dns.IN, dns.PTR, timeout)
 
-    def lookupAuthority(self, name, timeout = None):
+    def lookupAuthority(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupAuthority
+        @see: twisted.internet.interfaces.IResolver.lookupAuthority
         """
         return self._lookup(name, dns.IN, dns.SOA, timeout)
 
-    def lookupNull(self, name, timeout = None):
+    def lookupNull(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupNull
+        @see: twisted.internet.interfaces.IResolver.lookupNull
         """
         return self._lookup(name, dns.IN, dns.NULL, timeout)
 
-    def lookupWellKnownServices(self, name, timeout = None):
+    def lookupWellKnownServices(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupWellKnownServices
+        @see: twisted.internet.interfaces.IResolver.lookupWellKnownServices
         """
         return self._lookup(name, dns.IN, dns.WKS, timeout)
 
-    def lookupService(self, name, timeout = None):
+    def lookupService(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupService
+        @see: twisted.internet.interfaces.IResolver.lookupService
         """
         return self._lookup(name, dns.IN, dns.SRV, timeout)
 
-    def lookupHostInfo(self, name, timeout = None):
+    def lookupHostInfo(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupHostInfo
+        @see: twisted.internet.interfaces.IResolver.lookupHostInfo
         """
         return self._lookup(name, dns.IN, dns.HINFO, timeout)
 
-    def lookupMailboxInfo(self, name, timeout = None):
+    def lookupMailboxInfo(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupMailboxInfo
+        @see: twisted.internet.interfaces.IResolver.lookupMailboxInfo
         """
         return self._lookup(name, dns.IN, dns.MINFO, timeout)
 
-    def lookupText(self, name, timeout = None):
+    def lookupText(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupText
+        @see: twisted.internet.interfaces.IResolver.lookupText
         """
         return self._lookup(name, dns.IN, dns.TXT, timeout)
 
-    def lookupSenderPolicy(self, name, timeout = None):
+    def lookupSenderPolicy(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupSenderPolicy
+        @see: twisted.internet.interfaces.IResolver.lookupSenderPolicy
         """
         return self._lookup(name, dns.IN, dns.SPF, timeout)
 
-    def lookupResponsibility(self, name, timeout = None):
+    def lookupResponsibility(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupResponsibility
+        @see: twisted.internet.interfaces.IResolver.lookupResponsibility
         """
         return self._lookup(name, dns.IN, dns.RP, timeout)
 
-    def lookupAFSDatabase(self, name, timeout = None):
+    def lookupAFSDatabase(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupAFSDatabase
+        @see: twisted.internet.interfaces.IResolver.lookupAFSDatabase
         """
         return self._lookup(name, dns.IN, dns.AFSDB, timeout)
 
-    def lookupZone(self, name, timeout = None):
+    def lookupZone(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupZone
+        @see: twisted.internet.interfaces.IResolver.lookupZone
         """
         return self._lookup(name, dns.IN, dns.AXFR, timeout)
 
 
     def lookupNamingAuthorityPointer(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupNamingAuthorityPointer
+        @see: twisted.internet.interfaces.IResolve.lookupNamingAuthorityPointer
         """
         return self._lookup(name, dns.IN, dns.NAPTR, timeout)
 
 
-    def lookupAllRecords(self, name, timeout = None):
+    def lookupAllRecords(self, name, timeout=None):
         """
-        @see: twisted.names.client.lookupAllRecords
+        @see: twisted.internet.interfaces.IResolver.lookupAllRecords
         """
         return self._lookup(name, dns.IN, dns.ALL_RECORDS, timeout)
 

