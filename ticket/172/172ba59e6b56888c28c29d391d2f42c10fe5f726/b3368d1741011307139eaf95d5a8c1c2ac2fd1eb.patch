=== modified file 'twisted/internet/interfaces.py'
--- twisted/internet/interfaces.py	2012-09-06 17:55:48 +0000
+++ twisted/internet/interfaces.py	2012-09-09 22:23:47 +0000
@@ -56,143 +56,501 @@
 
 class IResolverSimple(Interface):
 
-    def getHostByName(name, timeout = (1, 3, 11, 45)):
+    def getHostByName(name, timeout=None, effort=10):
         """
         Resolve the domain name C{name} into an IP address.
 
+        Will errback with C{DNSQueryTimeoutError} on a timeout,
+        C{DomainError} or C{AuthoritativeDomainError} (or subclasses)
+        on other errors.
+
         @type name: C{str}
-        @type timeout: C{tuple}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @type effort: C{int}
+        @param effort: How many times CNAME and NS records to follow
+        while resolving this name.
+
         @rtype: L{twisted.internet.defer.Deferred}
         @return: The callback of the Deferred that is returned will be
-        passed a string that represents the IP address of the specified
-        name, or the errback will be called if the lookup times out.  If
-        multiple types of address records are associated with the name,
-        A6 records will be returned in preference to AAAA records, which
-        will be returned in preference to A records.  If there are multiple
-        records of the type to be returned, one will be selected at random.
+        passed a string that represents the IP address of the
+        specified name, or the errback will be called if the lookup
+        times out.  If multiple types of address records are
+        associated with the name, A6 records will be returned in
+        preference to AAAA records, which will be returned in
+        preference to A records.  If there are multiple records of the
+        type to be returned, one will be selected at random.
 
         @raise twisted.internet.defer.TimeoutError: Raised (asynchronously)
         if the name cannot be resolved within the specified timeout period.
         """
 
+
 class IResolver(IResolverSimple):
-    def lookupRecord(name, cls, type, timeout = 10):
-        """
-        Lookup the records associated with the given name
-        that are of the given type and in the given class.
-        """
-
-    def query(query, timeout = 10):
+    def query(query, timeout=None):
         """
         Interpret and dispatch a query object to the appropriate
         lookup* method.
-        """
-
-    def lookupAddress(name, timeout = 10):
-        """
-        Lookup the A records associated with C{name}.
-        """
-
-    def lookupAddress6(name, timeout = 10):
-        """
-        Lookup all the A6 records associated with C{name}.
-        """
-
-    def lookupIPV6Address(name, timeout = 10):
-        """
-        Lookup all the AAAA records associated with C{name}.
-        """
-
-    def lookupMailExchange(name, timeout = 10):
-        """
-        Lookup the MX records associated with C{name}.
-        """
-
-    def lookupNameservers(name, timeout = 10):
-        """
-        Lookup the the NS records associated with C{name}.
-        """
-
-    def lookupCanonicalName(name, timeout = 10):
-        """
-        Lookup the CNAME records associated with C{name}.
-        """
-
-    def lookupMailBox(name, timeout = 10):
-        """
-        Lookup the MB records associated with C{name}.
-        """
-
-    def lookupMailGroup(name, timeout = 10):
-        """
-        Lookup the MG records associated with C{name}.
-        """
-
-    def lookupMailRename(name, timeout = 10):
-        """
-        Lookup the MR records associated with C{name}.
-        """
-
-    def lookupPointer(name, timeout = 10):
-        """
-        Lookup the PTR records associated with C{name}.
-        """
-
-    def lookupAuthority(name, timeout = 10):
-        """
-        Lookup the SOA records associated with C{name}.
-        """
-
-    def lookupNull(name, timeout = 10):
-        """
-        Lookup the NULL records associated with C{name}.
-        """
-
-    def lookupWellKnownServices(name, timeout = 10):
-        """
-        Lookup the WKS records associated with C{name}.
-        """
-
-    def lookupHostInfo(name, timeout = 10):
-        """
-        Lookup the HINFO records associated with C{name}.
-        """
-
-    def lookupMailboxInfo(name, timeout = 10):
-        """
-        Lookup the MINFO records associated with C{name}.
-        """
-
-    def lookupText(name, timeout = 10):
-        """
-        Lookup the TXT records associated with C{name}.
-        """
-
-    def lookupResponsibility(name, timeout = 10):
-        """
-        Lookup the RP records associated with C{name}.
-        """
-
-    def lookupAFSDatabase(name, timeout = 10):
-        """
-        Lookup the AFSDB records associated with C{name}.
-        """
-
-    def lookupService(name, timeout = 10):
-        """
-        Lookup the SRV records associated with C{name}.
-        """
-
-    def lookupAllRecords(name, timeout = 10):
-        """
-        Lookup all records associated with C{name}.
-        """
-
-    def lookupZone(name, timeout = 10):
-        """
-        Perform a zone transfer for the given C{name}.
-        """
-
+
+        @type query: L{twisted.named.dns.Query}
+        @param query: A query object which will be dispatched to the
+        appropriate lookup* method
+        
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupAddress(name, timeout=None):
+        """
+        Perform an A record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupAddress6(name, timeout=None):
+        """
+        Perform an A6 record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupIPV6Address(name, timeout=None):
+        """
+        Perform an AAAA record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupMailExchange(name, timeout=None):
+        """
+        Perform an MX record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupNameservers(name, timeout=None):
+        """
+        Perform an NS record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupCanonicalName(name, timeout=None):
+        """
+        Perform a CNAME record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupMailBox(name, timeout=None):
+        """
+        Perform an MB record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupMailGroup(name, timeout=None):
+        """
+        Perform an MG record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupMailRename(name, timeout=None):
+        """
+        Perform an MR record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupPointer(name, timeout=None):
+        """
+        Perform a PTR record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupAuthority(name, timeout=None):
+        """
+        Perform an SOA record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupNull(name, timeout=None):
+        """
+        Perform a NULL record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupWellKnownServices(name, timeout=None):
+        """
+        Perform a WKS record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupHostInfo(name, timeout=None):
+        """
+        Perform a HINFO record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupMailboxInfo(name, timeout=None):
+        """
+        Perform an MINFO record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupText(name, timeout=None):
+        """
+        Perform a TXT record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+        When the last timeout expires, the query is considered failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupSenderPolicy(name, timeout=None):
+        """
+        Perform a SPF record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupResponsibility(name, timeout=None):
+        """
+        Perform an RP record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the query.
+        When the last timeout expires, the query is considered failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupAFSDatabase(name, timeout=None):
+        """
+        Perform an AFSDB record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupService(name, timeout=None):
+        """
+        Perform an SRV record lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupAllRecords(name, timeout=None):
+        """
+        ALL_RECORD lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupNamingAuthorityPointer(name, timeout=None):
+        """
+        Perform a NAPTR lookup.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{None} or sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
+
+    def lookupZone(name, timeout=10):
+        """
+        Perform an AXFR record lookup.
+
+        This is quite different from usual DNS requests. 
+        AXFR lookups always use TCP, never UDP.
+        
+        @See: U{http://cr.yp.to/djbdns/axfr-notes.html} for more information.
+
+        @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type timeout: C{int}
+        @param timeout: When this timeout expires, the query is
+        considered failed.
+
+        @rtype: L{Deferred}
+        @returns: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
+        """
 
 
 class IReactorTCP(Interface):
@@ -1664,6 +2022,8 @@
         @param contextFactory: A context factory (see L{ssl.py<twisted.internet.ssl>})
         """
 
+
+
 class ISSLTransport(ITCPTransport):
     """
     A SSL/TLS based transport.

=== modified file 'twisted/names/cache.py'
--- twisted/names/cache.py	2012-06-26 21:45:28 +0000
+++ twisted/names/cache.py	2012-09-09 19:10:11 +0000
@@ -17,8 +17,6 @@
     @ivar _reactor: A provider of L{interfaces.IReactorTime}.
     """
 
-    implements(interfaces.IResolver)
-
     cache = None
 
     def __init__(self, cache=None, verbose=0, reactor=None):

=== modified file 'twisted/names/client.py'
--- twisted/names/client.py	2012-02-08 00:35:34 +0000
+++ twisted/names/client.py	2012-09-09 22:41:06 +0000
@@ -22,11 +22,9 @@
 import errno
 import warnings
 
-from zope.interface import implements
-
 # Twisted imports
 from twisted.python.runtime import platform
-from twisted.internet import error, defer, protocol, interfaces
+from twisted.internet import error, defer, protocol
 from twisted.python import log, failure
 from twisted.python.deprecate import getWarningMethod
 from twisted.names import dns, common
@@ -46,7 +44,6 @@
         L{IReactorTime} which will be used to set up network resources and
         track timeouts.
     """
-    implements(interfaces.IResolver)
 
     index = 0
     timeout = None
@@ -71,7 +68,8 @@
     protocol = property(_getProtocol)
 
 
-    def __init__(self, resolv=None, servers=None, timeout=(1, 3, 11, 45), reactor=None):
+    def __init__(self, resolv=None, servers=None, timeout=(1, 3, 11, 45),
+                 reactor=None):
         """
         Construct a resolver which will query domain name servers listed in
         the C{resolv.conf(5)}-format file given by C{resolv} as well as
@@ -117,7 +115,7 @@
         self.resolv = resolv
 
         if not len(self.servers) and not resolv:
-            raise ValueError, "No nameservers specified"
+            raise ValueError("No nameservers specified")
 
         self.factory = DNSClientFactory(self, timeout)
         self.factory.noisy = 0   # Be quiet by default
@@ -151,7 +149,8 @@
             resolvConf = file(self.resolv)
         except IOError, e:
             if e.errno == errno.ENOENT:
-                # Missing resolv.conf is treated the same as an empty resolv.conf
+                # Missing resolv.conf is treated the same as an empty
+                # resolv.conf
                 self.parseConfig(())
             else:
                 raise
@@ -253,8 +252,10 @@
             self.connections.remove(protocol)
 
 
-    def messageReceived(self, message, protocol, address = None):
-        log.msg("Unexpected message (%d) received from %r" % (message.id, address))
+    def messageReceived(self, message, protocol, address=None):
+        log.msg(
+            "Unexpected message (%d) "
+            "received from %r" % (message.id, address))
 
 
     def _query(self, *args):
@@ -271,21 +272,23 @@
         """
         protocol = self._connectedProtocol()
         d = protocol.query(*args)
+
         def cbQueried(result):
             protocol.transport.stopListening()
             return result
+
         d.addBoth(cbQueried)
         return d
 
 
-    def queryUDP(self, queries, timeout = None):
+    def queryUDP(self, queries, timeout=None):
         """
         Make a number of DNS queries via UDP.
 
         @type queries: A C{list} of C{dns.Query} instances
         @param queries: The queries to make.
 
-        @type timeout: Sequence of C{int}
+        @type timeout: C{None} or a sequence of C{int}
         @param timeout: Number of seconds after which to reissue the query.
         When the last timeout expires, the query is considered failed.
 
@@ -336,11 +339,12 @@
         # Issue a query to a server.  Use the current timeout.  Add this
         # function as a timeout errback in case another retry is required.
         d = self._query(address, query, timeout[0], reason.value.id)
-        d.addErrback(self._reissue, addressesLeft, addressesUsed, query, timeout)
+        d.addErrback(
+            self._reissue, addressesLeft, addressesUsed, query, timeout)
         return d
 
 
-    def queryTCP(self, queries, timeout = 10):
+    def queryTCP(self, queries, timeout=10):
         """
         Make a number of DNS queries via TCP.
 
@@ -378,9 +382,11 @@
         the answers section, the authority section, and the additional section.
         """
         if message.trunc:
-            return self.queryTCP(message.queries).addCallback(self.filterAnswers)
+            return self.queryTCP(
+                message.queries).addCallback(self.filterAnswers)
         if message.rCode != dns.OK:
-            return failure.Failure(self.exceptionForCode(message.rCode)(message))
+            return failure.Failure(
+                self.exceptionForCode(message.rCode)(message))
         return (message.answers, message.authority, message.additional)
 
 
@@ -393,22 +399,36 @@
         will be re-used for this query as well.
 
         @type name: C{str}
+        @param name: DNS name to resolve.
+
+        @type cls: C{int}
+        @param cls: The query class.
+
         @type type: C{int}
-        @type cls: C{int}
-
-        @return: A L{Deferred} which fires with a three-tuple giving the
-            answer, authority, and additional sections of the response or with
-            a L{Failure} if the response code is anything other than C{dns.OK}.
+        @param type: The query type.
+
+        @type timeout: Sequence of C{int}
+        @param timeout: Number of seconds after which to reissue the
+        query.  When the last timeout expires, the query is considered
+        failed.
+
+        @rtype: L{Deferred}
+        @return: a L{Deferred} that fires with a 3-tuple of (results,
+        authority, additional) lists, where each is a list of
+        L{twisted.names.dns.RRHeader} instances or with a L{Failure}
+        if the response code is anything other than C{dns.OK}.
         """
         key = (name, type, cls)
         waiting = self._waiting.get(key)
         if waiting is None:
             self._waiting[key] = []
             d = self.queryUDP([dns.Query(name, type, cls)], timeout)
+
             def cbResult(result):
                 for d in self._waiting.pop(key):
                     d.callback(result)
                 return result
+
             d.addCallback(self.filterAnswers)
             d.addBoth(cbResult)
         else:
@@ -417,13 +437,7 @@
         return d
 
 
-    # This one doesn't ever belong on UDP
-    def lookupZone(self, name, timeout = 10):
-        """
-        Perform an AXFR request. This is quite different from usual
-        DNS requests. See http://cr.yp.to/djbdns/axfr-notes.html for
-        more information.
-        """
+    def lookupZone(self, name, timeout=10):
         address = self.pickServer()
         if address is None:
             return defer.fail(IOError('No domain name servers available'))
@@ -431,7 +445,7 @@
         d = defer.Deferred()
         controller = AXFRController(name, d)
         factory = DNSClientFactory(controller, timeout)
-        factory.noisy = False #stfu
+        factory.noisy = False
 
         connector = self._reactor.connectTCP(host, port, factory)
         controller.timeoutCall = self._reactor.callLater(
@@ -443,7 +457,9 @@
         connector.disconnect()
         controller.timeoutCall = None
         controller.deferred = None
-        d.errback(error.TimeoutError("Zone lookup timed out after %d seconds" % (seconds,)))
+        d.errback(
+            error.TimeoutError(
+                "Zone lookup timed out after %d seconds" % (seconds,)))
 
     def _cbLookupZone(self, result, connector):
         connector.disconnect()
@@ -459,6 +475,7 @@
         self.soa = None
         self.records = []
 
+
     def connectionMade(self, protocol):
         # dig saids recursion-desired to 0, so I will too
         message = dns.Message(protocol.pickID(), recDes=0)
@@ -498,6 +515,7 @@
 
 from twisted.internet.base import ThreadedResolver as _ThreadedResolverImpl
 
+
 class ThreadedResolver(_ThreadedResolverImpl):
     def __init__(self, reactor=None):
         if reactor is None:
@@ -509,8 +527,10 @@
             "instead.",
             category=DeprecationWarning, stacklevel=2)
 
+
+
 class DNSClientFactory(protocol.ClientFactory):
-    def __init__(self, controller, timeout = 10):
+    def __init__(self, controller, timeout=10):
         self.controller = controller
         self.timeout = timeout
 
@@ -532,9 +552,9 @@
 
     @type servers: C{list} of C{(str, int)} or C{None}
 
-    @param servers: If not C{None}, interpreted as a list of domain name servers
-    to attempt to use. Each server is a tuple of address in C{str} dotted-quad
-    form and C{int} port number.
+    @param servers: If not C{None}, interpreted as a list of domain
+    name servers to attempt to use. Each server is a tuple of address
+    in C{str} dotted-quad form and C{int} port number.
 
     @type resolvconf: C{str} or C{None}
     @param resolvconf: If not C{None}, on posix systems will be interpreted as
@@ -567,7 +587,11 @@
     L = [hostResolver, cache.CacheResolver(), theResolver]
     return resolve.ResolverChain(L)
 
+
+
 theResolver = None
+
+
 def getResolver():
     """
     Get a Resolver instance.
@@ -585,355 +609,188 @@
             theResolver = createResolver(servers=[('127.0.0.1', 53)])
     return theResolver
 
+
+
 def getHostByName(name, timeout=None, effort=10):
     """
-    Resolve a name to a valid ipv4 or ipv6 address.
-
-    Will errback with C{DNSQueryTimeoutError} on a timeout, C{DomainError} or
-    C{AuthoritativeDomainError} (or subclasses) on other errors.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @type effort: C{int}
-    @param effort: How many times CNAME and NS records to follow while
-    resolving this name.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolverSimple.getHostByName}
     """
     return getResolver().getHostByName(name, timeout, effort)
 
+
+
 def lookupAddress(name, timeout=None):
     """
-    Perform an A record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupAddress}
     """
     return getResolver().lookupAddress(name, timeout)
 
+
+
 def lookupIPV6Address(name, timeout=None):
     """
-    Perform an AAAA record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupIPV6Address}
     """
     return getResolver().lookupIPV6Address(name, timeout)
 
+
+
 def lookupAddress6(name, timeout=None):
     """
-    Perform an A6 record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupAddress6}
     """
     return getResolver().lookupAddress6(name, timeout)
 
+
+
 def lookupMailExchange(name, timeout=None):
     """
-    Perform an MX record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupMailExchange}
     """
     return getResolver().lookupMailExchange(name, timeout)
 
+
+
 def lookupNameservers(name, timeout=None):
     """
-    Perform an NS record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupNameservers}
     """
     return getResolver().lookupNameservers(name, timeout)
 
+
+
 def lookupCanonicalName(name, timeout=None):
     """
-    Perform a CNAME record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupCanonicalName}
     """
     return getResolver().lookupCanonicalName(name, timeout)
 
+
+
 def lookupMailBox(name, timeout=None):
     """
-    Perform an MB record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupMailBox}
     """
     return getResolver().lookupMailBox(name, timeout)
 
+
+
 def lookupMailGroup(name, timeout=None):
     """
-    Perform an MG record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupMailGroup}
     """
     return getResolver().lookupMailGroup(name, timeout)
 
+
+
 def lookupMailRename(name, timeout=None):
     """
-    Perform an MR record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupMailRename}
     """
     return getResolver().lookupMailRename(name, timeout)
 
+
+
 def lookupPointer(name, timeout=None):
     """
-    Perform a PTR record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupPointer}
     """
     return getResolver().lookupPointer(name, timeout)
 
+
+
 def lookupAuthority(name, timeout=None):
     """
-    Perform an SOA record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupAuthority}
     """
     return getResolver().lookupAuthority(name, timeout)
 
+
+
 def lookupNull(name, timeout=None):
     """
-    Perform a NULL record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupNull}
     """
     return getResolver().lookupNull(name, timeout)
 
+
+
 def lookupWellKnownServices(name, timeout=None):
     """
-    Perform a WKS record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupWellKnownServices}
     """
     return getResolver().lookupWellKnownServices(name, timeout)
 
+
+
 def lookupService(name, timeout=None):
     """
-    Perform an SRV record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupService}
     """
     return getResolver().lookupService(name, timeout)
 
+
+
 def lookupHostInfo(name, timeout=None):
     """
-    Perform a HINFO record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupHostInfo}
     """
     return getResolver().lookupHostInfo(name, timeout)
 
+
+
 def lookupMailboxInfo(name, timeout=None):
     """
-    Perform an MINFO record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupMailboxInfo}
     """
     return getResolver().lookupMailboxInfo(name, timeout)
 
+
+
 def lookupText(name, timeout=None):
     """
-    Perform a TXT record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupText}
     """
     return getResolver().lookupText(name, timeout)
 
+
+
 def lookupSenderPolicy(name, timeout=None):
     """
-    Perform a SPF record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupSenderPolicy}
     """
     return getResolver().lookupSenderPolicy(name, timeout)
 
+
+
 def lookupResponsibility(name, timeout=None):
     """
-    Perform an RP record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupResponsibility}
     """
     return getResolver().lookupResponsibility(name, timeout)
 
+
+
 def lookupAFSDatabase(name, timeout=None):
     """
-    Perform an AFSDB record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupAFSDatabase}
     """
     return getResolver().lookupAFSDatabase(name, timeout)
 
+
+
 def lookupZone(name, timeout=None):
     """
-    Perform an AXFR record lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: C{int}
-    @param timeout: When this timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupZone}
     """
     # XXX: timeout here is not a list of ints, it is a single int.
     return getResolver().lookupZone(name, timeout)
 
+
+
 def lookupAllRecords(name, timeout=None):
     """
-    ALL_RECORD lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-    When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupAllRecords}
     """
     return getResolver().lookupAllRecords(name, timeout)
 
@@ -941,15 +798,6 @@
 
 def lookupNamingAuthorityPointer(name, timeout=None):
     """
-    NAPTR lookup.
-
-    @type name: C{str}
-    @param name: DNS name to resolve.
-
-    @type timeout: Sequence of C{int}
-    @param timeout: Number of seconds after which to reissue the query.
-        When the last timeout expires, the query is considered failed.
-
-    @rtype: C{Deferred}
+    @see: L{twisted.internet.interfaces.IResolver.lookupNamingAuthorityPointer}
     """
     return getResolver().lookupNamingAuthorityPointer(name, timeout)

=== modified file 'twisted/names/common.py'
--- twisted/names/common.py	2011-02-14 04:45:15 +0000
+++ twisted/names/common.py	2012-09-09 20:57:04 +0000
@@ -13,11 +13,14 @@
 from twisted.names.error import DNSNotImplementedError, DNSQueryRefusedError
 from twisted.names.error import DNSUnknownError
 
-from twisted.internet import defer, error
+from twisted.internet import defer, error, interfaces
 from twisted.python import failure
 
+from zope.interface import implements
+
 EMPTY_RESULT = (), (), ()
 
+
 class ResolverBase:
     """
     L{ResolverBase} is a base class for L{IResolver} implementations which
@@ -27,6 +30,9 @@
     @cvar _errormap: A C{dict} mapping DNS protocol failure response codes
         to exception classes which will be used to represent those failures.
     """
+
+    implements(interfaces.IResolver)
+
     _errormap = {
         dns.EFORMAT: DNSFormatError,
         dns.ESERVER: DNSServerError,
@@ -41,7 +47,6 @@
         for (k, v) in typeToMethod.items():
             self.typeToMethod[k] = getattr(self, v)
 
-
     def exceptionForCode(self, responseCode):
         """
         Convert a response code (one of the possible values of
@@ -51,160 +56,88 @@
         """
         return self._errormap.get(responseCode, DNSUnknownError)
 
-
-    def query(self, query, timeout = None):
+    def query(self, query, timeout=None):
         try:
             return self.typeToMethod[query.type](str(query.name), timeout)
-        except KeyError, e:
-            return defer.fail(failure.Failure(NotImplementedError(str(self.__class__) + " " + str(query.type))))
+        except KeyError:
+            return defer.fail(
+                failure.Failure(
+                    NotImplementedError(
+                        str(self.__class__) + " " + str(query.type))))
 
     def _lookup(self, name, cls, type, timeout):
         return defer.fail(NotImplementedError("ResolverBase._lookup"))
 
-    def lookupAddress(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupAddress
-        """
+    def lookupAddress(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.A, timeout)
 
-    def lookupIPV6Address(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupIPV6Address
-        """
+    def lookupIPV6Address(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.AAAA, timeout)
 
-    def lookupAddress6(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupAddress6
-        """
+    def lookupAddress6(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.A6, timeout)
 
-    def lookupMailExchange(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupMailExchange
-        """
+    def lookupMailExchange(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.MX, timeout)
 
-    def lookupNameservers(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupNameservers
-        """
+    def lookupNameservers(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.NS, timeout)
 
-    def lookupCanonicalName(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupCanonicalName
-        """
+    def lookupCanonicalName(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.CNAME, timeout)
 
-    def lookupMailBox(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupMailBox
-        """
+    def lookupMailBox(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.MB, timeout)
 
-    def lookupMailGroup(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupMailGroup
-        """
+    def lookupMailGroup(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.MG, timeout)
 
-    def lookupMailRename(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupMailRename
-        """
+    def lookupMailRename(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.MR, timeout)
 
-    def lookupPointer(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupPointer
-        """
+    def lookupPointer(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.PTR, timeout)
 
-    def lookupAuthority(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupAuthority
-        """
+    def lookupAuthority(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.SOA, timeout)
 
-    def lookupNull(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupNull
-        """
+    def lookupNull(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.NULL, timeout)
 
-    def lookupWellKnownServices(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupWellKnownServices
-        """
+    def lookupWellKnownServices(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.WKS, timeout)
 
-    def lookupService(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupService
-        """
+    def lookupService(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.SRV, timeout)
 
-    def lookupHostInfo(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupHostInfo
-        """
+    def lookupHostInfo(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.HINFO, timeout)
 
-    def lookupMailboxInfo(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupMailboxInfo
-        """
+    def lookupMailboxInfo(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.MINFO, timeout)
 
-    def lookupText(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupText
-        """
+    def lookupText(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.TXT, timeout)
 
-    def lookupSenderPolicy(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupSenderPolicy
-        """
+    def lookupSenderPolicy(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.SPF, timeout)
 
-    def lookupResponsibility(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupResponsibility
-        """
+    def lookupResponsibility(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.RP, timeout)
 
-    def lookupAFSDatabase(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupAFSDatabase
-        """
+    def lookupAFSDatabase(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.AFSDB, timeout)
 
-    def lookupZone(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupZone
-        """
+    def lookupZone(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.AXFR, timeout)
 
-
     def lookupNamingAuthorityPointer(self, name, timeout=None):
-        """
-        @see: twisted.names.client.lookupNamingAuthorityPointer
-        """
         return self._lookup(name, dns.IN, dns.NAPTR, timeout)
 
-
-    def lookupAllRecords(self, name, timeout = None):
-        """
-        @see: twisted.names.client.lookupAllRecords
-        """
+    def lookupAllRecords(self, name, timeout=None):
         return self._lookup(name, dns.IN, dns.ALL_RECORDS, timeout)
 
-    def getHostByName(self, name, timeout = None, effort = 10):
-        """
-        @see: twisted.names.client.getHostByName
-        """
+    def getHostByName(self, name, timeout=None, effort=10):
         # XXX - respect timeout
         return self.lookupAllRecords(name, timeout
             ).addCallback(self._cbRecords, name, effort

=== modified file 'twisted/names/resolve.py'
--- twisted/names/resolve.py	2011-02-14 04:45:15 +0000
+++ twisted/names/resolve.py	2012-09-09 19:10:11 +0000
@@ -11,11 +11,11 @@
 @author: Jp Calderone
 """
 
-from twisted.internet import defer, interfaces
+from twisted.internet import defer
 from twisted.names import dns
-from zope.interface import implements
 import common
 
+
 class FailureHandler:
     def __init__(self, resolver, query, timeout):
         self.resolver = resolver
@@ -32,9 +32,6 @@
 class ResolverChain(common.ResolverBase):
     """Lookup an address using multiple C{IResolver}s"""
 
-    implements(interfaces.IResolver)
-
-
     def __init__(self, resolvers):
         common.ResolverBase.__init__(self)
         self.resolvers = resolvers
@@ -50,7 +47,7 @@
         return d
 
 
-    def lookupAllRecords(self, name, timeout = None):
+    def lookupAllRecords(self, name, timeout=None):
         d = self.resolvers[0].lookupAllRecords(name, timeout)
         for r in self.resolvers[1:]:
             d = d.addErrback(
