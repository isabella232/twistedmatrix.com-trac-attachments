--- trunk/twisted/test/test_paths.py	2006-08-23 11:57:39.000000000 -0600
+++ branches/netloc-2093/twisted/test/test_paths.py	2006-09-16 00:45:26.000000000 -0600
@@ -425,3 +425,126 @@
         self.assertEquals(str(self.path.here()), 'http://example.com/foo/')
         self.assertEquals(str(self.path.child('').here()), 'http://example.com/foo/bar/')
 
+class URLPathAuthoritySectionTestCase(unittest.TestCase):
+
+    def testWithAllAuthorityValues(self):
+        """
+        Check that URLPath is properly using URIAuthority.
+
+        Exhaustive tests against URIAuthority are in their own test cases
+        below.
+        """
+        url = "http://alice:asecret@example.com:8080/foo/bar?yes=no&no=yes#footer"
+        path = urlpath.URLPath.fromString(url)
+        self.assertEquals(path.user, 'alice')
+        self.assertEquals(path.password, 'asecret')
+        self.assertEquals(path.host, 'example.com')
+        self.assertEquals(int(path.port), 8080)
+
+class URIAuthorityClassTestCase(unittest.TestCase):
+
+    def testInstantiatedAuthority(self):
+        """
+        Check that the URIAuthority class instantiates properly and parses
+        values as expected.
+        """
+        auth = urlpath.URIAuthority(user='bob', password='asecret',
+            host='example.com', port=80)
+        self.assertEquals(auth.user, 'bob')
+        self.assertEquals(auth.password, 'asecret')
+        self.assertEquals(auth.host, 'example.com')
+        self.assertEquals(int(auth.port), 80)
+        self.assertEquals(str(auth), 'bob:asecret@example.com:80')
+        self.assertEquals(repr(auth),
+            "URIAuthority(user='bob', password='asecret', host='example.com', port=80)")
+
+    def testNoPassword(self):
+        """
+        Make sure that without a password supplied, the authority section gets
+        parsed properly.
+        """
+        auth = urlpath.URIAuthority(user='bob', password='',
+            host='example.com', port=80)
+        self.assertEquals(auth.user, 'bob')
+        self.assertEquals(auth.password, '')
+        self.assertEquals(auth.host, 'example.com')
+        self.assertEquals(int(auth.port), 80)
+
+    def testNoUsername(self):
+        """
+        Make sure that without a user name supplied, the authority section gets
+        parsed properly.
+        """
+        # not really sure of a use case for this one, but oh well...
+        auth = urlpath.URIAuthority(user='', password='asecret',
+            host='example.com', port=80)
+        self.assertEquals(auth.user, '')
+        self.assertEquals(auth.password, 'asecret')
+        self.assertEquals(auth.host, 'example.com')
+        self.assertEquals(int(auth.port), 80)
+
+    def testUnparse(self):
+        auth = urlpath.URIAuthority(host='example.com')
+        self.assertEquals(auth.unparse(), 'example.com')
+        auth = urlpath.URIAuthority(user='alice', host='example.com')
+        self.assertEquals(auth.unparse(), 'alice@example.com')
+        auth = urlpath.URIAuthority(password='asecret', host='example.com')
+        self.assertEquals(auth.unparse(), ':asecret@example.com')
+        auth = urlpath.URIAuthority(host='example.com', port=8080)
+        self.assertEquals(auth.unparse(), 'example.com:8080')
+        auth = urlpath.URIAuthority(user='bob', host='example.com', port=8080)
+        self.assertEquals(auth.unparse(), 'bob@example.com:8080')
+        auth = urlpath.URIAuthority(password='asecret', host='example.com', port=8080)
+        self.assertEquals(auth.unparse(), ':asecret@example.com:8080')
+        auth = urlpath.URIAuthority(user='alice', password='asecret', host='example.com', port=8080)
+        self.assertEquals(auth.unparse(), 'alice:asecret@example.com:8080')
+
+    def testBadPortValue(self):
+        """
+        Confirm that a port value with a string in it will not be handled.
+        """
+        host = 'example.com'
+        port = 'z80'
+        self.assertRaises(ValueError, urlpath.URIAuthority,
+            None, None, host, port)
+
+
+class URIAuthorityClassMethodTestCase(unittest.TestCase):
+    """
+    Test URIAuthority using the fromString() class method.
+    """
+        
+    def testFullAuthority(self):
+        """
+        Check that the full authority is properly parsed.
+        """
+        url = 'bob:asecret@example.com:80'
+        auth = urlpath.URIAuthority.fromString(url)
+        user, password, host, port = auth
+        self.assertEquals(user, 'bob')
+        self.assertEquals(password, 'asecret')
+        self.assertEquals(host, 'example.com')
+        self.assertEquals(int(port), 80)
+
+    def testBadPortValue(self):
+        """
+        Confirm that a port value with a string in it will not be handled.
+        """
+        self.assertRaises(ValueError, urlpath.URIAuthority.fromString,
+            "example.com:z80")
+
+    def testURLPassedAsAuthority(self):
+        """
+        Attempt to pass a URL to fromString().
+        """
+        self.assertRaises(ValueError, urlpath.URIAuthority.fromString,
+            "http://example.com:8080")
+        
+    def testSwappedSeparators(self):
+        """
+        Test for swapping the user/password separator and the user-pass/host
+        separator.
+        """
+        self.assertRaises(ValueError, urlpath.URIAuthority.fromString,
+            "alice@asecret:example.com:8080")
+        
