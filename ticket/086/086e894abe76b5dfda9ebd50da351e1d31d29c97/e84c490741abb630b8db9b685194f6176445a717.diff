Index: doc/core/howto/tutorial/listings/finger/finger11.tac
===================================================================
--- doc/core/howto/tutorial/listings/finger/finger11.tac	(revision 24967)
+++ doc/core/howto/tutorial/listings/finger/finger11.tac	(working copy)
@@ -4,19 +4,32 @@
 from twisted.application import internet, service
 from twisted.internet import protocol, reactor, defer
 from twisted.protocols import basic
+
+def catchError(err):
+    return "Internal error in server"
+
 class FingerProtocol(basic.LineReceiver):
+
     def lineReceived(self, user):
-        self.factory.getUser(user
-        ).addErrback(lambda _: "Internal error in server"
-        ).addCallback(lambda m:
-                      (self.transport.write(m+"\r\n"),
-                       self.transport.loseConnection()))
+        d = self.factory.getUser(user)
+        d.addErrback(catchError)
+        def writeValue(value):
+            self.transport.write(value+'\r\n')
+            self.transport.loseConnection()
+        d.addCallback(writeValue)
+
+
 class FingerFactory(protocol.ServerFactory):
+
     protocol = FingerProtocol
-    def __init__(self, **kwargs): self.users = kwargs
+
+    def __init__(self, **kwargs):
+        self.users = kwargs
+
     def getUser(self, user):
         return defer.succeed(self.users.get(user, "No such user"))
 
+
 application = service.Application('finger', uid=1, gid=1)
 factory = FingerFactory(moshez='Happy and well')
 internet.TCPServer(79, factory).setServiceParent(
Index: doc/core/howto/tutorial/listings/finger/finger12.tac
===================================================================
--- doc/core/howto/tutorial/listings/finger/finger12.tac	(revision 24967)
+++ doc/core/howto/tutorial/listings/finger/finger12.tac	(working copy)
@@ -2,31 +2,52 @@
 from twisted.application import internet, service
 from twisted.internet import protocol, reactor, defer
 from twisted.protocols import basic
+
+def catchError(err):
+    return "Internal error in server"
+
 class FingerProtocol(basic.LineReceiver):
+
     def lineReceived(self, user):
-        self.factory.getUser(user
-        ).addErrback(lambda _: "Internal error in server"
-        ).addCallback(lambda m:
-                      (self.transport.write(m+"\r\n"),
-                       self.transport.loseConnection()))
+        d = self.factory.getUser(user)
+        d.addErrback(catchError)
+        def writeValue(value):
+            self.transport.write(value+'\r\n')
+            self.transport.loseConnection()
+        d.addCallback(writeValue)
+        
+        
+class FingerFactory(protocol.ServerFactory):
 
-class FingerFactory(protocol.ServerFactory):
     protocol = FingerProtocol
-    def __init__(self, **kwargs): self.users = kwargs
+
+    def __init__(self, **kwargs):
+        self.users = kwargs
+
     def getUser(self, user):
         return defer.succeed(self.users.get(user, "No such user"))
+
     
 class FingerSetterProtocol(basic.LineReceiver):
-    def connectionMade(self): self.lines = []
-    def lineReceived(self, line): self.lines.append(line)
+
+    def connectionMade(self):
+        self.lines = []
+
+    def lineReceived(self, line):
+        self.lines.append(line)
+
     def connectionLost(self, reason):
-        self.factory.setUser(*self.lines[:2])
-        # first line: user    second line: status
+        user = self.lines[0]
+        status = self.lines[1]
+        self.factory.setUser(user, status)
         
 class FingerSetterFactory(protocol.ServerFactory):
+    
     protocol = FingerSetterProtocol
-    def __init__(self, ff): self.setUser = ff.users.__setitem__
+    def __init__(self, ff):
+        self.setUser = ff.users.__setitem__
 
+
 ff = FingerFactory(moshez='Happy and well')
 fsf = FingerSetterFactory(ff)
 
Index: doc/core/howto/tutorial/listings/finger/finger13.tac
===================================================================
--- doc/core/howto/tutorial/listings/finger/finger13.tac	(revision 24967)
+++ doc/core/howto/tutorial/listings/finger/finger13.tac	(working copy)
@@ -2,34 +2,56 @@
 from twisted.application import internet, service
 from twisted.internet import protocol, reactor, defer
 from twisted.protocols import basic
+
+def catchError(err):
+    return "Internal error in server"
+
 class FingerProtocol(basic.LineReceiver):
+
     def lineReceived(self, user):
-        self.factory.getUser(user
-        ).addErrback(lambda _: "Internal error in server"
-        ).addCallback(lambda m:
-                      (self.transport.write(m+"\r\n"),
-                       self.transport.loseConnection()))
+        d = self.factory.getUser(user)
+        d.addErrback(catchError)
+        def writeValue(value):
+            self.transport.write(value+'\r\n')
+            self.transport.loseConnection()
+        d.addCallback(writeValue)
 
+
 class FingerSetterProtocol(basic.LineReceiver):
-    def connectionMade(self): self.lines = []
-    def lineReceived(self, line): self.lines.append(line)
-    def connectionLost(self,reason): self.factory.setUser(*self.lines[:2])
-    # first line: user   second line: status
 
+    def connectionMade(self):
+        self.lines = []
+
+    def lineReceived(self, line):
+        self.lines.append(line)
+
+    def connectionLost(self, reason):
+        user = self.lines[0]
+        status = self.lines[1]
+        self.factory.setUser(user, status)
+
+
 class FingerService(service.Service):
+
     def __init__(self, **kwargs):
         self.users = kwargs
+
     def getUser(self, user):
         return defer.succeed(self.users.get(user, "No such user"))
+
     def getFingerFactory(self):
         f = protocol.ServerFactory()
-        f.protocol, f.getUser = FingerProtocol, self.getUser
+        f.protocol = FingerProtocol
+        f.getUser = self.getUser
         return f
+
     def getFingerSetterFactory(self):
         f = protocol.ServerFactory()
-        f.protocol, f.setUser = FingerSetterProtocol, self.users.__setitem__
+        f.protocol = FingerSetterProtocol
+        f.setUser = self.users.__setitem__
         return f
 
+
 application = service.Application('finger', uid=1, gid=1)
 f = FingerService(moshez='Happy and well')
 serviceCollection = service.IServiceCollection(application)
Index: doc/core/howto/tutorial/listings/finger/finger14.tac
===================================================================
--- doc/core/howto/tutorial/listings/finger/finger14.tac	(revision 24967)
+++ doc/core/howto/tutorial/listings/finger/finger14.tac	(working copy)
@@ -3,18 +3,26 @@
 from twisted.internet import protocol, reactor, defer
 from twisted.protocols import basic
 
+def catchError(err):
+    return "Internal error in server"
+
 class FingerProtocol(basic.LineReceiver):
+
     def lineReceived(self, user):
-        self.factory.getUser(user
-        ).addErrback(lambda _: "Internal error in server"
-        ).addCallback(lambda m:
-                      (self.transport.write(m+"\r\n"),
-                       self.transport.loseConnection()))
+        d = self.factory.getUser(user)
+        d.addErrback(catchError)
+        def writeValue(value):
+            self.transport.write(value+'\r\n')
+            self.transport.loseConnection()
+        d.addCallback(writeValue)
 
+
 class FingerService(service.Service):
+    
     def __init__(self, filename):
-        self.users = {}
         self.filename = filename
+        self._read()
+
     def _read(self):
         for line in file(self.filename):
             user, status = line.split(':', 1)
@@ -22,19 +30,25 @@
             status = status.strip()
             self.users[user] = status
         self.call = reactor.callLater(30, self._read)
+    
     def startService(self):
         self._read()
         service.Service.startService(self)
+
     def stopService(self):
         service.Service.stopService(self)
         self.call.cancel()
+
     def getUser(self, user):
         return defer.succeed(self.users.get(user, "No such user"))
+
     def getFingerFactory(self):
         f = protocol.ServerFactory()
-        f.protocol, f.getUser = FingerProtocol, self.getUser
+        f.protocol = FingerProtocol
+        f.getUser = self.getUser
         return f
 
+
 application = service.Application('finger', uid=1, gid=1)
 f = FingerService('/etc/users')
 finger = internet.TCPServer(79, f.getFingerFactory())
Index: doc/core/howto/tutorial/listings/finger/finger15.tac
===================================================================
--- doc/core/howto/tutorial/listings/finger/finger15.tac	(revision 24967)
+++ doc/core/howto/tutorial/listings/finger/finger15.tac	(working copy)
@@ -5,55 +5,70 @@
 from twisted.web import resource, server, static
 import cgi
 
+def catchError(err):
+    return "Internal error in server"
+
 class FingerProtocol(basic.LineReceiver):
+
     def lineReceived(self, user):
-        self.factory.getUser(user
-        ).addErrback(lambda _: "Internal error in server"
-        ).addCallback(lambda m:
-                      (self.transport.write(m+"\r\n"),
-                       self.transport.loseConnection()))
+        d = self.factory.getUser(user)
+        d.addErrback(catchError)
+        def writeValue(value):
+            self.transport.write(value+'\r\n')
+            self.transport.loseConnection()
+        d.addCallback(writeValue)
 
-class MotdResource(resource.Resource):
+
+class FingerResource(resource.Resource):
     
     def __init__(self, users):
         self.users = users
         resource.Resource.__init__(self)
 
     # we treat the path as the username
-    def getChild(self, username, request):
-        motd = self.users.get(username)
-        username = cgi.escape(username)
-        if motd is not None:
-            motd = cgi.escape(motd)
-            text = '<h1>%s</h1><p>%s</p>' % (username,motd)
-        else:
-            text = '<h1>%s</h1><p>No such user</p>' % username
-        return static.Data(text, 'text/html')
+    def getChild(self, path, request):
+        """
+            'path' is a string. 
+            'request' is a 'twisted.protocols.http.Request'.
+        """
+        user = path
+        value = self.users.get(user, 
+            "No such user.<p/>http://this.site/user")
+        contentType = "text/html"
+        value = cgi.excape(value)
+        contentType = cgi.escape(contentType)
+        output = "<h1>%s</h1><p>%s</p>" % (value, contentType)
+        return static.Data(output)
 
+
 class FingerService(service.Service):
+
     def __init__(self, filename):
         self.filename = filename
         self._read()
+
     def _read(self):
-        self.users = {}
         for line in file(self.filename):
             user, status = line.split(':', 1)
             user = user.strip()
             status = status.strip()
             self.users[user] = status
         self.call = reactor.callLater(30, self._read)
+
     def getUser(self, user):
         return defer.succeed(self.users.get(user, "No such user"))
+
     def getFingerFactory(self):
         f = protocol.ServerFactory()
-        f.protocol, f.getUser = FingerProtocol, self.getUser
+        f.protocol = FingerProtocol
+        f.getUser = self.getUser
         f.startService = self.startService
         return f
-    
+
     def getResource(self):
-        r = MotdResource(self.users)
-        return r
-    
+        return FingerResource()
+
+
 application = service.Application('finger', uid=1, gid=1)
 f = FingerService('/etc/users')
 serviceCollection = service.IServiceCollection(application)
@@ -61,9 +76,3 @@
                    ).setServiceParent(serviceCollection)
 internet.TCPServer(8000, server.Site(f.getResource())
                    ).setServiceParent(serviceCollection)
-
-
-
-
-
-
Index: doc/core/howto/tutorial/listings/finger/finger16.tac
===================================================================
--- doc/core/howto/tutorial/listings/finger/finger16.tac	(revision 24967)
+++ doc/core/howto/tutorial/listings/finger/finger16.tac	(working copy)
@@ -5,32 +5,42 @@
 from twisted.protocols import basic
 from twisted.web import resource, server, static
 import cgi
+
+def catchError(err):
+    return "Internal error in server"
+
 class FingerProtocol(basic.LineReceiver):
+
     def lineReceived(self, user):
-        self.factory.getUser(user
-        ).addErrback(lambda _: "Internal error in server"
-        ).addCallback(lambda m:
-                      (self.transport.write(m+"\r\n"),
-                       self.transport.loseConnection()))
-class FingerSetterProtocol(basic.LineReceiver):
-    def connectionMade(self): self.lines = []
-    def lineReceived(self, line): self.lines.append(line)
-    def connectionLost(self,reason): self.factory.setUser(*self.lines[:2])
+        d = self.factory.getUser(user)
+        d.addErrback(catchError)
+        def writeValue(value):
+            self.transport.write(value+'\r\n')
+            self.transport.loseConnection()
+        d.addCallback(writeValue)
+
+
 class IRCReplyBot(irc.IRCClient):
+
     def connectionMade(self):
         self.nickname = self.factory.nickname
         irc.IRCClient.connectionMade(self)
+
     def privmsg(self, user, channel, msg):
         user = user.split('!')[0]
         if self.nickname.lower() == channel.lower():
-            self.factory.getUser(msg
-            ).addErrback(lambda _: "Internal error in server"
-            ).addCallback(lambda m: irc.IRCClient.msg(self, user, msg+': '+m))
+            d = self.factory.getUser(msg)
+            d.addErrback(catchError)
+            d.addCallback(lambda m: "Status of %s: %s" % (msg, m))
+            d.addCallback(lambda m: self.msg(user, m))
 
+            
 class FingerService(service.Service):
+
     def __init__(self, filename):
         self.filename = filename
         self._read()
+
     def _read(self):
         self.users = {}
         for line in file(self.filename):
@@ -39,12 +49,19 @@
             status = status.strip()
             self.users[user] = status
         self.call = reactor.callLater(30, self._read)
+
     def getUser(self, user):
         return defer.succeed(self.users.get(user, "No such user"))
+
+    def getUsers(self):
+        return defer.succeed(self.users.keys())
+
     def getFingerFactory(self):
         f = protocol.ServerFactory()
-        f.protocol, f.getUser = FingerProtocol, self.getUser
+        f.protocol = FingerProtocol
+        f.getUser = self.getUser
         return f
+
     def getResource(self):
         r = resource.Resource()
         r.getChild = (lambda path, request:
@@ -57,9 +74,12 @@
     
     def getIRCBot(self, nickname):
         f = protocol.ReconnectingClientFactory()
-        f.protocol,f.nickname,f.getUser = IRCReplyBot,nickname,self.getUser
+        f.protocol = IRCReplyBot
+        f.nickname = nickname
+        f.getUser = self.getUser
         return f
 
+    
 application = service.Application('finger', uid=1, gid=1)
 f = FingerService('/etc/users')
 serviceCollection = service.IServiceCollection(application)
Index: doc/core/howto/tutorial/listings/finger/finger17.tac
===================================================================
--- doc/core/howto/tutorial/listings/finger/finger17.tac	(revision 24967)
+++ doc/core/howto/tutorial/listings/finger/finger17.tac	(working copy)
@@ -5,17 +5,21 @@
 from twisted.protocols import basic
 from twisted.web import resource, server, static, xmlrpc
 import cgi
+
+def catchError(err):
+    return "Internal error in server"
+
 class FingerProtocol(basic.LineReceiver):
+
     def lineReceived(self, user):
-        self.factory.getUser(user
-        ).addErrback(lambda _: "Internal error in server"
-        ).addCallback(lambda m:
-                      (self.transport.write(m+"\r\n"),
-                       self.transport.loseConnection()))
-class FingerSetterProtocol(basic.LineReceiver):
-    def connectionMade(self): self.lines = []
-    def lineReceived(self, line): self.lines.append(line)
-    def connectionLost(self,reason): self.factory.setUser(*self.lines[:2])
+        d = self.factory.getUser(user)
+        d.addErrback(catchError)
+        def writeValue(value):
+            self.transport.write(value+'\r\n')
+            self.transport.loseConnection()
+        d.addCallback(writeValue)
+
+
 class IRCReplyBot(irc.IRCClient):
     def connectionMade(self):
         self.nickname = self.factory.nickname
@@ -23,14 +27,18 @@
     def privmsg(self, user, channel, msg):
         user = user.split('!')[0]
         if self.nickname.lower() == channel.lower():
-            self.factory.getUser(msg
-            ).addErrback(lambda _: "Internal error in server"
-            ).addCallback(lambda m: irc.IRCClient.msg(self, user, msg+': '+m))
+            d = self.factory.getUser(msg)
+            d.addErrback(catchError)
+            d.addCallback(lambda m: "Status of %s: %s" % (msg, m))
+            d.addCallback(lambda m: self.msg(user, m))
 
+
 class FingerService(service.Service):
+
     def __init__(self, filename):
         self.filename = filename
         self._read()
+
     def _read(self):
         self.users = {}
         for line in file(self.filename):
@@ -39,12 +47,16 @@
             status = status.strip()
             self.users[user] = status
         self.call = reactor.callLater(30, self._read)
+
     def getUser(self, user):
         return defer.succeed(self.users.get(user, "No such user"))
+
     def getFingerFactory(self):
         f = protocol.ServerFactory()
-        f.protocol, f.getUser = FingerProtocol, self.getUser
+        f.protocol = FingerProtocol
+        f.getUser = self.getUser
         return f
+
     def getResource(self):
         r = resource.Resource()
         r.getChild = (lambda path, request:
@@ -56,10 +68,14 @@
         x.xmlrpc_getUser = self.getUser
         r.putChild('RPC2', x)
         return r
+
     def getIRCBot(self, nickname):
         f = protocol.ReconnectingClientFactory()
-        f.protocol,f.nickname,f.getUser = IRCReplyBot,nickname,self.getUser
+        f.protocol = IRCReplyBot
+        f.nickname = nickname
+        f.getUser = self.getUser
         return f
+    
 
 application = service.Application('finger', uid=1, gid=1)
 f = FingerService('/etc/users')
Index: doc/core/howto/tutorial/listings/finger/finger18.tac
===================================================================
--- doc/core/howto/tutorial/listings/finger/finger18.tac	(revision 24967)
+++ doc/core/howto/tutorial/listings/finger/finger18.tac	(working copy)
@@ -20,18 +20,6 @@
         d.addCallback(writeValue)
 
 
-class FingerSetterProtocol(basic.LineReceiver):
-
-    def connectionMade(self):
-        self.lines = []
-
-    def lineReceived(self, line):
-        self.lines.append(line)
-
-    def connectionLost(self, reason):
-        self.factory.setUser(*self.lines[:2])
-
-
 class IRCReplyBot(irc.IRCClient):
 
     def connectionMade(self):
@@ -136,6 +124,7 @@
         f.getUser = self.getUser
         return f
 
+
 application = service.Application('finger', uid=1, gid=1)
 f = FingerService('/etc/users')
 serviceCollection = service.IServiceCollection(application)
