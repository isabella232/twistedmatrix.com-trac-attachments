Index: twisted/spread/util.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/util.py,v
retrieving revision 1.11
diff -u -r1.11 util.py
--- twisted/spread/util.py	3 Oct 2003 04:52:19 -0000	1.11
+++ twisted/spread/util.py	13 Jan 2004 11:05:30 -0000
@@ -145,6 +145,47 @@
             self.stopPaging()
         return val
 
+
+from twisted.protocols import basic
+from twisted.internet import interfaces
+
+class FilePager(Pager):
+    """Reads a file in chunks and sends the chunks as they come.
+    """
+    __implements__ = interfaces.IConsumer
+    
+    def __init__(self, collector, fd, callback=None, *args, **kw):
+        self.chunks = []
+        self.pointer = 0
+        self.startProducing(fd)
+        Pager.__init__(self, collector, callback, *args, **kw)
+
+    def startProducing(self, fd):
+        self.deferred = basic.FileSender().beginFileTransfer(fd, self)
+        self.deferred.addCallbacks(lambda x : self.stopPaging(),
+                                   lambda f : self.stopPaging())
+
+    def registerProducer(self, producer, streaming):
+        self.producer = producer
+        if not streaming:
+            self.producer.resumeProducing()
+
+    def unregisterProducer(self):
+        self.producer = None
+
+    def write(self, chunk):
+        print chunk
+        self.chunks.append(chunk)
+
+    def nextPage(self):
+        if self.pointer >= len(self.chunks):
+            return ''
+        val = self.chunks[self.pointer]
+        self.pointer += 1
+        self.producer.resumeProducing()
+        return val
+            
+
 ### Utility paging stuff.
 from twisted.spread import pb
 class CallbackPageCollector(pb.Referenceable):
