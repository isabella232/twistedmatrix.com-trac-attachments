Index: twisted/test/test_internet.py
===================================================================
--- twisted/test/test_internet.py	(revision 28884)
+++ twisted/test/test_internet.py	(working copy)
@@ -870,7 +870,91 @@
         dc.reset(3)
         self.assertEquals(dc.getTime(), 13)
 
+class DelayedCallRichComparison(unittest.TestCase):
+    def _getDelayedCallAt(self, time):
+        return base.DelayedCall(time, lambda: None, (), {}, lambda dc: None,
+                                lambda dc: None, None)
 
+    def setUp(self):       
+        self.zero, self.one = map(self._getDelayedCallAt, (0, 1))
+        if id(self.zero) < id(self.one):
+            # make sure that default comparison based on `id` fails
+            # otherwise tests won't catch erronious fallback
+            self.zero, self.one = self.one, self.zero
+            self.zero.time, self.one.time = 0, 1
+
+    def test_lt(self):
+        zero, one = self.zero, self.one
+        self.assertTrue(zero < one)
+        self.assertFalse(one < zero)
+        self.assertFalse(zero < zero)
+        self.assertFalse(one < one)
+        # document current inconsistent behavior
+        self.assertRaises(AttributeError, lambda: zero < 1)
+        self.assertFalse(0 < one)
+
+    def test_le(self):
+        zero, one = self.zero, self.one
+        self.assertTrue(zero <= one)
+        self.assertFalse(one <= zero)
+        self.assertTrue(zero <= zero)
+        self.assertTrue(one <= one)
+        # document current inconsistent behavior
+        self.assertRaises(AttributeError, lambda: zero <= 1)
+        self.assertFalse(0 <= one)
+    
+    def test_gt(self):
+        zero, one = self.zero, self.one
+        self.assertTrue(one > zero)
+        self.assertFalse(zero > one)
+        self.assertFalse(zero > zero)
+        self.assertFalse(one > one)
+        # document current inconsistent behavior
+        self.assertRaises(AttributeError, lambda: zero < 1)
+        self.assertFalse(0 < one)
+
+    def test_ge(self):
+        zero, one = self.zero, self.one
+        self.assertTrue(one >= zero)
+        self.assertFalse(zero >= one)
+        self.assertTrue(zero >= zero)
+        self.assertTrue(one >= one)
+        # document current inconsistent behavior
+        self.assertRaises(AttributeError, lambda: 1 >= zero)
+        self.assertFalse(one >= 0)
+
+    def test_eq(self):
+        #NOTE: use explicit `==` here, don't use `assertEquals()`
+        self.assertFalse(self.zero == self.one)
+        self.assertTrue(self.zero == self.zero)
+        self.assertTrue(self.one == self.one)
+        # document current behavior
+        self.assertFalse(self.zero == self._getDelayedCallAt(self.zero.time))
+        self.assertFalse(self.one == self._getDelayedCallAt(self.one.time))
+
+    def test_ne(self):
+        #NOTE: use explicit `!=` here, don't use `assertNotEquals()`
+        self.assertTrue(self.zero != self.one)
+        self.assertFalse(self.zero != self.zero)
+        self.assertFalse(self.one != self.one)
+        # document current behavior
+        self.assertTrue(self.zero != self._getDelayedCallAt(self.zero.time))
+        self.assertTrue(self.one != self._getDelayedCallAt(self.one.time))
+
+    def test_hash(self):
+        # hash(a) != hash(b)  => a != b
+        if hash(self.zero) != hash(self.one):
+            self.assertNotEquals(self.zero, self.one)
+        else: # nothing follows from hash(a) == hash(b)
+            self.assertTrue(True)
+
+        # hash must not change
+        hash_zero, hash_one = map(hash ,(self.zero, self.one))
+        self.zero.time += 1 
+        self.one.time *= 10
+        self.assertEquals(hash(self.zero), hash_zero)
+        self.assertEquals(hash(self.one), hash_one)
+
 class CallFromThreadTests(unittest.TestCase):
     def testWakeUp(self):
         # Make sure other threads can wake up the reactor
Index: twisted/internet/base.py
===================================================================
--- twisted/internet/base.py	(revision 28884)
+++ twisted/internet/base.py	(working copy)
@@ -151,9 +151,21 @@
         return not (self.cancelled or self.called)
 
     def __le__(self, other):
+        """
+        Implement `<=` comparison
+
+        It is called for `>=` by CPython automatically.
+        """
         return self.time <= other.time
 
+    def __lt__(self, other):
+        """
+        Implement `<` comparison
 
+        It is called for `>` by CPython automatically.
+        """
+        return self.time < other.time
+
     def __str__(self):
         if self._str is not None:
             return self._str
