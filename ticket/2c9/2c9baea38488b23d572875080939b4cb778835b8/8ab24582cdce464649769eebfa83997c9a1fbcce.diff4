Index: twisted/python/log.py
===================================================================
--- twisted/python/log.py       (revision 17882)
+++ twisted/python/log.py       (working copy)
@@ -2,14 +2,16 @@
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.

-
 """Logging and metrics infrastructure.
 """

+from __future__ import division
+
 # System Imports
 import sys
 import time
 import warnings
+import datetime

 # Sibling Imports
 from twisted.python import util, context, reflect
@@ -238,11 +240,13 @@


 class FileLogObserver:
-    """Log observer that writes to a file-like object.
+    """
+    Log observer that writes to a file-like object.

-    @ivar timeFormat: Format string passed to strftime()
+    @type timeFormat: C{str} or C{NoneType}
+    @ivar timeFormat: If not C{None}, the format string passed to strftime().
     """
-    timeFormat = "%Y/%m/%d %H:%M %Z"
+    timeFormat = None

     def __init__(self, f):
         self.write = f.write
@@ -269,6 +273,43 @@
                     text = 'PATHOLOGICAL ERROR IN BOTH FORMAT STRING AND MESSAGE DETAILS, MESSAGE LOST'
         return text

+
+    def getTimezoneOffset(self):
+        """
+        Return the current local timezone offset from UTC.
+
+        @rtype: C{int}
+        @return: The number of seconds offset from UTC.  West is positive,
+        east is negative.
+        """
+        if time.daylight:
+            return time.altzone
+        return time.timezone
+
+
+    def formatTime(self, when):
+        """
+        Return the given UTC value formatted as a human-readable string
+        representing that time in the local timezone.
+
+        @type when: C{int}
+        @param when: POSIX timestamp to convert to a human-readable string.
+
+        @rtype: C{str}
+        """
+        if self.timeFormat is not None:
+            return time.strftime(self.timeFormat, time.localtime(when))
+
+        tzOffset = -self.getTimezoneOffset()
+        when = datetime.datetime.utcfromtimestamp(when + tzOffset)
+        tzHour = int(tzOffset / 60 / 60)
+        tzMin = int(tzOffset / 60 % 60)
+        return '%d/%02d/%02d %02d:%02d %+03d%02d' % (
+            when.year, when.month, when.day,
+            when.hour, when.minute,
+            tzHour, tzMin)
+
+
     def emit(self, eventDict):
         edm = eventDict['message']
         if not edm:
@@ -283,7 +324,7 @@
         else:
             text = ' '.join(map(reflect.safe_str, edm))

-        timeStr = time.strftime(self.timeFormat, time.localtime(eventDict['time']))
+        timeStr = self.formatTime(eventDict['time'])
         fmtDict = {'system': eventDict['system'], 'text': text.replace("\n", "\n\t")}
         msgStr = self._safeFormat("[%(system)s] %(text)s\n", fmtDict)

Index: twisted/test/test_log.py
===================================================================
--- twisted/test/test_log.py    (revision 17882)
+++ twisted/test/test_log.py    (working copy)
@@ -3,7 +3,7 @@

 #

-import sys
+import sys, time

 from twisted.trial import unittest

@@ -126,12 +126,14 @@
         sys.setdefaultencoding(self._origEncoding)
         del sys.setdefaultencoding

+
+
 class LogPublisherTestCase(LogPublisherTestCaseMixin, unittest.TestCase):
-
     def testSingleString(self):
         self.lp.msg("Hello, world.")
         self.assertEquals(len(self.out), 1)

+
     def testMultipleString(self):
         # Test some stupid behavior that will be deprecated real soon.
         # If you are reading this and trying to learn how the logging
@@ -139,13 +141,51 @@
         self.lp.msg("Hello, ", "world.")
         self.assertEquals(len(self.out), 1)

+
     def testSingleUnicode(self):
         self.lp.msg(u"Hello, \N{VULGAR FRACTION ONE HALF} world.")
         self.assertEquals(len(self.out), 1)
         self.assertIn('with str error Traceback', self.out[0])
         self.assertIn('UnicodeEncodeError', self.out[0])

+
+
 class FileObserverTestCase(LogPublisherTestCaseMixin, unittest.TestCase):
+    def test_timeFormatting(self):
+        """
+        Test the method of L{FileLogObserver} which turns a timestamp into a
+        human-readable string.
+        """
+        when = time.mktime((2001, 2, 3, 0, 5, 6, 7, 8, 0)) - time.timezone
+
+        # Pretend to be in US/Eastern for a moment
+        self.flo.getTimezoneOffset = lambda: 18000
+        self.assertEquals(self.flo.formatTime(when), '2001/02/02 19:05 -0500')
+
+        # Okay now we're in Eastern Europe somewhere
+        self.flo.getTimezoneOffset = lambda: -3600
+        self.assertEquals(self.flo.formatTime(when), '2001/02/03 01:05 +0100')
+
+        # And off in the Pacific or someplace like that
+        self.flo.getTimezoneOffset = lambda: -39600
+        self.assertEquals(self.flo.formatTime(when), '2001/02/03 11:05 +1100')
+
+        # One of those weird places with a half-hour offset timezone
+        self.flo.getTimezoneOffset = lambda: 5400
+        self.assertEquals(self.flo.formatTime(when), '2001/02/02 22:35 -0130')
+
+        # Half-hour offset in the other direction
+        self.flo.getTimezoneOffset = lambda: -5400
+        self.assertEquals(self.flo.formatTime(when), '2001/02/03 01:35 +0130')
+
+        # If a strftime-format string is present on the logger, it should
+        # use that instead.  Note we don't assert anything about hour or
+        # minute because we cannot easily control what time.strftime()
+        # thinks the local timezone is.
+        self.flo.timeFormat = '%Y %m %d'
+        self.assertEquals(self.flo.formatTime(when), '2001 02 03')
+
+
     def testLoggingAnObjectWithBroken__str__(self):
         #HELLO, MCFLY
         self.lp.msg(EvilStr())
@@ -153,36 +193,43 @@
         # Logging system shouldn't need to crap itself for this trivial case
         self.assertNotIn('UNFORMATTABLE', self.out[0])

+
     def testFormattingAnObjectWithBroken__str__(self):
         self.lp.msg(format='%(blat)s', blat=EvilStr())
         self.assertEquals(len(self.out), 1)
         self.assertIn('Invalid format string or unformattable object', self.out[0])

+
     def testBrokenSystem__str__(self):
         self.lp.msg('huh', system=EvilStr())
         self.assertEquals(len(self.out), 1)
         self.assertIn('Invalid format string or unformattable object', self.out[0])

+
     def testFormattingAnObjectWithBroken__repr__Indirect(self):
         self.lp.msg(format='%(blat)s', blat=[EvilRepr()])
         self.assertEquals(len(self.out), 1)
         self.assertIn('UNFORMATTABLE OBJECT', self.out[0])

+
     def testSystemWithBroker__repr__Indirect(self):
         self.lp.msg('huh', system=[EvilRepr()])
         self.assertEquals(len(self.out), 1)
         self.assertIn('UNFORMATTABLE OBJECT', self.out[0])

+
     def testSimpleBrokenFormat(self):
         self.lp.msg(format='hooj %s %s', blat=1)
         self.assertEquals(len(self.out), 1)
         self.assertIn('Invalid format string or unformattable object', self.out[0])

+
     def testRidiculousFormat(self):
         self.lp.msg(format=42, blat=1)
         self.assertEquals(len(self.out), 1)
         self.assertIn('Invalid format string or unformattable object', self.out[0])

+
     def testEvilFormat__repr__And__str__(self):
         self.lp.msg(format=EvilReprStr(), blat=1)
         self.assertEquals(len(self.out), 1)

