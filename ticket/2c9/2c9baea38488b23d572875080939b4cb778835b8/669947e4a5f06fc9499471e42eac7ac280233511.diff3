Index: log.py
===================================================================
--- log.py	(revision 13945)
+++ log.py	(working copy)
@@ -14,6 +14,8 @@
 
 import sys
 import time
+import datetime
+import locale
 import warnings
 
 # Sibling Imports
@@ -239,16 +241,57 @@
     msg = theLogPublisher.msg
 
 
+# LocalTimezone: a class capturing the platform's idea of local time.
+# Taken from datetime module documentation
+
+ZERO = datetime.timedelta(0)
+
+STDOFFSET = datetime.timedelta(seconds = -time.timezone)
+if time.daylight:
+    DSTOFFSET = datetime.timedelta(seconds = -time.altzone)
+else:
+    DSTOFFSET = STDOFFSET
+
+DSTDIFF = DSTOFFSET - STDOFFSET
+
+class LocalTimezone(datetime.tzinfo):
+
+    def utcoffset(self, dt):
+        if self._isdst(dt):
+            return DSTOFFSET
+        else:
+            return STDOFFSET
+
+    def dst(self, dt):
+        if self._isdst(dt):
+            return DSTDIFF
+        else:
+            return ZERO
+
+    def tzname(self, dt):
+        return time.tzname[self._isdst(dt)]
+
+    def _isdst(self, dt):
+        tt = (dt.year, dt.month, dt.day,
+              dt.hour, dt.minute, dt.second,
+              dt.weekday(), 0, -1)
+        stamp = time.mktime(tt)
+        tt = time.localtime(stamp)
+        return tt.tm_isdst > 0
+
+
 class FileLogObserver:
     """Log observer that writes to a file-like object.
 
     @ivar timeFormat: Format string passed to strftime()
     """
     timeFormat = "%Y/%m/%d %H:%M %Z"
+    tzinfo = LocalTimezone()
 
     def __init__(self, f):
         self.write = f.write
         self.flush = f.flush
+        self.encoding = f.encoding
 
     def emit(self, eventDict):
         edm = eventDict['message']
@@ -272,7 +315,16 @@
         else:
             text = ' '.join(map(str, edm))
 
-        timeStr = time.strftime(self.timeFormat, time.localtime(eventDict['time']))
+        dt = datetime.datetime.fromtimestamp(eventDict['time'], self.tzinfo)
+        timeStr = dt.strftime(self.timeFormat)
+        if sys.platform == 'win32' and '%Z' in self.timeFormat:
+            # Under non-english versions of Windows %Z makes strftime
+            # return timezone name in local language and in local encoding,
+            # which may be different from terminal encoding (under Russian 
+            # Windows the former is cp1251, the latter - cp866).
+            localeEnc = locale.getpreferredencoding()
+            timeStr = unicode(timeStr, localeEnc).encode(self.encoding) 
+
         fmtDict = {'system': eventDict['system'], 'text': text.replace("\n", "\n\t")}
         msgStr = " [%(system)s] %(text)s\n" % fmtDict
 
