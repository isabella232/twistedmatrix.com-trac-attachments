Index: irc.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/irc.py,v
retrieving revision 1.94
diff -u -r1.94 irc.py
--- irc.py	25 Sep 2003 21:38:55 -0000	1.94
+++ irc.py	18 Oct 2003 09:22:56 -0000
@@ -45,7 +45,7 @@
 
 __version__ = '$Revision: 1.94 $'[11:-2]
 
-from twisted.internet import reactor, protocol
+from twisted.internet import reactor, protocol, defer
 from twisted.persisted import styles
 from twisted.protocols import basic
 from twisted.python import log, reflect, text
@@ -386,9 +386,6 @@
 
     sourceURL = "http://twistedmatrix.com/downloads/"
 
-    dcc_destdir = '.'
-    dcc_sessions = None
-
     # If this is false, no attempt will be made to identify
     # ourself to the server.
     performLogin = 1
@@ -399,9 +396,11 @@
 
     delimiter = '\n' # '\r\n' will also work (see dataReceived)
 
+    dccReceiver = None
+    dccSender = None
+    
     __pychecker__ = 'unusednames=params,prefix,channel'
-
-
+        
     def sendLine(self, line):
         if self.lineRate is None:
             basic.LineReceiver.sendLine(self, lowQuote(line) + '\r')
@@ -1085,8 +1084,6 @@
         dcctype = data.split(None, 1)[0].upper()
         handler = getattr(self, "dcc_" + dcctype, None)
         if handler:
-            if self.dcc_sessions is None:
-                self.dcc_sessions = []
             data = data[len(dcctype)+1:]
             handler(user, channel, data)
         else:
@@ -1098,6 +1095,9 @@
                                % (user, dcctype))
 
     def dcc_SEND(self, user, channel, data):
+        if not self.dccReceiver:
+            return
+        
         # Use splitQuoted for those who send files with spaces in the names.
         data = text.splitQuoted(data)
         if len(data) < 3:
@@ -1118,10 +1118,12 @@
             except ValueError:
                 pass
 
-        # XXX Should we bother passing this data?
-        self.dccDoSend(user, address, port, filename, size, data)
+        self.dccReceiver.gotDCC_SEND(self, user, address, port, filename, size)
 
     def dcc_ACCEPT(self, user, channel, data):
+        if not self.dccReceiver:
+            return
+
         data = text.splitQuoted(data)
         if len(data) < 3:
             raise IRCBadMessage, "malformed DCC SEND ACCEPT request: %r" % (data,)
@@ -1132,7 +1134,7 @@
         except ValueError:
             return
 
-        self.dccDoAcceptResume(user, filename, port, resumePos)
+        self.dccReceiver.gotDCC_ACCEPT(self, user, filename, port, resumePos)
 
     def dcc_RESUME(self, user, channel, data):
         data = text.splitQuoted(data)
@@ -1164,28 +1166,12 @@
     ### The dccDo methods are the slightly higher-level siblings of
     ### common dcc_ methods; the arguments have been parsed for them.
 
-    def dccDoSend(self, user, address, port, fileName, size, data):
-        """Called when I receive a DCC SEND offer from a client.
-
-        By default, I do nothing here."""
-        ## filename = path.basename(arg)
-        ## protocol = DccFileReceive(filename, size,
-        ##                           (user,channel,data),self.dcc_destdir)
-        ## reactor.clientTCP(address, port, protocol)
-        ## self.dcc_sessions.append(protocol)
-        pass
-
     def dccDoResume(self, user, file, port, resumePos):
         """Called when a client is trying to resume an offered file
         via DCC send.  It should be either replied to with a DCC
         ACCEPT or ignored (default)."""
         pass
 
-    def dccDoAcceptResume(self, user, file, port, resumePos):
-        """Called when a client has verified and accepted a DCC resume
-        request made by us.  By default it will do nothing."""
-        pass
-
     def dccDoChat(self, user, channel, address, port, data):
         pass
         #factory = DccChatFactory(self, queryData=(user, channel, data))
@@ -1312,122 +1298,193 @@
 
     def __getstate__(self):
         dct = self.__dict__.copy()
-        dct['dcc_sessions'] = None
         dct['_pings'] = None
         return dct
 
+class DccFileWriter(protocol.Protocol, styles.Ephemeral):
+    def __init__(self, factory):
+        self.factory = factory
+        self.file_obj = factory.file_obj
+        self.deferred = factory.deferred
+        self.bytesReceived = factory.resumePos
+        self.proposedSize = factory.proposedSize
+        
+    def dataReceived(self, data):
+        self.bytesReceived += len(data)
+        self.transport.write(struct.pack('!i', self.bytesReceived)) #acknowledge
 
-def dccParseAddress(address):
-    if '.' in address:
-        pass
-    else:
         try:
-            address = long(address)
-        except ValueError:
-            raise IRCBadMessage,\
-                  "Indecipherable address %r" % (address,)
+            self.file_obj.write(data)
+        except: # abort transfer
+            self.transport.loseConnection()
+
+    def connectionLost(self, reason):
+        self.file_obj.flush()
+        self.file_obj.close()
+        if self.bytesReceived == self.proposedSize:
+            self.deferred.callback(self.factory)
         else:
-            address = (
-                (address >> 24) & 0xFF,
-                (address >> 16) & 0xFF,
-                (address >> 8) & 0xFF,
-                address & 0xFF,
-                )
-            address = '.'.join(map(str,address))
-    return address
+            self.deferred.errback(reason)
 
 
-class DccFileReceiveBasic(protocol.Protocol, styles.Ephemeral):
-    """Bare protocol to receive a Direct Client Connection SEND stream.
+class IncomingDccFile(protocol.ClientFactory):
+    accepted = False
+    resume_overwrite = False
 
-    This does enough to keep the other guy talking, but you'll want to
-    extend my dataReceived method to *do* something with the data I get.
-    """
+    deferred = None
+    protocol = DccFileWriter
+    file_obj = None
+
+    resumePos = 0 # default - change later if resuming.
+    
+    def __init__(self, ircClient, default_destdir, user,
+                 address, port, default_filename, size):
+        self.ircClient = ircClient
+        self.default_destdir = default_destdir
+        self.user = user
+        self.address = address
+        self.port = port
+        self.default_filename = default_filename
+        self.proposedSize = size
+
+        self.deferred = defer.Deferred()
+        
+    def accept(self, destdir=None, filename=None, resume_overwrite=False):
+        """
+        We will attempt to open the destination path immediately.
+        If that fails, either IOError or DccDestFileExists will be raised.
+        If successful, a Deferred will be returned.  It will fire when the file is saved,
+        or errback is something funky happens along the way.
+
+        resume_overwrite may be False, \"resume\", or \"overwrite\"
+        """
+        if self.accepted:
+            raise "accept() already called successfully!"
+
+        if destdir == None:
+            destdir = self.default_destdir
+        if filename == None:
+            filename = self.default_filename
+
+        if destdir.endswith(path.sep):
+            destpath = destdir + filename
+        else:
+            destpath = destdir + path.sep + filename
+            
+        # see if the path exists
+        if path.exists(destpath):
+            if not resume_overwrite: # it's there, but we can't resume or overwrite
+                raise DccFileExists()
+
+        if resume_overwrite == 'resume': # open for appending
+            self.file_obj = file(destpath, 'a+b')
+            # now we have to ask to resume before we can connect
+            self.resumePos = fileSize(self.file_obj)
+            self.ircClient.ctcpMakeQuery(self.user.split('!')[0], [
+                ('DCC', ['RESUME', self.default_filename, self.port, self.resumePos])])
+            
+        else: # otherwise open for writing (and possibly truncate)
+            self.file_obj = file(destpath, 'wb')
+            # we can connect right now, since we aren't asking for a resume
+            self._makeConnection()
 
-    bytesReceived = 0
+        self.accepted = True
+        self.destdir = destdir
+        self.filename = filename
+        self.destpath = destpath
+        
+        return self.deferred
 
-    def __init__(self, resumeOffset=0):
-        self.bytesReceived = resumeOffset
-        self.resume = (resumeOffset != 0)
+    def reject(self):
+        """Reject this transfer before it has begun."""
+        if self.accepted:
+            raise "Can't call reject() after accept() was called successfully!"
 
-    def dataReceived(self, data):
-        """Called when data is received.
+        self.deferred.errback(None)
 
-        Warning: This just acknowledges to the remote host that the
-        data has been received; it doesn't *do* anything with the
-        data, so you'll want to override this.
-        """
-        self.bytesReceived = self.bytesReceived + len(data)
-        self.transport.write(struct.pack('!i', self.bytesReceived))
+    def abort(self):
+        """Abort after we've called accept() successfully."""
+        if not self.accepted:
+            raise "Can't call abort() unless you've already called accept() successfully!"
+        
+        self.protocol_instance.transport.loseConnection(connDone=DccAborted())
 
+    def _resumeRequestWasAccepted(self): # have to get this before we accept a transfer where we asked to resume
+        self._makeConnection() 
+   
+    def _makeConnection(self):
+        reactor.connectTCP(self.address, self.port, self)
+        
+    def buildProtocol(self, addr):
+        p = self.protocol(self)
+        return p
+        
 
-class DccSendProtocol(protocol.Protocol, styles.Ephemeral):
-    """Protocol for an outgoing Direct Client Connection SEND.
+class DccReceiver:
+    """
+    Manages each DCC SEND request that each associated IRCClient receives.
     """
 
-    blocksize = 1024
-    file = None
-    bytesSent = 0
-    completed = 0
-    connected = 0
-
-    def __init__(self, file):
-        if type(file) is types.StringType:
-            self.file = open(file, 'r')
+    incomingFileClass = IncomingDccFile
+    default_destdir = "."
 
-    def connectionMade(self):
-        self.connected = 1
-        self.sendBlock()
+    def __init__(self):
+        self.incomingFiles = [] #they get removed from here once their deferred fires
+        
+    def gotIncomingFile(self, incomingFile):
+        """Implement this method with your app-specific logic.
+        By default we reject all incoming files."""
+        incomingFile.reject()
+    
+    def gotDCC_SEND(self, ircClient, user, address, port, filename, size):
+        incomingFile = self.incomingFileClass(ircClient, self.default_destdir, user, address, port, filename, size)
+        self.incomingFiles.append(incomingFile)
+        incomingFile.deferred.addBoth(self._cbIncomingFileDone, incomingFile)
+        self.gotIncomingFile(incomingFile)
+        
+    def gotDCC_ACCEPT(self, ircClient, user, filename, port, resumePos):
+        #lets find the incomingFile that was waiting for this
+        for f in self.incomingFiles:
+            if f.ircClient == ircClient and f.user == user and f.port == port:
+                f._resumeRequestWasAccepted()
+                return
+        log.msg("Odd, we got a DCC ACCEPT, but couldn't find a matching incomingFile")
 
-    def dataReceived(self, data):
-        # XXX: Do we need to check to see if len(data) != fmtsize?
+    def _cbIncomingFileDone(self, arg, incomingFile):
+        self.incomingFiles.remove(incomingFile)
+        return arg
 
-        bytesShesGot = struct.unpack("!I", data)
-        if bytesShesGot < self.bytesSent:
-            # Wait for her.
-            # XXX? Add some checks to see if we've stalled out?
-            return
-        elif bytesShesGot > self.bytesSent:
-            # self.transport.log("DCC SEND %s: She says she has %d bytes "
-            #                    "but I've only sent %d.  I'm stopping "
-            #                    "this screwy transfer."
-            #                    % (self.file,
-            #                       bytesShesGot, self.bytesSent))
-            self.transport.loseConnection()
-            return
+class DccFileExists(Exception):
+    def __str__(self):
+        return "Destination file already exists, and we were told not to overwrite or resume"
 
-        self.sendBlock()
+class DccAborted(Exception):
+    def __str__(self):
+        return "abort() was called on this IncomingDccFile instance."
 
-    def sendBlock(self):
-        block = self.file.read(self.blocksize)
-        if block:
-            self.transport.write(block)
-            self.bytesSent = self.bytesSent + len(block)
+        
+def dccParseAddress(address):
+    if '.' in address:
+        pass
+    else:
+        try:
+            address = long(address)
+        except ValueError:
+            raise IRCBadMessage,\
+                  "Indecipherable address %r" % (address,)
         else:
-            # Nothing more to send, transfer complete.
-            self.transport.loseConnection()
-            self.completed = 1
-
-    def connectionLost(self, reason):
-        self.connected = 0
-        if hasattr(self.file, "close"):
-            self.file.close()
-
-
-class DccSendFactory(protocol.Factory):
-    protocol = DccSendProtocol
-    def __init__(self, file):
-        self.file = file
-
-    def buildProtocol(self, connection):
-        p = self.protocol(self.file)
-        p.factory = self
-        return p
+            address = (
+                (address >> 24) & 0xFF,
+                (address >> 16) & 0xFF,
+                (address >> 8) & 0xFF,
+                address & 0xFF,
+                )
+            address = '.'.join(map(str,address))
+    return address
 
 
 def fileSize(file):
-    """I'll try my damndest to determine the size of this file object.
-    """
+    """I'll try my damndest to determine the size of this file object."""
     size = None
     if hasattr(file, "fileno"):
         fileno = file.fileno()
@@ -1450,17 +1507,18 @@
     if hasattr(file, "seek") and hasattr(file, "tell"):
         try:
             try:
+                cur_pos = file.tell()
                 file.seek(0, 2)
                 size = file.tell()
             finally:
-                file.seek(0, 0)
+                file.seek(cur_pos, 0)
         except:
             pass
         else:
             return size
-
     return size
 
+
 class DccChat(basic.LineReceiver, styles.Ephemeral):
     """Direct Client Connection protocol type CHAT.
 
@@ -1518,6 +1576,7 @@
 class DccChatFactory(protocol.ClientFactory):
     protocol = DccChat
     noisy = 0
+
     def __init__(self, client, queryData):
         self.client = client
         self.queryData = queryData
@@ -1582,136 +1641,6 @@
         dcc_text = orig_data
 
     return dcc_text
-
-
-class DccFileReceive(DccFileReceiveBasic):
-    """Higher-level coverage for getting a file from DCC SEND.
-
-    I allow you to change the file's name and destination directory.
-    I won't overwrite an existing file unless I've been told it's okay
-    to do so. If passed the resumeOffset keyword argument I will attempt to
-    resume the file from that amount of bytes.
-
-    XXX: I need to let the client know when I am finished.
-    XXX: I need to decide how to keep a progress indicator updated.
-    XXX: Client needs a way to tell me \"Do not finish until I say so.\"
-    XXX: I need to make sure the client understands if the file cannot be written.
-    """
-
-    filename = 'dcc'
-    fileSize = -1
-    destDir = '.'
-    overwrite = 0
-    fromUser = None
-    queryData = None
-
-    def __init__(self, filename, fileSize=-1, queryData=None,
-                 destDir='.', resumeOffset=0):
-        DccFileReceiveBasic.__init__(self, resumeOffset=resumeOffset)
-        self.filename = filename
-        self.destDir = destDir
-        self.fileSize = fileSize
-
-        if queryData:
-            self.queryData = queryData
-            self.fromUser = self.queryData[0]
-
-    def set_directory(self, directory):
-        """Set the directory where the downloaded file will be placed.
-
-        May raise OSError if the supplied directory path is not suitable.
-        """
-        if not path.exists(directory):
-            raise OSError(errno.ENOENT, "You see no directory there.",
-                          directory)
-        if not path.isdir(directory):
-            raise OSError(errno.ENOTDIR, "You cannot put a file into "
-                          "something which is not a directory.",
-                          directory)
-        if not os.access(directory, os.X_OK | os.W_OK):
-            raise OSError(errno.EACCES,
-                          "This directory is too hard to write in to.",
-                          directory)
-        self.destDir = directory
-
-    def set_filename(self, filename):
-        """Change the name of the file being transferred.
-
-        This replaces the file name provided by the sender.
-        """
-        self.filename = filename
-
-    def set_overwrite(self, boolean):
-        """May I overwrite existing files?
-        """
-        self.overwrite = boolean
-
-
-    # Protocol-level methods.
-
-    def connectionMade(self):
-        dst = path.abspath(path.join(self.destDir,self.filename))
-        exists = path.exists(dst)
-        if self.resume and exists:
-            # I have been told I want to resume, and a file already
-            # exists - Here we go
-            self.file = open(dst, 'ab')
-            log.msg("Attempting to resume %s - starting from %d bytes" %
-                    (self.file, self.file.tell()))
-        elif self.overwrite or not exists:
-            self.file = open(dst, 'wb')
-        else:
-            raise OSError(errno.EEXIST,
-                          "There's a file in the way.  "
-                          "Perhaps that's why you cannot open it.",
-                          dst)
-
-    def dataReceived(self, data):
-        self.file.write(data)
-        DccFileReceiveBasic.dataReceived(self, data)
-
-        # XXX: update a progress indicator here?
-
-    def connectionLost(self, reason):
-        """When the connection is lost, I close the file.
-        """
-        self.connected = 0
-        logmsg = ("%s closed." % (self,))
-        if self.fileSize > 0:
-            logmsg = ("%s  %d/%d bytes received"
-                      % (logmsg, self.bytesReceived, self.fileSize))
-            if self.bytesReceived == self.fileSize:
-                pass # Hooray!
-            elif self.bytesReceived < self.fileSize:
-                logmsg = ("%s (Warning: %d bytes short)"
-                          % (logmsg, self.fileSize - self.bytesReceived))
-            else:
-                logmsg = ("%s (file larger than expected)"
-                          % (logmsg,))
-        else:
-            logmsg = ("%s  %d bytes received"
-                      % (logmsg, self.bytesReceived))
-
-        if hasattr(self, 'file'):
-            logmsg = "%s and written to %s.\n" % (logmsg, self.file.name)
-            if hasattr(self.file, 'close'): self.file.close()
-
-        # self.transport.log(logmsg)
-
-    def __str__(self):
-        if not self.connected:
-            return "<Unconnected DccFileReceive object at %x>" % (id(self),)
-        from_ = self.transport.getPeer()
-        if self.fromUser:
-            from_ = "%s (%s)" % (self.fromUser, from_)
-
-        s = ("DCC transfer of '%s' from %s" % (self.filename, from_))
-        return s
-
-    def __repr__(self):
-        s = ("<%s at %x: GET %s>"
-             % (self.__class__, id(self), self.filename))
-        return s
 
 
 # CTCP constants and helper functions
