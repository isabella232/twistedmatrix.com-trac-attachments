Index: twisted/test/test_ftp.py
===================================================================
--- twisted/test/test_ftp.py	(revision 35770)
+++ twisted/test/test_ftp.py	(working copy)
@@ -205,7 +205,8 @@
 
 class BasicFTPServerTestCase(FTPServerTestCase):
     def testNotLoggedInReply(self):
-        """When not logged in, most commands other than USER and PASS should
+        """
+        When not logged in, most commands other than USER and PASS should
         get NOT_LOGGED_IN errors, but some can be called before USER and PASS.
         """
         loginRequiredCommandList = ['CDUP', 'CWD', 'LIST', 'MODE', 'PASV',
@@ -240,20 +241,26 @@
         return defer.DeferredList(deferreds, fireOnOneErrback=True)
 
     def testPASSBeforeUSER(self):
-        """Issuing PASS before USER should give an error."""
+        """
+        Issuing PASS before USER should give an error.
+        """
         return self.assertCommandFailed(
             'PASS foo',
             ["503 Incorrect sequence of commands: "
              "USER required before PASS"])
 
     def testNoParamsForUSER(self):
-        """Issuing USER without a username is a syntax error."""
+        """
+        Issuing USER without a username is a syntax error.
+        """
         return self.assertCommandFailed(
             'USER',
             ['500 Syntax error: USER requires an argument.'])
 
     def testNoParamsForPASS(self):
-        """Issuing PASS without a password is a syntax error."""
+        """
+        Issuing PASS without a password is a syntax error.
+        """
         d = self.client.queueStringCommand('USER foo')
         return self.assertCommandFailed(
             'PASS',
@@ -264,7 +271,9 @@
         return self._anonymousLogin()
 
     def testQuit(self):
-        """Issuing QUIT should return a 221 message."""
+        """
+        Issuing QUIT should return a 221 message.
+        """
         d = self._anonymousLogin()
         return self.assertCommandResponse(
             'QUIT',
@@ -476,6 +485,11 @@
         self.assertEqual(portRange, protocol.wrappedProtocol.passivePortRange)
 
     def testFEAT(self):
+        """
+        When the server receives 'FEAT', it should report the list of supported
+        features. (Additionally, ensure that the server reports various
+        particular features that are supported by all Twisted FTP servers.)
+        """
         d = self.client.queueStringCommand('FEAT')
         def gotResponse(responseLines):
             self.assertEqual('211-Features:', responseLines[0])
@@ -487,6 +501,10 @@
         return d.addCallback(gotResponse)
 
     def testOPTS(self):
+        """
+        When the server receives 'OPTS something', it should report
+        that the FTP server does not support the option called 'something'.
+        """
         d = self._anonymousLogin()
         self.assertCommandFailed(
             'OPTS something',
