Index: doc/web/howto/using-twistedweb.xhtml
===================================================================
--- doc/web/howto/using-twistedweb.xhtml	(revision 25765)
+++ doc/web/howto/using-twistedweb.xhtml	(working copy)
@@ -551,6 +551,47 @@
 resource.indexNames = ['index.pl']
 </pre>
 
+<h3>Serving WSGI Applications</h3>
+
+<p><a href="http://wsgi.org/wsgi/">WSGI</a> is the Web Server Gateway Interface. It is a specification for web
+servers and application servers to communicate with Python web applications.
+Twisted provides support for using WSGI applications as resources in
+<code>twisted.web.wsgi.WSGIResource</code>.</p>
+
+<p>Here is an example of a WSGI application being served as the root resource
+for a site:</p>
+
+<pre language="python">
+from twisted.web import server
+from twisted.web.wsgi import WSGIResource
+from twisted.python.threadpool import ThreadPool
+from twisted.internet import reactor
+
+# A toy WSGI application for this example
+def basic_wsgi_app(environ, start_response):
+    """A very basic WSGI application"""
+    start_response('200 OK', [('Content-type','text/plain')])
+    return ['Hello World!']
+
+# Create and start a thread pool,
+# ensuring that it will be stopped when the reactor shuts down
+thread_pool = ThreadPool()
+thread_pool.start()
+reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)
+
+# Create the WSGI resource
+wsgi_app_as_resource = WSGIResource(reactor, thread_pool, basic_wsgi_app)
+
+site = server.Site(wsgi_app_as_resource)
+reactor.listenTCP(8080, site)
+reactor.run()
+</pre>
+
+<p>Because of the non asynchronous nature of WSGI, each application call (for
+each request) is called within a thread, and the result is written back to the
+web server. For this, a <code>twisted.python.threadpool.ThreadPool</code>
+instance is used.</p>
+
 <h3>Using VHostMonster</h3>
 
 <p>It is common to use one server (for example, Apache) on a site with multiple
