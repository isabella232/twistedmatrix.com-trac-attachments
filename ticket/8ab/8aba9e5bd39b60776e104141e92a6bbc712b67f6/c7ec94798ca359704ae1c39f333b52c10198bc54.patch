diff --git a/twisted/words/im/ircsupport.py b/twisted/words/im/ircsupport.py
index 1feddeb..2e359ec 100644
--- a/twisted/words/im/ircsupport.py
+++ b/twisted/words/im/ircsupport.py
@@ -37,7 +37,7 @@ class IRCPerson(basesupport.AbstractPerson):
     def sendMessage(self, text, meta=None):
         if self.account.client is None:
             raise locals.OfflineError
-        for line in string.split(text, '\n'):
+        for line in text.split('\n'):
             if meta and meta.get("style", None) == "emote":
                 self.account.client.ctcpMakeQuery(self.name,[('ACTION', line)])
             else:
@@ -72,7 +72,7 @@ class IRCGroup(basesupport.AbstractGroup):
             self.account.client.me(self.name,text)
             return succeed(text)
         #standard shmandard, clients don't support plain escaped newlines!
-        for line in string.split(text, '\n'):
+        for line in text.split('\n'):
             self.account.client.say(self.name, line)
         return succeed(text)
 
@@ -93,7 +93,7 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
         self._topics={}
 
     def getGroupConversation(self, name, hide=0):
-        name=string.lower(name)
+        name=name.lower()
         return self.chat.getGroupConversation(self.chat.getGroup(name, self),
                                               stayHidden=hide)
 
@@ -139,7 +139,7 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
     def privmsg(self, username, channel, message, metadata=None):
         if metadata is None:
             metadata = {}
-        username=string.split(username,'!',1)[0]
+        username=username.split('!', 1)[0]
         if username==self.name: return
         if channel[0]=='#':
             group=channel[1:]
@@ -148,7 +148,7 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
         self.chat.getConversation(self.getPerson(username)).showMessage(message, metadata)
 
     def action(self,username,channel,emote):
-        username=string.split(username,'!',1)[0]
+        username=username.split('!', 1)[0]
         if username==self.name: return
         meta={'style':'emote'}
         if channel[0]=='#':
@@ -163,8 +163,8 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
         >> NAMES #bnl
         << :Arlington.VA.US.Undernet.Org 353 z3p = #bnl :pSwede Dan-- SkOyg AG
         """
-        group=string.lower(params[2][1:])
-        users=string.split(params[3])
+        group=params[2][1:].lower()
+        users=params[3].split()
         for ui in range(len(users)):
             while users[ui][0] in ["@","+"]: # channel modes
                 users[ui]=users[ui][1:]
@@ -179,8 +179,8 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
 
     def irc_RPL_ENDOFNAMES(self,prefix,params):
         group=params[1][1:]
-        self.getGroupConversation(group).setGroupMembers(self._namreplies[string.lower(group)])
-        del self._namreplies[string.lower(group)]
+        self.getGroupConversation(group).setGroupMembers(self._namreplies[group.lower()])
+        del self._namreplies[group.lower()]
 
     def irc_RPL_TOPIC(self,prefix,params):
         self._topics[params[1][1:]]=params[2]
@@ -191,14 +191,14 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
         del self._topics[group]
 
     def irc_TOPIC(self,prefix,params):
-        nickname = string.split(prefix,"!")[0]
+        nickname = prefix.split("!")[0]
         group = params[0][1:]
         topic = params[1]
         self.getGroupConversation(group).setTopic(topic,nickname)
 
     def irc_JOIN(self,prefix,params):
-        nickname=string.split(prefix,"!")[0]
-        group=string.lower(params[0][1:])
+        nickname=prefix.split("!")[0]
+        group=params[0][1:].lower()
         if nickname!=self.nickname:
             try:
                 self._ingroups[nickname].append(group)
@@ -207,22 +207,22 @@ class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
             self.getGroupConversation(group).memberJoined(nickname)
 
     def irc_PART(self,prefix,params):
-        nickname=string.split(prefix,"!")[0]
-        group=string.lower(params[0][1:])
+        nickname=prefix.split("!")[0]
+        group=params[0][1:].lower()
         if nickname!=self.nickname:
             if group in self._ingroups[nickname]:
                 self._ingroups[nickname].remove(group)
                 self.getGroupConversation(group).memberLeft(nickname)
 
     def irc_QUIT(self,prefix,params):
-        nickname=string.split(prefix,"!")[0]
+        nickname=prefix.split("!")[0]
         if self._ingroups.has_key(nickname):
             for group in self._ingroups[nickname]:
                 self.getGroupConversation(group).memberLeft(nickname)
             self._ingroups[nickname]=[]
 
     def irc_NICK(self, prefix, params):
-        fromNick = string.split(prefix, "!")[0]
+        fromNick = prefix.split("!")[0]
         toNick = params[0]
         if not self._ingroups.has_key(fromNick):
             return
@@ -250,7 +250,7 @@ class IRCAccount(basesupport.AbstractAccount):
                  channels=''):
         basesupport.AbstractAccount.__init__(self, accountName, autoLogin,
                                              username, password, host, port)
-        self.channels = map(string.strip,string.split(channels,','))
+        self.channels = map(str.strip, channels.split(','))
         if self.channels == ['']:
             self.channels = []
 
diff --git a/twisted/words/protocols/irc.py b/twisted/words/protocols/irc.py
index 2f0c1ed..99724c8 100644
--- a/twisted/words/protocols/irc.py
+++ b/twisted/words/protocols/irc.py
@@ -272,7 +272,7 @@ class IRC(protocol.Protocol):
             raise ValueError, "Somebody screwed up, 'cuz this doesn't" \
                   " look like a command to me: %s" % command
 
-        line = string.join([command] + list(parameter_list))
+        line = " ".join([command] + list(parameter_list))
         if prefix.has_key('prefix'):
             line = ":%s %s" % (prefix['prefix'], line)
         self.sendLine(line)
@@ -1635,7 +1635,7 @@ class IRCClient(basic.LineReceiver):
             self._pings = {}
 
         if text is None:
-            chars = string.letters + string.digits + string.punctuation
+            chars = string.ascii_letters + string.digits + string.punctuation
             key = ''.join([random.choice(chars) for i in range(12)])
         else:
             key = str(text)
@@ -1672,7 +1672,7 @@ class IRCClient(basic.LineReceiver):
         if not (size is None):
             args.append(size)
 
-        args = string.join(args, ' ')
+        args = ' '.join(args)
 
         self.ctcpMakeQuery(user, [('DCC', args)])
 
@@ -1747,7 +1747,7 @@ class IRCClient(basic.LineReceiver):
         """
         Called when a user joins a channel.
         """
-        nick = string.split(prefix,'!')[0]
+        nick = prefix.split('!')[0]
         channel = params[-1]
         if nick == self.nickname:
             self.joined(channel)
@@ -1758,7 +1758,7 @@ class IRCClient(basic.LineReceiver):
         """
         Called when a user leaves a channel.
         """
-        nick = string.split(prefix,'!')[0]
+        nick = prefix.split('!')[0]
         channel = params[0]
         if nick == self.nickname:
             self.left(channel)
@@ -1769,7 +1769,7 @@ class IRCClient(basic.LineReceiver):
         """
         Called when a user has quit.
         """
-        nick = string.split(prefix,'!')[0]
+        nick = prefix.split('!')[0]
         self.userQuit(nick, params[0])
 
 
@@ -1828,7 +1828,7 @@ class IRCClient(basic.LineReceiver):
             if not m['normal']:
                 return
 
-            message = string.join(m['normal'], ' ')
+            message = ' '.join(m['normal'])
 
         self.privmsg(user, channel, message)
 
@@ -1848,7 +1848,7 @@ class IRCClient(basic.LineReceiver):
             if not m['normal']:
                 return
 
-            message = string.join(m['normal'], ' ')
+            message = ' '.join(m['normal'])
 
         self.noticed(user, channel, message)
 
@@ -1856,7 +1856,7 @@ class IRCClient(basic.LineReceiver):
         """
         Called when a user changes their nickname.
         """
-        nick = string.split(prefix,'!', 1)[0]
+        nick = prefix.split('!', 1)[0]
         if nick == self.nickname:
             self.nickChanged(params[0])
         else:
@@ -1866,11 +1866,11 @@ class IRCClient(basic.LineReceiver):
         """
         Called when a user is kicked from a channel.
         """
-        kicker = string.split(prefix,'!')[0]
+        kicker = prefix.split('!')[0]
         channel = params[0]
         kicked = params[1]
         message = params[-1]
-        if string.lower(kicked) == string.lower(self.nickname):
+        if kicked.lower() == self.nickname.lower():
             # Yikes!
             self.kickedFrom(channel, kicker, message)
         else:
@@ -1880,7 +1880,7 @@ class IRCClient(basic.LineReceiver):
         """
         Someone in the channel set the topic.
         """
-        user = string.split(prefix, '!')[0]
+        user = prefix.split('!')[0]
         channel = params[0]
         newtopic = params[1]
         self.topicUpdated(user, channel, newtopic)
@@ -1890,13 +1890,13 @@ class IRCClient(basic.LineReceiver):
         Called when the topic for a channel is initially reported or when it
         subsequently changes.
         """
-        user = string.split(prefix, '!')[0]
+        user = prefix.split('!')[0]
         channel = params[1]
         newtopic = params[2]
         self.topicUpdated(user, channel, newtopic)
 
     def irc_RPL_NOTOPIC(self, prefix, params):
-        user = string.split(prefix, '!')[0]
+        user = prefix.split('!')[0]
         channel = params[1]
         newtopic = ""
         self.topicUpdated(user, channel, newtopic)
@@ -1986,7 +1986,7 @@ class IRCClient(basic.LineReceiver):
         self.action(user, channel, data)
 
     def ctcpQuery_PING(self, user, channel, data):
-        nick = string.split(user,"!")[0]
+        nick = user.split("!")[0]
         self.ctcpMakeReply(nick, [("PING", data)])
 
     def ctcpQuery_FINGER(self, user, channel, data):
@@ -2001,7 +2001,7 @@ class IRCClient(basic.LineReceiver):
         else:
             reply = str(self.fingerReply)
 
-        nick = string.split(user,"!")[0]
+        nick = user.split("!")[0]
         self.ctcpMakeReply(nick, [('FINGER', reply)])
 
     def ctcpQuery_VERSION(self, user, channel, data):
@@ -2010,7 +2010,7 @@ class IRCClient(basic.LineReceiver):
                                % (user, data))
 
         if self.versionName:
-            nick = string.split(user,"!")[0]
+            nick = user.split("!")[0]
             self.ctcpMakeReply(nick, [('VERSION', '%s:%s:%s' %
                                        (self.versionName,
                                         self.versionNum or '',
@@ -2021,7 +2021,7 @@ class IRCClient(basic.LineReceiver):
             self.quirkyMessage("Why did %s send '%s' with a SOURCE query?"
                                % (user, data))
         if self.sourceURL:
-            nick = string.split(user,"!")[0]
+            nick = user.split("!")[0]
             # The CTCP document (Zeuge, Rollo, Mesander 1994) says that SOURCE
             # replies should be responded to with the location of an anonymous
             # FTP server in host:directory:file format.  I'm taking the liberty
@@ -2034,7 +2034,7 @@ class IRCClient(basic.LineReceiver):
             self.quirkyMessage("Why did %s send '%s' with a USERINFO query?"
                                % (user, data))
         if self.userinfo:
-            nick = string.split(user,"!")[0]
+            nick = user.split("!")[0]
             self.ctcpMakeReply(nick, [('USERINFO', self.userinfo)])
 
     def ctcpQuery_CLIENTINFO(self, user, channel, data):
@@ -2045,7 +2045,7 @@ class IRCClient(basic.LineReceiver):
         the usage of that tag.
         """
 
-        nick = string.split(user,"!")[0]
+        nick = user.split("!")[0]
         if not data:
             # XXX: prefixedMethodNames gets methods from my *class*,
             # but it's entirely possible that this *instance* has more
@@ -2054,9 +2054,9 @@ class IRCClient(basic.LineReceiver):
                                                 'ctcpQuery_')
 
             self.ctcpMakeReply(nick, [('CLIENTINFO',
-                                       string.join(names, ' '))])
+                                       ' '.join(names))])
         else:
-            args = string.split(data)
+            args = data.split()
             method = getattr(self, 'ctcpQuery_%s' % (args[0],), None)
             if not method:
                 self.ctcpMakeReply(nick, [('ERRMSG',
@@ -2071,7 +2071,7 @@ class IRCClient(basic.LineReceiver):
     def ctcpQuery_ERRMSG(self, user, channel, data):
         # Yeah, this seems strange, but that's what the spec says to do
         # when faced with an ERRMSG query (not a reply).
-        nick = string.split(user,"!")[0]
+        nick = user.split("!")[0]
         self.ctcpMakeReply(nick, [('ERRMSG',
                                    "%s :No error has occoured." % data)])
 
@@ -2079,7 +2079,7 @@ class IRCClient(basic.LineReceiver):
         if data is not None:
             self.quirkyMessage("Why did %s send '%s' with a TIME query?"
                                % (user, data))
-        nick = string.split(user,"!")[0]
+        nick = user.split("!")[0]
         self.ctcpMakeReply(nick,
                            [('TIME', ':%s' %
                              time.asctime(time.localtime(time.time())))])
@@ -2097,7 +2097,7 @@ class IRCClient(basic.LineReceiver):
             data = data[len(dcctype)+1:]
             handler(user, channel, data)
         else:
-            nick = string.split(user,"!")[0]
+            nick = user.split("!")[0]
             self.ctcpMakeReply(nick, [('ERRMSG',
                                        "DCC %s :Unknown DCC type '%s'"
                                        % (data, dcctype))])
@@ -2207,7 +2207,7 @@ class IRCClient(basic.LineReceiver):
     #    raise NotImplementedError
 
     def ctcpUnknownQuery(self, user, channel, tag, data):
-        nick = string.split(user,"!")[0]
+        nick = user.split("!")[0]
         self.ctcpMakeReply(nick, [('ERRMSG',
                                    "%s %s: Unknown query '%s'"
                                    % (tag, data, tag))])
@@ -2275,9 +2275,7 @@ class IRCClient(basic.LineReceiver):
         """When I get a message that's so broken I can't use it.
         """
         log.msg(line)
-        log.msg(string.join(traceback.format_exception(excType,
-                                                        excValue,
-                                                        tb),''))
+        log.msg(''.join(traceback.format_exception(excType, excValue, tb)))
 
     def quirkyMessage(self, s):
         """This is called when I receive a message which is peculiar,
@@ -2542,7 +2540,7 @@ class DccChat(basic.LineReceiver, styles.Ephemeral):
 
     def dataReceived(self, data):
         self.buffer = self.buffer + data
-        lines = string.split(self.buffer, LF)
+        lines = self.buffer.split(LF)
         # Put the (possibly empty) element after the last LF back in the
         # buffer
         self.buffer = lines.pop()
@@ -2581,7 +2579,7 @@ def dccDescribe(data):
     """
 
     orig_data = data
-    data = string.split(data)
+    data = data.split()
     if len(data) < 4:
         return orig_data
 
@@ -2603,7 +2601,7 @@ def dccDescribe(data):
                 )
             # The mapping to 'int' is to get rid of those accursed
             # "L"s which python 1.5.2 puts on the end of longs.
-            address = string.join(map(str,map(int,address)), ".")
+            address = ".".join(map(str,map(int,address)))
 
     if dcctype == 'SEND':
         filename = arg
@@ -2775,7 +2773,7 @@ def ctcpExtract(message):
     retval = {'extended': extended_messages,
               'normal': normal_messages }
 
-    messages = string.split(message, X_DELIM)
+    messages = message.split(X_DELIM)
     odd = 0
 
     # X1 extended data X2 nomal data X3 extended data X4 normal...
@@ -2791,7 +2789,7 @@ def ctcpExtract(message):
 
     extended_messages[:] = map(ctcpDequote, extended_messages)
     for i in xrange(len(extended_messages)):
-        m = string.split(extended_messages[i], SPC, 1)
+        m = extended_messages[i].split(SPC, 1)
         tag = m[0]
         if len(m) > 1:
             data = m[1]
@@ -2822,7 +2820,7 @@ mEscape_re = re.compile('%s.' % (re.escape(M_QUOTE),), re.DOTALL)
 
 def lowQuote(s):
     for c in (M_QUOTE, NUL, NL, CR):
-        s = string.replace(s, c, mQuoteTable[c])
+        s = s.replace(c, mQuoteTable[c])
     return s
 
 def lowDequote(s):
@@ -2852,7 +2850,7 @@ xEscape_re = re.compile('%s.' % (re.escape(X_QUOTE),), re.DOTALL)
 
 def ctcpQuote(s):
     for c in (X_QUOTE, X_DELIM):
-        s = string.replace(s, c, xQuoteTable[c])
+        s = s.replace(c, xQuoteTable[c])
     return s
 
 def ctcpDequote(s):
@@ -2891,7 +2889,7 @@ def ctcpStringify(messages):
         m = "%s%s%s" % (X_DELIM, m, X_DELIM)
         coded_messages.append(m)
 
-    line = string.join(coded_messages, '')
+    line = ''.join(coded_messages)
     return line
 
 
diff --git a/twisted/words/protocols/oscar.py b/twisted/words/protocols/oscar.py
index 81571d4..6baeb07 100644
--- a/twisted/words/protocols/oscar.py
+++ b/twisted/words/protocols/oscar.py
@@ -10,7 +10,6 @@ Maintainer: Paul Swartz
 """
 
 import struct
-import string
 import socket
 import random
 import types
@@ -74,24 +73,24 @@ def encryptPasswordICQ(password):
     return r
 
 def dehtml(text):
-    text=string.replace(text,"<br>","\n")
-    text=string.replace(text,"<BR>","\n")
-    text=string.replace(text,"<Br>","\n") # XXX make this a regexp
-    text=string.replace(text,"<bR>","\n")
+    text=text.replace("<br>","\n")
+    text=text.replace("<BR>","\n")
+    text=text.replace("<Br>","\n") # XXX make this a regexp
+    text=text.replace("<bR>","\n")
     text=re.sub('<.*?>','',text)
-    text=string.replace(text,'&gt;','>')
-    text=string.replace(text,'&lt;','<')
-    text=string.replace(text,'&nbsp;',' ')
-    text=string.replace(text,'&#34;','"')
-    text=string.replace(text,'&amp;','&')
+    text=text.replace('&gt;','>')
+    text=text.replace('&lt;','<')
+    text=text.replace('&nbsp;',' ')
+    text=text.replace('&#34;','"')
+    text=text.replace('&amp;','&')
     return text
 
 def html(text):
-    text=string.replace(text,'"','&#34;')
-    text=string.replace(text,'&','&amp;')
-    text=string.replace(text,'<','&lt;')
-    text=string.replace(text,'>','&gt;')
-    text=string.replace(text,"\n","<br>")
+    text=text.replace('"','&#34;')
+    text=text.replace('&','&amp;')
+    text=text.replace('<','&lt;')
+    text=text.replace('>','&gt;')
+    text=text.replace("\n","<br>")
     return '<html><body bgcolor="white"><font color="black">%s</font></body></html>'%text
 
 class OSCARUser:
@@ -1170,7 +1169,7 @@ class OscarAuthenticator(OscarConnection):
         tlvs=readTLVs(snac[5])
         if tlvs.has_key(6):
             self.cookie=tlvs[6]
-            server,port=string.split(tlvs[5],":")
+            server,port=tlvs[5].split(":")
             d = self.connectToBOS(server, int(port))
             d.addErrback(lambda x: log.msg("Connection Failed! Reason: %s" % x))
             if self.deferred:
