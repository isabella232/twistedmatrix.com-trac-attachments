commit b2f01ca037248994fc99696cc92ca547f3bc0a64
Author: Wolfgang Rohdewald <wolfgang@rohdewald.de>
Date:   Sat Oct 4 00:05:36 2014 +0200

    spread.banana: test coverage goes up from 85% to 100%

diff --git twisted/spread/topfiles/7664.misc twisted/spread/topfiles/7664.misc
new file mode 100644
index 0000000..384bac5
--- /dev/null
+++ twisted/spread/topfiles/7664.misc
@@ -0,0 +1 @@
+test.test_banana is now fully covered by unittests
diff --git twisted/test/test_banana.py twisted/test/test_banana.py
index 7ce5212..0c2b335 100644
--- twisted/test/test_banana.py
+++ twisted/test/test_banana.py
@@ -25,9 +25,9 @@ class BananaTestCase(unittest.TestCase):
 
     encClass = banana.Banana
 
-    def setUp(self):
+    def setUp(self, isClient=True):
         self.io = StringIO.StringIO()
-        self.enc = self.encClass()
+        self.enc = self.encClass(isClient)
         self.enc.makeConnection(protocol.FileWrapper(self.io))
         self.enc._selectDialect("none")
         self.enc.expressionReceived = self.putResult
@@ -64,6 +64,99 @@ class BananaTestCase(unittest.TestCase):
         self.assertRaises(banana.BananaError, self.enc._selectDialect, b'abc')
 
 
+    def test_connectServer(self):
+        """
+        Connect to server: The server returns all supported dialects
+        """
+        self.__callbackCalled = False
+        def serverSendEncoded(s):
+            self.__callbackCalled = True
+            self.assertEqual(s, [b'pb', b'none'])
+        self.setUp(isClient=False)
+        # catch answer from server
+        clientSendEncoded = self.enc.sendEncoded
+        self.enc.sendEncoded = serverSendEncoded
+        self.enc.makeConnection(protocol.FileWrapper(self.io))
+        self.assertTrue(self.__callbackCalled)
+
+
+    def test_noExpressionReceivedHook(self):
+        """
+        A Banana user must override Banana.expresionReceived
+        """
+        # setUp did just that
+        self.assertTrue(self.enc.expressionReceived)
+        self.enc = self.encClass()
+        # now we don't
+        self.assertRaises(NotImplementedError,
+            self.enc.expressionReceived, b'x')
+
+
+    def test_clientSelectsWrongProtocol(self):
+        """
+        The client must select one of the protocols offered by the server
+        """
+        self.setUp(isClient=False)
+        self.enc.currentDialect = None
+        self.enc.sendEncoded(b'abc') # client sends abc to server
+        self.enc.dataReceived(self.io.getvalue())
+        self.assertTrue(self.io.closed) # if server gets back wrong protocol, it closes
+        self.assertFalse(hasattr(self, 'result'))
+
+
+    def test_clientSelectsCorrectProtocol(self):
+        """
+        The client must select one of the protocols offered by the server
+        """
+        self.setUp(isClient=False)
+        self.enc.currentDialect = None
+        self.enc.sendEncoded(b'pb') # client sends pb abc to server
+        self.enc.dataReceived(self.io.getvalue())
+        # server sets the protocol selected by client
+        self.assertEqual(b'pb', self.enc.currentDialect)
+        # server does not further process the received message
+        self.assertFalse(hasattr(self, 'result'))
+
+
+    def test_startWithWrongProtocol(self):
+        self.assertTrue(self.enc.isClient)
+        self.enc.currentDialect = None
+        self.enc.sendEncoded([b'px'])
+        self.enc.dataReceived(self.io.getvalue())
+        self.assertIs(self.enc.currentDialect, None)
+        self.assertTrue(self.io.closed)
+
+
+    def test_startWithRightProtocol(self):
+        def sendEncoded(s):
+            self.assertEqual(b'pb', s)
+        self.enc.currentDialect = None
+        self.enc.sendEncoded([b'pb', b'abc'])
+        self.enc.sendEncoded = sendEncoded
+        # dataReceived chooses one of the received dialects and returns it
+        # by calling sendEncoded
+        self.enc.dataReceived(self.io.getvalue())
+        self.assertEqual(self.enc.currentDialect, b'pb')
+
+
+    def test_string(self):
+        """
+        Sending and receiving a byte string must not change it
+        """
+        foo = b'hello'
+        self.enc.sendEncoded(foo)
+        l = []
+        self.enc.dataReceived(self.io.getvalue())
+        assert self.result == foo, "%s!=%s" % (repr(self.result), repr(foo))
+
+
+    def test_unicode(self):
+        """
+        Banana does not support unicode, please implement on a higher level
+        """
+        self.assertRaises(banana.BananaError, self.enc.sendEncoded, u'hello')
+
+
     def test_int(self):
         """
         A positive integer less than 2 ** 32 should round-trip through
@@ -77,6 +170,33 @@ class BananaTestCase(unittest.TestCase):
             self.assertIsInstance(self.result, int)
 
 
+    def test_couldNotSend(self):
+        """
+        Only a few basic types are sendable
+        """
+        self.assertRaises(banana.BananaError, self.enc.sendEncoded, BananaTestCase)
+
+
+    def test_encodeTooLargeStr(self):
+        """
+        Strings have a maximum length
+        """
+        data = b'a' * (banana.SIZE_LIMIT)
+        self.enc.sendEncoded(data)
+        data = b'a' * (banana.SIZE_LIMIT+1)
+        self.assertRaises(banana.BananaError, self.enc.sendEncoded, data)
+
+
+    def test_encodeTooLargeList(self):
+        """
+        Lists have a maximum length
+        """
+        # data = list(b'a' * (banana.SIZE_LIMIT)) This takes 4 seconds, not important
+        # self.enc.sendEncoded(data)
+        data = list(b'a' * (banana.SIZE_LIMIT+1))
+        self.assertRaises(banana.BananaError, self.enc.sendEncoded, data)
+
+
     def test_largeLong(self):
         """
         Integers greater than 2 ** 32 and less than -2 ** 32 should
@@ -120,6 +240,21 @@ class BananaTestCase(unittest.TestCase):
         self.assertRaises(banana.BananaError, self.enc.sendEncoded, smallest)
 
 
+    def test_decodeTooLargePrefix(self):
+        """
+        The size of the prefix has a maximum
+        """
+        oldLimit = self.enc.prefixLimit
+        try:
+            self.enc.setPrefixLimit(13)
+            data = b'x' * 13
+            self.enc.dataReceived(data)
+            data = b'x' * 14
+            self.assertRaises(banana.BananaError, self.enc.dataReceived, data)
+        finally:
+            self.enc.setPrefixLimit(oldLimit)
+
+
     def test_decodeTooLargeLong(self):
         """
         Test that a long above the implementation specific limit is rejected
@@ -279,6 +414,14 @@ class BananaTestCase(unittest.TestCase):
         self.assertEqual(encoded(baseNegIn - 3), '\x03' + baseLongNegOut)
 
 
+    def test_typeNotImplemented(self):
+        """
+        The type must be implemented
+        """
+        self.assertRaises(NotImplementedError,
+            self.enc.dataReceived, b'\x01\x01\xaa')
+
+
     def test_typeVOCAB(self):
         """
         the PB Vocabulary
@@ -313,3 +456,4 @@ class GlobalCoderTests(unittest.TestCase):
         # Banana encoding of 1
         decodable = '\x01\x81'
         self.assertEqual(banana.decode(decodable), 1)
+        self.assertEqual(banana.encode(1), decodable)
