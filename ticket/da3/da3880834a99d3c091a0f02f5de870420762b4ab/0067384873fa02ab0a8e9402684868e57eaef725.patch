diff --git twisted/topfiles/6393.feature twisted/topfiles/6393.feature
new file mode 100644
index 0000000..f6881c3
--- /dev/null
+++ twisted/topfiles/6393.feature
@@ -0,0 +1 @@
+Added a toPhrase method to twisted.trial.util
diff --git twisted/trial/test/test_util.py twisted/trial/test/test_util.py
index bf8cdea..d8bd324 100644
--- twisted/trial/test/test_util.py
+++ twisted/trial/test/test_util.py
@@ -681,3 +681,100 @@ class AcquireAttributeTests(SynchronousTestCase):
         """
         default = object()
         self.assertTrue(default is acquireAttribute([object()], "foo", default))
+
+
+
+class TestListToPhrase(SynchronousTestCase):
+    """
+    Input is transformed into a string representation of the list,
+    with each item separated by delimiter (defaulting to a comma) and the final
+    two being separated by a final delimiter.
+    """
+
+    def test_empty(self):
+        """
+        If things is empty, an empty string is returned.
+        """
+        sample = []
+        expected = ''
+        result = util._listToPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_oneWord(self):
+        """
+        With a single item, the item is returned.
+        """
+        sample = ['One']
+        expected = 'One'
+        result = util._listToPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_twoWords(self):
+        """
+        Two words are separated by the final delimiter.
+        """
+        sample = ['One', 'Two']
+        expected = 'One and Two'
+        result = util._listToPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_threeWords(self):
+        """
+        With more than two words, the first two are separated by the delimiter.
+        """
+        sample = ['One', 'Two', 'Three']
+        expected = 'One, Two, and Three'
+        result = util._listToPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_fourWords(self):
+        """
+        If a delimiter is specified, it is used instead of the default comma.
+        """
+        sample = ['One', 'Two', 'Three', 'Four']
+        expected = 'One; Two; Three; or Four'
+        result = util._listToPhrase(sample, 'or', delimiter='; ')
+        self.assertEqual(expected, result)
+
+
+    def test_notString(self):
+        """
+        If something in things is not a string, it is converted into one.
+        """
+        sample = [1, 2, 'three']
+        expected = '1, 2, and three'
+        result = util._listToPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_stringTypeError(self):
+        """
+        If things is a string, a TypeError is raised.
+        """
+        sample = "One, two, three"
+        error = self.assertRaises(TypeError, util._listToPhrase, sample, 'and')
+        self.assertEqual(error.message, "Things must be a list or a tuple")
+
+
+    def test_iteratorTypeError(self):
+        """
+        If things is an iterator, a TypeError is raised.
+        """
+        sample = iter([1, 2, 3])
+        error = self.assertRaises(TypeError, util._listToPhrase, sample, 'and')
+        self.assertEqual(error.message, "Things must be a list or a tuple")
+
+
+    def test_generatorTypeError(self):
+        """
+        If things is a generator, a TypeError is raised.
+        """
+        def sample():
+            for i in range(2):
+                yield i
+        error = self.assertRaises(TypeError, util._listToPhrase, sample, 'and')
+        self.assertEqual(error.message, "Things must be a list or a tuple")
diff --git twisted/trial/util.py twisted/trial/util.py
index a3103f0..4526774 100644
--- twisted/trial/util.py
+++ twisted/trial/util.py
@@ -157,7 +157,7 @@ class _Janitor(object):
         reactor = self._getReactor()
         if interfaces.IReactorThreads.providedBy(reactor):
             if reactor.threadpool is not None:
-                # Stop the threadpool now so that a new one is created. 
+                # Stop the threadpool now so that a new one is created.
                 # This improves test isolation somewhat (although this is a
                 # post class cleanup hook, so it's only isolating classes
                 # from each other, not methods from each other).
@@ -409,3 +409,39 @@ def _unusedTestDirectory(base):
 # Remove this, and move lockfile import, after ticket #5960 is resolved:
 if _PY3:
     del _unusedTestDirectory
+
+
+
+def _listToPhrase(things, finalDelimiter, delimiter=', '):
+    """
+    Produce a string containing each thing in C{things},
+    separated by a C{delimiter}, with the last couple being separated
+    by C{finalDelimiter}
+
+    @param things: The elements of the resulting phrase
+    @type things: L{list} or L{tuple}
+
+    @param finalDelimiter: What to put between the last two things
+        (typically 'and' or 'or')
+    @type finalDelimiter: L{str}
+
+    @param delimiter: The separator to use between each thing,
+        not including the last two. Should typically include a trailing space.
+    @type delimiter: L{str}
+
+    @return: The resulting phrase
+    @rtype: L{str}
+    """
+    if not isinstance(things, (list, tuple)):
+        raise TypeError("Things must be a list or a tuple")
+    if not things:
+        return ''
+    if len(things) == 1:
+        return str(things[0])
+    if len(things) == 2:
+        return "%s %s %s" % (str(things[0]), finalDelimiter, str(things[1]))
+    else:
+        strThings = []
+        for thing in things:
+            strThings.append(str(thing))
+        return "%s%s%s %s" % (delimiter.join(strThings[:-1]), delimiter, finalDelimiter, strThings[-1])
