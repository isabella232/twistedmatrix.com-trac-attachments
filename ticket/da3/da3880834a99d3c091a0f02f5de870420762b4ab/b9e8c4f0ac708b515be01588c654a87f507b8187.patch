Index: twisted/topfiles/6393.feature
===================================================================
--- twisted/topfiles/6393.feature	(revision 0)
+++ twisted/topfiles/6393.feature	(working copy)
@@ -0,0 +1 @@
+Added a toPhrase method to twisted.trial.util
Index: twisted/trial/test/test_util.py
===================================================================
--- twisted/trial/test/test_util.py	(revision 38302)
+++ twisted/trial/test/test_util.py	(working copy)
@@ -19,7 +19,7 @@
 from twisted.internet.base import DelayedCall
 from twisted.python.failure import Failure
 
-from twisted.trial.unittest import SynchronousTestCase
+from twisted.trial.unittest import SynchronousTestCase, TestCase
 from twisted.trial import util
 from twisted.trial.util import (
     DirtyReactorAggregateError, _Janitor, excInfoOrFailureToExcInfo,
@@ -681,3 +681,100 @@
         """
         default = object()
         self.assertTrue(default is acquireAttribute([object()], "foo", default))
+
+
+
+class TestToPhrase(TestCase):
+    """
+    Input is transformed into a string representation of the list,
+    with each item separated by delimiter (defaulting to a comma) and the final
+    two being separated by a final delimiter.
+    """
+    
+    def test_empty(self):
+        """
+        If things is empty, an empty string is returned.
+        """
+        sample = []
+        expected = ''
+        result = util._toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+    
+    
+    def test_oneWord(self):
+        """
+        With a single item, the item is returned.
+        """
+        sample = ['One']
+        expected = 'One'
+        result = util._toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_twoWords(self):
+        """
+        Two words are separated by the final delimiter.
+        """
+        sample = ['One', 'Two']
+        expected = 'One and Two'
+        result = util._toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_threeWords(self):
+        """
+        With more than two words, the first two are separated by the delimiter.
+        """
+        sample = ['One', 'Two', 'Three']
+        expected = 'One, Two, and Three'
+        result = util._toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_fourWords(self):
+        """
+        If a delimiter is specified, it is used instead of the default comma.
+        """
+        sample = ['One', 'Two', 'Three', 'Four']
+        expected = 'One; Two; Three; or Four'
+        result = util._toPhrase(sample, 'or', delimiter='; ')
+        self.assertEqual(expected, result)
+
+
+    def test_notString(self):
+        """
+        If something in things is not a string, it is converted into one.
+        """
+        sample = [1, 2, 'three']
+        expected = '1, 2, and three'
+        result = util._toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+        
+        
+    def test_stringTypeError(self):
+        """
+        If things is a string, a TypeError is raised.
+        """
+        sample = "One, two, three"
+        error = self.assertRaises(TypeError, util._toPhrase, sample, 'and')
+        self.assertEqual(error.message, "Things must be a list or a tuple")
+
+
+    def test_iteratorTypeError(self):
+        """
+        If things is an iterator, a TypeError is raised.
+        """
+        sample = iter([1, 2, 3])
+        error = self.assertRaises(TypeError, util._toPhrase, sample, 'and')
+        self.assertEqual(error.message, "Things must be a list or a tuple")
+
+
+    def test_generatorTypeError(self):
+        """
+        If things is a generator, a TypeError is raised.
+        """
+        def sample():
+            for i in range(2):
+                yield i
+        error = self.assertRaises(TypeError, util._toPhrase, sample, 'and')
+        self.assertEqual(error.message, "Things must be a list or a tuple")
Index: twisted/trial/util.py
===================================================================
--- twisted/trial/util.py	(revision 38302)
+++ twisted/trial/util.py	(working copy)
@@ -409,3 +409,37 @@
 # Remove this, and move lockfile import, after ticket #5960 is resolved:
 if _PY3:
     del _unusedTestDirectory
+
+
+
+def _toPhrase(things, finalDelimiter, delimiter=', '):
+    """
+    Produce a string containing each thing in C{things},
+    separated by a C{delimiter}, with the last couple being separated
+    by C{finalDelimiter}
+
+    @param things: The elements of the resulting phrase
+    @type things: L{list} or L{tuple}
+
+    @param finalDelimiter: What to put between the last two things
+    @type finalDelimiter: L{str}
+
+    @param delimiter: The separator to use between each thing
+    @type delimiter: L{str}
+
+    @return: The resulting phrase
+    @rtype: L{str}
+    """
+    if not isinstance(things, (list, tuple)):
+        raise TypeError("Things must be a list or a tuple")
+    if not things:
+        return ''
+    if len(things) == 1:
+        return str(things[0])
+    if len(things) == 2:
+        return "%s %s %s" % (str(things[0]), finalDelimiter, str(things[1]))
+    else:
+        strThings = []
+        for thing in things:
+            strThings.append(str(thing))
+        return "%s%s%s %s" % (delimiter.join(strThings[:-1]), delimiter, finalDelimiter, strThings[-1])
