Index: python/text.py
===================================================================
--- python/text.py	(revision 38001)
+++ python/text.py	(working copy)
@@ -206,3 +206,14 @@
         if buf.find(p) != -1:
             return True
 
+def itemizedList(things, delimiter):
+    """
+    Produce a string containing each thing in C{things} separated by a comma,
+    with the last couple being separated by C{delimiter}
+    
+    @rtype: C{str}
+    """
+    if len(things) == 1:
+        return str(things[0])
+    else:
+        return "%s %s %s" % (', '.join(things[:-1]), delimiter,things[-1])
Index: test/test_text.py
===================================================================
--- test/test_text.py	(revision 38001)
+++ test/test_text.py	(working copy)
@@ -240,3 +240,28 @@
     def test_insensitive(self):
         self.assertEqual(True, text.strFile("ThIs is A test STRING", self.io, False))
 
+class ItemizedListTest(unittest.TestCase):
+    
+    def test_oneWord(self):
+        sample = ['One']
+        expected = 'One'
+        result = text.itemizeList(sample, 'and')
+        self.assertEqual(expected, result)
+
+    def test_twoWords(self):
+        sample = ['One', 'Two']
+        expected = 'One and Two'
+        result = text.itemizeList(sample, 'and')
+        self.assertEqual(expected, result)
+
+    def test_threeWords(self):
+        sample = ['One', 'Two', 'Three']
+        expected = 'One, Two and Three'
+        result = text.itemizeList(sample, 'and')
+        self.assertEqual(expected, result)
+
+    def test_fourWords(self):
+        sample = ['One', 'Two', 'Three', 'Four']
+        expected = 'One, Two, Three or Four'
+        result = text.itemizeList(sample, 'or')
+        self.assertEqual(expected, result)
\ No newline at end of file
Index: topfiles/6393.feature
===================================================================
--- topfiles/6393.feature	(revision 0)
+++ topfiles/6393.feature	(working copy)
@@ -0,0 +1 @@
+Added an itemizedList method to twisted.python.text
