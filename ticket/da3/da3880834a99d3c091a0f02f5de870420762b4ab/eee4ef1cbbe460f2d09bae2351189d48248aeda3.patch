Index: twisted/python/text.py
===================================================================
--- twisted/python/text.py	(revision 38302)
+++ twisted/python/text.py	(working copy)
@@ -206,3 +206,34 @@
         if buf.find(p) != -1:
             return True
 
+def toPhrase(things, finalDelimiter, delimiter=', '):
+    """
+    Produce a string containing each thing in C{things},
+    separated by a C{delimiter}, with the last couple being separated
+    by C{finalDelimiter}
+    
+    @param things: The elements of the resulting phrase
+    @type things: An object that has a length and can be iterated over
+    
+    @param finalDelimiter: What to put between the last two things
+    @type finalDelimiter: C{str}
+    
+    @param delimiter: The separator to use between each thing
+    @type delimiter: C{str}
+    
+    @return: The resulting phrase
+    @rtype: C{str}
+    """
+    if not hasattr(things, '__len__') or isinstance(things, basestring):
+        raise TypeError("Things must be a collection of objects")
+    if not things:
+        return ''
+    if len(things) == 1:
+        return str(things[0])
+    if len(things) == 2:
+        return "%s %s %s" % (str(things[0]), finalDelimiter, str(things[1]))
+    else:
+        strThings = []
+        for thing in things:
+            strThings.append(str(thing))
+        return "%s%s%s %s" % (delimiter.join(strThings[:-1]), delimiter, finalDelimiter, strThings[-1])
Index: twisted/test/test_text.py
===================================================================
--- twisted/test/test_text.py	(revision 38302)
+++ twisted/test/test_text.py	(working copy)
@@ -240,3 +240,96 @@
     def test_insensitive(self):
         self.assertEqual(True, text.strFile("ThIs is A test STRING", self.io, False))
 
+
+
+class ToPhraseTest(unittest.TestCase):
+    """
+    Input is transformed into a string representation of the list,
+    with each item separated by delimiter (defaulting to a comma) and the final
+    two being separated by a final delimiter
+    """
+    
+    def test_empty(self):
+        """
+        If things is empty, an empty string is returned
+        """
+        sample = []
+        expected = ''
+        result = text.toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+    
+    
+    def test_oneWord(self):
+        """
+        With a single item, the item is returned
+        """
+        sample = ['One']
+        expected = 'One'
+        result = text.toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_twoWords(self):
+        """
+        Two words are separated by the final delimiter
+        """
+        sample = ['One', 'Two']
+        expected = 'One and Two'
+        result = text.toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_threeWords(self):
+        """
+        With more than two words, the first two are separated by the delimiter
+        """
+        sample = ['One', 'Two', 'Three']
+        expected = 'One, Two, and Three'
+        result = text.toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+
+
+    def test_fourWords(self):
+        """
+        If a delimiter is specified, it is used instead of the default comma
+        """
+        sample = ['One', 'Two', 'Three', 'Four']
+        expected = 'One; Two; Three; or Four'
+        result = text.toPhrase(sample, 'or', delimiter='; ')
+        self.assertEqual(expected, result)
+
+
+    def test_notString(self):
+        """
+        If something in things is not a string, it is converted into one
+        """
+        sample = [1,2,'three']
+        expected = '1, 2, and three'
+        result = text.toPhrase(sample, 'and')
+        self.assertEqual(expected, result)
+        
+        
+    def test_stringTypeError(self):
+        """
+        If things is a string, a TypeError is raised
+        """
+        sample = "One, two, three"
+        self.assertRaises(TypeError, text.toPhrase, sample, 'and')
+
+
+    def test_iteratorTypeError(self):
+        """
+        If things is an iterator, a TypeError is raised
+        """
+        sample = iter([1, 2, 3])
+        self.assertRaises(TypeError, text.toPhrase, sample, 'and')
+
+
+    def test_generatorTypeError(self):
+        """
+        If things is a generator, a TypeError is raised
+        """
+        def sample():
+            for i in range(2):
+                yield i
+        self.assertRaises(TypeError, text.toPhrase, sample, 'and')
Index: twisted/topfiles/6393.feature
===================================================================
--- twisted/topfiles/6393.feature	(revision 0)
+++ twisted/topfiles/6393.feature	(working copy)
@@ -0,0 +1 @@
+Added an itemizedList method to twisted.python.text
