Index: twisted/web/test/test_httpauth.py
===================================================================
--- twisted/web/test/test_httpauth.py	(révision 32261)
+++ twisted/web/test/test_httpauth.py	(copie de travail)
@@ -119,12 +119,12 @@
 
 
 class RequestMixin:
-    def makeRequest(self, method='GET', clientAddress=None):
+    def makeRequest(self, method='GET', clientAddress=None, uri=None):
         """
         Create a L{DummyRequest} (change me to create a
         L{twisted.web.http.Request} instead).
         """
-        request = DummyRequest('/')
+        request = DummyRequest('/',uri=uri)
         request.method = method
         request.client = clientAddress
         return request
@@ -172,7 +172,13 @@
 
         self.patch(self.credentialFactory.digest, 'decode', check)
         req = self.makeRequest(method, IPv4Address('TCP', host, 81))
-        self.credentialFactory.decode(response, req)
+        try :
+            self.credentialFactory.decode(response, req)
+        except:
+            pass
+        self.assertFalse(done[0])
+        req2 = self.makeRequest(method,IPv4Address('TCP',host,81),uri="http://dummy/")
+        self.credentialFactory.decode(response, req2)
         self.assertTrue(done[0])
 
 
Index: twisted/web/test/test_web.py
===================================================================
--- twisted/web/test/test_web.py	(révision 32261)
+++ twisted/web/test/test_web.py	(copie de travail)
@@ -56,7 +56,7 @@
         self.go = 0
 
 
-    def __init__(self, postpath, session=None):
+    def __init__(self, postpath, session=None, uri=None):
         self.sitepath = []
         self.written = []
         self.finished = 0
@@ -68,7 +68,7 @@
         self.outgoingHeaders = {}
         self.responseHeaders = http_headers.Headers()
         self.responseCode = None
-        self.headers = {}
+        self.headers = {'digest-uri' : uri}
         self._finishedDeferreds = []
 
 
Index: twisted/web/_auth/digest.py
===================================================================
--- twisted/web/_auth/digest.py	(révision 32261)
+++ twisted/web/_auth/digest.py	(copie de travail)
@@ -11,6 +11,8 @@
 from zope.interface import implements
 from twisted.cred import credentials
 from twisted.web.iweb import ICredentialFactory
+from twisted.web.http import BAD_REQUEST
+from twisted.web.error import Error
 
 class DigestCredentialFactory(object):
     """
@@ -28,6 +30,14 @@
         self.digest = credentials.DigestCredentialFactory(algorithm,
                                                           authenticationRealm)
 
+    #def checkURI(self,request):
+    #    """
+    #    Check that the resource designated by the "uri" directive is the 
+    #    same as the resource specified in the Request-Line, as asked by
+    #    RFC 2617
+    #    """
+    #    if request.getHeader('digest-uri') != request.uri :
+    #        request.setResponseCode(http.BAD_REQUEST)
 
     def getChallenge(self, request):
         """
@@ -46,9 +56,15 @@
         """
         Create a L{twisted.cred.digest.DigestedCredentials} object from the
         given response and request.
+        Check that the resource designated by the "uri" directive is the 
+        same as the resource specified in the Request-Line, as asked by
+        RFC 2617
 
         @see: L{ICredentialFactory.decode}
         """
+        if request.getHeader('digest-uri') != request.uri:
+            raise Error(BAD_REQUEST, "Invalid URI",None)
+
         return self.digest.decode(response,
                                   request.method,
                                   request.getClientIP())
Index: twisted/web/_auth/wrapper.py
===================================================================
--- twisted/web/_auth/wrapper.py	(révision 32261)
+++ twisted/web/_auth/wrapper.py	(copie de travail)
@@ -19,6 +19,7 @@
 from twisted.python.components import proxyForInterface
 from twisted.web.resource import IResource, ErrorPage
 from twisted.web import util
+from twisted.web import error as weberror
 from twisted.cred import error
 from twisted.cred.credentials import Anonymous
 
@@ -112,6 +113,9 @@
             credentials = factory.decode(respString, request)
         except error.LoginFailed:
             return UnauthorizedResource(self._credentialFactories)
+        except weberror.Error:
+            log.err(None, "Bad URI requested")
+            return ErrorPage(BAD_REQUEST,"Invalid URI", None)
         except:
             log.err(None, "Unexpected failure from credentials factory")
             return ErrorPage(500, None, None)
