Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 23155)
+++ twisted/python/filepath.py	(working copy)
@@ -30,6 +30,8 @@
 from twisted.python.win32 import ERROR_INVALID_NAME, ERROR_DIRECTORY
 from twisted.python.win32 import WindowsError
 
+TWISTED_STAT_CACHE = bool(os.environ.get("TWISTED_STAT_CACHE"))
+
 def _stub_islink(path):
     """
     Always return 'false' if the operating system does not support symlinks.
@@ -400,13 +402,23 @@
             self.statinfo = 0
             if reraise:
                 raise
+        return self.statinfo
+        # self.statinfo = self._dostat(reraise)
 
+    def _dostat(self, reraise):
+        """
+        Do a stat(), or don't, depending on whether stat caching is turned on.
+        """
+        if TWISTED_STAT_CACHE:
+            if not self.statinfo:
+                self.restat(reraise)
+            return self.statinfo
+        else:
+            return self.restat(reraise)
+
+
     def getsize(self):
-        st = self.statinfo
-        if not st:
-            self.restat()
-            st = self.statinfo
-        return st.st_size
+        return self._dostat(False).st_size
 
 
     def getModificationTime(self):
@@ -416,11 +428,7 @@
         @return: a number of seconds from the epoch.
         @rtype: float
         """
-        st = self.statinfo
-        if not st:
-            self.restat()
-            st = self.statinfo
-        return float(st.st_mtime)
+        return float(self._dostat(True).st_mtime)
 
 
     def getStatusChangeTime(self):
@@ -430,11 +438,7 @@
         @return: a number of seconds from the epoch.
         @rtype: float
         """
-        st = self.statinfo
-        if not st:
-            self.restat()
-            st = self.statinfo
-        return float(st.st_ctime)
+        return float(self._dostat(True).st_ctime)
 
 
     def getAccessTime(self):
@@ -444,11 +448,7 @@
         @return: a number of seconds from the epoch.
         @rtype: float
         """
-        st = self.statinfo
-        if not st:
-            self.restat()
-            st = self.statinfo
-        return float(st.st_atime)
+        return float(self._dostat(True).st_atime)
 
 
     def exists(self):
@@ -459,33 +459,21 @@
             C{False} in the other cases.
         @rtype: C{bool}
         """
-        if self.statinfo:
-            return True
-        else:
-            self.restat(False)
-            if self.statinfo:
-                return True
-            else:
-                return False
+        return bool(self._dostat(False))
 
 
+    def _modecheck(self, modeflag):
+        st = self._dostat(False)
+        if st:
+            return modeflag(st.st_mode)
+        return False
+
+
     def isdir(self):
-        st = self.statinfo
-        if not st:
-            self.restat(False)
-            st = self.statinfo
-            if not st:
-                return False
-        return S_ISDIR(st.st_mode)
+        return self._modecheck(S_ISDIR)
 
     def isfile(self):
-        st = self.statinfo
-        if not st:
-            self.restat(False)
-            st = self.statinfo
-            if not st:
-                return False
-        return S_ISREG(st.st_mode)
+        return self._modecheck(S_ISREG)
 
     def islink(self):
         # We can't use cached stat results here, because that is the stat of
