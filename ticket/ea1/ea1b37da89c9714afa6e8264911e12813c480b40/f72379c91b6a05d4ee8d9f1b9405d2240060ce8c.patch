diff --git twisted/python/logfile.py twisted/python/logfile.py
index f652271..ba232ff 100644
--- twisted/python/logfile.py
+++ twisted/python/logfile.py
@@ -8,7 +8,7 @@ A rotating, browsable log file.
 """
 
 # System Imports
-import os, glob, time, stat
+import os, glob, time, stat, warnings
 
 from twisted.python import threadable
 
@@ -196,6 +196,7 @@ class LogFile(BaseLogFile):
         and continue logging to old logfile.
         """
         if not (os.access(self.directory, os.W_OK) and os.access(self.path, os.W_OK)):
+            warnings.warn("Could not rotate log file")
             return
         logs = self.listLogs()
         logs.reverse()
@@ -284,6 +285,7 @@ class DailyLogFile(BaseLogFile):
         and continue logging to old logfile.
         """
         if not (os.access(self.directory, os.W_OK) and os.access(self.path, os.W_OK)):
+            warnings.warn("Could not rotate log file")
             return
         newpath = "%s.%s" % (self.path, self.suffix(self.lastDate))
         if os.path.exists(newpath):
diff --git twisted/test/test_logfile.py twisted/test/test_logfile.py
index ebae630..b584ee3 100644
--- twisted/test/test_logfile.py
+++ twisted/test/test_logfile.py
@@ -152,7 +152,8 @@ class LogFileTestCase(unittest.TestCase):
             f.close()
             return
 
-        log.rotate() # this should not fail
+        self.assertWarns(UserWarning, "Could not rotate log file",
+                         logfile.__file__, log.rotate)
 
         log.write("def")
         log.flush()
@@ -299,7 +300,6 @@ class DailyLogFileTestCase(unittest.TestCase):
         # this logfile should rotate every 10 bytes
         log = RiggedDailyLogFile(self.name, self.dir)
         days = [(self.path + '.' + log.suffix(day * 86400)) for day in range(3)]
-
         # test automatic rotation
         log._clock = 0.0    # 1970/01/01 00:00.00
         log.write("123")
@@ -318,3 +318,50 @@ class DailyLogFileTestCase(unittest.TestCase):
         log.write("3")
         self.assert_(not os.path.exists(days[2]))
 
+    def testRotationNoDirPermission(self):
+        """
+        Check if L{DailyLogFile} will emit warning when
+        rotation is not possible
+        """
+        log = RiggedDailyLogFile(self.name, self.dir)
+        days = [(self.path + '.' + log.suffix(day * 86400)) for day in range(3)]
+        log._clock = 0.0    # 1970/01/01 00:00.00
+        log.write('foo')
+        log._clock = 86400  # 1970/01/02 00:00.00
+        log.write('bar')
+        os.chmod(self.dir, 0555)
+        # Rotation should fail at this point
+        log._clock = 172800  # 1970/01/03 00:00.00
+        self.assertWarns(UserWarning, "Could not rotate log file",
+                         logfile.__file__, log.write, 'baz')
+        self.assert_(os.path.exists(days[0]))
+        self.assert_(not os.path.exists(days[1]))
+        log.close()
+        self.assertEquals(open(self.path, 'r').read(), 'barbaz')
+        self.assertEquals(open(days[0], 'r').read(), 'foo')
+        os.chmod(self.dir, 0777)
+
+
+    def testRotationNoFilePermission(self):
+        """
+        Check if L{DailyLogFile} will emit warning when
+        rotating on a file is no longer possible
+        """
+        log = RiggedDailyLogFile(self.name, self.dir)
+        days = [(self.path + '.' + log.suffix(day * 86400)) for day in range(3)]
+        log._clock = 0.0    # 1970/01/01 00:00.00
+        log.write('foo')
+        log._clock = 86400  # 1970/01/02 00:00.00
+        log.write('bar')
+        os.chmod(self.path, 0555)
+        # Rotation should fail at this point
+        log._clock = 172800  # 1970/01/03 00:00.00
+        self.assertWarns(UserWarning, "Could not rotate log file",
+                         logfile.__file__, log.write, 'baz')
+        self.assert_(os.path.exists(days[0]))
+        self.assert_(not os.path.exists(days[1]))
+        log.close()
+        self.assertEquals(open(self.path, 'r').read(), 'barbaz')
+        self.assertEquals(open(days[0], 'r').read(), 'foo')
+        # Making sure file is *removable* after the test ends
+        os.chmod(self.path, 0777)
