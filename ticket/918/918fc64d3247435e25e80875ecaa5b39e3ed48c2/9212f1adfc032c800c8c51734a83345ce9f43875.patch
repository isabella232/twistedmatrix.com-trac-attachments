Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 11080)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -68,10 +68,12 @@
 
 class IMAP4UTF7TestCase(unittest.TestCase):
     tests = [
-        ['Hello world', 'Hello world'],
-        ['Hello & world', 'Hello &- world'],
-        ['Hello\xffworld', 'Hello&,w-world'],
-        ['\xff\xfe\xfd\xfc', '&,,79,A-'],
+        [u'Hello world', 'Hello world'],
+        [u'Hello & world', 'Hello &- world'],
+        [u'Hello\xffworld', 'Hello&AP8-world'],
+        [u'\xff\xfe\xfd\xfc', '&AP8A,gD9APw-'],
+        [u'~peter/mail/\u65e5\u672c\u8a9e/\u53f0\u5317', 
+         '~peter/mail/&ZeVnLIqe-/&U,BTFw-'], # example from RFC 2060
     ]
 
     def testEncode(self):
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 11080)
+++ twisted/mail/imap4.py	(working copy)
@@ -1098,6 +1098,7 @@
     select_NAMESPACE = auth_NAMESPACE
 
     def _parseMbox(self, name):
+        if type(name) == types.UnicodeType: return name
         try:
             return name.decode('imap4-utf-7')
         except:
@@ -1264,7 +1265,7 @@
             if not sub or self.account.isSubscribed(name):
                 flags = box.getFlags()
                 delim = box.getHierarchicalDelimiter()
-                resp = (DontQuoteMe(cmdName), map(DontQuoteMe, flags), delim, name)
+                resp = (DontQuoteMe(cmdName), map(DontQuoteMe, flags), delim, name.encode('imap4-utf-7'))
                 self.sendUntaggedResponse(collapseNestedLists(resp))
         self.sendPositiveResponse(tag, '%s completed' % (cmdName,))
 
@@ -5207,10 +5208,12 @@
 
 import codecs
 def modified_base64(s):
-    return binascii.b2a_base64(s)[:-1].rstrip('=').replace('/', ',')
+    s_utf7 = s.encode('utf-7')
+    return s_utf7[1:-1].replace('/', ',')
 
 def modified_unbase64(s):
-    return binascii.a2b_base64(s.replace(',', '/') + '===')
+    s_utf7 = '+%s-' % s.replace(',', '/')
+    return s_utf7.decode('utf-7')
 
 def encoder(s):
     r = []
@@ -5220,7 +5223,7 @@
             if _in:
                 r.extend(['&', modified_base64(''.join(_in)), '-'])
                 del _in[:]
-            r.append(c)
+            r.append(str(c))
         elif c == '&':
             if _in:
                 r.extend(['&', modified_base64(''.join(_in)), '-'])
