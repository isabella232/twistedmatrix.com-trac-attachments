Index: test_amp.py
===================================================================
--- test_amp.py	(revision 31053)
+++ test_amp.py	(working copy)
@@ -5,21 +5,30 @@
 """
 Tests for L{twisted.protocols.amp}.
 """
-
 import datetime
 import decimal
 
 from zope.interface.verify import verifyObject
+from zope.interface import implements
 
 from twisted.python.util import setIDFunction
 from twisted.python import filepath
 from twisted.python.failure import Failure
+from twisted.python.hashlib import sha1
 from twisted.protocols import amp
 from twisted.trial import unittest
 from twisted.internet import protocol, defer, error, reactor, interfaces
 from twisted.test import iosim
 from twisted.test.proto_helpers import StringTransport
 
+from twisted.cred.error import UnauthorizedLogin
+from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse
+from twisted.cred.credentials import UsernamePassword
+from twisted.cred.portal import Portal
+from twisted.protocols.loopback import loopbackAsync
+
+__metaclass__ = type
+
 ssl = None
 try:
     from twisted.internet import ssl
@@ -445,7 +454,7 @@
 class FakeLocator(object):
     """
     This is a fake implementation of the interface implied by
-    L{CommandLocator}.
+    L{amp.CommandLocator}.
     """
     def __init__(self):
         """
@@ -696,7 +705,7 @@
 
     def test_responderDecorator(self):
         """
-        A method on a L{CommandLocator} subclass decorated with a L{Command}
+        A method on a L{amp.CommandLocator} subclass decorated with a L{Command}
         subclass's L{responder} decorator should be returned from
         locateResponder, wrapped in logic to serialize and deserialize its
         arguments.
@@ -706,7 +715,7 @@
 
     def test_responderOverriding(self):
         """
-        L{CommandLocator} subclasses can override a responder inherited from
+        L{amp.CommandLocator} subclasses can override a responder inherited from
         a base class by using the L{Command.responder} decorator to register
         a new responder method.
         """
@@ -726,7 +735,7 @@
         Subclasses which override locateResponder under its old name,
         lookupFunction, should have the override invoked instead.  (This tests
         an AMP subclass, because in the version of the code that could invoke
-        this deprecated code path, there was no L{CommandLocator}.)
+        this deprecated code path, there was no L{amp.CommandLocator}.)
         """
         locator = OverrideLocatorAMP()
         customResponderObject = self.assertWarns(
@@ -977,7 +986,7 @@
 
     def test_protocolSwitch(self):
         """
-        L{BinaryBoxProtocol} has the capacity to switch to a different protocol
+        L{amp.BinaryBoxProtocol} has the capacity to switch to a different protocol
         on a box boundary.  When a protocol is in the process of switching, it
         cannot receive traffic.
         """
@@ -1245,7 +1254,7 @@
 
     def test_innerProtocolInRepr(self):
         """
-        Verify that L{AMP} objects output their innerProtocol when set.
+        Verify that L{amp.AMP} objects output their innerProtocol when set.
         """
         otherProto = TestProto(None, "outgoing data")
         a = amp.AMP()
@@ -1261,8 +1270,8 @@
 
     def test_innerProtocolNotInRepr(self):
         """
-        Verify that L{AMP} objects do not output 'inner' when no innerProtocol
-        is set.
+        Verify that L{amp.AMP} objects do not output 'inner' when no
+        innerProtocol is set.
         """
         a = amp.AMP()
         def fakeID(obj):
@@ -2929,3 +2938,318 @@
     LiveFireTLSTestCase.skip = skipMsg
     PlainVanillaLiveFire.skip = skipMsg
     WithServerTLSVerification.skip = skipMsg
+# Copyright (c) 2008 Divmod.  See LICENSE for details.
+
+"""
+Tests for AMPWithCred and related stuff (former epsilon.ampauth)
+"""
+
+
+
+class StubRealm:
+    def __init__(self, avatar):
+        self.avatar = avatar
+        self.loggedOut = 0
+        self.requests = []
+
+
+    def requestAvatar(self, avatarId, mind, *interfaces):
+        self.requests.append((avatarId, mind, interfaces))
+        return interfaces[0], self.avatar, self.logout
+
+
+    def logout(self):
+        self.loggedOut += 1
+
+
+
+class StubAvatar:
+    """
+    An L{IBoxReceiver} implementation which can be used as an avatar by the
+    L{amp.AMPWithCred} tests.
+    """
+    implements(amp.IBoxReceiver)
+
+    def startReceivingBoxes(self, sender):
+        self.boxSender = sender
+
+
+    def ampBoxReceived(self, box):
+        pass
+
+
+    def stopReceivingBoxes(self, reason):
+        pass
+
+verifyObject(amp.IBoxReceiver, StubAvatar())
+
+
+
+class AMPWithCredTests(unittest.TestCase):
+    """
+    Tests for L{amp.AMPWithCred}, an L{IBoxReceiver} which integrates with
+    L{twisted.cred} to provide authentication and authorization of AMP
+    connections.
+    """
+    def setUp(self):
+        """
+        Create a L{amp.AMPWithCred} hooked up to a fake L{IBoxSender} which
+        records boxes sent through it.
+        """
+        self.username = 'alice@example.com'
+        self.password = 'foo bar baz'
+        self.checker = InMemoryUsernamePasswordDatabaseDontUse()
+        self.checker.addUser(self.username, self.password)
+        self.avatar = StubAvatar()
+        self.realm = StubRealm(self.avatar)
+        self.portal = Portal(self.realm, [self.checker])
+        self.server = amp.AMPWithCred()
+        self.server.portal = self.portal
+        self.client = amp.AMP()
+        self.finished = loopbackAsync(self.server, self.client)
+
+
+    def test_passwordLoginDifferentChallenges(self):
+        """
+        L{amp.AMPWithCred.passwordLogin} returns a new challenge each time it is
+        called.
+        """
+        first = self.server.passwordLogin(self.username)
+        second = self.server.passwordLogin(self.username)
+        self.assertNotEqual(first['challenge'], second['challenge'])
+
+
+    def test_passwordLoginResponder(self):
+        """
+        L{amp.AMPWithCred} responds to the L{amp.PasswordLogin} L{Command} with
+        a challenge.
+        """
+        d = self.client.callRemote(amp.PasswordLogin, username=self.username)
+        def cbLogin(result):
+            self.assertIn('challenge', result)
+        d.addCallback(cbLogin)
+        return d
+
+
+    def test_determineFromDifferentNonces(self):
+        """
+        Each time L{amp.PasswordChallengeResponse.determineFrom} is used, it
+        generates a different C{cnonce} value.
+        """
+        first = amp.PasswordChallengeResponse.determineFrom('a', 'b')
+        second = amp.PasswordChallengeResponse.determineFrom('a', 'b')
+        self.assertNotEqual(first['cnonce'], second['cnonce'])
+
+
+    def test_passwordChallengeResponse(self):
+        """
+        L{amp.AMPWithCred.passwordChallengeResponse} returns without error if the
+        response is valid.
+        """
+        challenge = self.server.passwordLogin(self.username)['challenge']
+        cnonce = '123abc'
+        cleartext = '%s %s %s' % (challenge, cnonce, self.password)
+        response = sha1(cleartext).digest()
+        d = self.server.passwordChallengeResponse(cnonce, response)
+        def cbLoggedIn(result):
+            self.assertEqual(result, {})
+        d.addCallback(cbLoggedIn)
+        return d
+
+
+    def test_passwordChallengeResponseResponder(self):
+        """
+        L{amp.AMPWithCred} responds to the L{amp.PasswordChallengeResponse}
+        L{Command} with an empty box if the response supplied is valid.
+        """
+        challenge = self.server.passwordLogin(self.username)['challenge']
+        d = self.client.callRemote(
+            amp.PasswordChallengeResponse,
+            **amp.PasswordChallengeResponse.determineFrom(challenge,
+            self.password))
+        def cbResponded(result):
+            self.assertEqual(result, {})
+        d.addCallback(cbResponded)
+        return d
+
+
+    def test_response(self):
+        """
+        L{amp.PasswordChallengeResponse.determineFrom} generates the correct
+        response to a challenge issued by L{amp.AMPWithCred.passwordLogin}.
+        """
+        challenge = self.server.passwordLogin(self.username)['challenge']
+        result = amp.PasswordChallengeResponse.determineFrom(
+            challenge, self.password)
+        d = self.server.passwordChallengeResponse(**result)
+        def cbLoggedIn(ignored):
+            [(avatarId, mind, interfaces)] = self.realm.requests
+            self.assertEqual(avatarId, self.username)
+            self.assertEqual(interfaces, (amp.IBoxReceiver,))
+
+            # The avatar is now the protocol's box receiver.
+            self.assertIdentical(self.server.boxReceiver, self.avatar)
+
+            # And the avatar has been started up with the protocol's
+            # IBoxSender.
+            self.assertIdentical(self.avatar.boxSender, self.server.boxSender)
+
+            # After the connection is lost, the logout function should be
+            # called.
+            self.assertEqual(self.realm.loggedOut, 0)
+            self.server.connectionLost(
+                Failure(error.ConnectionDone("test connection lost")))
+            self.assertEqual(self.realm.loggedOut, 1)
+
+        d.addCallback(cbLoggedIn)
+        return d
+
+
+    def test_invalidResponse(self):
+        """
+        L{amp.AMPWithCred.passwordChallengeResponse} returns a L{Deferred} which
+        fails with L{UnauthorizedLogin} if it is passed a response which is not
+        valid.
+        """
+        challenge = self.server.passwordLogin(self.username)['challenge']
+        return self.assertFailure(
+            self.server.passwordChallengeResponse(cnonce='bar', response='baz'),
+            UnauthorizedLogin)
+
+
+    def test_connectionLostWithoutAvatar(self):
+        """
+        L{amp.AMPWithCred.connectionLost} does not raise an exception if no login
+        has occurred when it is called.
+        """
+        self.server.connectionLost(
+            Failure(error.ConnectionDone("test connection lost")))
+
+
+    def test_unrecognizedCredentialsLogin(self):
+        """
+        L{amp.login} raises L{amp.UnhandledCredentials} if passed a credentials
+        object which provides no interface explicitly supported by that
+        function, currently L{IUsernamePassword}.
+        """
+        self.assertRaises(amp.UnhandledCredentials, amp.login, None, None)
+
+
+    def test_passwordChallengeLogin(self):
+        """
+        L{amp.login} issues the commands necessary to authenticate against
+        L{amp.AMPWithCred} when given an L{IUsernamePassword} provider with its
+        C{username} and C{password} attributes set to valid credentials.
+        """
+        loginDeferred = amp.login(
+            self.client, UsernamePassword(self.username, self.password))
+
+        def cbLoggedIn(clientAgain):
+            self.assertIdentical(self.client, clientAgain)
+            self.assertIdentical(self.server.boxReceiver, self.avatar)
+        loginDeferred.addCallback(cbLoggedIn)
+        return loginDeferred
+
+
+    def test_passwordChallengeInvalid(self):
+        """
+        L{amp.login} returns a L{Deferred} which fires with L{UnauthorizedLogin}
+        if the L{UsernamePassword} credentials object given does not contain
+        valid authentication information.
+        """
+        boxReceiver = self.server.boxReceiver
+        loginDeferred = amp.login(
+            self.client, UsernamePassword(self.username + 'x', self.password))
+        self.assertFailure(loginDeferred, UnauthorizedLogin)
+        def cbFailed(ignored):
+            self.assertIdentical(self.server.boxReceiver, boxReceiver)
+        loginDeferred.addCallback(cbFailed)
+        return loginDeferred
+
+
+    def test_noAvatar(self):
+        """
+        L{amp.login} returns a L{Deferred} which fires with
+        L{NotImplementedError} if the realm raises L{NotImplementedError} when
+        asked for the avatar.
+        """
+        def noAvatar(avatarId, mind, *interfaces):
+            raise NotImplementedError()
+        self.realm.requestAvatar = noAvatar
+
+        loginDeferred = amp.login(
+            self.client, UsernamePassword(self.username, self.password))
+        return self.assertFailure(loginDeferred, NotImplementedError)
+
+
+
+class AMPUsernamePasswordTests(unittest.TestCase):
+    """
+    Tests for L{_AMPUsernamePasswordTests}, a credentials type which works with
+    username/challenge/nonce/responses of the form used by L{amp.PasswordLogin}.
+    """
+    def setUp(self):
+        self.username = 'user name'
+        password = u'foo bar\N{LATIN SMALL LETTER E WITH ACUTE}'
+        self.password = password.encode('utf-8')
+        self.challenge = '123xyzabc789'
+        self.nonce = '1 2 3 4 5'
+        self.response = amp._calcResponse(
+            self.challenge, self.nonce, self.password)
+        self.credentials = amp._AMPUsernamePassword(
+            self.username, self.challenge, self.nonce, self.response)
+
+    def test_checkPasswordString(self):
+        """
+        L{amp._AMPUsernamePassword} accepts a C{str} for the known correct
+        password and returns C{True} if the response matches it.
+        """
+        self.assertTrue(self.credentials.checkPassword(self.password))
+
+
+    def test_checkInvalidPasswordString(self):
+        """
+        L{amp._AMPUsernamePassword} accepts a C{str} for the known correct
+        password and returns C{False} if the response does not match it.
+        """
+        self.assertFalse(self.credentials.checkPassword('quux'))
+
+
+    def test_checkPasswordUnicode(self):
+        """
+        L{amp._AMPUsernamePassword} accepts a C{unicode} for the known correct
+        password and returns C{True} if the response matches the UTF-8 encoding
+        of it.
+        """
+        self.assertTrue(
+            self.credentials.checkPassword(self.password.decode('utf-8')))
+
+
+    def test_checkInvalidPasswordUnicode(self):
+        """
+        L{amp._AMPUsernamePassword} accepts a C{unicode} for the known correct
+        password and returns C{False} if the response does not match the UTF-8
+        encoding of it.
+        """
+        self.assertFalse(
+            self.credentials.checkPassword(
+                u'\N{LATIN SMALL LETTER E WITH ACUTE}'))
+
+
+
+class CredAMPServerFactoryTests(unittest.TestCase):
+    """
+    Tests for L{amp.CredAMPServerFactory}.
+    """
+    def test_buildProtocol(self):
+        """
+        L{amp.CredAMPServerFactory.buildProtocol} returns a L{amp.AMPWithCred}
+        instance with its C{portal} attribute set to the portal object passed
+        to L{amp.CredAMPServerFactory.__init__}.
+        """
+        portal = object()
+        factory = amp.CredAMPServerFactory(portal)
+        proto = factory.buildProtocol(None)
+        self.assertIsInstance(proto, amp.AMPWithCred)
+        self.assertIdentical(proto.portal, portal)
+
