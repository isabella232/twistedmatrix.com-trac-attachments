Index: web/server.py
===================================================================
--- web/server.py	(revision 21999)
+++ web/server.py	(working copy)
@@ -4,7 +4,8 @@
 # See LICENSE for details.
 
 
-"""This is a web-server which integrates with the twisted.internet
+"""
+This is a web-server which integrates with the twisted.internet
 infrastructure.
 """
 
@@ -46,17 +47,18 @@
 
 
 class UnsupportedMethod(Exception):
-    """Raised by a resource when faced with a strange request method.
+    """
+    Raised by a resource when faced with a strange request method.
 
     RFC 2616 (HTTP 1.1) gives us two choices when faced with this situtation:
     If the type of request is known to us, but not allowed for the requested
     resource, respond with NOT_ALLOWED.  Otherwise, if the request is something
-    we don't know how to deal with in any case, respond with NOT_IMPLEMENTED.
+    we don\'t know how to deal with in any case, respond with NOT_IMPLEMENTED.
 
-    When this exception is raised by a Resource's render method, the server
+    When this exception is raised by a Resource\'s render method, the server
     will make the appropriate response.
 
-    This exception's first argument MUST be a sequence of the methods the
+    This exception\'s first argument MUST be a sequence of the methods the
     resource *does* support.
     """
 
@@ -243,7 +245,8 @@
         return reason
 
     def notifyFinish(self):
-        """Notify when finishing the request
+        """
+        Notify when finishing the request
 
         @return: A deferred. The deferred will be triggered when the
         request is finished -- with a C{None} value if the request
@@ -265,42 +268,50 @@
         self.notifications = []
 
     def view_write(self, issuer, data):
-        """Remote version of write; same interface.
         """
+        Remote version of write; same interface.
+        """
         self.write(data)
 
     def view_finish(self, issuer):
-        """Remote version of finish; same interface.
         """
+        Remote version of finish; same interface.
+        """
         self.finish()
 
     def view_addCookie(self, issuer, k, v, **kwargs):
-        """Remote version of addCookie; same interface.
         """
+        Remote version of addCookie; same interface.
+        """
         self.addCookie(k, v, **kwargs)
 
     def view_setHeader(self, issuer, k, v):
-        """Remote version of setHeader; same interface.
         """
+        Remote version of setHeader; same interface.
+        """
         self.setHeader(k, v)
 
     def view_setLastModified(self, issuer, when):
-        """Remote version of setLastModified; same interface.
         """
+        Remote version of setLastModified; same interface.
+        """
         self.setLastModified(when)
 
     def view_setETag(self, issuer, tag):
-        """Remote version of setETag; same interface.
         """
+        Remote version of setETag; same interface.
+        """
         self.setETag(tag)
 
     def view_setResponseCode(self, issuer, code):
-        """Remote version of setResponseCode; same interface.
         """
+        Remote version of setResponseCode; same interface.
+        """
         self.setResponseCode(code)
 
     def view_registerProducer(self, issuer, producer, streaming):
-        """Remote version of registerProducer; same interface.
+        """
+        Remote version of registerProducer; same interface.
         (requires a remote producer.)
         """
         self.registerProducer(_RemoteProducerWrapper(producer), streaming)
@@ -378,7 +389,7 @@
 
 class Session(components.Componentized):
     """
-    A user's session with a system.
+    A user\'s session with a system.
 
     This utility class contains no functionality, but is used to
     represent a session.
@@ -456,7 +467,7 @@
         """
         Is it time for me to expire?
 
-        If I haven't been touched in fifteen minutes, I will call my
+        If I haven\'t been touched in fifteen minutes, I will call my
         expire method.
         """
         # If I haven't been touched in 15 minutes:
@@ -547,7 +558,7 @@
 
     def getChildWithDefault(self, pathEl, request):
         """
-        Emulate a resource's getChild method.
+        Emulate a resource\'s getChild method.
         """
         request.site = self
         return self.resource.getChildWithDefault(pathEl, request)
