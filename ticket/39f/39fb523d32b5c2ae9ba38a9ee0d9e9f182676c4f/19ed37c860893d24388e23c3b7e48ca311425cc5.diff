Index: web/http.py
===================================================================
--- web/http.py	(revision 21999)
+++ web/http.py	(working copy)
@@ -195,7 +195,9 @@
 
 
 def parse_qs(qs, keep_blank_values=0, strict_parsing=0, unquote=unquote):
-    """like cgi.parse_qs, only with custom unquote function"""
+    """
+    like cgi.parse_qs, only with custom unquote function
+    """
     d = {}
     items = [s2 for s1 in qs.split("&") for s2 in s1.split(";")]
     for item in items:
@@ -215,7 +217,9 @@
     return d
 
 def datetimeToString(msSinceEpoch=None):
-    """Convert seconds since epoch to HTTP datetime string."""
+    """
+    Convert seconds since epoch to HTTP datetime string.
+    """
     if msSinceEpoch == None:
         msSinceEpoch = time.time()
     year, month, day, hh, mm, ss, wd, y, z = time.gmtime(msSinceEpoch)
@@ -226,7 +230,9 @@
     return s
 
 def datetimeToLogString(msSinceEpoch=None):
-    """Convert seconds since epoch to log datetime string."""
+    """
+    Convert seconds since epoch to log datetime string.
+    """
     if msSinceEpoch == None:
         msSinceEpoch = time.time()
     year, month, day, hh, mm, ss, wd, y, z = time.gmtime(msSinceEpoch)
@@ -263,7 +269,9 @@
         _resetLogDateTimeID.cancel()
 
 def timegm(year, month, day, hour, minute, second):
-    """Convert time tuple in GMT to seconds since epoch, GMT"""
+    """
+    Convert time tuple in GMT to seconds since epoch, GMT
+    """
     EPOCH = 1970
     assert year >= EPOCH
     assert 1 <= month <= 12
@@ -279,7 +287,9 @@
     return seconds
 
 def stringToDatetime(dateString):
-    """Convert an HTTP date string (one of three formats) to seconds since epoch."""
+    """
+    Convert an HTTP date string (one of three formats) to seconds since epoch.
+    """
     parts = dateString.split()
 
     if not parts[0][0:3].lower() in weekdayname_lower:
@@ -329,13 +339,16 @@
     return int(timegm(year, month, day, hour, min, sec))
 
 def toChunk(data):
-    """Convert string to a chunk.
+    """
+    Convert string to a chunk.
 
-    @returns: a tuple of strings representing the chunked encoding of data"""
+    @returns: a tuple of strings representing the chunked encoding of data
+    """
     return ("%x\r\n" % len(data), data, "\r\n")
 
 def fromChunk(data):
-    """Convert chunk to string.
+    """
+    Convert chunk to string.
 
     @returns: tuple (result, remaining), may raise ValueError.
     """
@@ -349,9 +362,10 @@
 
 
 def parseContentRange(header):
-    """Parse a content-range header into (start, end, realLength).
+    """
+    Parse a content-range header into (start, end, realLength).
 
-    realLength might be None if real length is not known ('*').
+    realLength might be None if real length is not known (\'*\').
     """
     kind, other = header.strip().split()
     if kind.lower() != "bytes":
@@ -368,7 +382,7 @@
 class StringTransport:
     """
     I am a StringIO wrapper that conforms for the transport API. I support
-    the `writeSequence' method.
+    the `writeSequence\' method.
     """
     def __init__(self):
         self.s = StringIO()
@@ -379,11 +393,12 @@
 
 
 class HTTPClient(basic.LineReceiver):
-    """A client for HTTP 1.0
+    """
+    A client for HTTP 1.0
 
     Notes:
-    You probably want to send a 'Host' header with the name of
-    the site you're connecting to, in order to not break name
+    You probably want to send a \'Host\' header with the name of
+    the site you\'re connecting to, in order to not break name
     based virtual hosting.
     """
     length = None
@@ -438,8 +453,26 @@
     def connectionMade(self):
         pass
 
-    handleStatus = handleHeader = handleEndHeaders = lambda *args: None
+    def handleStatus(self, version, status, message):
+        """
+        Called when the status-line is received.
 
+        @param version: e.g. \'HTTP/1.0\'
+        @param status: e.g. \'200\'
+        @type status: str
+        @param message: e.g. \'OK\'
+        """
+
+    def handleHeader(self, key, val):
+        """
+        Called every time a header is received.
+        """
+
+    def handleEndHeaders(self):
+        """
+        Called when all headers have been received.
+        """
+
     def rawDataReceived(self, data):
         if self.length is not None:
             data, rest = data[:self.length], data[self.length:]
@@ -456,7 +489,8 @@
 NO_BODY_CODES = (204, 304)
 
 class Request:
-    """A HTTP request.
+    """
+    A HTTP request.
 
     Subclasses should override the process() method to determine how
     the request will be processed.
@@ -467,7 +501,7 @@
     @ivar args: All of the arguments, including URL and POST arguments.
     @type args: A mapping of strings (the argument names) to lists of values.
                 i.e., ?foo=bar&foo=baz&quux=spam results in
-                {'foo': ['bar', 'baz'], 'quux': ['spam']}.
+                {\'foo\': [\'bar\', \'baz\'], \'quux\': [\'spam\']}.
     @ivar received_headers: All received headers
     """
 
@@ -489,7 +523,7 @@
 
     def __init__(self, channel, queued):
         """
-        @param channel: the channel we're connected to.
+        @param channel: the channel we\'re connected to.
         @param queued: are we in the request queue, or can we start writing to
             the transport?
         """
@@ -506,7 +540,9 @@
             self.transport = self.channel.transport
 
     def _cleanup(self):
-        """Called when have finished responding and are no longer queued."""
+        """
+        Called when have finished responding and are no longer queued.
+        """
         if self.producer:
             log.err(RuntimeError("Producer was not unregistered for %s" % self.uri))
             self.unregisterProducer()
@@ -522,7 +558,8 @@
     # methods for channel - end users should not use these
 
     def noLongerQueued(self):
-        """Notify the object that it is no longer queued.
+        """
+        Notify the object that it is no longer queued.
 
         We start writing whatever data we have to the transport, etc.
 
@@ -548,7 +585,8 @@
             self._cleanup()
 
     def gotLength(self, length):
-        """Called when HTTP channel got length of content in this request.
+        """
+        Called when HTTP channel got length of content in this request.
 
         This method is not intended for users.
         """
@@ -558,9 +596,11 @@
             self.content = tempfile.TemporaryFile()
 
     def parseCookies(self):
-        """Parse cookie headers.
+        """
+        Parse cookie headers.
 
-        This method is not intended for users."""
+        This method is not intended for users.
+        """
         cookietxt = self.getHeader("cookie")
         if cookietxt:
             for cook in cookietxt.split(';'):
@@ -572,14 +612,16 @@
                     pass
 
     def handleContentChunk(self, data):
-        """Write a chunk of data.
+        """
+        Write a chunk of data.
 
         This method is not intended for users.
         """
         self.content.write(data)
 
     def requestReceived(self, command, path, version):
-        """Called by channel when all data has been received.
+        """
+        Called by channel when all data has been received.
 
         This method is not intended for users.
         """
@@ -631,7 +673,8 @@
         return '<%s %s %s>'% (self.method, self.uri, self.clientproto)
 
     def process(self):
-        """Override in subclasses.
+        """
+        Override in subclasses.
 
         This method is not intended for users.
         """
@@ -641,7 +684,9 @@
     # consumer interface
 
     def registerProducer(self, producer, streaming):
-        """Register a producer."""
+        """
+        Register a producer.
+        """
         if self.producer:
             raise ValueError, "registering producer %s before previous one (%s) was unregistered" % (producer, self.producer)
 
@@ -654,7 +699,9 @@
             self.transport.registerProducer(producer, streaming)
 
     def unregisterProducer(self):
-        """Unregister the producer."""
+        """
+        Unregister the producer.
+        """
         if not self.queued:
             self.transport.unregisterProducer()
         self.producer = None
@@ -669,17 +716,21 @@
     # writing to.
 
     def getHeader(self, key):
-        """Get a header that was sent from the network.
         """
+        Get a header that was sent from the network.
+        """
         return self.received_headers.get(key.lower())
 
     def getCookie(self, key):
-        """Get a cookie that was sent from the network.
         """
+        Get a cookie that was sent from the network.
+        """
         return self.received_cookies.get(key)
 
     def finish(self):
-        """We are finished writing data."""
+        """
+        We are finished writing data.
+        """
         if self.finished:
             warnings.warn("Warning! request.finish called twice.", stacklevel=2)
             return
@@ -754,7 +805,8 @@
                 self.transport.write(data)
 
     def addCookie(self, k, v, expires=None, domain=None, path=None, max_age=None, comment=None, secure=None):
-        """Set an outgoing HTTP cookie.
+        """
+        Set an outgoing HTTP cookie.
 
         In general, you should consider using sessions instead of cookies, see
         twisted.web.server.Request.getSession and the
@@ -776,8 +828,9 @@
         self.cookies.append(cookie)
 
     def setResponseCode(self, code, message=None):
-        """Set the HTTP response code.
         """
+        Set the HTTP response code.
+        """
         self.code = code
         if message:
             self.code_message = message
@@ -785,12 +838,14 @@
             self.code_message = RESPONSES.get(code, "Unknown Status")
 
     def setHeader(self, k, v):
-        """Set an outgoing HTTP header.
         """
+        Set an outgoing HTTP header.
+        """
         self.headers[k.lower()] = v
 
     def redirect(self, url):
-        """Utility function that does a redirect.
+        """
+        Utility function that does a redirect.
 
         The request should have finish() called after this.
         """
@@ -798,7 +853,8 @@
         self.setHeader("location", url)
 
     def setLastModified(self, when):
-        """Set the X{Last-Modified} time for the response to this request.
+        """
+        Set the X{Last-Modified} time for the response to this request.
 
         If I am called more than once, I ignore attempts to set
         Last-Modified earlier, only replacing the Last-Modified time
@@ -830,9 +886,10 @@
         return None
 
     def setETag(self, etag):
-        """Set an X{entity tag} for the outgoing response.
+        """
+        Set an X{entity tag} for the outgoing response.
 
-        That's \"entity tag\" as in the HTTP/1.1 X{ETag} header, \"used
+        That\'s \"entity tag\" as in the HTTP/1.1 X{ETag} header, \"used
         for comparing two or more entities from the same requested
         resource.\"
 
@@ -861,7 +918,9 @@
         return None
 
     def getAllHeaders(self):
-        """Return dictionary of all headers the request received."""
+        """
+        Return dictionary of all headers the request received.
+        """
         return self.received_headers
 
     def getRequestHostname(self):
@@ -879,27 +938,29 @@
                 ).split(':')[0]
 
     def getHost(self):
-        """Get my originally requesting transport's host.
+        """
+        Get my originally requesting transport\'s host.
 
-        Don't rely on the 'transport' attribute, since Request objects may be
-        copied remotely.  For information on this method's return value, see
+        Don\'t rely on the \'transport\' attribute, since Request objects may be
+        copied remotely.  For information on this method\'s return value, see
         twisted.internet.tcp.Port.
         """
         return self.host
 
     def setHost(self, host, port, ssl=0):
-        """Change the host and port the request thinks it's using.
+        """
+        Change the host and port the request thinks it\'s using.
 
         This method is useful for working with reverse HTTP proxies (e.g.
-        both Squid and Apache's mod_proxy can do this), when the address
-        the HTTP client is using is different than the one we're listening on.
+        both Squid and Apache\'s mod_proxy can do this), when the address
+        the HTTP client is using is different than the one we\'re listening on.
 
         For example, Apache may be listening on https://www.example.com, and then
-        forwarding requests to http://localhost:8080, but we don't want HTML produced
-        by Twisted to say 'http://localhost:8080', they should say 'https://www.example.com',
+        forwarding requests to http://localhost:8080, but we don\'t want HTML produced
+        by Twisted to say \'http://localhost:8080\', they should say \'https://www.example.com\',
         so we do::
 
-           request.setHost('www.example.com', 443, ssl=1)
+           request.setHost(\'www.example.com\', 443, ssl=1)
 
         This method is experimental.
         """
@@ -923,7 +984,7 @@
         """
         Return True if this request is using a secure transport.
 
-        Normally this method returns True if this request's HTTPChannel
+        Normally this method returns True if this request\'s HTTPChannel
         instance is using a transport that implements ISSLTransport.
 
         This will also return True if setHost() has been called
@@ -1004,11 +1065,15 @@
         return names[0]
 
     def connectionLost(self, reason):
-        """connection was lost"""
+        """
+        connection was lost
+        """
         pass
 
 class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
-    """A receiver for HTTP requests."""
+    """
+    A receiver for HTTP requests.
+    """
 
     maxHeaders = 500 # max number of headers allowed per request
 
@@ -1077,8 +1142,9 @@
             self.__header = line
 
     def headerReceived(self, line):
-        """Do pre-processing (for content-length) and store this header away.
         """
+        Do pre-processing (for content-length) and store this header away.
+        """
         header, data = line.split(':', 1)
         header = header.lower()
         data = data.strip()
@@ -1126,7 +1192,9 @@
         req.gotLength(self.length)
 
     def checkPersistence(self, request, version):
-        """Check if the channel should close or not."""
+        """
+        Check if the channel should close or not.
+        """
         connection = request.getHeader('connection')
         if connection:
             tokens = map(str.lower, connection.split(' '))
@@ -1156,7 +1224,9 @@
             return 0
 
     def requestDone(self, request):
-        """Called by first request in queue when it is done."""
+        """
+        Called by first request in queue when it is done.
+        """
         if request != self.requests[0]: raise TypeError
         del self.requests[0]
 
@@ -1181,7 +1251,9 @@
 
 
 class HTTPFactory(protocol.ServerFactory):
-    """Factory for HTTP server."""
+    """
+    Factory for HTTP server.
+    """
 
     protocol = HTTPChannel
 
@@ -1217,7 +1289,9 @@
         _logDateTimeStop()
 
     def _openLogFile(self, path):
-        """Override in subclasses, e.g. to use twisted.python.logfile."""
+        """
+        Override in subclasses, e.g. to use twisted.python.logfile.
+        """
         f = open(path, "a", 1)
         return f
 
@@ -1230,7 +1304,9 @@
         return r[1:-1]
 
     def log(self, request):
-        """Log a request's result to the logfile, by default in combined log format."""
+        """
+        Log a request\'s result to the logfile, by default in combined log format.
+        """
         if hasattr(self, "logFile"):
             line = '%s - - %s "%s" %d %s "%s" "%s"\n' % (
                 request.getClientIP(),
