Index: twisted/python/test/test_shellcomp.py
===================================================================
--- twisted/python/test/test_shellcomp.py	(revision 33404)
+++ twisted/python/test/test_shellcomp.py	(working copy)
@@ -75,8 +75,12 @@
     # some scripts won't import or instantiate because of missing
     # dependencies (PyCrypto, etc) so we have to skip them.
     try:
-        o = reflect.namedAny(optionsFQPN)()
-    except Exception, e:
+        o = reflect.namedAny(optionsFQPN)()        
+    except Exception, e:        
+        # Added extra check. Not sure if placing the check here is correct
+        # Entire string 'No module named ...' is put as the exception due to which this block may be entered may not be ImportError
+        if "No module named pyasn1" in str(e) :
+	    raise unittest.SkipTest("Cannot run without PyASN1")
         raise unittest.SkipTest("Couldn't import or instantiate "
                                 "Options class: %s" % (e,))
 
Index: twisted/conch/test/test_conch.py
===================================================================
--- twisted/conch/test/test_conch.py	(revision 33404)
+++ twisted/conch/test/test_conch.py	(working copy)
@@ -45,6 +45,8 @@
     """
     if StdioInteractingSession is None:
         skip = _reason
+    if "pyasn1" in skip :  # Check only if pyasn1 is present in skip as _reason will only be set due to an ImportError
+        skip = "Cannot run without PyASN1"
 
     def test_eofReceived(self):
         """
@@ -266,7 +268,7 @@
         skip = "can't run w/o PyCrypto"
 
     if not pyasn1:
-        skip = "can't run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
     realmFactory = staticmethod(lambda: ConchTestRealm('testuser'))
 
Index: twisted/conch/test/test_transport.py
===================================================================
--- twisted/conch/test/test_transport.py	(revision 33404)
+++ twisted/conch/test/test_transport.py	(working copy)
@@ -21,7 +21,7 @@
     from twisted.conch.test import keydata
 else:
     if pyasn1 is None:
-        dependencySkip = "can't run w/o PyASN1"
+        dependencySkip = "Cannot run without PyASN1"
     elif Crypto is None:
         dependencySkip = "can't run w/o PyCrypto"
 
@@ -326,7 +326,7 @@
         skip = "cannot run w/o PyCrypto"
 
     if pyasn1 is None:
-        skip = "cannot run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
 
     def setUp(self):
@@ -1804,7 +1804,7 @@
         skip = "cannot run w/o PyCrypto"
 
     if pyasn1 is None:
-        skip = "cannot run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
 
     def test_init(self):
@@ -1913,7 +1913,7 @@
         skip = "cannot run w/o PyCrypto"
 
     if pyasn1 is None:
-        skip = "cannot run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
 
     def test_init(self):
@@ -1946,7 +1946,7 @@
         skip = "cannot run w/o PyCrypto"
 
     if pyasn1 is None:
-        skip = "cannot run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
 
     def _runClientServer(self, mod):
@@ -2128,7 +2128,7 @@
         skip = "cannot run w/o PyCrypto"
 
     if pyasn1 is None:
-        skip = "cannot run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
 
     def test_getPublicKeysWarning(self):
Index: twisted/conch/test/test_ssh.py
===================================================================
--- twisted/conch/test/test_ssh.py	(revision 33404)
+++ twisted/conch/test/test_ssh.py	(working copy)
@@ -536,7 +536,7 @@
         skip = "can't run w/o PyCrypto"
 
     if not pyasn1:
-        skip = "can't run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
     def _ourServerOurClientTest(self, name='session', **kwargs):
         """
@@ -825,7 +825,7 @@
         skip = "can't run w/o PyCrypto"
 
     if not pyasn1:
-        skip = "can't run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
     def makeSSHFactory(self, primes=None):
         sshFactory = factory.SSHFactory()
@@ -886,7 +886,7 @@
         skip = "can't run w/o PyCrypto"
 
     if not pyasn1:
-        skip = "can't run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
 
     def test_getMP(self):
Index: twisted/conch/test/test_keys.py
===================================================================
--- twisted/conch/test/test_keys.py	(revision 33404)
+++ twisted/conch/test/test_keys.py	(working copy)
@@ -31,7 +31,7 @@
     if Crypto is None:
         skip = "cannot run w/o PyCrypto"
     if pyasn1 is None:
-        skip = "cannot run w/o/ PyASN1"
+        skip = "Cannot run without PyASN1"
 
     def setUp(self):
         self._secureRandom = randbytes.secureRandom
@@ -105,7 +105,7 @@
     if Crypto is None:
         skip = "cannot run w/o PyCrypto"
     if pyasn1 is None:
-        skip = "cannot run w/o/ PyASN1"
+        skip = "Cannot run without PyASN1"
 
     def setUp(self):
         self.rsaObj = Crypto.PublicKey.RSA.construct((1L, 2L, 3L, 4L, 5L))
Index: twisted/conch/test/test_tap.py
===================================================================
--- twisted/conch/test/test_tap.py	(revision 33404)
+++ twisted/conch/test/test_tap.py	(working copy)
@@ -43,7 +43,7 @@
         skip = "can't run w/o PyCrypto"
 
     if not pyasn1:
-        skip = "can't run w/o PyASN1"
+        skip = "Cannot run without PyASN1"
 
     if not unix:
         skip = "can't run on non-posix computers"
Index: twisted/conch/test/test_scripts.py
===================================================================
--- twisted/conch/test/test_scripts.py	(revision 33404)
+++ twisted/conch/test/test_scripts.py	(working copy)
@@ -8,7 +8,7 @@
 try:
     import pyasn1
 except ImportError:
-    pyasn1Skip =  "can't run w/o PyASN1"
+    pyasn1Skip =  "Cannot run without PyASN1"
 else:
     pyasn1Skip = None
 
@@ -79,4 +79,5 @@
                    ('cftp', 'twisted.conch.scripts.cftp.ClientOptions'),
                    ('ckeygen', 'twisted.conch.scripts.ckeygen.GeneralOptions'),
                    ('tkconch', 'twisted.conch.scripts.tkconch.GeneralOptions'),
-                   ]
+                  ]
+    
