Index: twisted/words/protocols/jabber/component.py
===================================================================
--- twisted/words/protocols/jabber/component.py	(revision 17656)
+++ twisted/words/protocols/jabber/component.py	(working copy)
@@ -6,6 +6,9 @@
 
 from zope.interface import implements
 
+from twisted.application import service
+from twisted.python import components
+from twisted.internet import defer
 from twisted.words.xish import domish, xpath, utility
 from twisted.words.protocols.jabber import jstrports, xmlstream
 
@@ -13,6 +16,29 @@
     a = ConnectComponentAuthenticator(componentid, password)
     return xmlstream.XmlStreamFactory(a)
 
+class ComponentInitiatingInitializer(object):
+
+    def __init__(self, xs):
+        self.xmlstream = xs
+
+    def initialize(self):
+        # Create handshake
+        hs = domish.Element((self.xmlstream.namespace, "handshake"))
+        hs.addContent(xmlstream.hashPassword(self.xmlstream.sid,
+                                             self.xmlstream.authenticator.password))
+
+        # Setup observer to watch for handshake result
+        self.xmlstream.addOnetimeObserver("/handshake", self._cbHandshake)
+        self.xmlstream.send(hs)
+        self.deferred = defer.Deferred()
+        return self.deferred
+
+    def _cbHandshake(self, elem):
+        # we have successfully shaken hands and can now consider this
+        # entity to represent the component JID.
+        self.xmlstream.thisHost = self.xmlstream.otherHost
+        self.deferred.callback(None)
+
 class ConnectComponentAuthenticator(xmlstream.ConnectAuthenticator):
     """ Authenticator to permit an XmlStream to authenticate against a Jabber
     Server as a Component (where the Authenticator is initiating the stream).
@@ -36,34 +62,16 @@
         xmlstream.ConnectAuthenticator.__init__(self, componentjid)
         self.password = password
 
-    def streamStarted(self):
-        # Create handshake
-        hs = domish.Element(("jabber:component:accept", "handshake"))
-        hs.addContent(xmlstream.hashPassword(self.xmlstream.sid, self.password))
-
-        # Setup observer to watch for handshake result
-        self.xmlstream.addOnetimeObserver("/handshake", self._handshakeEvent)
-        self.xmlstream.send(hs)
-
     def associateWithStream(self, xs):
         xs.version = (0, 0)
-        xs.useTls = 0
         xmlstream.ConnectAuthenticator.associateWithStream(self, xs)
 
-    def _handshakeEvent(self, elem):
-        # we have successfully shaken hands and can now consider this
-        # entity to represent the component JID.
-        self.xmlstream.thisHost = self.xmlstream.otherHost
-        self.xmlstream.dispatch(self.xmlstream, xmlstream.STREAM_AUTHD_EVENT)
+        xs.initializers = [ComponentInitiatingInitializer(xs)]
 
 class ListenComponentAuthenticator(xmlstream.Authenticator):
     """ Placeholder for listening components """
     pass
 
-
-from twisted.application import service
-from twisted.python import components
-
 class IService(components.Interface):
     def componentConnected(self, xmlstream):
         """ Parent component has established a connection
