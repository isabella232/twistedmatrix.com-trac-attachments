diff -r 8b2a31d7b349 twisted/cred/portal.py
--- a/twisted/cred/portal.py	Mon Mar 12 11:27:27 2007 +0100
+++ b/twisted/cred/portal.py	Wed Mar 14 17:44:36 2007 +0100
@@ -102,12 +102,11 @@ class Portal:
         this will not be in connectionLost (such as in a web-based session), it
         will always be at the end of a user's interactive session.
         """
-        ifac = providedBy(credentials)
-        for i in ifac:
-            c = self.checkers.get(i)
-            if c is not None:
-                return maybeDeferred(c.requestAvatarId, credentials
+        for i in self.checkers:
+            if i.providedBy(credentials):
+                return maybeDeferred(self.checkers[i].requestAvatarId, credentials
                     ).addCallback(self.realm.requestAvatar, mind, *interfaces
                     )
+        ifac = providedBy(credentials)
         return defer.fail(failure.Failure(error.UnhandledCredentials(
             "No checker for %s" % ', '.join(map(reflect.qual, ifac)))))
diff -r 8b2a31d7b349 twisted/test/test_newcred.py
--- a/twisted/test/test_newcred.py	Mon Mar 12 11:27:27 2007 +0100
+++ b/twisted/test/test_newcred.py	Wed Mar 14 17:42:06 2007 +0100
@@ -51,6 +51,20 @@ class Testable(components.Adapter):
 # components.Interface(TestAvatar).adaptWith(Testable, ITestable)
 
 components.registerAdapter(Testable, TestAvatar, ITestable)
+
+class IDerivedCredentials(credentials.IUsernamePassword):
+    pass
+
+class DerivedCredentials(object):
+    implements(IDerivedCredentials, ITestable)
+
+    def __init__(self, username, password):
+        self.username = username
+        self.password = password
+
+    def checkPassword(self, password):
+        return password == self.password
+
 
 class TestRealm:
     implements(portal.IRealm)
@@ -101,6 +115,28 @@ class NewCredTest(unittest.TestCase):
         logout()
         self.failUnless(impl.original.loggedOut)
 
+    def test_derivedInterface(self):
+        """
+        Login with credentials implementing an interface inheriting from an
+        interface registered with a checker (but not itself registered).
+        """
+        l = []; f = []
+        self.portal.login(DerivedCredentials("bob", "hello"),
+                          self, ITestable).addCallback(
+            l.append).addErrback(f.append)
+        if f:
+            raise f[0]
+        iface, impl, logout = l[0]
+        # whitebox
+        self.assertEquals(iface, ITestable)
+        self.failUnless(iface.providedBy(impl),
+                        "%s does not implement %s" % (impl, iface))
+        # greybox
+        self.failUnless(impl.original.loggedIn)
+        self.failUnless(not impl.original.loggedOut)
+        logout()
+        self.failUnless(impl.original.loggedOut)
+
     def testFailedLogin(self):
         l = []
         self.portal.login(credentials.UsernamePassword("bob", "h3llo"),
@@ -177,7 +213,7 @@ class OnDiskDatabaseTestCase(unittest.Te
             [defer.maybeDeferred(db.requestAvatarId, c) for c in creds])
         d.addCallback(self.assertEquals, [u for u, p in self.users])
         return d
-    
+
     def testRequestAvatarId_hashed(self):
         dbfile = self.mktemp()
         db = checkers.FilePasswordDB(dbfile, caseSensitive=0)
@@ -236,7 +272,7 @@ class HashedPasswordOnDiskDatabaseTestCa
                                 for c in badCreds], consumeErrors=True)
         d.addCallback(self._assertFailures, error.UnauthorizedLogin)
         return d
-    
+
     def testHashedCredentials(self):
         hashedCreds = [credentials.UsernameHashedPassword(u, crypt(p, u[:2]))
                        for u, p in self.users]
@@ -255,7 +291,7 @@ class HashedPasswordOnDiskDatabaseTestCa
         skip = "crypt module not available"
 
 class PluggableAuthenticationModulesTest(unittest.TestCase):
-    
+
     def setUpClass(self):
         self._oldCallIntoPAM = pamauth.callIntoPAM
         pamauth.callIntoPAM = self.callIntoPAM
