diff --git a/twisted/trial/_synctest.py b/twisted/trial/_synctest.py
index a71c98e..4e4b99e 100644
--- a/twisted/trial/_synctest.py
+++ b/twisted/trial/_synctest.py
@@ -358,7 +358,7 @@ class _Assertions(pyunit.TestCase, object):
     failUnlessEqual = failUnlessEquals = assertEquals = assertEqual
 
 
-    def assertIdentical(self, first, second, msg=None):
+    def assertIs(self, first, second, msg=None):
         """
         Fail the test if C{first} is not C{second}.  This is an
         obect-identity-equality test, not an object equality
@@ -370,10 +370,10 @@ class _Assertions(pyunit.TestCase, object):
         if first is not second:
             raise self.failureException(msg or '%r is not %r' % (first, second))
         return first
-    failUnlessIdentical = assertIdentical
+    failUnlessIdentical = assertIdentical = assertIs
 
 
-    def assertNotIdentical(self, first, second, msg=None):
+    def assertIsNot(self, first, second, msg=None):
         """
         Fail the test if C{first} is C{second}.  This is an
         obect-identity-equality test, not an object equality
@@ -385,7 +385,7 @@ class _Assertions(pyunit.TestCase, object):
         if first is second:
             raise self.failureException(msg or '%r is %r' % (first, second))
         return first
-    failIfIdentical = assertNotIdentical
+    failIfIdentical = assertNotIdentical = assertIsNot
 
 
     def assertNotEqual(self, first, second, msg=None):
diff --git a/twisted/trial/test/test_assertions.py b/twisted/trial/test/test_assertions.py
index 1f80343..d320580 100644
--- a/twisted/trial/test/test_assertions.py
+++ b/twisted/trial/test/test_assertions.py
@@ -507,6 +507,40 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
                               self.failIfSubstring, x, z)
 
 
+    def test_assertIs(self):
+        """
+        L{assertIs} passes if two objects are identical.
+        """
+        a = MockEquality("first")
+        self.assertIs(a, a)
+
+
+    def test_assertIsError(self):
+        """
+        L{assertIs} fails if two objects are not identical.
+        """
+        a, b = MockEquality("first"), MockEquality("first")
+        self.assertEqual(a, b)
+        self.assertRaises(self.failureException, self.assertIs, a, b)
+
+
+    def test_assertIsNot(self):
+        """
+        L{assertIsNot} passes if two objects are not identical.
+        """
+        a, b = MockEquality("first"), MockEquality("first")
+        self.assertEqual(a, b)
+        self.assertIsNot(a, b)
+
+
+    def test_assertIsNotError(self):
+        """
+        L{assertIsNot} fails if two objects are identical.
+        """
+        a = MockEquality("first")
+        self.assertRaises(self.failureException, self.assertIsNot, a, a)
+
+
     def test_assertIsInstance(self):
         """
         Test a true condition of assertIsInstance.
