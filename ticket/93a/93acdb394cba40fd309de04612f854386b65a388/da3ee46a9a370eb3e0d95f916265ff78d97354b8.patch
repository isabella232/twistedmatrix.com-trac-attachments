diff --git a/twisted/topfiles/6350.feature b/twisted/topfiles/6350.feature
new file mode 100644
index 0000000..7d19d43
--- /dev/null
+++ b/twisted/topfiles/6350.feature
@@ -0,0 +1 @@
+trial test cases now support assertIs, assertIsNot, assertIsNone, and assertIsNotNone.
diff --git a/twisted/trial/_synctest.py b/twisted/trial/_synctest.py
index 45708eb..ef534ce 100644
--- a/twisted/trial/_synctest.py
+++ b/twisted/trial/_synctest.py
@@ -358,7 +358,7 @@ class _Assertions(pyunit.TestCase, object):
     failUnlessEqual = failUnlessEquals = assertEquals = assertEqual
 
 
-    def assertIdentical(self, first, second, msg=None):
+    def assertIs(self, first, second, msg=None):
         """
         Fail the test if C{first} is not C{second}.  This is an
         obect-identity-equality test, not an object equality
@@ -370,10 +370,10 @@ class _Assertions(pyunit.TestCase, object):
         if first is not second:
             raise self.failureException(msg or '%r is not %r' % (first, second))
         return first
-    failUnlessIdentical = assertIdentical
+    failUnlessIdentical = assertIdentical = assertIs
 
 
-    def assertNotIdentical(self, first, second, msg=None):
+    def assertIsNot(self, first, second, msg=None):
         """
         Fail the test if C{first} is C{second}.  This is an
         obect-identity-equality test, not an object equality
@@ -385,7 +385,35 @@ class _Assertions(pyunit.TestCase, object):
         if first is second:
             raise self.failureException(msg or '%r is %r' % (first, second))
         return first
-    failIfIdentical = assertNotIdentical
+    failIfIdentical = assertNotIdentical = assertIsNot
+
+
+    def assertIsNone(self, thing, msg=None):
+        """
+        Assert that C{thing} is None.
+
+        This is an obect-identity-equality test, not an object equality
+        (i.e. C{__eq__}) test.
+
+        @param msg: if msg is None, then the failure message will be
+        '%r is not None' % (thing,)
+        """
+        self.assertIs(thing, None, msg=msg)
+
+
+    def assertIsNotNone(self, thing, msg=None):
+        """
+        Assert that C{thing} is not None.
+
+        This is an obect-identity-equality test, not an object equality
+        (i.e. C{__eq__}) test.
+
+        @param msg: if msg is None, then the failure message will be
+        'unexpectedly None'
+        """
+        if msg is None:
+            msg = "unexpectedly None"
+        self.assertIsNot(thing, None, msg=msg)
 
 
     def assertNotEqual(self, first, second, msg=None):
diff --git a/twisted/trial/test/test_assertions.py b/twisted/trial/test/test_assertions.py
index 788cee0..047ce46 100644
--- a/twisted/trial/test/test_assertions.py
+++ b/twisted/trial/test/test_assertions.py
@@ -507,6 +507,87 @@ class TestSynchronousAssertions(unittest.SynchronousTestCase):
                               self.failIfSubstring, x, z)
 
 
+    def test_assertIs(self):
+        """
+        Test a true condition of L{assertIs}.
+        """
+        a = object()
+        self.assertIs(a, a)
+
+
+    def test_assertIsError(self):
+        """
+        Test an error with L{assertIs}.
+        """
+        a, b = object(), object()
+        self.assertRaises(self.failureException, self.assertIs, a, b)
+
+
+    def test_assertIsNot(self):
+        """
+        Test a true condition of L{assertIsNot}.
+        """
+        a, b = object(), object()
+        self.assertIsNot(a, b)
+
+
+    def test_assertIsNotError(self):
+        """
+        Test an error with L{assertIsNot}.
+        """
+        a = object()
+        self.assertRaises(self.failureException, self.assertIsNot, a, a)
+
+
+    def test_assertIsNone(self):
+        """
+        Test a true condition of L{assertIsNone}.
+        """
+        self.assertIsNone(None)
+
+
+    def test_assertIsNoneError(self):
+        """
+        Test an error with L{assertIsNone}.
+        """
+        exc = self.assertRaises(self.failureException, self.assertIsNone, True)
+        self.assertEqual(str(exc), "%r is not None" % (True,))
+
+
+    def test_assertIsNoneCustomMessage(self):
+        """
+        Test the default message of L{assertIsNone}.
+        """
+        exc = self.assertRaises(
+            self.failureException, self.assertIsNone, True, msg="Hello")
+        self.assertEqual(str(exc), "Hello")
+
+
+    def test_assertIsNotNone(self):
+        """
+        Test a true condition of L{assertIsNotNone}.
+        """
+        self.assertIsNotNone(False)
+
+
+    def test_assertIsNotNoneError(self):
+        """
+        Test an error with L{assertIsNotNone}.
+        """
+        exc = self.assertRaises(
+            self.failureException, self.assertIsNotNone, None)
+        self.assertEqual(str(exc), "unexpectedly None")
+
+
+    def test_assertIsNotNoneCustomMessage(self):
+        """
+        Test the default message of L{assertIsNotNone}.
+        """
+        exc = self.assertRaises(
+            self.failureException, self.assertIsNotNone, None, msg="Hello")
+        self.assertEqual(str(exc), "Hello")
+
+
     def test_assertIsInstance(self):
         """
         Test a true condition of assertIsInstance.
