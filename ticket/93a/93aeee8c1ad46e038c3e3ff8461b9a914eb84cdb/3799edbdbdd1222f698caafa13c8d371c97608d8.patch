Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(revision 28756)
+++ twisted/test/test_amp.py	(working copy)
@@ -6,6 +6,9 @@
 Tests for L{twisted.protocols.amp}.
 """
 
+import datetime
+import decimal
+
 from zope.interface.verify import verifyObject
 
 from twisted.python.util import setIDFunction
@@ -2595,8 +2598,139 @@
         "single": [u"foo"],
         "multiple": [u"\N{SNOWMAN}", u"Hello", u"world"]}
 
+class ListOfDecimalTests(unittest.TestCase, ListOfTestsMixin):
+    """
+    Tests for L{ListOf} combined with L{decimal.Decimal}.
+    """
+    elementType = amp.Decimal()
 
+    strings = {
+        "empty": "",
+        "single": "\x00\x031.1",
+        "extreme": "\x00\x08Infinity\x00\x09-Infinity",
+        "scientist": "\x00\x083.141E+5\x00\x0a0.00003141\x00\x083.141E-7"
+                     "\x00\x09-3.141E+5\x00\x0b-0.00003141\x00\x09-3.141E-7",
+        "engineer": "\x00\x04%s\x00\x06%s" % (
+            decimal.Decimal("0e6").to_eng_string(),
+            decimal.Decimal("1.5E-9").to_eng_string()),
+    }
 
+    objects = {
+        "empty": [],
+        "single": [decimal.Decimal("1.1")],
+        "extreme": [
+            decimal.Decimal("Infinity"),
+            decimal.Decimal("-Infinity"),
+        ],
+        # exarkun objected to AMP supporting engineering notation because
+        # it was redundant, until we realised that 1E6 has less precision
+        # than 1000000 and is represented differently.  But they compare
+        # and even hash equally.  There were tears.
+        "scientist": [
+            decimal.Decimal("3.141E5"),
+            decimal.Decimal("3.141e-5"),
+            decimal.Decimal("3.141E-7"),
+            decimal.Decimal("-3.141e5"),
+            decimal.Decimal("-3.141E-5"),
+            decimal.Decimal("-3.141e-7"),
+        ],
+        "engineer": [
+            decimal.Decimal("0e6"),
+            decimal.Decimal("1.5E-9"),
+        ],
+     }
+
+# NaN is never equal to itself, so we cannot use the Mixin
+class DecimalNanTests(unittest.TestCase, ListOfTestsMixin):
+    elementType = amp.Decimal()
+
+    strings = {
+        "nan": "\x00\x03NaN\x00\x04-NaN\x00\x04sNaN\x00\x05-sNaN",
+    }
+
+    objects = {
+        "nan": [
+            decimal.Decimal("NaN"),
+            decimal.Decimal("-NaN"),
+            decimal.Decimal("sNaN"),
+            decimal.Decimal("-sNaN"),
+        ]
+    }
+
+    def test_fromBox(self):
+        # since this compares objects and one NaN is not another NaN, we
+        # override this method
+        """
+        L{ListOf.fromBox} reverses the operation performed by L{ListOf.toBox}.
+        """
+        stringList = amp.ListOf(self.elementType)
+        objects = {}
+        for key in self.strings:
+            stringList.fromBox(key, self.strings.copy(), objects, None)
+        n = objects["nan"]
+        self.failUnless(n[0].is_qnan() and not n[0].is_signed())
+        self.failUnless(n[1].is_qnan() and n[1].is_signed())
+        self.failUnless(n[2].is_snan() and not n[2].is_signed())
+        self.failUnless(n[3].is_snan() and n[3].is_signed())
+
+class DateTimeTests(unittest.TestCase, ListOfTestsMixin):
+    elementType = amp.DateTime()
+
+    strings = {
+        "christmas": 
+            "\x00\x202010-12-25T00:00:00.000000-00:00"
+            "\x00\x202010-12-25T00:00:00.000000-00:00",
+        "christmas in eu": "\x00\x202010-12-25T00:00:00.000000+01:00",
+        "christmas in iran": "\x00\x202010-12-25T00:00:00.000000+03:30",
+        "christmas in nyc": "\x00\x202010-12-25T00:00:00.000000-05:00",
+        "previous tests": "\x00\x202010-12-25T00:00:00.000000+03:19"
+                          "\x00\x202010-12-25T00:00:00.000000-06:59",
+    }
+
+    objects = {
+        "christmas": [
+            datetime.datetime(2010, 12, 25, 0, 0, 0, tzinfo=amp.UTCtzinfo),
+            datetime.datetime(2010, 12, 25, 0, 0, 0,
+                tzinfo=amp._FixedOffsetTZInfo('+', 0, 0)),
+        ],
+        "christmas in eu": [
+            datetime.datetime(2010, 12, 25, 0, 0, 0,
+                tzinfo=amp._FixedOffsetTZInfo('+', 1, 0)),
+        ],
+        "christmas in iran": [
+            datetime.datetime(2010, 12, 25, 0, 0, 0,
+                tzinfo=amp._FixedOffsetTZInfo('+', 3, 30)),
+        ],
+        "christmas in nyc": [
+            datetime.datetime(2010, 12, 25, 0, 0, 0,
+                tzinfo=amp._FixedOffsetTZInfo('-', 5, 0)),
+        ],
+        "previous tests": [
+            datetime.datetime(2010, 12, 25, 0, 0, 0,
+                tzinfo=amp._FixedOffsetTZInfo('+', 3, 19)),
+            datetime.datetime(2010, 12, 25, 0, 0, 0,
+                tzinfo=amp._FixedOffsetTZInfo('-', 6, 59)),
+        ],
+    }
+
+class BadDateTest(unittest.TestCase):
+    def test_wrongLength(self):
+        d = amp.DateTime()
+        self.assertRaises(ValueError, d.fromString, 'abc')
+
+        d = amp.DateTime()
+        self.assertRaises(ValueError, d.toString,
+            datetime.datetime(2010, 12, 25, 0, 0, 0))
+
+
+class FixedOffsetTest(unittest.TestCase):
+    def test_tzName(self):
+        utc = amp.UTCtzinfo
+        self.assertEquals(utc.tzname(None), '+00:00')
+
+    def test_badSign(self):
+        self.assertRaises(ValueError, amp._FixedOffsetTZInfo, '?', 0, 0)
+
 if not interfaces.IReactorSSL.providedBy(reactor):
     skipMsg = 'This test case requires SSL support in the reactor'
     TLSTest.skip = skipMsg
Index: twisted/protocols/amp.py
===================================================================
--- twisted/protocols/amp.py	(revision 28756)
+++ twisted/protocols/amp.py	(working copy)
@@ -164,6 +164,7 @@
 
 from cStringIO import StringIO
 from struct import pack
+import decimal, datetime, re
 
 from zope.interface import Interface, implements
 
@@ -2391,3 +2392,99 @@
     for argname, argparser in arglist:
         argparser.toBox(argname, strings, myObjects, proto)
     return strings
+
+class _FixedOffsetTZInfo(datetime.tzinfo):
+    '''"Timezones? What timezones?" -- Python standard library'''
+
+    def __init__(self, sign, hours, minutes):
+        self.name = '%s%02i:%02i' % (sign, hours, minutes)
+        if sign == '-':
+            hours = -hours
+            minutes = -minutes
+        elif sign != '+':
+            raise ValueError, 'invalid sign for timezone %r' % (sign,)
+        self.offset = datetime.timedelta(hours=hours, minutes=minutes)
+
+    def utcoffset(self, dt):
+        return self.offset
+
+    def dst(self, dt):
+        return datetime.timedelta(0)
+
+    def tzname(self, dt):
+        return self.name
+
+
+UTCtzinfo = _FixedOffsetTZInfo('+', 0, 0)
+
+
+class Decimal(Argument):
+    '''Encodes decimal.Decimal.
+    
+    Encoding on the wire is done with str() and Decimal(), which works great
+    for python, but may not be the greatest considering interoperability with
+    other decimal types. Someone should look at Decimal.__str__ and see if it
+    is specified sufficiently well to be implemented elsewhere.
+    '''
+    fromString = decimal.Decimal
+    def toString(self, inObject):
+        return str(decimal.Decimal(inObject))
+
+
+class DateTime(Argument):
+    '''Encodes datetime.DateTime.
+    
+    Wire format: '%04i-%02i-%02iT%02i:%02i:%02i.%06i%s%02i:%02i'. Fields in
+    order are: year, month, day, hour, minute, second, microsecond, timezone
+    direction (+ or -), timezone hour, timezone minute. Encoded string is
+    always exactly 32 characters long. This format is compatible with ISO 8601,
+    but that does not mean all ISO 8601 dates can be accepted.
+
+    Also, note that the datetime module's notion of a "timezone" can be
+    complex, but the wire format includes only a fixed offset, so the
+    conversion is not lossless. A lossless transmission of a DateTime instance
+    is not feasible since the receiving end would require a python interpreter.
+    '''
+    def fromString(self, s):
+        if len(s) != 32:
+            raise ValueError, 'invalid date format %r' % (s,)
+
+        # strptime doesn't have any way to parse the microseconds or timezone
+
+        date, timeAndZone = s.split('T', 1)
+        time, zoneSign, zone = re.split(r'(\+|-)', timeAndZone, 2)
+        year, month, day = map(int, date.split('-'))
+        hour, minute, secondAndMicrosecond = time.split(':', 2)
+        hour = int(hour)
+        minute = int(minute)
+        second, microsecond = map(int, secondAndMicrosecond.split('.', 1))
+        zoneHour, zoneMinute = map(int, zone.split(':', 2))
+
+        return datetime.datetime(year, month, day, hour, minute, second, microsecond, _FixedOffsetTZInfo(zoneSign, zoneHour, zoneMinute))
+
+    def toString(self, i):
+        offset = i.utcoffset()
+        if offset is None:
+            raise ValueError, 'datetimes going through AMP must have an associated timezone. You may find amp.UTCtzinfo useful.'
+
+        minutesOffset = (offset.days * 86400 + offset.seconds) // 60
+
+        if minutesOffset > 0:
+            sign = '+'
+        else:
+            sign = '-'
+
+        # strftime has no way to format the microseconds, or put a ':' in the
+        # timezone. Suprise!
+
+        return '%04i-%02i-%02iT%02i:%02i:%02i.%06i%s%02i:%02i' % (
+            i.year,
+            i.month,
+            i.day,
+            i.hour,
+            i.minute,
+            i.second,
+            i.microsecond,
+            sign,
+            abs(minutesOffset) // 60,
+            abs(minutesOffset) % 60)
