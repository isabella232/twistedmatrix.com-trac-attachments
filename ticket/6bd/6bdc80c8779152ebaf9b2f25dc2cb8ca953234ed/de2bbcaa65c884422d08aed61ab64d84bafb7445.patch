Index: twisted/web2/static.py
===================================================================
--- twisted/web2/static.py	(revision 16850)
+++ twisted/web2/static.py	(working copy)
@@ -75,13 +75,20 @@
 
 class StaticRenderMixin(resource.RenderMixin, MetaDataMixin):
     def checkPreconditions(self, request):
-        http.checkPreconditions(
-            request,
-            entityExists = self.exists(),
-            etag         = self.etag(),
-            lastModified = self.lastModified(),
-        )
+        # This code replaces the code in resource.RenderMixin
+        if request.method not in ("GET", "HEAD"):
+            http.checkPreconditions(
+                request,
+                entityExists = self.exists(),
+                etag         = self.etag(),
+                lastModified = self.lastModified(),
+            )
 
+        # Check per-method preconditions
+        method = getattr(self, "preconditions_" + request.method, None)
+        if method:
+            method(request)
+
     def renderHTTP(self, request):
         """
         See L{resource.RenderMixIn.renderHTTP}.
Index: twisted/web2/resource.py
===================================================================
--- twisted/web2/resource.py	(revision 16850)
+++ twisted/web2/resource.py	(working copy)
@@ -32,8 +32,24 @@
         @param request: the request to process.
         @raise http.HTTPError: if any precondition fails.
         """
-        http.checkPreconditions(request)
+        #
+        # http.checkPreconditions() gets called by the server after every
+        # GET or HEAD request.
+        #
+        # For other methods, we need to know to bail out before request
+        # processing, especially for methods that modify server state (eg. PUT).
+        # We also would like to do so even for methods that don't, if those
+        # methods might be expensive to process.  We're assuming that GET and
+        # HEAD are not expensive.
+        #
+        if request.method not in ("GET", "HEAD"):
+            http.checkPreconditions(request)
 
+        # Check per-method preconditions
+        method = getattr(self, "preconditions_" + request.method, None)
+        if method:
+            method(request)
+
     def renderHTTP(self, request):
         """
         See L{iweb.IResource.renderHTTP}.
@@ -64,18 +80,7 @@
             response.headers.setHeader("allow", self.allowedMethods())
             return response
 
-        #
-        # http.checkPreconditions() gets called by the server after every
-        # GET or HEAD request.
-        #
-        # For other methods, we need to know to bail out before request
-        # processing, especially for methods that modify server state (eg. PUT).
-        # We also would like to do so even for methods that don't, if those
-        # methods might be expensive to process.  We're assuming that GET and
-        # HEAD are not expensive.
-        #
-        if request.method not in ("GET", "HEAD"):
-            self.checkPreconditions(request)
+        self.checkPreconditions(request)
 
         return method(request)
 
