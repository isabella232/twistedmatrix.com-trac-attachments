From 29a3bed043793e6bcc91b56a9888a0a6d23dd9f9 Mon Sep 17 00:00:00 2001
From: Michael Tharp <gxti@partiallystapled.com>
Date: Tue, 6 Jul 2010 22:45:26 -0400
Subject: [PATCH] Replace loop-like uses of map() function with loops. [python3]

---
 twisted/conch/insults/window.py      |    3 ++-
 twisted/conch/ssh/connection.py      |    3 ++-
 twisted/internet/process.py          |    3 ++-
 twisted/mail/mail.py                 |    3 ++-
 twisted/mail/relaymanager.py         |    6 ++++--
 twisted/mail/smtp.py                 |    3 ++-
 twisted/mail/test/test_imap.py       |    3 ++-
 twisted/mail/test/test_mail.py       |    6 ++++--
 twisted/mail/test/test_pop3client.py |    9 ++++++---
 twisted/python/shortcut.py           |   17 ++++++++---------
 twisted/test/proto_helpers.py        |    6 ++++--
 twisted/test/test_ftp.py             |    3 ++-
 twisted/topfiles/4555.misc           |    1 +
 twisted/trial/unittest.py            |    3 ++-
 twisted/web/test/test_web.py         |    3 ++-
 twisted/web2/test/test_http.py       |    2 +-
 twisted/words/protocols/irc.py       |    4 ++--
 twisted/words/protocols/toc.py       |    8 ++++----
 twisted/words/test/test_msn.py       |    9 ++++++---
 19 files changed, 58 insertions(+), 37 deletions(-)
 create mode 100644 twisted/topfiles/4555.misc

diff --git a/twisted/conch/insults/window.py b/twisted/conch/insults/window.py
index 51cdeba..19a8d25 100644
--- a/twisted/conch/insults/window.py
+++ b/twisted/conch/insults/window.py
@@ -359,7 +359,8 @@ class Packer(ContainerWidget):
         for n, ch in enumerate(self.children):
             boxes[n % len(boxes)].addChild(ch)
         h = HBox()
-        map(h.addChild, boxes)
+        for box in boxes:
+            h.addChild(box)
         h.render(width, height, terminal)
 
 
diff --git a/twisted/conch/ssh/connection.py b/twisted/conch/ssh/connection.py
index 65abf8d..e26149c 100644
--- a/twisted/conch/ssh/connection.py
+++ b/twisted/conch/ssh/connection.py
@@ -59,7 +59,8 @@ class SSHConnection(service.SSHService):
         """
         Called when the connection is stopped.
         """
-        map(self.channelClosed, self.channels.values())
+        for channel in self.channels.values():
+            self.channelClosed(channel)
         self._cleanupGlobalDeferreds()
 
 
diff --git a/twisted/internet/process.py b/twisted/internet/process.py
index f8d89d3..cfd07fc 100644
--- a/twisted/internet/process.py
+++ b/twisted/internet/process.py
@@ -586,7 +586,8 @@ class Process(_BaseProcess):
 
             self._fork(path, uid, gid, executable, args, environment, fdmap=fdmap)
         except:
-            map(os.close, _openedPipes)
+            for pipe in _openedPipes:
+                os.close(pipe)
             raise
 
         # we are the parent process:
diff --git a/twisted/mail/mail.py b/twisted/mail/mail.py
index 233c1b6..0ba11ab 100644
--- a/twisted/mail/mail.py
+++ b/twisted/mail/mail.py
@@ -259,7 +259,8 @@ class MailService(service.MultiService):
 
     def addDomain(self, name, domain):
         portal = cred.portal.Portal(domain)
-        map(portal.registerChecker, domain.getCredentialsCheckers())
+        for checker in domain.getCredentialsCheckers():
+            portal.registerChecker(checker)
         self.domains[name] = domain
         self.portals[name] = portal
         if self.aliases and IAliasableDomain.providedBy(domain):
diff --git a/twisted/mail/relaymanager.py b/twisted/mail/relaymanager.py
index 8cf4eda..ee51d2f 100644
--- a/twisted/mail/relaymanager.py
+++ b/twisted/mail/relaymanager.py
@@ -307,7 +307,8 @@ class _AttemptManager(object):
         if self.manager.queue.noisy:
             log.msg("Backing off on delivery of " + str(msgs))
         def setWaiting(queue, messages):
-            map(queue.setWaiting, messages)
+            for message in messages:
+                queue.setWating(message)
         from twisted.internet import reactor
         reactor.callLater(30, setWaiting, self.manager.queue, msgs)
         del self.manager.managed[relay]
@@ -436,7 +437,8 @@ class SmartHostSMTPRelayingManager:
         log.err('Error setting up managed relay factory for ' + domain)
         log.err(failure)
         def setWaiting(queue, messages):
-            map(queue.setWaiting, messages)
+            for message in messages:
+                queue.setWaiting(message)
         from twisted.internet import reactor
         reactor.callLater(30, setWaiting, self.queue, self.managed[factory])
         del self.managed[factory]
diff --git a/twisted/mail/smtp.py b/twisted/mail/smtp.py
index b8657e4..271457c 100644
--- a/twisted/mail/smtp.py
+++ b/twisted/mail/smtp.py
@@ -43,7 +43,8 @@ else:
     DNSNAME = socket.getfqdn()
 
 # Used for fast success code lookup
-SUCCESS = dict(map(None, range(200, 300), []))
+SUCCESS = dict.fromkeys(range(200, 300))
+
 
 class IMessageDelivery(Interface):
     def receivedHeader(helo, origin, recipients):
diff --git a/twisted/mail/test/test_imap.py b/twisted/mail/test/test_imap.py
index 5db82ab..a160aa6 100644
--- a/twisted/mail/test/test_imap.py
+++ b/twisted/mail/test/test_imap.py
@@ -4173,7 +4173,8 @@ class TLSTestCase(IMAP4HelperMixin, unittest.TestCase):
         self.client.requireTransportSecurity = True
 
         methods = [login, list, status, examine, logout]
-        map(self.connected.addCallback, map(strip, methods))
+        for method in methods:
+            self.connected.addCallback(strip(method))
         self.connected.addCallbacks(self._cbStopClient, self._ebGeneral)
         def check(ignored):
             self.assertEquals(self.server.startedTLS, True)
diff --git a/twisted/mail/test/test_mail.py b/twisted/mail/test/test_mail.py
index 56420c4..858b114 100644
--- a/twisted/mail/test/test_mail.py
+++ b/twisted/mail/test/test_mail.py
@@ -752,7 +752,8 @@ class VirtualPOP3TestCase(unittest.TestCase):
         self.S.addDomain('test.domain', self.D)
 
         portal = cred.portal.Portal(self.D)
-        map(portal.registerChecker, self.D.getCredentialsCheckers())
+        for checker in self.D.getCredentialsCheckers():
+            portal.registerChecker(checker)
         self.S.portals[''] = self.S.portals['test.domain'] = portal
 
         self.P = mail.protocols.VirtualPOP3()
@@ -1475,7 +1476,8 @@ class LiveFireExercise(unittest.TestCase):
         domain.addUser('user', 'password')
         service.addDomain('test.domain', domain)
         service.portals[''] = service.portals['test.domain']
-        map(service.portals[''].registerChecker, domain.getCredentialsCheckers())
+        for checker in domain.getCredentialsCheckers():
+            service.portals[''].registerChecker(checker)
 
         service.setQueue(mail.relay.DomainQueuer(service))
         manager = mail.relaymanager.SmartHostSMTPRelayingManager(service.queue, None)
diff --git a/twisted/mail/test/test_pop3client.py b/twisted/mail/test/test_pop3client.py
index e2c3b8d..1c155e6 100644
--- a/twisted/mail/test/test_pop3client.py
+++ b/twisted/mail/test/test_pop3client.py
@@ -471,10 +471,12 @@ class TLSServerFactory(protocol.ServerFactory):
         def connectionMade(self):
             self.factory.input = []
             self.output = self.output[:]
-            map(self.sendLine, self.output.pop(0))
+            for line in self.output.pop(0):
+                self.sendLine(line)
         def lineReceived(self, line):
             self.factory.input.append(line)
-            map(self.sendLine, self.output.pop(0))
+            for out in self.output.pop(0):
+                self.sendLine(out)
             if line == 'STLS':
                 self.transport.startTLS(self.context)
 
@@ -558,7 +560,8 @@ class POP3TimeoutTestCase(POP3HelperMixin, unittest.TestCase):
         pop3testserver.TIMEOUT_RESPONSE = True
 
         methods = [login, quit]
-        map(self.connected.addCallback, map(strip, methods))
+        for method in methods:
+            self.connected.addCallback(strip(method))
         self.connected.addCallback(self._cbStopClient)
         self.connected.addErrback(self._ebGeneral)
         return self.loopback()
diff --git a/twisted/python/shortcut.py b/twisted/python/shortcut.py
index 5465d86..0f9c794 100644
--- a/twisted/python/shortcut.py
+++ b/twisted/python/shortcut.py
@@ -46,15 +46,14 @@ class Shortcut:
             shell.CLSID_ShellLink, None,
             pythoncom.CLSCTX_INPROC_SERVER, shell.IID_IShellLink
         )
-        data = map(None, 
-                   ['"%s"' % os.path.abspath(path), arguments, description,
-                    os.path.abspath(workingdir), os.path.abspath(iconpath)], 
-                   ("SetPath", "SetArguments", "SetDescription",
-                   "SetWorkingDirectory") )
-        for value, function in data:
-            if value and function:
-                # call function on each non-null value
-                getattr(self, function)(value)
+        for function, value in [
+                (self.SetPath, '"%s"' % os.path.abspath(path)),
+                (self.SetArguments, arguments),
+                (self.SetDescription, description),
+                (self.SetWorkingDirectory, os.path.abspath(workingdir))]:
+            # call function on each non-null value
+            if value:
+                function(value)
         if iconpath:
             self.SetIconLocation(iconpath, iconidx)
 
diff --git a/twisted/test/proto_helpers.py b/twisted/test/proto_helpers.py
index 0a95f86..78dcdb7 100644
--- a/twisted/test/proto_helpers.py
+++ b/twisted/test/proto_helpers.py
@@ -72,11 +72,13 @@ class LineSendingProtocol(basic.LineReceiver):
 
     def connectionMade(self):
         if self.start:
-            map(self.sendLine, self.lines)
+            for line in self.lines:
+                self.sendLine(line)
 
     def lineReceived(self, line):
         if not self.start:
-            map(self.sendLine, self.lines)
+            for line in self.lines:
+                self.sendLine(line)
             self.lines = []
         self.response.append(line)
 
diff --git a/twisted/test/test_ftp.py b/twisted/test/test_ftp.py
index 8d65d97..e748966 100644
--- a/twisted/test/test_ftp.py
+++ b/twisted/test/test_ftp.py
@@ -1833,7 +1833,8 @@ class FTPClientTestCase(unittest.TestCase):
         d = self.client.removeFile("/tmp/test")
         response = ['250-perhaps a progress report',
                     '250 okay']
-        map(self.client.lineReceived, response)
+        for line in response:
+            self.client.lineReceived(line)
         return d.addCallback(self.assertTrue)
 
 
diff --git a/twisted/topfiles/4555.misc b/twisted/topfiles/4555.misc
new file mode 100644
index 0000000..32ad24b
--- /dev/null
+++ b/twisted/topfiles/4555.misc
@@ -0,0 +1 @@
+Several uses of map() as a loop construct have been replaced with regular "for" loops.
diff --git a/twisted/trial/unittest.py b/twisted/trial/unittest.py
index 3a30562..63fb8ea 100644
--- a/twisted/trial/unittest.py
+++ b/twisted/trial/unittest.py
@@ -973,7 +973,8 @@ class TestCase(_Assertions):
                     toFlush.append(aWarning)
                     break
             # Remove everything which is being flushed.
-            map(self._warnings.remove, toFlush)
+            for warn in toFlush:
+                self._warnings.remove(warn)
 
         return [
             {'message': w.message, 'category': w.category,
diff --git a/twisted/web/test/test_web.py b/twisted/web/test/test_web.py
index 0fde6ff..933962e 100644
--- a/twisted/web/test/test_web.py
+++ b/twisted/web/test/test_web.py
@@ -221,7 +221,8 @@ class DummyChannel:
             self.written.write(bytes)
 
         def writeSequence(self, iovec):
-            map(self.write, iovec)
+            for data in iovec:
+                self.write(data)
 
         def getHost(self):
             return IPv4Address("TCP", '10.0.0.1', self.port)
diff --git a/twisted/web2/test/test_http.py b/twisted/web2/test/test_http.py
index b4e32af..4461ce3 100644
--- a/twisted/web2/test/test_http.py
+++ b/twisted/web2/test/test_http.py
@@ -401,7 +401,7 @@ class HTTPTests(unittest.TestCase):
 
     def compareResult(self, cxn, cmds, data):
         self.iterate(cxn)
-        for receivedRequest, expectedCommands in map(None, cxn.requests, cmds):
+        for receivedRequest, expectedCommands in zip(cxn.requests, cmds):
             sortedHeaderCommands = []
             for cmd in expectedCommands:
                 if len(cmd) == 6:
diff --git a/twisted/words/protocols/irc.py b/twisted/words/protocols/irc.py
index 7649154..860a5a1 100644
--- a/twisted/words/protocols/irc.py
+++ b/twisted/words/protocols/irc.py
@@ -1481,8 +1481,8 @@ class IRCClient(basic.LineReceiver):
                 raise ValueError("Maximum length must exceed %d for message "
                                  "to %s" % (minimumLength, user))
             lines = split(message, length - minimumLength)
-            map(lambda line, self=self, fmt=fmt: self.sendLine(fmt % line),
-                lines)
+            for line in lines:
+                self.sendLine(fmt % line)
 
     def notice(self, user, message):
         """
diff --git a/twisted/words/protocols/toc.py b/twisted/words/protocols/toc.py
index 4612e83..a9bbcf2 100644
--- a/twisted/words/protocols/toc.py
+++ b/twisted/words/protocols/toc.py
@@ -376,8 +376,8 @@ class TOC(protocol.Protocol):
         else:
             self.permitmode=PERMITSOME
             self.denylist=[]
-            users=string.split(data," ")
-            map(self.permitlist.append,users)
+            users = data.split(' ')
+            self.permitlist.extend(users)
         self.updateUsers()
 
     def toc_add_deny(self,data):
@@ -391,8 +391,8 @@ class TOC(protocol.Protocol):
         else:
             self.permitmode=DENYSOME
             self.permitlist=[]
-            users=string.split(data," ")
-            map(self.denylist.append,users)
+            users = data.split(' ')
+            self.denylist.extend(users)
         self.updateUsers()
 
     def toc_evil(self,data):
diff --git a/twisted/words/test/test_msn.py b/twisted/words/test/test_msn.py
index 9074310..8b7480c 100644
--- a/twisted/words/test/test_msn.py
+++ b/twisted/words/test/test_msn.py
@@ -292,7 +292,8 @@ class NotificationTests(unittest.TestCase):
         m += 'LoginTime: 1016941010\r\nEmailEnabled: 1\r\nMemberIdHigh: 40000\r\nMemberIdLow: -600000000\r\nlang_preference: 1033\r\n'
         m += 'preferredEmail: foo@bar.com\r\ncountry: AU\r\nPostalCode: 90210\r\nGender: M\r\nKid: 0\r\nAge:\r\nsid: 400\r\n'
         m += 'kv: 2\r\nMSPAuth: 2CACCBCCADMoV8ORoz64BVwmjtksIg!kmR!Rj5tBBqEaW9hc4YnPHSOQ$$\r\n\r\n'
-        map(self.client.lineReceived, m.split('\r\n')[:-1])
+        for line in m.split('\r\n')[:-1]:
+            self.client.lineReceived(line)
         self.failUnless((self.client.state == 'PROFILE'), msg='Failed to detect initial profile')
 
     def testStatus(self):
@@ -318,7 +319,8 @@ class NotificationTests(unittest.TestCase):
             "LSG 0 Other%20Contacts 0",
             "LST userHandle@email.com Some%20Name 11 0"
         ]
-        map(self.client.lineReceived, lines)
+        for line in lines:
+            self.client.lineReceived(line)
         contacts = self.client.factory.contacts
         contact = contacts.getContact('userHandle@email.com')
         self.failUnless(contacts.version == 100, "Invalid contact list version")
@@ -354,7 +356,8 @@ class NotificationTests(unittest.TestCase):
             "LST userHandle@email.com Some%20Name 11 0",
             "BPR PHH 123%20456"
         ]
-        map(self.client.lineReceived, lines)
+        for line in lines:
+            self.client.lineReceived(line)
         contact = self.client.factory.contacts.getContact('userHandle@email.com')
         self.failUnless(contact.homePhone == '123 456', "Did not update contact's phone number")
 
-- 
1.6.6.1

