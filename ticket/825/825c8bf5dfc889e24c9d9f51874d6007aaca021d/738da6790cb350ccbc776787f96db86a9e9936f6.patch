Index: twisted/test/test_compat.py
===================================================================
--- twisted/test/test_compat.py	(revision 33404)
+++ twisted/test/test_compat.py	(working copy)
@@ -81,10 +81,7 @@
 
     def testIsinstance(self):
         self.assert_(isinstance(u'hi', types.StringTypes))
-        self.assert_(isinstance(self, unittest.TestCase))
-        # I'm pretty sure it's impossible to implement this
-        # without replacing isinstance on 2.2 as well :(
-        # self.assert_(isinstance({}, dict))
+        self.assert_(isinstance(self, unittest.TestCase))       
 
     def testStrip(self):
         self.assertEqual(' x '.lstrip(' '), 'x ')
Index: twisted/python/filepath.py
===================================================================
--- twisted/python/filepath.py	(revision 33404)
+++ twisted/python/filepath.py	(working copy)
@@ -1110,9 +1110,6 @@
             os.unlink(self.path)
         os.rename(sib.path, self.path)
 
-
-    # new in 2.2.0
-
     def __cmp__(self, other):
         if not isinstance(other, FilePath):
             return NotImplemented
Index: twisted/python/reflect.py
===================================================================
--- twisted/python/reflect.py	(revision 33404)
+++ twisted/python/reflect.py	(working copy)
@@ -56,8 +56,6 @@
 class AccessorType(type):
     """Metaclass that generates properties automatically.
 
-    This is for Python 2.2 and up.
-
     Using this metaclass for your class will give you explicit accessor
     methods; a method called set_foo, will automatically create a property
     'foo' that uses set_foo as a setter method. Same for get_foo and del_foo.
@@ -68,11 +66,7 @@
     be used if they are present upon class creation, and no getter function
     was set - if a getter is present, the class attribute will be ignored.
 
-    This is a 2.2-only alternative to the Accessor mixin - just set in your
-    class definition::
-
         __metaclass__ = AccessorType
-
     """
 
     def __init__(self, name, bases, d):
@@ -111,18 +105,15 @@
 
 
 class PropertyAccessor(object):
-    """A mixin class for Python 2.2 that uses AccessorType.
+    """A mixin class for that uses AccessorType.    
 
-    This provides compatability with the pre-2.2 Accessor mixin, up
-    to a point.
-
     Extending this class will give you explicit accessor methods; a
     method called set_foo, for example, is the same as an if statement
     in __setattr__ looking for 'foo'.  Same for get_foo and del_foo.
 
     There are also reallyDel and reallySet methods, so you can
     override specifics in subclasses without clobbering __setattr__
-    and __getattr__, or using non-2.1 compatible code.
+    and __getattr__.
 
     There is are incompatibilities with Accessor - accessor
     methods added after class creation will *not* be detected. OTOH,
@@ -154,9 +145,7 @@
     in L{__setattr__} looking for C{'foo'}.  Same for C{get_foo} and
     C{del_foo}.  There are also L{reallyDel} and L{reallySet} methods,
     so you can override specifics in subclasses without clobbering
-    L{__setattr__} and L{__getattr__}.
-
-    This implementation is for Python 2.1.
+    L{__setattr__} and L{__getattr__}.    
     """
 
     def __setattr__(self, k,v):
Index: twisted/python/dist.py
===================================================================
--- twisted/python/dist.py	(revision 33404)
+++ twisted/python/dist.py	(working copy)
@@ -210,8 +210,7 @@
 
 def getPackages(dname, pkgname=None, results=None, ignore=None, parent=None):
     """
-    Get all packages which are under dname. This is necessary for
-    Python 2.2's distutils. Pretty similar arguments to getDataFiles,
+    Get all packages which are under dname.  Pretty similar arguments to getDataFiles,
     including 'parent'.
     """
     parent = parent or ""
Index: twisted/internet/error.py
===================================================================
--- twisted/internet/error.py	(revision 33404)
+++ twisted/internet/error.py	(working copy)
@@ -194,7 +194,6 @@
         return ConnectError(string=e)
 
     if hasattr(socket, 'gaierror') and isinstance(e, socket.gaierror):
-        # only works in 2.2
         klass = UnknownHostError
     else:
         klass = errnoMapping.get(number, ConnectError)
Index: doc/core/howto/pb-copyable.xhtml
===================================================================
--- doc/core/howto/pb-copyable.xhtml	(revision 33404)
+++ doc/core/howto/pb-copyable.xhtml	(working copy)
@@ -405,9 +405,7 @@
 attribute is changed<span class="footnote">Of course you could be clever and
 add a hook to <code>__setattr__</code>, along with magical change-announcing
 subclasses of the usual builtin types, to detect changes that result from
-normal <q>=</q> set operations. The semi-magical <q>property attributes</q>
-that were introduced in Python 2.2 could be useful too. The result might be
-hard to maintain or extend, though.</span>.</p>
+normal <q>=</q> set operations.</span>.</p>
 
 <p>You derive your sender-side class from <code>pb.Cacheable</code>, and you
 add two methods: <code class="API"
Index: doc/core/development/policy/coding-standard.xhtml
===================================================================
--- doc/core/development/policy/coding-standard.xhtml	(revision 33404)
+++ doc/core/development/policy/coding-standard.xhtml	(working copy)
@@ -460,16 +460,6 @@
     imported directly into the user's namespace and not cause
     confusion.</p>
 
-    <h3>New-style Classes</h3>
-
-    <p>Classes and instances in Python come in two flavors: old-style or
-    classic, and new-style. Up to Python 2.1, old-style classes were the
-    only flavour available to the user, new-style classes were introduced
-    in Python 2.2 to unify classes and types. All classes added to Twisted
-    should be written as new-style classes. If <code class="python">x</code>
-    is an instance of a new-style class, then <code class="python">type(x)</code>
-    is the same as <code class="python">x.__class__</code>.</p>
-
     <h2>Methods</h2>
 
     <p>Methods should be in mixed case, with the first letter lower
Index: doc/web/howto/xmlrpc.xhtml
===================================================================
--- doc/web/howto/xmlrpc.xhtml	(revision 33404)
+++ doc/web/howto/xmlrpc.xhtml	(working copy)
@@ -15,8 +15,7 @@
 <p><a href="http://www.xmlrpc.com">XML-RPC</a> is a simple request/reply protocol
 that runs over HTTP. It is simple, easy to implement and supported by most programming
 languages. Twisted's XML-RPC support is implemented using the
-<a href='http://docs.python.org/library/xmlrpclib.html'>xmlrpclib</a> library that is
-included with Python 2.2 and later.</p>
+<a href='http://docs.python.org/library/xmlrpclib.html'>xmlrpclib</a> library.</p>
 
 <h2>Creating a XML-RPC server</h2>
 
Index: doc/web/examples/xmlrpc.py
===================================================================
--- doc/web/examples/xmlrpc.py	(revision 33404)
+++ doc/web/examples/xmlrpc.py	(working copy)
@@ -21,9 +21,6 @@
 
 from twisted.web import xmlrpc
 from twisted.internet import defer
-
-# This module is standard in Python 2.2, otherwise get it from
-#   http://www.pythonware.com/products/xmlrpc/
 import xmlrpclib
 
 
