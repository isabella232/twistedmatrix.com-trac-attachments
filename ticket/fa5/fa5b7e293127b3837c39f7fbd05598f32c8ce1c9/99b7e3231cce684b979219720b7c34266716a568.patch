Index: twisted/words/protocols/jabber/client.py
===================================================================
--- twisted/words/protocols/jabber/client.py	(revision 13065)
+++ twisted/words/protocols/jabber/client.py	(working copy)
@@ -7,8 +7,8 @@
 from twisted.xish import domish, xpath, utility
 from twisted.protocols import xmlstream
 
-DigestAuthQry = xpath.intern("/iq/query/digest")
-PlaintextAuthQry = xpath.intern("/iq/query/password")
+DigestAuthQry = xpath.internQuery("/iq/query/digest")
+PlaintextAuthQry = xpath.internQuery("/iq/query/password")
 
 def basicClientFactory(jid, secret):
     a = BasicAuthenticator(jid, secret)
Index: twisted/xish/test/test_domish.py
===================================================================
--- twisted/xish/test/test_domish.py	(revision 13065)
+++ twisted/xish/test/test_domish.py	(working copy)
@@ -90,8 +90,8 @@
 xml1 = """<stream:stream xmlns:stream='etherx' xmlns='jabber'>
              <message to='bar'><x xmlns='xdelay'>some&amp;data&gt;</x></message>
           </stream:stream>"""
-query1_root = xpath.intern("/stream[@xmlns='etherx']")    
-query1_elem1 = xpath.intern("/message[@to='bar']/x[@xmlns='xdelay'][text()='some&data>']")
+query1_root = xpath.internQuery("/stream[@xmlns='etherx']")    
+query1_elem1 = xpath.internQuery("/message[@to='bar']/x[@xmlns='xdelay'][text()='some&data>']")
 
 class DomishStreamTestCase(unittest.TestCase):    
     def __init__(self):
Index: twisted/xish/utility.py
===================================================================
--- twisted/xish/utility.py	(revision 13065)
+++ twisted/xish/utility.py	(working copy)
@@ -77,7 +77,7 @@
                 observers = self._eventObservers
             else:
                 # Treat as xpath
-                event = xpath.intern(event)
+                event = xpath.internQuery(event)
                 if (priority != None):
                     event.priority = priority
                 else:
@@ -114,7 +114,7 @@
             if self.prefix == event[0:len(self.prefix)]:
                 observers = self._eventObservers
             else:
-                event = xpath.intern(event)
+                event = xpath.internQuery(event)
                 observers = self._xpathObservers
         else:
             observers = self._xpathObservers
Index: twisted/xish/xpath.py
===================================================================
--- twisted/xish/xpath.py	(revision 13065)
+++ twisted/xish/xpath.py	(working copy)
@@ -258,22 +258,22 @@
 
 __internedQueries = {}
 
-def intern(queryString):
+def internQuery(queryString):
     if queryString not in __internedQueries:
         __internedQueries[queryString] = XPathQuery(queryString)
     return __internedQueries[queryString]
 
 def matches(xpathstr, elem):
-    return intern(xpathstr).matches(elem)
+    return internQuery(xpathstr).matches(elem)
 
 def queryForStringList(xpathstr, elem):
-    return intern(xpathstr).queryForStringList(elem)
+    return internQuery(xpathstr).queryForStringList(elem)
 
 def queryForString(xpathstr, elem):
-    return intern(xpathstr).queryForString(elem)
+    return internQuery(xpathstr).queryForString(elem)
 
 def queryForNodes(xpathstr, elem):
-    return intern(xpathstr).queryForNodes(elem)
+    return internQuery(xpathstr).queryForNodes(elem)
 
 # Convenience main to generate new xpathparser.py
 if __name__ == "__main__":
