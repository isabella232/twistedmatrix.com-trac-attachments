Index: twisted/python/_ecf.c
===================================================================
--- twisted/python/_ecf.c	(revision 0)
+++ twisted/python/_ecf.c	(revision 0)
@@ -0,0 +1,3246 @@
+/* Generated by Cython 0.15.1 on Tue Apr 24 08:56:52 2012 */
+
+#define PY_SSIZE_T_CLEAN
+#include "Python.h"
+#ifndef Py_PYTHON_H
+    #error Python headers needed to compile C extensions, please install development version of Python.
+#else
+
+#include <stddef.h> /* For offsetof */
+#ifndef offsetof
+#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
+#endif
+
+#if !defined(WIN32) && !defined(MS_WINDOWS)
+  #ifndef __stdcall
+    #define __stdcall
+  #endif
+  #ifndef __cdecl
+    #define __cdecl
+  #endif
+  #ifndef __fastcall
+    #define __fastcall
+  #endif
+#endif
+
+#ifndef DL_IMPORT
+  #define DL_IMPORT(t) t
+#endif
+#ifndef DL_EXPORT
+  #define DL_EXPORT(t) t
+#endif
+
+#ifndef PY_LONG_LONG
+  #define PY_LONG_LONG LONG_LONG
+#endif
+
+#if PY_VERSION_HEX < 0x02040000
+  #define METH_COEXIST 0
+  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
+  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
+#endif
+
+#if PY_VERSION_HEX < 0x02050000
+  typedef int Py_ssize_t;
+  #define PY_SSIZE_T_MAX INT_MAX
+  #define PY_SSIZE_T_MIN INT_MIN
+  #define PY_FORMAT_SIZE_T ""
+  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
+  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
+  #define PyNumber_Index(o)    PyNumber_Int(o)
+  #define PyIndex_Check(o)     PyNumber_Check(o)
+  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
+#endif
+
+#if PY_VERSION_HEX < 0x02060000
+  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
+  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
+  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
+  #define PyVarObject_HEAD_INIT(type, size) \
+          PyObject_HEAD_INIT(type) size,
+  #define PyType_Modified(t)
+
+  typedef struct {
+     void *buf;
+     PyObject *obj;
+     Py_ssize_t len;
+     Py_ssize_t itemsize;
+     int readonly;
+     int ndim;
+     char *format;
+     Py_ssize_t *shape;
+     Py_ssize_t *strides;
+     Py_ssize_t *suboffsets;
+     void *internal;
+  } Py_buffer;
+
+  #define PyBUF_SIMPLE 0
+  #define PyBUF_WRITABLE 0x0001
+  #define PyBUF_FORMAT 0x0004
+  #define PyBUF_ND 0x0008
+  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
+  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
+  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
+  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
+  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
+
+#endif
+
+#if PY_MAJOR_VERSION < 3
+  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
+#else
+  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
+#endif
+
+#if PY_MAJOR_VERSION >= 3
+  #define Py_TPFLAGS_CHECKTYPES 0
+  #define Py_TPFLAGS_HAVE_INDEX 0
+#endif
+
+#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
+  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
+#endif
+
+#if PY_MAJOR_VERSION >= 3
+  #define PyBaseString_Type            PyUnicode_Type
+  #define PyStringObject               PyUnicodeObject
+  #define PyString_Type                PyUnicode_Type
+  #define PyString_Check               PyUnicode_Check
+  #define PyString_CheckExact          PyUnicode_CheckExact
+#endif
+
+#if PY_VERSION_HEX < 0x02060000
+  #define PyBytesObject                PyStringObject
+  #define PyBytes_Type                 PyString_Type
+  #define PyBytes_Check                PyString_Check
+  #define PyBytes_CheckExact           PyString_CheckExact
+  #define PyBytes_FromString           PyString_FromString
+  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
+  #define PyBytes_FromFormat           PyString_FromFormat
+  #define PyBytes_DecodeEscape         PyString_DecodeEscape
+  #define PyBytes_AsString             PyString_AsString
+  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
+  #define PyBytes_Size                 PyString_Size
+  #define PyBytes_AS_STRING            PyString_AS_STRING
+  #define PyBytes_GET_SIZE             PyString_GET_SIZE
+  #define PyBytes_Repr                 PyString_Repr
+  #define PyBytes_Concat               PyString_Concat
+  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
+#endif
+
+#if PY_VERSION_HEX < 0x02060000
+  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
+  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
+#endif
+#ifndef PySet_CheckExact
+  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
+#endif
+
+#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
+
+#if PY_MAJOR_VERSION >= 3
+  #define PyIntObject                  PyLongObject
+  #define PyInt_Type                   PyLong_Type
+  #define PyInt_Check(op)              PyLong_Check(op)
+  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
+  #define PyInt_FromString             PyLong_FromString
+  #define PyInt_FromUnicode            PyLong_FromUnicode
+  #define PyInt_FromLong               PyLong_FromLong
+  #define PyInt_FromSize_t             PyLong_FromSize_t
+  #define PyInt_FromSsize_t            PyLong_FromSsize_t
+  #define PyInt_AsLong                 PyLong_AsLong
+  #define PyInt_AS_LONG                PyLong_AS_LONG
+  #define PyInt_AsSsize_t              PyLong_AsSsize_t
+  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
+  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
+#endif
+
+#if PY_MAJOR_VERSION >= 3
+  #define PyBoolObject                 PyLongObject
+#endif
+
+#if PY_VERSION_HEX < 0x03020000
+  typedef long Py_hash_t;
+  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
+  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
+#else
+  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
+  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
+#endif
+
+
+#if PY_MAJOR_VERSION >= 3
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
+#else
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
+#endif
+
+#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
+  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
+  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
+  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
+#else
+  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
+        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
+        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
+            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
+  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
+        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
+        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
+            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
+  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
+        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
+        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
+            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
+#endif
+
+#if PY_MAJOR_VERSION >= 3
+  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
+#endif
+
+#if PY_VERSION_HEX < 0x02050000
+  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
+  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
+  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
+#else
+  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
+  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
+  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
+#endif
+
+#if PY_VERSION_HEX < 0x02050000
+  #define __Pyx_NAMESTR(n) ((char *)(n))
+  #define __Pyx_DOCSTR(n)  ((char *)(n))
+#else
+  #define __Pyx_NAMESTR(n) (n)
+  #define __Pyx_DOCSTR(n)  (n)
+#endif
+
+#ifndef __PYX_EXTERN_C
+  #ifdef __cplusplus
+    #define __PYX_EXTERN_C extern "C"
+  #else
+    #define __PYX_EXTERN_C extern
+  #endif
+#endif
+
+#if defined(WIN32) || defined(MS_WINDOWS)
+#define _USE_MATH_DEFINES
+#endif
+#include <math.h>
+#define __PYX_HAVE___ecf
+#define __PYX_HAVE_API___ecf
+#include "sys/time.h"
+#include "sys/poll.h"
+#include "port.h"
+#include "errno.h"
+#include "stdio.h"
+#ifdef _OPENMP
+#include <omp.h>
+#endif /* _OPENMP */
+
+#ifdef PYREX_WITHOUT_ASSERTIONS
+#define CYTHON_WITHOUT_ASSERTIONS
+#endif
+
+
+/* inline attribute */
+#ifndef CYTHON_INLINE
+  #if defined(__GNUC__)
+    #define CYTHON_INLINE __inline__
+  #elif defined(_MSC_VER)
+    #define CYTHON_INLINE __inline
+  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+    #define CYTHON_INLINE inline
+  #else
+    #define CYTHON_INLINE
+  #endif
+#endif
+
+/* unused attribute */
+#ifndef CYTHON_UNUSED
+# if defined(__GNUC__)
+#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
+#     define CYTHON_UNUSED __attribute__ ((__unused__))
+#   else
+#     define CYTHON_UNUSED
+#   endif
+# elif defined(__ICC) || defined(__INTEL_COMPILER)
+#   define CYTHON_UNUSED __attribute__ ((__unused__))
+# else
+#   define CYTHON_UNUSED
+# endif
+#endif
+
+typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/
+
+
+/* Type Conversion Predeclarations */
+
+#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
+#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))
+
+#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
+#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
+static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
+static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
+
+static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
+static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
+static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
+
+#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
+
+
+#ifdef __GNUC__
+  /* Test for GCC > 2.95 */
+  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
+    #define likely(x)   __builtin_expect(!!(x), 1)
+    #define unlikely(x) __builtin_expect(!!(x), 0)
+  #else /* __GNUC__ > 2 ... */
+    #define likely(x)   (x)
+    #define unlikely(x) (x)
+  #endif /* __GNUC__ > 2 ... */
+#else /* __GNUC__ */
+  #define likely(x)   (x)
+  #define unlikely(x) (x)
+#endif /* __GNUC__ */
+    
+static PyObject *__pyx_m;
+static PyObject *__pyx_b;
+static PyObject *__pyx_empty_tuple;
+static PyObject *__pyx_empty_bytes;
+static int __pyx_lineno;
+static int __pyx_clineno = 0;
+static const char * __pyx_cfilenm= __FILE__;
+static const char *__pyx_filename;
+
+
+static const char *__pyx_f[] = {
+  "_ecf.pyx",
+};
+
+/*--- Type declarations ---*/
+struct __pyx_obj_4_ecf_ecf;
+
+/* "_ecf.pyx":115
+ * #    printf(output)
+ * 
+ * cdef class ecf:             # <<<<<<<<<<<<<<
+ *     """
+ *     Represent a set of file descriptors being monitored for events.
+ */
+struct __pyx_obj_4_ecf_ecf {
+  PyObject_HEAD
+  int port;
+  int initialized;
+};
+
+
+#ifndef CYTHON_REFNANNY
+  #define CYTHON_REFNANNY 0
+#endif
+
+#if CYTHON_REFNANNY
+  typedef struct {
+    void (*INCREF)(void*, PyObject*, int);
+    void (*DECREF)(void*, PyObject*, int);
+    void (*GOTREF)(void*, PyObject*, int);
+    void (*GIVEREF)(void*, PyObject*, int);
+    void* (*SetupContext)(const char*, int, const char*);
+    void (*FinishContext)(void**);
+  } __Pyx_RefNannyAPIStruct;
+  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
+  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
+  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
+  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
+  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
+  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
+  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
+  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
+  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
+  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
+  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
+  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
+  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
+#else
+  #define __Pyx_RefNannyDeclarations
+  #define __Pyx_RefNannySetupContext(name)
+  #define __Pyx_RefNannyFinishContext()
+  #define __Pyx_INCREF(r) Py_INCREF(r)
+  #define __Pyx_DECREF(r) Py_DECREF(r)
+  #define __Pyx_GOTREF(r)
+  #define __Pyx_GIVEREF(r)
+  #define __Pyx_XINCREF(r) Py_XINCREF(r)
+  #define __Pyx_XDECREF(r) Py_XDECREF(r)
+  #define __Pyx_XGOTREF(r)
+  #define __Pyx_XGIVEREF(r)
+#endif /* CYTHON_REFNANNY */
+
+static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/
+
+static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
+    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/
+
+static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
+    const char* function_name, int kw_allowed); /*proto*/
+
+static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
+static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
+
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/
+
+static void __Pyx_RaiseDoubleKeywordsError(
+    const char* func_name, PyObject* kw_name); /*proto*/
+
+static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/
+
+static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);
+
+static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);
+
+static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);
+
+static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);
+
+static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);
+
+static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);
+
+static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);
+
+static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);
+
+static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);
+
+static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);
+
+static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);
+
+static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);
+
+static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);
+
+static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);
+
+static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);
+
+static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);
+
+static int __Pyx_check_binary_version(void);
+
+static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
+                               int __pyx_lineno, const char *__pyx_filename); /*proto*/
+
+static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
+
+/* Module declarations from '_ecf' */
+static PyTypeObject *__pyx_ptype_4_ecf_ecf = 0;
+#define __Pyx_MODULE_NAME "_ecf"
+int __pyx_module_is_main__ecf = 0;
+
+/* Implementation of '_ecf' */
+static PyObject *__pyx_builtin_IOError;
+static char __pyx_k_1[] = "\nInterface to the Event Completion Framework I/O notification facility.\n\n@author: Justin Venus\n";
+static char __pyx_k__fd[] = "fd";
+static char __pyx_k__PFD[] = "PFD";
+static char __pyx_k__PMQ[] = "PMQ";
+static char __pyx_k__PAIO[] = "PAIO";
+static char __pyx_k__PFILE[] = "PFILE";
+static char __pyx_k__PUSER[] = "PUSER";
+static char __pyx_k__PALERT[] = "PALERT";
+static char __pyx_k__PTIMER[] = "PTIMER";
+static char __pyx_k__events[] = "events";
+static char __pyx_k__tv_sec[] = "tv_sec";
+static char __pyx_k__EPOLLIN[] = "EPOLLIN";
+static char __pyx_k__IOError[] = "IOError";
+static char __pyx_k__maximum[] = "maximum";
+static char __pyx_k__tv_nsec[] = "tv_nsec";
+static char __pyx_k__EPOLLERR[] = "EPOLLERR";
+static char __pyx_k__EPOLLHUP[] = "EPOLLHUP";
+static char __pyx_k__EPOLLOUT[] = "EPOLLOUT";
+static char __pyx_k__EPOLLPRI[] = "EPOLLPRI";
+static char __pyx_k____main__[] = "__main__";
+static char __pyx_k____test__[] = "__test__";
+static char __pyx_k__EPOLLNORM[] = "EPOLLNORM";
+static char __pyx_k__EPOLLNVAL[] = "EPOLLNVAL";
+static char __pyx_k__EPOLLRDBAND[] = "EPOLLRDBAND";
+static char __pyx_k__EPOLLRDNORM[] = "EPOLLRDNORM";
+static char __pyx_k__EPOLLWRBAND[] = "EPOLLWRBAND";
+static char __pyx_k__EPOLLWRNORM[] = "EPOLLWRNORM";
+static PyObject *__pyx_n_s__EPOLLERR;
+static PyObject *__pyx_n_s__EPOLLHUP;
+static PyObject *__pyx_n_s__EPOLLIN;
+static PyObject *__pyx_n_s__EPOLLNORM;
+static PyObject *__pyx_n_s__EPOLLNVAL;
+static PyObject *__pyx_n_s__EPOLLOUT;
+static PyObject *__pyx_n_s__EPOLLPRI;
+static PyObject *__pyx_n_s__EPOLLRDBAND;
+static PyObject *__pyx_n_s__EPOLLRDNORM;
+static PyObject *__pyx_n_s__EPOLLWRBAND;
+static PyObject *__pyx_n_s__EPOLLWRNORM;
+static PyObject *__pyx_n_s__IOError;
+static PyObject *__pyx_n_s__PAIO;
+static PyObject *__pyx_n_s__PALERT;
+static PyObject *__pyx_n_s__PFD;
+static PyObject *__pyx_n_s__PFILE;
+static PyObject *__pyx_n_s__PMQ;
+static PyObject *__pyx_n_s__PTIMER;
+static PyObject *__pyx_n_s__PUSER;
+static PyObject *__pyx_n_s____main__;
+static PyObject *__pyx_n_s____test__;
+static PyObject *__pyx_n_s__events;
+static PyObject *__pyx_n_s__fd;
+static PyObject *__pyx_n_s__maximum;
+static PyObject *__pyx_n_s__tv_nsec;
+static PyObject *__pyx_n_s__tv_sec;
+
+/* "_ecf.pyx":125
+ *     cdef int initialized
+ * 
+ *     def __init__(self):             # <<<<<<<<<<<<<<
+ *         # hard max per port is 8192 monitored sources.
+ *         self.port = port_create()
+ */
+
+static int __pyx_pf_4_ecf_3ecf___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static int __pyx_pf_4_ecf_3ecf___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  int __pyx_r;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
+  __Pyx_RefNannySetupContext("__init__");
+  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
+    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
+  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
+
+  /* "_ecf.pyx":127
+ *     def __init__(self):
+ *         # hard max per port is 8192 monitored sources.
+ *         self.port = port_create()             # <<<<<<<<<<<<<<
+ *         if self.port == -1:
+ *             raise IOError(errno, strerror(errno))
+ */
+  ((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port = port_create();
+
+  /* "_ecf.pyx":128
+ *         # hard max per port is 8192 monitored sources.
+ *         self.port = port_create()
+ *         if self.port == -1:             # <<<<<<<<<<<<<<
+ *             raise IOError(errno, strerror(errno))
+ *         self.initialized = 1
+ */
+  __pyx_t_1 = (((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port == -1);
+  if (__pyx_t_1) {
+
+    /* "_ecf.pyx":129
+ *         self.port = port_create()
+ *         if self.port == -1:
+ *             raise IOError(errno, strerror(errno))             # <<<<<<<<<<<<<<
+ *         self.initialized = 1
+ * 
+ */
+    __pyx_t_2 = PyInt_FromLong(errno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_3 = PyBytes_FromString(strerror(errno)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
+    __Pyx_GIVEREF(__pyx_t_2);
+    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_t_3));
+    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
+    __pyx_t_2 = 0;
+    __pyx_t_3 = 0;
+    __pyx_t_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    goto __pyx_L5;
+  }
+  __pyx_L5:;
+
+  /* "_ecf.pyx":130
+ *         if self.port == -1:
+ *             raise IOError(errno, strerror(errno))
+ *         self.initialized = 1             # <<<<<<<<<<<<<<
+ * 
+ *     def __dealloc__(self):
+ */
+  ((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->initialized = 1;
+
+  __pyx_r = 0;
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("_ecf.ecf.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = -1;
+  __pyx_L0:;
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "_ecf.pyx":132
+ *         self.initialized = 1
+ * 
+ *     def __dealloc__(self):             # <<<<<<<<<<<<<<
+ *         if self.initialized:
+ *             close(self.port)
+ */
+
+static void __pyx_pf_4_ecf_3ecf_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
+static void __pyx_pf_4_ecf_3ecf_1__dealloc__(PyObject *__pyx_v_self) {
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__dealloc__");
+
+  /* "_ecf.pyx":133
+ * 
+ *     def __dealloc__(self):
+ *         if self.initialized:             # <<<<<<<<<<<<<<
+ *             close(self.port)
+ *             self.initialized = 0
+ */
+  if (((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->initialized) {
+
+    /* "_ecf.pyx":134
+ *     def __dealloc__(self):
+ *         if self.initialized:
+ *             close(self.port)             # <<<<<<<<<<<<<<
+ *             self.initialized = 0
+ * 
+ */
+    close(((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port);
+
+    /* "_ecf.pyx":135
+ *         if self.initialized:
+ *             close(self.port)
+ *             self.initialized = 0             # <<<<<<<<<<<<<<
+ * 
+ *     def close(self):
+ */
+    ((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->initialized = 0;
+    goto __pyx_L5;
+  }
+  __pyx_L5:;
+
+  __Pyx_RefNannyFinishContext();
+}
+
+/* "_ecf.pyx":137
+ *             self.initialized = 0
+ * 
+ *     def close(self):             # <<<<<<<<<<<<<<
+ *         """
+ *         Close the port file descriptor.
+ */
+
+static PyObject *__pyx_pf_4_ecf_3ecf_2close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static char __pyx_doc_4_ecf_3ecf_2close[] = "\n        Close the port file descriptor.\n        ";
+static PyObject *__pyx_pf_4_ecf_3ecf_2close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
+  __Pyx_RefNannySetupContext("close");
+
+  /* "_ecf.pyx":141
+ *         Close the port file descriptor.
+ *         """
+ *         if self.initialized:             # <<<<<<<<<<<<<<
+ *             if close(self.port) == -1:
+ *                 raise IOError(errno, strerror(errno))
+ */
+  if (((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->initialized) {
+
+    /* "_ecf.pyx":142
+ *         """
+ *         if self.initialized:
+ *             if close(self.port) == -1:             # <<<<<<<<<<<<<<
+ *                 raise IOError(errno, strerror(errno))
+ *             self.initialized = 0
+ */
+    __pyx_t_1 = (close(((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port) == -1);
+    if (__pyx_t_1) {
+
+      /* "_ecf.pyx":143
+ *         if self.initialized:
+ *             if close(self.port) == -1:
+ *                 raise IOError(errno, strerror(errno))             # <<<<<<<<<<<<<<
+ *             self.initialized = 0
+ * 
+ */
+      __pyx_t_2 = PyInt_FromLong(errno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_2);
+      __pyx_t_3 = PyBytes_FromString(strerror(errno)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
+      __Pyx_GIVEREF(__pyx_t_2);
+      PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_t_3));
+      __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
+      __pyx_t_2 = 0;
+      __pyx_t_3 = 0;
+      __pyx_t_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_3);
+      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      goto __pyx_L6;
+    }
+    __pyx_L6:;
+
+    /* "_ecf.pyx":144
+ *             if close(self.port) == -1:
+ *                 raise IOError(errno, strerror(errno))
+ *             self.initialized = 0             # <<<<<<<<<<<<<<
+ * 
+ *     def fileno(self):
+ */
+    ((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->initialized = 0;
+    goto __pyx_L5;
+  }
+  __pyx_L5:;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("_ecf.ecf.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "_ecf.pyx":146
+ *             self.initialized = 0
+ * 
+ *     def fileno(self):             # <<<<<<<<<<<<<<
+ *         """
+ *         Return the port file descriptor number.
+ */
+
+static PyObject *__pyx_pf_4_ecf_3ecf_3fileno(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static char __pyx_doc_4_ecf_3ecf_3fileno[] = "\n        Return the port file descriptor number.\n        ";
+static PyObject *__pyx_pf_4_ecf_3ecf_3fileno(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
+  __Pyx_RefNannySetupContext("fileno");
+
+  /* "_ecf.pyx":150
+ *         Return the port file descriptor number.
+ *         """
+ *         return self.port             # <<<<<<<<<<<<<<
+ * 
+ *     def add(self, int fd, int events):
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("_ecf.ecf.fileno", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "_ecf.pyx":152
+ *         return self.port
+ * 
+ *     def add(self, int fd, int events):             # <<<<<<<<<<<<<<
+ *         """
+ *         Monitor a particular file descriptor's state.
+ */
+
+static PyObject *__pyx_pf_4_ecf_3ecf_4add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static char __pyx_doc_4_ecf_3ecf_4add[] = "\n        Monitor a particular file descriptor's state.\n        \n        Wrap port_associate(3C).\n\n        Note: You may call this multiple times with different events.\n\n        @type fd: C{int}\n        @param fd: File descriptor to modify\n\n        @type events: C{int}\n        @param events: A bit set of EPOLLIN, EPOLLPRI, EPOLLOUT, EPOLLERR, \n          EPOLLHUP, EPOLLNVAL, EPOLLNORM, EPOLLRDNORM, EPOLLWRNORM, \n          EPOLLRDBAND, and EPOLLWRBAND.\n\n        @raise IOError: Raised if the underlying port_associate() call fails.\n        ";
+static PyObject *__pyx_pf_4_ecf_3ecf_4add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  int __pyx_v_fd;
+  int __pyx_v_events;
+  int __pyx_v_result;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fd,&__pyx_n_s__events,0};
+  __Pyx_RefNannySetupContext("add");
+  {
+    PyObject* values[2] = {0,0};
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fd);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__events);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "add") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+    }
+    __pyx_v_fd = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_fd == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_events = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_events == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("_ecf.ecf.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+
+  /* "_ecf.pyx":171
+ *         """
+ *         cdef int result
+ *         result = port_associate(self.port, PORT_SOURCE_FD, fd, events, <void*>0)             # <<<<<<<<<<<<<<
+ *         if result == -1:
+ *             raise IOError(errno, strerror(errno))
+ */
+  __pyx_v_result = port_associate(((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port, PORT_SOURCE_FD, __pyx_v_fd, __pyx_v_events, ((void *)0));
+
+  /* "_ecf.pyx":172
+ *         cdef int result
+ *         result = port_associate(self.port, PORT_SOURCE_FD, fd, events, <void*>0)
+ *         if result == -1:             # <<<<<<<<<<<<<<
+ *             raise IOError(errno, strerror(errno))
+ *         return result
+ */
+  __pyx_t_1 = (__pyx_v_result == -1);
+  if (__pyx_t_1) {
+
+    /* "_ecf.pyx":173
+ *         result = port_associate(self.port, PORT_SOURCE_FD, fd, events, <void*>0)
+ *         if result == -1:
+ *             raise IOError(errno, strerror(errno))             # <<<<<<<<<<<<<<
+ *         return result
+ * 
+ */
+    __pyx_t_2 = PyInt_FromLong(errno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_3 = PyBytes_FromString(strerror(errno)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
+    __Pyx_GIVEREF(__pyx_t_2);
+    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_t_3));
+    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
+    __pyx_t_2 = 0;
+    __pyx_t_3 = 0;
+    __pyx_t_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    goto __pyx_L6;
+  }
+  __pyx_L6:;
+
+  /* "_ecf.pyx":174
+ *         if result == -1:
+ *             raise IOError(errno, strerror(errno))
+ *         return result             # <<<<<<<<<<<<<<
+ * 
+ *     def remove(self, int fd):
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_3 = PyInt_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_r = __pyx_t_3;
+  __pyx_t_3 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("_ecf.ecf.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "_ecf.pyx":176
+ *         return result
+ * 
+ *     def remove(self, int fd):             # <<<<<<<<<<<<<<
+ *         """
+ *         Unmonitor a particular file descriptor's state.
+ */
+
+static PyObject *__pyx_pf_4_ecf_3ecf_5remove(PyObject *__pyx_v_self, PyObject *__pyx_arg_fd); /*proto*/
+static char __pyx_doc_4_ecf_3ecf_5remove[] = "\n        Unmonitor a particular file descriptor's state.\n        \n        Wrap port_dissociate(3C).\n\n        @type fd: C{int}\n        @param fd: File descriptor to modify\n\n        @raise IOError: Raised if the underlying port_dissociate() call fails.\n        ";
+static PyObject *__pyx_pf_4_ecf_3ecf_5remove(PyObject *__pyx_v_self, PyObject *__pyx_arg_fd) {
+  int __pyx_v_fd;
+  int __pyx_v_result;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
+  __Pyx_RefNannySetupContext("remove");
+  assert(__pyx_arg_fd); {
+    __pyx_v_fd = __Pyx_PyInt_AsInt(__pyx_arg_fd); if (unlikely((__pyx_v_fd == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("_ecf.ecf.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+
+  /* "_ecf.pyx":188
+ *         """
+ *         cdef int result
+ *         result = port_dissociate(self.port, PORT_SOURCE_FD, fd)             # <<<<<<<<<<<<<<
+ *         if result == -1:
+ *             if errno != ENOENT:
+ */
+  __pyx_v_result = port_dissociate(((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port, PORT_SOURCE_FD, __pyx_v_fd);
+
+  /* "_ecf.pyx":189
+ *         cdef int result
+ *         result = port_dissociate(self.port, PORT_SOURCE_FD, fd)
+ *         if result == -1:             # <<<<<<<<<<<<<<
+ *             if errno != ENOENT:
+ *                 raise IOError(errno, strerror(errno))
+ */
+  __pyx_t_1 = (__pyx_v_result == -1);
+  if (__pyx_t_1) {
+
+    /* "_ecf.pyx":190
+ *         result = port_dissociate(self.port, PORT_SOURCE_FD, fd)
+ *         if result == -1:
+ *             if errno != ENOENT:             # <<<<<<<<<<<<<<
+ *                 raise IOError(errno, strerror(errno))
+ *         return result
+ */
+    __pyx_t_1 = (errno != ENOENT);
+    if (__pyx_t_1) {
+
+      /* "_ecf.pyx":191
+ *         if result == -1:
+ *             if errno != ENOENT:
+ *                 raise IOError(errno, strerror(errno))             # <<<<<<<<<<<<<<
+ *         return result
+ * 
+ */
+      __pyx_t_2 = PyInt_FromLong(errno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_2);
+      __pyx_t_3 = PyBytes_FromString(strerror(errno)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
+      __Pyx_GIVEREF(__pyx_t_2);
+      PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_t_3));
+      __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
+      __pyx_t_2 = 0;
+      __pyx_t_3 = 0;
+      __pyx_t_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_3);
+      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      goto __pyx_L6;
+    }
+    __pyx_L6:;
+    goto __pyx_L5;
+  }
+  __pyx_L5:;
+
+  /* "_ecf.pyx":192
+ *             if errno != ENOENT:
+ *                 raise IOError(errno, strerror(errno))
+ *         return result             # <<<<<<<<<<<<<<
+ * 
+ *     def peek(self):
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_3 = PyInt_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_r = __pyx_t_3;
+  __pyx_t_3 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("_ecf.ecf.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "_ecf.pyx":194
+ *         return result
+ * 
+ *     def peek(self):             # <<<<<<<<<<<<<<
+ *         """
+ *         A private C Method that provides the number of ready events.
+ */
+
+static PyObject *__pyx_pf_4_ecf_3ecf_6peek(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static char __pyx_doc_4_ecf_3ecf_6peek[] = "\n        A private C Method that provides the number of ready events.\n\n        Wrap port_getn(3C).\n\n        Note: This does not modify/de-queue any event state.\n\n        @type timeout: <timespec *>\n        @param timeout: A required structure for the underlying api call\n\n        @type return: C{long}\n        @return: Returns the number of pending events.\n        ";
+static PyObject *__pyx_pf_4_ecf_3ecf_6peek(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  unsigned int __pyx_v_nget;
+  int __pyx_v_maxevents;
+  int __pyx_v_result;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
+  __Pyx_RefNannySetupContext("peek");
+
+  /* "_ecf.pyx":208
+ *         @return: Returns the number of pending events.
+ *         """
+ *         cdef unsigned int nget = 0             # <<<<<<<<<<<<<<
+ *         cdef int maxevents = 0
+ *         cdef int result
+ */
+  __pyx_v_nget = 0;
+
+  /* "_ecf.pyx":209
+ *         """
+ *         cdef unsigned int nget = 0
+ *         cdef int maxevents = 0             # <<<<<<<<<<<<<<
+ *         cdef int result
+ *         # The max parameter specifies the maximum number of events that
+ */
+  __pyx_v_maxevents = 0;
+
+  /* "_ecf.pyx":217
+ *         # retrieved. So why is this important? Well it allows us to check
+ *         # for events and break early as opposed to waiting for a timeout.
+ *         result = port_getn(self.port, NULL, maxevents, &nget, NULL)             # <<<<<<<<<<<<<<
+ *         # Note: 32-bit port_getn() on Solaris 10 x86 returns large negative
+ *         # values instead of 0 when returning immediately.
+ */
+  __pyx_v_result = port_getn(((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port, NULL, __pyx_v_maxevents, (&__pyx_v_nget), NULL);
+
+  /* "_ecf.pyx":220
+ *         # Note: 32-bit port_getn() on Solaris 10 x86 returns large negative
+ *         # values instead of 0 when returning immediately.
+ *         if result == -1:             # <<<<<<<<<<<<<<
+ *             raise IOError(errno, strerror(errno))
+ *         return nget #number of pending results
+ */
+  __pyx_t_1 = (__pyx_v_result == -1);
+  if (__pyx_t_1) {
+
+    /* "_ecf.pyx":221
+ *         # values instead of 0 when returning immediately.
+ *         if result == -1:
+ *             raise IOError(errno, strerror(errno))             # <<<<<<<<<<<<<<
+ *         return nget #number of pending results
+ * 
+ */
+    __pyx_t_2 = PyInt_FromLong(errno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_3 = PyBytes_FromString(strerror(errno)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
+    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
+    __Pyx_GIVEREF(__pyx_t_2);
+    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_t_3));
+    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
+    __pyx_t_2 = 0;
+    __pyx_t_3 = 0;
+    __pyx_t_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    goto __pyx_L5;
+  }
+  __pyx_L5:;
+
+  /* "_ecf.pyx":222
+ *         if result == -1:
+ *             raise IOError(errno, strerror(errno))
+ *         return nget #number of pending results             # <<<<<<<<<<<<<<
+ * 
+ *     def poll(self, int tv_sec, long tv_nsec, unsigned int maximum):
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_3 = PyLong_FromUnsignedLong(__pyx_v_nget); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_r = __pyx_t_3;
+  __pyx_t_3 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("_ecf.ecf.peek", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "_ecf.pyx":224
+ *         return nget #number of pending results
+ * 
+ *     def poll(self, int tv_sec, long tv_nsec, unsigned int maximum):             # <<<<<<<<<<<<<<
+ *         """
+ *         Poll for an I/O event, wrap port_getn(3C).  If there are no
+ */
+
+static PyObject *__pyx_pf_4_ecf_3ecf_7poll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static char __pyx_doc_4_ecf_3ecf_7poll[] = "\n        Poll for an I/O event, wrap port_getn(3C).  If there are no\n        events pending this method will return immediately.\n\n        Note: PORT_FD sources must be re-associated using the method\n          ``add`` when returned by this method.\n\n        Note: Setting the tv parameters too low will result in an\n          IOException(EFAULT, \"timeout argument is not reasonable\").\n          a recommended minimum is 1 second.\n\n        @type tv_sec: C{int} >= 0\n        @param tv_sec: Number of seconds to wait for poll\n\n        @type tv_nsec: C{long} >= 0\n        @param tv_nsec: Number of nanoseconds to wait for poll\n\n        \n        @raise IOError: Raised if the underlying port_getn() call fails.\n        ";
+static PyObject *__pyx_pf_4_ecf_3ecf_7poll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  int __pyx_v_tv_sec;
+  long __pyx_v_tv_nsec;
+  unsigned int __pyx_v_maximum;
+  struct timespec __pyx_v_timeout;
+  unsigned int __pyx_v_nget;
+  int __pyx_v_maxevents;
+  size_t __pyx_v_size;
+  int __pyx_v_result;
+  PyThreadState *__pyx_v__save;
+  int __pyx_v_i;
+  port_event_t *__pyx_v__list;
+  PyObject *__pyx_v_results = NULL;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  int __pyx_t_3;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  unsigned int __pyx_t_6;
+  int __pyx_t_7;
+  int __pyx_lineno = 0;
+  const char *__pyx_filename = NULL;
+  int __pyx_clineno = 0;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__tv_sec,&__pyx_n_s__tv_nsec,&__pyx_n_s__maximum,0};
+  __Pyx_RefNannySetupContext("poll");
+  {
+    PyObject* values[3] = {0,0,0};
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  0:
+        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tv_sec);
+        if (likely(values[0])) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        case  1:
+        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tv_nsec);
+        if (likely(values[1])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("poll", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+        case  2:
+        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__maximum);
+        if (likely(values[2])) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("poll", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "poll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+    }
+    __pyx_v_tv_sec = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_tv_sec == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_tv_nsec = __Pyx_PyInt_AsLong(values[1]); if (unlikely((__pyx_v_tv_nsec == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    __pyx_v_maximum = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_maximum == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("poll", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("_ecf.ecf.poll", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+
+  /* "_ecf.pyx":246
+ *         """
+ *         cdef timespec timeout
+ *         timeout.tv_sec = tv_sec             # <<<<<<<<<<<<<<
+ *         timeout.tv_nsec = tv_nsec
+ *         # let's see if there is anything worth waiting for
+ */
+  __pyx_v_timeout.tv_sec = __pyx_v_tv_sec;
+
+  /* "_ecf.pyx":247
+ *         cdef timespec timeout
+ *         timeout.tv_sec = tv_sec
+ *         timeout.tv_nsec = tv_nsec             # <<<<<<<<<<<<<<
+ *         # let's see if there is anything worth waiting for
+ *         cdef unsigned int nget = maximum
+ */
+  __pyx_v_timeout.tv_nsec = __pyx_v_tv_nsec;
+
+  /* "_ecf.pyx":249
+ *         timeout.tv_nsec = tv_nsec
+ *         # let's see if there is anything worth waiting for
+ *         cdef unsigned int nget = maximum             # <<<<<<<<<<<<<<
+ *         # Set the max to the number we know we can get.
+ *         cdef int maxevents = <int>nget # NOTE: hard max per port is 8192
+ */
+  __pyx_v_nget = __pyx_v_maximum;
+
+  /* "_ecf.pyx":251
+ *         cdef unsigned int nget = maximum
+ *         # Set the max to the number we know we can get.
+ *         cdef int maxevents = <int>nget # NOTE: hard max per port is 8192             # <<<<<<<<<<<<<<
+ *         cdef size_t size = 0
+ *         cdef int result = 0
+ */
+  __pyx_v_maxevents = ((int)__pyx_v_nget);
+
+  /* "_ecf.pyx":252
+ *         # Set the max to the number we know we can get.
+ *         cdef int maxevents = <int>nget # NOTE: hard max per port is 8192
+ *         cdef size_t size = 0             # <<<<<<<<<<<<<<
+ *         cdef int result = 0
+ *         cdef PyThreadState *_save
+ */
+  __pyx_v_size = 0;
+
+  /* "_ecf.pyx":253
+ *         cdef int maxevents = <int>nget # NOTE: hard max per port is 8192
+ *         cdef size_t size = 0
+ *         cdef int result = 0             # <<<<<<<<<<<<<<
+ *         cdef PyThreadState *_save
+ *         cdef int i = 0
+ */
+  __pyx_v_result = 0;
+
+  /* "_ecf.pyx":255
+ *         cdef int result = 0
+ *         cdef PyThreadState *_save
+ *         cdef int i = 0             # <<<<<<<<<<<<<<
+ * 
+ *         # just making it stand out
+ */
+  __pyx_v_i = 0;
+
+  /* "_ecf.pyx":258
+ * 
+ *         # just making it stand out
+ *         if not nget:             # <<<<<<<<<<<<<<
+ *             return []
+ * 
+ */
+  __pyx_t_1 = (!__pyx_v_nget);
+  if (__pyx_t_1) {
+
+    /* "_ecf.pyx":259
+ *         # just making it stand out
+ *         if not nget:
+ *             return []             # <<<<<<<<<<<<<<
+ * 
+ *         # allocate memory based on the number of known pending events.
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
+    __pyx_r = ((PyObject *)__pyx_t_2);
+    __pyx_t_2 = 0;
+    goto __pyx_L0;
+    goto __pyx_L6;
+  }
+  __pyx_L6:;
+
+  /* "_ecf.pyx":262
+ * 
+ *         # allocate memory based on the number of known pending events.
+ *         _save = PyEval_SaveThread()             # <<<<<<<<<<<<<<
+ *         #size = sizeof(port_event_t *) * maxevents
+ *         size = sizeof(port_event_t) * maxevents
+ */
+  __pyx_v__save = PyEval_SaveThread();
+
+  /* "_ecf.pyx":264
+ *         _save = PyEval_SaveThread()
+ *         #size = sizeof(port_event_t *) * maxevents
+ *         size = sizeof(port_event_t) * maxevents             # <<<<<<<<<<<<<<
+ *         cdef port_event_t *_list = <port_event_t *>malloc(size)
+ *         PyEval_RestoreThread(_save)
+ */
+  __pyx_v_size = ((sizeof(port_event_t)) * __pyx_v_maxevents);
+
+  /* "_ecf.pyx":265
+ *         #size = sizeof(port_event_t *) * maxevents
+ *         size = sizeof(port_event_t) * maxevents
+ *         cdef port_event_t *_list = <port_event_t *>malloc(size)             # <<<<<<<<<<<<<<
+ *         PyEval_RestoreThread(_save)
+ * 
+ */
+  __pyx_v__list = ((port_event_t *)malloc(__pyx_v_size));
+
+  /* "_ecf.pyx":266
+ *         size = sizeof(port_event_t) * maxevents
+ *         cdef port_event_t *_list = <port_event_t *>malloc(size)
+ *         PyEval_RestoreThread(_save)             # <<<<<<<<<<<<<<
+ * 
+ *         if _list is NULL:
+ */
+  PyEval_RestoreThread(__pyx_v__save);
+
+  /* "_ecf.pyx":268
+ *         PyEval_RestoreThread(_save)
+ * 
+ *         if _list is NULL:             # <<<<<<<<<<<<<<
+ *             return [] #fail silently
+ * 
+ */
+  __pyx_t_1 = (__pyx_v__list == NULL);
+  if (__pyx_t_1) {
+
+    /* "_ecf.pyx":269
+ * 
+ *         if _list is NULL:
+ *             return [] #fail silently             # <<<<<<<<<<<<<<
+ * 
+ *         try:
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
+    __pyx_r = ((PyObject *)__pyx_t_2);
+    __pyx_t_2 = 0;
+    goto __pyx_L0;
+    goto __pyx_L7;
+  }
+  __pyx_L7:;
+
+  /* "_ecf.pyx":271
+ *             return [] #fail silently
+ * 
+ *         try:             # <<<<<<<<<<<<<<
+ *             _save = PyEval_SaveThread()
+ *             # so we can double check that an event was returned
+ */
+  /*try:*/ {
+
+    /* "_ecf.pyx":272
+ * 
+ *         try:
+ *             _save = PyEval_SaveThread()             # <<<<<<<<<<<<<<
+ *             # so we can double check that an event was returned
+ *             for i from 0 <= i < maxevents:
+ */
+    __pyx_v__save = PyEval_SaveThread();
+
+    /* "_ecf.pyx":274
+ *             _save = PyEval_SaveThread()
+ *             # so we can double check that an event was returned
+ *             for i from 0 <= i < maxevents:             # <<<<<<<<<<<<<<
+ *                 _list[i].portev_user = <void *>-1
+ * 
+ */
+    __pyx_t_3 = __pyx_v_maxevents;
+    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_3; __pyx_v_i++) {
+
+      /* "_ecf.pyx":275
+ *             # so we can double check that an event was returned
+ *             for i from 0 <= i < maxevents:
+ *                 _list[i].portev_user = <void *>-1             # <<<<<<<<<<<<<<
+ * 
+ *             result = port_getn(self.port, _list, maxevents, &nget, &timeout)
+ */
+      (__pyx_v__list[__pyx_v_i]).portev_user = ((void *)-1);
+    }
+
+    /* "_ecf.pyx":277
+ *                 _list[i].portev_user = <void *>-1
+ * 
+ *             result = port_getn(self.port, _list, maxevents, &nget, &timeout)             # <<<<<<<<<<<<<<
+ *             PyEval_RestoreThread(_save)
+ * 
+ */
+    __pyx_v_result = port_getn(((struct __pyx_obj_4_ecf_ecf *)__pyx_v_self)->port, __pyx_v__list, __pyx_v_maxevents, (&__pyx_v_nget), (&__pyx_v_timeout));
+
+    /* "_ecf.pyx":278
+ * 
+ *             result = port_getn(self.port, _list, maxevents, &nget, &timeout)
+ *             PyEval_RestoreThread(_save)             # <<<<<<<<<<<<<<
+ * 
+ *             if result == -1:
+ */
+    PyEval_RestoreThread(__pyx_v__save);
+
+    /* "_ecf.pyx":280
+ *             PyEval_RestoreThread(_save)
+ * 
+ *             if result == -1:             # <<<<<<<<<<<<<<
+ *                 # NOTE: Explanation borrowed from the Apache Webserver Project
+ *                 # This confusing API can return an event at the same time
+ */
+    __pyx_t_1 = (__pyx_v_result == -1);
+    if (__pyx_t_1) {
+
+      /* "_ecf.pyx":286
+ *                 # report the event.  With EINTR, nget can be > 0 without
+ *                 # any event, so check that portev_user was filled in.
+ *                 if (errno != EINTR) and (errno != ETIME):             # <<<<<<<<<<<<<<
+ *                     raise IOError(errno, strerror(errno))
+ * 
+ */
+      switch (errno) {
+        case EINTR:
+        case ETIME:
+        __pyx_t_1 = 0;
+        break;
+        default:
+        __pyx_t_1 = 1;
+        break;
+      }
+      if (__pyx_t_1) {
+
+        /* "_ecf.pyx":287
+ *                 # any event, so check that portev_user was filled in.
+ *                 if (errno != EINTR) and (errno != ETIME):
+ *                     raise IOError(errno, strerror(errno))             # <<<<<<<<<<<<<<
+ * 
+ *             i = 0 #reset counter
+ */
+        __pyx_t_2 = PyInt_FromLong(errno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L9;}
+        __Pyx_GOTREF(__pyx_t_2);
+        __pyx_t_4 = PyBytes_FromString(strerror(errno)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L9;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L9;}
+        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
+        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
+        __Pyx_GIVEREF(__pyx_t_2);
+        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_t_4));
+        __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
+        __pyx_t_2 = 0;
+        __pyx_t_4 = 0;
+        __pyx_t_4 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L9;}
+        __Pyx_GOTREF(__pyx_t_4);
+        __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
+        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L9;}
+        goto __pyx_L14;
+      }
+      __pyx_L14:;
+      goto __pyx_L13;
+    }
+    __pyx_L13:;
+
+    /* "_ecf.pyx":289
+ *                     raise IOError(errno, strerror(errno))
+ * 
+ *             i = 0 #reset counter             # <<<<<<<<<<<<<<
+ *             results = []
+ *             for i from 0 <= i < nget:
+ */
+    __pyx_v_i = 0;
+
+    /* "_ecf.pyx":290
+ * 
+ *             i = 0 #reset counter
+ *             results = []             # <<<<<<<<<<<<<<
+ *             for i from 0 <= i < nget:
+ *                 # by default we set this to NULL during ``add`` method
+ */
+    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L9;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+    __pyx_v_results = __pyx_t_4;
+    __pyx_t_4 = 0;
+
+    /* "_ecf.pyx":291
+ *             i = 0 #reset counter
+ *             results = []
+ *             for i from 0 <= i < nget:             # <<<<<<<<<<<<<<
+ *                 # by default we set this to NULL during ``add`` method
+ *                 if _list[i].portev_user is not NULL:
+ */
+    __pyx_t_6 = __pyx_v_nget;
+    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_6; __pyx_v_i++) {
+
+      /* "_ecf.pyx":293
+ *             for i from 0 <= i < nget:
+ *                 # by default we set this to NULL during ``add`` method
+ *                 if _list[i].portev_user is not NULL:             # <<<<<<<<<<<<<<
+ *                     # this means our event was not pulled as expected
+ *                     # port_getn was probably interupted by a signal.
+ */
+      __pyx_t_1 = ((__pyx_v__list[__pyx_v_i]).portev_user != NULL);
+      if (__pyx_t_1) {
+
+        /* "_ecf.pyx":296
+ *                     # this means our event was not pulled as expected
+ *                     # port_getn was probably interupted by a signal.
+ *                     if _list[i].portev_user == <void *>-1:             # <<<<<<<<<<<<<<
+ *                         continue
+ * 
+ */
+        __pyx_t_1 = ((__pyx_v__list[__pyx_v_i]).portev_user == ((void *)-1));
+        if (__pyx_t_1) {
+
+          /* "_ecf.pyx":297
+ *                     # port_getn was probably interupted by a signal.
+ *                     if _list[i].portev_user == <void *>-1:
+ *                         continue             # <<<<<<<<<<<<<<
+ * 
+ *                 if _list[i].portev_source != PORT_SOURCE_FD:
+ */
+          goto __pyx_L15_continue;
+          goto __pyx_L18;
+        }
+        __pyx_L18:;
+        goto __pyx_L17;
+      }
+      __pyx_L17:;
+
+      /* "_ecf.pyx":299
+ *                         continue
+ * 
+ *                 if _list[i].portev_source != PORT_SOURCE_FD:             # <<<<<<<<<<<<<<
+ *                     continue
+ *                 results.append(
+ */
+      __pyx_t_1 = ((__pyx_v__list[__pyx_v_i]).portev_source != PORT_SOURCE_FD);
+      if (__pyx_t_1) {
+
+        /* "_ecf.pyx":300
+ * 
+ *                 if _list[i].portev_source != PORT_SOURCE_FD:
+ *                     continue             # <<<<<<<<<<<<<<
+ *                 results.append(
+ *                     (int(_list[i].portev_object), int(_list[i].portev_events)))
+ */
+        goto __pyx_L15_continue;
+        goto __pyx_L19;
+      }
+      __pyx_L19:;
+
+      /* "_ecf.pyx":301
+ *                 if _list[i].portev_source != PORT_SOURCE_FD:
+ *                     continue
+ *                 results.append(             # <<<<<<<<<<<<<<
+ *                     (int(_list[i].portev_object), int(_list[i].portev_events)))
+ *             return results
+ */
+      if (unlikely(((PyObject *)__pyx_v_results) == Py_None)) {
+        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L9;} 
+      }
+
+      /* "_ecf.pyx":302
+ *                     continue
+ *                 results.append(
+ *                     (int(_list[i].portev_object), int(_list[i].portev_events)))             # <<<<<<<<<<<<<<
+ *             return results
+ *         finally:
+ */
+      __pyx_t_4 = PyLong_FromUnsignedLong((__pyx_v__list[__pyx_v_i]).portev_object); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L9;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L9;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
+      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
+      __Pyx_GIVEREF(__pyx_t_4);
+      __pyx_t_4 = 0;
+      __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L9;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
+      __pyx_t_5 = PyInt_FromLong((__pyx_v__list[__pyx_v_i]).portev_events); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L9;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L9;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
+      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
+      __Pyx_GIVEREF(__pyx_t_5);
+      __pyx_t_5 = 0;
+      __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L9;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
+      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L9;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
+      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
+      __Pyx_GIVEREF(__pyx_t_4);
+      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
+      __Pyx_GIVEREF(__pyx_t_5);
+      __pyx_t_4 = 0;
+      __pyx_t_5 = 0;
+      __pyx_t_7 = PyList_Append(__pyx_v_results, ((PyObject *)__pyx_t_2)); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L9;}
+      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
+      __pyx_L15_continue:;
+    }
+
+    /* "_ecf.pyx":303
+ *                 results.append(
+ *                     (int(_list[i].portev_object), int(_list[i].portev_events)))
+ *             return results             # <<<<<<<<<<<<<<
+ *         finally:
+ *             free(_list)
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(((PyObject *)__pyx_v_results));
+    __pyx_r = ((PyObject *)__pyx_v_results);
+    goto __pyx_L8;
+  }
+
+  /* "_ecf.pyx":305
+ *             return results
+ *         finally:
+ *             free(_list)             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  /*finally:*/ {
+    int __pyx_why;
+    PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
+    int __pyx_exc_lineno;
+    __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
+    __pyx_why = 0; goto __pyx_L10;
+    __pyx_L8: __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
+    __pyx_why = 3; goto __pyx_L10;
+    __pyx_L9: {
+      __pyx_why = 4;
+      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
+      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
+      __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
+      __pyx_exc_lineno = __pyx_lineno;
+      goto __pyx_L10;
+    }
+    __pyx_L10:;
+    free(__pyx_v__list);
+    switch (__pyx_why) {
+      case 3: goto __pyx_L0;
+      case 4: {
+        __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
+        __pyx_lineno = __pyx_exc_lineno;
+        __pyx_exc_type = 0;
+        __pyx_exc_value = 0;
+        __pyx_exc_tb = 0;
+        goto __pyx_L1_error;
+      }
+    }
+  }
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_AddTraceback("_ecf.ecf.poll", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XDECREF(__pyx_v_results);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_tp_new_4_ecf_ecf(PyTypeObject *t, PyObject *a, PyObject *k) {
+  PyObject *o = (*t->tp_alloc)(t, 0);
+  if (!o) return 0;
+  return o;
+}
+
+static void __pyx_tp_dealloc_4_ecf_ecf(PyObject *o) {
+  {
+    PyObject *etype, *eval, *etb;
+    PyErr_Fetch(&etype, &eval, &etb);
+    ++Py_REFCNT(o);
+    __pyx_pf_4_ecf_3ecf_1__dealloc__(o);
+    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
+    --Py_REFCNT(o);
+    PyErr_Restore(etype, eval, etb);
+  }
+  (*Py_TYPE(o)->tp_free)(o);
+}
+
+static PyMethodDef __pyx_methods_4_ecf_ecf[] = {
+  {__Pyx_NAMESTR("close"), (PyCFunction)__pyx_pf_4_ecf_3ecf_2close, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4_ecf_3ecf_2close)},
+  {__Pyx_NAMESTR("fileno"), (PyCFunction)__pyx_pf_4_ecf_3ecf_3fileno, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4_ecf_3ecf_3fileno)},
+  {__Pyx_NAMESTR("add"), (PyCFunction)__pyx_pf_4_ecf_3ecf_4add, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4_ecf_3ecf_4add)},
+  {__Pyx_NAMESTR("remove"), (PyCFunction)__pyx_pf_4_ecf_3ecf_5remove, METH_O, __Pyx_DOCSTR(__pyx_doc_4_ecf_3ecf_5remove)},
+  {__Pyx_NAMESTR("peek"), (PyCFunction)__pyx_pf_4_ecf_3ecf_6peek, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4_ecf_3ecf_6peek)},
+  {__Pyx_NAMESTR("poll"), (PyCFunction)__pyx_pf_4_ecf_3ecf_7poll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4_ecf_3ecf_7poll)},
+  {0, 0, 0, 0}
+};
+
+static PyNumberMethods __pyx_tp_as_number_ecf = {
+  0, /*nb_add*/
+  0, /*nb_subtract*/
+  0, /*nb_multiply*/
+  #if PY_MAJOR_VERSION < 3
+  0, /*nb_divide*/
+  #endif
+  0, /*nb_remainder*/
+  0, /*nb_divmod*/
+  0, /*nb_power*/
+  0, /*nb_negative*/
+  0, /*nb_positive*/
+  0, /*nb_absolute*/
+  0, /*nb_nonzero*/
+  0, /*nb_invert*/
+  0, /*nb_lshift*/
+  0, /*nb_rshift*/
+  0, /*nb_and*/
+  0, /*nb_xor*/
+  0, /*nb_or*/
+  #if PY_MAJOR_VERSION < 3
+  0, /*nb_coerce*/
+  #endif
+  0, /*nb_int*/
+  #if PY_MAJOR_VERSION < 3
+  0, /*nb_long*/
+  #else
+  0, /*reserved*/
+  #endif
+  0, /*nb_float*/
+  #if PY_MAJOR_VERSION < 3
+  0, /*nb_oct*/
+  #endif
+  #if PY_MAJOR_VERSION < 3
+  0, /*nb_hex*/
+  #endif
+  0, /*nb_inplace_add*/
+  0, /*nb_inplace_subtract*/
+  0, /*nb_inplace_multiply*/
+  #if PY_MAJOR_VERSION < 3
+  0, /*nb_inplace_divide*/
+  #endif
+  0, /*nb_inplace_remainder*/
+  0, /*nb_inplace_power*/
+  0, /*nb_inplace_lshift*/
+  0, /*nb_inplace_rshift*/
+  0, /*nb_inplace_and*/
+  0, /*nb_inplace_xor*/
+  0, /*nb_inplace_or*/
+  0, /*nb_floor_divide*/
+  0, /*nb_true_divide*/
+  0, /*nb_inplace_floor_divide*/
+  0, /*nb_inplace_true_divide*/
+  #if PY_VERSION_HEX >= 0x02050000
+  0, /*nb_index*/
+  #endif
+};
+
+static PySequenceMethods __pyx_tp_as_sequence_ecf = {
+  0, /*sq_length*/
+  0, /*sq_concat*/
+  0, /*sq_repeat*/
+  0, /*sq_item*/
+  0, /*sq_slice*/
+  0, /*sq_ass_item*/
+  0, /*sq_ass_slice*/
+  0, /*sq_contains*/
+  0, /*sq_inplace_concat*/
+  0, /*sq_inplace_repeat*/
+};
+
+static PyMappingMethods __pyx_tp_as_mapping_ecf = {
+  0, /*mp_length*/
+  0, /*mp_subscript*/
+  0, /*mp_ass_subscript*/
+};
+
+static PyBufferProcs __pyx_tp_as_buffer_ecf = {
+  #if PY_MAJOR_VERSION < 3
+  0, /*bf_getreadbuffer*/
+  #endif
+  #if PY_MAJOR_VERSION < 3
+  0, /*bf_getwritebuffer*/
+  #endif
+  #if PY_MAJOR_VERSION < 3
+  0, /*bf_getsegcount*/
+  #endif
+  #if PY_MAJOR_VERSION < 3
+  0, /*bf_getcharbuffer*/
+  #endif
+  #if PY_VERSION_HEX >= 0x02060000
+  0, /*bf_getbuffer*/
+  #endif
+  #if PY_VERSION_HEX >= 0x02060000
+  0, /*bf_releasebuffer*/
+  #endif
+};
+
+static PyTypeObject __pyx_type_4_ecf_ecf = {
+  PyVarObject_HEAD_INIT(0, 0)
+  __Pyx_NAMESTR("_ecf.ecf"), /*tp_name*/
+  sizeof(struct __pyx_obj_4_ecf_ecf), /*tp_basicsize*/
+  0, /*tp_itemsize*/
+  __pyx_tp_dealloc_4_ecf_ecf, /*tp_dealloc*/
+  0, /*tp_print*/
+  0, /*tp_getattr*/
+  0, /*tp_setattr*/
+  #if PY_MAJOR_VERSION < 3
+  0, /*tp_compare*/
+  #else
+  0, /*reserved*/
+  #endif
+  0, /*tp_repr*/
+  &__pyx_tp_as_number_ecf, /*tp_as_number*/
+  &__pyx_tp_as_sequence_ecf, /*tp_as_sequence*/
+  &__pyx_tp_as_mapping_ecf, /*tp_as_mapping*/
+  0, /*tp_hash*/
+  0, /*tp_call*/
+  0, /*tp_str*/
+  0, /*tp_getattro*/
+  0, /*tp_setattro*/
+  &__pyx_tp_as_buffer_ecf, /*tp_as_buffer*/
+  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
+  __Pyx_DOCSTR("\n    Represent a set of file descriptors being monitored for events.\n\n    Note: There is a hard limit of 8192 monitored sources per port object.\n    "), /*tp_doc*/
+  0, /*tp_traverse*/
+  0, /*tp_clear*/
+  0, /*tp_richcompare*/
+  0, /*tp_weaklistoffset*/
+  0, /*tp_iter*/
+  0, /*tp_iternext*/
+  __pyx_methods_4_ecf_ecf, /*tp_methods*/
+  0, /*tp_members*/
+  0, /*tp_getset*/
+  0, /*tp_base*/
+  0, /*tp_dict*/
+  0, /*tp_descr_get*/
+  0, /*tp_descr_set*/
+  0, /*tp_dictoffset*/
+  __pyx_pf_4_ecf_3ecf___init__, /*tp_init*/
+  0, /*tp_alloc*/
+  __pyx_tp_new_4_ecf_ecf, /*tp_new*/
+  0, /*tp_free*/
+  0, /*tp_is_gc*/
+  0, /*tp_bases*/
+  0, /*tp_mro*/
+  0, /*tp_cache*/
+  0, /*tp_subclasses*/
+  0, /*tp_weaklist*/
+  0, /*tp_del*/
+  #if PY_VERSION_HEX >= 0x02060000
+  0, /*tp_version_tag*/
+  #endif
+};
+
+static PyMethodDef __pyx_methods[] = {
+  {0, 0, 0, 0}
+};
+
+#if PY_MAJOR_VERSION >= 3
+static struct PyModuleDef __pyx_moduledef = {
+    PyModuleDef_HEAD_INIT,
+    __Pyx_NAMESTR("_ecf"),
+    __Pyx_DOCSTR(__pyx_k_1), /* m_doc */
+    -1, /* m_size */
+    __pyx_methods /* m_methods */,
+    NULL, /* m_reload */
+    NULL, /* m_traverse */
+    NULL, /* m_clear */
+    NULL /* m_free */
+};
+#endif
+
+static __Pyx_StringTabEntry __pyx_string_tab[] = {
+  {&__pyx_n_s__EPOLLERR, __pyx_k__EPOLLERR, sizeof(__pyx_k__EPOLLERR), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLHUP, __pyx_k__EPOLLHUP, sizeof(__pyx_k__EPOLLHUP), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLIN, __pyx_k__EPOLLIN, sizeof(__pyx_k__EPOLLIN), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLNORM, __pyx_k__EPOLLNORM, sizeof(__pyx_k__EPOLLNORM), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLNVAL, __pyx_k__EPOLLNVAL, sizeof(__pyx_k__EPOLLNVAL), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLOUT, __pyx_k__EPOLLOUT, sizeof(__pyx_k__EPOLLOUT), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLPRI, __pyx_k__EPOLLPRI, sizeof(__pyx_k__EPOLLPRI), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLRDBAND, __pyx_k__EPOLLRDBAND, sizeof(__pyx_k__EPOLLRDBAND), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLRDNORM, __pyx_k__EPOLLRDNORM, sizeof(__pyx_k__EPOLLRDNORM), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLWRBAND, __pyx_k__EPOLLWRBAND, sizeof(__pyx_k__EPOLLWRBAND), 0, 0, 1, 1},
+  {&__pyx_n_s__EPOLLWRNORM, __pyx_k__EPOLLWRNORM, sizeof(__pyx_k__EPOLLWRNORM), 0, 0, 1, 1},
+  {&__pyx_n_s__IOError, __pyx_k__IOError, sizeof(__pyx_k__IOError), 0, 0, 1, 1},
+  {&__pyx_n_s__PAIO, __pyx_k__PAIO, sizeof(__pyx_k__PAIO), 0, 0, 1, 1},
+  {&__pyx_n_s__PALERT, __pyx_k__PALERT, sizeof(__pyx_k__PALERT), 0, 0, 1, 1},
+  {&__pyx_n_s__PFD, __pyx_k__PFD, sizeof(__pyx_k__PFD), 0, 0, 1, 1},
+  {&__pyx_n_s__PFILE, __pyx_k__PFILE, sizeof(__pyx_k__PFILE), 0, 0, 1, 1},
+  {&__pyx_n_s__PMQ, __pyx_k__PMQ, sizeof(__pyx_k__PMQ), 0, 0, 1, 1},
+  {&__pyx_n_s__PTIMER, __pyx_k__PTIMER, sizeof(__pyx_k__PTIMER), 0, 0, 1, 1},
+  {&__pyx_n_s__PUSER, __pyx_k__PUSER, sizeof(__pyx_k__PUSER), 0, 0, 1, 1},
+  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
+  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
+  {&__pyx_n_s__events, __pyx_k__events, sizeof(__pyx_k__events), 0, 0, 1, 1},
+  {&__pyx_n_s__fd, __pyx_k__fd, sizeof(__pyx_k__fd), 0, 0, 1, 1},
+  {&__pyx_n_s__maximum, __pyx_k__maximum, sizeof(__pyx_k__maximum), 0, 0, 1, 1},
+  {&__pyx_n_s__tv_nsec, __pyx_k__tv_nsec, sizeof(__pyx_k__tv_nsec), 0, 0, 1, 1},
+  {&__pyx_n_s__tv_sec, __pyx_k__tv_sec, sizeof(__pyx_k__tv_sec), 0, 0, 1, 1},
+  {0, 0, 0, 0, 0, 0, 0}
+};
+static int __Pyx_InitCachedBuiltins(void) {
+  __pyx_builtin_IOError = __Pyx_GetName(__pyx_b, __pyx_n_s__IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  return 0;
+  __pyx_L1_error:;
+  return -1;
+}
+
+static int __Pyx_InitCachedConstants(void) {
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");
+  __Pyx_RefNannyFinishContext();
+  return 0;
+}
+
+static int __Pyx_InitGlobals(void) {
+  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  return 0;
+  __pyx_L1_error:;
+  return -1;
+}
+
+#if PY_MAJOR_VERSION < 3
+PyMODINIT_FUNC init_ecf(void); /*proto*/
+PyMODINIT_FUNC init_ecf(void)
+#else
+PyMODINIT_FUNC PyInit__ecf(void); /*proto*/
+PyMODINIT_FUNC PyInit__ecf(void)
+#endif
+{
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannyDeclarations
+  #if CYTHON_REFNANNY
+  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
+  if (!__Pyx_RefNanny) {
+      PyErr_Clear();
+      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
+      if (!__Pyx_RefNanny)
+          Py_FatalError("failed to import 'refnanny' module");
+  }
+  #endif
+  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__ecf(void)");
+  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  #ifdef __pyx_binding_PyCFunctionType_USED
+  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  #endif
+  /*--- Library function declarations ---*/
+  /*--- Threads initialization code ---*/
+  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
+  #ifdef WITH_THREAD /* Python build with threading support? */
+  PyEval_InitThreads();
+  #endif
+  #endif
+  /*--- Module creation code ---*/
+  #if PY_MAJOR_VERSION < 3
+  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_ecf"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_1), 0, PYTHON_API_VERSION);
+  #else
+  __pyx_m = PyModule_Create(&__pyx_moduledef);
+  #endif
+  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  #if PY_MAJOR_VERSION < 3
+  Py_INCREF(__pyx_m);
+  #endif
+  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
+  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  /*--- Initialize various global constants etc. ---*/
+  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (__pyx_module_is_main__ecf) {
+    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
+  }
+  /*--- Builtin init code ---*/
+  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  /*--- Constants init code ---*/
+  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  /*--- Global init code ---*/
+  /*--- Variable export code ---*/
+  /*--- Function export code ---*/
+  /*--- Type init code ---*/
+  if (PyType_Ready(&__pyx_type_4_ecf_ecf) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (__Pyx_SetAttrString(__pyx_m, "ecf", (PyObject *)&__pyx_type_4_ecf_ecf) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_ptype_4_ecf_ecf = &__pyx_type_4_ecf_ecf;
+  /*--- Type import code ---*/
+  /*--- Variable import code ---*/
+  /*--- Function import code ---*/
+  /*--- Execution code ---*/
+
+  /* "_ecf.pyx":308
+ * 
+ * 
+ * EPOLLIN = POLLIN             # <<<<<<<<<<<<<<
+ * EPOLLPRI = POLLPRI
+ * EPOLLOUT = POLLOUT
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLIN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLIN, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":309
+ * 
+ * EPOLLIN = POLLIN
+ * EPOLLPRI = POLLPRI             # <<<<<<<<<<<<<<
+ * EPOLLOUT = POLLOUT
+ * 
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLPRI); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLPRI, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":310
+ * EPOLLIN = POLLIN
+ * EPOLLPRI = POLLPRI
+ * EPOLLOUT = POLLOUT             # <<<<<<<<<<<<<<
+ * 
+ * EPOLLERR = POLLERR   # error
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLOUT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLOUT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":312
+ * EPOLLOUT = POLLOUT
+ * 
+ * EPOLLERR = POLLERR   # error             # <<<<<<<<<<<<<<
+ * EPOLLHUP = POLLHUP   # hangup error
+ * EPOLLNVAL = POLLNVAL # invalid
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLERR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLERR, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":313
+ * 
+ * EPOLLERR = POLLERR   # error
+ * EPOLLHUP = POLLHUP   # hangup error             # <<<<<<<<<<<<<<
+ * EPOLLNVAL = POLLNVAL # invalid
+ * EPOLLNORM = POLLNORM
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLHUP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLHUP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":314
+ * EPOLLERR = POLLERR   # error
+ * EPOLLHUP = POLLHUP   # hangup error
+ * EPOLLNVAL = POLLNVAL # invalid             # <<<<<<<<<<<<<<
+ * EPOLLNORM = POLLNORM
+ * 
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLNVAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLNVAL, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":315
+ * EPOLLHUP = POLLHUP   # hangup error
+ * EPOLLNVAL = POLLNVAL # invalid
+ * EPOLLNORM = POLLNORM             # <<<<<<<<<<<<<<
+ * 
+ * EPOLLRDNORM = POLLRDNORM
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLNORM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLNORM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":317
+ * EPOLLNORM = POLLNORM
+ * 
+ * EPOLLRDNORM = POLLRDNORM             # <<<<<<<<<<<<<<
+ * EPOLLWRNORM = POLLWRNORM
+ * EPOLLRDBAND = POLLRDBAND
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLRDNORM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLRDNORM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":318
+ * 
+ * EPOLLRDNORM = POLLRDNORM
+ * EPOLLWRNORM = POLLWRNORM             # <<<<<<<<<<<<<<
+ * EPOLLRDBAND = POLLRDBAND
+ * EPOLLWRBAND = POLLWRBAND
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLWRNORM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLWRNORM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":319
+ * EPOLLRDNORM = POLLRDNORM
+ * EPOLLWRNORM = POLLWRNORM
+ * EPOLLRDBAND = POLLRDBAND             # <<<<<<<<<<<<<<
+ * EPOLLWRBAND = POLLWRBAND
+ * 
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLRDBAND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLRDBAND, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":320
+ * EPOLLWRNORM = POLLWRNORM
+ * EPOLLRDBAND = POLLRDBAND
+ * EPOLLWRBAND = POLLWRBAND             # <<<<<<<<<<<<<<
+ * 
+ * # potential sources
+ */
+  __pyx_t_1 = PyInt_FromLong(POLLWRBAND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPOLLWRBAND, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":323
+ * 
+ * # potential sources
+ * PAIO = PORT_SOURCE_AIO     # struct aiocb             # <<<<<<<<<<<<<<
+ * PFD = PORT_SOURCE_FD       # file descriptor
+ * PMQ = PORT_SOURCE_MQ       # mqd_t
+ */
+  __pyx_t_1 = PyInt_FromLong(PORT_SOURCE_AIO); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PAIO, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":324
+ * # potential sources
+ * PAIO = PORT_SOURCE_AIO     # struct aiocb
+ * PFD = PORT_SOURCE_FD       # file descriptor             # <<<<<<<<<<<<<<
+ * PMQ = PORT_SOURCE_MQ       # mqd_t
+ * PTIMER = PORT_SOURCE_TIMER # timer_t
+ */
+  __pyx_t_1 = PyInt_FromLong(PORT_SOURCE_FD); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PFD, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":325
+ * PAIO = PORT_SOURCE_AIO     # struct aiocb
+ * PFD = PORT_SOURCE_FD       # file descriptor
+ * PMQ = PORT_SOURCE_MQ       # mqd_t             # <<<<<<<<<<<<<<
+ * PTIMER = PORT_SOURCE_TIMER # timer_t
+ * PUSER = PORT_SOURCE_USER   # unintptr_t/unsigned int
+ */
+  __pyx_t_1 = PyInt_FromLong(PORT_SOURCE_MQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PMQ, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":326
+ * PFD = PORT_SOURCE_FD       # file descriptor
+ * PMQ = PORT_SOURCE_MQ       # mqd_t
+ * PTIMER = PORT_SOURCE_TIMER # timer_t             # <<<<<<<<<<<<<<
+ * PUSER = PORT_SOURCE_USER   # unintptr_t/unsigned int
+ * PALERT = PORT_SOURCE_ALERT # unitptr_t/unsigned int
+ */
+  __pyx_t_1 = PyInt_FromLong(PORT_SOURCE_TIMER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PTIMER, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":327
+ * PMQ = PORT_SOURCE_MQ       # mqd_t
+ * PTIMER = PORT_SOURCE_TIMER # timer_t
+ * PUSER = PORT_SOURCE_USER   # unintptr_t/unsigned int             # <<<<<<<<<<<<<<
+ * PALERT = PORT_SOURCE_ALERT # unitptr_t/unsigned int
+ * PFILE = PORT_SOURCE_FILE   # file_obj_t
+ */
+  __pyx_t_1 = PyInt_FromLong(PORT_SOURCE_USER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PUSER, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":328
+ * PTIMER = PORT_SOURCE_TIMER # timer_t
+ * PUSER = PORT_SOURCE_USER   # unintptr_t/unsigned int
+ * PALERT = PORT_SOURCE_ALERT # unitptr_t/unsigned int             # <<<<<<<<<<<<<<
+ * PFILE = PORT_SOURCE_FILE   # file_obj_t
+ */
+  __pyx_t_1 = PyInt_FromLong(PORT_SOURCE_ALERT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PALERT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":329
+ * PUSER = PORT_SOURCE_USER   # unintptr_t/unsigned int
+ * PALERT = PORT_SOURCE_ALERT # unitptr_t/unsigned int
+ * PFILE = PORT_SOURCE_FILE   # file_obj_t             # <<<<<<<<<<<<<<
+ */
+  __pyx_t_1 = PyInt_FromLong(PORT_SOURCE_FILE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PFILE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "_ecf.pyx":1
+ * # Copyright (c) 2001-2012 Twisted Matrix Laboratories.             # <<<<<<<<<<<<<<
+ * # See LICENSE for details.
+ * 
+ */
+  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
+  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  if (__pyx_m) {
+    __Pyx_AddTraceback("init _ecf", __pyx_clineno, __pyx_lineno, __pyx_filename);
+    Py_DECREF(__pyx_m); __pyx_m = 0;
+  } else if (!PyErr_Occurred()) {
+    PyErr_SetString(PyExc_ImportError, "init _ecf");
+  }
+  __pyx_L0:;
+  __Pyx_RefNannyFinishContext();
+  #if PY_MAJOR_VERSION < 3
+  return;
+  #else
+  return __pyx_m;
+  #endif
+}
+
+/* Runtime support code */
+
+#if CYTHON_REFNANNY
+static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
+    PyObject *m = NULL, *p = NULL;
+    void *r = NULL;
+    m = PyImport_ImportModule((char *)modname);
+    if (!m) goto end;
+    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
+    if (!p) goto end;
+    r = PyLong_AsVoidPtr(p);
+end:
+    Py_XDECREF(p);
+    Py_XDECREF(m);
+    return (__Pyx_RefNannyAPIStruct *)r;
+}
+#endif /* CYTHON_REFNANNY */
+
+static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
+    PyObject *result;
+    result = PyObject_GetAttr(dict, name);
+    if (!result) {
+        if (dict != __pyx_b) {
+            PyErr_Clear();
+            result = PyObject_GetAttr(__pyx_b, name);
+        }
+        if (!result) {
+            PyErr_SetObject(PyExc_NameError, name);
+        }
+    }
+    return result;
+}
+
+static void __Pyx_RaiseArgtupleInvalid(
+    const char* func_name,
+    int exact,
+    Py_ssize_t num_min,
+    Py_ssize_t num_max,
+    Py_ssize_t num_found)
+{
+    Py_ssize_t num_expected;
+    const char *more_or_less;
+
+    if (num_found < num_min) {
+        num_expected = num_min;
+        more_or_less = "at least";
+    } else {
+        num_expected = num_max;
+        more_or_less = "at most";
+    }
+    if (exact) {
+        more_or_less = "exactly";
+    }
+    PyErr_Format(PyExc_TypeError,
+                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
+                 func_name, more_or_less, num_expected,
+                 (num_expected == 1) ? "" : "s", num_found);
+}
+
+static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
+    PyObject *kwdict,
+    const char* function_name,
+    int kw_allowed)
+{
+    PyObject* key = 0;
+    Py_ssize_t pos = 0;
+    while (PyDict_Next(kwdict, &pos, &key, 0)) {
+        #if PY_MAJOR_VERSION < 3
+        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
+        #else
+        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
+        #endif
+            goto invalid_keyword_type;
+    }
+    if ((!kw_allowed) && unlikely(key))
+        goto invalid_keyword;
+    return 1;
+invalid_keyword_type:
+    PyErr_Format(PyExc_TypeError,
+        "%s() keywords must be strings", function_name);
+    return 0;
+invalid_keyword:
+    PyErr_Format(PyExc_TypeError,
+    #if PY_MAJOR_VERSION < 3
+        "%s() got an unexpected keyword argument '%s'",
+        function_name, PyString_AsString(key));
+    #else
+        "%s() got an unexpected keyword argument '%U'",
+        function_name, key);
+    #endif
+    return 0;
+}
+
+static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
+    PyObject *tmp_type, *tmp_value, *tmp_tb;
+    PyThreadState *tstate = PyThreadState_GET();
+
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = type;
+    tstate->curexc_value = value;
+    tstate->curexc_traceback = tb;
+    Py_XDECREF(tmp_type);
+    Py_XDECREF(tmp_value);
+    Py_XDECREF(tmp_tb);
+}
+
+static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
+    PyThreadState *tstate = PyThreadState_GET();
+    *type = tstate->curexc_type;
+    *value = tstate->curexc_value;
+    *tb = tstate->curexc_traceback;
+
+    tstate->curexc_type = 0;
+    tstate->curexc_value = 0;
+    tstate->curexc_traceback = 0;
+}
+
+
+#if PY_MAJOR_VERSION < 3
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
+    /* cause is unused */
+    Py_XINCREF(type);
+    Py_XINCREF(value);
+    Py_XINCREF(tb);
+    /* First, check the traceback argument, replacing None with NULL. */
+    if (tb == Py_None) {
+        Py_DECREF(tb);
+        tb = 0;
+    }
+    else if (tb != NULL && !PyTraceBack_Check(tb)) {
+        PyErr_SetString(PyExc_TypeError,
+            "raise: arg 3 must be a traceback or None");
+        goto raise_error;
+    }
+    /* Next, replace a missing value with None */
+    if (value == NULL) {
+        value = Py_None;
+        Py_INCREF(value);
+    }
+    #if PY_VERSION_HEX < 0x02050000
+    if (!PyClass_Check(type))
+    #else
+    if (!PyType_Check(type))
+    #endif
+    {
+        /* Raising an instance.  The value should be a dummy. */
+        if (value != Py_None) {
+            PyErr_SetString(PyExc_TypeError,
+                "instance exception may not have a separate value");
+            goto raise_error;
+        }
+        /* Normalize to raise <class>, <instance> */
+        Py_DECREF(value);
+        value = type;
+        #if PY_VERSION_HEX < 0x02050000
+            if (PyInstance_Check(type)) {
+                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
+                Py_INCREF(type);
+            }
+            else {
+                type = 0;
+                PyErr_SetString(PyExc_TypeError,
+                    "raise: exception must be an old-style class or instance");
+                goto raise_error;
+            }
+        #else
+            type = (PyObject*) Py_TYPE(type);
+            Py_INCREF(type);
+            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
+                PyErr_SetString(PyExc_TypeError,
+                    "raise: exception class must be a subclass of BaseException");
+                goto raise_error;
+            }
+        #endif
+    }
+
+    __Pyx_ErrRestore(type, value, tb);
+    return;
+raise_error:
+    Py_XDECREF(value);
+    Py_XDECREF(type);
+    Py_XDECREF(tb);
+    return;
+}
+
+#else /* Python 3+ */
+
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
+    if (tb == Py_None) {
+        tb = 0;
+    } else if (tb && !PyTraceBack_Check(tb)) {
+        PyErr_SetString(PyExc_TypeError,
+            "raise: arg 3 must be a traceback or None");
+        goto bad;
+    }
+    if (value == Py_None)
+        value = 0;
+
+    if (PyExceptionInstance_Check(type)) {
+        if (value) {
+            PyErr_SetString(PyExc_TypeError,
+                "instance exception may not have a separate value");
+            goto bad;
+        }
+        value = type;
+        type = (PyObject*) Py_TYPE(value);
+    } else if (!PyExceptionClass_Check(type)) {
+        PyErr_SetString(PyExc_TypeError,
+            "raise: exception class must be a subclass of BaseException");
+        goto bad;
+    }
+
+    if (cause) {
+        PyObject *fixed_cause;
+        if (PyExceptionClass_Check(cause)) {
+            fixed_cause = PyObject_CallObject(cause, NULL);
+            if (fixed_cause == NULL)
+                goto bad;
+        }
+        else if (PyExceptionInstance_Check(cause)) {
+            fixed_cause = cause;
+            Py_INCREF(fixed_cause);
+        }
+        else {
+            PyErr_SetString(PyExc_TypeError,
+                            "exception causes must derive from "
+                            "BaseException");
+            goto bad;
+        }
+        if (!value) {
+            value = PyObject_CallObject(type, NULL);
+        }
+        PyException_SetCause(value, fixed_cause);
+    }
+
+    PyErr_SetObject(type, value);
+
+    if (tb) {
+        PyThreadState *tstate = PyThreadState_GET();
+        PyObject* tmp_tb = tstate->curexc_traceback;
+        if (tb != tmp_tb) {
+            Py_INCREF(tb);
+            tstate->curexc_traceback = tb;
+            Py_XDECREF(tmp_tb);
+        }
+    }
+
+bad:
+    return;
+}
+#endif
+
+static void __Pyx_RaiseDoubleKeywordsError(
+    const char* func_name,
+    PyObject* kw_name)
+{
+    PyErr_Format(PyExc_TypeError,
+        #if PY_MAJOR_VERSION >= 3
+        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
+        #else
+        "%s() got multiple values for keyword argument '%s'", func_name,
+        PyString_AS_STRING(kw_name));
+        #endif
+}
+
+static int __Pyx_ParseOptionalKeywords(
+    PyObject *kwds,
+    PyObject **argnames[],
+    PyObject *kwds2,
+    PyObject *values[],
+    Py_ssize_t num_pos_args,
+    const char* function_name)
+{
+    PyObject *key = 0, *value = 0;
+    Py_ssize_t pos = 0;
+    PyObject*** name;
+    PyObject*** first_kw_arg = argnames + num_pos_args;
+
+    while (PyDict_Next(kwds, &pos, &key, &value)) {
+        name = first_kw_arg;
+        while (*name && (**name != key)) name++;
+        if (*name) {
+            values[name-argnames] = value;
+        } else {
+            #if PY_MAJOR_VERSION < 3
+            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
+            #else
+            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
+            #endif
+                goto invalid_keyword_type;
+            } else {
+                for (name = first_kw_arg; *name; name++) {
+                    #if PY_MAJOR_VERSION >= 3
+                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
+                        PyUnicode_Compare(**name, key) == 0) break;
+                    #else
+                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
+                        _PyString_Eq(**name, key)) break;
+                    #endif
+                }
+                if (*name) {
+                    values[name-argnames] = value;
+                } else {
+                    /* unexpected keyword found */
+                    for (name=argnames; name != first_kw_arg; name++) {
+                        if (**name == key) goto arg_passed_twice;
+                        #if PY_MAJOR_VERSION >= 3
+                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
+                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
+                        #else
+                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
+                            _PyString_Eq(**name, key)) goto arg_passed_twice;
+                        #endif
+                    }
+                    if (kwds2) {
+                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
+                    } else {
+                        goto invalid_keyword;
+                    }
+                }
+            }
+        }
+    }
+    return 0;
+arg_passed_twice:
+    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
+    goto bad;
+invalid_keyword_type:
+    PyErr_Format(PyExc_TypeError,
+        "%s() keywords must be strings", function_name);
+    goto bad;
+invalid_keyword:
+    PyErr_Format(PyExc_TypeError,
+    #if PY_MAJOR_VERSION < 3
+        "%s() got an unexpected keyword argument '%s'",
+        function_name, PyString_AsString(key));
+    #else
+        "%s() got an unexpected keyword argument '%U'",
+        function_name, key);
+    #endif
+bad:
+    return -1;
+}
+
+static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
+    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(unsigned char) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(unsigned char)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to unsigned char" :
+                    "value too large to convert to unsigned char");
+            }
+            return (unsigned char)-1;
+        }
+        return (unsigned char)val;
+    }
+    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
+}
+
+static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
+    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(unsigned short) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(unsigned short)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to unsigned short" :
+                    "value too large to convert to unsigned short");
+            }
+            return (unsigned short)-1;
+        }
+        return (unsigned short)val;
+    }
+    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
+}
+
+static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
+    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(unsigned int) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(unsigned int)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to unsigned int" :
+                    "value too large to convert to unsigned int");
+            }
+            return (unsigned int)-1;
+        }
+        return (unsigned int)val;
+    }
+    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
+}
+
+static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
+    const char neg_one = (char)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(char) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(char)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to char" :
+                    "value too large to convert to char");
+            }
+            return (char)-1;
+        }
+        return (char)val;
+    }
+    return (char)__Pyx_PyInt_AsLong(x);
+}
+
+static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
+    const short neg_one = (short)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(short) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(short)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to short" :
+                    "value too large to convert to short");
+            }
+            return (short)-1;
+        }
+        return (short)val;
+    }
+    return (short)__Pyx_PyInt_AsLong(x);
+}
+
+static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
+    const int neg_one = (int)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(int) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(int)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to int" :
+                    "value too large to convert to int");
+            }
+            return (int)-1;
+        }
+        return (int)val;
+    }
+    return (int)__Pyx_PyInt_AsLong(x);
+}
+
+static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
+    const signed char neg_one = (signed char)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(signed char) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(signed char)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to signed char" :
+                    "value too large to convert to signed char");
+            }
+            return (signed char)-1;
+        }
+        return (signed char)val;
+    }
+    return (signed char)__Pyx_PyInt_AsSignedLong(x);
+}
+
+static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
+    const signed short neg_one = (signed short)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(signed short) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(signed short)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to signed short" :
+                    "value too large to convert to signed short");
+            }
+            return (signed short)-1;
+        }
+        return (signed short)val;
+    }
+    return (signed short)__Pyx_PyInt_AsSignedLong(x);
+}
+
+static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
+    const signed int neg_one = (signed int)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(signed int) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(signed int)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to signed int" :
+                    "value too large to convert to signed int");
+            }
+            return (signed int)-1;
+        }
+        return (signed int)val;
+    }
+    return (signed int)__Pyx_PyInt_AsSignedLong(x);
+}
+
+static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
+    const int neg_one = (int)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (sizeof(int) < sizeof(long)) {
+        long val = __Pyx_PyInt_AsLong(x);
+        if (unlikely(val != (long)(int)val)) {
+            if (!unlikely(val == -1 && PyErr_Occurred())) {
+                PyErr_SetString(PyExc_OverflowError,
+                    (is_unsigned && unlikely(val < 0)) ?
+                    "can't convert negative value to int" :
+                    "value too large to convert to int");
+            }
+            return (int)-1;
+        }
+        return (int)val;
+    }
+    return (int)__Pyx_PyInt_AsLong(x);
+}
+
+static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
+    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        if (is_unsigned && unlikely(val < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to unsigned long");
+            return (unsigned long)-1;
+        }
+        return (unsigned long)val;
+    } else
+#endif
+    if (likely(PyLong_Check(x))) {
+        if (is_unsigned) {
+            if (unlikely(Py_SIZE(x) < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to unsigned long");
+                return (unsigned long)-1;
+            }
+            return (unsigned long)PyLong_AsUnsignedLong(x);
+        } else {
+            return (unsigned long)PyLong_AsLong(x);
+        }
+    } else {
+        unsigned long val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (unsigned long)-1;
+        val = __Pyx_PyInt_AsUnsignedLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
+    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        if (is_unsigned && unlikely(val < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to unsigned PY_LONG_LONG");
+            return (unsigned PY_LONG_LONG)-1;
+        }
+        return (unsigned PY_LONG_LONG)val;
+    } else
+#endif
+    if (likely(PyLong_Check(x))) {
+        if (is_unsigned) {
+            if (unlikely(Py_SIZE(x) < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to unsigned PY_LONG_LONG");
+                return (unsigned PY_LONG_LONG)-1;
+            }
+            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
+        } else {
+            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
+        }
+    } else {
+        unsigned PY_LONG_LONG val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (unsigned PY_LONG_LONG)-1;
+        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
+    const long neg_one = (long)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        if (is_unsigned && unlikely(val < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to long");
+            return (long)-1;
+        }
+        return (long)val;
+    } else
+#endif
+    if (likely(PyLong_Check(x))) {
+        if (is_unsigned) {
+            if (unlikely(Py_SIZE(x) < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to long");
+                return (long)-1;
+            }
+            return (long)PyLong_AsUnsignedLong(x);
+        } else {
+            return (long)PyLong_AsLong(x);
+        }
+    } else {
+        long val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (long)-1;
+        val = __Pyx_PyInt_AsLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
+    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        if (is_unsigned && unlikely(val < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to PY_LONG_LONG");
+            return (PY_LONG_LONG)-1;
+        }
+        return (PY_LONG_LONG)val;
+    } else
+#endif
+    if (likely(PyLong_Check(x))) {
+        if (is_unsigned) {
+            if (unlikely(Py_SIZE(x) < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to PY_LONG_LONG");
+                return (PY_LONG_LONG)-1;
+            }
+            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
+        } else {
+            return (PY_LONG_LONG)PyLong_AsLongLong(x);
+        }
+    } else {
+        PY_LONG_LONG val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (PY_LONG_LONG)-1;
+        val = __Pyx_PyInt_AsLongLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
+    const signed long neg_one = (signed long)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        if (is_unsigned && unlikely(val < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to signed long");
+            return (signed long)-1;
+        }
+        return (signed long)val;
+    } else
+#endif
+    if (likely(PyLong_Check(x))) {
+        if (is_unsigned) {
+            if (unlikely(Py_SIZE(x) < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to signed long");
+                return (signed long)-1;
+            }
+            return (signed long)PyLong_AsUnsignedLong(x);
+        } else {
+            return (signed long)PyLong_AsLong(x);
+        }
+    } else {
+        signed long val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (signed long)-1;
+        val = __Pyx_PyInt_AsSignedLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
+    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
+    const int is_unsigned = neg_one > const_zero;
+#if PY_VERSION_HEX < 0x03000000
+    if (likely(PyInt_Check(x))) {
+        long val = PyInt_AS_LONG(x);
+        if (is_unsigned && unlikely(val < 0)) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "can't convert negative value to signed PY_LONG_LONG");
+            return (signed PY_LONG_LONG)-1;
+        }
+        return (signed PY_LONG_LONG)val;
+    } else
+#endif
+    if (likely(PyLong_Check(x))) {
+        if (is_unsigned) {
+            if (unlikely(Py_SIZE(x) < 0)) {
+                PyErr_SetString(PyExc_OverflowError,
+                                "can't convert negative value to signed PY_LONG_LONG");
+                return (signed PY_LONG_LONG)-1;
+            }
+            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
+        } else {
+            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
+        }
+    } else {
+        signed PY_LONG_LONG val;
+        PyObject *tmp = __Pyx_PyNumber_Int(x);
+        if (!tmp) return (signed PY_LONG_LONG)-1;
+        val = __Pyx_PyInt_AsSignedLongLong(tmp);
+        Py_DECREF(tmp);
+        return val;
+    }
+}
+
+static int __Pyx_check_binary_version(void) {
+    char ctversion[4], rtversion[4];
+    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
+    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
+    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
+        char message[200];
+        PyOS_snprintf(message, sizeof(message),
+                      "compiletime version %s of module '%.100s' "
+                      "does not match runtime version %s",
+                      ctversion, __Pyx_MODULE_NAME, rtversion);
+        #if PY_VERSION_HEX < 0x02050000
+        return PyErr_Warn(NULL, message);
+        #else
+        return PyErr_WarnEx(NULL, message, 1);
+        #endif
+    }
+    return 0;
+}
+
+#include "compile.h"
+#include "frameobject.h"
+#include "traceback.h"
+
+static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
+                               int __pyx_lineno, const char *__pyx_filename) {
+    PyObject *py_srcfile = 0;
+    PyObject *py_funcname = 0;
+    PyObject *py_globals = 0;
+    PyCodeObject *py_code = 0;
+    PyFrameObject *py_frame = 0;
+
+    #if PY_MAJOR_VERSION < 3
+    py_srcfile = PyString_FromString(__pyx_filename);
+    #else
+    py_srcfile = PyUnicode_FromString(__pyx_filename);
+    #endif
+    if (!py_srcfile) goto bad;
+    if (__pyx_clineno) {
+        #if PY_MAJOR_VERSION < 3
+        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
+        #else
+        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
+        #endif
+    }
+    else {
+        #if PY_MAJOR_VERSION < 3
+        py_funcname = PyString_FromString(funcname);
+        #else
+        py_funcname = PyUnicode_FromString(funcname);
+        #endif
+    }
+    if (!py_funcname) goto bad;
+    py_globals = PyModule_GetDict(__pyx_m);
+    if (!py_globals) goto bad;
+    py_code = PyCode_New(
+        0,            /*int argcount,*/
+        #if PY_MAJOR_VERSION >= 3
+        0,            /*int kwonlyargcount,*/
+        #endif
+        0,            /*int nlocals,*/
+        0,            /*int stacksize,*/
+        0,            /*int flags,*/
+        __pyx_empty_bytes, /*PyObject *code,*/
+        __pyx_empty_tuple,  /*PyObject *consts,*/
+        __pyx_empty_tuple,  /*PyObject *names,*/
+        __pyx_empty_tuple,  /*PyObject *varnames,*/
+        __pyx_empty_tuple,  /*PyObject *freevars,*/
+        __pyx_empty_tuple,  /*PyObject *cellvars,*/
+        py_srcfile,   /*PyObject *filename,*/
+        py_funcname,  /*PyObject *name,*/
+        __pyx_lineno,   /*int firstlineno,*/
+        __pyx_empty_bytes  /*PyObject *lnotab*/
+    );
+    if (!py_code) goto bad;
+    py_frame = PyFrame_New(
+        PyThreadState_GET(), /*PyThreadState *tstate,*/
+        py_code,             /*PyCodeObject *code,*/
+        py_globals,          /*PyObject *globals,*/
+        0                    /*PyObject *locals*/
+    );
+    if (!py_frame) goto bad;
+    py_frame->f_lineno = __pyx_lineno;
+    PyTraceBack_Here(py_frame);
+bad:
+    Py_XDECREF(py_srcfile);
+    Py_XDECREF(py_funcname);
+    Py_XDECREF(py_code);
+    Py_XDECREF(py_frame);
+}
+
+static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
+    while (t->p) {
+        #if PY_MAJOR_VERSION < 3
+        if (t->is_unicode) {
+            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
+        } else if (t->intern) {
+            *t->p = PyString_InternFromString(t->s);
+        } else {
+            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
+        }
+        #else  /* Python 3+ has unicode identifiers */
+        if (t->is_unicode | t->is_str) {
+            if (t->intern) {
+                *t->p = PyUnicode_InternFromString(t->s);
+            } else if (t->encoding) {
+                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
+            } else {
+                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
+            }
+        } else {
+            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
+        }
+        #endif
+        if (!*t->p)
+            return -1;
+        ++t;
+    }
+    return 0;
+}
+
+/* Type Conversion Functions */
+
+static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
+   int is_true = x == Py_True;
+   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
+   else return PyObject_IsTrue(x);
+}
+
+static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
+  PyNumberMethods *m;
+  const char *name = NULL;
+  PyObject *res = NULL;
+#if PY_VERSION_HEX < 0x03000000
+  if (PyInt_Check(x) || PyLong_Check(x))
+#else
+  if (PyLong_Check(x))
+#endif
+    return Py_INCREF(x), x;
+  m = Py_TYPE(x)->tp_as_number;
+#if PY_VERSION_HEX < 0x03000000
+  if (m && m->nb_int) {
+    name = "int";
+    res = PyNumber_Int(x);
+  }
+  else if (m && m->nb_long) {
+    name = "long";
+    res = PyNumber_Long(x);
+  }
+#else
+  if (m && m->nb_int) {
+    name = "int";
+    res = PyNumber_Long(x);
+  }
+#endif
+  if (res) {
+#if PY_VERSION_HEX < 0x03000000
+    if (!PyInt_Check(res) && !PyLong_Check(res)) {
+#else
+    if (!PyLong_Check(res)) {
+#endif
+      PyErr_Format(PyExc_TypeError,
+                   "__%s__ returned non-%s (type %.200s)",
+                   name, name, Py_TYPE(res)->tp_name);
+      Py_DECREF(res);
+      return NULL;
+    }
+  }
+  else if (!PyErr_Occurred()) {
+    PyErr_SetString(PyExc_TypeError,
+                    "an integer is required");
+  }
+  return res;
+}
+
+static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
+  Py_ssize_t ival;
+  PyObject* x = PyNumber_Index(b);
+  if (!x) return -1;
+  ival = PyInt_AsSsize_t(x);
+  Py_DECREF(x);
+  return ival;
+}
+
+static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
+#if PY_VERSION_HEX < 0x02050000
+   if (ival <= LONG_MAX)
+       return PyInt_FromLong((long)ival);
+   else {
+       unsigned char *bytes = (unsigned char *) &ival;
+       int one = 1; int little = (int)*(unsigned char*)&one;
+       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
+   }
+#else
+   return PyInt_FromSize_t(ival);
+#endif
+}
+
+static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
+   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
+   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
+       return (size_t)-1;
+   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
+       PyErr_SetString(PyExc_OverflowError,
+                       "value too large to convert to size_t");
+       return (size_t)-1;
+   }
+   return (size_t)val;
+}
+
+
+#endif /* Py_PYTHON_H */
Index: twisted/python/dist.py
===================================================================
--- twisted/python/dist.py	(revision 34349)
+++ twisted/python/dist.py	(working copy)
@@ -399,3 +399,14 @@
     @return: C{True} if the header is available, C{False} otherwise.
     """
     return builder._check_header("sys/epoll.h")
+
+
+def _hasEcf(builder):
+    """
+    Checks if the private header for building event completion 
+    (C{sys/port_kernel.h}) is available.
+
+    @return: C{True} if the header is available, C{False} otherwise.
+    """
+    return builder._check_header("sys/port_kernel.h")
+
Index: twisted/python/_ecf.pyx
===================================================================
--- twisted/python/_ecf.pyx	(revision 0)
+++ twisted/python/_ecf.pyx	(revision 0)
@@ -0,0 +1,337 @@
+# Copyright (c) 2001-2012 Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+Interface to the Event Completion Framework I/O notification facility.
+
+@author: Justin Venus
+"""
+
+################################################################################
+# NOTE: This interface is for Solaris 10+ and more than likely you will
+# have to compile it with the official proprietary cc compiler that is
+# provided as an addon from the OS vendor's website.  If you built python
+# with gcc then you may use gcc to compile this module.  Don't mix and
+# match compilers on Solaris, you've been warned.
+
+# NOTE: This was developed using Cython-0.15.1. -jvenus
+
+# TODO: Discuss implementation of POSIX AIO with the twisted community.
+# I have some ideas on how epoll, kqueue, and evcp reactors could
+# make shared use of the AIO POSIX implementation for FILE I/O based on
+# what this interface has taught me. -jvenus
+################################################################################
+cdef extern from "sys/time.h":
+    cdef struct timespec:
+        long tv_sec
+        long tv_nsec
+
+cdef extern from "sys/poll.h":
+    enum: POLLIN
+    enum: POLLPRI
+    enum: POLLOUT
+    enum: POLLRDNORM
+    enum: POLLWRNORM
+    enum: POLLRDBAND
+    enum: POLLWRBAND
+    enum: POLLNORM
+    enum: POLLERR
+    enum: POLLHUP
+    enum: POLLNVAL
+
+cdef extern from "port.h":
+    # man -s 3C port_create
+    enum: PORT_SOURCE_AIO   # struct aiocb
+    enum: PORT_SOURCE_FD    # file descriptor
+    enum: PORT_SOURCE_MQ    # mqd_t
+    enum: PORT_SOURCE_TIMER # timer_t
+    enum: PORT_SOURCE_USER  # unintptr_t/unsigned int
+    enum: PORT_SOURCE_ALERT # unitptr_t/unsigned int
+    enum: PORT_SOURCE_FILE  # file_obj_t
+
+    # actually defined in "sys/siginfo.h"
+    enum: SIGEV_PORT #For AIO support
+
+    cdef extern int port_create()
+
+    # actually defined in "sys/port.h"
+    ctypedef struct port_event_t:
+        int             portev_events  # event data is source specific
+        unsigned short  portev_source  # event source
+        unsigned short  portev_pad     # port internal use
+        unsigned int    portev_object  # source specific object
+        void            *portev_user   # user cookie
+
+    ctypedef struct  port_notify:
+        int             portnfy_port   # bind request(s) to port
+        void            *portnfy_user  # user defined
+
+    # man -s 3C port_get
+    cdef extern int port_get(
+        int port, port_event_t *pe, timespec *timeout
+    )
+    # man -s 3C port_getn
+    cdef extern int port_getn(int port, port_event_t evts[], 
+        unsigned int max, unsigned int *nget, timespec *timeout
+    )
+    # man -s 3C port_associate
+    cdef extern int port_associate(int port, int source,
+        unsigned int obj, int events, void *user
+    )
+    # man -s 3C port_dissociate
+    cdef extern int port_dissociate(int port, int source, unsigned int obj)
+
+cdef extern from "errno.h":
+    cdef extern int errno
+    cdef extern char *strerror(int)
+    enum: EINTR
+    enum: ETIME
+    enum: ENOENT
+
+cdef extern from "stdio.h":
+    cdef extern void *malloc(int)
+    cdef extern void free(void *)
+    cdef extern int close(int)
+# TODO: remove later ... see below
+# was originally used for debugging
+#    cdef extern int printf(char *, ...)
+
+cdef extern from "Python.h":
+    ctypedef struct PyObject
+    ctypedef struct PyThreadState
+    cdef extern PyThreadState *PyEval_SaveThread()
+    cdef extern void PyEval_RestoreThread(PyThreadState*)
+
+# FIXME: remove after AIO interfaces are supported
+# NOTE: This was only used during intial development
+#   and it can probably be removed in the future.
+#cdef extern void debug(object message):
+#    """debug message printer"""
+#    msg = "<<DEBUG>> " + str(message) + "\n"
+#    cdef char *output
+#    output = <bytes>msg
+#    printf(output)
+
+cdef class ecf:
+    """
+    Represent a set of file descriptors being monitored for events.
+
+    Note: There is a hard limit of 8192 monitored sources per port object.
+    """
+
+    cdef int port
+    cdef int initialized
+
+    def __init__(self):
+        # hard max per port is 8192 monitored sources.
+        self.port = port_create()
+        if self.port == -1:
+            raise IOError(errno, strerror(errno))
+        self.initialized = 1
+
+    def __dealloc__(self):
+        if self.initialized:
+            close(self.port)
+            self.initialized = 0
+
+    def close(self):
+        """
+        Close the port file descriptor.
+        """
+        if self.initialized:
+            if close(self.port) == -1:
+                raise IOError(errno, strerror(errno))
+            self.initialized = 0
+
+    def fileno(self):
+        """
+        Return the port file descriptor number.
+        """
+        return self.port
+
+    def add(self, int fd, int events):
+        """
+        Monitor a particular file descriptor's state.
+        
+        Wrap port_associate(3C).
+
+        Note: You may call this multiple times with different events.
+
+        @type fd: C{int}
+        @param fd: File descriptor to modify
+
+        @type events: C{int}
+        @param events: A bit set of EPOLLIN, EPOLLPRI, EPOLLOUT, EPOLLERR, 
+          EPOLLHUP, EPOLLNVAL, EPOLLNORM, EPOLLRDNORM, EPOLLWRNORM, 
+          EPOLLRDBAND, and EPOLLWRBAND.
+
+        @type return: C{int}
+        @return: Returns the status of the underlying call.
+
+        @raise IOError: Raised if the underlying port_associate() call fails.
+        """
+        cdef int result
+        result = port_associate(self.port, PORT_SOURCE_FD, fd, events, <void*>0)
+        if result == -1:
+            raise IOError(errno, strerror(errno))
+        return result
+
+    def remove(self, int fd):
+        """
+        Unmonitor a particular file descriptor's state.
+        
+        Wrap port_dissociate(3C).
+
+        @type fd: C{int}
+        @param fd: File descriptor to modify
+
+        @type return: C{int}
+        @return: Returns the status of the underlying call.
+
+        @raise IOError: Raised if the underlying port_dissociate() call fails.
+        """
+        cdef int result
+        result = port_dissociate(self.port, PORT_SOURCE_FD, fd)
+        if result == -1:
+            if errno != ENOENT:
+                raise IOError(errno, strerror(errno))
+        return result
+
+    def peek(self):
+        """
+        Provides the number of ready events without modifying state.
+
+        Wrap port_getn(3C).
+
+        Note: This does not modify/de-queue any event state.
+
+        @type return: C{long}
+        @return: Returns the number of pending events.
+
+        @raise IOError: Raised if the underlying port_getn() call fails.
+        """
+        cdef unsigned int nget = 0
+        cdef int maxevents = 0
+        cdef int result
+        # The max parameter specifies the maximum number of events that 
+        # can be returned in list[]. If max is 0, the value pointed to 
+        # by nget is set to the number of events available on the port. 
+        # The port_getn() function returns immediately but no events are
+        # retrieved. So why is this important? Well it allows us to check
+        # for events and break early as opposed to waiting for a timeout.
+        result = port_getn(self.port, NULL, maxevents, &nget, NULL)
+        # Note: 32-bit port_getn() on Solaris 10 x86 returns large negative
+        # values instead of 0 when returning immediately.
+        if result == -1:
+            raise IOError(errno, strerror(errno))
+        return nget #number of pending results
+
+    def poll(self, int tv_sec, long tv_nsec, unsigned int maximum):
+        """
+        Poll for an I/O event, wrap port_getn(3C).  If there are no
+        events pending this method will return immediately.
+
+        Note: PORT_FD sources must be re-associated using the method
+          ``add`` when returned by this method.
+
+        Note: Setting the tv parameters too low will result in an
+          IOException(EFAULT, "timeout argument is not reasonable").
+          a recommended minimum is 1 second.
+
+        @type tv_sec: C{int} >= 0
+        @param tv_sec: Number of seconds to wait for poll
+
+        @type tv_nsec: C{long} >= 0
+        @param tv_nsec: Number of nanoseconds to wait for poll
+
+        @type return: C{list}
+        @return: Returns a list of C{tuple} that contain the filedescriptor
+           and event type retrieved.
+        
+        @raise IOError: Raised if the underlying port_getn() call fails.
+        """
+        cdef timespec timeout
+        timeout.tv_sec = tv_sec
+        timeout.tv_nsec = tv_nsec
+        # let's see if there is anything worth waiting for
+        cdef unsigned int nget = maximum 
+        # Set the max to the number we know we can get.
+        cdef int maxevents = <int>nget # NOTE: hard max per port is 8192
+        cdef size_t size = 0
+        cdef int result = 0
+        cdef PyThreadState *_save
+        cdef int i = 0
+       
+        # just making it stand out 
+        if not nget:
+            return []
+
+        # allocate memory based on the number of known pending events.
+        _save = PyEval_SaveThread()
+        #size = sizeof(port_event_t *) * maxevents
+        size = sizeof(port_event_t) * maxevents
+        cdef port_event_t *_list = <port_event_t *>malloc(size)
+        PyEval_RestoreThread(_save)
+
+        if _list is NULL:
+            return [] #fail silently
+        
+        try:
+            _save = PyEval_SaveThread()
+            # so we can double check that an event was returned
+            for i from 0 <= i < maxevents: 
+                _list[i].portev_user = <void *>-1
+
+            result = port_getn(self.port, _list, maxevents, &nget, &timeout)
+            PyEval_RestoreThread(_save)
+
+            if result == -1:
+                # NOTE: Explanation borrowed from the Apache Webserver Project
+                # This confusing API can return an event at the same time
+                # that it reports EINTR or ETIME.  If that occurs, just
+                # report the event.  With EINTR, nget can be > 0 without
+                # any event, so check that portev_user was filled in.
+                if (errno != EINTR) and (errno != ETIME):
+                    raise IOError(errno, strerror(errno))
+
+            i = 0 #reset counter
+            results = []
+            for i from 0 <= i < nget:
+                # by default we set this to NULL during ``add`` method
+                if _list[i].portev_user is not NULL:
+                    # this means our event was not pulled as expected
+                    # port_getn was probably interupted by a signal.
+                    if _list[i].portev_user == <void *>-1:
+                        continue
+
+                if _list[i].portev_source != PORT_SOURCE_FD:
+                    continue
+                results.append(
+                    (int(_list[i].portev_object), int(_list[i].portev_events)))
+            return results
+        finally:
+            free(_list)
+
+
+EPOLLIN = POLLIN
+EPOLLPRI = POLLPRI
+EPOLLOUT = POLLOUT
+
+EPOLLERR = POLLERR   # error
+EPOLLHUP = POLLHUP   # hangup error
+EPOLLNVAL = POLLNVAL # invalid
+EPOLLNORM = POLLNORM
+
+EPOLLRDNORM = POLLRDNORM
+EPOLLWRNORM = POLLWRNORM
+EPOLLRDBAND = POLLRDBAND
+EPOLLWRBAND = POLLWRBAND
+
+# potential sources
+PAIO = PORT_SOURCE_AIO     # struct aiocb
+PFD = PORT_SOURCE_FD       # file descriptor
+PMQ = PORT_SOURCE_MQ       # mqd_t
+PTIMER = PORT_SOURCE_TIMER # timer_t
+PUSER = PORT_SOURCE_USER   # unintptr_t/unsigned int
+PALERT = PORT_SOURCE_ALERT # unitptr_t/unsigned int
+PFILE = PORT_SOURCE_FILE   # file_obj_t
Index: twisted/plugins/twisted_reactors.py
===================================================================
--- twisted/plugins/twisted_reactors.py	(revision 34349)
+++ twisted/plugins/twisted_reactors.py	(working copy)
@@ -40,3 +40,6 @@
 iocp = Reactor(
     'iocp', 'twisted.internet.iocpreactor',
     'Win32 IO Completion Ports-based reactor.')
+ecf = Reactor(
+    'ecf', 'twisted.internet.ecfreactor',
+    'Solaris IO Event Completion Framework based reactor.')
Index: twisted/topfiles/setup.py
===================================================================
--- twisted/topfiles/setup.py	(revision 34349)
+++ twisted/topfiles/setup.py	(working copy)
@@ -18,7 +18,7 @@
 from twisted import copyright
 from twisted.python.dist import setup, ConditionalExtension as Extension
 from twisted.python.dist import getPackages, getDataFiles, getScripts
-from twisted.python.dist import twisted_subprojects, _isCPython, _hasEpoll
+from twisted.python.dist import twisted_subprojects, _isCPython, _hasEpoll, _hasEcf
 
 
 extensions = [
@@ -31,6 +31,10 @@
               condition=lambda builder: (_isCPython and _hasEpoll(builder) and
                                          sys.version_info[:2] < (2, 6))),
 
+    Extension("twisted.python._ecf",
+              ["twisted/python/_ecf.c"],
+              condition=lambda builder: (_isCPython and _hasEcf(builder))),
+
     Extension("twisted.internet.iocpreactor.iocpsupport",
               ["twisted/internet/iocpreactor/iocpsupport/iocpsupport.c",
                "twisted/internet/iocpreactor/iocpsupport/winsock_pointers.c"],
Index: twisted/internet/ecfreactor.py
===================================================================
--- twisted/internet/ecfreactor.py	(revision 0)
+++ twisted/internet/ecfreactor.py	(revision 0)
@@ -0,0 +1,319 @@
+# -*- test-case-name: twisted.test.test_internet -*-
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+
+"""
+An Event Completion Framework based implementation of the twisted main loop.
+
+To install the event loop (and you should do this before any connections,
+listeners or connectors are added)::
+
+    from twisted.internet import ecfreactor
+    ecfreactor.install()
+
+@author: Justin Venus
+"""
+
+
+
+################################################################################
+# At idle this reactor should use the following system resources with the web
+# demo.
+#
+# /usr/demo/twisted-python2.6/twistd -n --reactor=ecf web
+#
+################################################################################
+#
+#   PID USERNAME NLWP PRI NICE  SIZE   RES STATE    TIME    CPU COMMAND
+#  3779 jvenus      1  59    0   22M   14M sleep    0:04  0.08% twistd
+#
+################################################################################
+
+import sys
+import errno
+from zope.interface import implements
+
+from twisted.internet.interfaces import IReactorFDSet
+
+from twisted.python import log
+from twisted.internet import posixbase, error
+
+from twisted.internet.main import CONNECTION_DONE, CONNECTION_LOST
+
+from twisted.python import _ecf
+from twisted.internet.fdesc import setNonBlocking
+
+
+class ECFReactor(posixbase.PosixReactorBase, posixbase._PollLikeMixin):
+    """
+    A reactor that uses Event Completion Framework (ECF).
+
+    @ivar _poller: A L{poll} which will be used to check for I/O
+        readiness.
+
+    @ivar _selectables: A dictionary mapping integer file descriptors to
+        instances of L{FileDescriptor} which have been registered with the
+        reactor.  All L{FileDescriptors} which are currently receiving read or
+        write readiness notifications will be present as values in this
+        dictionary.
+
+    @ivar _reads: A dictionary mapping integer file descriptors to arbitrary
+        values (this is essentially a set).  Keys in this dictionary will be
+        registered with C{_poller} for read readiness notifications which will
+        be dispatched to the corresponding L{FileDescriptor} instances in
+        C{_selectables}.
+
+    @ivar _writes: A dictionary mapping integer file descriptors to arbitrary
+        values (this is essentially a set).  Keys in this dictionary will be
+        registered with C{_poller} for write readiness notifications which will
+        be dispatched to the corresponding L{FileDescriptor} instances in
+        C{_selectables}.
+    """
+    implements(IReactorFDSet)
+
+    # Attributes for _PollLikeMixin
+    _POLL_DISCONNECTED = (_ecf.EPOLLHUP | _ecf.EPOLLERR)
+    _POLL_IN = _ecf.EPOLLIN
+    _POLL_OUT = _ecf.EPOLLOUT
+
+    # Attributes to limit our resource usage when idle.
+    _AGGRESSIVE_POLL = 8750000 # nano seconds
+    _CONSERVATIVE_POLL = 500000000 # nano seconds
+    _THROTTLE_AFTER = 115 # _AGGRESSIVE_POLL * _THROTTLE_AFTER ~= 1 second
+
+
+    def __init__(self):
+        """
+        Initialize ecf object, file descriptor tracking dictionaries, and the
+        base class.
+        """
+        # Create the poller we're going to use.  This reactor is similar to the
+        # epollreactor that is available in Linux.  Unlike Epoll the Solaris
+        # port interfaces require re-association of FD's after every event
+        # is retrieved.  The Solaris implementation hints at the maximum
+        # event per port at 8192 events.  The underlying implementation supports
+        # POSIX AIO, but it is not exposed to the reactor at this time.
+        self._poller = _ecf.ecf()
+        self._reads = {}
+        self._writes = {}
+        self._selectables = {}
+        posixbase.PosixReactorBase.__init__(self)
+        #initialize the throttle
+        self._throttle = self._THROTTLE_AFTER
+
+
+    def addReader(self, reader):
+        """
+        Implement L{IReactorFDSet.addReader}.
+        """
+        fd = reader.fileno()
+        # we must be certain the FD's are nonblocking
+        setNonBlocking(fd)
+        # we must tell the underlying port_associate all of the
+        # events we are interested in.
+        flags = self._POLL_IN | self._POLL_DISCONNECTED
+        if fd in self._writes:
+            # we need to remove associated FD's to modify them
+            self._poller.remove(fd)
+            flags |= self._POLL_OUT
+        self._poller.add(fd, flags)
+        self._reads[fd] = 1
+        self._selectables[fd] = reader 
+
+
+    def addWriter(self, writer):
+        """
+        Implement L{IReactorFDSet.addWriter}.
+        """
+        fd = writer.fileno()
+        # we must be certain the FD's are nonblocking
+        setNonBlocking(fd)
+        # we must tell the underlying port_associate all of the
+        # events we are interested in.
+        flags = self._POLL_OUT | self._POLL_DISCONNECTED
+        if fd in self._reads:
+            # we need to remove associated FD's to modify them
+            self._poller.remove(fd)
+            flags |= self._POLL_IN
+        self._poller.add(fd, flags)
+        self._writes[fd] = 1
+        self._selectables[fd] = writer 
+
+
+    def removeReader(self, reader):
+        """
+        Implement L{IReactorFDSet.removeReader}.
+        """
+        fd = reader.fileno()
+        self._reads.pop(fd, None) 
+        # removal may require re-association later
+        self._poller.remove(fd)
+        if fd not in self._writes:
+            self._selectables.pop(fd, None)
+        else:
+            # re-associate the writer
+            self.addWriter(reader)
+
+
+    def removeWriter(self, writer):
+        """
+        Implement L{IReactorFDSet.removeWriter}.
+        """
+        fd = writer.fileno()
+        self._writes.pop(fd, None)
+        # removal may require re-association later
+        self._poller.remove(fd)
+        if fd not in self._reads:
+            self._selectables.pop(fd, None)
+        else:
+            # re-associate the reader
+            self.addReader(writer)
+
+
+    def removeAll(self):
+        """
+        Implement L{IReactorFDSet.removeAll}.
+        """
+        return self._removeAll(
+            [self._selectables[fd] for fd in self._reads],
+            [self._selectables[fd] for fd in self._writes])
+
+
+    def getReaders(self):
+        """
+        Implement L{IReactorFDSet.getReaders}.
+        """
+        return [self._selectables[fd] for fd in self._reads]
+
+
+    def getWriters(self):
+        """
+        Implement L{IReactorFDSet.getWriters}.
+        """
+        return [self._selectables[fd] for fd in self._writes]
+
+
+    def doPoll(self, timeout):
+        """
+        Poll the poller for new events.
+
+        Note: This method ignores the timeout parameter.
+        """
+        # for the time being explode loudly on failures
+
+        # I could not come up with a better way to limit the cpu
+        # usage when we have no events than what the following
+        # implementation provides. -jvenus
+
+        # see how many events may be in a ready state
+        poller = self._poller.peek()
+        if poller:
+            # reset the throttle, b/c we may have data again soon
+            self._throttle = self._THROTTLE_AFTER
+            l = self._poller.poll(1, 0, poller)
+        elif not self._throttle:
+            # the second parameter is nano seconds, so 2 polls per second
+            l = self._poller.poll(
+                0, self._CONSERVATIVE_POLL, len(self._selectables))
+        else:
+            self._throttle -= 1
+            # the second parameter is nano seconds, this was the only
+            # sane default that I could find that still allowed us to
+            # be responsive, but not completely hammer the cpu. -jvenus
+            l = self._poller.poll(
+                0, self._AGGRESSIVE_POLL, len(self._selectables))
+
+        _drdw = self._doReadOrWrite
+        for fd, event in l:
+            try:
+                selectable = self._selectables[fd]
+            except KeyError:
+                pass
+            else:
+                log.callWithLogger(selectable, _drdw, selectable, fd, event)
+
+
+    def _doReadOrWrite(self, selectable, fd, event):
+        """
+        fd is available for read or write, do the work and raise errors if
+        necessary.
+        """
+        # Shamelessy borrowed from the base implementation. 
+        # A few minor modifications were needed so that we can re-associate 
+        # the file descriptor for the next set of events. This was required
+        # due to how the underlying Solaris API works.
+        why = None
+        inRead = False
+        fileNo = 0
+        if event & self._POLL_DISCONNECTED and not (event & self._POLL_IN):
+            # Handle disconnection.  But only if we finished processing all
+            # the pending input.
+            if fd in self._reads:
+                # If we were reading from the descriptor then this is a
+                # clean shutdown.  We know there are no read events pending
+                # because we just checked above.  It also might be a
+                # half-close (which is why we have to keep track of inRead).
+                inRead = True
+                why = CONNECTION_DONE
+            else:
+                # If we weren't reading, this is an error shutdown of some
+                # sort.
+                why = CONNECTION_LOST
+        else:
+            # Any non-disconnect event turns into a doRead or a doWrite.
+            try:
+                # First check to see if the descriptor is still valid.  This
+                # gives fileno() a chance to raise an exception, too. 
+                # Ideally, disconnection would always be indicated by the
+                # return value of doRead or doWrite (or an exception from
+                # one of those methods), but calling fileno here helps make
+                # buggy applications more transparent.
+                fileNo = selectable.fileno()
+                if fileNo == -1:
+                    # -1 is sort of a historical Python artifact.  Python
+                    # files and sockets used to change their file descriptor
+                    # to -1 when they closed.  For the time being, we'll
+                    # continue to support this anyway in case applications
+                    # replicated it, plus abstract.FileDescriptor.fileno
+                    # returns -1.  Eventually it'd be good to deprecate this
+                    # case.
+                    why = error.ConnectionFdescWentAway(
+                          'Filedescriptor went away')
+                else:
+                    if event & self._POLL_IN:
+                        # Handle a read event.
+                        why = selectable.doRead()
+                        inRead = True
+                    if not why and event & self._POLL_OUT:
+                        # Handle a write event, as long as doRead didn't
+                        # disconnect us.
+                        why = selectable.doWrite()
+                        inRead = False
+            except:
+                # Any exception from application code gets logged and will
+                # cause us to disconnect the selectable.
+                why = sys.exc_info()[1]
+                log.err()
+        if why:
+            self._disconnectSelectable(selectable, why, inRead)
+        # We must re-associate the file descriptor for the next event
+        elif inRead and fileNo in self._reads:
+            self.addReader(selectable)
+        # We must re-associate the file descriptor for the next event
+        elif not inRead and fileNo in self._writes:
+            self.addWriter(selectable)
+
+    doIteration = doPoll
+
+
+def install():
+    """
+    Install the ecf() reactor.
+    """
+    p = ECFReactor()
+    from twisted.internet.main import installReactor
+    installReactor(p)
+
+
+__all__ = ["ECFReactor", "install"]
+
