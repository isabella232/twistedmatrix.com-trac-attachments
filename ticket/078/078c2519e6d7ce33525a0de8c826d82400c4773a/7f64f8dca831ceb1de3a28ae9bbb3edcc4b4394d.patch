Index: protocols/amp.py
===================================================================
--- protocols/amp.py	(revision 23877)
+++ protocols/amp.py	(working copy)
@@ -1616,7 +1616,7 @@
                   'tls_verifyAuthorities']:
             ab.pop(k, None)
         ab._sendTo(proto)
-        proto._startTLS(self.certificate, self.verify)
+        proto._startTLS(self.certificate, self.verify, 1)
 
 
 
@@ -1684,7 +1684,7 @@
         proto._prepareTLS(self.certificate, self.authorities)
         # XXX before we get back to user code we are going to start TLS...
         def actuallystart(response):
-            proto._startTLS(self.certificate, self.authorities)
+            proto._startTLS(self.certificate, self.authorities, 0)
             return response
         d.addCallback(actuallystart)
         return d
@@ -1968,7 +1968,7 @@
                     (certificate, verifyAuthorities)))
 
 
-    def _startTLS(self, certificate, verifyAuthorities):
+    def _startTLS(self, certificate, verifyAuthorities, client):
         """
         Used by TLSBox to initiate the SSL handshake.
 
@@ -1982,7 +1982,7 @@
         self._justStartedTLS = True
         if verifyAuthorities is None:
             verifyAuthorities = ()
-        self.transport.startTLS(certificate.options(*verifyAuthorities))
+        self.transport.startTLS(certificate.options(*verifyAuthorities), client)
         # Remember that mutable list that we were just talking about?  Here
         # it is.  sslverify.py takes care of populating this list as
         # necessary. --glyph
Index: internet/tcp.py
===================================================================
--- internet/tcp.py	(revision 23877)
+++ internet/tcp.py	(working copy)
@@ -656,13 +656,8 @@
         """
         return self.repstr
 
-    def startTLS(self, ctx, server=1):
-        holder = Connection.startTLS(self, ctx)
-        if server:
-            self.socket.set_accept_state()
-        else:
-            self.socket.set_connect_state()
-        return holder
+    def startTLS(self, ctx, client=0):
+        return super(Server, self).startTLS(ctx, client)
 
     def getHost(self):
         """Returns an IPv4Address.
