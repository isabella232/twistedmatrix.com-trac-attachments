Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 23536)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -160,17 +160,171 @@
         del self.client
         del self.transport
 
-    def testModeChange(self):
-        message = ":ChanServ!ChanServ@services. MODE #tanstaafl +o exarkun\r\n"
+
+    def _sendModeChange(self, msg, args=''):
+        """
+        Format the string and send it to the client
+        """
+        message = ":Wolf!~wolf@yok.utu.fi MODE #chan %s %s\r\n" % (msg, args)
         self.client.dataReceived(message)
-        self.assertEquals(
-            self.client.calls,
-            [('modeChanged', {'user': "ChanServ!ChanServ@services.",
-                              'channel': '#tanstaafl',
-                              'set': True,
-                              'modes': 'o',
-                              'args': ('exarkun',)})])
 
+
+    def _parseModeChange(self, results):
+        """
+        Parse the results, do some test and return the data to check
+        """
+        for n,result in enumerate(results):
+            method, data = result
+            self.assertEquals(method, 'modeChanged')
+            self.assertEquals(data['user'], 'Wolf!~wolf@yok.utu.fi')
+            self.assertEquals(data['channel'], '#chan')
+            results[n] = tuple([data[key] for key in ('set', 'modes', 'args')])
+        return results
+
+
+    def _checkModeChange(self, expected):
+        """
+        Compare the expected result with the one returned by the client
+        """
+        result = self._parseModeChange(self.client.calls)
+        self.assertEquals(result, expected)
+
+
+    def test_modeChangeWithASingleMode(self):
+        """
+        A single mode added to a user
+        """
+        self._sendModeChange('+o', 'exarkun')
+        self._checkModeChange([(True, 'o', ('exarkun',))])
+
+
+    def test_modeChangeWithArgsAndDifferentModes(self):
+        """
+        Two modes added and one removed, they all accept args
+        """
+        self._sendModeChange('-oo+b', 'foo bar baz')
+        self._checkModeChange([
+            (True, 'b', ('baz',)),
+            (False, 'oo', ('foo', 'bar'))
+        ])
+
+
+    def test_modeChangeWithArgsAndEqualModes(self):
+        """
+        Two modes added, they all accept args
+        """
+        self._sendModeChange('+xy', 'cow frog')
+        self._checkModeChange([(True, 'xy', ('cow', 'frog'))])
+
+
+    def test_modeChangeWithArgsAndMixedModes(self):
+        """
+        Some modes added and others removed, they all accept args
+        """
+        self._sendModeChange('+oo-h+vv-b', 'foo bar baz cow frog bat')
+        self._checkModeChange([
+            (True, 'oovv', ('foo','bar','cow','frog')),
+            (False, 'hb', ('baz', 'bat'))
+        ])
+
+
+    def test_modeChangeWithNoArgsAndDifferentModes(self):
+        """
+        A mode added and another removed, they don't accept any arg
+        """
+        self._sendModeChange('-c+U')
+        self._checkModeChange([(True, 'U', ()), (False, 'c', ())])
+
+
+    def test_modeChangeWithNoArgsAndEqualModes(self):
+        """
+        Two modes removed, they don't accept any arg
+        """
+        self._sendModeChange('-cU')
+        self._checkModeChange([(False, 'cU', ())])
+
+
+    def test_modeChangeWithNoArgsAndMixedModes(self):
+        """
+        Some modes added and others removed, they don't accept any arg
+        """
+        self._sendModeChange('-c+fr-o+og-w')
+        self._checkModeChange([(True, 'frog', ()), (False, 'cow', ())])
+
+
+    def test_modeChangeWithSomeArgAndDifferentModes(self):
+        """
+        Two modes added and two removed, only the last accepts an arg
+        """
+        self._sendModeChange('+sU-lv', 'dea7h')
+        self._checkModeChange([(True, 'sU', ()), (False, 'lv', ('dea7h',))])
+
+
+    def test_modeChangeWithSomeArgAndEqualModes(self):
+        """
+        Two modes added, only the last accepts an arg
+        """
+        self._sendModeChange('+cl 1337')
+        self._checkModeChange([(True, 'cl', ('1337',))])
+
+
+    def test_modeChangeWithSomeArgAndMixedModes(self):
+        """
+        Some modes added and others removed, only the 2nd, 3rd and 5th
+        accept an arg
+        """
+        self._sendModeChange('-co+l-U+o', 'Wolf 3141592 dea7h')
+        self._checkModeChange([
+            (True, 'lo', ('3141592', 'dea7h')),
+            (False, 'coU', ('Wolf',))
+        ])
+
+
+    def test_modeChangeWithUnknownModes(self):
+        """
+        Some modes added and others removed, only the 3rd is known to
+        accept an arg, the other modes don't accept anything by default
+        """
+        self._sendModeChange('+a-eo+f-g+qz', 'Wolf')
+        self._checkModeChange([(True, 'afqz', ()), (False, 'eog', ('Wolf',))])
+
+
+    def test_modeChangeWithWrongModesString(self):
+        """
+        The modes string is supposed to start with '+' or '-', if they miss 
+        a '+' will be added by default
+        """
+        self._sendModeChange('o', 'Wolf')
+        self._checkModeChange([(True, 'o', ('Wolf',))])
+
+
+    def test_modeChangeWithRepeatedAddedModes(self):
+        """
+        Two modes are added repeating the '+'
+        """
+        self._sendModeChange('+o+c', 'Wolf')
+        self._checkModeChange([(True, 'oc', ('Wolf',))])
+
+
+    def test_modeChangeWithRepeatedRemovedModes(self):
+        """
+        Two modes are removed repeating the '-'
+        """
+        self._sendModeChange('-o-c', 'Wolf')
+        self._checkModeChange([(False, 'oc', ('Wolf',))])
+
+
+    def test_modeChangeWithRepeatedMixedModes(self):
+        """
+        Several modes are added and removed repeating the '+' and the '-'
+        """
+        self._sendModeChange('+a+v-h-r+o+c-k-l', 'Wolf dea7h Svadilfari')
+        self._checkModeChange([
+            (True, 'avoc', ('Wolf', 'Svadilfari')),
+            (False, 'hrkl', ('dea7h',))
+        ])
+
+
     def _serverTestImpl(self, code, msg, func, **kw):
         host = pop(kw, 'host', 'server.host')
         nick = pop(kw, 'nick', 'nickname')
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 23536)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -549,6 +549,26 @@
     dcc_destdir = '.'
     dcc_sessions = None
 
+    # 'mode': (added, removed) i.e.:
+    # 'l': (True, False) accepts an arg when added and no arg when removed
+    # from http://www.faqs.org/rfcs/rfc1459.html - 4.2.3.1 Channel modes
+    # if you want other modes to accept args, add them here, by default unknown
+    # modes won't accept any arg
+    _modeAcceptsArg = {
+        'o': (True, True),    # op/deop a user
+        'h': (True, True),    # hop/dehop (halfop) a user (not defined in RFC)
+        'v': (True, True),    # voice/devoice a user
+        'b': (True, True),    # ban/unban a user/mask
+        'l': (True, False),   # set the user limit to channel
+        'k': (True, False),   # set a channel key (password)
+        't': (False, False),  # only ops set topic
+        's': (False, False),  # secret channel
+        'p': (False, False),  # private channel
+        'i': (False, False),  # invite-only channel
+        'm': (False, False),  # moderated channel
+        'n': (False, False),  # no external messages
+    }
+
     # If this is false, no attempt will be made to identify
     # ourself to the server.
     performLogin = 1
@@ -699,17 +719,22 @@
         self.privmsg(user, channel, message)
 
     def modeChanged(self, user, channel, set, modes, args):
-        """Called when a channel's modes are changed
+        """Called when users or channel's modes are changed.
 
         @type user: C{str}
         @param user: The user and hostmask which instigated this change.
 
         @type channel: C{str}
-        @param channel: The channel for which the modes are changing.
+        @param channel: The channel where the modes are changed. If args is
+        empty the channel for which the modes are changing. If the changes are
+        at server level it could be equal to C{user}.
 
         @type set: C{bool} or C{int}
-        @param set: true if the mode is being added, false if it is being
-        removed.
+        @param set: True if the mode(s) is being added, False if it is being
+        removed. If some modes are added and others removed at the same time
+        this function will be called twice, the first time with all the added
+        modes, the second with the removed ones. (To change this behaviour
+        override the irc_MODE method)
 
         @type modes: C{str}
         @param modes: The mode or modes which are being changed.
@@ -1011,13 +1036,43 @@
         nick = string.split(prefix,'!')[0]
         self.userQuit(nick, params[0])
 
+
     def irc_MODE(self, prefix, params):
-        channel, rest = params[0], params[1:]
-        set = rest[0][0] == '+'
-        modes = rest[0][1:]
-        args = rest[1:]
-        self.modeChanged(prefix, channel, set, modes, tuple(args))
+        """
+        Parse the server message when one or more modes are changed
+        """
+        user, channel, modes, args = prefix, params[0], params[1], params[2:]
+        if modes[0] not in '+-':
+            # add a '+' before the modes if it isn't specified (e.g. MODE s)
+            modes = '+' + modes
+        if ((modes[0] == '+' and '-' not in modes[1:]) or
+            (modes[0] == '-' and '+' not in modes[1:])):
+            # all modes are added or removed
+            set = (modes[0] == '+')
+            modes = modes[1:].replace('-+'[set], '')
+            self.modeChanged(user, channel, set, modes, tuple(args))
+        else:
+            # some modes added and other removed
+            modes2, args2 = ['', ''], [[], []]
+            for c in modes:
+                if c == '+':
+                    i = 0
+                elif c == '-':
+                    i = 1
+                else:
+                    modes2[i] += c
+                    # take an arg only if the mode accepts it (e.g. +o nick)
+                    if args and self._modeAcceptsArg.get(c, (False, False))[i]:
+                        args2[i].append(args.pop(0))
+            if args:
+                log.msg('Too many args (%s) received for %s. If one or more '
+                    'modes are supposed to accept an arg and they are not in '
+                    '_modeAcceptsArg, add them.' % (' '.join(args), modes))
 
+            self.modeChanged(user, channel, True, modes2[0], tuple(args2[0]))
+            self.modeChanged(user, channel, False, modes2[1], tuple(args2[1]))
+
+
     def irc_PING(self, prefix, params):
         self.sendLine("PONG %s" % params[-1])
 
