Index: twisted/web/test/test_webclient.py
===================================================================
--- twisted/web/test/test_webclient.py	(revision 22720)
+++ twisted/web/test/test_webclient.py	(working copy)
@@ -128,6 +128,7 @@
         FilePath(name).child("file").setContent("0123456789")
         r = static.File(name)
         r.putChild("redirect", util.Redirect("/file"))
+        r.putChild("infiniteRedirect", util.Redirect("/infiniteRedirect"))
         r.putChild("wait", LongTimeTakingResource())
         r.putChild("error", ErrorResource())
         r.putChild("nolength", NoLengthResource())
@@ -300,6 +301,15 @@
     def _cbCheckLocation(self, exc):
         self.assertEquals(exc.location, "/file")
 
+    def test_infiniteRedirection(self):
+        """
+        Test that endless HTTP redirection results in an
+        L{error.InfiniteRedirection} failure.
+        """
+        d = client.getPage(self.getURL("infiniteRedirect"))
+        d = self.assertFailure(d, error.InfiniteRedirection)
+        return d
+
     def testPartial(self):
         name = self.mktemp()
         f = open(name, "wb")
Index: twisted/web/error.py
===================================================================
--- twisted/web/error.py	(revision 22720)
+++ twisted/web/error.py	(working copy)
@@ -27,6 +27,13 @@
         Error.__init__(self, code, message, response)
         self.location = location
 
+class InfiniteRedirection(Error):
+    """HTTP redirection is occuring endlessly"""
+    def __init__(self, code, message = None, response = None, location = None):
+        message = message or ("%s to %s" % (http.responses.get(code), location))
+        Error.__init__(self, code, message, response)
+        self.location = location
+
 class ErrorPage(resource.Resource):
     def __init__(self, status, brief, detail):
         resource.Resource.__init__(self)
Index: twisted/web/client.py
===================================================================
--- twisted/web/client.py	(revision 22720)
+++ twisted/web/client.py	(working copy)
@@ -84,6 +84,17 @@
         if self.followRedirect:
             scheme, host, port, path = \
                 _parse(url, defaultPort=self.transport.getPeer().port)
+
+            self.factory.redirectCount += 1
+            if self.factory.redirectCount >= self.factory.redirectLimit:
+                self.factory.noPage(
+                    failure.Failure(
+                        error.InfiniteRedirection(
+                            self.status, 'Infinite redirection detected', location = url)))
+                self.quietLoss = 1
+                self.transport.loseConnection()
+                return
+
             self.factory.setURL(url)
 
             if self.factory.scheme == 'https':
@@ -190,6 +201,13 @@
     @type response_headers: dict
     @ivar response_headers: The headers that were specified in the
           response from the server.
+
+    @type redirectLimit: int
+    @ivar redirectLimit: The maximum number of HTTP redirects that can occur
+          before it is assumed that the redirection is endless.
+
+    @type redirectCount: int
+    @ivar redirectCount: The current number of HTTP redirects encountered.
     """
 
     protocol = HTTPPageGetter
@@ -202,8 +220,10 @@
 
     def __init__(self, url, method='GET', postdata=None, headers=None,
                  agent="Twisted PageGetter", timeout=0, cookies=None,
-                 followRedirect=1):
+                 followRedirect=1, redirectLimit=20):
         self.protocol.followRedirect = followRedirect
+        self.redirectLimit = redirectLimit
+        self.redirectCount = 0
         self.timeout = timeout
         self.agent = agent
 
