diff --git a/twisted/words/test/test_basesupport.py b/twisted/words/test/test_basesupport.py
index 3a81963..bd4d02c 100644
--- a/twisted/words/test/test_basesupport.py
+++ b/twisted/words/test/test_basesupport.py
@@ -58,10 +58,10 @@ class ClientMsgTests(unittest.TestCase):
         account.loginDeferred.callback(None)
 
         def check(result):
-            self.assert_(not account.loginHasFailed, 
-                    "Login shouldn't have failed")
-            self.assert_(account.loginCallbackCalled, 
-                    "We should be logged in")
+            self.assertTrue(not account.loginHasFailed,
+                            "Login shouldn't have failed")
+            self.assertTrue(account.loginCallbackCalled,
+                            "We should be logged in")
         d.addCallback(check)
         return d
 
@@ -76,12 +76,12 @@ class ClientMsgTests(unittest.TestCase):
         account.loginDeferred.errback(Exception())
 
         def err(reason):
-            self.assert_(account.loginHasFailed, "Login should have failed")
-            self.assert_(not account.loginCallbackCalled, 
-                    "We shouldn't be logged in")
-            self.assert_(not ui.clientRegistered, 
-                    "Client shouldn't be registered in the UI")
-        cb = lambda r: self.assert_(False, "Shouldn't get called back")
+            self.assertTrue(account.loginHasFailed, "Login should have failed")
+            self.assertTrue(not account.loginCallbackCalled,
+                            "We shouldn't be logged in")
+            self.assertTrue(not ui.clientRegistered,
+                            "Client shouldn't be registered in the UI")
+        cb = lambda r: self.assertTrue(False, "Shouldn't get called back")
         d.addCallbacks(cb, err)
         return d
 
diff --git a/twisted/words/test/test_irc.py b/twisted/words/test/test_irc.py
index ffda689..1c0c834 100644
--- a/twisted/words/test/test_irc.py
+++ b/twisted/words/test/test_irc.py
@@ -1650,7 +1650,7 @@ class ClientMsgTests(unittest.TestCase):
         then sends the message to the server for delivery to that channel.
         """
         self.client.say("thechannel", "the message")
-        self.assertEquals(
+        self.assertEqual(
             self.client.lines, ["PRIVMSG #thechannel :the message"])
 
 
diff --git a/twisted/words/test/test_jabberclient.py b/twisted/words/test/test_jabberclient.py
index 87af883..456a27e 100644
--- a/twisted/words/test/test_jabberclient.py
+++ b/twisted/words/test/test_jabberclient.py
@@ -403,10 +403,10 @@ class XMPPAuthenticatorTest(unittest.TestCase):
         # test list of initializers
         version, tls, sasl, bind, session = xs.initializers
 
-        self.assert_(isinstance(tls, xmlstream.TLSInitiatingInitializer))
-        self.assert_(isinstance(sasl, SASLInitiatingInitializer))
-        self.assert_(isinstance(bind, client.BindInitializer))
-        self.assert_(isinstance(session, client.SessionInitializer))
+        self.assertTrue(isinstance(tls, xmlstream.TLSInitiatingInitializer))
+        self.assertTrue(isinstance(sasl, SASLInitiatingInitializer))
+        self.assertTrue(isinstance(bind, client.BindInitializer))
+        self.assertTrue(isinstance(session, client.SessionInitializer))
 
         self.assertFalse(tls.required)
         self.assertTrue(sasl.required)
diff --git a/twisted/words/test/test_jabbererror.py b/twisted/words/test/test_jabbererror.py
index 45d8dac..834bd3e 100644
--- a/twisted/words/test/test_jabbererror.py
+++ b/twisted/words/test/test_jabbererror.py
@@ -285,7 +285,7 @@ class ExceptionFromStanzaTest(unittest.TestCase):
         uc['feature'] = 'retrieve-subscriptions'
 
         result = error.exceptionFromStanza(stanza)
-        self.assert_(isinstance(result, error.StanzaError))
+        self.assertTrue(isinstance(result, error.StanzaError))
         self.assertEqual('feature-not-implemented', result.condition)
         self.assertEqual('cancel', result.type)
         self.assertEqual(uc, result.appCondition)
@@ -313,7 +313,7 @@ class ExceptionFromStanzaTest(unittest.TestCase):
         e['code'] = '502'
 
         result = error.exceptionFromStanza(stanza)
-        self.assert_(isinstance(result, error.StanzaError))
+        self.assertTrue(isinstance(result, error.StanzaError))
         self.assertEqual('service-unavailable', result.condition)
         self.assertEqual('wait', result.type)
         self.assertEqual('Unable to resolve hostname.', result.text)
@@ -338,5 +338,5 @@ class ExceptionFromStreamErrorTest(unittest.TestCase):
         e.addElement((NS_XMPP_STREAMS, 'xml-not-well-formed'))
 
         result = error.exceptionFromStreamError(e)
-        self.assert_(isinstance(result, error.StreamError))
+        self.assertTrue(isinstance(result, error.StreamError))
         self.assertEqual('xml-not-well-formed', result.condition)
diff --git a/twisted/words/test/test_msn.py b/twisted/words/test/test_msn.py
index ece580f..445004e 100644
--- a/twisted/words/test/test_msn.py
+++ b/twisted/words/test/test_msn.py
@@ -79,7 +79,7 @@ class PassportTests(unittest.TestCase):
                                     "ru=http://messenger.msn.com"
         }
         self._doLoginTest('HTTP/1.1 200 OK\r\n', headers)
-        self.failUnless(self.result[0] == (msn.LOGIN_SUCCESS, 'somekey'))
+        self.assertTrue(self.result[0] == (msn.LOGIN_SUCCESS, 'somekey'))
 
     def testPassportLoginFailure(self):
         headers = {
@@ -89,7 +89,7 @@ class PassportTests(unittest.TestCase):
                                  'cbtxt=the%20error%20message'
         }
         self._doLoginTest('HTTP/1.1 401 Unauthorized\r\n', headers)
-        self.failUnless(self.result[0] == (msn.LOGIN_FAILURE, 'the error message'))
+        self.assertTrue(self.result[0] == (msn.LOGIN_FAILURE, 'the error message'))
 
     def testPassportLoginRedirect(self):
         headers = {
@@ -98,7 +98,7 @@ class PassportTests(unittest.TestCase):
             'Location'            : 'https://newlogin.host.com/'
         }
         self._doLoginTest('HTTP/1.1 302 Found\r\n', headers)
-        self.failUnless(self.result[0] == (msn.LOGIN_REDIRECT, 'https://newlogin.host.com/', 'a'))
+        self.assertTrue(self.result[0] == (msn.LOGIN_REDIRECT, 'https://newlogin.host.com/', 'a'))
 
 
 if msn is not None:
@@ -284,7 +284,7 @@ class NotificationTests(unittest.TestCase):
 
     def testLogin(self):
         self.client.lineReceived('USR 1 OK foo@bar.com Test%20Screen%20Name 1 0')
-        self.failUnless((self.client.state == 'LOGIN'), msg='Failed to detect successful login')
+        self.assertTrue((self.client.state == 'LOGIN'), msg='Failed to detect successful login')
 
 
     def test_loginWithoutSSLFailure(self):
@@ -313,7 +313,7 @@ class NotificationTests(unittest.TestCase):
         m += 'preferredEmail: foo@bar.com\r\ncountry: AU\r\nPostalCode: 90210\r\nGender: M\r\nKid: 0\r\nAge:\r\nsid: 400\r\n'
         m += 'kv: 2\r\nMSPAuth: 2CACCBCCADMoV8ORoz64BVwmjtksIg!kmR!Rj5tBBqEaW9hc4YnPHSOQ$$\r\n\r\n'
         map(self.client.lineReceived, m.split('\r\n')[:-1])
-        self.failUnless((self.client.state == 'PROFILE'), msg='Failed to detect initial profile')
+        self.assertTrue((self.client.state == 'PROFILE'), msg='Failed to detect initial profile')
 
     def testStatus(self):
         t = [('ILN 1 AWY foo@bar.com Test%20Screen%20Name 0', 'INITSTATUS', 'Failed to detect initial status report'),
@@ -322,7 +322,7 @@ class NotificationTests(unittest.TestCase):
              ('CHG 1 HDN 0', 'MYSTATUS', 'Failed to detect my status changing')]
         for i in t:
             self.client.lineReceived(i[0])
-            self.failUnless((self.client.state == i[1]), msg=i[2])
+            self.assertTrue((self.client.state == i[1]), msg=i[2])
 
     def testListSync(self):
         # currently this test does not take into account the fact
@@ -341,11 +341,11 @@ class NotificationTests(unittest.TestCase):
         map(self.client.lineReceived, lines)
         contacts = self.client.factory.contacts
         contact = contacts.getContact('userHandle@email.com')
-        self.failUnless(contacts.version == 100, "Invalid contact list version")
-        self.failUnless(contact.screenName == 'Some Name', "Invalid screen-name for user")
-        self.failUnless(contacts.groups == {0 : 'Other Contacts'}, "Did not get proper group list")
-        self.failUnless(contact.groups == [0] and contact.lists == 11, "Invalid contact list/group info")
-        self.failUnless(self.client.state == 'GOTLIST', "Failed to call list sync handler")
+        self.assertTrue(contacts.version == 100, "Invalid contact list version")
+        self.assertTrue(contact.screenName == 'Some Name', "Invalid screen-name for user")
+        self.assertTrue(contacts.groups == {0 : 'Other Contacts'}, "Did not get proper group list")
+        self.assertTrue(contact.groups == [0] and contact.lists == 11, "Invalid contact list/group info")
+        self.assertTrue(self.client.state == 'GOTLIST', "Failed to call list sync handler")
 
     def testAsyncPhoneChange(self):
         c = msn.MSNContact(userHandle='userHandle@email.com')
@@ -354,9 +354,9 @@ class NotificationTests(unittest.TestCase):
         self.client.makeConnection(StringTransport())
         self.client.lineReceived("BPR 101 userHandle@email.com PHH 123%20456")
         c = self.client.factory.contacts.getContact('userHandle@email.com')
-        self.failUnless(self.client.state == 'GOTPHONE', "Did not fire phone change callback")
-        self.failUnless(c.homePhone == '123 456', "Did not update the contact's phone number")
-        self.failUnless(self.client.factory.contacts.version == 101, "Did not update list version")
+        self.assertTrue(self.client.state == 'GOTPHONE', "Did not fire phone change callback")
+        self.assertTrue(c.homePhone == '123 456', "Did not update the contact's phone number")
+        self.assertTrue(self.client.factory.contacts.version == 101, "Did not update list version")
 
     def testLateBPR(self):
         """
@@ -376,7 +376,7 @@ class NotificationTests(unittest.TestCase):
         ]
         map(self.client.lineReceived, lines)
         contact = self.client.factory.contacts.getContact('userHandle@email.com')
-        self.failUnless(contact.homePhone == '123 456', "Did not update contact's phone number")
+        self.assertTrue(contact.homePhone == '123 456', "Did not update contact's phone number")
 
     def testUserRemovedMe(self):
         self.client.factory.contacts = msn.MSNContactList()
@@ -384,16 +384,16 @@ class NotificationTests(unittest.TestCase):
         contact.addToList(msn.REVERSE_LIST)
         self.client.factory.contacts.addContact(contact)
         self.client.lineReceived("REM 0 RL 100 foo@foo.com")
-        self.failUnless(self.client.state == 'USERREMOVEDME', "Failed to remove user from reverse list")
+        self.assertTrue(self.client.state == 'USERREMOVEDME', "Failed to remove user from reverse list")
 
     def testUserAddedMe(self):
         self.client.factory.contacts = msn.MSNContactList()
         self.client.lineReceived("ADD 0 RL 100 foo@foo.com Screen%20Name")
-        self.failUnless(self.client.state == 'USERADDEDME', "Failed to add user to reverse lise")
+        self.assertTrue(self.client.state == 'USERADDEDME', "Failed to add user to reverse lise")
 
     def testAsyncSwitchboardInvitation(self):
         self.client.lineReceived("RNG 1234 192.168.1.1:1863 CKI 123.456 foo@foo.com Screen%20Name")
-        self.failUnless(self.client.state == "SBINVITED")
+        self.assertTrue(self.client.state == "SBINVITED")
 
     def testCommandFailed(self):
         """
@@ -428,7 +428,7 @@ class MessageHandlingTests(unittest.TestCase):
         m.setHeader('Content-Type', 'text/x-msmsgscontrol')
         m.setHeader('TypingUser', 'foo@bar')
         self.client.checkMessage(m)
-        self.failUnless((self.client.state == 'TYPING'), msg='Failed to detect typing notification')
+        self.assertTrue((self.client.state == 'TYPING'), msg='Failed to detect typing notification')
 
     def testFileInvitation(self, lazyClient=False):
         m = msn.MSNMessage()
@@ -441,7 +441,7 @@ class MessageHandlingTests(unittest.TestCase):
         m.message += 'Application-File: foobar.ext\r\n'
         m.message += 'Application-FileSize: 31337\r\n\r\n'
         self.client.checkMessage(m)
-        self.failUnless((self.client.state == 'INVITATION'), msg='Failed to detect file transfer invitation')
+        self.assertTrue((self.client.state == 'INVITATION'), msg='Failed to detect file transfer invitation')
 
     def testFileInvitationMissingGUID(self):
         return self.testFileInvitation(True)
@@ -455,7 +455,7 @@ class MessageHandlingTests(unittest.TestCase):
         m.message += 'Invitation-Command: ACCEPT\r\n'
         m.message += 'Invitation-Cookie: 1234\r\n\r\n'
         self.client.checkMessage(m)
-        self.failUnless((self.client.state == 'RESPONSE'), msg='Failed to detect file transfer response')
+        self.assertTrue((self.client.state == 'RESPONSE'), msg='Failed to detect file transfer response')
 
     def testFileInfo(self):
         d = Deferred()
@@ -469,7 +469,7 @@ class MessageHandlingTests(unittest.TestCase):
         m.message += 'Port: 6891\r\n'
         m.message += 'AuthCookie: 4321\r\n\r\n'
         self.client.checkMessage(m)
-        self.failUnless((self.client.state == 'INFO'), msg='Failed to detect file transfer info')
+        self.assertTrue((self.client.state == 'INFO'), msg='Failed to detect file transfer info')
 
     def fileResponse(self, (accept, cookie, info)):
         if accept and cookie == 1234: self.client.state = 'RESPONSE'
diff --git a/twisted/words/test/test_service.py b/twisted/words/test/test_service.py
index 12720fe..ed20e27 100644
--- a/twisted/words/test/test_service.py
+++ b/twisted/words/test/test_service.py
@@ -269,7 +269,7 @@ class IRCProtocolTestCase(unittest.TestCase):
         for (prefix, command, args) in response:
             if command in expected:
                 expected.remove(command)
-        self.failIf(expected, "Missing responses for %r" % (expected,))
+        self.assertFalse(expected, "Missing responses for %r" % (expected,))
 
 
     def _login(self, user, nick, password=None):
@@ -615,7 +615,7 @@ class IRCProtocolTestCase(unittest.TestCase):
         response = self._response(user)
         event = self._response(other)
 
-        self.failIf(response)
+        self.assertFalse(response)
         self.assertEqual(len(event), 1)
         self.assertEqual(event[0][0], 'useruser!useruser@realmname')
         self.assertEqual(event[0][1], 'PRIVMSG', -1)
@@ -640,7 +640,7 @@ class IRCProtocolTestCase(unittest.TestCase):
         response = self._response(user)
         event = self._response(other)
 
-        self.failIf(response)
+        self.assertFalse(response)
         self.assertEqual(len(event), 1)
         self.assertEqual(event[0][0], 'useruser!useruser@realmname')
         self.assertEqual(event[0][1], 'PRIVMSG')
@@ -760,8 +760,8 @@ class IRCProtocolTestCase(unittest.TestCase):
         users[0].write('WHO #groupname\r\n')
 
         r = self._response(users[0])
-        self.failIf(self._response(users[1]))
-        self.failIf(self._response(users[2]))
+        self.assertFalse(self._response(users[1]))
+        self.assertFalse(self._response(users[2]))
 
         wantusers = ['userone', 'usertwo', 'userthree']
         for (prefix, code, stuff) in r[:-1]:
@@ -771,13 +771,13 @@ class IRCProtocolTestCase(unittest.TestCase):
             (myname, group, theirname, theirhost, theirserver, theirnick, flag, extra) = stuff
             self.assertEqual(myname, 'userone')
             self.assertEqual(group, '#groupname')
-            self.failUnless(theirname in wantusers)
+            self.assertTrue(theirname in wantusers)
             self.assertEqual(theirhost, 'realmname')
             self.assertEqual(theirserver, 'realmname')
             wantusers.remove(theirnick)
             self.assertEqual(flag, 'H')
             self.assertEqual(extra, '0 ' + theirnick)
-        self.failIf(wantusers)
+        self.assertFalse(wantusers)
 
         prefix, code, stuff = r[-1]
         self.assertEqual(prefix, 'realmname')
