Index: twisted/python/test/test_deprecate.py
===================================================================
--- twisted/python/test/test_deprecate.py	(revision 30444)
+++ twisted/python/test/test_deprecate.py	(working copy)
@@ -21,8 +21,10 @@
 
 from twisted.python.test import deprecatedattributes
 
+from twisted.test.test_modules import PySpaceTestCase
 
 
+
 def dummyCallable():
     """
     Do nothing.
@@ -399,6 +401,14 @@
 
         self.assertIdentical(proxy, sys.modules[self._testModuleName])
 
+
+
+class ImportedModuleAttributeTests(PySpaceTestCase):
+    """
+    Tests for L{deprecatedModuleAttribute} which involve loading a module via
+    'import'.
+    """
+
     _packageInit = """\
 from twisted.python.deprecate import deprecatedModuleAttribute
 from twisted.python.versions import Version
@@ -407,24 +417,82 @@
     Version('Package', 1, 2, 3), 'message', __name__, 'module')
 """
 
-    def test_deprecatedModule(self):
+
+    def pathEntryTree(self, tree):
         """
-        If L{deprecatedModuleAttribute} is used to deprecate a module attribute
-        of a package, only one deprecation warning is emitted when the
-        deprecated module is imported.
+        Create some files in a hierarchy, based on a dictionary describing those
+        files.  The resulting hierarchy will be placed onto sys.path for the
+        duration of the test.
+
+        @param tree: A dictionary representing a directory structure.  Keys are
+            strings, representing filenames, dictionary values represent
+            directories, string values represent file contents.
+
+        @return: another dictionary similar to the input, with file content
+            strings replaced with L{FilePath} objects pointing at where those
+            contents are now stored.
         """
+        def makeSomeFiles(pathobj, dirdict):
+            pathdict = {}
+            for (key, value) in dirdict.items():
+                child = pathobj.child(key)
+                if isinstance(value, str):
+                    pathdict[key] = child
+                    child.setContent(value)
+                elif isinstance(value, dict):
+                    child.createDirectory()
+                    pathdict[key] = makeSomeFiles(child, value)
+                else:
+                    raise ValueError("only strings and dicts allowed as values")
+            return pathdict
         base = FilePath(self.mktemp())
         base.makedirs()
-        package = base.child('package')
-        package.makedirs()
-        package.child('__init__.py').setContent(self._packageInit)
-        module = package.child('module.py').setContent('')
+        result = makeSomeFiles(base, tree)
+        self.replaceSysPath([base.path] + sys.path)
+        self.replaceSysModules(sys.modules.copy())
+        return result
 
-        sys.path.insert(0, base.path)
-        self.addCleanup(sys.path.remove, base.path)
 
+    def simpleModuleEntry(self):
+        """
+        Add a sample module and package to the path, returning a L{FilePath}
+        pointing at the module which will be loadable as C{package.module}.
+        """
+        paths = self.pathEntryTree(
+            {"package": {"__init__.py": self._packageInit,
+                         "module.py": ""}})
+        return paths['package']['module.py']
+
+
+    def checkOneWarning(self, modulePath):
+        """
+        Verification logic for L{test_deprecatedModule}.
+        """
         # import package.module
         from package import module
-        warnings = self.flushWarnings([self.test_deprecatedModule])
+        self.assertEquals(module.__file__, modulePath.path)
+        warnings = self.flushWarnings([self.checkOneWarning])
         self.assertEquals(len(warnings), 1)
 
+
+    def test_deprecatedModule(self):
+        """
+        If L{deprecatedModuleAttribute} is used to deprecate a module attribute
+        of a package, only one deprecation warning is emitted when the
+        deprecated module is imported.
+        """
+        self.checkOneWarning(self.simpleModuleEntry())
+
+
+    def test_deprecatedModuleTwice(self):
+        """
+        If L{deprecatedModuleAttribute} is used to deprecate a module attribute
+        of a package, only one deprecation warning is emitted when the
+        deprecated module is imported a second time.
+        """
+        mp = self.simpleModuleEntry()
+        self.checkOneWarning(mp)
+        self.checkOneWarning(mp)
+    test_deprecatedModuleTwice.skip = "oops"
+
+
