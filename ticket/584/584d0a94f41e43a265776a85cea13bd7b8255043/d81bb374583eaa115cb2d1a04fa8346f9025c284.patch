--- /usr/share/pyshared/twisted/runner/procmon.py	2004-08-25 10:36:30.000000000 +0200
+++ src/twisted/procmon.py	2010-05-18 17:07:09.205883092 +0200
@@ -69,11 +69,18 @@
     def lineReceived(self, line):
         log.msg('[%s] %s' % (self.tag, line))
 
-class LoggingProtocol(protocol.ProcessProtocol):
+class MonitoredProcessProtocol(protocol.ProcessProtocol):
 
     service = None
     name = None
-    empty = 1
+    
+
+    def processEnded(self, reason):
+        if not self.empty:
+            self.output.dataReceived('\n')
+        self.service.connectionLost(self.name)
+
+class BaseLoggingProtocol(protocol.ProcessProtocol):
 
     def connectionMade(self):
         self.output = LineLogger()
@@ -86,11 +93,14 @@
 
     errReceived = outReceived
 
+class LoggingProtocol(BaseLoggingProtocol, MonitoredProcessProtocol):
+
+    empty = 1
+
     def processEnded(self, reason):
+        MonitoredProcessProtocol.processEnded(self, reason)
         if not self.empty:
             self.output.dataReceived('\n')
-        self.service.connectionLost(self.name)
-
 
 class ProcessMonitor(service.Service):
 
@@ -130,10 +140,10 @@
         self.consistency = reactor.callLater(self.consistencyDelay,
                                              self._checkConsistency)
 
-    def addProcess(self, name, args, uid=None, gid=None):
+    def addProcess(self, name, args, uid=None, gid=None, proto=LoggingProcotol):
         if self.processes.has_key(name):
             raise KeyError("remove %s first" % name)
-        self.processes[name] = args, uid, gid
+        self.processes[name] = args, uid, gid, proto
         if self.active:
             self.startProcess(name)
 
@@ -172,10 +182,10 @@
     def startProcess(self, name):
         if self.protocols.has_key(name):
             return
-        p = self.protocols[name] = LoggingProtocol()
+        args, uid, gid, proto = self.processes[name]
+        p = self.protocols[name] = proto()
         p.service = self
         p.name = name
-        args, uid, gid = self.processes[name]
         self.timeStarted[name] = time.time()
         reactor.spawnProcess(p, args[0], args, uid=uid, gid=gid)
 
