diff --git twisted/internet/address.py twisted/internet/address.py
index 9319ecc..aac2e0b 100644
--- twisted/internet/address.py
+++ twisted/internet/address.py
@@ -1,4 +1,4 @@
-# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2011 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 
@@ -58,6 +58,9 @@ class IPv4Address(object):
     def __repr__(self):
         return 'IPv4Address(%s, %r, %d)' % (self.type, self.host, self.port)
 
+    def __hash__(self):
+        return hash((self.type, self.host, self.port))
+        
 
 
 class UNIXAddress(object):
@@ -103,6 +106,14 @@ class UNIXAddress(object):
     def __repr__(self):
         return 'UNIXAddress(%r)' % (self.name,)
 
+    def __hash__(self):
+        try:
+            s1 = os.stat(self.name)
+            return hash((s1.st_ino, s1.st_dev))
+        except OSError:
+            return hash(self.name)
+    
+
 
 # These are for buildFactory backwards compatability due to
 # stupidity-induced inconsistency.
diff --git twisted/internet/test/test_address.py twisted/internet/test/test_address.py
index 23c08e8..0339648 100644
--- twisted/internet/test/test_address.py
+++ twisted/internet/test/test_address.py
@@ -1,7 +1,8 @@
-# Copyright (c) 2001-2010 Twisted Matrix Laboratories.
+# Copyright (c) 2001-2011 Twisted Matrix Laboratories.
 # See LICENSE for details.
 
 import re
+import os
 
 from twisted.trial import unittest
 from twisted.internet.address import IPv4Address, UNIXAddress
@@ -60,7 +61,17 @@ class AddressTestCaseMixin(object):
         self._stringRepresentation(repr)
 
 
+    def test_hash(self):
+        """
+        C{__hash__} can be used to get a hash of an address, allowing
+        addresses to be used as keys in dictionaries, for instance.
+        """
+        addr = self.buildAddress()
+        d = {addr :True}
+        self.assertTrue(d[self.buildAddress()])
 
+
+    
 class IPv4AddressTestCaseMixin(AddressTestCaseMixin):
     addressArgSpec = (("type", "%s"), ("host", "%r"), ("port", "%d"))
 
@@ -87,3 +98,21 @@ class UNIXAddressTestCase(unittest.TestCase, AddressTestCaseMixin):
 
     def buildAddress(self):
         return UNIXAddress(self._socketAddress)
+
+    def test_comparisonOfLinkedFiles(self):
+        """
+        UNIXAddress objects should compare as equal if they link to the same file.
+        """
+        linkName = self.mktemp()
+        self.fd = open(self._socketAddress, 'w')
+        os.symlink(os.path.abspath(self._socketAddress), linkName)
+        self.assertTrue(UNIXAddress(self._socketAddress) == UNIXAddress(linkName))
+
+    def test_hashOfLinkedFiles(self):
+        """
+        Objects that compare as equal must have the same hash value.
+        """
+        linkName = self.mktemp()
+        self.fd = open(self._socketAddress, 'w')
+        os.symlink(os.path.abspath(self._socketAddress), linkName)
+        self.assertEquals(hash(UNIXAddress(self._socketAddress)), hash(UNIXAddress(linkName)))
diff --git twisted/topfiles/4783.misc twisted/topfiles/4783.misc
new file mode 100644
index 0000000..ffeba48
--- /dev/null
+++ twisted/topfiles/4783.misc
@@ -0,0 +1 @@
+IPv4Address and UNIXAddress now have a __hash__ method.
\ No newline at end of file
