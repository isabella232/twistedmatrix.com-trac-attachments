diff --git .gitignore .gitignore
index afdad62..7039ee4 100644
--- .gitignore
+++ .gitignore
@@ -5,3 +5,4 @@
 _trial_temp*/
 build/
 dropin.cache
+*.swp
diff --git bin/trial3 bin/trial3
new file mode 100755
index 0000000..a00652b
--- /dev/null
+++ bin/trial3
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3.2
+# Copyright (c) Twisted Matrix Laboratories.
+# See LICENSE for details.
+import os, sys
+
+try:
+    import _preamble
+except ImportError:
+    sys.exc_clear()
+
+# begin chdir armor
+sys.path[:] = map(os.path.abspath, sys.path)
+# end chdir armor
+
+sys.path.insert(0, os.path.abspath(os.getcwd()))
+
+from twisted.scripts.trial import run
+run()
diff --git twisted/application/app.py twisted/application/app.py
index f0545d0..9384e09 100644
--- twisted/application/app.py
+++ twisted/application/app.py
@@ -2,6 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from __future__ import division, absolute_import
 import sys, os, pdb, getpass, traceback, signal
 from operator import attrgetter
 
@@ -64,7 +65,7 @@ class ProfileRunner(_BasicProfiler):
         """
         try:
             import profile
-        except ImportError, e:
+        except ImportError as e:
             self._reportImportError("profile", e)
 
         p = profile.Profile()
@@ -92,7 +93,7 @@ class HotshotRunner(_BasicProfiler):
         """
         try:
             import hotshot.stats
-        except (ImportError, SystemExit), e:
+        except (ImportError, SystemExit) as e:
             # Certain versions of Debian (and Debian derivatives) raise
             # SystemExit when importing hotshot if the "non-free" profiler
             # module is not installed.  Someone eventually recognized this
@@ -133,7 +134,7 @@ class CProfileRunner(_BasicProfiler):
         """
         try:
             import cProfile, pstats
-        except ImportError, e:
+        except ImportError as e:
             self._reportImportError("cProfile", e)
 
         p = cProfile.Profile()
@@ -263,7 +264,8 @@ def fixPdb():
 
 
     def help_stop(self):
-        print """stop - Continue execution, then cleanly shutdown the twisted reactor."""
+        print("stop - Continue execution, then cleanly shutdown the " + \
+                "twisted reactor.")
 
 
     def set_quit(self):
@@ -451,7 +453,7 @@ def getApplication(config, passphrase):
         log.msg("Loading %s..." % filename)
         application = service.loadApplication(filename, style, passphrase)
         log.msg("Loaded.")
-    except Exception, e:
+    except Exception as e:
         s = "Failed to load application: %s" % e
         if isinstance(e, KeyError) and e.args[0] == "application":
             s += """
@@ -515,7 +517,7 @@ class ReactorSelectionMixin:
                    "See the list of available reactors with "
                    "--help-reactors" % (shortName,))
             raise usage.UsageError(msg)
-        except Exception, e:
+        except Exception as e:
             msg = ("The specified reactor cannot be used, failed with error: "
                    "%s.\nSee the list of available reactors with "
                    "--help-reactors" % (e,))
@@ -610,7 +612,7 @@ class ServerOptions(usage.Options, ReactorSelectionMixin):
         if self['logger'] is not None:
             try:
                 self['logger'] = namedAny(self['logger'])
-            except Exception, e:
+            except Exception as e:
                 raise usage.UsageError("Logger '%s' could not be imported: %s" 
                                        % (self['logger'], e))
 
@@ -635,9 +637,9 @@ def run(runApp, ServerOptions):
     config = ServerOptions()
     try:
         config.parseOptions()
-    except usage.error, ue:
-        print config
-        print "%s: %s" % (sys.argv[0], ue)
+    except usage.error as ue:
+        print(config)
+        print("%s: %s" % (sys.argv[0], ue))
     else:
         runApp(config)
 
diff --git twisted/application/reactors.py twisted/application/reactors.py
index cccddd1..429f192 100644
--- twisted/application/reactors.py
+++ twisted/application/reactors.py
@@ -6,8 +6,8 @@
 Plugin-based system for enumerating available reactors and installing one of
 them.
 """
-
-from zope.interface import Interface, Attribute, implements
+from __future__ import division, absolute_import
+from zope.interface import Interface, Attribute, implementer
 
 from twisted.plugin import IPlugin, getPlugins
 from twisted.python.reflect import namedAny
@@ -41,13 +41,12 @@ class NoSuchReactor(KeyError):
     """
 
 
+@implementer(IPlugin, IReactorInstaller)
 class Reactor(object):
     """
     @ivar moduleName: The fully-qualified Python name of the module of which
     the install callable is an attribute.
     """
-    implements(IPlugin, IReactorInstaller)
-
 
     def __init__(self, shortName, moduleName, description):
         self.shortName = shortName
diff --git twisted/application/service.py twisted/application/service.py
index 66fef85..668519e 100644
--- twisted/application/service.py
+++ twisted/application/service.py
@@ -12,8 +12,8 @@ a sibling).
 
 Maintainer: Moshe Zadka
 """
-
-from zope.interface import implements, Interface, Attribute
+from __future__ import division, absolute_import
+from zope.interface import implementer, Interface, Attribute
 
 from twisted.python.reflect import namedAny
 from twisted.python import components
@@ -56,11 +56,11 @@ class IServiceMaker(Interface):
 
 
 
+@implementer(IPlugin, IServiceMaker)
 class ServiceMaker(object):
     """
     Utility class to simplify the definition of L{IServiceMaker} plugins.
     """
-    implements(IPlugin, IServiceMaker)
 
     def __init__(self, name, module, description, tapname):
         self.name = name
@@ -152,6 +152,7 @@ class IService(Interface):
         """
 
 
+@implementer(IService)
 class Service:
     """
     Base class for services.
@@ -161,7 +162,6 @@ class Service:
     as not serializing this book-keeping information.
     """
 
-    implements(IService)
 
     running = 0
     name = None
@@ -254,6 +254,7 @@ class IServiceCollection(Interface):
 
 
 
+@implementer(IServiceCollection)
 class MultiService(Service):
     """
     Straightforward Service Container.
@@ -264,8 +265,6 @@ class MultiService(Service):
     will finish.
     """
 
-    implements(IServiceCollection)
-
     def __init__(self):
         self.services = []
         self.namedServices = {}
@@ -347,6 +346,7 @@ class IProcess(Interface):
 
 
 
+@implementer(IProcess)
 class Process:
     """
     Process running parameters.
@@ -354,7 +354,6 @@ class Process:
     Sets up uid/gid in the constructor, and has a default
     of C{None} as C{processName}.
     """
-    implements(IProcess)
     processName = None
 
     def __init__(self, uid=None, gid=None):
diff --git twisted/persisted/sob.py twisted/persisted/sob.py
index 89d9caa..0b72b52 100644
--- twisted/persisted/sob.py
+++ twisted/persisted/sob.py
@@ -9,19 +9,25 @@ Save and load Small OBjects to and from files, using various formats.
 Maintainer: Moshe Zadka
 """
 
+from __future__ import division, absolute_import
+from twisted.python.compat import _PY3
 import os, sys
 try:
     import cPickle as pickle
 except ImportError:
     import pickle
-try:
-    import cStringIO as StringIO
-except ImportError:
-    import StringIO
+
+if _PY3:
+    from io import StringIO
+else:
+    try:
+        import cStringIO as StringIO
+    except ImportError:
+        import StringIO
 from hashlib import md5
 from twisted.python import log, runtime
 from twisted.persisted import styles
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 
 # Note:
 # These encrypt/decrypt functions only work for data formats
@@ -58,10 +64,9 @@ class IPersistable(Interface):
         """
 
 
+@implementer(IPersistable)
 class Persistent:
 
-    implements(IPersistable)
-
     style = "pickle"
 
     def __init__(self, original, name):
@@ -205,9 +210,9 @@ def loadValueFromFile(filename, variable, passphrase=None):
     if passphrase:
         data = fileObj.read()
         data = _decrypt(passphrase, data)
-        exec data in d, d
+        exec(data, d, d)
     else:
-        exec fileObj in d, d
+        exec(fileObj, d, d)
     value = d[variable]
     return value
 
diff --git twisted/persisted/styles.py twisted/persisted/styles.py
index e3ca39b..8f39fa8 100644
--- twisted/persisted/styles.py
+++ twisted/persisted/styles.py
@@ -3,22 +3,31 @@
 # See LICENSE for details.
 
 
-
 """
 Different styles of persisted objects.
 """
 
+from __future__ import division, absolute_import
+from twisted.python.compat import _PY3
 # System Imports
 import types
-import copy_reg
+
+
+if not _PY3:
+    import copy_reg
+else:
+    import copyreg as copy_reg
 import copy
 import inspect
 import sys
 
-try:
-    import cStringIO as StringIO
-except ImportError:
-    import StringIO
+if _PY3:
+    from io import StringIO
+else:
+    try:
+        from cStringIO import StringIO
+    except ImportError:
+        from StringIO import StringIO
 
 # Twisted Imports
 from twisted.python import log
diff --git twisted/plugin.py twisted/plugin.py
index a4f8334..544dac4 100644
--- twisted/plugin.py
+++ twisted/plugin.py
@@ -10,6 +10,7 @@ Plugin system for Twisted.
 @author: Glyph Lefkowitz
 """
 
+from __future__ import division, absolute_import
 import os
 import sys
 
@@ -179,7 +180,7 @@ def getCache(module):
         if needsWrite:
             try:
                 dropinPath.setContent(pickle.dumps(dropinDotCache))
-            except OSError, e:
+            except OSError as e:
                 log.msg(
                     format=(
                         "Unable to write to plugin cache %(path)s: error "
diff --git twisted/python/filepath.py twisted/python/filepath.py
index d3f8b8a..71e038a 100644
--- twisted/python/filepath.py
+++ twisted/python/filepath.py
@@ -675,6 +675,7 @@ class FilePath(AbstractFilePath):
         if platform.isWindows() and path.count(b":"):
             # Catch paths like C:blah that don't have a slash
             raise InsecurePath("%r contains a colon." % (path,))
+
         norm = normpath(path)
         if self.sep in norm:
             raise InsecurePath("%r contains one or more directory separators" % (path,))
diff --git twisted/python/logfile.py twisted/python/logfile.py
index f652271..bce4b56 100644
--- twisted/python/logfile.py
+++ twisted/python/logfile.py
@@ -7,6 +7,7 @@
 A rotating, browsable log file.
 """
 
+from __future__ import division, absolute_import
 # System Imports
 import os, glob, time, stat
 
@@ -66,7 +67,7 @@ class BaseLogFile:
         else:
             if self.defaultMode is not None:
                 # Set the lowest permissions
-                oldUmask = os.umask(0777)
+                oldUmask = os.umask(int("777",8))
                 try:
                     self._file = file(self.path, "w+", 1)
                 finally:
@@ -178,7 +179,7 @@ class LogFile(BaseLogFile):
         """
         filename = "%s.%d" % (self.path, identifier)
         if not os.path.exists(filename):
-            raise ValueError, "no such logfile exists"
+            raise ValueError("no such logfile exists")
         return LogReader(filename)
 
     def write(self, data):
@@ -266,7 +267,7 @@ class DailyLogFile(BaseLogFile):
             return self.getCurrentLog()
         filename = "%s.%s" % (self.path, self.suffix(identifier))
         if not os.path.exists(filename):
-            raise ValueError, "no such logfile exists"
+            raise ValueError("no such logfile exists")
         return LogReader(filename)
 
     def write(self, data):
diff --git twisted/python/modules.py twisted/python/modules.py
index 11455be..6ec09ed 100644
--- twisted/python/modules.py
+++ twisted/python/modules.py
@@ -53,6 +53,9 @@ the modules outside the standard library's python-files directory::
                 modinfo.name, modinfo.filePath.path)
 """
 
+from __future__ import division, absolute_import
+from twisted.python.compat import _PY3
+
 __metaclass__ = type
 
 # let's try to keep path imports to a minimum...
@@ -62,7 +65,7 @@ import sys
 import zipimport
 import inspect
 import warnings
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 
 from twisted.python.components import registerAdapter
 from twisted.python.filepath import FilePath, UnlistableError
@@ -131,6 +134,11 @@ class _ModuleIteratorHelper:
             except UnlistableError:
                 continue
 
+            if _PY3:
+                # Might be not very efficient, but that's the price of sorting
+                # here.
+                children = list(children)
+
             children.sort()
             for potentialTopLevel in children:
                 ext = potentialTopLevel.splitext()[1]
@@ -476,16 +484,16 @@ class IPathImportMapper(Interface):
         L{ZipPath}, but more might be added later).
         """
 
+@implementer(IPathImportMapper)
 class _DefaultMapImpl:
     """ Wrapper for the default importer, i.e. None.  """
-    implements(IPathImportMapper)
     def mapPath(self, fsPathString):
         return FilePath(fsPathString)
 _theDefaultMapper = _DefaultMapImpl()
 
+@implementer(IPathImportMapper)
 class _ZipMapImpl:
     """ IPathImportMapper implementation for zipimport.ZipImporter.  """
-    implements(IPathImportMapper)
     def __init__(self, importer):
         self.importer = importer
 
diff --git twisted/python/reflect.py twisted/python/reflect.py
index ac25d47..e8bead0 100644
--- twisted/python/reflect.py
+++ twisted/python/reflect.py
@@ -7,6 +7,7 @@ Standardized versions of various cool and/or strange things that you can do
 with Python's reflection capabilities.
 """
 
+from __future__ import division, absolute_import
 import sys
 import types
 import pickle
@@ -15,13 +16,18 @@ import re
 import warnings
 from collections import deque
 
+from twisted.python.compat import _PY3
 RegexType = type(re.compile(""))
 
+if _PY3:
+    from io import StringIO
+else:
+    try:
+        from cStringIO import StringIO
+    except ImportError:
+        from StringIO import StringIO
+
 
-try:
-    from cStringIO import StringIO
-except ImportError:
-    from StringIO import StringIO
 
 from twisted.python.compat import _PY3
 from twisted.python.deprecate import deprecated
@@ -278,7 +284,7 @@ def objgrep(start, goal, eq=isLike, path='', paths=None, seen=None, showUnknowns
                                    'member_descriptor', 'getset_descriptor')):
         pass
     elif showUnknowns:
-        print 'unknown type', type(start), start
+        print('unknown type', type(start), start)
     return paths
 
 
diff --git twisted/python/usage.py twisted/python/usage.py
index 9280ae2..988f3e4 100644
--- twisted/python/usage.py
+++ twisted/python/usage.py
@@ -12,6 +12,9 @@ U{http://twistedmatrix.com/projects/core/documentation/howto/options.html},
 or doc/core/howto/options.xhtml in your Twisted directory.
 """
 
+from __future__ import division, absolute_import
+from twisted.python.compat import _PY3
+
 # System Imports
 import os
 import sys
@@ -52,7 +55,7 @@ class CoerceParameter(object):
                              % (parameterName,))
         try:
             value = self.coerce(value)
-        except ValueError, e:
+        except ValueError as e:
             raise UsageError("Parameter type enforcement failed: %s" % (e,))
 
         self.options.opts[parameterName] = value
@@ -188,13 +191,17 @@ class Options(dict):
         as dictionary keys.  This is an internal feature used to implement
         the parser.  Do not rely on it in application code.
         """
-        return int(id(self) % sys.maxint)
+        if _PY3:
+            # In Python3 integer has no size limit.
+            return int(id(self))
+        else:
+            return int(id(self) % sys.maxint)
 
     def opt_help(self):
         """
         Display this help and exit.
         """
-        print self.__str__()
+        print(self.__str__())
         sys.exit(0)
 
     def opt_version(self):
@@ -202,7 +209,7 @@ class Options(dict):
         Display Twisted version and exit.
         """
         from twisted import copyright
-        print "Twisted version:", copyright.version
+        print("Twisted version:", copyright.version)
         sys.exit(0)
 
     #opt_h = opt_help # this conflicted with existing 'host' options.
@@ -232,7 +239,7 @@ class Options(dict):
         try:
             opts, args = getopt.getopt(options,
                                        self.shortOpt, self.longOpt)
-        except getopt.error, e:
+        except getopt.error as e:
             raise UsageError(str(e))
 
         for opt, arg in opts:
@@ -432,13 +439,25 @@ class Options(dict):
                 reverse_dct[method] = []
             reverse_dct[method].append(name.replace('_', '-'))
 
-        cmpLength = lambda a, b: cmp(len(a), len(b))
+        if _PY3:
+            def sort_by_length(lst):
+                """
+                Sort list elements by their length.
+                """
+                # Here we use a key function instead of a compare function.
+                KeyLength = lambda a:len(a)
+                lst.sort(key=KeyLength)
+        else:
+            def sort_by_length(lst):
+                # Old fashioned compare function here:
+                cmpLength = lambda a, b: cmp(len(a), len(b))
+                lst.sort(cmpLength)
 
         for method, names in reverse_dct.items():
             if len(names) < 2:
                 continue
             names_ = names[:]
-            names_.sort(cmpLength)
+            sort_by_length(names_)
             longest = names_.pop()
             for name in names_:
                 synonyms[name] = longest
@@ -950,7 +969,10 @@ def docMakeChunks(optList, width=80):
 
 
 def flagFunction(method, name=None):
-    reqArgs = method.im_func.func_code.co_argcount
+    if _PY3:
+        reqArgs = method.__func__.__code__.co_argcount
+    else:
+        reqArgs = method.im_func.func_code.co_argcount
     if reqArgs > 2:
         raise UsageError('Invalid Option function for %s' %
                          (name or method.func_name))
diff --git twisted/python/util.py twisted/python/util.py
index 3b3a699..97e33a1 100644
--- twisted/python/util.py
+++ twisted/python/util.py
@@ -1078,12 +1078,12 @@ __all__ = [
     ]
 
 
-if _PY3:
-    __all3__ = ["FancyEqMixin", "setIDFunction", "unsignedID", "untilConcludes",
-                "runWithWarningsSuppressed", "FancyStrMixin", "nameToLabel",
-                "InsensitiveDict"]
-    for name in __all__[:]:
-        if name not in __all3__:
-            __all__.remove(name)
-            del globals()[name]
-    del name, __all3__
+#   if _PY3:
+#       __all3__ = ["FancyEqMixin", "setIDFunction", "unsignedID", "untilConcludes",
+#                   "runWithWarningsSuppressed", "FancyStrMixin", "nameToLabel",
+#                   "InsensitiveDict","spewer"]
+#       for name in __all__[:]:
+#           if name not in __all3__:
+#               __all__.remove(name)
+#               del globals()[name]
+#       del name, __all3__
diff --git twisted/python/zippath.py twisted/python/zippath.py
index a82f253..5113e90 100644
--- twisted/python/zippath.py
+++ twisted/python/zippath.py
@@ -8,6 +8,7 @@ This module contains implementations of IFilePath for zip files.
 See the constructor for ZipArchive for use.
 """
 
+from __future__ import division, absolute_import
 __metaclass__ = type
 
 import os
@@ -27,7 +28,7 @@ else:
 
 from twisted.python.filepath import IFilePath, FilePath, AbstractFilePath
 
-from zope.interface import implements
+from zope.interface import implementer
 
 # using FilePath here exclusively rather than os to make sure that we don't do
 # anything OS-path-specific here.
@@ -36,13 +37,12 @@ ZIP_PATH_SEP = '/'              # In zipfiles, "/" is universally used as the
                                 # path separator, regardless of platform.
 
 
+@implementer(IFilePath)
 class ZipPath(AbstractFilePath):
     """
     I represent a file or directory contained within a zip file.
     """
 
-    implements(IFilePath)
-
     sep = ZIP_PATH_SEP
 
     def __init__(self, archive, pathInArchive):
diff --git twisted/scripts/trial.py twisted/scripts/trial.py
index 7cdaa3c..a60d316 100644
--- twisted/scripts/trial.py
+++ twisted/scripts/trial.py
@@ -4,7 +4,7 @@
 # See LICENSE for details.
 
 
-from __future__ import print_function
+from __future__ import print_function,division,absolute_import
 import gc
 import inspect
 import os
@@ -599,8 +599,8 @@ def run():
     config = Options()
     try:
         config.parseOptions()
-    except usage.error, ue:
-        raise SystemExit, "%s: %s" % (sys.argv[0], ue)
+    except usage.error as ue:
+        raise SystemExit("%s: %s" % (sys.argv[0], ue))
     _initialDebugSetup(config)
 
     try:
diff --git twisted/trial/_asyncrunner.py twisted/trial/_asyncrunner.py
index a46d185..0a34a7f 100644
--- twisted/trial/_asyncrunner.py
+++ twisted/trial/_asyncrunner.py
@@ -6,6 +6,8 @@
 Infrastructure for test running and suites.
 """
 
+from __future__ import division, absolute_import
+
 import doctest
 import gc
 
@@ -16,7 +18,7 @@ from twisted.trial._synctest import _logObserver
 
 pyunit = __import__('unittest')
 
-from zope.interface import implements
+from zope.interface import implementer
 
 
 
@@ -38,6 +40,7 @@ class TestSuite(pyunit.TestSuite):
 
 
 
+@implementer(itrial.ITestCase)
 class TestDecorator(components.proxyForInterface(itrial.ITestCase,
                                                  "_originalTest")):
     """
@@ -47,9 +50,6 @@ class TestDecorator(components.proxyForInterface(itrial.ITestCase,
     @type _originalTest: A provider of L{itrial.ITestCase}
     """
 
-    implements(itrial.ITestCase)
-
-
     def __call__(self, result):
         """
         Run the unit test.
diff --git twisted/trial/runner.py twisted/trial/runner.py
index 4275c24..7e1834e 100644
--- twisted/trial/runner.py
+++ twisted/trial/runner.py
@@ -8,6 +8,8 @@ A miscellany of code used to run Trial tests.
 Maintainer: Jonathan Lange
 """
 
+from __future__ import division, absolute_import
+
 __all__ = [
     'TestSuite',
 
@@ -33,7 +35,7 @@ from twisted.trial.reporter import _ExitWrapper, UncleanWarningsReporterWrapper
 # These are imported so that they remain in the public API for t.trial.runner
 from twisted.trial.unittest import TestSuite
 
-from zope.interface import implements
+from zope.interface import implementer
 
 pyunit = __import__('unittest')
 
@@ -252,13 +254,13 @@ def isTestCase(obj):
 
 
 
+@implementer(ITestCase)
 class TestHolder(object):
     """
     Placeholder for a L{TestCase} inside a reporter. As far as a L{TestResult}
     is concerned, this looks exactly like a unit test.
     """
 
-    implements(ITestCase)
 
     failureException = None
 
diff --git twisted/trial/unittest.py twisted/trial/unittest.py
index 8f07556..8d33af3 100644
--- twisted/trial/unittest.py
+++ twisted/trial/unittest.py
@@ -16,11 +16,12 @@ from twisted.trial._asynctest import TestCase
 
 from twisted.python.compat import _PY3
 
-if not _PY3:
-    from twisted.trial._asyncrunner import (
-        TestSuite, TestDecorator, decorate)
-    from twisted.trial._asyncrunner import (
-        _ForceGarbageCollectionDecorator, _iterateTests, _clearSuite)
+# There was some check here, and the following was executed only on versions
+# lower on Python3. I removed it:
+from twisted.trial._asyncrunner import (
+    TestSuite, TestDecorator, decorate)
+from twisted.trial._asyncrunner import (
+    _ForceGarbageCollectionDecorator, _iterateTests, _clearSuite)
 
 # Further obscure the origins of these objects, to reduce surprise (and this is
 # what the values were before code got shuffled around between files, but was
