Index: twisted/mail/test/test_imap.py
===================================================================
--- twisted/mail/test/test_imap.py	(revision 27791)
+++ twisted/mail/test/test_imap.py	(working copy)
@@ -1556,6 +1556,58 @@
 
         self.assertEquals(self.results, [0, 2])
 
+
+
+class IMAP4ServerSearchTestCase(IMAP4HelperMixin, unittest.TestCase):
+    """
+    Tests for the behavior of the search_* functions in L{imap4.IMAP4Server}.
+    """
+    def setUp(self):
+        IMAP4HelperMixin.setUp(self)
+        self.earlierQuery = ["10-Dec-2009"]
+        self.sameDateQuery = ["13-Dec-2009"]
+        self.laterQuery = ["16-Dec-2009"]
+        self.seq = 0
+        self.msg = FakeyMessage({"date" : "Mon, 13 Dec 2009 21:25:10 GMT"}, [],
+                                '', '', None, None)
+
+
+    def test_searchSentBefore(self):
+        """
+        L{imap4.IMAP4Server.search_SENTBEFORE} returns True if the message date
+        is earlier than the query date.
+        """
+        self.assertFalse(
+            self.server.search_SENTBEFORE(self.earlierQuery, self.seq, self.msg))
+        self.assertTrue(
+            self.server.search_SENTBEFORE(self.laterQuery, self.seq, self.msg))
+
+
+    def test_searchSentOn(self):
+        """
+        L{imap4.IMAP4Server.search_SENTON} returns True if the message date is
+        the same as the query date.
+        """
+        self.assertFalse(
+            self.server.search_SENTON(self.earlierQuery, self.seq, self.msg))
+        self.assertTrue(
+            self.server.search_SENTON(self.sameDateQuery, self.seq, self.msg))
+        self.assertFalse(
+            self.server.search_SENTON(self.laterQuery, self.seq, self.msg))
+
+
+    def test_searchSentSince(self):
+        """
+        L{imap4.IMAP4Server.search_SENTSINCE} returns True if the message date
+        is later than the query date.
+        """
+        self.assertTrue(
+            self.server.search_SENTSINCE(self.earlierQuery, self.id, self.msg))
+        self.assertFalse(
+            self.server.search_SENTSINCE(self.laterQuery, self.id, self.msg))
+
+
+
 class TestRealm:
     theAccount = None
 
Index: twisted/mail/imap4.py
===================================================================
--- twisted/mail/imap4.py	(revision 27791)
+++ twisted/mail/imap4.py	(working copy)
@@ -1586,17 +1586,47 @@
         return '\\Seen' in msg.getFlags()
 
     def search_SENTBEFORE(self, query, id, msg):
-        date = msg.getHeader(False, 'date').get('date', '')
+        """
+        Returns C{True} if the message date is earlier than the query date.
+
+        @type query: A C{list} of C{str}
+        @param query: A list whose first element starts with a stringified date
+            that is a fragment of an L{imap4.Query()}. The date must be in the
+            format 'DD-Mon-YYYY', for example '03-March-2003' or '03-Mar-2003'.
+
+        @type msg: Implementor of L{imap4.IMessage}
+        """
+        date = msg.getHeaders(False, 'date').get('date', '')
         date = rfc822.parsedate(date)
         return date < parseTime(query.pop(0))
 
     def search_SENTON(self, query, id, msg):
-        date = msg.getHeader(False, 'date').get('date', '')
+        """
+        Returns C{True} if the message date is the same as the query date.
+
+        @type query: A C{list} of C{str}
+        @param query: A list whose first element starts with a stringified date
+            that is a fragment of an L{imap4.Query()}. The date must be in the
+            format 'DD-Mon-YYYY', for example '03-March-2003' or '03-Mar-2003'.
+
+        @type msg: Implementor of L{imap4.IMessage}
+        """
+        date = msg.getHeaders(False, 'date').get('date', '')
         date = rfc822.parsedate(date)
         return date[:3] == parseTime(query.pop(0))[:3]
 
     def search_SENTSINCE(self, query, id, msg):
-        date = msg.getHeader(False, 'date').get('date', '')
+        """
+        Returns C{True} if the message date is later than the query date.
+
+        @type query: A C{list} of C{str}
+        @param query: A list whose first element starts with a stringified date
+            that is a fragment of an L{imap4.Query()}. The date must be in the
+            format 'DD-Mon-YYYY', for example '03-March-2003' or '03-Mar-2003'.
+
+        @type msg: Implementor of L{imap4.IMessage}
+        """
+        date = msg.getHeaders(False, 'date').get('date', '')
         date = rfc822.parsedate(date)
         return date > parseTime(query.pop(0))
 
