Index: twisted/conch/test/test_knownhosts.py
===================================================================
--- twisted/conch/test/test_knownhosts.py	(revision 34312)
+++ twisted/conch/test/test_knownhosts.py	(working copy)
@@ -381,27 +381,80 @@
         """
         Loading a L{KnownHostsFile} from a path with six entries in it will
         result in a L{KnownHostsFile} object with six L{IKnownHostEntry}
-        providers in it, each of the appropriate type.
+        providers in it.
         """
         hostsFile = self.loadSampleHostsFile()
         self.assertEqual(len(hostsFile._entries), 6)
+
+
+    def test_verifyHashedEntry(self):
+        """
+        Loading a L{KnownHostsFile} from a path containing a single valid
+        L{HashedEntry} entry will result in a L{KnownHostsFile} object
+        with one L{IKnownHostEntry} provider.
+        """
+        hostsFile = self.loadSampleHostsFile((sampleHashedLine))
         self.assertIsInstance(hostsFile._entries[0], HashedEntry)
         self.assertEqual(True, hostsFile._entries[0].matchesHost(
                 "www.twistedmatrix.com"))
-        self.assertIsInstance(hostsFile._entries[1], PlainEntry)
-        self.assertEqual(True, hostsFile._entries[1].matchesHost(
+
+
+    def test_verifyPlainEntry(self):
+        """
+        Loading a L{KnownHostsFile} from a path containing a single valid
+        L{PlainEntry} entry will result in a L{KnownHostsFile} object
+        with one L{IKnownHostEntry} provider.
+        """
+        hostsFile = self.loadSampleHostsFile((otherSamplePlaintextLine))
+        self.assertIsInstance(hostsFile._entries[0], PlainEntry)
+        self.assertEqual(True, hostsFile._entries[0].matchesHost(
                 "divmod.com"))
-        self.assertIsInstance(hostsFile._entries[2], UnparsedEntry)
-        self.assertEqual(hostsFile._entries[2].toString(), "")
-        self.assertIsInstance(hostsFile._entries[3], UnparsedEntry)
-        self.assertEqual(hostsFile._entries[3].toString(),
+
+
+    def test_verifyUnparsedEntry(self):
+        """
+        Loading a L{KnownHostsFile} from a path that only contains '\n' will
+        result in a L{KnownHostsFile} object containing a L{UnparsedEntry}
+        object.
+        """
+        hostsFile = self.loadSampleHostsFile(("\n"))
+        self.assertIsInstance(hostsFile._entries[0], UnparsedEntry)
+        self.assertEqual(hostsFile._entries[0].toString(), "")
+
+
+    def test_verifyUnparsedComment(self):
+        """
+        Loading a L{KnownHostsFile} from a path that contains a comment will
+        result in a L{KnownHostsFile} object containing a L{UnparsedEntry}
+        object.
+        """
+        hostsFile = self.loadSampleHostsFile(("# That was a blank line.\n"))
+        self.assertIsInstance(hostsFile._entries[0], UnparsedEntry)
+        self.assertEqual(hostsFile._entries[0].toString(),
                          "# That was a blank line.")
-        self.assertIsInstance(hostsFile._entries[4], UnparsedEntry)
-        self.assertEqual(hostsFile._entries[4].toString(),
+
+
+    def test_verifyUnparsableLine(self):
+        """
+        Loading a L{KnownHostsFile} from a path that contains an unparseable
+        line will be represented as an UnparsedEntry instance.
+        """
+        hostsFile = self.loadSampleHostsFile(("This is just unparseable.\n"))
+        self.assertIsInstance(hostsFile._entries[0], UnparsedEntry)
+        self.assertEqual(hostsFile._entries[0].toString(),
                          "This is just unparseable.")
-        self.assertIsInstance(hostsFile._entries[5], UnparsedEntry)
-        self.assertEqual(hostsFile._entries[5].toString(),
-                         "|1|This also unparseable.")
+
+
+    def test_verifyUnparsableEncryptionMarker(self):
+        """
+        Loading a L{KnownHostsFile} from a path containing an unparseable line
+        that starts with an encryption marker will be represented as an
+        UnparsedEntry instance.
+        """
+        hostsFile = self.loadSampleHostsFile(("|1|This is unparseable.\n"))
+        self.assertIsInstance(hostsFile._entries[0], UnparsedEntry)
+        self.assertEqual(hostsFile._entries[0].toString(),
+                         "|1|This is unparseable.")
 
 
     def test_loadNonExistent(self):
