=== modified file 'twisted/web/http.py'
--- twisted/web/http.py	2011-09-24 19:04:03 +0000
+++ twisted/web/http.py	2012-05-03 06:54:31 +0000
@@ -1399,12 +1399,14 @@
     @ivar length: Counter keeping track of how many more bytes in a chunk there
         are to receive.
 
-    @ivar state: One of C{'chunk-length'}, C{'trailer'}, C{'body'}, or
-        C{'finished'}.  For C{'chunk-length'}, data for the chunk length line
-        is currently being read.  For C{'trailer'}, the CR LF pair which
-        follows each chunk is being read.  For C{'body'}, the contents of a
-        chunk are being read.  For C{'finished'}, the last chunk has been
-        completely read and no more input is valid.
+    @ivar state: One of C{'chunk-length'}, C{'crlf'}, C{'trailer'},
+        C{'body'}, or C{'finished'}.  For C{'chunk-length'}, data for the
+        chunk length line is currently being read.  For C{'crlf'}, the CR LF
+        pair which follows each chunk is being read. For C{'trailer'}, the CR
+        LF pair which follows the terminal 0-length chunk is currently being
+        read. For C{'body'}, the contents of a chunk are being read. For
+        C{'finished'}, the last chunk has been completely read and no more
+        input is valid.
 
     @ivar finish: A flag indicating that the last chunk has been started.  When
         it finishes, the state will change to C{'finished'} and no more data
@@ -1434,22 +1436,25 @@
                     self.length = int(parts[0], 16)
                     if self.length == 0:
                         self.state = 'trailer'
-                        self.finish = True
                     else:
                         self.state = 'body'
                     data = rest
                 else:
                     self._buffer = data
                     data = ''
+            elif self.state == 'crlf':
+                if data.startswith('\r\n'):
+                    data = data[2:]
+                    self.state = 'chunk-length'
+                else:
+                    self._buffer = data
+                    data = ''
             elif self.state == 'trailer':
                 if data.startswith('\r\n'):
                     data = data[2:]
-                    if self.finish:
-                        self.state = 'finished'
-                        self.finishCallback(data)
-                        data = ''
-                    else:
-                        self.state = 'chunk-length'
+                    self.state = 'finished'
+                    self.finishCallback(data)
+                    data = ''
                 else:
                     self._buffer = data
                     data = ''
@@ -1457,7 +1462,7 @@
                 if len(data) >= self.length:
                     chunk, data = data[:self.length], data[self.length:]
                     self.dataCallback(chunk)
-                    self.state = 'trailer'
+                    self.state = 'crlf'
                 elif len(data) < self.length:
                     self.length -= len(data)
                     self.dataCallback(data)

