diff --git a/twisted/persisted/styles.py b/twisted/persisted/styles.py
--- a/twisted/persisted/styles.py
+++ b/twisted/persisted/styles.py
@@ -127,6 +127,17 @@ class Ephemeral:
         log.msg( "WARNING: unserializing ephemeral %s" % self.__class__ )
         self.__class__ = Ephemeral
 
+    def __reduce__(self):
+        # For new-style classes, as we can't change the __class__ to an
+        # old-style __class__.
+        log.msg( "WARNING: serializing ephemeral %s" % self )
+        import gc
+        if '__pypy__' not in sys.builtin_module_names:
+            if getattr(gc, 'get_referrers', None):
+                for r in gc.get_referrers(self):
+                    log.msg( " referred to by %s" % (r,))
+        return Ephemeral, ()
+
 
 versionedsToUpgrade = {}
 upgraded = {}
diff --git a/twisted/test/test_persisted.py b/twisted/test/test_persisted.py
--- a/twisted/test/test_persisted.py
+++ b/twisted/test/test_persisted.py
@@ -181,6 +181,12 @@ class MyEphemeral(styles.Ephemeral):
         self.x = x
 
 
+class MyNewStyleEphemeral(styles.Ephemeral, object):
+
+    def __init__(self, x):
+        self.x = x
+
+
 class EphemeralTestCase(unittest.TestCase):
 
     def testEphemeral(self):
@@ -194,6 +200,17 @@ class EphemeralTestCase(unittest.TestCas
         self.assertEqual(o.__class__, styles.Ephemeral)
         self.assert_(not hasattr(o, 'x'))
 
+    def testNewStyleEphemeral(self):
+        o = MyNewStyleEphemeral(3)
+        self.assertEqual(o.__class__, MyNewStyleEphemeral)
+        self.assertEqual(o.x, 3)
+
+        pickl = pickle.dumps(o)
+        o = pickle.loads(pickl)
+
+        self.assertEqual(o.__class__, styles.Ephemeral)
+        self.assert_(not hasattr(o, 'x'))
+
 
 class Pickleable:
 
