Index: twisted/python/_release.py
===================================================================
--- twisted/python/_release.py	(revision 28369)
+++ twisted/python/_release.py	(working copy)
@@ -734,6 +734,15 @@
         @param header: The top-level header to use when writing the news.
         @type header: L{str}
         """
+        changes = []
+        for part in (self._FEATURE, self._BUGFIX, self._REMOVAL):
+            tickets = self._findChanges(path, part)
+            if tickets:
+                changes.append((part, tickets))
+        misc = self._findChanges(path, self._MISC)
+        if not (misc or changes):
+            return
+
         oldNews = output.getContent()
         newNews = output.sibling('NEWS.new').open('w')
         if oldNews.startswith(self._TICKET_HINT):
@@ -741,13 +750,11 @@
             oldNews = oldNews[len(self._TICKET_HINT):]
 
         self._writeHeader(newNews, header)
-        for part in (self._FEATURE, self._BUGFIX, self._REMOVAL):
-            tickets = self._findChanges(path, part)
+
+        for (part, tickets) in changes:
             self._writeSection(newNews, self._headings.get(part), tickets)
-        self._writeMisc(
-            newNews,
-            self._headings.get(self._MISC),
-            self._findChanges(path, self._MISC))
+        self._writeMisc(newNews, self._headings.get(self._MISC), misc)
+
         newNews.write(oldNews)
         newNews.close()
         output.sibling('NEWS.new').moveTo(output)
Index: twisted/python/test/test_release.py
===================================================================
--- twisted/python/test/test_release.py	(revision 28369)
+++ twisted/python/test/test_release.py	(working copy)
@@ -1653,6 +1653,23 @@
             '\n' + self.existingText)
 
 
+    def test_emptyProjectOmitted(self):
+        """
+        If no changes exist for a project, I{NEWS} file stays the same, rather
+        than empty section being prepended to file.
+        """
+        project = FilePath(self.mktemp()).child("twisted")
+        project.makedirs()
+        self.createStructure(project, {
+                'NEWS': self.existingText })
+
+        self.builder.build(
+            project, project.child('NEWS'),
+            "Super Awesometastic 32.16")
+        results = project.child('NEWS').getContent()
+        self.assertEquals(results, self.existingText)
+
+
     def test_preserveTicketHint(self):
         """
         If a I{NEWS} file begins with the two magic lines which point readers
