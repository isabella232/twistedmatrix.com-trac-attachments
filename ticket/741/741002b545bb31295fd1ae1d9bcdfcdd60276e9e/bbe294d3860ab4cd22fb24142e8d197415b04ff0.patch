=== modified file 'twisted/protocols/portforward.py'
--- twisted/protocols/portforward.py	2011-02-14 04:45:15 +0000
+++ twisted/protocols/portforward.py	2011-08-30 22:50:57 +0000
@@ -31,6 +31,14 @@
 class ProxyClient(Proxy):
     def connectionMade(self):
         self.peer.setPeer(self)
+
+        # Wire this and the peer transport together to enable
+        # flow control (this stops connections from filling
+        # this proxy memory when one side produces data at a
+        # higher rate than the other can consume).
+        self.transport.registerProducer(self.peer.transport, True)
+        self.peer.transport.registerProducer(self.transport, True)
+
         # We're connected, everybody can read to their hearts content.
         self.peer.transport.resumeProducing()
 

=== modified file 'twisted/test/test_protocols.py'
--- twisted/test/test_protocols.py	2011-07-14 18:05:14 +0000
+++ twisted/test/test_protocols.py	2011-08-30 22:50:36 +0000
@@ -1061,6 +1061,34 @@
         return d
 
 
+    def test_resgister_producers(self):
+        """
+        Test that the proxy client register itself as a producer of the peer
+        and vicevera.
+        """
+        proxy = portforward.ProxyServer()
+        proxyTransport = proto_helpers.StringTransport()
+
+        # XXX: fake the connectionMade method
+        def testConnectionMade():
+            proxy.transport.pauseProducing()
+            client = proxy.clientProtocolFactory()
+            client.setServer(proxy)
+            # don't connect to anything
+        proxy.connectionMade = testConnectionMade
+        proxy.makeConnection(proxyTransport)
+
+        client = portforward.ProxyClient()
+        # call setPeer (called by buildProtocol)
+        client.setPeer(proxy)
+        clientTransport = proto_helpers.StringTransport()
+        client.makeConnection(clientTransport)
+
+        # check that the producers are registered
+        self.assertIdentical(clientTransport.producer, proxyTransport)
+        self.assertIdentical(proxyTransport.producer, clientTransport)
+
+
 
 class StringTransportTestCase(unittest.TestCase):
     """

