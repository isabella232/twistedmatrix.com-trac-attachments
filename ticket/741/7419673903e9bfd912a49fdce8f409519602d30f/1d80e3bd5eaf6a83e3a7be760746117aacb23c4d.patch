diff --git twisted/names/srvconnect.py twisted/names/srvconnect.py
index 78c0f2a..3b1c474 100644
--- twisted/names/srvconnect.py
+++ twisted/names/srvconnect.py
@@ -2,6 +2,7 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+import functools
 import random
 
 from zope.interface import implements
@@ -10,7 +11,7 @@ from twisted.internet import error, interfaces
 
 from twisted.names import client, dns
 from twisted.names.error import DNSNameError
-from twisted.python.compat import reduce, unicode
+from twisted.python.compat import unicode
 
 class _SRVConnector_ClientFactoryWrapper:
     def __init__(self, connector, wrappedFactory):
@@ -158,7 +159,8 @@ class SRVConnector:
 
         weightIndex = zip(xrange(len(self.servers)), [x[1] for x in self.servers
                                                       if x[0]==minPriority])
-        weightSum = reduce(lambda x, y: (None, x[1]+y[1]), weightIndex, (None, 0))[1]
+        weightSum = functools.reduce(lambda x, y: (None, x[1]+y[1]),
+                                     weightIndex, (None, 0))[1]
         rand = random.randint(0, weightSum)
 
         for index, weight in weightIndex:
diff --git twisted/names/test/test_names.py twisted/names/test/test_names.py
index 50d4edc..7880728 100644
--- twisted/names/test/test_names.py
+++ twisted/names/test/test_names.py
@@ -6,7 +6,9 @@
 Test cases for twisted.names.
 """
 
-import socket, operator, copy
+import copy
+import socket
+import itertools
 from StringIO import StringIO
 
 from twisted.trial import unittest
@@ -21,7 +23,6 @@ from twisted.names.client import Resolver
 from twisted.names.secondary import (
     SecondaryAuthorityService, SecondaryAuthority)
 
-from twisted.python.compat import reduce
 from twisted.test.proto_helpers import StringTransport, MemoryReactorClock
 
 def justPayload(results):
@@ -402,7 +403,7 @@ class ServerDNSTestCase(unittest.TestCase):
         Test DNS 'AXFR' queries (Zone transfer)
         """
         default_ttl = soa_record.expire
-        results = [copy.copy(r) for r in reduce(operator.add, test_domain_com.records.values())]
+        results = [copy.copy(r) for r in itertools.chain.from_iterable(test_domain_com.records.values())]
         for r in results:
             if r.ttl is None:
                 r.ttl = default_ttl
diff --git twisted/protocols/ftp.py twisted/protocols/ftp.py
index 9a078d4..8c303ed 100644
--- twisted/protocols/ftp.py
+++ twisted/protocols/ftp.py
@@ -15,6 +15,7 @@ import stat
 import errno
 import fnmatch
 import warnings
+import functools
 
 try:
     import pwd, grp
@@ -29,7 +30,6 @@ from twisted.internet import reactor, interfaces, protocol, error, defer
 from twisted.protocols import basic, policies
 
 from twisted.python import log, failure, filepath
-from twisted.python.compat import reduce
 
 from twisted.cred import error as cred_error, portal, credentials, checkers
 
@@ -1793,7 +1793,8 @@ class FTPAnonymousShell(object):
 
 
     def _path(self, path):
-        return reduce(filepath.FilePath.child, path, self.filesystemRoot)
+        return functools.reduce(filepath.FilePath.child, path,
+                                self.filesystemRoot)
 
 
     def makeDirectory(self, path):
diff --git twisted/protocols/gps/nmea.py twisted/protocols/gps/nmea.py
index 71d37ea..a36ee4a 100644
--- twisted/protocols/gps/nmea.py
+++ twisted/protocols/gps/nmea.py
@@ -19,9 +19,9 @@ Other desired features::
     - A NMEA 0183 producer to emulate GPS devices (?)
 """
 
+import functools
 import operator
 from twisted.protocols import basic
-from twisted.python.compat import reduce
 
 POSFIX_INVALID, POSFIX_SPS, POSFIX_DGPS, POSFIX_PPS = 0, 1, 2, 3
 MODE_AUTO, MODE_FORCED = 'A', 'M'
@@ -72,7 +72,8 @@ class NMEAReceiver(basic.LineReceiver):
         if (not dispatch) and (not self.ignore_unknown_sentencetypes):
             raise InvalidSentence("sentencetype %r" % (sentencetype,))
         if not self.ignore_checksum_mismatch:
-            checksum, calculated_checksum = int(checksum, 16), reduce(operator.xor, map(ord, strmessage))
+            checksum = int(checksum, 16)
+            calculated_checksum = functools.reduce(operator.xor, map(ord, strmessage))
             if checksum != calculated_checksum:
                 raise InvalidChecksum("Given 0x%02X != 0x%02X" % (checksum, calculated_checksum))
         handler = getattr(self, "handle_%s" % dispatch, None)
diff --git twisted/protocols/gps/rockwell.py twisted/protocols/gps/rockwell.py
index 7c1d2ad..2a1a019 100644
--- twisted/protocols/gps/rockwell.py
+++ twisted/protocols/gps/rockwell.py
@@ -21,7 +21,8 @@ Other desired features::
     - Compatability with the DeLorme Tripmate and other devices with this chipset (?)
 """
 
-import struct, operator, math
+import math
+import struct
 from twisted.internet import protocol
 from twisted.python import log
 
@@ -93,7 +94,7 @@ class Zodiac(protocol.Protocol):
       sync, msg_id, length, acknak, checksum = struct.unpack('<HHHHh', self.recvd[:10])
       
       # verify checksum
-      cksum = -(reduce(operator.add, (sync, msg_id, length, acknak)) & 0xFFFF)
+      cksum = -(sum(sync, msg_id, length, acknak) & 0xFFFF)
       cksum, = struct.unpack('<h', struct.pack('<h', cksum))
       if cksum != checksum:
         if DEBUG:
@@ -120,7 +121,7 @@ class Zodiac(protocol.Protocol):
       # does this message have data ?
       if length:
         message, checksum = self.recvd[10:10+length], struct.unpack('<h', self.recvd[10+length:neededBytes])[0]
-        cksum = 0x10000 - (reduce(operator.add, struct.unpack('<%dH' % (length/2), message)) & 0xFFFF)
+        cksum = 0x10000 - (sum(struct.unpack('<%dH' % (length/2), message)) & 0xFFFF)
         cksum, = struct.unpack('<h', struct.pack('<h', cksum))
         if cksum != checksum:
           if DEBUG:
diff --git twisted/protocols/policies.py twisted/protocols/policies.py
index b9c0661..902745e 100644
--- twisted/protocols/policies.py
+++ twisted/protocols/policies.py
@@ -11,7 +11,7 @@ Resource limiting policies.
 from __future__ import division, absolute_import
 
 # system imports
-import sys, operator
+import sys
 
 from zope.interface import directlyProvides, providedBy
 
@@ -196,7 +196,7 @@ class ThrottlingProtocol(ProtocolWrapper):
         ProtocolWrapper.write(self, data)
 
     def writeSequence(self, seq):
-        self.factory.registerWritten(reduce(operator.add, map(len, seq)))
+        self.factory.registerWritten(sum(map(len, seq)))
         ProtocolWrapper.writeSequence(self, seq)
 
     def dataReceived(self, data):
diff --git twisted/python/compat.py twisted/python/compat.py
index a8fc936..2fba204 100644
--- twisted/python/compat.py
+++ twisted/python/compat.py
@@ -136,13 +136,6 @@ set = set
 frozenset = frozenset
 
 
-try:
-    from functools import reduce
-except ImportError:
-    reduce = reduce
-
-
-
 def execfile(filename, globals, locals=None):
     """
     Execute a Python script in the given namespaces.
@@ -409,7 +402,6 @@ __all__ = [
     "reraise",
     "execfile",
     "frozenset",
-    "reduce",
     "set",
     "cmp",
     "comparable",
diff --git twisted/spread/jelly.py twisted/spread/jelly.py
index 1ddaf92..65fad97 100644
--- twisted/spread/jelly.py
+++ twisted/spread/jelly.py
@@ -66,6 +66,7 @@ import pickle
 import types
 import warnings
 import decimal
+import functools
 from types import StringType
 from types import UnicodeType
 from types import IntType
@@ -101,7 +102,6 @@ from twisted.python.reflect import namedObject, qual
 from twisted.persisted.crefutil import NotKnown, _Tuple, _InstanceMethod
 from twisted.persisted.crefutil import _DictKeyAndValue, _Dereference
 from twisted.persisted.crefutil import _Container
-from twisted.python.compat import reduce
 
 from twisted.spread.interfaces import IJellyable, IUnjellyable
 
@@ -585,7 +585,7 @@ class _Jellier:
         @rtype: C{list}
         """
         sign, guts, exponent = d.as_tuple()
-        value = reduce(lambda left, right: left * 10 + right, guts)
+        value = functools.reduce(lambda left, right: left * 10 + right, guts)
         if sign:
             value = -value
         return ['decimal', value, exponent]
diff --git twisted/test/test_compat.py twisted/test/test_compat.py
index e407035..20ec8b7 100644
--- twisted/test/test_compat.py
+++ twisted/test/test_compat.py
@@ -12,7 +12,7 @@ import socket, sys, traceback
 
 from twisted.trial import unittest
 
-from twisted.python.compat import reduce, execfile, _PY3
+from twisted.python.compat import execfile, _PY3
 from twisted.python.compat import comparable, cmp, nativeString, networkString
 from twisted.python.compat import unicode as unicodeCompat, lazyByteSlice
 from twisted.python.compat import reraise, NativeStringIO, iterbytes, intToBytes
@@ -65,15 +65,6 @@ class CompatTestCase(unittest.SynchronousTestCase):
         self.assertEqual(b, ['a', 'b', 'r', 's'])
 
 
-    def test_reduce(self):
-        """
-        L{reduce} should behave like the builtin reduce.
-        """
-        self.assertEqual(15, reduce(lambda x, y: x + y, [1, 2, 3, 4, 5]))
-        self.assertEqual(16, reduce(lambda x, y: x + y, [1, 2, 3, 4, 5], 1))
-
-
-
 class IPv6Tests(unittest.SynchronousTestCase):
     """
     C{inet_pton} and C{inet_ntop} implementations support IPv6.
diff --git twisted/words/protocols/irc.py twisted/words/protocols/irc.py
index 6a35ae6..2847bf8 100644
--- twisted/words/protocols/irc.py
+++ twisted/words/protocols/irc.py
@@ -35,6 +35,7 @@ Test coverage needs to be better.
 """
 
 import errno, os, random, re, stat, struct, sys, time, types, traceback
+import functools
 import operator
 import string, socket
 import textwrap
@@ -3046,7 +3047,7 @@ def _foldr(f, z, xs):
 
     @return: Single value resulting from reducing C{xs}.
     """
-    return reduce(lambda x, y: f(y, x), reversed(xs), z)
+    return functools.reduce(lambda x, y: f(y, x), reversed(xs), z)
 
 
 
diff --git twisted/words/protocols/msn.py twisted/words/protocols/msn.py
index f9dc854..4a62da5 100644
--- twisted/words/protocols/msn.py
+++ twisted/words/protocols/msn.py
@@ -71,7 +71,8 @@ TODO
 @author: Sam Jordan
 """
 
-import types, operator, os
+import os
+import types
 from random import randint
 from urllib import quote, unquote
 from hashlib import md5
@@ -371,7 +372,7 @@ class MSNMessage:
         used to calculte the number to send
         as the message length when sending a message.
         """
-        return reduce(operator.add, [len(x[0]) + len(x[1]) + 4  for x in self.headers.items()]) + len(self.message) + 2
+        return sum([len(x[0]) + len(x[1]) + 4  for x in self.headers.items()]) + len(self.message) + 2
 
     def setHeader(self, header, value):
         """ set the desired header """
diff --git twisted/words/protocols/oscar.py twisted/words/protocols/oscar.py
index 14908c6..99e33a7 100644
--- twisted/words/protocols/oscar.py
+++ twisted/words/protocols/oscar.py
@@ -15,6 +15,7 @@ import socket
 import random
 import types
 import re
+import functools
 from hashlib import md5
 
 from twisted.internet import reactor, defer, protocol
@@ -199,7 +200,7 @@ class SSIGroup:
         user.group = self
 
     def oscarRep(self, groupID, buddyID):
-        tlvData = TLV(0xc8, reduce(lambda x,y:x+y, [struct.pack('!H',self.usersToID[x]) for x in self.users]))
+        tlvData = TLV(0xc8, functools.reduce(lambda x,y:x+y, [struct.pack('!H',self.usersToID[x]) for x in self.users]))
         return struct.pack('!H', len(self.name)) + self.name + \
                struct.pack('!HH', groupID, buddyID) + '\000\001' + tlvData
 
@@ -230,7 +231,7 @@ class SSIBuddy:
                 self.alertSound = v
  
     def oscarRep(self, groupID, buddyID):
-        tlvData = reduce(lambda x,y: x+y, map(lambda (k,v):TLV(k,v), self.tlvs.items()), '\000\000')
+        tlvData = functools.reduce(lambda x,y: x+y, map(lambda (k,v):TLV(k,v), self.tlvs.items()), '\000\000')
         return struct.pack('!H', len(self.name)) + self.name + \
                struct.pack('!HH', groupID, buddyID) + '\000\000' + tlvData
 
