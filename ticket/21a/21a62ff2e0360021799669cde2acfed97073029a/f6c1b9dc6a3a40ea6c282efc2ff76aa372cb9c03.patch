Index: twisted/words/test/test_irc.py
===================================================================
--- twisted/words/test/test_irc.py	(revision 30568)
+++ twisted/words/test/test_irc.py	(working copy)
@@ -1272,7 +1272,19 @@
     def sendLine(self, m):
         self.lines.append(m)
 
+class ClientInviteTests(unittest.TestCase):
+    def setUp(self):
+        self.client = DummyClient()
 
+    def testChannelCorrection(self):
+        self.client.invite('foo','bar')
+        self.assertEquals(self.client.lines, ['INVITE foo #bar'])
+    
+    def testInvite(self):
+        self.setUp()
+        self.client.invite('foo','#bar')
+        self.assertEquals(self.client.lines, ['INVITE foo #bar'])
+
 class ClientMsgTests(unittest.TestCase):
     def setUp(self):
         self.client = DummyClient()
@@ -1471,6 +1483,15 @@
         """
         return transport.value().split('\r\n')[-2]
 
+    def test_invite(self):
+        """
+        L{IRCClient.invite} sends invite to user from channel.
+        """
+        user = 'foo'
+        channel = 'bar'
+        self.protocol.invite(user, channel)
+        self.assertEquals(self.transport.value().split('\r\n'), 
+                            ['INVITE %s #%s' % (user, channel),''])
 
     def test_away(self):
         """
Index: twisted/words/protocols/irc.py
===================================================================
--- twisted/words/protocols/irc.py	(revision 30568)
+++ twisted/words/protocols/irc.py	(working copy)
@@ -370,7 +370,6 @@
         """
         self.sendLine(":%s NOTICE %s :%s" % (sender, recip, message))
 
-
     def action(self, sender, recip, message):
         """
         Send an action to a channel or user.
@@ -1369,6 +1368,19 @@
 
     part = leave
 
+    def invite(self, user, channel):
+        """
+        Attempt to invite user to channel
+
+        @type user: C{str}
+        @param user: The user to invite
+        @type channel: C{str}
+        @param channel: The channel to invite the user too
+        """
+        if channel[0] not in CHANNEL_PREFIXES:
+            channel = '#' + channel
+        self.sendLine("INVITE %s %s" % (user, channel))
+
     def topic(self, channel, topic=None):
         """
         Attempt to set the topic of the given channel, or ask what it is.
