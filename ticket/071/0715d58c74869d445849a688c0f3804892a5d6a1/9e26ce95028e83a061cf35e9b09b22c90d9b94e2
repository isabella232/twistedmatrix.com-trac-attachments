Index: twisted/spread/pb.py
===================================================================
--- twisted/spread/pb.py	(revision 15975)
+++ twisted/spread/pb.py	(working copy)
@@ -67,6 +67,7 @@
 import sys
 import types
 import warnings
+import weakref
 
 # Twisted Imports
 from twisted.python import log, failure, components, reflect
@@ -327,7 +328,8 @@
         self.doRefCount = doRefCount
         self.perspective = perspective
         self.disconnectCallbacks = []
-
+        self.broker._registerRemoteReference(self)
+            
     def notifyOnDisconnect(self, callback):
         """Register a callback to be called if our broker gets disconnected.
 
@@ -397,12 +399,12 @@
     def __hash__(self):
         """Hash me.
         """
-        return self.luid
+        return hash(self.luid)
 
     def __del__(self):
         """Do distributed reference counting on finalization.
         """
-        if self.doRefCount:
+        if self.doRefCount and self.broker:
             self.broker.sendDecRef(self.luid)
 
 setUnjellyableForClass("remote", RemoteReference)
@@ -495,7 +497,7 @@
     version = 6
     username = None
     factory = None
-
+    
     def __init__(self, isClient=1, security=globalSecurity):
         banana.Banana.__init__(self, isClient)
         self.disconnected = 0
@@ -527,7 +529,11 @@
         # Dictionary mapping (remote) LUIDs to (locally cached) objects.
         self.locallyCachedObjects = {}
         self.waitingForAnswers = {}
+        self._remoteReferences = weakref.WeakKeyDictionary()
 
+    def _registerRemoteReference(self, rr):
+        self._remoteReferences[rr]=None
+    
     def resumeProducing(self):
         """Called when the consumer attached to me runs out of buffer.
         """
@@ -622,6 +628,12 @@
         self.disconnected = 1
         # nuke potential circular references.
         self.luids = None
+
+        for rr in self._remoteReferences:
+            rr.broker = None
+            rr.perspective = None
+        self._remoteReferences = weakref.WeakKeyDictionary()
+    
         if self.waitingForAnswers:
             for d in self.waitingForAnswers.values():
                 try:
@@ -824,7 +836,6 @@
             return unjelly(sexp, self.security, None, self)
         finally:
             self.unserializingPerspective = None
-
     def newLocalID(self):
         """Generate a new LUID.
         """
