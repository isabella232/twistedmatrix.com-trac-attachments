diff --git a/doc/lore/howto/extend-lore.xhtml b/doc/lore/howto/extend-lore.xhtml
index b04c899..d47d455 100644
--- a/doc/lore/howto/extend-lore.xhtml
+++ b/doc/lore/howto/extend-lore.xhtml
@@ -24,14 +24,15 @@ can be solved by creating an extension.</p>
 
 <h2>Inputs and Outputs</h2>
 
-<p>Lore works by reading the HTML source of your document, and producing
-whatever output the user specifies on the command line.  If the HTML document
-is well-formed XML that meets a certain minimum standard, Lore will be able to
-to produce some output.  All Lore extensions will be written to redefine the
-<em>input</em>, and most will redefine the output in some way.  The name of
-the default input is <q>lore</q>.  When you write your extension, you will
-come up with a new name for your input, telling Lore what rules to use to
-process the file.</p>
+<p>Lore works by reading the HTML source of your document, and
+producing whatever output the user specifies on the command line.  If
+the HTML document is well-formed XML that meets a certain minimum
+standard, Lore will be able to to produce some output.  All Lore
+extensions will be written to redefine the <em>input</em>, and most
+will redefine the output in some way.  The name of the default input
+is <q>lore</q>.  When you write your extension, you will come up with
+a new name for your input, telling Lore what rules to use to process
+the file.</p>
 
 <p>Lore can produce XHTML, LaTeX, and DocBook document formats, which can be
 displayed directly if you have a user agent capable of viewing them, or
@@ -91,19 +92,18 @@ classes.  To make LaTeX and lint work, we start by creating a plugin.</p>
 <a href="listings/lore/factory.py-1" class="py-listing">Listing 2: The Input
   Factory</a>
 
-<p>In Listing 2, we create a subclass of ProcessingFunctionFactory.  This
-class provides a hook for you, a class variable named
-<code>latexSpitters</code>.  This variable tells Lore
-what new class will be generating LaTeX from your input format.  We redefine
-<code>latexSpitters</code> to <code>MyLatexSpitter</code> in the subclass
-because this
-class knows what to do with the new input we have already defined.  Last, you
-must define the module-level variable <code
-    class="py-src-identifier">factory</code>.  It should be an instance with
-  the same
-interface as <code class="py-src-identifier">ProcessingFunctionFactory</code>
-(e.g. an instance of a subclass, in this case, <code
-    class="py-src-identifier">MyProcessingFunctionFactory</code>).</p>
+<p>In Listing 2, we create a subclass of ProcessingFunctionFactory.
+This class provides a hook for you, a class variable
+named <code>latexSpitters</code>.  This variable tells Lore what new
+class will be generating LaTeX from your input format.  We
+redefine <code>latexSpitters</code> to <code>MyLatexSpitter</code> in
+the subclass because this class knows what to do with the new input we
+have already defined.  Last, you must define the module-level
+variable <code class="py-src-identifier">factory</code>.  It should be
+an instance with the same interface
+as <code class="py-src-identifier">ProcessingFunctionFactory</code>
+(e.g. an instance of a subclass, in this
+case, <code class="py-src-identifier">MyProcessingFunctionFactory</code>).</p>
 
 <p>Now let's actually write some code to generate the LaTeX.  Doing this
 requires at least a familiarity with the LaTeX language.  Search Google for
@@ -113,11 +113,11 @@ resources.</p>
 <a href="listings/lore/spitters.py-1" class="py-listing">Listing 3:
   spitters.py</a>
 
-<p>The method <code>visitNode_span_productname</code> is
-our handler for &lt;span&gt; tags with the <code>class="productname"</code>
-identifier.  Lore knows to try methods <code>visitNode_span_*</code> and
-<code>visitNode_div_*</code> whenever it encounters a new
-class in one of these tags.  This is why the class names have to be valid
+<p>The method <code>visitNode_span_productname</code> is our handler
+for &lt;span&gt; tags with the <code>class="productname"</code>
+identifier.  Lore knows to try methods <code>visitNode_span_*</code>
+and <code>visitNode_div_*</code> whenever it encounters a new class in
+one of these tags.  This is why the class names have to be valid
 Python identifiers.</p>
 
 <p>Now let's see what Lore does with these new classes with the following
diff --git a/doc/lore/howto/lore.xhtml b/doc/lore/howto/lore.xhtml
index 7e6a19c..cc70398 100644
--- a/doc/lore/howto/lore.xhtml
+++ b/doc/lore/howto/lore.xhtml
@@ -17,22 +17,23 @@ with XML help like EMACS and ending with XML specific tools like (need name
 of XML editor here). Here, we will not cover the specifics of writing XML
 documents, except for a very broad overview.</p>
 
-<p>XML documents contain elements, which are delimited by an opening tag
-which looks like <code>&lt;tag-name attribute="value"&gt;</code> and ends with
-a closing tag, which looks like <code>&lt;/tag-name&gt;</code>. If an
-elements happen to contain nothing, it can be shortened to
-<code>&lt;tag-name /&gt;</code>. Elements can contain other elements, or
-text. Text can contain any characters except &lt;, &gt; and &amp;. These
-characters are rendered by &amp;lt;, &amp;gt; and &amp;amp;, respectively.</p>
-
-<p>A Lore document is a single <code>html</code> element. Inside this element,
-there are exactly two top-level elements: <code>head</code> and
-<code>body</code>. The <code>head</code> element must contain exactly one
-element: <code>title</code>, containing the title of the document.
-Most of the document will be contained in the <code>body</code> element.
-The <code>body</code> element must start with an <code>h1</code> (top-level
-header) element, which contains the exact same content as the
-<code>title</code> element.</p>
+<p>XML documents contain elements, which are delimited by an opening
+tag which looks like <code>&lt;tag-name attribute="value"&gt;</code>
+and ends with a closing tag, which looks
+like <code>&lt;/tag-name&gt;</code>. If an elements happen to contain
+nothing, it can be shortened to <code>&lt;tag-name
+/&gt;</code>. Elements can contain other elements, or text. Text can
+contain any characters except &lt;, &gt; and &amp;. These characters
+are rendered by &amp;lt;, &amp;gt; and &amp;amp;, respectively.</p>
+
+<p>A Lore document is a single <code>html</code> element. Inside this
+element, there are exactly two top-level elements: <code>head</code>
+and <code>body</code>. The <code>head</code> element must contain
+exactly one element: <code>title</code>, containing the title of the
+document.  Most of the document will be contained in
+the <code>body</code> element.  The <code>body</code> element must
+start with an <code>h1</code> (top-level header) element, which
+contains the exact same content as the <code>title</code> element.</p>
 
 <p>Thus, a fairly minimal Lore document might look like:</p>
 
@@ -117,8 +118,8 @@ paragraphs. The following classes have the given meanings:
 
 <tr>
 <td><code>ol</code>, <code>ul</code></td>
-<td>A list. It can be enumerated or bulleted. Inside a list, the element
-<code>li</code> (for a list element) is valid.</td>
+<td>A list. It can be enumerated or bulleted. Inside a list, the
+element <code>li</code> (for a list element) is valid.</td>
 </tr>
 
 <tr>
@@ -159,11 +160,11 @@ classes:
 
 <tr>
 <td><code>pre</code></td>
-<td>Preformatted text, usually for file listings. It can be used with the
-<code>python</code> class to indicate Python syntax coloring. Other possible
-classes are <code>shell</code> (to indicate a shell-transcript) or
-<code>python-interpreter</code> (to indicate an interactive interpreter
-transcript).</td>
+<td>Preformatted text, usually for file listings. It can be used with
+the <code>python</code> class to indicate Python syntax
+coloring. Other possible classes are <code>shell</code> (to indicate a
+shell-transcript) or <code>python-interpreter</code> (to indicate an
+interactive interpreter transcript).</td>
 </tr>
 
 <tr>
@@ -298,8 +299,8 @@ myslides-&lt;number&gt;.html, where number is the slide number,
 starting with 0 for the title slide.  Lore will look for a template
 file, either indicated by the <code>--config
 template=mytemplate.tpl</code> or the default template.tpl in the
-current directory.  An example slide template is found in
-<code>doc/examples/slides-template.tpl</code></p>
+current directory.  An example slide template is found
+in <code>doc/examples/slides-template.tpl</code></p>
 
 <p>The slides module currently supports three major output types:
 HTML, Magic Point, and LaTeX.  The options for the latter two will be
@@ -327,13 +328,14 @@ slides are generated by </p>
 
 <p>Lore can also produce slides in LaTeX format.  It supports three
 main styles: one slide per page, two per page, and Prosper format,
-with the <code>--config</code> parameters being <code>page</code>,
-<code>twopage</code>, and <code>prosper</code> respectively. Prosper
-is a LaTeX class for creating slides, which can be installed on Debian
-by <code>apt-get install prosper</code> or by visiting <a
-href="http://sourceforge.net/projects/prosper/">the Prosper SourceForge page</a>.
-LaTeX format slides (using the Prosper option, for example) are
-generated by</p>
+with the <code>--config</code> parameters
+being <code>page</code>, <code>twopage</code>,
+and <code>prosper</code> respectively. Prosper is a LaTeX class for
+creating slides, which can be installed on Debian by <code>apt-get
+install prosper</code> or by
+visiting <a href="http://sourceforge.net/projects/prosper/">the
+Prosper SourceForge page</a>.  LaTeX format slides (using the Prosper
+option, for example) are generated by</p>
 
 <pre class="shell">
 % lore --input lore-slides --output latex \
