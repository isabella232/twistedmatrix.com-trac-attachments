--- base\test_webclient.py	2005-11-30 07:43:31.000000000 +0100
+++ patched\test_webclient.py	2006-09-12 20:53:31.906250000 +0200
@@ -222,6 +222,32 @@
         self.assertEquals(factory.message, 'OK')
         self.assertEquals(factory.response_headers['content-length'][0], '10')
         
+    def testHeadersDuplication(self):
+        # Several headers are sent before others to avoid know broken proxies
+        # behaviours. Setting these headers in HTTPClientFactory 'headers' arguments
+        # may make them to be sent more than one time which is forbidden at least 
+        # for the 'Host' header. Besides, it is legitimate to send the 'Host' header
+        # apart to handle proxies.
+        class HeadersSpy(client.HTTPPageGetter):
+            sent_headers = []
+            def sendHeader(self, name, value):
+                self.sent_headers.append((name, value))
+                return client.HTTPPageGetter.sendHeader(self, name, value)
+        
+        url = self.getURL('file')
+        scheme, host, port, path = client._parse(url)
+        factory = client.HTTPClientFactory(url, headers={'Host': host})
+        factory.protocol = HeadersSpy
+        reactor.connectTCP(host, port, factory)
+        return factory.deferred.addCallback(self._cbFactoryHeaders, factory)
+        
+    def _cbFactoryHeaders(self, ignoredResult, factory):
+        self.assertEquals(factory.status, '200')
+        self.assert_(factory.version.startswith('HTTP/'))
+        self.assertEquals(factory.message, 'OK')
+        self.assertEquals(factory.response_headers['content-length'][0], '10')
+        sent_host = [h for h in factory.protocol.sent_headers if h[0].lower()=='host']
+        self.assertEquals(len(sent_host), 1)
 
     def testRedirect(self):
         return client.getPage(self.getURL("redirect")).addCallback(self._cbRedirect)
