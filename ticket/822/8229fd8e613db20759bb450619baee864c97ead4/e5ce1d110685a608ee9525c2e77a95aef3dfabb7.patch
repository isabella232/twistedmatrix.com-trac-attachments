diff --git a/twisted/application/test/test_internet.py b/twisted/application/test/test_internet.py
index 9e058d7..2aad786 100644
--- a/twisted/application/test/test_internet.py
+++ b/twisted/application/test/test_internet.py
@@ -124,7 +124,7 @@ class TestEndpointService(TestCase):
         endpoint's C{listen} method with its factory.
         """
         self.svc.privilegedStartService()
-        self.assertIdentical(self.factory, self.fakeServer.factory)
+        self.assertIs(self.factory, self.fakeServer.factory)
 
 
     def test_synchronousRaiseRaisesSynchronously(self, thunk=None):
@@ -186,7 +186,7 @@ class TestEndpointService(TestCase):
         has not yet been started.
         """
         self.svc.startService()
-        self.assertIdentical(self.factory, self.fakeServer.factory)
+        self.assertIs(self.factory, self.fakeServer.factory)
         self.assertEqual(self.svc.running, True)
 
 
diff --git a/twisted/conch/test/test_cftp.py b/twisted/conch/test/test_cftp.py
index 03e327a..319feb7 100644
--- a/twisted/conch/test/test_cftp.py
+++ b/twisted/conch/test/test_cftp.py
@@ -636,7 +636,7 @@ class TestOurServerCmdLineClient(CFTPClientTestBase):
 
         d = self.runCommand('get testfile1 "%s/test file2"' % (self.testDir,))
         d.addCallback(_checkGet)
-        d.addCallback(lambda _: self.failIf(
+        d.addCallback(lambda _: self.assertFalse(
             os.path.exists(self.testDir + '/test file2')))
         return d
 
@@ -668,13 +668,13 @@ class TestOurServerCmdLineClient(CFTPClientTestBase):
         def _checkPut(result):
             self.assertFilesEqual(self.testDir + '/testfile1',
                                   self.testDir + '/test"file2')
-            self.failUnless(result.endswith(expectedOutput))
+            self.assertTrue(result.endswith(expectedOutput))
             return self.runCommand('rm "test\\"file2"')
 
         d = self.runCommand('put %s/testfile1 "test\\"file2"'
                             % (self.testDir,))
         d.addCallback(_checkPut)
-        d.addCallback(lambda _: self.failIf(
+        d.addCallback(lambda _: self.assertFalse(
             os.path.exists(self.testDir + '/test"file2')))
         return d
 
@@ -874,7 +874,7 @@ exit
         def _cbCheckResult(res):
             res = res.split('\n')
             log.msg('RES %s' % str(res))
-            self.failUnless(res[1].find(self.testDir) != -1, repr(res))
+            self.assertTrue(res[1].find(self.testDir) != -1, repr(res))
             self.assertEqual(res[3:-2], ['testDirectory', 'testRemoveFile',
                                              'testRenameFile', 'testfile1'])
 
@@ -890,7 +890,7 @@ pwd
 exit
 """
         def _cbCheckResult(res):
-            self.failIf(res.find(self.testDir) != -1)
+            self.assertFalse(res.find(self.testDir) != -1)
 
         d = self._getBatchOutput(cmds)
         d.addCallback(_cbCheckResult)
@@ -905,7 +905,7 @@ pwd
 exit
 """
         def _cbCheckResult(res):
-            self.failIf(res.find(self.testDir) == -1)
+            self.assertFalse(res.find(self.testDir) == -1)
 
         d = self._getBatchOutput(cmds)
         d.addCallback(_cbCheckResult)
diff --git a/twisted/conch/test/test_checkers.py b/twisted/conch/test/test_checkers.py
index 9c85050..9b1cff5 100644
--- a/twisted/conch/test/test_checkers.py
+++ b/twisted/conch/test/test_checkers.py
@@ -105,7 +105,7 @@ class HelperTests(TestCase):
         userdb.addUser(
             'alice', 'secrit', 1, 2, 'first last', '/foo', '/bin/sh')
         self.patch(checkers, 'pwd', userdb)
-        self.assertEquals(
+        self.assertEqual(
             checkers._pwdGetByName('alice'), userdb.getpwnam('alice'))
 
 
@@ -114,7 +114,7 @@ class HelperTests(TestCase):
         If the C{pwd} module isn't present, L{_pwdGetByName} returns C{None}.
         """
         self.patch(checkers, 'pwd', None)
-        self.assertIdentical(checkers._pwdGetByName('alice'), None)
+        self.assertIs(checkers._pwdGetByName('alice'), None)
 
 
     def test_shadowGetByName(self):
@@ -131,10 +131,10 @@ class HelperTests(TestCase):
         self.patch(checkers, 'os', self.mockos)
         self.patch(util, 'os', self.mockos)
 
-        self.assertEquals(
+        self.assertEqual(
             checkers._shadowGetByName('bob'), userdb.getspnam('bob'))
-        self.assertEquals(self.mockos.seteuidCalls, [0, 2345])
-        self.assertEquals(self.mockos.setegidCalls, [0, 1234])
+        self.assertEqual(self.mockos.seteuidCalls, [0, 2345])
+        self.assertEqual(self.mockos.setegidCalls, [0, 1234])
 
 
     def test_shadowGetByNameWithoutSpwd(self):
@@ -153,10 +153,10 @@ class HelperTests(TestCase):
         self.mockos.euid = 2345
         self.mockos.egid = 1234
 
-        self.assertEquals(
+        self.assertEqual(
             checkers._shadowGetByName('bob'), userdb.getspnam('bob'))
-        self.assertEquals(self.mockos.seteuidCalls, [0, 2345])
-        self.assertEquals(self.mockos.setegidCalls, [0, 1234])
+        self.assertEqual(self.mockos.seteuidCalls, [0, 2345])
+        self.assertEqual(self.mockos.setegidCalls, [0, 1234])
 
 
     def test_shadowGetByNameWithoutEither(self):
@@ -168,9 +168,9 @@ class HelperTests(TestCase):
         self.patch(checkers, 'shadow', None)
         self.patch(checkers, 'os', self.mockos)
 
-        self.assertIdentical(checkers._shadowGetByName('bob'), None)
-        self.assertEquals(self.mockos.seteuidCalls, [])
-        self.assertEquals(self.mockos.setegidCalls, [])
+        self.assertIs(checkers._shadowGetByName('bob'), None)
+        self.assertEqual(self.mockos.seteuidCalls, [])
+        self.assertEqual(self.mockos.setegidCalls, [])
 
 
 
@@ -422,7 +422,7 @@ class SSHProtocolCheckerTestCase(TestCase):
         """
         The default L{SSHProcotolChecker.areDone} should simply return True.
         """
-        self.assertEquals(checkers.SSHProtocolChecker().areDone(None), True)
+        self.assertEqual(checkers.SSHProtocolChecker().areDone(None), True)
 
 
 
@@ -446,10 +446,10 @@ class UNIXPasswordDatabaseTests(TestCase):
         """
         result = []
         d.addBoth(result.append)
-        self.assertEquals(len(result), 1, "login incomplete")
+        self.assertEqual(len(result), 1, "login incomplete")
         if isinstance(result[0], Failure):
             result[0].raiseException()
-        self.assertEquals(result[0], username)
+        self.assertEqual(result[0], username)
 
 
     def test_defaultCheckers(self):
@@ -486,12 +486,12 @@ class UNIXPasswordDatabaseTests(TestCase):
 
         cred = UsernamePassword("alice", "password")
         self.assertLoggedIn(checker.requestAvatarId(cred), 'alice')
-        self.assertEquals(mockos.seteuidCalls, [])
-        self.assertEquals(mockos.setegidCalls, [])
+        self.assertEqual(mockos.seteuidCalls, [])
+        self.assertEqual(mockos.setegidCalls, [])
         cred.username = "bob"
         self.assertLoggedIn(checker.requestAvatarId(cred), 'bob')
-        self.assertEquals(mockos.seteuidCalls, [0, 2345])
-        self.assertEquals(mockos.setegidCalls, [0, 1234])
+        self.assertEqual(mockos.seteuidCalls, [0, 2345])
+        self.assertEqual(mockos.setegidCalls, [0, 1234])
 
 
     def assertUnauthorizedLogin(self, d):
diff --git a/twisted/conch/test/test_connection.py b/twisted/conch/test/test_connection.py
index 85a8e6a..4038e4d 100644
--- a/twisted/conch/test/test_connection.py
+++ b/twisted/conch/test/test_connection.py
@@ -212,7 +212,7 @@ class ConnectionTestCase(unittest.TestCase):
         Test that the connection links itself to the avatar in the
         transport.
         """
-        self.assertIdentical(self.transport.avatar.conn, self.conn)
+        self.assertIs(self.transport.avatar.conn, self.conn)
 
     def test_serviceStopped(self):
         """
diff --git a/twisted/conch/test/test_helper.py b/twisted/conch/test/test_helper.py
index 7064d03..5668cd9 100644
--- a/twisted/conch/test/test_helper.py
+++ b/twisted/conch/test/test_helper.py
@@ -279,31 +279,31 @@ class BufferTestCase(unittest.TestCase):
 
         ch = self.term.getCharacter(0, 0)
         self.assertEqual(ch[0], 'W')
-        self.failUnless(ch[1].bold)
-        self.failUnless(ch[1].underline)
-        self.failUnless(ch[1].blink)
-        self.failUnless(ch[1].reverseVideo)
+        self.assertTrue(ch[1].bold)
+        self.assertTrue(ch[1].underline)
+        self.assertTrue(ch[1].blink)
+        self.assertTrue(ch[1].reverseVideo)
 
         ch = self.term.getCharacter(1, 0)
         self.assertEqual(ch[0], 'X')
-        self.failIf(ch[1].bold)
-        self.failIf(ch[1].underline)
-        self.failIf(ch[1].blink)
-        self.failIf(ch[1].reverseVideo)
+        self.assertFalse(ch[1].bold)
+        self.assertFalse(ch[1].underline)
+        self.assertFalse(ch[1].blink)
+        self.assertFalse(ch[1].reverseVideo)
 
         ch = self.term.getCharacter(2, 0)
         self.assertEqual(ch[0], 'Y')
-        self.failUnless(ch[1].blink)
-        self.failIf(ch[1].bold)
-        self.failIf(ch[1].underline)
-        self.failIf(ch[1].reverseVideo)
+        self.assertTrue(ch[1].blink)
+        self.assertFalse(ch[1].bold)
+        self.assertFalse(ch[1].underline)
+        self.assertFalse(ch[1].reverseVideo)
 
         ch = self.term.getCharacter(3, 0)
         self.assertEqual(ch[0], 'Z')
-        self.failUnless(ch[1].blink)
-        self.failUnless(ch[1].bold)
-        self.failIf(ch[1].underline)
-        self.failIf(ch[1].reverseVideo)
+        self.assertTrue(ch[1].blink)
+        self.assertTrue(ch[1].bold)
+        self.assertFalse(ch[1].underline)
+        self.assertFalse(ch[1].reverseVideo)
 
     def testColorAttributes(self):
         s1 = "Merry xmas"
@@ -475,25 +475,25 @@ class ExpectTestCase(unittest.TestCase):
         d.addCallback(result.append)
 
         self.term.write("greeting puny earthlings\n")
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("hello world\n")
-        self.failUnless(result)
+        self.assertTrue(result)
         self.assertEqual(result[0].group(), "hello world")
         self.assertEqual(len(self.fs.calls), 1)
-        self.failIf(self.fs.calls[0].active())
+        self.assertFalse(self.fs.calls[0].active())
 
     def testBrokenUpString(self):
         result = []
         d = self.term.expect("hello world")
         d.addCallback(result.append)
 
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("hello ")
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("worl")
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("d")
-        self.failUnless(result)
+        self.assertTrue(result)
         self.assertEqual(result[0].group(), "hello world")
 
 
@@ -504,9 +504,9 @@ class ExpectTestCase(unittest.TestCase):
         d2 = self.term.expect("world")
         d2.addCallback(result.append)
 
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write("hello")
-        self.failIf(result)
+        self.assertFalse(result)
         self.term.write(" ")
         self.assertEqual(len(result), 1)
         self.term.write("world")
@@ -520,7 +520,7 @@ class ExpectTestCase(unittest.TestCase):
         result = []
         d = self.term.expect("hello world")
         d.addCallback(result.append)
-        self.failUnless(result)
+        self.assertTrue(result)
         self.assertEqual(result[0].group(), "hello world")
 
     def testMultipleSynchronous(self):
@@ -537,7 +537,7 @@ class ExpectTestCase(unittest.TestCase):
         self.assertEqual(result[1].group(), "world")
 
     def _cbTestTimeoutFailure(self, res):
-        self.assert_(hasattr(res, 'type'))
+        self.assertTrue(hasattr(res, 'type'))
         self.assertEqual(res.type, helper.ExpectationTimeout)
 
     def testTimeoutFailure(self):
diff --git a/twisted/conch/test/test_insults.py b/twisted/conch/test/test_insults.py
index f313b5e..b3b0dfa 100644
--- a/twisted/conch/test/test_insults.py
+++ b/twisted/conch/test/test_insults.py
@@ -112,7 +112,7 @@ class ServerArrowKeys(ByteGroupingsMixin, unittest.TestCase):
                       parser.RIGHT_ARROW, parser.LEFT_ARROW):
             result = self.assertCall(occurrences(proto).pop(0), "keystrokeReceived", (arrow, None))
             self.assertEqual(occurrences(result), [])
-        self.failIf(occurrences(proto))
+        self.assertFalse(occurrences(proto))
 
 
 class PrintableCharacters(ByteGroupingsMixin, unittest.TestCase):
@@ -135,7 +135,7 @@ class PrintableCharacters(ByteGroupingsMixin, unittest.TestCase):
             self.assertEqual(occurrences(result), [])
 
         occs = occurrences(proto)
-        self.failIf(occs, "%r should have been []" % (occs,))
+        self.assertFalse(occs, "%r should have been []" % (occs,))
 
 class ServerFunctionKeys(ByteGroupingsMixin, unittest.TestCase):
     """Test for parsing and dispatching function keys (F1 - F12)
@@ -156,7 +156,7 @@ class ServerFunctionKeys(ByteGroupingsMixin, unittest.TestCase):
             funcArg = getattr(parser, 'F%d' % (funcNum,))
             result = self.assertCall(occurrences(proto).pop(0), "keystrokeReceived", (funcArg, None))
             self.assertEqual(occurrences(result), [])
-        self.failIf(occurrences(proto))
+        self.assertFalse(occurrences(proto))
 
 class ClientCursorMovement(ByteGroupingsMixin, unittest.TestCase):
     protocolFactory = ClientProtocol
@@ -176,7 +176,7 @@ class ClientCursorMovement(ByteGroupingsMixin, unittest.TestCase):
                                 ('Backward', 2), ('Up', 1), ('Backward', 2)]:
             result = self.assertCall(occurrences(proto).pop(0), "cursor" + method, (count,))
             self.assertEqual(occurrences(result), [])
-        self.failIf(occurrences(proto))
+        self.assertFalse(occurrences(proto))
 
 class ClientControlSequences(unittest.TestCase, MockMixin):
     def setUp(self):
@@ -186,7 +186,7 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         self.parser.factory = self
         self.parser.makeConnection(self.transport)
         result = self.assertCall(occurrences(self.proto).pop(0), "makeConnection", (self.parser,))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
     def testSimpleCardinals(self):
         self.parser.dataReceived(
@@ -196,36 +196,36 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         for meth in ("Down", "Up", "Forward", "Backward"):
             for count in (1, 2, 20, 200):
                 result = self.assertCall(occs.pop(0), "cursor" + meth, (count,))
-                self.failIf(occurrences(result))
-        self.failIf(occs)
+                self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testScrollRegion(self):
         self.parser.dataReceived('\x1b[5;22r\x1b[r')
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "setScrollRegion", (5, 22))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "setScrollRegion", (None, None))
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testHeightAndWidth(self):
         self.parser.dataReceived("\x1b#3\x1b#4\x1b#5\x1b#6")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "doubleHeightLine", (True,))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "doubleHeightLine", (False,))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "singleWidthLine")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "doubleWidthLine")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testCharacterSet(self):
         self.parser.dataReceived(
@@ -235,74 +235,74 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         for which in (G0, G1):
             for charset in (CS_UK, CS_US, CS_DRAWING, CS_ALTERNATE, CS_ALTERNATE_SPECIAL):
                 result = self.assertCall(occs.pop(0), "selectCharacterSet", (charset, which))
-                self.failIf(occurrences(result))
-        self.failIf(occs)
+                self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testShifting(self):
         self.parser.dataReceived("\x15\x14")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "shiftIn")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "shiftOut")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testSingleShifts(self):
         self.parser.dataReceived("\x1bN\x1bO")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "singleShift2")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "singleShift3")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testKeypadMode(self):
         self.parser.dataReceived("\x1b=\x1b>")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "applicationKeypadMode")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "numericKeypadMode")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testCursor(self):
         self.parser.dataReceived("\x1b7\x1b8")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "saveCursor")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "restoreCursor")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testReset(self):
         self.parser.dataReceived("\x1bc")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "reset")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testIndex(self):
         self.parser.dataReceived("\x1bD\x1bM\x1bE")
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "index")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "reverseIndex")
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "nextLine")
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testModes(self):
         self.parser.dataReceived(
@@ -312,11 +312,11 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
         occs = occurrences(self.proto)
 
         result = self.assertCall(occs.pop(0), "setModes", ([modes.KAM, modes.IRM, modes.LNM],))
-        self.failIf(occurrences(result))
+        self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "resetModes", ([modes.KAM, modes.IRM, modes.LNM],))
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testErasure(self):
         self.parser.dataReceived(
@@ -327,11 +327,11 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
                      "eraseToDisplayEnd", "eraseToDisplayBeginning",
                      "eraseDisplay"):
             result = self.assertCall(occs.pop(0), meth)
-            self.failIf(occurrences(result))
+            self.assertFalse(occurrences(result))
 
         result = self.assertCall(occs.pop(0), "deleteCharacter", (3,))
-        self.failIf(occurrences(result))
-        self.failIf(occs)
+        self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testLineDeletion(self):
         self.parser.dataReceived("\x1b[M\x1b[3M")
@@ -339,8 +339,8 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
 
         for arg in (1, 3):
             result = self.assertCall(occs.pop(0), "deleteLine", (arg,))
-            self.failIf(occurrences(result))
-        self.failIf(occs)
+            self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testLineInsertion(self):
         self.parser.dataReceived("\x1b[L\x1b[3L")
@@ -348,8 +348,8 @@ class ClientControlSequences(unittest.TestCase, MockMixin):
 
         for arg in (1, 3):
             result = self.assertCall(occs.pop(0), "insertLine", (arg,))
-            self.failIf(occurrences(result))
-        self.failIf(occs)
+            self.assertFalse(occurrences(result))
+        self.assertFalse(occs)
 
     def testCursorPosition(self):
         methods(self.proto)['reportCursorPosition'] = (6, 7)
@@ -471,7 +471,7 @@ class Deprecations(unittest.TestCase):
         Ensures that the correct deprecation warning was issued.
         """
         warnings = self.flushWarnings()
-        self.assertIdentical(warnings[0]['category'], DeprecationWarning)
+        self.assertIs(warnings[0]['category'], DeprecationWarning)
         self.assertEqual(warnings[0]['message'], message)
         self.assertEqual(len(warnings), 1)
 
diff --git a/twisted/conch/test/test_mixin.py b/twisted/conch/test/test_mixin.py
index 74d60ea..592aa48 100644
--- a/twisted/conch/test/test_mixin.py
+++ b/twisted/conch/test/test_mixin.py
@@ -29,13 +29,13 @@ class BufferingTest(unittest.TestCase):
         p = TestBufferingProto()
         t = p.transport = StringTransport()
 
-        self.failIf(p.scheduled)
+        self.assertFalse(p.scheduled)
 
         L = ['foo', 'bar', 'baz', 'quux']
 
         p.write('foo')
-        self.failUnless(p.scheduled)
-        self.failIf(p.rescheduled)
+        self.assertTrue(p.scheduled)
+        self.assertFalse(p.rescheduled)
 
         for s in L:
             n = p.rescheduled
diff --git a/twisted/conch/test/test_session.py b/twisted/conch/test/test_session.py
index 4db1629..17d5add 100644
--- a/twisted/conch/test/test_session.py
+++ b/twisted/conch/test/test_session.py
@@ -533,8 +533,8 @@ class SessionInterfaceTestCase(unittest.TestCase):
         s = session.SSHSession(avatar=object) # use object because it doesn't
                                               # have an adapter
         self.assertEqual(s.buf, '')
-        self.assertIdentical(s.client, None)
-        self.assertIdentical(s.session, None)
+        self.assertIs(s.client, None)
+        self.assertIs(s.session, None)
 
 
     def test_client_dataReceived(self):
@@ -591,7 +591,7 @@ class SessionInterfaceTestCase(unittest.TestCase):
         ret = self.session.requestReceived(
             'subsystem', common.NS('BadSubsystem'))
         self.assertFalse(ret)
-        self.assertIdentical(self.session.client, None)
+        self.assertIs(self.session.client, None)
 
 
     def test_lookupSubsystem(self):
@@ -604,7 +604,7 @@ class SessionInterfaceTestCase(unittest.TestCase):
             'subsystem', common.NS('TestSubsystem') + 'data')
         self.assertTrue(ret)
         self.assertIsInstance(self.session.client, protocol.ProcessProtocol)
-        self.assertIdentical(self.session.client.transport.proto,
+        self.assertIs(self.session.client.transport.proto,
                              self.session.avatar.subsystem)
 
 
@@ -620,8 +620,8 @@ class SessionInterfaceTestCase(unittest.TestCase):
         ret = s.request_subsystem(
             common.NS('subsystem') + 'data')
         self.assertTrue(ret)
-        self.assertNotIdentical(s.client, None)
-        self.assertIdentical(s.conn.closes.get(s), None)
+        self.assertIsNot(s.client, None)
+        self.assertIs(s.conn.closes.get(s), None)
         s.eofReceived()
         self.assertTrue(s.conn.closes.get(s))
         # these should not raise errors
@@ -687,7 +687,7 @@ class SessionInterfaceTestCase(unittest.TestCase):
         self.assertSessionIsStubSession()
         self.assertIsInstance(self.session.client,
                               session.SSHSessionProcessProtocol)
-        self.assertIdentical(self.session.session.shellProtocol,
+        self.assertIs(self.session.session.shellProtocol,
                 self.session.client)
         # doesn't get a shell the second time
         self.assertFalse(self.session.requestReceived('shell', ''))
@@ -723,14 +723,14 @@ class SessionInterfaceTestCase(unittest.TestCase):
                                            common.NS('failure'))
         self.assertFalse(ret)
         self.assertRequestRaisedRuntimeError()
-        self.assertIdentical(self.session.client, None)
+        self.assertIs(self.session.client, None)
 
         self.assertTrue(self.session.requestReceived('exec',
                                                      common.NS('success')))
         self.assertSessionIsStubSession()
         self.assertIsInstance(self.session.client,
                               session.SSHSessionProcessProtocol)
-        self.assertIdentical(self.session.session.execProtocol,
+        self.assertIs(self.session.session.execProtocol,
                 self.session.client)
         self.assertEqual(self.session.session.execCommandLine,
                 'success')
@@ -811,7 +811,7 @@ class SessionInterfaceTestCase(unittest.TestCase):
         When a close is received, the session should send a close message.
         """
         ret = self.session.closeReceived()
-        self.assertIdentical(ret, None)
+        self.assertIs(ret, None)
         self.assertTrue(self.session.conn.closes[self.session])
 
 
@@ -838,7 +838,7 @@ class SessionWithNoAvatarTestCase(unittest.TestCase):
     def setUp(self):
         self.session = session.SSHSession()
         self.session.avatar = StubAvatar()
-        self.assertIdentical(self.session.session, None)
+        self.assertIs(self.session.session, None)
 
 
     def assertSessionProvidesISession(self):
diff --git a/twisted/conch/test/test_ssh.py b/twisted/conch/test/test_ssh.py
index 6cf1a1a..491cac9 100644
--- a/twisted/conch/test/test_ssh.py
+++ b/twisted/conch/test/test_ssh.py
@@ -631,7 +631,7 @@ class SSHProtocolTestCase(unittest.TestCase):
         def cbPty(ignored):
             # The server-side object corresponding to our client side channel.
             session = self.realm.avatar.conn.channels[0].session
-            self.assertIdentical(session.avatar, self.realm.avatar)
+            self.assertIs(session.avatar, self.realm.avatar)
             self.assertEqual(session._terminalType, 'conch-test-term')
             self.assertEqual(session._windowSize, (24, 80, 0, 0))
             self.assertTrue(session.ptyReq)
@@ -705,7 +705,7 @@ class SSHProtocolTestCase(unittest.TestCase):
         def cbClosed(ignored):
             # No data is expected
             self.assertEqual(self.channel.received, [])
-            self.assertNotEquals(self.channel.status, 0)
+            self.assertNotEqual(self.channel.status, 0)
         channel.addCallback(cbClosed)
         return channel
 
@@ -866,9 +866,9 @@ class TestSSHFactory(unittest.TestCase):
         f2 = self.makeSSHFactory(primes={1:(2,3)})
         p1 = f1.buildProtocol(None)
         p2 = f2.buildProtocol(None)
-        self.failIf('diffie-hellman-group-exchange-sha1' in p1.supportedKeyExchanges,
+        self.assertFalse('diffie-hellman-group-exchange-sha1' in p1.supportedKeyExchanges,
                 p1.supportedKeyExchanges)
-        self.failUnless('diffie-hellman-group-exchange-sha1' in p2.supportedKeyExchanges,
+        self.assertTrue('diffie-hellman-group-exchange-sha1' in p2.supportedKeyExchanges,
                 p2.supportedKeyExchanges)
 
 
diff --git a/twisted/conch/test/test_transport.py b/twisted/conch/test/test_transport.py
index 10546cb..68c0c06 100644
--- a/twisted/conch/test/test_transport.py
+++ b/twisted/conch/test/test_transport.py
@@ -1063,15 +1063,15 @@ here's some other stuff
         proto2 = MockTransportBase()
         proto2.makeConnection(proto_helpers.StringTransport())
         proto2.sendIgnore('')
-        self.failIfEquals(proto.gotVersion, proto2.gotVersion)
-        self.failIfEquals(proto.transport, proto2.transport)
-        self.failIfEquals(proto.outgoingPacketSequence,
+        self.assertNotEqual(proto.gotVersion, proto2.gotVersion)
+        self.assertNotEqual(proto.transport, proto2.transport)
+        self.assertNotEqual(proto.outgoingPacketSequence,
                           proto2.outgoingPacketSequence)
-        self.failIfEquals(proto.incomingPacketSequence,
+        self.assertNotEqual(proto.incomingPacketSequence,
                           proto2.incomingPacketSequence)
-        self.failIfEquals(proto.currentEncryptions,
+        self.assertNotEqual(proto.currentEncryptions,
                           proto2.currentEncryptions)
-        self.failIfEquals(proto.service, proto2.service)
+        self.assertNotEqual(proto.service, proto2.service)
 
 
 
@@ -1457,18 +1457,18 @@ class ServerSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.proto.nextEncryptions = transport.SSHCiphers('none', 'none',
                                                           'none', 'none')
         self.proto.ssh_NEWKEYS('')
-        self.assertIdentical(self.proto.currentEncryptions,
+        self.assertIs(self.proto.currentEncryptions,
                              self.proto.nextEncryptions)
-        self.assertIdentical(self.proto.outgoingCompression, None)
-        self.assertIdentical(self.proto.incomingCompression, None)
+        self.assertIs(self.proto.outgoingCompression, None)
+        self.assertIs(self.proto.incomingCompression, None)
         self.proto.outgoingCompressionType = 'zlib'
         self.simulateKeyExchange('AB', 'CD')
         self.proto.ssh_NEWKEYS('')
-        self.failIfIdentical(self.proto.outgoingCompression, None)
+        self.assertIsNot(self.proto.outgoingCompression, None)
         self.proto.incomingCompressionType = 'zlib'
         self.simulateKeyExchange('AB', 'EF')
         self.proto.ssh_NEWKEYS('')
-        self.failIfIdentical(self.proto.incomingCompression, None)
+        self.assertIsNot(self.proto.incomingCompression, None)
 
 
     def test_SERVICE_REQUEST(self):
@@ -1627,7 +1627,7 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         exchangeHash = h.digest()
 
         def _cbTestKEXDH_REPLY(value):
-            self.assertIdentical(value, None)
+            self.assertIs(value, None)
             self.assertEqual(self.calledVerifyHostKey, True)
             self.assertEqual(self.proto.sessionID, exchangeHash)
 
@@ -1677,7 +1677,7 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         exchangeHash = h.digest()
 
         def _cbTestKEX_DH_GEX_REPLY(value):
-            self.assertIdentical(value, None)
+            self.assertIs(value, None)
             self.assertEqual(self.calledVerifyHostKey, True)
             self.assertEqual(self.proto.sessionID, exchangeHash)
 
@@ -1721,24 +1721,24 @@ class ClientSSHTransportTestCase(ServerAndClientSSHTransportBaseCase,
         self.proto.nextEncryptions = transport.SSHCiphers(
             'none', 'none', 'none', 'none')
         self.simulateKeyExchange('AB', 'CD')
-        self.assertNotIdentical(
+        self.assertIsNot(
             self.proto.currentEncryptions, self.proto.nextEncryptions)
 
         self.proto.nextEncryptions = MockCipher()
         self.proto.ssh_NEWKEYS('')
-        self.assertIdentical(self.proto.outgoingCompression, None)
-        self.assertIdentical(self.proto.incomingCompression, None)
-        self.assertIdentical(self.proto.currentEncryptions,
+        self.assertIs(self.proto.outgoingCompression, None)
+        self.assertIs(self.proto.incomingCompression, None)
+        self.assertIs(self.proto.currentEncryptions,
                              self.proto.nextEncryptions)
         self.assertTrue(secure[0])
         self.proto.outgoingCompressionType = 'zlib'
         self.simulateKeyExchange('AB', 'GH')
         self.proto.ssh_NEWKEYS('')
-        self.failIfIdentical(self.proto.outgoingCompression, None)
+        self.assertIsNot(self.proto.outgoingCompression, None)
         self.proto.incomingCompressionType = 'zlib'
         self.simulateKeyExchange('AB', 'IJ')
         self.proto.ssh_NEWKEYS('')
-        self.failIfIdentical(self.proto.incomingCompression, None)
+        self.assertIsNot(self.proto.incomingCompression, None)
 
 
     def test_SERVICE_ACCEPT(self):
@@ -1841,7 +1841,7 @@ class SSHCiphersTestCase(unittest.TestCase):
         for macName, mac in ciphers.macMap.items():
             mod = ciphers._getMAC(macName, key)
             if macName == 'none':
-                self.assertIdentical(mac, None)
+                self.assertIs(mac, None)
             else:
                 self.assertEqual(mod[0], mac)
                 self.assertEqual(mod[1],
@@ -1869,7 +1869,7 @@ class SSHCiphersTestCase(unittest.TestCase):
             enc = cip.encrypt(key[:bs])
             enc2 = cip.encrypt(key[:bs])
             if counter:
-                self.failIfEquals(enc, enc2)
+                self.assertNotEqual(enc, enc2)
             self.assertEqual(encCipher.encrypt(key[:bs]), enc)
             self.assertEqual(encCipher.encrypt(key[:bs]), enc2)
             self.assertEqual(decCipher.decrypt(enc), key[:bs])
diff --git a/twisted/conch/test/test_userauth.py b/twisted/conch/test/test_userauth.py
index b6ceb45..b342845 100644
--- a/twisted/conch/test/test_userauth.py
+++ b/twisted/conch/test/test_userauth.py
@@ -552,7 +552,7 @@ class SSHUserAuthServerTestCase(unittest.TestCase):
         clearAuthServer.transport.isEncrypted = lambda x: False
         clearAuthServer.serviceStarted()
         clearAuthServer.serviceStopped()
-        self.failIfIn('password', clearAuthServer.supportedAuthentications)
+        self.assertNotIn('password', clearAuthServer.supportedAuthentications)
         # only encrypt incoming (the direction the password is sent)
         halfAuthServer = userauth.SSHUserAuthServer()
         halfAuthServer.transport = FakeTransport(self.portal)
@@ -575,7 +575,7 @@ class SSHUserAuthServerTestCase(unittest.TestCase):
         clearAuthServer.transport.isEncrypted = lambda x: False
         clearAuthServer.serviceStarted()
         clearAuthServer.serviceStopped()
-        self.failIfIn('keyboard-interactive',
+        self.assertNotIn('keyboard-interactive',
                 clearAuthServer.supportedAuthentications)
         # only encrypt incoming (the direction the password is sent)
         halfAuthServer = userauth.SSHUserAuthServer()
@@ -805,7 +805,7 @@ class SSHUserAuthClientTestCase(unittest.TestCase):
         authClient.serviceStarted()
         authClient.tryAuth('publickey')
         authClient.transport.packets = []
-        self.assertIdentical(authClient.ssh_USERAUTH_PK_OK(''), None)
+        self.assertIs(authClient.ssh_USERAUTH_PK_OK(''), None)
         self.assertEqual(authClient.transport.packets, [
                 (userauth.MSG_USERAUTH_REQUEST, NS('foo') + NS('nancy') +
                  NS('none'))])
@@ -978,7 +978,7 @@ class SSHUserAuthClientTestCase(unittest.TestCase):
         getGenericAnswers() should return a failed Deferred.
         """
         authClient = userauth.SSHUserAuthClient('foo', FakeTransport.Service())
-        self.assertIdentical(authClient.getPublicKey(), None)
+        self.assertIs(authClient.getPublicKey(), None)
         def check(result):
             result.trap(NotImplementedError)
             d = authClient.getPassword()
diff --git a/twisted/conch/test/test_window.py b/twisted/conch/test/test_window.py
index 6d7d9d2..0895cf9 100644
--- a/twisted/conch/test/test_window.py
+++ b/twisted/conch/test/test_window.py
@@ -63,5 +63,5 @@ class ScrolledAreaTests(TestCase):
         """
         widget = TextOutput()
         scrolled = ScrolledArea(widget)
-        self.assertIdentical(widget.parent, scrolled._viewport)
-        self.assertIdentical(scrolled._viewport.parent, scrolled)
+        self.assertIs(widget.parent, scrolled._viewport)
+        self.assertIs(scrolled._viewport.parent, scrolled)
diff --git a/twisted/internet/test/connectionmixins.py b/twisted/internet/test/connectionmixins.py
index 614fb30..faff444 100644
--- a/twisted/internet/test/connectionmixins.py
+++ b/twisted/internet/test/connectionmixins.py
@@ -383,7 +383,7 @@ class ConnectionTestsMixin(object):
         # are no references to the protocol instance left in the reactor.
         clientProtocol = None
         collect()
-        self.assertIdentical(None, clientRef())
+        self.assertIs(None, clientRef())
 
 
 
diff --git a/twisted/internet/test/test_address.py b/twisted/internet/test/test_address.py
index 7f3fedc..d375161 100644
--- a/twisted/internet/test/test_address.py
+++ b/twisted/internet/test/test_address.py
@@ -45,7 +45,7 @@ class AddressTestCaseMixin(object):
         ])
         stringValue = stringFunction(addr)
         m = re.match(pattern, stringValue)
-        self.assertNotEquals(
+        self.assertNotEqual(
             None, m,
             "%s does not match the standard __str__ pattern "
             "ClassName(arg1, arg2, etc)" % (stringValue,))
diff --git a/twisted/internet/test/test_baseprocess.py b/twisted/internet/test/test_baseprocess.py
index 750b660..ec4ce11 100644
--- a/twisted/internet/test/test_baseprocess.py
+++ b/twisted/internet/test/test_baseprocess.py
@@ -35,7 +35,7 @@ class BaseProcessTests(TestCase):
         process = BaseProcess(FakeProto())
         process._callProcessExited(reason)
         process.proto.reason.trap(RuntimeError)
-        self.assertIdentical(reason, process.proto.reason.value)
+        self.assertIs(reason, process.proto.reason.value)
 
 
     def test_callProcessExitedMissing(self):
@@ -64,7 +64,7 @@ class BaseProcessTests(TestCase):
             "Since Twisted 8.2, IProcessProtocol.processExited is required.  "
             "%s.%s must implement it." % (
                 FakeProto.__module__, FakeProto.__name__))
-        self.assertIdentical(category, DeprecationWarning)
+        self.assertIs(category, DeprecationWarning)
         # The stacklevel doesn't really make sense for this kind of
         # deprecation.  Requiring it to be 0 will at least avoid pointing to
         # any part of Twisted or a random part of the application's code, which
diff --git a/twisted/internet/test/test_core.py b/twisted/internet/test/test_core.py
index dfe458a..3733be9 100644
--- a/twisted/internet/test/test_core.py
+++ b/twisted/internet/test/test_core.py
@@ -268,7 +268,7 @@ class SystemEventTestsBuilder(ReactorBuilder):
         reactor.iterate(0) # Shouldn't block
         elapsed = time.time() - start
 
-        self.failUnless(elapsed < 2)
+        self.assertTrue(elapsed < 2)
         t.cancel()
 
 
diff --git a/twisted/internet/test/test_endpoints.py b/twisted/internet/test/test_endpoints.py
index 605afbd..99911ff 100644
--- a/twisted/internet/test/test_endpoints.py
+++ b/twisted/internet/test/test_endpoints.py
@@ -999,7 +999,7 @@ class ServerStringTests(unittest.TestCase):
         server = endpoints.serverFromString(
             reactor, "tcp:1234:backlog=12:interface=10.0.0.1")
         self.assertIsInstance(server, endpoints.TCP4ServerEndpoint)
-        self.assertIdentical(server._reactor, reactor)
+        self.assertIs(server._reactor, reactor)
         self.assertEqual(server._port, 1234)
         self.assertEqual(server._backlog, 12)
         self.assertEqual(server._interface, "10.0.0.1")
@@ -1018,7 +1018,7 @@ class ServerStringTests(unittest.TestCase):
             "certKey=%s:interface=10.0.0.1" % (escapedPEMPathName,
                                                escapedPEMPathName))
         self.assertIsInstance(server, endpoints.SSL4ServerEndpoint)
-        self.assertIdentical(server._reactor, reactor)
+        self.assertIs(server._reactor, reactor)
         self.assertEqual(server._port, 1234)
         self.assertEqual(server._backlog, 12)
         self.assertEqual(server._interface, "10.0.0.1")
@@ -1040,7 +1040,7 @@ class ServerStringTests(unittest.TestCase):
             reactor,
             "unix:/var/foo/bar:backlog=7:mode=0123:lockfile=1")
         self.assertIsInstance(endpoint, endpoints.UNIXServerEndpoint)
-        self.assertIdentical(endpoint._reactor, reactor)
+        self.assertIs(endpoint._reactor, reactor)
         self.assertEqual(endpoint._address, "/var/foo/bar")
         self.assertEqual(endpoint._backlog, 7)
         self.assertEqual(endpoint._mode, 0123)
@@ -1091,7 +1091,7 @@ class ServerStringTests(unittest.TestCase):
         fakeEndpoint = endpoints.serverFromString(
             notAReactor, "fake:hello:world:yes=no:up=down")
         from twisted.plugins.fakeendpoint import fake
-        self.assertIdentical(fakeEndpoint.parser, fake)
+        self.assertIs(fakeEndpoint.parser, fake)
         self.assertEqual(fakeEndpoint.args, (notAReactor, 'hello', 'world'))
         self.assertEqual(fakeEndpoint.kwargs, dict(yes='no', up='down'))
 
@@ -1134,7 +1134,7 @@ class ClientStringTests(unittest.TestCase):
             reactor,
             "tcp:host=example.com:port=1234:timeout=7:bindAddress=10.0.0.2")
         self.assertIsInstance(client, endpoints.TCP4ClientEndpoint)
-        self.assertIdentical(client._reactor, reactor)
+        self.assertIs(client._reactor, reactor)
         self.assertEqual(client._host, "example.com")
         self.assertEqual(client._port, 1234)
         self.assertEqual(client._timeout, 7)
@@ -1152,7 +1152,7 @@ class ClientStringTests(unittest.TestCase):
             reactor,
             "tcp:example.com:1234:timeout=7:bindAddress=10.0.0.2")
         self.assertIsInstance(client, endpoints.TCP4ClientEndpoint)
-        self.assertIdentical(client._reactor, reactor)
+        self.assertIs(client._reactor, reactor)
         self.assertEqual(client._host, "example.com")
         self.assertEqual(client._port, 1234)
         self.assertEqual(client._timeout, 7)
@@ -1212,7 +1212,7 @@ class ClientStringTests(unittest.TestCase):
             reactor,
             "unix:path=/var/foo/bar:lockfile=1:timeout=9")
         self.assertIsInstance(client, endpoints.UNIXClientEndpoint)
-        self.assertIdentical(client._reactor, reactor)
+        self.assertIs(client._reactor, reactor)
         self.assertEqual(client._path, "/var/foo/bar")
         self.assertEqual(client._timeout, 9)
         self.assertEqual(client._checkPID, True)
@@ -1238,7 +1238,7 @@ class ClientStringTests(unittest.TestCase):
         clientEndpoint = endpoints.clientFromString(
             notAReactor, "cfake:alpha:beta:cee=dee:num=1")
         from twisted.plugins.fakeendpoint import fakeClient
-        self.assertIdentical(clientEndpoint.parser, fakeClient)
+        self.assertIs(clientEndpoint.parser, fakeClient)
         self.assertEqual(clientEndpoint.args, ('alpha', 'beta'))
         self.assertEqual(clientEndpoint.kwargs, dict(cee='dee', num='1'))
 
@@ -1281,7 +1281,7 @@ class SSLClientStringTests(unittest.TestCase):
               escapedPEMPathName,
               escapedCAsPathName))
         self.assertIsInstance(client, endpoints.SSL4ClientEndpoint)
-        self.assertIdentical(client._reactor, reactor)
+        self.assertIs(client._reactor, reactor)
         self.assertEqual(client._host, "example.net")
         self.assertEqual(client._port, 4321)
         self.assertEqual(client._timeout, 3)
@@ -1319,7 +1319,7 @@ class SSLClientStringTests(unittest.TestCase):
               escapedPEMPathName,
               escapedCAsPathName))
         self.assertIsInstance(client, endpoints.SSL4ClientEndpoint)
-        self.assertIdentical(client._reactor, reactor)
+        self.assertIs(client._reactor, reactor)
         self.assertEqual(client._host, "example.net")
         self.assertEqual(client._port, 4321)
         self.assertEqual(client._timeout, 3)
@@ -1530,7 +1530,7 @@ class SystemdEndpointPluginTests(unittest.TestCase):
 
         server = parser.parseStreamServer(
             reactor, domain=addressFamilyString, index=str(index))
-        self.assertIdentical(server.reactor, reactor)
+        self.assertIs(server.reactor, reactor)
         self.assertEqual(server.addressFamily, addressFamily)
         self.assertEqual(server.fileno, descriptors[index])
 
diff --git a/twisted/internet/test/test_glibbase.py b/twisted/internet/test/test_glibbase.py
index 0bf79d8..959914d 100644
--- a/twisted/internet/test/test_glibbase.py
+++ b/twisted/internet/test/test_glibbase.py
@@ -26,7 +26,7 @@ class EnsureNotImportedTests(TestCase):
         self.patch(sys, "modules", modules)
         ensureNotImported(["m1", "m2"], "A message.",
                           preventImports=["m1", "m2", "m3"])
-        self.assertEquals(modules, {"m1": None, "m2": None, "m3": None})
+        self.assertEqual(modules, {"m1": None, "m2": None, "m3": None})
 
 
     def test_ensureWhenNotImportedDontPrevent(self):
@@ -37,7 +37,7 @@ class EnsureNotImportedTests(TestCase):
         modules = {}
         self.patch(sys, "modules", modules)
         ensureNotImported(["m1", "m2"], "A message.")
-        self.assertEquals(modules, {})
+        self.assertEqual(modules, {})
 
 
     def test_ensureWhenFailedToImport(self):
@@ -48,7 +48,7 @@ class EnsureNotImportedTests(TestCase):
         modules = {"m2": None}
         self.patch(sys, "modules", modules)
         ensureNotImported(["m1", "m2"], "A message.", preventImports=["m1", "m2"])
-        self.assertEquals(modules, {"m1": None, "m2": None})
+        self.assertEqual(modules, {"m1": None, "m2": None})
 
 
     def test_ensureFailsWhenImported(self):
@@ -62,5 +62,5 @@ class EnsureNotImportedTests(TestCase):
         e = self.assertRaises(ImportError, ensureNotImported,
                               ["m1", "m2"], "A message.",
                               preventImports=["m1", "m2"])
-        self.assertEquals(modules, {"m2": module})
-        self.assertEquals(e.args, ("A message.",))
+        self.assertEqual(modules, {"m2": module})
+        self.assertEqual(e.args, ("A message.",))
diff --git a/twisted/internet/test/test_gtkreactor.py b/twisted/internet/test/test_gtkreactor.py
index 78039c0..f3e74dc 100644
--- a/twisted/internet/test/test_gtkreactor.py
+++ b/twisted/internet/test/test_gtkreactor.py
@@ -48,7 +48,7 @@ class GtkReactorDeprecation(TestCase):
     def lookForDeprecationWarning(self, testmethod, attributeName):
         warningsShown = self.flushWarnings([testmethod])
         self.assertEqual(len(warningsShown), 1)
-        self.assertIdentical(warningsShown[0]['category'], DeprecationWarning)
+        self.assertIs(warningsShown[0]['category'], DeprecationWarning)
         self.assertEqual(
             warningsShown[0]['message'],
             "twisted.internet.gtkreactor." + attributeName + " "
diff --git a/twisted/internet/test/test_interfaces.py b/twisted/internet/test/test_interfaces.py
index f9f60da..36e97f3 100644
--- a/twisted/internet/test/test_interfaces.py
+++ b/twisted/internet/test/test_interfaces.py
@@ -19,7 +19,7 @@ class TestIFinishableConsumer(unittest.TestCase):
         """
         warningsShown = self.flushWarnings([testmethod])
         self.assertEqual(len(warningsShown), 1)
-        self.assertIdentical(warningsShown[0]['category'], DeprecationWarning)
+        self.assertIs(warningsShown[0]['category'], DeprecationWarning)
         self.assertEqual(
             warningsShown[0]['message'],
             "twisted.internet.interfaces.IFinishableConsumer "
diff --git a/twisted/internet/test/test_iocp.py b/twisted/internet/test/test_iocp.py
index 76d7646..ac93cdf 100644
--- a/twisted/internet/test/test_iocp.py
+++ b/twisted/internet/test/test_iocp.py
@@ -108,7 +108,7 @@ class IOCPReactorTestCase(unittest.TestCase):
         """
         ir = IOCPReactor()
         ir.wakeUp()
-        self.failIf(ir.doIteration(None))
+        self.assertFalse(ir.doIteration(None))
 
 
     def test_reactorInterfaces(self):
diff --git a/twisted/internet/test/test_posixprocess.py b/twisted/internet/test/test_posixprocess.py
index f7abd55..4808722 100644
--- a/twisted/internet/test/test_posixprocess.py
+++ b/twisted/internet/test/test_posixprocess.py
@@ -179,7 +179,7 @@ class FDDetectorTests(TestCase):
         self.detector._implementations = [
             failWithException, failWithWrongResults, correct]
 
-        self.assertIdentical(correct, self.detector._getImplementation())
+        self.assertIs(correct, self.detector._getImplementation())
 
 
     def test_selectLast(self):
@@ -197,7 +197,7 @@ class FDDetectorTests(TestCase):
         self.detector._implementations = [
             failWithWrongResults, failWithOtherWrongResults]
 
-        self.assertIdentical(
+        self.assertIs(
             failWithOtherWrongResults, self.detector._getImplementation())
 
 
diff --git a/twisted/internet/test/test_process.py b/twisted/internet/test/test_process.py
index b64d37f..b32dee2 100644
--- a/twisted/internet/test/test_process.py
+++ b/twisted/internet/test/test_process.py
@@ -280,11 +280,11 @@ class ProcessTestsBuilderBase(ReactorBuilder):
                 # say.  Anyway, this inconsistency between different platforms
                 # is extremely unfortunate and I would remove it if I
                 # could. -exarkun
-                self.assertIdentical(err.signal, None)
+                self.assertIs(err.signal, None)
                 self.assertEqual(err.exitCode, 1)
             else:
                 self.assertEqual(err.signal, sigNum)
-                self.assertIdentical(err.exitCode, None)
+                self.assertIs(err.exitCode, None)
 
         exited.addCallback(cbExited)
         exited.addErrback(err)
diff --git a/twisted/internet/test/test_protocol.py b/twisted/internet/test/test_protocol.py
index 18ef114..c3c96c0 100644
--- a/twisted/internet/test/test_protocol.py
+++ b/twisted/internet/test/test_protocol.py
@@ -129,7 +129,7 @@ class ClientCreatorTests(TestCase):
             host, port, factory, contextFactory, timeout, bindAddress = reactor.sslClients.pop()
             self.assertEqual(host, 'example.com')
             self.assertEqual(port, 1234)
-            self.assertIdentical(contextFactory, expectedContextFactory)
+            self.assertIs(contextFactory, expectedContextFactory)
             self.assertEqual(timeout, 4321)
             self.assertEqual(bindAddress, ('4.3.2.1', 5678))
             return factory
diff --git a/twisted/internet/test/test_tcp.py b/twisted/internet/test/test_tcp.py
index c528e5b..a51a8e6 100644
--- a/twisted/internet/test/test_tcp.py
+++ b/twisted/internet/test/test_tcp.py
@@ -1171,7 +1171,7 @@ class WriteSequenceTests(ReactorBuilder):
 
         def dataReceived(data):
             log.msg("data received: %r" % data)
-            self.assertEquals(data, "Some sequence splitted")
+            self.assertEqual(data, "Some sequence splitted")
             client.protocol.transport.loseConnection()
 
         def clientConnected(proto):
@@ -1213,7 +1213,7 @@ class WriteSequenceTests(ReactorBuilder):
             exc = self.assertRaises(
                 TypeError,
                 proto.transport.writeSequence, [u"Unicode is not kosher"])
-            self.assertEquals(str(exc), "Data must not be unicode")
+            self.assertEqual(str(exc), "Data must not be unicode")
 
         d = server.protocolConnectionMade.addCallback(serverConnected)
         d.addErrback(log.err)
@@ -1304,15 +1304,15 @@ class WriteSequenceTests(ReactorBuilder):
             # Register a streaming producer and verify that it gets paused after
             # it writes more than the local send buffer can hold.
             proto.transport.registerProducer(producer, True)
-            self.assertEquals(producer.actions, [])
+            self.assertEqual(producer.actions, [])
             self.setWriteBufferSize(proto.transport, 500)
             proto.transport.writeSequence(["x" * 50] * 20)
-            self.assertEquals(producer.actions, ["pause"])
+            self.assertEqual(producer.actions, ["pause"])
 
         self._producerTest(clientConnected)
         # After the send buffer gets a chance to empty out a bit, the producer
         # should be resumed.
-        self.assertEquals(producer.actions, ["pause", "resume"])
+        self.assertEqual(producer.actions, ["pause", "resume"])
 
 
     def test_nonStreamingProducer(self):
@@ -1345,12 +1345,12 @@ class WriteSequenceTests(ReactorBuilder):
             # Register a non-streaming producer and verify that it is resumed
             # immediately.
             proto.transport.registerProducer(producer, False)
-            self.assertEquals(producer.actions, ["resume"])
+            self.assertEqual(producer.actions, ["resume"])
 
         self._producerTest(clientConnected)
         # After the local send buffer empties out, the producer should be
         # resumed again.
-        self.assertEquals(producer.actions, ["resume", "resume"])
+        self.assertEqual(producer.actions, ["resume", "resume"])
 
 
 globals().update(TCP4ClientTestsBuilder.makeTestCaseClasses())
diff --git a/twisted/internet/test/test_threads.py b/twisted/internet/test/test_threads.py
index 36d855d..fe0a7b2 100644
--- a/twisted/internet/test/test_threads.py
+++ b/twisted/internet/test/test_threads.py
@@ -119,7 +119,7 @@ class ThreadTestsBuilder(ReactorBuilder):
                           reactor.callFromThread, threadCall)
         self.runReactor(reactor, 5)
 
-        self.assertEquals(result, [threading.currentThread()])
+        self.assertEqual(result, [threading.currentThread()])
 
 
     def test_stopThreadPool(self):
@@ -136,7 +136,7 @@ class ThreadTestsBuilder(ReactorBuilder):
         reactor.callWhenRunning(reactor.stop)
         self.runReactor(reactor)
         gc.collect()
-        self.assertIdentical(threadpool(), None)
+        self.assertIs(threadpool(), None)
 
 
     def test_stopThreadPoolWhenStartedAfterReactorRan(self):
@@ -159,7 +159,7 @@ class ThreadTestsBuilder(ReactorBuilder):
         reactor.callWhenRunning(acquireThreadPool)
         self.runReactor(reactor)
         gc.collect()
-        self.assertIdentical(threadPoolRefs[0](), None)
+        self.assertIs(threadPoolRefs[0](), None)
 
 
     def test_cleanUpThreadPoolEvenBeforeReactorIsRun(self):
@@ -177,7 +177,7 @@ class ThreadTestsBuilder(ReactorBuilder):
         threadPoolRef = ref(reactor.getThreadPool())
         reactor.fireSystemEvent("shutdown")
         gc.collect()
-        self.assertIdentical(threadPoolRef(), None)
+        self.assertIs(threadPoolRef(), None)
 
 
     def test_isInIOThread(self):
diff --git a/twisted/internet/test/test_win32events.py b/twisted/internet/test/test_win32events.py
index b8ba59b..a366f2f 100644
--- a/twisted/internet/test/test_win32events.py
+++ b/twisted/internet/test/test_win32events.py
@@ -178,6 +178,6 @@ class Win32EventsTestsBuilder(ReactorBuilder):
         reactor.addEvent(event, listener, 'occurred')
         reactor.callWhenRunning(reactor.stop)
         self.runReactor(reactor)
-        self.assertIdentical(None, listener.connLostThreadID)
+        self.assertIs(None, listener.connLostThreadID)
 
 globals().update(Win32EventsTestsBuilder.makeTestCaseClasses())
diff --git a/twisted/lore/test/test_lore.py b/twisted/lore/test/test_lore.py
index 3f399d9..ba015f0 100644
--- a/twisted/lore/test/test_lore.py
+++ b/twisted/lore/test/test_lore.py
@@ -327,10 +327,10 @@ class TestFactory(unittest.TestCase, _XMLAssertionMixin):
         dirname = os.path.join("tmp", 'nonexistentdir')
         if os.path.exists(dirname):
             os.rmdir(dirname)
-        self.failIf(os.path.exists(dirname), "Hey: someone already created the dir")
+        self.assertFalse(os.path.exists(dirname), "Hey: someone already created the dir")
         filename = os.path.join(dirname, 'newfile')
         tree.makeSureDirectoryExists(filename)
-        self.failUnless(os.path.exists(dirname), 'should have created dir')
+        self.assertTrue(os.path.exists(dirname), 'should have created dir')
         os.rmdir(dirname)
 
 
@@ -589,7 +589,7 @@ programming language: <a href="lore_index_test.html#index01">link</a><br />
                                                             "index-link"))
 
         # if our testing template has no index-link nodes, complain about it
-        self.assertNotEquals(
+        self.assertNotEqual(
             [],
             domhelpers.findElementsWithAttribute(templ,
                                                  "class",
@@ -609,7 +609,7 @@ programming language: <a href="lore_index_test.html#index01">link</a><br />
         self.assertTrue(len(indexLinks) >= numLinks)
 
         templ = dom.parse(open(d['template']))
-        self.assertNotEquals(
+        self.assertNotEqual(
             [],
             domhelpers.findElementsWithAttribute(templ,
                                                  "class",
@@ -943,14 +943,14 @@ programming language: <a href="lore_index_test.html#index01">link</a><br />
         parent.appendChild(result)
         parent.appendChild(target)
 
-        self.assertIdentical(
+        self.assertIs(
             tree.findNodeJustBefore(target, [parent, result]),
             result)
 
         # Also, support other configurations.  This is a really not nice API.
         newTarget = dom.Element('baz')
         target.appendChild(newTarget)
-        self.assertIdentical(
+        self.assertIs(
             tree.findNodeJustBefore(newTarget, [parent, result]),
             result)
 
@@ -1195,4 +1195,4 @@ class ScriptTests(unittest.TestCase):
         specified input plugin.
         """
         processor = lore.getProcessor("lore", "html", options)
-        self.assertNotIdentical(processor, None)
+        self.assertIsNot(processor, None)
diff --git a/twisted/mail/test/test_imap.py b/twisted/mail/test/test_imap.py
index 55c47e9..09fa65c 100644
--- a/twisted/mail/test/test_imap.py
+++ b/twisted/mail/test/test_imap.py
@@ -173,7 +173,7 @@ class MessageProducerTestCase(unittest.TestCase):
         d = p.beginProducing(c)
 
         def cbProduced(result):
-            self.assertIdentical(result, p)
+            self.assertIs(result, p)
             self.assertEqual(
                 ''.join(c.buffer),
 
@@ -209,7 +209,7 @@ class MessageProducerTestCase(unittest.TestCase):
         d = p.beginProducing(c)
 
         def cbProduced(result):
-            self.failUnlessIdentical(result, p)
+            self.assertIs(result, p)
 
             self.assertEqual(
                 ''.join(c.buffer),
@@ -257,7 +257,7 @@ class MessageProducerTestCase(unittest.TestCase):
         d = p.beginProducing(c)
 
         def cbProduced(result):
-            self.failUnlessIdentical(result, p)
+            self.assertIs(result, p)
 
             self.assertEqual(
                 ''.join(c.buffer),
@@ -297,7 +297,7 @@ class IMAP4HelperTestCase(unittest.TestCase):
         d = p.beginProducing(c)
 
         def cbProduced(result):
-            self.failUnlessIdentical(result, p)
+            self.assertIs(result, p)
             self.assertEqual(
                 ('{%d}\r\n' % len(b))+ b,
                 ''.join(c.buffer))
@@ -321,9 +321,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         for (wildcard, fail, succeed) in cases:
             wildcard = imap4.wildcardToRegexp(wildcard, '/')
             for x in fail:
-                self.failIf(wildcard.match(x))
+                self.assertFalse(wildcard.match(x))
             for x in succeed:
-                self.failUnless(wildcard.match(x))
+                self.assertTrue(wildcard.match(x))
 
 
     def test_wildcardNoDelim(self):
@@ -343,9 +343,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         for (wildcard, fail, succeed) in cases:
             wildcard = imap4.wildcardToRegexp(wildcard, None)
             for x in fail:
-                self.failIf(wildcard.match(x), x)
+                self.assertFalse(wildcard.match(x), x)
             for x in succeed:
-                self.failUnless(wildcard.match(x), x)
+                self.assertTrue(wildcard.match(x), x)
 
 
     def test_headerFormatter(self):
@@ -592,7 +592,7 @@ class IMAP4HelperTestCase(unittest.TestCase):
             p = imap4._FetchParser()
             p.parseString(inp)
             self.assertEqual(len(p.result), 1)
-            self.failUnless(isinstance(p.result[0], getattr(p, outp)))
+            self.assertTrue(isinstance(p.result[0], getattr(p, outp)))
 
 
     def test_fetchParserMacros(self):
@@ -618,7 +618,7 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, False)
         self.assertEqual(p.result[0].header, None)
         self.assertEqual(str(p.result[0]), 'BODY')
@@ -626,23 +626,23 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
         self.assertEqual(str(p.result[0]), 'BODY')
 
         p = P()
         p.parseString('BODY[]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].empty, True)
         self.assertEqual(str(p.result[0]), 'BODY[]')
 
         p = P()
         p.parseString('BODY[HEADER]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, False)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, True)
         self.assertEqual(p.result[0].header.fields, ())
         self.assertEqual(p.result[0].empty, False)
@@ -651,9 +651,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK[HEADER]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, True)
         self.assertEqual(p.result[0].header.fields, ())
         self.assertEqual(p.result[0].empty, False)
@@ -662,9 +662,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY[HEADER.FIELDS (Subject Cc Message-Id)]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, False)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, False)
         self.assertEqual(p.result[0].header.fields, ['SUBJECT', 'CC', 'MESSAGE-ID'])
         self.assertEqual(p.result[0].empty, False)
@@ -673,9 +673,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK[HEADER.FIELDS (Subject Cc Message-Id)]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, False)
         self.assertEqual(p.result[0].header.fields, ['SUBJECT', 'CC', 'MESSAGE-ID'])
         self.assertEqual(p.result[0].empty, False)
@@ -684,9 +684,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK[HEADER.FIELDS.NOT (Subject Cc Message-Id)]')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].header.negate, True)
         self.assertEqual(p.result[0].header.fields, ['SUBJECT', 'CC', 'MESSAGE-ID'])
         self.assertEqual(p.result[0].empty, False)
@@ -695,9 +695,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY[1.MIME]<10.50>')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, False)
-        self.failUnless(isinstance(p.result[0].mime, p.MIME))
+        self.assertTrue(isinstance(p.result[0].mime, p.MIME))
         self.assertEqual(p.result[0].part, (0,))
         self.assertEqual(p.result[0].partialBegin, 10)
         self.assertEqual(p.result[0].partialLength, 50)
@@ -707,9 +707,9 @@ class IMAP4HelperTestCase(unittest.TestCase):
         p = P()
         p.parseString('BODY.PEEK[1.3.9.11.HEADER.FIELDS.NOT (Message-Id Date)]<103.69>')
         self.assertEqual(len(p.result), 1)
-        self.failUnless(isinstance(p.result[0], p.Body))
+        self.assertTrue(isinstance(p.result[0], p.Body))
         self.assertEqual(p.result[0].peek, True)
-        self.failUnless(isinstance(p.result[0].header, p.Header))
+        self.assertTrue(isinstance(p.result[0].header, p.Header))
         self.assertEqual(p.result[0].part, (0, 2, 8, 10))
         self.assertEqual(p.result[0].header.fields, ['MESSAGE-ID', 'DATE'])
         self.assertEqual(p.result[0].partialBegin, 103)
@@ -1296,7 +1296,7 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
         d1.addCallbacks(self._cbStopClient, self._ebGeneral)
         d2 = self.loopback()
         d = defer.gatherResults([d1, d2])
-        d.addCallback(lambda _: self.failUnless(isinstance(self.stashed,
+        d.addCallback(lambda _: self.assertTrue(isinstance(self.stashed,
                                                            failure.Failure)))
         return d
 
@@ -1377,7 +1377,7 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
         d2 = self.loopback()
         d = defer.gatherResults([d1, d2])
         d.addCallback(lambda _:
-                      self.failUnless(isinstance(self.stashed, failure.Failure)))
+                      self.assertTrue(isinstance(self.stashed, failure.Failure)))
         return d
 
     def testHierarchicalRename(self):
@@ -1626,7 +1626,7 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
     def _cbTestClose(self, ignored, m):
         self.assertEqual(len(m.messages), 1)
         self.assertEqual(m.messages[0], ('Message 2', ('AnotherFlag',), None, 1))
-        self.failUnless(m.closed)
+        self.assertTrue(m.closed)
 
     def testExpunge(self):
         m = SimpleMailbox()
@@ -1643,7 +1643,7 @@ class IMAP4ServerTestCase(IMAP4HelperMixin, unittest.TestCase):
         def expunge():
             return self.client.expunge()
         def expunged(results):
-            self.failIf(self.server.mbox is None)
+            self.assertFalse(self.server.mbox is None)
             self.results = results
 
         self.results = None
@@ -3991,7 +3991,7 @@ class FetchSearchStoreTestCase(unittest.TestCase, IMAP4HelperMixin):
 
         def check(ignored):
             # Ensure no short-circuiting wierdness is going on
-            self.failIf(self.result is self.expected)
+            self.assertFalse(self.result is self.expected)
 
             self.assertEqual(self.result, self.expected)
             self.assertEqual(self.uid, self.server_received_uid)
@@ -4045,7 +4045,7 @@ class FetchSearchStoreTestCase(unittest.TestCase, IMAP4HelperMixin):
 
         def check(ignored):
             # Ensure no short-circuiting wierdness is going on
-            self.failIf(self.result is self.expected)
+            self.assertFalse(self.result is self.expected)
 
             self.parts and self.parts.sort()
             self.server_received_parts and self.server_received_parts.sort()
@@ -4119,7 +4119,7 @@ class CopyWorkerTestCase(unittest.TestCase):
                 self.assertEqual(a[2], "internaldate")
 
             for (status, result) in results:
-                self.failUnless(status)
+                self.assertTrue(status)
                 self.assertEqual(result, None)
 
         return d.addCallback(cbCopy)
@@ -4148,7 +4148,7 @@ class CopyWorkerTestCase(unittest.TestCase):
             self.assertEqual(seen, exp)
 
             for (status, result) in results:
-                self.failUnless(status)
+                self.assertTrue(status)
                 self.assertEqual(result, None)
 
         return d.addCallback(cbCopy)
@@ -4166,7 +4166,7 @@ class CopyWorkerTestCase(unittest.TestCase):
         def cbCopy(results):
             self.assertEqual(results, zip([1] * 10, range(1, 11)))
             for (orig, new) in zip(msgs, m.msgs):
-                self.assertIdentical(orig, new)
+                self.assertIs(orig, new)
 
         return d.addCallback(cbCopy)
 
@@ -4244,7 +4244,7 @@ class TLSTestCase(IMAP4HelperMixin, unittest.TestCase):
         self.connected.addErrback(self._ebGeneral)
 
         d = self.loopback()
-        d.addCallback(lambda x : self.failUnless(success))
+        d.addCallback(lambda x : self.assertTrue(success))
         return defer.gatherResults([d, self.connected])
 
 
@@ -4260,8 +4260,8 @@ class TLSTestCase(IMAP4HelperMixin, unittest.TestCase):
         self.connected.addErrback(self._ebGeneral)
 
         def check(ignored):
-            self.failUnless(failure)
-            self.assertIdentical(failure[0], imap4.IMAP4Exception)
+            self.assertTrue(failure)
+            self.assertIs(failure[0], imap4.IMAP4Exception)
         return self.loopback().addCallback(check)
 
 
@@ -4328,7 +4328,7 @@ class Timeout(IMAP4HelperMixin, unittest.TestCase):
         def fetch():
             return self.client.fetchUID('1:*')
         def stillConnected():
-            self.assertNotEquals(self.server.state, 'timeout')
+            self.assertNotEqual(self.server.state, 'timeout')
 
         def cbAdvance(ignored):
             for i in xrange(4):
@@ -4365,11 +4365,11 @@ class Timeout(IMAP4HelperMixin, unittest.TestCase):
 
         # 2/3rds of the idle timeout elapses...
         c.pump([0.0] + [self.server.timeOut / 3.0] * 2)
-        self.failIf(lost, lost)
+        self.assertFalse(lost, lost)
 
         # Now some more
         c.pump([0.0, self.server.timeOut / 2.0])
-        self.failUnless(lost)
+        self.assertTrue(lost)
 
 
 
diff --git a/twisted/mail/test/test_mail.py b/twisted/mail/test/test_mail.py
index a197426..b9d239e 100644
--- a/twisted/mail/test/test_mail.py
+++ b/twisted/mail/test/test_mail.py
@@ -79,8 +79,8 @@ class DomainWithDefaultsTestCase(unittest.TestCase):
         for x in range(10):
             self.assertEqual(d[x], x + 10)
             self.assertEqual(d.get(x), x + 10)
-            self.failUnless(x in d)
-            self.failUnless(d.has_key(x))
+            self.assertTrue(x in d)
+            self.assertTrue(d.has_key(x))
 
         del d[2], d[4], d[6]
 
@@ -188,8 +188,8 @@ class FileMessageTestCase(unittest.TestCase):
 
     def _cbFinalName(self, result):
         self.assertEqual(result, self.final)
-        self.failUnless(self.f.closed)
-        self.failIf(os.path.exists(self.name))
+        self.assertTrue(self.f.closed)
+        self.assertFalse(os.path.exists(self.name))
 
     def testContents(self):
         contents = "first line\nsecond line\nthird line\n"
@@ -203,8 +203,8 @@ class FileMessageTestCase(unittest.TestCase):
         for line in contents.splitlines():
             self.fp.lineReceived(line)
         self.fp.connectionLost()
-        self.failIf(os.path.exists(self.name))
-        self.failIf(os.path.exists(self.final))
+        self.assertFalse(os.path.exists(self.name))
+        self.assertFalse(os.path.exists(self.final))
 
 class MailServiceTestCase(unittest.TestCase):
     def setUp(self):
@@ -212,16 +212,16 @@ class MailServiceTestCase(unittest.TestCase):
 
     def testFactories(self):
         f = self.service.getPOP3Factory()
-        self.failUnless(isinstance(f, protocol.ServerFactory))
-        self.failUnless(f.buildProtocol(('127.0.0.1', 12345)), pop3.POP3)
+        self.assertTrue(isinstance(f, protocol.ServerFactory))
+        self.assertTrue(f.buildProtocol(('127.0.0.1', 12345)), pop3.POP3)
 
         f = self.service.getSMTPFactory()
-        self.failUnless(isinstance(f, protocol.ServerFactory))
-        self.failUnless(f.buildProtocol(('127.0.0.1', 12345)), smtp.SMTP)
+        self.assertTrue(isinstance(f, protocol.ServerFactory))
+        self.assertTrue(f.buildProtocol(('127.0.0.1', 12345)), smtp.SMTP)
 
         f = self.service.getESMTPFactory()
-        self.failUnless(isinstance(f, protocol.ServerFactory))
-        self.failUnless(f.buildProtocol(('127.0.0.1', 12345)), smtp.ESMTP)
+        self.assertTrue(isinstance(f, protocol.ServerFactory))
+        self.assertTrue(f.buildProtocol(('127.0.0.1', 12345)), smtp.ESMTP)
 
     def testPortals(self):
         o1 = object()
@@ -229,8 +229,8 @@ class MailServiceTestCase(unittest.TestCase):
         self.service.portals['domain'] = o1
         self.service.portals[''] = o2
 
-        self.failUnless(self.service.lookupPortal('domain') is o1)
-        self.failUnless(self.service.defaultPortal() is o2)
+        self.assertTrue(self.service.lookupPortal('domain') is o1)
+        self.assertTrue(self.service.defaultPortal() is o2)
 
 
 class StringListMailboxTests(unittest.TestCase):
@@ -491,20 +491,20 @@ class MaildirTestCase(unittest.TestCase):
         d = self.d
         trash = os.path.join(d, '.Trash')
 
-        self.failUnless(os.path.exists(d) and os.path.isdir(d))
-        self.failUnless(os.path.exists(os.path.join(d, 'new')))
-        self.failUnless(os.path.exists(os.path.join(d, 'cur')))
-        self.failUnless(os.path.exists(os.path.join(d, 'tmp')))
-        self.failUnless(os.path.isdir(os.path.join(d, 'new')))
-        self.failUnless(os.path.isdir(os.path.join(d, 'cur')))
-        self.failUnless(os.path.isdir(os.path.join(d, 'tmp')))
+        self.assertTrue(os.path.exists(d) and os.path.isdir(d))
+        self.assertTrue(os.path.exists(os.path.join(d, 'new')))
+        self.assertTrue(os.path.exists(os.path.join(d, 'cur')))
+        self.assertTrue(os.path.exists(os.path.join(d, 'tmp')))
+        self.assertTrue(os.path.isdir(os.path.join(d, 'new')))
+        self.assertTrue(os.path.isdir(os.path.join(d, 'cur')))
+        self.assertTrue(os.path.isdir(os.path.join(d, 'tmp')))
 
-        self.failUnless(os.path.exists(os.path.join(trash, 'new')))
-        self.failUnless(os.path.exists(os.path.join(trash, 'cur')))
-        self.failUnless(os.path.exists(os.path.join(trash, 'tmp')))
-        self.failUnless(os.path.isdir(os.path.join(trash, 'new')))
-        self.failUnless(os.path.isdir(os.path.join(trash, 'cur')))
-        self.failUnless(os.path.isdir(os.path.join(trash, 'tmp')))
+        self.assertTrue(os.path.exists(os.path.join(trash, 'new')))
+        self.assertTrue(os.path.exists(os.path.join(trash, 'cur')))
+        self.assertTrue(os.path.exists(os.path.join(trash, 'tmp')))
+        self.assertTrue(os.path.isdir(os.path.join(trash, 'new')))
+        self.assertTrue(os.path.isdir(os.path.join(trash, 'cur')))
+        self.assertTrue(os.path.isdir(os.path.join(trash, 'tmp')))
 
 
     def test_nameGenerator(self):
@@ -553,20 +553,20 @@ class MaildirTestCase(unittest.TestCase):
         d = {}
         for i in range(10):
             u = mb.getUidl(i)
-            self.failIf(u in d)
+            self.assertFalse(u in d)
             d[u] = None
 
         p, f = os.path.split(msgs[5])
 
         mb.deleteMessage(5)
         self.assertEqual(mb.listMessages(5), 0)
-        self.failUnless(os.path.exists(j(self.d, '.Trash', 'cur', f)))
-        self.failIf(os.path.exists(j(self.d, msgs[5])))
+        self.assertTrue(os.path.exists(j(self.d, '.Trash', 'cur', f)))
+        self.assertFalse(os.path.exists(j(self.d, msgs[5])))
 
         mb.undeleteMessages()
         self.assertEqual(mb.listMessages(5), 6)
-        self.failIf(os.path.exists(j(self.d, '.Trash', 'cur', f)))
-        self.failUnless(os.path.exists(j(self.d, msgs[5])))
+        self.assertFalse(os.path.exists(j(self.d, '.Trash', 'cur', f)))
+        self.assertTrue(os.path.exists(j(self.d, msgs[5])))
 
 class MaildirDirdbmDomainTestCase(unittest.TestCase):
     def setUp(self):
@@ -583,16 +583,16 @@ class MaildirDirdbmDomainTestCase(unittest.TestCase):
             self.D.addUser(u, p)
 
         for (u, p) in toAdd:
-            self.failUnless(u in self.D.dbm)
+            self.assertTrue(u in self.D.dbm)
             self.assertEqual(self.D.dbm[u], p)
-            self.failUnless(os.path.exists(os.path.join(self.P, u)))
+            self.assertTrue(os.path.exists(os.path.join(self.P, u)))
 
     def testCredentials(self):
         creds = self.D.getCredentialsCheckers()
 
         self.assertEqual(len(creds), 1)
-        self.failUnless(cred.checkers.ICredentialsChecker.providedBy(creds[0]))
-        self.failUnless(cred.credentials.IUsernamePassword in creds[0].credentialInterfaces)
+        self.assertTrue(cred.checkers.ICredentialsChecker.providedBy(creds[0]))
+        self.assertTrue(cred.credentials.IUsernamePassword in creds[0].credentialInterfaces)
 
     def testRequestAvatar(self):
         class ISomething(Interface):
@@ -606,8 +606,8 @@ class MaildirDirdbmDomainTestCase(unittest.TestCase):
 
         t = self.D.requestAvatar('user', None, pop3.IMailbox)
         self.assertEqual(len(t), 3)
-        self.failUnless(t[0] is pop3.IMailbox)
-        self.failUnless(pop3.IMailbox.providedBy(t[1]))
+        self.assertTrue(t[0] is pop3.IMailbox)
+        self.assertTrue(pop3.IMailbox.providedBy(t[1]))
 
         t[2]()
 
@@ -690,7 +690,7 @@ class ServiceDomainTestCase(unittest.TestCase):
         domain = StubAliasableDomain()
         self.S.aliases = aliases
         self.S.addDomain('example.com', domain)
-        self.assertIdentical(domain.aliasGroup, aliases)
+        self.assertIs(domain.aliasGroup, aliases)
 
 
     def testReceivedHeader(self):
@@ -702,7 +702,7 @@ class ServiceDomainTestCase(unittest.TestCase):
          fp = StringIO.StringIO(hdr)
          m = rfc822.Message(fp)
          self.assertEqual(len(m.items()), 1)
-         self.failUnless(m.has_key('Received'))
+         self.assertTrue(m.has_key('Received'))
 
     def testValidateTo(self):
         user = smtp.User('user@test.domain', 'helo', None, 'wherever@whatever')
@@ -711,7 +711,7 @@ class ServiceDomainTestCase(unittest.TestCase):
             )
 
     def _cbValidateTo(self, result):
-        self.failUnless(callable(result))
+        self.assertTrue(callable(result))
 
     def testValidateToBadUsername(self):
         user = smtp.User('resu@test.domain', 'helo', None, 'wherever@whatever')
@@ -728,15 +728,15 @@ class ServiceDomainTestCase(unittest.TestCase):
     def testValidateFrom(self):
         helo = ('hostname', '127.0.0.1')
         origin = smtp.Address('<user@hostname>')
-        self.failUnless(self.D.validateFrom(helo, origin) is origin)
+        self.assertTrue(self.D.validateFrom(helo, origin) is origin)
 
         helo = ('hostname', '1.2.3.4')
         origin = smtp.Address('<user@hostname>')
-        self.failUnless(self.D.validateFrom(helo, origin) is origin)
+        self.assertTrue(self.D.validateFrom(helo, origin) is origin)
 
         helo = ('hostname', '1.2.3.4')
         origin = smtp.Address('<>')
-        self.failUnless(self.D.validateFrom(helo, origin) is origin)
+        self.assertTrue(self.D.validateFrom(helo, origin) is origin)
 
         self.assertRaises(
             smtp.SMTPBadSender,
@@ -771,7 +771,7 @@ class VirtualPOP3TestCase(unittest.TestCase):
     def _cbAuthenticateAPOP(self, result):
         self.assertEqual(len(result), 3)
         self.assertEqual(result[0], pop3.IMailbox)
-        self.failUnless(pop3.IMailbox.providedBy(result[1]))
+        self.assertTrue(pop3.IMailbox.providedBy(result[1]))
         result[2]()
 
     def testAuthenticateIncorrectUserAPOP(self):
@@ -794,7 +794,7 @@ class VirtualPOP3TestCase(unittest.TestCase):
     def _cbAuthenticatePASS(self, result):
         self.assertEqual(len(result), 3)
         self.assertEqual(result[0], pop3.IMailbox)
-        self.failUnless(pop3.IMailbox.providedBy(result[1]))
+        self.assertTrue(pop3.IMailbox.providedBy(result[1]))
         result[2]()
 
     def testAuthenticateBadUserPASS(self):
@@ -834,7 +834,7 @@ class RelayTestCase(unittest.TestCase):
             user.protocol.transport = empty()
             user.protocol.transport.getPeer = lambda: peer
 
-            self.failUnless(callable(domain.exists(user)))
+            self.assertTrue(callable(domain.exists(user)))
 
         for peer in dontRelay:
             user = empty()
@@ -953,7 +953,7 @@ class DirectoryQueueTestCase(unittest.TestCase):
         shutil.rmtree(self.tmpdir)
 
     def testWaiting(self):
-        self.failUnless(self.queue.hasWaiting())
+        self.assertTrue(self.queue.hasWaiting())
         self.assertEqual(len(self.queue.getWaiting()), 25)
 
         waiting = self.queue.getWaiting()
@@ -971,7 +971,7 @@ class DirectoryQueueTestCase(unittest.TestCase):
                 25 - len(self.queue.getWaiting())
             )
 
-        self.failIf(self.queue.hasWaiting())
+        self.assertFalse(self.queue.hasWaiting())
 
         relayed = self.queue.getRelayed()
         self.queue.setWaiting(relayed[0])
@@ -986,8 +986,8 @@ class DirectoryQueueTestCase(unittest.TestCase):
         self.assertEqual(len(self.queue.getWaiting()), 24)
         self.assertEqual(len(self.queue.getRelayed()), 0)
 
-        self.failIf(msg in self.queue.getWaiting())
-        self.failIf(msg in self.queue.getRelayed())
+        self.assertFalse(msg in self.queue.getWaiting())
+        self.assertFalse(msg in self.queue.getRelayed())
 
     def testEnvelope(self):
         envelopes = []
@@ -1068,7 +1068,7 @@ class MXTestCase(unittest.TestCase):
         """
         L{MXCalculator}'s default clock is C{twisted.internet.reactor}.
         """
-        self.assertIdentical(
+        self.assertIs(
             mail.relaymanager.MXCalculator(self.resolver).clock,
             reactor)
 
@@ -1423,7 +1423,7 @@ class MXTestCase(unittest.TestCase):
             )
 
     def _cbManyRecordsSuccessfulLookup(self, mx):
-        self.failUnless(str(mx.name).split('.', 1)[0] in ('mx1', 'mx2', 'mx3'))
+        self.assertTrue(str(mx.name).split('.', 1)[0] in ('mx1', 'mx2', 'mx3'))
         self.mx.markBad(str(mx.name))
         return self.mx.getMX('test.domain'
             ).addCallback(self._cbManyRecordsDifferentResult, mx
@@ -1504,7 +1504,7 @@ class LiveFireExercise(unittest.TestCase):
         def finished(ign):
             mbox = domain.requestAvatar('user', None, pop3.IMailbox)[1]
             msg = mbox.getMessage(0).read()
-            self.failIfEqual(msg.find('This is the message'), -1)
+            self.assertNotEqual(msg.find('This is the message'), -1)
 
             return self.smtpServer.stopListening()
         done.addCallback(finished)
@@ -1574,7 +1574,7 @@ class LiveFireExercise(unittest.TestCase):
             def delivered(ign):
                 mbox = domain.requestAvatar('user', None, pop3.IMailbox)[1]
                 msg = mbox.getMessage(0).read()
-                self.failIfEqual(msg.find('This is the message'), -1)
+                self.assertNotEqual(msg.find('This is the message'), -1)
 
                 self.insServer.stopListening()
                 self.destServer.stopListening()
@@ -1650,20 +1650,20 @@ class AliasTestCase(unittest.TestCase):
         group = result['testuser']
         s = str(group)
         for a in ('address1', 'address2', 'address3', 'continuation@address', '/bin/process/this'):
-            self.failIfEqual(s.find(a), -1)
+            self.assertNotEqual(s.find(a), -1)
         self.assertEqual(len(group), 5)
 
         group = result['usertwo']
         s = str(group)
         for a in ('thisaddress', 'thataddress', 'lastaddress'):
-            self.failIfEqual(s.find(a), -1)
+            self.assertNotEqual(s.find(a), -1)
         self.assertEqual(len(group), 3)
 
         group = result['lastuser']
         s = str(group)
         self.assertEqual(s.find('/includable'), -1)
         for a in ('/filename', 'program', 'address'):
-            self.failIfEqual(s.find(a), -1, '%s not found' % a)
+            self.assertNotEqual(s.find(a), -1, '%s not found' % a)
         self.assertEqual(len(group), 3)
 
     def testMultiWrapper(self):
@@ -1676,8 +1676,8 @@ class AliasTestCase(unittest.TestCase):
 
     def _cbMultiWrapper(self, ignored, msgs):
         for m in msgs:
-            self.failUnless(m.eom)
-            self.failIf(m.lost)
+            self.assertTrue(m.eom)
+            self.assertFalse(m.lost)
             self.assertEqual(self.lines, m.lines)
 
     def testFileAlias(self):
diff --git a/twisted/mail/test/test_options.py b/twisted/mail/test/test_options.py
index a74c67c..19c459c 100644
--- a/twisted/mail/test/test_options.py
+++ b/twisted/mail/test/test_options.py
@@ -135,11 +135,11 @@ class OptionsTestCase(TestCase):
         options = Options()
         options.parseOptions(['--no-pop3'])
         self.assertEqual(options._getEndpoints(None, 'pop3'), [])
-        self.assertNotEquals(options._getEndpoints(None, 'smtp'), [])
+        self.assertNotEqual(options._getEndpoints(None, 'smtp'), [])
 
         options = Options()
         options.parseOptions(['--no-smtp'])
-        self.assertNotEquals(options._getEndpoints(None, 'pop3'), [])
+        self.assertNotEqual(options._getEndpoints(None, 'pop3'), [])
         self.assertEqual(options._getEndpoints(None, 'smtp'), [])
 
 
diff --git a/twisted/mail/test/test_pop3.py b/twisted/mail/test/test_pop3.py
index 65bb23f..e884ce3 100644
--- a/twisted/mail/test/test_pop3.py
+++ b/twisted/mail/test/test_pop3.py
@@ -381,7 +381,7 @@ class AnotherPOP3TestCase(unittest.TestCase):
         return d.addCallback(self._cbTestAuthListing, client)
 
     def _cbTestAuthListing(self, ignored, client):
-        self.failUnless(client.response[1].startswith('+OK'))
+        self.assertTrue(client.response[1].startswith('+OK'))
         self.assertEqual(client.response[2:6],
                           ["AUTH1", "SECONDAUTH", "AUTHLAST", "."])
 
@@ -553,7 +553,7 @@ class SASLTestCase(unittest.TestCase):
         p.connectionMade()
 
         p.lineReceived("CAPA")
-        self.failUnless(s.getvalue().find("SASL CRAM-MD5") >= 0)
+        self.assertTrue(s.getvalue().find("SASL CRAM-MD5") >= 0)
 
         p.lineReceived("AUTH CRAM-MD5")
         chal = s.getvalue().splitlines()[-1][2:]
@@ -561,8 +561,8 @@ class SASLTestCase(unittest.TestCase):
         response = hmac.HMAC('testpassword', chal).hexdigest()
 
         p.lineReceived(base64.encodestring('testuser ' + response).rstrip('\n'))
-        self.failUnless(p.mbox)
-        self.failUnless(s.getvalue().splitlines()[-1].find("+OK") >= 0)
+        self.assertTrue(p.mbox)
+        self.assertTrue(s.getvalue().splitlines()[-1].find("+OK") >= 0)
         p.connectionLost(failure.Failure(Exception("Test harness disconnect")))
 
 
@@ -1066,4 +1066,4 @@ class POP3MiscTestCase(unittest.TestCase):
         """
         mod = twisted.mail.pop3
         for attr in mod.__all__:
-            self.failUnless(hasattr(mod, attr))
+            self.assertTrue(hasattr(mod, attr))
diff --git a/twisted/mail/test/test_pop3client.py b/twisted/mail/test/test_pop3client.py
index 502aae8..6526a65 100644
--- a/twisted/mail/test/test_pop3client.py
+++ b/twisted/mail/test/test_pop3client.py
@@ -146,7 +146,7 @@ class POP3ClientLoginTestCase(unittest.TestCase):
         p, t = setUp(greet=False)
         p.dataReceived("+OK Howdy\r\n")
         d = p.login("username", "password")
-        self.failIf(t.value())
+        self.assertFalse(t.value())
         return self.assertFailure(
             d, InsecureAuthenticationDisallowed)
 
@@ -271,7 +271,7 @@ class POP3ClientMessageTestCase(unittest.TestCase):
         return d.addCallback(self._cbTestRetrieveWithConsumer, f, c)
 
     def _cbTestRetrieveWithConsumer(self, result, f, c):
-        self.assertIdentical(result, f)
+        self.assertIs(result, f)
         self.assertEqual(c.data, ["La la la here is message text",
                                    ".Further message text"])
 
@@ -301,7 +301,7 @@ class POP3ClientMessageTestCase(unittest.TestCase):
         return d.addCallback(self._cbTestPartialRetrieveWithConsumer, f, c)
 
     def _cbTestPartialRetrieveWithConsumer(self, result, f, c):
-        self.assertIdentical(result, f)
+        self.assertIs(result, f)
         self.assertEqual(c.data, ["Line the first!  Woop",
                                    "Line the last!  Bye"])
 
diff --git a/twisted/mail/test/test_smtp.py b/twisted/mail/test/test_smtp.py
index 058bb8e..228aec8 100644
--- a/twisted/mail/test/test_smtp.py
+++ b/twisted/mail/test/test_smtp.py
@@ -330,7 +330,7 @@ class SMTPClientTestCase(unittest.TestCase, LoopbackMixin):
             )
 
         # Sanity check - a pull producer should be registered now.
-        self.assertNotIdentical(transport.producer, None)
+        self.assertIsNot(transport.producer, None)
         self.assertFalse(transport.streaming)
 
         # Now stop the producer prematurely, meaning the message was not sent.
@@ -657,7 +657,7 @@ class SMTPHelperTestCase(unittest.TestCase):
         d = {}
         for i in range(1000):
             m = smtp.messageid('testcase')
-            self.failIf(m in d)
+            self.assertFalse(m in d)
             d[m] = None
 
     def testQuoteAddr(self):
@@ -764,7 +764,7 @@ class EmptyLineTestCase(unittest.TestCase):
 
         out = transport.value().splitlines()
         self.assertEqual(len(out), 2)
-        self.failUnless(out[0].startswith('220'))
+        self.assertTrue(out[0].startswith('220'))
         self.assertEqual(out[1], "500 Error: bad syntax")
 
 
@@ -868,7 +868,7 @@ class TimeoutTestCase(unittest.TestCase, LoopbackMixin):
         # resumeProducing is called on the producer, the timeout should be
         # extended.  First, a sanity check.  This test is only written to
         # handle pull producers.
-        self.assertNotIdentical(transport.producer, None)
+        self.assertIsNot(transport.producer, None)
         self.assertFalse(transport.streaming)
 
         # Now, allow 2 seconds (1 less than the timeout of 3 seconds) to
@@ -1247,9 +1247,9 @@ class ESMTPAuthenticationTestCase(unittest.TestCase):
         """
         d, credentials, mind, interfaces = loginArgs.pop()
         self.assertEqual(loginArgs, [])
-        self.failUnless(twisted.cred.credentials.IUsernamePassword.providedBy(credentials))
+        self.assertTrue(twisted.cred.credentials.IUsernamePassword.providedBy(credentials))
         self.assertEqual(credentials.username, username)
-        self.failUnless(credentials.checkPassword(password))
+        self.assertTrue(credentials.checkPassword(password))
         self.assertIn(smtp.IMessageDeliveryFactory, interfaces)
         self.assertIn(smtp.IMessageDelivery, interfaces)
         d.callback((smtp.IMessageDeliveryFactory, None, lambda: None))
diff --git a/twisted/manhole/test/test_explorer.py b/twisted/manhole/test/test_explorer.py
index a52d3c1..6fd79d0 100644
--- a/twisted/manhole/test/test_explorer.py
+++ b/twisted/manhole/test/test_explorer.py
@@ -67,7 +67,7 @@ class CRUFTWatchyThingieTestCase(unittest.TestCase):
         cwt.watchObject(foo, 'id', 'cback')
 
         # check new constructed instance method
-        self.assertIdentical(foo._watchEmitChanged.im_self, foo)
+        self.assertIs(foo._watchEmitChanged.im_self, foo)
 
 
 
diff --git a/twisted/names/test/test_client.py b/twisted/names/test/test_client.py
index d2ed09c..bb30390 100644
--- a/twisted/names/test/test_client.py
+++ b/twisted/names/test/test_client.py
@@ -96,7 +96,7 @@ class ResolverTests(unittest.TestCase):
             warnings, [("Resolver.protocol is deprecated; use "
                         "Resolver.queryUDP instead.",
                         PendingDeprecationWarning, 0)])
-        self.assertIdentical(protocol, resolver.protocol)
+        self.assertIs(protocol, resolver.protocol)
 
 
     def test_datagramQueryServerOrder(self):
@@ -119,16 +119,16 @@ class ResolverTests(unittest.TestCase):
         queryResult.addCallback(self.assertEqual, expectedResult)
 
         self.assertEqual(len(protocol.queries), 1)
-        self.assertIdentical(protocol.queries[0][0], servers[0])
+        self.assertIs(protocol.queries[0][0], servers[0])
         protocol.queries[0][-1].errback(DNSQueryTimeoutError(0))
         self.assertEqual(len(protocol.queries), 2)
-        self.assertIdentical(protocol.queries[1][0], servers[1])
+        self.assertIs(protocol.queries[1][0], servers[1])
         protocol.queries[1][-1].errback(DNSQueryTimeoutError(1))
         self.assertEqual(len(protocol.queries), 3)
-        self.assertIdentical(protocol.queries[2][0], dynServers[0])
+        self.assertIs(protocol.queries[2][0], dynServers[0])
         protocol.queries[2][-1].errback(DNSQueryTimeoutError(2))
         self.assertEqual(len(protocol.queries), 4)
-        self.assertIdentical(protocol.queries[3][0], dynServers[1])
+        self.assertIs(protocol.queries[3][0], dynServers[1])
         protocol.queries[3][-1].callback(expectedResult)
 
         return queryResult
@@ -253,8 +253,8 @@ class ResolverTests(unittest.TestCase):
         firstProto = resolver._connectedProtocol()
         secondProto = resolver._connectedProtocol()
 
-        self.assertNotIdentical(firstProto.transport, None)
-        self.assertNotIdentical(secondProto.transport, None)
+        self.assertIsNot(firstProto.transport, None)
+        self.assertIsNot(secondProto.transport, None)
         self.assertNotEqual(
             firstProto.transport.getHost().port,
             secondProto.transport.getHost().port)
diff --git a/twisted/names/test/test_common.py b/twisted/names/test/test_common.py
index b44e206..d505959 100644
--- a/twisted/names/test/test_common.py
+++ b/twisted/names/test/test_common.py
@@ -26,7 +26,7 @@ class ExceptionForCodeTests(TestCase):
         L{ResolverBase.exceptionForCode} converts L{EFORMAT} to
         L{DNSFormatError}.
         """
-        self.assertIdentical(self.exceptionForCode(EFORMAT), DNSFormatError)
+        self.assertIs(self.exceptionForCode(EFORMAT), DNSFormatError)
 
 
     def test_eserver(self):
@@ -34,14 +34,14 @@ class ExceptionForCodeTests(TestCase):
         L{ResolverBase.exceptionForCode} converts L{ESERVER} to
         L{DNSServerError}.
         """
-        self.assertIdentical(self.exceptionForCode(ESERVER), DNSServerError)
+        self.assertIs(self.exceptionForCode(ESERVER), DNSServerError)
 
 
     def test_ename(self):
         """
         L{ResolverBase.exceptionForCode} converts L{ENAME} to L{DNSNameError}.
         """
-        self.assertIdentical(self.exceptionForCode(ENAME), DNSNameError)
+        self.assertIs(self.exceptionForCode(ENAME), DNSNameError)
 
 
     def test_enotimp(self):
@@ -49,7 +49,7 @@ class ExceptionForCodeTests(TestCase):
         L{ResolverBase.exceptionForCode} converts L{ENOTIMP} to
         L{DNSNotImplementedError}.
         """
-        self.assertIdentical(
+        self.assertIs(
             self.exceptionForCode(ENOTIMP), DNSNotImplementedError)
 
 
@@ -58,7 +58,7 @@ class ExceptionForCodeTests(TestCase):
         L{ResolverBase.exceptionForCode} converts L{EREFUSED} to
         L{DNSQueryRefusedError}.
         """
-        self.assertIdentical(
+        self.assertIs(
             self.exceptionForCode(EREFUSED), DNSQueryRefusedError)
 
 
@@ -67,5 +67,5 @@ class ExceptionForCodeTests(TestCase):
         L{ResolverBase.exceptionForCode} converts any other response code to
         L{DNSUnknownError}.
         """
-        self.assertIdentical(
+        self.assertIs(
             self.exceptionForCode(object()), DNSUnknownError)
diff --git a/twisted/names/test/test_dns.py b/twisted/names/test/test_dns.py
index 92b13e3..92c99ff 100644
--- a/twisted/names/test/test_dns.py
+++ b/twisted/names/test/test_dns.py
@@ -333,10 +333,10 @@ class MessageTestCase(unittest.TestCase):
             '\x00\x00' # number of additionals
             )
         self.assertEqual(msg.id, 256)
-        self.failIf(msg.answer, "Message was not supposed to be an answer.")
+        self.assertFalse(msg.answer, "Message was not supposed to be an answer.")
         self.assertEqual(msg.opCode, dns.OP_QUERY)
-        self.failIf(msg.auth, "Message was not supposed to be authoritative.")
-        self.failIf(msg.trunc, "Message was not supposed to be truncated.")
+        self.assertFalse(msg.auth, "Message was not supposed to be authoritative.")
+        self.assertFalse(msg.trunc, "Message was not supposed to be truncated.")
         self.assertEqual(msg.queries, [])
         self.assertEqual(msg.answers, [])
         self.assertEqual(msg.authority, [])
@@ -355,7 +355,7 @@ class MessageTestCase(unittest.TestCase):
         msg2 = dns.Message()
         msg2.decode(s)
 
-        self.failUnless(isinstance(msg2.answers[0].payload, dns.Record_NULL))
+        self.assertTrue(isinstance(msg2.answers[0].payload, dns.Record_NULL))
         self.assertEqual(msg2.answers[0].payload.payload, bytes)
 
 
@@ -368,7 +368,7 @@ class MessageTestCase(unittest.TestCase):
         # 65280 is the first value in the range reserved for private
         # use, so it shouldn't ever conflict with an officially
         # allocated value.
-        self.assertIdentical(
+        self.assertIs(
             dns.Message().lookupRecordType(65280), dns.UnknownRecord)
 
 
diff --git a/twisted/names/test/test_hosts.py b/twisted/names/test/test_hosts.py
index d4cdb69..0b7d664 100644
--- a/twisted/names/test/test_hosts.py
+++ b/twisted/names/test/test_hosts.py
@@ -39,7 +39,7 @@ class SearchHostsFileTests(TestCase):
         hosts = FilePath(self.mktemp())
         hosts.setContent(
             "10.2.3.4 foo.example.com\n")
-        self.assertIdentical(
+        self.assertIs(
             None, searchFileFor(hosts.path, "bar.example.com"))
 
 
diff --git a/twisted/names/test/test_names.py b/twisted/names/test/test_names.py
index a5b20c1..875a24a 100644
--- a/twisted/names/test/test_names.py
+++ b/twisted/names/test/test_names.py
@@ -512,7 +512,7 @@ class HelperTestCase(unittest.TestCase):
         a = authority.getSerial(f)
         for i in range(20):
             b = authority.getSerial(f)
-            self.failUnless(a < b)
+            self.assertTrue(a < b)
             a = b
 
 
@@ -621,7 +621,7 @@ class RetryLogic(unittest.TestCase):
                 self.assertEqual(addr, (expectedAddr, 53))
                 self.assertEqual(timeout, t)
 
-        self.failIf(fakeProto.queries)
+        self.assertFalse(fakeProto.queries)
 
 class ResolvConfHandling(unittest.TestCase):
     def testMissing(self):
diff --git a/twisted/names/test/test_srvconnect.py b/twisted/names/test/test_srvconnect.py
index 6135359..e5bf360 100644
--- a/twisted/names/test/test_srvconnect.py
+++ b/twisted/names/test/test_srvconnect.py
@@ -73,7 +73,7 @@ class SRVConnectorTest(unittest.TestCase):
                                                    payload=payload)]
         self.connector.connect()
 
-        self.assertIdentical(None, self.factory.reason)
+        self.assertIs(None, self.factory.reason)
         self.assertEqual(
             self.reactor.tcpClients.pop()[:2], ('host.example.org', 6269))
 
@@ -85,7 +85,7 @@ class SRVConnectorTest(unittest.TestCase):
         client.theResolver.failure = DNSNameError('example.org')
         self.connector.connect()
 
-        self.assertIdentical(None, self.factory.reason)
+        self.assertIs(None, self.factory.reason)
         self.assertEqual(
             self.reactor.tcpClients.pop()[:2], ('example.org', 'xmpp-server'))
 
@@ -97,7 +97,7 @@ class SRVConnectorTest(unittest.TestCase):
         client.theResolver.results = []
         self.connector.connect()
 
-        self.assertIdentical(None, self.factory.reason)
+        self.assertIs(None, self.factory.reason)
         self.assertEqual(
             self.reactor.tcpClients.pop()[:2], ('example.org', 'xmpp-server'))
 
@@ -112,7 +112,7 @@ class SRVConnectorTest(unittest.TestCase):
                                                    payload=None)]
         self.connector.connect()
 
-        self.assertIdentical(None, self.factory.reason)
+        self.assertIs(None, self.factory.reason)
         self.assertEqual(
             self.reactor.tcpClients.pop()[:2], ('example.org', 'xmpp-server'))
 
@@ -128,6 +128,6 @@ class SRVConnectorTest(unittest.TestCase):
                                                    payload=payload)]
         self.connector.connect()
 
-        self.assertNotIdentical(None, self.factory.reason)
+        self.assertIsNot(None, self.factory.reason)
         self.factory.reason.trap(DNSLookupError)
         self.assertEqual(self.reactor.tcpClients, [])
diff --git a/twisted/news/test/test_news.py b/twisted/news/test/test_news.py
index 35ac7d7..93937b8 100644
--- a/twisted/news/test/test_news.py
+++ b/twisted/news/test/test_news.py
@@ -48,7 +48,7 @@ class NewsTestCase(unittest.TestCase):
         d = self.backend.articleRequest(None, None, MESSAGE_ID)
 
         def cbArticle(result):
-            self.failUnless(isinstance(result, tuple),
+            self.assertTrue(isinstance(result, tuple),
                             'callback result is wrong type: ' + str(result))
             self.assertEqual(len(result), 3,
                               'callback result list should have three entries: ' +
@@ -57,7 +57,7 @@ class NewsTestCase(unittest.TestCase):
                               "callback result Message-Id doesn't match: %s vs %s" %
                               (MESSAGE_ID, result[1]))
             body = result[2].read()
-            self.failIfEqual(body.find('\r\n\r\n'), -1,
+            self.assertNotEqual(body.find('\r\n\r\n'), -1,
                              "Can't find \\r\\n\\r\\n between header and body")
             return result
 
diff --git a/twisted/persisted/test/test_styles.py b/twisted/persisted/test/test_styles.py
index 29647a9..2c922d0 100644
--- a/twisted/persisted/test/test_styles.py
+++ b/twisted/persisted/test/test_styles.py
@@ -40,7 +40,7 @@ class UnpickleMethodTestCase(unittest.TestCase):
         foo = Foo()
         m = unpickleMethod('method', foo, Foo)
         self.assertEqual(m, foo.method)
-        self.assertNotIdentical(m, foo.method)
+        self.assertIsNot(m, foo.method)
 
 
     def test_instanceBuildingNameNotPresent(self):
@@ -52,4 +52,4 @@ class UnpickleMethodTestCase(unittest.TestCase):
         foo = Foo()
         m = unpickleMethod('method', foo, Bar)
         self.assertEqual(m, foo.method)
-        self.assertNotIdentical(m, foo.method)
+        self.assertIsNot(m, foo.method)
diff --git a/twisted/protocols/test/test_tls.py b/twisted/protocols/test/test_tls.py
index 06c3d03..2117be2 100644
--- a/twisted/protocols/test/test_tls.py
+++ b/twisted/protocols/test/test_tls.py
@@ -249,9 +249,9 @@ class TLSMemoryBIOTests(TestCase):
         transport = StringTransport()
         sslProtocol.makeConnection(transport)
 
-        self.assertNotIdentical(clientProtocol.transport, None)
-        self.assertNotIdentical(clientProtocol.transport, transport)
-        self.assertIdentical(clientProtocol.transport, sslProtocol)
+        self.assertIsNot(clientProtocol.transport, None)
+        self.assertIsNot(clientProtocol.transport, transport)
+        self.assertIs(clientProtocol.transport, sslProtocol)
 
 
     def handshakeProtocols(self):
@@ -940,7 +940,7 @@ class TLSProducerTests(TestCase):
         producer2 = object()
         self.assertRaises(RuntimeError,
             clientProtocol.transport.registerProducer, producer2, True)
-        self.assertIdentical(tlsProtocol._producer, originalProducer)
+        self.assertIs(tlsProtocol._producer, originalProducer)
 
 
     def test_streamingProducerUnregister(self):
@@ -1160,7 +1160,7 @@ class TLSProducerTests(TestCase):
         # stopProducing will:
         producer = Producer()
         tlsProtocol.registerProducer(producer, False)
-        self.assertIdentical(tlsProtocol.transport.producer, None)
+        self.assertIs(tlsProtocol.transport.producer, None)
         self.assertEqual(producer.stopped, True)
 
 
diff --git a/twisted/python/test/test_components.py b/twisted/python/test/test_components.py
index c4c1b45..8b4c566 100644
--- a/twisted/python/test/test_components.py
+++ b/twisted/python/test/test_components.py
@@ -136,8 +136,8 @@ class ComponentizedTestCase(unittest.TestCase, RegistryUsingMixin):
         co2 = c.getComponent(ITest2)
         co3 = c.getComponent(ITest3)
         co4 = c.getComponent(ITest4)
-        self.assertIdentical(None, co4)
-        self.assertIdentical(co1, co3)
+        self.assertIs(None, co4)
+        self.assertIs(co1, co3)
 
 
     def test_getComponentDefaults(self):
@@ -147,13 +147,13 @@ class ComponentizedTestCase(unittest.TestCase, RegistryUsingMixin):
         """
         componentized = components.Componentized()
         default = object()
-        self.assertIdentical(
+        self.assertIs(
             componentized.getComponent(ITest, default),
             default)
-        self.assertIdentical(
+        self.assertIs(
             componentized.getComponent(ITest, default=default),
             default)
-        self.assertIdentical(
+        self.assertIs(
             componentized.getComponent(ITest),
             None)
 
@@ -270,7 +270,7 @@ class RegistrationTestCase(RegistryUsingMixin, unittest.TestCase):
         """
         adapter = lambda o: None
         components.registerAdapter(adapter, original, ITest)
-        self.assertIdentical(
+        self.assertIs(
             components.getAdapterFactory(original, ITest, None),
             adapter)
 
@@ -306,7 +306,7 @@ class RegistrationTestCase(RegistryUsingMixin, unittest.TestCase):
             components.registerAdapter,
             secondAdapter, original, ITest)
         # Make sure that the original adapter is still around as well
-        self.assertIdentical(
+        self.assertIs(
             components.getAdapterFactory(original, ITest, None),
             firstAdapter)
 
@@ -343,7 +343,7 @@ class RegistrationTestCase(RegistryUsingMixin, unittest.TestCase):
         components.ALLOW_DUPLICATES = True
         try:
             components.registerAdapter(secondAdapter, original, TheInterface)
-            self.assertIdentical(
+            self.assertIs(
                 components.getAdapterFactory(original, TheInterface, None),
                 secondAdapter)
         finally:
@@ -355,7 +355,7 @@ class RegistrationTestCase(RegistryUsingMixin, unittest.TestCase):
             components.registerAdapter,
             firstAdapter, original, TheInterface)
 
-        self.assertIdentical(
+        self.assertIs(
             components.getAdapterFactory(original, TheInterface, None),
             secondAdapter)
 
@@ -389,9 +389,9 @@ class RegistrationTestCase(RegistryUsingMixin, unittest.TestCase):
         """
         adapter = lambda o: None
         components.registerAdapter(adapter, original, ITest, ITest2)
-        self.assertIdentical(
+        self.assertIs(
             components.getAdapterFactory(original, ITest, None), adapter)
-        self.assertIdentical(
+        self.assertIs(
             components.getAdapterFactory(original, ITest2, None), adapter)
 
 
@@ -426,10 +426,10 @@ class RegistrationTestCase(RegistryUsingMixin, unittest.TestCase):
             pass
         components.registerAdapter(firstAdapter, original, ITest)
         components.registerAdapter(secondAdapter, TheSubclass, ITest)
-        self.assertIdentical(
+        self.assertIs(
             components.getAdapterFactory(original, ITest, None),
             firstAdapter)
-        self.assertIdentical(
+        self.assertIs(
             components.getAdapterFactory(TheSubclass, ITest, None),
             secondAdapter)
 
@@ -571,7 +571,7 @@ class ProxyForInterfaceTests(unittest.TestCase):
         """
         original = object()
         proxy = proxyForInterface(IProxiedInterface)(original)
-        self.assertIdentical(proxy.original, original)
+        self.assertIs(proxy.original, original)
 
 
     def test_proxyMethod(self):
@@ -595,7 +595,7 @@ class ProxyForInterfaceTests(unittest.TestCase):
         yayable = Yayable()
         yayable.ifaceAttribute = object()
         proxy = proxyForInterface(IProxiedInterface)(yayable)
-        self.assertIdentical(proxy.ifaceAttribute, yayable.ifaceAttribute)
+        self.assertIs(proxy.ifaceAttribute, yayable.ifaceAttribute)
         self.assertRaises(AttributeError, lambda: proxy.yays)
 
 
@@ -608,7 +608,7 @@ class ProxyForInterfaceTests(unittest.TestCase):
         proxy = proxyForInterface(IProxiedInterface)(yayable)
         thingy = object()
         proxy.ifaceAttribute = thingy
-        self.assertIdentical(yayable.ifaceAttribute, thingy)
+        self.assertIs(yayable.ifaceAttribute, thingy)
 
 
     def test_proxyDeleteAttribute(self):
@@ -702,7 +702,7 @@ class ProxyForInterfaceTests(unittest.TestCase):
         self.assertEqual(pd.__get__(fakeProxy), testObject.hello)
         fakeClassMethod = pd.__get__(None)
         fakeClassMethod(fakeProxy)
-        self.failUnless(testObject.called)
+        self.assertTrue(testObject.called)
 
 
     def test_proxyInheritance(self):
@@ -742,8 +742,8 @@ class ProxyForInterfaceTests(unittest.TestCase):
         proxy = proxyClass(booable)
         proxy.yay()
         proxy.boo()
-        self.failUnless(booable.yayed)
-        self.failUnless(booable.booed)
+        self.assertTrue(booable.yayed)
+        self.assertTrue(booable.booed)
 
 
     def test_attributeCustomization(self):
@@ -757,14 +757,14 @@ class ProxyForInterfaceTests(unittest.TestCase):
         yayable.ifaceAttribute = object()
         proxy = proxyForInterface(
             IProxiedInterface, originalAttribute='foo')(yayable)
-        self.assertIdentical(proxy.foo, yayable)
+        self.assertIs(proxy.foo, yayable)
 
         # Check the behavior
         self.assertEqual(proxy.yay(), 1)
-        self.assertIdentical(proxy.ifaceAttribute, yayable.ifaceAttribute)
+        self.assertIs(proxy.ifaceAttribute, yayable.ifaceAttribute)
         thingy = object()
         proxy.ifaceAttribute = thingy
-        self.assertIdentical(yayable.ifaceAttribute, thingy)
+        self.assertIs(yayable.ifaceAttribute, thingy)
         del proxy.ifaceAttribute
         self.assertFalse(hasattr(yayable, 'ifaceAttribute'))
 
diff --git a/twisted/python/test/test_constants.py b/twisted/python/test/test_constants.py
index 870d342..40959f6 100644
--- a/twisted/python/test/test_constants.py
+++ b/twisted/python/test/test_constants.py
@@ -165,7 +165,7 @@ class NamesTests(TestCase, _ConstantsTestsMixin):
         Constants can be looked up by name using L{Names.lookupByName}.
         """
         method = self.METHOD.lookupByName("GET")
-        self.assertIdentical(self.METHOD.GET, method)
+        self.assertIs(self.METHOD.GET, method)
 
 
     def test_notLookupMissingByName(self):
@@ -191,7 +191,7 @@ class NamesTests(TestCase, _ConstantsTestsMixin):
         Repeated access of an attribute associated with a L{NamedConstant} value
         in a L{Names} subclass results in the same object.
         """
-        self.assertIdentical(self.METHOD.GET, self.METHOD.GET)
+        self.assertIs(self.METHOD.GET, self.METHOD.GET)
 
 
     def test_iterconstants(self):
@@ -212,10 +212,10 @@ class NamesTests(TestCase, _ConstantsTestsMixin):
         constants accessible using attributes.
         """
         constants = list(self.METHOD.iterconstants())
-        self.assertIdentical(self.METHOD.GET, constants[0])
-        self.assertIdentical(self.METHOD.PUT, constants[1])
-        self.assertIdentical(self.METHOD.POST, constants[2])
-        self.assertIdentical(self.METHOD.DELETE, constants[3])
+        self.assertIs(self.METHOD.GET, constants[0])
+        self.assertIs(self.METHOD.PUT, constants[1])
+        self.assertIs(self.METHOD.POST, constants[2])
+        self.assertIs(self.METHOD.DELETE, constants[3])
 
 
     def test_iterconstantsIdentity(self):
@@ -225,10 +225,10 @@ class NamesTests(TestCase, _ConstantsTestsMixin):
         """
         constants = list(self.METHOD.iterconstants())
         again = list(self.METHOD.iterconstants())
-        self.assertIdentical(again[0], constants[0])
-        self.assertIdentical(again[1], constants[1])
-        self.assertIdentical(again[2], constants[2])
-        self.assertIdentical(again[3], constants[3])
+        self.assertIs(again[0], constants[0])
+        self.assertIs(again[1], constants[1])
+        self.assertIs(again[2], constants[2])
+        self.assertIs(again[3], constants[3])
 
 
     def test_initializedOnce(self):
@@ -239,7 +239,7 @@ class NamesTests(TestCase, _ConstantsTestsMixin):
         first = self.METHOD._enumerants
         self.METHOD.GET # Side-effects!
         second = self.METHOD._enumerants
-        self.assertIdentical(first, second)
+        self.assertIs(first, second)
 
 
 
@@ -300,7 +300,7 @@ class ValuesTests(TestCase, _ConstantsTestsMixin):
         Constants can be looked up by name using L{Values.lookupByName}.
         """
         method = self.STATUS.lookupByName("OK")
-        self.assertIdentical(self.STATUS.OK, method)
+        self.assertIs(self.STATUS.OK, method)
 
 
     def test_notLookupMissingByName(self):
@@ -319,7 +319,7 @@ class ValuesTests(TestCase, _ConstantsTestsMixin):
         argument passed to L{ValueConstant}, using L{Values.lookupByValue}.
         """
         status = self.STATUS.lookupByValue("200")
-        self.assertIdentical(self.STATUS.OK, status)
+        self.assertIs(self.STATUS.OK, status)
 
 
     def test_lookupDuplicateByValue(self):
@@ -334,7 +334,7 @@ class ValuesTests(TestCase, _ConstantsTestsMixin):
             KEX_DH_GEX_REQUEST_OLD = ValueConstant(30)
             KEXDH_INIT = ValueConstant(30)
 
-        self.assertIdentical(
+        self.assertIs(
             TRANSPORT_MESSAGE.lookupByValue(30),
             TRANSPORT_MESSAGE.KEX_DH_GEX_REQUEST_OLD)
 
@@ -362,7 +362,7 @@ class ValuesTests(TestCase, _ConstantsTestsMixin):
         Repeated access of an attribute associated with a L{ValueConstant} value
         in a L{Values} subclass results in the same object.
         """
-        self.assertIdentical(self.STATUS.OK, self.STATUS.OK)
+        self.assertIs(self.STATUS.OK, self.STATUS.OK)
 
 
     def test_iterconstants(self):
@@ -382,8 +382,8 @@ class ValuesTests(TestCase, _ConstantsTestsMixin):
         constants accessible using attributes.
         """
         constants = list(self.STATUS.iterconstants())
-        self.assertIdentical(self.STATUS.OK, constants[0])
-        self.assertIdentical(self.STATUS.NOT_FOUND, constants[1])
+        self.assertIs(self.STATUS.OK, constants[0])
+        self.assertIs(self.STATUS.NOT_FOUND, constants[1])
 
 
     def test_iterconstantsIdentity(self):
@@ -393,8 +393,8 @@ class ValuesTests(TestCase, _ConstantsTestsMixin):
         """
         constants = list(self.STATUS.iterconstants())
         again = list(self.STATUS.iterconstants())
-        self.assertIdentical(again[0], constants[0])
-        self.assertIdentical(again[1], constants[1])
+        self.assertIs(again[0], constants[0])
+        self.assertIs(again[1], constants[1])
 
 
     def test_initializedOnce(self):
@@ -405,7 +405,7 @@ class ValuesTests(TestCase, _ConstantsTestsMixin):
         first = self.STATUS._enumerants
         self.STATUS.OK # Side-effects!
         second = self.STATUS._enumerants
-        self.assertIdentical(first, second)
+        self.assertIs(first, second)
 
 
 class _FlagsTestsMixin(object):
@@ -484,7 +484,7 @@ class FlagsTests(_FlagsTestsMixin, TestCase, _ConstantsTestsMixin):
         Constants can be looked up by name using L{Flags.lookupByName}.
         """
         flag = self.FXF.lookupByName("READ")
-        self.assertIdentical(self.FXF.READ, flag)
+        self.assertIs(self.FXF.READ, flag)
 
 
     def test_notLookupMissingByName(self):
@@ -504,19 +504,19 @@ class FlagsTests(_FlagsTestsMixin, TestCase, _ConstantsTestsMixin):
         explicitly by the argument passed to L{FlagConstant}.
         """
         flag = self.FXF.lookupByValue(0x01)
-        self.assertIdentical(flag, self.FXF.READ)
+        self.assertIs(flag, self.FXF.READ)
 
         flag = self.FXF.lookupByValue(0x02)
-        self.assertIdentical(flag, self.FXF.WRITE)
+        self.assertIs(flag, self.FXF.WRITE)
 
         flag = self.FXF.lookupByValue(0x04)
-        self.assertIdentical(flag, self.FXF.APPEND)
+        self.assertIs(flag, self.FXF.APPEND)
 
         flag = self.FXF.lookupByValue(0x20)
-        self.assertIdentical(flag, self.FXF.EXCLUSIVE)
+        self.assertIs(flag, self.FXF.EXCLUSIVE)
 
         flag = self.FXF.lookupByValue(0x40)
-        self.assertIdentical(flag, self.FXF.TEXT)
+        self.assertIs(flag, self.FXF.TEXT)
 
 
     def test_lookupDuplicateByValue(self):
@@ -531,7 +531,7 @@ class FlagsTests(_FlagsTestsMixin, TestCase, _ConstantsTestsMixin):
             #  xntp 3.4 compatibility names
             MOD_OFFSET = FlagConstant(0x0001)
 
-        self.assertIdentical(TIMEX.lookupByValue(0x0001), TIMEX.ADJ_OFFSET)
+        self.assertIs(TIMEX.lookupByValue(0x0001), TIMEX.ADJ_OFFSET)
 
 
     def test_notLookupMissingByValue(self):
@@ -555,7 +555,7 @@ class FlagsTests(_FlagsTestsMixin, TestCase, _ConstantsTestsMixin):
         Repeated access of an attribute associated with a L{FlagConstant} value
         in a L{Flags} subclass results in the same object.
         """
-        self.assertIdentical(self.FXF.READ, self.FXF.READ)
+        self.assertIs(self.FXF.READ, self.FXF.READ)
 
 
     def test_iterconstants(self):
@@ -576,11 +576,11 @@ class FlagsTests(_FlagsTestsMixin, TestCase, _ConstantsTestsMixin):
         constants accessible using attributes.
         """
         constants = list(self.FXF.iterconstants())
-        self.assertIdentical(self.FXF.READ, constants[0])
-        self.assertIdentical(self.FXF.WRITE, constants[1])
-        self.assertIdentical(self.FXF.APPEND, constants[2])
-        self.assertIdentical(self.FXF.EXCLUSIVE, constants[3])
-        self.assertIdentical(self.FXF.TEXT, constants[4])
+        self.assertIs(self.FXF.READ, constants[0])
+        self.assertIs(self.FXF.WRITE, constants[1])
+        self.assertIs(self.FXF.APPEND, constants[2])
+        self.assertIs(self.FXF.EXCLUSIVE, constants[3])
+        self.assertIs(self.FXF.TEXT, constants[4])
 
 
     def test_iterconstantsIdentity(self):
@@ -590,11 +590,11 @@ class FlagsTests(_FlagsTestsMixin, TestCase, _ConstantsTestsMixin):
         """
         constants = list(self.FXF.iterconstants())
         again = list(self.FXF.iterconstants())
-        self.assertIdentical(again[0], constants[0])
-        self.assertIdentical(again[1], constants[1])
-        self.assertIdentical(again[2], constants[2])
-        self.assertIdentical(again[3], constants[3])
-        self.assertIdentical(again[4], constants[4])
+        self.assertIs(again[0], constants[0])
+        self.assertIs(again[1], constants[1])
+        self.assertIs(again[2], constants[2])
+        self.assertIs(again[3], constants[3])
+        self.assertIs(again[4], constants[4])
 
 
     def test_initializedOnce(self):
@@ -605,7 +605,7 @@ class FlagsTests(_FlagsTestsMixin, TestCase, _ConstantsTestsMixin):
         first = self.FXF._enumerants
         self.FXF.READ # Side-effects!
         second = self.FXF._enumerants
-        self.assertIdentical(first, second)
+        self.assertIs(first, second)
 
 
 
diff --git a/twisted/python/test/test_deprecate.py b/twisted/python/test/test_deprecate.py
index 03498e4..30a079a 100644
--- a/twisted/python/test/test_deprecate.py
+++ b/twisted/python/test/test_deprecate.py
@@ -328,7 +328,7 @@ class ModuleProxyTests(TestCase):
         if a non-existant attribute is accessed.
         """
         proxy = self._makeProxy(SOME_ATTRIBUTE='hello')
-        self.assertIdentical(proxy.SOME_ATTRIBUTE, 'hello')
+        self.assertIs(proxy.SOME_ATTRIBUTE, 'hello')
         self.assertRaises(AttributeError, getattr, proxy, 'DOES_NOT_EXIST')
 
 
@@ -363,7 +363,7 @@ class ModuleProxyTests(TestCase):
         """
         proxy = self._makeProxy()
         proxy._module = 1
-        self.assertNotEquals(object.__getattribute__(proxy, '_module'), 1)
+        self.assertNotEqual(object.__getattribute__(proxy, '_module'), 1)
         self.assertEqual(proxy._module, 1)
 
 
@@ -424,7 +424,7 @@ class DeprecatedAttributeTests(TestCase):
         addStackLevel()
         warningsShown = self.flushWarnings([
             self.test_deprecatedAttributeHelper])
-        self.assertIdentical(warningsShown[0]['category'], DeprecationWarning)
+        self.assertIs(warningsShown[0]['category'], DeprecationWarning)
         self.assertEqual(
             warningsShown[0]['message'],
             self._getWarningString(name))
@@ -451,7 +451,7 @@ class DeprecatedAttributeTests(TestCase):
 
         warningsShown = self.flushWarnings([self.test_deprecatedAttribute])
         self.assertEqual(len(warningsShown), 1)
-        self.assertIdentical(warningsShown[0]['category'], DeprecationWarning)
+        self.assertIs(warningsShown[0]['category'], DeprecationWarning)
         self.assertEqual(
             warningsShown[0]['message'],
             self._getWarningString(name))
@@ -485,7 +485,7 @@ class DeprecatedAttributeTests(TestCase):
             self._testModuleName,
             'second')
 
-        self.assertIdentical(proxy, sys.modules[self._testModuleName])
+        self.assertIs(proxy, sys.modules[self._testModuleName])
 
 
 
diff --git a/twisted/python/test/test_fakepwd.py b/twisted/python/test/test_fakepwd.py
index 47dc470..e0d29dc 100644
--- a/twisted/python/test/test_fakepwd.py
+++ b/twisted/python/test/test_fakepwd.py
@@ -99,7 +99,7 @@ class UserDatabaseTestsMixin:
         username, password, uid, gid, gecos, dir, shell = self.getExistingUserInfo()
         for entry in [db.getpwuid(uid), db.getpwnam(username), db.getpwall()[0]]:
             self.assertIsInstance(len(entry), int)
-            self.assertEquals(len(entry), 7)
+            self.assertEqual(len(entry), 7)
 
 
     def test_recordIndexable(self):
@@ -235,15 +235,15 @@ class ShadowDatabaseTestsMixin:
              flag) = self.getExistingUserInfo()
 
             entry = self.database.getspnam(username)
-            self.assertEquals(entry.sp_nam, username)
-            self.assertEquals(entry.sp_pwd, password)
-            self.assertEquals(entry.sp_lstchg, lastChange)
-            self.assertEquals(entry.sp_min, min)
-            self.assertEquals(entry.sp_max, max)
-            self.assertEquals(entry.sp_warn, warn)
-            self.assertEquals(entry.sp_inact, inact)
-            self.assertEquals(entry.sp_expire, expire)
-            self.assertEquals(entry.sp_flag, flag)
+            self.assertEqual(entry.sp_nam, username)
+            self.assertEqual(entry.sp_pwd, password)
+            self.assertEqual(entry.sp_lstchg, lastChange)
+            self.assertEqual(entry.sp_min, min)
+            self.assertEqual(entry.sp_max, max)
+            self.assertEqual(entry.sp_warn, warn)
+            self.assertEqual(entry.sp_inact, inact)
+            self.assertEqual(entry.sp_expire, expire)
+            self.assertEqual(entry.sp_flag, flag)
 
 
     def test_noSuchName(self):
@@ -263,7 +263,7 @@ class ShadowDatabaseTestsMixin:
         username = self.getExistingUserInfo()[0]
         for entry in [db.getspnam(username), db.getspall()[0]]:
             self.assertIsInstance(len(entry), int)
-            self.assertEquals(len(entry), 9)
+            self.assertEqual(len(entry), 9)
 
 
     def test_recordIndexable(self):
@@ -278,17 +278,17 @@ class ShadowDatabaseTestsMixin:
         (username, password, lastChange, min, max, warn, inact, expire,
          flag) = self.getExistingUserInfo()
         for entry in [db.getspnam(username), db.getspall()[0]]:
-            self.assertEquals(entry[0], username)
-            self.assertEquals(entry[1], password)
-            self.assertEquals(entry[2], lastChange)
-            self.assertEquals(entry[3], min)
-            self.assertEquals(entry[4], max)
-            self.assertEquals(entry[5], warn)
-            self.assertEquals(entry[6], inact)
-            self.assertEquals(entry[7], expire)
-            self.assertEquals(entry[8], flag)
-
-            self.assertEquals(len(entry), len(list(entry)))
+            self.assertEqual(entry[0], username)
+            self.assertEqual(entry[1], password)
+            self.assertEqual(entry[2], lastChange)
+            self.assertEqual(entry[3], min)
+            self.assertEqual(entry[4], max)
+            self.assertEqual(entry[5], warn)
+            self.assertEqual(entry[6], inact)
+            self.assertEqual(entry[7], expire)
+            self.assertEqual(entry[8], flag)
+
+            self.assertEqual(len(entry), len(list(entry)))
             self.assertRaises(IndexError, getitem, entry, 9)
 
 
@@ -349,15 +349,15 @@ class ShadowDatabaseTests(TestCase, ShadowDatabaseTestsMixin):
                    expire, flag)
 
         for [entry] in [[db.getspnam(username)], db.getspall()]:
-            self.assertEquals(entry.sp_nam, username)
-            self.assertEquals(entry.sp_pwd, password)
-            self.assertEquals(entry.sp_lstchg, lastChange)
-            self.assertEquals(entry.sp_min, min)
-            self.assertEquals(entry.sp_max, max)
-            self.assertEquals(entry.sp_warn, warn)
-            self.assertEquals(entry.sp_inact, inact)
-            self.assertEquals(entry.sp_expire, expire)
-            self.assertEquals(entry.sp_flag, flag)
+            self.assertEqual(entry.sp_nam, username)
+            self.assertEqual(entry.sp_pwd, password)
+            self.assertEqual(entry.sp_lstchg, lastChange)
+            self.assertEqual(entry.sp_min, min)
+            self.assertEqual(entry.sp_max, max)
+            self.assertEqual(entry.sp_warn, warn)
+            self.assertEqual(entry.sp_inact, inact)
+            self.assertEqual(entry.sp_expire, expire)
+            self.assertEqual(entry.sp_flag, flag)
 
 
 
diff --git a/twisted/python/test/test_util.py b/twisted/python/test/test_util.py
index 2d49db1..02229f0 100644
--- a/twisted/python/test/test_util.py
+++ b/twisted/python/test/test_util.py
@@ -33,8 +33,8 @@ class UtilTestCase(unittest.TestCase):
         self.assertEqual(util.uniquify(l), ["a", 1, "ab", 3, 4, 2, 6])
 
     def testRaises(self):
-        self.failUnless(util.raises(ZeroDivisionError, divmod, 1, 0))
-        self.failIf(util.raises(ZeroDivisionError, divmod, 0, 1))
+        self.assertTrue(util.raises(ZeroDivisionError, divmod, 1, 0))
+        self.assertFalse(util.raises(ZeroDivisionError, divmod, 0, 1))
 
         try:
             util.raises(TypeError, divmod, 1, 0)
@@ -216,7 +216,7 @@ class TestMergeFunctionMetadata(unittest.TestCase):
             return bar_object
 
         baz = util.mergeFunctionMetadata(foo, bar)
-        self.assertIdentical(baz(1, 2, (3, 4), quux=10), bar_object)
+        self.assertIs(baz(1, 2, (3, 4), quux=10), bar_object)
 
 
     def test_moduleIsMerged(self):
@@ -313,7 +313,7 @@ class OrderedDictTest(unittest.TestCase):
     def testInitialization(self):
         d = util.OrderedDict({'monkey': 'ook',
                               'apple': 'red'})
-        self.failUnless(d._order)
+        self.assertTrue(d._order)
 
         d = util.OrderedDict(((1,1),(3,3),(2,2),(0,0)))
         self.assertEqual(repr(d), "{1: 1, 3: 3, 2: 2, 0: 0}")
@@ -796,7 +796,7 @@ class UnsignedIDTests(unittest.TestCase):
         value = object()
         previous = util.setIDFunction(value)
         result = util.setIDFunction(previous)
-        self.assertIdentical(value, result)
+        self.assertIs(value, result)
 
 
     def test_unsignedID(self):
diff --git a/twisted/python/test/test_versions.py b/twisted/python/test/test_versions.py
index 79388cf..8170717 100644
--- a/twisted/python/test/test_versions.py
+++ b/twisted/python/test/test_versions.py
@@ -66,22 +66,22 @@ class VersionsTest(unittest.TestCase):
         """
         va = Version("dummy", 1, 0, 0)
         vb = Version("dummy", 0, 1, 0)
-        self.failUnless(va > vb)
-        self.failUnless(vb < va)
-        self.failUnless(va >= vb)
-        self.failUnless(vb <= va)
-        self.failUnless(va != vb)
-        self.failUnless(vb == Version("dummy", 0, 1, 0))
-        self.failUnless(vb == vb)
+        self.assertTrue(va > vb)
+        self.assertTrue(vb < va)
+        self.assertTrue(va >= vb)
+        self.assertTrue(vb <= va)
+        self.assertTrue(va != vb)
+        self.assertTrue(vb == Version("dummy", 0, 1, 0))
+        self.assertTrue(vb == vb)
 
         # BREAK IT DOWN@!!
-        self.failIf(va < vb)
-        self.failIf(vb > va)
-        self.failIf(va <= vb)
-        self.failIf(vb >= va)
-        self.failIf(va == vb)
-        self.failIf(vb != Version("dummy", 0, 1, 0))
-        self.failIf(vb != vb)
+        self.assertFalse(va < vb)
+        self.assertFalse(vb > va)
+        self.assertFalse(va <= vb)
+        self.assertFalse(vb >= va)
+        self.assertFalse(va == vb)
+        self.assertFalse(vb != Version("dummy", 0, 1, 0))
+        self.assertFalse(vb != vb)
 
 
     def test_comparingPrereleasesWithReleases(self):
@@ -92,7 +92,7 @@ class VersionsTest(unittest.TestCase):
         vb = Version("whatever", 1, 0, 0)
         self.assertTrue(va < vb)
         self.assertFalse(va > vb)
-        self.assertNotEquals(vb, va)
+        self.assertNotEqual(vb, va)
 
 
     def test_comparingPrereleases(self):
diff --git a/twisted/python/test/test_zipstream.py b/twisted/python/test/test_zipstream.py
index 1a0fcc4..851a047 100644
--- a/twisted/python/test/test_zipstream.py
+++ b/twisted/python/test/test_zipstream.py
@@ -81,8 +81,8 @@ class FileEntryMixin:
         C{__iter__()} and C{xreadlines()} should return C{self}.
         """
         fileEntry = self.getFileEntry('')
-        self.assertIdentical(iter(fileEntry), fileEntry)
-        self.assertIdentical(fileEntry.xreadlines(), fileEntry)
+        self.assertIs(iter(fileEntry), fileEntry)
+        self.assertIs(fileEntry.xreadlines(), fileEntry)
 
 
     def test_readWhole(self):
@@ -468,7 +468,7 @@ class ZipstreamTest(unittest.TestCase):
         # this could theoretically be any number but statistically it
         # should always be in this range
         approx = lower < r < upper
-        self.failUnless(approx)
+        self.assertTrue(approx)
         for r in uziter:
             pass
         self.assertEqual(r, 0)
diff --git a/twisted/runner/test/test_procmon.py b/twisted/runner/test/test_procmon.py
index d5217a0..d4fe72d 100644
--- a/twisted/runner/test/test_procmon.py
+++ b/twisted/runner/test/test_procmon.py
@@ -227,7 +227,7 @@ class ProcmonTests(unittest.TestCase):
         """
         self.pm.addProcess("foo", ["foo"])
         self.pm.startProcess("foo")
-        self.assertIdentical(None, self.pm.startProcess("foo"))
+        self.assertIs(None, self.pm.startProcess("foo"))
 
 
     def test_startProcessUnknownKeyError(self):
@@ -303,7 +303,7 @@ class ProcmonTests(unittest.TestCase):
         rescheduled, but in the meantime, the service is stopped.
         """
         self.pm.addProcess("foo", ["foo"])
-        self.assertIdentical(None, self.pm.stopProcess("foo"))
+        self.assertIs(None, self.pm.stopProcess("foo"))
 
 
     def test_connectionLostLongLivedProcess(self):
diff --git a/twisted/test/test_adbapi.py b/twisted/test/test_adbapi.py
index 92ff601..5fa5136 100644
--- a/twisted/test/test_adbapi.py
+++ b/twisted/test/test_adbapi.py
@@ -52,9 +52,9 @@ class ADBAPITestBase:
 
     def checkOpenfunCalled(self, conn=None):
         if not conn:
-            self.failUnless(self.openfun_called)
+            self.assertTrue(self.openfun_called)
         else:
-            self.failUnless(self.openfun_called.has_key(conn))
+            self.assertTrue(self.openfun_called.has_key(conn))
 
     def testPool(self):
         d = self.dbpool.runOperation(simple_table_schema)
@@ -106,7 +106,7 @@ class ADBAPITestBase:
         sql = "select count(1) from simple"
         d = self.dbpool.runQuery(sql)
         def _check(row):
-            self.failUnless(int(row[0][0]) == 0, "Interaction not rolled back")
+            self.assertTrue(int(row[0][0]) == 0, "Interaction not rolled back")
             self.checkOpenfunCalled()
         d.addCallback(_check)
         return d
@@ -128,11 +128,11 @@ class ADBAPITestBase:
         d.addCallback(_select)
 
         def _check(rows):
-            self.failUnless(len(rows) == self.num_iterations,
+            self.assertTrue(len(rows) == self.num_iterations,
                             "Wrong number of rows")
             for i in range(self.num_iterations):
-                self.failUnless(len(rows[i]) == 1, "Wrong size row")
-                self.failUnless(rows[i][0] == i, "Values not returned.")
+                self.assertTrue(len(rows[i]) == 1, "Wrong size row")
+                self.assertTrue(rows[i][0] == i, "Values not returned.")
         d.addCallback(_check)
 
         return d
@@ -163,7 +163,7 @@ class ADBAPITestBase:
         dlist = defer.DeferredList(ds, fireOnOneErrback=True)
         def _check(result):
             for i in range(self.num_iterations):
-                self.failUnless(result[i][1][0][0] == i, "Value not returned")
+                self.assertTrue(result[i][1][0][0] == i, "Value not returned")
         dlist.addCallback(_check)
         return dlist
 
@@ -181,7 +181,7 @@ class ADBAPITestBase:
         sql = "select count(1) from simple"
         d = self.dbpool.runQuery(sql)
         def _check(row):
-            self.failUnless(int(row[0][0]) == 0,
+            self.assertTrue(int(row[0][0]) == 0,
                             "Didn't successfully delete table contents")
             self.checkConnect()
         d.addCallback(_check)
@@ -208,10 +208,10 @@ class ADBAPITestBase:
         transaction.execute("select x from simple order by x")
         for i in range(self.num_iterations):
             row = transaction.fetchone()
-            self.failUnless(len(row) == 1, "Wrong size row")
-            self.failUnless(row[0] == i, "Value not returned.")
+            self.assertTrue(len(row) == 1, "Wrong size row")
+            self.assertTrue(row[0] == i, "Value not returned.")
         # should test this, but gadfly throws an exception instead
-        #self.failUnless(transaction.fetchone() is None, "Too many rows")
+        #self.assertTrue(transaction.fetchone() is None, "Too many rows")
         return "done"
 
     def bad_interaction(self, transaction):
@@ -226,10 +226,10 @@ class ADBAPITestBase:
             curs.execute("select x from simple order by x")
             for i in range(self.num_iterations):
                 row = curs.fetchone()
-                self.failUnless(len(row) == 1, "Wrong size row")
-                self.failUnless(row[0] == i, "Value not returned.")
+                self.assertTrue(len(row) == 1, "Wrong size row")
+                self.assertTrue(row[0] == i, "Value not returned.")
             # should test this, but gadfly throws an exception instead
-            #self.failUnless(transaction.fetchone() is None, "Too many rows")
+            #self.assertTrue(transaction.fetchone() is None, "Too many rows")
         finally:
             curs.close()
         return "done"
@@ -286,7 +286,7 @@ class ReconnectTestBase:
         sql = "select count(1) from simple"
         d = self.dbpool.runQuery(sql)
         def _check(row):
-            self.failUnless(int(row[0][0]) == 0, "Table not empty")
+            self.assertTrue(int(row[0][0]) == 0, "Table not empty")
         d.addCallback(_check)
         return d
 
@@ -305,7 +305,7 @@ class ReconnectTestBase:
         sql = "select count(1) from simple"
         d = self.dbpool.runQuery(sql)
         def _check(row):
-            self.failUnless(int(row[0][0]) == 0, "Table not empty")
+            self.assertTrue(int(row[0][0]) == 0, "Table not empty")
         d.addCallback(_check)
         return d
 
@@ -314,7 +314,7 @@ class ReconnectTestBase:
         sql = "select * from NOTABLE" # bad sql
         d = defer.maybeDeferred(self.dbpool.runQuery, sql)
         d.addCallbacks(lambda res: self.fail('no exception'),
-                       lambda f: self.failIf(f.check(ConnectionLost)))
+                       lambda f: self.assertFalse(f.check(ConnectionLost)))
         return d
 
 
diff --git a/twisted/test/test_amp.py b/twisted/test/test_amp.py
index 70c3fc3..aabd461 100644
--- a/twisted/test/test_amp.py
+++ b/twisted/test/test_amp.py
@@ -425,7 +425,7 @@ class ParsingTest(unittest.TestCase):
         p = amp.Path()
         s = p.toString(fp)
         v = p.fromString(s)
-        self.assertNotIdentical(fp, v) # sanity check
+        self.assertIsNot(fp, v) # sanity check
         self.assertEqual(fp, v)
 
 
@@ -908,7 +908,7 @@ class BinaryProtocolTests(unittest.TestCase):
         """
         protocol = amp.BinaryBoxProtocol(self)
         protocol.makeConnection(None)
-        self.assertIdentical(self._boxSender, protocol)
+        self.assertIs(self._boxSender, protocol)
 
 
     def test_sendBoxInStartReceivingBoxes(self):
@@ -999,8 +999,8 @@ class BinaryProtocolTests(unittest.TestCase):
         self.stopReason.trap(amp.TooLong)
         self.assertTrue(self.stopReason.value.isKey)
         self.assertFalse(self.stopReason.value.isLocal)
-        self.assertIdentical(self.stopReason.value.value, None)
-        self.assertIdentical(self.stopReason.value.keyName, None)
+        self.assertIs(self.stopReason.value.value, None)
+        self.assertIs(self.stopReason.value.keyName, None)
 
 
     def test_unhandledErrorWithTransport(self):
@@ -1079,7 +1079,7 @@ class BinaryProtocolTests(unittest.TestCase):
         a.makeConnection(self)
         connectionFailure = Failure(RuntimeError())
         a.connectionLost(connectionFailure)
-        self.assertIdentical(self.stopReason, connectionFailure)
+        self.assertIs(self.stopReason, connectionFailure)
 
 
     def test_protocolSwitch(self):
@@ -1109,7 +1109,7 @@ class BinaryProtocolTests(unittest.TestCase):
         # boxes either...
         moreThanOneBox = anyOldBox.serialize() + "\x00\x00Hello, world!"
         a.dataReceived(moreThanOneBox)
-        self.assertIdentical(otherProto.transport, self)
+        self.assertIs(otherProto.transport, self)
         self.assertEqual("".join(otherProto.data), "\x00\x00Hello, world!")
         self.assertEqual(self.data, ["outgoing data"])
         a.dataReceived("more data")
@@ -1206,7 +1206,7 @@ class AMPTest(unittest.TestCase):
                                           (amp.IBoxSender, amp.AMP),
                                           (amp.IBoxReceiver, amp.AMP),
                                           (amp.IResponderLocator, amp.AMP)]:
-            self.failUnless(interface.implementedBy(implementation),
+            self.assertTrue(interface.implementedBy(implementation),
                             "%s does not implements(%s)" % (implementation, interface))
 
 
@@ -1259,7 +1259,7 @@ class AMPTest(unittest.TestCase):
         """
         c, s, p = connectedServerAndClient()
         ret = c.callRemoteString("WTF", requiresAnswer=False)
-        self.assertIdentical(ret, None)
+        self.assertIs(ret, None)
 
 
     def test_unknownCommandLow(self):
@@ -1318,7 +1318,7 @@ class AMPTest(unittest.TestCase):
         SimpleSymmetricCommandProtocol().dispatchCommand(
             amp.AmpBox(_command=BrokenReturn.commandName)).addErrback(L.append)
         L[0].trap(amp.BadLocalReturn)
-        self.failUnlessIn('None', repr(L[0].value))
+        self.assertIn('None', repr(L[0].value))
 
 
     def test_unknownArgument(self):
@@ -1347,7 +1347,7 @@ class AMPTest(unittest.TestCase):
         self.assertEqual(type(repr(amp._SwitchBox('a'))), str)
         self.assertEqual(type(repr(amp.QuitBox())), str)
         self.assertEqual(type(repr(amp.AmpBox())), str)
-        self.failUnless("AmpBox" in repr(amp.AmpBox()))
+        self.assertTrue("AmpBox" in repr(amp.AmpBox()))
 
 
     def test_innerProtocolInRepr(self):
@@ -1399,7 +1399,7 @@ class AMPTest(unittest.TestCase):
                                **{x: "hi"})
         self.assertTrue(tl.isKey)
         self.assertTrue(tl.isLocal)
-        self.assertIdentical(tl.keyName, None)
+        self.assertIs(tl.keyName, None)
         self.assertEqual(tl.value, x)
         self.assertIn(str(len(x)), repr(tl))
         self.assertIn("key", repr(tl))
@@ -1414,13 +1414,13 @@ class AMPTest(unittest.TestCase):
         x = "H" * (0xffff+1)
         tl = self.assertRaises(amp.TooLong, c.sendHello, x)
         p.flush()
-        self.failIf(tl.isKey)
-        self.failUnless(tl.isLocal)
+        self.assertFalse(tl.isKey)
+        self.assertTrue(tl.isLocal)
         self.assertEqual(tl.keyName, 'hello')
-        self.failUnlessIdentical(tl.value, x)
-        self.failUnless(str(len(x)) in repr(tl))
-        self.failUnless("value" in repr(tl))
-        self.failUnless('hello' in repr(tl))
+        self.assertIs(tl.value, x)
+        self.assertTrue(str(len(x)) in repr(tl))
+        self.assertTrue("value" in repr(tl))
+        self.assertTrue('hello' in repr(tl))
 
 
     def test_helloWorldCommand(self):
@@ -1495,7 +1495,7 @@ class AMPTest(unittest.TestCase):
         cl = L.pop()
         cl.trap(error.ConnectionDone)
         # The exception should have been logged.
-        self.failUnless(self.flushLoggedErrors(ThingIDontUnderstandError))
+        self.assertTrue(self.flushLoggedErrors(ThingIDontUnderstandError))
 
 
 
@@ -1529,7 +1529,7 @@ class AMPTest(unittest.TestCase):
         HELLO = 'world'
         c.callRemote(NoAnswerHello, hello=HELLO)
         p.flush()
-        self.failUnless(s.greeted)
+        self.assertTrue(s.greeted)
 
 
     def test_requiresNoAnswerFail(self):
@@ -1544,12 +1544,12 @@ class AMPTest(unittest.TestCase):
         c.callRemote(NoAnswerHello, hello=HELLO)
         p.flush()
         # This should be logged locally.
-        self.failUnless(self.flushLoggedErrors(amp.RemoteAmpError))
+        self.assertTrue(self.flushLoggedErrors(amp.RemoteAmpError))
         HELLO = 'world'
         c.callRemote(Hello, hello=HELLO).addErrback(L.append)
         p.flush()
         L.pop().trap(error.ConnectionDone)
-        self.failIf(s.greeted)
+        self.assertFalse(s.greeted)
 
 
     def test_noAnswerResponderBadAnswer(self):
@@ -1656,7 +1656,7 @@ class AMPTest(unittest.TestCase):
             self.testSucceeded = True
         c.switchToTestProtocol().addCallback(switched)
         p.flush()
-        self.failUnless(self.testSucceeded)
+        self.assertTrue(self.testSucceeded)
 
 
     def test_protocolSwitch(self, switcher=SimpleSymmetricCommandProtocol,
@@ -1684,8 +1684,8 @@ class AMPTest(unittest.TestCase):
 
         def cbConnsLost(((serverSuccess, serverData),
                          (clientSuccess, clientData))):
-            self.failUnless(serverSuccess)
-            self.failUnless(clientSuccess)
+            self.assertTrue(serverSuccess)
+            self.assertTrue(clientSuccess)
             self.assertEqual(''.join(serverData), SWITCH_CLIENT_DATA)
             self.assertEqual(''.join(clientData), SWITCH_SERVER_DATA)
             self.testSucceeded = True
@@ -1711,7 +1711,7 @@ class AMPTest(unittest.TestCase):
             p.flush()
         c.transport.loseConnection() # close it
         p.flush()
-        self.failUnless(self.testSucceeded)
+        self.assertTrue(self.testSucceeded)
 
 
     def test_protocolSwitchDeferred(self):
@@ -1739,7 +1739,7 @@ class AMPTest(unittest.TestCase):
         c.switchToTestProtocol(fail=True).addErrback(L.append)
         p.flush()
         L.pop().trap(UnknownProtocol)
-        self.failIf(self.testSucceeded)
+        self.assertFalse(self.testSucceeded)
         # It's a known error, so let's send a "hello" on the same connection;
         # it should work.
         c.sendHello('world').addCallback(L.append)
@@ -2156,7 +2156,7 @@ class CommandInheritanceTests(unittest.TestCase):
         c, s, p = connectedServerAndClient(ServerClass=proto,
                                            ClientClass=proto)
         d = c.callRemote(cmd, **kw)
-        d2 = self.failUnlessFailure(d, err)
+        d2 = self.assertFailure(d, err)
         p.flush()
         return d2
 
@@ -2578,7 +2578,7 @@ class CommandTestCase(unittest.TestCase):
 
         result = ProtocolIncludingCommandWithDifferentCommandType.makeArguments(
             objects, protocol)
-        self.assertIdentical(type(result), MyBox)
+        self.assertIs(type(result), MyBox)
 
 
     def test_callRemoteCallsMakeArguments(self):
diff --git a/twisted/test/test_application.py b/twisted/test/test_application.py
index b1dbd83..8f17213 100644
--- a/twisted/test/test_application.py
+++ b/twisted/test/test_application.py
@@ -58,7 +58,7 @@ class TestService(unittest.TestCase):
         p = service.MultiService()
         s.setName("hello")
         s.setServiceParent(p)
-        self.failUnlessRaises(RuntimeError, s.setName, "lala")
+        self.assertRaises(RuntimeError, s.setName, "lala")
 
     def testDuplicateNamedChild(self):
         s = service.Service()
@@ -67,7 +67,7 @@ class TestService(unittest.TestCase):
         s.setServiceParent(p)
         s = service.Service()
         s.setName("hello")
-        self.failUnlessRaises(RuntimeError, s.setServiceParent, p)
+        self.assertRaises(RuntimeError, s.setServiceParent, p)
 
     def testDisowning(self):
         s = service.Service()
@@ -81,29 +81,29 @@ class TestService(unittest.TestCase):
 
     def testRunning(self):
         s = service.Service()
-        self.assert_(not s.running)
+        self.assertTrue(not s.running)
         s.startService()
-        self.assert_(s.running)
+        self.assertTrue(s.running)
         s.stopService()
-        self.assert_(not s.running)
+        self.assertTrue(not s.running)
 
     def testRunningChildren1(self):
         s = service.Service()
         p = service.MultiService()
         s.setServiceParent(p)
-        self.assert_(not s.running)
-        self.assert_(not p.running)
+        self.assertTrue(not s.running)
+        self.assertTrue(not p.running)
         p.startService()
-        self.assert_(s.running)
-        self.assert_(p.running)
+        self.assertTrue(s.running)
+        self.assertTrue(p.running)
         p.stopService()
-        self.assert_(not s.running)
-        self.assert_(not p.running)
+        self.assertTrue(not s.running)
+        self.assertTrue(not p.running)
 
     def testRunningChildren2(self):
         s = service.Service()
         def checkRunning():
-            self.assert_(s.running)
+            self.assertTrue(s.running)
         t = service.Service()
         t.stopService = checkRunning
         t.startService = checkRunning
@@ -117,11 +117,11 @@ class TestService(unittest.TestCase):
         p = service.MultiService()
         p.startService()
         s = service.Service()
-        self.assert_(not s.running)
+        self.assertTrue(not s.running)
         s.setServiceParent(p)
-        self.assert_(s.running)
+        self.assertTrue(s.running)
         s.disownServiceParent()
-        self.assert_(not s.running)
+        self.assertTrue(not s.running)
 
     def testPrivileged(self):
         s = service.Service()
@@ -133,14 +133,14 @@ class TestService(unittest.TestCase):
         s.setServiceParent(p)
         s1.setServiceParent(p)
         p.privilegedStartService()
-        self.assert_(s.privilegedStarted)
+        self.assertTrue(s.privilegedStarted)
 
     def testCopying(self):
         s = service.Service()
         s.startService()
         s1 = copy.copy(s)
-        self.assert_(not s1.running)
-        self.assert_(s.running)
+        self.assertTrue(not s1.running)
+        self.assertTrue(s.running)
 
 
 if hasattr(os, "getuid"):
@@ -178,14 +178,14 @@ class TestProcess(unittest.TestCase):
 class TestInterfaces(unittest.TestCase):
 
     def testService(self):
-        self.assert_(service.IService.providedBy(service.Service()))
+        self.assertTrue(service.IService.providedBy(service.Service()))
 
     def testMultiService(self):
-        self.assert_(service.IService.providedBy(service.MultiService()))
-        self.assert_(service.IServiceCollection.providedBy(service.MultiService()))
+        self.assertTrue(service.IService.providedBy(service.MultiService()))
+        self.assertTrue(service.IServiceCollection.providedBy(service.MultiService()))
 
     def testProcess(self):
-        self.assert_(service.IProcess.providedBy(service.Process()))
+        self.assertTrue(service.IProcess.providedBy(service.Process()))
 
 
 class TestApplication(unittest.TestCase):
@@ -208,7 +208,7 @@ class TestApplication(unittest.TestCase):
 
     def testServiceComponent(self):
         a = service.Application("hello")
-        self.assert_(service.IService(a) is service.IServiceCollection(a))
+        self.assertTrue(service.IService(a) is service.IServiceCollection(a))
         self.assertEqual(service.IService(a).name, "hello")
         self.assertEqual(service.IService(a).parent, None)
 
@@ -217,7 +217,7 @@ class TestApplication(unittest.TestCase):
         p = sob.IPersistable(a)
         self.assertEqual(p.style, 'pickle')
         self.assertEqual(p.name, 'hello')
-        self.assert_(p.original is a)
+        self.assertTrue(p.original is a)
 
 class TestLoading(unittest.TestCase):
 
@@ -284,7 +284,7 @@ class TestAppSupport(unittest.TestCase):
     def test_startApplication(self):
         appl = service.Application("lala")
         app.startApplication(appl, 0)
-        self.assert_(service.IService(appl).running)
+        self.assertTrue(service.IService(appl).running)
 
 
 class Foo(basic.LineReceiver):
@@ -349,7 +349,7 @@ class TestInternet2(unittest.TestCase):
         t = internet.UDPServer(0, p)
         t.startService()
         num = t._port.getHost().port
-        self.assertNotEquals(num, 0)
+        self.assertNotEqual(num, 0)
         def onStop(ignored):
             t = internet.UDPServer(num, p)
             t.startService()
@@ -431,23 +431,23 @@ class TestInternet2(unittest.TestCase):
         factory.protocol = wire.Echo
         t = internet.UNIXServer('echo.skt', factory)
         t.startService()
-        self.failIfIdentical(t._port, None)
+        self.assertIsNot(t._port, None)
         t1 = copy.copy(t)
-        self.assertIdentical(t1._port, None)
+        self.assertIs(t1._port, None)
         t.stopService()
-        self.assertIdentical(t._port, None)
-        self.failIf(t.running)
+        self.assertIs(t._port, None)
+        self.assertFalse(t.running)
 
         factory = protocol.ClientFactory()
         factory.protocol = wire.Echo
         t = internet.UNIXClient('echo.skt', factory)
         t.startService()
-        self.failIfIdentical(t._connection, None)
+        self.assertIsNot(t._connection, None)
         t1 = copy.copy(t)
-        self.assertIdentical(t1._connection, None)
+        self.assertIs(t1._connection, None)
         t.stopService()
-        self.assertIdentical(t._connection, None)
-        self.failIf(t.running)
+        self.assertIs(t._connection, None)
+        self.assertFalse(t.running)
 
     def testStoppingServer(self):
         if not interfaces.IReactorUNIX(reactor, None):
@@ -457,7 +457,7 @@ class TestInternet2(unittest.TestCase):
         t = internet.UNIXServer('echo.skt', factory)
         t.startService()
         t.stopService()
-        self.failIf(t.running)
+        self.assertFalse(t.running)
         factory = protocol.ClientFactory()
         d = defer.Deferred()
         factory.clientConnectionFailed = lambda *args: d.callback(None)
@@ -472,7 +472,7 @@ class TestInternet2(unittest.TestCase):
         t0.stopService()
 
         t = pickle.loads(s)
-        self.failIf(t.running)
+        self.assertFalse(t.running)
 
     def testBrokenTimer(self):
         d = defer.Deferred()
@@ -634,7 +634,7 @@ class TestTimerBasic(unittest.TestCase):
         self.t.startService()
         d.addCallback(self.assertEqual, 'hello')
         d.addCallback(lambda x : self.t.stopService())
-        d.addCallback(lambda x : self.failIf(self.t.running))
+        d.addCallback(lambda x : self.assertFalse(self.t.running))
         return d
 
     def tearDown(self):
@@ -654,7 +654,7 @@ class TestTimerBasic(unittest.TestCase):
             self.assertEqual(result, 'foo')
             return self.t.stopService()
         def onFirstStop(ignored):
-            self.failIf(self.t.running)
+            self.assertFalse(self.t.running)
             self.t.startService()
             return d2
         def onSecondResult(result):
diff --git a/twisted/test/test_banana.py b/twisted/test/test_banana.py
index 88ad2e6..4551306 100644
--- a/twisted/test/test_banana.py
+++ b/twisted/test/test_banana.py
@@ -186,11 +186,11 @@ class BananaTestCase(unittest.TestCase):
     def testOversizedList(self):
         data = '\x02\x01\x01\x01\x01\x80'
         # list(size=0x0101010102, about 4.3e9)
-        self.failUnlessRaises(banana.BananaError, self.feed, data)
+        self.assertRaises(banana.BananaError, self.feed, data)
     def testOversizedString(self):
         data = '\x02\x01\x01\x01\x01\x82'
         # string(size=0x0101010102, about 4.3e9)
-        self.failUnlessRaises(banana.BananaError, self.feed, data)
+        self.assertRaises(banana.BananaError, self.feed, data)
 
     def testCrashString(self):
         crashString = '\x00\x00\x00\x00\x04\x80'
@@ -204,7 +204,7 @@ class BananaTestCase(unittest.TestCase):
         # Instead, it takes up large amounts of CPU and memory...
         #crashString = '\x00\x00\x00\x00\x01\x80'
         # print repr(crashString)
-        #self.failUnlessRaises(Exception, self.enc.dataReceived, crashString)
+        #self.assertRaises(Exception, self.enc.dataReceived, crashString)
         try:
             # should now raise MemoryError
             self.enc.dataReceived(crashString)
diff --git a/twisted/test/test_compat.py b/twisted/test/test_compat.py
index aae49a7..089d5e6 100644
--- a/twisted/test/test_compat.py
+++ b/twisted/test/test_compat.py
@@ -34,7 +34,7 @@ class CompatTestCase(unittest.TestCase):
         d2 = dict(d1)
         self.assertEqual(d1, d2)
         d1['a'] = 'c'
-        self.assertNotEquals(d1, d2)
+        self.assertNotEqual(d1, d2)
         d2 = dict(d1.items())
         self.assertEqual(d1, d2)
 
@@ -80,11 +80,11 @@ class CompatTestCase(unittest.TestCase):
         self.assertEqual(lst1, lst2)
 
     def testIsinstance(self):
-        self.assert_(isinstance(u'hi', types.StringTypes))
-        self.assert_(isinstance(self, unittest.TestCase))
+        self.assertTrue(isinstance(u'hi', types.StringTypes))
+        self.assertTrue(isinstance(self, unittest.TestCase))
         # I'm pretty sure it's impossible to implement this
         # without replacing isinstance on 2.2 as well :(
-        # self.assert_(isinstance({}, dict))
+        # self.assertTrue(isinstance({}, dict))
 
     def testStrip(self):
         self.assertEqual(' x '.lstrip(' '), 'x ')
diff --git a/twisted/test/test_cooperator.py b/twisted/test/test_cooperator.py
index 260ce03..307d19f 100644
--- a/twisted/test/test_cooperator.py
+++ b/twisted/test/test_cooperator.py
@@ -206,7 +206,7 @@ class TestCooperator(unittest.TestCase):
         # about this, so we have to carefully clean up after ourselves.
         c._tick()
         c.stop()
-        self.failUnless(_TPF.stopped)
+        self.assertTrue(_TPF.stopped)
         self.assertEqual(output, range(10))
 
 
@@ -227,7 +227,7 @@ class TestCooperator(unittest.TestCase):
                 return '<FakeCall %r>' % (self.func,)
 
         def sched(f):
-            self.failIf(calls, repr(calls))
+            self.assertFalse(calls, repr(calls))
             calls.append(FakeCall(f))
             return calls[-1]
 
@@ -467,7 +467,7 @@ class RunStateTests(unittest.TestCase):
         self.deferNext()
         self.scheduler.pump()
         self.assertEqual(len(self.work), 1)
-        self.failUnless(isinstance(self.work[0], defer.Deferred))
+        self.assertTrue(isinstance(self.work[0], defer.Deferred))
         self.scheduler.pump()
         self.assertEqual(len(self.work), 1)
         self.task.pause()
@@ -519,8 +519,8 @@ class RunStateTests(unittest.TestCase):
         self.assertEqual(len(results1), 1)
         self.assertEqual(len(results2), 1)
 
-        self.assertIdentical(results1[0], self.task._iterator)
-        self.assertIdentical(results2[0], self.task._iterator)
+        self.assertIs(results1[0], self.task._iterator)
+        self.assertIs(results2[0], self.task._iterator)
 
         self.assertEqual(final1, [1])
         self.assertEqual(final2, [2])
diff --git a/twisted/test/test_defer.py b/twisted/test/test_defer.py
index f6f1596..77a6c48 100644
--- a/twisted/test/test_defer.py
+++ b/twisted/test/test_defer.py
@@ -140,7 +140,7 @@ class DeferredTestCase(unittest.TestCase):
         aFailure = result[0]
 
         # the type of the failure is a FirstError
-        self.failUnless(issubclass(aFailure.type, defer.FirstError),
+        self.assertTrue(issubclass(aFailure.type, defer.FirstError),
             'issubclass(aFailure.type, defer.FirstError) failed: '
             "failure's type is %r" % (aFailure.type,)
         )
@@ -242,12 +242,12 @@ class DeferredTestCase(unittest.TestCase):
         l = []
         d = defer.Deferred().addCallback(lambda _: 1 / 0).addErrback(l.append)
         d.callback(1)
-        self.assert_(isinstance(l[0].value, ZeroDivisionError))
+        self.assertTrue(isinstance(l[0].value, ZeroDivisionError))
         l = []
         d = defer.Deferred().addCallback(
             lambda _: failure.Failure(ZeroDivisionError())).addErrback(l.append)
         d.callback(1)
-        self.assert_(isinstance(l[0].value, ZeroDivisionError))
+        self.assertTrue(isinstance(l[0].value, ZeroDivisionError))
 
     def testUnpauseBeforeCallback(self):
         d = defer.Deferred()
@@ -317,7 +317,7 @@ class DeferredTestCase(unittest.TestCase):
         dl = [defer.succeed(1), defer.fail(ValueError)]
         defer.gatherResults(dl).addErrback(l.append)
         self.assertEqual(len(l), 1)
-        self.assert_(isinstance(l[0], failure.Failure))
+        self.assertTrue(isinstance(l[0], failure.Failure))
         # get rid of error
         dl[1].addErrback(lambda e: 1)
 
@@ -592,9 +592,9 @@ class DeferredTestCase(unittest.TestCase):
 
         results = []
         first.addCallback(results.append)
-        self.assertIdentical(results[0], None)
+        self.assertIs(results[0], None)
         second.addCallback(results.append)
-        self.assertIdentical(results[1], result)
+        self.assertIs(results[1], result)
 
 
     def test_asynchronousImplicitChain(self):
@@ -638,7 +638,7 @@ class DeferredTestCase(unittest.TestCase):
         second.callback(None)
         firstResult = []
         first.addCallback(firstResult.append)
-        self.assertIdentical(firstResult[0], None)
+        self.assertIs(firstResult[0], None)
         return second
 
 
@@ -834,7 +834,7 @@ class DeferredTestCase(unittest.TestCase):
         a = defer.Deferred()
         b = defer.Deferred()
         b.chainDeferred(a)
-        self.assertIdentical(a._chainedTo, b)
+        self.assertIs(a._chainedTo, b)
 
 
     def test_explicitChainClearedWhenResolved(self):
@@ -850,7 +850,7 @@ class DeferredTestCase(unittest.TestCase):
         b = defer.Deferred()
         b.chainDeferred(a)
         b.callback(None)
-        self.assertIdentical(a._chainedTo, None)
+        self.assertIs(a._chainedTo, None)
 
 
     def test_chainDeferredRecordsImplicitChain(self):
@@ -863,7 +863,7 @@ class DeferredTestCase(unittest.TestCase):
         b = defer.Deferred()
         a.addCallback(lambda ignored: b)
         a.callback(None)
-        self.assertIdentical(a._chainedTo, b)
+        self.assertIs(a._chainedTo, b)
 
 
     def test_repr(self):
@@ -1010,8 +1010,8 @@ class DeferredTestCase(unittest.TestCase):
         fail = l[0]
         self.assertEqual(fail.value, exc)
         localz, globalz = fail.frames[0][-2:]
-        self.assertNotEquals([], localz)
-        self.assertNotEquals([], globalz)
+        self.assertNotEqual([], localz)
+        self.assertNotEqual([], globalz)
 
 
     def test_errorInCallbackDoesNotCaptureVars(self):
@@ -1048,8 +1048,8 @@ class DeferredTestCase(unittest.TestCase):
         d.addErrback(l.append)
         fail = l[0]
         localz, globalz = fail.frames[0][-2:]
-        self.assertNotEquals([], localz)
-        self.assertNotEquals([], globalz)
+        self.assertNotEqual([], localz)
+        self.assertNotEqual([], globalz)
 
 
 
@@ -1147,25 +1147,25 @@ class AlreadyCalledTestCase(unittest.TestCase):
         d = defer.Deferred()
         d.addCallbacks(self._callback, self._errback)
         self._call_1(d)
-        self.failUnlessRaises(defer.AlreadyCalledError, self._call_2, d)
+        self.assertRaises(defer.AlreadyCalledError, self._call_2, d)
 
     def testAlreadyCalled_CE(self):
         d = defer.Deferred()
         d.addCallbacks(self._callback, self._errback)
         self._call_1(d)
-        self.failUnlessRaises(defer.AlreadyCalledError, self._err_2, d)
+        self.assertRaises(defer.AlreadyCalledError, self._err_2, d)
 
     def testAlreadyCalled_EE(self):
         d = defer.Deferred()
         d.addCallbacks(self._callback, self._errback)
         self._err_1(d)
-        self.failUnlessRaises(defer.AlreadyCalledError, self._err_2, d)
+        self.assertRaises(defer.AlreadyCalledError, self._err_2, d)
 
     def testAlreadyCalled_EC(self):
         d = defer.Deferred()
         d.addCallbacks(self._callback, self._errback)
         self._err_1(d)
-        self.failUnlessRaises(defer.AlreadyCalledError, self._call_2, d)
+        self.assertRaises(defer.AlreadyCalledError, self._call_2, d)
 
 
     def _count(self, linetype, func, lines, expected):
@@ -1174,7 +1174,7 @@ class AlreadyCalledTestCase(unittest.TestCase):
             if (line.startswith(' %s:' % linetype) and
                 line.endswith(' %s' % func)):
                 count += 1
-        self.failUnless(count == expected)
+        self.assertTrue(count == expected)
 
     def _check(self, e, caller, invoker1, invoker2):
         # make sure the debugging information is vaguely correct
@@ -1242,7 +1242,7 @@ class AlreadyCalledTestCase(unittest.TestCase):
         try:
             self._call_2(d)
         except defer.AlreadyCalledError, e:
-            self.failIf(e.args)
+            self.assertFalse(e.args)
         else:
             self.fail("second callback failed to raise AlreadyCalledError")
 
@@ -1351,7 +1351,7 @@ class DeferredCancellerTest(unittest.TestCase):
         d.callback(None)
         # Cancel should have no effect.
         d.cancel()
-        self.assertIdentical(currentFailure, self.errbackResults)
+        self.assertIs(currentFailure, self.errbackResults)
 
 
     def test_noCancellerMultipleCancelsAfterCancelAndErrback(self):
@@ -1369,7 +1369,7 @@ class DeferredCancellerTest(unittest.TestCase):
         # I.e., we should still have a CancelledError.
         self.assertEqual(self.errbackResults.type, defer.CancelledError)
         d.cancel()
-        self.assertIdentical(currentFailure, self.errbackResults)
+        self.assertIs(currentFailure, self.errbackResults)
 
 
     def test_noCancellerMultipleCancel(self):
@@ -1384,7 +1384,7 @@ class DeferredCancellerTest(unittest.TestCase):
         self.assertEqual(self.errbackResults.type, defer.CancelledError)
         currentFailure = self.errbackResults
         d.cancel()
-        self.assertIdentical(currentFailure, self.errbackResults)
+        self.assertIs(currentFailure, self.errbackResults)
 
 
     def test_cancellerMultipleCancel(self):
@@ -1404,7 +1404,7 @@ class DeferredCancellerTest(unittest.TestCase):
         self.assertEqual(self.errbackResults.type, defer.CancelledError)
         currentFailure = self.errbackResults
         d.cancel()
-        self.assertIdentical(currentFailure, self.errbackResults)
+        self.assertIs(currentFailure, self.errbackResults)
         self.assertEqual(self.cancellerCallCount, 1)
 
 
@@ -1433,7 +1433,7 @@ class DeferredCancellerTest(unittest.TestCase):
         Verify that a canceller is given the correct deferred argument.
         """
         def cancel(d1):
-            self.assertIdentical(d1, d)
+            self.assertIs(d1, d)
         d = defer.Deferred(canceller=cancel)
         d.addCallbacks(self._callback, self._errback)
         d.cancel()
@@ -1511,7 +1511,7 @@ class DeferredCancellerTest(unittest.TestCase):
         def innerCancel(d):
             self.cancellerCallCount += 1
         def cancel(d):
-            self.assert_(False)
+            self.assertTrue(False)
 
         b = defer.Deferred(canceller=innerCancel)
         a = defer.Deferred(canceller=cancel)
@@ -1659,7 +1659,7 @@ class DeferredTestCaseII(unittest.TestCase):
         self.assertEqual([], res)
 
     def tearDown(self):
-        self.failUnless(self.callbackRan, "Callback was never run.")
+        self.assertTrue(self.callbackRan, "Callback was never run.")
 
 class OtherPrimitives(unittest.TestCase):
     def _incr(self, result):
@@ -1671,19 +1671,19 @@ class OtherPrimitives(unittest.TestCase):
     def testLock(self):
         lock = defer.DeferredLock()
         lock.acquire().addCallback(self._incr)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 1)
 
         lock.acquire().addCallback(self._incr)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 1)
 
         lock.release()
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 2)
 
         lock.release()
-        self.failIf(lock.locked)
+        self.assertFalse(lock.locked)
         self.assertEqual(self.counter, 2)
 
         self.assertRaises(TypeError, lock.run)
@@ -1697,18 +1697,18 @@ class OtherPrimitives(unittest.TestCase):
             return controlDeferred
 
         resultDeferred = lock.run(helper, self=self, b=firstUnique)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.b, firstUnique)
 
         resultDeferred.addCallback(lambda x: setattr(self, 'result', x))
 
         lock.acquire().addCallback(self._incr)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 2)
 
         controlDeferred.callback(secondUnique)
         self.assertEqual(self.result, secondUnique)
-        self.failUnless(lock.locked)
+        self.assertTrue(lock.locked)
         self.assertEqual(self.counter, 3)
 
         d = lock.acquire().addBoth(lambda x: setattr(self, 'result', x))
@@ -1716,7 +1716,7 @@ class OtherPrimitives(unittest.TestCase):
         self.assertEqual(self.result.type, defer.CancelledError)
 
         lock.release()
-        self.failIf(lock.locked)
+        self.assertFalse(lock.locked)
 
 
     def test_cancelLockAfterAcquired(self):
@@ -1925,7 +1925,7 @@ class DeferredFilesystemLockTestCase(unittest.TestCase):
         Test that the lock can not be acquired when the lock is held
         for longer than the timeout.
         """
-        self.failUnless(self.lock.lock())
+        self.assertTrue(self.lock.lock())
 
         d = self.lock.deferUntilLocked(timeout=5.5)
         self.assertFailure(d, defer.TimeoutError)
@@ -1944,7 +1944,7 @@ class DeferredFilesystemLockTestCase(unittest.TestCase):
             f.trap(defer.TimeoutError)
             self.fail("Should not have timed out")
 
-        self.failUnless(self.lock.lock())
+        self.assertTrue(self.lock.lock())
 
         self.clock.callLater(1, self.lock.unlock)
         d = self.lock.deferUntilLocked(timeout=10)
diff --git a/twisted/test/test_dirdbm.py b/twisted/test/test_dirdbm.py
index 8bd240f..b9710dd 100644
--- a/twisted/test/test_dirdbm.py
+++ b/twisted/test/test_dirdbm.py
@@ -109,7 +109,7 @@ class DirDbmTestCase(unittest.TestCase):
         # of this test. Thus we keep the range of acceptability to 3 seconds time.
         # -warner
         self.dbm["k"] = "v"
-        self.assert_(abs(time.time() - self.dbm.getModificationTime("k")) <= 3)
+        self.assertTrue(abs(time.time() - self.dbm.getModificationTime("k")) <= 3)
 
 
     def testRecovery(self):
diff --git a/twisted/test/test_doc.py b/twisted/test/test_doc.py
index 795fd87..f4902f9 100644
--- a/twisted/test/test_doc.py
+++ b/twisted/test/test_doc.py
@@ -51,7 +51,7 @@ class DocCoverage(unittest.TestCase):
                 pass
             else:
                 docless.extend(self.modulesInPackage(packageName, package))
-        self.failIf(docless, "No docstrings in module files:\n"
+        self.assertFalse(docless, "No docstrings in module files:\n"
                     "%s" % ('\n'.join(map(errorInFile, docless)),))
 
 
@@ -96,7 +96,7 @@ class DocCoverage(unittest.TestCase):
             else:
                 if not inspect.getdoc(package):
                     docless.append(package.__file__.replace('.pyc','.py'))
-        self.failIf(docless, "No docstrings for package files\n"
+        self.assertFalse(docless, "No docstrings for package files\n"
                     "%s" % ('\n'.join(map(errorInFile, docless),)))
 
 
diff --git a/twisted/test/test_epoll.py b/twisted/test/test_epoll.py
index b96e06f..2fa83b2 100644
--- a/twisted/test/test_epoll.py
+++ b/twisted/test/test_epoll.py
@@ -112,7 +112,7 @@ class EPoll(unittest.TestCase):
         now = time.time()
         events = untilConcludes(p.wait, 4, 1000)
         then = time.time()
-        self.failIf(then - now > 0.01)
+        self.assertFalse(then - now > 0.01)
 
         events.sort()
         expected = [(client.fileno(), _epoll.OUT),
@@ -124,8 +124,8 @@ class EPoll(unittest.TestCase):
         now = time.time()
         events = untilConcludes(p.wait, 4, 200)
         then = time.time()
-        self.failUnless(then - now > 0.1)
-        self.failIf(events)
+        self.assertTrue(then - now > 0.1)
+        self.assertFalse(events)
 
         client.send("Hello!")
         server.send("world!!!")
@@ -133,7 +133,7 @@ class EPoll(unittest.TestCase):
         now = time.time()
         events = untilConcludes(p.wait, 4, 1000)
         then = time.time()
-        self.failIf(then - now > 0.01)
+        self.assertFalse(then - now > 0.01)
 
         events.sort()
         expected = [(client.fileno(), _epoll.IN | _epoll.OUT),
diff --git a/twisted/test/test_explorer.py b/twisted/test/test_explorer.py
index 2b8fcf0..5e28111 100644
--- a/twisted/test/test_explorer.py
+++ b/twisted/test/test_explorer.py
@@ -95,7 +95,7 @@ class FIXME_Watch:
         testThing.someAttr = 'someValue'
 
         self.assertEqual(testThing.someAttr, 'someValue')
-        self.failUnless(self.watcher.len())
+        self.assertTrue(self.watcher.len())
         olink = self.watcher.links[-1]
         self.assertEqual(olink.id, id(testThing))
 
@@ -110,7 +110,7 @@ class FIXME_Watch:
         testThing.someAttr = 'ZORT'
 
         self.assertEqual(testThing.someAttr, 'TROZ')
-        self.failUnless(self.watcher.len())
+        self.assertTrue(self.watcher.len())
         olink = self.watcher.links[-1]
         self.assertEqual(olink.id, id(testThing))
 
@@ -126,7 +126,7 @@ class FIXME_Watch:
             rval = testThing.bip()
             self.assertEqual(rval, ('pencil',))
 
-            self.failUnless(self.watcher.len())
+            self.assertTrue(self.watcher.len())
             olink = self.watcher.links[-1]
             self.assertEqual(olink.id, id(testThing))
 
@@ -166,7 +166,7 @@ class TestBrowseFunction(unittest.TestCase):
 
             self.assertEqual(xplorer.id, id(f))
 
-            self.failUnless(isinstance(xplorer, explorer.ExplorerFunction))
+            self.assertTrue(isinstance(xplorer, explorer.ExplorerFunction))
 
             self.assertEqual(xplorer.name, f_name)
 
@@ -199,8 +199,8 @@ class TestBrowseFunction(unittest.TestCase):
         signature = xplorer.signature
 
         self.assertEqual(signature.name, expected_names)
-        self.failUnless(signature.is_varlist(0))
-        self.failUnless(signature.is_keyword(1))
+        self.assertTrue(signature.is_varlist(0))
+        self.assertTrue(signature.is_keyword(1))
 
     def test_signature_crazy(self):
         """Testing function with crazy signature.
@@ -217,8 +217,8 @@ class TestBrowseFunction(unittest.TestCase):
 
         # The name of the first argument seems to be indecipherable,
         # but make sure it has one (and no default).
-        self.failUnless(signature.get_name(0))
-        self.failUnless(not signature.get_default(0)[0])
+        self.assertTrue(signature.get_name(0))
+        self.assertTrue(not signature.get_default(0)[0])
 
         self.assertEqual(signature.get_name(1), 'c')
 
@@ -230,7 +230,7 @@ class TestBrowseFunction(unittest.TestCase):
         self.assertEqual(arg_2_default, range(4))
 
         self.assertEqual(signature.get_name(3), 'kw')
-        self.failUnless(signature.is_keyword(3))
+        self.assertTrue(signature.is_keyword(3))
 
 if __name__ == '__main__':
     unittest.main()
diff --git a/twisted/test/test_factories.py b/twisted/test/test_factories.py
index 8ffb4da..1084dbf 100644
--- a/twisted/test/test_factories.py
+++ b/twisted/test/test_factories.py
@@ -105,7 +105,7 @@ class ReconnectingFactoryTestCase(TestCase):
                           "Number of successful connections incorrect %d" %
                           f.connections)
         self.assertEqual(f.allMessages, [Out.msgs] * 2)
-        self.failIf(c.continueTrying, "stopTrying never called or ineffective")
+        self.assertFalse(c.continueTrying, "stopTrying never called or ineffective")
 
 
     def test_stopTryingDoesNotReconnect(self):
@@ -162,7 +162,7 @@ class ReconnectingFactoryTestCase(TestCase):
         original = ReconnectingClientFactory()
         original.clock = clock
         reconstituted = pickle.loads(pickle.dumps(original))
-        self.assertIdentical(reconstituted.clock, None)
+        self.assertIs(reconstituted.clock, None)
 
 
     def test_deserializationResetsParameters(self):
diff --git a/twisted/test/test_failure.py b/twisted/test/test_failure.py
index 8a3670e..092e7dd 100644
--- a/twisted/test/test_failure.py
+++ b/twisted/test/test_failure.py
@@ -130,7 +130,7 @@ class FailureTestCase(unittest.TestCase):
         linesWithVars = [line for line in out.getvalue().splitlines()
                          if line.startswith('  ')]
         self.assertEqual([], linesWithVars)
-        self.assertSubstring(
+        self.assertIn(
             'Capture of Locals and Globals disabled', out.getvalue())
 
 
diff --git a/twisted/test/test_fdesc.py b/twisted/test/test_fdesc.py
index 285b9cc..3d65e51 100644
--- a/twisted/test/test_fdesc.py
+++ b/twisted/test/test_fdesc.py
@@ -75,7 +75,7 @@ class ReadWriteTestCase(unittest.TestCase):
         with its return value are seen by L{fdesc.readFromFD}.
         """
         n = self.write("hello")
-        self.failUnless(n > 0)
+        self.assertTrue(n > 0)
         s = self.read()
         self.assertEqual(len(s), n)
         self.assertEqual("hello"[:n], s)
@@ -88,7 +88,7 @@ class ReadWriteTestCase(unittest.TestCase):
         """
         orig = "0123456879" * 10000
         written = self.write(orig)
-        self.failUnless(written > 0)
+        self.assertTrue(written > 0)
         result = []
         resultlength = 0
         i = 0
diff --git a/twisted/test/test_ftp.py b/twisted/test/test_ftp.py
index 8058590..4210b23 100644
--- a/twisted/test/test_ftp.py
+++ b/twisted/test/test_ftp.py
@@ -196,7 +196,7 @@ class BasicFTPServerTestCase(FTPServerTestCase):
         # Issue commands, check responses
         def checkResponse(exception):
             failureResponseLines = exception.args[0]
-            self.failUnless(failureResponseLines[-1].startswith("530"),
+            self.assertTrue(failureResponseLines[-1].startswith("530"),
                             "Response didn't start with 530: %r"
                             % (failureResponseLines[-1],))
         deferreds = []
@@ -742,7 +742,7 @@ class DTPFactoryTests(unittest.TestCase):
         self.assertIsInstance(protocol, ftp.DTP)
 
         # A subsequent call returns None.
-        self.assertIdentical(self.factory.buildProtocol(None), None)
+        self.assertIs(self.factory.buildProtocol(None), None)
 
 
     def test_timeoutAfterConnection(self):
@@ -771,7 +771,7 @@ class DTPFactoryTests(unittest.TestCase):
         self.reactor.advance(10)
 
         # Try to get a protocol - we should not be able to.
-        self.assertIdentical(self.factory.buildProtocol(None), None)
+        self.assertIs(self.factory.buildProtocol(None), None)
 
         # Make sure the Deferred is doing the right thing.
         return d
@@ -854,16 +854,16 @@ class FTPFileListingTests(unittest.TestCase):
         # This example line taken from the docstring for FTPFileListProtocol
         line = '-rw-r--r--   1 root     other        531 Jan 29 03:26 README'
         def check(((file,), other)):
-            self.failIf(other, 'unexpect unparsable lines: %s' % repr(other))
-            self.failUnless(file['filetype'] == '-', 'misparsed fileitem')
-            self.failUnless(file['perms'] == 'rw-r--r--', 'misparsed perms')
-            self.failUnless(file['owner'] == 'root', 'misparsed fileitem')
-            self.failUnless(file['group'] == 'other', 'misparsed fileitem')
-            self.failUnless(file['size'] == 531, 'misparsed fileitem')
-            self.failUnless(file['date'] == 'Jan 29 03:26', 'misparsed fileitem')
-            self.failUnless(file['filename'] == 'README', 'misparsed fileitem')
-            self.failUnless(file['nlinks'] == 1, 'misparsed nlinks')
-            self.failIf(file['linktarget'], 'misparsed linktarget')
+            self.assertFalse(other, 'unexpect unparsable lines: %s' % repr(other))
+            self.assertTrue(file['filetype'] == '-', 'misparsed fileitem')
+            self.assertTrue(file['perms'] == 'rw-r--r--', 'misparsed perms')
+            self.assertTrue(file['owner'] == 'root', 'misparsed fileitem')
+            self.assertTrue(file['group'] == 'other', 'misparsed fileitem')
+            self.assertTrue(file['size'] == 531, 'misparsed fileitem')
+            self.assertTrue(file['date'] == 'Jan 29 03:26', 'misparsed fileitem')
+            self.assertTrue(file['filename'] == 'README', 'misparsed fileitem')
+            self.assertTrue(file['nlinks'] == 1, 'misparsed nlinks')
+            self.assertFalse(file['linktarget'], 'misparsed linktarget')
         return self.getFilesForLines([line]).addCallback(check)
 
     def testVariantLines(self):
@@ -871,33 +871,33 @@ class FTPFileListingTests(unittest.TestCase):
         line2 = 'lrw-r--r--   1 root     other          1 Jan 29 03:26 B -> A'
         line3 = 'woohoo! '
         def check(((file1, file2), (other,))):
-            self.failUnless(other == 'woohoo! \r', 'incorrect other line')
+            self.assertTrue(other == 'woohoo! \r', 'incorrect other line')
             # file 1
-            self.failUnless(file1['filetype'] == 'd', 'misparsed fileitem')
-            self.failUnless(file1['perms'] == 'rw-r--r--', 'misparsed perms')
-            self.failUnless(file1['owner'] == 'root', 'misparsed owner')
-            self.failUnless(file1['group'] == 'other', 'misparsed group')
-            self.failUnless(file1['size'] == 531, 'misparsed size')
-            self.failUnless(file1['date'] == 'Jan  9  2003', 'misparsed date')
-            self.failUnless(file1['filename'] == 'A', 'misparsed filename')
-            self.failUnless(file1['nlinks'] == 2, 'misparsed nlinks')
-            self.failIf(file1['linktarget'], 'misparsed linktarget')
+            self.assertTrue(file1['filetype'] == 'd', 'misparsed fileitem')
+            self.assertTrue(file1['perms'] == 'rw-r--r--', 'misparsed perms')
+            self.assertTrue(file1['owner'] == 'root', 'misparsed owner')
+            self.assertTrue(file1['group'] == 'other', 'misparsed group')
+            self.assertTrue(file1['size'] == 531, 'misparsed size')
+            self.assertTrue(file1['date'] == 'Jan  9  2003', 'misparsed date')
+            self.assertTrue(file1['filename'] == 'A', 'misparsed filename')
+            self.assertTrue(file1['nlinks'] == 2, 'misparsed nlinks')
+            self.assertFalse(file1['linktarget'], 'misparsed linktarget')
             # file 2
-            self.failUnless(file2['filetype'] == 'l', 'misparsed fileitem')
-            self.failUnless(file2['perms'] == 'rw-r--r--', 'misparsed perms')
-            self.failUnless(file2['owner'] == 'root', 'misparsed owner')
-            self.failUnless(file2['group'] == 'other', 'misparsed group')
-            self.failUnless(file2['size'] == 1, 'misparsed size')
-            self.failUnless(file2['date'] == 'Jan 29 03:26', 'misparsed date')
-            self.failUnless(file2['filename'] == 'B', 'misparsed filename')
-            self.failUnless(file2['nlinks'] == 1, 'misparsed nlinks')
-            self.failUnless(file2['linktarget'] == 'A', 'misparsed linktarget')
+            self.assertTrue(file2['filetype'] == 'l', 'misparsed fileitem')
+            self.assertTrue(file2['perms'] == 'rw-r--r--', 'misparsed perms')
+            self.assertTrue(file2['owner'] == 'root', 'misparsed owner')
+            self.assertTrue(file2['group'] == 'other', 'misparsed group')
+            self.assertTrue(file2['size'] == 1, 'misparsed size')
+            self.assertTrue(file2['date'] == 'Jan 29 03:26', 'misparsed date')
+            self.assertTrue(file2['filename'] == 'B', 'misparsed filename')
+            self.assertTrue(file2['nlinks'] == 1, 'misparsed nlinks')
+            self.assertTrue(file2['linktarget'] == 'A', 'misparsed linktarget')
         return self.getFilesForLines([line1, line2, line3]).addCallback(check)
 
     def testUnknownLine(self):
         def check((files, others)):
-            self.failIf(files, 'unexpected file entries')
-            self.failUnless(others == ['ABC\r', 'not a file\r'],
+            self.assertFalse(files, 'unexpected file entries')
+            self.assertTrue(others == ['ABC\r', 'not a file\r'],
                             'incorrect unparsable lines: %s' % repr(others))
         return self.getFilesForLines(['ABC', 'not a file']).addCallback(check)
 
@@ -913,9 +913,9 @@ class FTPFileListingTests(unittest.TestCase):
 
         def check(ignored):
             file = fileList.files[0]
-            self.failUnless(file['size'] == 531, 'misparsed fileitem')
-            self.failUnless(file['date'] == 'Jan 29 2003', 'misparsed fileitem')
-            self.failUnless(file['filename'] == 'README', 'misparsed fileitem')
+            self.assertTrue(file['size'] == 531, 'misparsed fileitem')
+            self.assertTrue(file['date'] == 'Jan 29 2003', 'misparsed fileitem')
+            self.assertTrue(file['filename'] == 'README', 'misparsed fileitem')
 
         d = loopback.loopbackAsync(PrintLine(), fileList)
         return d.addCallback(check)
@@ -970,7 +970,7 @@ class FTPClientTests(unittest.TestCase):
         d.addErrback(_eb)
         from twisted.internet.main import CONNECTION_LOST
         ftpClient.connectionLost(failure.Failure(CONNECTION_LOST))
-        self.failUnless(m, m)
+        self.assertTrue(m, m)
         return d
 
 
@@ -1253,7 +1253,7 @@ class FTPClientTestCase(unittest.TestCase):
         self.client.lineReceived('200 PORT OK')
         self.assertEqual(self.transport.value(), 'RETR spam\r\n')
 
-        self.assert_(l)
+        self.assertTrue(l)
         l[0].loseConnection()
         self.transport.loseConnection()
         self.assertFailure(d, ftp.ConnectionLost)
diff --git a/twisted/test/test_internet.py b/twisted/test/test_internet.py
index 0e14bb4..a988758 100644
--- a/twisted/test/test_internet.py
+++ b/twisted/test/test_internet.py
@@ -783,7 +783,7 @@ class TimeTestCase(unittest.TestCase):
     def testCallLaterTime(self):
         d = reactor.callLater(10, lambda: None)
         try:
-            self.failUnless(d.getTime() - (time.time() + 10) < 1)
+            self.assertTrue(d.getTime() - (time.time() + 10) < 1)
         finally:
             d.cancel()
 
@@ -894,7 +894,7 @@ class CallFromThreadTests(unittest.TestCase):
 
     def _callFromThreadCallback2(self, d):
         try:
-            self.assert_(self.stopped)
+            self.assertTrue(self.stopped)
         except:
             # Send the error to the deferred
             d.errback()
@@ -938,7 +938,7 @@ class DelayedTestCase(unittest.TestCase):
                 missing.append(dc)
         if missing:
             self.finished = 1
-        self.failIf(missing, "Should have been missing no calls, instead was missing " + repr(missing))
+        self.assertFalse(missing, "Should have been missing no calls, instead was missing " + repr(missing))
 
     def callback(self, tag):
         del self.timers[tag]
@@ -1169,7 +1169,7 @@ class ProtocolTestCase(unittest.TestCase):
         factory = MyFactory()
         protocol = factory.buildProtocol(None)
         self.assertEqual(protocol.factory, factory)
-        self.assert_( isinstance(protocol, factory.protocol) )
+        self.assertTrue( isinstance(protocol, factory.protocol) )
 
 
 class DummyProducer(object):
diff --git a/twisted/test/test_jelly.py b/twisted/test/test_jelly.py
index 132e05f..182e932 100644
--- a/twisted/test/test_jelly.py
+++ b/twisted/test/test_jelly.py
@@ -181,7 +181,7 @@ class JellyTestCase(unittest.TestCase):
         c = jelly.jelly(n)
         m = jelly.unjelly(c)
         self.assertIsInstance(m, D)
-        self.assertIdentical(m.n2, m.n3)
+        self.assertIs(m.n2, m.n3)
 
 
     def test_newStyleWithSlots(self):
@@ -234,7 +234,7 @@ class JellyTestCase(unittest.TestCase):
         c = jelly.jelly(input)
         output = jelly.unjelly(c)
         self.assertEqual(input, output)
-        self.assertNotIdentical(input, output)
+        self.assertIsNot(input, output)
 
 
     def test_decimal(self):
@@ -250,7 +250,7 @@ class JellyTestCase(unittest.TestCase):
         c = jelly.jelly(inputList)
         output = jelly.unjelly(c)
         self.assertEqual(inputList, output)
-        self.assertNotIdentical(inputList, output)
+        self.assertIsNot(inputList, output)
 
 
     decimalData = ['list', ['decimal', 995, -2], ['decimal', 0, 0],
@@ -322,7 +322,7 @@ class JellyTestCase(unittest.TestCase):
         inputList = [set([1, 2, 3])]
         output = jelly.unjelly(jelly.jelly(inputList))
         self.assertEqual(inputList, output)
-        self.assertNotIdentical(inputList, output)
+        self.assertIsNot(inputList, output)
 
 
     def test_frozenset(self):
@@ -334,7 +334,7 @@ class JellyTestCase(unittest.TestCase):
         inputList = [frozenset([1, 2, 3])]
         output = jelly.unjelly(jelly.jelly(inputList))
         self.assertEqual(inputList, output)
-        self.assertNotIdentical(inputList, output)
+        self.assertIsNot(inputList, output)
 
 
     def test_setSecurity(self):
@@ -396,12 +396,12 @@ class JellyTestCase(unittest.TestCase):
         """
         Simplest test case.
         """
-        self.failUnless(SimpleJellyTest('a', 'b').isTheSameAs(
+        self.assertTrue(SimpleJellyTest('a', 'b').isTheSameAs(
                         SimpleJellyTest('a', 'b')))
         a = SimpleJellyTest(1, 2)
         cereal = jelly.jelly(a)
         b = jelly.unjelly(cereal)
-        self.failUnless(a.isTheSameAs(b))
+        self.assertTrue(a.isTheSameAs(b))
 
 
     def test_identity(self):
@@ -412,12 +412,12 @@ class JellyTestCase(unittest.TestCase):
         y = (x)
         x.append(y)
         x.append(y)
-        self.assertIdentical(x[0], x[1])
-        self.assertIdentical(x[0][0], x)
+        self.assertIs(x[0], x[1])
+        self.assertIs(x[0][0], x)
         s = jelly.jelly(x)
         z = jelly.unjelly(s)
-        self.assertIdentical(z[0], z[1])
-        self.assertIdentical(z[0][0], z)
+        self.assertIs(z[0], z[1])
+        self.assertIs(z[0][0], z)
 
 
     def test_unicode(self):
@@ -433,8 +433,8 @@ class JellyTestCase(unittest.TestCase):
         reref.append(toplevelTuple)
         s = jelly.jelly(toplevelTuple)
         z = jelly.unjelly(s)
-        self.assertIdentical(z[0]['list'], z[1])
-        self.assertIdentical(z[0]['list'][0], z)
+        self.assertIs(z[0]['list'], z[1])
+        self.assertIs(z[0]['list'][0], z)
 
 
     def test_moreReferences(self):
@@ -443,7 +443,7 @@ class JellyTestCase(unittest.TestCase):
         a.append((t,))
         s = jelly.jelly(t)
         z = jelly.unjelly(s)
-        self.assertIdentical(z[0][0][0], z)
+        self.assertIs(z[0][0][0], z)
 
 
     def test_typeSecurity(self):
@@ -458,7 +458,7 @@ class JellyTestCase(unittest.TestCase):
     def test_newStyleClasses(self):
         j = jelly.jelly(D)
         uj = jelly.unjelly(D)
-        self.assertIdentical(D, uj)
+        self.assertIs(D, uj)
 
 
     def test_lotsaTypes(self):
@@ -491,7 +491,7 @@ class JellyTestCase(unittest.TestCase):
         t3 = TupleState((t1, t2))
         d = {t1: t1, t2: t2, t3: t3, "t3": t3}
         t3prime = jelly.unjelly(jelly.jelly(d))["t3"]
-        self.assertIdentical(t3prime.other[0].other, t3prime.other[1].other)
+        self.assertIs(t3prime.other[0].other, t3prime.other[1].other)
 
 
     def test_classSecurity(self):
@@ -516,11 +516,11 @@ class JellyTestCase(unittest.TestCase):
         # now, a malicious one
         mean = jelly.jelly(a)
         self.assertRaises(jelly.InsecureJelly, jelly.unjelly, mean, taster)
-        self.assertIdentical(x.x, x.b, "Identity mismatch")
+        self.assertIs(x.x, x.b, "Identity mismatch")
         # test class serialization
         friendly = jelly.jelly(A, taster)
         x = jelly.unjelly(friendly, taster)
-        self.assertIdentical(x, A, "A came back: %s" % x)
+        self.assertIs(x, A, "A came back: %s" % x)
 
 
     def test_unjellyable(self):
@@ -560,9 +560,9 @@ class JellyTestCase(unittest.TestCase):
         jel = jelly.jelly(a, persistentStore = persistentStore)
         x = jelly.unjelly(jel, persistentLoad = persistentLoad)
 
-        self.assertIdentical(x.b, x.c.b)
-        self.failUnless(perst[0], "persistentStore was not called.")
-        self.assertIdentical(x.b, a.b, "Persistent storage identity failure.")
+        self.assertIs(x.b, x.c.b)
+        self.assertTrue(perst[0], "persistentStore was not called.")
+        self.assertIs(x.b, a.b, "Persistent storage identity failure.")
 
 
     def test_newStyleClassesAttributes(self):
@@ -627,7 +627,7 @@ class CircularReferenceTestCase(unittest.TestCase):
         jelly.setUnjellyableForClass(ClassA, ClassA)
         jelly.setUnjellyableForClass(ClassB, ClassB)
         a = jelly.unjelly(jelly.jelly(ClassA()))
-        self.assertIdentical(a.ref.ref, a,
+        self.assertIs(a.ref.ref, a,
             "Identity not preserved in circular reference")
 
 
@@ -641,7 +641,7 @@ class CircularReferenceTestCase(unittest.TestCase):
         jelly.setUnjellyableForClass(ClassB, ClassB)
         j = jelly.jelly(a0, invoker=dummyInvoker)
         a1 = jelly.unjelly(j)
-        self.failUnlessIdentical(a1.ref.ref, a1,
+        self.assertIs(a1.ref.ref, a1,
             "Identity not preserved in circular reference")
 
 
diff --git a/twisted/test/test_log.py b/twisted/test/test_log.py
index 568a7fb..7d4005d 100644
--- a/twisted/test/test_log.py
+++ b/twisted/test/test_log.py
@@ -36,7 +36,7 @@ class LogTest(unittest.TestCase):
         i = catcher.pop()
         self.assertEqual(i["message"][0], "test")
         self.assertEqual(i["testShouldCatch"], True)
-        self.failUnless(i.has_key("time"))
+        self.assertTrue(i.has_key("time"))
         self.assertEqual(len(catcher), 0)
 
 
@@ -300,7 +300,7 @@ class LogPublisherTestCaseMixin:
         setting, if it was modified by L{setUp}.
         """
         for chunk in self.out:
-            self.failUnless(isinstance(chunk, str), "%r was not a string" % (chunk,))
+            self.assertTrue(isinstance(chunk, str), "%r was not a string" % (chunk,))
 
         if self._origEncoding is not None:
             sys.setdefaultencoding(self._origEncoding)
@@ -539,7 +539,7 @@ class FileObserverTestCase(LogPublisherTestCaseMixin, unittest.TestCase):
         self.assertIsInstance(sys.stdout, log.StdioOnnaStick)
         fakeStdout = sys.stdout
         observer = log.startLogging(sys.stdout)
-        self.assertIdentical(sys.stdout, fakeStdout)
+        self.assertIs(sys.stdout, fakeStdout)
 
 
 class PythonLoggingObserverTestCase(unittest.TestCase):
@@ -674,7 +674,7 @@ class DefaultObserverTestCase(unittest.TestCase):
         log.err(Exception(), reason)
         errors = self.flushLoggedErrors()
 
-        self.assertSubstring(reason, obs.stderr.getvalue())
+        self.assertIn(reason, obs.stderr.getvalue())
         self.assertEqual(len(errors), 1)
 
         obs.stop()
diff --git a/twisted/test/test_logfile.py b/twisted/test/test_logfile.py
index e7db238..9509ce4 100644
--- a/twisted/test/test_logfile.py
+++ b/twisted/test/test_logfile.py
@@ -49,19 +49,19 @@ class LogFileTestCase(unittest.TestCase):
         log.write("123")
         log.write("4567890")
         log.write("1" * 11)
-        self.assert_(os.path.exists("%s.1" % self.path))
-        self.assert_(not os.path.exists("%s.2" % self.path))
+        self.assertTrue(os.path.exists("%s.1" % self.path))
+        self.assertTrue(not os.path.exists("%s.2" % self.path))
         log.write('')
-        self.assert_(os.path.exists("%s.1" % self.path))
-        self.assert_(os.path.exists("%s.2" % self.path))
-        self.assert_(not os.path.exists("%s.3" % self.path))
+        self.assertTrue(os.path.exists("%s.1" % self.path))
+        self.assertTrue(os.path.exists("%s.2" % self.path))
+        self.assertTrue(not os.path.exists("%s.3" % self.path))
         log.write("3")
-        self.assert_(not os.path.exists("%s.3" % self.path))
+        self.assertTrue(not os.path.exists("%s.3" % self.path))
 
         # test manual rotation
         log.rotate()
-        self.assert_(os.path.exists("%s.3" % self.path))
-        self.assert_(not os.path.exists("%s.4" % self.path))
+        self.assertTrue(os.path.exists("%s.3" % self.path))
+        self.assertTrue(not os.path.exists("%s.4" % self.path))
         log.close()
 
         self.assertEqual(log.listLogs(), [1, 2, 3])
@@ -173,18 +173,18 @@ class LogFileTestCase(unittest.TestCase):
                               maxRotatedFiles=3)
         log.write("1" * 11)
         log.write("2" * 11)
-        self.failUnless(os.path.exists("%s.1" % self.path))
+        self.assertTrue(os.path.exists("%s.1" % self.path))
 
         log.write("3" * 11)
-        self.failUnless(os.path.exists("%s.2" % self.path))
+        self.assertTrue(os.path.exists("%s.2" % self.path))
 
         log.write("4" * 11)
-        self.failUnless(os.path.exists("%s.3" % self.path))
+        self.assertTrue(os.path.exists("%s.3" % self.path))
         self.assertEqual(file("%s.3" % self.path).read(), "1" * 11)
 
         log.write("5" * 11)
         self.assertEqual(file("%s.3" % self.path).read(), "2" * 11)
-        self.failUnless(not os.path.exists("%s.4" % self.path))
+        self.assertTrue(not os.path.exists("%s.4" % self.path))
 
     def test_fromFullPath(self):
         """
@@ -307,14 +307,14 @@ class DailyLogFileTestCase(unittest.TestCase):
         log.write("4567890")
         log._clock = 86400  # 1970/01/02 00:00.00
         log.write("1" * 11)
-        self.assert_(os.path.exists(days[0]))
-        self.assert_(not os.path.exists(days[1]))
+        self.assertTrue(os.path.exists(days[0]))
+        self.assertTrue(not os.path.exists(days[1]))
         log._clock = 172800 # 1970/01/03 00:00.00
         log.write('')
-        self.assert_(os.path.exists(days[0]))
-        self.assert_(os.path.exists(days[1]))
-        self.assert_(not os.path.exists(days[2]))
+        self.assertTrue(os.path.exists(days[0]))
+        self.assertTrue(os.path.exists(days[1]))
+        self.assertTrue(not os.path.exists(days[2]))
         log._clock = 259199 # 1970/01/03 23:59.59
         log.write("3")
-        self.assert_(not os.path.exists(days[2]))
+        self.assertTrue(not os.path.exists(days[2]))
 
diff --git a/twisted/test/test_loopback.py b/twisted/test/test_loopback.py
index f09908f..21ec9fc 100644
--- a/twisted/test/test_loopback.py
+++ b/twisted/test/test_loopback.py
@@ -100,8 +100,8 @@ class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
         server = TestProtocol()
         client = TestProtocol()
         loopback.loopbackAsync(server, client)
-        self.failIfEqual(client.transport, None)
-        self.failIfEqual(server.transport, None)
+        self.assertNotEqual(client.transport, None)
+        self.assertNotEqual(server.transport, None)
 
 
     def _hostpeertest(self, get, testServer):
@@ -126,7 +126,7 @@ class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
 
         def connected(transport):
             host = getattr(transport, get)()
-            self.failUnless(IAddress.providedBy(host))
+            self.assertTrue(IAddress.providedBy(host))
 
         return d.addCallback(connected)
 
@@ -272,7 +272,7 @@ class LoopbackAsyncTestCase(LoopbackTestCaseMixin, unittest.TestCase):
         d = self._producertest(PushProducer)
 
         def finished((client, server)):
-            self.failIf(
+            self.assertFalse(
                 server.producer.resumed,
                 "Streaming producer should not have been resumed.")
         d.addCallback(finished)
diff --git a/twisted/test/test_modules.py b/twisted/test/test_modules.py
index 4b74f0d..fa339f1 100644
--- a/twisted/test/test_modules.py
+++ b/twisted/test/test_modules.py
@@ -145,7 +145,7 @@ class BasicTests(TwistedModulesTestCase):
         existentPath = self.pathEntryWithOnePackage()
 
         nonexistentPath = FilePath(self.mktemp())
-        self.failIf(nonexistentPath.exists())
+        self.assertFalse(nonexistentPath.exists())
 
         self.replaceSysPath([existentPath.path])
 
@@ -167,7 +167,7 @@ class BasicTests(TwistedModulesTestCase):
         existentPath = self.pathEntryWithOnePackage()
 
         nonDirectoryPath = FilePath(self.mktemp())
-        self.failIf(nonDirectoryPath.exists())
+        self.assertFalse(nonDirectoryPath.exists())
         nonDirectoryPath.setContent("zip file or whatever\n")
 
         self.replaceSysPath([existentPath.path])
@@ -206,7 +206,7 @@ class BasicTests(TwistedModulesTestCase):
         packages, not submodules or subpackages.
         """
         for module in modules.iterModules():
-            self.failIf(
+            self.assertFalse(
                 '.' in module.name,
                 "no nested modules should be returned from iterModules: %r"
                 % (module.filePath))
@@ -222,10 +222,10 @@ class BasicTests(TwistedModulesTestCase):
                   'twisted.python',
                   'twisted.python.reflect']:
             m = namedAny(n)
-            self.failUnlessIdentical(
+            self.assertIs(
                 modules.getModule(n).load(),
                 m)
-            self.failUnlessIdentical(
+            self.assertIs(
                 self.findByIteration(n).load(),
                 m)
 
@@ -239,7 +239,7 @@ class BasicTests(TwistedModulesTestCase):
                   'twisted',
                   'twisted.python',
                   'twisted.python.reflect']:
-            self.failUnlessIn(
+            self.assertIn(
                 modules.getModule(n).pathEntry.filePath.path,
                 sys.path)
 
diff --git a/twisted/test/test_newcred.py b/twisted/test/test_newcred.py
index 870833a..0cbcb01 100644
--- a/twisted/test/test_newcred.py
+++ b/twisted/test/test_newcred.py
@@ -106,13 +106,13 @@ class NewCredTest(unittest.TestCase):
         iface, impl, logout = l[0]
         # whitebox
         self.assertEqual(iface, ITestable)
-        self.failUnless(iface.providedBy(impl),
+        self.assertTrue(iface.providedBy(impl),
                         "%s does not implement %s" % (impl, iface))
         # greybox
-        self.failUnless(impl.original.loggedIn)
-        self.failUnless(not impl.original.loggedOut)
+        self.assertTrue(impl.original.loggedIn)
+        self.assertTrue(not impl.original.loggedOut)
         logout()
-        self.failUnless(impl.original.loggedOut)
+        self.assertTrue(impl.original.loggedOut)
 
     def test_derivedInterface(self):
         """
@@ -129,20 +129,20 @@ class NewCredTest(unittest.TestCase):
         iface, impl, logout = l[0]
         # whitebox
         self.assertEqual(iface, ITestable)
-        self.failUnless(iface.providedBy(impl),
+        self.assertTrue(iface.providedBy(impl),
                         "%s does not implement %s" % (impl, iface))
         # greybox
-        self.failUnless(impl.original.loggedIn)
-        self.failUnless(not impl.original.loggedOut)
+        self.assertTrue(impl.original.loggedIn)
+        self.assertTrue(not impl.original.loggedOut)
         logout()
-        self.failUnless(impl.original.loggedOut)
+        self.assertTrue(impl.original.loggedOut)
 
     def testFailedLogin(self):
         l = []
         self.portal.login(credentials.UsernamePassword("bob", "h3llo"),
                           self, ITestable).addErrback(
             lambda x: x.trap(error.UnauthorizedLogin)).addCallback(l.append)
-        self.failUnless(l)
+        self.assertTrue(l)
         self.assertEqual(error.UnauthorizedLogin, l[0])
 
     def testFailedLoginName(self):
@@ -150,7 +150,7 @@ class NewCredTest(unittest.TestCase):
         self.portal.login(credentials.UsernamePassword("jay", "hello"),
                           self, ITestable).addErrback(
             lambda x: x.trap(error.UnauthorizedLogin)).addCallback(l.append)
-        self.failUnless(l)
+        self.assertTrue(l)
         self.assertEqual(error.UnauthorizedLogin, l[0])
 
 
@@ -164,11 +164,11 @@ class CramMD5CredentialsTestCase(unittest.TestCase):
         c = credentials.CramMD5Credentials()
         chal = c.getChallenge()
         c.response = hmac.HMAC('secret', chal).hexdigest()
-        self.failUnless(c.checkPassword('secret'))
+        self.assertTrue(c.checkPassword('secret'))
 
     def testWrongPassword(self):
         c = credentials.CramMD5Credentials()
-        self.failIf(c.checkPassword('secret'))
+        self.assertFalse(c.checkPassword('secret'))
 
 class OnDiskDatabaseTestCase(unittest.TestCase):
     users = [
@@ -187,7 +187,7 @@ class OnDiskDatabaseTestCase(unittest.TestCase):
         f.close()
 
         for (u, p) in self.users:
-            self.failUnlessRaises(KeyError, db.getUser, u.upper())
+            self.assertRaises(KeyError, db.getUser, u.upper())
             self.assertEqual(db.getUser(u), (u, p))
 
     def testCaseInSensitivity(self):
diff --git a/twisted/test/test_paths.py b/twisted/test/test_paths.py
index f2761df..e597fe0 100644
--- a/twisted/test/test_paths.py
+++ b/twisted/test/test_paths.py
@@ -111,13 +111,13 @@ class AbstractFilePathTestCase(unittest.TestCase):
         file, not as a symlink, and be listable.
         """
         sub1 = self.path.child('sub1')
-        self.failUnless(sub1.exists(),
+        self.assertTrue(sub1.exists(),
                         "This directory does exist.")
-        self.failUnless(sub1.isdir(),
+        self.assertTrue(sub1.isdir(),
                         "It's a directory.")
-        self.failUnless(not sub1.isfile(),
+        self.assertTrue(not sub1.isfile(),
                         "It's a directory.")
-        self.failUnless(not sub1.islink(),
+        self.assertTrue(not sub1.islink(),
                         "It's a directory.")
         self.assertEqual(sub1.listdir(),
                              ['file2'])
@@ -128,7 +128,7 @@ class AbstractFilePathTestCase(unittest.TestCase):
         Verify that a subdirectory that doesn't exist is reported as such.
         """
         sub2 = self.path.child('sub2')
-        self.failIf(sub2.exists(),
+        self.assertFalse(sub2.exists(),
                     "This directory does not exist.")
 
     def test_validFiles(self):
@@ -163,8 +163,8 @@ class AbstractFilePathTestCase(unittest.TestCase):
         dictoid[f1prime] = 4
         self.assertEqual(dictoid[f1], 4)
         self.assertEqual(dictoid.keys(), [f1])
-        self.assertIdentical(dictoid.keys()[0], f1)
-        self.assertNotIdentical(dictoid.keys()[0], f1prime) # sanity check
+        self.assertIs(dictoid.keys()[0], f1)
+        self.assertIsNot(dictoid.keys()[0], f1prime) # sanity check
         dictoid[f2] = 5
         self.assertEqual(dictoid[f2], 5)
         self.assertEqual(len(dictoid), 2)
@@ -821,7 +821,7 @@ class FilePathTestCase(AbstractFilePathTestCase):
         # time to store the temporary file.
         openedSiblings = fp.openedPaths()
         self.assertEqual(len(openedSiblings), 2)
-        self.assertNotEquals(openedSiblings[0], openedSiblings[1])
+        self.assertNotEqual(openedSiblings[0], openedSiblings[1])
 
 
     def test_setContentExtension(self):
@@ -900,13 +900,13 @@ class FilePathTestCase(AbstractFilePathTestCase):
     def testMultiExt(self):
         f3 = self.path.child('sub3').child('file3')
         exts = '.foo','.bar', 'ext1','ext2','ext3'
-        self.failIf(f3.siblingExtensionSearch(*exts))
+        self.assertFalse(f3.siblingExtensionSearch(*exts))
         f3e = f3.siblingExtension(".foo")
         f3e.touch()
-        self.failIf(not f3.siblingExtensionSearch(*exts).exists())
-        self.failIf(not f3.siblingExtensionSearch('*').exists())
+        self.assertFalse(not f3.siblingExtensionSearch(*exts).exists())
+        self.assertFalse(not f3.siblingExtensionSearch('*').exists())
         f3e.remove()
-        self.failIf(f3.siblingExtensionSearch(*exts))
+        self.assertFalse(f3.siblingExtensionSearch(*exts))
 
     def testPreauthChild(self):
         fp = filepath.FilePath('.')
@@ -966,24 +966,24 @@ class FilePathTestCase(AbstractFilePathTestCase):
     def testComparison(self):
         self.assertEqual(filepath.FilePath('a'),
                           filepath.FilePath('a'))
-        self.failUnless(filepath.FilePath('z') >
+        self.assertTrue(filepath.FilePath('z') >
                         filepath.FilePath('a'))
-        self.failUnless(filepath.FilePath('z') >=
+        self.assertTrue(filepath.FilePath('z') >=
                         filepath.FilePath('a'))
-        self.failUnless(filepath.FilePath('a') >=
+        self.assertTrue(filepath.FilePath('a') >=
                         filepath.FilePath('a'))
-        self.failUnless(filepath.FilePath('a') <=
+        self.assertTrue(filepath.FilePath('a') <=
                         filepath.FilePath('a'))
-        self.failUnless(filepath.FilePath('a') <
+        self.assertTrue(filepath.FilePath('a') <
                         filepath.FilePath('z'))
-        self.failUnless(filepath.FilePath('a') <=
+        self.assertTrue(filepath.FilePath('a') <=
                         filepath.FilePath('z'))
-        self.failUnless(filepath.FilePath('a') !=
+        self.assertTrue(filepath.FilePath('a') !=
                         filepath.FilePath('z'))
-        self.failUnless(filepath.FilePath('z') !=
+        self.assertTrue(filepath.FilePath('z') !=
                         filepath.FilePath('a'))
 
-        self.failIf(filepath.FilePath('z') !=
+        self.assertFalse(filepath.FilePath('z') !=
                     filepath.FilePath('z'))
 
 
@@ -1030,7 +1030,7 @@ class FilePathTestCase(AbstractFilePathTestCase):
         recursively delete its contents.
         """
         self.path.remove()
-        self.failIf(self.path.exists())
+        self.assertFalse(self.path.exists())
 
 
     def test_removeWithSymlink(self):
@@ -1312,7 +1312,7 @@ class FilePathTestCase(AbstractFilePathTestCase):
         """
         path = filepath.FilePath(self.mktemp())
         f = path.create()
-        self.failUnless("b" in f.mode)
+        self.assertTrue("b" in f.mode)
         f.write("\n")
         f.close()
         read = open(path.path, "rb").read()
diff --git a/twisted/test/test_pb.py b/twisted/test/test_pb.py
index 4616708..e480809 100644
--- a/twisted/test/test_pb.py
+++ b/twisted/test/test_pb.py
@@ -406,9 +406,9 @@ class NewStyleTestCase(unittest.TestCase):
         orig = NewStyleCopy("value")
         d = self.ref.callRemote("echo", orig)
         def cb(res):
-            self.failUnless(isinstance(res, NewStyleCopy))
+            self.assertTrue(isinstance(res, NewStyleCopy))
             self.assertEqual(res.s, "value")
-            self.failIf(res is orig) # no cheating :)
+            self.assertFalse(res is orig) # no cheating :)
         d.addCallback(cb)
         return d
 
@@ -422,11 +422,11 @@ class NewStyleTestCase(unittest.TestCase):
         d = self.ref.callRemote("echo", orig)
         def cb(res):
             # receiving the response creates a third one on the way back
-            self.failUnless(isinstance(res, NewStyleCopy2))
+            self.assertTrue(isinstance(res, NewStyleCopy2))
             self.assertEqual(res.value, 2)
             self.assertEqual(NewStyleCopy2.allocated, 3)
             self.assertEqual(NewStyleCopy2.initialized, 1)
-            self.failIf(res is orig) # no cheating :)
+            self.assertFalse(res is orig) # no cheating :)
         # sending the object creates a second one on the far side
         d.addCallback(cb)
         return d
@@ -506,7 +506,7 @@ class NewStyleCachedTestCase(unittest.TestCase):
             self.assertIsInstance(res, NewStyleCacheCopy)
             self.assertEqual("value", res.s)
             # no cheating :)
-            self.assertNotIdentical(self.orig, res)
+            self.assertIsNot(self.orig, res)
 
             if again:
                 # Save a reference so it stays alive for the rest of this test
@@ -561,7 +561,7 @@ class BrokerTestCase(unittest.TestCase):
         pump.pump()
         pump.pump()
         pump.pump()
-        self.assertIdentical(x.caught, z, "X should have caught Z")
+        self.assertIs(x.caught, z, "X should have caught Z")
 
         # make sure references to remote methods are equals
         self.assertEqual(y.remoteMethod('throw'), y.remoteMethod('throw'))
@@ -634,7 +634,7 @@ class BrokerTestCase(unittest.TestCase):
         a.notify(10)
         pump.pump()
         pump.pump()
-        self.assertNotIdentical(b.obj, None, "didn't notify")
+        self.assertIsNot(b.obj, None, "didn't notify")
         self.assertEqual(b.obj, 1, 'notified too much')
 
     def test_defer(self):
@@ -708,9 +708,9 @@ class BrokerTestCase(unittest.TestCase):
         self.assertEqual(complex[0].foo, 4)
         self.assertEqual(len(coll), 2)
         cp = coll[0][0]
-        self.assertIdentical(cp.checkMethod().im_self, cp,
+        self.assertIs(cp.checkMethod().im_self, cp,
                              "potential refcounting issue")
-        self.assertIdentical(cp.checkSelf(), cp,
+        self.assertIs(cp.checkSelf(), cp,
                              "other potential refcounting issue")
         col2 = []
         o2.callRemote('putCache',cp).addCallback(col2.append)
@@ -748,7 +748,7 @@ class BrokerTestCase(unittest.TestCase):
                          "Server still had complex after GC")
         self.assertNotIn(baroqueLuid, c.locallyCachedObjects,
                          "Client still had complex after GC")
-        self.assertIdentical(vcc.observer, None, "observer was not removed")
+        self.assertIs(vcc.observer, None, "observer was not removed")
 
     def test_publishable(self):
         try:
@@ -1811,7 +1811,7 @@ class PBWithSecurityOptionsTest(unittest.TestCase):
         """
         factory = pb.PBClientFactory()
         broker = factory.buildProtocol(None)
-        self.assertIdentical(broker.security, jelly.globalSecurity)
+        self.assertIs(broker.security, jelly.globalSecurity)
 
 
     def test_serverDefaultSecurityOptions(self):
@@ -1821,7 +1821,7 @@ class PBWithSecurityOptionsTest(unittest.TestCase):
         """
         factory = pb.PBServerFactory(Echoer())
         broker = factory.buildProtocol(None)
-        self.assertIdentical(broker.security, jelly.globalSecurity)
+        self.assertIs(broker.security, jelly.globalSecurity)
 
 
     def test_clientSecurityCustomization(self):
@@ -1832,7 +1832,7 @@ class PBWithSecurityOptionsTest(unittest.TestCase):
         security = jelly.SecurityOptions()
         factory = pb.PBClientFactory(security=security)
         broker = factory.buildProtocol(None)
-        self.assertIdentical(broker.security, security)
+        self.assertIs(broker.security, security)
 
 
     def test_serverSecurityCustomization(self):
@@ -1843,4 +1843,4 @@ class PBWithSecurityOptionsTest(unittest.TestCase):
         security = jelly.SecurityOptions()
         factory = pb.PBServerFactory(Echoer(), security=security)
         broker = factory.buildProtocol(None)
-        self.assertIdentical(broker.security, security)
+        self.assertIs(broker.security, security)
diff --git a/twisted/test/test_pbfailure.py b/twisted/test/test_pbfailure.py
index 91cd6ba..fa55298 100644
--- a/twisted/test/test_pbfailure.py
+++ b/twisted/test/test_pbfailure.py
@@ -262,8 +262,8 @@ class PBFailureTest(PBConnTestCase):
         """
         def failureJelly(fail):
             fail.trap(JellyError)
-            self.failIf(isinstance(fail.type, str))
-            self.failUnless(isinstance(fail.value, fail.type))
+            self.assertFalse(isinstance(fail.type, str))
+            self.assertTrue(isinstance(fail.value, fail.type))
             return 43
         return self._testImpl('jelly', 43, failureJelly)
 
@@ -275,8 +275,8 @@ class PBFailureTest(PBConnTestCase):
         """
         def failureDeferredJelly(fail):
             fail.trap(JellyError)
-            self.failIf(isinstance(fail.type, str))
-            self.failUnless(isinstance(fail.value, fail.type))
+            self.assertFalse(isinstance(fail.type, str))
+            self.assertTrue(isinstance(fail.value, fail.type))
             return 430
         return self._testImpl('deferredJelly', 430, failureDeferredJelly)
 
@@ -314,8 +314,8 @@ class PBFailureTest(PBConnTestCase):
         """
         def failureSecurity(fail):
             fail.trap(SecurityError)
-            self.failIf(isinstance(fail.type, str))
-            self.failUnless(isinstance(fail.value, fail.type))
+            self.assertFalse(isinstance(fail.type, str))
+            self.assertTrue(isinstance(fail.value, fail.type))
             return 4300
         return self._testImpl('security', 4300, failureSecurity)
 
@@ -328,8 +328,8 @@ class PBFailureTest(PBConnTestCase):
         """
         def failureDeferredSecurity(fail):
             fail.trap(SecurityError)
-            self.failIf(isinstance(fail.type, str))
-            self.failUnless(isinstance(fail.value, fail.type))
+            self.assertFalse(isinstance(fail.type, str))
+            self.assertTrue(isinstance(fail.value, fail.type))
             return 43000
         return self._testImpl('deferredSecurity', 43000, failureDeferredSecurity)
 
@@ -425,13 +425,13 @@ class FailureJellyingTests(unittest.TestCase):
         same way as the original L{CopyableFailure}'s check method.
         """
         original = pb.CopyableFailure(ZeroDivisionError())
-        self.assertIdentical(
+        self.assertIs(
             original.check(ZeroDivisionError), ZeroDivisionError)
-        self.assertIdentical(original.check(ArithmeticError), ArithmeticError)
+        self.assertIs(original.check(ArithmeticError), ArithmeticError)
         copied = jelly.unjelly(jelly.jelly(original, invoker=DummyInvoker()))
-        self.assertIdentical(
+        self.assertIs(
             copied.check(ZeroDivisionError), ZeroDivisionError)
-        self.assertIdentical(copied.check(ArithmeticError), ArithmeticError)
+        self.assertIs(copied.check(ArithmeticError), ArithmeticError)
 
 
     def test_twiceUnjelliedFailureCheck(self):
@@ -443,17 +443,17 @@ class FailureJellyingTests(unittest.TestCase):
         check method.
         """
         original = pb.CopyableFailure(ZeroDivisionError())
-        self.assertIdentical(
+        self.assertIs(
             original.check(ZeroDivisionError), ZeroDivisionError)
-        self.assertIdentical(original.check(ArithmeticError), ArithmeticError)
+        self.assertIs(original.check(ArithmeticError), ArithmeticError)
         copiedOnce = jelly.unjelly(
             jelly.jelly(original, invoker=DummyInvoker()))
         derivative = pb.CopyableFailure(copiedOnce)
         copiedTwice = jelly.unjelly(
             jelly.jelly(derivative, invoker=DummyInvoker()))
-        self.assertIdentical(
+        self.assertIs(
             copiedTwice.check(ZeroDivisionError), ZeroDivisionError)
-        self.assertIdentical(
+        self.assertIs(
             copiedTwice.check(ArithmeticError), ArithmeticError)
 
 
diff --git a/twisted/test/test_pcp.py b/twisted/test/test_pcp.py
index 71de8bb..2e4b674 100644
--- a/twisted/test/test_pcp.py
+++ b/twisted/test/test_pcp.py
@@ -104,14 +104,14 @@ class ConsumerInterfaceTest:
     def testRegisterPush(self):
         self.consumer.registerProducer(self.producer, True)
         ## Consumer should NOT have called PushProducer.resumeProducing
-        self.failIf(self.producer.resumed)
+        self.assertFalse(self.producer.resumed)
 
     ## I'm I'm just a proxy, should I only do resumeProducing when
     ## I get poked myself?
     #def testRegisterPull(self):
     #    self.consumer.registerProducer(self.producer, False)
     #    ## Consumer SHOULD have called PushProducer.resumeProducing
-    #    self.failUnless(self.producer.resumed)
+    #    self.assertTrue(self.producer.resumed)
 
     def testUnregister(self):
         self.consumer.registerProducer(self.producer, False)
@@ -122,7 +122,7 @@ class ConsumerInterfaceTest:
         # a PullProducer and have someone ask me for data.
         self.producer.resumed = False
         self.consumer.resumeProducing()
-        self.failIf(self.producer.resumed)
+        self.assertFalse(self.producer.resumed)
 
     def testFinish(self):
         self.consumer.registerProducer(self.producer, False)
@@ -130,7 +130,7 @@ class ConsumerInterfaceTest:
         # I guess finish should behave like unregister?
         self.producer.resumed = False
         self.consumer.resumeProducing()
-        self.failIf(self.producer.resumed)
+        self.assertFalse(self.producer.resumed)
 
 
 class ProducerInterfaceTest:
@@ -152,7 +152,7 @@ class ProducerInterfaceTest:
     def testPause(self):
         self.producer.pauseProducing()
         self.producer.write("yakkity yak")
-        self.failIf(self.consumer.getvalue(),
+        self.assertFalse(self.consumer.getvalue(),
                     "Paused producer should not have sent data.")
 
     def testResume(self):
@@ -176,7 +176,7 @@ class ProducerInterfaceTest:
     def testStop(self):
         self.producer.stopProducing()
         self.producer.write("yakkity yak")
-        self.failIf(self.consumer.getvalue(),
+        self.assertFalse(self.consumer.getvalue(),
                     "Stopped producer should not have sent data.")
 
 
@@ -204,7 +204,7 @@ class ProducerProxyTest(unittest.TestCase):
 
     def testStop(self):
         self.proxy.stopProducing()
-        self.failUnless(self.parentProducer.stopped)
+        self.assertTrue(self.parentProducer.stopped)
 
 
 class ConsumerProxyTest(unittest.TestCase):
@@ -223,11 +223,11 @@ class ConsumerProxyTest(unittest.TestCase):
 
     def testFinish(self):
         self.consumer.finish()
-        self.failUnless(self.underlying.finished)
+        self.assertTrue(self.underlying.finished)
 
     def testUnregister(self):
         self.consumer.unregisterProducer()
-        self.failUnless(self.underlying.unregistered)
+        self.assertTrue(self.underlying.unregistered)
 
 
 class PullProducerTest:
@@ -240,7 +240,7 @@ class PullProducerTest:
     def testHoldWrites(self):
         self.proxy.write("hello")
         # Consumer should get no data before it says resumeProducing.
-        self.failIf(self.underlying.getvalue(),
+        self.assertFalse(self.underlying.getvalue(),
                     "Pulling Consumer got data before it pulled.")
 
     def testPull(self):
@@ -291,11 +291,11 @@ class BufferedConsumerTest(unittest.TestCase):
     def testRegisterPull(self):
         self.proxy.registerProducer(self.parentProducer, False)
         ## Consumer SHOULD have called PushProducer.resumeProducing
-        self.failUnless(self.parentProducer.resumed)
+        self.assertTrue(self.parentProducer.resumed)
 
     def testPauseIntercept(self):
         self.proxy.pauseProducing()
-        self.failIf(self.parentProducer.paused)
+        self.assertFalse(self.parentProducer.paused)
 
     def testResumeIntercept(self):
         self.proxy.pauseProducing()
@@ -303,30 +303,30 @@ class BufferedConsumerTest(unittest.TestCase):
         # With a streaming producer, just because the proxy was resumed is
         # not necessarily a reason to resume the parent producer.  The state
         # of the buffer should decide that.
-        self.failIf(self.parentProducer.resumed)
+        self.assertFalse(self.parentProducer.resumed)
 
     def testTriggerPause(self):
         """Make sure I say \"when.\""""
 
         # Pause the proxy so data sent to it builds up in its buffer.
         self.proxy.pauseProducing()
-        self.failIf(self.parentProducer.paused, "don't pause yet")
+        self.assertFalse(self.parentProducer.paused, "don't pause yet")
         self.proxy.write("x" * 51)
-        self.failIf(self.parentProducer.paused, "don't pause yet")
+        self.assertFalse(self.parentProducer.paused, "don't pause yet")
         self.proxy.write("x" * 51)
-        self.failUnless(self.parentProducer.paused)
+        self.assertTrue(self.parentProducer.paused)
 
     def testTriggerResume(self):
         """Make sure I resumeProducing when my buffer empties."""
         self.proxy.pauseProducing()
         self.proxy.write("x" * 102)
-        self.failUnless(self.parentProducer.paused, "should be paused")
+        self.assertTrue(self.parentProducer.paused, "should be paused")
         self.proxy.resumeProducing()
         # Resuming should have emptied my buffer, so I should tell my
         # parent to resume too.
-        self.failIf(self.parentProducer.paused,
+        self.assertFalse(self.parentProducer.paused,
                     "Producer should have resumed.")
-        self.failIf(self.proxy.producerPaused)
+        self.assertFalse(self.proxy.producerPaused)
 
 class BufferedPullTests(unittest.TestCase):
     class proxyClass(pcp.ProducerConsumerProxy):
@@ -349,7 +349,7 @@ class BufferedPullTests(unittest.TestCase):
         # some from its PullProducer.
         self.parentProducer.resumed = False
         self.proxy.resumeProducing()
-        self.failUnless(self.parentProducer.resumed)
+        self.assertTrue(self.parentProducer.resumed)
 
     def testLateWriteBuffering(self):
         # consumer sends its initial pull before we have data
diff --git a/twisted/test/test_persisted.py b/twisted/test/test_persisted.py
index 4a80791..9ffaf09 100644
--- a/twisted/test/test_persisted.py
+++ b/twisted/test/test_persisted.py
@@ -87,8 +87,8 @@ class VersionTestCase(unittest.TestCase):
         styles.doUpgrade()
         self.assertEqual(v1.unique, 'v1')
         self.assertEqual(v2.unique, 'v2')
-        self.failUnless(v1.upgraded)
-        self.failUnless(v2.upgraded)
+        self.assertTrue(v1.upgraded)
+        self.assertTrue(v2.upgraded)
     
     def testUpgradeDeserializesObjectsRequiringUpgrade(self):
         global ToyClassA, ToyClassB
@@ -110,7 +110,7 @@ class VersionTestCase(unittest.TestCase):
 
         x = pickle.loads(pklA)
         styles.doUpgrade()
-        self.failUnless(x.y.upgraded)
+        self.assertTrue(x.y.upgraded)
 
 
 
@@ -192,7 +192,7 @@ class EphemeralTestCase(unittest.TestCase):
         o = pickle.loads(pickl)
         
         self.assertEqual(o.__class__, styles.Ephemeral)
-        self.assert_(not hasattr(o, 'x'))
+        self.assertTrue(not hasattr(o, 'x'))
 
 
 class Pickleable:
diff --git a/twisted/test/test_plugin.py b/twisted/test/test_plugin.py
index c33ecf1..56d5366 100644
--- a/twisted/test/test_plugin.py
+++ b/twisted/test/test_plugin.py
@@ -128,7 +128,7 @@ class PluginTestCase(unittest.TestCase):
 
         # Note, not the preferred way to get a plugin by its interface.
         p1 = [p for p in dropin.plugins if ITestPlugin in p.provided][0]
-        self.assertIdentical(p1.dropin, dropin)
+        self.assertIs(p1.dropin, dropin)
         self.assertEqual(p1.name, "TestPlugin")
 
         # Check the content of the description comes from the plugin module
@@ -139,13 +139,13 @@ class PluginTestCase(unittest.TestCase):
         self.assertEqual(p1.provided, [ITestPlugin, plugin.IPlugin])
         realPlugin = p1.load()
         # The plugin should match the class present in sys.modules
-        self.assertIdentical(
+        self.assertIs(
             realPlugin,
             sys.modules['mypackage.%s' % (self.originalPlugin,)].TestPlugin)
 
         # And it should also match if we import it classicly
         import mypackage.testplugin as tp
-        self.assertIdentical(realPlugin, tp.TestPlugin)
+        self.assertIs(realPlugin, tp.TestPlugin)
 
     test_cache = _withCacheness(test_cache)
 
@@ -178,8 +178,8 @@ class PluginTestCase(unittest.TestCase):
             ).copyTo(self.package.child('pluginextra.py'))
         try:
             # Check that the current situation is clean
-            self.failIfIn('mypackage.pluginextra', sys.modules)
-            self.failIf(hasattr(sys.modules['mypackage'], 'pluginextra'),
+            self.assertNotIn('mypackage.pluginextra', sys.modules)
+            self.assertFalse(hasattr(sys.modules['mypackage'], 'pluginextra'),
                         "mypackage still has pluginextra module")
 
             plgs = list(plugin.getPlugins(ITestPlugin, self.module))
@@ -262,7 +262,7 @@ class PluginTestCase(unittest.TestCase):
         C{__path__} which do not exist.
         """
         path = self.mktemp()
-        self.failIf(os.path.exists(path))
+        self.assertFalse(os.path.exists(path))
         # Add the test directory to the plugins path
         self.module.__path__.append(path)
         try:
@@ -280,7 +280,7 @@ class PluginTestCase(unittest.TestCase):
         C{__path__} which refer to children of paths which are not directories.
         """
         path = FilePath(self.mktemp())
-        self.failIf(path.exists())
+        self.assertFalse(path.exists())
         path.touch()
         child = path.child("test_package").path
         self.module.__path__.append(child)
@@ -523,10 +523,10 @@ class DeveloperSetupTests(unittest.TestCase):
         self.resetEnvironment()
         # Sanity check.
         self.assertIn('one', self.getAllPlugins())
-        self.failIfIn('two', self.getAllPlugins())
+        self.assertNotIn('two', self.getAllPlugins())
         self.resetEnvironment()
         mypath.setContent(pluginFileContents('two'))
-        self.failIfIn('one', self.getAllPlugins())
+        self.assertNotIn('one', self.getAllPlugins())
         self.assertIn('two', self.getAllPlugins())
 
 
diff --git a/twisted/test/test_policies.py b/twisted/test/test_policies.py
index 3cdf096..40789a5 100644
--- a/twisted/test/test_policies.py
+++ b/twisted/test/test_policies.py
@@ -132,7 +132,7 @@ class WrapperTestCase(unittest.TestCase):
         f = Server()
         wf = policies.WrappingFactory(f)
         p = wf.buildProtocol(address.IPv4Address('TCP', '127.0.0.1', 35))
-        self.assertIdentical(p.wrappedProtocol.factory, f)
+        self.assertIs(p.wrappedProtocol.factory, f)
 
 
     def test_transportInterfaces(self):
@@ -391,11 +391,11 @@ class TimeoutTestCase(unittest.TestCase):
         """
         # Let almost 3 time units pass
         self.clock.pump([0.0, 0.5, 1.0, 1.0, 0.4])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Now let the timer elapse
         self.clock.pump([0.0, 0.2])
-        self.failUnless(self.proto.wrappedProtocol.disconnected)
+        self.assertTrue(self.proto.wrappedProtocol.disconnected)
 
 
     def test_sendAvoidsTimeout(self):
@@ -405,7 +405,7 @@ class TimeoutTestCase(unittest.TestCase):
         """
         # Let half the countdown period elapse
         self.clock.pump([0.0, 0.5, 1.0])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Send some data (self.proto is the /real/ proto's transport, so this
         # is the write that gets called)
@@ -413,18 +413,18 @@ class TimeoutTestCase(unittest.TestCase):
 
         # More time passes, putting us past the original timeout
         self.clock.pump([0.0, 1.0, 1.0])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Make sure writeSequence delays timeout as well
         self.proto.writeSequence(['bytes'] * 3)
 
         # Tick tock
         self.clock.pump([0.0, 1.0, 1.0])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Don't write anything more, just let the timeout expire
         self.clock.pump([0.0, 2.0])
-        self.failUnless(self.proto.wrappedProtocol.disconnected)
+        self.assertTrue(self.proto.wrappedProtocol.disconnected)
 
 
     def test_receiveAvoidsTimeout(self):
@@ -433,19 +433,19 @@ class TimeoutTestCase(unittest.TestCase):
         """
         # Let half the countdown period elapse
         self.clock.pump([0.0, 1.0, 0.5])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Some bytes arrive, they should reset the counter
         self.proto.dataReceived('bytes bytes bytes')
 
         # We pass the original timeout
         self.clock.pump([0.0, 1.0, 1.0])
-        self.failIf(self.proto.wrappedProtocol.disconnected)
+        self.assertFalse(self.proto.wrappedProtocol.disconnected)
 
         # Nothing more arrives though, the new timeout deadline is passed,
         # the connection should be dropped.
         self.clock.pump([0.0, 1.0, 1.0])
-        self.failUnless(self.proto.wrappedProtocol.disconnected)
+        self.assertTrue(self.proto.wrappedProtocol.disconnected)
 
 
 
@@ -534,9 +534,9 @@ class TestTimeout(unittest.TestCase):
 
         # timeOut value is 3
         self.clock.pump([0, 0.5, 1.0, 1.0])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
         self.clock.pump([0, 1.0])
-        self.failUnless(self.proto.timedOut)
+        self.assertTrue(self.proto.timedOut)
 
 
     def test_noTimeout(self):
@@ -546,12 +546,12 @@ class TestTimeout(unittest.TestCase):
         self.proto.makeConnection(StringTransport())
 
         self.clock.pump([0, 0.5, 1.0, 1.0])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
         self.proto.dataReceived('hello there')
         self.clock.pump([0, 1.0, 1.0, 0.5])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
         self.clock.pump([0, 1.0])
-        self.failUnless(self.proto.timedOut)
+        self.assertTrue(self.proto.timedOut)
 
 
     def test_resetTimeout(self):
@@ -566,9 +566,9 @@ class TestTimeout(unittest.TestCase):
         self.assertEqual(self.proto.timeOut, 1)
 
         self.clock.pump([0, 0.9])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
         self.clock.pump([0, 0.2])
-        self.failUnless(self.proto.timedOut)
+        self.assertTrue(self.proto.timedOut)
 
 
     def test_cancelTimeout(self):
@@ -582,7 +582,7 @@ class TestTimeout(unittest.TestCase):
         self.assertEqual(self.proto.timeOut, None)
 
         self.clock.pump([0, 5, 5, 5])
-        self.failIf(self.proto.timedOut)
+        self.assertFalse(self.proto.timedOut)
 
 
     def test_return(self):
@@ -695,8 +695,8 @@ class LoggingFactoryTestCase(unittest.TestCase):
         p.makeConnection(t)
 
         v = f.openFile.getvalue()
-        self.failUnless('*' in v, "* not found in %r" % (v,))
-        self.failIf(t.value())
+        self.assertTrue('*' in v, "* not found in %r" % (v,))
+        self.assertFalse(t.value())
 
         p.dataReceived('here are some bytes')
 
diff --git a/twisted/test/test_process.py b/twisted/test/test_process.py
index fb6819a..a66895b 100644
--- a/twisted/test/test_process.py
+++ b/twisted/test/test_process.py
@@ -513,7 +513,7 @@ class ProcessTestCase(unittest.TestCase):
         scriptPath = util.sibpath(__file__, "process_echoer.py")
         procTrans = reactor.spawnProcess(p, exe,
                                     [exe, scriptPath], env=None)
-        self.failUnless(procTrans.pid)
+        self.assertTrue(procTrans.pid)
 
         def afterProcessEnd(ignored):
             self.assertEqual(procTrans.pid, None)
@@ -592,8 +592,8 @@ class ProcessTestCase(unittest.TestCase):
         reactor.spawnProcess(p, exe, [exe, scriptPath], env=None)
 
         def asserts(ignored):
-            self.failIf(p.failure, p.failure)
-            self.failUnless(hasattr(p, 'buffer'))
+            self.assertFalse(p.failure, p.failure)
+            self.assertTrue(hasattr(p, 'buffer'))
             self.assertEqual(len(''.join(p.buffer)), len(p.s * p.n))
 
         def takedownProcess(err):
@@ -787,7 +787,7 @@ class TestTwoProcessesBase:
         if self.verbose: print "closing stdin [%d]" % num
         p = self.processes[num]
         pp = self.pp[num]
-        self.failIf(pp.finished, "Process finished too early")
+        self.assertFalse(pp.finished, "Process finished too early")
         p.loseConnection()
         if self.verbose: print self.pp[0].finished, self.pp[1].finished
 
@@ -820,7 +820,7 @@ class TestTwoProcessesPosix(TestTwoProcessesBase, unittest.TestCase):
         if self.verbose: print "kill [%d] with SIGTERM" % num
         p = self.processes[num]
         pp = self.pp[num]
-        self.failIf(pp.finished, "Process finished too early")
+        self.assertFalse(pp.finished, "Process finished too early")
         os.kill(p.pid, signal.SIGTERM)
         if self.verbose: print self.pp[0].finished, self.pp[1].finished
 
@@ -937,7 +937,7 @@ class FDTest(unittest.TestCase):
                              path=None,
                              childFDs={0:"w", 1:"r", 2:2,
                                        3:"w", 4:"r", 5:"w"})
-        d.addCallback(lambda x : self.failIf(p.failed, p.failed))
+        d.addCallback(lambda x : self.assertFalse(p.failed, p.failed))
         return d
 
     def testLinger(self):
@@ -1633,7 +1633,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=False)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(
                 self.mockos.actions, [("fork", False), "exec", "exit"])
         else:
@@ -1698,7 +1698,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=True)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(
                 self.mockos.actions, [("fork", False), "exec", "exit"])
         else:
@@ -1808,7 +1808,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=False)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(
                 self.mockos.actions, [("fork", False), "exec", "exit"])
             # Check that fd have been closed
@@ -1834,7 +1834,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=False, uid=8080)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(self.mockos.actions,
                 [('setuid', 0), ('setgid', 0), ('fork', False),
                   ('switchuid', 8080, 1234), 'exec', 'exit'])
@@ -1873,7 +1873,7 @@ class MockProcessTestCase(unittest.TestCase):
             reactor.spawnProcess(p, cmd, ['ouch'], env=None,
                                  usePTY=True, uid=8081)
         except SystemError:
-            self.assert_(self.mockos.exited)
+            self.assertTrue(self.mockos.exited)
             self.assertEqual(self.mockos.actions,
                 [('setuid', 0), ('setgid', 0), ('fork', False),
                   ('switchuid', 8081, 1234), 'exec', 'exit'])
@@ -2183,7 +2183,7 @@ class Win32ProcessTestCase(unittest.TestCase):
         proc = reactor.spawnProcess(p, pyExe, pyArgs)
 
         def cbConnected(transport):
-            self.assertIdentical(transport, proc)
+            self.assertIs(transport, proc)
             # perform a basic validity test on the handles
             win32api.GetHandleInformation(proc.hProcess)
             win32api.GetHandleInformation(proc.hThread)
@@ -2194,9 +2194,9 @@ class Win32ProcessTestCase(unittest.TestCase):
 
         def checkTerminated(ignored):
             # The attributes on the process object must be reset...
-            self.assertIdentical(proc.pid, None)
-            self.assertIdentical(proc.hProcess, None)
-            self.assertIdentical(proc.hThread, None)
+            self.assertIs(proc.pid, None)
+            self.assertIs(proc.hProcess, None)
+            self.assertIs(proc.hThread, None)
             # ...and the handles must be closed.
             self.assertRaises(win32api.error,
                               win32api.GetHandleInformation, self.hProcess)
@@ -2430,7 +2430,7 @@ class ClosingPipes(unittest.TestCase):
         custom exit code.
         """
         # child must not get past that write without raising
-        self.assertNotEquals(
+        self.assertNotEqual(
             reason.exitCode, 42, 'process reason was %r' % reason)
         self.assertEqual(p.output, '')
         return p.errput
diff --git a/twisted/test/test_protocols.py b/twisted/test/test_protocols.py
index 0e03ad9..7802d09 100644
--- a/twisted/test/test_protocols.py
+++ b/twisted/test/test_protocols.py
@@ -808,7 +808,7 @@ class RecvdAttributeMixin(object):
         incompleteMessage = (struct.pack(r.structFormat, 5) + ('b' * 4))
         # Receive a complete message, followed by an incomplete one
         r.dataReceived(completeMessage + incompleteMessage)
-        self.assertEquals(result, [incompleteMessage])
+        self.assertEqual(result, [incompleteMessage])
 
 
     def test_recvdChanged(self):
@@ -830,7 +830,7 @@ class RecvdAttributeMixin(object):
         messageA = self.makeMessage(r, payloadA)
         messageB = self.makeMessage(r, payloadB)
         r.dataReceived(messageA + messageB)
-        self.assertEquals(result, [payloadA, payloadC])
+        self.assertEqual(result, [payloadA, payloadC])
 
 
     def test_switching(self):
@@ -1050,45 +1050,45 @@ class ProducerTestCase(unittest.TestCase):
         p.makeConnection(t)
 
         p.dataReceived('hello, ')
-        self.failIf(t.data)
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertFalse(t.data)
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
 
         p.dataReceived('world\r\n')
 
         self.assertEqual(t.data, ['hello, world'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
 
         p.dataReceived('hello\r\nworld\r\n')
 
         self.assertEqual(t.data, ['hello, world', 'hello'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
         p.dataReceived('goodbye\r\n')
 
         self.assertEqual(t.data, ['hello, world', 'hello', 'world'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
         self.assertEqual(t.data, ['hello, world', 'hello', 'world', 'goodbye'])
-        self.failUnless(t.paused)
-        self.failUnless(p.paused)
+        self.assertTrue(t.paused)
+        self.assertTrue(p.paused)
 
         p.resumeProducing()
 
         self.assertEqual(t.data, ['hello, world', 'hello', 'world', 'goodbye'])
-        self.failIf(t.paused)
-        self.failIf(p.paused)
+        self.assertFalse(t.paused)
+        self.assertFalse(p.paused)
 
 
 
@@ -1239,8 +1239,8 @@ class Portforwarding(unittest.TestCase):
         client.makeConnection(clientTransport)
 
         # check that the producers are registered
-        self.assertIdentical(clientTransport.producer, serverTransport)
-        self.assertIdentical(serverTransport.producer, clientTransport)
+        self.assertIs(clientTransport.producer, serverTransport)
+        self.assertIs(serverTransport.producer, clientTransport)
         # check the streaming attribute in both transports
         self.assertTrue(clientTransport.streaming)
         self.assertTrue(serverTransport.streaming)
diff --git a/twisted/test/test_randbytes.py b/twisted/test/test_randbytes.py
index cb0997c..07cdec4 100644
--- a/twisted/test/test_randbytes.py
+++ b/twisted/test/test_randbytes.py
@@ -31,7 +31,7 @@ class SecureRandomTestCaseBase(object):
             s2 = source(nbytes)
             self.assertEqual(len(s2), nbytes)
             # This is crude but hey
-            self.assertNotEquals(s2, s)
+            self.assertNotEqual(s2, s)
 
 
 
diff --git a/twisted/test/test_rebuild.py b/twisted/test/test_rebuild.py
index dfeca9d..5cd8456 100644
--- a/twisted/test/test_rebuild.py
+++ b/twisted/test/test_rebuild.py
@@ -104,9 +104,9 @@ class RebuildTestCase(unittest.TestCase):
         rebuild.rebuild(crash_test_dummy, doLog=False)
         # Instance rebuilding is triggered by attribute access.
         x.do()
-        self.failUnlessIdentical(x.__class__, crash_test_dummy.X)
+        self.assertIs(x.__class__, crash_test_dummy.X)
 
-        self.failUnlessIdentical(f, crash_test_dummy.foo)
+        self.assertIs(f, crash_test_dummy.foo)
 
     def testComponentInteraction(self):
         x = crash_test_dummy.XComponent()
@@ -121,7 +121,7 @@ class RebuildTestCase(unittest.TestCase):
 
         # Test that a duplicate registerAdapter is not allowed
         from twisted.python import components
-        self.failUnlessRaises(ValueError, components.registerAdapter,
+        self.assertRaises(ValueError, components.registerAdapter,
                               crash_test_dummy.XA, crash_test_dummy.X,
                               crash_test_dummy.IX)
 
@@ -190,7 +190,7 @@ class NewStyleTestCase(unittest.TestCase):
         exec classDefinition in self.m.__dict__
         rebuild.updateInstance(inst)
         self.assertEqual(inst.a, 7)
-        self.assertIdentical(type(inst), self.m.SlottedClass)
+        self.assertIs(type(inst), self.m.SlottedClass)
 
     if sys.version_info < (2, 6):
         test_slots.skip = "__class__ assignment for class with slots is only available starting Python 2.6"
@@ -228,7 +228,7 @@ class NewStyleTestCase(unittest.TestCase):
         exec classDefinition in self.m.__dict__
         rebuild.updateInstance(inst)
         self.assertEqual(inst[0], 2)
-        self.assertIdentical(type(inst), self.m.ListSubclass)
+        self.assertIs(type(inst), self.m.ListSubclass)
 
 
     def test_instanceSlots(self):
diff --git a/twisted/test/test_reflect.py b/twisted/test/test_reflect.py
index eb2ba79..d2b476d 100644
--- a/twisted/test/test_reflect.py
+++ b/twisted/test/test_reflect.py
@@ -146,7 +146,7 @@ class LookupsTestCase(unittest.TestCase):
         """
         L{namedClass} should return the class object for the name it is passed.
         """
-        self.assertIdentical(
+        self.assertIs(
             reflect.namedClass("twisted.python.reflect.Summer"),
             reflect.Summer)
 
@@ -156,7 +156,7 @@ class LookupsTestCase(unittest.TestCase):
         L{namedModule} should return the module object for the name it is
         passed.
         """
-        self.assertIdentical(
+        self.assertIs(
             reflect.namedModule("twisted.python.reflect"), reflect)
 
 
@@ -165,14 +165,14 @@ class LookupsTestCase(unittest.TestCase):
         L{namedAny} should return the package object for the name it is passed.
         """
         import twisted.python
-        self.assertIdentical(
+        self.assertIs(
             reflect.namedAny("twisted.python"), twisted.python)
 
     def test_namedAnyModuleLookup(self):
         """
         L{namedAny} should return the module object for the name it is passed.
         """
-        self.assertIdentical(
+        self.assertIs(
             reflect.namedAny("twisted.python.reflect"), reflect)
 
 
@@ -180,7 +180,7 @@ class LookupsTestCase(unittest.TestCase):
         """
         L{namedAny} should return the class object for the name it is passed.
         """
-        self.assertIdentical(
+        self.assertIs(
             reflect.namedAny("twisted.python.reflect.Summer"), reflect.Summer)
 
 
@@ -203,7 +203,7 @@ class LookupsTestCase(unittest.TestCase):
         itself was an attribute of a non-module, non-package object is bound to
         for the name it is passed.
         """
-        self.assertIdentical(
+        self.assertIs(
             reflect.namedAny(
                 "twisted.python.reflect.Summer.reallySet.__doc__"),
             reflect.Summer.reallySet.__doc__)
@@ -794,7 +794,7 @@ class DeprecationTestCase(unittest.TestCase):
         """
         warningsShown = self.flushWarnings([testMethod])
         self.assertEqual(len(warningsShown), 1)
-        self.assertIdentical(warningsShown[0]['category'], DeprecationWarning)
+        self.assertIs(warningsShown[0]['category'], DeprecationWarning)
         self.assertEqual(
             warningsShown[0]['message'],
             "twisted.python.reflect." + attributeName + " "
diff --git a/twisted/test/test_roots.py b/twisted/test/test_roots.py
index c9fd39e..32aba9d 100644
--- a/twisted/test/test_roots.py
+++ b/twisted/test/test_roots.py
@@ -49,7 +49,7 @@ class RootsTest(unittest.TestCase):
                 return (name == 'x')
         c = const()
         self.assertEqual(c.putEntity('x', 'test'), None)
-        self.failUnlessRaises(roots.ConstraintViolation,
+        self.assertRaises(roots.ConstraintViolation,
                               c.putEntity, 'y', 'test')
 
 
@@ -58,6 +58,6 @@ class RootsTest(unittest.TestCase):
         h.entityType = types.IntType
         h.putEntity('a', 1)
         self.assertEqual(h.getStaticEntity('a'),1 )
-        self.failUnlessRaises(roots.ConstraintViolation,
+        self.assertRaises(roots.ConstraintViolation,
                               h.putEntity, 'x', 'y')
 
diff --git a/twisted/test/test_shortcut.py b/twisted/test/test_shortcut.py
index fdcb775..0368870 100644
--- a/twisted/test/test_shortcut.py
+++ b/twisted/test/test_shortcut.py
@@ -20,7 +20,7 @@ if os.name == 'nt':
             s1=shortcut.Shortcut("test_shortcut.py")
             tempname=self.mktemp() + '.lnk'
             s1.save(tempname)
-            self.assert_(os.path.exists(tempname))
+            self.assertTrue(os.path.exists(tempname))
             sc=shortcut.open(tempname)
-            self.assert_(sc.GetPath(0)[0].endswith('test_shortcut.py'))
+            self.assertTrue(sc.GetPath(0)[0].endswith('test_shortcut.py'))
     ShortcutTest.skip = skipWindowsNopywin32
diff --git a/twisted/test/test_sip.py b/twisted/test/test_sip.py
index e999d0a..b936f75 100644
--- a/twisted/test/test_sip.py
+++ b/twisted/test/test_sip.py
@@ -324,7 +324,7 @@ class ViaTestCase(unittest.TestCase):
         self.assertEqual(v.received, "22.13.1.5")
         self.assertEqual(v.rport, 12345)
 
-        self.assertNotEquals(v.toString().find("rport=12345"), -1)
+        self.assertNotEqual(v.toString().find("rport=12345"), -1)
 
 
     def test_unknownParams(self):
@@ -536,7 +536,7 @@ class RegistrationTestCase(unittest.TestCase):
         self.assertEqual(m.headers["via"], ["SIP/2.0/UDP client.com:5060"])
         self.assertEqual(m.headers["to"], ["sip:joe@bell.example.com"])
         self.assertEqual(m.headers["contact"], ["sip:joe@client.com:5060"])
-        self.failUnless(
+        self.assertTrue(
             int(m.headers["expires"][0]) in (3600, 3601, 3599, 3598))
         self.assertEqual(len(self.registry.users), 1)
         dc, uri = self.registry.users["joe"]
diff --git a/twisted/test/test_socks.py b/twisted/test/test_socks.py
index ebcb843..2d5d27f 100644
--- a/twisted/test/test_socks.py
+++ b/twisted/test/test_socks.py
@@ -95,7 +95,7 @@ class Connect(unittest.TestCase):
     def tearDown(self):
         outgoing = self.sock.driver_outgoing
         if outgoing is not None:
-            self.assert_(outgoing.transport.stringTCPTransport_closing,
+            self.assertTrue(outgoing.transport.stringTCPTransport_closing,
                          "Outgoing SOCKS connections need to be closed.")
 
 
@@ -110,8 +110,8 @@ class Connect(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 34)
                          + socket.inet_aton('1.2.3.4'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
-        self.assert_(self.sock.driver_outgoing is not None)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(self.sock.driver_outgoing is not None)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
@@ -156,7 +156,7 @@ class Connect(unittest.TestCase):
             sent,
             struct.pack('!BBH', 0, 90, 34) + socket.inet_aton('127.0.0.1'))
         self.assertFalse(self.sock.transport.stringTCPTransport_closing)
-        self.assertNotIdentical(self.sock.driver_outgoing, None)
+        self.assertIsNot(self.sock.driver_outgoing, None)
 
         # Pass some data through and verify it is forwarded to the outgoing
         # connection.
@@ -198,7 +198,7 @@ class Connect(unittest.TestCase):
 
         # A failed resolution causes the transport to drop the connection.
         self.assertTrue(self.sock.transport.stringTCPTransport_closing)
-        self.assertIdentical(self.sock.driver_outgoing, None)
+        self.assertIs(self.sock.driver_outgoing, None)
 
 
     def test_accessDenied(self):
@@ -211,8 +211,8 @@ class Connect(unittest.TestCase):
         self.assertEqual(self.sock.transport.value(),
                          struct.pack('!BBH', 0, 91, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(self.sock.transport.stringTCPTransport_closing)
-        self.assertIdentical(self.sock.driver_outgoing, None)
+        self.assertTrue(self.sock.transport.stringTCPTransport_closing)
+        self.assertIs(self.sock.driver_outgoing, None)
 
 
     def test_eofRemote(self):
@@ -267,7 +267,7 @@ class Bind(unittest.TestCase):
 ##         # TODO ensure the listen port is closed
 ##         listen = self.sock.driver_listen
 ##         if listen is not None:
-##             self.assert_(incoming.transport.stringTCPTransport_closing,
+##             self.assertTrue(incoming.transport.stringTCPTransport_closing,
 ##                     "Incoming SOCKS connections need to be closed.")
 
     def test_simple(self):
@@ -281,12 +281,12 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 1234)
                          + socket.inet_aton('6.7.8.9'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
-        self.assert_(self.sock.driver_listen is not None)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(self.sock.driver_listen is not None)
 
         # connect
         incoming = self.sock.driver_listen.buildProtocol(('1.2.3.4', 5345))
-        self.assertNotIdentical(incoming, None)
+        self.assertIsNot(incoming, None)
         incoming.transport = StringTCPTransport()
         incoming.connectionMade()
 
@@ -296,7 +296,7 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
@@ -341,11 +341,11 @@ class Bind(unittest.TestCase):
             sent,
             struct.pack('!BBH', 0, 90, 1234) + socket.inet_aton('6.7.8.9'))
         self.assertFalse(self.sock.transport.stringTCPTransport_closing)
-        self.assertNotIdentical(self.sock.driver_listen, None)
+        self.assertIsNot(self.sock.driver_listen, None)
 
         # connect
         incoming = self.sock.driver_listen.buildProtocol(('127.0.0.1', 5345))
-        self.assertNotIdentical(incoming, None)
+        self.assertIsNot(incoming, None)
         incoming.transport = StringTCPTransport()
         incoming.connectionMade()
 
@@ -355,7 +355,7 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assertNotIdentical(
+        self.assertIsNot(
             self.sock.transport.stringTCPTransport_closing, None)
 
         # Deliver some data from the output connection and verify it is
@@ -396,7 +396,7 @@ class Bind(unittest.TestCase):
 
         # A failed resolution causes the transport to drop the connection.
         self.assertTrue(self.sock.transport.stringTCPTransport_closing)
-        self.assertIdentical(self.sock.driver_outgoing, None)
+        self.assertIs(self.sock.driver_outgoing, None)
 
 
     def test_accessDenied(self):
@@ -409,8 +409,8 @@ class Bind(unittest.TestCase):
         self.assertEqual(self.sock.transport.value(),
                          struct.pack('!BBH', 0, 91, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(self.sock.transport.stringTCPTransport_closing)
-        self.assertIdentical(self.sock.driver_listen, None)
+        self.assertTrue(self.sock.transport.stringTCPTransport_closing)
+        self.assertIs(self.sock.driver_listen, None)
 
     def test_eofRemote(self):
         self.sock.dataReceived(
@@ -423,7 +423,7 @@ class Bind(unittest.TestCase):
 
         # connect
         incoming = self.sock.driver_listen.buildProtocol(('1.2.3.4', 5345))
-        self.assertNotIdentical(incoming, None)
+        self.assertIsNot(incoming, None)
         incoming.transport = StringTCPTransport()
         incoming.connectionMade()
 
@@ -433,7 +433,7 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
@@ -455,7 +455,7 @@ class Bind(unittest.TestCase):
 
         # connect
         incoming = self.sock.driver_listen.buildProtocol(('1.2.3.4', 5345))
-        self.assertNotIdentical(incoming, None)
+        self.assertIsNot(incoming, None)
         incoming.transport = StringTCPTransport()
         incoming.connectionMade()
 
@@ -465,7 +465,7 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 90, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(not self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(not self.sock.transport.stringTCPTransport_closing)
 
         # pass some data through
         self.sock.dataReceived('hello, world')
@@ -486,7 +486,7 @@ class Bind(unittest.TestCase):
 
         # connect from WRONG address
         incoming = self.sock.driver_listen.buildProtocol(('1.6.6.6', 666))
-        self.assertIdentical(incoming, None)
+        self.assertIs(incoming, None)
 
         # Now we should have the second reply packet and it should
         # be a failure. The connection should be closing.
@@ -495,4 +495,4 @@ class Bind(unittest.TestCase):
         self.assertEqual(sent,
                          struct.pack('!BBH', 0, 91, 0)
                          + socket.inet_aton('0.0.0.0'))
-        self.assert_(self.sock.transport.stringTCPTransport_closing)
+        self.assertTrue(self.sock.transport.stringTCPTransport_closing)
diff --git a/twisted/test/test_ssl.py b/twisted/test/test_ssl.py
index 6d1a3ec..58ec37e 100644
--- a/twisted/test/test_ssl.py
+++ b/twisted/test/test_ssl.py
@@ -423,7 +423,7 @@ class TLSTestCase(unittest.TestCase):
                 self.serverFactory.lines,
                 UnintelligentProtocol.pretext
             )
-            self.failUnless(self.serverFactory.rawdata,
+            self.assertTrue(self.serverFactory.rawdata,
                             "No encrypted bytes received")
         d = self._runTest(UnintelligentProtocol(),
                           LineCollector(False, self.fillBuffer))
@@ -598,8 +598,8 @@ class ConnectionLostTestCase(unittest.TestCase, ContextGeneratingMixin):
     def _cbLostConns(self, results):
         (sSuccess, sResult), (cSuccess, cResult) = results
 
-        self.failIf(sSuccess)
-        self.failIf(cSuccess)
+        self.assertFalse(sSuccess)
+        self.assertFalse(cSuccess)
 
         acceptableErrors = [SSL.Error]
 
diff --git a/twisted/test/test_sslverify.py b/twisted/test/test_sslverify.py
index 97fc6bc..27ce6ad 100644
--- a/twisted/test/test_sslverify.py
+++ b/twisted/test/test_sslverify.py
@@ -175,7 +175,7 @@ class OpenSSLOptions(unittest.TestCase):
                 sslverify.DN(CN='a', OU='hello'),
                 sslverify.DistinguishedName(commonName='a',
                                             organizationalUnitName='hello'))
-        self.assertNotEquals(
+        self.assertNotEqual(
                 sslverify.DN(CN='a', OU='hello'),
                 sslverify.DN(CN='a', OU='hello', emailAddress='xxx'))
         dn = sslverify.DN(CN='abcdefg')
@@ -275,7 +275,7 @@ class OpenSSLOptions(unittest.TestCase):
         state = firstOpts.__getstate__()
 
         # The context shouldn't be in the state to serialize
-        self.failIf(objgrep(state, context, isSame),
+        self.assertFalse(objgrep(state, context, isSame),
                     objgrep(state, context, isSame))
 
         opts = sslverify.OpenSSLCertificateOptions()
@@ -348,8 +348,8 @@ class OpenSSLOptions(unittest.TestCase):
 
         def afterLost(((cSuccess, cResult), (sSuccess, sResult))):
 
-            self.failIf(cSuccess)
-            self.failIf(sSuccess)
+            self.assertFalse(cSuccess)
+            self.assertFalse(sSuccess)
             # Win32 fails to report the SSL Error, and report a connection lost
             # instead: there is a race condition so that's not totally
             # surprising (see ticket #2877 in the tracker)
@@ -377,8 +377,8 @@ class OpenSSLOptions(unittest.TestCase):
                                consumeErrors=True)
         def afterLost(((cSuccess, cResult), (sSuccess, sResult))):
 
-            self.failIf(cSuccess)
-            self.failIf(sSuccess)
+            self.assertFalse(cSuccess)
+            self.assertFalse(sSuccess)
 
         return d.addCallback(afterLost)
 
@@ -499,7 +499,7 @@ class Constructors(unittest.TestCase):
         x = self.assertRaises(CertificateError,
                               sslverify.Certificate.peerFromTransport,
                               _NotSSLTransport())
-        self.failUnless(str(x).startswith("non-TLS"))
+        self.assertTrue(str(x).startswith("non-TLS"))
 
     def test_peerFromBlankSSLTransport(self):
         """
@@ -509,7 +509,7 @@ class Constructors(unittest.TestCase):
         x = self.assertRaises(CertificateError,
                               sslverify.Certificate.peerFromTransport,
                               _MaybeSSLTransport())
-        self.failUnless(str(x).startswith("TLS"))
+        self.assertTrue(str(x).startswith("TLS"))
 
     def test_hostFromNonSSLTransport(self):
         """
@@ -519,7 +519,7 @@ class Constructors(unittest.TestCase):
         x = self.assertRaises(CertificateError,
                               sslverify.Certificate.hostFromTransport,
                               _NotSSLTransport())
-        self.failUnless(str(x).startswith("non-TLS"))
+        self.assertTrue(str(x).startswith("non-TLS"))
 
     def test_hostFromBlankSSLTransport(self):
         """
@@ -529,7 +529,7 @@ class Constructors(unittest.TestCase):
         x = self.assertRaises(CertificateError,
                               sslverify.Certificate.hostFromTransport,
                               _MaybeSSLTransport())
-        self.failUnless(str(x).startswith("TLS"))
+        self.assertTrue(str(x).startswith("TLS"))
 
 
     def test_hostFromSSLTransport(self):
diff --git a/twisted/test/test_stdio.py b/twisted/test/test_stdio.py
index 5d1919d..1f64173 100644
--- a/twisted/test/test_stdio.py
+++ b/twisted/test/test_stdio.py
@@ -140,7 +140,7 @@ class StandardInputOutputTestCase(unittest.TestCase):
             for line in file(errorLogFile):
                 log.msg("Child logged: " + line.rstrip())
 
-            self.failIfIn(1, p.data)
+            self.assertNotIn(1, p.data)
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
 
@@ -221,8 +221,8 @@ class StandardInputOutputTestCase(unittest.TestCase):
 
         def processEnded(reason):
             host, peer = p.data[1].splitlines()
-            self.failUnless(host)
-            self.failUnless(peer)
+            self.assertTrue(host)
+            self.assertTrue(peer)
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
 
@@ -291,7 +291,7 @@ class StandardInputOutputTestCase(unittest.TestCase):
 
         def processEnded(reason):
             self.assertEqual(p.data[1], ''.join(written))
-            self.failIf(toWrite, "Connection lost with %d writes left to go." % (len(toWrite),))
+            self.assertFalse(toWrite, "Connection lost with %d writes left to go." % (len(toWrite),))
             reason.trap(error.ProcessDone)
         return self._requireFailure(d, processEnded)
 
diff --git a/twisted/test/test_strcred.py b/twisted/test/test_strcred.py
index 7233a58..76ef574 100644
--- a/twisted/test/test_strcred.py
+++ b/twisted/test/test_strcred.py
@@ -84,7 +84,7 @@ class TestStrcredFunctions(unittest.TestCase):
         Test that findCheckerFactory returns the first plugin
         available for a given authentication type.
         """
-        self.assertIdentical(strcred.findCheckerFactory('file'),
+        self.assertIs(strcred.findCheckerFactory('file'),
                              cred_file.theFileCheckerFactory)
 
 
@@ -165,7 +165,7 @@ class TestAnonymousChecker(unittest.TestCase):
         checker = strcred.makeChecker('anonymous')
         request = checker.requestAvatarId(credentials.Anonymous())
         def _gotAvatar(avatar):
-            self.assertIdentical(checkers.ANONYMOUS, avatar)
+            self.assertIs(checkers.ANONYMOUS, avatar)
         return request.addCallback(_gotAvatar)
 
 
@@ -589,9 +589,9 @@ class TestLimitingInterfaces(unittest.TestCase):
         options.addChecker(self.goodChecker)
         iface = options.supportedInterfaces[0]
         # Test that we did get IUsernamePassword
-        self.assertIdentical(
+        self.assertIs(
             options['credInterfaces'][iface][0], self.goodChecker)
-        self.assertIdentical(options['credCheckers'][0], self.goodChecker)
+        self.assertIs(options['credCheckers'][0], self.goodChecker)
         # Test that we didn't get IUsernameHashedPassword
         self.assertEqual(len(options['credInterfaces'][iface]), 1)
         self.assertEqual(len(options['credCheckers']), 1)
@@ -648,7 +648,7 @@ class TestLimitingInterfaces(unittest.TestCase):
             if not options.supportsCheckerFactory(factory):
                 invalidFactory = factory
                 break
-        self.assertNotIdentical(invalidFactory, None)
+        self.assertIsNot(invalidFactory, None)
         # Capture output and make sure the warning is there
         newStdout = StringIO.StringIO()
         options.authOutput = newStdout
diff --git a/twisted/test/test_stringtransport.py b/twisted/test/test_stringtransport.py
index ca12098..4eb496e 100644
--- a/twisted/test/test_stringtransport.py
+++ b/twisted/test/test_stringtransport.py
@@ -43,8 +43,8 @@ class StringTransportTests(TestCase):
         producer = object()
         streaming = object()
         self.transport.registerProducer(producer, streaming)
-        self.assertIdentical(self.transport.producer, producer)
-        self.assertIdentical(self.transport.streaming, streaming)
+        self.assertIs(self.transport.producer, producer)
+        self.assertIs(self.transport.streaming, streaming)
 
 
     def test_disallowedRegisterProducer(self):
@@ -56,7 +56,7 @@ class StringTransportTests(TestCase):
         self.transport.registerProducer(producer, True)
         self.assertRaises(
             RuntimeError, self.transport.registerProducer, object(), False)
-        self.assertIdentical(self.transport.producer, producer)
+        self.assertIs(self.transport.producer, producer)
         self.assertTrue(self.transport.streaming)
 
 
@@ -70,9 +70,9 @@ class StringTransportTests(TestCase):
         newProducer = object()
         self.transport.registerProducer(oldProducer, False)
         self.transport.unregisterProducer()
-        self.assertIdentical(self.transport.producer, None)
+        self.assertIs(self.transport.producer, None)
         self.transport.registerProducer(newProducer, True)
-        self.assertIdentical(self.transport.producer, newProducer)
+        self.assertIs(self.transport.producer, newProducer)
         self.assertTrue(self.transport.streaming)
 
 
@@ -171,7 +171,7 @@ class StringTransportTests(TestCase):
         value is returned from L{StringTransport.getHost}.
         """
         address = object()
-        self.assertIdentical(StringTransport(address).getHost(), address)
+        self.assertIs(StringTransport(address).getHost(), address)
 
 
     def test_specifiedPeerAddress(self):
@@ -180,7 +180,7 @@ class StringTransportTests(TestCase):
         value is returned from L{StringTransport.getPeer}.
         """        
         address = object()
-        self.assertIdentical(
+        self.assertIs(
             StringTransport(peerAddress=address).getPeer(), address)
 
 
diff --git a/twisted/test/test_strports.py b/twisted/test/test_strports.py
index fd081ec..e32f536 100644
--- a/twisted/test/test_strports.py
+++ b/twisted/test/test_strports.py
@@ -73,8 +73,8 @@ class ServiceTestCase(TestCase):
         self.assertIsInstance(svc.endpoint, TCP4ServerEndpoint)
         # Maybe we should implement equality for endpoints.
         self.assertEqual(svc.endpoint._port, aGoodPort)
-        self.assertIdentical(svc.factory, aFactory)
-        self.assertIdentical(svc.endpoint._reactor, reactor)
+        self.assertIs(svc.factory, aFactory)
+        self.assertIs(svc.endpoint._reactor, reactor)
 
 
     def test_serviceDefaultReactor(self):
@@ -84,7 +84,7 @@ class ServiceTestCase(TestCase):
         """
         from twisted.internet import reactor as globalReactor
         aService = strports.service("tcp:80", None)
-        self.assertIdentical(aService.endpoint._reactor, globalReactor)
+        self.assertIs(aService.endpoint._reactor, globalReactor)
 
 
     def test_serviceDeprecatedDefault(self):
diff --git a/twisted/test/test_task.py b/twisted/test/test_task.py
index 75be888..f76c60d 100644
--- a/twisted/test/test_task.py
+++ b/twisted/test/test_task.py
@@ -44,9 +44,9 @@ class ClockTestCase(unittest.TestCase):
         """
         c = task.Clock()
         call = c.callLater(1, lambda a, b: None, 1, b=2)
-        self.failUnless(interfaces.IDelayedCall.providedBy(call))
+        self.assertTrue(interfaces.IDelayedCall.providedBy(call))
         self.assertEqual(call.getTime(), 1)
-        self.failUnless(call.active())
+        self.assertTrue(call.active())
 
 
     def testCallLaterCancelled(self):
@@ -56,7 +56,7 @@ class ClockTestCase(unittest.TestCase):
         c = task.Clock()
         call = c.callLater(1, lambda a, b: None, 1, b=2)
         call.cancel()
-        self.failIf(call.active())
+        self.assertFalse(call.active())
 
 
     def test_callLaterOrdering(self):
@@ -67,7 +67,7 @@ class ClockTestCase(unittest.TestCase):
         c = task.Clock()
         call1 = c.callLater(10, lambda a, b: None, 1, b=2)
         call2 = c.callLater(1, lambda a, b: None, 3, b=4)
-        self.failIf(call1 is call2)
+        self.assertFalse(call1 is call2)
 
 
     def testAdvance(self):
@@ -81,7 +81,7 @@ class ClockTestCase(unittest.TestCase):
         self.assertEqual(events, [])
         c.advance(1)
         self.assertEqual(events, [None])
-        self.failIf(call.active())
+        self.assertFalse(call.active())
 
 
     def testAdvanceCancel(self):
@@ -167,7 +167,7 @@ class ClockTestCase(unittest.TestCase):
 
     def test_providesIReactorTime(self):
         c = task.Clock()
-        self.failUnless(interfaces.IReactorTime.providedBy(c),
+        self.assertTrue(interfaces.IReactorTime.providedBy(c),
                         "Clock does not provide IReactorTime")
 
 
@@ -465,10 +465,10 @@ class LoopTestCase(unittest.TestCase):
             self.assertEqual(d, "d")
 
         lc.stop()
-        self.assertIdentical(theResult[0], lc)
+        self.assertIs(theResult[0], lc)
 
         # Make sure it isn't planning to do anything further.
-        self.failIf(clock.calls)
+        self.assertFalse(clock.calls)
 
 
     def testDelayedStart(self):
@@ -490,9 +490,9 @@ class LoopTestCase(unittest.TestCase):
         self.assertEqual(len(L), 2,
                           "got %d iterations, not 2" % (len(L),))
         lc.stop()
-        self.assertIdentical(theResult[0], lc)
+        self.assertIs(theResult[0], lc)
 
-        self.failIf(clock.calls)
+        self.assertFalse(clock.calls)
 
 
     def testBadDelay(self):
@@ -510,8 +510,8 @@ class LoopTestCase(unittest.TestCase):
         lc = TestableLoopingCall(clock, foo)
         lc.start(delay, now=False)
         lc.stop()
-        self.failIf(ran)
-        self.failIf(clock.calls)
+        self.assertFalse(ran)
+        self.assertFalse(clock.calls)
 
 
     def testStopAtOnce(self):
@@ -609,7 +609,7 @@ class ReactorLoopTestCase(unittest.TestCase):
         lc = TestableLoopingCall(clock, foo)
         lc.start(0.2)
         clock.pump(timings)
-        self.failIf(clock.calls)
+        self.assertFalse(clock.calls)
 
     def testFailurePropagation(self):
         # Tests if the failure of the errback of the deferred returned by the
@@ -631,7 +631,7 @@ class ReactorLoopTestCase(unittest.TestCase):
         self.assertFailure(d, TestException)
 
         clock.pump(timings)
-        self.failIf(clock.calls)
+        self.assertFalse(clock.calls)
         return d
 
 
diff --git a/twisted/test/test_tcp.py b/twisted/test/test_tcp.py
index aac8888..99c813e 100644
--- a/twisted/test/test_tcp.py
+++ b/twisted/test/test_tcp.py
@@ -177,7 +177,7 @@ class ListeningTestCase(unittest.TestCase):
         f = MyServerFactory()
         p1 = reactor.listenTCP(0, f, interface="127.0.0.1")
         self.addCleanup(p1.stopListening)
-        self.failUnless(interfaces.IListeningPort.providedBy(p1))
+        self.assertTrue(interfaces.IListeningPort.providedBy(p1))
 
 
     def testStopListening(self):
@@ -211,9 +211,9 @@ class ListeningTestCase(unittest.TestCase):
         f = MyServerFactory()
         p = reactor.listenTCP(0, f)
         portNo = str(p.getHost().port)
-        self.failIf(repr(p).find(portNo) == -1)
+        self.assertFalse(repr(p).find(portNo) == -1)
         def stoppedListening(ign):
-            self.failIf(repr(p).find(portNo) != -1)
+            self.assertFalse(repr(p).find(portNo) != -1)
         d = defer.maybeDeferred(p.stopListening)
         return d.addCallback(stoppedListening)
 
@@ -900,13 +900,13 @@ class WriteDataTestCase(unittest.TestCase):
         reactor.connectTCP("127.0.0.1", n, wrappedClientF)
 
         def check(ignored):
-            self.failUnless(f.done, "writer didn't finish, it probably died")
-            self.failUnless(f.problem == 0, "writer indicated an error")
-            self.failUnless(clientF.done,
+            self.assertTrue(f.done, "writer didn't finish, it probably died")
+            self.assertTrue(f.problem == 0, "writer indicated an error")
+            self.assertTrue(clientF.done,
                             "client didn't see connection dropped")
             expected = "".join(["Hello Cleveland!\n",
                                 "Goodbye", " cruel", " world", "\n"])
-            self.failUnless(clientF.data == expected,
+            self.assertTrue(clientF.data == expected,
                             "client didn't receive all the data it expected")
         d = defer.gatherResults([wrappedF.onDisconnect,
                                  wrappedClientF.onDisconnect])
@@ -1426,11 +1426,11 @@ class LargeBufferTestCase(unittest.TestCase):
 
         d = defer.gatherResults([wrappedF.deferred, wrappedClientF.deferred])
         def check(ignored):
-            self.failUnless(f.done, "writer didn't finish, it probably died")
-            self.failUnless(clientF.len == self.datalen,
+            self.assertTrue(f.done, "writer didn't finish, it probably died")
+            self.assertTrue(clientF.len == self.datalen,
                             "client didn't receive all the data it expected "
                             "(%d != %d)" % (clientF.len, self.datalen))
-            self.failUnless(clientF.done,
+            self.assertTrue(clientF.done,
                             "client didn't see connection dropped")
         return d.addCallback(check)
 
diff --git a/twisted/test/test_text.py b/twisted/test/test_text.py
index 92fad77..a9c5f07 100644
--- a/twisted/test/test_text.py
+++ b/twisted/test/test_text.py
@@ -50,7 +50,7 @@ class WrapTest(unittest.TestCase):
 
         # Using assertEqual here prints out some
         # rather too long lists.
-        self.failUnless(self.sampleSplitText == words)
+        self.assertTrue(self.sampleSplitText == words)
 
     def test_lineLength(self):
         """Check the length of the lines."""
diff --git a/twisted/test/test_threadable.py b/twisted/test/test_threadable.py
index f23515a..2f6e351 100644
--- a/twisted/test/test_threadable.py
+++ b/twisted/test/test_threadable.py
@@ -51,8 +51,8 @@ class SynchronizationTestCase(unittest.TestCase):
         t = threading.Thread(target=lambda: foreignResult.append(threadable.isInIOThread()))
         t.start()
         t.join()
-        self.failIf(foreignResult[0], "Non-IO thread reported as IO thread")
-        self.failUnless(threadable.isInIOThread(), "IO thread reported as not IO thread")
+        self.assertFalse(foreignResult[0], "Non-IO thread reported as IO thread")
+        self.assertTrue(threadable.isInIOThread(), "IO thread reported as not IO thread")
 
 
     def testThreadedSynchronization(self):
@@ -90,7 +90,7 @@ class SerializationTestCase(unittest.TestCase):
         lockType = type(lock)
         lockPickle = pickle.dumps(lock)
         newLock = pickle.loads(lockPickle)
-        self.failUnless(isinstance(newLock, lockType))
+        self.assertTrue(isinstance(newLock, lockType))
 
     def testUnpickling(self):
         lockPickle = 'ctwisted.python.threadable\nunpickle_lock\np0\n(tp1\nRp2\n.'
diff --git a/twisted/test/test_threadpool.py b/twisted/test/test_threadpool.py
index 3b1ff83..aa46cc0 100644
--- a/twisted/test/test_threadpool.py
+++ b/twisted/test/test_threadpool.py
@@ -245,7 +245,7 @@ class ThreadPoolTestCase(unittest.TestCase):
 
         self._waitForLock(waiting)
 
-        self.failIf(actor.failures, "run() re-entered %d times" %
+        self.assertFalse(actor.failures, "run() re-entered %d times" %
                                     (actor.failures,))
 
 
diff --git a/twisted/test/test_threads.py b/twisted/test/test_threads.py
index e1ddd82..ea72412 100644
--- a/twisted/test/test_threads.py
+++ b/twisted/test/test_threads.py
@@ -167,7 +167,7 @@ class ReactorThreadsTestCase(unittest.TestCase):
         def reactorFunc():
             return defer.fail(RuntimeError("bar"))
         def cb(res):
-            self.assert_(isinstance(res[1][0], RuntimeError))
+            self.assertTrue(isinstance(res[1][0], RuntimeError))
             self.assertEqual(res[1][0].args[0], "bar")
 
         return self._testBlockingCallFromThread(reactorFunc).addCallback(cb)
@@ -182,7 +182,7 @@ class ReactorThreadsTestCase(unittest.TestCase):
             reactor.callLater(0.1, d.errback, RuntimeError("spam"))
             return d
         def cb(res):
-            self.assert_(isinstance(res[1][0], RuntimeError))
+            self.assertTrue(isinstance(res[1][0], RuntimeError))
             self.assertEqual(res[1][0].args[0], "spam")
 
         return self._testBlockingCallFromThread(reactorFunc).addCallback(cb)
@@ -383,7 +383,7 @@ class StartupBehaviorTestCase(unittest.TestCase):
 
             if err:
                 log.msg("Unexpected output on standard error: %s" % (err,))
-            self.failIf(out, "Expected no output, instead received:\n%s" % (out,))
+            self.assertFalse(out, "Expected no output, instead received:\n%s" % (out,))
 
         def programTimeout(err):
             err.trap(error.TimeoutError)
diff --git a/twisted/test/test_tpfile.py b/twisted/test/test_tpfile.py
index 655a166..46c8b9f 100644
--- a/twisted/test/test_tpfile.py
+++ b/twisted/test/test_tpfile.py
@@ -47,6 +47,6 @@ class FileSenderTestCase(unittest.TestCase):
         self.assertEqual(consumer.producer, None)
 
         # Which means the Deferred from FileSender should have been called
-        self.failUnless(d.called, 
+        self.assertTrue(d.called, 
                         'producer unregistered with deferred being called')
 
diff --git a/twisted/test/test_twistd.py b/twisted/test/test_twistd.py
index d8ae688..c7a5b44 100644
--- a/twisted/test/test_twistd.py
+++ b/twisted/test/test_twistd.py
@@ -443,11 +443,11 @@ class ApplicationRunnerTest(unittest.TestCase):
         arunner = CrippledApplicationRunner(self.config)
         arunner.run()
 
-        self.assertIdentical(
+        self.assertIs(
             self.serviceMaker.options, self.config.subOptions,
             "ServiceMaker.makeService needs to be passed the correct "
             "sub Command object.")
-        self.assertIdentical(
+        self.assertIs(
             self.serviceMaker.service,
             service.IService(arunner.application).services[0],
             "ServiceMaker.makeService's result needs to be set as a child "
@@ -642,7 +642,7 @@ class UnixApplicationRunnerSetupEnvironmentTests(unittest.TestCase):
         the filesystem if passed C{None} for the C{chroot} parameter.
         """
         self.runner.setupEnvironment(None, ".", True, None, None)
-        self.assertIdentical(self.root, self.unset)
+        self.assertIs(self.root, self.unset)
 
 
     def test_changeWorkingDirectory(self):
@@ -715,7 +715,7 @@ class UnixApplicationRunnerSetupEnvironmentTests(unittest.TestCase):
         passed for the C{nodaemon} parameter.
         """
         self.runner.setupEnvironment(None, ".", True, None, None)
-        self.assertIdentical(self.mask, self.unset)
+        self.assertIs(self.mask, self.unset)
 
 
     def test_daemonizedNoUmask(self):
@@ -1001,7 +1001,7 @@ class AppProfilingTestCase(unittest.TestCase):
 
         oldStdout = sys.stdout
         self.assertRaises(RuntimeError, profiler.run, reactor)
-        self.assertIdentical(sys.stdout, oldStdout)
+        self.assertIs(sys.stdout, oldStdout)
 
     if profile is None:
         test_profilePrintStatsError.skip = "profile module not available"
@@ -1086,7 +1086,7 @@ class AppProfilingTestCase(unittest.TestCase):
 
         oldStdout = sys.stdout
         self.assertRaises(RuntimeError, profiler.run, reactor)
-        self.assertIdentical(sys.stdout, oldStdout)
+        self.assertIs(sys.stdout, oldStdout)
 
     if hotshot is None:
         test_hotshotPrintStatsError.skip = "hotshot module not available"
@@ -1375,13 +1375,13 @@ class AppLoggerTestCase(unittest.TestCase):
         observer = logger._getLogObserver()
 
         self.assertEqual(len(logFiles), 1)
-        self.assertIdentical(logFiles[0], sys.stdout)
+        self.assertIs(logFiles[0], sys.stdout)
 
         logger = app.AppLogger({"logfile": ""})
         observer = logger._getLogObserver()
 
         self.assertEqual(len(logFiles), 2)
-        self.assertIdentical(logFiles[1], sys.stdout)
+        self.assertIs(logFiles[1], sys.stdout)
 
 
     def test_getLogObserverFile(self):
@@ -1417,7 +1417,7 @@ class AppLoggerTestCase(unittest.TestCase):
         self.assertEqual(removed, [observer])
         logger.stop()
         self.assertEqual(removed, [observer])
-        self.assertIdentical(logger._observer, None)
+        self.assertIs(logger._observer, None)
 
 
 
@@ -1453,12 +1453,12 @@ class UnixAppLoggerTestCase(unittest.TestCase):
         logger = UnixAppLogger({"logfile": "-", "nodaemon": True})
         observer = logger._getLogObserver()
         self.assertEqual(len(logFiles), 1)
-        self.assertIdentical(logFiles[0], sys.stdout)
+        self.assertIs(logFiles[0], sys.stdout)
 
         logger = UnixAppLogger({"logfile": "", "nodaemon": True})
         observer = logger._getLogObserver()
         self.assertEqual(len(logFiles), 2)
-        self.assertIdentical(logFiles[1], sys.stdout)
+        self.assertIs(logFiles[1], sys.stdout)
 
 
     def test_getLogObserverStdoutDaemon(self):
diff --git a/twisted/test/test_udp.py b/twisted/test/test_udp.py
index 92ebcec..3f7dd80 100644
--- a/twisted/test/test_udp.py
+++ b/twisted/test/test_udp.py
@@ -379,7 +379,7 @@ class UDPTestCase(unittest.TestCase):
                 except:
                     finalDeferred.errback()
 
-            self.failIfIdentical(client.transport, None, "UDP Protocol lost its transport")
+            self.assertIsNot(client.transport, None, "UDP Protocol lost its transport")
 
             packet = str(attempts.pop(0))
             packetDeferred = defer.Deferred()
@@ -433,9 +433,9 @@ class UDPTestCase(unittest.TestCase):
         client = GoodClient()
         p = reactor.listenUDP(0, client)
         portNo = str(p.getHost().port)
-        self.failIf(repr(p).find(portNo) == -1)
+        self.assertFalse(repr(p).find(portNo) == -1)
         def stoppedListening(ign):
-            self.failIf(repr(p).find(portNo) != -1)
+            self.assertFalse(repr(p).find(portNo) != -1)
         d = defer.maybeDeferred(p.stopListening)
         d.addCallback(stoppedListening)
         return d
diff --git a/twisted/test/test_unix.py b/twisted/test/test_unix.py
index 863f665..3cfd38f 100644
--- a/twisted/test/test_unix.py
+++ b/twisted/test/test_unix.py
@@ -116,7 +116,7 @@ class UnixSocketTestCase(unittest.TestCase):
         d.addCallback(_portStuff)
 
         def _check(ignored):
-            self.failIf(lockfile.isLocked(filename + ".lock"), 'locked')
+            self.assertFalse(lockfile.isLocked(filename + ".lock"), 'locked')
         d.addCallback(_check)
         return d
 
@@ -329,7 +329,7 @@ class DatagramUnixSocketTestCase(unittest.TestCase):
         addr = self.mktemp()
         p = ServerProto()
         s = reactor.listenUNIXDatagram(addr, p)
-        self.failUnlessRaises(error.CannotListenError, reactor.listenUNIXDatagram, addr, p)
+        self.assertRaises(error.CannotListenError, reactor.listenUNIXDatagram, addr, p)
         s.stopListening()
         os.unlink(addr)
 
diff --git a/twisted/test/test_usage.py b/twisted/test/test_usage.py
index 5a20f01..ff0a59d 100644
--- a/twisted/test/test_usage.py
+++ b/twisted/test/test_usage.py
@@ -108,9 +108,9 @@ class TypedTestCase(unittest.TestCase):
         argV = []
         self.usage.parseOptions(argV)
         self.assertEqual(self.usage.opts['fooint'], 392)
-        self.assert_(isinstance(self.usage.opts['fooint'], int))
+        self.assertTrue(isinstance(self.usage.opts['fooint'], int))
         self.assertEqual(self.usage.opts['foofloat'], 4.23)
-        self.assert_(isinstance(self.usage.opts['foofloat'], float))
+        self.assertTrue(isinstance(self.usage.opts['foofloat'], float))
         self.assertEqual(self.usage.opts['eggint'], None)
         self.assertEqual(self.usage.opts['eggfloat'], None)
 
@@ -123,13 +123,13 @@ class TypedTestCase(unittest.TestCase):
                 "--eggint 32 --eggfloat 21").split()
         self.usage.parseOptions(argV)
         self.assertEqual(self.usage.opts['fooint'], 912)
-        self.assert_(isinstance(self.usage.opts['fooint'], int))
+        self.assertTrue(isinstance(self.usage.opts['fooint'], int))
         self.assertEqual(self.usage.opts['foofloat'], -823.1)
-        self.assert_(isinstance(self.usage.opts['foofloat'], float))
+        self.assertTrue(isinstance(self.usage.opts['foofloat'], float))
         self.assertEqual(self.usage.opts['eggint'], 32)
-        self.assert_(isinstance(self.usage.opts['eggint'], int))
+        self.assertTrue(isinstance(self.usage.opts['eggint'], int))
         self.assertEqual(self.usage.opts['eggfloat'], 21.)
-        self.assert_(isinstance(self.usage.opts['eggfloat'], float))
+        self.assertTrue(isinstance(self.usage.opts['eggfloat'], float))
 
 
     def test_underscoreOption(self):
@@ -260,7 +260,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['--europian-swallow', 'inquisition'])
         self.assertEqual(o['europian-swallow'], True)
         self.assertEqual(o.subCommand, 'inquisition')
-        self.failUnless(isinstance(o.subOptions, InquisitionOptions))
+        self.assertTrue(isinstance(o.subOptions, InquisitionOptions))
         self.assertEqual(o.subOptions['expect'], False)
         self.assertEqual(o.subOptions['torture-device'], 'comfy-chair')
 
@@ -269,7 +269,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['inquisition', '--expect', '--torture-device=feather'])
         self.assertEqual(o['europian-swallow'], False)
         self.assertEqual(o.subCommand, 'inquisition')
-        self.failUnless(isinstance(o.subOptions, InquisitionOptions))
+        self.assertTrue(isinstance(o.subOptions, InquisitionOptions))
         self.assertEqual(o.subOptions['expect'], True)
         self.assertEqual(o.subOptions['torture-device'], 'feather')
 
@@ -278,7 +278,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['inquest', '--expect', '--torture-device=feather'])
         self.assertEqual(o['europian-swallow'], False)
         self.assertEqual(o.subCommand, 'inquisition')
-        self.failUnless(isinstance(o.subOptions, InquisitionOptions))
+        self.assertTrue(isinstance(o.subOptions, InquisitionOptions))
         self.assertEqual(o.subOptions['expect'], True)
         self.assertEqual(o.subOptions['torture-device'], 'feather')
 
@@ -287,7 +287,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['holyquest', '--for-grail'])
         self.assertEqual(o['europian-swallow'], False)
         self.assertEqual(o.subCommand, 'holyquest')
-        self.failUnless(isinstance(o.subOptions, HolyQuestOptions))
+        self.assertTrue(isinstance(o.subOptions, HolyQuestOptions))
         self.assertEqual(o.subOptions['horseback'], False)
         self.assertEqual(o.subOptions['for-grail'], True)
 
@@ -296,7 +296,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['--europian-swallow'])
         self.assertEqual(o['europian-swallow'], True)
         self.assertEqual(o.subCommand, None)
-        self.failIf(hasattr(o, 'subOptions'))
+        self.assertFalse(hasattr(o, 'subOptions'))
 
     def test_defaultSubcommand(self):
         o = SubCommandOptions()
@@ -304,7 +304,7 @@ class SubCommandTest(unittest.TestCase):
         o.parseOptions(['--europian-swallow'])
         self.assertEqual(o['europian-swallow'], True)
         self.assertEqual(o.subCommand, 'inquisition')
-        self.failUnless(isinstance(o.subOptions, InquisitionOptions))
+        self.assertTrue(isinstance(o.subOptions, InquisitionOptions))
         self.assertEqual(o.subOptions['expect'], False)
         self.assertEqual(o.subOptions['torture-device'], 'comfy-chair')
 
@@ -319,7 +319,7 @@ class SubCommandTest(unittest.TestCase):
                 ]
         o = Opt()
         o.parseOptions(['foo'])
-        self.failUnless(hasattr(o.subOptions, 'sawParent'))
+        self.assertTrue(hasattr(o.subOptions, 'sawParent'))
         self.assertEqual(o.subOptions.sawParent , o)
 
     def test_subCommandInTwoPlaces(self):
@@ -341,10 +341,10 @@ class SubCommandTest(unittest.TestCase):
         oFoo.parseOptions(['foo'])
         oBar=OptBar()
         oBar.parseOptions(['bar'])
-        self.failUnless(hasattr(oFoo.subOptions, 'parent'))
-        self.failUnless(hasattr(oBar.subOptions, 'parent'))
-        self.failUnlessIdentical(oFoo.subOptions.parent, oFoo)
-        self.failUnlessIdentical(oBar.subOptions.parent, oBar)
+        self.assertTrue(hasattr(oFoo.subOptions, 'parent'))
+        self.assertTrue(hasattr(oBar.subOptions, 'parent'))
+        self.assertIs(oFoo.subOptions.parent, oFoo)
+        self.assertIs(oBar.subOptions.parent, oBar)
 
 
 class HelpStringTest(unittest.TestCase):
@@ -375,8 +375,8 @@ class HelpStringTest(unittest.TestCase):
         # We test this by making sure aflag and it's help string are on the
         # same line.
         lines = [s for s in str(self.nice).splitlines() if s.find("aflag")>=0]
-        self.failUnless(len(lines) > 0)
-        self.failUnless(lines[0].find("flagallicious") >= 0)
+        self.assertTrue(len(lines) > 0)
+        self.assertTrue(lines[0].find("flagallicious") >= 0)
 
 
 class PortCoerceTestCase(unittest.TestCase):
diff --git a/twisted/trial/test/detests.py b/twisted/trial/test/detests.py
index b131bda..8beabe3 100644
--- a/twisted/trial/test/detests.py
+++ b/twisted/trial/test/detests.py
@@ -13,7 +13,7 @@ class DeferredSetUpOK(unittest.TestCase):
         self._setUpCalled = True
 
     def test_ok(self):
-        self.failUnless(self._setUpCalled)
+        self.assertTrue(self._setUpCalled)
 
 
 class DeferredSetUpFail(unittest.TestCase):
diff --git a/twisted/trial/test/test_assertions.py b/twisted/trial/test/test_assertions.py
index c720a64..1597759 100644
--- a/twisted/trial/test/test_assertions.py
+++ b/twisted/trial/test/test_assertions.py
@@ -57,31 +57,31 @@ class TestAssertions(unittest.TestCase):
         test = runner.TestLoader().loadClass(TestAssertions.FailingTest)
         result = reporter.TestResult()
         test.run(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.errors, [])
         self.assertEqual(len(result.failures), 1)
 
-    def test_failIf(self):
+    def test_assertFalse(self):
         for notTrue in [0, 0.0, False, None, (), []]:
-            self.failIf(notTrue, "failed on %r" % (notTrue,))
+            self.assertFalse(notTrue, "failed on %r" % (notTrue,))
         for true in [1, True, 'cat', [1,2], (3,4)]:
             try:
-                self.failIf(true, "failed on %r" % (true,))
+                self.assertFalse(true, "failed on %r" % (true,))
             except self.failureException, e:
                 self.assertEqual(str(e), "failed on %r" % (true,))
             else:
-                self.fail("Call to failIf(%r) didn't fail" % (true,))
+                self.fail("Call to assertFalse(%r) didn't fail" % (true,))
 
-    def test_failUnless(self):
+    def test_assertTrue(self):
         for notTrue in [0, 0.0, False, None, (), []]:
             try:
-                self.failUnless(notTrue, "failed on %r" % (notTrue,))
+                self.assertTrue(notTrue, "failed on %r" % (notTrue,))
             except self.failureException, e:
                 self.assertEqual(str(e), "failed on %r" % (notTrue,))
             else:
-                self.fail("Call to failUnless(%r) didn't fail" % (notTrue,))
+                self.fail("Call to assertTrue(%r) didn't fail" % (notTrue,))
         for true in [1, True, 'cat', [1,2], (3,4)]:
-            self.failUnless(true, "failed on %r" % (true,))
+            self.assertTrue(true, "failed on %r" % (true,))
 
 
     def _testEqualPair(self, first, second):
@@ -161,15 +161,15 @@ class TestAssertions(unittest.TestCase):
     def _raiseError(self, error):
         raise error
 
-    def test_failUnlessRaises_expected(self):
-        x = self.failUnlessRaises(ValueError, self._raiseError, ValueError)
-        self.failUnless(isinstance(x, ValueError),
+    def test_assertRaises_expected(self):
+        x = self.assertRaises(ValueError, self._raiseError, ValueError)
+        self.assertTrue(isinstance(x, ValueError),
                         "Expect failUnlessRaises to return instance of raised "
                         "exception.")
 
-    def test_failUnlessRaises_unexpected(self):
+    def test_assertRaises_unexpected(self):
         try:
-            self.failUnlessRaises(ValueError, self._raiseError, TypeError)
+            self.assertRaises(ValueError, self._raiseError, TypeError)
         except TypeError:
             self.fail("failUnlessRaises shouldn't re-raise unexpected "
                       "exceptions")
@@ -179,23 +179,23 @@ class TestAssertions(unittest.TestCase):
         else:
             self.fail("Expected exception wasn't raised. Should have failed")
 
-    def test_failUnlessRaises_noException(self):
+    def test_assertRaises_noException(self):
         try:
-            self.failUnlessRaises(ValueError, lambda : None)
+            self.assertRaises(ValueError, lambda : None)
         except self.failureException, e:
             self.assertEqual(str(e),
                                  'ValueError not raised (None returned)')
         else:
             self.fail("Exception not raised. Should have failed")
 
-    def test_failUnlessRaises_failureException(self):
-        x = self.failUnlessRaises(self.failureException, self._raiseError,
+    def test_assertRaises_failureException(self):
+        x = self.assertRaises(self.failureException, self._raiseError,
                                   self.failureException)
-        self.failUnless(isinstance(x, self.failureException),
+        self.assertTrue(isinstance(x, self.failureException),
                         "Expected %r instance to be returned"
                         % (self.failureException,))
         try:
-            x = self.failUnlessRaises(self.failureException, self._raiseError,
+            x = self.assertRaises(self.failureException, self._raiseError,
                                       ValueError)
         except self.failureException:
             # what we expect
@@ -203,97 +203,97 @@ class TestAssertions(unittest.TestCase):
         else:
             self.fail("Should have raised exception")
 
-    def test_failIfEqual_basic(self):
+    def test_assertEqual_basic(self):
         x, y, z = [1], [2], [1]
-        ret = self.failIfEqual(x, y)
+        ret = self.assertNotEqual(x, y)
         self.assertEqual(ret, x,
                              "failIfEqual should return first parameter")
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfEqual, x, x)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfEqual, x, z)
 
-    def test_failIfEqual_customEq(self):
+    def test_assertEqual_customEq(self):
         x = MockEquality('first')
         y = MockEquality('second')
         z = MockEquality('fecund')
-        ret = self.failIfEqual(x, y)
+        ret = self.assertNotEqual(x, y)
         self.assertEqual(ret, x,
                              "failIfEqual should return first parameter")
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfEqual, x, x)
         # test when __ne__ is not defined
-        self.failIfEqual(x, z, "__ne__ not defined, so not equal")
+        self.assertNotEqual(x, z, "__ne__ not defined, so not equal")
 
-    def test_failUnlessIdentical(self):
+    def test_assertIs(self):
         x, y, z = [1], [1], [2]
-        ret = self.failUnlessIdentical(x, x)
+        ret = self.assertIs(x, x)
         self.assertEqual(ret, x,
                              'failUnlessIdentical should return first '
                              'parameter')
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessIdentical, x, y)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessIdentical, x, z)
 
-    def test_failUnlessApproximates(self):
+    def test_assertApproximates(self):
         x, y, z = 1.0, 1.1, 1.2
-        self.failUnlessApproximates(x, x, 0.2)
-        ret = self.failUnlessApproximates(x, y, 0.2)
+        self.assertApproximates(x, x, 0.2)
+        ret = self.assertApproximates(x, y, 0.2)
         self.assertEqual(ret, x, "failUnlessApproximates should return "
                              "first parameter")
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessApproximates, x, z, 0.1)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessApproximates, x, y, 0.1)
 
-    def test_failUnlessAlmostEqual(self):
+    def test_assertNotAlmostEqual(self):
         precision = 5
         x = 8.000001
         y = 8.00001
         z = 8.000002
-        self.failUnlessAlmostEqual(x, x, precision)
-        ret = self.failUnlessAlmostEqual(x, z, precision)
+        self.assertNotAlmostEqual(x, x, precision)
+        ret = self.assertNotAlmostEqual(x, z, precision)
         self.assertEqual(ret, x, "failUnlessAlmostEqual should return "
                              "first parameter (%r, %r)" % (ret, x))
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessAlmostEqual, x, y, precision)
 
-    def test_failIfAlmostEqual(self):
+    def test_assertNotAlmostEqual(self):
         precision = 5
         x = 8.000001
         y = 8.00001
         z = 8.000002
-        ret = self.failIfAlmostEqual(x, y, precision)
+        ret = self.assertNotAlmostEqual(x, y, precision)
         self.assertEqual(ret, x, "failIfAlmostEqual should return "
                              "first parameter (%r, %r)" % (ret, x))
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfAlmostEqual, x, x, precision)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfAlmostEqual, x, z, precision)
 
-    def test_failUnlessSubstring(self):
+    def test_assertIn(self):
         x = "cat"
         y = "the dog sat"
         z = "the cat sat"
-        self.failUnlessSubstring(x, x)
-        ret = self.failUnlessSubstring(x, z)
+        self.assertIn(x, x)
+        ret = self.assertIn(x, z)
         self.assertEqual(ret, x, 'should return first parameter')
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessSubstring, x, y)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failUnlessSubstring, z, x)
 
-    def test_failIfSubstring(self):
+    def test_assertNotIn(self):
         x = "cat"
         y = "the dog sat"
         z = "the cat sat"
-        self.failIfSubstring(z, x)
-        ret = self.failIfSubstring(x, y)
+        self.assertNotIn(z, x)
+        ret = self.assertNotIn(x, y)
         self.assertEqual(ret, x, 'should return first parameter')
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfSubstring, x, x)
-        self.failUnlessRaises(self.failureException,
+        self.assertRaises(self.failureException,
                               self.failIfSubstring, x, z)
 
     def test_assertFailure(self):
@@ -678,7 +678,7 @@ class TestAssertionNames(unittest.TestCase):
             failUnlesses, asserts.intersection(failUnlesses))
 
 
-    def test_failIf_matches_assertNot(self):
+    def test_failIf_matches_assertFalse(self):
         asserts = reflect.prefixedMethods(unittest.TestCase, 'assertNot')
         failIfs = reflect.prefixedMethods(unittest.TestCase, 'failIf')
         self.assertEqual(sorted(asserts, key=self._name),
@@ -689,11 +689,11 @@ class TestAssertionNames(unittest.TestCase):
             if not callable(value):
                 continue
             if name.endswith('Equal'):
-                self.failUnless(hasattr(self, name+'s'),
+                self.assertTrue(hasattr(self, name+'s'),
                                 "%s but no %ss" % (name, name))
                 self.assertEqual(value, getattr(self, name+'s'))
             if name.endswith('Equals'):
-                self.failUnless(hasattr(self, name[:-1]),
+                self.assertTrue(hasattr(self, name[:-1]),
                                 "%s but no %s" % (name, name[:-1]))
                 self.assertEqual(value, getattr(self, name[:-1]))
 
diff --git a/twisted/trial/test/test_deferred.py b/twisted/trial/test/test_deferred.py
index 5ecc8ce..b108040 100644
--- a/twisted/trial/test/test_deferred.py
+++ b/twisted/trial/test/test_deferred.py
@@ -14,49 +14,49 @@ class TestSetUp(unittest.TestCase):
     def test_success(self):
         result, suite = self._loadSuite(detests.DeferredSetUpOK)
         suite(result)
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_fail(self):
-        self.failIf(detests.DeferredSetUpFail.testCalled)
+        self.assertFalse(detests.DeferredSetUpFail.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpFail)
         suite(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 1)
-        self.failIf(detests.DeferredSetUpFail.testCalled)
+        self.assertFalse(detests.DeferredSetUpFail.testCalled)
 
     def test_callbackFail(self):
-        self.failIf(detests.DeferredSetUpCallbackFail.testCalled)
+        self.assertFalse(detests.DeferredSetUpCallbackFail.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpCallbackFail)
         suite(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 1)
-        self.failIf(detests.DeferredSetUpCallbackFail.testCalled)
+        self.assertFalse(detests.DeferredSetUpCallbackFail.testCalled)
 
     def test_error(self):
-        self.failIf(detests.DeferredSetUpError.testCalled)
+        self.assertFalse(detests.DeferredSetUpError.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpError)
         suite(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 1)
-        self.failIf(detests.DeferredSetUpError.testCalled)
+        self.assertFalse(detests.DeferredSetUpError.testCalled)
 
     def test_skip(self):
-        self.failIf(detests.DeferredSetUpSkip.testCalled)
+        self.assertFalse(detests.DeferredSetUpSkip.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpSkip)
         suite(result)
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 0)
         self.assertEqual(len(result.skips), 1)
-        self.failIf(detests.DeferredSetUpSkip.testCalled)
+        self.assertFalse(detests.DeferredSetUpSkip.testCalled)
 
 
 class TestNeverFire(unittest.TestCase):
@@ -74,15 +74,15 @@ class TestNeverFire(unittest.TestCase):
         return r, s
 
     def test_setUp(self):
-        self.failIf(detests.DeferredSetUpNeverFire.testCalled)
+        self.assertFalse(detests.DeferredSetUpNeverFire.testCalled)
         result, suite = self._loadSuite(detests.DeferredSetUpNeverFire)
         suite(result)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 0)
         self.assertEqual(len(result.errors), 1)
-        self.failIf(detests.DeferredSetUpNeverFire.testCalled)
-        self.failUnless(result.errors[0][1].check(defer.TimeoutError))
+        self.assertFalse(detests.DeferredSetUpNeverFire.testCalled)
+        self.assertTrue(result.errors[0][1].check(defer.TimeoutError))
 
 
 class TestTester(unittest.TestCase):
@@ -101,43 +101,43 @@ class TestDeferred(TestTester):
 
     def test_pass(self):
         result = self.runTest('test_pass')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_passGenerated(self):
         result = self.runTest('test_passGenerated')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
-        self.failUnless(detests.DeferredTests.touched)
+        self.assertTrue(detests.DeferredTests.touched)
 
     def test_fail(self):
         result = self.runTest('test_fail')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 1)
 
     def test_failureInCallback(self):
         result = self.runTest('test_failureInCallback')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.failures), 1)
 
     def test_errorInCallback(self):
         result = self.runTest('test_errorInCallback')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 1)
 
     def test_skip(self):
         result = self.runTest('test_skip')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.skips), 1)
-        self.failIf(detests.DeferredTests.touched)
+        self.assertFalse(detests.DeferredTests.touched)
 
     def test_todo(self):
         result = self.runTest('test_expectedFailure')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 0)
         self.assertEqual(len(result.failures), 0)
@@ -146,7 +146,7 @@ class TestDeferred(TestTester):
     def test_thread(self):
         result = self.runTest('test_thread')
         self.assertEqual(result.testsRun, 1)
-        self.failUnless(result.wasSuccessful(), result.errors)
+        self.assertTrue(result.wasSuccessful(), result.errors)
 
 
 class TestTimeout(TestTester):
@@ -159,44 +159,44 @@ class TestTimeout(TestTester):
 
     def test_pass(self):
         result = self.runTest('test_pass')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_passDefault(self):
         result = self.runTest('test_passDefault')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
 
     def test_timeout(self):
         result = self.runTest('test_timeout')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 1)
         self._wasTimeout(result.errors[0][1])
 
     def test_timeoutZero(self):
         result = self.runTest('test_timeoutZero')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.errors), 1)
         self._wasTimeout(result.errors[0][1])
 
     def test_skip(self):
         result = self.runTest('test_skip')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.skips), 1)
 
     def test_todo(self):
         result = self.runTest('test_expectedFailure')
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self.assertEqual(len(result.expectedFailures), 1)
         self._wasTimeout(result.expectedFailures[0][1])
 
     def test_errorPropagation(self):
         result = self.runTest('test_errorPropagation')
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(result.testsRun, 1)
         self._wasTimeout(detests.TimeoutTests.timedOut)
 
@@ -216,5 +216,5 @@ class TestTimeout(TestTester):
         result = self.runTest('test_calledButNeverCallback')
         if call.active():
             call.cancel()
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self._wasTimeout(result.errors[0][1])
diff --git a/twisted/trial/test/test_keyboard.py b/twisted/trial/test/test_keyboard.py
index c5471a5..56a784f 100644
--- a/twisted/trial/test/test_keyboard.py
+++ b/twisted/trial/test/test_keyboard.py
@@ -29,13 +29,13 @@ class TestInterruptInTest(TrialTest):
     def test_setUpOK(self):
         self.assertEqual(3, self.suite.countTestCases())
         self.assertEqual(0, self.reporter.testsRun)
-        self.failIf(self.reporter.shouldStop)
+        self.assertFalse(self.reporter.shouldStop)
         
     def test_interruptInTest(self):
         runner.TrialSuite([self.suite]).run(self.reporter)
-        self.failUnless(self.reporter.shouldStop)
+        self.assertTrue(self.reporter.shouldStop)
         self.assertEqual(2, self.reporter.testsRun)
-        self.failIf(TestInterruptInTest.test_03_doNothing_run,
+        self.assertFalse(TestInterruptInTest.test_03_doNothing_run,
                     "test_03_doNothing ran.")
 
 
@@ -65,13 +65,13 @@ class TestInterruptInSetUp(TrialTest):
         self.assertEqual(0, TestInterruptInSetUp.testsRun)
         self.assertEqual(2, self.suite.countTestCases())
         self.assertEqual(0, self.reporter.testsRun)
-        self.failIf(self.reporter.shouldStop)
+        self.assertFalse(self.reporter.shouldStop)
 
     def test_interruptInSetUp(self):
         runner.TrialSuite([self.suite]).run(self.reporter)
-        self.failUnless(self.reporter.shouldStop)
+        self.assertTrue(self.reporter.shouldStop)
         self.assertEqual(2, self.reporter.testsRun)
-        self.failIf(TestInterruptInSetUp.test_02_run,
+        self.assertFalse(TestInterruptInSetUp.test_02_run,
                     "test_02 ran")
 
 
@@ -101,13 +101,13 @@ class TestInterruptInTearDown(TrialTest):
         self.assertEqual(0, TestInterruptInTearDown.testsRun)
         self.assertEqual(2, self.suite.countTestCases())
         self.assertEqual(0, self.reporter.testsRun)
-        self.failIf(self.reporter.shouldStop)
+        self.assertFalse(self.reporter.shouldStop)
 
     def test_interruptInTearDown(self):
         runner.TrialSuite([self.suite]).run(self.reporter)
         self.assertEqual(1, self.reporter.testsRun)
-        self.failUnless(self.reporter.shouldStop)
-        self.failIf(TestInterruptInTearDown.test_02_run,
+        self.assertTrue(self.reporter.shouldStop)
+        self.assertFalse(TestInterruptInTearDown.test_02_run,
                     "test_02 ran")
 
 
diff --git a/twisted/trial/test/test_loader.py b/twisted/trial/test/test_loader.py
index f08588e..495d518 100644
--- a/twisted/trial/test/test_loader.py
+++ b/twisted/trial/test/test_loader.py
@@ -60,18 +60,18 @@ class FinderTest(packages.PackageTest):
         self.assertEqual(sample.FooTest, sample1)
 
     def test_findNonModule(self):
-        self.failUnlessRaises(AttributeError,
+        self.assertRaises(AttributeError,
                               self.loader.findByName,
                               'twisted.trial.test.nonexistent')
 
     def test_findNonPackage(self):
-        self.failUnlessRaises(ValueError,
+        self.assertRaises(ValueError,
                               self.loader.findByName,
                               'nonextant')
 
     def test_findNonFile(self):
         path = util.sibpath(__file__, 'nonexistent.py')
-        self.failUnlessRaises(ValueError, self.loader.findByName, path)
+        self.assertRaises(ValueError, self.loader.findByName, path)
 
 
 
@@ -80,7 +80,7 @@ class FileTest(packages.SysPathManglingTest):
     Tests for L{runner.filenameToModule}.
     """
     def test_notFile(self):
-        self.failUnlessRaises(ValueError,
+        self.assertRaises(ValueError,
                               runner.filenameToModule, 'doesntexist')
 
     def test_moduleInPath(self):
@@ -143,11 +143,11 @@ class FileTest(packages.SysPathManglingTest):
 
 
     def test_directoryNotPackage(self):
-        self.failUnlessRaises(ValueError, runner.filenameToModule,
+        self.assertRaises(ValueError, runner.filenameToModule,
                               util.sibpath(__file__, 'directory'))
 
     def test_filenameNotPython(self):
-        self.failUnlessRaises(ValueError, runner.filenameToModule,
+        self.assertRaises(ValueError, runner.filenameToModule,
                               util.sibpath(__file__, 'notpython.py'))
 
     def test_filenameMatchesPackage(self):
@@ -172,9 +172,9 @@ class FileTest(packages.SysPathManglingTest):
         f.close()
         try:
             module = runner.filenameToModule(path)
-            self.assert_(module.__name__.endswith('goodDirectory'))
+            self.assertTrue(module.__name__.endswith('goodDirectory'))
             module = runner.filenameToModule(path + os.path.sep)
-            self.assert_(module.__name__.endswith('goodDirectory'))
+            self.assertTrue(module.__name__.endswith('goodDirectory'))
         finally:
             shutil.rmtree(path)
 
@@ -222,11 +222,11 @@ class LoaderTest(packages.SysPathManglingTest):
 
     def test_loadNonMethod(self):
         import sample
-        self.failUnlessRaises(TypeError, self.loader.loadMethod, sample)
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadMethod, sample)
+        self.assertRaises(TypeError,
                               self.loader.loadMethod, sample.FooTest)
-        self.failUnlessRaises(TypeError, self.loader.loadMethod, "string")
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadMethod, "string")
+        self.assertRaises(TypeError,
                               self.loader.loadMethod, ('foo', 'bar'))
 
 
@@ -277,17 +277,17 @@ class LoaderTest(packages.SysPathManglingTest):
 
     def test_loadNonClass(self):
         import sample
-        self.failUnlessRaises(TypeError, self.loader.loadClass, sample)
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadClass, sample)
+        self.assertRaises(TypeError,
                               self.loader.loadClass, sample.FooTest.test_foo)
-        self.failUnlessRaises(TypeError, self.loader.loadClass, "string")
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadClass, "string")
+        self.assertRaises(TypeError,
                               self.loader.loadClass, ('foo', 'bar'))
 
 
     def test_loadNonTestCase(self):
         import sample
-        self.failUnlessRaises(ValueError, self.loader.loadClass,
+        self.assertRaises(ValueError, self.loader.loadClass,
                               sample.NotATest)
 
 
@@ -299,12 +299,12 @@ class LoaderTest(packages.SysPathManglingTest):
 
     def test_loadNonModule(self):
         import sample
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadModule, sample.FooTest)
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadModule, sample.FooTest.test_foo)
-        self.failUnlessRaises(TypeError, self.loader.loadModule, "string")
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadModule, "string")
+        self.assertRaises(TypeError,
                               self.loader.loadModule, ('foo', 'bar'))
 
 
@@ -316,19 +316,19 @@ class LoaderTest(packages.SysPathManglingTest):
 
     def test_loadNonPackage(self):
         import sample
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadPackage, sample.FooTest)
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadPackage, sample.FooTest.test_foo)
-        self.failUnlessRaises(TypeError, self.loader.loadPackage, "string")
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError, self.loader.loadPackage, "string")
+        self.assertRaises(TypeError,
                               self.loader.loadPackage, ('foo', 'bar'))
 
 
     def test_loadModuleAsPackage(self):
         import sample
         ## XXX -- should this instead raise a ValueError? -- jml
-        self.failUnlessRaises(TypeError, self.loader.loadPackage, sample)
+        self.assertRaises(TypeError, self.loader.loadPackage, sample)
 
 
     def test_loadPackageRecursive(self):
@@ -359,21 +359,21 @@ class LoaderTest(packages.SysPathManglingTest):
     def test_loadAnythingOnPackage(self):
         import goodpackage
         suite = self.loader.loadAnything(goodpackage)
-        self.failUnless(isinstance(suite, self.loader.suiteFactory))
+        self.assertTrue(isinstance(suite, self.loader.suiteFactory))
         self.assertEqual(7, suite.countTestCases())
 
 
     def test_loadAnythingOnPackageRecursive(self):
         import goodpackage
         suite = self.loader.loadAnything(goodpackage, recurse=True)
-        self.failUnless(isinstance(suite, self.loader.suiteFactory))
+        self.assertTrue(isinstance(suite, self.loader.suiteFactory))
         self.assertEqual(14, suite.countTestCases())
 
 
     def test_loadAnythingOnString(self):
         # the important thing about this test is not the string-iness
         # but the non-handledness.
-        self.failUnlessRaises(TypeError,
+        self.assertRaises(TypeError,
                               self.loader.loadAnything, "goodpackage")
 
 
diff --git a/twisted/trial/test/test_output.py b/twisted/trial/test/test_output.py
index bedde9e..f7cc9c9 100644
--- a/twisted/trial/test/test_output.py
+++ b/twisted/trial/test/test_output.py
@@ -40,15 +40,15 @@ class TestImportErrors(packages.SysPathManglingTest):
         print stuff
         return stuff
 
-    def failUnlessIn(self, container, containee, *args, **kwargs):
+    def assertIn(self, container, containee, *args, **kwargs):
         # redefined to be useful in callbacks
-        super(TestImportErrors, self).failUnlessIn(
+        super(TestImportErrors, self).assertIn(
             containee, container, *args, **kwargs)
         return container
 
-    def failIfIn(self, container, containee, *args, **kwargs):
+    def assertNotIn(self, container, containee, *args, **kwargs):
         # redefined to be useful in callbacks
-        super(TestImportErrors, self).failIfIn(
+        super(TestImportErrors, self).assertNotIn(
             containee, container, *args, **kwargs)
         return container
 
@@ -57,96 +57,96 @@ class TestImportErrors(packages.SysPathManglingTest):
 
     def test_nonexistentModule(self):
         d = self.runTrial('twisted.doesntexist')
-        self.failUnlessIn(d, '[ERROR]')
-        self.failUnlessIn(d, 'twisted.doesntexist')
+        self.assertIn(d, '[ERROR]')
+        self.assertIn(d, 'twisted.doesntexist')
         return d
 
     def test_nonexistentPackage(self):
         d = self.runTrial('doesntexist')
-        self.failUnlessIn(d, 'doesntexist')
-        self.failUnlessIn(d, 'ModuleNotFound')
-        self.failUnlessIn(d, '[ERROR]')
+        self.assertIn(d, 'doesntexist')
+        self.assertIn(d, 'ModuleNotFound')
+        self.assertIn(d, '[ERROR]')
         return d
 
     def test_nonexistentPackageWithModule(self):
         d = self.runTrial('doesntexist.barney')
-        self.failUnlessIn(d, 'doesntexist.barney')
-        self.failUnlessIn(d, 'ObjectNotFound')
-        self.failUnlessIn(d, '[ERROR]')
+        self.assertIn(d, 'doesntexist.barney')
+        self.assertIn(d, 'ObjectNotFound')
+        self.assertIn(d, '[ERROR]')
         return d
 
     def test_badpackage(self):
         d = self.runTrial('badpackage')
-        self.failUnlessIn(d, '[ERROR]')
-        self.failUnlessIn(d, 'badpackage')
-        self.failIfIn(d, 'IOError')
+        self.assertIn(d, '[ERROR]')
+        self.assertIn(d, 'badpackage')
+        self.assertNotIn(d, 'IOError')
         return d
 
     def test_moduleInBadpackage(self):
         d = self.runTrial('badpackage.test_module')
-        self.failUnlessIn(d, "[ERROR]")
-        self.failUnlessIn(d, "badpackage.test_module")
-        self.failIfIn(d, 'IOError')
+        self.assertIn(d, "[ERROR]")
+        self.assertIn(d, "badpackage.test_module")
+        self.assertNotIn(d, 'IOError')
         return d
 
     def test_badmodule(self):
         d = self.runTrial('package.test_bad_module')
-        self.failUnlessIn(d, '[ERROR]')
-        self.failUnlessIn(d, 'package.test_bad_module')
-        self.failIfIn(d, 'IOError')
-        self.failIfIn(d, '<module ')
+        self.assertIn(d, '[ERROR]')
+        self.assertIn(d, 'package.test_bad_module')
+        self.assertNotIn(d, 'IOError')
+        self.assertNotIn(d, '<module ')
         return d
 
     def test_badimport(self):
         d = self.runTrial('package.test_import_module')
-        self.failUnlessIn(d, '[ERROR]')
-        self.failUnlessIn(d, 'package.test_import_module')
-        self.failIfIn(d, 'IOError')
-        self.failIfIn(d, '<module ')
+        self.assertIn(d, '[ERROR]')
+        self.assertIn(d, 'package.test_import_module')
+        self.assertNotIn(d, 'IOError')
+        self.assertNotIn(d, '<module ')
         return d
 
     def test_recurseImport(self):
         d = self.runTrial('package')
-        self.failUnlessIn(d, '[ERROR]')
-        self.failUnlessIn(d, 'test_bad_module')
-        self.failUnlessIn(d, 'test_import_module')
-        self.failIfIn(d, '<module ')
-        self.failIfIn(d, 'IOError')
+        self.assertIn(d, '[ERROR]')
+        self.assertIn(d, 'test_bad_module')
+        self.assertIn(d, 'test_import_module')
+        self.assertNotIn(d, '<module ')
+        self.assertNotIn(d, 'IOError')
         return d
 
     def test_recurseImportErrors(self):
         d = self.runTrial('package2')
-        self.failUnlessIn(d, '[ERROR]')
-        self.failUnlessIn(d, 'package2')
-        self.failUnlessIn(d, 'test_module')
-        self.failUnlessIn(d, "No module named frotz")
-        self.failIfIn(d, '<module ')
-        self.failIfIn(d, 'IOError')
+        self.assertIn(d, '[ERROR]')
+        self.assertIn(d, 'package2')
+        self.assertIn(d, 'test_module')
+        self.assertIn(d, "No module named frotz")
+        self.assertNotIn(d, '<module ')
+        self.assertNotIn(d, 'IOError')
         return d
 
     def test_nonRecurseImportErrors(self):
         d = self.runTrial('-N', 'package2')
-        self.failUnlessIn(d, '[ERROR]')
-        self.failUnlessIn(d, "No module named frotz")
-        self.failIfIn(d, '<module ')
+        self.assertIn(d, '[ERROR]')
+        self.assertIn(d, "No module named frotz")
+        self.assertNotIn(d, '<module ')
         return d
 
     def test_regularRun(self):
         d = self.runTrial('package.test_module')
-        self.failIfIn(d, '[ERROR]')
-        self.failIfIn(d, 'IOError')
-        self.failUnlessIn(d, 'OK')
-        self.failUnlessIn(d, 'PASSED (successes=1)')
+        self.assertNotIn(d, '[ERROR]')
+        self.assertNotIn(d, 'IOError')
+        self.assertIn(d, 'OK')
+        self.assertIn(d, 'PASSED (successes=1)')
         return d
 
     def test_filename(self):
         self.mangleSysPath(self.oldPath)
         d = self.runTrial(
             os.path.join(self.parent, 'package', 'test_module.py'))
-        self.failIfIn(d, '[ERROR]')
-        self.failIfIn(d, 'IOError')
-        self.failUnlessIn(d, 'OK')
-        self.failUnlessIn(d, 'PASSED (successes=1)')
+        self.assertNotIn(d, '[ERROR]')
+        self.assertNotIn(d, 'IOError')
+        self.assertIn(d, 'OK')
+        self.assertIn(d, 'PASSED (successes=1)')
         return d
 
     def test_dosFile(self):
@@ -155,8 +155,8 @@ class TestImportErrors(packages.SysPathManglingTest):
         d = self.runTrial(
             os.path.join(self.parent,
                          'package', 'test_dos_module.py'))
-        self.failIfIn(d, '[ERROR]')
-        self.failIfIn(d, 'IOError')
-        self.failUnlessIn(d, 'OK')
-        self.failUnlessIn(d, 'PASSED (successes=1)')
+        self.assertNotIn(d, '[ERROR]')
+        self.assertNotIn(d, 'IOError')
+        self.assertIn(d, 'OK')
+        self.assertIn(d, 'PASSED (successes=1)')
         return d
diff --git a/twisted/trial/test/test_plugins.py b/twisted/trial/test/test_plugins.py
index e1ec6aa..969ae26 100644
--- a/twisted/trial/test/test_plugins.py
+++ b/twisted/trial/test/test_plugins.py
@@ -42,5 +42,5 @@ class TestPlugins(unittest.TestCase):
         self.assertEqual('Subunit Reporter', subunitPlugin.name)
         self.assertEqual('twisted.trial.reporter', subunitPlugin.module)
         self.assertEqual('subunit', subunitPlugin.longOpt)
-        self.assertIdentical(None, subunitPlugin.shortOpt)
+        self.assertIs(None, subunitPlugin.shortOpt)
         self.assertEqual('SubunitReporter', subunitPlugin.klass)
diff --git a/twisted/trial/test/test_pyunitcompat.py b/twisted/trial/test/test_pyunitcompat.py
index 72e7f11..6e71f32 100644
--- a/twisted/trial/test/test_pyunitcompat.py
+++ b/twisted/trial/test/test_pyunitcompat.py
@@ -111,9 +111,9 @@ class TestPyUnitResult(TestCase):
         result = pyunit.TestResult()
         test.run(result)
 
-        self.failUnless(test.ran)
+        self.assertTrue(test.ran)
         self.assertEqual(1, result.testsRun)
-        self.failUnless(result.wasSuccessful())
+        self.assertTrue(result.wasSuccessful())
 
     def test_failure(self):
         class FailureTest(TestCase):
@@ -125,20 +125,20 @@ class TestPyUnitResult(TestCase):
         result = pyunit.TestResult()
         test.run(result)
 
-        self.failUnless(test.ran)
+        self.assertTrue(test.ran)
         self.assertEqual(1, result.testsRun)
         self.assertEqual(1, len(result.failures))
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
 
     def test_error(self):
         test = erroneous.ErrorTest('test_foo')
         result = pyunit.TestResult()
         test.run(result)
 
-        self.failUnless(test.ran)
+        self.assertTrue(test.ran)
         self.assertEqual(1, result.testsRun)
         self.assertEqual(1, len(result.errors))
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
 
     def test_setUpError(self):
         class ErrorTest(TestCase):
@@ -151,10 +151,10 @@ class TestPyUnitResult(TestCase):
         result = pyunit.TestResult()
         test.run(result)
 
-        self.failIf(test.ran)
+        self.assertFalse(test.ran)
         self.assertEqual(1, result.testsRun)
         self.assertEqual(1, len(result.errors))
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
 
     def test_tracebackFromFailure(self):
         """
diff --git a/twisted/trial/test/test_reporter.py b/twisted/trial/test/test_reporter.py
index 9c5af7b..72ac7e7 100644
--- a/twisted/trial/test/test_reporter.py
+++ b/twisted/trial/test/test_reporter.py
@@ -48,7 +48,7 @@ class BrokenStream(object):
 class StringTest(unittest.TestCase):
     def stringComparison(self, expect, output):
         output = filter(None, output)
-        self.failUnless(len(expect) <= len(output),
+        self.assertTrue(len(expect) <= len(output),
                         "Must have more observed than expected"
                         "lines %d < %d" % (len(output), len(expect)))
         REGEX_PATTERN_TYPE = type(re.compile(''))
@@ -56,10 +56,10 @@ class StringTest(unittest.TestCase):
             if exp is None:
                 continue
             elif isinstance(exp, str):
-                self.assertSubstring(exp, out, "Line %d: %r not in %r"
+                self.assertIn(exp, out, "Line %d: %r not in %r"
                                      % (line_number, exp, out))
             elif isinstance(exp, REGEX_PATTERN_TYPE):
-                self.failUnless(exp.match(out),
+                self.assertTrue(exp.match(out),
                                 "Line %d: %r did not match string %r"
                                 % (line_number, exp.pattern, out))
             else:
@@ -169,8 +169,8 @@ class TestErrorReporting(StringTest):
         path = 'twisted.trial.test.erroneous.unexpectedException'
         for substring in ['1/0', 'ZeroDivisionError',
                           'Exception raised:', path]:
-            self.assertSubstring(substring, output)
-        self.failUnless(re.search('Fail(ed|ure in) example:', output),
+            self.assertIn(substring, output)
+        self.assertTrue(re.search('Fail(ed|ure in) example:', output),
                         "Couldn't match 'Failure in example: ' "
                         "or 'Failed example: '")
         expect = [self.doubleSeparator,
@@ -300,13 +300,13 @@ class FormatFailures(StringTest):
     def test_formatString(self):
         tb = '''
   File "twisted/trial/unittest.py", line 256, in failUnlessSubstring
-    return self.failUnlessIn(substring, astring, msg)
+    return self.assertIn(substring, astring, msg)
 exceptions.TypeError: iterable argument required
 
 '''
         expected = '''
   File "twisted/trial/unittest.py", line 256, in failUnlessSubstring
-    return self.failUnlessIn(substring, astring, msg)
+    return self.assertIn(substring, astring, msg)
 exceptions.TypeError: iterable argument required
 '''
         formatted = self.result._formatFailureTraceback(tb)
@@ -525,7 +525,7 @@ class TestSkip(unittest.TestCase):
         self.result.done()
         output = self.stream.getvalue().splitlines()[-1]
         prefix = 'PASSED '
-        self.failUnless(output.startswith(prefix))
+        self.assertTrue(output.startswith(prefix))
         self.assertEqual(output[len(prefix):].strip(), '(skips=1)')
 
 
@@ -650,7 +650,7 @@ class TodoTest(unittest.TestCase):
         self.result.done()
         output = self.stream.getvalue().splitlines()[-1]
         prefix = 'PASSED '
-        self.failUnless(output.startswith(prefix))
+        self.assertTrue(output.startswith(prefix))
         self.assertEqual(output[len(prefix):].strip(),
                          '(expectedFailures=1)')
 
diff --git a/twisted/trial/test/test_runner.py b/twisted/trial/test/test_runner.py
index 12fcc86..b775f70 100644
--- a/twisted/trial/test/test_runner.py
+++ b/twisted/trial/test/test_runner.py
@@ -135,7 +135,7 @@ class TrialRunnerTestsMixin:
         self.runner.run(self.test)
         self.runner.run(self.test)
         self.assertEqual(len(l), 2)
-        self.failIf(l[0] is l[1], "Should have created a new file observer")
+        self.assertFalse(l[0] is l[1], "Should have created a new file observer")
 
 
     def test_logFileGetsClosed(self):
@@ -150,7 +150,7 @@ class TrialRunnerTestsMixin:
         self.runner._setUpLogFile = setUpLogFile
         self.runner.run(self.test)
         self.assertEqual(len(l), 1)
-        self.failUnless(l[0].closed)
+        self.assertTrue(l[0].closed)
 
 
 
@@ -171,7 +171,7 @@ class TestTrialRunner(TrialRunnerTestsMixin, unittest.TestCase):
         L{twisted.python.log} as the value for the C{publisher} parameter.
         """
         result = self.runner._makeResult()
-        self.assertIdentical(result._publisher, log)
+        self.assertIs(result._publisher, log)
 
 
 
@@ -611,7 +611,7 @@ class TestUntilFailure(unittest.TestCase):
         """
         result = self.runner.runUntilFailure(self.test)
         self.assertEqual(result.testsRun, 1)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(self._getFailures(result), 1)
 
 
@@ -723,7 +723,7 @@ class TestLoggedErrors(unittest.TestCase):
         suite.run(result)
         self.assertEqual(len(result.errors), 1)
         self.assertEqual(result.errors[0][0].id(), runner.NOT_IN_TEST)
-        self.failUnless(result.errors[0][1].check(RuntimeError))
+        self.assertTrue(result.errors[0][1].check(RuntimeError))
 
 
 
@@ -748,7 +748,7 @@ class TestTestHolder(unittest.TestCase):
         """
         L{runner.TestHolder} implements L{ITestCase}.
         """
-        self.assertIdentical(self.holder, ITestCase(self.holder))
+        self.assertIs(self.holder, ITestCase(self.holder))
         self.assertTrue(
             verifyObject(ITestCase, self.holder),
             "%r claims to provide %r but does not do so correctly."
@@ -903,7 +903,7 @@ class TestMalformedMethod(unittest.TestCase):
         test = TestMalformedMethod.ContainMalformed(method)
         result = trialRunner.run(test)
         self.assertEqual(result.testsRun, 1)
-        self.failIf(result.wasSuccessful())
+        self.assertFalse(result.wasSuccessful())
         self.assertEqual(len(result.errors), 1)
 
     def test_extraArg(self):
diff --git a/twisted/trial/test/test_script.py b/twisted/trial/test/test_script.py
index 6c93ebe..8795527 100644
--- a/twisted/trial/test/test_script.py
+++ b/twisted/trial/test/test_script.py
@@ -258,15 +258,15 @@ class TestModuleTest(unittest.TestCase):
                              localVars)
 
     def test_invalidLine(self):
-        self.failUnlessRaises(ValueError, trial._parseLocalVariables,
+        self.assertRaises(ValueError, trial._parseLocalVariables,
                               'foo')
 
     def test_invalidDeclaration(self):
-        self.failUnlessRaises(ValueError, trial._parseLocalVariables,
+        self.assertRaises(ValueError, trial._parseLocalVariables,
                               '-*- foo -*-')
-        self.failUnlessRaises(ValueError, trial._parseLocalVariables,
+        self.assertRaises(ValueError, trial._parseLocalVariables,
                               '-*- foo: bar; qux -*-')
-        self.failUnlessRaises(ValueError, trial._parseLocalVariables,
+        self.assertRaises(ValueError, trial._parseLocalVariables,
                               '-*- foo: bar: baz; qux: qax -*-')
 
     def test_variablesFromFile(self):
@@ -302,11 +302,11 @@ class TestModuleTest(unittest.TestCase):
 
     def test_looksLikeTestModule(self):
         for filename in ['test_script.py', 'twisted/trial/test/test_script.py']:
-            self.failUnless(trial.isTestFile(filename),
+            self.assertTrue(trial.isTestFile(filename),
                             "%r should be a test file" % (filename,))
         for filename in ['twisted/trial/test/moduletest.py',
                          sibpath('scripttest.py'), sibpath('test_foo.bat')]:
-            self.failIf(trial.isTestFile(filename),
+            self.assertFalse(trial.isTestFile(filename),
                         "%r should *not* be a test file" % (filename,))
 
 
diff --git a/twisted/trial/test/test_tests.py b/twisted/trial/test/test_tests.py
index 5262c06..01e9e1f 100644
--- a/twisted/trial/test/test_tests.py
+++ b/twisted/trial/test/test_tests.py
@@ -20,7 +20,7 @@ class ResultsTestMixin:
         self.reporter = reporter.TestResult()
 
     def test_setUp(self):
-        self.failUnless(self.reporter.wasSuccessful())
+        self.assertTrue(self.reporter.wasSuccessful())
         self.assertEqual(self.reporter.errors, [])
         self.assertEqual(self.reporter.failures, [])
         self.assertEqual(self.reporter.skips, [])
@@ -86,7 +86,7 @@ class TestSuccess(unittest.TestCase):
         self.assertSuccessful(test, self.result)
         del test
         gc.collect()
-        self.assertIdentical(ref(), None)
+        self.assertIs(ref(), None)
 
 
 
@@ -121,7 +121,7 @@ class TestSkipMethods(unittest.TestCase, ResultsTestMixin):
 
     def test_results(self):
         self.suite(self.reporter)
-        self.failUnless(self.reporter.wasSuccessful())
+        self.assertTrue(self.reporter.wasSuccessful())
         self.assertEqual(self.reporter.errors, [])
         self.assertEqual(self.reporter.failures, [])
         self.assertEqual(len(self.reporter.skips), 3)
@@ -129,7 +129,7 @@ class TestSkipMethods(unittest.TestCase, ResultsTestMixin):
     def test_setUp(self):
         self.loadSuite(TestSkipMethods.SkippingSetUp)
         self.suite(self.reporter)
-        self.failUnless(self.reporter.wasSuccessful())
+        self.assertTrue(self.reporter.wasSuccessful())
         self.assertEqual(self.reporter.errors, [])
         self.assertEqual(self.reporter.failures, [])
         self.assertEqual(len(self.reporter.skips), 2)
@@ -186,7 +186,7 @@ class TestSkipClasses(unittest.TestCase, ResultsTestMixin):
         They do, however, add elements to the reporter's C{skips} list.
         """
         self.suite(self.reporter)
-        self.failUnless(self.reporter.wasSuccessful())
+        self.assertTrue(self.reporter.wasSuccessful())
         self.assertEqual(self.reporter.errors, [])
         self.assertEqual(self.reporter.failures, [])
         self.assertEqual(len(self.reporter.skips), 4)
@@ -227,7 +227,7 @@ class TestTodo(unittest.TestCase, ResultsTestMixin):
 
     def test_results(self):
         self.suite(self.reporter)
-        self.failUnless(self.reporter.wasSuccessful())
+        self.assertTrue(self.reporter.wasSuccessful())
         self.assertEqual(self.reporter.errors, [])
         self.assertEqual(self.reporter.failures, [])
         self.assertEqual(self.reporter.skips, [])
@@ -271,7 +271,7 @@ class TestTodoClass(unittest.TestCase, ResultsTestMixin):
 
     def test_results(self):
         self.suite(self.reporter)
-        self.failUnless(self.reporter.wasSuccessful())
+        self.assertTrue(self.reporter.wasSuccessful())
         self.assertEqual(self.reporter.errors, [])
         self.assertEqual(self.reporter.failures, [])
         self.assertEqual(self.reporter.skips, [])
@@ -331,7 +331,7 @@ class TestStrictTodo(unittest.TestCase, ResultsTestMixin):
 
     def test_results(self):
         self.suite(self.reporter)
-        self.failIf(self.reporter.wasSuccessful())
+        self.assertFalse(self.reporter.wasSuccessful())
         self.assertEqual(len(self.reporter.errors), 2)
         self.assertEqual(len(self.reporter.failures), 1)
         self.assertEqual(len(self.reporter.expectedFailures), 3)
@@ -369,13 +369,13 @@ class TestCleanup(unittest.TestCase):
         suite = self.loader.loadMethod(
             erroneous.SocketOpenTest.test_socketsLeftOpen)
         suite.run(self.result)
-        self.failIf(self.result.wasSuccessful())
+        self.assertFalse(self.result.wasSuccessful())
         # socket cleanup happens at end of class's tests.
         # all the tests in the class are successful, even if the suite
         # fails
         self.assertEqual(self.result.successes, 1)
         failure = self.result.errors[0][1]
-        self.failUnless(failure.check(util.DirtyReactorAggregateError))
+        self.assertTrue(failure.check(util.DirtyReactorAggregateError))
 
 
     def testLeftoverPendingCalls(self):
@@ -385,10 +385,10 @@ class TestCleanup(unittest.TestCase):
         """
         suite = erroneous.ReactorCleanupTests('test_leftoverPendingCalls')
         suite.run(self.result)
-        self.failIf(self.result.wasSuccessful())
+        self.assertFalse(self.result.wasSuccessful())
         failure = self.result.errors[0][1]
         self.assertEqual(self.result.successes, 0)
-        self.failUnless(failure.check(util.DirtyReactorAggregateError))
+        self.assertTrue(failure.check(util.DirtyReactorAggregateError))
 
 
 
@@ -407,8 +407,8 @@ class FixtureTest(unittest.TestCase):
         When setUp fails, the error is recorded in the result object.
         """
         self.loader.loadClass(erroneous.TestFailureInSetUp).run(self.reporter)
-        self.assert_(len(self.reporter.errors) > 0)
-        self.assert_(isinstance(self.reporter.errors[0][1].value,
+        self.assertTrue(len(self.reporter.errors) > 0)
+        self.assertTrue(isinstance(self.reporter.errors[0][1].value,
                                 erroneous.FoolishError))
 
 
@@ -419,8 +419,8 @@ class FixtureTest(unittest.TestCase):
         suite = self.loader.loadClass(erroneous.TestFailureInTearDown)
         suite.run(self.reporter)
         errors = self.reporter.errors
-        self.assert_(len(errors) > 0)
-        self.assert_(isinstance(errors[0][1].value, erroneous.FoolishError))
+        self.assertTrue(len(errors) > 0)
+        self.assertTrue(isinstance(errors[0][1].value, erroneous.FoolishError))
 
 
 
@@ -707,7 +707,7 @@ class TestAddCleanup(unittest.TestCase):
         """
         self.test.addCleanup(self.test.fail, 'foo')
         self.test.run(self.result)
-        self.failIf(self.result.wasSuccessful())
+        self.assertFalse(self.result.wasSuccessful())
         self.assertEqual(1, len(self.result.errors))
         [(test, error)] = self.result.errors
         self.assertEqual(test, self.test)
@@ -800,9 +800,9 @@ class TestTestDecorator(unittest.TestCase):
                          "Different class")
         observedOriginal = getattr(observed, '_originalTest', None)
         expectedOriginal = getattr(expected, '_originalTest', None)
-        self.assertIdentical(observedOriginal, expectedOriginal)
+        self.assertIs(observedOriginal, expectedOriginal)
         if observedOriginal is expectedOriginal is None:
-            self.assertIdentical(observed, expected)
+            self.assertIs(observed, expected)
 
 
     def assertSuitesEqual(self, observed, expected):
diff --git a/twisted/trial/test/test_util.py b/twisted/trial/test/test_util.py
index 1c8611a..b589b72 100644
--- a/twisted/trial/test/test_util.py
+++ b/twisted/trial/test/test_util.py
@@ -30,17 +30,17 @@ class TestMktemp(TestCase):
 
     def test_unique(self):
         name = self.mktemp()
-        self.failIfEqual(name, self.mktemp())
+        self.assertNotEqual(name, self.mktemp())
 
     def test_created(self):
         name = self.mktemp()
         dirname = os.path.dirname(name)
-        self.failUnless(os.path.exists(dirname))
-        self.failIf(os.path.exists(name))
+        self.assertTrue(os.path.exists(dirname))
+        self.assertFalse(os.path.exists(name))
 
     def test_location(self):
         path = os.path.abspath(self.mktemp())
-        self.failUnless(path.startswith(os.getcwd()))
+        self.assertTrue(path.startswith(os.getcwd()))
 
 
 class TestIntrospection(TestCase):
@@ -65,7 +65,7 @@ class TestFindObject(packages.SysPathManglingTest):
         util.findObject('')
         warningsShown = self.flushWarnings()
         self.assertEqual(len(warningsShown), 1)
-        self.assertIdentical(warningsShown[0]['category'], DeprecationWarning)
+        self.assertIs(warningsShown[0]['category'], DeprecationWarning)
         self.assertEqual(warningsShown[0]['message'],
                           "twisted.trial.util.findObject was deprecated "
                           "in Twisted 10.1.0: Please use "
@@ -83,11 +83,11 @@ class TestFindObject(packages.SysPathManglingTest):
         self.assertEqual((True, test_sample), test_sample2)
 
     def test_importError(self):
-        self.failUnlessRaises(ZeroDivisionError,
+        self.assertRaises(ZeroDivisionError,
                               util.findObject, 'package.test_bad_module')
 
     def test_sophisticatedImportError(self):
-        self.failUnlessRaises(ImportError,
+        self.assertRaises(ImportError,
                               util.findObject, 'package2.test_module')
 
     def test_importNonexistentPackage(self):
diff --git a/twisted/trial/test/test_warning.py b/twisted/trial/test/test_warning.py
index ca4ccdd..faadbe3 100644
--- a/twisted/trial/test/test_warning.py
+++ b/twisted/trial/test/test_warning.py
@@ -133,7 +133,7 @@ class FlushWarningsTests(TestCase):
         case.run(result)
         warningsShown = self.flushWarnings([Mask.MockTests.test_unflushed])
         self.assertEqual(warningsShown[0]['message'], 'some warning text')
-        self.assertIdentical(warningsShown[0]['category'], UserWarning)
+        self.assertIs(warningsShown[0]['category'], UserWarning)
 
         where = case.test_unflushed.im_func.func_code
         filename = where.co_filename
@@ -179,7 +179,7 @@ class FlushWarningsTests(TestCase):
             warnings.simplefilter('error')
             case.run(result)
             self.assertEqual(len(result.errors), 1)
-            self.assertIdentical(result.errors[0][0], case)
+            self.assertIs(result.errors[0][0], case)
             result.errors[0][1].trap(CustomWarning)
         finally:
             warnings.filters[:] = originalWarnings
@@ -397,7 +397,7 @@ class CollectWarningsTests(TestCase):
 
         result = _collectWarnings(lambda x: None, f, 1, 'a', b=2, c='d')
         self.assertEqual(arguments, [((1, 'a'), {'b': 2, 'c': 'd'})])
-        self.assertIdentical(result, value)
+        self.assertIs(result, value)
 
 
     def test_duplicateWarningCollected(self):
diff --git a/twisted/web/test/test_distrib.py b/twisted/web/test/test_distrib.py
index c6e2ae3..e0a743f 100755
--- a/twisted/web/test/test_distrib.py
+++ b/twisted/web/test/test_distrib.py
@@ -428,7 +428,7 @@ class UserDirectoryTests(unittest.TestCase):
         L{pwd} module as its password database.
         """
         directory = distrib.UserDirectory()
-        self.assertIdentical(directory._pwd, pwd)
+        self.assertIs(directory._pwd, pwd)
     if pwd is None:
         test_passwordDatabase.skip = "pwd module required"
 
diff --git a/twisted/web/test/test_domhelpers.py b/twisted/web/test/test_domhelpers.py
index b008374..1b9d977 100644
--- a/twisted/web/test/test_domhelpers.py
+++ b/twisted/web/test/test_domhelpers.py
@@ -150,7 +150,7 @@ class DOMHelpersTestsMixin:
         self.assertEqual(actual, expected.toxml())
 
         node=domhelpers.getIfExists(doc1, "pzork")
-        self.assertIdentical(node, None)
+        self.assertIs(node, None)
 
 
     def test_getAndClear(self):
diff --git a/twisted/web/test/test_http.py b/twisted/web/test/test_http.py
index bdb39a4..b5f4581 100644
--- a/twisted/web/test/test_http.py
+++ b/twisted/web/test/test_http.py
@@ -402,8 +402,8 @@ class IdentityTransferEncodingTests(TestCase):
         Check the decoder's data and finish callbacks and make sure they are
         None in order to help avoid references cycles.
         """
-        self.assertIdentical(decoder.dataCallback, None)
-        self.assertIdentical(decoder.finishCallback, None)
+        self.assertIs(decoder.dataCallback, None)
+        self.assertIs(decoder.finishCallback, None)
 
 
     def test_earlyConnectionLose(self):
@@ -621,7 +621,7 @@ class ParsingTestCase(unittest.TestCase):
             self.assertEqual(self.didRequest, 1)
             del self.didRequest
         else:
-            self.assert_(not hasattr(self, "didRequest"))
+            self.assertTrue(not hasattr(self, "didRequest"))
         return a
 
 
@@ -872,7 +872,7 @@ Hello,
                 testcase.assertEqual(self.path, '/')
                 content = self.content.read()
                 testcase.assertEqual(content, 'Hello, spam,eggs spam spam')
-                testcase.assertIdentical(self.channel._transferDecoder, None)
+                testcase.assertIs(self.channel._transferDecoder, None)
                 testcase.didRequest = 1
                 self.finish()
 
@@ -884,7 +884,7 @@ class QueryArgumentsTestCase(unittest.TestCase):
     def testParseqs(self):
         self.assertEqual(cgi.parse_qs("a=b&d=c;+=f"),
             http.parse_qs("a=b&d=c;+=f"))
-        self.failUnlessRaises(ValueError, http.parse_qs, "blah",
+        self.assertRaises(ValueError, http.parse_qs, "blah",
             strict_parsing = 1)
         self.assertEqual(cgi.parse_qs("a=&b=c", keep_blank_values = 1),
             http.parse_qs("a=&b=c", keep_blank_values = 1))
@@ -1295,7 +1295,7 @@ class RequestTests(unittest.TestCase, ResponseTestMixin):
         # Then something goes wrong and content should get closed.
         req.connectionLost(Failure(ConnectionLost("Finished")))
         self.assertTrue(content.closed)
-        self.assertIdentical(req.channel, None)
+        self.assertIs(req.channel, None)
 
 
     def test_registerProducerTwiceFails(self):
@@ -1338,7 +1338,7 @@ class RequestTests(unittest.TestCase, ResponseTestMixin):
         request is queued does not register the producer on the request's
         transport.
         """
-        self.assertIdentical(
+        self.assertIs(
             None, getattr(http.StringTransport, 'registerProducer', None),
             "StringTransport cannot implement registerProducer for this test "
             "to be valid.")
@@ -1357,7 +1357,7 @@ class RequestTests(unittest.TestCase, ResponseTestMixin):
         request is queued does not register the producer on the request's
         transport.
         """
-        self.assertIdentical(
+        self.assertIs(
             None, getattr(http.StringTransport, 'registerProducer', None),
             "StringTransport cannot implement registerProducer for this test "
             "to be valid.")
@@ -1403,7 +1403,7 @@ class RequestTests(unittest.TestCase, ResponseTestMixin):
         request = http.Request(d, True)
         finished = request.notifyFinish()
         request.connectionLost(Failure(ConnectionLost("Connection done")))
-        self.assertIdentical(request.channel, None)
+        self.assertIs(request.channel, None)
         return self.assertFailure(finished, ConnectionLost)
 
 
@@ -1497,7 +1497,7 @@ class MultilineHeadersTestCase(unittest.TestCase):
 
         c.lineReceived('HTTP/1.0 201')
         c.lineReceived('Content-Length: 10')
-        self.assertIdentical(c.length, None)
+        self.assertIs(c.length, None)
         self.assertFalse(self.handleHeaderCalled)
         self.assertFalse(self.handleEndHeadersCalled)
 
diff --git a/twisted/web/test/test_http_headers.py b/twisted/web/test/test_http_headers.py
index 7ca1bc8..625df10 100644
--- a/twisted/web/test/test_http_headers.py
+++ b/twisted/web/test/test_http_headers.py
@@ -62,7 +62,7 @@ class HeadersTests(TestCase):
         L{Headers.getRawHeaders} returns C{None} if the header is not found and
         no default is specified.
         """
-        self.assertIdentical(Headers().getRawHeaders("test"), None)
+        self.assertIs(Headers().getRawHeaders("test"), None)
 
 
     def test_getRawHeadersDefaultValue(self):
@@ -72,7 +72,7 @@ class HeadersTests(TestCase):
         """
         h = Headers()
         default = object()
-        self.assertIdentical(h.getRawHeaders("test", default), default)
+        self.assertIs(h.getRawHeaders("test", default), default)
 
 
     def test_getRawHeaders(self):
@@ -431,7 +431,7 @@ class HeaderDictTests(TestCase):
         L{_DictHeaders.get} returns C{None} for a header which is not present.
         """
         headers, wrapper = self.headers()
-        self.assertIdentical(wrapper.get("foo"), None)
+        self.assertIs(wrapper.get("foo"), None)
 
 
     def test_getDefault(self):
@@ -479,7 +479,7 @@ class HeaderDictTests(TestCase):
         """
         headers, wrapper = self.headers(foo=["lemur", "panda"])
         self.assertEqual(wrapper.pop("foo"), "panda")
-        self.assertIdentical(headers.getRawHeaders("foo"), None)
+        self.assertIs(headers.getRawHeaders("foo"), None)
 
 
     def test_popMissing(self):
@@ -499,7 +499,7 @@ class HeaderDictTests(TestCase):
         """
         headers, wrapper = self.headers(foo=["lemur"])
         self.assertEqual(wrapper.pop("foo", "bar"), "lemur")
-        self.assertIdentical(headers.getRawHeaders("foo"), None)
+        self.assertIs(headers.getRawHeaders("foo"), None)
 
 
     def test_popDefaultMissing(self):
@@ -518,7 +518,7 @@ class HeaderDictTests(TestCase):
         """
         headers, wrapper = self.headers(foo=["lemur", "panda"])
         self.assertEqual(wrapper.popitem(), ("foo", "panda"))
-        self.assertIdentical(headers.getRawHeaders("foo"), None)
+        self.assertIs(headers.getRawHeaders("foo"), None)
 
 
     def test_popitemEmpty(self):
@@ -590,7 +590,7 @@ class HeaderDictTests(TestCase):
         # broken with the new implementation.  Compatibility, for the win.
         # -exarkun
         headers, wrapper = self.headers()
-        self.assertIdentical(wrapper.setdefault("foo"), None)
+        self.assertIs(wrapper.setdefault("foo"), None)
         self.assertEqual(headers.getRawHeaders("foo"), [None])
 
 
diff --git a/twisted/web/test/test_httpauth.py b/twisted/web/test/test_httpauth.py
index 1764b0f..ce869cd 100644
--- a/twisted/web/test/test_httpauth.py
+++ b/twisted/web/test/test_httpauth.py
@@ -226,9 +226,9 @@ class UnauthorizedResourceTests(unittest.TestCase):
         An L{UnauthorizedResource} is every child of itself.
         """
         resource = UnauthorizedResource([])
-        self.assertIdentical(
+        self.assertIs(
             resource.getChildWithDefault("foo", None), resource)
-        self.assertIdentical(
+        self.assertIs(
             resource.getChildWithDefault("bar", None), resource)
 
 
diff --git a/twisted/web/test/test_newclient.py b/twisted/web/test/test_newclient.py
index 516d0aa..9848dc9 100644
--- a/twisted/web/test/test_newclient.py
+++ b/twisted/web/test/test_newclient.py
@@ -480,7 +480,7 @@ class HTTPClientParserTests(TestCase):
         self.assertEqual(
             protocol.response.headers,
             Headers({'x-foo': ['bar']}))
-        self.assertIdentical(protocol.response.length, UNKNOWN_LENGTH)
+        self.assertIs(protocol.response.length, UNKNOWN_LENGTH)
 
 
     def test_connectionHeaders(self):
@@ -665,7 +665,7 @@ class HTTPClientParserTests(TestCase):
         self.assertEqual(body, [])
 
         # Cannot predict the length of a chunked encoded response body.
-        self.assertIdentical(protocol.response.length, UNKNOWN_LENGTH)
+        self.assertIs(protocol.response.length, UNKNOWN_LENGTH)
 
         # Deliver some chunks and make sure the data arrives
         protocol.dataReceived('3\r\na')
@@ -1269,9 +1269,9 @@ class HTTP11ClientProtocolTests(TestCase):
         """
         requestDeferred = self.protocol.request(Request('GET', '/', _boringHeaders, None))
         transport = self.protocol._parser.transport
-        self.assertIdentical(transport._producer, self.transport)
+        self.assertIs(transport._producer, self.transport)
         self.protocol._disconnectParser(Failure(ConnectionDone("connection done")))
-        self.assertIdentical(transport._producer, None)
+        self.assertIs(transport._producer, None)
         return assertResponseFailed(self, requestDeferred, [ConnectionDone])
 
 
@@ -1473,7 +1473,7 @@ class HTTP11ClientProtocolTests(TestCase):
             "\r\n")
 
         self.assertEqual(len(quiescentResult), 2)
-        self.assertIdentical(quiescentResult[0], protocol)
+        self.assertIs(quiescentResult[0], protocol)
         self.assertIsInstance(quiescentResult[1], Response)
 
 
@@ -1663,8 +1663,8 @@ class RequestTests(TestCase):
         request = Request('POST', '/bar', _boringHeaders, producer)
         request.writeTo(self.transport)
 
-        self.assertNotIdentical(producer.consumer, None)
-        self.assertIdentical(self.transport.producer, producer)
+        self.assertIsNot(producer.consumer, None)
+        self.assertIs(self.transport.producer, producer)
         self.assertTrue(self.transport.streaming)
 
         self.assertEqual(
@@ -1679,7 +1679,7 @@ class RequestTests(TestCase):
         producer.consumer.write('x' * 3)
         producer.consumer.write('y' * 15)
         producer.finished.callback(None)
-        self.assertIdentical(self.transport.producer, None)
+        self.assertIs(self.transport.producer, None)
         self.assertEqual(
             self.transport.value(),
             "3\r\n"
@@ -1706,7 +1706,7 @@ class RequestTests(TestCase):
         producer.finished.errback(ArbitraryException())
         def cbFailed(ignored):
             self.assertEqual(self.transport.value(), "")
-            self.assertIdentical(self.transport.producer, None)
+            self.assertIs(self.transport.producer, None)
         d = self.assertFailure(writeDeferred, ArbitraryException)
         d.addCallback(cbFailed)
         return d
@@ -1722,8 +1722,8 @@ class RequestTests(TestCase):
         request = Request('POST', '/bar', _boringHeaders, producer)
         request.writeTo(self.transport)
 
-        self.assertNotIdentical(producer.consumer, None)
-        self.assertIdentical(self.transport.producer, producer)
+        self.assertIsNot(producer.consumer, None)
+        self.assertIs(self.transport.producer, producer)
         self.assertTrue(self.transport.streaming)
 
         self.assertEqual(
@@ -1737,7 +1737,7 @@ class RequestTests(TestCase):
 
         producer.consumer.write('abc')
         producer.finished.callback(None)
-        self.assertIdentical(self.transport.producer, None)
+        self.assertIs(self.transport.producer, None)
         self.assertEqual(self.transport.value(), "abc")
 
 
@@ -1753,7 +1753,7 @@ class RequestTests(TestCase):
         writeDeferred = request.writeTo(self.transport)
         producer.consumer.write('ab')
         producer.finished.callback(None)
-        self.assertIdentical(self.transport.producer, None)
+        self.assertIs(self.transport.producer, None)
         return self.assertFailure(writeDeferred, WrongBodyLength)
 
 
@@ -1787,7 +1787,7 @@ class RequestTests(TestCase):
 
         # The transport should have had the producer unregistered from it as
         # well.
-        self.assertIdentical(self.transport.producer, None)
+        self.assertIs(self.transport.producer, None)
 
         def cbFailed(exc):
             # The "cd" should not have been written to the transport because
@@ -1884,7 +1884,7 @@ class RequestTests(TestCase):
 
         producer.consumer.write('ab')
         finisher(producer)
-        self.assertIdentical(self.transport.producer, None)
+        self.assertIs(self.transport.producer, None)
         self.transport.clear()
         self.assertRaises(ExcessWrite, producer.consumer.write, 'cd')
         self.assertEqual(self.transport.value(), "")
@@ -1962,7 +1962,7 @@ class RequestTests(TestCase):
 
         # Sanity check - the producer should be registered with the underlying
         # transport.
-        self.assertIdentical(self.transport.producer, producer)
+        self.assertIs(self.transport.producer, producer)
         self.assertTrue(self.transport.streaming)
 
         producer.consumer.write('ab')
@@ -1983,7 +1983,7 @@ class RequestTests(TestCase):
         self.assertFalse(self.transport.disconnecting)
 
         # Oh.  Except it should unregister the producer that it registered.
-        self.assertIdentical(self.transport.producer, None)
+        self.assertIs(self.transport.producer, None)
 
         return self.assertFailure(writeDeferred, ArbitraryException)
 
@@ -2113,7 +2113,7 @@ class LengthEnforcingConsumerTests(TestCase):
         the correct number of bytes have been written it returns C{None}.
         """
         self.enforcer.write('x' * 10)
-        self.assertIdentical(self.enforcer._noMoreWritesExpected(), None)
+        self.assertIs(self.enforcer._noMoreWritesExpected(), None)
 
 
     def test_stopProducingRaises(self):
@@ -2177,10 +2177,10 @@ class RequestBodyConsumerTests(TestCase):
         producer = object()
         encoder = ChunkedEncoder(transport)
         encoder.registerProducer(producer, True)
-        self.assertIdentical(transport.producer, producer)
+        self.assertIs(transport.producer, producer)
         self.assertTrue(transport.streaming)
         encoder.unregisterProducer()
-        self.assertIdentical(transport.producer, None)
+        self.assertIs(transport.producer, None)
         self.assertEqual(transport.value(), '0\r\n\r\n')
 
 
@@ -2205,9 +2205,9 @@ class TransportProxyProducerTests(TestCase):
         """
         transport = StringTransport()
         proxy = TransportProxyProducer(transport)
-        self.assertIdentical(proxy._producer, transport)
+        self.assertIs(proxy._producer, transport)
         proxy._stopProxying()
-        self.assertIdentical(proxy._producer, None)
+        self.assertIs(proxy._producer, None)
 
 
     def test_resumeProducing(self):
@@ -2354,7 +2354,7 @@ class ResponseTests(TestCase):
 
         # The protocol reference should be dropped, too, to facilitate GC or
         # whatever.
-        self.assertIdentical(response._bodyProtocol, None)
+        self.assertIs(response._bodyProtocol, None)
 
 
     def test_bufferEarlyData(self):
@@ -2377,7 +2377,7 @@ class ResponseTests(TestCase):
         self.assertEqual(bytes, ['foo', 'bar', 'baz'])
         # Make sure the implementation-detail-byte-buffer is cleared because
         # not clearing it wastes memory.
-        self.assertIdentical(response._bodyBuffer, None)
+        self.assertIs(response._bodyBuffer, None)
 
 
     def test_multipleStartProducingFails(self):
diff --git a/twisted/web/test/test_proxy.py b/twisted/web/test/test_proxy.py
index 4452fcb..bb7a386 100644
--- a/twisted/web/test/test_proxy.py
+++ b/twisted/web/test/test_proxy.py
@@ -84,7 +84,7 @@ class ReverseProxyResourceTestCase(TestCase):
         self.assertEqual(child.path, "/path/foo")
         self.assertEqual(child.port, 1234)
         self.assertEqual(child.host, "127.0.0.1")
-        self.assertIdentical(child.reactor, resource.reactor)
+        self.assertIs(child.reactor, resource.reactor)
 
 
     def test_getChildWithSpecial(self):
diff --git a/twisted/web/test/test_resource.py b/twisted/web/test/test_resource.py
index 0ba132c..bc347cc 100644
--- a/twisted/web/test/test_resource.py
+++ b/twisted/web/test/test_resource.py
@@ -27,7 +27,7 @@ class ErrorPageTests(TestCase):
         called on.
         """
         page = self.errorPage(321, "foo", "bar")
-        self.assertIdentical(page.getChild("name", object()), page)
+        self.assertIs(page.getChild("name", object()), page)
 
 
     def _pageRenderingTest(self, page, code, brief, detail):
diff --git a/twisted/web/test/test_stan.py b/twisted/web/test/test_stan.py
index 9aa65a6..bbcd566 100644
--- a/twisted/web/test/test_stan.py
+++ b/twisted/web/test/test_stan.py
@@ -26,7 +26,7 @@ class TestTag(TestCase):
         L{Tag.fillSlots} returns self.
         """
         tag = proto()
-        self.assertIdentical(tag, tag.fillSlots(test='test'))
+        self.assertIs(tag, tag.fillSlots(test='test'))
 
 
     def test_cloneShallow(self):
@@ -44,12 +44,12 @@ class TestTag(TestCase):
         tag.columnNumber = 12
         clone = tag.clone(deep=False)
         self.assertEqual(clone.attributes['hello'], 'world')
-        self.assertNotIdentical(clone.attributes, tag.attributes)
+        self.assertIsNot(clone.attributes, tag.attributes)
         self.assertEqual(clone.children, ["How are you", innerList])
-        self.assertNotIdentical(clone.children, tag.children)
-        self.assertIdentical(clone.children[1], innerList)
+        self.assertIsNot(clone.children, tag.children)
+        self.assertIs(clone.children[1], innerList)
         self.assertEqual(tag.slotData, clone.slotData)
-        self.assertNotIdentical(tag.slotData, clone.slotData)
+        self.assertIsNot(tag.slotData, clone.slotData)
         self.assertEqual(clone.filename, "foo/bar")
         self.assertEqual(clone.lineNumber, 6)
         self.assertEqual(clone.columnNumber, 12)
@@ -72,18 +72,18 @@ class TestTag(TestCase):
         tag.columnNumber = 12
         clone = tag.clone()
         self.assertEqual(clone.attributes['hello'], 'world')
-        self.assertNotIdentical(clone.attributes, tag.attributes)
-        self.assertNotIdentical(clone.children, tag.children)
+        self.assertIsNot(clone.attributes, tag.attributes)
+        self.assertIsNot(clone.children, tag.children)
         # sanity check
-        self.assertIdentical(tag.children[1], innerTag)
+        self.assertIs(tag.children[1], innerTag)
         # clone should have sub-clone
-        self.assertNotIdentical(clone.children[1], innerTag)
+        self.assertIsNot(clone.children[1], innerTag)
         # sanity check
-        self.assertIdentical(tag.children[2], innerList)
+        self.assertIs(tag.children[2], innerList)
         # clone should have sub-clone
-        self.assertNotIdentical(clone.children[2], innerList)
+        self.assertIsNot(clone.children[2], innerList)
         self.assertEqual(tag.slotData, clone.slotData)
-        self.assertNotIdentical(tag.slotData, clone.slotData)
+        self.assertIsNot(tag.slotData, clone.slotData)
         self.assertEqual(clone.filename, "foo/bar")
         self.assertEqual(clone.lineNumber, 6)
         self.assertEqual(clone.columnNumber, 12)
diff --git a/twisted/web/test/test_static.py b/twisted/web/test/test_static.py
index 5841cbc..19a8fd8 100644
--- a/twisted/web/test/test_static.py
+++ b/twisted/web/test/test_static.py
@@ -537,7 +537,7 @@ class StaticMakeProducerTests(TestCase):
         # response and the boundary used to separate the parts.
         self.assertIn('content-type', contentHeaders)
         contentType = contentHeaders['content-type']
-        self.assertNotIdentical(
+        self.assertIsNot(
             None, re.match(
                 'multipart/byteranges; boundary="[^"]*"\Z', contentType))
         # Content-encoding is not set in the response to a multiple range
@@ -628,7 +628,7 @@ class StaticProducerTests(TestCase):
         fileObject = StringIO.StringIO()
         producer = static.StaticProducer(DummyRequest([]), fileObject)
         producer.stopProducing()
-        self.assertIdentical(None, producer.request)
+        self.assertIs(None, producer.request)
 
 
 
diff --git a/twisted/web/test/test_tap.py b/twisted/web/test/test_tap.py
index a3e33da..a2324db 100644
--- a/twisted/web/test/test_tap.py
+++ b/twisted/web/test/test_tap.py
@@ -107,7 +107,7 @@ class ServiceTests(TestCase):
         serverFactory = makePersonalServerFactory(site)
         self.assertIsInstance(serverFactory, PBServerFactory)
         self.assertIsInstance(serverFactory.root, ResourcePublisher)
-        self.assertIdentical(serverFactory.root.site, site)
+        self.assertIs(serverFactory.root.site, site)
 
 
     def test_personalServer(self):
@@ -171,9 +171,9 @@ class ServiceTests(TestCase):
         options.parseOptions(['--wsgi', __name__ + '.application'])
         root = options['root']
         self.assertTrue(root, WSGIResource)
-        self.assertIdentical(root._reactor, reactor)
+        self.assertIs(root._reactor, reactor)
         self.assertTrue(isinstance(root._threadpool, ThreadPool))
-        self.assertIdentical(root._application, application)
+        self.assertIs(root._application, application)
 
         # The threadpool should start and stop with the reactor.
         self.assertFalse(root._threadpool.started)
diff --git a/twisted/web/test/test_template.py b/twisted/web/test/test_template.py
index 2e2ab94..b0a92fb 100644
--- a/twisted/web/test/test_template.py
+++ b/twisted/web/test/test_template.py
@@ -86,7 +86,7 @@ class ElementTests(TestCase):
         """
         element = Element()
         err = self.assertRaises(MissingTemplateLoader, element.render, None)
-        self.assertIdentical(err.element, element)
+        self.assertIs(err.element, element)
 
 
     def test_missingTemplateLoaderRepr(self):
@@ -108,7 +108,7 @@ class ElementTests(TestCase):
         element = Element()
         err = self.assertRaises(
             MissingRenderMethod, element.lookupRenderMethod, "foo")
-        self.assertIdentical(err.element, element)
+        self.assertIs(err.element, element)
         self.assertEqual(err.renderName, "foo")
 
 
@@ -700,7 +700,7 @@ class TestRenderElement(TestCase):
 
         d.addCallback(check)
 
-        self.assertIdentical(NOT_DONE_YET, renderElement(self.request, element))
+        self.assertIs(NOT_DONE_YET, renderElement(self.request, element))
 
         return d
 
@@ -728,7 +728,7 @@ class TestRenderElement(TestCase):
 
         d.addCallback(check)
 
-        self.assertIdentical(NOT_DONE_YET, renderElement(self.request, element))
+        self.assertIs(NOT_DONE_YET, renderElement(self.request, element))
 
         return d
 
diff --git a/twisted/web/test/test_util.py b/twisted/web/test/test_util.py
index 42b54b9..da40ed4 100644
--- a/twisted/web/test/test_util.py
+++ b/twisted/web/test/test_util.py
@@ -188,7 +188,7 @@ class FailureElementTests(TestCase):
         tag = tags.div()
         result = renderer(None, tag)
         self.assertIsInstance(result, _SourceFragmentElement)
-        self.assertIdentical(result.frame, self.frame)
+        self.assertIs(result.frame, self.frame)
         self.assertEqual([tag], result.loader.load())
 
 
@@ -203,9 +203,9 @@ class FailureElementTests(TestCase):
         result = renderer(None, tag)
         self.assertIsInstance(result, list)
         self.assertIsInstance(result[0], _FrameElement)
-        self.assertIdentical(result[0].frame, self.failure.frames[0])
+        self.assertIs(result[0].frame, self.failure.frames[0])
         self.assertIsInstance(result[1], _FrameElement)
-        self.assertIdentical(result[1].frame, self.failure.frames[1])
+        self.assertIs(result[1].frame, self.failure.frames[1])
         # They must not share the same tag object.
         self.assertNotEqual(result[0].loader.load(), result[1].loader.load())
         self.assertEqual(2, len(result))
@@ -221,7 +221,7 @@ class FailureElementTests(TestCase):
         tag = tags.div()
         result = renderer(None, tag)
         self.assertIsInstance(result, _StackElement)
-        self.assertIdentical(result.stackFrames, self.failure.frames)
+        self.assertIs(result.stackFrames, self.failure.frames)
         self.assertEqual([tag], result.loader.load())
 
 
diff --git a/twisted/web/test/test_web.py b/twisted/web/test/test_web.py
index f386701..6d67b2f 100644
--- a/twisted/web/test/test_web.py
+++ b/twisted/web/test/test_web.py
@@ -271,7 +271,7 @@ class SiteTest(unittest.TestCase):
         sres2 = SimpleResource()
         sres1.putChild("",sres2)
         site = server.Site(sres1)
-        self.assertIdentical(
+        self.assertIs(
             site.getResourceFor(DummyRequest([''])),
             sres2, "Got the wrong resource.")
 
@@ -299,7 +299,7 @@ class SessionTest(unittest.TestCase):
         reactor is used.
         """
         session = server.Session(server.Site(resource.Resource()), '123')
-        self.assertIdentical(session._reactor, reactor)
+        self.assertIs(session._reactor, reactor)
 
 
     def test_startCheckingExpiration(self):
diff --git a/twisted/web/test/test_webclient.py b/twisted/web/test/test_webclient.py
index 1841402..dad6f24 100644
--- a/twisted/web/test/test_webclient.py
+++ b/twisted/web/test/test_webclient.py
@@ -586,7 +586,7 @@ class WebClientTestCase(unittest.TestCase):
 
     def _cbFactoryInfo(self, ignoredResult, factory):
         self.assertEqual(factory.status, '200')
-        self.assert_(factory.version.startswith('HTTP/'))
+        self.assertTrue(factory.version.startswith('HTTP/'))
         self.assertEqual(factory.message, 'OK')
         self.assertEqual(factory.response_headers['content-length'][0], '10')
 
@@ -1273,7 +1273,7 @@ class FileBodyProducerTests(unittest.TestCase):
         self.assertTrue(inputFile.closed)
         self._scheduled.pop(0)()
         self.assertEqual("", output.getvalue())
-        self.assertIdentical(self._NO_RESULT, self._resultNow(complete))
+        self.assertIs(self._NO_RESULT, self._resultNow(complete))
 
 
     def test_pauseProducing(self):
@@ -1301,7 +1301,7 @@ class FileBodyProducerTests(unittest.TestCase):
         # Since the producer is paused, no new data should be here.
         self.assertEqual(output.getvalue(), expectedResult[:5])
         self.assertEqual([], self._scheduled)
-        self.assertIdentical(self._NO_RESULT, self._resultNow(complete))
+        self.assertIs(self._NO_RESULT, self._resultNow(complete))
 
 
     def test_resumeProducing(self):
@@ -1545,7 +1545,7 @@ class HTTPConnectionPoolTests(unittest.TestCase, FakeReactorAndConnectMixin):
 
         def gotConnection(conn):
             # We got the cached connection:
-            self.assertIdentical(protocol, conn)
+            self.assertIs(protocol, conn)
             self.assertNotIn(
                 conn, self.pool._connections[("http", "example.com", 80)])
             # And the timeout was cancelled:
@@ -1570,7 +1570,7 @@ class HTTPConnectionPoolTests(unittest.TestCase, FakeReactorAndConnectMixin):
 
         def gotConnection(newConnection):
             # We got a new connection:
-            self.assertNotIdentical(protocol, newConnection)
+            self.assertIsNot(protocol, newConnection)
             # And the old connection is still there:
             self.assertIn(protocol, self.pool._connections[key])
             # While the new connection is not:
@@ -1602,7 +1602,7 @@ class HTTPConnectionPoolTests(unittest.TestCase, FakeReactorAndConnectMixin):
         result = []
         self.pool.getConnection(key,
                                 BadEndpoint()).addCallback(result.append)
-        self.assertIdentical(result[0], origCached[1])
+        self.assertIs(result[0], origCached[1])
 
         # And both the disconnected and removed connections should be out of
         # the cache:
@@ -1625,7 +1625,7 @@ class HTTPConnectionPoolTests(unittest.TestCase, FakeReactorAndConnectMixin):
         self.assertEqual(
             error.value.args[0],
             "BUG: Non-quiescent protocol added to connection pool.")
-        self.assertIdentical(None, self.pool._connections.get(
+        self.assertIs(None, self.pool._connections.get(
                 ("http", "example.com", 80)))
 
 
@@ -1665,7 +1665,7 @@ class HTTPConnectionPoolTests(unittest.TestCase, FakeReactorAndConnectMixin):
         pool.getConnection(
             key, StringEndpoint()).addCallback(
             result2.append)
-        self.assertIdentical(result2[0], protocol)
+        self.assertIs(result2[0], protocol)
 
 
     def test_closeCachedConnections(self):
@@ -1734,7 +1734,7 @@ class AgentTests(unittest.TestCase, FakeReactorAndConnectMixin):
         agent = client.Agent(self.reactor)
         self.assertIsInstance(agent._pool, HTTPConnectionPool)
         self.assertEqual(agent._pool.persistent, False)
-        self.assertIdentical(agent._reactor, agent._pool._reactor)
+        self.assertIs(agent._reactor, agent._pool._reactor)
 
 
     def test_persistent(self):
@@ -1794,7 +1794,7 @@ class AgentTests(unittest.TestCase, FakeReactorAndConnectMixin):
 
         pool = DummyPool()
         agent = MyAgent(self.reactor, pool=pool)
-        self.assertIdentical(pool, agent._pool)
+        self.assertIs(pool, agent._pool)
 
         headers = http_headers.Headers()
         headers.addRawHeader("host", "foo")
@@ -2007,7 +2007,7 @@ class AgentTests(unittest.TestCase, FakeReactorAndConnectMixin):
             req.headers,
             http_headers.Headers({'foo': ['bar'],
                                   'host': ['example.com:1234']}))
-        self.assertIdentical(req.bodyProducer, body)
+        self.assertIs(req.bodyProducer, body)
 
 
     def test_connectTimeout(self):
@@ -2123,7 +2123,7 @@ class HTTPConnectionPoolRetryTests(unittest.TestCase, FakeReactorAndConnectMixin
         def gotConnection(connection):
             self.assertIsInstance(connection,
                                   client._RetryingHTTP11ClientProtocol)
-            self.assertIdentical(connection._clientProtocol, protocol)
+            self.assertIs(connection._clientProtocol, protocol)
         return d.addCallback(gotConnection)
 
 
@@ -2138,7 +2138,7 @@ class HTTPConnectionPoolRetryTests(unittest.TestCase, FakeReactorAndConnectMixin
         def gotConnection(connection):
             # Don't want to use isinstance since potentially the wrapper might
             # subclass it at some point:
-            self.assertIdentical(connection.__class__, HTTP11ClientProtocol)
+            self.assertIs(connection.__class__, HTTP11ClientProtocol)
         return d.addCallback(gotConnection)
 
 
@@ -2161,7 +2161,7 @@ class HTTPConnectionPoolRetryTests(unittest.TestCase, FakeReactorAndConnectMixin
 
         def _shouldRetry(m, e, bp):
             self.assertEqual(m, "FOO")
-            self.assertIdentical(bp, bodyProducer)
+            self.assertIs(bp, bodyProducer)
             self.assertIsInstance(e, (RequestNotSent, ResponseNeverReceived))
             return willWeRetry
         retrier._shouldRetry = _shouldRetry
@@ -2247,7 +2247,7 @@ class HTTPConnectionPoolRetryTests(unittest.TestCase, FakeReactorAndConnectMixin
         d = pool.getConnection(123, DummyEndpoint())
 
         def gotConnection(connection):
-            self.assertIdentical(connection, protocol)
+            self.assertIs(connection, protocol)
         return d.addCallback(gotConnection)
 
 
@@ -2280,14 +2280,14 @@ class HTTPConnectionPoolRetryTests(unittest.TestCase, FakeReactorAndConnectMixin
         def gotConnection(connection):
             self.assertIsInstance(connection,
                                   client._RetryingHTTP11ClientProtocol)
-            self.assertIdentical(connection._clientProtocol, protocol)
+            self.assertIs(connection._clientProtocol, protocol)
             # Verify that the _newConnection method on retrying connection
             # calls _newConnection on the pool:
             self.assertEqual(newConnections, [])
             connection._newConnection()
             self.assertEqual(len(newConnections), 1)
             self.assertEqual(newConnections[0][0], key)
-            self.assertIdentical(newConnections[0][1], endpoint)
+            self.assertIs(newConnections[0][1], endpoint)
         return d.addCallback(gotConnection)
 
 
@@ -2355,7 +2355,7 @@ class CookieJarTests(unittest.TestCase, CookieTestsMixin):
         self.assertEqual(cookie.value, '2')
         self.assertEqual(cookie.path, '/')
         self.assertEqual(cookie.comment, 'goodbye')
-        self.assertIdentical(cookie.get_nonstandard_attr('cow'), None)
+        self.assertIs(cookie.get_nonstandard_attr('cow'), None)
 
 
     def test_sendCookie(self):
@@ -2365,7 +2365,7 @@ class CookieJarTests(unittest.TestCase, CookieTestsMixin):
         """
         jar, (request, response) = self.makeCookieJar()
 
-        self.assertIdentical(
+        self.assertIs(
             request.get_header('Cookie', None),
             None)
 
@@ -2409,7 +2409,7 @@ class CookieAgentTests(unittest.TestCase, CookieTestsMixin,
         d.addCallback(_checkCookie)
 
         req, res = self.protocol.requests.pop()
-        self.assertIdentical(req.headers.getRawHeaders('cookie'), None)
+        self.assertIs(req.headers.getRawHeaders('cookie'), None)
 
         resp = client.Response(
             ('HTTP', 1, 1),
@@ -2480,7 +2480,7 @@ class CookieAgentTests(unittest.TestCase, CookieTestsMixin,
         cookieAgent.request('GET', uri)
 
         req, res = self.protocol.requests.pop()
-        self.assertIdentical(None, req.headers.getRawHeaders('cookie'))
+        self.assertIs(None, req.headers.getRawHeaders('cookie'))
 
 
     def test_portCookie(self):
@@ -2640,7 +2640,7 @@ class ContentDecoderAgentTests(unittest.TestCase, FakeReactorAndConnectMixin):
         res.callback(response)
 
         def check(result):
-            self.assertNotIdentical(response, result)
+            self.assertIsNot(response, result)
             self.assertIsInstance(result, Decoder2)
             self.assertEqual(['decoder1,fizz'],
                               result.headers.getRawHeaders('content-encoding'))
@@ -2714,7 +2714,7 @@ class ContentDecoderAgentWithGzipTests(unittest.TestCase,
                 compressor.flush())
 
         def checkResponse(result):
-            self.assertNotIdentical(result, response)
+            self.assertIsNot(result, response)
             self.assertEqual(result.version, ('HTTP', 1, 1))
             self.assertEqual(result.code, 200)
             self.assertEqual(result.phrase, 'OK')
@@ -2913,7 +2913,7 @@ class ProxyAgentTests(unittest.TestCase, FakeReactorAndConnectMixin):
             req.headers,
             http_headers.Headers({'foo': ['bar'],
                                   'host': ['example.com:1234']}))
-        self.assertIdentical(req.bodyProducer, body)
+        self.assertIs(req.bodyProducer, body)
 
 
     def test_nonPersistent(self):
@@ -2935,7 +2935,7 @@ class ProxyAgentTests(unittest.TestCase, FakeReactorAndConnectMixin):
             persistent = False
             def getConnection(this, key, ep):
                 this.connected = True
-                self.assertIdentical(ep, endpoint)
+                self.assertIs(ep, endpoint)
                 # The key is *not* tied to the final destination, but only to
                 # the address of the proxy, since that's where *we* are
                 # connecting:
@@ -2944,7 +2944,7 @@ class ProxyAgentTests(unittest.TestCase, FakeReactorAndConnectMixin):
 
         pool = DummyPool()
         agent = client.ProxyAgent(endpoint, self.reactor, pool=pool)
-        self.assertIdentical(pool, agent._pool)
+        self.assertIs(pool, agent._pool)
 
         agent.request('GET', 'http://foo/')
         self.assertEqual(agent._pool.connected, True)
@@ -2978,7 +2978,7 @@ class RedirectAgentTests(unittest.TestCase, FakeReactorAndConnectMixin):
         self.assertEqual(0, len(self.protocol.requests))
 
         def checkResponse(result):
-            self.assertIdentical(result, response)
+            self.assertIs(result, response)
 
         return deferred.addCallback(checkResponse)
 
diff --git a/twisted/web/test/test_wsgi.py b/twisted/web/test/test_wsgi.py
index ddcdf11..e2a09b5 100644
--- a/twisted/web/test/test_wsgi.py
+++ b/twisted/web/test/test_wsgi.py
@@ -222,7 +222,7 @@ class EnvironTests(WSGITestsMixin, TestCase):
         """
         d = self.render('GET', '1.1', [], [''])
         def cbRendered((environ, startResponse)):
-            self.assertIdentical(type(environ), dict)
+            self.assertIs(type(environ), dict)
         d.addCallback(cbRendered)
         return d
 
diff --git a/twisted/web/test/test_xml.py b/twisted/web/test/test_xml.py
index 365e101..72f48a7 100644
--- a/twisted/web/test/test_xml.py
+++ b/twisted/web/test/test_xml.py
@@ -107,7 +107,7 @@ class MicroDOMTest(TestCase):
         # Spare the rod, ruin the child.
         s = "<br/><br/>"
         d = microdom.parseString(s, beExtremelyLenient=1)
-        self.assertIdentical(d.documentElement,
+        self.assertIs(d.documentElement,
                              d.documentElement.firstChild().parentNode)
 
 
@@ -118,7 +118,7 @@ class MicroDOMTest(TestCase):
         """
         s = "Hello"
         d = microdom.parseString(s, beExtremelyLenient=1)
-        self.assertIdentical(d.documentElement,
+        self.assertIs(d.documentElement,
                              d.documentElement.firstChild().parentNode)
 
 
@@ -130,7 +130,7 @@ class MicroDOMTest(TestCase):
             """
         d = microdom.parseString(s, beExtremelyLenient=1)
         n = domhelpers.gatherTextNodes(d)
-        self.assertNotEquals(n.find('>'), -1)
+        self.assertNotEqual(n.find('>'), -1)
 
     def testEmptyError(self):
         self.assertRaises(sux.ParseError, microdom.parseString, "")
@@ -223,13 +223,13 @@ alert("I hate you");
         # however this assertion tests preserving case for start and
         # end tags while still matching stuff like <bOrk></BoRk>
         self.assertEqual(d.documentElement.toxml(), s)
-        self.assert_(d.isEqualToDocument(d2), "%r != %r" % (d.toxml(), d2.toxml()))
-        self.assert_(d2.isEqualToDocument(d3), "%r != %r" % (d2.toxml(), d3.toxml()))
+        self.assertTrue(d.isEqualToDocument(d2), "%r != %r" % (d.toxml(), d2.toxml()))
+        self.assertTrue(d2.isEqualToDocument(d3), "%r != %r" % (d2.toxml(), d3.toxml()))
         # caseInsensitive=0 on the left, NOT perserveCase=1 on the right
         ## XXX THIS TEST IS TURNED OFF UNTIL SOMEONE WHO CARES ABOUT FIXING IT DOES
-        #self.failIf(d3.isEqualToDocument(d2), "%r == %r" % (d3.toxml(), d2.toxml()))
-        self.assert_(d3.isEqualToDocument(d4), "%r != %r" % (d3.toxml(), d4.toxml()))
-        self.assert_(d4.isEqualToDocument(d5), "%r != %r" % (d4.toxml(), d5.toxml()))
+        #self.assertFalse(d3.isEqualToDocument(d2), "%r == %r" % (d3.toxml(), d2.toxml()))
+        self.assertTrue(d3.isEqualToDocument(d4), "%r != %r" % (d3.toxml(), d4.toxml()))
+        self.assertTrue(d4.isEqualToDocument(d5), "%r != %r" % (d4.toxml(), d5.toxml()))
 
     def testDifferentQuotes(self):
         s = '<test a="a" b=\'b\' />'
@@ -255,19 +255,19 @@ alert("I hate you");
         e = d.documentElement
         self.assertEqual(e.nodeName, "bar")
         c = e.childNodes[0]
-        self.assert_(isinstance(c, microdom.Comment))
+        self.assertTrue(isinstance(c, microdom.Comment))
         self.assertEqual(c.value, "<foo />")
         c2 = c.cloneNode()
-        self.assert_(c is not c2)
+        self.assertTrue(c is not c2)
         self.assertEqual(c2.toxml(), "<!--<foo />-->")
 
     def testText(self):
         d = microdom.parseString("<bar>xxxx</bar>").documentElement
         text = d.childNodes[0]
-        self.assert_(isinstance(text, microdom.Text))
+        self.assertTrue(isinstance(text, microdom.Text))
         self.assertEqual(text.value, "xxxx")
         clone = text.cloneNode()
-        self.assert_(clone is not text)
+        self.assertTrue(clone is not text)
         self.assertEqual(clone.toxml(), "xxxx")
 
     def testEntities(self):
@@ -277,12 +277,12 @@ alert("I hate you");
         self.assertEqual(nodes[1].data, "&#12AB;")
         self.assertEqual(nodes[0].cloneNode().toxml(), "&amp;")
         for n in nodes:
-            self.assert_(isinstance(n, microdom.EntityReference))
+            self.assertTrue(isinstance(n, microdom.EntityReference))
 
     def testCData(self):
         s = '<x><![CDATA[</x>\r\n & foo]]></x>'
         cdata = microdom.parseString(s).documentElement.childNodes[0]
-        self.assert_(isinstance(cdata, microdom.CDATASection))
+        self.assertTrue(isinstance(cdata, microdom.CDATASection))
         self.assertEqual(cdata.data, "</x>\r\n & foo")
         self.assertEqual(cdata.cloneNode().toxml(), "<![CDATA[</x>\r\n & foo]]>")
 
@@ -293,9 +293,9 @@ alert("I hate you");
         nodes2 = microdom.parseString(s2).documentElement.childNodes
         self.assertEqual(len(nodes), 3)
         for (n, n2) in zip(nodes, nodes2):
-            self.assert_(isinstance(n, microdom.Element))
+            self.assertTrue(isinstance(n, microdom.Element))
             self.assertEqual(n.nodeName, "b")
-            self.assert_(n.isEqualToNode(n2))
+            self.assertTrue(n.isEqualToNode(n2))
 
     def testAttributes(self):
         s = '<foo a="b" />'
@@ -303,8 +303,8 @@ alert("I hate you");
 
         self.assertEqual(node.getAttribute("a"), "b")
         self.assertEqual(node.getAttribute("c"), None)
-        self.assert_(node.hasAttribute("a"))
-        self.assert_(not node.hasAttribute("c"))
+        self.assertTrue(node.hasAttribute("a"))
+        self.assertTrue(not node.hasAttribute("c"))
         a = node.getAttributeNode("a")
         self.assertEqual(a.value, "b")
 
@@ -317,8 +317,8 @@ alert("I hate you");
         self.assertEqual([n.nodeName for n in d.childNodes], ["bar", "baz", "bax"])
         self.assertEqual(d.lastChild().nodeName, "bax")
         self.assertEqual(d.firstChild().nodeName, "bar")
-        self.assert_(d.hasChildNodes())
-        self.assert_(not d.firstChild().hasChildNodes())
+        self.assertTrue(d.hasChildNodes())
+        self.assertTrue(not d.firstChild().hasChildNodes())
 
     def testMutate(self):
         s = "<foo />"
@@ -339,7 +339,7 @@ alert("I hate you");
         self.assertEqual(d.childNodes[1], child)
         for n in d.childNodes:
             self.assertEqual(n.parentNode, d)
-        self.assert_(d.isEqualToNode(d1))
+        self.assertTrue(d.isEqualToNode(d1))
 
         d.removeChild(child)
         self.assertEqual(len(d.childNodes), 1)
@@ -348,7 +348,7 @@ alert("I hate you");
         t = microdom.Text("foo")
         d.replaceChild(t, d.firstChild())
         self.assertEqual(d.firstChild(), t)
-        self.assert_(d.isEqualToNode(d2))
+        self.assertTrue(d.isEqualToNode(d2))
 
 
     def test_replaceNonChild(self):
@@ -400,8 +400,8 @@ alert("I hate you");
         self.assertEqual(d.doctype,
                           'foo PUBLIC "baz" "http://www.example.com/example.dtd"')
         self.assertEqual(d.toxml(), s)
-        self.failIf(d.isEqualToDocument(d2))
-        self.failUnless(d.documentElement.isEqualToNode(d2.documentElement))
+        self.assertFalse(d.isEqualToDocument(d2))
+        self.assertTrue(d.documentElement.isEqualToNode(d2.documentElement))
 
     samples = [("<img/>", "<img />"),
                ("<foo A='b'>x</foo>", '<foo A="b">x</foo>'),
@@ -416,7 +416,7 @@ alert("I hate you");
             d2 = microdom.parseString(out, caseInsensitive=0)
             testOut = d.documentElement.toxml()
             self.assertEqual(out, testOut)
-            self.assert_(d.isEqualToDocument(d2))
+            self.assertTrue(d.isEqualToDocument(d2))
 
     def testErrors(self):
         for s in ["<foo>&am</foo>", "<foo", "<f>&</f>", "<() />"]:
@@ -437,19 +437,19 @@ alert("I hate you");
         self.assertRaises(microdom.MismatchedTags, microdom.parseString,
             s, caseInsensitive=0)
         self.assertEqual(out, s2)
-        self.failUnless(d.isEqualToDocument(d2))
-        self.failUnless(d.isEqualToDocument(d3))
-        self.failUnless(d4.documentElement.hasAttribute('a'))
-        self.failIf(d6.documentElement.hasAttribute('a'))
+        self.assertTrue(d.isEqualToDocument(d2))
+        self.assertTrue(d.isEqualToDocument(d3))
+        self.assertTrue(d4.documentElement.hasAttribute('a'))
+        self.assertFalse(d6.documentElement.hasAttribute('a'))
         self.assertEqual(d4.documentElement.toxml(), '<foo A="b">x</foo>')
         self.assertEqual(d5.documentElement.toxml(), '<foo a="b">x</foo>')
     def testEatingWhitespace(self):
         s = """<hello>
         </hello>"""
         d = microdom.parseString(s)
-        self.failUnless(not d.documentElement.hasChildNodes(),
+        self.assertTrue(not d.documentElement.hasChildNodes(),
                         d.documentElement.childNodes)
-        self.failUnless(d.isEqualToDocument(microdom.parseString('<hello></hello>')))
+        self.assertTrue(d.isEqualToDocument(microdom.parseString('<hello></hello>')))
 
     def testLenientAmpersand(self):
         prefix = "<?xml version='1.0'?>"
@@ -548,13 +548,13 @@ alert("I hate you");
         urd = microdom.parseString(reverseBytes(s.encode('UTF-16')))
         ud = microdom.parseString(s.encode('UTF-16'))
         sd = microdom.parseString(s)
-        self.assert_(ud.isEqualToDocument(sd))
-        self.assert_(ud.isEqualToDocument(urd))
+        self.assertTrue(ud.isEqualToDocument(sd))
+        self.assertTrue(ud.isEqualToDocument(urd))
         ud = microdom.parseString(j)
         urd = microdom.parseString(reverseBytes(j2))
         sd = microdom.parseString(j2)
-        self.assert_(ud.isEqualToDocument(sd))
-        self.assert_(ud.isEqualToDocument(urd))
+        self.assertTrue(ud.isEqualToDocument(sd))
+        self.assertTrue(ud.isEqualToDocument(urd))
 
         # test that raw text still gets encoded
         # test that comments get encoded
@@ -578,18 +578,18 @@ alert("I hate you");
             result = domhelpers.namedChildren(node, 'bar')
             self.assertEqual(len(result), tests[t])
             if result:
-                self.assert_(hasattr(result[0], 'tagName'))
+                self.assertTrue(hasattr(result[0], 'tagName'))
 
     def testCloneNode(self):
         s = '<foo a="b"><bax>x</bax></foo>'
         node = microdom.parseString(s).documentElement
         clone = node.cloneNode(deep=1)
-        self.failIfEquals(node, clone)
+        self.assertNotEqual(node, clone)
         self.assertEqual(len(node.childNodes), len(clone.childNodes))
         c1, c2 = node.firstChild(), clone.firstChild()
-        self.failIfEquals(c1, c2)
+        self.assertNotEqual(c1, c2)
         self.assertEqual(len(c1.childNodes), len(c2.childNodes))
-        self.failIfEquals(c1.firstChild(), c2.firstChild())
+        self.assertNotEqual(c1.firstChild(), c2.firstChild())
         self.assertEqual(s, clone.toxml())
         self.assertEqual(node.namespace, clone.namespace)
 
@@ -600,12 +600,12 @@ alert("I hate you");
 
         node = microdom.parseString(s)
         clone = node.cloneNode(deep=1)
-        self.failIfEquals(node, clone)
+        self.assertNotEqual(node, clone)
         self.assertEqual(len(node.childNodes), len(clone.childNodes))
         self.assertEqual(s, clone.toxml())
 
-        self.failUnless(clone.isEqualToDocument(node))
-        self.failUnless(node.isEqualToDocument(clone))
+        self.assertTrue(clone.isEqualToDocument(node))
+        self.assertTrue(node.isEqualToDocument(clone))
 
 
     def testLMX(self):
diff --git a/twisted/web/test/test_xmlrpc.py b/twisted/web/test/test_xmlrpc.py
index f49ff02..1d41768 100644
--- a/twisted/web/test/test_xmlrpc.py
+++ b/twisted/web/test/test_xmlrpc.py
@@ -339,7 +339,7 @@ class XMLRPCTestCase(unittest.TestCase):
             factory.f = TestQueryFactoryCancel(*args, **kw)
             return factory.f
         d = self.proxy(factory).callRemote('add', 2, 3)
-        self.assertNotEquals(factory.f.connector.state, "disconnected")
+        self.assertNotEqual(factory.f.connector.state, "disconnected")
         d.cancel()
         self.assertEqual(factory.f.connector.state, "disconnected")
         d = self.assertFailure(d, defer.CancelledError)
diff --git a/twisted/words/test/test_basesupport.py b/twisted/words/test/test_basesupport.py
index 3a81963..a13758c 100644
--- a/twisted/words/test/test_basesupport.py
+++ b/twisted/words/test/test_basesupport.py
@@ -58,9 +58,9 @@ class ClientMsgTests(unittest.TestCase):
         account.loginDeferred.callback(None)
 
         def check(result):
-            self.assert_(not account.loginHasFailed, 
+            self.assertTrue(not account.loginHasFailed, 
                     "Login shouldn't have failed")
-            self.assert_(account.loginCallbackCalled, 
+            self.assertTrue(account.loginCallbackCalled, 
                     "We should be logged in")
         d.addCallback(check)
         return d
@@ -76,12 +76,12 @@ class ClientMsgTests(unittest.TestCase):
         account.loginDeferred.errback(Exception())
 
         def err(reason):
-            self.assert_(account.loginHasFailed, "Login should have failed")
-            self.assert_(not account.loginCallbackCalled, 
+            self.assertTrue(account.loginHasFailed, "Login should have failed")
+            self.assertTrue(not account.loginCallbackCalled, 
                     "We shouldn't be logged in")
-            self.assert_(not ui.clientRegistered, 
+            self.assertTrue(not ui.clientRegistered, 
                     "Client shouldn't be registered in the UI")
-        cb = lambda r: self.assert_(False, "Shouldn't get called back")
+        cb = lambda r: self.assertTrue(False, "Shouldn't get called back")
         d.addCallbacks(cb, err)
         return d
 
diff --git a/twisted/words/test/test_domish.py b/twisted/words/test/test_domish.py
index 275afb7..83eee6c 100644
--- a/twisted/words/test/test_domish.py
+++ b/twisted/words/test/test_domish.py
@@ -386,7 +386,7 @@ class SerializerTests(unittest.TestCase):
     def testLocalPrefixesWithChild(self):
         e = domish.Element(('testns', 'foo'), localPrefixes={'bar': 'testns'})
         e.addElement('baz')
-        self.assertIdentical(e.baz.defaultUri, None)
+        self.assertIs(e.baz.defaultUri, None)
         self.assertEqual(e.toXml(), "<bar:foo xmlns:bar='testns'><baz/></bar:foo>")
 
     def test_prefixesReuse(self):
@@ -402,7 +402,7 @@ class SerializerTests(unittest.TestCase):
 
         # test passing of dictionary
         s = domish.SerializerClass(prefixes=prefixes)
-        self.assertNotIdentical(prefixes, s.prefixes)
+        self.assertIsNot(prefixes, s.prefixes)
 
         # test proper serialization on prefixes reuse
         e = domish.Element(('testns2', 'foo'),
diff --git a/twisted/words/test/test_irc.py b/twisted/words/test/test_irc.py
index 46af3c7..ca7545f 100644
--- a/twisted/words/test/test_irc.py
+++ b/twisted/words/test/test_irc.py
@@ -1028,7 +1028,7 @@ class ClientImplementationTests(unittest.TestCase):
 
         # After the motd is delivered, the tracking variable should be
         # reset.
-        self.assertIdentical(self.client.motd, None)
+        self.assertIs(self.client.motd, None)
 
 
     def test_withoutMOTDSTART(self):
@@ -1098,7 +1098,7 @@ class ClientImplementationTests(unittest.TestCase):
             msg = "are available on this server"
             self._serverTestImpl(
                 '005', msg, 'isupport', args=name, options=[name])
-            self.assertIdentical(
+            self.assertIs(
                 self.client.supported.getFeature(name), None)
             self.client.calls = []
 
@@ -1117,7 +1117,7 @@ class ClientImplementationTests(unittest.TestCase):
 
         # Restore ISUPPORT features.
         self._sendISUPPORT()
-        self.assertNotIdentical(
+        self.assertIsNot(
             self.client.supported.getFeature('PREFIX'), None)
 
 
@@ -1221,7 +1221,7 @@ class ClientImplementationTests(unittest.TestCase):
         self._checkModeChange([])
         errors = self.flushLoggedErrors(irc.IRCBadModes)
         self.assertEqual(len(errors), 1)
-        self.assertSubstring(
+        self.assertIn(
             'Too many parameters', errors[0].getErrorMessage())
 
 
@@ -1234,7 +1234,7 @@ class ClientImplementationTests(unittest.TestCase):
         self._checkModeChange([])
         errors = self.flushLoggedErrors(irc.IRCBadModes)
         self.assertEqual(len(errors), 1)
-        self.assertSubstring(
+        self.assertIn(
             'Not enough parameters', errors[0].getErrorMessage())
 
 
@@ -1276,9 +1276,9 @@ class ClientImplementationTests(unittest.TestCase):
         self._originalCreateHeartbeat = self.client._createHeartbeat
         self.patch(self.client, '_createHeartbeat', _createHeartbeat)
 
-        self.assertIdentical(self.client._heartbeat, None)
+        self.assertIs(self.client._heartbeat, None)
         self.client.irc_RPL_WELCOME('foo', [])
-        self.assertNotIdentical(self.client._heartbeat, None)
+        self.assertIsNot(self.client._heartbeat, None)
         self.assertEqual(self.client.hostname, 'foo')
 
         # Pump the clock enough to trigger one LoopingCall.
@@ -1291,7 +1291,7 @@ class ClientImplementationTests(unittest.TestCase):
         self.client.connectionLost(None)
         self.assertEqual(
             len(self.clock.getDelayedCalls()), 0)
-        self.assertIdentical(self.client._heartbeat, None)
+        self.assertIs(self.client._heartbeat, None)
 
 
     def test_heartbeatDisabled(self):
@@ -1299,10 +1299,10 @@ class ClientImplementationTests(unittest.TestCase):
         If L{irc.IRCClient.heartbeatInterval} is set to C{None} then no
         heartbeat is created.
         """
-        self.assertIdentical(self.client._heartbeat, None)
+        self.assertIs(self.client._heartbeat, None)
         self.client.heartbeatInterval = None
         self.client.irc_RPL_WELCOME('foo', [])
-        self.assertIdentical(self.client._heartbeat, None)
+        self.assertIs(self.client._heartbeat, None)
 
 
 
@@ -1650,7 +1650,7 @@ class ClientMsgTests(unittest.TestCase):
         then sends the message to the server for delivery to that channel.
         """
         self.client.say("thechannel", "the message")
-        self.assertEquals(
+        self.assertEqual(
             self.client.lines, ["PRIVMSG #thechannel :the message"])
 
 
@@ -1784,7 +1784,7 @@ class ClientTests(TestCase):
         self.protocol.register(username, hostname, servername)
         self.protocol.irc_ERR_NICKNAMEINUSE('prefix', ['param'])
         lastLine = self.getLastLine(self.transport)
-        self.assertNotEquals(lastLine, 'NICK %s' % (username,))
+        self.assertNotEqual(lastLine, 'NICK %s' % (username,))
 
         # Keep chaining underscores for each collision
         self.protocol.irc_ERR_NICKNAMEINUSE('prefix', ['param'])
diff --git a/twisted/words/test/test_jabberclient.py b/twisted/words/test/test_jabberclient.py
index 87af883..456a27e 100644
--- a/twisted/words/test/test_jabberclient.py
+++ b/twisted/words/test/test_jabberclient.py
@@ -403,10 +403,10 @@ class XMPPAuthenticatorTest(unittest.TestCase):
         # test list of initializers
         version, tls, sasl, bind, session = xs.initializers
 
-        self.assert_(isinstance(tls, xmlstream.TLSInitiatingInitializer))
-        self.assert_(isinstance(sasl, SASLInitiatingInitializer))
-        self.assert_(isinstance(bind, client.BindInitializer))
-        self.assert_(isinstance(session, client.SessionInitializer))
+        self.assertTrue(isinstance(tls, xmlstream.TLSInitiatingInitializer))
+        self.assertTrue(isinstance(sasl, SASLInitiatingInitializer))
+        self.assertTrue(isinstance(bind, client.BindInitializer))
+        self.assertTrue(isinstance(session, client.SessionInitializer))
 
         self.assertFalse(tls.required)
         self.assertTrue(sasl.required)
diff --git a/twisted/words/test/test_jabbercomponent.py b/twisted/words/test/test_jabbercomponent.py
index d8bb108..02fec3b 100644
--- a/twisted/words/test/test_jabbercomponent.py
+++ b/twisted/words/test/test_jabbercomponent.py
@@ -238,14 +238,14 @@ class ListenComponentAuthenticatorTest(unittest.TestCase):
         xs.addOnetimeObserver = addOnetimeObserver
 
         xs.makeConnection(self)
-        self.assertIdentical(None, xs.sid)
+        self.assertIs(None, xs.sid)
         self.assertFalse(xs._headerSent)
 
         xs.dataReceived("<stream:stream xmlns='jabber:component:accept' "
                          "xmlns:stream='http://etherx.jabber.org/streams' "
                          "to='component.example.org'>")
         self.assertEqual((0, 0), xs.version)
-        self.assertNotIdentical(None, xs.sid)
+        self.assertIsNot(None, xs.sid)
         self.assertTrue(xs._headerSent)
         self.assertEqual(('/*', xs.authenticator.onElement), observers[-1])
 
@@ -373,8 +373,8 @@ class XMPPComponentServerFactoryTest(unittest.TestCase):
                                 xmlstream.STREAM_CONNECTED_EVENT)
         self.assertEqual(0, self.xmlstream.serial)
         self.assertEqual(1, self.factory.serial)
-        self.assertIdentical(None, self.xmlstream.rawDataInFn)
-        self.assertIdentical(None, self.xmlstream.rawDataOutFn)
+        self.assertIs(None, self.xmlstream.rawDataInFn)
+        self.assertIs(None, self.xmlstream.rawDataOutFn)
 
 
     def test_makeConnectionLogTraffic(self):
@@ -384,8 +384,8 @@ class XMPPComponentServerFactoryTest(unittest.TestCase):
         self.factory.logTraffic = True
         self.xmlstream.dispatch(self.xmlstream,
                                 xmlstream.STREAM_CONNECTED_EVENT)
-        self.assertNotIdentical(None, self.xmlstream.rawDataInFn)
-        self.assertNotIdentical(None, self.xmlstream.rawDataOutFn)
+        self.assertIsNot(None, self.xmlstream.rawDataInFn)
+        self.assertIsNot(None, self.xmlstream.rawDataOutFn)
 
 
     def test_onError(self):
@@ -409,7 +409,7 @@ class XMPPComponentServerFactoryTest(unittest.TestCase):
         """
         self.xmlstream.dispatch(self.xmlstream, xmlstream.STREAM_AUTHD_EVENT)
         self.assertIn('component.example.org', self.router.routes)
-        self.assertIdentical(self.xmlstream,
+        self.assertIs(self.xmlstream,
                              self.router.routes['component.example.org'])
 
 
diff --git a/twisted/words/test/test_jabbererror.py b/twisted/words/test/test_jabbererror.py
index 45d8dac..c406508 100644
--- a/twisted/words/test/test_jabbererror.py
+++ b/twisted/words/test/test_jabbererror.py
@@ -23,7 +23,7 @@ class BaseErrorTest(unittest.TestCase):
         """
         e = error.BaseError('feature-not-implemented')
         element = e.getElement()
-        self.assertIdentical(element.uri, None)
+        self.assertIs(element.uri, None)
         self.assertEqual(len(element.children), 1)
 
     def test_getElementText(self):
@@ -153,7 +153,7 @@ class StanzaErrorTest(unittest.TestCase):
         stanza['from'] = 'user2@example.com/resource'
         e = error.StanzaError('service-unavailable')
         response = e.toResponse(stanza)
-        self.assertNotIdentical(response, stanza)
+        self.assertIsNot(response, stanza)
         self.assertEqual(response['from'], 'user1@example.com')
         self.assertEqual(response['to'], 'user2@example.com/resource')
         self.assertEqual(response['type'], 'error')
@@ -285,7 +285,7 @@ class ExceptionFromStanzaTest(unittest.TestCase):
         uc['feature'] = 'retrieve-subscriptions'
 
         result = error.exceptionFromStanza(stanza)
-        self.assert_(isinstance(result, error.StanzaError))
+        self.assertTrue(isinstance(result, error.StanzaError))
         self.assertEqual('feature-not-implemented', result.condition)
         self.assertEqual('cancel', result.type)
         self.assertEqual(uc, result.appCondition)
@@ -313,7 +313,7 @@ class ExceptionFromStanzaTest(unittest.TestCase):
         e['code'] = '502'
 
         result = error.exceptionFromStanza(stanza)
-        self.assert_(isinstance(result, error.StanzaError))
+        self.assertTrue(isinstance(result, error.StanzaError))
         self.assertEqual('service-unavailable', result.condition)
         self.assertEqual('wait', result.type)
         self.assertEqual('Unable to resolve hostname.', result.text)
@@ -338,5 +338,5 @@ class ExceptionFromStreamErrorTest(unittest.TestCase):
         e.addElement((NS_XMPP_STREAMS, 'xml-not-well-formed'))
 
         result = error.exceptionFromStreamError(e)
-        self.assert_(isinstance(result, error.StreamError))
+        self.assertTrue(isinstance(result, error.StreamError))
         self.assertEqual('xml-not-well-formed', result.condition)
diff --git a/twisted/words/test/test_jabberjid.py b/twisted/words/test/test_jabberjid.py
index fa3a119..5661a2e 100644
--- a/twisted/words/test/test_jabberjid.py
+++ b/twisted/words/test/test_jabberjid.py
@@ -85,7 +85,7 @@ class JIDParsingTest(unittest.TestCase):
         """
         self.assertEqual(jid.prep("user", "hoST", "resource"),
                           ("user", "host", "resource"))
-        self.assertNotEquals(jid.prep("user", "host", "Resource"),
+        self.assertNotEqual(jid.prep("user", "host", "Resource"),
                              ("user", "host", "resource"))
 
 class JIDTest(unittest.TestCase):
@@ -125,14 +125,14 @@ class JIDTest(unittest.TestCase):
         """
         j1 = jid.JID("user@host/resource")
         j2 = jid.internJID("user@host")
-        self.assertIdentical(j2, j1.userhostJID())
+        self.assertIs(j2, j1.userhostJID())
 
     def test_userhostJIDNoResource(self):
         """
         Test getting a JID object of the bare JID when there was no resource.
         """
         j = jid.JID("user@host")
-        self.assertIdentical(j, j.userhostJID())
+        self.assertIs(j, j.userhostJID())
 
     def test_fullHost(self):
         """
@@ -168,7 +168,7 @@ class JIDTest(unittest.TestCase):
         """
         j1 = jid.JID("user@host/resource")
         j2 = jid.JID("user@host/resource")
-        self.assertNotIdentical(j1, j2)
+        self.assertIsNot(j1, j2)
         self.assertEqual(j1, j2)
 
     def test_equalityWithNonJIDs(self):
@@ -222,4 +222,4 @@ class InternJIDTest(unittest.TestCase):
         """
         j1 = jid.internJID("user@host")
         j2 = jid.internJID("user@host")
-        self.assertIdentical(j1, j2)
+        self.assertIs(j1, j2)
diff --git a/twisted/words/test/test_jabbersaslmechanisms.py b/twisted/words/test/test_jabbersaslmechanisms.py
index 1e195ab..c11119e 100644
--- a/twisted/words/test/test_jabbersaslmechanisms.py
+++ b/twisted/words/test/test_jabbersaslmechanisms.py
@@ -42,7 +42,7 @@ class DigestMD5Test(unittest.TestCase):
         """
         Test that no initial response is generated.
         """
-        self.assertIdentical(self.mechanism.getInitialResponse(), None)
+        self.assertIs(self.mechanism.getInitialResponse(), None)
 
     def test_getResponse(self):
         """
diff --git a/twisted/words/test/test_jabberxmlstream.py b/twisted/words/test/test_jabberxmlstream.py
index 1d80af5..efba83b 100644
--- a/twisted/words/test/test_jabberxmlstream.py
+++ b/twisted/words/test/test_jabberxmlstream.py
@@ -360,7 +360,7 @@ class XmlStreamTest(unittest.TestCase):
         xs.initiating = True
         xs.transport.clear()
         xs.sendStreamError(error.StreamError('version-unsupported'))
-        self.assertNot(xs._headerSent)
+        self.assertFalse(xs._headerSent)
         self.assertEqual('', xs.transport.value())
         self.assertTrue(self.gotStreamEnd)
 
@@ -406,7 +406,7 @@ class XmlStreamTest(unittest.TestCase):
         stream = xs.stream
         xs.reset()
         self.assertNotEqual(stream, xs.stream)
-        self.assertNot(xs._headerSent)
+        self.assertFalse(xs._headerSent)
 
 
     def test_send(self):
@@ -483,9 +483,9 @@ class AuthenticatorTest(unittest.TestCase):
                          "from='example.org' to='example.com' id='12345' "
                          "version='1.0'>")
         self.assertEqual((1, 0), xs.version)
-        self.assertIdentical(None, xs.sid)
+        self.assertIs(None, xs.sid)
         self.assertEqual('invalid', xs.namespace)
-        self.assertIdentical(None, xs.otherEntity)
+        self.assertIs(None, xs.otherEntity)
         self.assertEqual(None, xs.thisEntity)
 
 
@@ -578,7 +578,7 @@ class ConnectAuthenticatorTest(unittest.TestCase):
         self.authenticator.initializeStream()
         self.assertEqual([init], self.xmlstream.initializers)
         self.assertFalse(self.gotAuthenticated)
-        self.assertNotIdentical(None, self.initFailure)
+        self.assertIsNot(None, self.initFailure)
         self.assertTrue(self.initFailure.check(TestError))
 
 
@@ -598,8 +598,8 @@ class ConnectAuthenticatorTest(unittest.TestCase):
         self.assertEqual('12345', xs.sid)
         self.assertEqual('testns', xs.namespace)
         self.assertEqual('example.com', xs.otherEntity.host)
-        self.assertIdentical(None, xs.thisEntity)
-        self.assertNot(self.gotAuthenticated)
+        self.assertIs(None, xs.thisEntity)
+        self.assertFalse(self.gotAuthenticated)
         xs.dataReceived("<stream:features>"
                           "<test xmlns='testns'/>"
                         "</stream:features>")
@@ -625,16 +625,16 @@ class ListenAuthenticatorTest(unittest.TestCase):
         """
         xs = self.xmlstream
         xs.makeConnection(proto_helpers.StringTransport())
-        self.assertIdentical(None, xs.sid)
+        self.assertIs(None, xs.sid)
         xs.dataReceived("<stream:stream xmlns='jabber:client' "
                          "xmlns:stream='http://etherx.jabber.org/streams' "
                          "from='example.org' to='example.com' id='12345' "
                          "version='1.0'>")
         self.assertEqual((1, 0), xs.version)
-        self.assertNotIdentical(None, xs.sid)
-        self.assertNotEquals('12345', xs.sid)
+        self.assertIsNot(None, xs.sid)
+        self.assertNotEqual('12345', xs.sid)
         self.assertEqual('jabber:client', xs.namespace)
-        self.assertIdentical(None, xs.otherEntity)
+        self.assertIs(None, xs.otherEntity)
         self.assertEqual('example.com', xs.thisEntity.host)
 
 
@@ -808,7 +808,7 @@ class BaseFeatureInitiatingInitializerTest(unittest.TestCase):
         initializer, the initializer silently succeeds.
         """
         self.init.required = False
-        self.assertIdentical(None, self.init.initialize())
+        self.assertIs(None, self.init.initialize())
 
 
 
@@ -824,7 +824,7 @@ class ToResponseTest(unittest.TestCase):
         stanza['from'] = 'user2@example.com/resource'
         stanza['id'] = 'stanza1'
         response = xmlstream.toResponse(stanza, 'result')
-        self.assertNotIdentical(stanza, response)
+        self.assertIsNot(stanza, response)
         self.assertEqual(response['from'], 'user1@example.com')
         self.assertEqual(response['to'], 'user2@example.com/resource')
         self.assertEqual(response['type'], 'result')
@@ -979,7 +979,7 @@ class XMPPHandlerTest(unittest.TestCase):
         xs = xmlstream.XmlStream(xmlstream.Authenticator())
         handler.makeConnection(xs)
         self.assertTrue(handler.doneMade)
-        self.assertIdentical(xs, handler.xmlstream)
+        self.assertIs(xs, handler.xmlstream)
 
 
     def test_connectionLost(self):
@@ -990,7 +990,7 @@ class XMPPHandlerTest(unittest.TestCase):
         xs = xmlstream.XmlStream(xmlstream.Authenticator())
         handler.makeConnection(xs)
         handler.connectionLost(Exception())
-        self.assertIdentical(None, handler.xmlstream)
+        self.assertIs(None, handler.xmlstream)
 
 
 
@@ -1017,7 +1017,7 @@ class XMPPHandlerCollectionTest(unittest.TestCase):
         handler = DummyXMPPHandler()
         handler.setHandlerParent(self.collection)
         self.assertIn(handler, self.collection)
-        self.assertIdentical(self.collection, handler.parent)
+        self.assertIs(self.collection, handler.parent)
 
 
     def test_removeHandler(self):
@@ -1028,7 +1028,7 @@ class XMPPHandlerCollectionTest(unittest.TestCase):
         handler.setHandlerParent(self.collection)
         handler.disownHandlerParent(self.collection)
         self.assertNotIn(handler, self.collection)
-        self.assertIdentical(None, handler.parent)
+        self.assertIs(None, handler.parent)
 
 
 
@@ -1047,7 +1047,7 @@ class StreamManagerTest(unittest.TestCase):
         Test correct initialization and setup of factory observers.
         """
         sm = self.streamManager
-        self.assertIdentical(None, sm.xmlstream)
+        self.assertIs(None, sm.xmlstream)
         self.assertEqual([], sm.handlers)
         self.assertEqual(sm._connected,
                           sm.factory.callbacks['//event/stream/connected'])
@@ -1083,8 +1083,8 @@ class StreamManagerTest(unittest.TestCase):
         handler.setHandlerParent(sm)
         xs = xmlstream.XmlStream(xmlstream.Authenticator())
         sm._connected(xs)
-        self.assertIdentical(None, xs.rawDataInFn)
-        self.assertIdentical(None, xs.rawDataOutFn)
+        self.assertIs(None, xs.rawDataInFn)
+        self.assertIs(None, xs.rawDataOutFn)
 
 
     def test_connectedLogTrafficTrue(self):
@@ -1097,8 +1097,8 @@ class StreamManagerTest(unittest.TestCase):
         handler.setHandlerParent(sm)
         xs = xmlstream.XmlStream(xmlstream.Authenticator())
         sm._connected(xs)
-        self.assertNotIdentical(None, xs.rawDataInFn)
-        self.assertNotIdentical(None, xs.rawDataOutFn)
+        self.assertIsNot(None, xs.rawDataInFn)
+        self.assertIsNot(None, xs.rawDataOutFn)
 
 
     def test_authd(self):
@@ -1328,5 +1328,5 @@ class XmlStreamServerFactoryTest(GenericXmlStreamFactoryTestsMixin):
         """
         xs1 = self.factory.buildProtocol(None)
         xs2 = self.factory.buildProtocol(None)
-        self.assertNotIdentical(xs1, xs2)
-        self.assertNotIdentical(xs1.authenticator, xs2.authenticator)
+        self.assertIsNot(xs1, xs2)
+        self.assertIsNot(xs1.authenticator, xs2.authenticator)
diff --git a/twisted/words/test/test_jabberxmppstringprep.py b/twisted/words/test/test_jabberxmppstringprep.py
index 4b25c0b..ad46d3c 100644
--- a/twisted/words/test/test_jabberxmppstringprep.py
+++ b/twisted/words/test/test_jabberxmppstringprep.py
@@ -24,7 +24,7 @@ class XMPPStringPrepTest(unittest.TestCase):
 
     def testResourcePrep(self):
         self.assertEqual(resourceprep.prepare(u'resource'), u'resource')
-        self.assertNotEquals(resourceprep.prepare(u'Resource'), u'resource')
+        self.assertNotEqual(resourceprep.prepare(u'Resource'), u'resource')
         self.assertEqual(resourceprep.prepare(u' '), u' ')
 
         if crippled:
diff --git a/twisted/words/test/test_msn.py b/twisted/words/test/test_msn.py
index ece580f..445004e 100644
--- a/twisted/words/test/test_msn.py
+++ b/twisted/words/test/test_msn.py
@@ -79,7 +79,7 @@ class PassportTests(unittest.TestCase):
                                     "ru=http://messenger.msn.com"
         }
         self._doLoginTest('HTTP/1.1 200 OK\r\n', headers)
-        self.failUnless(self.result[0] == (msn.LOGIN_SUCCESS, 'somekey'))
+        self.assertTrue(self.result[0] == (msn.LOGIN_SUCCESS, 'somekey'))
 
     def testPassportLoginFailure(self):
         headers = {
@@ -89,7 +89,7 @@ class PassportTests(unittest.TestCase):
                                  'cbtxt=the%20error%20message'
         }
         self._doLoginTest('HTTP/1.1 401 Unauthorized\r\n', headers)
-        self.failUnless(self.result[0] == (msn.LOGIN_FAILURE, 'the error message'))
+        self.assertTrue(self.result[0] == (msn.LOGIN_FAILURE, 'the error message'))
 
     def testPassportLoginRedirect(self):
         headers = {
@@ -98,7 +98,7 @@ class PassportTests(unittest.TestCase):
             'Location'            : 'https://newlogin.host.com/'
         }
         self._doLoginTest('HTTP/1.1 302 Found\r\n', headers)
-        self.failUnless(self.result[0] == (msn.LOGIN_REDIRECT, 'https://newlogin.host.com/', 'a'))
+        self.assertTrue(self.result[0] == (msn.LOGIN_REDIRECT, 'https://newlogin.host.com/', 'a'))
 
 
 if msn is not None:
@@ -284,7 +284,7 @@ class NotificationTests(unittest.TestCase):
 
     def testLogin(self):
         self.client.lineReceived('USR 1 OK foo@bar.com Test%20Screen%20Name 1 0')
-        self.failUnless((self.client.state == 'LOGIN'), msg='Failed to detect successful login')
+        self.assertTrue((self.client.state == 'LOGIN'), msg='Failed to detect successful login')
 
 
     def test_loginWithoutSSLFailure(self):
@@ -313,7 +313,7 @@ class NotificationTests(unittest.TestCase):
         m += 'preferredEmail: foo@bar.com\r\ncountry: AU\r\nPostalCode: 90210\r\nGender: M\r\nKid: 0\r\nAge:\r\nsid: 400\r\n'
         m += 'kv: 2\r\nMSPAuth: 2CACCBCCADMoV8ORoz64BVwmjtksIg!kmR!Rj5tBBqEaW9hc4YnPHSOQ$$\r\n\r\n'
         map(self.client.lineReceived, m.split('\r\n')[:-1])
-        self.failUnless((self.client.state == 'PROFILE'), msg='Failed to detect initial profile')
+        self.assertTrue((self.client.state == 'PROFILE'), msg='Failed to detect initial profile')
 
     def testStatus(self):
         t = [('ILN 1 AWY foo@bar.com Test%20Screen%20Name 0', 'INITSTATUS', 'Failed to detect initial status report'),
@@ -322,7 +322,7 @@ class NotificationTests(unittest.TestCase):
              ('CHG 1 HDN 0', 'MYSTATUS', 'Failed to detect my status changing')]
         for i in t:
             self.client.lineReceived(i[0])
-            self.failUnless((self.client.state == i[1]), msg=i[2])
+            self.assertTrue((self.client.state == i[1]), msg=i[2])
 
     def testListSync(self):
         # currently this test does not take into account the fact
@@ -341,11 +341,11 @@ class NotificationTests(unittest.TestCase):
         map(self.client.lineReceived, lines)
         contacts = self.client.factory.contacts
         contact = contacts.getContact('userHandle@email.com')
-        self.failUnless(contacts.version == 100, "Invalid contact list version")
-        self.failUnless(contact.screenName == 'Some Name', "Invalid screen-name for user")
-        self.failUnless(contacts.groups == {0 : 'Other Contacts'}, "Did not get proper group list")
-        self.failUnless(contact.groups == [0] and contact.lists == 11, "Invalid contact list/group info")
-        self.failUnless(self.client.state == 'GOTLIST', "Failed to call list sync handler")
+        self.assertTrue(contacts.version == 100, "Invalid contact list version")
+        self.assertTrue(contact.screenName == 'Some Name', "Invalid screen-name for user")
+        self.assertTrue(contacts.groups == {0 : 'Other Contacts'}, "Did not get proper group list")
+        self.assertTrue(contact.groups == [0] and contact.lists == 11, "Invalid contact list/group info")
+        self.assertTrue(self.client.state == 'GOTLIST', "Failed to call list sync handler")
 
     def testAsyncPhoneChange(self):
         c = msn.MSNContact(userHandle='userHandle@email.com')
@@ -354,9 +354,9 @@ class NotificationTests(unittest.TestCase):
         self.client.makeConnection(StringTransport())
         self.client.lineReceived("BPR 101 userHandle@email.com PHH 123%20456")
         c = self.client.factory.contacts.getContact('userHandle@email.com')
-        self.failUnless(self.client.state == 'GOTPHONE', "Did not fire phone change callback")
-        self.failUnless(c.homePhone == '123 456', "Did not update the contact's phone number")
-        self.failUnless(self.client.factory.contacts.version == 101, "Did not update list version")
+        self.assertTrue(self.client.state == 'GOTPHONE', "Did not fire phone change callback")
+        self.assertTrue(c.homePhone == '123 456', "Did not update the contact's phone number")
+        self.assertTrue(self.client.factory.contacts.version == 101, "Did not update list version")
 
     def testLateBPR(self):
         """
@@ -376,7 +376,7 @@ class NotificationTests(unittest.TestCase):
         ]
         map(self.client.lineReceived, lines)
         contact = self.client.factory.contacts.getContact('userHandle@email.com')
-        self.failUnless(contact.homePhone == '123 456', "Did not update contact's phone number")
+        self.assertTrue(contact.homePhone == '123 456', "Did not update contact's phone number")
 
     def testUserRemovedMe(self):
         self.client.factory.contacts = msn.MSNContactList()
@@ -384,16 +384,16 @@ class NotificationTests(unittest.TestCase):
         contact.addToList(msn.REVERSE_LIST)
         self.client.factory.contacts.addContact(contact)
         self.client.lineReceived("REM 0 RL 100 foo@foo.com")
-        self.failUnless(self.client.state == 'USERREMOVEDME', "Failed to remove user from reverse list")
+        self.assertTrue(self.client.state == 'USERREMOVEDME', "Failed to remove user from reverse list")
 
     def testUserAddedMe(self):
         self.client.factory.contacts = msn.MSNContactList()
         self.client.lineReceived("ADD 0 RL 100 foo@foo.com Screen%20Name")
-        self.failUnless(self.client.state == 'USERADDEDME', "Failed to add user to reverse lise")
+        self.assertTrue(self.client.state == 'USERADDEDME', "Failed to add user to reverse lise")
 
     def testAsyncSwitchboardInvitation(self):
         self.client.lineReceived("RNG 1234 192.168.1.1:1863 CKI 123.456 foo@foo.com Screen%20Name")
-        self.failUnless(self.client.state == "SBINVITED")
+        self.assertTrue(self.client.state == "SBINVITED")
 
     def testCommandFailed(self):
         """
@@ -428,7 +428,7 @@ class MessageHandlingTests(unittest.TestCase):
         m.setHeader('Content-Type', 'text/x-msmsgscontrol')
         m.setHeader('TypingUser', 'foo@bar')
         self.client.checkMessage(m)
-        self.failUnless((self.client.state == 'TYPING'), msg='Failed to detect typing notification')
+        self.assertTrue((self.client.state == 'TYPING'), msg='Failed to detect typing notification')
 
     def testFileInvitation(self, lazyClient=False):
         m = msn.MSNMessage()
@@ -441,7 +441,7 @@ class MessageHandlingTests(unittest.TestCase):
         m.message += 'Application-File: foobar.ext\r\n'
         m.message += 'Application-FileSize: 31337\r\n\r\n'
         self.client.checkMessage(m)
-        self.failUnless((self.client.state == 'INVITATION'), msg='Failed to detect file transfer invitation')
+        self.assertTrue((self.client.state == 'INVITATION'), msg='Failed to detect file transfer invitation')
 
     def testFileInvitationMissingGUID(self):
         return self.testFileInvitation(True)
@@ -455,7 +455,7 @@ class MessageHandlingTests(unittest.TestCase):
         m.message += 'Invitation-Command: ACCEPT\r\n'
         m.message += 'Invitation-Cookie: 1234\r\n\r\n'
         self.client.checkMessage(m)
-        self.failUnless((self.client.state == 'RESPONSE'), msg='Failed to detect file transfer response')
+        self.assertTrue((self.client.state == 'RESPONSE'), msg='Failed to detect file transfer response')
 
     def testFileInfo(self):
         d = Deferred()
@@ -469,7 +469,7 @@ class MessageHandlingTests(unittest.TestCase):
         m.message += 'Port: 6891\r\n'
         m.message += 'AuthCookie: 4321\r\n\r\n'
         self.client.checkMessage(m)
-        self.failUnless((self.client.state == 'INFO'), msg='Failed to detect file transfer info')
+        self.assertTrue((self.client.state == 'INFO'), msg='Failed to detect file transfer info')
 
     def fileResponse(self, (accept, cookie, info)):
         if accept and cookie == 1234: self.client.state = 'RESPONSE'
diff --git a/twisted/words/test/test_service.py b/twisted/words/test/test_service.py
index f8152ce..82fbd5e 100644
--- a/twisted/words/test/test_service.py
+++ b/twisted/words/test/test_service.py
@@ -52,7 +52,7 @@ class RealmTestCase(unittest.TestCase):
         d = wFD(get(u"new" + kind.lower()))
         yield d
         newp = d.getResult()
-        self.assertIdentical(p, newp)
+        self.assertIs(p, newp)
 
         # Getting a non-existent user should fail if createUserOnRequest is False
         setattr(realm, flag, False)
@@ -82,13 +82,13 @@ class RealmTestCase(unittest.TestCase):
         d = wFD(realm.getUser(u"testuser"))
         yield d
         retrieved = d.getResult()
-        self.assertIdentical(user, retrieved)
+        self.assertIs(user, retrieved)
 
         # Make sure looking up the user also returns the same object
         d = wFD(realm.lookupUser(u"testuser"))
         yield d
         lookedUp = d.getResult()
-        self.assertIdentical(retrieved, lookedUp)
+        self.assertIs(retrieved, lookedUp)
 
         # Make sure looking up a user who does not exist fails
         d = wFD(realm.lookupUser(u"nosuchuser"))
@@ -105,19 +105,19 @@ class RealmTestCase(unittest.TestCase):
         d = wFD(realm.addUser(p))
         yield d
         user = d.getResult()
-        self.assertIdentical(p, user)
+        self.assertIs(p, user)
 
         # Make sure getting that user returns the same object
         d = wFD(realm.getUser(u"testuser"))
         yield d
         retrieved = d.getResult()
-        self.assertIdentical(user, retrieved)
+        self.assertIs(user, retrieved)
 
         # Make sure looking up that user returns the same object
         d = wFD(realm.lookupUser(u"testuser"))
         yield d
         lookedUp = d.getResult()
-        self.assertIdentical(retrieved, lookedUp)
+        self.assertIs(retrieved, lookedUp)
     testUserAddition = dG(testUserAddition)
 
 
@@ -132,7 +132,7 @@ class RealmTestCase(unittest.TestCase):
         yield d
         retrieved = d.getResult()
 
-        self.assertIdentical(group, retrieved)
+        self.assertIs(group, retrieved)
 
         d = wFD(realm.getGroup(u"nosuchgroup"))
         yield d
@@ -152,7 +152,7 @@ class RealmTestCase(unittest.TestCase):
         yield d
         group = d.getResult()
 
-        self.assertIdentical(p, group)
+        self.assertIs(p, group)
     testGroupAddition = dG(testGroupAddition)
 
 
@@ -269,7 +269,7 @@ class IRCProtocolTestCase(unittest.TestCase):
         for (prefix, command, args) in response:
             if command in expected:
                 expected.remove(command)
-        self.failIf(expected, "Missing responses for %r" % (expected,))
+        self.assertFalse(expected, "Missing responses for %r" % (expected,))
 
 
     def _login(self, user, nick, password=None):
@@ -612,7 +612,7 @@ class IRCProtocolTestCase(unittest.TestCase):
         response = self._response(user)
         event = self._response(other)
 
-        self.failIf(response)
+        self.assertFalse(response)
         self.assertEqual(len(event), 1)
         self.assertEqual(event[0][0], 'useruser!useruser@realmname')
         self.assertEqual(event[0][1], 'PRIVMSG', -1)
@@ -637,7 +637,7 @@ class IRCProtocolTestCase(unittest.TestCase):
         response = self._response(user)
         event = self._response(other)
 
-        self.failIf(response)
+        self.assertFalse(response)
         self.assertEqual(len(event), 1)
         self.assertEqual(event[0][0], 'useruser!useruser@realmname')
         self.assertEqual(event[0][1], 'PRIVMSG')
@@ -757,8 +757,8 @@ class IRCProtocolTestCase(unittest.TestCase):
         users[0].write('WHO #groupname\r\n')
 
         r = self._response(users[0])
-        self.failIf(self._response(users[1]))
-        self.failIf(self._response(users[2]))
+        self.assertFalse(self._response(users[1]))
+        self.assertFalse(self._response(users[2]))
 
         wantusers = ['userone', 'usertwo', 'userthree']
         for (prefix, code, stuff) in r[:-1]:
@@ -768,13 +768,13 @@ class IRCProtocolTestCase(unittest.TestCase):
             (myname, group, theirname, theirhost, theirserver, theirnick, flag, extra) = stuff
             self.assertEqual(myname, 'userone')
             self.assertEqual(group, '#groupname')
-            self.failUnless(theirname in wantusers)
+            self.assertTrue(theirname in wantusers)
             self.assertEqual(theirhost, 'realmname')
             self.assertEqual(theirserver, 'realmname')
             wantusers.remove(theirnick)
             self.assertEqual(flag, 'H')
             self.assertEqual(extra, '0 ' + theirnick)
-        self.failIf(wantusers)
+        self.assertFalse(wantusers)
 
         prefix, code, stuff = r[-1]
         self.assertEqual(prefix, 'realmname')
diff --git a/twisted/words/test/test_xmlstream.py b/twisted/words/test/test_xmlstream.py
index 4eb2446..a6e6d9a 100644
--- a/twisted/words/test/test_xmlstream.py
+++ b/twisted/words/test/test_xmlstream.py
@@ -199,7 +199,7 @@ class GenericXmlStreamFactoryTestsMixin(BootstrapMixinTest):
         The protocol factory is saved in the protocol.
         """
         xs = self.factory.buildProtocol(None)
-        self.assertIdentical(self.factory, xs.factory)
+        self.assertIs(self.factory, xs.factory)
 
 
 
