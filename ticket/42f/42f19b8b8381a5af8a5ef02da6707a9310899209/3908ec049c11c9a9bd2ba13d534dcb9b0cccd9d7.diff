Index: twisted/conch/test/test_recvline.py
===================================================================
--- twisted/conch/test/test_recvline.py	(revision 17635)
+++ twisted/conch/test/test_recvline.py	(working copy)
@@ -515,8 +515,9 @@
         # handle bytes we send to the child process.
         exe = sys.executable
         module = stdio.__file__
-        args = ["python2.3", module, reflect.qual(self.serverProtocol)]
-        env = {"PYTHONPATH": os.pathsep.join(sys.path)}
+        args = [exe, module, reflect.qual(self.serverProtocol)]
+        env = os.environ.copy()
+        env.update({"PYTHONPATH": os.pathsep.join(sys.path)})
 
         from twisted.internet import reactor
         clientTransport = reactor.spawnProcess(processClient, exe, args,
Index: twisted/test/test_process.py
===================================================================
--- twisted/test/test_process.py	(revision 17635)
+++ twisted/test/test_process.py	(working copy)
@@ -184,7 +184,8 @@
         scriptPath = util.sibpath(__file__, "process_twisted.py")
         p = Accumulator()
         d = p.endedDeferred = defer.Deferred()
-        env = {"PYTHONPATH": os.pathsep.join(sys.path)}
+        env = os.environ.copy()
+        env.update({"PYTHONPATH": os.pathsep.join(sys.path)})
         reactor.spawnProcess(p, exe, [exe, "-u", scriptPath], env=env,
                              path=None, usePTY=self.usePTY)
         p.transport.write("hello, world")
Index: twisted/test/test_unix.py
===================================================================
--- twisted/test/test_unix.py	(revision 17635)
+++ twisted/test/test_unix.py	(working copy)
@@ -6,8 +6,7 @@
 import stat, os, sys
 
 from twisted.internet import interfaces, reactor, protocol, error, address, defer, utils
-from twisted.python import lockfile, failure
-from twisted.protocols import loopback
+from twisted.python import lockfile
 from twisted.trial import unittest
 
 
@@ -145,7 +144,8 @@
         self.filename = self.mktemp()
         source = ("from twisted.internet import protocol, reactor\n"
                   "reactor.listenUNIX(%r, protocol.ServerFactory(), wantPID=True)\n") % (self.filename,)
-        env = {'PYTHONPATH': os.pathsep.join(sys.path)}
+        env = os.environ.copy()
+        env.update({'PYTHONPATH': os.pathsep.join(sys.path)})
 
         d = utils.getProcessOutput(sys.executable, ("-u", "-c", source), env=env)
         d.addCallback(callback)
Index: twisted/test/test_iutils.py
===================================================================
--- twisted/test/test_iutils.py	(revision 17635)
+++ twisted/test/test_iutils.py	(working copy)
@@ -33,7 +33,7 @@
         scriptFile = self.makeSourceFile([
             'print "hello world"'
             ])
-        d = utils.getProcessOutput(sys.executable, ['-u', scriptFile])
+        d = utils.getProcessOutput(sys.executable, ['-u', scriptFile], env=os.environ)
         return d.addCallback(self.assertEquals, "hello world\n")
 
     def testOutputWithErrorIgnored(self):
@@ -44,7 +44,7 @@
             'sys.stderr.write("hello world\\n")'
             ])
 
-        d = utils.getProcessOutput(exe, ['-u', scriptFile], errortoo=0)
+        d = utils.getProcessOutput(exe, ['-u', scriptFile], errortoo=0, env=os.environ)
         return self.assertFailure(d, IOError)
 
     def testOutputWithErrorCollected(self):
@@ -55,7 +55,7 @@
             'sys.stderr.write("hello world\\n")'
             ])
 
-        d = utils.getProcessOutput(exe, ['-u', scriptFile], errortoo=1)
+        d = utils.getProcessOutput(exe, ['-u', scriptFile], errortoo=1, env=os.environ)
         return d.addCallback(self.assertEquals, "hello world" + os.linesep)
 
     def testValue(self):
@@ -65,7 +65,7 @@
             "sys.exit(1)"
             ])
 
-        d = utils.getProcessValue(exe, ['-u', scriptFile])
+        d = utils.getProcessValue(exe, ['-u', scriptFile], env=os.environ)
         return d.addCallback(self.assertEquals, 1)
 
     def testOutputAndValue(self):
@@ -81,7 +81,7 @@
             self.assertEquals(out, "hello world!" + os.linesep)
             self.assertEquals(err, "goodbye world!" + os.linesep)
             self.assertEquals(code, 1)
-        d = utils.getProcessOutputAndValue(exe, [scriptFile])
+        d = utils.getProcessOutputAndValue(exe, [scriptFile], env=os.environ)
         return d.addCallback(gotOutputAndValue)
 
     def testOutputSignal(self):
@@ -104,7 +104,7 @@
             self.assertEquals(err, "stderr bytes" + os.linesep)
             self.assertEquals(sig, signal.SIGKILL)
 
-        d = utils.getProcessOutputAndValue(exe, ['-u', scriptFile])
+        d = utils.getProcessOutputAndValue(exe, ['-u', scriptFile], env=os.environ)
         return d.addErrback(gotOutputAndValue)
 
 
