diff --git setup3.py setup3.py
index ca27cbe..505c3e6 100644
--- setup3.py
+++ setup3.py
@@ -76,6 +76,7 @@ modules = [
     "twisted.python.filepath",
     "twisted.python.lockfile",
     "twisted.python.log",
+    "twisted.python.logfile",
     "twisted.python.monkey",
     "twisted.python.randbytes",
     "twisted.python._reflectpy3",
@@ -168,6 +169,7 @@ testModules = [
     "twisted.test.test_iutils",
     "twisted.test.test_lockfile",
     "twisted.test.test_log",
+    "twisted.test.test_logfile",
     "twisted.test.test_loopback",
     "twisted.test.test_monkey",
     "twisted.test.test_paths",
diff --git twisted/python/logfile.py twisted/python/logfile.py
index f652271..1c9a633 100644
--- twisted/python/logfile.py
+++ twisted/python/logfile.py
@@ -39,6 +39,12 @@ class BaseLogFile:
             self.defaultMode = defaultMode
         self._openFile()
 
+    def __del__(self):
+        try:
+            self.close()
+        except: # File might be already closed
+            pass
+
     def fromFullPath(cls, filename, *args, **kwargs):
         """
         Construct a log file from a full file path.
@@ -61,18 +67,18 @@ class BaseLogFile:
         """
         self.closed = False
         if os.path.exists(self.path):
-            self._file = file(self.path, "r+", 1)
+            self._file = open(self.path, "r+", 1)
             self._file.seek(0, 2)
         else:
             if self.defaultMode is not None:
                 # Set the lowest permissions
-                oldUmask = os.umask(0777)
+                oldUmask = os.umask(0o777)
                 try:
-                    self._file = file(self.path, "w+", 1)
+                    self._file = open(self.path, "w+", 1)
                 finally:
                     os.umask(oldUmask)
             else:
-                self._file = file(self.path, "w+", 1)
+                self._file = open(self.path, "w+", 1)
         if self.defaultMode is not None:
             try:
                 os.chmod(self.path, self.defaultMode)
@@ -178,7 +184,7 @@ class LogFile(BaseLogFile):
         """
         filename = "%s.%d" % (self.path, identifier)
         if not os.path.exists(filename):
-            raise ValueError, "no such logfile exists"
+            raise ValueError("no such logfile exists")
         return LogReader(filename)
 
     def write(self, data):
@@ -266,7 +272,7 @@ class DailyLogFile(BaseLogFile):
             return self.getCurrentLog()
         filename = "%s.%s" % (self.path, self.suffix(identifier))
         if not os.path.exists(filename):
-            raise ValueError, "no such logfile exists"
+            raise ValueError("no such logfile exists")
         return LogReader(filename)
 
     def write(self, data):
@@ -304,7 +310,10 @@ class LogReader:
     """Read from a log file."""
 
     def __init__(self, name):
-        self._file = file(name, "r")
+        self._file = open(name, "r")
+
+    def __del__(self):
+        self.close()
 
     def readLines(self, lines=10):
         """Read a list of lines from the log file.
diff --git twisted/test/test_logfile.py twisted/test/test_logfile.py
index e7db238..e456e2b 100644
--- twisted/test/test_logfile.py
+++ twisted/test/test_logfile.py
@@ -1,7 +1,8 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
-import os, time, stat, errno
+import datetime
+import os, time, stat, errno, pickle
 
 from twisted.trial import unittest
 from twisted.python import logfile, runtime
@@ -24,9 +25,18 @@ class LogFileTestCase(unittest.TestCase):
         Restore back write rights on created paths: if tests modified the
         rights, that will allow the paths to be removed easily afterwards.
         """
-        os.chmod(self.dir, 0777)
+        os.chmod(self.dir, 0o777)
         if os.path.exists(self.path):
-            os.chmod(self.path, 0777)
+            os.chmod(self.path, 0o777)
+
+
+    def test_abstractShouldRotate(self):
+        """
+        L{BaseLogFile.shouldRotate} is abstract and must be implemented by
+        subclass.
+        """
+        log = logfile.BaseLogFile(self.name, self.dir)
+        self.assertRaises(NotImplementedError, log.shouldRotate)
 
 
     def testWriting(self):
@@ -62,7 +72,6 @@ class LogFileTestCase(unittest.TestCase):
         log.rotate()
         self.assert_(os.path.exists("%s.3" % self.path))
         self.assert_(not os.path.exists("%s.4" % self.path))
-        log.close()
 
         self.assertEqual(log.listLogs(), [1, 2, 3])
 
@@ -80,7 +89,6 @@ class LogFileTestCase(unittest.TestCase):
         f = log._file
         f.seek(0, 0)
         self.assertEqual(f.read(), "0123456789abc")
-        log.close()
 
     def testLogReader(self):
         log = logfile.LogFile(self.name, self.dir)
@@ -96,11 +104,9 @@ class LogFileTestCase(unittest.TestCase):
         reader._file.seek(0)
         self.assertEqual(reader.readLines(), ["ghi\n"])
         self.assertEqual(reader.readLines(), [])
-        reader.close()
         reader = log.getLog(1)
         self.assertEqual(reader.readLines(), ["abc\n", "def\n"])
         self.assertEqual(reader.readLines(), [])
-        reader.close()
 
         # check getting illegal log readers
         self.assertRaises(ValueError, log.getLog, 2)
@@ -113,18 +119,16 @@ class LogFileTestCase(unittest.TestCase):
         reader._file.seek(0)
         self.assertEqual(reader.readLines(), ["ghi\n"])
         self.assertEqual(reader.readLines(), [])
-        reader.close()
         reader = log.getLog(2)
         self.assertEqual(reader.readLines(), ["abc\n", "def\n"])
         self.assertEqual(reader.readLines(), [])
-        reader.close()
 
     def testModePreservation(self):
         """
         Check rotated files have same permissions as original.
         """
         f = open(self.path, "w").close()
-        os.chmod(self.path, 0707)
+        os.chmod(self.path, 0o707)
         mode = os.stat(self.path)[stat.ST_MODE]
         log = logfile.LogFile(self.name, self.dir)
         log.write("abc")
@@ -140,7 +144,7 @@ class LogFileTestCase(unittest.TestCase):
         log.write("abc")
 
         # change permissions so rotation would fail
-        os.chmod(self.dir, 0555)
+        os.chmod(self.dir, 0o555)
 
         # if this succeeds, chmod doesn't restrict us, so we can't
         # do the test
@@ -149,7 +153,6 @@ class LogFileTestCase(unittest.TestCase):
         except (OSError, IOError):
             pass
         else:
-            f.close()
             return
 
         log.rotate() # this should not fail
@@ -161,7 +164,6 @@ class LogFileTestCase(unittest.TestCase):
         self.assertEqual(f.tell(), 6)
         f.seek(0, 0)
         self.assertEqual(f.read(), "abcdef")
-        log.close()
 
 
     def test_maxNumberOfLog(self):
@@ -180,18 +182,20 @@ class LogFileTestCase(unittest.TestCase):
 
         log.write("4" * 11)
         self.failUnless(os.path.exists("%s.3" % self.path))
-        self.assertEqual(file("%s.3" % self.path).read(), "1" * 11)
+        with open("%s.3" % self.path) as fp:
+            self.assertEqual(fp.read(), "1" * 11)
 
         log.write("5" * 11)
-        self.assertEqual(file("%s.3" % self.path).read(), "2" * 11)
+        with open("%s.3" % self.path) as fp:
+            self.assertEqual(fp.read(), "2" * 11)
         self.failUnless(not os.path.exists("%s.4" % self.path))
 
     def test_fromFullPath(self):
         """
         Test the fromFullPath method.
         """
-        log1 = logfile.LogFile(self.name, self.dir, 10, defaultMode=0777)
-        log2 = logfile.LogFile.fromFullPath(self.path, 10, defaultMode=0777)
+        log1 = logfile.LogFile(self.name, self.dir, 10, defaultMode=0o777)
+        log2 = logfile.LogFile.fromFullPath(self.path, 10, defaultMode=0o777)
         self.assertEqual(log1.name, log2.name)
         self.assertEqual(os.path.abspath(log1.path), log2.path)
         self.assertEqual(log1.rotateLength, log2.rotateLength)
@@ -202,8 +206,8 @@ class LogFileTestCase(unittest.TestCase):
         Test the default permission of the log file: if the file exist, it
         should keep the permission.
         """
-        f = file(self.path, "w")
-        os.chmod(self.path, 0707)
+        f = open(self.path, "w")
+        os.chmod(self.path, 0o707)
         currentMode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
         f.close()
         log1 = logfile.LogFile(self.name, self.dir)
@@ -215,13 +219,13 @@ class LogFileTestCase(unittest.TestCase):
         """
         Test specifying the permissions used on the log file.
         """
-        log1 = logfile.LogFile(self.name, self.dir, defaultMode=0066)
+        log1 = logfile.LogFile(self.name, self.dir, defaultMode=0o066)
         mode = stat.S_IMODE(os.stat(self.path)[stat.ST_MODE])
         if runtime.platform.isWindows():
             # The only thing we can get here is global read-only
-            self.assertEqual(mode, 0444)
+            self.assertEqual(mode, 0o444)
         else:
-            self.assertEqual(mode, 0066)
+            self.assertEqual(mode, 0o066)
 
 
     def test_reopen(self):
@@ -257,6 +261,58 @@ class LogFileTestCase(unittest.TestCase):
         self.assertEqual(e.errno, errno.ENOENT)
 
 
+    def test_persistence(self):
+        """
+        L{LogFile} objects can be pickled and unpickled, which preserves all the
+        various attributes of the log file.
+        """
+        rotateLength = 12345
+        defaultMode = 0o642
+        maxRotatedFiles = 42
+
+        log = logfile.LogFile(self.name, self.dir,
+                              rotateLength, defaultMode,
+                              maxRotatedFiles)
+        log.write("123")
+        log.close()
+
+        copy = pickle.loads(pickle.dumps(log))
+
+        # Check that the unpickled log is the same as the original one.
+        self.assertEqual(self.name, copy.name)
+        self.assertEqual(self.dir, copy.directory)
+        self.assertEqual(self.path, copy.path)
+        self.assertEqual(rotateLength, copy.rotateLength)
+        self.assertEqual(defaultMode, copy.defaultMode)
+        self.assertEqual(maxRotatedFiles, copy.maxRotatedFiles)
+        self.assertEqual(log.size, copy.size)
+
+
+    def test_cantChangeFileMode(self):
+        """
+        Opening a L{LogFile} which can be read and write but whose mode can't
+        be changed doesn't trigger an error.
+        """
+        log = logfile.LogFile("null", "/dev", defaultMode=0o555)
+
+        self.assertEqual(log.path, "/dev/null")
+        self.assertEqual(log.defaultMode, 0o555)
+
+
+    def test_listLogsWithBadlyNamedFiles(self):
+        """
+        L{LogFile.listLogs} doesn't choke if it encounters a file with an
+        unexpected name.
+        """
+        log = logfile.LogFile(self.name, self.dir)
+
+        with open("%s.1" % log.path, "w") as fp:
+            fp.write("123")
+        with open("%s.bad-file" % log.path, "w") as fp:
+            fp.write("123")
+
+        self.assertEqual([1], log.listLogs())
+
 
 class RiggedDailyLogFile(logfile.DailyLogFile):
     _clock = 0.0
@@ -318,3 +374,79 @@ class DailyLogFileTestCase(unittest.TestCase):
         log.write("3")
         self.assert_(not os.path.exists(days[2]))
 
+    def test_getLog(self):
+        log = RiggedDailyLogFile(self.name, self.dir)
+        log.write("1\n")
+        log.write("2\n")
+        log.write("3\n")
+
+        r = log.getLog(0.0)
+        self.assertEqual(["1\n", "2\n", "3\n"], r.readLines())
+
+        self.assertRaises(ValueError, log.getLog, 86400)
+
+        log._clock = 86401 # New day
+        log.rotate()
+        r = log.getLog(0) # We get the previous log
+        self.assertEqual(["1\n", "2\n", "3\n"], r.readLines())
+
+
+    def test_rotateAlreadyExists(self):
+        """
+        L{DailyLogFile.rotate} doesn't do anything if they new log file already
+        exists on the disk.
+        """
+        log = RiggedDailyLogFile(self.name, self.dir)
+        # Build a new file with the same name as the file which would be created
+        # if the log file is to be rotated.
+        with open("%s.%s" % (log.path, log.suffix(log.lastDate)), "w") as fp:
+            fp.write("123")
+        previous_file = log._file
+        log.rotate()
+        self.assertEqual(previous_file, log._file)
+
+
+    def test_toDate(self):
+        """
+        Test that L{DailyLogFile.toDate} converts its timestamp argument to a
+        time tuple (year, month, day).
+        """
+        log = logfile.DailyLogFile(self.name, self.dir)
+
+        timestamp = time.mktime((2000, 1, 1, 0, 0, 0, 0, 0, 0))
+        self.assertEqual((2000, 1, 1), log.toDate(timestamp))
+
+
+    def test_toDateDefaultToday(self):
+        """
+        Test that L{DailyLogFile.toDate} returns today's date by default.
+        """
+        log = logfile.DailyLogFile(self.name, self.dir)
+
+        # XXX: this might break if by chance, current's date changes between the
+        # two functions runs.
+        today = datetime.date.today()
+        log_date = log.toDate()
+
+        self.assertEqual(today.timetuple()[:3], log_date)
+
+
+    def test_persistence(self):
+        """
+        L{DailyLogFile} objects can be pickled and unpickled, which preserves
+        all the various attributes of the log file.
+        """
+        defaultMode = 0o642
+
+        log = logfile.DailyLogFile(self.name, self.dir,
+                                   defaultMode)
+        log.write("123")
+
+        # Check that the unpickled log is the same as the original one.
+        copy = pickle.loads(pickle.dumps(log))
+
+        self.assertEqual(self.name, copy.name)
+        self.assertEqual(self.dir, copy.directory)
+        self.assertEqual(self.path, copy.path)
+        self.assertEqual(defaultMode, copy.defaultMode)
+        self.assertEqual(log.lastDate, copy.lastDate)
