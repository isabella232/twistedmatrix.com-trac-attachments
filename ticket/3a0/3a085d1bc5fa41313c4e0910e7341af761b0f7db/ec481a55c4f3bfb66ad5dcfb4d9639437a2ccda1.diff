Index: twisted/spread/pb.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/pb.py,v
retrieving revision 1.147
diff -u -r1.147 pb.py
--- twisted/spread/pb.py	30 Sep 2003 19:24:55 -0000	1.147
+++ twisted/spread/pb.py	1 Oct 2003 11:25:10 -0000
@@ -402,6 +402,8 @@
     L{twisted.python.failure.Failure} for serialization.
     """
 
+    unsafeTracebacks = 0
+
     def getStateToCopy(self):
         #state = self.__getstate__()
         state = self.__dict__.copy()
@@ -409,13 +411,16 @@
         state['frames'] = []
         state['stack'] = []
         if isinstance(self.value, failure.Failure):
-            state['value'] = failure2Copyable(self.value)
+            state['value'] = failure2Copyable(self.value, self.unsafeTracebacks)
         else:
             state['value'] = str(self.value) # Exception instance
         state['type'] = str(self.type) # Exception class
-        io = StringIO.StringIO()
-        self.printTraceback(io)
-        state['traceback'] = io.getvalue()
+        if self.unsafeTracebacks:
+            io = StringIO.StringIO()
+            self.printTraceback(io)
+            state['traceback'] = io.getvalue()
+        else:
+            state['traceback'] = 'Traceback unavailable\n'
         return state
 
 class CopiedFailure(RemoteCopy, failure.Failure):
@@ -429,8 +434,9 @@
 
 setUnjellyableForClass(CopyableFailure, CopiedFailure)
 
-def failure2Copyable(fail):
+def failure2Copyable(fail, unsafeTracebacks=0):
     f = CopyableFailure()
+    f.unsafeTracebacks = unsafeTracebacks
     f.__dict__ = fail.__dict__
     return f
 
@@ -441,6 +447,7 @@
     version = 6
     username = None
     factory = None
+    unsafeTracebacks = 0
     
     def __init__(self, isClient=1, security=globalSecurity):
         banana.Banana.__init__(self, isClient)
@@ -884,7 +891,7 @@
         """(internal) Send an error for a previously sent message.
         """
         if not isinstance(fail, CopyableFailure) and isinstance(fail, failure.Failure):
-            fail = failure2Copyable(fail)
+            fail = failure2Copyable(fail, self.unsafeTracebacks)
         self.sendCall("error", requestID, self.serialize(fail))
 
     def proto_error(self, requestID, fail):
