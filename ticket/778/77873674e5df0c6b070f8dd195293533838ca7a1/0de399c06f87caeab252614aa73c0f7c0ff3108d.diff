Index: ftp.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/ftp.py,v
retrieving revision 1.98
diff -u -d -r1.98 ftp.py
--- ftp.py	24 Nov 2003 15:18:09 -0000	1.98
+++ ftp.py	10 Dec 2003 07:07:28 -0000
@@ -2006,13 +2006,15 @@
 
     It populates the instance attribute self.files, which is a list containing
     dicts with the following keys (examples from the above line):
-        - filetype: e.g. 'd' for directories, or '-' for an ordinary file
-        - perms:    e.g. 'rw-r--r--'
-        - owner:    e.g. 'root'
-        - group:    e.g. 'other'
-        - size:     e.g. 531
-        - date:     e.g. 'Jan 29 03:26'
-        - filename: e.g. 'README'
+        - filetype:   e.g. 'd' for directories, or '-' for an ordinary file
+        - perms:      e.g. 'rw-r--r--'
+        - nlinks:     e.g. 1
+        - owner:      e.g. 'root'
+        - group:      e.g. 'other'
+        - size:       e.g. 531
+        - date:       e.g. 'Jan 29 03:26'
+        - filename:   e.g. 'README'
+        - linktarget: e.g. 'some/rea/file'
 
     Note that the 'date' value will be formatted differently depending on the
     date.  Check U{http://cr.yp.to/ftp.html} if you really want to try to parse
@@ -2021,9 +2023,10 @@
     @ivar files: list of dicts describing the files in this listing
     """
     fileLinePattern = re.compile(
-        r'^(?P<filetype>.)(?P<perms>.{9})\s+\d*\s*'
+        r'^(?P<filetype>.)(?P<perms>.{9})\s+(?P<nlinks>\d*)\s*'
         r'(?P<owner>\S+)\s+(?P<group>\S+)\s+(?P<size>\d+)\s+'
-        r'(?P<date>... .. ..:..)\s+(?P<filename>.*?)\r?$'
+        r'(?P<date>... .. (..:..| \d{4}))\s+(?P<filename>([^ ]|\\ )*?)'
+        r'( -> (?P<linktarget>.*))?\r?$'
     )
     delimiter = '\n'
 
@@ -2034,8 +2037,37 @@
         match = self.fileLinePattern.match(line)
         if match:
             dict = match.groupdict()
+            dict['filename'] = dict['filename'].replace(r'\ ', ' ')
+            dict['nlinks'] = int(dict['nlinks'])
             dict['size'] = int(dict['size'])
-            self.files.append(dict)
+            self.addFile(dict)
+        else:
+            self.unknownLine(line)
+
+    def addFile(self, info):
+        """Append file information dictionary to the list of known files.
+
+        Subclasses can override or extend this method to handle file
+        information differently without affecting the parsing of data
+        from the server.
+
+        @param info: dictionary containing the parsed representation
+                     of the file information
+        @type info: dict
+        """
+        self.files.append(info)
+
+    def unknownLine(self, line):
+        """Deal with received lines which could not be parsed as file
+        information.
+
+        Subclasses can override this to perform any special processing
+        needed.
+
+        @param line: unparsable line as received
+        @type line: str
+        """
+        pass
 
 def parsePWDResponse(response):
     """Returns the path from a response to a PWD command.
