Index: twisted/trial/test/test_tests.py
===================================================================
--- twisted/trial/test/test_tests.py	(revision 37601)
+++ twisted/trial/test/test_tests.py	(working copy)
@@ -52,36 +52,44 @@
         self.suite = self.loader.loadTestsFromTestCase(suite)
         self.reporter = reporter.TestResult()
 
-
     def test_setUp(self):
+        """
+        test the setup
+        """
         self.failUnless(self.reporter.wasSuccessful())
         self.assertEqual(self.reporter.errors, [])
         self.assertEqual(self.reporter.failures, [])
         self.assertEqual(self.reporter.skips, [])
 
-
     def assertCount(self, numTests):
+        """
+        Asserts that the test count is plausable
+        """
         self.assertEqual(self.suite.countTestCases(), numTests)
         self.suite(self.reporter)
         self.assertEqual(self.reporter.testsRun, numTests)
 
 
-
 class SuccessMixin(object):
     """
-    Tests for the reporting of successful tests.
+    Tests for the reporting of successful tests in L{twisted.trial.unittest.TestCase}.
     """
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.result = reporter.TestResult()
 
-
     def test_successful(self):
         """
         A successful test, used by other tests.
         """
 
-
     def assertSuccessful(self, test, result):
+        """
+        Utility function -- assert there is one success and the state is 
+        plausable
+        """
         self.assertEqual(result.successes, 1)
         self.assertEqual(result.failures, [])
         self.assertEqual(result.errors, [])
@@ -89,7 +97,6 @@
         self.assertEqual(result.unexpectedSuccesses, [])
         self.assertEqual(result.skips, [])
 
-
     def test_successfulIsReported(self):
         """
         Test that when a successful test is run, it is reported as a success,
@@ -99,7 +106,6 @@
         test.run(self.result)
         self.assertSuccessful(test, self.result)
 
-
     def test_defaultIsSuccessful(self):
         """
         The test case type can be instantiated with no arguments, run, and
@@ -109,7 +115,6 @@
         test.run(self.result)
         self.assertSuccessful(test, self.result)
 
-
     def test_noReference(self):
         """
         Test that no reference is kept on a successful test.
@@ -123,33 +128,34 @@
         self.assertIdentical(ref(), None)
 
 
-
 class SynchronousSuccessTests(SuccessMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Tests for the reporting of successful tests in the synchronous case.
     """
 
 
-
 class AsynchronousSuccessTests(SuccessMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for the reporting of successful tests in the synchronous case.
     """
 
 
-
 class SkipMethodsMixin(ResultsTestMixin):
     """
-    Tests for the reporting of skipping tests.
+    Tests for the reporting of skipping tests in L{twisted.trial.unittest.TestCase}.
     """
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.loadSuite(self.Skipping)
 
-
     def test_counting(self):
+        """
+        Assert that there are three tests.
+        """
         self.assertCount(3)
 
-
     def test_results(self):
         """
         Running a suite in which all methods are individually set to skip
@@ -164,7 +170,6 @@
         self.assertEqual(len(self.reporter.skips), 3)
         self.assertEqual(self.reporter.successes, 0)
 
-
     def test_setUp(self):
         """
         Running a suite in which all methods are skipped by C{setUp} raising
@@ -180,8 +185,10 @@
         self.assertEqual(len(self.reporter.skips), 2)
         self.assertEqual(self.reporter.successes, 0)
 
-
     def test_reasons(self):
+        """
+        Test that reasons work
+        """
         self.suite(self.reporter)
         prefix = 'test_'
         # whiteboxing reporter
@@ -189,7 +196,6 @@
             self.assertEqual(test.shortDescription()[len(prefix):],
                                  str(reason))
 
-
     def test_deprecatedSkipWithoutReason(self):
         """
         If a test method raises L{SkipTest} with no reason, a deprecation
@@ -207,10 +213,11 @@
             warnings[0]['message'])
 
 
-
 class SynchronousSkipMethodTests(SkipMethodsMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Tests for the reporting of skipping tests in the synchronous case.
+
+    See: L{twisted.trial.test.test_tests.SkipMethodsMixin}
     """
     from twisted.trial.test.skipping import (
         SynchronousSkipping as Skipping,
@@ -218,10 +225,11 @@
         SynchronousDeprecatedReasonlessSkip as DeprecatedReasonlessSkip)
 
 
-
 class AsynchronousSkipMethodTests(SkipMethodsMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for the reporting of skipping tests in the asynchronous case.
+
+    See: L{twisted.trial.test.test_tests.SkipMethodsMixin}
     """
     from twisted.trial.test.skipping import (
         AsynchronousSkipping as Skipping,
@@ -229,24 +237,23 @@
         AsynchronousDeprecatedReasonlessSkip as DeprecatedReasonlessSkip)
 
 
-
-
 class SkipClassesMixin(ResultsTestMixin):
     """
     Test the class skipping features of L{twisted.trial.unittest.TestCase}.
     """
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.loadSuite(self.SkippedClass)
         self.SkippedClass._setUpRan = False
 
-
     def test_counting(self):
         """
         Skipped test methods still contribute to the total test count.
         """
         self.assertCount(4)
 
-
     def test_setUpRan(self):
         """
         The C{setUp} method is not called if the class is set to skip.
@@ -254,7 +261,6 @@
         self.suite(self.reporter)
         self.assertFalse(self.SkippedClass._setUpRan)
 
-
     def test_results(self):
         """
         Skipped test methods don't cause C{wasSuccessful} to return C{False},
@@ -269,7 +275,6 @@
         self.assertEqual(len(self.reporter.skips), 4)
         self.assertEqual(self.reporter.successes, 0)
 
-
     def test_reasons(self):
         """
         Test methods which raise L{unittest.SkipTest} or have their C{skip}
@@ -282,38 +287,43 @@
         self.assertEqual(expectedReasons, reasonsGiven)
 
 
-
 class SynchronousSkipClassTests(SkipClassesMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Test the class skipping features in the synchronous case.
+
+    See: L{twisted.trial.test.test_tests.SkipClassesMixin}
     """
     from twisted.trial.test.skipping import (
         SynchronousSkippedClass as SkippedClass)
 
 
-
 class AsynchronousSkipClassTests(SkipClassesMixin, unittest.TestCase):
     """
-    See module docstring.
+    Test the class skipping features in the asynchronous case.
+
+    See: L{twisted.trial.test.test_tests.SkipClassesMixin}
     """
     from twisted.trial.test.skipping import (
         AsynchronousSkippedClass as SkippedClass)
 
 
-
 class TodoMixin(ResultsTestMixin):
     """
     Tests for the individual test method I{expected failure} features of
     L{twisted.trial.unittest.TestCase}.
     """
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.loadSuite(self.Todo)
 
-
     def test_counting(self):
+        """
+        Ensure that we've got three test cases.
+        """
         self.assertCount(3)
 
-
     def test_results(self):
         """
         Running a suite in which all methods are individually marked as expected
@@ -332,23 +342,26 @@
         self.assertEqual(len(self.reporter.unexpectedSuccesses), 1)
         self.assertEqual(self.reporter.successes, 0)
 
-
     def test_expectedFailures(self):
+        """
+        Ensure that expected failures are handled properly.
+        """
         self.suite(self.reporter)
         expectedReasons = ['todo1', 'todo2']
         reasonsGiven = [ r.reason
                          for t, e, r in self.reporter.expectedFailures ]
         self.assertEqual(expectedReasons, reasonsGiven)
 
-
     def test_unexpectedSuccesses(self):
+        """
+        Ensure that unexpected successes are caught.
+        """
         self.suite(self.reporter)
         expectedReasons = ['todo3']
         reasonsGiven = [ r.reason
                          for t, r in self.reporter.unexpectedSuccesses ]
         self.assertEqual(expectedReasons, reasonsGiven)
 
-
     def test_expectedSetUpFailure(self):
         """
         C{setUp} is excluded from the failure expectation defined by a C{todo}
@@ -364,7 +377,6 @@
         self.assertEqual(len(self.reporter.unexpectedSuccesses), 0)
         self.assertEqual(self.reporter.successes, 0)
 
-
     def test_expectedTearDownFailure(self):
         """
         C{tearDown} is excluded from the failure expectation defined by a C{todo}
@@ -384,10 +396,11 @@
         self.assertEqual(self.reporter.successes, 0)
 
 
-
 class SynchronousTodoTests(TodoMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Test the class skipping features in the synchronous case.
+
+    See: L{twisted.trial.test.test_tests.TodoMixin}
     """
     from twisted.trial.test.skipping import (
         SynchronousTodo as Todo,
@@ -395,10 +408,11 @@
         SynchronousTearDownTodo as TearDownTodo)
 
 
-
 class AsynchronousTodoTests(TodoMixin, unittest.TestCase):
     """
-    See module docstring.
+    Test the class skipping features in the asynchronous case.
+
+    See: L{twisted.trial.test.test_tests.TodoMixin}
     """
     from twisted.trial.test.skipping import (
         AsynchronousTodo as Todo,
@@ -406,19 +420,23 @@
         AsynchronousTearDownTodo as TearDownTodo)
 
 
-
 class ClassTodoMixin(ResultsTestMixin):
     """
     Tests for the class-wide I{expected failure} features of
     L{twisted.trial.unittest.TestCase}.
     """
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.loadSuite(self.TodoClass)
 
     def test_counting(self):
+        """
+        Ensure that we've got four test cases.
+        """
         self.assertCount(4)
 
-
     def test_results(self):
         """
         Running a suite in which an entire class is marked as expected to fail
@@ -437,8 +455,10 @@
         self.assertEqual(len(self.reporter.unexpectedSuccesses), 2)
         self.assertEqual(self.reporter.successes, 0)
 
-
     def test_expectedFailures(self):
+        """
+        Ensure that expected failures are handled properly.
+        """
         self.suite(self.reporter)
         expectedReasons = ['method', 'class']
         reasonsGiven = [ r.reason
@@ -446,6 +466,9 @@
         self.assertEqual(expectedReasons, reasonsGiven)
 
     def test_unexpectedSuccesses(self):
+        """
+        Ensure that unexpected successes are caught.
+        """
         self.suite(self.reporter)
         expectedReasons = ['method', 'class']
         reasonsGiven = [ r.reason
@@ -453,25 +476,26 @@
         self.assertEqual(expectedReasons, reasonsGiven)
 
 
-
 class SynchronousClassTodoTests(ClassTodoMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Tests for the class-wide I{expected failure} features in the synchronous case.
+
+    See: L{twisted.trial.test.test_tests.ClassTodoMixin}
     """
     from twisted.trial.test.skipping import (
         SynchronousTodoClass as TodoClass)
 
 
-
 class AsynchronousClassTodoTests(ClassTodoMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for the class-wide I{expected failure} features in the asynchronous case.
+
+    See: L{twisted.trial.test.test_tests.ClassTodoMixin}
     """
     from twisted.trial.test.skipping import (
         AsynchronousTodoClass as TodoClass)
 
 
-
 class StrictTodoMixin(ResultsTestMixin):
     """
     Tests for the I{expected failure} features of
@@ -479,12 +503,17 @@
     expected is indicated.
     """
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.loadSuite(self.StrictTodo)
 
     def test_counting(self):
+        """
+        Assert there are seven test cases
+        """
         self.assertCount(7)
 
-
     def test_results(self):
         """
         A test method which is marked as expected to fail with a particular
@@ -500,16 +529,20 @@
         self.assertEqual(self.reporter.successes, 0)
         self.assertEqual(self.reporter.skips, [])
 
-
     def test_expectedFailures(self):
+        """
+        Ensure that expected failures are handled properly.
+        """
         self.suite(self.reporter)
         expectedReasons = ['todo1', 'todo2', 'todo5']
         reasonsGotten = [ r.reason
                           for t, e, r in self.reporter.expectedFailures ]
         self.assertEqual(expectedReasons, reasonsGotten)
 
-
     def test_unexpectedSuccesses(self):
+        """
+        Ensure that unexpected successes are caught.
+        """
         self.suite(self.reporter)
         expectedReasons = [([RuntimeError], 'todo7')]
         reasonsGotten = [ (r.errors, r.reason)
@@ -517,10 +550,12 @@
         self.assertEqual(expectedReasons, reasonsGotten)
 
 
-
 class SynchronousStrictTodoTests(StrictTodoMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Tests for the expected failure case when the exact failure that is expected
+    is indicated in the synchronous case
+
+    See: L{twisted.trial.test.test_tests.StrictTodoMixin}
     """
     from twisted.trial.test.skipping import (
         SynchronousStrictTodo as StrictTodo)
@@ -529,7 +564,10 @@
 
 class AsynchronousStrictTodoTests(StrictTodoMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for the expected failure case when the exact failure that is expected
+    is indicated in the asynchronous case
+
+    See: L{twisted.trial.test.test_tests.StrictTodoMixin}
     """
     from twisted.trial.test.skipping import (
         AsynchronousStrictTodo as StrictTodo)
@@ -541,16 +579,17 @@
     Tests for cleanup and reporting of reactor event sources left behind by test
     methods.
     """
-
     if _PY3:
         skip = _PY3PORTNEEDED
 
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.result = reporter.Reporter(NativeStringIO())
         self.loader = runner.TestLoader()
 
-
-    def testLeftoverSockets(self):
+    def test_leftoverSockets(self):
         """
         Trial reports a L{util.DirtyReactorAggregateError} if a test leaves
         sockets behind.
@@ -566,8 +605,7 @@
         failure = self.result.errors[0][1]
         self.failUnless(failure.check(util.DirtyReactorAggregateError))
 
-
-    def testLeftoverPendingCalls(self):
+    def test_leftoverPendingCalls(self):
         """
         Trial reports a L{util.DirtyReactorAggregateError} and fails the test
         if a test leaves a L{DelayedCall} hanging.
@@ -580,17 +618,17 @@
         self.failUnless(failure.check(util.DirtyReactorAggregateError))
 
 
-
 class FixtureMixin(object):
     """
     Tests for broken fixture helper methods (e.g. setUp, tearDown).
     """
-
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.reporter = reporter.Reporter()
         self.loader = pyunit.TestLoader()
 
-
     def test_brokenSetUp(self):
         """
         When setUp fails, the error is recorded in the result object.
@@ -602,7 +640,6 @@
             self.reporter.errors[0][1].value, erroneous.FoolishError)
         self.assertEqual(0, self.reporter.successes)
 
-
     def test_brokenTearDown(self):
         """
         When tearDown fails, the error is recorded in the result object.
@@ -615,30 +652,34 @@
         self.assertEqual(0, self.reporter.successes)
 
 
-
 class SynchronousFixtureTest(FixtureMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Tests for broken fixture helper methods in the synchronous case
+
+    See: L{twisted.trial.test.test_tests.FixtureMixin}
     """
     from twisted.trial.test.erroneous import (
         SynchronousTestFailureInSetUp as TestFailureInSetUp,
         SynchronousTestFailureInTearDown as TestFailureInTearDown)
 
 
-
 class AsynchronousFixtureTest(FixtureMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for broken fixture helper methods in the asynchronous case
+
+    See: L{twisted.trial.test.test_tests.FixtureMixin}
     """
     from twisted.trial.test.erroneous import (
         AsynchronousTestFailureInSetUp as TestFailureInSetUp,
         AsynchronousTestFailureInTearDown as TestFailureInTearDown)
 
 
-
 class AsynchronousSuppressionTest(SuppressionMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for the warning suppression features of 
+    L{twisted.trial.unittest.TestCase}
+
+    See L{twisted.trial.test.test_suppression.SuppressionMixin}
     """
     from twisted.trial.test.suppression import (
         AsynchronousTestSetUpSuppression as TestSetUpSuppression,
@@ -647,7 +688,6 @@
         AsynchronousTestSuppression2 as TestSuppression2)
 
 
-
 class GCMixin:
     """
     I provide a few mock tests that log setUp, tearDown, test execution and
@@ -658,20 +698,30 @@
         skip = _PY3PORTNEEDED
 
     class BasicTest(unittest.SynchronousTestCase):
+        """
+        Mock test to run.
+        """
         def setUp(self):
+            """
+            Mock setUp
+            """
             self._log('setUp')
         def test_foo(self):
+            """
+            Mock test case
+            """
             self._log('test')
         def tearDown(self):
+            """
+            Mock tear tearDown
+            """
             self._log('tearDown')
 
-    class ClassTest(unittest.SynchronousTestCase):
-        def test_1(self):
-            self._log('test1')
-        def test_2(self):
-            self._log('test2')
 
     def _log(self, msg):
+        """
+        Log function
+        """
         self._collectCalled.append(msg)
 
     def collect(self):
@@ -679,17 +729,25 @@
         self._log('collect')
 
     def setUp(self):
+        """
+        Setup our test case
+        """
         self._collectCalled = []
-        self.BasicTest._log = self.ClassTest._log = self._log
+        self.BasicTest._log = self._log
         self._oldCollect = gc.collect
         gc.collect = self.collect
 
     def tearDown(self):
+        """
+        Tear down the test
+        """
         gc.collect = self._oldCollect
 
 
-
 class TestGarbageCollectionDefault(GCMixin, unittest.SynchronousTestCase):
+    """
+    By default, tests should not force garbage collection.
+    """
 
     def test_collectNotDefault(self):
         """
@@ -703,7 +761,9 @@
 
 
 class TestGarbageCollection(GCMixin, unittest.SynchronousTestCase):
-
+    """
+    Test that, when force GC, it works.
+    """
     def test_collectCalled(self):
         """
         test gc.collect is called before and after each test.
@@ -717,13 +777,19 @@
             ['collect', 'setUp', 'test', 'tearDown', 'collect'])
 
 
-
 class TestUnhandledDeferred(unittest.SynchronousTestCase):
+    """
+    Test what happens when we have an unhandled deferred left around after
+    a test.
+    """
 
     if _PY3:
         skip = _PY3PORTNEEDED
 
     def setUp(self):
+        """
+        Setup our test case
+        """
         from twisted.trial.test import weird
         # test_unhandledDeferred creates a cycle. we need explicit control of gc
         gc.disable()
@@ -757,22 +823,26 @@
         self.assertEqual(len(x), 0, 'Errors logged after gc.collect')
 
     def tearDown(self):
+        """
+        Tear down the test
+        """
         gc.collect()
         gc.enable()
         self.flushLoggedErrors()
 
 
-
 class AddCleanupMixin(object):
     """
     Test the addCleanup method of TestCase.
     """
     def setUp(self):
+        """
+        Setup our test case
+        """
         super(AddCleanupMixin, self).setUp()
         self.result = reporter.TestResult()
         self.test = self.AddCleanup()
 
-
     def test_addCleanupCalledIfSetUpFails(self):
         """
         Callables added with C{addCleanup} are run even if setUp fails.
@@ -782,7 +852,6 @@
         self.test.run(self.result)
         self.assertEqual(['setUp', 'foo'], self.test.log)
 
-
     def test_addCleanupCalledIfSetUpSkips(self):
         """
         Callables added with C{addCleanup} are run even if setUp raises
@@ -794,7 +863,6 @@
         self.test.run(self.result)
         self.assertEqual(['setUp', 'foo'], self.test.log)
 
-
     def test_addCleanupCalledInReverseOrder(self):
         """
         Callables added with C{addCleanup} should be called before C{tearDown}
@@ -806,7 +874,6 @@
         self.assertEqual(['setUp', 'runTest', 'bar', 'foo', 'tearDown'],
                          self.test.log)
 
-
     def test_errorInCleanupIsCaptured(self):
         """
         Errors raised in cleanup functions should be treated like errors in
@@ -821,7 +888,6 @@
         self.assertEqual(test, self.test)
         self.assertEqual(error.getErrorMessage(), 'foo')
 
-
     def test_cleanupsContinueRunningAfterError(self):
         """
         If a cleanup raises an error then that does not stop the other
@@ -837,7 +903,6 @@
         self.assertEqual(test, self.test)
         self.assertEqual(error.getErrorMessage(), 'bar')
 
-
     def test_multipleErrorsReported(self):
         """
         If more than one cleanup fails, then the test should fail with more
@@ -856,18 +921,20 @@
         self.assertEqual(error2.getErrorMessage(), 'foo')
 
 
-
 class SynchronousAddCleanupTests(AddCleanupMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Test the addCleanup method of TestCase in the synchronous case
+
+    See: L{twisted.trial.test.test_tests.AddCleanupMixin}
     """
     from twisted.trial.test.skipping import SynchronousAddCleanup as AddCleanup
 
 
-
 class AsynchronousAddCleanupTests(AddCleanupMixin, unittest.TestCase):
     """
-    See module docstring.
+    Test the addCleanup method of TestCase in the asynchronous case
+
+    See: L{twisted.trial.test.test_tests.AddCleanupMixin}
     """
     from twisted.trial.test.skipping import AsynchronousAddCleanup as AddCleanup
 
@@ -888,7 +955,6 @@
                          self.test.log)
 
 
-
 class SuiteClearingMixin(object):
     """
     Tests for our extension that allows us to clear out a L{TestSuite}.
@@ -926,23 +992,26 @@
         self.assertEqual(0, suite.countTestCases())
 
 
-
 class SynchronousSuiteClearingTests(SuiteClearingMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Tests for our extension that allows us to clear out a L{TestSuite} in the 
+    synchronous case.
+
+    See L{twisted.trial.test.test_tests.SuiteClearingMixin}
     """
     TestCase = unittest.SynchronousTestCase
 
 
-
 class AsynchronousSuiteClearingTests(SuiteClearingMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for our extension that allows us to clear out a L{TestSuite} in the 
+    asynchronous case.
+
+    See L{twisted.trial.test.test_tests.SuiteClearingMixin}
     """
     TestCase = unittest.TestCase
 
 
-
 class TestDecoratorMixin(object):
     """
     Tests for our test decoration features.
@@ -962,7 +1031,6 @@
         if observedOriginal is expectedOriginal is None:
             self.assertIdentical(observed, expected)
 
-
     def assertSuitesEqual(self, observed, expected):
         """
         Assert that the given test suites with decorated tests are equal.
@@ -978,7 +1046,6 @@
             else:
                 self.assertTestsEqual(observedTest, expectedTest)
 
-
     def test_usesAdaptedReporterWithRun(self):
         """
         For decorated tests, C{run} uses a result adapter that preserves the
@@ -994,7 +1061,6 @@
         decoratedTest.run(result)
         self.assertTestsEqual(result.test, decoratedTest)
 
-
     def test_usesAdaptedReporterWithCall(self):
         """
         For decorated tests, C{__call__} uses a result adapter that preserves
@@ -1011,7 +1077,6 @@
         decoratedTest(result)
         self.assertTestsEqual(result.test, decoratedTest)
 
-
     def test_decorateSingleTest(self):
         """
         Calling L{decorate} on a single test case returns the test case
@@ -1021,7 +1086,6 @@
         decoratedTest = unittest.decorate(test, unittest.TestDecorator)
         self.assertTestsEqual(unittest.TestDecorator(test), decoratedTest)
 
-
     def test_decorateTestSuite(self):
         """
         Calling L{decorate} on a test suite will return a test suite with
@@ -1033,7 +1097,6 @@
         self.assertSuitesEqual(
             decoratedTest, unittest.TestSuite([unittest.TestDecorator(test)]))
 
-
     def test_decorateInPlaceMutatesOriginal(self):
         """
         Calling L{decorate} on a test suite will mutate the original suite.
@@ -1047,7 +1110,6 @@
         self.assertSuitesEqual(
             suite, unittest.TestSuite([unittest.TestDecorator(test)]))
 
-
     def test_decorateTestSuiteReferences(self):
         """
         When decorating a test suite in-place, the number of references to the
@@ -1068,7 +1130,6 @@
         count2 = getrefcount(test)
         self.assertEqual(count1, count2)
 
-
     def test_decorateNestedTestSuite(self):
         """
         Calling L{decorate} on a test suite with nested suites will return a
@@ -1082,7 +1143,6 @@
             [unittest.TestSuite([unittest.TestDecorator(test)])])
         self.assertSuitesEqual(decoratedTest, expected)
 
-
     def test_decorateDecoratedSuite(self):
         """
         Calling L{decorate} on a test suite with already-decorated tests
@@ -1095,7 +1155,6 @@
         self.assertTestsEqual(redecoratedTest,
                               unittest.TestDecorator(decoratedTest))
 
-
     def test_decoratePreservesSuite(self):
         """
         Tests can be in non-standard suites. L{decorate} preserves the
@@ -1109,34 +1168,37 @@
             runner.DestructiveTestSuite([unittest.TestDecorator(test)]))
 
 
-
 class SynchronousTestDecoratorTests(TestDecoratorMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Tests for our test decoration features in the synchronous case.
+
+    See L{twisted.trial.test.test_tests.TestDecoratorMixin}
     """
     TestCase = unittest.SynchronousTestCase
 
 
-
 class AsynchronousTestDecoratorTests(TestDecoratorMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for our test decoration features in the asynchronous case.
+
+    See L{twisted.trial.test.test_tests.TestDecoratorMixin}
     """
     TestCase = unittest.TestCase
 
 
-
 class MonkeyPatchMixin(object):
     """
     Tests for the patch() helper method in L{unittest.TestCase}.
     """
     def setUp(self):
+        """
+        Setup our test case
+        """
         self.originalValue = 'original'
         self.patchedValue = 'patched'
         self.objectToPatch = self.originalValue
         self.test = self.TestCase()
 
-
     def test_patch(self):
         """
         Calling C{patch()} on a test monkey patches the specified object and
@@ -1145,7 +1207,6 @@
         self.test.patch(self, 'objectToPatch', self.patchedValue)
         self.assertEqual(self.objectToPatch, self.patchedValue)
 
-
     def test_patchRestoredAfterRun(self):
         """
         Any monkey patches introduced by a test using C{patch()} are reverted
@@ -1155,7 +1216,6 @@
         self.test.run(reporter.Reporter())
         self.assertEqual(self.objectToPatch, self.originalValue)
 
-
     def test_revertDuringTest(self):
         """
         C{patch()} return a L{monkey.MonkeyPatcher} object that can be used to
@@ -1165,7 +1225,6 @@
         patch.restore()
         self.assertEqual(self.objectToPatch, self.originalValue)
 
-
     def test_revertAndRepatch(self):
         """
         The returned L{monkey.MonkeyPatcher} object can re-apply the patch
@@ -1176,7 +1235,6 @@
         patch.patch()
         self.assertEqual(self.objectToPatch, self.patchedValue)
 
-
     def test_successivePatches(self):
         """
         Successive patches are applied and reverted just like a single patch.
@@ -1189,23 +1247,24 @@
         self.assertEqual(self.objectToPatch, self.originalValue)
 
 
-
 class SynchronousMonkeyPatchTests(MonkeyPatchMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Tests for the patch() helper method in the synchronous case.
+
+    See L{twisted.trial.test.test_tests.MonkeyPatchMixin}
     """
     TestCase = unittest.SynchronousTestCase
 
 
-
 class AsynchronousMonkeyPatchTests(MonkeyPatchMixin, unittest.TestCase):
     """
-    See module docstring.
+    Tests for the patch() helper method in the asynchronous case.
+
+    See L{twisted.trial.test.test_tests.MonkeyPatchMixin}
     """
     TestCase = unittest.TestCase
 
 
-
 class IterateTestsMixin(object):
     """
     L{_iterateTests} returns a list of all test cases in a test suite or test
@@ -1251,17 +1310,21 @@
         self.assertEqual([test, self], list(unittest._iterateTests(suite)))
 
 
-
 class SynchronousIterateTestsTests(IterateTestsMixin, unittest.SynchronousTestCase):
     """
-    See module docstring.
+    Check that L{_iterateTests} returns a list of all test cases in a test suite 
+    or test case for synchronous tests.
+
+    See L{twisted.trial.test.test_tests.IterateTestsMixin}
     """
     TestCase = unittest.SynchronousTestCase
 
 
-
 class AsynchronousIterateTestsTests(IterateTestsMixin, unittest.TestCase):
     """
-    See module docstring.
+    Check that L{_iterateTests} returns a list of all test cases in a test suite 
+    or test case for asynchronous tests.
+
+    See L{twisted.trial.test.test_tests.IterateTestsMixin}
     """
     TestCase = unittest.TestCase
