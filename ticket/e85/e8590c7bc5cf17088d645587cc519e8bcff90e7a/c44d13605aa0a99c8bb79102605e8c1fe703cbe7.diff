diff --git a/docs/core/development/policy/test-standard.rst b/docs/core/development/policy/test-standard.rst
index 58fe8ed..1ebacac 100644
--- a/docs/core/development/policy/test-standard.rst
+++ b/docs/core/development/policy/test-standard.rst
@@ -551,7 +551,7 @@ handle this yet.. ``trial --testmodule`` does, though)
 
 The ``test-case-name`` tag will allow ``trial --testmodule twisted/dir/myfile.py`` to determine which test cases need
 to be run to exercise the code in ``myfile.py`` . Several tools (as
-well as http://launchpad.net/twisted-emacs's``twisted-dev.el`` 's F9 command) use this to automatically
+well as http://launchpad.net/twisted-emacs's ``twisted-dev.el`` 's F9 command) use this to automatically
 run the right tests.
 
 
diff --git a/docs/core/howto/application.rst b/docs/core/howto/application.rst
index 3c9a04b..96eeac0 100644
--- a/docs/core/howto/application.rst
+++ b/docs/core/howto/application.rst
@@ -388,7 +388,7 @@ Service Collection
 
 
 
-:api:`twisted.application.service.IServiceCollection <IServiceCollection>` objects contain:api:`twisted.application.service.IService <IService>` objects.
+:api:`twisted.application.service.IServiceCollection <IServiceCollection>` objects contain :api:`twisted.application.service.IService <IService>` objects.
 IService objects can be added to IServiceCollection by calling :api:`twisted.application.service.IService.setServiceParent <setServiceParent>` and detached
 by using :api:`twisted.application.service.IService.disownServiceParent <disownServiceParent>` .
 
diff --git a/docs/core/howto/defer.rst b/docs/core/howto/defer.rst
index c0a20a8..371f326 100644
--- a/docs/core/howto/defer.rst
+++ b/docs/core/howto/defer.rst
@@ -719,7 +719,7 @@ reasons:
 
 
 Calling ``cancel()`` will always succeed without an error
-regardless of whether or not cancellation was possible. In cases 1 and 2 the``Deferred`` may well errback with a``twisted.internet.defer.CancelledError`` while the underlying
+regardless of whether or not cancellation was possible. In cases 1 and 2 the ``Deferred`` may well errback with a ``twisted.internet.defer.CancelledError`` while the underlying
 operation continues. ``Deferred`` s that support cancellation should
 document what they do when cancelled, if they are uncancellable in certain edge
 cases, etc..
@@ -727,7 +727,7 @@ cases, etc..
 
 
 
-If the cancelled ``Deferred`` is waiting on another``Deferred`` , the cancellation will be forwarded to the other``Deferred`` .
+If the cancelled ``Deferred`` is waiting on another ``Deferred`` , the cancellation will be forwarded to the other ``Deferred`` .
 
 
 
@@ -764,7 +764,7 @@ Consider this example of a Deferred which is ignorant of cancellation:
 
 
 
-A caller of an API that receives ``operation`` may call``cancel`` on it.  Since ``operation`` does not have a
+A caller of an API that receives ``operation`` may call ``cancel`` on it.  Since ``operation`` does not have a
 cancellation function, one of two things will happen.
 
 
@@ -775,13 +775,13 @@ cancellation function, one of two things will happen.
    completed, nothing much will change.  ``operation`` will still have a
    result, and there are no more callbacks, so there's no observable change in
    behavior.
-#. If ``operationDone`` has *not* yet been invoked, then``operation`` will be immediately errbacked with a``CancelledError`` .
+#. If ``operationDone`` has *not* yet been invoked, then ``operation`` will be immediately errbacked with a ``CancelledError`` .
    
    However, once it's cancelled, there's no way to tell ``operationDone`` 
    not to run; it will eventually call ``operation.callback`` later.  In
    normal operation, issuing ``callback`` on a ``Deferred`` that
    has already called back results in an ``AlreadyCalledError`` , and this
-   would cause an ugly traceback that could not be caught.  Therefore,``.callback`` can be invoked exactly once, causing a no-op, on a``Deferred`` which has been cancelled but has no canceller.  If you
+   would cause an ugly traceback that could not be caught.  Therefore, ``.callback`` can be invoked exactly once, causing a no-op, on a ``Deferred`` which has been cancelled but has no canceller.  If you
    call it multiple times, you will still get an ``AlreadyCalledError`` 
    exception.
 
@@ -1044,7 +1044,7 @@ shortcut:
 
 
 The ``consumeErrors`` argument has the same meaning as it does
-for :ref:`NEEDS A TITLE <core-howto-defer-deferredlist>` : if true, it causes``gatherResults`` to consume any errors in the passed-in Deferreds.
+for :ref:`NEEDS A TITLE <core-howto-defer-deferredlist>` : if true, it causes ``gatherResults`` to consume any errors in the passed-in Deferreds.
 Always use this argument unless you are adding further callbacks or errbacks to
 the passed-in Deferreds, or unless you know that they will not fail.
 Otherwise, a failure will result in an unhandled error being logged by Twisted.
diff --git a/docs/core/howto/endpoints.rst b/docs/core/howto/endpoints.rst
index 96ed681..08c5c1e 100644
--- a/docs/core/howto/endpoints.rst
+++ b/docs/core/howto/endpoints.rst
@@ -80,7 +80,7 @@ It returns a ``Deferred`` which fires with the ``IProtocol`` returned from the f
 
 Connection attempts may also take a long time, and your users may become bored and wander off.
 If this happens, and your code decides, for whatever reason, that you've been waiting for the connection too long, you can call :api:`twisted.internet.defer.Deferred.cancel <Deferred.cancel>` on the ``Deferred`` returned from :api:`twisted.internet.interfaces.IStreamClientEndpoint.connect <connect>` or :api:`twisted.internet.endpoints.connectProtocol <connectProtocol>`, and the underlying machinery should give up on the connection.
-This should cause the``Deferred`` to errback, usually with :api:`twisted.internet.defer.CancelledError <CancelledError>`;
+This should cause the ``Deferred`` to errback, usually with :api:`twisted.internet.defer.CancelledError <CancelledError>`;
 although you should consult the documentation for your particular endpoint type to see if it may do something different.
 
 Although some endpoint types may imply a built-in timeout, the
diff --git a/docs/core/howto/trial.rst b/docs/core/howto/trial.rst
index 1930273..369b827 100644
--- a/docs/core/howto/trial.rst
+++ b/docs/core/howto/trial.rst
@@ -1034,9 +1034,9 @@ Dropping into a debugger
 In the course of writing and running your tests, it is often helpful to
 employ the use of a debugger. This can be particularly helpful in tracking down
 where the source of a troublesome bug is in your code. Python's standard library
-includes a debugger in the form of the`pdb <http://docs.python.org/library/pdb.html>`_ module.
+includes a debugger in the form of the `pdb <http://docs.python.org/library/pdb.html>`_ module.
 Running your tests with ``pdb`` is as simple as invoking
-twisted with the ``--debug`` option, which will start``pdb`` at the beginning of the execution of your test
+twisted with the ``--debug`` option, which will start ``pdb`` at the beginning of the execution of your test
 suite.
 
 
@@ -1046,8 +1046,8 @@ Trial also provides a ``--debugger`` option which can
 run your test suite using another debugger instead. To specify a debugger other
 than ``pdb`` , pass in the fully-qualified name of an
 object that provides the same interface as ``pdb`` .
-Most third-party debuggers tend to implement an interface similar to``pdb`` , or at least provide a wrapper object that
-does. For example, invoking trial with the line``trial --debug --debugger pudb`` will open the`PuDB <http://pypi.python.org/pypi/pudb>`_ debugger instead, provided
+Most third-party debuggers tend to implement an interface similar to ``pdb`` , or at least provide a wrapper object that
+does. For example, invoking trial with the line ``trial --debug --debugger pudb`` will open the`PuDB <http://pypi.python.org/pypi/pudb>`_ debugger instead, provided
 it is properly installed.
 
 
diff --git a/docs/pair/howto/tunnels.rst b/docs/pair/howto/tunnels.rst
index ef48c1d..9e232b8 100644
--- a/docs/pair/howto/tunnels.rst
+++ b/docs/pair/howto/tunnels.rst
@@ -38,7 +38,7 @@ Otherwise the protocol must provide :api:`twisted.pair.raw.IRawPacketProtocol <t
     tun.startListening()
 
 In the above example two protocols are attached to the network: one to a tap device and the other to a tun device.
-The ``EthernetProtocol`` used in this example is a very simple implementation of ``IEthernetProtocol`` which does nothing more than dispatch to some other protocol based on the protocol found in the header of each ethernet frame it receives.``RawUDPProtocol`` is similar - it dispatches to other protocols based on the UDP port of IP datagrams it received.
+The ``EthernetProtocol`` used in this example is a very simple implementation of ``IEthernetProtocol`` which does nothing more than dispatch to some other protocol based on the protocol found in the header of each ethernet frame it receives. ``RawUDPProtocol`` is similar - it dispatches to other protocols based on the UDP port of IP datagrams it received.
 This example won't do anything since no application protocols have been added to either the ``EthernetProtocol`` or ``RawUDPProtocol`` instances
 (not to mention the reactor isn't being started).
 However, it should give you some idea of how tun/tap functionality fits into a Twisted application.
diff --git a/docs/web/howto/using-twistedweb.rst b/docs/web/howto/using-twistedweb.rst
index 0be5c2f..c475f0c 100644
--- a/docs/web/howto/using-twistedweb.rst
+++ b/docs/web/howto/using-twistedweb.rst
@@ -557,7 +557,7 @@ Here is an example of a basic reverse proxy:
 
 With this reverse proxy running locally, you can
 visit ``http://localhost:8080`` in your web browser, and the reverse
-proxy will proxy your connection to``www.yahoo.com`` .
+proxy will proxy your connection to ``www.yahoo.com``.
 
 
 
diff --git a/twisted/topfiles/7638.misc b/twisted/topfiles/7638.misc
new file mode 100644
index 0000000..e69de29
