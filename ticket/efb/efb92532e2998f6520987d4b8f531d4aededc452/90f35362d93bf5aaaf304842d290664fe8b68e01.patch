--- trunk/twisted/web2/test/test_xmlrpc.py	Sat Mar 11 14:39:25 2006
+++ xmlrpc_proxy-1895/twisted/web2/test/test_xmlrpc.py	Tue Jul  4 03:29:31 2006
@@ -6,23 +6,18 @@
 # 
 
 """Test XML-RPC support."""
+import os
+import time
 
 import xmlrpclib
 from twisted.web2 import xmlrpc
 from twisted.web2 import server
-from twisted.web2.channel import http
-from twisted.web2.xmlrpc import XMLRPC, addIntrospection
+from twisted.web2 import channel
+from twisted.web2.xmlrpc import XMLRPC, addIntrospection, Proxy
 from twisted.trial import unittest
 from twisted.internet import reactor, defer
 from twisted.python import log
 
-try:
-    from twisted.web.xmlrpc import Proxy
-except ImportError:
-    Proxy = None
-
-import time
-
 class TestRuntimeError(RuntimeError):
     pass
 
@@ -87,14 +82,33 @@
 
     xmlrpc_dict.help = 'Help for dict.'
 
+class TestAuthHeader(Test):
+    """ 
+    This is used to get the header info so that we can test
+    authentication.
+    """
+    def __init__(self):
+        Test.__init__(self)
+        self.request = None
+
+    def render(self, request):
+        self.request = request
+        return Test.render(self, request)
+
+    def xmlrpc_authinfo(self, request):
+        authh = request.headers.getHeader("Authorization")
+        if not authh:
+            user = password = ''
+        else:
+            basic, upw = authh
+            upw = upw.decode('base64')
+            user, password = upw.split(':')
+        return user, password
 
 class XMLRPCTestCase(unittest.TestCase):
     
-    if not Proxy:
-        skip = "Until web2 has an XML-RPC client, this test requires twisted.web."
-
     def setUp(self):
-        self.p = reactor.listenTCP(0, http.HTTPFactory(server.Site(Test())),
+        self.p = reactor.listenTCP(0, channel.HTTPFactory(server.Site(Test())),
                                    interface="127.0.0.1")
         self.port = self.p.getHost().port
 
@@ -139,14 +153,39 @@
     def proxy(self):
         return Proxy("http://127.0.0.1:%d" % self.port)
 
+class XMLRPCTestAuthenticated(XMLRPCTestCase):
+    """
+    Test with authenticated proxy. We run this with the same inout/ouput as
+    above.
+    """
+    user = "username"
+    password = "asecret"
+
+    def setUp(self):
+        site = server.Site(TestAuthHeader())
+        self.p = reactor.listenTCP(0, channel.HTTPFactory(site), interface="127.0.0.1")
+        self.port = self.p.getHost().port
+
+
+    def testAuthInfoInURL(self):
+        p = xmlrpc.Proxy("http://%s:%s@127.0.0.1:%d/" % (self.user, self.password, self.port))
+        return p.callRemote("authinfo").addCallback(self.assertEquals, [self.user, self.password])
+
+
+    def testExplicitAuthInfo(self):
+        p = xmlrpc.Proxy("http://127.0.0.1:%d/" % (self.port,), self.user, self.password)
+        return p.callRemote("authinfo").addCallback(self.assertEquals, [self.user, self.password])
+
+    def testExplicitAuthInfoOverride(self):
+        p = xmlrpc.Proxy("http://wrong:info@127.0.0.1:%d/" % (self.port,), self.user, self.password)
+        return p.callRemote("authinfo").addCallback(self.assertEquals, [self.user, self.password])
 
 class XMLRPCTestIntrospection(XMLRPCTestCase):
 
     def setUp(self):
         xmlrpc = Test()
         addIntrospection(xmlrpc)
-        self.p = reactor.listenTCP(0, http.HTTPFactory(server.Site(xmlrpc)),
-            interface="127.0.0.1")
+        self.p = reactor.listenTCP(0, channel.HTTPFactory(server.Site(xmlrpc)), interface="127.0.0.1")
         self.port = self.p.getHost().port
 
     def testListMethods(self):
@@ -192,3 +231,19 @@
             dl.append(d)
         return defer.DeferredList(dl, fireOnOneErrback=True)
 
+
+class XMLRPCClientErrorHandling(unittest.TestCase):
+    def setUp(self):
+        self.resource = XMLRPC()
+        self.resource.isLeaf = True
+        site = server.Site(self.resource)
+        self.p = reactor.listenTCP(0, channel.HTTPFactory(site),
+            interface="127.0.0.1")
+        self.port = self.p.getHost().port
+            
+    def tearDown(self):
+        return self.p.stopListening()
+
+    def testErroneousResponse(self):
+        proxy = xmlrpc.Proxy("http://127.0.0.1:%d/" % (self.port,))
+        return self.assertFailure(proxy.callRemote("someMethod"), Exception)
