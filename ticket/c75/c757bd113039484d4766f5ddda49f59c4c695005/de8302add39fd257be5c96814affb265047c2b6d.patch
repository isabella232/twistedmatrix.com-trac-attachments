Index: twisted/mail/smtp.py
===================================================================
--- twisted/mail/smtp.py	(revision 46340)
+++ twisted/mail/smtp.py	(working copy)
@@ -342,7 +342,8 @@
     else:
         return '<%s>' % str(res[1])
 
-COMMAND, DATA, AUTH = 'COMMAND', 'DATA', 'AUTH'
+GREETING, COMMAND, DATA, AUTH, PROCESSING = \
+  'GREETING', 'COMMAND', 'DATA', 'AUTH', 'PROCESSING'
 
 class AddressError(SMTPError):
     "Parse error in address"
@@ -455,7 +456,7 @@
     including information on where the message came from
     """
 
-    def __init__(self, destination, helo, protocol, orig):
+    def __init__(self, destination, helo, protocol, orig, opts={}):
         host = getattr(protocol, 'host', None)
         self.dest = Address(destination, host)
         self.helo = helo
@@ -464,6 +465,7 @@
             self.orig = orig
         else:
             self.orig = Address(orig, host)
+        self.options = opts
 
     def __getstate__(self):
         """Helper for pickle.
@@ -474,7 +476,8 @@
         return { 'dest' : self.dest,
                  'helo' : self.helo,
                  'protocol' : None,
-                 'orig' : self.orig }
+                 'orig' : self.orig,
+                 'options': self.options }
 
     def __str__(self):
         return str(self.dest)
@@ -498,7 +501,9 @@
         semantics should be to discard the message
         """
 
-class SMTP(basic.LineOnlyReceiver, policies.TimeoutMixin):
+# This used to use LineOnlyReceiver, but that prevents the implementation of
+# e.g. CHUNKED or BINARYMIME in an ESMTP subclass.
+class SMTP(basic.LineReceiver, policies.TimeoutMixin):
     """
     SMTP server-side protocol.
     """
@@ -528,21 +533,46 @@
     _onLogout = None
 
     def __init__(self, delivery=None, deliveryFactory=None):
-        self.mode = COMMAND
+        self.mode = GREETING
+        self.deferGreeting = False   # Or a count in seconds
+        self.saved_mode = None
         self._from = None
         self._helo = None
         self._to = []
         self.delivery = delivery
         self.deliveryFactory = deliveryFactory
 
+    # These two are hooks that allow the ESMTP subclass to support PIPELINING
+    # if it so desires (by calling pauseProducing/resumeProducing); they
+    # also let us detect attempts to use pipelining when we don't support it.
+    def beginProcessing(self):
+        self.saved_mode = self.mode
+        self.mode = PROCESSING
+
+    def endProcessing(self):
+        self.mode = self.saved_mode
+    
     def timeoutConnection(self):
         msg = '%s Timeout. Try talking faster next time!' % (self.host,)
         self.sendCode(421, msg)
         self.transport.loseConnection()
 
+    def protocolViolation(self):
+        self.transport.loseConnection()        
+        
     def greeting(self):
         return '%s NO UCE NO UBE NO RELAY PROBES' % (self.host,)
 
+    def _sendGreeting(self):
+        self.sendCode(220, self.greeting())
+        self.mode = COMMAND
+
+    def sendGreeting(self):
+        if not self.deferGreeting:
+            self._sendGreeting()
+        else:
+            reactor.callLater(self.deferGreeting, self._sendGreeting)
+
     def connectionMade(self):
         # Ensure user-code always gets something sane for _helo
         peer = self.transport.getPeer()
@@ -551,7 +581,7 @@
         except AttributeError: # not an IPv4Address
             host = str(peer)
         self._helo = (None, host)
-        self.sendCode(220, self.greeting())
+        self.sendGreeting()
         self.setTimeout(self.timeout)
 
     def sendCode(self, code, message=''):
@@ -567,6 +597,10 @@
         self.resetTimeout()
         return getattr(self, 'state_' + self.mode)(line)
 
+    def state_GREETING(self, line):
+        self.sendCode(503, 'Command sent before greeting - wait your turn')
+        self.protocolViolation()
+    
     def state_COMMAND(self, line):
         # Ignore leading and trailing whitespace, as well as an arbitrary
         # amount of whitespace between the command and its argument, though
@@ -583,6 +617,10 @@
         else:
             self.sendSyntaxError()
 
+    def state_PROCESSING(self, line):
+        self.sendCode(503, 'Pipelining not supported - wait your turn')
+        self.protocolViolation()
+    
     def sendSyntaxError(self):
         self.sendCode(500, 'Error: bad syntax')
 
@@ -629,23 +667,57 @@
                          )\s*(\s(?P<opts>.*))? # Optional WS + ESMTP options
                          $''',re.I|re.X)
 
+    opt_re = re.compile(r'''^(?P<keyword>[A-Z0-9][-A-Z0-9]*)
+                             (?:=(?P<value>[^=\ \0-\037]+))?$''',
+                        re.I|re.X)
+    space_re = re.compile(r'\s+')
+
+    def _processOptions(self, opts):
+        options = {}
+
+        for optstr in self.space_re.split(opts):
+            m = self.opt_re.match(optstr)
+            if not m:
+                return None
+            value = m.group('value')
+            if value:
+                value = value.upper()
+            else:
+                value = None
+            self._options[m.group('keyword').upper()] = value
+            
+        return options
+    
     def do_MAIL(self, rest):
         if self._from:
-            self.sendCode(503,"Only one sender per message, please")
+            self.sendCode(503, 'Only one sender per message, please')
             return
-        # Clear old recipient list
+
+        # Clear old stuff
+        self._options = {}
         self._to = []
+        self._got_chunk = False
+        
         m = self.mail_re.match(rest)
         if not m:
-            self.sendCode(501, "Syntax error")
+            self.sendCode(501, 'Syntax error')
             return
 
+        opts = m.group('opts')
+        if opts:
+            options = self._processOptions(opts)
+            if options is None:
+                self.sendCode(501, 'Syntax error')
+                return
+            self._options = options
+        
         try:
             addr = Address(m.group('path'), self.host)
         except AddressError, e:
             self.sendCode(553, str(e))
             return
 
+        self.beginProcessing()
         validated = defer.maybeDeferred(self.validateFrom, self._helo, addr)
         validated.addCallbacks(self._cbFromValidate, self._ebFromValidate)
 
@@ -653,8 +725,8 @@
     def _cbFromValidate(self, from_, code=250, msg='Sender address accepted'):
         self._from = from_
         self.sendCode(code, msg)
+        self.endProcessing()
 
-
     def _ebFromValidate(self, failure):
         if failure.check(SMTPBadSender):
             self.sendCode(failure.value.code,
@@ -667,23 +739,34 @@
             self.sendCode(
                 451,
                 'Requested action aborted: local error in processing')
+        self.endProcessing()
 
 
     def do_RCPT(self, rest):
         if not self._from:
-            self.sendCode(503, "Must have sender before recipient")
+            self.sendCode(503, 'Must have sender before recipient')
             return
+
+        options = {}
         m = self.rcpt_re.match(rest)
         if not m:
-            self.sendCode(501, "Syntax error")
+            self.sendCode(501, 'Syntax error')
             return
 
+        opts = m.group('opts')
+        if opts:
+            options = self._processOptions(opts)
+            if options is None:
+                self.sendCode(501, 'Syntax error')
+                return
+
         try:
-            user = User(m.group('path'), self._helo, self, self._from)
+            user = User(m.group('path'), self._helo, self, self._from, options)
         except AddressError, e:
             self.sendCode(553, str(e))
             return
 
+        self.beginProcessing()
         d = defer.maybeDeferred(self.validateTo, user)
         d.addCallbacks(
             self._cbToValidate,
@@ -696,6 +779,7 @@
             user = to
         self._to.append((user, to))
         self.sendCode(code, msg)
+        self.endProcessing()
 
     def _ebToValidate(self, failure):
         if failure.check(SMTPBadRcpt, SMTPServerError):
@@ -706,6 +790,7 @@
                 451,
                 'Requested action aborted: local error in processing'
             )
+        self.endProcessing()
 
     def _disconnect(self, msgs):
         for msg in msgs:
@@ -791,6 +876,7 @@
                 if not self.__messages:
                     self._messageHandled("thrown away")
                     return
+                self.beginProcessing()
                 defer.DeferredList([
                     m.eomReceived() for m in self.__messages
                 ], consumeErrors=True).addCallback(self._messageHandled
@@ -839,8 +925,8 @@
             self.sendCode(550, msg)
         else:
             self.sendCode(250, 'Delivery in progress')
+        self.endProcessing()
 
-
     def _cbAnonymousAuthentication(self, (iface, avatar, logout)):
         """
         Save the state resulting from a successful anonymous cred login.
@@ -1643,13 +1729,14 @@
 
     authenticated = False
 
-    def __init__(self, chal = None, contextFactory = None):
+    def __init__(self, chal = None, contextFactory = None, pipelining = False):
         SMTP.__init__(self)
         if chal is None:
             chal = {}
         self.challengers = chal
         self.authenticated = False
         self.ctx = contextFactory
+        self.pipelining = pipelining
 
     def connectionMade(self):
         SMTP.connectionMade(self)
@@ -1660,11 +1747,24 @@
     def greeting(self):
         return SMTP.greeting(self) + ' ESMTP'
 
+    def beginProcessing(self):
+        if self.pipelining:
+            self.pauseProducing()
+        else:
+            SMTP.beginProcessing(self)
+            
+    def endProcessing(self):
+        if self.pipelining:
+            self.resumeProducing()
+        else:
+            SMTP.endProcessing(self)
 
     def extensions(self):
         ext = {'AUTH': self.challengers.keys()}
         if self.canStartTLS and not self.startedTLS:
             ext['STARTTLS'] = None
+        if self.pipelining:
+            ext['PIPELINING'] = None
         return ext
 
     def lookupMethod(self, command):
@@ -1684,7 +1784,13 @@
                 r.append(c)
         return '\n'.join(r)
 
+    def do_HELO(self, rest):
+        # Can't use pipelining if someone sends HELO
+        self.pipelining = False
+        SMTP.do_HELO(self, rest)
+    
     def do_EHLO(self, rest):
+        extra = self.clearLineBuffer().strip()
         peer = self.transport.getPeer().host
         self._helo = (rest, peer)
         self._from = None
@@ -1696,6 +1802,12 @@
                 self.listExtensions(),
             )
         )
+        # Spamming software might try to do this (EHLO, then lots of other
+        # commands without waiting to see if PIPELINING is supported).  We
+        # might not always detect this, but when we do, drop the connection.
+        if extra:
+            self.sendCode(503, 'Illegal attempt to use pipelining before EHLO')
+            self.protocolViolation()
 
     def ext_STARTTLS(self, rest):
         if self.startedTLS:
Index: twisted/mail/test/test_smtp.py
===================================================================
--- twisted/mail/test/test_smtp.py	(revision 46340)
+++ twisted/mail/test/test_smtp.py	(working copy)
@@ -1061,7 +1061,6 @@
         raise NotImplementedError("This oughtn't be called in the course of this test.")
 
 
-
 class SMTPServerTests(unittest.TestCase):
     """
     Test various behaviors of L{twisted.mail.smtp.SMTP} and
@@ -1092,7 +1091,71 @@
         s.connectionLost(error.ConnectionDone())
         self.assertNotIn("ESMTP", t.value())
 
+        
+    def testSMTPDeferGreeting(self):
+        """
+        Test that the SMTP server defers its greeting.
+        """
+        s = smtp.SMTP()
+        s.host = 'example.com'
+        s.deferGreeting = 0.1
+        t = StringTransport()
+        s.makeConnection(t)
+        self.assertEqual(t.value(), '')
 
+        def checkGreeting():
+            s.connectionLost(error.ConnectionDone())
+            self.assertIn('example.com', t.value())
+        
+        d = task.deferLater(reactor, 0.2, checkGreeting)
+        return d
+
+    
+    def testSMTPEarlyCommandFails(self):
+        """
+        Test that when the SMTP server defers its greeting, a command
+        sent before the greeting fails and causes the connection to close.
+        """
+        s = smtp.SMTP()
+        s.deferGreeting = 0.1
+        t = StringTransport()
+        s.makeConnection(t)
+        s.dataReceived('HELO example.com\r\n')
+        self.assertTrue(t.disconnecting)
+        s.connectionLost(error.ConnectionDone())
+        self.assertEqual(t.value(),
+                         '503 Command sent before greeting - wait your turn\r\n')
+
+        d = task.deferLater(reactor, 0.2, lambda: None)
+        return d
+        
+    def testSMTPPipeliningFails(self):
+        """
+        Test that trying to send pipelined commands to the SMTP server
+        causes it to error and disconnect.
+        """
+        class SlowDelivery(NotImplementedDelivery):
+            def validateFrom(self, helo, origin):
+                # Make this take half a second so there's time to issue commands
+                return task.deferLater(reactor, 0.1, lambda: None)
+        
+        s = smtp.SMTP()
+        s.delivery = SlowDelivery()
+        t = StringTransport()
+        s.makeConnection(t)
+        s.dataReceived('HELO example.com\r\n')
+        t.clear()
+        s.dataReceived('MAIL FROM: nobody@example.com\r\n'
+                       'RCPT TO: somebody@example.com\r\n')
+        self.assertTrue(t.disconnecting)
+        s.connectionLost(error.ConnectionDone())
+        self.assertEqual(t.value(),
+                         '503 Pipelining not supported - wait your turn\r\n')
+
+        d = task.deferLater(reactor, 0.2, lambda: None)
+        return d
+
+        
     def testESMTPGreetingHost(self):
         """
         Similar to testSMTPGreetingHost, but for the L{smtp.ESMTP} class.
@@ -1112,7 +1175,93 @@
         s.connectionLost(error.ConnectionDone())
         self.assertIn("ESMTP", t.value())
 
+        
+    def testESMTPPipelining(self):
+        """
+        Test that PIPELINING works with ESMTP.
+        """
+        class SlowDelivery(NotImplementedDelivery):
+            def validateFrom(self, helo, origin):
+                # Make this take half a second so there's time to issue commands
+                return task.deferLater(reactor, 0.1, lambda: origin)
+            def validateTo(self, user):
+                return lambda: DummyMessage()
+            
+        s = smtp.ESMTP(pipelining=True)
+        s.host = 'localhost'
+        s.delivery = SlowDelivery()
+        t = StringTransport(
+            peerAddress=address.IPv4Address('TCP', '127.0.0.1', 12345))
+        s.makeConnection(t)
+        t.clear()
+        s.dataReceived('EHLO example.com\r\n')
+        responseLines = t.value().splitlines()
+        self.assertEqual(responseLines[0],
+                         '250-localhost Hello 127.0.0.1, nice to meet you')
+        self.assertEqual(responseLines[1],
+                         '250 PIPELINING')
+        self.assertEqual(len(responseLines), 2)
 
+        t.clear()
+        
+        s.dataReceived('MAIL FROM: nobody@example.com\r\n'
+                       'RCPT TO: somebody@example.com\r\n')
+
+        def checkResult():
+            s.connectionLost(error.ConnectionDone())
+            self.assertEqual(t.value(),
+                             '250 Sender address accepted\r\n'
+                             '250 Recipient address accepted\r\n')
+            
+        d = task.deferLater(reactor, 0.2, checkResult)
+        return d
+
+    def testESMTPBlindPipeliningFails(self):
+        """
+        Test that attempts to use pipelining before EHLO are rejected.
+        """
+        s = smtp.ESMTP(pipelining=True)
+        s.host = 'localhost'
+        t = StringTransport(
+            peerAddress=address.IPv4Address('TCP', '127.0.0.1', 12345))
+        s.makeConnection(t)
+        t.clear()
+        s.dataReceived('EHLO example.com\r\n'
+                       'MAIL FROM: nobody@example.com\r\n'
+                       'RCPT TO: somebody@example.com\r\n')
+        
+        self.assertTrue(t.disconnecting)
+        s.connectionLost(error.ConnectionDone())
+        self.assertEqual(t.value(),
+                         '250-localhost Hello 127.0.0.1, nice to meet you\r\n'
+                         '250 PIPELINING\r\n'
+                         '503 Illegal attempt to use pipelining before EHLO\r\n')
+
+    def testESMPTPipeliningWithHELOFails(self):
+        """
+        Test that attempting to use pipelining after HELO fails.
+        """
+        class SlowDelivery(NotImplementedDelivery):
+            def validateFrom(self, helo, origin):
+                # Make this take half a second so there's time to issue commands
+                return task.deferLater(reactor, 0.1, lambda: None)
+        
+        s = smtp.ESMTP(pipelining=True)
+        s.delivery = SlowDelivery()
+        t = StringTransport()
+        s.makeConnection(t)
+        s.dataReceived('HELO example.com\r\n')
+        t.clear()
+        s.dataReceived('MAIL FROM: nobody@example.com\r\n'
+                       'RCPT TO: somebody@example.com\r\n')
+        self.assertTrue(t.disconnecting)
+        s.connectionLost(error.ConnectionDone())
+        self.assertEqual(t.value(),
+                         '503 Pipelining not supported - wait your turn\r\n')
+
+        d = task.deferLater(reactor, 0.2, lambda: None)
+        return d        
+        
     def test_acceptSenderAddress(self):
         """
         Test that a C{MAIL FROM} command with an acceptable address is
