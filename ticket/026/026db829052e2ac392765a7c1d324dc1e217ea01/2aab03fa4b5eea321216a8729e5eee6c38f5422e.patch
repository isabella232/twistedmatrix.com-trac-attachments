--- twisted/internet/_dumbwin32proc.py.new	2007-08-30 09:23:06.781250000 +0200
+++ twisted/internet/_dumbwin32proc.py	2007-08-30 10:58:36.828125000 +0200
@@ -46,12 +46,8 @@
         if win32event.WaitForSingleObject(self.proc.hProcess, 0) != win32event.WAIT_OBJECT_0:
             return 0
         exitCode = win32process.GetExitCodeProcess(self.proc.hProcess)
-        if exitCode == 0:
-            err = error.ProcessDone(exitCode)
-        else:
-            err = error.ProcessTerminated(exitCode)
         self.deactivate()
-        self.proc.protocol.processEnded(failure.Failure(err))
+        self.proc.processEnded(exitCode)
         return 0
 
 
@@ -249,6 +245,14 @@
         if signalID in ("INT", "TERM", "KILL"):
             win32process.TerminateProcess(self.hProcess, 1)
 
+    def processEnded(self, status):
+        self.pid = None
+        if status == 0:
+            err = error.ProcessDone(status)
+        else:
+            err = error.ProcessTerminated(status)
+        self.protocol.processEnded(failure.Failure(err))
+
     def write(self, data):
         """Write data to the process' stdin."""
         self.stdin.write(data)
--- twisted/test/test_process.py.new	2007-08-30 09:31:03.437500000 +0200
+++ twisted/test/test_process.py	2007-08-30 10:40:22.875000000 +0200
@@ -338,6 +338,25 @@
                               "%s\n" % (p.outF.getvalue(), p.errF.getvalue()))
         return d.addCallback(processEnded)
 
+    def test_unsetPid(self):
+        """
+        Test if pid is None/non-None before/after process termination.
+        This reuses process_echoer.py to get a process that blocks on stdin.
+        """
+        finished = defer.Deferred()
+        p = TrivialProcessProtocol(finished)
+
+        exe = sys.executable
+        scriptPath = util.sibpath(__file__, "process_echoer.py")
+        procTrans = reactor.spawnProcess(p, exe,
+                                    [exe, "-u", scriptPath], env=None)
+        self.failUnless(procTrans.pid)
+        
+        def afterProcessEnd(ignored):
+            self.assertEqual(procTrans.pid, None)
+
+        p.transport.closeStdin()
+        return finished.addCallback(afterProcessEnd)
 
     def testProcess(self):
         exe = sys.executable
@@ -1014,11 +1033,12 @@
         from twisted.internet import _dumbwin32proc 
         _dumbwin32proc.win32process = win32process
     
-    def testPid(self):
-        """ launch process with mock win32process, The only mock
+    def test_pid(self):
+        """
+        Launch process with mock win32process. The only mock
         aspect of this module is that the pid of the process created will
-        always be 42"""
-        
+        always be 42.
+        """
         if runtime.platformType != 'win32':
             raise unittest.SkipTest, "Windows Only Process Tests skipped"
         from twisted.internet import _dumbwin32proc 
@@ -1037,15 +1057,13 @@
                                   cmd,  
                                   {}, 
                                   None)
-       
-        d.addCallback(self._testPidCompleteCb, p)
-        return d
-        
-    def _testPidCompleteCb(self, result,p):
-        """ callback function for testPidComplete """
         self.assertEquals(42, p.pid)
-        self.assertEquals("<Process pid=42>", p.__repr__())
+        self.assertEquals("<Process pid=42>", repr(p))
         
+        def pidCompleteCb(result):
+            self.assertEquals(None, p.pid)
+        return d.addCallback(pidCompleteCb)
+
 class UtilTestCase(unittest.TestCase):
     """
     Tests for process-related helper functions (currently only

