Index: _dumbwin32proc.py
===================================================================
--- _dumbwin32proc.py	(revision 20676)
+++ _dumbwin32proc.py	(working copy)
@@ -118,7 +118,8 @@
     implements(IProcessTransport, IConsumer, IProducer)
 
     buffer = ''
-
+    pid = None
+    
     def __init__(self, reactor, protocol, command, args, environment, path):
         _pollingfile._PollingTimer.__init__(self, reactor)
         self.protocol = protocol
@@ -145,19 +146,19 @@
         StartupInfo.dwFlags = win32process.STARTF_USESTDHANDLES
 
         # Create new handles whose inheritance property is false
-        pid = win32api.GetCurrentProcess()
+        currentPid = win32api.GetCurrentProcess()
 
-        tmp = win32api.DuplicateHandle(pid, self.hStdoutR, pid, 0, 0,
+        tmp = win32api.DuplicateHandle(currentPid, self.hStdoutR, currentPid, 0, 0,
                                        win32con.DUPLICATE_SAME_ACCESS)
         win32file.CloseHandle(self.hStdoutR)
         self.hStdoutR = tmp
 
-        tmp = win32api.DuplicateHandle(pid, self.hStderrR, pid, 0, 0,
+        tmp = win32api.DuplicateHandle(currentPid, self.hStderrR, currentPid, 0, 0,
                                        win32con.DUPLICATE_SAME_ACCESS)
         win32file.CloseHandle(self.hStderrR)
         self.hStderrR = tmp
 
-        tmp = win32api.DuplicateHandle(pid, self.hStdinW, pid, 0, 0,
+        tmp = win32api.DuplicateHandle(currentPid, self.hStdinW, currentPid, 0, 0,
                                        win32con.DUPLICATE_SAME_ACCESS)
         win32file.CloseHandle(self.hStdinW)
         self.hStdinW = tmp
@@ -172,7 +173,7 @@
         cmdline = quoteArguments(args)
         # TODO: error detection here.
         def doCreate():
-            self.hProcess, self.hThread, dwPid, dwTid = win32process.CreateProcess(
+            self.hProcess, self.hThread, self.pid, dwTid = win32process.CreateProcess(
                 command, cmdline, None, None, 1, 0, env, path, StartupInfo)
         try:
             doCreate()
@@ -243,6 +244,8 @@
 
 
     def signalProcess(self, signalID):
+        if self.pid is None:
+            raise ProcessExitedAlready
         if signalID in ("INT", "TERM", "KILL"):
             win32process.TerminateProcess(self.hProcess, 1)
 
@@ -316,4 +319,7 @@
 
     def stopProducing(self):
         self.loseConnection()
-
+    
+    def __repr__(self):
+        """ return a string representation of the process """
+        return "<%s pid=%s>" % (self.__class__.__name__, self.pid)
