Index: test_process.py
===================================================================
--- test_process.py	(revision 20676)
+++ test_process.py	(working copy)
@@ -1062,6 +1062,50 @@
         self.assertRaises(ValueError, reactor.spawnProcess, p, pyExe, pyArgs, usePTY=1)
         self.assertRaises(ValueError, reactor.spawnProcess, p, pyExe, pyArgs, childFDs={1:'r'})
 
+from twisted.test import mock_win32process
+
+class Dumbwin32procPidTest(unittest.TestCase):
+    def setUp(self):
+        from twisted.internet import _dumbwin32proc 
+        _dumbwin32proc.win32process = mock_win32process
+    
+    def tearDown(self):
+        import win32process 
+        from twisted.internet import _dumbwin32proc 
+        _dumbwin32proc.win32process = win32process
+    
+    def testPid(self):
+        """ launch process with mock win32process, The only mock
+        aspect of this module is that the pid of the process created will
+        always be 42"""
+        
+        if runtime.platformType != 'win32':
+            raise unittest.SkipTest, "Windows Only Process Tests skipped"
+        from twisted.internet import _dumbwin32proc 
+        _dumbwin32proc.win32process = mock_win32process
+        exe = sys.executable
+        scriptPath = util.sibpath(__file__, "process_cmdline.py")  
+        
+        d=defer.Deferred()
+        processProto = TrivialProcessProtocol(d)
+        comspec = str(os.environ["COMSPEC"])
+        cmd = [comspec, "/c", exe, scriptPath]
+        
+        p =_dumbwin32proc.Process(reactor,
+                                  processProto, 
+                                  None, 
+                                  cmd,  
+                                  {}, 
+                                  None)
+       
+        d.addCallback(self._testPidCompleteCb, p)
+        return d
+        
+    def _testPidCompleteCb(self, result,p):
+        """ callback function for testPidComplete """
+        self.assertEquals(42, p.pid)
+        self.assertEquals("<Process pid=42>", p.__repr__())
+        
 class UtilTestCase(unittest.TestCase):
     """
     Tests for process-related helper functions (currently only
