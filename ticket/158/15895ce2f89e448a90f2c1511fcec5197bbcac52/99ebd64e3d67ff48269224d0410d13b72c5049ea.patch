# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: andrew@puzzling.org-20080713141123-xgszytk2ns1u1lgr
# target_branch: file:///home/andrew/code/twisted-import-trunk/trunk/
# testament_sha1: 100e3d7842b9ab10673b7b31056b5e46f0196f70
# timestamp: 2008-07-14 00:12:30 +1000
# base_revision_id: andrew@puzzling.org-20080713084019-\
#   hhqgv5d6pye8hgyw
# 
# Begin patch
=== modified file 'twisted/test/test_protocols.py'
--- twisted/test/test_protocols.py	2008-07-13 08:40:19 +0000
+++ twisted/test/test_protocols.py	2008-07-13 14:11:23 +0000
@@ -6,7 +6,7 @@
 Test cases for twisted.protocols package.
 """
 
-from twisted.trial import unittest
+from twisted.trial import unittest, runner
 from twisted.protocols import basic, wire, portforward
 from twisted.internet import reactor, protocol, defer, task, error
 from twisted.test import proto_helpers
@@ -279,6 +279,79 @@
         self.assertEquals(a.received,
                           ['produce', 'hello world', 'unproduce', 'goodbye'])
 
+
+class LineOnlyReceiverTestCase(unittest.TestCase):
+    """
+    Test line only receiver interface.
+
+    This test case is applied to both LineReceiver and LineOnlyReceiver by the
+    test_suite function.
+    """
+    buffer = """foo
+    bleakness
+    desolation
+    plastic forks
+    """
+
+    lineReceiverClass = None  # see test_suite
+
+    def makeLineReceiver(self):
+        """
+        Construct a line receiver for testing with.
+
+        It will be a simple subclass of whatever self.lineReceiverClass is.
+        The subclass will log calls to lineReceived and lineLengthExceeded to a
+        '.calls' attribute.
+        """
+        transport = protocol.FileWrapper(StringIOWithoutClosing())
+        class LoggingLineReceiver(self.lineReceiverClass):
+            """
+            A line receiver subclass that records calls made to it, but
+            otherwise behaves like its base class.
+            """
+            delimiter = '\n'
+            MAX_LENGTH = 64
+            test = self
+
+            def connectionMade(self):
+                self.calls = []
+                return self.test.lineReceiverClass.connectionMade(self)
+
+            def lineReceived(self, line):
+                self.calls.append(('lineReceived', line))
+
+            def lineLengthExceeded(self, line):
+                self.calls.append(('lineLengthExceeded', line))
+                return self.test.lineReceiverClass.lineLengthExceeded(
+                    self, line)
+            
+        lineReceiver = LoggingLineReceiver()
+        lineReceiver.makeConnection(transport)
+        return lineReceiver
+
+    def testBuffer(self):
+        """
+        Test buffering over line protocol: data received should match buffer.
+        """
+        lineReceiver = self.makeLineReceiver()
+        for c in self.buffer:
+            lineReceiver.dataReceived(c)
+        expectedLines = self.buffer.split('\n')[:-1]
+        expectedCalls = [('lineReceived', line) for line in expectedLines]
+        self.failUnlessEqual(expectedCalls, lineReceiver.calls)
+
+    def testLineTooLong(self):
+        """
+        When a line greater than MAX_LENGTH is received, lineLengthExceeded is
+        called.  The default implementation lineLengthExceeded closes the
+        connection.
+        """
+        lineReceiver = self.makeLineReceiver()
+        res = lineReceiver.dataReceived('x'*200)
+        self.failUnlessEqual(
+            [('lineLengthExceeded', 'x'*200)], lineReceiver.calls)
+        self.assertTrue(isinstance(res, error.ConnectionLost))
+
     def testLongLineWithDelimiter(self):
         """
         When MAX_LENGTH is exceeded *and* a delimiter has been received,
@@ -288,20 +361,11 @@
         """
         # Set up a line receiver with a short MAX_LENGTH that logs
         # lineLengthExceeded events.
-        class LineReceiverThatRecords(basic.LineReceiver):
-            MAX_LENGTH = 10
-            def connectionMade(self):
-                self.calls = []
-            def lineReceived(self, line):
-                self.calls.append(('lineReceived', line))
-            def lineLengthExceeded(self, line):
-                self.calls.append(('lineLengthExceeded', line))
-        lineReceiver = LineReceiverThatRecords()
-        t = StringIOWithoutClosing()
-        lineReceiver.makeConnection(protocol.FileWrapper(t))
+        lineReceiver = self.makeLineReceiver()
+        lineReceiver.MAX_LENGTH = 10
         # Call dataReceived with two lines, the first longer than MAX_LENGTH.
-        longLine = ('x' * 11) + '\r\n'
-        nextLine = 'next line\r\n'
+        longLine = ('x' * 11) + '\n'
+        nextLine = 'next line\n'
         lineReceiver.dataReceived(longLine + nextLine)
         # We expect lineLengthExceeded to be called with exactly what we just
         # passed dataReceived.  lineReceived is not called.
@@ -309,39 +373,6 @@
         self.assertEqual(expectedCalls, lineReceiver.calls)
 
 
-class LineOnlyReceiverTestCase(unittest.TestCase):
-    """
-    Test line only receiveer.
-    """
-    buffer = """foo
-    bleakness
-    desolation
-    plastic forks
-    """
-
-    def testBuffer(self):
-        """
-        Test buffering over line protocol: data received should match buffer.
-        """
-        t = StringIOWithoutClosing()
-        a = LineOnlyTester()
-        a.makeConnection(protocol.FileWrapper(t))
-        for c in self.buffer:
-            a.dataReceived(c)
-        self.failUnlessEqual(a.received, self.buffer.split('\n')[:-1])
-
-    def testLineTooLong(self):
-        """
-        Test sending a line too long: it should close the connection.
-        """
-        t = StringIOWithoutClosing()
-        a = LineOnlyTester()
-        a.makeConnection(protocol.FileWrapper(t))
-        res = a.dataReceived('x'*200)
-        self.assertTrue(isinstance(res, error.ConnectionLost))
-
-
-
 class TestMixin:
 
     def connectionMade(self):
@@ -752,3 +783,28 @@
         """
         s = proto_helpers.StringTransport()
         self.assertRaises(TypeError, s.write, u'foo')
+
+
+def test_suite():
+    import twisted.test.test_protocols as this_module
+    import copy
+    suite = unittest.TestSuite()
+    loader = runner.TestLoader()
+    # Load all tests except LineOnlyReceiverTestCase.
+    for testClass in loader.findTestClasses(this_module):
+        if testClass is not LineOnlyReceiverTestCase:
+            suite.addTest(loader.loadClass(testClass))
+    # Add LineOnlyReceiverTestCase implementations tests.
+    lineReceiverImplemenations = [basic.LineReceiver, basic.LineOnlyReceiver]
+    lineReceiverImplemenationScenarios = [
+        {'lineReceiverClass': klass} for klass in lineReceiverImplemenations]
+    lineReceiverTests = loader.loadTestsFromTestCase(LineOnlyReceiverTestCase)
+    for scenario in lineReceiverImplemenationScenarios:
+        for test in lineReceiverTests:
+            new_test = copy.deepcopy(test)
+            new_test.id = lambda test=test, scenario=scenario: (
+                '%s(%s)' % (test.id(), scenario['lineReceiverClass'].__name__))
+            for key, value in scenario.items():
+                setattr(new_test, key, value)
+            suite.addTest(new_test)
+    return suite

# Begin bundle
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
