import os, re
from twisted.internet import defer
from twisted.internet.utils import getProcessOutputAndValue
import buildbot.changes.pb
from buildbot import scheduler
from buildbot.status import html
from buildbot.status import mail
from buildbot.status import words
from buildbot.status import client
from buildbot.buildslave import BuildSlave
from buildbot.process import  factory
from buildbot.process.factory import s
from buildbot.process.buildstep import BuildStep
from buildbot.steps.python_twisted import Trial, RemovePYCs
from buildbot.steps import shell
from buildbot.steps.source import SVN
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.process.process_twisted import TwistedBaseFactory

from buildbot.status.builder import SUCCESS, FAILURE, SKIPPED

class TrunkSVN(SVN):
    """
    Always fetch trunk@HEAD no matter what branch is requested.
    """
    def startVC(self, branch, revision, patch):
        return SVN.startVC(self, 'trunk', 'HEAD', patch)

class RevisionLimitSVN(SVN):
    """
    Behave as the usual SVN step, but if an attempt is made to update
    to a revision new than a specified value, just update to HEAD
    instead.  This is an incredible hack to avoid updating the
    Exponent repository to a revision given by a commit to the Divmod
    repository.
    """
    def __init__(self, maxRevision, **kw):
        self.maxRevision = maxRevision
        SVN.__init__(self, **kw)

    def startVC(self, branch, revision, patch):
        if revision is not None and int(revision) > self.maxRevision:
            revision = 'HEAD'
        return SVN.startVC(self, branch, revision, patch)


TWISTED_TRUNK_AT_HEAD = s(
    TrunkSVN, baseURL="svn://svn.twistedmatrix.com/svn/Twisted/",
    defaultBranch="trunk", mode='copy', workdir="build/Twisted")

DIVMOD_SOURCE = s(
    SVN, baseURL="http://divmod.org/svn/Divmod/", defaultBranch="trunk",
    mode='copy', workdir="build/Divmod")

DIVMOD_TRUNK_AT_HEAD = s(
      TrunkSVN, baseURL="http://divmod.org/svn/Divmod/",
      defaultBranch="trunk", mode='copy', workdir="build/Divmod")

EXPONENT_SOURCE = s(
    # The magic value passed to maxRevision is simply the current HEAD
    # revision for the Divmod repository at the time I added this
    # code.  In about three years when the Exponent repository catches
    # up, this will break.  BuildBot better have improved by
    # then. -exarkun
    RevisionLimitSVN, maxRevision=16887, baseURL="file:///svn/Exponent/",
    defaultBranch="trunk", mode='copy', workdir="build/Exponent")


def pathVar(prefix, *things):
    return ':'.join([prefix + t for t in things])


class GenericMasterShellCommand(BuildStep):
    parms = BuildStep.parms + ['command', 'args']

    def start(self):
        def success((out, err, code)):
            self.addCompleteLog('stdout', out)
            self.addCompleteLog('stderr', err)
            if code == 0:
                self.step_status.setColor('green')
                self.step_status.setText(['Succeeded'])
                self.finished(SUCCESS)
            else:
                self.step_status.setColor('red')
                self.step_status.setText(['Failed'])
                self.finished(FAILURE)
        getProcessOutputAndValue(self.command, self.args).addCallback(success).addErrback(self.failed)


class MasterShellCommand(GenericMasterShellCommand):
    def start(self):
        if self.build.getSourceStamp().branch is not None:
            self.step_status.setColor('green')
            self.step_status.setText(['Skipped', 'updating', 'staging', 'instance'])
            self.finished(SKIPPED)
            return
        self.step_status.setColor('yellow')
        self.step_status.setText(['Updating', 'staging', 'instance'])
        GenericMasterShellCommand.start(self)

TRIAL_FLAGS = ["--reporter=bwverbose"]
WARNING_FLAGS = ["--unclean-warnings"]
FORCEGC_FLAGS = ["--force-gc"]

class NevowBuildFactory(factory.BuildFactory):
    def __init__(self, python):
        steps = [
            shell.ShellCommand(command=['rm', '-rf', 'build'], workdir='.'),
            shell.ShellCommand(command=['mkdir', '-p', 'build/Divmod'], workdir='.'),
            DIVMOD_SOURCE,
            s(Trial,
              trial=trial,
              trialMode=["--reporter=bwverbose"],
              python=python,
              testpath="./Divmod/Nevow",
              tests=['nevow', 'formless'])]
        factory.BuildFactory.__init__(self, steps)



class NevowEasyInstallFactory(NevowBuildFactory):
    forceGarbageCollection = False

    def __init__(self, projectDir, uncleanWarnings, python,
                 twistedSourcePackage,
                 virtualenv, easy_install, moduleSearchPath,
                 reactor="select"):
        NevowBuildFactory.__init__(self, python)

        # Don't allow any UserWarnings.  In particular, this catches
        # one caused by setuptools if our setup.py isn't exactly
        # right.  See #2830.
        pythonExecutable = [python, "-W", "error::UserWarning"]

        self.uncleanWarnings = uncleanWarnings
        self.trialMode = None

        trial = "/usr/bin/trial"
        sitePackages = "installdir/lib/" + python + "/site-packages"
        setuptools = 'print "Using dummy setuptools"; raise ImportError("pretending setuptools is not installed")'

        # This doesn't presently work, and there does not appear to be
        # a way to make it work.
        if False:
            # Test easy_install of a project which depends on Nevow
            dependsOnNevow = (
                "import setuptools; "
                # Depend on a version newer than 0.9.26, because that's
                # the version packaged in Hardy, and setuptools will be
                # content with that and ignore the egg we just built if we
                # just depend on any old Nevow.
                "setuptools.setup(name='minproj_that_needs_nevow', install_requires=['Nevow>0.9.26'])")

            self.addStep(shell.ShellCommand, command=[
                    "sh", "-c",
                    "rm -rvf installdir nevow-copy; "
                    "PYTHONPATH=%(moduleSearchPath)s %(virtualenv)s -p %(python)s --no-site-packages installdir; "
                    "cp -a Divmod/Nevow nevow-copy; "
                    "cd nevow-copy; "
                    "%(python)s setup.py sdist; "
                    # Can't think of a better way for this to go.  Grab a
                    # pre-existing Twisted tarball from the slave
                    # environment and put it where easy_install will be
                    # able to find it to satisfy the install-time
                    # dependency Nevow has on it.
                    "cp %(twistedSourcePackage)s dist; "
                    "mkdir DependsOnNevow; "
                    "echo '%(dependsOnNevow)s' > DependsOnNevow/setup.py; "
                    "../installdir/bin/easy_install -v -v -v -H None -f dist/ DependsOnNevow; " % {
                                'python': python,
                                'virtualenv': virtualenv,
                                'twistedSourcePackage': twistedSourcePackage,
                                'moduleSearchPath': moduleSearchPath,
                                'dependsOnNevow': dependsOnNevow.replace("'", "'\\''")}],
                         haltOnFailure=True)
            self.addTrialStep(
                name="easy_install a reverse-depends package",
                reactor=reactor, flunkOnFailure=True,
                warnOnFailure=False, workdir="build/installdir",
                python=["bin/python"] + pythonExecutable[1:],
                trial=trial,
                testpath=None, tests=['nevow', 'formless'])


        # Test a setuptools-free installation from sdist
        self.addStep(shell.ShellCommand, command=[
                "sh", "-c",
                "rm -rvf installdir nevow-export; "
                "mkdir -p installdir/lib/%(python)s/site-packages; "
                "svn export Divmod/Nevow nevow-export; "
                "cd nevow-export; "
                "echo '%(setuptools)s' > setuptools.py; "
                "%(python)s setup.py sdist; "
                "cd dist; "
                "tar xzf Nevow-*.tar.gz; "
                "cd Nevow-*; "
                "mv ../../setuptools.py ./; "
                "%(python)s setup.py install --prefix `pwd`/../../../installdir; " % {
                            'setuptools': setuptools,
                            'python': python}], haltOnFailure=True)
        self.addTrialStep(
            name="install from sdist without setuptools",
            reactor=reactor, flunkOnFailure=True,
            warnOnFailure=False, workdir="build/installdir",
            python=pythonExecutable,
            trial=trial,
            testpath=None, tests=['nevow', 'formless'],
            env={"PYTHONPATH": "lib/" + python + "/site-packages"})

        # Test a setuptools-enabled installation from sdist
        self.addStep(shell.ShellCommand, command=[
                "sh", "-c",
                "rm -rvf installdir nevow-export; "
                "mkdir -p installdir/lib/%(python)s/site-packages; "
                "svn export Divmod/Nevow nevow-export; "
                "cd nevow-export; "
                "%(python)s setup.py sdist; "
                "cd dist; "
                "tar xzf Nevow-*.tar.gz; "
                "cd Nevow-*; "
                "export PYTHONPATH=$PYTHONPATH:`pwd`/../../../installdir/lib/%(python)s/site-packages; "
                "%(python)s setup.py install --prefix `pwd`/../../../installdir; " % {
                            'setuptools': setuptools,
                            'python': python}], haltOnFailure=True)
        self.addTrialStep(
            name="install from sdist with setuptools",
            reactor=reactor, flunkOnFailure=True,
            warnOnFailure=False, workdir="build/installdir",
            python=pythonExecutable,
            trial=trial,
            testpath=None, tests=['nevow', 'formless'],
            env={"PYTHONPATH": "lib/" + python + "/site-packages"})

        # Test a setuptools-free installation from a working copy
        self.addStep(shell.ShellCommand, command=[
                "sh", "-c",
                "rm -rvf installdir nevow-copy; "
                "mkdir -p installdir/lib/%(python)s/site-packages; "
                "cp -a Divmod/Nevow nevow-copy; "
                "cd nevow-copy; "
                "echo '%(setuptools)s' > setuptools.py; "
                "%(python)s setup.py install --prefix `pwd`/../installdir; " % {
                            'setuptools': setuptools,
                            'python': python}], haltOnFailure=True)
        self.addTrialStep(
            name="install from working copy without setuptools",
            reactor=reactor, flunkOnFailure=True,
            warnOnFailure=False, workdir="build/installdir",
            python=pythonExecutable,
            trial=trial,
            testpath=None, tests=['nevow', 'formless'],
            env={"PYTHONPATH": "lib/" + python + "/site-packages"})

        # Test a setuptools-enabled installation from a working copy
        self.addStep(shell.ShellCommand, command=[
                "sh", "-c",
                "rm -rvf installdir nevow-copy; "
                "mkdir -p installdir/lib/%(python)s/site-packages; "
                "cp -a Divmod/Nevow nevow-copy; "
                "export PYTHONPATH=${PWD}/%(sitePackages)s:%(moduleSearchPath)s; "
                "cd nevow-copy; "
                "%(python)s setup.py install --prefix `pwd`/../installdir; " % {
                            'setuptools': setuptools, 'python': python,
                            'moduleSearchPath': moduleSearchPath,
                            'sitePackages': sitePackages}],
                     haltOnFailure=True)
        self.addTrialStep(
            name="install from working copy with setuptools",
            reactor=reactor, flunkOnFailure=True,
            warnOnFailure=False, workdir="build/installdir",
            python=pythonExecutable,
            trial=trial,
            testpath=None, tests=['nevow', 'formless'],
            env={"PYTHONPATH": "lib/" + python + "/site-packages"})

        # Test an easy_install from a working copy
        self.addStep(shell.ShellCommand, command=[
                "sh", "-c",
                "rm -rvf installdir nevow-copy; "
                "mkdir -p installdir/lib/%(python)s/site-packages; "
                "cp -a Divmod/Nevow nevow-copy; "
                "export PYTHONPATH=${PWD}/%(sitePackages)s:%(moduleSearchPath)s; "
                "%(python)s %(easy_install)s -v -v -v --prefix `pwd`/installdir nevow-copy; " % {
                            'setuptools': setuptools, 'python': python,
                            'moduleSearchPath': moduleSearchPath,
                            'easy_install': easy_install,
                            'sitePackages': sitePackages}],
                     haltOnFailure=True)
        self.addTrialStep(
            name="easy_install from working copy",
            reactor=reactor, flunkOnFailure=True,
            warnOnFailure=False, workdir="build/installdir",
            python=pythonExecutable,
            trial=trial,
            testpath=None, tests=['nevow', 'formless'],
            env={"PYTHONPATH": "lib/" + python + "/site-packages"})




    def addTrialStep(self, **kw):
        if self.trialMode is not None:
            trialMode = self.trialMode
        else:
            trialMode = TRIAL_FLAGS

        if self.uncleanWarnings:
            trialMode = trialMode + WARNING_FLAGS
        if self.forceGarbageCollection:
            trialMode = trialMode + FORCEGC_FLAGS
        self.addStep(Trial, trialMode=trialMode, **kw)



class APIDocumentationFactory(factory.BuildFactory):
    """
    A build factory which generates the Divmod API documentation.
    """
    def __init__(self):
        factory.BuildFactory.__init__(self, [
                shell.ShellCommand(
                            command=['rm', '-rf', 'build'], workdir='.'),
                shell.ShellCommand(
                            command=['mkdir', '-p', 'build/Divmod'], workdir='.'),
                DIVMOD_SOURCE])
        self.addStep(
            shell.ShellCommand,
            command=["../../pydoctor/bin/pydoctor",
                     "--make-html",
                     "--project-name", "Divmod",
                     "--project-url", "http://divmod.org/",
                     "--add-package", "Nevow/formless",
                     "--add-package", "Nevow/nevow",
                     "--add-package", "Epsilon/epsilon",
                     "--add-package", "Vertex/vertex",
                     "--add-package", "Axiom/axiom",
                     "--add-package", "Mantissa/xmantissa",
                     "--add-package", "Sine/sine"],
            workdir='build/Divmod')
        self.addStep(
            shell.ShellCommand,
            command=["tar", "cjf", "apidocs.tar.bz2", "apidocs"],
            workdir='build/Divmod')
        self.addStep(
            FileUpload,
            slavesrc='apidocs.tar.bz2',
            masterdest='apidocs.tar.bz2',
            workdir='build/Divmod')
        self.addStep(
            GenericMasterShellCommand,
            command="tar", args=["xjf", "apidocs.tar.bz2"])
        self.addStep(
            GenericMasterShellCommand,
            command="mv", args=["public_html/apidocs", "public_html/old-apidocs"])
        self.addStep(
            GenericMasterShellCommand,
            command="mv", args=["apidocs", "public_html/apidocs"])
        self.addStep(
            GenericMasterShellCommand,
            command="rm", args=["-r", "public_html/old-apidocs"])


c = BuildmasterConfig = {}

c['projectName']   = "Divmod"
c['projectURL']    = "http://divmod.org/"
c['buildbotURL']   = "buildbot.divmod.org"
c['slavePortnum']  = 8020
c['debugPassword'] = "div42mod"

c['sources'] = [buildbot.changes.pb.PBChangeSource(prefix='trunk')]

trial = '/usr/bin/trial'

class DivmodBuildFactory(factory.BuildFactory):
    def __init__(self, steps):
        factory.BuildFactory.__init__(
            self,
            # This really shouldn't be necessary, but the source step
            # *will* fail if the build directory doesn't already
            # exist.
            [shell.ShellCommand(command=['rm', '-rf', 'build'], workdir='.'),
             shell.ShellCommand(command=['mkdir', '-p', 'build/Divmod'], workdir='.'),
             DIVMOD_SOURCE,
             ] + steps)


class VertexBuildFactory(DivmodBuildFactory):
    def __init__(self, python):
        steps = [
            s(Trial,
              python=python,
              testpath=pathVar('Divmod/', 'Epsilon', 'Vertex'),
              trial=trial,
              trialMode=["--reporter=bwverbose"], tests=["vertex"])]
        DivmodBuildFactory.__init__(self, steps)



class PyflakesBuildFactory(DivmodBuildFactory):
    def __init__(self, python):
        steps = [
            s(Trial,
              trialMode=["--reporter=bwverbose"],
              python=python,
              trial=trial,
              testpath=pathVar('Divmod/', 'Pyflakes'),
              tests=["pyflakes"])]
        DivmodBuildFactory.__init__(self, steps)



class QuotientBuildFactory(DivmodBuildFactory):
    def __init__(self, python, env, buildTrigger):
        env = env.copy()
        env.update({'COMBINATOR_PATHS': '.', 'COMBINATOR_PROJECTS': '.'})
        steps = [
            s(Trial,
              trialMode=["--reporter=bwverbose"],
              python=python,
              trial=trial,
              testpath=pathVar(
                          'Divmod/',
                          'Quotient', 'Mantissa', 'Vertex', 'Epsilon', 'Axiom', 'Nevow',
                          'Sine', 'Hyperbola', 'Reverend', 'Imaginary',
                          'Imaginary/ExampleGame', 'Combinator'),
              tests=["axiom", "combinator", "epsilon", "xmantissa",
                     "xquotient", "reverend", "sine", "hyperbola", "imaginary",
                     "examplegame"],
              env=env, timeout=3600)]
        if buildTrigger:
            steps.append(
                s(MasterShellCommand,
                  command="ssh",
                  args=["staging@ampere.divmod.com", "./trunk-build.sh Divmod"]))
        DivmodBuildFactory.__init__(self, steps)


tts = [
    shell.ShellCommand(command=['rm', '-rf', 'build'], workdir='.'),
    shell.ShellCommand(command=['mkdir', '-p', 'build/Divmod'], workdir='.'),
    TWISTED_TRUNK_AT_HEAD,
    DIVMOD_SOURCE,
    s(Trial, trialMode=["--reporter=bwverbose", "--testmodule"],
      trial=trial,
      python="python2.4",
      testpath='./Twisted:' + pathVar(
          'Divmod/', 'Quotient', 'Mantissa', 'Vertex', 'Epsilon', 'Axiom',
          'Nevow', 'Sine', 'Hyperbola', 'Pyflakes', 'Reverend', 'Imaginary',
          'Imaginary/ExampleGame', 'Combinator'),
      tests=['Divmod/Divmod.pth'],
      env={'COMBINATOR_PATHS': '.', 'COMBINATOR_PROJECTS': '.'},
      timeout=3600),
    ]

wslite = [
    DIVMOD_SOURCE,
    s(Trial, trialMode=["--reporter=bwverbose"],
      testpath='./Divmod/Epsilon;./Divmod/Axiom;./Divmod/Combinator',
      tests=['combinator', 'epsilon', 'axiom'],
      env={'COMBINATOR_PATHS': '.', 'COMBINATOR_PROJECTS': '.'},
      timeout=3600),
    ]

xs = [
    shell.ShellCommand(command=['rm', '-rf', 'build'], workdir='.'),
    shell.ShellCommand(command=['mkdir', '-p', 'build/Divmod'], workdir='.'),
    DIVMOD_TRUNK_AT_HEAD,
    EXPONENT_SOURCE,
    s(Trial,
      trialMode=["--reporter=bwverbose"],
      testpath='/var/run/buildbot/Twisted:' + pathVar(
        'Divmod/',
        'Quotient', 'Mantissa', 'Vertex', 'Epsilon', 'Axiom', 'Nevow',
        'Blendix') + ':' + pathVar('Exponent/', 'Blendix', 'Derivative'),
      tests=['blendix', 'derivative']),
    s(MasterShellCommand,
      command="ssh",
      args=["staging@ampere.divmod.com", "./trunk-build.sh Exponent"]),
    ]


blendixFlexSteps = [
    shell.ShellCommand(command=['rm', '-rf', 'build'], workdir='.'),
    shell.ShellCommand(command=['mkdir', '-p', 'build/Divmod'], workdir='.'),
    DIVMOD_TRUNK_AT_HEAD,
    EXPONENT_SOURCE,
    s(shell.ShellCommand,
      workdir="build/Exponent/Blendix/Flex",
      env={'PYTHONPATH': pathVar('../../../Divmod/', 'Nevow', 'Epsilon', 'Axiom', 'Vertex', 'Mantissa')},
      command=["python", "build-and-test.py"]),
    ]

wflite   = factory.BuildFactory(wslite)
ttf   = factory.BuildFactory(tts)

xf   = factory.BuildFactory(xs)

c['builders'] = [
                 {'name': 'divmod-api-docs',
                  'slavenames': ['q-exponent'],
                  'builddir': 'divmod-api-docs',
                  'factory': APIDocumentationFactory(),
                 },
                 { 'name':      'linux32-py2.4-divmod',
                   'slavenames': ['divmod-bigdogvm1'],
                   'builddir': 'q-linux',
                   'factory': QuotientBuildFactory(
                               "python2.4",
                               {'PYTHONPATH': '/var/lib/buildbot/lib/python2.5/site-packages'},
                               True),
                 },
                 { 'name':      'linux32-py2.5-divmod',
                   'slavenames': ['divmod-bigdogvm1'],
                   'builddir': 'linux32-py2.5-divmod',
                   'factory': QuotientBuildFactory(
                               "python2.5",
                               {'PYTHONPATH': '/var/lib/buildbot/lib/python2.5/site-packages'},
                               False),
                 },
                 { 'name':      'linux32-py2.6-divmod',
                   'slavenames': ['bot-bigdog24-vm2'],
                   'builddir':  'linux32-py2.6-divmod',
                   'factory':    QuotientBuildFactory("python2.6", {}, False),
                 },
                 { 'name':      'linux32-py2.4-vertex',
                   'slavenames': ['twisted-trunk'],
                   'builddir':  'linux32-py2.4-vertex',
                   'factory':   VertexBuildFactory("python2.4"),
                 },
                 { 'name':      'linux32-py2.6-vertex',
                   'slavenames': ['bot-bigdog24-vm2'],
                   'builddir':  'linux32-py2.6-vertex',
                   'factory':   VertexBuildFactory("python2.6"),
                 },
                 { 'name':      'twisted-trunk',
                   'slavenames': ['divmod-bigdogvm1'],
                   'builddir':  'twisted-trunk',
                   'factory':    ttf,
                 },
                 { 'name':      'windows-lite',
                   'slavename': 'q-windows',
                   'builddir':  'windows-lite',
                   'factory':   wflite,
                 },
                 { 'name':       'linux32-py2.4-exponent',
                   'slavenames': ['q-exponent'],
                   'builddir':   'linux32-py2.4-exponent',
                   'factory':   xf,
                 },
                 { 'name':        'linux32-blendix-client',
                   'slavenames':  ['bot-ampere-flex'],
                   'builddir':   'linux32-blendix-client',
                   'factory':   factory.BuildFactory(blendixFlexSteps),
                 },
                 { 'name':      'linux32-py2.4-nevow',
                   'slavenames': ['twisted-trunk'],
                   'builddir':  'q-nevow23',
                   'factory':    NevowBuildFactory("python2.4"),
                 },
                 { 'name':      'linux32-py2.5-nevow',
                   'slavenames': ['twisted-trunk'],
                   'builddir':  'q-nevow',
                   'factory':    NevowBuildFactory("python2.5"),
                 },
                 { 'name':      'linux32-py2.6-nevow',
                   'slavenames': ['bot-bigdog24-vm2'],
                   'builddir':  'linux32-py2.6-nevow',
                   'factory':    NevowBuildFactory("python2.6"),
                 },
                 { 'name':      'winxp32-py2.5-nevow',
                   'slavenames': ['allmydata-win32'],
                   'builddir':  'allmydata-win32-nevow',
                   'factory':   factory.BuildFactory([
                                   DIVMOD_SOURCE,
                                   s(Trial,
                                     trialMode=["--reporter=bwverbose"],
                                     testpath="./Divmod/Nevow",
                                     tests=['nevow', 'formless']),
                                   ]),
                 },
                 {'name': 'linux32-py2.4-nevowinstall',
                  'slavenames': ['twisted-trunk'],
                  'builddir': 'linux32-py2.4-nevowinstall',
                  'factory': NevowEasyInstallFactory(
                          "Nevow", False, "python2.4",
                          "/var/lib/buildbot/packages/Twisted-8.2.0.tar.bz2",
                          "/var/lib/buildbot/bin/virtualenv",
                          # Le sigh.  Apologies, but I don't see a
                          # better way to make sure the
                          # locally-installed version of setuptools
                          # (required, due to a bug in the version
                          # packaged in Hardy) gets used. -exarkun
                          "/var/lib/buildbot/bin/easy_install-2.4",
                          "/var/lib/buildbot/lib/python2.4/site-packages"),
                 },
                 {'name': 'linux32-py2.5-nevowinstall',
                  'slavenames': ['twisted-trunk'],
                  'builddir': 'q-nevowinstall',
                  'factory': NevowEasyInstallFactory(
                      "Nevow", False, "python2.5",
                      "/var/lib/buildbot/packages/Twisted-8.2.0.tar.bz2",
                      "/var/lib/buildbot/bin/virtualenv",
                      "/var/lib/buildbot/bin/easy_install-2.5",
                      "/var/lib/buildbot/lib/python2.5/site-packages"),
                 },
                 {'name': 'linux32-py2.4-pyflakes',
                  'slavenames': ['divmod-bigdogvm1'],
                  'builddir': 'linux32-py2.4-pyflakes',
                  'factory': PyflakesBuildFactory("python2.4"),
                 },
                 {'name': 'linux32-py2.5-pyflakes',
                  'slavenames': ['divmod-bigdogvm1'],
                  'builddir': 'linux32-py2.5-pyflakes',
                  'factory': PyflakesBuildFactory("python2.5"),
                 },
                 {'name': 'linux32-py2.6-pyflakes',
                  'slavenames': ['bot-bigdog24-vm2'],
                  'builddir': 'linux32-py2.6-pyflakes',
                  'factory': PyflakesBuildFactory("python2.6"),
                 },
                ]

def makeChangeCategorizer(projectExpression):
    projectPattern = re.compile(projectExpression)
    def fileIsImportant(change):
        print 'Checking for importance against %r' % (projectExpression,)
        print 'Filenames are %r' % (change.files,)
        for fName in change.files:
            if projectPattern.match(fName) is not None:
                return True
        return False
    return fileIsImportant

# Builders triggered by a change to Pyflakes
pyflakesBuilders = [
    "linux32-py2.4-pyflakes", "linux32-py2.5-pyflakes",
    "linux32-py2.6-pyflakes",
    ]

# Scheduler which will trigger the pyflakes builders
pyflakesFile = makeChangeCategorizer('/Pyflakes/.*')
pyflakesScheduler = scheduler.Scheduler(
    name='Pyflakes', branch=None, treeStableTimer=0,
    builderNames=pyflakesBuilders,
    fileIsImportant=pyflakesFile)

# Builders triggered by a change to Exponent
exponentBuilders = ["linux32-py2.4-exponent"]

# Builders triggered by a change to Divmod (minus Nevow)
divmodBuilders = exponentBuilders + [
    "linux32-py2.4-divmod", "linux32-py2.5-divmod", "linux32-py2.6-divmod",
    "twisted-trunk", "windows-lite"]

# Builders triggered by a change to Vertex
vertexBuilders = divmodBuilders + [
    "linux32-py2.4-vertex", "linux32-py2.6-vertex"]

# Builders triggered by a change to Nevow
nevowBuilders = divmodBuilders + [
    "linux32-py2.4-nevow", "linux32-py2.5-nevow", "linux32-py2.6-nevow",
    "linux32-py2.4-nevowinstall",
    "linux32-py2.5-nevowinstall",
    "winxp32-py2.5-nevow", ]

nevowFile = makeChangeCategorizer('/Nevow/.*')
nevowScheduler = scheduler.Scheduler(
    name='Nevow', branch=None, treeStableTimer=0,
    builderNames=nevowBuilders,
    fileIsImportant=nevowFile)

# Epsilon is included in this categorizer because Vertex depends on
# Epsilon.  Nothing else is included because Vertex doesn't depend on
# anything else.
vertexFile = makeChangeCategorizer('/(Epsilon|Vertex)/.*')
vertexScheduler = scheduler.Scheduler(
    name='Vertex', branch=None, treeStableTimer=0,
    builderNames=vertexBuilders,
    fileIsImportant=vertexFile)

divmodFile = makeChangeCategorizer(
    '/(Axiom|Combinator|Hyperbola|Imaginary|Mantissa|Prime'
    '|Quotient|Reverend|Sine)/.*')
divmodScheduler = scheduler.Scheduler(
    name='Divmod', branch=None, treeStableTimer=0,
    builderNames=divmodBuilders,
    fileIsImportant=divmodFile)

exponentFile = makeChangeCategorizer(
    '/(Blendix|Derivative|exponent)/(?!Flex).*')
exponentScheduler = scheduler.Scheduler(
    name='Exponent', branch=None, treeStableTimer=0,
    builderNames=exponentBuilders,
    fileIsImportant=exponentFile)

blendixClientFile = makeChangeCategorizer('/Blendix/Flex/.*')
blendixClientScheduler = scheduler.Scheduler(
    name='Blendix-Client', branch=None, treeStableTimer=0,
    builderNames=["linux32-blendix-client"],
    fileIsImportant=blendixClientFile)

c['schedulers'] = [
    pyflakesScheduler, nevowScheduler, vertexScheduler, divmodScheduler,
    exponentScheduler, blendixClientScheduler,
    scheduler.Scheduler(
            name='Divmod-API-Docs', branch=None, treeStableTimer=0,
            builderNames=["divmod-api-docs"])]

c['slaves'] = []

c['status'] = [
    html.Waterfall(http_port=8004),
    words.IRC(host="irc.freenode.net", port=8000, nick="build",
              channels=["#divmod", "#divmod-fanclub"]),
    client.PBListener(8042),
    ]
