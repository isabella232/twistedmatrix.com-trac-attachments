Index: twisted/internet/_pollingfile.py
===================================================================
--- twisted/internet/_pollingfile.py	(revision 38342)
+++ twisted/internet/_pollingfile.py	(working copy)
@@ -10,6 +10,7 @@
 from zope.interface import implements
 
 from twisted.internet.interfaces import IConsumer, IPushProducer
+from twisted.python.compat import lazyByteSlice
 
 
 MIN_TIMEOUT = 0.000000001
@@ -268,7 +269,13 @@
 
 
     def checkWork(self):
-        numBytesWritten = 0
+        """
+        Called by C{_PollingTimer()} to process the write buffers and detect
+        closure of the pipe. An error normally indicates that the connection
+        has been lost.
+
+        @return: number of bytes written to the pipe, can be zero
+        """
         if not self.outQueue:
             if self.disconnecting:
                 self.writeConnectionLost()
@@ -277,24 +284,31 @@
                 win32file.WriteFile(self.writePipe, '', None)
             except pywintypes.error:
                 self.writeConnectionLost()
-                return numBytesWritten
+                return 0
+        try:
+            _, writeBufferSize, _, _ = win32pipe.GetNamedPipeInfo(self.writePipe)
+        except pywintypes.error:
+            self.writeConnectionLost()
+            return 0
+        totalBytesWritten = 0
         while self.outQueue:
             data = self.outQueue.pop(0)
-            errCode = 0
+            # limit write to size of pipe write buffer, see #5365
+            buffer_ = lazyByteSlice(data, 0, writeBufferSize)
             try:
-                errCode, nBytesWritten = win32file.WriteFile(self.writePipe,
-                                                             data, None)
-            except win32api.error:
+                _, bytesWritten = win32file.WriteFile(self.writePipe,
+                                                      buffer_, None)
+            except pywintypes.error:
                 self.writeConnectionLost()
                 break
             else:
-                # assert not errCode, "wtf an error code???"
-                numBytesWritten += nBytesWritten
-                if len(data) > nBytesWritten:
-                    self.outQueue.insert(0, data[nBytesWritten:])
+                totalBytesWritten += bytesWritten
+                if len(data) > bytesWritten:
+                    # insert unwritten data back into the buffer
+                    self.outQueue.insert(0, data[bytesWritten:])
                     break
         else:
             resumed = self.bufferEmpty()
             if not resumed and self.disconnecting:
                 self.writeConnectionLost()
-        return numBytesWritten
+        return totalBytesWritten
Index: twisted/internet/test/test_pollingfile.py
===================================================================
--- twisted/internet/test/test_pollingfile.py	(revision 38342)
+++ twisted/internet/test/test_pollingfile.py	(working copy)
@@ -4,17 +4,80 @@
 """
 Tests for L{twisted.internet._pollingfile}.
 """
+import os
 
 from twisted.python.runtime import platform
 from twisted.trial.unittest import TestCase
+from twisted.protocols import basic
+from twisted.internet.test.reactormixins import ReactorBuilder
 
+
+
 if platform.isWindows():
+    import win32pipe
+    import win32security
+
     from twisted.internet import _pollingfile
+
+    from twisted.internet._pollingfile import _PollingTimer
+    _skipNotWindows = None
 else:
-    _pollingfile = None
+    _skipNotWindows = "Test will run only on Windows."
+    _PollingTimer = object
+ 
+ 
+ 
+class PipeRunner(_PollingTimer):
+    """
+    Builds, initializes and runs a pair of read/write pipes.
+    """
+    def __init__(self, pipeSize, doneReadCB, doneWriteCB, receivedCB, reactor):
+        _PollingTimer.__init__(self, reactor)
+        sAttrs = win32security.SECURITY_ATTRIBUTES()
+        sAttrs.bInheritHandle = 1
+        hRead, hWrite = win32pipe.CreatePipe(sAttrs, pipeSize)
+        self.reader = _pollingfile._PollableReadPipe(hRead, receivedCB, doneReadCB)
+        self.writer = _pollingfile._PollableWritePipe(hWrite, doneWriteCB)
+        self._addPollableResource(self.reader)
+        self._addPollableResource(self.writer)
 
 
 
+class TestPollablePipes(ReactorBuilder):
+    """
+    Tests for L{_pollingfile._PollableWritePipe} and
+    L{_pollingfile._PollableReadPipe}.
+    """
+    def test_pipeBufferSize(self):
+        """
+        This test times-out with the existing _pollingfile implementation.
+
+        See Ticket #5365: _pollingfile assumes that (win32 API) WriteFile()
+        will allow a partial write, but WriteFile() writes either all or 
+        nothing. Which means if you try to write too much at once in a pipe's
+        buffer, the _PollableWritePipe sits there doing nothing.
+        """
+        self.timeout = 15.0             # shorten test timeout
+        pipeSize     = 512              # set a small pipe buffer size
+        testMessage  = '%02048d' % 0    # send a long messages
+
+        class TestProtocol(basic.LineReceiver):
+            def lineReceived(self, line):
+                self.testResponse = line
+                transport.writer.close()
+
+        reactor = self.buildReactor()
+        r, w = lambda: reactor.stop(), lambda: None
+        protocol = TestProtocol()
+        transport = PipeRunner(pipeSize, r, w, protocol.dataReceived, reactor)
+        transport.writer.write(testMessage+'\r\n')
+        self.runReactor(reactor)
+        self.assertEqual(testMessage, protocol.testResponse)
+
+
+globals().update(TestPollablePipes.makeTestCaseClasses())
+
+
 class TestPollableWritePipe(TestCase):
     """
     Tests for L{_pollingfile._PollableWritePipe}.
@@ -41,6 +104,7 @@
 
 
 
+if _skipNotWindows:
+    TestPollablePipes.skip = skipMessage
+    TestPollableWritePipeUnicode.skip = skipMessage
 
-if _pollingfile is None:
-    TestPollableWritePipe.skip = "Test will run only on Windows."
