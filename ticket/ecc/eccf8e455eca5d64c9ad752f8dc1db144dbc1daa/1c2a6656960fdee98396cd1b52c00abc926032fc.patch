commit bade4ae84e79d574278bab956457c0af8ad20f37
Author: Dustin J. Mitchell <dustin@zmanda.com>
Date:   Mon Aug 15 14:28:12 2011 -0500

    fix whitespace in _aybabtu, expand and document tests

diff --git a/twisted/persisted/styles.py b/twisted/persisted/styles.py
index fb85cd9..0744875 100644
--- a/twisted/persisted/styles.py
+++ b/twisted/persisted/styles.py
@@ -158,7 +158,7 @@ def _aybabtu(c):
     """
     # begin with two classes that should *not* be included in the
     # final result
-    l = [ c, Versioned ]
+    l = [c, Versioned]
     for b in inspect.getmro(c):
         if b not in l and issubclass(b, Versioned):
             l.append(b)
diff --git a/twisted/test/test_persisted.py b/twisted/test/test_persisted.py
index 8bbc7d5..7aeb970 100644
--- a/twisted/test/test_persisted.py
+++ b/twisted/test/test_persisted.py
@@ -135,20 +135,38 @@ class VersionedDiamondSubClass(VersionedSubSubClass, SecondVersionedSubClass):
 
 
 class AybabtuTests(unittest.TestCase):
+    """
+    L{styles._aybabtu} should get all of classes in the inheritance hierarchy
+    of its argument that are strictly between L{Versioned} and the class
+    itself.
+    """
 
-
-    def testAybabtu(self):
-        """
-        Test styles._aybabtu, including edge cases.
-        """
+    def test_aybabtu_strict_empty(self):
+        """_aybabtu of L{Versioned} itself is an empty set"""
         self.assertEqual(styles._aybabtu(styles.Versioned), [])
+
+
+    def test_aybabtu_strict_subclass(self):
+        """there are no classes I{between} L{VersionedSubClass} and
+        L{Versioned}, so L{styles._aybabtu} returns an empty set"""
         self.assertEqual(styles._aybabtu(VersionedSubClass), [])
+
+
+    def test_aybabtu_subsubclass(self):
+        """With a sub-sub-class of L{Versioned}, L{styles._aybabtu} returns the
+        intervening subclass."""
         self.assertEqual(styles._aybabtu(VersionedSubSubClass),
             [VersionedSubClass])
+
+
+    def test_aybabtu_strict(self):
+        """For a diamond-shaped inheritance graph, L{styles._aybabtu} returns
+        I{both} intermediate subclasses."""
         self.assertEqual(styles._aybabtu(VersionedDiamondSubClass),
             [VersionedSubSubClass, VersionedSubClass, SecondVersionedSubClass])
 
 
+
 class MyEphemeral(styles.Ephemeral):
 
     def __init__(self, x):
