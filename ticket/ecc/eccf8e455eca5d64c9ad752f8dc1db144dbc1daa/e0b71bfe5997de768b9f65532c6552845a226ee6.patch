commit a9e6c4f40dee3e8b6e1f27344b9e5d426851ee67
Author: Dustin J. Mitchell <dustin@mozilla.com>
Date:   Wed Aug 17 13:58:15 2011 -0500

    _aybabtu: fix docstrings' refs to `set`, don't test order of results

diff --git a/twisted/persisted/styles.py b/twisted/persisted/styles.py
index 0744875..071daf3 100644
--- a/twisted/persisted/styles.py
+++ b/twisted/persisted/styles.py
@@ -154,7 +154,7 @@ def _aybabtu(c):
     L{twisted.python.reflect.allYourBase} function.
 
     @param c: a class
-    @returns: list of classes
+    @returns: list of classes, in unspecified order
     """
     # begin with two classes that should *not* be included in the
     # final result
diff --git a/twisted/test/test_persisted.py b/twisted/test/test_persisted.py
index 7aeb970..01b7722 100644
--- a/twisted/test/test_persisted.py
+++ b/twisted/test/test_persisted.py
@@ -142,28 +142,37 @@ class AybabtuTests(unittest.TestCase):
     """
 
     def test_aybabtu_strict_empty(self):
-        """_aybabtu of L{Versioned} itself is an empty set"""
+        """
+        _aybabtu of L{Versioned} itself is an empty list
+        """
         self.assertEqual(styles._aybabtu(styles.Versioned), [])
 
 
     def test_aybabtu_strict_subclass(self):
-        """there are no classes I{between} L{VersionedSubClass} and
-        L{Versioned}, so L{styles._aybabtu} returns an empty set"""
+        """
+        there are no classes I{between} L{VersionedSubClass} and
+        L{Versioned}, so L{styles._aybabtu} returns an empty list
+        """
         self.assertEqual(styles._aybabtu(VersionedSubClass), [])
 
 
     def test_aybabtu_subsubclass(self):
-        """With a sub-sub-class of L{Versioned}, L{styles._aybabtu} returns the
-        intervening subclass."""
+        """
+        With a sub-sub-class of L{Versioned}, L{styles._aybabtu} returns only
+        the intervening subclass.
+        """
         self.assertEqual(styles._aybabtu(VersionedSubSubClass),
             [VersionedSubClass])
 
 
     def test_aybabtu_strict(self):
-        """For a diamond-shaped inheritance graph, L{styles._aybabtu} returns
-        I{both} intermediate subclasses."""
-        self.assertEqual(styles._aybabtu(VersionedDiamondSubClass),
-            [VersionedSubSubClass, VersionedSubClass, SecondVersionedSubClass])
+        """
+        For a diamond-shaped inheritance graph, L{styles._aybabtu} returns
+        I{both} intermediate subclasses, although order is unspecified.
+        """
+        self.assertEqual(sorted(styles._aybabtu(VersionedDiamondSubClass)),
+            sorted([VersionedSubSubClass, VersionedSubClass,
+                    SecondVersionedSubClass]))
 
 
 
