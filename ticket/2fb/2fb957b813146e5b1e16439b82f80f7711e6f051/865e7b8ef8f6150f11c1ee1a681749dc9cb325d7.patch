Index: twisted/test/test_jelly.py
===================================================================
--- twisted/test/test_jelly.py	(revision 87)
+++ twisted/test/test_jelly.py	(working copy)
@@ -8,6 +8,11 @@
 
 import datetime, types
 
+try:
+    import decimal
+except ImportError:
+    decimal = None
+
 from twisted.spread import jelly, pb
 
 from twisted.trial import unittest
@@ -107,6 +112,15 @@
         self.assertNotIdentical(input, output)
 
 
+    if decimal:
+        def testDecimal(self):
+            input = [decimal.Decimal('9.95'), decimal.Decimal(0)]
+            c = jelly.jelly(input)
+            output = jelly.unjelly(c)
+            self.assertEquals(input, output)
+            self.assertNotIdentical(input, output)
+
+
     def testSimple(self):
         """
         simplest test case
Index: twisted/spread/jelly.py
===================================================================
--- twisted/spread/jelly.py	(revision 87)
+++ twisted/spread/jelly.py	(working copy)
@@ -81,6 +81,11 @@
 import datetime
 from types import BooleanType
 
+try:
+    import decimal
+except ImportError:
+    decimal = None
+
 from new import instance
 from new import instancemethod
 from zope.interface import implements
@@ -454,6 +459,8 @@
                 return ['timedelta', '%s %s %s' % (obj.days, obj.seconds, obj.microseconds)]
             elif objType is ClassType or issubclass(objType, type):
                 return ['class', qual(obj)]
+            elif decimal and objType is decimal.Decimal:
+                return ['decimal', str(obj)]
             else:
                 preRef = self._checkMutable(obj)
                 if preRef:
@@ -585,6 +592,10 @@
         else:
             return Unpersistable(exp[0])
 
+    if decimal:
+        def _unjelly_decimal( self, exp ):
+            return decimal.Decimal( exp[0] )
+
     def _unjelly_boolean(self, exp):
         if BooleanType:
             assert exp[0] in ('true', 'false')
@@ -815,6 +826,8 @@
                              "NoneType": 1}
         if hasattr(types, 'UnicodeType'):
             self.allowedTypes['unicode'] = 1
+        if decimal:
+            self.allowedTypes['decimal'] = 1
         self.allowedModules = {}
         self.allowedClasses = {}
 


