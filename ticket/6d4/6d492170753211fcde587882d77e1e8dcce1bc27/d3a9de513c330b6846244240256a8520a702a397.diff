Index: twisted/test/time_helpers.py
===================================================================
--- twisted/test/time_helpers.py	(revision 26783)
+++ twisted/test/time_helpers.py	(working copy)
@@ -8,6 +8,13 @@
 instead.
 """
 
+import warnings
+
+warnings.warn(
+    "twisted.test.time_helpers is deprecated since 9.0.0.",
+    category=DeprecationWarning)
+
+
 class Clock(object):
     """
     A utility for monkey-patches various parts of Twisted to use a
Index: twisted/test/test_internet.py
===================================================================
--- twisted/test/test_internet.py	(revision 26783)
+++ twisted/test/test_internet.py	(working copy)
@@ -13,7 +13,7 @@
 from twisted.internet import reactor, protocol, error, abstract, defer
 from twisted.internet import interfaces, base
 
-from twisted.test.time_helpers import Clock
+from twisted.internet.task import Clock
 
 try:
     from twisted.internet import ssl
@@ -788,43 +788,40 @@
         reset or delayed.
         """
         clock = Clock()
-        clock.install()
-        try:
-            callbackTimes = [None, None]
 
-            def resetCallback():
-                callbackTimes[0] = clock()
+        callbackTimes = [None, None]
 
-            def delayCallback():
-                callbackTimes[1] = clock()
+        def resetCallback():
+            callbackTimes[0] = clock.seconds()
 
-            ireset = reactor.callLater(2, resetCallback)
-            idelay = reactor.callLater(3, delayCallback)
+        def delayCallback():
+            callbackTimes[1] = clock.seconds()
 
-            clock.pump(reactor, [0, 1])
+        ireset = clock.callLater(2, resetCallback)
+        idelay = clock.callLater(3, delayCallback)
 
-            self.assertIdentical(callbackTimes[0], None)
-            self.assertIdentical(callbackTimes[1], None)
+        clock.pump([0, 1])
 
-            ireset.reset(2) # (now)1 + 2 = 3
-            idelay.delay(3) # (orig)3 + 3 = 6
+        self.assertIdentical(callbackTimes[0], None)
+        self.assertIdentical(callbackTimes[1], None)
 
-            clock.pump(reactor, [0, 1])
+        ireset.reset(2) # (now)1 + 2 = 3
+        idelay.delay(3) # (orig)3 + 3 = 6
 
-            self.assertIdentical(callbackTimes[0], None)
-            self.assertIdentical(callbackTimes[1], None)
+        clock.pump([0, 1])
 
-            clock.pump(reactor, [0, 1])
+        self.assertIdentical(callbackTimes[0], None)
+        self.assertIdentical(callbackTimes[1], None)
 
-            self.assertEquals(callbackTimes[0], 3)
-            self.assertEquals(callbackTimes[1], None)
+        clock.pump([0, 1])
 
-            clock.pump(reactor, [0, 3])
-            self.assertEquals(callbackTimes[1], 6)
-        finally:
-            clock.uninstall()
+        self.assertEquals(callbackTimes[0], 3)
+        self.assertEquals(callbackTimes[1], None)
 
+        clock.pump([0, 3])
+        self.assertEquals(callbackTimes[1], 6)
 
+
     def testCallLaterTime(self):
         d = reactor.callLater(10, lambda: None)
         try:
