Index: twisted/test/test_reflect.py
===================================================================
--- twisted/test/test_reflect.py	(revision 33496)
+++ twisted/test/test_reflect.py	(working copy)
@@ -781,3 +781,30 @@
         self.callDeprecated(
             (Version("Twisted", 11, 0, 0), "inspect.getmro"),
             reflect.accumulateBases, DeprecationTestCase, l, None)
+
+    def test_settable(self):
+        """
+        Test deprecation of L{reflect.Settable}.
+        """
+        settable = reflect.Settable()
+        warnings = self.flushWarnings([self.test_settable])
+        self.assertEqual(warnings[0]['message'], "twisted.python.reflect.Settable was deprecated in Twisted 12.1.0")
+        self.assertEqual(len(warnings), 1)
+
+    def test_accessorType(self):
+        """
+        Test deprecation of L{reflect.AccessorType}
+        """
+        accessor = reflect.AccessorType('',(),{})
+        warnings = self.flushWarnings([self.test_accessorType])
+        self.assertEqual(warnings[0]['message'], "twisted.python.reflect.AccessorType was deprecated in Twisted 12.1.0")
+        self.assertEqual(len(warnings), 1)
+
+    def test_summer(self):
+        """
+        Test deprecation of L{reflect.Summer}.
+        """
+        summer = reflect.Summer()
+        warnings = self.flushWarnings([self.test_summer])
+        self.assertEqual(warnings[0]['message'], "twisted.python.reflect.Summer was deprecated in Twisted 12.1.0")
+        self.assertEqual(len(warnings), 1)
Index: twisted/python/reflect.py
===================================================================
--- twisted/python/reflect.py	(revision 33496)
+++ twisted/python/reflect.py	(working copy)
@@ -35,7 +35,7 @@
 from twisted.python.versions import Version
 
 
-
+@deprecated(Version("Twisted", 12, 1, 0))
 class Settable:
     """
     A mixin class for syntactic sugar.  Lets you assign attributes by
@@ -52,7 +52,7 @@
             setattr(self,key,val)
         return self
 
-
+@deprecated(Version("Twisted", 12, 1, 0))
 class AccessorType(type):
     """Metaclass that generates properties automatically.
 
@@ -139,14 +139,13 @@
     #  -- itamar
 
     __metaclass__ = AccessorType
-
+    
     def reallySet(self, k, v):
         self.__dict__[k] = v
 
     def reallyDel(self, k):
         del self.__dict__[k]
 
-
 class Accessor:
     """
     Extending this class will give you explicit accessor methods; a
@@ -200,7 +199,7 @@
 # just in case
 OriginalAccessor = Accessor
 
-
+@deprecated(Version("Twisted", 12, 1, 0))
 class Summer(Accessor):
     """
     Extend from this class to get the capability to maintain 'related
