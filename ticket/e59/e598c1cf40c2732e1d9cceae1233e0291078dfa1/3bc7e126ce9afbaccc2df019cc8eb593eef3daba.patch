Index: twisted/python/reflect.py
===================================================================
--- twisted/python/reflect.py	(revision 33557)
+++ twisted/python/reflect.py	(working copy)
@@ -30,7 +30,7 @@
     from StringIO import StringIO
 
 from twisted.python.util import unsignedID
-from twisted.python.deprecate import deprecated
+from twisted.python.deprecate import deprecated, deprecatedModuleAttribute
 from twisted.python.deprecate import _fullyQualifiedName as fullyQualifiedName
 from twisted.python.versions import Version
 
@@ -44,6 +44,11 @@
     where you don't want to name a variable, but you do want to set
     some attributes; for example, C{X()(y=z,a=b)}.
     """
+
+    deprecatedModuleAttribute(Version("Twisted", 12, 1, 0),
+    "Settable is an implementation for Python 2.2 and earlier which are no "
+    "longer supported by Twisted.", "twisted.python.reflect", "Settable")
+
     def __init__(self, **kw):
         self(**kw)
 
@@ -75,6 +80,10 @@
 
     """
 
+    deprecatedModuleAttribute(Version("Twisted", 12, 1, 0),
+    "AccessorType is an implementation for Python 2.2 which is no longer "
+    "supported by Twisted.", "twisted.python.reflect", "AccessorType")
+    
     def __init__(self, name, bases, d):
         type.__init__(self, name, bases, d)
         accessors = {}
@@ -138,6 +147,10 @@
     # caused by it.
     #  -- itamar
 
+    deprecatedModuleAttribute(Version("Twisted", 12, 1, 0),
+    "PropertyAccessor is an implementation for Python 2.2 and earlier which "
+    "are no longer supported by Twisted.","twisted.python.reflect",
+    "PropertyAccessor")
     __metaclass__ = AccessorType
 
     def reallySet(self, k, v):
@@ -159,6 +172,10 @@
     This implementation is for Python 2.1.
     """
 
+    deprecatedModuleAttribute(Version("Twisted", 12, 1, 0),
+    "Accessor is an implementation for Python 2.1 which is no longer "
+    "supported by Twisted.", "twisted.python.reflect", "Accessor")
+
     def __setattr__(self, k,v):
         kstring='set_%s'%k
         if hasattr(self.__class__,kstring):
@@ -199,6 +216,9 @@
 
 # just in case
 OriginalAccessor = Accessor
+deprecatedModuleAttribute(Version("Twisted", 12, 1, 0),
+"OriginalAccessor is a reference to class twisted.python.reflect.Accessor "
+"which is deprecated.", "twisted.python.reflect", "OriginalAccessor")
 
 
 class Summer(Accessor):
@@ -214,6 +234,10 @@
     incremented, similiarly for the debit versions.
     """
 
+    deprecatedModuleAttribute(Version("Twisted", 12, 1, 0),
+    "Summer is a child class of twisted.python.reflect.Accessor which is " 
+    "deprecated.", "twisted.python.reflect", "Summer")
+
     def reallySet(self, k,v):
         "This method does the work."
         for sum in self.sums:
Index: twisted/test/test_reflect.py
===================================================================
--- twisted/test/test_reflect.py	(revision 33557)
+++ twisted/test/test_reflect.py	(working copy)
@@ -781,3 +781,82 @@
         self.callDeprecated(
             (Version("Twisted", 11, 0, 0), "inspect.getmro"),
             reflect.accumulateBases, DeprecationTestCase, l, None)
+
+    def lookForDeprecationWarning(self, testMethod, attributeName, warningMsg):
+        """
+        Test deprecation of attribute 'reflect.attributeName' by calling
+        'reflect.testMethod' and verifying the warning message 
+        'reflect.warningMsg'
+        
+        @param testMethod : Name of the offending function to be used with
+                            flushWarnings
+        @type testmethod : C{str}
+        
+        @param attributeName : Name of attribute to be checked for deprecation
+        @type attributeName : C{str}
+        
+        @param warningMsg : Deprecation warning message
+        @type warningMsg : C{str}
+       """
+        warningsShown = self.flushWarnings([testMethod]) 
+        self.assertEqual(len(warningsShown), 1)
+        self.assertIdentical(warningsShown[0]['category'], DeprecationWarning)
+        self.assertEqual(
+            warningsShown[0]['message'],
+            "twisted.python.reflect." + attributeName + " "
+            "was deprecated in Twisted 12.1.0: " + warningMsg + ".")
+
+    def test_settable(self):
+        """
+        Test deprecation of L{reflect.Settable}
+        """
+        reflect.Settable()
+        self.lookForDeprecationWarning(self.test_settable, "Settable",
+            "Settable is an implementation for Python 2.2 and earlier which "
+            "are no longer supported by Twisted")
+
+    def test_accessorType(self):
+        """
+        Test deprecation of L{reflect.AccessorType}
+        """
+        reflect.AccessorType(' ', ( ), { })
+        self.lookForDeprecationWarning(self.test_accessorType, "AccessorType",
+            "AccessorType is an implementation for "
+            "Python 2.2 which is no longer supported by Twisted")
+
+    def test_propertyAccessor(self):
+        """
+        Test deprecation of L{reflect.PropertyAccessor}
+        """
+        reflect.PropertyAccessor()
+        self.lookForDeprecationWarning(self.test_propertyAccessor,
+            "PropertyAccessor",
+            "PropertyAccessor is an implementation for Python 2.2 and earlier"
+            " which are no longer supported by Twisted")
+
+    def test_accessor(self):
+        """ 
+        Test deprecation of L{reflect.Accessor}
+        """
+        reflect.Accessor()
+        self.lookForDeprecationWarning(self.test_accessor, "Accessor",
+            "Accessor is an implementation for Python 2.1 which is no longer "
+            "supported by Twisted")
+
+    def test_originalAccessor(self):
+        """
+        Test deprecation of L{reflect.OriginalAccessor}
+        """
+        reflect.OriginalAccessor()
+        self.lookForDeprecationWarning(self.test_originalAccessor, 
+            "OriginalAccessor", "OriginalAccessor is a reference to class "
+            "twisted.python.reflect.Accessor which is deprecated")
+
+    def test_summer(self):
+        """
+        Test deprecation of L{reflect.Summer}
+        """
+        reflect.Summer()
+        self.lookForDeprecationWarning(self.test_summer, "Summer",
+            "Summer is a child class of twisted.python.reflect.Accessor which"
+            " is deprecated")
\ No newline at end of file
Index: twisted/topfiles/5451.removal
===================================================================
--- twisted/topfiles/5451.removal	(revision 0)
+++ twisted/topfiles/5451.removal	(revision 0)
@@ -0,0 +1 @@
+twisted.python.reflect's Settable, AccessorType, PropertyAccessor, Accessor, OriginalAccessor and Summer are now deprecated. 
\ No newline at end of file
