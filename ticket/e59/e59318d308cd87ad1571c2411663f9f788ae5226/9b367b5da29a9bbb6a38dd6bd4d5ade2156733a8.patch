Index: python/filepath.py
===================================================================
--- python/filepath.py	(revision 23090)
+++ python/filepath.py	(working copy)
@@ -362,6 +362,18 @@
     def siblingExtension(self, ext):
         return self.clonePath(self.path+ext)
 
+    def linkTo(self, linkFilePath):
+        """
+        Creates a symlink to self to at the path in the FilePath
+        linkFilePath.  Only works on posix systems due to its dependence on
+        os.symlink. Propagates OSErrors up from os.symlink if self does not 
+        exist, or linkFilePath.parent() does not exist, or linkFilePath 
+        already exists.
+
+        @param linkFilePath: a FilePath representing the link to be created
+        """
+        os.symlink(self.path, linkFilePath.path)
+
     def open(self, mode='r'):
         if self.alwaysCreate:
             assert 'a' not in mode, "Appending not supported when alwaysCreate == True"
Index: test/test_paths.py
===================================================================
--- test/test_paths.py	(revision 23090)
+++ test/test_paths.py	(working copy)
@@ -276,9 +276,27 @@
         self.failUnless(s4.isdir())
         self.failUnless(s3.isdir())
 
-    if not hasattr(os, "symlink"):
-        testSymbolicLink.skip = "Your platform does not support symbolic links."
+    def test_linkTo(self):
+        """
+        Verify that symlink creates a valid symlink that is both a link and
+        a file if its target is a file, or a directory if its target is a 
+        directory.
+        """
+        targetLinks = [ 
+            ( self.path.child("sub2"), self.path.child("sub2.link") ), 
+            ( self.path.child("sub2").child("file3.ext1"), 
+              self.path.child("file3.ext1.link") )
+            ]
+        for target, link in targetLinks:
+            target.linkTo(link)
+            self.failUnless(link.islink(), "This is a link")
+            self.assertEquals(link.isdir(), link.isdir())
+            self.assertEquals(link.isfile(), link.isfile())
 
+    if not getattr(os, "symlink", None):
+        text = "Your platform does not support symbolic links."
+        testSymbolicLink.skip = test_linkTo.skip = text
+
     def testMultiExt(self):
         f3 = self.path.child('sub3').child('file3')
         exts = '.foo','.bar', 'ext1','ext2','ext3'
