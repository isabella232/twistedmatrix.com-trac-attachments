Index: application.xhtml
===================================================================
--- application.xhtml	(revision 13844)
+++ application.xhtml	(working copy)
@@ -98,41 +98,39 @@
 developer and administrator, are services, which implement <code
 class="API">twisted.application.service.IService</code>. <code
 class="API">twisted.application.service.Application</code> creates the root of
-a tree of services that form a twisted application.  There is one <code
-class="python">Application</code> instance per Twisted process, and it is the
-top-level manager of resources and handler of events in the Twisted framework.
-(Unlike other frameworks, like <code>Qt</code> or <code>wxWindows</code>, in
-Twisted you do not derive from <code>Application</code>; rather you register
-event handlers for it to call by adding Services to it.)  To store
-configuration data, as well as other information, Twisted serializes <code
-class="python">Application</code> instances, storing all services that have
-been registered with them.  Since the whole <code
-class="python">Application</code> instance is serialized, Twisted
-<q>configuration</q> files are significantly more comprehensive than those for
-other systems. These files store everything related to a running <code
-class="python">Application</code> instance; in essence the full state of a
-running process.</p>
+a tree of services that form a twisted application.</p>
 
+<p>There is one <code class="python">Application</code> instance per
+Twisted process, and it is the top-level manager of resources and handler
+of events in the Twisted framework.  (Unlike other frameworks, like
+<code>Qt</code> or <code>wxWindows</code>, in Twisted you do not derive
+from <code>Application</code>; rather you register event handlers for it to
+call by setting it as the parent for <code>Service</code>s.)</p>
 
-<p>There are two interfaces relevant to services &mdash; <code>IService</code>
-and <code>IServiceCollection</code>. <code>IService</code> represents
-a <em>state-aware</em> container. That means the service is ready to be
-notified of application start-ups and shutdowns. Services can be named
-or unnamed. <code>IServiceCollection</code> holds other services. It
-is possible to get named services from it by name. All services can be
-gotten from it via either indexing or iteration.</p>
+<p>To set an <code class="python">Application</code> instance (or another
+service) as the parent for a <code>Service</code>, use
+<code>setServiceParent</code>. To detach a <code>Service</code> from its
+parent, use <code>disownServiceParent</code>.</p>
 
-<p>Services can have a parent. Parents are set using
-<code>setServiceParent</code>. Services are detached from their parent with
-<code>disownServiceParent</code>. The parent must always be something that
-complies with the <code>IServiceCollection</code> interface.</p>
+<p>The two interfaces relevant to services are <code>IService</code> and
+<code>IServiceCollection</code>. <code>IService</code> represents a
+<em>state-aware</em> container. That means the service is ready to be
+notified of application start-ups and shutdowns. <code>Service</code>s can
+be named or unnamed. <code>IServiceCollection</code> holds other services.
+It is possible to get named services from it by name. All services can be
+gotten from it via either indexing or iteration.  A <code>Service</code>'s
+parent must always be something that complies with the
+<code>IServiceCollection</code> interface, but this is taken care of
+automatically by the Twisted component architecture:
+<code>setServiceParent</code> always casts its argument to
+<code>IServiceCollection</code>.)</p>
 
-<p>Most services will inherit from <code>Service</code>. This class
-will set an attribute <code>running</code> to a true value
-in <code>startService</code> and to a false value in <code>stopService</code>.
-This attribute will always be false in just-unpersisted <code>Service</code>s,
-without regards to its value at the time the <code>Service</code> was
-persisted.</p>
+<p>Most services will inherit from <code>Service</code>. This class will
+set an attribute <code>running</code> to a true value in
+<code>startService</code> and to a false value in <code>stopService</code>.
+This attribute will always be false in just-unpersisted
+<code>Service</code>s, without regards to its value at the time the
+<code>Service</code> was persisted.</p>
 
 <p><code>MultiService</code> implements both <code>IService</code> and
 <code>IServiceCollection</code>. It is used to keep the services in
@@ -165,6 +163,17 @@
 is running, will make sure the callable will be called every time the
 period elapses.</p>
 
+<h2>Configuration Persistence</h2>
+
+<p>To store configuration data, as well as other information, Twisted
+serializes <code class="python">Application</code> instances, storing all
+services that have been registered with them.  Since the whole <code
+class="python">Application</code> instance is serialized, Twisted
+<q>configuration</q> files are significantly more comprehensive than those
+for other systems. These files store everything related to a running <code
+class="python">Application</code> instance; in essence the full state of a
+running process.</p>
+
 <h2>String Ports</h2>
 
 <p>In Twisted, a <code>ServerFactory</code> does not care what kind
@@ -217,9 +226,9 @@
 myServer.setServiceParent(myService)
 </pre>
 
-<p>Note that <code>setServiceParent</code> will, in fact, automatically
-cast its argument to <code>IServiceCollection</code>. So, more succinctly,
-the above code can be written:</p>
+<p>Since <code>setServiceParent</code> automatically casts its argument to
+<code>IServiceCollection</code>, the above code can be written more
+succinctly:</p>
  
 <pre class="python">
 from twisted.application import service, internet
