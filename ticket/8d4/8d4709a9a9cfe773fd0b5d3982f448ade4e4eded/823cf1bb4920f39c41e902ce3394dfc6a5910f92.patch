Index: twisted/test/test_amp.py
===================================================================
--- twisted/test/test_amp.py	(wersja 27397)
+++ twisted/test/test_amp.py	(kopia robocza)
@@ -358,6 +358,23 @@
         self.boxes.append(box)
         return
 
+
+
+class AmpBoxTest(unittest.TestCase):
+
+    def test_unicode(self):
+        a = amp.AmpBox(key = 'value')
+        self.assertEquals(type(a.serialize()), str)
+
+        a = amp.AmpBox(key = u'value')
+        self.assertRaises(TypeError, a.serialize)
+
+        a = amp.AmpBox(key = u'value')
+        amp.AMP_BOX_STRICT = False
+        self.assertEquals(type(a.serialize()), unicode)
+
+
+
 class ParsingTest(unittest.TestCase):
 
     def test_booleanValues(self):
Index: twisted/protocols/amp.py
===================================================================
--- twisted/protocols/amp.py	(wersja 27397)
+++ twisted/protocols/amp.py	(kopia robocza)
@@ -501,6 +501,8 @@
 
 PROTOCOL_ERRORS = {UNHANDLED_ERROR_CODE: UnhandledCommand}
 
+AMP_BOX_STRICT = True
+
 class AmpBox(dict):
     """
     I am a packet in the AMP protocol, much like a regular str:str dictionary.
@@ -530,6 +532,9 @@
         L = []
         w = L.append
         for k, v in i:
+            if AMP_BOX_STRICT:
+                if type(k) == unicode or type(v) == unicode:
+                    raise TypeError, "unicode not allowed"
             if len(k) > MAX_KEY_LENGTH:
                 raise TooLong(True, True, k, None)
             if len(v) > MAX_VALUE_LENGTH:
