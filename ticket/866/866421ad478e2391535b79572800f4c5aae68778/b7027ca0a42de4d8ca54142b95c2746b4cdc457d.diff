Index: twisted/test/test_epoll.py
===================================================================
--- twisted/test/test_epoll.py	(revision 18332)
+++ twisted/test/test_epoll.py	(working copy)
@@ -32,8 +32,8 @@
         """
         for skt in self.connections:
             skt.close()
-    
-    
+
+
     def _connectedPair(self):
         """
         Return the two sockets which make up a new TCP connection.
@@ -47,7 +47,7 @@
         else:
             raise unittest.FailTest("Connect should have raised EINPROGRESS")
         server, addr = self.serverSocket.accept()
-        
+
         self.connections.extend((client, server))
         return client, server
 
@@ -100,19 +100,21 @@
         client, server = self._connectedPair()
 
         p = _epoll.epoll(16)
-        p._control(_epoll.CTL_ADD, client.fileno(), _epoll.IN | _epoll.OUT | _epoll.ET)
-        p._control(_epoll.CTL_ADD, server.fileno(), _epoll.IN | _epoll.OUT | _epoll.ET)
+        p._control(_epoll.CTL_ADD, client.fileno(), _epoll.IN | _epoll.OUT |
+                   _epoll.ET)
+        p._control(_epoll.CTL_ADD, server.fileno(), _epoll.IN | _epoll.OUT |
+                   _epoll.ET)
 
         now = time.time()
         events = p.wait(4, 1000)
         then = time.time()
         self.failIf(then - now > 0.01)
-        
+
         events.sort()
         expected = [(client.fileno(), _epoll.OUT),
                     (server.fileno(), _epoll.OUT)]
         expected.sort()
-        
+
         self.assertEquals(events, expected)
 
         now = time.time()
@@ -128,10 +130,11 @@
         events = p.wait(4, 1000)
         then = time.time()
         self.failIf(then - now > 0.01)
-        
+
         events.sort()
         expected = [(client.fileno(), _epoll.IN | _epoll.OUT),
                     (server.fileno(), _epoll.IN | _epoll.OUT)]
         expected.sort()
 
         self.assertEquals(events, expected)
+
Index: twisted/internet/epollreactor.py
===================================================================
--- twisted/internet/epollreactor.py	(revision 18332)
+++ twisted/internet/epollreactor.py	(working copy)
@@ -23,7 +23,7 @@
 from twisted.python import log, threadable
 from twisted.internet import main, posixbase, error
 
-# globals
+# globals. They're often passed as default arguments for performance purpose.
 reads = {}
 writes = {}
 selectables = {}
@@ -51,20 +51,21 @@
             primary[fd] = 1
             selectables[fd] = xer
             # epoll_ctl can raise all kinds of IOErrors, and every one
-            # indicates a bug either in the reactor or application-code. 
+            # indicates a bug either in the reactor or application-code.
             # Let them all through so someone sees a traceback and fixes
             # something.  We'll do the same thing for every other call to
             # this method in this file.
             poller._control(cmd, fd, flags)
 
-
-    def addReader(self, reader, reads=reads, writes=writes, selectables=selectables):
+    def addReader(self, reader, reads=reads, writes=writes,
+                  selectables=selectables):
         """
         Add a FileDescriptor for notification of data available to read.
         """
         self._add(reader, reads, writes, selectables, _epoll.IN, _epoll.OUT)
 
-    def addWriter(self, writer, writes=writes, reads=reads, selectables=selectables):
+    def addWriter(self, writer, writes=writes, reads=reads,
+                  selectables=selectables):
         """
         Add a FileDescriptor for notification of data available to write.
         """
@@ -96,14 +97,15 @@
             # See comment above _control call in _add.
             poller._control(cmd, fd, flags)
 
-
-    def removeReader(self, reader, reads=reads, writes=writes, selectables=selectables):
+    def removeReader(self, reader, reads=reads, writes=writes,
+                     selectables=selectables):
         """
         Remove a Selectable for notification of data available to read.
         """
         self._remove(reader, reads, writes, selectables, _epoll.IN, _epoll.OUT)
 
-    def removeWriter(self, writer, writes=writes, reads=reads, selectables=selectables):
+    def removeWriter(self, writer, writes=writes, reads=reads,
+                     selectables=selectables):
         """
         Remove a Selectable for notification of data available to write.
         """
@@ -186,7 +188,8 @@
                     why = selectable.doWrite()
                     inRead = False
                 if selectable.fileno() != fd:
-                    why = error.ConnectionFdescWentAway('Filedescriptor went away')
+                    why = error.ConnectionFdescWentAway(
+                          'Filedescriptor went away')
                     inRead = False
             except:
                 log.err()
Index: twisted/internet/tcp.py
===================================================================
--- twisted/internet/tcp.py	(revision 18332)
+++ twisted/internet/tcp.py	(working copy)
@@ -453,6 +453,11 @@
         self.failIfNotConnected(error.UserError())
 
     def failIfNotConnected(self, err):
+        """
+        Generic method called when the attemps to connect failed. It basically
+        cleans everything it can: call connectionFailed, stop read and write,
+        delete socket related members.
+        """
         if (self.connected or self.disconnected or 
             not hasattr(self, "connector")):
             return
@@ -471,7 +476,6 @@
         else:
             del self.socket, self.fileno
 
-
     def createInternetSocket(self):
         """(internal) Create a non-blocking socket using
         self.addressFamily, self.socketType.
@@ -483,7 +487,6 @@
             fcntl.fcntl(s.fileno(), fcntl.F_SETFD, old | fcntl.FD_CLOEXEC)
         return s
 
-
     def resolveAddress(self):
         if abstract.isIPAddress(self.addr[0]):
             self._setRealAddress(self.addr[0])
Index: doc/core/man/trial.1
===================================================================
--- doc/core/man/trial.1	(revision 18332)
+++ doc/core/man/trial.1	(working copy)
@@ -59,7 +59,7 @@
 \fB-r\fR, \fB--reactor\fR <reactor>
 Use this reactor for running the tests. The reactor names are the same as
 those accepted by twistd: kqueue, poll, qt, default, win, cfreactor, gtk,
-cf, glade, win32, gtk2, iocp, glib2, threadedselect, wx.
+cf, glade, win32, gtk2, iocp, glib2, threadedselect, wx, epoll.
 .TP
 \fB--recursionlimit\fR
 Set Python's recursion limit.  I don't know why this is in trial.
