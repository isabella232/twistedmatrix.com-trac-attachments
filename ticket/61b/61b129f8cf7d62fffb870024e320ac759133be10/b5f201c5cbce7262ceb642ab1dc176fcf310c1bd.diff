Index: twisted/words/protocols/jabber/sasl_mechanisms.py
===================================================================
--- twisted/words/protocols/jabber/sasl_mechanisms.py	(revision 35245)
+++ twisted/words/protocols/jabber/sasl_mechanisms.py	(working copy)
@@ -85,13 +85,24 @@
     name = 'DIGEST-MD5'
 
     def __init__(self, serv_type, host, serv_name, username, password):
+        """
+        @type serv_type: C{unicode}
+
+        @type host: C{unicode}
+
+        @type serv_name: C{unicode}
+        
+        @type username: C{unicode}
+
+        @type password: C{unicode}
+        """
         self.username = username
         self.password = password
         self.defaultRealm = host
 
-        self.digest_uri = '%s/%s' % (serv_type, host)
+        self.digest_uri = u'%s/%s' % (serv_type, host)
         if serv_name is not None:
-            self.digest_uri += '/%s' % serv_name
+            self.digest_uri += u'/%s' % serv_name
 
 
     def getInitialResponse(self):
@@ -200,11 +211,13 @@
             return binascii.b2a_hex(n)
 
         def KD(k, s):
-            return H('%s:%s' % (k, s))
+            return H(u'%s:%s' % (k, s))
 
         try:
             username = self.username.encode(charset)
             password = self.password.encode(charset)
+            realm = realm.encode(charset)
+            digest_uri = self.digest_uri.encode(charset)
         except UnicodeError:
             # TODO - add error checking
             raise
@@ -217,11 +230,11 @@
         a1 = "%s:%s:%s" % (H("%s:%s:%s" % (username, realm, password)),
                            nonce,
                            cnonce)
-        a2 = "AUTHENTICATE:%s" % self.digest_uri
+        a2 = "AUTHENTICATE:%s" % digest_uri
 
         response = HEX( KD ( HEX(H(a1)),
-                             "%s:%s:%s:%s:%s" % (nonce, nc,
-                                                 cnonce, "auth", HEX(H(a2)))))
+                            "%s:%s:%s:%s:%s" % (nonce, nc,
+                                                cnonce, "auth", HEX(H(a2)))))
 
         directives = {'username': username,
                       'realm' : realm,
@@ -229,7 +242,7 @@
                       'cnonce' : cnonce,
                       'nc' : nc,
                       'qop' : qop,
-                      'digest-uri': self.digest_uri,
+                      'digest-uri': digest_uri,
                       'response': response,
                       'charset': charset}
 
@@ -237,4 +250,6 @@
 
 
     def _gen_nonce(self):
-        return md5("%s:%s:%s" % (str(random.random()) , str(time.gmtime()),str(os.getpid()))).hexdigest()
+        return md5("%s:%s:%s" % (random.random(),
+                                 time.gmtime(),
+                                 os.getpid())).hexdigest()
Index: twisted/words/test/test_jabbersaslmechanisms.py
===================================================================
--- twisted/words/test/test_jabbersaslmechanisms.py	(revision 35245)
+++ twisted/words/test/test_jabbersaslmechanisms.py	(working copy)
@@ -4,10 +4,12 @@
 """
 Tests for L{twisted.words.protocols.jabber.sasl_mechanisms}.
 """
+import binascii
 
 from twisted.trial import unittest
 
 from twisted.words.protocols.jabber import sasl_mechanisms
+from twisted.python.hashlib import md5
 
 class PlainTest(unittest.TestCase):
     def test_getInitialResponse(self):
@@ -44,6 +46,40 @@
         """
         self.assertIdentical(self.mechanism.getInitialResponse(), None)
 
+    def test_getResponseUnicode(self):
+        def H(s):
+            return md5(s).digest()
+
+        def HEX(n):
+            return binascii.b2a_hex(n)
+
+        def KD(k, s):
+            return H(u'%s:%s' % (k, s))
+
+        domain = u'\u0418example.org'
+        password = u'\u0418secret'
+        username = u'test\u0418'
+        for encoding in ('utf-8', 'cp1251'):
+            self.mechanism = sasl_mechanisms.DigestMD5(u'xmpp', domain, None,
+                                                       username, password)
+            challenge = 'nonce="1234",qop="auth",charset=%s,algorithm=md5-sess' % (
+                encoding
+            )
+            directives = self.mechanism._parse(self.mechanism.getResponse(challenge))
+            self.assertEqual(directives['realm'], domain.encode(encoding))
+            self.assertEqual(directives['username'], username.encode(encoding))
+            a1 = "%s:%s:%s" % (H(("%s:%s:%s" % (username, domain, password)).encode(encoding)),
+                               1234,
+                               directives['cnonce'])
+            a2 = "AUTHENTICATE:xmpp/%s" % domain
+            a2 = a2.encode(encoding)
+            nc = '%08x' % 1 # TODO: support subsequent auth.
+            response = HEX( KD ( HEX(H(a1)),
+                                "%s:%s:%s:%s:%s" % (1234, nc,
+                                                    directives['cnonce'],
+                                                    "auth", HEX(H(a2)))))
+            self.assertEqual(directives['response'], response)
+
     def test_getResponse(self):
         """
         Partially test challenge response.
