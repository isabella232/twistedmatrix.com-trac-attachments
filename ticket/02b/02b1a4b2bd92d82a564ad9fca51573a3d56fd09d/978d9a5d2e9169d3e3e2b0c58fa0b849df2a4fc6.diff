--- twisted\mail\test\test_smtp.py.orig	2009-02-01 02:48:50.906250000 +0900
+++ twisted\mail\test\test_smtp.py	2009-02-01 14:18:26.031250000 +0900
@@ -582,6 +582,52 @@
 
 
 
+class RetrySMTPSender(smtp.SMTPSender):
+    def finishedFileTransfer(self, lastsent):
+        if self.factory.retries < 0:
+            self.transport.loseConnection()
+        else:
+            smtp.SMTPSender.finishedFileTransfer(self, lastsent)
+
+class RetrySMTPServerFactory(protocol.Factory):
+    protocol = FakeSMTPServer
+    def buildProtocol(self, addr):
+        self.server = FakeSMTPServer()
+        return self.server
+
+class SMTPClientRetryTestCase(unittest.TestCase):
+
+    expected_output = [
+        'HELO foo.baz', 'MAIL FROM:<aishimoto@foo.baz>',
+        'RCPT TO:<aishimoto@foo.baz>', 'DATA', 
+        'Subject: hello', '', 'Goodbye', '.']
+ 
+    def testMessages(self):
+        serverFactory = RetrySMTPServerFactory()
+        serverPort = reactor.listenTCP(25, serverFactory, interface='127.0.0.1')
+
+        deferred = defer.Deferred()
+        clientFactory = smtp.SMTPSenderFactory("aishimoto@foo.baz", "aishimoto@foo.baz", 
+            StringIO(mail), deferred)
+        clientFactory.domain = "foo.baz"
+        clientFactory.protocol = RetrySMTPSender
+        clientPort = reactor.connectTCP('127.0.0.1', 25, clientFactory)
+        
+        done = defer.Deferred()
+        def onSent(arg):
+            clientPort.transport.loseConnection()
+            d = serverPort.loseConnection()
+            d.addCallback(check)
+
+        def check(ign):
+            done.callback(self.assertEqual(self.expected_output, serverFactory.server.buffer))
+
+        deferred.addCallback(onSent)
+
+        return done
+
+
+
 class SingletonRealm(object):
     """
     Trivial realm implementation which is constructed with an interface and an
