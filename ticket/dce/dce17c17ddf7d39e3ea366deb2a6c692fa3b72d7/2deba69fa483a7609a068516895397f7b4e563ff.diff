Index: twisted/lore/test/test_lore.py
===================================================================
--- twisted/lore/test/test_lore.py	(revision 20971)
+++ twisted/lore/test/test_lore.py	(working copy)
@@ -350,3 +350,25 @@
         spitter = LatexSpitter(out.write)
         spitter.visitNode(dom)
         self.assertEqual(out.getvalue(), u'\\index{name}\n')
+
+
+
+
+class CrunchyTestCase(unittest.TestCase):
+    """
+    Tests for the Crunchy output plugin.
+    """
+    def test_fontifyPythonNode(self):
+        """
+        Test that fontifyPythonNode keeps attributes for crunchy
+        """
+        paren = microdom.Element('body')
+        node = microdom.Element('pre', None, paren)
+        paren.appendChild(node)
+        node.setAttribute('class','python')
+        node.setAttribute('title','editor')
+        saved = tree.pythonPrettifier
+        tree.pythonPrettifier = tree.pythonCodePrettify_crunchy()
+        tree.pythonPrettifier.fontifyPythonNode(node)
+        tree.pythonPrettifier = saved
+        self.assertEquals(node.getAttribute('title'), 'editor')
Index: twisted/lore/tree.py
===================================================================
--- twisted/lore/tree.py	(revision 20971)
+++ twisted/lore/tree.py	(working copy)
@@ -130,29 +130,57 @@
         return (node.nodeName == 'pre' and node.hasAttribute('class') and
                 node.getAttribute('class') == 'python')
     for node in domhelpers.findElements(document, matcher):
-        fontifyPythonNode(node)
+        pythonPrettifier.fontifyPythonNode(node)
 
 
 
-def fontifyPythonNode(node):
+class pythonCodePrettify :
     """
-    Syntax color the given node containing Python source code.
-
-    @return: C{None}
+    Default for making <pre class="python"> nice and pretty.
     """
-    oldio = cStringIO.StringIO()
-    latex.getLatexText(node, oldio.write,
-                       entities={'lt': '<', 'gt': '>', 'amp': '&'})
-    oldio = cStringIO.StringIO(oldio.getvalue().strip()+'\n')
-    newio = cStringIO.StringIO()
-    htmlizer.filter(oldio, newio, writer=htmlizer.SmallerHTMLWriter)
-    newio.seek(0)
-    newel = microdom.parse(newio).documentElement
-    newel.setAttribute("class", "python")
-    node.parentNode.replaceChild(newel, node)
+    def fontifyPythonNode(self, node):
+        """
+        Syntax color the given node containing Python source code.
 
+        @return: C{None}
+        """
+        oldio = cStringIO.StringIO()
+        latex.getLatexText(node, oldio.write,
+                           entities={'lt': '<', 'gt': '>', 'amp': '&'})
+        oldio = cStringIO.StringIO(oldio.getvalue().strip()+'\n')
+        newio = cStringIO.StringIO()
+        htmlizer.filter(oldio, newio, writer=htmlizer.SmallerHTMLWriter)
+        newio.seek(0)
+        newel = microdom.parse(newio).documentElement
+        newel.setAttribute("class", "python")
+        node.parentNode.replaceChild(newel, node)
 
 
+
+class pythonCodePrettify_crunchy :
+   """
+   Alternative prettifier for crunchy output which needs to use other
+   attributes of the pre tag.
+   """
+   def fontifyPythonNode(self, node):
+        """
+        Syntax color the given node containing Python source code.
+
+        @return: C{None}
+        """
+        oldio = cStringIO.StringIO()
+        latex.getLatexText(node, oldio.write,
+                           entities={'lt': '<', 'gt': '>', 'amp': '&'})
+        oldio = cStringIO.StringIO(oldio.getvalue().strip()+'\n')
+        newio = cStringIO.StringIO()
+        htmlizer.filter(oldio, newio, writer=htmlizer.SmallerHTMLWriter)
+        newio.seek(0)
+        newel = microdom.parse(newio).documentElement
+        newel.attributes = node.attributes
+        node.parentNode.replaceChild(newel, node)
+
+
+
 def addPyListings(document, dir):
     """
     Insert Python source listings into the given document from files in the
@@ -899,3 +927,6 @@
     newFilename = outfileGenerator(filename, ext)
     makeSureDirectoryExists(newFilename)
     clonedNode.writexml(open(newFilename, 'wb'))
+
+
+pythonPrettifier = pythonCodePrettify()
Index: twisted/lore/default.py
===================================================================
--- twisted/lore/default.py	(revision 20971)
+++ twisted/lore/default.py	(working copy)
@@ -14,6 +14,10 @@
     def getDoFile(self):
         return tree.doFile
 
+    def generate_crunchy(self, options, filenameGenerator=tree.getOutputFileName):
+        tree.pythonPrettifier = tree.pythonCodePrettify_crunchy()
+	return self.generate_html(options, filenameGenerator)
+
     def generate_html(self, options, filenameGenerator=tree.getOutputFileName):
         n = htmlDefault.copy()
         n.update(options)
