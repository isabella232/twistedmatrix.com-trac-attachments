Index: twisted/python/rebuild.py
===================================================================
--- twisted/python/rebuild.py	(revision 18899)
+++ twisted/python/rebuild.py	(working copy)
@@ -80,19 +80,19 @@
     """
     module = reflect.namedModule(oldClass.__module__)
     newClass = getattr(module, oldClass.__name__)
-    newBases = []
-    for base in newClass.__bases__:
-        newBases.append(latestClass(base))
+    newBases = [latestClass(base) for base in newClass.__bases__]
 
     try:
         # This makes old-style stuff work
         newClass.__bases__ = tuple(newBases)
         return newClass
     except TypeError:
+        if newClass.__module__ == "__builtin__":
+            # __builtin__ members can't be reloaded sanely
+            return newClass
         ctor = getattr(newClass, '__metaclass__', type)
         return ctor(newClass.__name__, tuple(newBases), dict(newClass.__dict__))
 
-
 def updateInstance(self):
     """Updates an instance to be current
     """
@@ -123,7 +123,7 @@
     ## Safely handle adapter re-registration
     from twisted.python import components
     components.ALLOW_DUPLICATES = 1
-    
+
     d = module.__dict__
     _modDictIDMap[id(d)] = module
     newclasses = {}
@@ -241,3 +241,4 @@
         log.msg('')
         log.msg('   Rebuilt %s.' % str(module.__name__))
     return module
+
Index: twisted/test/test_rebuild.py
===================================================================
--- twisted/test/test_rebuild.py	(revision 18899)
+++ twisted/test/test_rebuild.py	(working copy)
@@ -76,7 +76,7 @@
         # This test would actually pass if rebuild was a no-op, but it
         # ensures rebuild doesn't break stuff while being a less
         # complex test than testFileRebuild.
-        
+
         x = crash_test_dummy.X('a')
 
         rebuild.rebuild(crash_test_dummy, doLog=False)
@@ -124,20 +124,26 @@
         rebuild.latestClass(banana.Banana)
 
 class NewStyleTestCase(unittest.TestCase):
-    todo = """New Style classes are poorly supported"""
 
     def setUp(self):
         self.m = new.module('whipping')
         sys.modules['whipping'] = self.m
-    
+
     def tearDown(self):
         del sys.modules['whipping']
         del self.m
-    
+
     def testSlots(self):
+        """
+        Try to rebuild a new style class with slots defined.
+        """
         exec "class SlottedClass(object): __slots__ = 'a'," in self.m.__dict__
         rebuild.updateInstance(self.m.SlottedClass())
 
     def testTypeSubclass(self):
+        """
+        Try to rebuild a base type subclass.
+        """
         exec "class ListSubclass(list): pass" in self.m.__dict__
         rebuild.updateInstance(self.m.ListSubclass())
+
