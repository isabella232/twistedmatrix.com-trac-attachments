diff --git twisted/python/dist.py twisted/python/dist.py
index 3eb92be..96b933f 100644
--- twisted/python/dist.py
+++ twisted/python/dist.py
@@ -78,7 +78,7 @@ _EXTRA_OPTIONS = dict(
     soap=['soappy'],
     serial=['pyserial'],
     osx=['pyobjc'],
-    windows=['pypiwin32']
+    windows=['pypiwin32', 'pywincffi >= 0.1.2']
 )
 
 _PLATFORM_INDEPENDENT = (
diff --git twisted/python/lockfile.py twisted/python/lockfile.py
index 4206202..537241c 100644
--- twisted/python/lockfile.py
+++ twisted/python/lockfile.py
@@ -23,10 +23,10 @@ def unique():
 from os import rename
 
 if not platform.isWindows():
-    from os import kill
     from os import symlink
     from os import readlink
     from os import remove as rmlink
+    kill = os.kill
     _windows = False
 else:
     _windows = True
@@ -40,27 +40,27 @@ else:
     # file with the PID of the process holding the lock instead.
     # These functions below perform that unenviable, probably-fraught-with-
     # race-conditions duty. - hawkie
+    ERROR_ACCESS_DENIED = 5
+    ERROR_INVALID_PARAMETER = 87
 
-    try:
-        from win32api import OpenProcess
-        import pywintypes
-    except ImportError:
-        kill = None
-    else:
-        ERROR_ACCESS_DENIED = 5
-        ERROR_INVALID_PARAMETER = 87
-
-        def kill(pid, signal):
-            try:
-                OpenProcess(0, 0, pid)
-            except pywintypes.error as e:
-                if e.args[0] == ERROR_ACCESS_DENIED:
-                    return
-                elif e.args[0] == ERROR_INVALID_PARAMETER:
-                    raise OSError(errno.ESRCH, None)
-                raise
-            else:
-                raise RuntimeError("OpenProcess is required to fail.")
+    def kill(pid, signal):
+        """
+        Internally used by C{twisted.python.lockfile.FilesystemLock} to
+        call L{os.kill} on Windows.  This will raise OSError(errno.ESRCH, None)
+        if the call to L{os.kill} failed with ERROR_INVALID_PARAMETER.
+
+        @param pid: The process id to pass to L{os.kill}
+        @type pid: C{int}
+
+        @param signal: The signal to pass to L{os.kill}
+        @type signal: C{int}
+        """
+        try:
+            os.kill(pid, signal)
+        except WindowsError as error:
+            if error.winerror == ERROR_INVALID_PARAMETER:
+                raise OSError(errno.ESRCH, None)
+            raise
 
     # For monkeypatching in tests
     _open = open
@@ -181,8 +181,7 @@ class FilesystemLock(object):
                             return False
                         raise
                     try:
-                        if kill is not None:
-                            kill(int(pid), 0)
+                        kill(int(pid), 0)
                     except OSError as e:
                         if e.errno == errno.ESRCH:
                             # The owner has vanished, try to claim it in the
diff --git twisted/python/win32.py twisted/python/win32.py
index 2068e17..30ad509 100644
--- twisted/python/win32.py
+++ twisted/python/win32.py
@@ -132,15 +132,19 @@ class _ErrorFormatter(object):
             from ctypes import WinError
         except ImportError:
             WinError = None
+
         try:
-            from win32api import FormatMessage
+            from pywincffi.core import dist
+            ffi, _ = dist.load()
+            getwinerror = lambda errorcode: ffi.getwinerror(errorcode)[1]
         except ImportError:
-            FormatMessage = None
+            getwinerror = None
+
         try:
             from socket import errorTab
         except ImportError:
             errorTab = None
-        return cls(WinError, FormatMessage, errorTab)
+        return cls(WinError, getwinerror, errorTab)
     fromEnvironment = classmethod(fromEnvironment)
 
 
@@ -159,6 +163,7 @@ class _ErrorFormatter(object):
         @return: The error message string
         @rtype: C{str}
         """
+
         if self.winError is not None:
             return self.winError(errorcode).strerror
         if self.formatMessage is not None:
diff --git twisted/test/test_lockfile.py twisted/test/test_lockfile.py
index e592f79..9e52bd1 100644
--- twisted/test/test_lockfile.py
+++ twisted/test/test_lockfile.py
@@ -13,16 +13,8 @@ import os
 
 from twisted.trial import unittest
 from twisted.python import lockfile
-from twisted.python.reflect import requireModule
 from twisted.python.runtime import platform
 
-skipKill = None
-if platform.isWindows():
-    if(requireModule('win32api.OpenProcess') is None and
-        requireModule('pywintypes') is None
-            ):
-        skipKill = ("On windows, lockfile.kill is not implemented in the "
-                    "absence of win32api and/or pywintypes.")
 
 class UtilTests(unittest.TestCase):
     """
@@ -97,7 +89,6 @@ class UtilTests(unittest.TestCase):
         process which exists and signal C{0}.
         """
         lockfile.kill(os.getpid(), 0)
-    test_kill.skip = skipKill
 
 
     def test_killESRCH(self):
@@ -108,19 +99,6 @@ class UtilTests(unittest.TestCase):
         # Hopefully there is no process with PID 2 ** 31 - 1
         exc = self.assertRaises(OSError, lockfile.kill, 2 ** 31 - 1, 0)
         self.assertEqual(exc.errno, errno.ESRCH)
-    test_killESRCH.skip = skipKill
-
-
-    def test_noKillCall(self):
-        """
-        Verify that when L{lockfile.kill} does end up as None (e.g. on Windows
-        without pywin32), it doesn't end up being called and raising a
-        L{TypeError}.
-        """
-        self.patch(lockfile, "kill", None)
-        fl = lockfile.FilesystemLock(self.mktemp())
-        fl.lock()
-        self.assertFalse(fl.lock())
 
 
 
diff --git twisted/topfiles/7889.feature twisted/topfiles/7889.feature
new file mode 100644
index 0000000..d34968b
--- /dev/null
+++ twisted/topfiles/7889.feature
@@ -0,0 +1 @@
+twisted.python.python.lockfile now uses os.kill on Windows instead of OpenProcess from pywin32 and twisted.python.win32._ErrorFormatter.fromEnvironment now depends on pywincffi instead of pywin32.
