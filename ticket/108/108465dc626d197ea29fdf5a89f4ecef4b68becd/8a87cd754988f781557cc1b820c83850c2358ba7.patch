diff --git twisted/python/dist.py twisted/python/dist.py
index 3eb92be..96b933f 100644
--- twisted/python/dist.py
+++ twisted/python/dist.py
@@ -78,7 +78,7 @@ _EXTRA_OPTIONS = dict(
     soap=['soappy'],
     serial=['pyserial'],
     osx=['pyobjc'],
-    windows=['pypiwin32']
+    windows=['pypiwin32', 'pywincffi >= 0.1.2']
 )
 
 _PLATFORM_INDEPENDENT = (
diff --git twisted/python/lockfile.py twisted/python/lockfile.py
index 4206202..a651b62 100644
--- twisted/python/lockfile.py
+++ twisted/python/lockfile.py
@@ -40,27 +40,25 @@ else:
     # file with the PID of the process holding the lock instead.
     # These functions below perform that unenviable, probably-fraught-with-
     # race-conditions duty. - hawkie
+    from pywincffi.core import dist
+    from pywincffi.exceptions import WindowsAPIError
+    from pywincffi.kernel32.process import OpenProcess
 
-    try:
-        from win32api import OpenProcess
-        import pywintypes
-    except ImportError:
-        kill = None
-    else:
-        ERROR_ACCESS_DENIED = 5
-        ERROR_INVALID_PARAMETER = 87
-
-        def kill(pid, signal):
-            try:
-                OpenProcess(0, 0, pid)
-            except pywintypes.error as e:
-                if e.args[0] == ERROR_ACCESS_DENIED:
-                    return
-                elif e.args[0] == ERROR_INVALID_PARAMETER:
-                    raise OSError(errno.ESRCH, None)
-                raise
-            else:
-                raise RuntimeError("OpenProcess is required to fail.")
+    _ffi, _lib = dist.load()
+    ERROR_ACCESS_DENIED = _ffi.ERROR_ACCESS_DENIED
+    ERROR_INVALID_PARAMETER = _ffi.ERROR_INVALID_PARAMETER
+
+    def kill(pid, signal):
+        try:
+            OpenProcess(0, False, pid)
+        except WindowsAPIError as e:
+            if e.code == _ffi.ERROR_ACCESS_DENIED:
+                return
+            elif e.code == _ffi.ERROR_INVALID_PARAMETER:
+                raise OSError(errno.ESRCH, None)
+            raise
+        else:
+            raise RuntimeError("OpenProcess is required to fail.")
 
     # For monkeypatching in tests
     _open = open
diff --git twisted/python/win32.py twisted/python/win32.py
index 2068e17..c3e4f51 100644
--- twisted/python/win32.py
+++ twisted/python/win32.py
@@ -19,6 +19,8 @@ import os
 try:
     import win32api
     import win32con
+    from pywincffi.core import dist
+    _ffi, _lib = dist.load()
 except ImportError:
     pass
 
@@ -132,15 +134,14 @@ class _ErrorFormatter(object):
             from ctypes import WinError
         except ImportError:
             WinError = None
-        try:
-            from win32api import FormatMessage
-        except ImportError:
-            FormatMessage = None
+
+        getwinerror = lambda errorcode: _ffi.getwinerror(errorcode)[1]
+
         try:
             from socket import errorTab
         except ImportError:
             errorTab = None
-        return cls(WinError, FormatMessage, errorTab)
+        return cls(WinError, getwinerror, errorTab)
     fromEnvironment = classmethod(fromEnvironment)
 
 
@@ -159,6 +160,7 @@ class _ErrorFormatter(object):
         @return: The error message string
         @rtype: C{str}
         """
+
         if self.winError is not None:
             return self.winError(errorcode).strerror
         if self.formatMessage is not None:
diff --git twisted/topfiles/7889.feature twisted/topfiles/7889.feature
new file mode 100644
index 0000000..6ff6b30
--- /dev/null
+++ twisted/topfiles/7889.feature
@@ -0,0 +1 @@
+twisted.python.python.lockfile and twisted.python.win32._ErrorFormatter.fromEnvironment now depend on pywincffi instead of pywin32.
