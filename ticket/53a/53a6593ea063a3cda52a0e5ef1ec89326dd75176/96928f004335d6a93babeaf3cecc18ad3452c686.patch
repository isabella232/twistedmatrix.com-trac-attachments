Index: twisted/web2/auth/wrapper.py
===================================================================
--- twisted/web2/auth/wrapper.py	(revision 17224)
+++ twisted/web2/auth/wrapper.py	(working copy)
@@ -16,14 +16,17 @@
        response.
     """
 
-    def __init__(self, factories):
+    def __init__(self, factories, allowedMethods):
         """
         @param factories: sequence of ICredentialFactory implementations 
                           for which to generate a WWW-Authenticate header.
+        @param allowedMethods:  sequence of HTTP method names which are allowed
+                              for this type of resource.
         """
         self.factories = factories
+        self.allowedMethods = allowedMethods
         
-    def render(self, req):
+    def renderHTTP(self, req):
         resp = http.Response(responsecode.UNAUTHORIZED)
 
         authHeaders = []
@@ -33,6 +36,7 @@
 
 
         resp.headers.setHeader('www-authenticate', authHeaders)
+        resp.headers.setHeader('allow',self.allowedMethods)
         
         return resp
 
@@ -76,12 +80,14 @@
             return self.wrappedResource
 
         def _loginFailed(res):
-            return UnauthorizedResource(self.credentialFactories)
+            return UnauthorizedResource(self.credentialFactories,
+                                        self.allowedMethods())
 
         try:
             creds = factory.decode(response, req.method)
         except error.LoginFailed:
-            return UnauthorizedResource(self.credentialFactories)
+            return UnauthorizedResource(self.credentialFactories,
+                                        self.allowedMethods())
 
         return self.portal.login(creds, None, *self.interfaces
                                 ).addCallbacks(_loginSucceeded,
@@ -91,13 +97,17 @@
         authHeader = req.headers.getHeader('authorization')
 
         if authHeader is None or authHeader[0] not in self.credentialFactories:
-            return UnauthorizedResource(self.credentialFactories)
+            return UnauthorizedResource(self.credentialFactories,
+                                        self.allowedMethods())
         else:
             return self.login(self.credentialFactories[authHeader[0]],
                               authHeader[1], req)
 
     def locateChild(self, req, seg):
-        return self.authenticate(req), seg[1:]
+        return self.authenticate(req), seg
 
     def renderHTTP(self, req):
         return self.authenticate(req)
+
+    def allowedMethods(self):
+        return self.wrappedResource.allowedMethods()
