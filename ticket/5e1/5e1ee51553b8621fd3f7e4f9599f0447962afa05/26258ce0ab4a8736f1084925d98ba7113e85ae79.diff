Index: twisted/conch/test/test_keys.py
===================================================================
--- twisted/conch/test/test_keys.py	(revision 35757)
+++ twisted/conch/test/test_keys.py	(working copy)
@@ -309,7 +309,7 @@
 SEJVJ+gmTKdRLYORJKyqhDet6g7kAxs4EoJ25WsOnX5nNr00rit+NkMPA7xbJT+7
 CfI51GQLw7pUPeO2WNt6yZO/YkzZrqvTj5FEwybkUyBv7L0gkqu9wjfDdUw0fVHE
 xEm4DxjEoaIp8dW/JOzXQ2EF+WaSOgdYsw3Ac+rnnjnNptCdOEDGP6QBkt+oXj4P
------END RSA PRIVATE KEY-----""")
+-----END RSA PRIVATE KEY-----""", passphrase='encrypted')
         # key with invalid encryption type
         self.assertRaises(
             keys.BadKeyError, keys.Key.fromString,
@@ -342,7 +342,7 @@
 SEJVJ+gmTKdRLYORJKyqhDet6g7kAxs4EoJ25WsOnX5nNr00rit+NkMPA7xbJT+7
 CfI51GQLw7pUPeO2WNt6yZO/YkzZrqvTj5FEwybkUyBv7L0gkqu9wjfDdUw0fVHE
 xEm4DxjEoaIp8dW/JOzXQ2EF+WaSOgdYsw3Ac+rnnjnNptCdOEDGP6QBkt+oXj4P
------END RSA PRIVATE KEY-----""")
+-----END RSA PRIVATE KEY-----""", passphrase='encrypted')
         # key with bad IV (AES)
         self.assertRaises(
             keys.BadKeyError, keys.Key.fromString,
@@ -375,7 +375,7 @@
 SEJVJ+gmTKdRLYORJKyqhDet6g7kAxs4EoJ25WsOnX5nNr00rit+NkMPA7xbJT+7
 CfI51GQLw7pUPeO2WNt6yZO/YkzZrqvTj5FEwybkUyBv7L0gkqu9wjfDdUw0fVHE
 xEm4DxjEoaIp8dW/JOzXQ2EF+WaSOgdYsw3Ac+rnnjnNptCdOEDGP6QBkt+oXj4P
------END RSA PRIVATE KEY-----""")
+-----END RSA PRIVATE KEY-----""", passphrase='encrypted')
         # key with bad IV (DES3)
         self.assertRaises(
             keys.BadKeyError, keys.Key.fromString,
@@ -408,7 +408,7 @@
 SEJVJ+gmTKdRLYORJKyqhDet6g7kAxs4EoJ25WsOnX5nNr00rit+NkMPA7xbJT+7
 CfI51GQLw7pUPeO2WNt6yZO/YkzZrqvTj5FEwybkUyBv7L0gkqu9wjfDdUw0fVHE
 xEm4DxjEoaIp8dW/JOzXQ2EF+WaSOgdYsw3Ac+rnnjnNptCdOEDGP6QBkt+oXj4P
------END RSA PRIVATE KEY-----""")
+-----END RSA PRIVATE KEY-----""", passphrase='encrypted')
 
     def test_fromFile(self):
         """
Index: twisted/conch/test/test_ckeygen.py
===================================================================
--- twisted/conch/test/test_ckeygen.py	(revision 35757)
+++ twisted/conch/test/test_ckeygen.py	(working copy)
@@ -17,7 +17,7 @@
 else:
     from twisted.conch.ssh.keys import Key, BadKeyError
     from twisted.conch.scripts.ckeygen import (
-        displayPublicKey, printFingerprint, _saveKey)
+        changePassPhrase, displayPublicKey, printFingerprint, _saveKey)
 
 from twisted.python.filepath import FilePath
 from twisted.trial.unittest import TestCase
@@ -25,7 +25,20 @@
     publicRSA_openssh, privateRSA_openssh, privateRSA_openssh_encrypted)
 
 
+def _make_getpass(*passphrases):
+    """Return a callable to patch C{getpass.getpass}.
+    Yields a passphrase each time called. Use case is to provide an
+    old, then new passphrase(s) as if requested interactively.
+    """
+    def _getpass():
+        yield None
+        for phrase in passphrases:
+            yield phrase
+    getpass = _getpass()
+    next(getpass)
+    return getpass.send
 
+
 class KeyGenTests(TestCase):
     """
     Tests for various functions used to implement the I{ckeygen} script.
@@ -135,3 +148,67 @@
         self.assertRaises(
             BadKeyError, displayPublicKey,
             {'filename': filename, 'pass': 'wrong'})
+
+
+    def test_changePassphrase(self):
+        """
+        L{changePassPhrase} allows a user to change the passphrase of a
+        private key interactively.
+        """
+        oldNewConfirm = _make_getpass('encrypted', 'newpass', 'newpass')
+        self.patch(getpass, 'getpass', oldNewConfirm)
+
+        filename = self.mktemp()
+        FilePath(filename).setContent(privateRSA_openssh_encrypted)
+
+        changePassPhrase({'filename':filename})
+        self.assertEqual(
+            self.stdout.getvalue().strip('\n'),
+            'Your identification has been saved with the new passphrase.'
+        )
+
+
+    def test_changePassphraseWithOld(self):
+        """
+        L{changePassPhrase} allows a user to change the passphrase of a
+        private key, providing the old passphrase and prompting for new one.
+        """
+        newConfirm = _make_getpass('newpass', 'newpass')
+        self.patch(getpass, 'getpass', newConfirm)
+
+        filename = self.mktemp()
+        FilePath(filename).setContent(privateRSA_openssh_encrypted)
+
+        changePassPhrase({'filename':filename, 'pass':'encrypted'})
+        self.assertEqual(
+            self.stdout.getvalue().strip('\n'),
+            'Your identification has been saved with the new passphrase.'
+        )
+
+
+    def test_changePassphraseWithBoth(self):
+        """
+        L{changePassPhrase} allows a user to change the passphrase of a
+        private key by providing both old and new passphrases w/o prompting.
+        """
+        filename = self.mktemp()
+        FilePath(filename).setContent(privateRSA_openssh_encrypted)
+
+        changePassPhrase(
+            {'filename':filename, 'pass':'encrypted', 'newpass':'newencrypt'})
+        self.assertEqual(
+            self.stdout.getvalue().strip('\n'),
+            'Your identification has been saved with the new passphrase.'
+        )
+
+
+    def test_changePassphraseWrongPassphrase(self):
+        """
+        L{changePassPhrase} allows a user to change the passphrase of a
+        private key. It should exit if passed an invalid old passphrase.
+        """
+        filename = self.mktemp()
+        FilePath(filename).setContent(privateRSA_openssh_encrypted)
+        self.assertRaises(SystemExit,
+                          changePassPhrase,
+                          {'filename':filename, 'pass':'wrong'})
Index: twisted/conch/scripts/ckeygen.py
===================================================================
--- twisted/conch/scripts/ckeygen.py	(revision 35757)
+++ twisted/conch/scripts/ckeygen.py	(working copy)
@@ -118,20 +118,26 @@
 
 
 def changePassPhrase(options):
-    if not options['filename']:
+    if not options.get('filename'):
         filename = os.path.expanduser('~/.ssh/id_rsa')
         options['filename'] = raw_input('Enter file in which the key is (%s): ' % filename)
     try:
         key = keys.Key.fromFile(options['filename']).keyObject
+    except keys.EncryptedKeyError, e:
+        # Raised if password not supplied for an encrypted key
+        if not options.get('pass'):
+            options['pass'] = getpass.getpass('Enter old passphrase: ')
+        try:
+            key = keys.Key.fromFile(
+                options['filename'], passphrase=options['pass']).keyObject
+        except keys.BadKeyError, e:
+            sys.exit('Could not change passphrase: Old passphrase error')
+        except keys.EncryptedKeyError, e:
+            sys.exit('Could not change passphrase: %s' % (e,))
     except keys.BadKeyError, e:
-        if e.args[0] != 'encrypted key with no passphrase':
-            raise
-        else:
-            if not options['pass']:
-                options['pass'] = getpass.getpass('Enter old passphrase: ')
-            key = keys.Key.fromFile(
-                options['filename'], passphrase = options['pass']).keyObject
-    if not options['newpass']:
+        sys.exit('Could not change passphrase: %s' % (e,))
+
+    if not options.get('newpass'):
         while 1:
             p1 = getpass.getpass('Enter new passphrase (empty for no passphrase): ')
             p2 = getpass.getpass('Enter same passphrase again: ')
@@ -139,12 +145,24 @@
                 break
             print 'Passphrases do not match.  Try again.'
         options['newpass'] = p1
-    open(options['filename'], 'w').write(
-        keys.Key(key).toString(passphrase=options['newpass']))
-    print 'Your identification has been saved with the new passphrase.'
 
+    try:
+        newkeydata = keys.Key(key).toString('openssh', extra=options['newpass'])
+    except (keys.BadKeyError, Exception), e:
+        sys.exit('Could not change passphrase: %s' % (e,))
+    else:
+        open(options['filename'], 'w').write(newkeydata)
 
+    try:
+        newkey = keys.Key.fromFile(
+            options['filename'], passphrase=options['newpass']).keyObject
+    except (keys.EncryptedKeyError, keys.BadKeyError), e:
+        sys.exit('Could not change passphrase: %s' % (e,))
+    else:
+        print 'Your identification has been saved with the new passphrase.'
 
+
+
 def displayPublicKey(options):
     if not options['filename']:
         filename = os.path.expanduser('~/.ssh/id_rsa')
Index: twisted/conch/ssh/keys.py
===================================================================
--- twisted/conch/ssh/keys.py	(revision 35757)
+++ twisted/conch/ssh/keys.py	(working copy)
@@ -16,6 +16,7 @@
 from Crypto.Cipher import DES3, AES
 from Crypto.PublicKey import RSA, DSA
 from Crypto import Util
+from pyasn1.error import PyAsn1Error
 from pyasn1.type import univ
 from pyasn1.codec.ber import decoder as berDecoder
 from pyasn1.codec.ber import encoder as berEncoder
@@ -214,11 +215,17 @@
         lines = data.strip().split('\n')
         kind = lines[0][11:14]
         if lines[1].startswith('Proc-Type: 4,ENCRYPTED'):  # encrypted key
+            if not passphrase:
+                raise EncryptedKeyError('Passphrase must be provided '
+                                        'for an encrypted key')
+
+            # Determine cipher and initialization vector
             try:
                 _, cipher_iv_info = lines[2].split(' ', 1)
                 cipher, ivdata = cipher_iv_info.rstrip().split(',', 1)
             except ValueError:
                 raise BadKeyError('invalid DEK-info %r' % lines[2])
+
             if cipher == 'AES-128-CBC':
                 CipherClass = AES
                 keySize = 16
@@ -231,10 +238,10 @@
                     raise BadKeyError('DES encrypted key with a bad IV')
             else:
                 raise BadKeyError('unknown encryption type %r' % cipher)
+
+            # extract keyData for decoding
             iv = ''.join([chr(int(ivdata[i:i + 2], 16))
                           for i in range(0, len(ivdata), 2)])
-            if not passphrase:
-                raise EncryptedKeyError('encrypted key with no passphrase')
             ba = md5(passphrase + iv[:8]).digest()
             bb = md5(ba + passphrase + iv[:8]).digest()
             decKey = (ba + bb)[:keySize]
@@ -247,15 +254,18 @@
         else:
             b64Data = ''.join(lines[1:-1])
             keyData = base64.decodestring(b64Data)
+
         try:
             decodedKey = berDecoder.decode(keyData)[0]
-        except Exception:
-            raise BadKeyError('Failed to decode key')
+        except PyAsn1Error, e:
+            raise BadKeyError('Failed to decode key (Bad Passphrase?): %s' % e)
+
         if kind == 'RSA':
             if len(decodedKey) == 2:  # alternate RSA key
                 decodedKey = decodedKey[0]
             if len(decodedKey) < 6:
                 raise BadKeyError('RSA key failed to decode properly')
+
             n, e, d, p, q = [long(value) for value in decodedKey[1:6]]
             if p > q:  # make p smaller than q
                 p, q = q, p
@@ -633,7 +643,8 @@
         string formats.  If extra is present, it represents a comment for a
         public key, or a passphrase for a private key.
 
-        @type extra: C{str}
+        @type extra: C{str} Comment for a public key or
+                            Passphrase for a private key
         @rtype: C{str}
         """
         data = self.data()
