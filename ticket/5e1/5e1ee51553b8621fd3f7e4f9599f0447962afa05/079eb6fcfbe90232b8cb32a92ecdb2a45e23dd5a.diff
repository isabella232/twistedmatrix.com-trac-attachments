Index: twisted/conch/test/test_keys.py
===================================================================
--- twisted/conch/test/test_keys.py	(revision 35300)
+++ twisted/conch/test/test_keys.py	(working copy)
@@ -309,7 +309,7 @@
 SEJVJ+gmTKdRLYORJKyqhDet6g7kAxs4EoJ25WsOnX5nNr00rit+NkMPA7xbJT+7
 CfI51GQLw7pUPeO2WNt6yZO/YkzZrqvTj5FEwybkUyBv7L0gkqu9wjfDdUw0fVHE
 xEm4DxjEoaIp8dW/JOzXQ2EF+WaSOgdYsw3Ac+rnnjnNptCdOEDGP6QBkt+oXj4P
------END RSA PRIVATE KEY-----""")
+-----END RSA PRIVATE KEY-----""", passphrase='encrypted')
         # key with invalid encryption type
         self.assertRaises(
             keys.BadKeyError, keys.Key.fromString,
@@ -342,7 +342,7 @@
 SEJVJ+gmTKdRLYORJKyqhDet6g7kAxs4EoJ25WsOnX5nNr00rit+NkMPA7xbJT+7
 CfI51GQLw7pUPeO2WNt6yZO/YkzZrqvTj5FEwybkUyBv7L0gkqu9wjfDdUw0fVHE
 xEm4DxjEoaIp8dW/JOzXQ2EF+WaSOgdYsw3Ac+rnnjnNptCdOEDGP6QBkt+oXj4P
------END RSA PRIVATE KEY-----""")
+-----END RSA PRIVATE KEY-----""", passphrase='encrypted')
         # key with bad IV (AES)
         self.assertRaises(
             keys.BadKeyError, keys.Key.fromString,
@@ -375,7 +375,7 @@
 SEJVJ+gmTKdRLYORJKyqhDet6g7kAxs4EoJ25WsOnX5nNr00rit+NkMPA7xbJT+7
 CfI51GQLw7pUPeO2WNt6yZO/YkzZrqvTj5FEwybkUyBv7L0gkqu9wjfDdUw0fVHE
 xEm4DxjEoaIp8dW/JOzXQ2EF+WaSOgdYsw3Ac+rnnjnNptCdOEDGP6QBkt+oXj4P
------END RSA PRIVATE KEY-----""")
+-----END RSA PRIVATE KEY-----""", passphrase='encrypted')
         # key with bad IV (DES3)
         self.assertRaises(
             keys.BadKeyError, keys.Key.fromString,
@@ -408,7 +408,7 @@
 SEJVJ+gmTKdRLYORJKyqhDet6g7kAxs4EoJ25WsOnX5nNr00rit+NkMPA7xbJT+7
 CfI51GQLw7pUPeO2WNt6yZO/YkzZrqvTj5FEwybkUyBv7L0gkqu9wjfDdUw0fVHE
 xEm4DxjEoaIp8dW/JOzXQ2EF+WaSOgdYsw3Ac+rnnjnNptCdOEDGP6QBkt+oXj4P
------END RSA PRIVATE KEY-----""")
+-----END RSA PRIVATE KEY-----""", passphrase='encrypted')
 
     def test_fromFile(self):
         """
Index: twisted/conch/test/test_ckeygen.py
===================================================================
--- twisted/conch/test/test_ckeygen.py	(revision 35300)
+++ twisted/conch/test/test_ckeygen.py	(working copy)
@@ -5,6 +5,7 @@
 Tests for L{twisted.conch.scripts.ckeygen}.
 """
 
+import getpass
 import sys
 from StringIO import StringIO
 
@@ -14,12 +15,16 @@
 except ImportError:
     skip = "PyCrypto and pyasn1 required for twisted.conch.scripts.ckeygen."
 else:
-    from twisted.conch.ssh.keys import Key
-    from twisted.conch.scripts.ckeygen import printFingerprint, _saveKey
+    from twisted.conch.ssh.keys import Key, BadKeyError
+    from twisted.conch.scripts.ckeygen import (
+        changePassPhrase, displayPublicKey, printFingerprint, _saveKey
+    )
 
 from twisted.python.filepath import FilePath
 from twisted.trial.unittest import TestCase
-from twisted.conch.test.keydata import publicRSA_openssh, privateRSA_openssh
+from twisted.conch.test.keydata import (
+    publicRSA_openssh, privateRSA_openssh, privateRSA_openssh_encrypted
+)
 
 
 
@@ -78,3 +83,90 @@
             Key.fromString(base.child('id_rsa.pub').getContent()),
             key.public())
 
+
+    def test_displayPublicKey(self):
+        """
+        L{displayPublicKey} prints out the public key associated with a given
+        private key
+        """
+        # Unencrypted key - no passphrase
+        filename = self.mktemp()
+        FilePath(filename).setContent(privateRSA_openssh)
+        displayPublicKey({'filename':filename})
+        self.assertEqual(
+            self.stdout.getvalue().strip('\n'),
+            publicRSA_openssh.strip(' comment')
+        )
+
+        # Encrypted key should require a passphrase
+        self.stdout.seek(0)
+        filename = self.mktemp()
+        FilePath(filename).setContent(privateRSA_openssh_encrypted)
+        displayPublicKey({'filename':filename, 'pass':'encrypted'})
+        self.assertEqual(
+            self.stdout.getvalue().strip('\n'),
+            publicRSA_openssh.strip(' comment')
+        )
+        # Encrypted key with a bad passphrase is an error
+        self.patch(getpass, 'getpass', lambda x: 'badpassphrase')
+        self.assertRaises(BadKeyError,
+            displayPublicKey, {'filename':filename})
+
+            
+    def test_changePassPhrase(self):
+        """
+        L{changePassPhrase} allows a user to change the passphrase of a 
+        private key
+        """
+        class _cycledGetPass(object):
+            """
+            Patch C{getpass.getpass} to provide old/new passphrases
+            """
+            def __init__(self, oldpass, newpass):
+                self.oldpass = oldpass
+                self.newpass = newpass
+                self.called = 0
+
+            def getPass(self, *args, **kwargs):
+                """
+                The first time called, return oldpass
+                Subsequent calls return newpass
+                """
+                if self.called == 0:
+                    self.called += 1
+                    return self.oldpass
+                else:
+                    return self.newpass
+        altGetPass = _cycledGetPass('encrypted', 'newpass')
+        self.patch(getpass, 'getpass', altGetPass.getPass)
+
+        filename = self.mktemp()
+        FilePath(filename).setContent(privateRSA_openssh_encrypted)
+
+        changePassPhrase({'filename':filename})
+        self.assertEqual(
+            self.stdout.getvalue().strip('\n'),
+            'Your identification has been saved with the new passphrase.'
+        )
+
+        # Provide old passphrase
+        self.stdout.seek(0)
+        changePassPhrase({'filename':filename, 'pass':'newpass'})
+        self.assertEqual(
+            self.stdout.getvalue().strip('\n'),
+            'Your identification has been saved with the new passphrase.'
+        )
+
+        # Provide both old and new passphrase
+        self.stdout.seek(0)
+        changePassPhrase({'filename':filename, 'pass':'newpass', 'newpass':'newencrypt'})
+        self.assertEqual(
+            self.stdout.getvalue().strip('\n'),
+            'Your identification has been saved with the new passphrase.'
+        )
+
+        # Provide invalid old passphrase
+        self.stdout.seek(0)
+        self.assertRaises(SystemExit,
+                          changePassPhrase,
+                          {'filename':filename, 'pass':'wrongpassphrase'})
Index: twisted/conch/scripts/ckeygen.py
===================================================================
--- twisted/conch/scripts/ckeygen.py	(revision 35300)
+++ twisted/conch/scripts/ckeygen.py	(working copy)
@@ -19,6 +19,7 @@
 from twisted.python import filepath, log, usage, randbytes
 
 
+
 class GeneralOptions(usage.Options):
     synopsis = """Usage:    ckeygen [options]
  """
@@ -40,6 +41,8 @@
     compData = usage.Completions(
         optActions={"type": usage.CompleteList(["rsa", "dsa"])})
 
+
+
 def run():
     options = GeneralOptions()
     try:
@@ -67,6 +70,8 @@
         options.opt_help()
         sys.exit(1)
 
+
+
 def handleError():
     from twisted.python import failure
     global exitStatus
@@ -75,12 +80,16 @@
     reactor.stop()
     raise
 
+
+
 def generateRSAkey(options):
     from Crypto.PublicKey import RSA
     print 'Generating public/private rsa key pair.'
     key = RSA.generate(int(options['bits']), randbytes.secureRandom)
     _saveKey(key, options)
 
+
+
 def generateDSAkey(options):
     from Crypto.PublicKey import DSA
     print 'Generating public/private dsa key pair.'
@@ -88,6 +97,7 @@
     _saveKey(key, options)
 
 
+
 def printFingerprint(options):
     if not options['filename']:
         filename = os.path.expanduser('~/.ssh/id_rsa')
@@ -106,21 +116,26 @@
         sys.exit('bad key')
 
 
+
 def changePassPhrase(options):
-    if not options['filename']:
+    if not options.get('filename'):
         filename = os.path.expanduser('~/.ssh/id_rsa')
         options['filename'] = raw_input('Enter file in which the key is (%s): ' % filename)
     try:
         key = keys.Key.fromFile(options['filename']).keyObject
+    except keys.EncryptedKeyError, e:
+        # Raised if password not supplied for an encrypted key
+        if not options.get('pass'):
+            options['pass'] = getpass.getpass('Enter old passphrase: ')
+        try:
+            key = keys.Key.fromFile(
+                options['filename'], passphrase=options['pass']).keyObject
+        except keys.BadKeyError, e:
+            sys.exit('Could not change passphrase: Old passphrase error')
     except keys.BadKeyError, e:
-        if e.args[0] != 'encrypted key with no passphrase':
-            raise
-        else:
-            if not options['pass']:
-                options['pass'] = getpass.getpass('Enter old passphrase: ')
-            key = keys.Key.fromFile(
-                options['filename'], passphrase = options['pass']).keyObject
-    if not options['newpass']:
+        sys.exit('Could not change passphrase: %s' % (e,))
+
+    if not options.get('newpass'):
         while 1:
             p1 = getpass.getpass('Enter new passphrase (empty for no passphrase): ')
             p2 = getpass.getpass('Enter same passphrase again: ')
@@ -128,28 +143,41 @@
                 break
             print 'Passphrases do not match.  Try again.'
         options['newpass'] = p1
-    open(options['filename'], 'w').write(
-        keys.Key(key).toString(passphrase=options['newpass']))
-    print 'Your identification has been saved with the new passphrase.'
 
+    try:
+        newkeydata = keys.Key(key).toString('openssh', extra=options['newpass'])
+    except (keys.BadKeyError, Exception), e:
+        sys.exit('Could not change passphrase: %s' % (e,))
+    else:
+        open(options['filename'], 'w').write(newkeydata)
 
+    try:
+        newkey = keys.Key.fromFile(
+            options['filename'], passphrase=options['newpass']).keyObject
+    except (keys.EncryptedKeyError, keys.BadKeyError), e:
+        sys.exit('Could not change passphrase: %s' % (e,))
+    else:
+        print 'Your identification has been saved with the new passphrase.'
+
+
+
 def displayPublicKey(options):
     if not options['filename']:
         filename = os.path.expanduser('~/.ssh/id_rsa')
         options['filename'] = raw_input('Enter file in which the key is (%s): ' % filename)
     try:
         key = keys.Key.fromFile(options['filename']).keyObject
+    except keys.EncryptedKeyError, e:
+        if not options.get('pass'):
+            options['pass'] = getpass.getpass('Enter passphrase: ')
+        key = keys.Key.fromFile(
+            options['filename'], passphrase = options['pass']).keyObject
     except keys.BadKeyError, e:
-        if e.args[0] != 'encrypted key with no passphrase':
-            raise
-        else:
-            if not options['pass']:
-                options['pass'] = getpass.getpass('Enter passphrase: ')
-            key = keys.Key.fromFile(
-                options['filename'], passphrase = options['pass']).keyObject
-    print keys.Key(key).public().toString()
+        raise
+    print keys.Key(key).public().toString('openssh')
 
 
+
 def _saveKey(key, options):
     if not options['filename']:
         kind = keys.objectType(key)
@@ -185,6 +213,7 @@
     print 'The key fingerprint is:'
     print keyObj.fingerprint()
 
+
+
 if __name__ == '__main__':
     run()
-
Index: twisted/conch/ssh/keys.py
===================================================================
--- twisted/conch/ssh/keys.py	(revision 35300)
+++ twisted/conch/ssh/keys.py	(working copy)
@@ -16,6 +16,7 @@
 from Crypto.Cipher import DES3, AES
 from Crypto.PublicKey import RSA, DSA
 from Crypto import Util
+from pyasn1.error import PyAsn1Error
 from pyasn1.type import univ
 from pyasn1.codec.ber import decoder as berDecoder
 from pyasn1.codec.ber import encoder as berEncoder
@@ -28,6 +29,7 @@
 from twisted.conch.ssh import common, sexpy
 
 
+
 class BadKeyError(Exception):
     """
     Raised when a key isn't what we expected from it.
@@ -36,6 +38,7 @@
     """
 
 
+
 class EncryptedKeyError(Exception):
     """
     Raised when an encrypted key is presented to fromString/fromFile without
@@ -43,6 +46,7 @@
     """
 
 
+
 class Key(object):
     """
     An object representing a key.  A key can be either a public or
@@ -63,6 +67,7 @@
         return Class.fromString(file(filename, 'rb').read(), type, passphrase)
     fromFile = classmethod(fromFile)
 
+
     def fromString(Class, data, type=None, passphrase=None):
         """
         Return a Key object corresponding to the string data.
@@ -91,6 +96,7 @@
             return method(data, passphrase)
     fromString = classmethod(fromString)
 
+
     def _fromString_BLOB(Class, blob):
         """
         Return a public key object corresponding to this public key blob.
@@ -121,6 +127,7 @@
             raise BadKeyError('unknown blob type: %s' % keyType)
     _fromString_BLOB = classmethod(_fromString_BLOB)
 
+
     def _fromString_PRIVATE_BLOB(Class, blob):
         """
         Return a private key object corresponding to this private key blob.
@@ -161,6 +168,7 @@
             raise BadKeyError('unknown blob type: %s' % keyType)
     _fromString_PRIVATE_BLOB = classmethod(_fromString_PRIVATE_BLOB)
 
+
     def _fromString_PUBLIC_OPENSSH(Class, data):
         """
         Return a public key object corresponding to this OpenSSH public key
@@ -175,6 +183,7 @@
         return Class._fromString_BLOB(blob)
     _fromString_PUBLIC_OPENSSH = classmethod(_fromString_PUBLIC_OPENSSH)
 
+
     def _fromString_PRIVATE_OPENSSH(Class, data, passphrase):
         """
         Return a private key object corresponding to this OpenSSH private key
@@ -199,17 +208,24 @@
         @return: a C{Crypto.PublicKey.pubkey.pubkey} object
         @raises BadKeyError: if
             * a passphrase is provided for an unencrypted key
-            * a passphrase is not provided for an encrypted key
             * the ASN.1 encoding is incorrect
+        @raises EncryptedKeyError: if
+            * a passphrase is not provided for an encrypted key        
         """
         lines = data.strip().split('\n')
         kind = lines[0][11:14]
         if lines[1].startswith('Proc-Type: 4,ENCRYPTED'):  # encrypted key
+            if not passphrase:
+                raise EncryptedKeyError('Passphrase must be provided '
+                                        'for an encrypted key')
+
+            # Determine cipher and initialization vector
             try:
                 _, cipher_iv_info = lines[2].split(' ', 1)
                 cipher, ivdata = cipher_iv_info.rstrip().split(',', 1)
             except ValueError:
                 raise BadKeyError('invalid DEK-info %r' % lines[2])
+
             if cipher == 'AES-128-CBC':
                 CipherClass = AES
                 keySize = 16
@@ -222,10 +238,10 @@
                     raise BadKeyError('DES encrypted key with a bad IV')
             else:
                 raise BadKeyError('unknown encryption type %r' % cipher)
+
+            # extract keyData for decoding
             iv = ''.join([chr(int(ivdata[i:i + 2], 16))
                           for i in range(0, len(ivdata), 2)])
-            if not passphrase:
-                raise EncryptedKeyError('encrypted key with no passphrase')
             ba = md5(passphrase + iv[:8]).digest()
             bb = md5(ba + passphrase + iv[:8]).digest()
             decKey = (ba + bb)[:keySize]
@@ -238,15 +254,18 @@
         else:
             b64Data = ''.join(lines[1:-1])
             keyData = base64.decodestring(b64Data)
+
         try:
             decodedKey = berDecoder.decode(keyData)[0]
-        except Exception:
-            raise BadKeyError('something wrong with decode')
+        except PyAsn1Error, e:
+            raise BadKeyError('Failed to decode key (Bad Passphrase?): %s' % e)
+
         if kind == 'RSA':
             if len(decodedKey) == 2:  # alternate RSA key
                 decodedKey = decodedKey[0]
             if len(decodedKey) < 6:
                 raise BadKeyError('RSA key failed to decode properly')
+
             n, e, d, p, q = [long(value) for value in decodedKey[1:6]]
             if p > q:  # make p smaller than q
                 p, q = q, p
@@ -258,6 +277,7 @@
             return Class(DSA.construct((y, g, p, q, x)))
     _fromString_PRIVATE_OPENSSH = classmethod(_fromString_PRIVATE_OPENSSH)
 
+
     def _fromString_PUBLIC_LSH(Class, data):
         """
         Return a public key corresponding to this LSH public key string.
@@ -284,6 +304,7 @@
             raise BadKeyError('unknown lsh key type %s' % sexp[1][0])
     _fromString_PUBLIC_LSH = classmethod(_fromString_PUBLIC_LSH)
 
+
     def _fromString_PRIVATE_LSH(Class, data):
         """
         Return a private key corresponding to this LSH private key string.
@@ -316,6 +337,7 @@
             raise BadKeyError('unknown lsh key type %s' % sexp[1][0])
     _fromString_PRIVATE_LSH = classmethod(_fromString_PRIVATE_LSH)
 
+
     def _fromString_AGENTV3(Class, data):
         """
         Return a private key object corresponsing to the Secure Shell Key
@@ -362,6 +384,7 @@
             raise BadKeyError("unknown key type %s" % keyType)
     _fromString_AGENTV3 = classmethod(_fromString_AGENTV3)
 
+
     def _guessStringType(Class, data):
         """
         Guess the type of key in data.  The types map to _fromString_*
@@ -387,6 +410,7 @@
                 return 'blob'
     _guessStringType = classmethod(_guessStringType)
 
+
     def __init__(self, keyObject):
         """
         Initialize a PublicKey with a C{Crypto.PublicKey.pubkey.pubkey}
@@ -396,6 +420,7 @@
         """
         self.keyObject = keyObject
 
+
     def __eq__(self, other):
         """
         Return True if other represents an object with the same key.
@@ -405,6 +430,7 @@
         else:
             return NotImplemented
 
+
     def __ne__(self, other):
         """
         Return True if other represents anything other than this key.
@@ -414,6 +440,7 @@
             return result
         return not result
 
+
     def __repr__(self):
         """
         Return a pretty representation of this object.
@@ -438,12 +465,14 @@
         lines[-1] = lines[-1] + '>'
         return '\n'.join(lines)
 
+
     def isPublic(self):
         """
         Returns True if this Key is a public key.
         """
         return not self.keyObject.has_private()
 
+
     def public(self):
         """
         Returns a version of this key containing only the public key data.
@@ -452,6 +481,7 @@
         """
         return Key(self.keyObject.publickey())
 
+
     def fingerprint(self):
         """
         Get the user presentation of the fingerprint of this L{Key}.  As
@@ -474,6 +504,7 @@
         """
         return ':'.join([x.encode('hex') for x in md5(self.blob()).digest()])
 
+
     def type(self):
         """
         Return the type of the object we wrap.  Currently this can only be
@@ -490,6 +521,7 @@
         else:
             raise RuntimeError('unknown type of key: %s' % type)
 
+
     def sshType(self):
         """
         Return the type of the object we wrap as defined in the ssh protocol.
@@ -497,6 +529,7 @@
         """
         return {'RSA': 'ssh-rsa', 'DSA': 'ssh-dss'}[self.type()]
 
+
     def data(self):
         """
         Return the values of the public key as a dictionary.
@@ -510,6 +543,7 @@
                 keyData[name] = value
         return keyData
 
+
     def blob(self):
         """
         Return the public key blob for this key.  The blob is the
@@ -539,6 +573,7 @@
                     common.MP(data['q']) + common.MP(data['g']) +
                     common.MP(data['y']))
 
+
     def privateBlob(self):
         """
         Return the private key blob for this key.  The blob is the
@@ -573,6 +608,7 @@
                     common.MP(data['q']) + common.MP(data['g']) +
                     common.MP(data['y']) + common.MP(data['x']))
 
+
     def toString(self, type, extra=None):
         """
         Create a string representation of this key.  If the key is a private
@@ -599,6 +635,7 @@
         else:
             return method()
 
+
     def _toString_OPENSSH(self, extra):
         """
         Return a public or private OpenSSH string.  See
@@ -606,7 +643,8 @@
         string formats.  If extra is present, it represents a comment for a
         public key, or a passphrase for a private key.
 
-        @type extra: C{str}
+        @type extra: C{str} Comment for a public key or 
+                            Passphrase for a private key
         @rtype: C{str}
         """
         data = self.data()
@@ -646,6 +684,7 @@
             lines.append('-----END %s PRIVATE KEY-----' % self.type())
             return '\n'.join(lines)
 
+
     def _toString_LSH(self):
         """
         Return a public or private LSH key.  See _fromString_PUBLIC_LSH and
@@ -690,6 +729,7 @@
                                      ['y', common.MP(data['y'])[4:]],
                                      ['x', common.MP(data['x'])[4:]]]]])
 
+
     def _toString_AGENTV3(self):
         """
         Return a private Secure Shell Agent v3 key.  See
@@ -707,6 +747,7 @@
                           data['x'])
             return common.NS(self.sshType()) + ''.join(map(common.MP, values))
 
+
     def sign(self, data):
         """
         Returns a signature with this Key.
@@ -730,6 +771,7 @@
                             Util.number.long_to_bytes(sig[1], 20))
         return common.NS(self.sshType()) + ret
 
+
     def verify(self, signature, data):
         """
         Returns true if the signature for data is valid for this Key.
@@ -756,6 +798,7 @@
         return self.keyObject.verify(digest, numbers)
 
 
+
 def objectType(obj):
     """
     Return the SSH key type corresponding to a
@@ -775,6 +818,7 @@
         raise BadKeyError("invalid key object", obj)
 
 
+
 def pkcs1Pad(data, messageLength):
     """
     Pad out data to messageLength according to the PKCS#1 standard.
@@ -785,6 +829,7 @@
     return '\x01' + ('\xff' * lenPad) + '\x00' + data
 
 
+
 def pkcs1Digest(data, messageLength):
     """
     Create a message digest using the SHA1 hash algorithm according to the
@@ -796,6 +841,7 @@
     return pkcs1Pad(ID_SHA1 + digest, messageLength)
 
 
+
 def lenSig(obj):
     """
     Return the length of the signature in bytes for a key object.
