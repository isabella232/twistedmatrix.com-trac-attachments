diff --git twisted/conch/avatar.py twisted/conch/avatar.py
index a4c6819..a914da3 100644
--- twisted/conch/avatar.py
+++ twisted/conch/avatar.py
@@ -3,10 +3,10 @@ from interfaces import IConchUser
 from error import ConchError
 from ssh.connection import OPEN_UNKNOWN_CHANNEL_TYPE
 from twisted.python import log
-from zope.interface import implementer
+from zope import interface
 
-@implementer(IConchUser)
 class ConchUser:
+    interface.implements(IConchUser)
 
     def __init__(self):
         self.channelLookup = {}
diff --git twisted/conch/checkers.py twisted/conch/checkers.py
index de523f7..3cd6a0e 100644
--- twisted/conch/checkers.py
+++ twisted/conch/checkers.py
@@ -31,7 +31,7 @@ try:
 except ImportError:
     pamauth = None
 
-from zope.interface import implementer, providedBy
+from zope.interface import implements, providedBy
 
 from twisted.conch import error
 from twisted.conch.ssh import keys
@@ -82,7 +82,6 @@ def _shadowGetByName(username):
 
 
 
-@implementer(ICredentialsChecker)
 class UNIXPasswordDatabase:
     """
     A checker which validates users out of the UNIX password databases, or
@@ -93,6 +92,7 @@ class UNIXPasswordDatabase:
         database will be tried first, followed by the /etc/shadow database.
     """
     credentialInterfaces = IUsernamePassword,
+    implements(ICredentialsChecker)
 
 
     def __init__(self, getByNameFunctions=None):
@@ -119,12 +119,12 @@ class UNIXPasswordDatabase:
 
 
 
-@implementer(ICredentialsChecker)
 class SSHPublicKeyDatabase:
     """
     Checker that authenticates SSH public keys, based on public keys listed in
     authorized_keys and authorized_keys2 files in user .ssh/ directories.
     """
+    implements(ICredentialsChecker)
 
     credentialInterfaces = (ISSHPrivateKey,)
 
@@ -229,7 +229,6 @@ class SSHPublicKeyDatabase:
         return f
 
 
-@implementer(ICredentialsChecker)
 class SSHProtocolChecker:
     """
     SSHProtocolChecker is a checker that requires multiple authentications
@@ -242,6 +241,8 @@ class SSHProtocolChecker:
     returns True, the authentication has succeeded.
     """
 
+    implements(ICredentialsChecker)
+
     def __init__(self):
         self.checkers = {}
         self.successfulCredentials = {}
diff --git twisted/conch/client/knownhosts.py twisted/conch/client/knownhosts.py
index 7fd6e7c..48cd89b 100644
--- twisted/conch/client/knownhosts.py
+++ twisted/conch/client/knownhosts.py
@@ -12,7 +12,7 @@ from binascii import Error as DecodeError, b2a_base64
 import hmac
 import sys
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.python.randbytes import secureRandom
 if sys.version_info >= (2, 5):
@@ -94,7 +94,6 @@ class _BaseEntry(object):
 
 
 
-@implementer(IKnownHostEntry)
 class PlainEntry(_BaseEntry):
     """
     A L{PlainEntry} is a representation of a plain-text entry in a known_hosts
@@ -104,6 +103,8 @@ class PlainEntry(_BaseEntry):
     @type _hostnames: L{list} of L{str}
     """
 
+    implements(IKnownHostEntry)
+
     def __init__(self, hostnames, keyType, publicKey, comment):
         self._hostnames = hostnames
         super(PlainEntry, self).__init__(keyType, publicKey, comment)
@@ -163,13 +164,14 @@ class PlainEntry(_BaseEntry):
         return ' '.join(fields)
 
 
-@implementer(IKnownHostEntry)
 class UnparsedEntry(object):
     """
     L{UnparsedEntry} is an entry in a L{KnownHostsFile} which can't actually be
     parsed; therefore it matches no keys and no hosts.
     """
 
+    implements(IKnownHostEntry)
+
     def __init__(self, string):
         """
         Create an unparsed entry from a line in a known_hosts file which cannot
@@ -210,7 +212,6 @@ def _hmacedString(key, string):
 
 
 
-@implementer(IKnownHostEntry)
 class HashedEntry(_BaseEntry):
     """
     A L{HashedEntry} is a representation of an entry in a known_hosts file
@@ -224,6 +225,8 @@ class HashedEntry(_BaseEntry):
     known_hosts file as opposed to a plaintext one.
     """
 
+    implements(IKnownHostEntry)
+
     MAGIC = '|1|'
 
     def __init__(self, hostSalt, hostHash, keyType, publicKey, comment):
diff --git twisted/conch/insults/helper.py twisted/conch/insults/helper.py
index 341c00c..ed645c4 100644
--- twisted/conch/insults/helper.py
+++ twisted/conch/insults/helper.py
@@ -10,7 +10,7 @@ Partial in-memory terminal emulator
 
 import re, string
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet import defer, protocol, reactor
 from twisted.python import log
@@ -88,11 +88,11 @@ class CharacterAttribute:
         return ''
 
 # XXX - need to support scroll regions and scroll history
-@implementer(insults.ITerminalTransport)
 class TerminalBuffer(protocol.Protocol):
     """
     An in-memory terminal emulator.
     """
+    implements(insults.ITerminalTransport)
 
     for keyID in ('UP_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'LEFT_ARROW',
                   'HOME', 'INSERT', 'DELETE', 'END', 'PGUP', 'PGDN',
diff --git twisted/conch/insults/insults.py twisted/conch/insults/insults.py
index d415bf0..721551d 100644
--- twisted/conch/insults/insults.py
+++ twisted/conch/insults/insults.py
@@ -8,7 +8,7 @@ VT102 and VT220 terminal manipulation.
 @author: Jp Calderone
 """
 
-from zope.interface import implementer, Interface
+from zope.interface import implements, Interface
 
 from twisted.internet import protocol, defer, interfaces as iinternet
 
@@ -47,8 +47,8 @@ class ITerminalProtocol(Interface):
         reason is a Failure describing why.
         """
 
-@implementer(ITerminalProtocol)
 class TerminalProtocol(object):
+    implements(ITerminalProtocol)
 
     def makeConnection(self, terminal):
         # assert ITerminalTransport.providedBy(transport), "TerminalProtocol.makeConnection must be passed an ITerminalTransport implementor"
@@ -370,8 +370,8 @@ class _const(object):
 FUNCTION_KEYS = [
     _const(_name) for _name in _KEY_NAMES]
 
-@implementer(ITerminalTransport)
 class ServerProtocol(protocol.Protocol):
+    implements(ITerminalTransport)
 
     protocolFactory = None
     terminalProtocol = None
diff --git twisted/conch/manhole_ssh.py twisted/conch/manhole_ssh.py
index 7146545..a2297ef 100644
--- twisted/conch/manhole_ssh.py
+++ twisted/conch/manhole_ssh.py
@@ -8,7 +8,7 @@ insults/SSH integration support.
 @author: Jp Calderone
 """
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.conch import avatar, interfaces as iconch, error as econch
 from twisted.conch.ssh import factory, keys, session
@@ -58,8 +58,8 @@ class TerminalSessionTransport:
         # this bit up.
         self.chainedProtocol.terminalProtocol.terminalSize(width, height)
 
-@implementer(iconch.ISession)
 class TerminalSession(components.Adapter):
+    implements(iconch.ISession)
 
     transportFactory = TerminalSessionTransport
     chainedProtocolFactory = insults.ServerProtocol
diff --git twisted/conch/manhole_tap.py twisted/conch/manhole_tap.py
index 8ba57ae..4df7c83 100644
--- twisted/conch/manhole_tap.py
+++ twisted/conch/manhole_tap.py
@@ -7,7 +7,7 @@ TAP plugin for creating telnet- and ssh-accessible manhole servers.
 @author: Jp Calderone
 """
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet import protocol
 from twisted.application import service, strports
@@ -35,8 +35,8 @@ class chainedProtocolFactory:
     def __call__(self):
         return insults.ServerProtocol(manhole.ColoredManhole, self.namespace)
 
-@implementer(portal.IRealm)
 class _StupidRealm:
+    implements(portal.IRealm)
 
     def __init__(self, proto, *a, **kw):
         self.protocolFactory = proto
diff --git twisted/conch/recvline.py twisted/conch/recvline.py
index 8142bd3..6c8416a 100644
--- twisted/conch/recvline.py
+++ twisted/conch/recvline.py
@@ -10,7 +10,7 @@ Basic line editing support.
 
 import string
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.conch.insults import insults, helper
 
@@ -43,7 +43,6 @@ class Logging(object):
         logFile.write(name + '\n')
         return getattr(original, name)
 
-@implementer(insults.ITerminalTransport)
 class TransportSequence(object):
     """An L{ITerminalTransport} implementation which forwards calls to
     one or more other L{ITerminalTransport}s.
@@ -53,6 +52,7 @@ class TransportSequence(object):
     send to the real client and to a terminal emulator that lives in
     the server process.
     """
+    implements(insults.ITerminalTransport)
 
     for keyID in ('UP_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'LEFT_ARROW',
                   'HOME', 'INSERT', 'DELETE', 'END', 'PGUP', 'PGDN',
diff --git twisted/conch/ssh/address.py twisted/conch/ssh/address.py
index 98a9b34..c06f2bf 100644
--- twisted/conch/ssh/address.py
+++ twisted/conch/ssh/address.py
@@ -9,13 +9,12 @@ Maintainer: Paul Swartz
 
 @since: 12.1
 """
-from zope.interface import implementer
+from zope.interface import implements
 from twisted.internet.interfaces import IAddress
 from twisted.python import util
 
 
 
-@implementer(IAddress)
 class SSHTransportAddress(object, util.FancyEqMixin):
     """
     Object representing an SSH Transport endpoint.
@@ -24,6 +23,8 @@ class SSHTransportAddress(object, util.FancyEqMixin):
         which this transport address is connected.
     """
 
+    implements(IAddress)
+
     compareAttributes = ('address',)
 
     def __init__(self, address):
diff --git twisted/conch/ssh/channel.py twisted/conch/ssh/channel.py
index ccf2f34..f498aec 100644
--- twisted/conch/ssh/channel.py
+++ twisted/conch/ssh/channel.py
@@ -12,10 +12,9 @@ Maintainer: Paul Swartz
 
 from twisted.python import log
 from twisted.internet import interfaces
-from zope.interface import implementer
+from zope.interface import implements
 
 
-@implementer(interfaces.ITransport)
 class SSHChannel(log.Logger):
     """
     A class that represents a multiplexed channel over an SSH connection.
@@ -49,6 +48,8 @@ class SSHChannel(log.Logger):
     @type remoteClosed: C{bool}
     """
 
+    implements(interfaces.ITransport)
+
     name = None # only needed for client channels
 
     def __init__(self, localWindow = 0, localMaxPacket = 0,
diff --git twisted/conch/ssh/filetransfer.py twisted/conch/ssh/filetransfer.py
index 2dd00b4..9b11db0 100644
--- twisted/conch/ssh/filetransfer.py
+++ twisted/conch/ssh/filetransfer.py
@@ -770,9 +770,10 @@ class FileTransferClient(FileTransferBase):
         These items are sent by the client to indicate additional features.
         """
 
-@interface.implementer(ISFTPFile)
 class ClientFile:
 
+    interface.implements(ISFTPFile)
+
     def __init__(self, parent, handle):
         self.parent = parent
         self.handle = NS(handle)
diff --git twisted/conch/ssh/session.py twisted/conch/ssh/session.py
index 79c11f8..e9eca3e 100755
--- twisted/conch/ssh/session.py
+++ twisted/conch/ssh/session.py
@@ -13,7 +13,7 @@ import struct
 import signal
 import sys
 import os
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet import interfaces, protocol
 from twisted.python import log
@@ -181,7 +181,6 @@ SUPPORTED_SIGNALS = ["ABRT", "ALRM", "FPE", "HUP", "ILL", "INT", "KILL",
 
 
 
-@implementer(interfaces.ITransport)
 class SSHSessionProcessProtocol(protocol.ProcessProtocol):
     """I am both an L{IProcessProtocol} and an L{ITransport}.
 
@@ -189,6 +188,8 @@ class SSHSessionProcessProtocol(protocol.ProcessProtocol):
     local subsystem.
     """
 
+    implements(interfaces.ITransport)
+
     # once initialized, a dictionary mapping signal values to strings
     # that follow RFC 4254.
     _signalValuesToNames = None
diff --git twisted/conch/telnet.py twisted/conch/telnet.py
index 47ba7c5..c90fe1a 100644
--- twisted/conch/telnet.py
+++ twisted/conch/telnet.py
@@ -10,7 +10,7 @@ Telnet protocol implementation.
 
 import struct
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet import protocol, interfaces as iinternet, defer
 from twisted.python import log
@@ -314,8 +314,8 @@ class AlreadyDisabled(NegotiationError):
 class AlreadyNegotiating(NegotiationError):
     pass
 
-@implementer(ITelnetProtocol)
 class TelnetProtocol(protocol.Protocol):
+    implements(ITelnetProtocol)
 
     def unhandledCommand(self, command, argument):
         pass
@@ -901,6 +901,7 @@ class TelnetTransport(Telnet, ProtocolTransportMixin):
 
 
 class TelnetBootstrapProtocol(TelnetProtocol, ProtocolTransportMixin):
+    implements()
 
     protocol = None
 
diff --git twisted/conch/test/test_conch.py twisted/conch/test/test_conch.py
index 845b783..95219d4 100644
--- twisted/conch/test/test_conch.py
+++ twisted/conch/test/test_conch.py
@@ -5,7 +5,7 @@
 import os, sys, socket
 from itertools import count
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.cred import portal
 from twisted.internet import reactor, defer, protocol
@@ -381,7 +381,6 @@ class ForwardingMixin(ConchServerSetupMixin):
 
 
 
-@implementer(ISession)
 class RekeyAvatar(ConchUser):
     """
     This avatar implements a shell which sends 60 numbered lines to whatever
@@ -390,6 +389,11 @@ class RekeyAvatar(ConchUser):
     60 lines is selected as being enough to send more than 2kB of traffic, the
     amount the client is configured to initiate a rekey after.
     """
+    # Conventionally there is a separate adapter object which provides ISession
+    # for the user, but making the user provide ISession directly works too.
+    # This isn't a full implementation of ISession though, just enough to make
+    # these tests pass.
+    implements(ISession)
 
     def __init__(self):
         ConchUser.__init__(self)
diff --git twisted/conch/test/test_session.py twisted/conch/test/test_session.py
index 14a78d5..4db1629 100644
--- twisted/conch/test/test_session.py
+++ twisted/conch/test/test_session.py
@@ -9,7 +9,7 @@ See also RFC 4254.
 
 import os, signal, sys, struct
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.internet.address import IPv4Address
 from twisted.internet.error import ProcessTerminated, ProcessDone
@@ -59,7 +59,6 @@ class StubAvatar:
 
 
 
-@implementer(session.ISession)
 class StubSessionForStubAvatar(object):
     """
     A stub ISession implementation for our StubAvatar.  The instance
@@ -86,6 +85,9 @@ class StubSessionForStubAvatar(object):
     """
 
 
+    implements(session.ISession)
+
+
     def __init__(self, avatar):
         """
         Store the avatar we're adapting.
diff --git twisted/conch/test/test_telnet.py twisted/conch/test/test_telnet.py
index c29794d..9b5bf76 100644
--- twisted/conch/test/test_telnet.py
+++ twisted/conch/test/test_telnet.py
@@ -6,7 +6,7 @@
 Tests for L{twisted.conch.telnet}.
 """
 
-from zope.interface import implementer
+from zope.interface import implements
 from zope.interface.verify import verifyObject
 
 from twisted.internet import defer
@@ -17,8 +17,8 @@ from twisted.trial import unittest
 from twisted.test import proto_helpers
 
 
-@implementer(telnet.ITelnetProtocol)
 class TestProtocol:
+    implements(telnet.ITelnetProtocol)
 
     localEnableable = ()
     remoteEnableable = ()
diff --git twisted/conch/test/test_userauth.py twisted/conch/test/test_userauth.py
index 4d74837..d027faa 100644
--- twisted/conch/test/test_userauth.py
+++ twisted/conch/test/test_userauth.py
@@ -8,7 +8,7 @@ Tests for the implementation of the ssh-userauth service.
 Maintainer: Paul Swartz
 """
 
-from zope.interface import implementer
+from zope.interface import implements
 
 from twisted.cred.checkers import ICredentialsChecker
 from twisted.cred.credentials import IUsernamePassword, ISSHPrivateKey
@@ -193,7 +193,6 @@ class FakeTransport(transport.SSHTransportBase):
 
 
 
-@implementer(IRealm)
 class Realm(object):
     """
     A mock realm for testing L{userauth.SSHUserAuthServer}.
@@ -201,6 +200,7 @@ class Realm(object):
     This realm is not actually used in the course of testing, so it returns the
     simplest thing that could possibly work.
     """
+    implements(IRealm)
 
 
     def requestAvatar(self, avatarId, mind, *interfaces):
@@ -208,13 +208,13 @@ class Realm(object):
 
 
 
-@implementer(ICredentialsChecker)
 class PasswordChecker(object):
     """
     A very simple username/password checker which authenticates anyone whose
     password matches their username and rejects all others.
     """
     credentialInterfaces = (IUsernamePassword,)
+    implements(ICredentialsChecker)
 
 
     def requestAvatarId(self, creds):
@@ -224,13 +224,13 @@ class PasswordChecker(object):
 
 
 
-@implementer(ICredentialsChecker)
 class PrivateKeyChecker(object):
     """
     A very simple public key checker which authenticates anyone whose
     public/private keypair is the same keydata.public/privateRSA_openssh.
     """
     credentialInterfaces = (ISSHPrivateKey,)
+    implements(ICredentialsChecker)
 
 
 
@@ -246,13 +246,13 @@ class PrivateKeyChecker(object):
 
 
 
-@implementer(ICredentialsChecker)
 class PAMChecker(object):
     """
     A simple PAM checker which asks the user for a password, verifying them
     if the password is the same as their username.
     """
     credentialInterfaces = (IPluggableAuthenticationModules,)
+    implements(ICredentialsChecker)
 
 
     def requestAvatarId(self, creds):
@@ -265,12 +265,12 @@ class PAMChecker(object):
 
 
 
-@implementer(ICredentialsChecker)
 class AnonymousChecker(object):
     """
     A simple checker which isn't supported by L{SSHUserAuthServer}.
     """
     credentialInterfaces = (IAnonymous,)
+    implements(ICredentialsChecker)
 
 
 
diff --git twisted/conch/unix.py twisted/conch/unix.py
index 8caa71a..3a44be0 100644
--- twisted/conch/unix.py
+++ twisted/conch/unix.py
@@ -24,8 +24,8 @@ try:
 except ImportError:
     utmp = None
 
-@interface.implementer(portal.IRealm)
 class UnixSSHRealm:
+    interface.implements(portal.IRealm)
 
     def requestAvatar(self, username, mind, *interfaces):
         user = UnixConchUser(username)
@@ -125,9 +125,10 @@ class UnixConchUser(ConchUser):
             os.seteuid(euid)
         return r
 
-@interface.implementer(ISession)
 class SSHSessionForUnixConchUser:
 
+    interface.implements(ISession)
+
     def __init__(self, avatar):
         self.avatar = avatar
         self. environ = {'PATH':'/bin:/usr/bin:/usr/local/bin'}
@@ -289,9 +290,10 @@ class SSHSessionForUnixConchUser:
         self.oldWrite(data)
 
 
-@interface.implementer(ISFTPServer)
 class SFTPServerForUnixConchUser:
 
+    interface.implements(ISFTPServer)
+
     def __init__(self, avatar):
         self.avatar = avatar
 
@@ -376,9 +378,10 @@ class SFTPServerForUnixConchUser:
     def extendedRequest(self, extName, extData):
         raise NotImplementedError
 
-@interface.implementer(ISFTPFile)
 class UnixSFTPFile:
 
+    interface.implements(ISFTPFile)
+
     def __init__(self, server, filename, flags, attrs):
         self.server = server
         openFlags = 0
