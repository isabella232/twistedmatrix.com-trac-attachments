Index: defer.xhtml
===================================================================
RCS file: /cvs/Twisted/doc/howto/defer.xhtml,v
retrieving revision 1.9
diff -u -r1.9 defer.xhtml
--- defer.xhtml	15 Feb 2004 02:03:55 -0000	1.9
+++ defer.xhtml	25 Feb 2004 01:29:08 -0000
@@ -57,7 +57,8 @@
 </p>
 
 <p>
-The basic idea behind Deferreds, and other solutions to this problem, is to keep the CPU active as much as possible.
+The basic idea behind Deferreds, and other solutions to this
+problem, is to keep the CPU as active as possible.
 If one task is waiting on data, rather than have the CPU (and the program!)
 idle waiting for that data (a process normally called &quot;blocking&quot;), the program performs other operations in the
 meantime, and waits for some signal that data is ready to be processed before
@@ -66,7 +67,7 @@
 
 <p>
 In Twisted, a function signals to the calling function that it is waiting by
-returning a Deferred. When that data is available, the program activates
+returning a Deferred. When the data is available, the program activates
 the callbacks on that Deferred to process the data.
 </p>
 
@@ -94,7 +95,7 @@
 
 <h3> Don't Call Us, We'll Call You</h3>
 
-<p> Twisted can not support blocking calls in most of its code, since it is
+<p> Twisted cannot support blocking calls in most of its code, since it is
 single threaded, and event based.  The solution for this issue is to refactor
 the code, so that instead of blocking until data is available, we return
 immediately, and use a callback to notify the requester once the data
@@ -121,7 +122,7 @@
 
 <p> There are several things missing in this simple example.  There is no way
 to know if the data never comes back; no mechanism for handling errors.  The
-example does not handle a multiple callback functions, nor does it give a
+example does not handle multiple callback functions, nor does it give a
 method to merge arguments before and after execution.  Further, there is no
 way to distinguish between different calls to gotData from different
 producer objects. <code> Deferred</code> solves these problems, by creating 
@@ -399,8 +400,8 @@
   <code class="py-prototype"> addCallbacks(self, callback[, errback, callbackArgs,
   errbackArgs, errbackKeywords, asDefaults])</code> 
   
-  <p> This is the method with which you will use to interact
-  with Deferred. It adds a pair of callbacks <q> parallel</q> to
+  <p> This is the method you will use to interact with Deferred.
+  It adds a pair of callbacks in <q> parallel</q> with
   each other (see diagram above) in the list of callbacks
   made when the Deferred is called back to. The signature of
   a method added using addCallbacks should be
@@ -528,33 +529,34 @@
 
 <h3> A Brief Interlude: Technical Details</h3>
 
-<p> While deferreds greatly simplify the process of writing asynchronous code by
-providing a standard for registering callbacks, there are some subtle and
+<p> Deferreds greatly simplify the process of writing asynchronous code by
+providing a standard for registering callbacks, but there are some subtle and
 sometimes confusing rules that you need to follow if you are going to use
 them. This mostly applies to people who are writing new systems that use
 Deferreds internally, and not writers of applications that just add callbacks
 to Deferreds produced and processed by other systems. Nevertheless, it is good
 to know.</p>
 
-<p> Deferreds are one-shot. A generalization of the Deferred API to generic
-event-sources is in progress -- watch this space for updates! -- but Deferred
-itself is only for events that occur once. You can only call
-<code> Deferred.callback</code> or <code> Deferred.errback</code> once. The
-processing chain continues each time you add new callbacks to an
+<p> Deferreds are one-shot. We are currently generalizing the
+Deferred API to handle generic event-sources -- watch this space
+for updates! -- but Deferred itself is only for events that occur
+once. You can only call <code> Deferred.callback</code> or
+<code> Deferred.errback</code> once. The processing chain
+continues each time you add new callbacks to an
 already-called-back-to Deferred.</p>
 
 <p> The important consequence of this is that <strong> sometimes, addCallbacks
 will call its argument synchronously, and sometimes it will not</strong> . In
-situations where callbacks modify state, it is highly desirable for the chain
-of processing to halt until all callbacks are added. For this, it is possible
+situations where callbacks modify state, the chain of processing
+should halt until all callbacks are added. For this, it is possible
 to <code> pause</code> and <code> unpause</code>
 a Deferred's processing chain while you are adding lots of callbacks.</p>
 
-<p> Be careful when you use these methods! If you <code> pause</code> a Deferred,
-it is <em> your</em> responsibility to make sure that you unpause it; code that
-calls <code> callback</code> or <code> errback</code> should
-<strong> never</strong> call <code> unpause</code> , as this would negate its
-usefulness!</p>
+<p> Be careful when you use these methods! If you
+<code> pause</code> a Deferred, it is <em> your</em> responsibility
+to unpause it; code that calls <code> callback</code> or
+<code> errback</code> should <strong> never</strong> call
+<code> unpause</code> , as this would negate its usefulness!</p>
 
 <h3> Advanced Processing Chain Control</h3>
 
@@ -588,10 +590,10 @@
 synchronous. For example, a user authentication function might be able to
 check in memory whether a user is authenticated, allowing the authentication
 function to return an immediate result, or it may need to wait on
-network data, in which case the programmer will return a Deferred to be fired
+network data, in which case it should return a Deferred to be fired
 when that data arrives. However, a function that wants to check if a user is
-authenticated will then need to be able to deal with immediate results and
-with Deferreds.
+authenticated will then need to accept both immediate results <em> and</em>
+Deferreds.
 </p>
 
 <p>
@@ -712,9 +714,9 @@
 <h2> DeferredList</h2>
 
 <p> Sometimes you want to be notified after several different events have all
-happened, rather than individually waiting for each one.  For example, you may
-want to wait for all the connections in a list to close.  <code
-	class="API"> twisted.internet.defer.DeferredList</code> is the way to do
+happened, rather than waiting for each one individually.  For example, you may
+want to wait for all the connections in a list to close.  
+<code class="API"> twisted.internet.defer.DeferredList</code> is the way to do
 this.</p>
 
 <p> To create a DeferredList from multiple Deferreds, you simply pass a list of
@@ -824,3 +826,4 @@
 
 </body>
 </html>
+
