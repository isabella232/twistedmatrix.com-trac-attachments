***************
*** 94,100 ****
  
  <h3> Don't Call Us, We'll Call You</h3>
  
- <p> Twisted can not support blocking calls in most of its code, since it is
  single threaded, and event based.  The solution for this issue is to refactor
  the code, so that instead of blocking until data is available, we return
  immediately, and use a callback to notify the requester once the data
--- 95,101 ----
  
  <h3> Don't Call Us, We'll Call You</h3>
  
+ <p> Twisted cannot support blocking calls in most of its code, since it is
  single threaded, and event based.  The solution for this issue is to refactor
  the code, so that instead of blocking until data is available, we return
  immediately, and use a callback to notify the requester once the data
***************
*** 399,406 ****
    <code class="py-prototype"> addCallbacks(self, callback[, errback, callbackArgs,
    errbackArgs, errbackKeywords, asDefaults])</code> 
    
-   <p> This is the method with which you will use to interact
-   with Deferred. It adds a pair of callbacks <q> parallel</q> to
    each other (see diagram above) in the list of callbacks
    made when the Deferred is called back to. The signature of
    a method added using addCallbacks should be
--- 400,407 ----
    <code class="py-prototype"> addCallbacks(self, callback[, errback, callbackArgs,
    errbackArgs, errbackKeywords, asDefaults])</code> 
    
+   <p> This is the method you will use to interact with Deferred.
+   It adds a pair of callbacks in <q> parallel</q> with
    each other (see diagram above) in the list of callbacks
    made when the Deferred is called back to. The signature of
    a method added using addCallbacks should be
***************
*** 528,560 ****
  
  <h3> A Brief Interlude: Technical Details</h3>
  
- <p> While deferreds greatly simplify the process of writing asynchronous code by
- providing a standard for registering callbacks, there are some subtle and
  sometimes confusing rules that you need to follow if you are going to use
  them. This mostly applies to people who are writing new systems that use
  Deferreds internally, and not writers of applications that just add callbacks
  to Deferreds produced and processed by other systems. Nevertheless, it is good
  to know.</p>
  
- <p> Deferreds are one-shot. A generalization of the Deferred API to generic
- event-sources is in progress -- watch this space for updates! -- but Deferred
- itself is only for events that occur once. You can only call
- <code> Deferred.callback</code> or <code> Deferred.errback</code> once. The
- processing chain continues each time you add new callbacks to an
  already-called-back-to Deferred.</p>
  
  <p> The important consequence of this is that <strong> sometimes, addCallbacks
  will call its argument synchronously, and sometimes it will not</strong> . In
- situations where callbacks modify state, it is highly desirable for the chain
- of processing to halt until all callbacks are added. For this, it is possible
  to <code> pause</code> and <code> unpause</code>
  a Deferred's processing chain while you are adding lots of callbacks.</p>
  
- <p> Be careful when you use these methods! If you <code> pause</code> a Deferred,
- it is <em> your</em> responsibility to make sure that you unpause it; code that
- calls <code> callback</code> or <code> errback</code> should
- <strong> never</strong> call <code> unpause</code> , as this would negate its
- usefulness!</p>
  
  <h3> Advanced Processing Chain Control</h3>
  
--- 529,562 ----
  
  <h3> A Brief Interlude: Technical Details</h3>
  
+ <p> Deferreds greatly simplify the process of writing asynchronous code by
+ providing a standard for registering callbacks, but there are some subtle and
  sometimes confusing rules that you need to follow if you are going to use
  them. This mostly applies to people who are writing new systems that use
  Deferreds internally, and not writers of applications that just add callbacks
  to Deferreds produced and processed by other systems. Nevertheless, it is good
  to know.</p>
  
+ <p> Deferreds are one-shot. We are currently generalizing the
+ Deferred API to handle generic event-sources -- watch this space
+ for updates! -- but Deferred itself is only for events that occur
+ once. You can only call <code> Deferred.callback</code> or
+ <code> Deferred.errback</code> once. The processing chain
+ continues each time you add new callbacks to an
  already-called-back-to Deferred.</p>
  
  <p> The important consequence of this is that <strong> sometimes, addCallbacks
  will call its argument synchronously, and sometimes it will not</strong> . In
+ situations where callbacks modify state, the chain of processing
+ should halt until all callbacks are added. For this, it is possible
  to <code> pause</code> and <code> unpause</code>
  a Deferred's processing chain while you are adding lots of callbacks.</p>
  
+ <p> Be careful when you use these methods! If you
+ <code> pause</code> a Deferred, it is <em> your</em> responsibility
+ to unpause it; code that calls <code> callback</code> or
+ <code> errback</code> should <strong> never</strong> call
+ <code> unpause</code> , as this would negate its usefulness!</p>
  
  <h3> Advanced Processing Chain Control</h3>
  
***************
*** 712,720 ****
  <h2> DeferredList</h2>
  
  <p> Sometimes you want to be notified after several different events have all
- happened, rather than individually waiting for each one.  For example, you may
- want to wait for all the connections in a list to close.  <code
- 	class="API"> twisted.internet.defer.DeferredList</code> is the way to do
  this.</p>
  
  <p> To create a DeferredList from multiple Deferreds, you simply pass a list of
--- 714,722 ----
  <h2> DeferredList</h2>
  
  <p> Sometimes you want to be notified after several different events have all
+ happened, rather than waiting for each one individually.  For example, you may
+ want to wait for all the connections in a list to close.  
+ <code class="API"> twisted.internet.defer.DeferredList</code> is the way to do
  this.</p>
  
  <p> To create a DeferredList from multiple Deferreds, you simply pass a list of
