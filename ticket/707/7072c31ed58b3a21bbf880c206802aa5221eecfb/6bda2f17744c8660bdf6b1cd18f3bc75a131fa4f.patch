Index: fix-dry-run/twisted/trial/test/test_util.py
===================================================================
--- fix-dry-run/twisted/trial/test/test_util.py	(revision 27386)
+++ fix-dry-run/twisted/trial/test/test_util.py	(working copy)
@@ -531,3 +531,23 @@
         self.assertEquals(reporter.errors[0][1].value.selectables,
                           [repr(selectable)])
 
+
+
+class TestAllTestsGenerator(TestCase):
+    """
+    Tests for L{util._depthFirst}.
+    """
+
+    def setUp(self):
+        self.data = [ [ [ 1, [ [ 2, [ 3 ], [], 4, 5, ], [], [6], ], 7, 8], 9], 0]
+
+    def test_depthFirst(self):
+        """
+        Check that L{util._depthFirst} returns all of the non-iterables 
+        from the data set in the correct order.
+        """
+        result = []
+        for i in util._depthFirst(self.data):
+            result.append(i)
+
+        self.assertEqual(result, [1,2,3,4,5,6,7,8,9,0])
Index: fix-dry-run/twisted/trial/runner.py
===================================================================
--- fix-dry-run/twisted/trial/runner.py	(revision 27386)
+++ fix-dry-run/twisted/trial/runner.py	(working copy)
@@ -844,7 +844,10 @@
         suite = TrialSuite([test])
         startTime = time.time()
         if self.mode == self.DRY_RUN:
-            suite.visit(DryRunVisitor(result).markSuccessful)
+            for single in util._depthFirst(suite):
+                result.startTest(single)
+                result.addSuccess(single)
+                result.stopTest(single)
         else:
             if self.mode == self.DEBUG:
                 # open question - should this be self.debug() instead.
Index: fix-dry-run/twisted/trial/util.py
===================================================================
--- fix-dry-run/twisted/trial/util.py	(revision 27386)
+++ fix-dry-run/twisted/trial/util.py	(working copy)
@@ -329,6 +329,24 @@
 
 
 
+def _depthFirst(iterable):
+    """
+    A generator that returns a depth first list of all 
+    non-iterable items contained within a nested set of iterables.
+
+    @param suite: An iterable of iterables and non-iterables.
+
+    @return: A generator that yields each non-iterable in turn.
+    """
+    for thing in iterable:
+        if hasattr(thing, '__iter__'):
+            for subthing in _depthFirst(thing):
+                yield subthing
+        else:
+            yield thing
+
+
+
 def _runSequentially(callables, stopOnFirstError=False):
     """
     Run the given callables one after the other. If a callable returns a
